; ModuleID = 'builtins.c'
source_filename = "builtins.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.elims = type { i32, i32 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.call_expr_arg_iterator_d = type { %union.tree_node*, i32, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.const_call_expr_arg_iterator_d = type { %union.tree_node*, i32, i32 }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }

@.str = private unnamed_addr constant [13 x i8] c"NOT_BUILT_IN\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"BUILT_IN_FRONTEND\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"BUILT_IN_MD\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"BUILT_IN_NORMAL\00", align 1
@built_in_class_names = dso_local constant [4 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0)], align 16, !dbg !0
@.str.4 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ACOS\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ACOSF\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ACOSH\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ACOSHF\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ACOSHL\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ACOSL\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ASIN\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ASINF\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ASINH\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ASINHF\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ASINHL\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ASINL\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ATAN\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ATAN2\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ATAN2F\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ATAN2L\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ATANF\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ATANH\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ATANHF\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ATANHL\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ATANL\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CBRT\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CBRTF\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CBRTL\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CEIL\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CEILF\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CEILL\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"BUILT_IN_COPYSIGN\00", align 1
@.str.32 = private unnamed_addr constant [19 x i8] c"BUILT_IN_COPYSIGNF\00", align 1
@.str.33 = private unnamed_addr constant [19 x i8] c"BUILT_IN_COPYSIGNL\00", align 1
@.str.34 = private unnamed_addr constant [13 x i8] c"BUILT_IN_COS\00", align 1
@.str.35 = private unnamed_addr constant [14 x i8] c"BUILT_IN_COSF\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"BUILT_IN_COSH\00", align 1
@.str.37 = private unnamed_addr constant [15 x i8] c"BUILT_IN_COSHF\00", align 1
@.str.38 = private unnamed_addr constant [15 x i8] c"BUILT_IN_COSHL\00", align 1
@.str.39 = private unnamed_addr constant [14 x i8] c"BUILT_IN_COSL\00", align 1
@.str.40 = private unnamed_addr constant [14 x i8] c"BUILT_IN_DREM\00", align 1
@.str.41 = private unnamed_addr constant [15 x i8] c"BUILT_IN_DREMF\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"BUILT_IN_DREML\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"BUILT_IN_ERF\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ERFC\00", align 1
@.str.45 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ERFCF\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ERFCL\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ERFF\00", align 1
@.str.48 = private unnamed_addr constant [14 x i8] c"BUILT_IN_ERFL\00", align 1
@.str.49 = private unnamed_addr constant [13 x i8] c"BUILT_IN_EXP\00", align 1
@.str.50 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXP10\00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXP10F\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXP10L\00", align 1
@.str.53 = private unnamed_addr constant [14 x i8] c"BUILT_IN_EXP2\00", align 1
@.str.54 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXP2F\00", align 1
@.str.55 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXP2L\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"BUILT_IN_EXPF\00", align 1
@.str.57 = private unnamed_addr constant [14 x i8] c"BUILT_IN_EXPL\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXPM1\00", align 1
@.str.59 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXPM1F\00", align 1
@.str.60 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXPM1L\00", align 1
@.str.61 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FABS\00", align 1
@.str.62 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FABSF\00", align 1
@.str.63 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FABSL\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FDIM\00", align 1
@.str.65 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FDIMF\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FDIML\00", align 1
@.str.67 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FLOOR\00", align 1
@.str.68 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FLOORF\00", align 1
@.str.69 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FLOORL\00", align 1
@.str.70 = private unnamed_addr constant [13 x i8] c"BUILT_IN_FMA\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FMAF\00", align 1
@.str.72 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FMAL\00", align 1
@.str.73 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FMAX\00", align 1
@.str.74 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMAXF\00", align 1
@.str.75 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMAXL\00", align 1
@.str.76 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FMIN\00", align 1
@.str.77 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMINF\00", align 1
@.str.78 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMINL\00", align 1
@.str.79 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FMOD\00", align 1
@.str.80 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMODF\00", align 1
@.str.81 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FMODL\00", align 1
@.str.82 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FREXP\00", align 1
@.str.83 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FREXPF\00", align 1
@.str.84 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FREXPL\00", align 1
@.str.85 = private unnamed_addr constant [15 x i8] c"BUILT_IN_GAMMA\00", align 1
@.str.86 = private unnamed_addr constant [16 x i8] c"BUILT_IN_GAMMAF\00", align 1
@.str.87 = private unnamed_addr constant [16 x i8] c"BUILT_IN_GAMMAL\00", align 1
@.str.88 = private unnamed_addr constant [17 x i8] c"BUILT_IN_GAMMA_R\00", align 1
@.str.89 = private unnamed_addr constant [18 x i8] c"BUILT_IN_GAMMAF_R\00", align 1
@.str.90 = private unnamed_addr constant [18 x i8] c"BUILT_IN_GAMMAL_R\00", align 1
@.str.91 = private unnamed_addr constant [18 x i8] c"BUILT_IN_HUGE_VAL\00", align 1
@.str.92 = private unnamed_addr constant [19 x i8] c"BUILT_IN_HUGE_VALF\00", align 1
@.str.93 = private unnamed_addr constant [19 x i8] c"BUILT_IN_HUGE_VALL\00", align 1
@.str.94 = private unnamed_addr constant [15 x i8] c"BUILT_IN_HYPOT\00", align 1
@.str.95 = private unnamed_addr constant [16 x i8] c"BUILT_IN_HYPOTF\00", align 1
@.str.96 = private unnamed_addr constant [16 x i8] c"BUILT_IN_HYPOTL\00", align 1
@.str.97 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ILOGB\00", align 1
@.str.98 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ILOGBF\00", align 1
@.str.99 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ILOGBL\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"BUILT_IN_INF\00", align 1
@.str.101 = private unnamed_addr constant [14 x i8] c"BUILT_IN_INFF\00", align 1
@.str.102 = private unnamed_addr constant [14 x i8] c"BUILT_IN_INFL\00", align 1
@.str.103 = private unnamed_addr constant [16 x i8] c"BUILT_IN_INFD32\00", align 1
@.str.104 = private unnamed_addr constant [16 x i8] c"BUILT_IN_INFD64\00", align 1
@.str.105 = private unnamed_addr constant [17 x i8] c"BUILT_IN_INFD128\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"BUILT_IN_J0\00", align 1
@.str.107 = private unnamed_addr constant [13 x i8] c"BUILT_IN_J0F\00", align 1
@.str.108 = private unnamed_addr constant [13 x i8] c"BUILT_IN_J0L\00", align 1
@.str.109 = private unnamed_addr constant [12 x i8] c"BUILT_IN_J1\00", align 1
@.str.110 = private unnamed_addr constant [13 x i8] c"BUILT_IN_J1F\00", align 1
@.str.111 = private unnamed_addr constant [13 x i8] c"BUILT_IN_J1L\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"BUILT_IN_JN\00", align 1
@.str.113 = private unnamed_addr constant [13 x i8] c"BUILT_IN_JNF\00", align 1
@.str.114 = private unnamed_addr constant [13 x i8] c"BUILT_IN_JNL\00", align 1
@.str.115 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LCEIL\00", align 1
@.str.116 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LCEILF\00", align 1
@.str.117 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LCEILL\00", align 1
@.str.118 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LDEXP\00", align 1
@.str.119 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LDEXPF\00", align 1
@.str.120 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LDEXPL\00", align 1
@.str.121 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LFLOOR\00", align 1
@.str.122 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LFLOORF\00", align 1
@.str.123 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LFLOORL\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LGAMMA\00", align 1
@.str.125 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LGAMMAF\00", align 1
@.str.126 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LGAMMAL\00", align 1
@.str.127 = private unnamed_addr constant [18 x i8] c"BUILT_IN_LGAMMA_R\00", align 1
@.str.128 = private unnamed_addr constant [19 x i8] c"BUILT_IN_LGAMMAF_R\00", align 1
@.str.129 = private unnamed_addr constant [19 x i8] c"BUILT_IN_LGAMMAL_R\00", align 1
@.str.130 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LLCEIL\00", align 1
@.str.131 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLCEILF\00", align 1
@.str.132 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLCEILL\00", align 1
@.str.133 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLFLOOR\00", align 1
@.str.134 = private unnamed_addr constant [18 x i8] c"BUILT_IN_LLFLOORF\00", align 1
@.str.135 = private unnamed_addr constant [18 x i8] c"BUILT_IN_LLFLOORL\00", align 1
@.str.136 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LLRINT\00", align 1
@.str.137 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLRINTF\00", align 1
@.str.138 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLRINTL\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LLROUND\00", align 1
@.str.140 = private unnamed_addr constant [18 x i8] c"BUILT_IN_LLROUNDF\00", align 1
@.str.141 = private unnamed_addr constant [18 x i8] c"BUILT_IN_LLROUNDL\00", align 1
@.str.142 = private unnamed_addr constant [13 x i8] c"BUILT_IN_LOG\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOG10\00", align 1
@.str.144 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LOG10F\00", align 1
@.str.145 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LOG10L\00", align 1
@.str.146 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOG1P\00", align 1
@.str.147 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LOG1PF\00", align 1
@.str.148 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LOG1PL\00", align 1
@.str.149 = private unnamed_addr constant [14 x i8] c"BUILT_IN_LOG2\00", align 1
@.str.150 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOG2F\00", align 1
@.str.151 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOG2L\00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c"BUILT_IN_LOGB\00", align 1
@.str.153 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOGBF\00", align 1
@.str.154 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LOGBL\00", align 1
@.str.155 = private unnamed_addr constant [14 x i8] c"BUILT_IN_LOGF\00", align 1
@.str.156 = private unnamed_addr constant [14 x i8] c"BUILT_IN_LOGL\00", align 1
@.str.157 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LRINT\00", align 1
@.str.158 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LRINTF\00", align 1
@.str.159 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LRINTL\00", align 1
@.str.160 = private unnamed_addr constant [16 x i8] c"BUILT_IN_LROUND\00", align 1
@.str.161 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LROUNDF\00", align 1
@.str.162 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LROUNDL\00", align 1
@.str.163 = private unnamed_addr constant [14 x i8] c"BUILT_IN_MODF\00", align 1
@.str.164 = private unnamed_addr constant [15 x i8] c"BUILT_IN_MODFF\00", align 1
@.str.165 = private unnamed_addr constant [15 x i8] c"BUILT_IN_MODFL\00", align 1
@.str.166 = private unnamed_addr constant [13 x i8] c"BUILT_IN_NAN\00", align 1
@.str.167 = private unnamed_addr constant [14 x i8] c"BUILT_IN_NANF\00", align 1
@.str.168 = private unnamed_addr constant [14 x i8] c"BUILT_IN_NANL\00", align 1
@.str.169 = private unnamed_addr constant [16 x i8] c"BUILT_IN_NAND32\00", align 1
@.str.170 = private unnamed_addr constant [16 x i8] c"BUILT_IN_NAND64\00", align 1
@.str.171 = private unnamed_addr constant [17 x i8] c"BUILT_IN_NAND128\00", align 1
@.str.172 = private unnamed_addr constant [14 x i8] c"BUILT_IN_NANS\00", align 1
@.str.173 = private unnamed_addr constant [15 x i8] c"BUILT_IN_NANSF\00", align 1
@.str.174 = private unnamed_addr constant [15 x i8] c"BUILT_IN_NANSL\00", align 1
@.str.175 = private unnamed_addr constant [19 x i8] c"BUILT_IN_NEARBYINT\00", align 1
@.str.176 = private unnamed_addr constant [20 x i8] c"BUILT_IN_NEARBYINTF\00", align 1
@.str.177 = private unnamed_addr constant [20 x i8] c"BUILT_IN_NEARBYINTL\00", align 1
@.str.178 = private unnamed_addr constant [19 x i8] c"BUILT_IN_NEXTAFTER\00", align 1
@.str.179 = private unnamed_addr constant [20 x i8] c"BUILT_IN_NEXTAFTERF\00", align 1
@.str.180 = private unnamed_addr constant [20 x i8] c"BUILT_IN_NEXTAFTERL\00", align 1
@.str.181 = private unnamed_addr constant [20 x i8] c"BUILT_IN_NEXTTOWARD\00", align 1
@.str.182 = private unnamed_addr constant [21 x i8] c"BUILT_IN_NEXTTOWARDF\00", align 1
@.str.183 = private unnamed_addr constant [21 x i8] c"BUILT_IN_NEXTTOWARDL\00", align 1
@.str.184 = private unnamed_addr constant [13 x i8] c"BUILT_IN_POW\00", align 1
@.str.185 = private unnamed_addr constant [15 x i8] c"BUILT_IN_POW10\00", align 1
@.str.186 = private unnamed_addr constant [16 x i8] c"BUILT_IN_POW10F\00", align 1
@.str.187 = private unnamed_addr constant [16 x i8] c"BUILT_IN_POW10L\00", align 1
@.str.188 = private unnamed_addr constant [14 x i8] c"BUILT_IN_POWF\00", align 1
@.str.189 = private unnamed_addr constant [14 x i8] c"BUILT_IN_POWI\00", align 1
@.str.190 = private unnamed_addr constant [15 x i8] c"BUILT_IN_POWIF\00", align 1
@.str.191 = private unnamed_addr constant [15 x i8] c"BUILT_IN_POWIL\00", align 1
@.str.192 = private unnamed_addr constant [14 x i8] c"BUILT_IN_POWL\00", align 1
@.str.193 = private unnamed_addr constant [19 x i8] c"BUILT_IN_REMAINDER\00", align 1
@.str.194 = private unnamed_addr constant [20 x i8] c"BUILT_IN_REMAINDERF\00", align 1
@.str.195 = private unnamed_addr constant [20 x i8] c"BUILT_IN_REMAINDERL\00", align 1
@.str.196 = private unnamed_addr constant [16 x i8] c"BUILT_IN_REMQUO\00", align 1
@.str.197 = private unnamed_addr constant [17 x i8] c"BUILT_IN_REMQUOF\00", align 1
@.str.198 = private unnamed_addr constant [17 x i8] c"BUILT_IN_REMQUOL\00", align 1
@.str.199 = private unnamed_addr constant [14 x i8] c"BUILT_IN_RINT\00", align 1
@.str.200 = private unnamed_addr constant [15 x i8] c"BUILT_IN_RINTF\00", align 1
@.str.201 = private unnamed_addr constant [15 x i8] c"BUILT_IN_RINTL\00", align 1
@.str.202 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ROUND\00", align 1
@.str.203 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ROUNDF\00", align 1
@.str.204 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ROUNDL\00", align 1
@.str.205 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SCALB\00", align 1
@.str.206 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SCALBF\00", align 1
@.str.207 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SCALBL\00", align 1
@.str.208 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SCALBLN\00", align 1
@.str.209 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SCALBLNF\00", align 1
@.str.210 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SCALBLNL\00", align 1
@.str.211 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SCALBN\00", align 1
@.str.212 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SCALBNF\00", align 1
@.str.213 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SCALBNL\00", align 1
@.str.214 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SIGNBIT\00", align 1
@.str.215 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SIGNBITF\00", align 1
@.str.216 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SIGNBITL\00", align 1
@.str.217 = private unnamed_addr constant [20 x i8] c"BUILT_IN_SIGNBITD32\00", align 1
@.str.218 = private unnamed_addr constant [20 x i8] c"BUILT_IN_SIGNBITD64\00", align 1
@.str.219 = private unnamed_addr constant [21 x i8] c"BUILT_IN_SIGNBITD128\00", align 1
@.str.220 = private unnamed_addr constant [21 x i8] c"BUILT_IN_SIGNIFICAND\00", align 1
@.str.221 = private unnamed_addr constant [22 x i8] c"BUILT_IN_SIGNIFICANDF\00", align 1
@.str.222 = private unnamed_addr constant [22 x i8] c"BUILT_IN_SIGNIFICANDL\00", align 1
@.str.223 = private unnamed_addr constant [13 x i8] c"BUILT_IN_SIN\00", align 1
@.str.224 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SINCOS\00", align 1
@.str.225 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SINCOSF\00", align 1
@.str.226 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SINCOSL\00", align 1
@.str.227 = private unnamed_addr constant [14 x i8] c"BUILT_IN_SINF\00", align 1
@.str.228 = private unnamed_addr constant [14 x i8] c"BUILT_IN_SINH\00", align 1
@.str.229 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SINHF\00", align 1
@.str.230 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SINHL\00", align 1
@.str.231 = private unnamed_addr constant [14 x i8] c"BUILT_IN_SINL\00", align 1
@.str.232 = private unnamed_addr constant [14 x i8] c"BUILT_IN_SQRT\00", align 1
@.str.233 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SQRTF\00", align 1
@.str.234 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SQRTL\00", align 1
@.str.235 = private unnamed_addr constant [13 x i8] c"BUILT_IN_TAN\00", align 1
@.str.236 = private unnamed_addr constant [14 x i8] c"BUILT_IN_TANF\00", align 1
@.str.237 = private unnamed_addr constant [14 x i8] c"BUILT_IN_TANH\00", align 1
@.str.238 = private unnamed_addr constant [15 x i8] c"BUILT_IN_TANHF\00", align 1
@.str.239 = private unnamed_addr constant [15 x i8] c"BUILT_IN_TANHL\00", align 1
@.str.240 = private unnamed_addr constant [14 x i8] c"BUILT_IN_TANL\00", align 1
@.str.241 = private unnamed_addr constant [16 x i8] c"BUILT_IN_TGAMMA\00", align 1
@.str.242 = private unnamed_addr constant [17 x i8] c"BUILT_IN_TGAMMAF\00", align 1
@.str.243 = private unnamed_addr constant [17 x i8] c"BUILT_IN_TGAMMAL\00", align 1
@.str.244 = private unnamed_addr constant [15 x i8] c"BUILT_IN_TRUNC\00", align 1
@.str.245 = private unnamed_addr constant [16 x i8] c"BUILT_IN_TRUNCF\00", align 1
@.str.246 = private unnamed_addr constant [16 x i8] c"BUILT_IN_TRUNCL\00", align 1
@.str.247 = private unnamed_addr constant [12 x i8] c"BUILT_IN_Y0\00", align 1
@.str.248 = private unnamed_addr constant [13 x i8] c"BUILT_IN_Y0F\00", align 1
@.str.249 = private unnamed_addr constant [13 x i8] c"BUILT_IN_Y0L\00", align 1
@.str.250 = private unnamed_addr constant [12 x i8] c"BUILT_IN_Y1\00", align 1
@.str.251 = private unnamed_addr constant [13 x i8] c"BUILT_IN_Y1F\00", align 1
@.str.252 = private unnamed_addr constant [13 x i8] c"BUILT_IN_Y1L\00", align 1
@.str.253 = private unnamed_addr constant [12 x i8] c"BUILT_IN_YN\00", align 1
@.str.254 = private unnamed_addr constant [13 x i8] c"BUILT_IN_YNF\00", align 1
@.str.255 = private unnamed_addr constant [13 x i8] c"BUILT_IN_YNL\00", align 1
@.str.256 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CABS\00", align 1
@.str.257 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CABSF\00", align 1
@.str.258 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CABSL\00", align 1
@.str.259 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CACOS\00", align 1
@.str.260 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CACOSF\00", align 1
@.str.261 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CACOSH\00", align 1
@.str.262 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CACOSHF\00", align 1
@.str.263 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CACOSHL\00", align 1
@.str.264 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CACOSL\00", align 1
@.str.265 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CARG\00", align 1
@.str.266 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CARGF\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CARGL\00", align 1
@.str.268 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CASIN\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CASINF\00", align 1
@.str.270 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CASINH\00", align 1
@.str.271 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CASINHF\00", align 1
@.str.272 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CASINHL\00", align 1
@.str.273 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CASINL\00", align 1
@.str.274 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CATAN\00", align 1
@.str.275 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CATANF\00", align 1
@.str.276 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CATANH\00", align 1
@.str.277 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CATANHF\00", align 1
@.str.278 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CATANHL\00", align 1
@.str.279 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CATANL\00", align 1
@.str.280 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CCOS\00", align 1
@.str.281 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CCOSF\00", align 1
@.str.282 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CCOSH\00", align 1
@.str.283 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CCOSHF\00", align 1
@.str.284 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CCOSHL\00", align 1
@.str.285 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CCOSL\00", align 1
@.str.286 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CEXP\00", align 1
@.str.287 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CEXPF\00", align 1
@.str.288 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CEXPL\00", align 1
@.str.289 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CEXPI\00", align 1
@.str.290 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CEXPIF\00", align 1
@.str.291 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CEXPIL\00", align 1
@.str.292 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CIMAG\00", align 1
@.str.293 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CIMAGF\00", align 1
@.str.294 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CIMAGL\00", align 1
@.str.295 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CLOG\00", align 1
@.str.296 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CLOGF\00", align 1
@.str.297 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CLOGL\00", align 1
@.str.298 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CLOG10\00", align 1
@.str.299 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CLOG10F\00", align 1
@.str.300 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CLOG10L\00", align 1
@.str.301 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CONJ\00", align 1
@.str.302 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CONJF\00", align 1
@.str.303 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CONJL\00", align 1
@.str.304 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CPOW\00", align 1
@.str.305 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CPOWF\00", align 1
@.str.306 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CPOWL\00", align 1
@.str.307 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CPROJ\00", align 1
@.str.308 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CPROJF\00", align 1
@.str.309 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CPROJL\00", align 1
@.str.310 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CREAL\00", align 1
@.str.311 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CREALF\00", align 1
@.str.312 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CREALL\00", align 1
@.str.313 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CSIN\00", align 1
@.str.314 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CSINF\00", align 1
@.str.315 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CSINH\00", align 1
@.str.316 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CSINHF\00", align 1
@.str.317 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CSINHL\00", align 1
@.str.318 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CSINL\00", align 1
@.str.319 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CSQRT\00", align 1
@.str.320 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CSQRTF\00", align 1
@.str.321 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CSQRTL\00", align 1
@.str.322 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CTAN\00", align 1
@.str.323 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CTANF\00", align 1
@.str.324 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CTANH\00", align 1
@.str.325 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CTANHF\00", align 1
@.str.326 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CTANHL\00", align 1
@.str.327 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CTANL\00", align 1
@.str.328 = private unnamed_addr constant [14 x i8] c"BUILT_IN_BCMP\00", align 1
@.str.329 = private unnamed_addr constant [15 x i8] c"BUILT_IN_BCOPY\00", align 1
@.str.330 = private unnamed_addr constant [15 x i8] c"BUILT_IN_BZERO\00", align 1
@.str.331 = private unnamed_addr constant [15 x i8] c"BUILT_IN_INDEX\00", align 1
@.str.332 = private unnamed_addr constant [16 x i8] c"BUILT_IN_MEMCHR\00", align 1
@.str.333 = private unnamed_addr constant [16 x i8] c"BUILT_IN_MEMCMP\00", align 1
@.str.334 = private unnamed_addr constant [16 x i8] c"BUILT_IN_MEMCPY\00", align 1
@.str.335 = private unnamed_addr constant [17 x i8] c"BUILT_IN_MEMMOVE\00", align 1
@.str.336 = private unnamed_addr constant [17 x i8] c"BUILT_IN_MEMPCPY\00", align 1
@.str.337 = private unnamed_addr constant [16 x i8] c"BUILT_IN_MEMSET\00", align 1
@.str.338 = private unnamed_addr constant [16 x i8] c"BUILT_IN_RINDEX\00", align 1
@.str.339 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STPCPY\00", align 1
@.str.340 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STPNCPY\00", align 1
@.str.341 = private unnamed_addr constant [20 x i8] c"BUILT_IN_STRCASECMP\00", align 1
@.str.342 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRCAT\00", align 1
@.str.343 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRCHR\00", align 1
@.str.344 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRCMP\00", align 1
@.str.345 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRCPY\00", align 1
@.str.346 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRCSPN\00", align 1
@.str.347 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRDUP\00", align 1
@.str.348 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRNDUP\00", align 1
@.str.349 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRLEN\00", align 1
@.str.350 = private unnamed_addr constant [21 x i8] c"BUILT_IN_STRNCASECMP\00", align 1
@.str.351 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRNCAT\00", align 1
@.str.352 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRNCMP\00", align 1
@.str.353 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRNCPY\00", align 1
@.str.354 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRPBRK\00", align 1
@.str.355 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRRCHR\00", align 1
@.str.356 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRSPN\00", align 1
@.str.357 = private unnamed_addr constant [16 x i8] c"BUILT_IN_STRSTR\00", align 1
@.str.358 = private unnamed_addr constant [17 x i8] c"BUILT_IN_FPRINTF\00", align 1
@.str.359 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FPRINTF_UNLOCKED\00", align 1
@.str.360 = private unnamed_addr constant [14 x i8] c"BUILT_IN_PUTC\00", align 1
@.str.361 = private unnamed_addr constant [23 x i8] c"BUILT_IN_PUTC_UNLOCKED\00", align 1
@.str.362 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FPUTC\00", align 1
@.str.363 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FPUTC_UNLOCKED\00", align 1
@.str.364 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FPUTS\00", align 1
@.str.365 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FPUTS_UNLOCKED\00", align 1
@.str.366 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FSCANF\00", align 1
@.str.367 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FWRITE\00", align 1
@.str.368 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FWRITE_UNLOCKED\00", align 1
@.str.369 = private unnamed_addr constant [16 x i8] c"BUILT_IN_PRINTF\00", align 1
@.str.370 = private unnamed_addr constant [25 x i8] c"BUILT_IN_PRINTF_UNLOCKED\00", align 1
@.str.371 = private unnamed_addr constant [17 x i8] c"BUILT_IN_PUTCHAR\00", align 1
@.str.372 = private unnamed_addr constant [26 x i8] c"BUILT_IN_PUTCHAR_UNLOCKED\00", align 1
@.str.373 = private unnamed_addr constant [14 x i8] c"BUILT_IN_PUTS\00", align 1
@.str.374 = private unnamed_addr constant [23 x i8] c"BUILT_IN_PUTS_UNLOCKED\00", align 1
@.str.375 = private unnamed_addr constant [15 x i8] c"BUILT_IN_SCANF\00", align 1
@.str.376 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SNPRINTF\00", align 1
@.str.377 = private unnamed_addr constant [17 x i8] c"BUILT_IN_SPRINTF\00", align 1
@.str.378 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SSCANF\00", align 1
@.str.379 = private unnamed_addr constant [18 x i8] c"BUILT_IN_VFPRINTF\00", align 1
@.str.380 = private unnamed_addr constant [17 x i8] c"BUILT_IN_VFSCANF\00", align 1
@.str.381 = private unnamed_addr constant [17 x i8] c"BUILT_IN_VPRINTF\00", align 1
@.str.382 = private unnamed_addr constant [16 x i8] c"BUILT_IN_VSCANF\00", align 1
@.str.383 = private unnamed_addr constant [19 x i8] c"BUILT_IN_VSNPRINTF\00", align 1
@.str.384 = private unnamed_addr constant [18 x i8] c"BUILT_IN_VSPRINTF\00", align 1
@.str.385 = private unnamed_addr constant [17 x i8] c"BUILT_IN_VSSCANF\00", align 1
@.str.386 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISALNUM\00", align 1
@.str.387 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISALPHA\00", align 1
@.str.388 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISASCII\00", align 1
@.str.389 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISBLANK\00", align 1
@.str.390 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISCNTRL\00", align 1
@.str.391 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISDIGIT\00", align 1
@.str.392 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISGRAPH\00", align 1
@.str.393 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISLOWER\00", align 1
@.str.394 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISPRINT\00", align 1
@.str.395 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISPUNCT\00", align 1
@.str.396 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISSPACE\00", align 1
@.str.397 = private unnamed_addr constant [17 x i8] c"BUILT_IN_ISUPPER\00", align 1
@.str.398 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISXDIGIT\00", align 1
@.str.399 = private unnamed_addr constant [17 x i8] c"BUILT_IN_TOASCII\00", align 1
@.str.400 = private unnamed_addr constant [17 x i8] c"BUILT_IN_TOLOWER\00", align 1
@.str.401 = private unnamed_addr constant [17 x i8] c"BUILT_IN_TOUPPER\00", align 1
@.str.402 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWALNUM\00", align 1
@.str.403 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWALPHA\00", align 1
@.str.404 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWBLANK\00", align 1
@.str.405 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWCNTRL\00", align 1
@.str.406 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWDIGIT\00", align 1
@.str.407 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWGRAPH\00", align 1
@.str.408 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWLOWER\00", align 1
@.str.409 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWPRINT\00", align 1
@.str.410 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWPUNCT\00", align 1
@.str.411 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWSPACE\00", align 1
@.str.412 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISWUPPER\00", align 1
@.str.413 = private unnamed_addr constant [19 x i8] c"BUILT_IN_ISWXDIGIT\00", align 1
@.str.414 = private unnamed_addr constant [18 x i8] c"BUILT_IN_TOWLOWER\00", align 1
@.str.415 = private unnamed_addr constant [18 x i8] c"BUILT_IN_TOWUPPER\00", align 1
@.str.416 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ABORT\00", align 1
@.str.417 = private unnamed_addr constant [13 x i8] c"BUILT_IN_ABS\00", align 1
@.str.418 = private unnamed_addr constant [36 x i8] c"BUILT_IN_AGGREGATE_INCOMING_ADDRESS\00", align 1
@.str.419 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ALLOCA\00", align 1
@.str.420 = private unnamed_addr constant [15 x i8] c"BUILT_IN_APPLY\00", align 1
@.str.421 = private unnamed_addr constant [20 x i8] c"BUILT_IN_APPLY_ARGS\00", align 1
@.str.422 = private unnamed_addr constant [19 x i8] c"BUILT_IN_ARGS_INFO\00", align 1
@.str.423 = private unnamed_addr constant [17 x i8] c"BUILT_IN_BSWAP32\00", align 1
@.str.424 = private unnamed_addr constant [17 x i8] c"BUILT_IN_BSWAP64\00", align 1
@.str.425 = private unnamed_addr constant [21 x i8] c"BUILT_IN_CLEAR_CACHE\00", align 1
@.str.426 = private unnamed_addr constant [16 x i8] c"BUILT_IN_CALLOC\00", align 1
@.str.427 = private unnamed_addr constant [23 x i8] c"BUILT_IN_CLASSIFY_TYPE\00", align 1
@.str.428 = private unnamed_addr constant [13 x i8] c"BUILT_IN_CLZ\00", align 1
@.str.429 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CLZIMAX\00", align 1
@.str.430 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CLZL\00", align 1
@.str.431 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CLZLL\00", align 1
@.str.432 = private unnamed_addr constant [20 x i8] c"BUILT_IN_CONSTANT_P\00", align 1
@.str.433 = private unnamed_addr constant [13 x i8] c"BUILT_IN_CTZ\00", align 1
@.str.434 = private unnamed_addr constant [17 x i8] c"BUILT_IN_CTZIMAX\00", align 1
@.str.435 = private unnamed_addr constant [14 x i8] c"BUILT_IN_CTZL\00", align 1
@.str.436 = private unnamed_addr constant [15 x i8] c"BUILT_IN_CTZLL\00", align 1
@.str.437 = private unnamed_addr constant [19 x i8] c"BUILT_IN_DCGETTEXT\00", align 1
@.str.438 = private unnamed_addr constant [18 x i8] c"BUILT_IN_DGETTEXT\00", align 1
@.str.439 = private unnamed_addr constant [19 x i8] c"BUILT_IN_DWARF_CFA\00", align 1
@.str.440 = private unnamed_addr constant [25 x i8] c"BUILT_IN_DWARF_SP_COLUMN\00", align 1
@.str.441 = private unnamed_addr constant [19 x i8] c"BUILT_IN_EH_RETURN\00", align 1
@.str.442 = private unnamed_addr constant [30 x i8] c"BUILT_IN_EH_RETURN_DATA_REGNO\00", align 1
@.str.443 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXECL\00", align 1
@.str.444 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXECLP\00", align 1
@.str.445 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXECLE\00", align 1
@.str.446 = private unnamed_addr constant [15 x i8] c"BUILT_IN_EXECV\00", align 1
@.str.447 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXECVP\00", align 1
@.str.448 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXECVE\00", align 1
@.str.449 = private unnamed_addr constant [14 x i8] c"BUILT_IN_EXIT\00", align 1
@.str.450 = private unnamed_addr constant [16 x i8] c"BUILT_IN_EXPECT\00", align 1
@.str.451 = private unnamed_addr constant [24 x i8] c"BUILT_IN_EXTEND_POINTER\00", align 1
@.str.452 = private unnamed_addr constant [29 x i8] c"BUILT_IN_EXTRACT_RETURN_ADDR\00", align 1
@.str.453 = private unnamed_addr constant [13 x i8] c"BUILT_IN_FFS\00", align 1
@.str.454 = private unnamed_addr constant [17 x i8] c"BUILT_IN_FFSIMAX\00", align 1
@.str.455 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FFSL\00", align 1
@.str.456 = private unnamed_addr constant [15 x i8] c"BUILT_IN_FFSLL\00", align 1
@.str.457 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FORK\00", align 1
@.str.458 = private unnamed_addr constant [23 x i8] c"BUILT_IN_FRAME_ADDRESS\00", align 1
@.str.459 = private unnamed_addr constant [14 x i8] c"BUILT_IN_FREE\00", align 1
@.str.460 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FROB_RETURN_ADDR\00", align 1
@.str.461 = private unnamed_addr constant [17 x i8] c"BUILT_IN_GETTEXT\00", align 1
@.str.462 = private unnamed_addr constant [17 x i8] c"BUILT_IN_IMAXABS\00", align 1
@.str.463 = private unnamed_addr constant [30 x i8] c"BUILT_IN_INIT_DWARF_REG_SIZES\00", align 1
@.str.464 = private unnamed_addr constant [16 x i8] c"BUILT_IN_FINITE\00", align 1
@.str.465 = private unnamed_addr constant [17 x i8] c"BUILT_IN_FINITEF\00", align 1
@.str.466 = private unnamed_addr constant [17 x i8] c"BUILT_IN_FINITEL\00", align 1
@.str.467 = private unnamed_addr constant [19 x i8] c"BUILT_IN_FINITED32\00", align 1
@.str.468 = private unnamed_addr constant [19 x i8] c"BUILT_IN_FINITED64\00", align 1
@.str.469 = private unnamed_addr constant [20 x i8] c"BUILT_IN_FINITED128\00", align 1
@.str.470 = private unnamed_addr constant [20 x i8] c"BUILT_IN_FPCLASSIFY\00", align 1
@.str.471 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISFINITE\00", align 1
@.str.472 = private unnamed_addr constant [20 x i8] c"BUILT_IN_ISINF_SIGN\00", align 1
@.str.473 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ISINF\00", align 1
@.str.474 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ISINFF\00", align 1
@.str.475 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ISINFL\00", align 1
@.str.476 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISINFD32\00", align 1
@.str.477 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISINFD64\00", align 1
@.str.478 = private unnamed_addr constant [19 x i8] c"BUILT_IN_ISINFD128\00", align 1
@.str.479 = private unnamed_addr constant [15 x i8] c"BUILT_IN_ISNAN\00", align 1
@.str.480 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ISNANF\00", align 1
@.str.481 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ISNANL\00", align 1
@.str.482 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISNAND32\00", align 1
@.str.483 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISNAND64\00", align 1
@.str.484 = private unnamed_addr constant [19 x i8] c"BUILT_IN_ISNAND128\00", align 1
@.str.485 = private unnamed_addr constant [18 x i8] c"BUILT_IN_ISNORMAL\00", align 1
@.str.486 = private unnamed_addr constant [19 x i8] c"BUILT_IN_ISGREATER\00", align 1
@.str.487 = private unnamed_addr constant [24 x i8] c"BUILT_IN_ISGREATEREQUAL\00", align 1
@.str.488 = private unnamed_addr constant [16 x i8] c"BUILT_IN_ISLESS\00", align 1
@.str.489 = private unnamed_addr constant [21 x i8] c"BUILT_IN_ISLESSEQUAL\00", align 1
@.str.490 = private unnamed_addr constant [23 x i8] c"BUILT_IN_ISLESSGREATER\00", align 1
@.str.491 = private unnamed_addr constant [21 x i8] c"BUILT_IN_ISUNORDERED\00", align 1
@.str.492 = private unnamed_addr constant [14 x i8] c"BUILT_IN_LABS\00", align 1
@.str.493 = private unnamed_addr constant [15 x i8] c"BUILT_IN_LLABS\00", align 1
@.str.494 = private unnamed_addr constant [17 x i8] c"BUILT_IN_LONGJMP\00", align 1
@.str.495 = private unnamed_addr constant [16 x i8] c"BUILT_IN_MALLOC\00", align 1
@.str.496 = private unnamed_addr constant [18 x i8] c"BUILT_IN_NEXT_ARG\00", align 1
@.str.497 = private unnamed_addr constant [16 x i8] c"BUILT_IN_PARITY\00", align 1
@.str.498 = private unnamed_addr constant [20 x i8] c"BUILT_IN_PARITYIMAX\00", align 1
@.str.499 = private unnamed_addr constant [17 x i8] c"BUILT_IN_PARITYL\00", align 1
@.str.500 = private unnamed_addr constant [18 x i8] c"BUILT_IN_PARITYLL\00", align 1
@.str.501 = private unnamed_addr constant [18 x i8] c"BUILT_IN_POPCOUNT\00", align 1
@.str.502 = private unnamed_addr constant [22 x i8] c"BUILT_IN_POPCOUNTIMAX\00", align 1
@.str.503 = private unnamed_addr constant [19 x i8] c"BUILT_IN_POPCOUNTL\00", align 1
@.str.504 = private unnamed_addr constant [20 x i8] c"BUILT_IN_POPCOUNTLL\00", align 1
@.str.505 = private unnamed_addr constant [18 x i8] c"BUILT_IN_PREFETCH\00", align 1
@.str.506 = private unnamed_addr constant [17 x i8] c"BUILT_IN_REALLOC\00", align 1
@.str.507 = private unnamed_addr constant [16 x i8] c"BUILT_IN_RETURN\00", align 1
@.str.508 = private unnamed_addr constant [24 x i8] c"BUILT_IN_RETURN_ADDRESS\00", align 1
@.str.509 = private unnamed_addr constant [18 x i8] c"BUILT_IN_SAVEREGS\00", align 1
@.str.510 = private unnamed_addr constant [16 x i8] c"BUILT_IN_SETJMP\00", align 1
@.str.511 = private unnamed_addr constant [17 x i8] c"BUILT_IN_STRFMON\00", align 1
@.str.512 = private unnamed_addr constant [18 x i8] c"BUILT_IN_STRFTIME\00", align 1
@.str.513 = private unnamed_addr constant [14 x i8] c"BUILT_IN_TRAP\00", align 1
@.str.514 = private unnamed_addr constant [21 x i8] c"BUILT_IN_UNREACHABLE\00", align 1
@.str.515 = private unnamed_addr constant [21 x i8] c"BUILT_IN_UNWIND_INIT\00", align 1
@.str.516 = private unnamed_addr constant [27 x i8] c"BUILT_IN_UPDATE_SETJMP_BUF\00", align 1
@.str.517 = private unnamed_addr constant [17 x i8] c"BUILT_IN_VA_COPY\00", align 1
@.str.518 = private unnamed_addr constant [16 x i8] c"BUILT_IN_VA_END\00", align 1
@.str.519 = private unnamed_addr constant [18 x i8] c"BUILT_IN_VA_START\00", align 1
@.str.520 = private unnamed_addr constant [21 x i8] c"BUILT_IN_VA_ARG_PACK\00", align 1
@.str.521 = private unnamed_addr constant [25 x i8] c"BUILT_IN_VA_ARG_PACK_LEN\00", align 1
@.str.522 = private unnamed_addr constant [15 x i8] c"BUILT_IN__EXIT\00", align 1
@.str.523 = private unnamed_addr constant [16 x i8] c"BUILT_IN__EXIT2\00", align 1
@.str.524 = private unnamed_addr constant [25 x i8] c"BUILT_IN_INIT_TRAMPOLINE\00", align 1
@.str.525 = private unnamed_addr constant [27 x i8] c"BUILT_IN_ADJUST_TRAMPOLINE\00", align 1
@.str.526 = private unnamed_addr constant [23 x i8] c"BUILT_IN_NONLOCAL_GOTO\00", align 1
@.str.527 = private unnamed_addr constant [22 x i8] c"BUILT_IN_SETJMP_SETUP\00", align 1
@.str.528 = private unnamed_addr constant [27 x i8] c"BUILT_IN_SETJMP_DISPATCHER\00", align 1
@.str.529 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SETJMP_RECEIVER\00", align 1
@.str.530 = private unnamed_addr constant [20 x i8] c"BUILT_IN_STACK_SAVE\00", align 1
@.str.531 = private unnamed_addr constant [23 x i8] c"BUILT_IN_STACK_RESTORE\00", align 1
@.str.532 = private unnamed_addr constant [21 x i8] c"BUILT_IN_OBJECT_SIZE\00", align 1
@.str.533 = private unnamed_addr constant [20 x i8] c"BUILT_IN_MEMCPY_CHK\00", align 1
@.str.534 = private unnamed_addr constant [21 x i8] c"BUILT_IN_MEMMOVE_CHK\00", align 1
@.str.535 = private unnamed_addr constant [21 x i8] c"BUILT_IN_MEMPCPY_CHK\00", align 1
@.str.536 = private unnamed_addr constant [20 x i8] c"BUILT_IN_MEMSET_CHK\00", align 1
@.str.537 = private unnamed_addr constant [20 x i8] c"BUILT_IN_STPCPY_CHK\00", align 1
@.str.538 = private unnamed_addr constant [20 x i8] c"BUILT_IN_STRCAT_CHK\00", align 1
@.str.539 = private unnamed_addr constant [20 x i8] c"BUILT_IN_STRCPY_CHK\00", align 1
@.str.540 = private unnamed_addr constant [21 x i8] c"BUILT_IN_STRNCAT_CHK\00", align 1
@.str.541 = private unnamed_addr constant [21 x i8] c"BUILT_IN_STRNCPY_CHK\00", align 1
@.str.542 = private unnamed_addr constant [22 x i8] c"BUILT_IN_SNPRINTF_CHK\00", align 1
@.str.543 = private unnamed_addr constant [21 x i8] c"BUILT_IN_SPRINTF_CHK\00", align 1
@.str.544 = private unnamed_addr constant [23 x i8] c"BUILT_IN_VSNPRINTF_CHK\00", align 1
@.str.545 = private unnamed_addr constant [22 x i8] c"BUILT_IN_VSPRINTF_CHK\00", align 1
@.str.546 = private unnamed_addr constant [21 x i8] c"BUILT_IN_FPRINTF_CHK\00", align 1
@.str.547 = private unnamed_addr constant [20 x i8] c"BUILT_IN_PRINTF_CHK\00", align 1
@.str.548 = private unnamed_addr constant [22 x i8] c"BUILT_IN_VFPRINTF_CHK\00", align 1
@.str.549 = private unnamed_addr constant [21 x i8] c"BUILT_IN_VPRINTF_CHK\00", align 1
@.str.550 = private unnamed_addr constant [28 x i8] c"BUILT_IN_PROFILE_FUNC_ENTER\00", align 1
@.str.551 = private unnamed_addr constant [27 x i8] c"BUILT_IN_PROFILE_FUNC_EXIT\00", align 1
@.str.552 = private unnamed_addr constant [28 x i8] c"BUILT_IN_EMUTLS_GET_ADDRESS\00", align 1
@.str.553 = private unnamed_addr constant [32 x i8] c"BUILT_IN_EMUTLS_REGISTER_COMMON\00", align 1
@.str.554 = private unnamed_addr constant [23 x i8] c"BUILT_IN_UNWIND_RESUME\00", align 1
@.str.555 = private unnamed_addr constant [25 x i8] c"BUILT_IN_CXA_END_CLEANUP\00", align 1
@.str.556 = private unnamed_addr constant [20 x i8] c"BUILT_IN_EH_POINTER\00", align 1
@.str.557 = private unnamed_addr constant [19 x i8] c"BUILT_IN_EH_FILTER\00", align 1
@.str.558 = private unnamed_addr constant [24 x i8] c"BUILT_IN_EH_COPY_VALUES\00", align 1
@.str.559 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_ADD_N\00", align 1
@.str.560 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_ADD_1\00", align 1
@.str.561 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_ADD_2\00", align 1
@.str.562 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_ADD_4\00", align 1
@.str.563 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_ADD_8\00", align 1
@.str.564 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_ADD_16\00", align 1
@.str.565 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_SUB_N\00", align 1
@.str.566 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_SUB_1\00", align 1
@.str.567 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_SUB_2\00", align 1
@.str.568 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_SUB_4\00", align 1
@.str.569 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_SUB_8\00", align 1
@.str.570 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_SUB_16\00", align 1
@.str.571 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FETCH_AND_OR_N\00", align 1
@.str.572 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FETCH_AND_OR_1\00", align 1
@.str.573 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FETCH_AND_OR_2\00", align 1
@.str.574 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FETCH_AND_OR_4\00", align 1
@.str.575 = private unnamed_addr constant [24 x i8] c"BUILT_IN_FETCH_AND_OR_8\00", align 1
@.str.576 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_OR_16\00", align 1
@.str.577 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_AND_N\00", align 1
@.str.578 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_AND_1\00", align 1
@.str.579 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_AND_2\00", align 1
@.str.580 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_AND_4\00", align 1
@.str.581 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_AND_8\00", align 1
@.str.582 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_AND_16\00", align 1
@.str.583 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_XOR_N\00", align 1
@.str.584 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_XOR_1\00", align 1
@.str.585 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_XOR_2\00", align 1
@.str.586 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_XOR_4\00", align 1
@.str.587 = private unnamed_addr constant [25 x i8] c"BUILT_IN_FETCH_AND_XOR_8\00", align 1
@.str.588 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_XOR_16\00", align 1
@.str.589 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_NAND_N\00", align 1
@.str.590 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_NAND_1\00", align 1
@.str.591 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_NAND_2\00", align 1
@.str.592 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_NAND_4\00", align 1
@.str.593 = private unnamed_addr constant [26 x i8] c"BUILT_IN_FETCH_AND_NAND_8\00", align 1
@.str.594 = private unnamed_addr constant [27 x i8] c"BUILT_IN_FETCH_AND_NAND_16\00", align 1
@.str.595 = private unnamed_addr constant [25 x i8] c"BUILT_IN_ADD_AND_FETCH_N\00", align 1
@.str.596 = private unnamed_addr constant [25 x i8] c"BUILT_IN_ADD_AND_FETCH_1\00", align 1
@.str.597 = private unnamed_addr constant [25 x i8] c"BUILT_IN_ADD_AND_FETCH_2\00", align 1
@.str.598 = private unnamed_addr constant [25 x i8] c"BUILT_IN_ADD_AND_FETCH_4\00", align 1
@.str.599 = private unnamed_addr constant [25 x i8] c"BUILT_IN_ADD_AND_FETCH_8\00", align 1
@.str.600 = private unnamed_addr constant [26 x i8] c"BUILT_IN_ADD_AND_FETCH_16\00", align 1
@.str.601 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SUB_AND_FETCH_N\00", align 1
@.str.602 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SUB_AND_FETCH_1\00", align 1
@.str.603 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SUB_AND_FETCH_2\00", align 1
@.str.604 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SUB_AND_FETCH_4\00", align 1
@.str.605 = private unnamed_addr constant [25 x i8] c"BUILT_IN_SUB_AND_FETCH_8\00", align 1
@.str.606 = private unnamed_addr constant [26 x i8] c"BUILT_IN_SUB_AND_FETCH_16\00", align 1
@.str.607 = private unnamed_addr constant [24 x i8] c"BUILT_IN_OR_AND_FETCH_N\00", align 1
@.str.608 = private unnamed_addr constant [24 x i8] c"BUILT_IN_OR_AND_FETCH_1\00", align 1
@.str.609 = private unnamed_addr constant [24 x i8] c"BUILT_IN_OR_AND_FETCH_2\00", align 1
@.str.610 = private unnamed_addr constant [24 x i8] c"BUILT_IN_OR_AND_FETCH_4\00", align 1
@.str.611 = private unnamed_addr constant [24 x i8] c"BUILT_IN_OR_AND_FETCH_8\00", align 1
@.str.612 = private unnamed_addr constant [25 x i8] c"BUILT_IN_OR_AND_FETCH_16\00", align 1
@.str.613 = private unnamed_addr constant [25 x i8] c"BUILT_IN_AND_AND_FETCH_N\00", align 1
@.str.614 = private unnamed_addr constant [25 x i8] c"BUILT_IN_AND_AND_FETCH_1\00", align 1
@.str.615 = private unnamed_addr constant [25 x i8] c"BUILT_IN_AND_AND_FETCH_2\00", align 1
@.str.616 = private unnamed_addr constant [25 x i8] c"BUILT_IN_AND_AND_FETCH_4\00", align 1
@.str.617 = private unnamed_addr constant [25 x i8] c"BUILT_IN_AND_AND_FETCH_8\00", align 1
@.str.618 = private unnamed_addr constant [26 x i8] c"BUILT_IN_AND_AND_FETCH_16\00", align 1
@.str.619 = private unnamed_addr constant [25 x i8] c"BUILT_IN_XOR_AND_FETCH_N\00", align 1
@.str.620 = private unnamed_addr constant [25 x i8] c"BUILT_IN_XOR_AND_FETCH_1\00", align 1
@.str.621 = private unnamed_addr constant [25 x i8] c"BUILT_IN_XOR_AND_FETCH_2\00", align 1
@.str.622 = private unnamed_addr constant [25 x i8] c"BUILT_IN_XOR_AND_FETCH_4\00", align 1
@.str.623 = private unnamed_addr constant [25 x i8] c"BUILT_IN_XOR_AND_FETCH_8\00", align 1
@.str.624 = private unnamed_addr constant [26 x i8] c"BUILT_IN_XOR_AND_FETCH_16\00", align 1
@.str.625 = private unnamed_addr constant [26 x i8] c"BUILT_IN_NAND_AND_FETCH_N\00", align 1
@.str.626 = private unnamed_addr constant [26 x i8] c"BUILT_IN_NAND_AND_FETCH_1\00", align 1
@.str.627 = private unnamed_addr constant [26 x i8] c"BUILT_IN_NAND_AND_FETCH_2\00", align 1
@.str.628 = private unnamed_addr constant [26 x i8] c"BUILT_IN_NAND_AND_FETCH_4\00", align 1
@.str.629 = private unnamed_addr constant [26 x i8] c"BUILT_IN_NAND_AND_FETCH_8\00", align 1
@.str.630 = private unnamed_addr constant [27 x i8] c"BUILT_IN_NAND_AND_FETCH_16\00", align 1
@.str.631 = private unnamed_addr constant [33 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_N\00", align 1
@.str.632 = private unnamed_addr constant [33 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_1\00", align 1
@.str.633 = private unnamed_addr constant [33 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_2\00", align 1
@.str.634 = private unnamed_addr constant [33 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_4\00", align 1
@.str.635 = private unnamed_addr constant [33 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_8\00", align 1
@.str.636 = private unnamed_addr constant [34 x i8] c"BUILT_IN_BOOL_COMPARE_AND_SWAP_16\00", align 1
@.str.637 = private unnamed_addr constant [32 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_N\00", align 1
@.str.638 = private unnamed_addr constant [32 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_1\00", align 1
@.str.639 = private unnamed_addr constant [32 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_2\00", align 1
@.str.640 = private unnamed_addr constant [32 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_4\00", align 1
@.str.641 = private unnamed_addr constant [32 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_8\00", align 1
@.str.642 = private unnamed_addr constant [33 x i8] c"BUILT_IN_VAL_COMPARE_AND_SWAP_16\00", align 1
@.str.643 = private unnamed_addr constant [29 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_N\00", align 1
@.str.644 = private unnamed_addr constant [29 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_1\00", align 1
@.str.645 = private unnamed_addr constant [29 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_2\00", align 1
@.str.646 = private unnamed_addr constant [29 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_4\00", align 1
@.str.647 = private unnamed_addr constant [29 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_8\00", align 1
@.str.648 = private unnamed_addr constant [30 x i8] c"BUILT_IN_LOCK_TEST_AND_SET_16\00", align 1
@.str.649 = private unnamed_addr constant [24 x i8] c"BUILT_IN_LOCK_RELEASE_N\00", align 1
@.str.650 = private unnamed_addr constant [24 x i8] c"BUILT_IN_LOCK_RELEASE_1\00", align 1
@.str.651 = private unnamed_addr constant [24 x i8] c"BUILT_IN_LOCK_RELEASE_2\00", align 1
@.str.652 = private unnamed_addr constant [24 x i8] c"BUILT_IN_LOCK_RELEASE_4\00", align 1
@.str.653 = private unnamed_addr constant [24 x i8] c"BUILT_IN_LOCK_RELEASE_8\00", align 1
@.str.654 = private unnamed_addr constant [25 x i8] c"BUILT_IN_LOCK_RELEASE_16\00", align 1
@.str.655 = private unnamed_addr constant [21 x i8] c"BUILT_IN_SYNCHRONIZE\00", align 1
@.str.656 = private unnamed_addr constant [28 x i8] c"BUILT_IN_OMP_GET_THREAD_NUM\00", align 1
@.str.657 = private unnamed_addr constant [29 x i8] c"BUILT_IN_OMP_GET_NUM_THREADS\00", align 1
@.str.658 = private unnamed_addr constant [27 x i8] c"BUILT_IN_GOMP_ATOMIC_START\00", align 1
@.str.659 = private unnamed_addr constant [25 x i8] c"BUILT_IN_GOMP_ATOMIC_END\00", align 1
@.str.660 = private unnamed_addr constant [22 x i8] c"BUILT_IN_GOMP_BARRIER\00", align 1
@.str.661 = private unnamed_addr constant [23 x i8] c"BUILT_IN_GOMP_TASKWAIT\00", align 1
@.str.662 = private unnamed_addr constant [29 x i8] c"BUILT_IN_GOMP_CRITICAL_START\00", align 1
@.str.663 = private unnamed_addr constant [27 x i8] c"BUILT_IN_GOMP_CRITICAL_END\00", align 1
@.str.664 = private unnamed_addr constant [34 x i8] c"BUILT_IN_GOMP_CRITICAL_NAME_START\00", align 1
@.str.665 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_CRITICAL_NAME_END\00", align 1
@.str.666 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_LOOP_STATIC_START\00", align 1
@.str.667 = private unnamed_addr constant [33 x i8] c"BUILT_IN_GOMP_LOOP_DYNAMIC_START\00", align 1
@.str.668 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_LOOP_GUIDED_START\00", align 1
@.str.669 = private unnamed_addr constant [33 x i8] c"BUILT_IN_GOMP_LOOP_RUNTIME_START\00", align 1
@.str.670 = private unnamed_addr constant [40 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START\00", align 1
@.str.671 = private unnamed_addr constant [41 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START\00", align 1
@.str.672 = private unnamed_addr constant [40 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START\00", align 1
@.str.673 = private unnamed_addr constant [41 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START\00", align 1
@.str.674 = private unnamed_addr constant [31 x i8] c"BUILT_IN_GOMP_LOOP_STATIC_NEXT\00", align 1
@.str.675 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT\00", align 1
@.str.676 = private unnamed_addr constant [31 x i8] c"BUILT_IN_GOMP_LOOP_GUIDED_NEXT\00", align 1
@.str.677 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_LOOP_RUNTIME_NEXT\00", align 1
@.str.678 = private unnamed_addr constant [39 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT\00", align 1
@.str.679 = private unnamed_addr constant [40 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT\00", align 1
@.str.680 = private unnamed_addr constant [39 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT\00", align 1
@.str.681 = private unnamed_addr constant [40 x i8] c"BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT\00", align 1
@.str.682 = private unnamed_addr constant [36 x i8] c"BUILT_IN_GOMP_LOOP_ULL_STATIC_START\00", align 1
@.str.683 = private unnamed_addr constant [37 x i8] c"BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START\00", align 1
@.str.684 = private unnamed_addr constant [36 x i8] c"BUILT_IN_GOMP_LOOP_ULL_GUIDED_START\00", align 1
@.str.685 = private unnamed_addr constant [37 x i8] c"BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START\00", align 1
@.str.686 = private unnamed_addr constant [44 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START\00", align 1
@.str.687 = private unnamed_addr constant [45 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START\00", align 1
@.str.688 = private unnamed_addr constant [44 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START\00", align 1
@.str.689 = private unnamed_addr constant [45 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START\00", align 1
@.str.690 = private unnamed_addr constant [35 x i8] c"BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT\00", align 1
@.str.691 = private unnamed_addr constant [36 x i8] c"BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT\00", align 1
@.str.692 = private unnamed_addr constant [35 x i8] c"BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT\00", align 1
@.str.693 = private unnamed_addr constant [36 x i8] c"BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT\00", align 1
@.str.694 = private unnamed_addr constant [43 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT\00", align 1
@.str.695 = private unnamed_addr constant [44 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT\00", align 1
@.str.696 = private unnamed_addr constant [43 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT\00", align 1
@.str.697 = private unnamed_addr constant [44 x i8] c"BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT\00", align 1
@.str.698 = private unnamed_addr constant [41 x i8] c"BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START\00", align 1
@.str.699 = private unnamed_addr constant [42 x i8] c"BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START\00", align 1
@.str.700 = private unnamed_addr constant [41 x i8] c"BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START\00", align 1
@.str.701 = private unnamed_addr constant [42 x i8] c"BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START\00", align 1
@.str.702 = private unnamed_addr constant [23 x i8] c"BUILT_IN_GOMP_LOOP_END\00", align 1
@.str.703 = private unnamed_addr constant [30 x i8] c"BUILT_IN_GOMP_LOOP_END_NOWAIT\00", align 1
@.str.704 = private unnamed_addr constant [28 x i8] c"BUILT_IN_GOMP_ORDERED_START\00", align 1
@.str.705 = private unnamed_addr constant [26 x i8] c"BUILT_IN_GOMP_ORDERED_END\00", align 1
@.str.706 = private unnamed_addr constant [29 x i8] c"BUILT_IN_GOMP_PARALLEL_START\00", align 1
@.str.707 = private unnamed_addr constant [27 x i8] c"BUILT_IN_GOMP_PARALLEL_END\00", align 1
@.str.708 = private unnamed_addr constant [19 x i8] c"BUILT_IN_GOMP_TASK\00", align 1
@.str.709 = private unnamed_addr constant [29 x i8] c"BUILT_IN_GOMP_SECTIONS_START\00", align 1
@.str.710 = private unnamed_addr constant [28 x i8] c"BUILT_IN_GOMP_SECTIONS_NEXT\00", align 1
@.str.711 = private unnamed_addr constant [38 x i8] c"BUILT_IN_GOMP_PARALLEL_SECTIONS_START\00", align 1
@.str.712 = private unnamed_addr constant [27 x i8] c"BUILT_IN_GOMP_SECTIONS_END\00", align 1
@.str.713 = private unnamed_addr constant [34 x i8] c"BUILT_IN_GOMP_SECTIONS_END_NOWAIT\00", align 1
@.str.714 = private unnamed_addr constant [27 x i8] c"BUILT_IN_GOMP_SINGLE_START\00", align 1
@.str.715 = private unnamed_addr constant [32 x i8] c"BUILT_IN_GOMP_SINGLE_COPY_START\00", align 1
@.str.716 = private unnamed_addr constant [30 x i8] c"BUILT_IN_GOMP_SINGLE_COPY_END\00", align 1
@built_in_names = dso_local global <{ [713 x i8*], [8 x i8*] }> <{ [713 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.206, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.211, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.213, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.214, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.215, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.218, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.219, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.225, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.229, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.230, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.234, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.244, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.251, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.252, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.253, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.255, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.260, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.261, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.263, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.265, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.267, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.273, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.286, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.287, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.288, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.289, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.291, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.292, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.293, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.294, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.295, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.296, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.297, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.298, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.299, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.300, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.301, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.302, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.303, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.305, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.306, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.307, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.308, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.309, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.310, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.311, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.313, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.315, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.318, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.319, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.320, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.321, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.322, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.323, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.324, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.325, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.326, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.327, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.328, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.330, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.331, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.332, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.333, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.334, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.335, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.336, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.337, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.338, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.339, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.340, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.341, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.342, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.343, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.345, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.346, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.347, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.348, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.349, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.350, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.351, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.352, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.353, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.354, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.355, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.356, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.357, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.358, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.359, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.360, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.361, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.362, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.363, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.364, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.365, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.366, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.367, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.368, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.369, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.370, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.371, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.372, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.373, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.374, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.376, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.377, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.378, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.379, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.380, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.381, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.382, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.383, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.384, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.385, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.386, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.387, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.388, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.389, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.390, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.391, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.392, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.393, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.394, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.395, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.396, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.397, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.398, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.399, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.400, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.401, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.402, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.403, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.404, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.405, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.406, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.407, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.408, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.409, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.410, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.411, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.412, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.413, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.414, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.415, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.416, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.417, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.418, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.419, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.420, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.421, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.422, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.423, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.424, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.425, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.426, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.427, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.428, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.429, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.430, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.431, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.432, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.433, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.434, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.435, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.436, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.437, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.438, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.439, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.440, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.441, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.442, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.443, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.444, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.445, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.446, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.447, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.448, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.449, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.450, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.451, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.452, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.453, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.454, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.455, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.456, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.457, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.458, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.459, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.460, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.461, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.462, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.463, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.464, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.465, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.466, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.467, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.468, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.469, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.470, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.471, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.472, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.473, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.474, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.475, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.476, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.477, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.478, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.479, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.480, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.481, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.482, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.483, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.484, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.485, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.486, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.487, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.488, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.489, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.490, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.491, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.492, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.493, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.494, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.495, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.496, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.497, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.498, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.499, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.500, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.501, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.502, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.503, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.504, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.505, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.506, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.507, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.508, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.509, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.510, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.511, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.512, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.513, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.514, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.515, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.516, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.517, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.518, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.519, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.520, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.521, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.522, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.523, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.524, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.525, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.526, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.527, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.528, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.529, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.530, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.531, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.532, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.533, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.534, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.535, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.536, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.537, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.538, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.539, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.540, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.541, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.542, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.543, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.544, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.545, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.546, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.547, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.548, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.549, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.550, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.551, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.552, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.553, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.554, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.555, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.556, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.557, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.558, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.559, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.560, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.561, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.562, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.563, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.564, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.565, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.566, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.567, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.568, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.569, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.570, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.571, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.572, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.573, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.574, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.575, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.576, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.577, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.578, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.579, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.580, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.581, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.582, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.583, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.584, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.585, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.586, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.587, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.588, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.589, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.590, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.591, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.592, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.593, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.594, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.595, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.596, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.597, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.598, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.599, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.600, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.601, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.602, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.603, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.604, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.605, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.606, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.607, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.608, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.609, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.610, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.611, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.612, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.613, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.614, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.615, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.616, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.617, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.618, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.619, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.620, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.621, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.622, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.623, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.624, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.625, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.626, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.627, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.628, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.629, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.630, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.631, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.632, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.633, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.634, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.635, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.636, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.637, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.638, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.639, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.640, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.641, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.642, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.643, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.644, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.645, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.646, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.647, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.648, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.649, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.650, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.651, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.652, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.653, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.654, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.655, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.656, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.657, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.658, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.659, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.660, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.661, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.662, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.663, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.664, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.665, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.666, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.667, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.668, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.669, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.670, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.671, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.672, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.673, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.674, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.675, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.676, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.677, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.678, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.679, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.680, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.681, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.682, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.683, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.684, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.685, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.686, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.687, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.688, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.689, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.690, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.691, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.692, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.693, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.694, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.695, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.696, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.697, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.698, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.699, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.700, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.701, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.702, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.703, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.704, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.705, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.706, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.707, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.708, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.709, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.710, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.711, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.712, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.713, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.714, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.715, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.716, i32 0, i32 0)], [8 x i8*] zeroinitializer }>, align 16, !dbg !4738
@.str.717 = private unnamed_addr constant [11 x i8] c"__builtin_\00", align 1
@.str.718 = private unnamed_addr constant [8 x i8] c"__sync_\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@optimize = external dso_local global i32, align 4
@flag_tree_ter = external dso_local global i32, align 4
@input_location = external dso_local global i32, align 4
@.str.719 = private unnamed_addr constant [41 x i8] c"offset outside bounds of constant string\00", align 1
@setjmp_alias_set = internal global i32 -1, align 4, !dbg !4772
@targetm = external dso_local global %struct.gcc_target, align 8
@mode_size = external dso_local global [87 x i8], align 16
@cfun = external dso_local global %struct.function*, align 8
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@current_function_decl = external dso_local global %union.tree_node*, align 8
@fixed_regs = external dso_local global [53 x i8], align 16
@expand_builtin_setjmp_receiver.elim_regs = internal constant [4 x %struct.elims] [%struct.elims { i32 16, i32 7 }, %struct.elims { i32 16, i32 6 }, %struct.elims { i32 20, i32 7 }, %struct.elims { i32 20, i32 6 }], align 16, !dbg !4743
@x_rtl = external dso_local global %struct.rtl_data, align 8
@flag_pic = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@flag_mudflap = external dso_local global i32, align 4
@.str.720 = private unnamed_addr constant [53 x i8] c"first argument to %<va_arg%> not of type %<va_list%>\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@gimplify_va_arg_expr.gave_help = internal global i8 0, align 1, !dbg !4756
@.str.721 = private unnamed_addr constant [51 x i8] c"%qT is promoted to %qT when passed through %<...%>\00", align 1
@.str.722 = private unnamed_addr constant [47 x i8] c"(so you should pass %qT not %qT to %<va_arg%>)\00", align 1
@.str.723 = private unnamed_addr constant [48 x i8] c"if this code is reached, the program will abort\00", align 1
@implicit_built_in_decls = common dso_local global [721 x %union.tree_node*] zeroinitializer, align 16, !dbg !4765
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@built_in_decls = common dso_local global [721 x %union.tree_node*] zeroinitializer, align 16, !dbg !4762
@.str.724 = private unnamed_addr constant [11 x i8] c"builtins.c\00", align 1
@.str.725 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.726 = private unnamed_addr constant [46 x i8] c"%<va_start%> used in function with fixed args\00", align 1
@.str.727 = private unnamed_addr constant [51 x i8] c"wrong number of arguments to function %<va_start%>\00", align 1
@.str.728 = private unnamed_addr constant [50 x i8] c"%<__builtin_next_arg%> called without an argument\00", align 1
@.str.729 = private unnamed_addr constant [61 x i8] c"wrong number of arguments to function %<__builtin_next_arg%>\00", align 1
@.str.730 = private unnamed_addr constant [57 x i8] c"second parameter of %<va_start%> not last named argument\00", align 1
@.str.731 = private unnamed_addr constant [96 x i8] c"undefined behaviour when second parameter of %<va_start%> is declared with %<register%> storage\00", align 1
@target_percent = internal global i64 0, align 8, !dbg !4767
@target_percent_s = internal global [3 x i8] zeroinitializer, align 1, !dbg !4769
@.str.732 = private unnamed_addr constant [7 x i8] c"memcpy\00", align 1
@libfunc_table = external dso_local global [14 x %struct.rtx_def*], align 16
@.str.733 = private unnamed_addr constant [7 x i8] c"memset\00", align 1
@.str.734 = private unnamed_addr constant [8 x i8] c"memmove\00", align 1
@.str.735 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@.str.736 = private unnamed_addr constant [6 x i8] c"abort\00", align 1
@mode_class = external dso_local constant [87 x i8], align 16
@.str.737 = private unnamed_addr constant [14 x i8] c"always_inline\00", align 1
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@.str.738 = private unnamed_addr constant [40 x i8] c"target format does not support infinity\00", align 1
@folding_initializer = external dso_local global i32, align 4
@flag_errno_math = external dso_local global i32, align 4
@flag_signed_zeros = external dso_local global i32, align 4
@dconst0 = external dso_local global %struct.real_value, align 8
@flag_finite_math_only = external dso_local global i32, align 4
@.str.739 = private unnamed_addr constant [7 x i8] c"0x1p%d\00", align 1
@optab_table = external dso_local global [159 x %struct.optab_d], align 16
@target_newline = internal global i64 0, align 8, !dbg !4774
@target_percent_s_newline = internal global [4 x i8] zeroinitializer, align 1, !dbg !4776
@target_percent_c = internal global [3 x i8] zeroinitializer, align 1, !dbg !4778
@ix86_isa_flags = external dso_local global i32, align 4
@ptr_mode = external dso_local global i32, align 4
@dconst1 = external dso_local global %struct.real_value, align 8
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.740 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@init_target_chars.init = internal global i8 0, align 1, !dbg !4780
@target_c = internal global i64 0, align 8, !dbg !4785
@target_s = internal global i64 0, align 8, !dbg !4787

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_builtin_name(i8* %name) #0 !dbg !4795 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4800
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.717, i64 0, i64 0), i64 10), !dbg !4802
  %cmp = icmp eq i32 %call, 0, !dbg !4803
  br i1 %cmp, label %if.then, label %if.end, !dbg !4804

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4805
  br label %return, !dbg !4805

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !4806
  %call1 = call i32 @strncmp(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.718, i64 0, i64 0), i64 7), !dbg !4808
  %cmp2 = icmp eq i32 %call1, 0, !dbg !4809
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !4810

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !4811
  br label %return, !dbg !4811

if.end4:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4812
  br label %return, !dbg !4812

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !4813
  ret i8 %2, !dbg !4813
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_builtin_fn(%union.tree_node* %decl) #0 !dbg !4814 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4817, metadata !DIExpression()), !dbg !4818
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4819
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4819
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4819
  %bf.load = load i64, i64* %1, align 8, !dbg !4819
  %bf.clear = and i64 %bf.load, 65535, !dbg !4819
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4819
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !4820
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4821

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4822
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !4822
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4822
  %bf.load1 = load i32, i32* %built_in_class, align 8, !dbg !4822
  %bf.lshr = lshr i32 %bf.load1, 11, !dbg !4822
  %bf.clear2 = and i32 %bf.lshr, 3, !dbg !4822
  %cmp3 = icmp ne i32 %bf.clear2, 0, !dbg !4822
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !4823
  %land.ext = zext i1 %3 to i32, !dbg !4821
  %conv = trunc i32 %land.ext to i8, !dbg !4819
  ret i8 %conv, !dbg !4824
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_object_alignment(%union.tree_node* %exp, i32 %align, i32 %max_align) #0 !dbg !4825 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %align.addr = alloca i32, align 4
  %max_align.addr = alloca i32, align 4
  %inner = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %next_offset = alloca %union.tree_node*, align 8
  %offset_bits = alloca i32, align 4
  %offset_factor = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4828, metadata !DIExpression()), !dbg !4829
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !4830, metadata !DIExpression()), !dbg !4831
  store i32 %max_align, i32* %max_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_align.addr, metadata !4832, metadata !DIExpression()), !dbg !4833
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !4834, metadata !DIExpression()), !dbg !4835
  %0 = load i32, i32* %max_align.addr, align 4, !dbg !4836
  store i32 %0, i32* %inner, align 4, !dbg !4837
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4838
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !4840
  %tobool = icmp ne i8 %call, 0, !dbg !4840
  br i1 %tobool, label %if.then, label %if.end76, !dbg !4841

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !4842, metadata !DIExpression()), !dbg !4844
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !4845, metadata !DIExpression()), !dbg !4846
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !4847, metadata !DIExpression()), !dbg !4848
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4849, metadata !DIExpression()), !dbg !4850
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !4851, metadata !DIExpression()), !dbg !4852
  call void @llvm.dbg.declare(metadata i32* %volatilep, metadata !4853, metadata !DIExpression()), !dbg !4854
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4855
  %call1 = call %union.tree_node* @get_inner_reference(%union.tree_node* %2, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode, i32* %unsignedp, i32* %volatilep, i8 zeroext 1), !dbg !4856
  store %union.tree_node* %call1, %union.tree_node** %exp.addr, align 8, !dbg !4857
  %3 = load i64, i64* %bitpos, align 8, !dbg !4858
  %tobool2 = icmp ne i64 %3, 0, !dbg !4858
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4860

if.then3:                                         ; preds = %if.then
  %4 = load i32, i32* %inner, align 4, !dbg !4861
  %5 = load i64, i64* %bitpos, align 8, !dbg !4861
  %6 = load i64, i64* %bitpos, align 8, !dbg !4861
  %sub = sub nsw i64 0, %6, !dbg !4861
  %and = and i64 %5, %sub, !dbg !4861
  %conv = trunc i64 %and to i32, !dbg !4861
  %cmp = icmp ult i32 %4, %conv, !dbg !4861
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4861

cond.true:                                        ; preds = %if.then3
  %7 = load i32, i32* %inner, align 4, !dbg !4861
  br label %cond.end, !dbg !4861

cond.false:                                       ; preds = %if.then3
  %8 = load i64, i64* %bitpos, align 8, !dbg !4861
  %9 = load i64, i64* %bitpos, align 8, !dbg !4861
  %sub5 = sub nsw i64 0, %9, !dbg !4861
  %and6 = and i64 %8, %sub5, !dbg !4861
  %conv7 = trunc i64 %and6 to i32, !dbg !4861
  br label %cond.end, !dbg !4861

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %conv7, %cond.false ], !dbg !4861
  store i32 %cond, i32* %inner, align 4, !dbg !4862
  br label %if.end, !dbg !4863

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond, !dbg !4864

while.cond:                                       ; preds = %if.end75, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4865
  %tobool8 = icmp ne %union.tree_node* %10, null, !dbg !4864
  br i1 %tobool8, label %while.body, label %while.end, !dbg !4864

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %next_offset, metadata !4866, metadata !DIExpression()), !dbg !4868
  %11 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4869
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4869
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !4869
  %bf.load = load i64, i64* %12, align 8, !dbg !4869
  %bf.clear = and i64 %bf.load, 65535, !dbg !4869
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4869
  %cmp9 = icmp eq i32 %bf.cast, 63, !dbg !4871
  br i1 %cmp9, label %if.then11, label %if.else, !dbg !4872

if.then11:                                        ; preds = %while.body
  %13 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4873
  %exp12 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !4873
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !4873
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4873
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4873
  store %union.tree_node* %14, %union.tree_node** %next_offset, align 8, !dbg !4875
  %15 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4876
  %exp13 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !4876
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !4876
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 1, !dbg !4876
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !4876
  store %union.tree_node* %16, %union.tree_node** %offset, align 8, !dbg !4877
  br label %if.end16, !dbg !4878

if.else:                                          ; preds = %while.body
  store %union.tree_node* null, %union.tree_node** %next_offset, align 8, !dbg !4879
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then11
  %17 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4880
  %call17 = call i32 @host_integerp(%union.tree_node* %17, i32 1), !dbg !4882
  %tobool18 = icmp ne i32 %call17, 0, !dbg !4882
  br i1 %tobool18, label %if.then19, label %if.else35, !dbg !4883

if.then19:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata i32* %offset_bits, metadata !4884, metadata !DIExpression()), !dbg !4886
  %18 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4887
  %call20 = call i64 @tree_low_cst(%union.tree_node* %18, i32 1), !dbg !4888
  %conv21 = trunc i64 %call20 to i32, !dbg !4889
  %mul = mul i32 %conv21, 8, !dbg !4890
  store i32 %mul, i32* %offset_bits, align 4, !dbg !4886
  %19 = load i32, i32* %offset_bits, align 4, !dbg !4891
  %tobool22 = icmp ne i32 %19, 0, !dbg !4891
  br i1 %tobool22, label %if.then23, label %if.end34, !dbg !4893

if.then23:                                        ; preds = %if.then19
  %20 = load i32, i32* %inner, align 4, !dbg !4894
  %21 = load i32, i32* %offset_bits, align 4, !dbg !4894
  %22 = load i32, i32* %offset_bits, align 4, !dbg !4894
  %sub24 = sub i32 0, %22, !dbg !4894
  %and25 = and i32 %21, %sub24, !dbg !4894
  %cmp26 = icmp ult i32 %20, %and25, !dbg !4894
  br i1 %cmp26, label %cond.true28, label %cond.false29, !dbg !4894

cond.true28:                                      ; preds = %if.then23
  %23 = load i32, i32* %inner, align 4, !dbg !4894
  br label %cond.end32, !dbg !4894

cond.false29:                                     ; preds = %if.then23
  %24 = load i32, i32* %offset_bits, align 4, !dbg !4894
  %25 = load i32, i32* %offset_bits, align 4, !dbg !4894
  %sub30 = sub i32 0, %25, !dbg !4894
  %and31 = and i32 %24, %sub30, !dbg !4894
  br label %cond.end32, !dbg !4894

cond.end32:                                       ; preds = %cond.false29, %cond.true28
  %cond33 = phi i32 [ %23, %cond.true28 ], [ %and31, %cond.false29 ], !dbg !4894
  store i32 %cond33, i32* %inner, align 4, !dbg !4895
  br label %if.end34, !dbg !4896

if.end34:                                         ; preds = %cond.end32, %if.then19
  br label %if.end75, !dbg !4897

if.else35:                                        ; preds = %if.end16
  %26 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4898
  %base36 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !4898
  %27 = bitcast %struct.tree_base* %base36 to i64*, !dbg !4898
  %bf.load37 = load i64, i64* %27, align 8, !dbg !4898
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !4898
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !4898
  %cmp40 = icmp eq i32 %bf.cast39, 65, !dbg !4900
  br i1 %cmp40, label %land.lhs.true, label %if.else67, !dbg !4901

land.lhs.true:                                    ; preds = %if.else35
  %28 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4902
  %exp42 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !4902
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !4902
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 1, !dbg !4902
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !4902
  %call45 = call i32 @host_integerp(%union.tree_node* %29, i32 1), !dbg !4903
  %tobool46 = icmp ne i32 %call45, 0, !dbg !4903
  br i1 %tobool46, label %if.then47, label %if.else67, !dbg !4904

if.then47:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %offset_factor, metadata !4905, metadata !DIExpression()), !dbg !4907
  %30 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4908
  %exp48 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !4908
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !4908
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 1, !dbg !4908
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !4908
  %call51 = call i64 @tree_low_cst(%union.tree_node* %31, i32 1), !dbg !4909
  %conv52 = trunc i64 %call51 to i32, !dbg !4910
  %mul53 = mul i32 %conv52, 8, !dbg !4911
  store i32 %mul53, i32* %offset_factor, align 4, !dbg !4907
  %32 = load i32, i32* %offset_factor, align 4, !dbg !4912
  %tobool54 = icmp ne i32 %32, 0, !dbg !4912
  br i1 %tobool54, label %if.then55, label %if.end66, !dbg !4914

if.then55:                                        ; preds = %if.then47
  %33 = load i32, i32* %inner, align 4, !dbg !4915
  %34 = load i32, i32* %offset_factor, align 4, !dbg !4915
  %35 = load i32, i32* %offset_factor, align 4, !dbg !4915
  %sub56 = sub i32 0, %35, !dbg !4915
  %and57 = and i32 %34, %sub56, !dbg !4915
  %cmp58 = icmp ult i32 %33, %and57, !dbg !4915
  br i1 %cmp58, label %cond.true60, label %cond.false61, !dbg !4915

cond.true60:                                      ; preds = %if.then55
  %36 = load i32, i32* %inner, align 4, !dbg !4915
  br label %cond.end64, !dbg !4915

cond.false61:                                     ; preds = %if.then55
  %37 = load i32, i32* %offset_factor, align 4, !dbg !4915
  %38 = load i32, i32* %offset_factor, align 4, !dbg !4915
  %sub62 = sub i32 0, %38, !dbg !4915
  %and63 = and i32 %37, %sub62, !dbg !4915
  br label %cond.end64, !dbg !4915

cond.end64:                                       ; preds = %cond.false61, %cond.true60
  %cond65 = phi i32 [ %36, %cond.true60 ], [ %and63, %cond.false61 ], !dbg !4915
  store i32 %cond65, i32* %inner, align 4, !dbg !4916
  br label %if.end66, !dbg !4917

if.end66:                                         ; preds = %cond.end64, %if.then47
  br label %if.end74, !dbg !4918

if.else67:                                        ; preds = %land.lhs.true, %if.else35
  %39 = load i32, i32* %inner, align 4, !dbg !4919
  %cmp68 = icmp ult i32 %39, 8, !dbg !4919
  br i1 %cmp68, label %cond.true70, label %cond.false71, !dbg !4919

cond.true70:                                      ; preds = %if.else67
  %40 = load i32, i32* %inner, align 4, !dbg !4919
  br label %cond.end72, !dbg !4919

cond.false71:                                     ; preds = %if.else67
  br label %cond.end72, !dbg !4919

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ %40, %cond.true70 ], [ 8, %cond.false71 ], !dbg !4919
  store i32 %cond73, i32* %inner, align 4, !dbg !4921
  br label %while.end, !dbg !4922

if.end74:                                         ; preds = %if.end66
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end34
  %41 = load %union.tree_node*, %union.tree_node** %next_offset, align 8, !dbg !4923
  store %union.tree_node* %41, %union.tree_node** %offset, align 8, !dbg !4924
  br label %while.cond, !dbg !4864, !llvm.loop !4925

while.end:                                        ; preds = %cond.end72, %while.cond
  br label %if.end76, !dbg !4927

if.end76:                                         ; preds = %while.end, %entry
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4928
  %base77 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4928
  %43 = bitcast %struct.tree_base* %base77 to i64*, !dbg !4928
  %bf.load78 = load i64, i64* %43, align 8, !dbg !4928
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !4928
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !4928
  %cmp81 = icmp eq i32 %bf.cast80, 33, !dbg !4930
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !4931

if.then83:                                        ; preds = %if.end76
  %44 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4932
  %decl_common = bitcast %union.tree_node* %44 to %struct.tree_decl_common*, !dbg !4932
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4932
  %45 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4932
  store %union.tree_node* %45, %union.tree_node** %exp.addr, align 8, !dbg !4933
  br label %if.end84, !dbg !4934

if.end84:                                         ; preds = %if.then83, %if.end76
  %46 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4935
  %base85 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !4935
  %47 = bitcast %struct.tree_base* %base85 to i64*, !dbg !4935
  %bf.load86 = load i64, i64* %47, align 8, !dbg !4935
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !4935
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !4935
  %idxprom = sext i32 %bf.cast88 to i64, !dbg !4935
  %arrayidx89 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4935
  %48 = load i32, i32* %arrayidx89, align 4, !dbg !4935
  %cmp90 = icmp eq i32 %48, 3, !dbg !4935
  br i1 %cmp90, label %land.lhs.true92, label %if.else110, !dbg !4937

land.lhs.true92:                                  ; preds = %if.end84
  %49 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4938
  %base93 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4938
  %50 = bitcast %struct.tree_base* %base93 to i64*, !dbg !4938
  %bf.load94 = load i64, i64* %50, align 8, !dbg !4938
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !4938
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !4938
  %cmp97 = icmp ne i32 %bf.cast96, 30, !dbg !4939
  br i1 %cmp97, label %if.then99, label %if.else110, !dbg !4940

if.then99:                                        ; preds = %land.lhs.true92
  %51 = load i32, i32* %inner, align 4, !dbg !4941
  %52 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4941
  %decl_common100 = bitcast %union.tree_node* %52 to %struct.tree_decl_common*, !dbg !4941
  %align101 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common100, i32 0, i32 3, !dbg !4941
  %53 = load i32, i32* %align101, align 8, !dbg !4941
  %cmp102 = icmp ult i32 %51, %53, !dbg !4941
  br i1 %cmp102, label %cond.true104, label %cond.false105, !dbg !4941

cond.true104:                                     ; preds = %if.then99
  %54 = load i32, i32* %inner, align 4, !dbg !4941
  br label %cond.end108, !dbg !4941

cond.false105:                                    ; preds = %if.then99
  %55 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4941
  %decl_common106 = bitcast %union.tree_node* %55 to %struct.tree_decl_common*, !dbg !4941
  %align107 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common106, i32 0, i32 3, !dbg !4941
  %56 = load i32, i32* %align107, align 8, !dbg !4941
  br label %cond.end108, !dbg !4941

cond.end108:                                      ; preds = %cond.false105, %cond.true104
  %cond109 = phi i32 [ %54, %cond.true104 ], [ %56, %cond.false105 ], !dbg !4941
  store i32 %cond109, i32* %align.addr, align 4, !dbg !4942
  br label %if.end163, !dbg !4943

if.else110:                                       ; preds = %land.lhs.true92, %if.end84
  %57 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4944
  %base111 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4944
  %58 = bitcast %struct.tree_base* %base111 to i64*, !dbg !4944
  %bf.load112 = load i64, i64* %58, align 8, !dbg !4944
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !4944
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !4944
  %idxprom115 = sext i32 %bf.cast114 to i64, !dbg !4944
  %arrayidx116 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom115, !dbg !4944
  %59 = load i32, i32* %arrayidx116, align 4, !dbg !4944
  %cmp117 = icmp eq i32 %59, 1, !dbg !4944
  br i1 %cmp117, label %if.then119, label %if.else128, !dbg !4946

if.then119:                                       ; preds = %if.else110
  %60 = load i32, i32* %inner, align 4, !dbg !4947
  %61 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4947
  %62 = load i32, i32* %align.addr, align 4, !dbg !4947
  %call120 = call i32 @ix86_constant_alignment(%union.tree_node* %61, i32 %62), !dbg !4947
  %cmp121 = icmp ult i32 %60, %call120, !dbg !4947
  br i1 %cmp121, label %cond.true123, label %cond.false124, !dbg !4947

cond.true123:                                     ; preds = %if.then119
  %63 = load i32, i32* %inner, align 4, !dbg !4947
  br label %cond.end126, !dbg !4947

cond.false124:                                    ; preds = %if.then119
  %64 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4947
  %65 = load i32, i32* %align.addr, align 4, !dbg !4947
  %call125 = call i32 @ix86_constant_alignment(%union.tree_node* %64, i32 %65), !dbg !4947
  br label %cond.end126, !dbg !4947

cond.end126:                                      ; preds = %cond.false124, %cond.true123
  %cond127 = phi i32 [ %63, %cond.true123 ], [ %call125, %cond.false124 ], !dbg !4947
  store i32 %cond127, i32* %align.addr, align 4, !dbg !4948
  br label %if.end162, !dbg !4949

if.else128:                                       ; preds = %if.else110
  %66 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4950
  %base129 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !4950
  %67 = bitcast %struct.tree_base* %base129 to i64*, !dbg !4950
  %bf.load130 = load i64, i64* %67, align 8, !dbg !4950
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !4950
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !4950
  %cmp133 = icmp eq i32 %bf.cast132, 118, !dbg !4952
  br i1 %cmp133, label %if.then141, label %lor.lhs.false, !dbg !4953

lor.lhs.false:                                    ; preds = %if.else128
  %68 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4954
  %base135 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4954
  %69 = bitcast %struct.tree_base* %base135 to i64*, !dbg !4954
  %bf.load136 = load i64, i64* %69, align 8, !dbg !4954
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !4954
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !4954
  %cmp139 = icmp eq i32 %bf.cast138, 47, !dbg !4955
  br i1 %cmp139, label %if.then141, label %if.else154, !dbg !4956

if.then141:                                       ; preds = %lor.lhs.false, %if.else128
  %70 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4957
  %common = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !4957
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4957
  %71 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4957
  %type142 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !4957
  %align143 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 7, !dbg !4957
  %72 = load i32, i32* %align143, align 8, !dbg !4957
  %73 = load i32, i32* %inner, align 4, !dbg !4957
  %cmp144 = icmp ult i32 %72, %73, !dbg !4957
  br i1 %cmp144, label %cond.true146, label %cond.false151, !dbg !4957

cond.true146:                                     ; preds = %if.then141
  %74 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4957
  %common147 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !4957
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !4957
  %75 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !4957
  %type149 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !4957
  %align150 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type149, i32 0, i32 7, !dbg !4957
  %76 = load i32, i32* %align150, align 8, !dbg !4957
  br label %cond.end152, !dbg !4957

cond.false151:                                    ; preds = %if.then141
  %77 = load i32, i32* %inner, align 4, !dbg !4957
  br label %cond.end152, !dbg !4957

cond.end152:                                      ; preds = %cond.false151, %cond.true146
  %cond153 = phi i32 [ %76, %cond.true146 ], [ %77, %cond.false151 ], !dbg !4957
  store i32 %cond153, i32* %align.addr, align 4, !dbg !4958
  br label %if.end161, !dbg !4959

if.else154:                                       ; preds = %lor.lhs.false
  %78 = load i32, i32* %align.addr, align 4, !dbg !4960
  %79 = load i32, i32* %inner, align 4, !dbg !4960
  %cmp155 = icmp ult i32 %78, %79, !dbg !4960
  br i1 %cmp155, label %cond.true157, label %cond.false158, !dbg !4960

cond.true157:                                     ; preds = %if.else154
  %80 = load i32, i32* %align.addr, align 4, !dbg !4960
  br label %cond.end159, !dbg !4960

cond.false158:                                    ; preds = %if.else154
  %81 = load i32, i32* %inner, align 4, !dbg !4960
  br label %cond.end159, !dbg !4960

cond.end159:                                      ; preds = %cond.false158, %cond.true157
  %cond160 = phi i32 [ %80, %cond.true157 ], [ %81, %cond.false158 ], !dbg !4960
  store i32 %cond160, i32* %align.addr, align 4, !dbg !4961
  br label %if.end161

if.end161:                                        ; preds = %cond.end159, %cond.end152
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %cond.end126
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %cond.end108
  %82 = load i32, i32* %align.addr, align 4, !dbg !4962
  %83 = load i32, i32* %max_align.addr, align 4, !dbg !4962
  %cmp164 = icmp ult i32 %82, %83, !dbg !4962
  br i1 %cmp164, label %cond.true166, label %cond.false167, !dbg !4962

cond.true166:                                     ; preds = %if.end163
  %84 = load i32, i32* %align.addr, align 4, !dbg !4962
  br label %cond.end168, !dbg !4962

cond.false167:                                    ; preds = %if.end163
  %85 = load i32, i32* %max_align.addr, align 4, !dbg !4962
  br label %cond.end168, !dbg !4962

cond.end168:                                      ; preds = %cond.false167, %cond.true166
  %cond169 = phi i32 [ %84, %cond.true166 ], [ %85, %cond.false167 ], !dbg !4962
  ret i32 %cond169, !dbg !4963
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !4964 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4968, metadata !DIExpression()), !dbg !4969
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4970
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4970
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4970
  %bf.load = load i64, i64* %1, align 8, !dbg !4970
  %bf.clear = and i64 %bf.load, 65535, !dbg !4970
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4970
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !4971

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !4972
  br label %return, !dbg !4972

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4974
  br label %return, !dbg !4974

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !4975
  ret i8 %2, !dbg !4975
}

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local i32 @ix86_constant_alignment(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_trust_pointer_alignment() #0 !dbg !4976 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !4977
  %tobool = icmp ne i32 %0, 0, !dbg !4977
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4978

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @flag_tree_ter, align 4, !dbg !4979
  %tobool1 = icmp ne i32 %1, 0, !dbg !4978
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !4980
  %land.ext = zext i1 %2 to i32, !dbg !4978
  %conv = trunc i32 %land.ext to i8, !dbg !4981
  ret i8 %conv, !dbg !4982
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_pointer_alignment(%union.tree_node* %exp, i32 %max_align) #0 !dbg !4983 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %max_align.addr = alloca i32, align 4
  %align = alloca i32, align 4
  %inner = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4986, metadata !DIExpression()), !dbg !4987
  store i32 %max_align, i32* %max_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_align.addr, metadata !4988, metadata !DIExpression()), !dbg !4989
  call void @llvm.dbg.declare(metadata i32* %align, metadata !4990, metadata !DIExpression()), !dbg !4991
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !4992, metadata !DIExpression()), !dbg !4993
  %call = call zeroext i8 @can_trust_pointer_alignment(), !dbg !4994
  %tobool = icmp ne i8 %call, 0, !dbg !4994
  br i1 %tobool, label %if.end, label %if.then, !dbg !4996

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4997
  br label %return, !dbg !4997

if.end:                                           ; preds = %entry
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4998
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4998
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4998
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4998
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4998
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4998
  %bf.load = load i64, i64* %2, align 8, !dbg !4998
  %bf.clear = and i64 %bf.load, 65535, !dbg !4998
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4998
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !4998
  br i1 %cmp, label %if.end9, label %lor.lhs.false, !dbg !4998

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4998
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !4998
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !4998
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4998
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4998
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4998
  %bf.load4 = load i64, i64* %5, align 8, !dbg !4998
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !4998
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4998
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !4998
  br i1 %cmp7, label %if.end9, label %if.then8, !dbg !5000

if.then8:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !5001
  br label %return, !dbg !5001

if.end9:                                          ; preds = %lor.lhs.false, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5002
  %common10 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5002
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !5002
  %7 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !5002
  %common12 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5002
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !5002
  %8 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !5002
  %type14 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !5002
  %align15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 7, !dbg !5002
  %9 = load i32, i32* %align15, align 8, !dbg !5002
  store i32 %9, i32* %align, align 4, !dbg !5003
  %10 = load i32, i32* %align, align 4, !dbg !5004
  %11 = load i32, i32* %max_align.addr, align 4, !dbg !5004
  %cmp16 = icmp ult i32 %10, %11, !dbg !5004
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !5004

cond.true:                                        ; preds = %if.end9
  %12 = load i32, i32* %align, align 4, !dbg !5004
  br label %cond.end, !dbg !5004

cond.false:                                       ; preds = %if.end9
  %13 = load i32, i32* %max_align.addr, align 4, !dbg !5004
  br label %cond.end, !dbg !5004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ %13, %cond.false ], !dbg !5004
  store i32 %cond, i32* %align, align 4, !dbg !5005
  br label %while.body, !dbg !5006

while.body:                                       ; preds = %cond.end, %sw.epilog
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5007
  %base17 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5007
  %15 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5007
  %bf.load18 = load i64, i64* %15, align 8, !dbg !5007
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !5007
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !5007
  switch i32 %bf.cast20, label %sw.default [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 66, label %sw.bb50
    i32 121, label %sw.bb69
  ], !dbg !5009

sw.bb:                                            ; preds = %while.body, %while.body
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5010
  %exp21 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !5010
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !5010
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5010
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5010
  store %union.tree_node* %17, %union.tree_node** %exp.addr, align 8, !dbg !5012
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5013
  %common22 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !5013
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !5013
  %19 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !5013
  %base24 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5013
  %20 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5013
  %bf.load25 = load i64, i64* %20, align 8, !dbg !5013
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5013
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5013
  %cmp28 = icmp eq i32 %bf.cast27, 10, !dbg !5013
  br i1 %cmp28, label %if.end38, label %lor.lhs.false29, !dbg !5013

lor.lhs.false29:                                  ; preds = %sw.bb
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5013
  %common30 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !5013
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !5013
  %22 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !5013
  %base32 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5013
  %23 = bitcast %struct.tree_base* %base32 to i64*, !dbg !5013
  %bf.load33 = load i64, i64* %23, align 8, !dbg !5013
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !5013
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !5013
  %cmp36 = icmp eq i32 %bf.cast35, 12, !dbg !5013
  br i1 %cmp36, label %if.end38, label %if.then37, !dbg !5015

if.then37:                                        ; preds = %lor.lhs.false29
  %24 = load i32, i32* %align, align 4, !dbg !5016
  store i32 %24, i32* %retval, align 4, !dbg !5017
  br label %return, !dbg !5017

if.end38:                                         ; preds = %lor.lhs.false29, %sw.bb
  %25 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5018
  %common39 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !5018
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !5018
  %26 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !5018
  %common41 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !5018
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !5018
  %27 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !5018
  %type43 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !5018
  %align44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 7, !dbg !5018
  %28 = load i32, i32* %align44, align 8, !dbg !5018
  store i32 %28, i32* %inner, align 4, !dbg !5019
  %29 = load i32, i32* %inner, align 4, !dbg !5020
  %30 = load i32, i32* %max_align.addr, align 4, !dbg !5020
  %cmp45 = icmp ult i32 %29, %30, !dbg !5020
  br i1 %cmp45, label %cond.true46, label %cond.false47, !dbg !5020

cond.true46:                                      ; preds = %if.end38
  %31 = load i32, i32* %inner, align 4, !dbg !5020
  br label %cond.end48, !dbg !5020

cond.false47:                                     ; preds = %if.end38
  %32 = load i32, i32* %max_align.addr, align 4, !dbg !5020
  br label %cond.end48, !dbg !5020

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ %31, %cond.true46 ], [ %32, %cond.false47 ], !dbg !5020
  store i32 %cond49, i32* %align, align 4, !dbg !5021
  br label %sw.epilog, !dbg !5022

sw.bb50:                                          ; preds = %while.body
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5023
  %exp51 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !5023
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !5023
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 1, !dbg !5023
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !5023
  %call54 = call i32 @host_integerp(%union.tree_node* %34, i32 1), !dbg !5025
  %tobool55 = icmp ne i32 %call54, 0, !dbg !5025
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !5026

if.then56:                                        ; preds = %sw.bb50
  %35 = load i32, i32* %align, align 4, !dbg !5027
  store i32 %35, i32* %retval, align 4, !dbg !5028
  br label %return, !dbg !5028

if.end57:                                         ; preds = %sw.bb50
  br label %while.cond58, !dbg !5029

while.cond58:                                     ; preds = %while.body65, %if.end57
  %36 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5030
  %exp59 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !5030
  %operands60 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp59, i32 0, i32 3, !dbg !5030
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands60, i64 0, i64 1, !dbg !5030
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx61, align 8, !dbg !5030
  %call62 = call i64 @tree_low_cst(%union.tree_node* %37, i32 1), !dbg !5031
  %38 = load i32, i32* %max_align.addr, align 4, !dbg !5032
  %div = udiv i32 %38, 8, !dbg !5033
  %sub = sub i32 %div, 1, !dbg !5034
  %conv = zext i32 %sub to i64, !dbg !5035
  %and = and i64 %call62, %conv, !dbg !5036
  %cmp63 = icmp ne i64 %and, 0, !dbg !5037
  br i1 %cmp63, label %while.body65, label %while.end, !dbg !5029

while.body65:                                     ; preds = %while.cond58
  %39 = load i32, i32* %max_align.addr, align 4, !dbg !5038
  %shr = lshr i32 %39, 1, !dbg !5038
  store i32 %shr, i32* %max_align.addr, align 4, !dbg !5038
  br label %while.cond58, !dbg !5029, !llvm.loop !5039

while.end:                                        ; preds = %while.cond58
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5041
  %exp66 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !5041
  %operands67 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp66, i32 0, i32 3, !dbg !5041
  %arrayidx68 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands67, i64 0, i64 0, !dbg !5041
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx68, align 8, !dbg !5041
  store %union.tree_node* %41, %union.tree_node** %exp.addr, align 8, !dbg !5042
  br label %sw.epilog, !dbg !5043

sw.bb69:                                          ; preds = %while.body
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5044
  %exp70 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !5044
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !5044
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 0, !dbg !5044
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !5044
  %44 = load i32, i32* %align, align 4, !dbg !5045
  %45 = load i32, i32* %max_align.addr, align 4, !dbg !5046
  %call73 = call i32 @get_object_alignment(%union.tree_node* %43, i32 %44, i32 %45), !dbg !5047
  store i32 %call73, i32* %retval, align 4, !dbg !5048
  br label %return, !dbg !5048

sw.default:                                       ; preds = %while.body
  %46 = load i32, i32* %align, align 4, !dbg !5049
  store i32 %46, i32* %retval, align 4, !dbg !5050
  br label %return, !dbg !5050

sw.epilog:                                        ; preds = %while.end, %cond.end48
  br label %while.body, !dbg !5006, !llvm.loop !5051

return:                                           ; preds = %sw.default, %sw.bb69, %if.then56, %if.then37, %if.then8, %if.then
  %47 = load i32, i32* %retval, align 4, !dbg !5053
  ret i32 %47, !dbg !5053
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @c_strlen(%union.tree_node* %src, i32 %only_value) #0 !dbg !5054 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %only_value.addr = alloca i32, align 4
  %offset_node = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %max = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %loc = alloca i32, align 4
  %len1 = alloca %union.tree_node*, align 8
  %len2 = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !5057, metadata !DIExpression()), !dbg !5058
  store i32 %only_value, i32* %only_value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %only_value.addr, metadata !5059, metadata !DIExpression()), !dbg !5060
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset_node, metadata !5061, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !5063, metadata !DIExpression()), !dbg !5064
  call void @llvm.dbg.declare(metadata i32* %max, metadata !5065, metadata !DIExpression()), !dbg !5066
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !5067, metadata !DIExpression()), !dbg !5068
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !5069, metadata !DIExpression()), !dbg !5070
  %0 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5071
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %0), !dbg !5071
  store %union.tree_node* %call, %union.tree_node** %src.addr, align 8, !dbg !5071
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5072
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5072
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5072
  %bf.load = load i64, i64* %2, align 8, !dbg !5072
  %bf.clear = and i64 %bf.load, 65535, !dbg !5072
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5072
  %cmp = icmp eq i32 %bf.cast, 56, !dbg !5074
  br i1 %cmp, label %land.lhs.true, label %if.end17, !dbg !5075

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %only_value.addr, align 4, !dbg !5076
  %tobool = icmp ne i32 %3, 0, !dbg !5076
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5077

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5078
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !5078
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5078
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5078
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5078
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5078
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5078
  %bf.load2 = load i64, i64* %6, align 8, !dbg !5078
  %bf.lshr = lshr i64 %bf.load2, 16, !dbg !5078
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !5078
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5078
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !5078
  br i1 %tobool5, label %if.end17, label %if.then, !dbg !5079

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %len1, metadata !5080, metadata !DIExpression()), !dbg !5082
  call void @llvm.dbg.declare(metadata %union.tree_node** %len2, metadata !5083, metadata !DIExpression()), !dbg !5084
  %7 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5085
  %exp6 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !5085
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !5085
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 1, !dbg !5085
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !5085
  %9 = load i32, i32* %only_value.addr, align 4, !dbg !5086
  %call9 = call %union.tree_node* @c_strlen(%union.tree_node* %8, i32 %9), !dbg !5087
  store %union.tree_node* %call9, %union.tree_node** %len1, align 8, !dbg !5088
  %10 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5089
  %exp10 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !5089
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !5089
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 2, !dbg !5089
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !5089
  %12 = load i32, i32* %only_value.addr, align 4, !dbg !5090
  %call13 = call %union.tree_node* @c_strlen(%union.tree_node* %11, i32 %12), !dbg !5091
  store %union.tree_node* %call13, %union.tree_node** %len2, align 8, !dbg !5092
  %13 = load %union.tree_node*, %union.tree_node** %len1, align 8, !dbg !5093
  %14 = load %union.tree_node*, %union.tree_node** %len2, align 8, !dbg !5095
  %call14 = call i32 @tree_int_cst_equal(%union.tree_node* %13, %union.tree_node* %14), !dbg !5096
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5096
  br i1 %tobool15, label %if.then16, label %if.end, !dbg !5097

if.then16:                                        ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %len1, align 8, !dbg !5098
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !5099
  br label %return, !dbg !5099

if.end:                                           ; preds = %if.then
  br label %if.end17, !dbg !5100

if.end17:                                         ; preds = %if.end, %lor.lhs.false, %entry
  %16 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5101
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5101
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5101
  %bf.load19 = load i64, i64* %17, align 8, !dbg !5101
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5101
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5101
  %cmp22 = icmp eq i32 %bf.cast21, 52, !dbg !5103
  br i1 %cmp22, label %land.lhs.true23, label %if.end40, !dbg !5104

land.lhs.true23:                                  ; preds = %if.end17
  %18 = load i32, i32* %only_value.addr, align 4, !dbg !5105
  %tobool24 = icmp ne i32 %18, 0, !dbg !5105
  br i1 %tobool24, label %if.then35, label %lor.lhs.false25, !dbg !5106

lor.lhs.false25:                                  ; preds = %land.lhs.true23
  %19 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5107
  %exp26 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !5107
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !5107
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 0, !dbg !5107
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !5107
  %base29 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5107
  %21 = bitcast %struct.tree_base* %base29 to i64*, !dbg !5107
  %bf.load30 = load i64, i64* %21, align 8, !dbg !5107
  %bf.lshr31 = lshr i64 %bf.load30, 16, !dbg !5107
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !5107
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5107
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !5107
  br i1 %tobool34, label %if.end40, label %if.then35, !dbg !5108

if.then35:                                        ; preds = %lor.lhs.false25, %land.lhs.true23
  %22 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5109
  %exp36 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !5109
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !5109
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 1, !dbg !5109
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !5109
  %24 = load i32, i32* %only_value.addr, align 4, !dbg !5110
  %call39 = call %union.tree_node* @c_strlen(%union.tree_node* %23, i32 %24), !dbg !5111
  store %union.tree_node* %call39, %union.tree_node** %retval, align 8, !dbg !5112
  br label %return, !dbg !5112

if.end40:                                         ; preds = %lor.lhs.false25, %if.end17
  %25 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5113
  %base41 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5113
  %26 = bitcast %struct.tree_base* %base41 to i64*, !dbg !5113
  %bf.load42 = load i64, i64* %26, align 8, !dbg !5113
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !5113
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !5113
  %idxprom = sext i32 %bf.cast44 to i64, !dbg !5113
  %arrayidx45 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5113
  %27 = load i32, i32* %arrayidx45, align 4, !dbg !5113
  %cmp46 = icmp uge i32 %27, 4, !dbg !5113
  br i1 %cmp46, label %land.lhs.true47, label %cond.false, !dbg !5113

land.lhs.true47:                                  ; preds = %if.end40
  %28 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5113
  %base48 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5113
  %29 = bitcast %struct.tree_base* %base48 to i64*, !dbg !5113
  %bf.load49 = load i64, i64* %29, align 8, !dbg !5113
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !5113
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !5113
  %idxprom52 = sext i32 %bf.cast51 to i64, !dbg !5113
  %arrayidx53 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom52, !dbg !5113
  %30 = load i32, i32* %arrayidx53, align 4, !dbg !5113
  %cmp54 = icmp ule i32 %30, 10, !dbg !5113
  br i1 %cmp54, label %cond.true, label %cond.false, !dbg !5113

cond.true:                                        ; preds = %land.lhs.true47
  %31 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5113
  %exp55 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !5113
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp55, i32 0, i32 1, !dbg !5113
  %32 = load i32, i32* %locus, align 8, !dbg !5113
  br label %cond.end, !dbg !5113

cond.false:                                       ; preds = %land.lhs.true47, %if.end40
  br label %cond.end, !dbg !5113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ 0, %cond.false ], !dbg !5113
  %cmp56 = icmp ne i32 %cond, 0, !dbg !5113
  br i1 %cmp56, label %if.then57, label %if.else, !dbg !5115

if.then57:                                        ; preds = %cond.end
  %33 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5116
  %base58 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !5116
  %34 = bitcast %struct.tree_base* %base58 to i64*, !dbg !5116
  %bf.load59 = load i64, i64* %34, align 8, !dbg !5116
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !5116
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !5116
  %idxprom62 = sext i32 %bf.cast61 to i64, !dbg !5116
  %arrayidx63 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom62, !dbg !5116
  %35 = load i32, i32* %arrayidx63, align 4, !dbg !5116
  %cmp64 = icmp uge i32 %35, 4, !dbg !5116
  br i1 %cmp64, label %land.lhs.true65, label %cond.false76, !dbg !5116

land.lhs.true65:                                  ; preds = %if.then57
  %36 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5116
  %base66 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !5116
  %37 = bitcast %struct.tree_base* %base66 to i64*, !dbg !5116
  %bf.load67 = load i64, i64* %37, align 8, !dbg !5116
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !5116
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !5116
  %idxprom70 = sext i32 %bf.cast69 to i64, !dbg !5116
  %arrayidx71 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom70, !dbg !5116
  %38 = load i32, i32* %arrayidx71, align 4, !dbg !5116
  %cmp72 = icmp ule i32 %38, 10, !dbg !5116
  br i1 %cmp72, label %cond.true73, label %cond.false76, !dbg !5116

cond.true73:                                      ; preds = %land.lhs.true65
  %39 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5116
  %exp74 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !5116
  %locus75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 1, !dbg !5116
  %40 = load i32, i32* %locus75, align 8, !dbg !5116
  br label %cond.end77, !dbg !5116

cond.false76:                                     ; preds = %land.lhs.true65, %if.then57
  br label %cond.end77, !dbg !5116

cond.end77:                                       ; preds = %cond.false76, %cond.true73
  %cond78 = phi i32 [ %40, %cond.true73 ], [ 0, %cond.false76 ], !dbg !5116
  store i32 %cond78, i32* %loc, align 4, !dbg !5117
  br label %if.end79, !dbg !5118

if.else:                                          ; preds = %cond.end
  %41 = load i32, i32* @input_location, align 4, !dbg !5119
  store i32 %41, i32* %loc, align 4, !dbg !5120
  br label %if.end79

if.end79:                                         ; preds = %if.else, %cond.end77
  %42 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5121
  %call80 = call %union.tree_node* @string_constant(%union.tree_node* %42, %union.tree_node** %offset_node), !dbg !5122
  store %union.tree_node* %call80, %union.tree_node** %src.addr, align 8, !dbg !5123
  %43 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5124
  %cmp81 = icmp eq %union.tree_node* %43, null, !dbg !5126
  br i1 %cmp81, label %if.then82, label %if.end83, !dbg !5127

if.then82:                                        ; preds = %if.end79
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5128
  br label %return, !dbg !5128

if.end83:                                         ; preds = %if.end79
  %44 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5129
  %string = bitcast %union.tree_node* %44 to %struct.tree_string*, !dbg !5129
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !5129
  %45 = load i32, i32* %length, align 8, !dbg !5129
  %sub = sub nsw i32 %45, 1, !dbg !5130
  store i32 %sub, i32* %max, align 4, !dbg !5131
  %46 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5132
  %string84 = bitcast %union.tree_node* %46 to %struct.tree_string*, !dbg !5132
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string84, i32 0, i32 2, !dbg !5132
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !5132
  store i8* %arraydecay, i8** %ptr, align 8, !dbg !5133
  %47 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5134
  %tobool85 = icmp ne %union.tree_node* %47, null, !dbg !5134
  br i1 %tobool85, label %land.lhs.true86, label %if.end103, !dbg !5136

land.lhs.true86:                                  ; preds = %if.end83
  %48 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5137
  %base87 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !5137
  %49 = bitcast %struct.tree_base* %base87 to i64*, !dbg !5137
  %bf.load88 = load i64, i64* %49, align 8, !dbg !5137
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !5137
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !5137
  %cmp91 = icmp ne i32 %bf.cast90, 23, !dbg !5138
  br i1 %cmp91, label %if.then92, label %if.end103, !dbg !5139

if.then92:                                        ; preds = %land.lhs.true86
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5140, metadata !DIExpression()), !dbg !5142
  store i32 0, i32* %i, align 4, !dbg !5143
  br label %for.cond, !dbg !5145

for.cond:                                         ; preds = %for.inc, %if.then92
  %50 = load i32, i32* %i, align 4, !dbg !5146
  %51 = load i32, i32* %max, align 4, !dbg !5148
  %cmp93 = icmp slt i32 %50, %51, !dbg !5149
  br i1 %cmp93, label %for.body, label %for.end, !dbg !5150

for.body:                                         ; preds = %for.cond
  %52 = load i8*, i8** %ptr, align 8, !dbg !5151
  %53 = load i32, i32* %i, align 4, !dbg !5153
  %idxprom94 = sext i32 %53 to i64, !dbg !5151
  %arrayidx95 = getelementptr inbounds i8, i8* %52, i64 %idxprom94, !dbg !5151
  %54 = load i8, i8* %arrayidx95, align 1, !dbg !5151
  %conv = sext i8 %54 to i32, !dbg !5151
  %cmp96 = icmp eq i32 %conv, 0, !dbg !5154
  br i1 %cmp96, label %if.then98, label %if.end99, !dbg !5155

if.then98:                                        ; preds = %for.body
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5156
  br label %return, !dbg !5156

if.end99:                                         ; preds = %for.body
  br label %for.inc, !dbg !5157

for.inc:                                          ; preds = %if.end99
  %55 = load i32, i32* %i, align 4, !dbg !5158
  %inc = add nsw i32 %55, 1, !dbg !5158
  store i32 %inc, i32* %i, align 4, !dbg !5158
  br label %for.cond, !dbg !5159, !llvm.loop !5160

for.end:                                          ; preds = %for.cond
  %56 = load i32, i32* %loc, align 4, !dbg !5162
  %57 = load i32, i32* %max, align 4, !dbg !5163
  %conv100 = sext i32 %57 to i64, !dbg !5163
  %call101 = call %union.tree_node* @size_int_kind(i64 %conv100, i32 0), !dbg !5163
  %58 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5164
  %call102 = call %union.tree_node* @size_diffop_loc(i32 %56, %union.tree_node* %call101, %union.tree_node* %58), !dbg !5165
  store %union.tree_node* %call102, %union.tree_node** %retval, align 8, !dbg !5166
  br label %return, !dbg !5166

if.end103:                                        ; preds = %land.lhs.true86, %if.end83
  %59 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5167
  %cmp104 = icmp eq %union.tree_node* %59, null, !dbg !5169
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !5170

if.then106:                                       ; preds = %if.end103
  store i64 0, i64* %offset, align 8, !dbg !5171
  br label %if.end114, !dbg !5172

if.else107:                                       ; preds = %if.end103
  %60 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5173
  %call108 = call i32 @host_integerp(%union.tree_node* %60, i32 0), !dbg !5175
  %tobool109 = icmp ne i32 %call108, 0, !dbg !5175
  br i1 %tobool109, label %if.else111, label %if.then110, !dbg !5176

if.then110:                                       ; preds = %if.else107
  store i64 -1, i64* %offset, align 8, !dbg !5177
  br label %if.end113, !dbg !5178

if.else111:                                       ; preds = %if.else107
  %61 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !5179
  %call112 = call i64 @tree_low_cst(%union.tree_node* %61, i32 0), !dbg !5180
  store i64 %call112, i64* %offset, align 8, !dbg !5181
  br label %if.end113

if.end113:                                        ; preds = %if.else111, %if.then110
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then106
  %62 = load i64, i64* %offset, align 8, !dbg !5182
  %cmp115 = icmp slt i64 %62, 0, !dbg !5184
  br i1 %cmp115, label %if.then121, label %lor.lhs.false117, !dbg !5185

lor.lhs.false117:                                 ; preds = %if.end114
  %63 = load i64, i64* %offset, align 8, !dbg !5186
  %64 = load i32, i32* %max, align 4, !dbg !5187
  %conv118 = sext i32 %64 to i64, !dbg !5187
  %cmp119 = icmp sgt i64 %63, %conv118, !dbg !5188
  br i1 %cmp119, label %if.then121, label %if.end134, !dbg !5189

if.then121:                                       ; preds = %lor.lhs.false117, %if.end114
  %65 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5190
  %base122 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !5190
  %66 = bitcast %struct.tree_base* %base122 to i64*, !dbg !5190
  %bf.load123 = load i64, i64* %66, align 8, !dbg !5190
  %bf.lshr124 = lshr i64 %bf.load123, 23, !dbg !5190
  %bf.clear125 = and i64 %bf.lshr124, 1, !dbg !5190
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !5190
  %tobool127 = icmp ne i32 %bf.cast126, 0, !dbg !5190
  br i1 %tobool127, label %if.end133, label %if.then128, !dbg !5193

if.then128:                                       ; preds = %if.then121
  %67 = load i32, i32* %loc, align 4, !dbg !5194
  %call129 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %67, i32 0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.719, i64 0, i64 0)), !dbg !5196
  %68 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !5197
  %base130 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !5197
  %69 = bitcast %struct.tree_base* %base130 to i64*, !dbg !5197
  %bf.load131 = load i64, i64* %69, align 8, !dbg !5198
  %bf.clear132 = and i64 %bf.load131, -8388609, !dbg !5198
  %bf.set = or i64 %bf.clear132, 8388608, !dbg !5198
  store i64 %bf.set, i64* %69, align 8, !dbg !5198
  br label %if.end133, !dbg !5199

if.end133:                                        ; preds = %if.then128, %if.then121
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5200
  br label %return, !dbg !5200

if.end134:                                        ; preds = %lor.lhs.false117
  %70 = load i8*, i8** %ptr, align 8, !dbg !5201
  %71 = load i64, i64* %offset, align 8, !dbg !5201
  %add.ptr = getelementptr inbounds i8, i8* %70, i64 %71, !dbg !5201
  %call135 = call i64 @strlen(i8* %add.ptr), !dbg !5201
  %call136 = call %union.tree_node* @size_int_kind(i64 %call135, i32 1), !dbg !5201
  store %union.tree_node* %call136, %union.tree_node** %retval, align 8, !dbg !5202
  br label %return, !dbg !5202

return:                                           ; preds = %if.end134, %if.end133, %for.end, %if.then98, %if.then82, %if.then35, %if.then16
  %72 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5203
  ret %union.tree_node* %72, !dbg !5203
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @string_constant(%union.tree_node*, %union.tree_node**) #2

declare dso_local %union.tree_node* @size_diffop_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

declare dso_local i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_builtin_setjmp_setup(%struct.rtx_def* %buf_addr, %struct.rtx_def* %receiver_label) #0 !dbg !5204 {
entry:
  %buf_addr.addr = alloca %struct.rtx_def*, align 8
  %receiver_label.addr = alloca %struct.rtx_def*, align 8
  %sa_mode = alloca i32, align 4
  %stack_save = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %buf_addr, %struct.rtx_def** %buf_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %buf_addr.addr, metadata !5207, metadata !DIExpression()), !dbg !5208
  store %struct.rtx_def* %receiver_label, %struct.rtx_def** %receiver_label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %receiver_label.addr, metadata !5209, metadata !DIExpression()), !dbg !5210
  call void @llvm.dbg.declare(metadata i32* %sa_mode, metadata !5211, metadata !DIExpression()), !dbg !5212
  store i32 16, i32* %sa_mode, align 4, !dbg !5212
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_save, metadata !5213, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !5215, metadata !DIExpression()), !dbg !5216
  %0 = load i32, i32* @setjmp_alias_set, align 4, !dbg !5217
  %cmp = icmp eq i32 %0, -1, !dbg !5219
  br i1 %cmp, label %if.then, label %if.end, !dbg !5220

if.then:                                          ; preds = %entry
  %call = call i32 @new_alias_set(), !dbg !5221
  store i32 %call, i32* @setjmp_alias_set, align 4, !dbg !5222
  br label %if.end, !dbg !5223

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5224
  %call1 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %1, i8 zeroext 0), !dbg !5224
  store %struct.rtx_def* %call1, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5225
  %2 = load %struct.rtx_def*, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5226
  %call2 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2, %struct.rtx_def* null), !dbg !5227
  %call3 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %call2), !dbg !5228
  store %struct.rtx_def* %call3, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5229
  %3 = load %struct.rtx_def*, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5230
  %call4 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %3), !dbg !5231
  store %struct.rtx_def* %call4, %struct.rtx_def** %mem, align 8, !dbg !5232
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5233
  %5 = load i32, i32* @setjmp_alias_set, align 4, !dbg !5234
  call void @set_mem_alias_set(%struct.rtx_def* %4, i32 %5), !dbg !5235
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5236
  %7 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 78), align 8, !dbg !5237
  %call5 = call %struct.rtx_def* %7(), !dbg !5238
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %call5), !dbg !5239
  %8 = load %struct.rtx_def*, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5240
  %9 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !5241
  %conv = zext i8 %9 to i16, !dbg !5241
  %conv7 = zext i16 %conv to i64, !dbg !5241
  %call8 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %8, i64 %conv7), !dbg !5242
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call8), !dbg !5243
  store %struct.rtx_def* %call9, %struct.rtx_def** %mem, align 8, !dbg !5244
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5245
  %11 = load i32, i32* @setjmp_alias_set, align 4, !dbg !5246
  call void @set_mem_alias_set(%struct.rtx_def* %10, i32 %11), !dbg !5247
  %12 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5248
  %call10 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %12), !dbg !5249
  %13 = load %struct.rtx_def*, %struct.rtx_def** %receiver_label.addr, align 8, !dbg !5250
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_u_stat(i32 44, i32 16, %struct.rtx_def* %13), !dbg !5250
  %call12 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %call11), !dbg !5251
  %call13 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call10, %struct.rtx_def* %call12), !dbg !5252
  %14 = load i32, i32* %sa_mode, align 4, !dbg !5253
  %15 = load %struct.rtx_def*, %struct.rtx_def** %buf_addr.addr, align 8, !dbg !5254
  %16 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !5255
  %conv14 = zext i8 %16 to i16, !dbg !5255
  %conv15 = zext i16 %conv14 to i32, !dbg !5255
  %mul = mul nsw i32 2, %conv15, !dbg !5256
  %conv16 = sext i32 %mul to i64, !dbg !5257
  %call17 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %15, i64 %conv16), !dbg !5258
  %call18 = call %struct.rtx_def* @gen_rtx_MEM(i32 %14, %struct.rtx_def* %call17), !dbg !5259
  store %struct.rtx_def* %call18, %struct.rtx_def** %stack_save, align 8, !dbg !5260
  %17 = load %struct.rtx_def*, %struct.rtx_def** %stack_save, align 8, !dbg !5261
  %18 = load i32, i32* @setjmp_alias_set, align 4, !dbg !5262
  call void @set_mem_alias_set(%struct.rtx_def* %17, i32 %18), !dbg !5263
  call void @emit_stack_save(i32 2, %struct.rtx_def** %stack_save, %struct.rtx_def* null), !dbg !5264
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5265
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5265
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !5266
  %bf.load = load i32, i32* %calls_setjmp, align 8, !dbg !5267
  %bf.clear = and i32 %bf.load, -262145, !dbg !5267
  %bf.set = or i32 %bf.clear, 262144, !dbg !5267
  store i32 %bf.set, i32* %calls_setjmp, align 8, !dbg !5267
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5268
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !5268
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 20, !dbg !5269
  %bf.load20 = load i32, i32* %has_nonlocal_label, align 8, !dbg !5270
  %bf.clear21 = and i32 %bf.load20, -1048577, !dbg !5270
  %bf.set22 = or i32 %bf.clear21, 1048576, !dbg !5270
  store i32 %bf.set22, i32* %has_nonlocal_label, align 8, !dbg !5270
  ret void, !dbg !5271
}

declare dso_local i32 @new_alias_set() #2

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local %struct.rtx_def* @validize_mem(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_u_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_builtin_setjmp_receiver(%struct.rtx_def* %receiver_label) #0 !dbg !4745 {
entry:
  %receiver_label.addr = alloca %struct.rtx_def*, align 8
  %chain = alloca %struct.rtx_def*, align 8
  %i = alloca i64, align 8
  store %struct.rtx_def* %receiver_label, %struct.rtx_def** %receiver_label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %receiver_label.addr, metadata !5272, metadata !DIExpression()), !dbg !5273
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %chain, metadata !5274, metadata !DIExpression()), !dbg !5275
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !5276
  %call = call %struct.rtx_def* @emit_use(%struct.rtx_def* %0), !dbg !5277
  %1 = load %struct.rtx_def* (%union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 21), align 8, !dbg !5278
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5279
  %call1 = call %struct.rtx_def* %1(%union.tree_node* %2, i8 zeroext 1), !dbg !5280
  store %struct.rtx_def* %call1, %struct.rtx_def** %chain, align 8, !dbg !5281
  %3 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !5282
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !5282
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5284

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !5285
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5285
  %bf.load = load i32, i32* %5, align 8, !dbg !5285
  %bf.clear = and i32 %bf.load, 65535, !dbg !5285
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !5285
  br i1 %cmp, label %if.then, label %if.end, !dbg !5286

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !5287
  %call2 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %6), !dbg !5288
  br label %if.end, !dbg !5288

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !5289
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !5291
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !5292
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !5293
  %call4 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %9), !dbg !5294
  %10 = load i8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 16), align 16, !dbg !5295
  %tobool5 = icmp ne i8 %10, 0, !dbg !5295
  br i1 %tobool5, label %if.then6, label %if.end20, !dbg !5297

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5298, metadata !DIExpression()), !dbg !5300
  store i64 0, i64* %i, align 8, !dbg !5301
  br label %for.cond, !dbg !5303

for.cond:                                         ; preds = %for.inc, %if.then6
  %11 = load i64, i64* %i, align 8, !dbg !5304
  %cmp7 = icmp ult i64 %11, 4, !dbg !5306
  br i1 %cmp7, label %for.body, label %for.end, !dbg !5307

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %i, align 8, !dbg !5308
  %arrayidx = getelementptr inbounds [4 x %struct.elims], [4 x %struct.elims]* @expand_builtin_setjmp_receiver.elim_regs, i64 0, i64 %12, !dbg !5310
  %from = getelementptr inbounds %struct.elims, %struct.elims* %arrayidx, i32 0, i32 0, !dbg !5311
  %13 = load i32, i32* %from, align 8, !dbg !5311
  %cmp8 = icmp eq i32 %13, 16, !dbg !5312
  br i1 %cmp8, label %land.lhs.true9, label %if.end13, !dbg !5313

land.lhs.true9:                                   ; preds = %for.body
  %14 = load i64, i64* %i, align 8, !dbg !5314
  %arrayidx10 = getelementptr inbounds [4 x %struct.elims], [4 x %struct.elims]* @expand_builtin_setjmp_receiver.elim_regs, i64 0, i64 %14, !dbg !5315
  %to = getelementptr inbounds %struct.elims, %struct.elims* %arrayidx10, i32 0, i32 1, !dbg !5316
  %15 = load i32, i32* %to, align 4, !dbg !5316
  %cmp11 = icmp eq i32 %15, 6, !dbg !5317
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5318

if.then12:                                        ; preds = %land.lhs.true9
  br label %for.end, !dbg !5319

if.end13:                                         ; preds = %land.lhs.true9, %for.body
  br label %for.inc, !dbg !5320

for.inc:                                          ; preds = %if.end13
  %16 = load i64, i64* %i, align 8, !dbg !5321
  %inc = add i64 %16, 1, !dbg !5321
  store i64 %inc, i64* %i, align 8, !dbg !5321
  br label %for.cond, !dbg !5322, !llvm.loop !5323

for.end:                                          ; preds = %if.then12, %for.cond
  %17 = load i64, i64* %i, align 8, !dbg !5325
  %cmp14 = icmp eq i64 %17, 4, !dbg !5327
  br i1 %cmp14, label %if.then15, label %if.end19, !dbg !5328

if.then15:                                        ; preds = %for.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !5329
  %call16 = call %struct.rtx_def* @get_arg_pointer_save_area(), !dbg !5331
  %call17 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call16), !dbg !5332
  %call18 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %call17), !dbg !5333
  br label %if.end19, !dbg !5334

if.end19:                                         ; preds = %if.then15, %for.end
  br label %if.end20, !dbg !5335

if.end20:                                         ; preds = %if.end19, %if.end
  %19 = load i32, i32* @flag_pic, align 4, !dbg !5336
  %tobool21 = icmp ne i32 %19, 0, !dbg !5336
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !5338

if.then22:                                        ; preds = %if.end20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %receiver_label.addr, align 8, !dbg !5339
  %call23 = call %struct.rtx_def* @gen_builtin_setjmp_receiver(%struct.rtx_def* %20), !dbg !5340
  %call24 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call23), !dbg !5341
  br label %if.end25, !dbg !5341

if.else:                                          ; preds = %if.end20
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then22
  %call26 = call %struct.rtx_def* @gen_blockage(), !dbg !5342
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call26), !dbg !5343
  ret void, !dbg !5344
}

declare dso_local %struct.rtx_def* @emit_use(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_clobber(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_arg_pointer_save_area() #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_builtin_setjmp_receiver(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_blockage() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @mathfn_built_in(%union.tree_node* %type, i32 %fn) #0 !dbg !5345 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5348, metadata !DIExpression()), !dbg !5349
  store i32 %fn, i32* %fn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fn.addr, metadata !5350, metadata !DIExpression()), !dbg !5351
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5352
  %1 = load i32, i32* %fn.addr, align 4, !dbg !5353
  %call = call %union.tree_node* @mathfn_built_in_1(%union.tree_node* %0, i32 %1, i8 zeroext 1), !dbg !5354
  ret %union.tree_node* %call, !dbg !5355
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @mathfn_built_in_1(%union.tree_node* %type, i32 %fn, i8 zeroext %implicit) #0 !dbg !5356 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca i32, align 4
  %implicit.addr = alloca i8, align 1
  %fn_arr = alloca %union.tree_node**, align 8
  %fcode = alloca i32, align 4
  %fcodef = alloca i32, align 4
  %fcodel = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5359, metadata !DIExpression()), !dbg !5360
  store i32 %fn, i32* %fn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fn.addr, metadata !5361, metadata !DIExpression()), !dbg !5362
  store i8 %implicit, i8* %implicit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %implicit.addr, metadata !5363, metadata !DIExpression()), !dbg !5364
  call void @llvm.dbg.declare(metadata %union.tree_node*** %fn_arr, metadata !5365, metadata !DIExpression()), !dbg !5369
  %0 = load i8, i8* %implicit.addr, align 1, !dbg !5370
  %conv = zext i8 %0 to i32, !dbg !5370
  %tobool = icmp ne i32 %conv, 0, !dbg !5370
  %1 = zext i1 %tobool to i64, !dbg !5370
  %cond = select i1 %tobool, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 0), %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 0), !dbg !5370
  store %union.tree_node** %cond, %union.tree_node*** %fn_arr, align 8, !dbg !5369
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !5371, metadata !DIExpression()), !dbg !5372
  call void @llvm.dbg.declare(metadata i32* %fcodef, metadata !5373, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.declare(metadata i32* %fcodel, metadata !5375, metadata !DIExpression()), !dbg !5376
  %2 = load i32, i32* %fn.addr, align 4, !dbg !5377
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 5, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 4, label %sw.bb1
    i32 6, label %sw.bb2
    i32 7, label %sw.bb2
    i32 11, label %sw.bb2
    i32 8, label %sw.bb3
    i32 9, label %sw.bb3
    i32 10, label %sw.bb3
    i32 12, label %sw.bb4
    i32 16, label %sw.bb4
    i32 20, label %sw.bb4
    i32 13, label %sw.bb5
    i32 14, label %sw.bb5
    i32 15, label %sw.bb5
    i32 17, label %sw.bb6
    i32 18, label %sw.bb6
    i32 19, label %sw.bb6
    i32 21, label %sw.bb7
    i32 22, label %sw.bb7
    i32 23, label %sw.bb7
    i32 24, label %sw.bb8
    i32 25, label %sw.bb8
    i32 26, label %sw.bb8
    i32 285, label %sw.bb9
    i32 286, label %sw.bb9
    i32 287, label %sw.bb9
    i32 27, label %sw.bb10
    i32 28, label %sw.bb10
    i32 29, label %sw.bb10
    i32 30, label %sw.bb11
    i32 31, label %sw.bb11
    i32 35, label %sw.bb11
    i32 32, label %sw.bb12
    i32 33, label %sw.bb12
    i32 34, label %sw.bb12
    i32 36, label %sw.bb13
    i32 37, label %sw.bb13
    i32 38, label %sw.bb13
    i32 39, label %sw.bb14
    i32 43, label %sw.bb14
    i32 44, label %sw.bb14
    i32 40, label %sw.bb15
    i32 41, label %sw.bb15
    i32 42, label %sw.bb15
    i32 45, label %sw.bb16
    i32 52, label %sw.bb16
    i32 53, label %sw.bb16
    i32 46, label %sw.bb17
    i32 47, label %sw.bb17
    i32 48, label %sw.bb17
    i32 49, label %sw.bb18
    i32 50, label %sw.bb18
    i32 51, label %sw.bb18
    i32 54, label %sw.bb19
    i32 55, label %sw.bb19
    i32 56, label %sw.bb19
    i32 57, label %sw.bb20
    i32 58, label %sw.bb20
    i32 59, label %sw.bb20
    i32 60, label %sw.bb21
    i32 61, label %sw.bb21
    i32 62, label %sw.bb21
    i32 63, label %sw.bb22
    i32 64, label %sw.bb22
    i32 65, label %sw.bb22
    i32 66, label %sw.bb23
    i32 67, label %sw.bb23
    i32 68, label %sw.bb23
    i32 69, label %sw.bb24
    i32 70, label %sw.bb24
    i32 71, label %sw.bb24
    i32 72, label %sw.bb25
    i32 73, label %sw.bb25
    i32 74, label %sw.bb25
    i32 75, label %sw.bb26
    i32 76, label %sw.bb26
    i32 77, label %sw.bb26
    i32 78, label %sw.bb27
    i32 79, label %sw.bb27
    i32 80, label %sw.bb27
    i32 81, label %sw.bb28
    i32 82, label %sw.bb28
    i32 83, label %sw.bb28
    i32 84, label %sw.bb29
    i32 85, label %sw.bb29
    i32 86, label %sw.bb29
    i32 87, label %sw.bb30
    i32 88, label %sw.bb30
    i32 89, label %sw.bb30
    i32 90, label %sw.bb31
    i32 91, label %sw.bb31
    i32 92, label %sw.bb31
    i32 93, label %sw.bb32
    i32 94, label %sw.bb32
    i32 95, label %sw.bb32
    i32 96, label %sw.bb33
    i32 97, label %sw.bb33
    i32 98, label %sw.bb33
    i32 469, label %sw.bb34
    i32 470, label %sw.bb34
    i32 471, label %sw.bb34
    i32 102, label %sw.bb35
    i32 103, label %sw.bb35
    i32 104, label %sw.bb35
    i32 105, label %sw.bb36
    i32 106, label %sw.bb36
    i32 107, label %sw.bb36
    i32 108, label %sw.bb37
    i32 109, label %sw.bb37
    i32 110, label %sw.bb37
    i32 111, label %sw.bb38
    i32 112, label %sw.bb38
    i32 113, label %sw.bb38
    i32 114, label %sw.bb39
    i32 115, label %sw.bb39
    i32 116, label %sw.bb39
    i32 117, label %sw.bb40
    i32 118, label %sw.bb40
    i32 119, label %sw.bb40
    i32 120, label %sw.bb41
    i32 121, label %sw.bb41
    i32 122, label %sw.bb41
    i32 123, label %sw.bb42
    i32 124, label %sw.bb42
    i32 125, label %sw.bb42
    i32 126, label %sw.bb43
    i32 127, label %sw.bb43
    i32 128, label %sw.bb43
    i32 129, label %sw.bb44
    i32 130, label %sw.bb44
    i32 131, label %sw.bb44
    i32 132, label %sw.bb45
    i32 133, label %sw.bb45
    i32 134, label %sw.bb45
    i32 135, label %sw.bb46
    i32 136, label %sw.bb46
    i32 137, label %sw.bb46
    i32 138, label %sw.bb47
    i32 151, label %sw.bb47
    i32 152, label %sw.bb47
    i32 139, label %sw.bb48
    i32 140, label %sw.bb48
    i32 141, label %sw.bb48
    i32 142, label %sw.bb49
    i32 143, label %sw.bb49
    i32 144, label %sw.bb49
    i32 145, label %sw.bb50
    i32 146, label %sw.bb50
    i32 147, label %sw.bb50
    i32 148, label %sw.bb51
    i32 149, label %sw.bb51
    i32 150, label %sw.bb51
    i32 153, label %sw.bb52
    i32 154, label %sw.bb52
    i32 155, label %sw.bb52
    i32 156, label %sw.bb53
    i32 157, label %sw.bb53
    i32 158, label %sw.bb53
    i32 159, label %sw.bb54
    i32 160, label %sw.bb54
    i32 161, label %sw.bb54
    i32 162, label %sw.bb55
    i32 163, label %sw.bb55
    i32 164, label %sw.bb55
    i32 168, label %sw.bb56
    i32 169, label %sw.bb56
    i32 170, label %sw.bb56
    i32 171, label %sw.bb57
    i32 172, label %sw.bb57
    i32 173, label %sw.bb57
    i32 174, label %sw.bb58
    i32 175, label %sw.bb58
    i32 176, label %sw.bb58
    i32 177, label %sw.bb59
    i32 178, label %sw.bb59
    i32 179, label %sw.bb59
    i32 180, label %sw.bb60
    i32 184, label %sw.bb60
    i32 188, label %sw.bb60
    i32 185, label %sw.bb61
    i32 186, label %sw.bb61
    i32 187, label %sw.bb61
    i32 181, label %sw.bb62
    i32 182, label %sw.bb62
    i32 183, label %sw.bb62
    i32 189, label %sw.bb63
    i32 190, label %sw.bb63
    i32 191, label %sw.bb63
    i32 192, label %sw.bb64
    i32 193, label %sw.bb64
    i32 194, label %sw.bb64
    i32 195, label %sw.bb65
    i32 196, label %sw.bb65
    i32 197, label %sw.bb65
    i32 198, label %sw.bb66
    i32 199, label %sw.bb66
    i32 200, label %sw.bb66
    i32 201, label %sw.bb67
    i32 202, label %sw.bb67
    i32 203, label %sw.bb67
    i32 204, label %sw.bb68
    i32 205, label %sw.bb68
    i32 206, label %sw.bb68
    i32 207, label %sw.bb69
    i32 208, label %sw.bb69
    i32 209, label %sw.bb69
    i32 210, label %sw.bb70
    i32 211, label %sw.bb70
    i32 212, label %sw.bb70
    i32 216, label %sw.bb71
    i32 217, label %sw.bb71
    i32 218, label %sw.bb71
    i32 219, label %sw.bb72
    i32 223, label %sw.bb72
    i32 227, label %sw.bb72
    i32 220, label %sw.bb73
    i32 221, label %sw.bb73
    i32 222, label %sw.bb73
    i32 224, label %sw.bb74
    i32 225, label %sw.bb74
    i32 226, label %sw.bb74
    i32 228, label %sw.bb75
    i32 229, label %sw.bb75
    i32 230, label %sw.bb75
    i32 231, label %sw.bb76
    i32 232, label %sw.bb76
    i32 236, label %sw.bb76
    i32 233, label %sw.bb77
    i32 234, label %sw.bb77
    i32 235, label %sw.bb77
    i32 237, label %sw.bb78
    i32 238, label %sw.bb78
    i32 239, label %sw.bb78
    i32 240, label %sw.bb79
    i32 241, label %sw.bb79
    i32 242, label %sw.bb79
    i32 243, label %sw.bb80
    i32 244, label %sw.bb80
    i32 245, label %sw.bb80
    i32 246, label %sw.bb81
    i32 247, label %sw.bb81
    i32 248, label %sw.bb81
    i32 249, label %sw.bb82
    i32 250, label %sw.bb82
    i32 251, label %sw.bb82
  ], !dbg !5378

sw.bb:                                            ; preds = %entry, %entry, %entry
  store i32 0, i32* %fcode, align 4, !dbg !5379
  store i32 1, i32* %fcodef, align 4, !dbg !5379
  store i32 5, i32* %fcodel, align 4, !dbg !5379
  br label %sw.epilog, !dbg !5379

sw.bb1:                                           ; preds = %entry, %entry, %entry
  store i32 2, i32* %fcode, align 4, !dbg !5381
  store i32 3, i32* %fcodef, align 4, !dbg !5381
  store i32 4, i32* %fcodel, align 4, !dbg !5381
  br label %sw.epilog, !dbg !5381

sw.bb2:                                           ; preds = %entry, %entry, %entry
  store i32 6, i32* %fcode, align 4, !dbg !5382
  store i32 7, i32* %fcodef, align 4, !dbg !5382
  store i32 11, i32* %fcodel, align 4, !dbg !5382
  br label %sw.epilog, !dbg !5382

sw.bb3:                                           ; preds = %entry, %entry, %entry
  store i32 8, i32* %fcode, align 4, !dbg !5383
  store i32 9, i32* %fcodef, align 4, !dbg !5383
  store i32 10, i32* %fcodel, align 4, !dbg !5383
  br label %sw.epilog, !dbg !5383

sw.bb4:                                           ; preds = %entry, %entry, %entry
  store i32 12, i32* %fcode, align 4, !dbg !5384
  store i32 16, i32* %fcodef, align 4, !dbg !5384
  store i32 20, i32* %fcodel, align 4, !dbg !5384
  br label %sw.epilog, !dbg !5384

sw.bb5:                                           ; preds = %entry, %entry, %entry
  store i32 13, i32* %fcode, align 4, !dbg !5385
  store i32 14, i32* %fcodef, align 4, !dbg !5385
  store i32 15, i32* %fcodel, align 4, !dbg !5385
  br label %sw.epilog, !dbg !5385

sw.bb6:                                           ; preds = %entry, %entry, %entry
  store i32 17, i32* %fcode, align 4, !dbg !5386
  store i32 18, i32* %fcodef, align 4, !dbg !5386
  store i32 19, i32* %fcodel, align 4, !dbg !5386
  br label %sw.epilog, !dbg !5386

sw.bb7:                                           ; preds = %entry, %entry, %entry
  store i32 21, i32* %fcode, align 4, !dbg !5387
  store i32 22, i32* %fcodef, align 4, !dbg !5387
  store i32 23, i32* %fcodel, align 4, !dbg !5387
  br label %sw.epilog, !dbg !5387

sw.bb8:                                           ; preds = %entry, %entry, %entry
  store i32 24, i32* %fcode, align 4, !dbg !5388
  store i32 25, i32* %fcodef, align 4, !dbg !5388
  store i32 26, i32* %fcodel, align 4, !dbg !5388
  br label %sw.epilog, !dbg !5388

sw.bb9:                                           ; preds = %entry, %entry, %entry
  store i32 285, i32* %fcode, align 4, !dbg !5389
  store i32 286, i32* %fcodef, align 4, !dbg !5389
  store i32 287, i32* %fcodel, align 4, !dbg !5389
  br label %sw.epilog, !dbg !5389

sw.bb10:                                          ; preds = %entry, %entry, %entry
  store i32 27, i32* %fcode, align 4, !dbg !5390
  store i32 28, i32* %fcodef, align 4, !dbg !5390
  store i32 29, i32* %fcodel, align 4, !dbg !5390
  br label %sw.epilog, !dbg !5390

sw.bb11:                                          ; preds = %entry, %entry, %entry
  store i32 30, i32* %fcode, align 4, !dbg !5391
  store i32 31, i32* %fcodef, align 4, !dbg !5391
  store i32 35, i32* %fcodel, align 4, !dbg !5391
  br label %sw.epilog, !dbg !5391

sw.bb12:                                          ; preds = %entry, %entry, %entry
  store i32 32, i32* %fcode, align 4, !dbg !5392
  store i32 33, i32* %fcodef, align 4, !dbg !5392
  store i32 34, i32* %fcodel, align 4, !dbg !5392
  br label %sw.epilog, !dbg !5392

sw.bb13:                                          ; preds = %entry, %entry, %entry
  store i32 36, i32* %fcode, align 4, !dbg !5393
  store i32 37, i32* %fcodef, align 4, !dbg !5393
  store i32 38, i32* %fcodel, align 4, !dbg !5393
  br label %sw.epilog, !dbg !5393

sw.bb14:                                          ; preds = %entry, %entry, %entry
  store i32 39, i32* %fcode, align 4, !dbg !5394
  store i32 43, i32* %fcodef, align 4, !dbg !5394
  store i32 44, i32* %fcodel, align 4, !dbg !5394
  br label %sw.epilog, !dbg !5394

sw.bb15:                                          ; preds = %entry, %entry, %entry
  store i32 40, i32* %fcode, align 4, !dbg !5395
  store i32 41, i32* %fcodef, align 4, !dbg !5395
  store i32 42, i32* %fcodel, align 4, !dbg !5395
  br label %sw.epilog, !dbg !5395

sw.bb16:                                          ; preds = %entry, %entry, %entry
  store i32 45, i32* %fcode, align 4, !dbg !5396
  store i32 52, i32* %fcodef, align 4, !dbg !5396
  store i32 53, i32* %fcodel, align 4, !dbg !5396
  br label %sw.epilog, !dbg !5396

sw.bb17:                                          ; preds = %entry, %entry, %entry
  store i32 46, i32* %fcode, align 4, !dbg !5397
  store i32 47, i32* %fcodef, align 4, !dbg !5397
  store i32 48, i32* %fcodel, align 4, !dbg !5397
  br label %sw.epilog, !dbg !5397

sw.bb18:                                          ; preds = %entry, %entry, %entry
  store i32 49, i32* %fcode, align 4, !dbg !5398
  store i32 50, i32* %fcodef, align 4, !dbg !5398
  store i32 51, i32* %fcodel, align 4, !dbg !5398
  br label %sw.epilog, !dbg !5398

sw.bb19:                                          ; preds = %entry, %entry, %entry
  store i32 54, i32* %fcode, align 4, !dbg !5399
  store i32 55, i32* %fcodef, align 4, !dbg !5399
  store i32 56, i32* %fcodel, align 4, !dbg !5399
  br label %sw.epilog, !dbg !5399

sw.bb20:                                          ; preds = %entry, %entry, %entry
  store i32 57, i32* %fcode, align 4, !dbg !5400
  store i32 58, i32* %fcodef, align 4, !dbg !5400
  store i32 59, i32* %fcodel, align 4, !dbg !5400
  br label %sw.epilog, !dbg !5400

sw.bb21:                                          ; preds = %entry, %entry, %entry
  store i32 60, i32* %fcode, align 4, !dbg !5401
  store i32 61, i32* %fcodef, align 4, !dbg !5401
  store i32 62, i32* %fcodel, align 4, !dbg !5401
  br label %sw.epilog, !dbg !5401

sw.bb22:                                          ; preds = %entry, %entry, %entry
  store i32 63, i32* %fcode, align 4, !dbg !5402
  store i32 64, i32* %fcodef, align 4, !dbg !5402
  store i32 65, i32* %fcodel, align 4, !dbg !5402
  br label %sw.epilog, !dbg !5402

sw.bb23:                                          ; preds = %entry, %entry, %entry
  store i32 66, i32* %fcode, align 4, !dbg !5403
  store i32 67, i32* %fcodef, align 4, !dbg !5403
  store i32 68, i32* %fcodel, align 4, !dbg !5403
  br label %sw.epilog, !dbg !5403

sw.bb24:                                          ; preds = %entry, %entry, %entry
  store i32 69, i32* %fcode, align 4, !dbg !5404
  store i32 70, i32* %fcodef, align 4, !dbg !5404
  store i32 71, i32* %fcodel, align 4, !dbg !5404
  br label %sw.epilog, !dbg !5404

sw.bb25:                                          ; preds = %entry, %entry, %entry
  store i32 72, i32* %fcode, align 4, !dbg !5405
  store i32 73, i32* %fcodef, align 4, !dbg !5405
  store i32 74, i32* %fcodel, align 4, !dbg !5405
  br label %sw.epilog, !dbg !5405

sw.bb26:                                          ; preds = %entry, %entry, %entry
  store i32 75, i32* %fcode, align 4, !dbg !5406
  store i32 76, i32* %fcodef, align 4, !dbg !5406
  store i32 77, i32* %fcodel, align 4, !dbg !5406
  br label %sw.epilog, !dbg !5406

sw.bb27:                                          ; preds = %entry, %entry, %entry
  store i32 78, i32* %fcode, align 4, !dbg !5407
  store i32 79, i32* %fcodef, align 4, !dbg !5407
  store i32 80, i32* %fcodel, align 4, !dbg !5407
  br label %sw.epilog, !dbg !5407

sw.bb28:                                          ; preds = %entry, %entry, %entry
  store i32 81, i32* %fcode, align 4, !dbg !5408
  store i32 82, i32* %fcodef, align 4, !dbg !5408
  store i32 83, i32* %fcodel, align 4, !dbg !5408
  br label %sw.epilog, !dbg !5408

sw.bb29:                                          ; preds = %entry, %entry, %entry
  store i32 84, i32* %fcode, align 4, !dbg !5409
  store i32 85, i32* %fcodef, align 4, !dbg !5409
  store i32 86, i32* %fcodel, align 4, !dbg !5409
  br label %sw.epilog, !dbg !5409

sw.bb30:                                          ; preds = %entry, %entry, %entry
  store i32 87, i32* %fcode, align 4, !dbg !5410
  store i32 88, i32* %fcodef, align 4, !dbg !5410
  store i32 89, i32* %fcodel, align 4, !dbg !5410
  br label %sw.epilog, !dbg !5410

sw.bb31:                                          ; preds = %entry, %entry, %entry
  store i32 90, i32* %fcode, align 4, !dbg !5411
  store i32 91, i32* %fcodef, align 4, !dbg !5411
  store i32 92, i32* %fcodel, align 4, !dbg !5411
  br label %sw.epilog, !dbg !5411

sw.bb32:                                          ; preds = %entry, %entry, %entry
  store i32 93, i32* %fcode, align 4, !dbg !5412
  store i32 94, i32* %fcodef, align 4, !dbg !5412
  store i32 95, i32* %fcodel, align 4, !dbg !5412
  br label %sw.epilog, !dbg !5412

sw.bb33:                                          ; preds = %entry, %entry, %entry
  store i32 96, i32* %fcode, align 4, !dbg !5413
  store i32 97, i32* %fcodef, align 4, !dbg !5413
  store i32 98, i32* %fcodel, align 4, !dbg !5413
  br label %sw.epilog, !dbg !5413

sw.bb34:                                          ; preds = %entry, %entry, %entry
  store i32 469, i32* %fcode, align 4, !dbg !5414
  store i32 470, i32* %fcodef, align 4, !dbg !5414
  store i32 471, i32* %fcodel, align 4, !dbg !5414
  br label %sw.epilog, !dbg !5414

sw.bb35:                                          ; preds = %entry, %entry, %entry
  store i32 102, i32* %fcode, align 4, !dbg !5415
  store i32 103, i32* %fcodef, align 4, !dbg !5415
  store i32 104, i32* %fcodel, align 4, !dbg !5415
  br label %sw.epilog, !dbg !5415

sw.bb36:                                          ; preds = %entry, %entry, %entry
  store i32 105, i32* %fcode, align 4, !dbg !5416
  store i32 106, i32* %fcodef, align 4, !dbg !5416
  store i32 107, i32* %fcodel, align 4, !dbg !5416
  br label %sw.epilog, !dbg !5416

sw.bb37:                                          ; preds = %entry, %entry, %entry
  store i32 108, i32* %fcode, align 4, !dbg !5417
  store i32 109, i32* %fcodef, align 4, !dbg !5417
  store i32 110, i32* %fcodel, align 4, !dbg !5417
  br label %sw.epilog, !dbg !5417

sw.bb38:                                          ; preds = %entry, %entry, %entry
  store i32 111, i32* %fcode, align 4, !dbg !5418
  store i32 112, i32* %fcodef, align 4, !dbg !5418
  store i32 113, i32* %fcodel, align 4, !dbg !5418
  br label %sw.epilog, !dbg !5418

sw.bb39:                                          ; preds = %entry, %entry, %entry
  store i32 114, i32* %fcode, align 4, !dbg !5419
  store i32 115, i32* %fcodef, align 4, !dbg !5419
  store i32 116, i32* %fcodel, align 4, !dbg !5419
  br label %sw.epilog, !dbg !5419

sw.bb40:                                          ; preds = %entry, %entry, %entry
  store i32 117, i32* %fcode, align 4, !dbg !5420
  store i32 118, i32* %fcodef, align 4, !dbg !5420
  store i32 119, i32* %fcodel, align 4, !dbg !5420
  br label %sw.epilog, !dbg !5420

sw.bb41:                                          ; preds = %entry, %entry, %entry
  store i32 120, i32* %fcode, align 4, !dbg !5421
  store i32 121, i32* %fcodef, align 4, !dbg !5421
  store i32 122, i32* %fcodel, align 4, !dbg !5421
  br label %sw.epilog, !dbg !5421

sw.bb42:                                          ; preds = %entry, %entry, %entry
  store i32 123, i32* %fcode, align 4, !dbg !5422
  store i32 124, i32* %fcodef, align 4, !dbg !5422
  store i32 125, i32* %fcodel, align 4, !dbg !5422
  br label %sw.epilog, !dbg !5422

sw.bb43:                                          ; preds = %entry, %entry, %entry
  store i32 126, i32* %fcode, align 4, !dbg !5423
  store i32 127, i32* %fcodef, align 4, !dbg !5423
  store i32 128, i32* %fcodel, align 4, !dbg !5423
  br label %sw.epilog, !dbg !5423

sw.bb44:                                          ; preds = %entry, %entry, %entry
  store i32 129, i32* %fcode, align 4, !dbg !5424
  store i32 130, i32* %fcodef, align 4, !dbg !5424
  store i32 131, i32* %fcodel, align 4, !dbg !5424
  br label %sw.epilog, !dbg !5424

sw.bb45:                                          ; preds = %entry, %entry, %entry
  store i32 132, i32* %fcode, align 4, !dbg !5425
  store i32 133, i32* %fcodef, align 4, !dbg !5425
  store i32 134, i32* %fcodel, align 4, !dbg !5425
  br label %sw.epilog, !dbg !5425

sw.bb46:                                          ; preds = %entry, %entry, %entry
  store i32 135, i32* %fcode, align 4, !dbg !5426
  store i32 136, i32* %fcodef, align 4, !dbg !5426
  store i32 137, i32* %fcodel, align 4, !dbg !5426
  br label %sw.epilog, !dbg !5426

sw.bb47:                                          ; preds = %entry, %entry, %entry
  store i32 138, i32* %fcode, align 4, !dbg !5427
  store i32 151, i32* %fcodef, align 4, !dbg !5427
  store i32 152, i32* %fcodel, align 4, !dbg !5427
  br label %sw.epilog, !dbg !5427

sw.bb48:                                          ; preds = %entry, %entry, %entry
  store i32 139, i32* %fcode, align 4, !dbg !5428
  store i32 140, i32* %fcodef, align 4, !dbg !5428
  store i32 141, i32* %fcodel, align 4, !dbg !5428
  br label %sw.epilog, !dbg !5428

sw.bb49:                                          ; preds = %entry, %entry, %entry
  store i32 142, i32* %fcode, align 4, !dbg !5429
  store i32 143, i32* %fcodef, align 4, !dbg !5429
  store i32 144, i32* %fcodel, align 4, !dbg !5429
  br label %sw.epilog, !dbg !5429

sw.bb50:                                          ; preds = %entry, %entry, %entry
  store i32 145, i32* %fcode, align 4, !dbg !5430
  store i32 146, i32* %fcodef, align 4, !dbg !5430
  store i32 147, i32* %fcodel, align 4, !dbg !5430
  br label %sw.epilog, !dbg !5430

sw.bb51:                                          ; preds = %entry, %entry, %entry
  store i32 148, i32* %fcode, align 4, !dbg !5431
  store i32 149, i32* %fcodef, align 4, !dbg !5431
  store i32 150, i32* %fcodel, align 4, !dbg !5431
  br label %sw.epilog, !dbg !5431

sw.bb52:                                          ; preds = %entry, %entry, %entry
  store i32 153, i32* %fcode, align 4, !dbg !5432
  store i32 154, i32* %fcodef, align 4, !dbg !5432
  store i32 155, i32* %fcodel, align 4, !dbg !5432
  br label %sw.epilog, !dbg !5432

sw.bb53:                                          ; preds = %entry, %entry, %entry
  store i32 156, i32* %fcode, align 4, !dbg !5433
  store i32 157, i32* %fcodef, align 4, !dbg !5433
  store i32 158, i32* %fcodel, align 4, !dbg !5433
  br label %sw.epilog, !dbg !5433

sw.bb54:                                          ; preds = %entry, %entry, %entry
  store i32 159, i32* %fcode, align 4, !dbg !5434
  store i32 160, i32* %fcodef, align 4, !dbg !5434
  store i32 161, i32* %fcodel, align 4, !dbg !5434
  br label %sw.epilog, !dbg !5434

sw.bb55:                                          ; preds = %entry, %entry, %entry
  store i32 162, i32* %fcode, align 4, !dbg !5435
  store i32 163, i32* %fcodef, align 4, !dbg !5435
  store i32 164, i32* %fcodel, align 4, !dbg !5435
  br label %sw.epilog, !dbg !5435

sw.bb56:                                          ; preds = %entry, %entry, %entry
  store i32 168, i32* %fcode, align 4, !dbg !5436
  store i32 169, i32* %fcodef, align 4, !dbg !5436
  store i32 170, i32* %fcodel, align 4, !dbg !5436
  br label %sw.epilog, !dbg !5436

sw.bb57:                                          ; preds = %entry, %entry, %entry
  store i32 171, i32* %fcode, align 4, !dbg !5437
  store i32 172, i32* %fcodef, align 4, !dbg !5437
  store i32 173, i32* %fcodel, align 4, !dbg !5437
  br label %sw.epilog, !dbg !5437

sw.bb58:                                          ; preds = %entry, %entry, %entry
  store i32 174, i32* %fcode, align 4, !dbg !5438
  store i32 175, i32* %fcodef, align 4, !dbg !5438
  store i32 176, i32* %fcodel, align 4, !dbg !5438
  br label %sw.epilog, !dbg !5438

sw.bb59:                                          ; preds = %entry, %entry, %entry
  store i32 177, i32* %fcode, align 4, !dbg !5439
  store i32 178, i32* %fcodef, align 4, !dbg !5439
  store i32 179, i32* %fcodel, align 4, !dbg !5439
  br label %sw.epilog, !dbg !5439

sw.bb60:                                          ; preds = %entry, %entry, %entry
  store i32 180, i32* %fcode, align 4, !dbg !5440
  store i32 184, i32* %fcodef, align 4, !dbg !5440
  store i32 188, i32* %fcodel, align 4, !dbg !5440
  br label %sw.epilog, !dbg !5440

sw.bb61:                                          ; preds = %entry, %entry, %entry
  store i32 185, i32* %fcode, align 4, !dbg !5441
  store i32 186, i32* %fcodef, align 4, !dbg !5441
  store i32 187, i32* %fcodel, align 4, !dbg !5441
  br label %sw.epilog, !dbg !5441

sw.bb62:                                          ; preds = %entry, %entry, %entry
  store i32 181, i32* %fcode, align 4, !dbg !5442
  store i32 182, i32* %fcodef, align 4, !dbg !5442
  store i32 183, i32* %fcodel, align 4, !dbg !5442
  br label %sw.epilog, !dbg !5442

sw.bb63:                                          ; preds = %entry, %entry, %entry
  store i32 189, i32* %fcode, align 4, !dbg !5443
  store i32 190, i32* %fcodef, align 4, !dbg !5443
  store i32 191, i32* %fcodel, align 4, !dbg !5443
  br label %sw.epilog, !dbg !5443

sw.bb64:                                          ; preds = %entry, %entry, %entry
  store i32 192, i32* %fcode, align 4, !dbg !5444
  store i32 193, i32* %fcodef, align 4, !dbg !5444
  store i32 194, i32* %fcodel, align 4, !dbg !5444
  br label %sw.epilog, !dbg !5444

sw.bb65:                                          ; preds = %entry, %entry, %entry
  store i32 195, i32* %fcode, align 4, !dbg !5445
  store i32 196, i32* %fcodef, align 4, !dbg !5445
  store i32 197, i32* %fcodel, align 4, !dbg !5445
  br label %sw.epilog, !dbg !5445

sw.bb66:                                          ; preds = %entry, %entry, %entry
  store i32 198, i32* %fcode, align 4, !dbg !5446
  store i32 199, i32* %fcodef, align 4, !dbg !5446
  store i32 200, i32* %fcodel, align 4, !dbg !5446
  br label %sw.epilog, !dbg !5446

sw.bb67:                                          ; preds = %entry, %entry, %entry
  store i32 201, i32* %fcode, align 4, !dbg !5447
  store i32 202, i32* %fcodef, align 4, !dbg !5447
  store i32 203, i32* %fcodel, align 4, !dbg !5447
  br label %sw.epilog, !dbg !5447

sw.bb68:                                          ; preds = %entry, %entry, %entry
  store i32 204, i32* %fcode, align 4, !dbg !5448
  store i32 205, i32* %fcodef, align 4, !dbg !5448
  store i32 206, i32* %fcodel, align 4, !dbg !5448
  br label %sw.epilog, !dbg !5448

sw.bb69:                                          ; preds = %entry, %entry, %entry
  store i32 207, i32* %fcode, align 4, !dbg !5449
  store i32 208, i32* %fcodef, align 4, !dbg !5449
  store i32 209, i32* %fcodel, align 4, !dbg !5449
  br label %sw.epilog, !dbg !5449

sw.bb70:                                          ; preds = %entry, %entry, %entry
  store i32 210, i32* %fcode, align 4, !dbg !5450
  store i32 211, i32* %fcodef, align 4, !dbg !5450
  store i32 212, i32* %fcodel, align 4, !dbg !5450
  br label %sw.epilog, !dbg !5450

sw.bb71:                                          ; preds = %entry, %entry, %entry
  store i32 216, i32* %fcode, align 4, !dbg !5451
  store i32 217, i32* %fcodef, align 4, !dbg !5451
  store i32 218, i32* %fcodel, align 4, !dbg !5451
  br label %sw.epilog, !dbg !5451

sw.bb72:                                          ; preds = %entry, %entry, %entry
  store i32 219, i32* %fcode, align 4, !dbg !5452
  store i32 223, i32* %fcodef, align 4, !dbg !5452
  store i32 227, i32* %fcodel, align 4, !dbg !5452
  br label %sw.epilog, !dbg !5452

sw.bb73:                                          ; preds = %entry, %entry, %entry
  store i32 220, i32* %fcode, align 4, !dbg !5453
  store i32 221, i32* %fcodef, align 4, !dbg !5453
  store i32 222, i32* %fcodel, align 4, !dbg !5453
  br label %sw.epilog, !dbg !5453

sw.bb74:                                          ; preds = %entry, %entry, %entry
  store i32 224, i32* %fcode, align 4, !dbg !5454
  store i32 225, i32* %fcodef, align 4, !dbg !5454
  store i32 226, i32* %fcodel, align 4, !dbg !5454
  br label %sw.epilog, !dbg !5454

sw.bb75:                                          ; preds = %entry, %entry, %entry
  store i32 228, i32* %fcode, align 4, !dbg !5455
  store i32 229, i32* %fcodef, align 4, !dbg !5455
  store i32 230, i32* %fcodel, align 4, !dbg !5455
  br label %sw.epilog, !dbg !5455

sw.bb76:                                          ; preds = %entry, %entry, %entry
  store i32 231, i32* %fcode, align 4, !dbg !5456
  store i32 232, i32* %fcodef, align 4, !dbg !5456
  store i32 236, i32* %fcodel, align 4, !dbg !5456
  br label %sw.epilog, !dbg !5456

sw.bb77:                                          ; preds = %entry, %entry, %entry
  store i32 233, i32* %fcode, align 4, !dbg !5457
  store i32 234, i32* %fcodef, align 4, !dbg !5457
  store i32 235, i32* %fcodel, align 4, !dbg !5457
  br label %sw.epilog, !dbg !5457

sw.bb78:                                          ; preds = %entry, %entry, %entry
  store i32 237, i32* %fcode, align 4, !dbg !5458
  store i32 238, i32* %fcodef, align 4, !dbg !5458
  store i32 239, i32* %fcodel, align 4, !dbg !5458
  br label %sw.epilog, !dbg !5458

sw.bb79:                                          ; preds = %entry, %entry, %entry
  store i32 240, i32* %fcode, align 4, !dbg !5459
  store i32 241, i32* %fcodef, align 4, !dbg !5459
  store i32 242, i32* %fcodel, align 4, !dbg !5459
  br label %sw.epilog, !dbg !5459

sw.bb80:                                          ; preds = %entry, %entry, %entry
  store i32 243, i32* %fcode, align 4, !dbg !5460
  store i32 244, i32* %fcodef, align 4, !dbg !5460
  store i32 245, i32* %fcodel, align 4, !dbg !5460
  br label %sw.epilog, !dbg !5460

sw.bb81:                                          ; preds = %entry, %entry, %entry
  store i32 246, i32* %fcode, align 4, !dbg !5461
  store i32 247, i32* %fcodef, align 4, !dbg !5461
  store i32 248, i32* %fcodel, align 4, !dbg !5461
  br label %sw.epilog, !dbg !5461

sw.bb82:                                          ; preds = %entry, %entry, %entry
  store i32 249, i32* %fcode, align 4, !dbg !5462
  store i32 250, i32* %fcodef, align 4, !dbg !5462
  store i32 251, i32* %fcodel, align 4, !dbg !5462
  br label %sw.epilog, !dbg !5462

sw.default:                                       ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5463
  br label %return, !dbg !5463

sw.epilog:                                        ; preds = %sw.bb82, %sw.bb81, %sw.bb80, %sw.bb79, %sw.bb78, %sw.bb77, %sw.bb76, %sw.bb75, %sw.bb74, %sw.bb73, %sw.bb72, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb68, %sw.bb67, %sw.bb66, %sw.bb65, %sw.bb64, %sw.bb63, %sw.bb62, %sw.bb61, %sw.bb60, %sw.bb59, %sw.bb58, %sw.bb57, %sw.bb56, %sw.bb55, %sw.bb54, %sw.bb53, %sw.bb52, %sw.bb51, %sw.bb50, %sw.bb49, %sw.bb48, %sw.bb47, %sw.bb46, %sw.bb45, %sw.bb44, %sw.bb43, %sw.bb42, %sw.bb41, %sw.bb40, %sw.bb39, %sw.bb38, %sw.bb37, %sw.bb36, %sw.bb35, %sw.bb34, %sw.bb33, %sw.bb32, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5464
  %type83 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5464
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 16, !dbg !5464
  %4 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5464
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 32), align 16, !dbg !5466
  %cmp = icmp eq %union.tree_node* %4, %5, !dbg !5467
  br i1 %cmp, label %if.then, label %if.else, !dbg !5468

if.then:                                          ; preds = %sw.epilog
  %6 = load %union.tree_node**, %union.tree_node*** %fn_arr, align 8, !dbg !5469
  %7 = load i32, i32* %fcode, align 4, !dbg !5470
  %idxprom = zext i32 %7 to i64, !dbg !5469
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !5469
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5469
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5471
  br label %return, !dbg !5471

if.else:                                          ; preds = %sw.epilog
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5472
  %type85 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5472
  %main_variant86 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 16, !dbg !5472
  %10 = load %union.tree_node*, %union.tree_node** %main_variant86, align 8, !dbg !5472
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 31), align 8, !dbg !5474
  %cmp87 = icmp eq %union.tree_node* %10, %11, !dbg !5475
  br i1 %cmp87, label %if.then89, label %if.else92, !dbg !5476

if.then89:                                        ; preds = %if.else
  %12 = load %union.tree_node**, %union.tree_node*** %fn_arr, align 8, !dbg !5477
  %13 = load i32, i32* %fcodef, align 4, !dbg !5478
  %idxprom90 = zext i32 %13 to i64, !dbg !5477
  %arrayidx91 = getelementptr inbounds %union.tree_node*, %union.tree_node** %12, i64 %idxprom90, !dbg !5477
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx91, align 8, !dbg !5477
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !5479
  br label %return, !dbg !5479

if.else92:                                        ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5480
  %type93 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !5480
  %main_variant94 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 16, !dbg !5480
  %16 = load %union.tree_node*, %union.tree_node** %main_variant94, align 8, !dbg !5480
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 33), align 8, !dbg !5482
  %cmp95 = icmp eq %union.tree_node* %16, %17, !dbg !5483
  br i1 %cmp95, label %if.then97, label %if.else100, !dbg !5484

if.then97:                                        ; preds = %if.else92
  %18 = load %union.tree_node**, %union.tree_node*** %fn_arr, align 8, !dbg !5485
  %19 = load i32, i32* %fcodel, align 4, !dbg !5486
  %idxprom98 = zext i32 %19 to i64, !dbg !5485
  %arrayidx99 = getelementptr inbounds %union.tree_node*, %union.tree_node** %18, i64 %idxprom98, !dbg !5485
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx99, align 8, !dbg !5485
  store %union.tree_node* %20, %union.tree_node** %retval, align 8, !dbg !5487
  br label %return, !dbg !5487

if.else100:                                       ; preds = %if.else92
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5488
  br label %return, !dbg !5488

return:                                           ; preds = %if.else100, %if.then97, %if.then89, %if.then, %sw.default
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5489
  ret %union.tree_node* %21, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @builtin_strncpy_read_str(i8* %data, i64 %offset, i32 %mode) #0 !dbg !5490 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %offset.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5495, metadata !DIExpression()), !dbg !5496
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5497, metadata !DIExpression()), !dbg !5498
  call void @llvm.dbg.declare(metadata i8** %str, metadata !5499, metadata !DIExpression()), !dbg !5500
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5501
  store i8* %0, i8** %str, align 8, !dbg !5500
  %1 = load i64, i64* %offset.addr, align 8, !dbg !5502
  %2 = load i8*, i8** %str, align 8, !dbg !5504
  %call = call i64 @strlen(i8* %2), !dbg !5505
  %cmp = icmp ugt i64 %1, %call, !dbg !5506
  br i1 %cmp, label %if.then, label %if.end, !dbg !5507

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5508
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !5509
  br label %return, !dbg !5509

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %str, align 8, !dbg !5510
  %5 = load i64, i64* %offset.addr, align 8, !dbg !5511
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5512
  %6 = load i32, i32* %mode.addr, align 4, !dbg !5513
  %call1 = call %struct.rtx_def* @c_readstr(i8* %add.ptr, i32 %6), !dbg !5514
  store %struct.rtx_def* %call1, %struct.rtx_def** %retval, align 8, !dbg !5515
  br label %return, !dbg !5515

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5516
  ret %struct.rtx_def* %7, !dbg !5516
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @c_readstr(i8* %str, i32 %mode) #0 !dbg !5517 {
entry:
  %str.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  %c = alloca [2 x i64], align 16
  %ch = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !5520, metadata !DIExpression()), !dbg !5521
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @llvm.dbg.declare(metadata [2 x i64]* %c, metadata !5524, metadata !DIExpression()), !dbg !5526
  call void @llvm.dbg.declare(metadata i64* %ch, metadata !5527, metadata !DIExpression()), !dbg !5528
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5529, metadata !DIExpression()), !dbg !5530
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5531, metadata !DIExpression()), !dbg !5532
  %0 = load i32, i32* %mode.addr, align 4, !dbg !5533
  %idxprom = zext i32 %0 to i64, !dbg !5533
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5533
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5533
  %conv = zext i8 %1 to i32, !dbg !5533
  %cmp = icmp eq i32 %conv, 2, !dbg !5533
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5533

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 553, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !5533
  br label %cond.end, !dbg !5533

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5533

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5533
  %arrayidx2 = getelementptr inbounds [2 x i64], [2 x i64]* %c, i64 0, i64 0, !dbg !5534
  store i64 0, i64* %arrayidx2, align 16, !dbg !5535
  %arrayidx3 = getelementptr inbounds [2 x i64], [2 x i64]* %c, i64 0, i64 1, !dbg !5536
  store i64 0, i64* %arrayidx3, align 8, !dbg !5537
  store i64 1, i64* %ch, align 8, !dbg !5538
  store i32 0, i32* %i, align 4, !dbg !5539
  br label %for.cond, !dbg !5541

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !5542
  %3 = load i32, i32* %mode.addr, align 4, !dbg !5544
  %idxprom4 = zext i32 %3 to i64, !dbg !5544
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom4, !dbg !5544
  %4 = load i8, i8* %arrayidx5, align 1, !dbg !5544
  %conv6 = zext i8 %4 to i16, !dbg !5544
  %conv7 = zext i16 %conv6 to i32, !dbg !5544
  %cmp8 = icmp ult i32 %2, %conv7, !dbg !5545
  br i1 %cmp8, label %for.body, label %for.end, !dbg !5546

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !5547
  store i32 %5, i32* %j, align 4, !dbg !5549
  %6 = load i32, i32* %j, align 4, !dbg !5550
  %mul = mul i32 %6, 8, !dbg !5550
  store i32 %mul, i32* %j, align 4, !dbg !5550
  %7 = load i32, i32* %j, align 4, !dbg !5551
  %cmp10 = icmp ule i32 %7, 128, !dbg !5551
  br i1 %cmp10, label %cond.false13, label %cond.true12, !dbg !5551

cond.true12:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 567, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !5551
  br label %cond.end14, !dbg !5551

cond.false13:                                     ; preds = %for.body
  br label %cond.end14, !dbg !5551

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !5551
  %8 = load i64, i64* %ch, align 8, !dbg !5552
  %tobool = icmp ne i64 %8, 0, !dbg !5552
  br i1 %tobool, label %if.then, label %if.end, !dbg !5554

if.then:                                          ; preds = %cond.end14
  %9 = load i8*, i8** %str.addr, align 8, !dbg !5555
  %10 = load i32, i32* %i, align 4, !dbg !5556
  %idxprom16 = zext i32 %10 to i64, !dbg !5555
  %arrayidx17 = getelementptr inbounds i8, i8* %9, i64 %idxprom16, !dbg !5555
  %11 = load i8, i8* %arrayidx17, align 1, !dbg !5555
  %conv18 = zext i8 %11 to i64, !dbg !5557
  store i64 %conv18, i64* %ch, align 8, !dbg !5558
  br label %if.end, !dbg !5559

if.end:                                           ; preds = %if.then, %cond.end14
  %12 = load i64, i64* %ch, align 8, !dbg !5560
  %13 = load i32, i32* %j, align 4, !dbg !5561
  %rem = urem i32 %13, 64, !dbg !5562
  %sh_prom = zext i32 %rem to i64, !dbg !5563
  %shl = shl i64 %12, %sh_prom, !dbg !5563
  %14 = load i32, i32* %j, align 4, !dbg !5564
  %div = udiv i32 %14, 64, !dbg !5565
  %idxprom19 = zext i32 %div to i64, !dbg !5566
  %arrayidx20 = getelementptr inbounds [2 x i64], [2 x i64]* %c, i64 0, i64 %idxprom19, !dbg !5566
  %15 = load i64, i64* %arrayidx20, align 8, !dbg !5567
  %or = or i64 %15, %shl, !dbg !5567
  store i64 %or, i64* %arrayidx20, align 8, !dbg !5567
  br label %for.inc, !dbg !5568

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !5569
  %inc = add i32 %16, 1, !dbg !5569
  store i32 %inc, i32* %i, align 4, !dbg !5569
  br label %for.cond, !dbg !5570, !llvm.loop !5571

for.end:                                          ; preds = %for.cond
  %arrayidx21 = getelementptr inbounds [2 x i64], [2 x i64]* %c, i64 0, i64 0, !dbg !5573
  %17 = load i64, i64* %arrayidx21, align 16, !dbg !5573
  %arrayidx22 = getelementptr inbounds [2 x i64], [2 x i64]* %c, i64 0, i64 1, !dbg !5574
  %18 = load i64, i64* %arrayidx22, align 8, !dbg !5574
  %19 = load i32, i32* %mode.addr, align 4, !dbg !5575
  %call = call %struct.rtx_def* @immed_double_const(i64 %17, i64 %18, i32 %19), !dbg !5576
  ret %struct.rtx_def* %call, !dbg !5577
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @builtin_memset_read_str(i8* %data, i64 %offset, i32 %mode) #0 !dbg !5578 {
entry:
  %data.addr = alloca i8*, align 8
  %offset.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %c = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5579, metadata !DIExpression()), !dbg !5580
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5581, metadata !DIExpression()), !dbg !5582
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5583, metadata !DIExpression()), !dbg !5584
  call void @llvm.dbg.declare(metadata i8** %c, metadata !5585, metadata !DIExpression()), !dbg !5586
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5587
  store i8* %0, i8** %c, align 8, !dbg !5586
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5588, metadata !DIExpression()), !dbg !5589
  %1 = load i32, i32* %mode.addr, align 4, !dbg !5590
  %idxprom = zext i32 %1 to i64, !dbg !5590
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5590
  %2 = load i8, i8* %arrayidx, align 1, !dbg !5590
  %conv = zext i8 %2 to i16, !dbg !5590
  %conv1 = zext i16 %conv to i64, !dbg !5590
  %mul = mul i64 1, %conv1, !dbg !5590
  %3 = alloca i8, i64 %mul, align 16, !dbg !5590
  store i8* %3, i8** %p, align 8, !dbg !5589
  %4 = load i8*, i8** %p, align 8, !dbg !5591
  %5 = load i8*, i8** %c, align 8, !dbg !5592
  %6 = load i8, i8* %5, align 1, !dbg !5593
  %conv2 = sext i8 %6 to i32, !dbg !5593
  %7 = trunc i32 %conv2 to i8, !dbg !5594
  %8 = load i32, i32* %mode.addr, align 4, !dbg !5595
  %idxprom3 = zext i32 %8 to i64, !dbg !5595
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom3, !dbg !5595
  %9 = load i8, i8* %arrayidx4, align 1, !dbg !5595
  %conv5 = zext i8 %9 to i16, !dbg !5595
  %conv6 = zext i16 %conv5 to i64, !dbg !5595
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %7, i64 %conv6, i1 false), !dbg !5594
  %10 = load i8*, i8** %p, align 8, !dbg !5596
  %11 = load i32, i32* %mode.addr, align 4, !dbg !5597
  %call = call %struct.rtx_def* @c_readstr(i8* %10, i32 %11), !dbg !5598
  ret %struct.rtx_def* %call, !dbg !5599
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_saveregs() #0 !dbg !5600 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !5603, metadata !DIExpression()), !dbg !5604
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5605, metadata !DIExpression()), !dbg !5606
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 3), align 8, !dbg !5607
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !5609
  br i1 %cmp, label %if.then, label %if.end, !dbg !5610

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 3), align 8, !dbg !5611
  store %struct.rtx_def* %1, %struct.rtx_def** %retval, align 8, !dbg !5612
  br label %return, !dbg !5612

if.end:                                           ; preds = %entry
  call void @start_sequence(), !dbg !5613
  %2 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 6), align 8, !dbg !5614
  %call = call %struct.rtx_def* %2(), !dbg !5615
  store %struct.rtx_def* %call, %struct.rtx_def** %val, align 8, !dbg !5616
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !5617
  store %struct.rtx_def* %call1, %struct.rtx_def** %seq, align 8, !dbg !5618
  call void @end_sequence(), !dbg !5619
  %3 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5620
  store %struct.rtx_def* %3, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 3), align 8, !dbg !5621
  call void @push_topmost_sequence(), !dbg !5622
  %4 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5623
  %call2 = call %struct.rtx_def* @entry_of_function(), !dbg !5624
  %call3 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %4, %struct.rtx_def* %call2), !dbg !5625
  call void @pop_topmost_sequence(), !dbg !5626
  %5 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5627
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !5628
  br label %return, !dbg !5628

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5629
  ret %struct.rtx_def* %6, !dbg !5629
}

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local void @push_topmost_sequence() #2

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @entry_of_function() #2

declare dso_local void @pop_topmost_sequence() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @std_build_builtin_va_list() #0 !dbg !5630 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !5633
  ret %union.tree_node* %0, !dbg !5634
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @std_fn_abi_va_list(%union.tree_node* %fndecl) #0 !dbg !5635 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !5638, metadata !DIExpression()), !dbg !5639
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 44), align 16, !dbg !5640
  ret %union.tree_node* %0, !dbg !5641
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @std_canonical_va_list_type(%union.tree_node* %type) #0 !dbg !5642 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %wtype = alloca %union.tree_node*, align 8
  %htype = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5643, metadata !DIExpression()), !dbg !5644
  call void @llvm.dbg.declare(metadata %union.tree_node** %wtype, metadata !5645, metadata !DIExpression()), !dbg !5646
  call void @llvm.dbg.declare(metadata %union.tree_node** %htype, metadata !5647, metadata !DIExpression()), !dbg !5648
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5649
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5649
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5649
  %bf.load = load i64, i64* %1, align 8, !dbg !5649
  %bf.clear = and i64 %bf.load, 65535, !dbg !5649
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5649
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !5649
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5649

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5649
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5649
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5649
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5649
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5649
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5649
  %cmp5 = icmp eq i32 %bf.cast4, 48, !dbg !5649
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !5649

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5649
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5649
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5649
  %bf.load8 = load i64, i64* %5, align 8, !dbg !5649
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5649
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5649
  %cmp11 = icmp eq i32 %bf.cast10, 49, !dbg !5649
  br i1 %cmp11, label %if.then, label %if.else, !dbg !5651

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5652
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5652
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5652
  %7 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !5652
  store %union.tree_node* %7, %union.tree_node** %type.addr, align 8, !dbg !5653
  br label %if.end42, !dbg !5654

if.else:                                          ; preds = %lor.lhs.false6
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5655
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5655
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !5655
  %bf.load14 = load i64, i64* %9, align 8, !dbg !5655
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !5655
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !5655
  %cmp17 = icmp eq i32 %bf.cast16, 10, !dbg !5655
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false18, !dbg !5655

lor.lhs.false18:                                  ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5655
  %base19 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5655
  %11 = bitcast %struct.tree_base* %base19 to i64*, !dbg !5655
  %bf.load20 = load i64, i64* %11, align 8, !dbg !5655
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !5655
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !5655
  %cmp23 = icmp eq i32 %bf.cast22, 12, !dbg !5655
  br i1 %cmp23, label %land.lhs.true, label %if.end, !dbg !5657

land.lhs.true:                                    ; preds = %lor.lhs.false18, %if.else
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5658
  %common24 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5658
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !5658
  %13 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !5658
  %base26 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5658
  %14 = bitcast %struct.tree_base* %base26 to i64*, !dbg !5658
  %bf.load27 = load i64, i64* %14, align 8, !dbg !5658
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !5658
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !5658
  %cmp30 = icmp eq i32 %bf.cast29, 10, !dbg !5658
  br i1 %cmp30, label %if.then39, label %lor.lhs.false31, !dbg !5658

lor.lhs.false31:                                  ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5658
  %common32 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5658
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !5658
  %16 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !5658
  %base34 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5658
  %17 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5658
  %bf.load35 = load i64, i64* %17, align 8, !dbg !5658
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !5658
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !5658
  %cmp38 = icmp eq i32 %bf.cast37, 12, !dbg !5658
  br i1 %cmp38, label %if.then39, label %if.end, !dbg !5659

if.then39:                                        ; preds = %lor.lhs.false31, %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5660
  %common40 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !5660
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !5660
  %19 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !5660
  store %union.tree_node* %19, %union.tree_node** %type.addr, align 8, !dbg !5661
  br label %if.end, !dbg !5662

if.end:                                           ; preds = %if.then39, %lor.lhs.false31, %lor.lhs.false18
  br label %if.end42

if.end42:                                         ; preds = %if.end, %if.then
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 44), align 16, !dbg !5663
  store %union.tree_node* %20, %union.tree_node** %wtype, align 8, !dbg !5664
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5665
  store %union.tree_node* %21, %union.tree_node** %htype, align 8, !dbg !5666
  %22 = load %union.tree_node*, %union.tree_node** %wtype, align 8, !dbg !5667
  %base43 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5667
  %23 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5667
  %bf.load44 = load i64, i64* %23, align 8, !dbg !5667
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5667
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5667
  %cmp47 = icmp eq i32 %bf.cast46, 16, !dbg !5669
  br i1 %cmp47, label %land.lhs.true48, label %if.else63, !dbg !5670

land.lhs.true48:                                  ; preds = %if.end42
  %24 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5671
  %base49 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5671
  %25 = bitcast %struct.tree_base* %base49 to i64*, !dbg !5671
  %bf.load50 = load i64, i64* %25, align 8, !dbg !5671
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !5671
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !5671
  %cmp53 = icmp eq i32 %bf.cast52, 10, !dbg !5671
  br i1 %cmp53, label %if.then60, label %lor.lhs.false54, !dbg !5671

lor.lhs.false54:                                  ; preds = %land.lhs.true48
  %26 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5671
  %base55 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5671
  %27 = bitcast %struct.tree_base* %base55 to i64*, !dbg !5671
  %bf.load56 = load i64, i64* %27, align 8, !dbg !5671
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !5671
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !5671
  %cmp59 = icmp eq i32 %bf.cast58, 12, !dbg !5671
  br i1 %cmp59, label %if.then60, label %if.else63, !dbg !5672

if.then60:                                        ; preds = %lor.lhs.false54, %land.lhs.true48
  %28 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5673
  %common61 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5673
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !5673
  %29 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !5673
  store %union.tree_node* %29, %union.tree_node** %htype, align 8, !dbg !5674
  br label %if.end94, !dbg !5675

if.else63:                                        ; preds = %lor.lhs.false54, %if.end42
  %30 = load %union.tree_node*, %union.tree_node** %wtype, align 8, !dbg !5676
  %base64 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !5676
  %31 = bitcast %struct.tree_base* %base64 to i64*, !dbg !5676
  %bf.load65 = load i64, i64* %31, align 8, !dbg !5676
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !5676
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !5676
  %cmp68 = icmp eq i32 %bf.cast67, 15, !dbg !5678
  br i1 %cmp68, label %if.then69, label %if.end93, !dbg !5679

if.then69:                                        ; preds = %if.else63
  %32 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5680
  %base70 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5680
  %33 = bitcast %struct.tree_base* %base70 to i64*, !dbg !5680
  %bf.load71 = load i64, i64* %33, align 8, !dbg !5680
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !5680
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !5680
  %cmp74 = icmp eq i32 %bf.cast73, 15, !dbg !5683
  br i1 %cmp74, label %if.then87, label %lor.lhs.false75, !dbg !5684

lor.lhs.false75:                                  ; preds = %if.then69
  %34 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5685
  %base76 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !5685
  %35 = bitcast %struct.tree_base* %base76 to i64*, !dbg !5685
  %bf.load77 = load i64, i64* %35, align 8, !dbg !5685
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !5685
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !5685
  %cmp80 = icmp eq i32 %bf.cast79, 10, !dbg !5685
  br i1 %cmp80, label %if.then87, label %lor.lhs.false81, !dbg !5685

lor.lhs.false81:                                  ; preds = %lor.lhs.false75
  %36 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5685
  %base82 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !5685
  %37 = bitcast %struct.tree_base* %base82 to i64*, !dbg !5685
  %bf.load83 = load i64, i64* %37, align 8, !dbg !5685
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !5685
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !5685
  %cmp86 = icmp eq i32 %bf.cast85, 12, !dbg !5685
  br i1 %cmp86, label %if.then87, label %if.end92, !dbg !5686

if.then87:                                        ; preds = %lor.lhs.false81, %lor.lhs.false75, %if.then69
  %38 = load %union.tree_node*, %union.tree_node** %wtype, align 8, !dbg !5687
  %common88 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !5687
  %type89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2, !dbg !5687
  %39 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !5687
  store %union.tree_node* %39, %union.tree_node** %wtype, align 8, !dbg !5689
  %40 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5690
  %common90 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !5690
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !5690
  %41 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !5690
  store %union.tree_node* %41, %union.tree_node** %htype, align 8, !dbg !5691
  br label %if.end92, !dbg !5692

if.end92:                                         ; preds = %if.then87, %lor.lhs.false81
  br label %if.end93, !dbg !5693

if.end93:                                         ; preds = %if.end92, %if.else63
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.then60
  %42 = load %union.tree_node*, %union.tree_node** %wtype, align 8, !dbg !5694
  %type95 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !5694
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 16, !dbg !5694
  %43 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5694
  %44 = load %union.tree_node*, %union.tree_node** %htype, align 8, !dbg !5696
  %type96 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !5696
  %main_variant97 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 16, !dbg !5696
  %45 = load %union.tree_node*, %union.tree_node** %main_variant97, align 8, !dbg !5696
  %cmp98 = icmp eq %union.tree_node* %43, %45, !dbg !5697
  br i1 %cmp98, label %if.then99, label %if.end100, !dbg !5698

if.then99:                                        ; preds = %if.end94
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 44), align 16, !dbg !5699
  store %union.tree_node* %46, %union.tree_node** %retval, align 8, !dbg !5700
  br label %return, !dbg !5700

if.end100:                                        ; preds = %if.end94
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5701
  br label %return, !dbg !5701

return:                                           ; preds = %if.end100, %if.then99
  %47 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5702
  ret %union.tree_node* %47, !dbg !5702
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @std_expand_builtin_va_start(%union.tree_node* %valist, %struct.rtx_def* %nextarg) #0 !dbg !5703 {
entry:
  %valist.addr = alloca %union.tree_node*, align 8
  %nextarg.addr = alloca %struct.rtx_def*, align 8
  %va_r = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %valist, %union.tree_node** %valist.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %valist.addr, metadata !5706, metadata !DIExpression()), !dbg !5707
  store %struct.rtx_def* %nextarg, %struct.rtx_def** %nextarg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nextarg.addr, metadata !5708, metadata !DIExpression()), !dbg !5709
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %va_r, metadata !5710, metadata !DIExpression()), !dbg !5711
  %0 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5712
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 5), !dbg !5713
  store %struct.rtx_def* %call, %struct.rtx_def** %va_r, align 8, !dbg !5711
  %1 = load %struct.rtx_def*, %struct.rtx_def** %va_r, align 8, !dbg !5714
  %2 = load %struct.rtx_def*, %struct.rtx_def** %nextarg.addr, align 8, !dbg !5715
  call void @convert_move(%struct.rtx_def* %1, %struct.rtx_def* %2, i32 0), !dbg !5716
  ret void, !dbg !5717
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !5718 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !5721, metadata !DIExpression()), !dbg !5722
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5725, metadata !DIExpression()), !dbg !5726
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !5727, metadata !DIExpression()), !dbg !5728
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5729
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5730
  %2 = load i32, i32* %mode.addr, align 4, !dbg !5731
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !5732
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !5733
  ret %struct.rtx_def* %call, !dbg !5734
}

declare dso_local void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @std_gimplify_va_arg_expr(%union.tree_node* %valist, %union.tree_node* %type, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !5735 {
entry:
  %valist.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %type_size = alloca %union.tree_node*, align 8
  %rounded_size = alloca %union.tree_node*, align 8
  %valist_tmp = alloca %union.tree_node*, align 8
  %align = alloca i64, align 8
  %boundary = alloca i64, align 8
  %indirect = alloca i8, align 1
  store %union.tree_node* %valist, %union.tree_node** %valist.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %valist.addr, metadata !5738, metadata !DIExpression()), !dbg !5739
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5740, metadata !DIExpression()), !dbg !5741
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !5744, metadata !DIExpression()), !dbg !5745
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5746, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5748, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_size, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata %union.tree_node** %rounded_size, metadata !5752, metadata !DIExpression()), !dbg !5753
  call void @llvm.dbg.declare(metadata %union.tree_node** %valist_tmp, metadata !5754, metadata !DIExpression()), !dbg !5755
  call void @llvm.dbg.declare(metadata i64* %align, metadata !5756, metadata !DIExpression()), !dbg !5757
  call void @llvm.dbg.declare(metadata i64* %boundary, metadata !5758, metadata !DIExpression()), !dbg !5759
  call void @llvm.dbg.declare(metadata i8* %indirect, metadata !5760, metadata !DIExpression()), !dbg !5761
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5762
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5762
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5762
  %bf.load = load i64, i64* %1, align 8, !dbg !5762
  %bf.clear = and i64 %bf.load, 65535, !dbg !5762
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5762
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !5762
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5762

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5762
  %call = call i32 @vector_type_mode(%union.tree_node* %2), !dbg !5762
  br label %cond.end, !dbg !5762

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5762
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5762
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5762
  %bf.load2 = load i32, i32* %mode, align 4, !dbg !5762
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !5762
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !5762
  br label %cond.end, !dbg !5762

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear3, %cond.false ], !dbg !5762
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5763
  %call4 = call zeroext i8 @pass_by_reference(%struct.ix86_args* null, i32 %cond, %union.tree_node* %4, i8 zeroext 0), !dbg !5764
  store i8 %call4, i8* %indirect, align 1, !dbg !5765
  %5 = load i8, i8* %indirect, align 1, !dbg !5766
  %tobool = icmp ne i8 %5, 0, !dbg !5766
  br i1 %tobool, label %if.then, label %if.end, !dbg !5768

if.then:                                          ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5769
  %call5 = call %union.tree_node* @build_pointer_type(%union.tree_node* %6), !dbg !5770
  store %union.tree_node* %call5, %union.tree_node** %type.addr, align 8, !dbg !5771
  br label %if.end, !dbg !5772

if.end:                                           ; preds = %if.then, %cond.end
  store i64 4, i64* %align, align 8, !dbg !5773
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5774
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5774
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5774
  %bf.load7 = load i64, i64* %8, align 8, !dbg !5774
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5774
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5774
  %cmp10 = icmp eq i32 %bf.cast9, 14, !dbg !5774
  br i1 %cmp10, label %cond.true11, label %cond.false13, !dbg !5774

cond.true11:                                      ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5774
  %call12 = call i32 @vector_type_mode(%union.tree_node* %9), !dbg !5774
  br label %cond.end19, !dbg !5774

cond.false13:                                     ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5774
  %type14 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5774
  %mode15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6, !dbg !5774
  %bf.load16 = load i32, i32* %mode15, align 4, !dbg !5774
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !5774
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !5774
  br label %cond.end19, !dbg !5774

cond.end19:                                       ; preds = %cond.false13, %cond.true11
  %cond20 = phi i32 [ %call12, %cond.true11 ], [ %bf.clear18, %cond.false13 ], !dbg !5774
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5774
  %call21 = call i32 @ix86_function_arg_boundary(i32 %cond20, %union.tree_node* %11), !dbg !5774
  %conv = sext i32 %call21 to i64, !dbg !5774
  store i64 %conv, i64* %boundary, align 8, !dbg !5775
  %12 = load i64, i64* %boundary, align 8, !dbg !5776
  %cmp22 = icmp ugt i64 %12, 2147483648, !dbg !5778
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !5779

if.then24:                                        ; preds = %cond.end19
  store i64 2147483648, i64* %boundary, align 8, !dbg !5780
  br label %if.end25, !dbg !5781

if.end25:                                         ; preds = %if.then24, %cond.end19
  %13 = load i64, i64* %boundary, align 8, !dbg !5782
  %div = udiv i64 %13, 8, !dbg !5782
  store i64 %div, i64* %boundary, align 8, !dbg !5782
  %14 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5783
  %15 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5784
  %call26 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %14, %struct.gimple_seq_d** %15, %struct.gimple_seq_d** null), !dbg !5785
  store %union.tree_node* %call26, %union.tree_node** %valist_tmp, align 8, !dbg !5786
  %16 = load i64, i64* %boundary, align 8, !dbg !5787
  %17 = load i64, i64* %align, align 8, !dbg !5789
  %cmp27 = icmp ugt i64 %16, %17, !dbg !5790
  br i1 %cmp27, label %land.lhs.true, label %if.else, !dbg !5791

land.lhs.true:                                    ; preds = %if.end25
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5792
  %type29 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !5792
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 2, !dbg !5792
  %19 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5792
  %call30 = call i32 @integer_zerop(%union.tree_node* %19), !dbg !5793
  %tobool31 = icmp ne i32 %call30, 0, !dbg !5793
  br i1 %tobool31, label %if.else, label %if.then32, !dbg !5794

if.then32:                                        ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5795
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5795
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5795
  %21 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !5795
  %22 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5795
  %23 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5795
  %common34 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5795
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !5795
  %24 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !5795
  %25 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5795
  %26 = load i64, i64* %boundary, align 8, !dbg !5795
  %sub = sub i64 %26, 1, !dbg !5795
  %call36 = call %union.tree_node* @size_int_kind(i64 %sub, i32 0), !dbg !5795
  %call37 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %call36), !dbg !5795
  %call38 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %call37), !dbg !5795
  store %union.tree_node* %call38, %union.tree_node** %t, align 8, !dbg !5797
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5798
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5799
  call void @gimplify_and_add(%union.tree_node* %27, %struct.gimple_seq_d** %28), !dbg !5800
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5801
  %30 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5801
  %call39 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %29, %union.tree_node* %30), !dbg !5801
  store %union.tree_node* %call39, %union.tree_node** %t, align 8, !dbg !5802
  %31 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5803
  %common40 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !5803
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !5803
  %32 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !5803
  %33 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5803
  %34 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5803
  %common42 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !5803
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !5803
  %35 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !5803
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5803
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5803
  %38 = load i64, i64* %boundary, align 8, !dbg !5803
  %sub44 = sub i64 0, %38, !dbg !5803
  %call45 = call %union.tree_node* @size_int_kind(i64 %sub44, i32 0), !dbg !5803
  %call46 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %call45), !dbg !5803
  %call47 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %35, %union.tree_node* %call46), !dbg !5803
  %call48 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %call47), !dbg !5803
  store %union.tree_node* %call48, %union.tree_node** %t, align 8, !dbg !5804
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5805
  %40 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5806
  call void @gimplify_and_add(%union.tree_node* %39, %struct.gimple_seq_d** %40), !dbg !5807
  br label %if.end49, !dbg !5808

if.else:                                          ; preds = %land.lhs.true, %if.end25
  %41 = load i64, i64* %align, align 8, !dbg !5809
  store i64 %41, i64* %boundary, align 8, !dbg !5810
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then32
  %42 = load i64, i64* %boundary, align 8, !dbg !5811
  %mul = mul i64 %42, 8, !dbg !5811
  store i64 %mul, i64* %boundary, align 8, !dbg !5811
  %43 = load i64, i64* %boundary, align 8, !dbg !5812
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5814
  %type50 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !5814
  %align51 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type50, i32 0, i32 7, !dbg !5814
  %45 = load i32, i32* %align51, align 8, !dbg !5814
  %conv52 = zext i32 %45 to i64, !dbg !5814
  %cmp53 = icmp ult i64 %43, %conv52, !dbg !5815
  br i1 %cmp53, label %if.then55, label %if.end60, !dbg !5816

if.then55:                                        ; preds = %if.end49
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5817
  %call56 = call %union.tree_node* @build_variant_type_copy(%union.tree_node* %46), !dbg !5819
  store %union.tree_node* %call56, %union.tree_node** %type.addr, align 8, !dbg !5820
  %47 = load i64, i64* %boundary, align 8, !dbg !5821
  %conv57 = trunc i64 %47 to i32, !dbg !5821
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5822
  %type58 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !5822
  %align59 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 7, !dbg !5822
  store i32 %conv57, i32* %align59, align 8, !dbg !5823
  br label %if.end60, !dbg !5824

if.end60:                                         ; preds = %if.then55, %if.end49
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5825
  %call61 = call %union.tree_node* @size_in_bytes(%union.tree_node* %49), !dbg !5826
  store %union.tree_node* %call61, %union.tree_node** %type_size, align 8, !dbg !5827
  %50 = load %union.tree_node*, %union.tree_node** %type_size, align 8, !dbg !5828
  %51 = load i64, i64* %align, align 8, !dbg !5828
  %conv62 = trunc i64 %51 to i32, !dbg !5828
  %call63 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %50, i32 %conv62), !dbg !5828
  store %union.tree_node* %call63, %union.tree_node** %rounded_size, align 8, !dbg !5829
  %52 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5830
  %53 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5831
  %call64 = call i32 @gimplify_expr(%union.tree_node** %rounded_size, %struct.gimple_seq_d** %52, %struct.gimple_seq_d** %53, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5832
  %54 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5833
  store %union.tree_node* %54, %union.tree_node** %addr, align 8, !dbg !5834
  %55 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5835
  %common65 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !5835
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !5835
  %56 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !5835
  %57 = load %union.tree_node*, %union.tree_node** %valist_tmp, align 8, !dbg !5835
  %58 = load %union.tree_node*, %union.tree_node** %rounded_size, align 8, !dbg !5835
  %call67 = call %union.tree_node* @build2_stat(i32 66, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %58), !dbg !5835
  store %union.tree_node* %call67, %union.tree_node** %t, align 8, !dbg !5836
  %59 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5837
  %common68 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !5837
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !5837
  %60 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !5837
  %61 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8, !dbg !5837
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5837
  %call70 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %60, %union.tree_node* %61, %union.tree_node* %62), !dbg !5837
  store %union.tree_node* %call70, %union.tree_node** %t, align 8, !dbg !5838
  %63 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5839
  %64 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5840
  call void @gimplify_and_add(%union.tree_node* %63, %struct.gimple_seq_d** %64), !dbg !5841
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5842
  %call71 = call %union.tree_node* @build_pointer_type(%union.tree_node* %65), !dbg !5842
  %66 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5842
  %call72 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call71, %union.tree_node* %66), !dbg !5842
  store %union.tree_node* %call72, %union.tree_node** %addr, align 8, !dbg !5843
  %67 = load i8, i8* %indirect, align 1, !dbg !5844
  %tobool73 = icmp ne i8 %67, 0, !dbg !5844
  br i1 %tobool73, label %if.then74, label %if.end76, !dbg !5846

if.then74:                                        ; preds = %if.end60
  %68 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5847
  %call75 = call %union.tree_node* @build_va_arg_indirect_ref(%union.tree_node* %68), !dbg !5848
  store %union.tree_node* %call75, %union.tree_node** %addr, align 8, !dbg !5849
  br label %if.end76, !dbg !5850

if.end76:                                         ; preds = %if.then74, %if.end60
  %69 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5851
  %call77 = call %union.tree_node* @build_va_arg_indirect_ref(%union.tree_node* %69), !dbg !5852
  ret %union.tree_node* %call77, !dbg !5853
}

declare dso_local zeroext i8 @pass_by_reference(%struct.ix86_args*, i32, %union.tree_node*, i8 zeroext) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local i32 @ix86_function_arg_boundary(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_initialized_tmp_var(%union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gimplify_and_add(%union.tree_node*, %struct.gimple_seq_d**) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_variant_type_copy(%union.tree_node*) #2

declare dso_local %union.tree_node* @size_in_bytes(%union.tree_node*) #2

declare dso_local %union.tree_node* @round_up_loc(i32, %union.tree_node*, i32) #2

declare dso_local i32 @gimplify_expr(%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**, i8 (%union.tree_node*)*, i32) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_va_arg_indirect_ref(%union.tree_node* %addr) #0 !dbg !5854 {
entry:
  %addr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !5855, metadata !DIExpression()), !dbg !5856
  %0 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5857
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5857
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5857
  %bf.load = load i64, i64* %1, align 8, !dbg !5857
  %bf.clear = and i64 %bf.load, 65535, !dbg !5857
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5857
  %idxprom = sext i32 %bf.cast to i64, !dbg !5857
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5857
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5857
  %cmp = icmp uge i32 %2, 4, !dbg !5857
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !5857

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5857
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5857
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5857
  %bf.load2 = load i64, i64* %4, align 8, !dbg !5857
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5857
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5857
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !5857
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !5857
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !5857
  %cmp7 = icmp ule i32 %5, 10, !dbg !5857
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !5857

cond.true:                                        ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5857
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !5857
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !5857
  %7 = load i32, i32* %locus, align 8, !dbg !5857
  br label %cond.end, !dbg !5857

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5857

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ 0, %cond.false ], !dbg !5857
  %8 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5858
  %call = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %cond, %union.tree_node* %8), !dbg !5859
  store %union.tree_node* %call, %union.tree_node** %addr.addr, align 8, !dbg !5860
  %9 = load i32, i32* @flag_mudflap, align 4, !dbg !5861
  %tobool = icmp ne i32 %9, 0, !dbg !5861
  br i1 %tobool, label %if.then, label %if.end, !dbg !5863

if.then:                                          ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5864
  %call8 = call %union.tree_node* @mf_mark(%union.tree_node* %10), !dbg !5865
  br label %if.end, !dbg !5865

if.end:                                           ; preds = %if.then, %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !5866
  ret %union.tree_node* %11, !dbg !5867
}

declare dso_local %union.tree_node* @build_fold_indirect_ref_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @mf_mark(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gimplify_va_arg_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !4758 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %promoted_type = alloca %union.tree_node*, align 8
  %have_va_type = alloca %union.tree_node*, align 8
  %valist = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %warned = alloca i8, align 1
  %p1 = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !5870, metadata !DIExpression()), !dbg !5871
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !5872, metadata !DIExpression()), !dbg !5873
  call void @llvm.dbg.declare(metadata %union.tree_node** %promoted_type, metadata !5874, metadata !DIExpression()), !dbg !5875
  call void @llvm.dbg.declare(metadata %union.tree_node** %have_va_type, metadata !5876, metadata !DIExpression()), !dbg !5877
  call void @llvm.dbg.declare(metadata %union.tree_node** %valist, metadata !5878, metadata !DIExpression()), !dbg !5879
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5880
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5880
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !5880
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5880
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5880
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5880
  store %union.tree_node* %2, %union.tree_node** %valist, align 8, !dbg !5879
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5881, metadata !DIExpression()), !dbg !5882
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5883
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !5883
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !5883
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5883
  %5 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5883
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !5882
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5884, metadata !DIExpression()), !dbg !5885
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !5886, metadata !DIExpression()), !dbg !5887
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5888
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !5888
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5888
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !5888
  %bf.load = load i64, i64* %8, align 8, !dbg !5888
  %bf.clear = and i64 %bf.load, 65535, !dbg !5888
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5888
  %idxprom = sext i32 %bf.cast to i64, !dbg !5888
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5888
  %9 = load i32, i32* %arrayidx2, align 4, !dbg !5888
  %cmp = icmp uge i32 %9, 4, !dbg !5888
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !5888

land.lhs.true:                                    ; preds = %entry
  %10 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5888
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !5888
  %base3 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5888
  %12 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5888
  %bf.load4 = load i64, i64* %12, align 8, !dbg !5888
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5888
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5888
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !5888
  %arrayidx8 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom7, !dbg !5888
  %13 = load i32, i32* %arrayidx8, align 4, !dbg !5888
  %cmp9 = icmp ule i32 %13, 10, !dbg !5888
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !5888

cond.true:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5888
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !5888
  %exp10 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !5888
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 1, !dbg !5888
  %16 = load i32, i32* %locus, align 8, !dbg !5888
  br label %cond.end, !dbg !5888

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ 0, %cond.false ], !dbg !5888
  store i32 %cond, i32* %loc, align 4, !dbg !5887
  %17 = load %union.tree_node*, %union.tree_node** %valist, align 8, !dbg !5889
  %common11 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5889
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !5889
  %18 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !5889
  store %union.tree_node* %18, %union.tree_node** %have_va_type, align 8, !dbg !5890
  %19 = load %union.tree_node*, %union.tree_node** %have_va_type, align 8, !dbg !5891
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5893
  %cmp13 = icmp eq %union.tree_node* %19, %20, !dbg !5894
  br i1 %cmp13, label %if.then, label %if.end, !dbg !5895

if.then:                                          ; preds = %cond.end
  store i32 -2, i32* %retval, align 4, !dbg !5896
  br label %return, !dbg !5896

if.end:                                           ; preds = %cond.end
  %21 = load %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 71), align 8, !dbg !5897
  %22 = load %union.tree_node*, %union.tree_node** %have_va_type, align 8, !dbg !5898
  %call = call %union.tree_node* %21(%union.tree_node* %22), !dbg !5899
  store %union.tree_node* %call, %union.tree_node** %have_va_type, align 8, !dbg !5900
  %23 = load %union.tree_node*, %union.tree_node** %have_va_type, align 8, !dbg !5901
  %cmp14 = icmp eq %union.tree_node* %23, null, !dbg !5903
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !5904

if.then15:                                        ; preds = %if.end
  %24 = load i32, i32* %loc, align 4, !dbg !5905
  call void (i32, i8*, ...) @error_at(i32 %24, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.720, i64 0, i64 0)), !dbg !5907
  store i32 -2, i32* %retval, align 4, !dbg !5908
  br label %return, !dbg !5908

if.end16:                                         ; preds = %if.end
  %25 = load %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 6), align 8, !dbg !5909
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5911
  %call17 = call %union.tree_node* %25(%union.tree_node* %26), !dbg !5912
  store %union.tree_node* %call17, %union.tree_node** %promoted_type, align 8, !dbg !5913
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5914
  %cmp18 = icmp ne %union.tree_node* %call17, %27, !dbg !5915
  br i1 %cmp18, label %if.then19, label %if.else, !dbg !5916

if.then19:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata i8* %warned, metadata !5917, metadata !DIExpression()), !dbg !5919
  %28 = load i32, i32* %loc, align 4, !dbg !5920
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5921
  %30 = load %union.tree_node*, %union.tree_node** %promoted_type, align 8, !dbg !5922
  %call20 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %28, i32 0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.721, i64 0, i64 0), %union.tree_node* %29, %union.tree_node* %30), !dbg !5923
  store i8 %call20, i8* %warned, align 1, !dbg !5924
  %31 = load i8, i8* @gimplify_va_arg_expr.gave_help, align 1, !dbg !5925
  %tobool = icmp ne i8 %31, 0, !dbg !5925
  br i1 %tobool, label %if.end24, label %land.lhs.true21, !dbg !5927

land.lhs.true21:                                  ; preds = %if.then19
  %32 = load i8, i8* %warned, align 1, !dbg !5928
  %conv = zext i8 %32 to i32, !dbg !5928
  %tobool22 = icmp ne i32 %conv, 0, !dbg !5928
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !5929

if.then23:                                        ; preds = %land.lhs.true21
  store i8 1, i8* @gimplify_va_arg_expr.gave_help, align 1, !dbg !5930
  %33 = load i32, i32* %loc, align 4, !dbg !5932
  %34 = load %union.tree_node*, %union.tree_node** %promoted_type, align 8, !dbg !5933
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5934
  call void (i32, i8*, ...) @inform(i32 %33, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.722, i64 0, i64 0), %union.tree_node* %34, %union.tree_node* %35), !dbg !5935
  br label %if.end24, !dbg !5936

if.end24:                                         ; preds = %if.then23, %land.lhs.true21, %if.then19
  %36 = load i8, i8* %warned, align 1, !dbg !5937
  %tobool25 = icmp ne i8 %36, 0, !dbg !5937
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !5939

if.then26:                                        ; preds = %if.end24
  %37 = load i32, i32* %loc, align 4, !dbg !5940
  call void (i32, i8*, ...) @inform(i32 %37, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.723, i64 0, i64 0)), !dbg !5941
  br label %if.end27, !dbg !5941

if.end27:                                         ; preds = %if.then26, %if.end24
  %38 = load %union.tree_node*, %union.tree_node** %valist, align 8, !dbg !5942
  %39 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5943
  call void @gimplify_and_add(%union.tree_node* %38, %struct.gimple_seq_d** %39), !dbg !5944
  %40 = load i32, i32* %loc, align 4, !dbg !5945
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 509), align 8, !dbg !5946
  %call28 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %40, %union.tree_node* %41, i32 0), !dbg !5947
  store %union.tree_node* %call28, %union.tree_node** %t, align 8, !dbg !5948
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5949
  %43 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5950
  call void @gimplify_and_add(%union.tree_node* %42, %struct.gimple_seq_d** %43), !dbg !5951
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5952
  %call29 = call %union.tree_node* @dummy_object(%union.tree_node* %44), !dbg !5953
  %45 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5954
  store %union.tree_node* %call29, %union.tree_node** %45, align 8, !dbg !5955
  store i32 1, i32* %retval, align 4, !dbg !5956
  br label %return, !dbg !5956

if.else:                                          ; preds = %if.end16
  %46 = load %union.tree_node*, %union.tree_node** %have_va_type, align 8, !dbg !5957
  %base30 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !5957
  %47 = bitcast %struct.tree_base* %base30 to i64*, !dbg !5957
  %bf.load31 = load i64, i64* %47, align 8, !dbg !5957
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !5957
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5957
  %cmp34 = icmp eq i32 %bf.cast33, 15, !dbg !5960
  br i1 %cmp34, label %if.then36, label %if.else53, !dbg !5961

if.then36:                                        ; preds = %if.else
  %48 = load %union.tree_node*, %union.tree_node** %valist, align 8, !dbg !5962
  %common37 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !5962
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !5962
  %49 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !5962
  %base39 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5962
  %50 = bitcast %struct.tree_base* %base39 to i64*, !dbg !5962
  %bf.load40 = load i64, i64* %50, align 8, !dbg !5962
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !5962
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5962
  %cmp43 = icmp eq i32 %bf.cast42, 15, !dbg !5965
  br i1 %cmp43, label %if.then45, label %if.end51, !dbg !5966

if.then45:                                        ; preds = %if.then36
  call void @llvm.dbg.declare(metadata %union.tree_node** %p1, metadata !5967, metadata !DIExpression()), !dbg !5969
  %51 = load %union.tree_node*, %union.tree_node** %have_va_type, align 8, !dbg !5970
  %common46 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !5970
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !5970
  %52 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !5970
  %call48 = call %union.tree_node* @build_pointer_type(%union.tree_node* %52), !dbg !5971
  store %union.tree_node* %call48, %union.tree_node** %p1, align 8, !dbg !5969
  %53 = load i32, i32* %loc, align 4, !dbg !5972
  %54 = load %union.tree_node*, %union.tree_node** %p1, align 8, !dbg !5973
  %55 = load i32, i32* %loc, align 4, !dbg !5974
  %56 = load %union.tree_node*, %union.tree_node** %valist, align 8, !dbg !5975
  %call49 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %55, %union.tree_node* %56), !dbg !5976
  %call50 = call %union.tree_node* @fold_convert_loc(i32 %53, %union.tree_node* %54, %union.tree_node* %call49), !dbg !5977
  store %union.tree_node* %call50, %union.tree_node** %valist, align 8, !dbg !5978
  br label %if.end51, !dbg !5979

if.end51:                                         ; preds = %if.then45, %if.then36
  %57 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5980
  %58 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5981
  %call52 = call i32 @gimplify_expr(%union.tree_node** %valist, %struct.gimple_seq_d** %57, %struct.gimple_seq_d** %58, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5982
  br label %if.end55, !dbg !5983

if.else53:                                        ; preds = %if.else
  %59 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5984
  %60 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5985
  %call54 = call i32 @gimplify_expr(%union.tree_node** %valist, %struct.gimple_seq_d** %59, %struct.gimple_seq_d** %60, i8 (%union.tree_node*)* @is_gimple_min_lval, i32 2), !dbg !5986
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %if.end51
  %61 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 73), align 8, !dbg !5987
  %tobool56 = icmp ne %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)* %61, null, !dbg !5989
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !5990

if.then57:                                        ; preds = %if.end55
  store i32 1, i32* %retval, align 4, !dbg !5991
  br label %return, !dbg !5991

if.end58:                                         ; preds = %if.end55
  %62 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 73), align 8, !dbg !5992
  %63 = load %union.tree_node*, %union.tree_node** %valist, align 8, !dbg !5993
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5994
  %65 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5995
  %66 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5996
  %call59 = call %union.tree_node* %62(%union.tree_node* %63, %union.tree_node* %64, %struct.gimple_seq_d** %65, %struct.gimple_seq_d** %66), !dbg !5997
  %67 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5998
  store %union.tree_node* %call59, %union.tree_node** %67, align 8, !dbg !5999
  store i32 0, i32* %retval, align 4, !dbg !6000
  br label %return, !dbg !6000

return:                                           ; preds = %if.end58, %if.then57, %if.end27, %if.then15, %if.then
  %68 = load i32, i32* %retval, align 4, !dbg !6001
  ret i32 %68, !dbg !6001
}

declare dso_local void @error_at(i32, i8*, ...) #2

declare dso_local void @inform(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_call_expr_loc(i32 %loc, %union.tree_node* %fndecl, i32 %n, ...) #0 !dbg !6002 {
entry:
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %n.addr = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %fntype = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %argarray = alloca %union.tree_node**, align 8
  %i = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6005, metadata !DIExpression()), !dbg !6006
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6007, metadata !DIExpression()), !dbg !6008
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !6011, metadata !DIExpression()), !dbg !6024
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !6025, metadata !DIExpression()), !dbg !6026
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6027
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6027
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6027
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6027
  store %union.tree_node* %1, %union.tree_node** %fntype, align 8, !dbg !6026
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6028, metadata !DIExpression()), !dbg !6029
  %2 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6030
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %2), !dbg !6030
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6030
  %call1 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %call, %union.tree_node* %3), !dbg !6030
  store %union.tree_node* %call1, %union.tree_node** %fn, align 8, !dbg !6029
  call void @llvm.dbg.declare(metadata %union.tree_node*** %argarray, metadata !6031, metadata !DIExpression()), !dbg !6032
  %4 = load i32, i32* %n.addr, align 4, !dbg !6033
  %conv = sext i32 %4 to i64, !dbg !6033
  %mul = mul i64 %conv, 8, !dbg !6033
  %5 = alloca i8, i64 %mul, align 16, !dbg !6033
  %6 = bitcast i8* %5 to %union.tree_node**, !dbg !6034
  store %union.tree_node** %6, %union.tree_node*** %argarray, align 8, !dbg !6032
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6035, metadata !DIExpression()), !dbg !6036
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6037
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !6037
  call void @llvm.va_start(i8* %arraydecay2), !dbg !6037
  store i32 0, i32* %i, align 4, !dbg !6038
  br label %for.cond, !dbg !6040

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4, !dbg !6041
  %8 = load i32, i32* %n.addr, align 4, !dbg !6043
  %cmp = icmp slt i32 %7, %8, !dbg !6044
  br i1 %cmp, label %for.body, label %for.end, !dbg !6045

for.body:                                         ; preds = %for.cond
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6046
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 0, !dbg !6046
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !6046
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !6046
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !6046

vaarg.in_reg:                                     ; preds = %for.body
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 3, !dbg !6046
  %reg_save_area = load i8*, i8** %9, align 16, !dbg !6046
  %10 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !6046
  %11 = bitcast i8* %10 to %union.tree_node**, !dbg !6046
  %12 = add i32 %gp_offset, 8, !dbg !6046
  store i32 %12, i32* %gp_offset_p, align 16, !dbg !6046
  br label %vaarg.end, !dbg !6046

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 2, !dbg !6046
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !6046
  %13 = bitcast i8* %overflow_arg_area to %union.tree_node**, !dbg !6046
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !6046
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !6046
  br label %vaarg.end, !dbg !6046

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %union.tree_node** [ %11, %vaarg.in_reg ], [ %13, %vaarg.in_mem ], !dbg !6046
  %14 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !6046
  %15 = load %union.tree_node**, %union.tree_node*** %argarray, align 8, !dbg !6047
  %16 = load i32, i32* %i, align 4, !dbg !6048
  %idxprom = sext i32 %16 to i64, !dbg !6047
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %15, i64 %idxprom, !dbg !6047
  store %union.tree_node* %14, %union.tree_node** %arrayidx, align 8, !dbg !6049
  br label %for.inc, !dbg !6047

for.inc:                                          ; preds = %vaarg.end
  %17 = load i32, i32* %i, align 4, !dbg !6050
  %inc = add nsw i32 %17, 1, !dbg !6050
  store i32 %inc, i32* %i, align 4, !dbg !6050
  br label %for.cond, !dbg !6051, !llvm.loop !6052

for.end:                                          ; preds = %for.cond
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6054
  %arraydecay56 = bitcast %struct.__va_list_tag* %arraydecay5 to i8*, !dbg !6054
  call void @llvm.va_end(i8* %arraydecay56), !dbg !6054
  %18 = load i32, i32* %loc.addr, align 4, !dbg !6055
  %19 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6056
  %common7 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6056
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !6056
  %20 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !6056
  %21 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6057
  %22 = load i32, i32* %n.addr, align 4, !dbg !6058
  %23 = load %union.tree_node**, %union.tree_node*** %argarray, align 8, !dbg !6059
  %call9 = call %union.tree_node* @fold_builtin_call_array(i32 %18, %union.tree_node* %20, %union.tree_node* %21, i32 %22, %union.tree_node** %23), !dbg !6060
  ret %union.tree_node* %call9, !dbg !6061
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @dummy_object(%union.tree_node* %type) #0 !dbg !6062 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6063, metadata !DIExpression()), !dbg !6064
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6065, metadata !DIExpression()), !dbg !6066
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6067
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %0), !dbg !6068
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* %call, i64 0), !dbg !6069
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !6066
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6070
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6070
  %call2 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %1, %union.tree_node* %2), !dbg !6070
  ret %union.tree_node* %call2, !dbg !6071
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_lval(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_builtin_trap() #0 !dbg !6072 {
entry:
  %call = call %struct.rtx_def* @gen_trap(), !dbg !6075
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call), !dbg !6077
  %call2 = call %struct.rtx_def* @emit_barrier(), !dbg !6078
  ret void, !dbg !6079
}

declare dso_local %struct.rtx_def* @gen_trap() #2

declare dso_local %struct.rtx_def* @emit_barrier() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_string_literal(i32 %len, i8* %str) #0 !dbg !6080 {
entry:
  %len.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %elem = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6083, metadata !DIExpression()), !dbg !6084
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6087, metadata !DIExpression()), !dbg !6088
  call void @llvm.dbg.declare(metadata %union.tree_node** %elem, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6093, metadata !DIExpression()), !dbg !6094
  %0 = load i32, i32* %len.addr, align 4, !dbg !6095
  %1 = load i8*, i8** %str.addr, align 8, !dbg !6096
  %call = call %union.tree_node* @build_string(i32 %0, i8* %1), !dbg !6097
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !6098
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !6099
  %call1 = call %union.tree_node* @build_qualified_type(%union.tree_node* %2, i32 1), !dbg !6099
  store %union.tree_node* %call1, %union.tree_node** %elem, align 8, !dbg !6100
  %3 = load i32, i32* %len.addr, align 4, !dbg !6101
  %sub = sub nsw i32 %3, 1, !dbg !6101
  %conv = sext i32 %sub to i64, !dbg !6101
  %call2 = call %union.tree_node* @size_int_kind(i64 %conv, i32 0), !dbg !6101
  %call3 = call %union.tree_node* @build_index_type(%union.tree_node* %call2), !dbg !6102
  store %union.tree_node* %call3, %union.tree_node** %index, align 8, !dbg !6103
  %4 = load %union.tree_node*, %union.tree_node** %elem, align 8, !dbg !6104
  %5 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !6105
  %call4 = call %union.tree_node* @build_array_type(%union.tree_node* %4, %union.tree_node* %5), !dbg !6106
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !6107
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6108
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6109
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6109
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6109
  store %union.tree_node* %6, %union.tree_node** %type5, align 8, !dbg !6110
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6111
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6111
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6111
  %bf.load = load i64, i64* %9, align 8, !dbg !6112
  %bf.clear = and i64 %bf.load, -131073, !dbg !6112
  %bf.set = or i64 %bf.clear, 131072, !dbg !6112
  store i64 %bf.set, i64* %9, align 8, !dbg !6112
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6113
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6113
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6113
  %bf.load7 = load i64, i64* %11, align 8, !dbg !6114
  %bf.clear8 = and i64 %bf.load7, -1048577, !dbg !6114
  %bf.set9 = or i64 %bf.clear8, 1048576, !dbg !6114
  store i64 %bf.set9, i64* %11, align 8, !dbg !6114
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6115
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6115
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !6115
  %bf.load11 = load i64, i64* %13, align 8, !dbg !6116
  %bf.clear12 = and i64 %bf.load11, -67108865, !dbg !6116
  %bf.set13 = or i64 %bf.clear12, 67108864, !dbg !6116
  store i64 %bf.set13, i64* %13, align 8, !dbg !6116
  %14 = load %union.tree_node*, %union.tree_node** %elem, align 8, !dbg !6117
  %call14 = call %union.tree_node* @build_pointer_type(%union.tree_node* %14), !dbg !6118
  store %union.tree_node* %call14, %union.tree_node** %type, align 8, !dbg !6119
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6120
  %16 = load %union.tree_node*, %union.tree_node** %elem, align 8, !dbg !6120
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6120
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !6120
  %call15 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* null, %union.tree_node* null), !dbg !6120
  %call16 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %15, %union.tree_node* %call15), !dbg !6120
  store %union.tree_node* %call16, %union.tree_node** %t, align 8, !dbg !6121
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6122
  ret %union.tree_node* %19, !dbg !6123
}

declare dso_local %union.tree_node* @build_string(i32, i8*) #2

declare dso_local %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_index_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin(%union.tree_node* %exp, %struct.rtx_def* %target, %struct.rtx_def* %subtarget, i32 %mode, i32 %ignore) #0 !dbg !6124 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %subtarget.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %ignore.addr = alloca i32, align 4
  %fndecl = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %target_mode = alloca i32, align 4
  %volatilep = alloca i8, align 1
  %arg = alloca %union.tree_node*, align 8
  %iter = alloca %struct.call_expr_arg_iterator_d, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  store %struct.rtx_def* %subtarget, %struct.rtx_def** %subtarget.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget.addr, metadata !6131, metadata !DIExpression()), !dbg !6132
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6133, metadata !DIExpression()), !dbg !6134
  store i32 %ignore, i32* %ignore.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ignore.addr, metadata !6135, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6137, metadata !DIExpression()), !dbg !6138
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6139
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %0), !dbg !6140
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6138
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !6141, metadata !DIExpression()), !dbg !6142
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6143
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !6143
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6143
  %bf.load = load i32, i32* %function_code, align 8, !dbg !6143
  %bf.clear = and i32 %bf.load, 2047, !dbg !6143
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !6142
  call void @llvm.dbg.declare(metadata i32* %target_mode, metadata !6144, metadata !DIExpression()), !dbg !6145
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6146
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6146
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6146
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6146
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6146
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6146
  %bf.load1 = load i64, i64* %4, align 8, !dbg !6146
  %bf.clear2 = and i64 %bf.load1, 65535, !dbg !6146
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !6146
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !6146
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6146

cond.true:                                        ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6146
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6146
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !6146
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !6146
  %call5 = call i32 @vector_type_mode(%union.tree_node* %6), !dbg !6146
  br label %cond.end, !dbg !6146

cond.false:                                       ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6146
  %common6 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6146
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !6146
  %8 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6146
  %type8 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !6146
  %mode9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !6146
  %bf.load10 = load i32, i32* %mode9, align 4, !dbg !6146
  %bf.lshr = lshr i32 %bf.load10, 16, !dbg !6146
  %bf.clear11 = and i32 %bf.lshr, 255, !dbg !6146
  br label %cond.end, !dbg !6146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call5, %cond.true ], [ %bf.clear11, %cond.false ], !dbg !6146
  store i32 %cond, i32* %target_mode, align 4, !dbg !6145
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6147
  %function_decl12 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !6147
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl12, i32 0, i32 5, !dbg !6147
  %bf.load13 = load i32, i32* %built_in_class, align 8, !dbg !6147
  %bf.lshr14 = lshr i32 %bf.load13, 11, !dbg !6147
  %bf.clear15 = and i32 %bf.lshr14, 3, !dbg !6147
  %cmp16 = icmp eq i32 %bf.clear15, 2, !dbg !6149
  br i1 %cmp16, label %if.then, label %if.end, !dbg !6150

if.then:                                          ; preds = %cond.end
  %10 = load %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 25), align 8, !dbg !6151
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6152
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6153
  %13 = load %struct.rtx_def*, %struct.rtx_def** %subtarget.addr, align 8, !dbg !6154
  %14 = load i32, i32* %mode.addr, align 4, !dbg !6155
  %15 = load i32, i32* %ignore.addr, align 4, !dbg !6156
  %call17 = call %struct.rtx_def* %10(%union.tree_node* %11, %struct.rtx_def* %12, %struct.rtx_def* %13, i32 %14, i32 %15), !dbg !6157
  store %struct.rtx_def* %call17, %struct.rtx_def** %retval, align 8, !dbg !6158
  br label %return, !dbg !6158

if.end:                                           ; preds = %cond.end
  %16 = load i32, i32* @optimize, align 4, !dbg !6159
  %tobool = icmp ne i32 %16, 0, !dbg !6159
  br i1 %tobool, label %if.end38, label %land.lhs.true, !dbg !6161

land.lhs.true:                                    ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6162
  %call18 = call zeroext i8 @called_as_built_in(%union.tree_node* %17), !dbg !6163
  %tobool19 = icmp ne i8 %call18, 0, !dbg !6163
  br i1 %tobool19, label %if.end38, label %land.lhs.true20, !dbg !6164

land.lhs.true20:                                  ; preds = %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6165
  %base21 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6165
  %19 = bitcast %struct.tree_base* %base21 to i64*, !dbg !6165
  %bf.load22 = load i64, i64* %19, align 8, !dbg !6165
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !6165
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !6165
  %idxprom = zext i32 %bf.cast24 to i64, !dbg !6165
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !6165
  %arrayidx25 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !6165
  %20 = load i8, i8* %arrayidx25, align 1, !dbg !6165
  %conv = zext i8 %20 to i32, !dbg !6165
  %tobool26 = icmp ne i32 %conv, 0, !dbg !6165
  br i1 %tobool26, label %land.lhs.true27, label %if.end38, !dbg !6165

land.lhs.true27:                                  ; preds = %land.lhs.true20
  %21 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6165
  %decl_with_vis = bitcast %union.tree_node* %21 to %struct.tree_decl_with_vis*, !dbg !6165
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !6165
  %22 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !6165
  %cmp28 = icmp ne %union.tree_node* %22, null, !dbg !6165
  br i1 %cmp28, label %land.lhs.true30, label %if.end38, !dbg !6166

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %23 = load i32, i32* %fcode, align 4, !dbg !6167
  %cmp31 = icmp ne i32 %23, 415, !dbg !6168
  br i1 %cmp31, label %land.lhs.true33, label %if.end38, !dbg !6169

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %24 = load i32, i32* %fcode, align 4, !dbg !6170
  %cmp34 = icmp ne i32 %24, 455, !dbg !6171
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !6172

if.then36:                                        ; preds = %land.lhs.true33
  %25 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6173
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6174
  %27 = load i32, i32* %ignore.addr, align 4, !dbg !6175
  %call37 = call %struct.rtx_def* @expand_call(%union.tree_node* %25, %struct.rtx_def* %26, i32 %27), !dbg !6176
  store %struct.rtx_def* %call37, %struct.rtx_def** %retval, align 8, !dbg !6177
  br label %return, !dbg !6177

if.end38:                                         ; preds = %land.lhs.true33, %land.lhs.true30, %land.lhs.true27, %land.lhs.true20, %land.lhs.true, %if.end
  %28 = load i32, i32* %ignore.addr, align 4, !dbg !6178
  %tobool39 = icmp ne i32 %28, 0, !dbg !6178
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !6180

if.then40:                                        ; preds = %if.end38
  %29 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6181
  store %struct.rtx_def* %29, %struct.rtx_def** %target.addr, align 8, !dbg !6182
  br label %if.end41, !dbg !6183

if.end41:                                         ; preds = %if.then40, %if.end38
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6184
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6186
  %cmp42 = icmp eq %struct.rtx_def* %30, %31, !dbg !6187
  br i1 %cmp42, label %land.lhs.true44, label %if.end79, !dbg !6188

land.lhs.true44:                                  ; preds = %if.end41
  %32 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6189
  %function_decl45 = bitcast %union.tree_node* %32 to %struct.tree_function_decl*, !dbg !6189
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl45, i32 0, i32 5, !dbg !6189
  %bf.load46 = load i32, i32* %pure_flag, align 8, !dbg !6189
  %bf.lshr47 = lshr i32 %bf.load46, 27, !dbg !6189
  %bf.clear48 = and i32 %bf.lshr47, 1, !dbg !6189
  %tobool49 = icmp ne i32 %bf.clear48, 0, !dbg !6189
  br i1 %tobool49, label %if.then56, label %lor.lhs.false, !dbg !6190

lor.lhs.false:                                    ; preds = %land.lhs.true44
  %33 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6191
  %base50 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !6191
  %34 = bitcast %struct.tree_base* %base50 to i64*, !dbg !6191
  %bf.load51 = load i64, i64* %34, align 8, !dbg !6191
  %bf.lshr52 = lshr i64 %bf.load51, 20, !dbg !6191
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !6191
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !6191
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !6191
  br i1 %tobool55, label %if.then56, label %if.end79, !dbg !6192

if.then56:                                        ; preds = %lor.lhs.false, %land.lhs.true44
  call void @llvm.dbg.declare(metadata i8* %volatilep, metadata !6193, metadata !DIExpression()), !dbg !6195
  store i8 0, i8* %volatilep, align 1, !dbg !6195
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6196, metadata !DIExpression()), !dbg !6197
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !6198, metadata !DIExpression()), !dbg !6205
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6206
  %call57 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %35, %struct.call_expr_arg_iterator_d* %iter), !dbg !6206
  store %union.tree_node* %call57, %union.tree_node** %arg, align 8, !dbg !6206
  br label %for.cond, !dbg !6206

for.cond:                                         ; preds = %for.inc, %if.then56
  %36 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6208
  %tobool58 = icmp ne %union.tree_node* %36, null, !dbg !6206
  br i1 %tobool58, label %for.body, label %for.end, !dbg !6206

for.body:                                         ; preds = %for.cond
  %37 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6210
  %base59 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !6210
  %38 = bitcast %struct.tree_base* %base59 to i64*, !dbg !6210
  %bf.load60 = load i64, i64* %38, align 8, !dbg !6210
  %bf.lshr61 = lshr i64 %bf.load60, 19, !dbg !6210
  %bf.clear62 = and i64 %bf.lshr61, 1, !dbg !6210
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !6210
  %tobool64 = icmp ne i32 %bf.cast63, 0, !dbg !6210
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !6212

if.then65:                                        ; preds = %for.body
  store i8 1, i8* %volatilep, align 1, !dbg !6213
  br label %for.end, !dbg !6215

if.end66:                                         ; preds = %for.body
  br label %for.inc, !dbg !6210

for.inc:                                          ; preds = %if.end66
  %call67 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !6208
  store %union.tree_node* %call67, %union.tree_node** %arg, align 8, !dbg !6208
  br label %for.cond, !dbg !6208, !llvm.loop !6216

for.end:                                          ; preds = %if.then65, %for.cond
  %39 = load i8, i8* %volatilep, align 1, !dbg !6218
  %tobool68 = icmp ne i8 %39, 0, !dbg !6218
  br i1 %tobool68, label %if.end78, label %if.then69, !dbg !6220

if.then69:                                        ; preds = %for.end
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6221
  %call70 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %40, %struct.call_expr_arg_iterator_d* %iter), !dbg !6221
  store %union.tree_node* %call70, %union.tree_node** %arg, align 8, !dbg !6221
  br label %for.cond71, !dbg !6221

for.cond71:                                       ; preds = %for.inc75, %if.then69
  %41 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6224
  %tobool72 = icmp ne %union.tree_node* %41, null, !dbg !6221
  br i1 %tobool72, label %for.body73, label %for.end77, !dbg !6221

for.body73:                                       ; preds = %for.cond71
  %42 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6226
  %43 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6227
  %call74 = call %struct.rtx_def* @expand_expr(%union.tree_node* %42, %struct.rtx_def* %43, i32 0, i32 0), !dbg !6228
  br label %for.inc75, !dbg !6228

for.inc75:                                        ; preds = %for.body73
  %call76 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !6224
  store %union.tree_node* %call76, %union.tree_node** %arg, align 8, !dbg !6224
  br label %for.cond71, !dbg !6224, !llvm.loop !6229

for.end77:                                        ; preds = %for.cond71
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6231
  store %struct.rtx_def* %44, %struct.rtx_def** %retval, align 8, !dbg !6232
  br label %return, !dbg !6232

if.end78:                                         ; preds = %for.end
  br label %if.end79, !dbg !6233

if.end79:                                         ; preds = %if.end78, %lor.lhs.false, %if.end41
  %45 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6234
  %46 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6235
  %47 = load i32, i32* %ignore.addr, align 4, !dbg !6236
  %call80 = call %struct.rtx_def* @expand_call(%union.tree_node* %45, %struct.rtx_def* %46, i32 %47), !dbg !6237
  store %struct.rtx_def* %call80, %struct.rtx_def** %retval, align 8, !dbg !6238
  br label %return, !dbg !6238

return:                                           ; preds = %if.end79, %for.end77, %if.then36, %if.then
  %48 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6239
  ret %struct.rtx_def* %48, !dbg !6239
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @called_as_built_in(%union.tree_node* %node) #0 !dbg !6240 {
entry:
  %node.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !6241, metadata !DIExpression()), !dbg !6242
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6243, metadata !DIExpression()), !dbg !6244
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !6245
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !6245
  %name1 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6245
  %1 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !6245
  %identifier = bitcast %union.tree_node* %1 to %struct.tree_identifier*, !dbg !6245
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6245
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !6245
  %2 = load i8*, i8** %str, align 8, !dbg !6245
  store i8* %2, i8** %name, align 8, !dbg !6244
  %3 = load i8*, i8** %name, align 8, !dbg !6246
  %call = call zeroext i8 @is_builtin_name(i8* %3), !dbg !6247
  ret i8 %call, !dbg !6248
}

declare dso_local %struct.rtx_def* @expand_call(%union.tree_node*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_call_expr_arg(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !6249 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6253, metadata !DIExpression()), !dbg !6254
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !6255, metadata !DIExpression()), !dbg !6256
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6257
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6258
  call void @init_call_expr_arg_iterator(%union.tree_node* %0, %struct.call_expr_arg_iterator_d* %1), !dbg !6259
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6260
  %call = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %2), !dbg !6261
  ret %union.tree_node* %call, !dbg !6262
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter) #0 !dbg !6263 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  %result = alloca %union.tree_node*, align 8
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !6266, metadata !DIExpression()), !dbg !6267
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !6268, metadata !DIExpression()), !dbg !6269
  %0 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6270
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %0, i32 0, i32 2, !dbg !6272
  %1 = load i32, i32* %i, align 4, !dbg !6272
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6273
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %2, i32 0, i32 1, !dbg !6274
  %3 = load i32, i32* %n, align 8, !dbg !6274
  %cmp = icmp sge i32 %1, %3, !dbg !6275
  br i1 %cmp, label %if.then, label %if.end, !dbg !6276

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6277
  br label %return, !dbg !6277

if.end:                                           ; preds = %entry
  %4 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6278
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %4, i32 0, i32 0, !dbg !6278
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6278
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !6278
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6278
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6278
  %i1 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !6278
  %7 = load i32, i32* %i1, align 4, !dbg !6278
  %add = add nsw i32 %7, 3, !dbg !6278
  %idxprom = sext i32 %add to i64, !dbg !6278
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !6278
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6278
  store %union.tree_node* %8, %union.tree_node** %result, align 8, !dbg !6279
  %9 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6280
  %i2 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %9, i32 0, i32 2, !dbg !6281
  %10 = load i32, i32* %i2, align 4, !dbg !6282
  %inc = add nsw i32 %10, 1, !dbg !6282
  store i32 %inc, i32* %i2, align 4, !dbg !6282
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6283
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !6284
  br label %return, !dbg !6284

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6285
  ret %union.tree_node* %12, !dbg !6285
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @builtin_mathfn_code(%union.tree_node* %t) #0 !dbg !6286 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %parmlist = alloca %union.tree_node*, align 8
  %argtype = alloca %union.tree_node*, align 8
  %parmtype = alloca %union.tree_node*, align 8
  %iter = alloca %struct.const_call_expr_arg_iterator_d, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6289, metadata !DIExpression()), !dbg !6290
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6291, metadata !DIExpression()), !dbg !6292
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6293, metadata !DIExpression()), !dbg !6294
  call void @llvm.dbg.declare(metadata %union.tree_node** %parmlist, metadata !6295, metadata !DIExpression()), !dbg !6296
  call void @llvm.dbg.declare(metadata %union.tree_node** %argtype, metadata !6297, metadata !DIExpression()), !dbg !6298
  call void @llvm.dbg.declare(metadata %union.tree_node** %parmtype, metadata !6299, metadata !DIExpression()), !dbg !6300
  call void @llvm.dbg.declare(metadata %struct.const_call_expr_arg_iterator_d* %iter, metadata !6301, metadata !DIExpression()), !dbg !6308
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6309
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6309
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6309
  %bf.load = load i64, i64* %1, align 8, !dbg !6309
  %bf.clear = and i64 %bf.load, 65535, !dbg !6309
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6309
  %cmp = icmp ne i32 %bf.cast, 59, !dbg !6311
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6312

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6313
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6313
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6313
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6313
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6313
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6313
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6313
  %bf.load2 = load i64, i64* %4, align 8, !dbg !6313
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6313
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6313
  %cmp5 = icmp ne i32 %bf.cast4, 121, !dbg !6314
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6315

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 721, i32* %retval, align 4, !dbg !6316
  br label %return, !dbg !6316

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6317
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %5), !dbg !6318
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6319
  %6 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6320
  %cmp6 = icmp eq %union.tree_node* %6, null, !dbg !6322
  br i1 %cmp6, label %if.then24, label %lor.lhs.false7, !dbg !6323

lor.lhs.false7:                                   ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6324
  %base8 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6324
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6324
  %bf.load9 = load i64, i64* %8, align 8, !dbg !6324
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6324
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6324
  %cmp12 = icmp ne i32 %bf.cast11, 29, !dbg !6325
  br i1 %cmp12, label %if.then24, label %lor.lhs.false13, !dbg !6326

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6327
  %function_decl = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !6327
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6327
  %bf.load14 = load i32, i32* %built_in_class, align 8, !dbg !6327
  %bf.lshr = lshr i32 %bf.load14, 11, !dbg !6327
  %bf.clear15 = and i32 %bf.lshr, 3, !dbg !6327
  %cmp16 = icmp ne i32 %bf.clear15, 0, !dbg !6327
  br i1 %cmp16, label %lor.lhs.false17, label %if.then24, !dbg !6328

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %10 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6329
  %function_decl18 = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !6329
  %built_in_class19 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl18, i32 0, i32 5, !dbg !6329
  %bf.load20 = load i32, i32* %built_in_class19, align 8, !dbg !6329
  %bf.lshr21 = lshr i32 %bf.load20, 11, !dbg !6329
  %bf.clear22 = and i32 %bf.lshr21, 3, !dbg !6329
  %cmp23 = icmp eq i32 %bf.clear22, 2, !dbg !6330
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !6331

if.then24:                                        ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false7, %if.end
  store i32 721, i32* %retval, align 4, !dbg !6332
  br label %return, !dbg !6332

if.end25:                                         ; preds = %lor.lhs.false17
  %11 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6333
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6333
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6333
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6333
  %type26 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !6333
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 1, !dbg !6333
  %13 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6333
  store %union.tree_node* %13, %union.tree_node** %parmlist, align 8, !dbg !6334
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6335
  call void @init_const_call_expr_arg_iterator(%union.tree_node* %14, %struct.const_call_expr_arg_iterator_d* %iter), !dbg !6336
  br label %for.cond, !dbg !6337

for.cond:                                         ; preds = %for.inc, %if.end25
  %15 = load %union.tree_node*, %union.tree_node** %parmlist, align 8, !dbg !6338
  %tobool = icmp ne %union.tree_node* %15, null, !dbg !6341
  br i1 %tobool, label %for.body, label %for.end, !dbg !6341

for.body:                                         ; preds = %for.cond
  %16 = load %union.tree_node*, %union.tree_node** %parmlist, align 8, !dbg !6342
  %list = bitcast %union.tree_node* %16 to %struct.tree_list*, !dbg !6342
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6342
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6342
  store %union.tree_node* %17, %union.tree_node** %parmtype, align 8, !dbg !6344
  %18 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6345
  %base27 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6345
  %19 = bitcast %struct.tree_base* %base27 to i64*, !dbg !6345
  %bf.load28 = load i64, i64* %19, align 8, !dbg !6345
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !6345
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !6345
  %cmp31 = icmp eq i32 %bf.cast30, 19, !dbg !6345
  br i1 %cmp31, label %if.then32, label %if.end40, !dbg !6347

if.then32:                                        ; preds = %for.body
  %call33 = call zeroext i8 @more_const_call_expr_args_p(%struct.const_call_expr_arg_iterator_d* %iter), !dbg !6348
  %tobool34 = icmp ne i8 %call33, 0, !dbg !6348
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !6351

if.then35:                                        ; preds = %if.then32
  store i32 721, i32* %retval, align 4, !dbg !6352
  br label %return, !dbg !6352

if.end36:                                         ; preds = %if.then32
  %20 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6353
  %function_decl37 = bitcast %union.tree_node* %20 to %struct.tree_function_decl*, !dbg !6353
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl37, i32 0, i32 5, !dbg !6353
  %bf.load38 = load i32, i32* %function_code, align 8, !dbg !6353
  %bf.clear39 = and i32 %bf.load38, 2047, !dbg !6353
  store i32 %bf.clear39, i32* %retval, align 4, !dbg !6354
  br label %return, !dbg !6354

if.end40:                                         ; preds = %for.body
  %call41 = call zeroext i8 @more_const_call_expr_args_p(%struct.const_call_expr_arg_iterator_d* %iter), !dbg !6355
  %tobool42 = icmp ne i8 %call41, 0, !dbg !6355
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !6357

if.then43:                                        ; preds = %if.end40
  store i32 721, i32* %retval, align 4, !dbg !6358
  br label %return, !dbg !6358

if.end44:                                         ; preds = %if.end40
  %call45 = call %union.tree_node* @next_const_call_expr_arg(%struct.const_call_expr_arg_iterator_d* %iter), !dbg !6359
  store %union.tree_node* %call45, %union.tree_node** %arg, align 8, !dbg !6360
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6361
  %common46 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !6361
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !6361
  %22 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !6361
  store %union.tree_node* %22, %union.tree_node** %argtype, align 8, !dbg !6362
  %23 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6363
  %base48 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6363
  %24 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6363
  %bf.load49 = load i64, i64* %24, align 8, !dbg !6363
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6363
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6363
  %cmp52 = icmp eq i32 %bf.cast51, 9, !dbg !6363
  br i1 %cmp52, label %if.then53, label %if.else, !dbg !6365

if.then53:                                        ; preds = %if.end44
  %25 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6366
  %base54 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6366
  %26 = bitcast %struct.tree_base* %base54 to i64*, !dbg !6366
  %bf.load55 = load i64, i64* %26, align 8, !dbg !6366
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !6366
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !6366
  %cmp58 = icmp eq i32 %bf.cast57, 9, !dbg !6366
  br i1 %cmp58, label %if.end60, label %if.then59, !dbg !6369

if.then59:                                        ; preds = %if.then53
  store i32 721, i32* %retval, align 4, !dbg !6370
  br label %return, !dbg !6370

if.end60:                                         ; preds = %if.then53
  br label %if.end157, !dbg !6371

if.else:                                          ; preds = %if.end44
  %27 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6372
  %base61 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6372
  %28 = bitcast %struct.tree_base* %base61 to i64*, !dbg !6372
  %bf.load62 = load i64, i64* %28, align 8, !dbg !6372
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !6372
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !6372
  %cmp65 = icmp eq i32 %bf.cast64, 13, !dbg !6372
  br i1 %cmp65, label %land.lhs.true, label %if.else89, !dbg !6372

land.lhs.true:                                    ; preds = %if.else
  %29 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6372
  %common66 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6372
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !6372
  %30 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !6372
  %base68 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6372
  %31 = bitcast %struct.tree_base* %base68 to i64*, !dbg !6372
  %bf.load69 = load i64, i64* %31, align 8, !dbg !6372
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !6372
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !6372
  %cmp72 = icmp eq i32 %bf.cast71, 9, !dbg !6372
  br i1 %cmp72, label %if.then73, label %if.else89, !dbg !6374

if.then73:                                        ; preds = %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6375
  %base74 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6375
  %33 = bitcast %struct.tree_base* %base74 to i64*, !dbg !6375
  %bf.load75 = load i64, i64* %33, align 8, !dbg !6375
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !6375
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !6375
  %cmp78 = icmp eq i32 %bf.cast77, 13, !dbg !6375
  br i1 %cmp78, label %land.lhs.true79, label %if.then87, !dbg !6375

land.lhs.true79:                                  ; preds = %if.then73
  %34 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6375
  %common80 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !6375
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !6375
  %35 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !6375
  %base82 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !6375
  %36 = bitcast %struct.tree_base* %base82 to i64*, !dbg !6375
  %bf.load83 = load i64, i64* %36, align 8, !dbg !6375
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !6375
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !6375
  %cmp86 = icmp eq i32 %bf.cast85, 9, !dbg !6375
  br i1 %cmp86, label %if.end88, label %if.then87, !dbg !6378

if.then87:                                        ; preds = %land.lhs.true79, %if.then73
  store i32 721, i32* %retval, align 4, !dbg !6379
  br label %return, !dbg !6379

if.end88:                                         ; preds = %land.lhs.true79
  br label %if.end156, !dbg !6380

if.else89:                                        ; preds = %land.lhs.true, %if.else
  %37 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6381
  %base90 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !6381
  %38 = bitcast %struct.tree_base* %base90 to i64*, !dbg !6381
  %bf.load91 = load i64, i64* %38, align 8, !dbg !6381
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !6381
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !6381
  %cmp94 = icmp eq i32 %bf.cast93, 10, !dbg !6381
  br i1 %cmp94, label %if.then101, label %lor.lhs.false95, !dbg !6381

lor.lhs.false95:                                  ; preds = %if.else89
  %39 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6381
  %base96 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !6381
  %40 = bitcast %struct.tree_base* %base96 to i64*, !dbg !6381
  %bf.load97 = load i64, i64* %40, align 8, !dbg !6381
  %bf.clear98 = and i64 %bf.load97, 65535, !dbg !6381
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !6381
  %cmp100 = icmp eq i32 %bf.cast99, 12, !dbg !6381
  br i1 %cmp100, label %if.then101, label %if.else115, !dbg !6383

if.then101:                                       ; preds = %lor.lhs.false95, %if.else89
  %41 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6384
  %base102 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !6384
  %42 = bitcast %struct.tree_base* %base102 to i64*, !dbg !6384
  %bf.load103 = load i64, i64* %42, align 8, !dbg !6384
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !6384
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !6384
  %cmp106 = icmp eq i32 %bf.cast105, 10, !dbg !6384
  br i1 %cmp106, label %if.end114, label %lor.lhs.false107, !dbg !6384

lor.lhs.false107:                                 ; preds = %if.then101
  %43 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6384
  %base108 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !6384
  %44 = bitcast %struct.tree_base* %base108 to i64*, !dbg !6384
  %bf.load109 = load i64, i64* %44, align 8, !dbg !6384
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !6384
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !6384
  %cmp112 = icmp eq i32 %bf.cast111, 12, !dbg !6384
  br i1 %cmp112, label %if.end114, label %if.then113, !dbg !6387

if.then113:                                       ; preds = %lor.lhs.false107
  store i32 721, i32* %retval, align 4, !dbg !6388
  br label %return, !dbg !6388

if.end114:                                        ; preds = %lor.lhs.false107, %if.then101
  br label %if.end155, !dbg !6389

if.else115:                                       ; preds = %lor.lhs.false95
  %45 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6390
  %base116 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !6390
  %46 = bitcast %struct.tree_base* %base116 to i64*, !dbg !6390
  %bf.load117 = load i64, i64* %46, align 8, !dbg !6390
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !6390
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !6390
  %cmp120 = icmp eq i32 %bf.cast119, 6, !dbg !6390
  br i1 %cmp120, label %if.then133, label %lor.lhs.false121, !dbg !6390

lor.lhs.false121:                                 ; preds = %if.else115
  %47 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6390
  %base122 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6390
  %48 = bitcast %struct.tree_base* %base122 to i64*, !dbg !6390
  %bf.load123 = load i64, i64* %48, align 8, !dbg !6390
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !6390
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !6390
  %cmp126 = icmp eq i32 %bf.cast125, 7, !dbg !6390
  br i1 %cmp126, label %if.then133, label %lor.lhs.false127, !dbg !6390

lor.lhs.false127:                                 ; preds = %lor.lhs.false121
  %49 = load %union.tree_node*, %union.tree_node** %parmtype, align 8, !dbg !6390
  %base128 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !6390
  %50 = bitcast %struct.tree_base* %base128 to i64*, !dbg !6390
  %bf.load129 = load i64, i64* %50, align 8, !dbg !6390
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !6390
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !6390
  %cmp132 = icmp eq i32 %bf.cast131, 8, !dbg !6390
  br i1 %cmp132, label %if.then133, label %if.else153, !dbg !6392

if.then133:                                       ; preds = %lor.lhs.false127, %lor.lhs.false121, %if.else115
  %51 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6393
  %base134 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6393
  %52 = bitcast %struct.tree_base* %base134 to i64*, !dbg !6393
  %bf.load135 = load i64, i64* %52, align 8, !dbg !6393
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !6393
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !6393
  %cmp138 = icmp eq i32 %bf.cast137, 6, !dbg !6393
  br i1 %cmp138, label %if.end152, label %lor.lhs.false139, !dbg !6393

lor.lhs.false139:                                 ; preds = %if.then133
  %53 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6393
  %base140 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6393
  %54 = bitcast %struct.tree_base* %base140 to i64*, !dbg !6393
  %bf.load141 = load i64, i64* %54, align 8, !dbg !6393
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !6393
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !6393
  %cmp144 = icmp eq i32 %bf.cast143, 7, !dbg !6393
  br i1 %cmp144, label %if.end152, label %lor.lhs.false145, !dbg !6393

lor.lhs.false145:                                 ; preds = %lor.lhs.false139
  %55 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !6393
  %base146 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !6393
  %56 = bitcast %struct.tree_base* %base146 to i64*, !dbg !6393
  %bf.load147 = load i64, i64* %56, align 8, !dbg !6393
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !6393
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !6393
  %cmp150 = icmp eq i32 %bf.cast149, 8, !dbg !6393
  br i1 %cmp150, label %if.end152, label %if.then151, !dbg !6396

if.then151:                                       ; preds = %lor.lhs.false145
  store i32 721, i32* %retval, align 4, !dbg !6397
  br label %return, !dbg !6397

if.end152:                                        ; preds = %lor.lhs.false145, %lor.lhs.false139, %if.then133
  br label %if.end154, !dbg !6398

if.else153:                                       ; preds = %lor.lhs.false127
  store i32 721, i32* %retval, align 4, !dbg !6399
  br label %return, !dbg !6399

if.end154:                                        ; preds = %if.end152
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.end114
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.end88
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.end60
  br label %for.inc, !dbg !6400

for.inc:                                          ; preds = %if.end157
  %57 = load %union.tree_node*, %union.tree_node** %parmlist, align 8, !dbg !6401
  %common158 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !6401
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 1, !dbg !6401
  %58 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6401
  store %union.tree_node* %58, %union.tree_node** %parmlist, align 8, !dbg !6402
  br label %for.cond, !dbg !6403, !llvm.loop !6404

for.end:                                          ; preds = %for.cond
  %59 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6406
  %function_decl159 = bitcast %union.tree_node* %59 to %struct.tree_function_decl*, !dbg !6406
  %function_code160 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl159, i32 0, i32 5, !dbg !6406
  %bf.load161 = load i32, i32* %function_code160, align 8, !dbg !6406
  %bf.clear162 = and i32 %bf.load161, 2047, !dbg !6406
  store i32 %bf.clear162, i32* %retval, align 4, !dbg !6407
  br label %return, !dbg !6407

return:                                           ; preds = %for.end, %if.else153, %if.then151, %if.then113, %if.then87, %if.then59, %if.then43, %if.end36, %if.then35, %if.then24, %if.then
  %60 = load i32, i32* %retval, align 4, !dbg !6408
  ret i32 %60, !dbg !6408
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_const_call_expr_arg_iterator(%union.tree_node* %exp, %struct.const_call_expr_arg_iterator_d* %iter) #0 !dbg !6409 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.const_call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6413, metadata !DIExpression()), !dbg !6414
  store %struct.const_call_expr_arg_iterator_d* %iter, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.const_call_expr_arg_iterator_d** %iter.addr, metadata !6415, metadata !DIExpression()), !dbg !6416
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6417
  %1 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6418
  %t = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %1, i32 0, i32 0, !dbg !6419
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !6420
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6421
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6421
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !6421
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6421
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6421
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !6421
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6421
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !6421
  %4 = load i64, i64* %low, align 8, !dbg !6421
  %conv = trunc i64 %4 to i32, !dbg !6421
  %sub = sub nsw i32 %conv, 3, !dbg !6421
  %5 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6422
  %n = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %5, i32 0, i32 1, !dbg !6423
  store i32 %sub, i32* %n, align 8, !dbg !6424
  %6 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6425
  %i = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !6426
  store i32 0, i32* %i, align 4, !dbg !6427
  ret void, !dbg !6428
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @more_const_call_expr_args_p(%struct.const_call_expr_arg_iterator_d* %iter) #0 !dbg !6429 {
entry:
  %iter.addr = alloca %struct.const_call_expr_arg_iterator_d*, align 8
  store %struct.const_call_expr_arg_iterator_d* %iter, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.const_call_expr_arg_iterator_d** %iter.addr, metadata !6434, metadata !DIExpression()), !dbg !6435
  %0 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6436
  %i = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %0, i32 0, i32 2, !dbg !6437
  %1 = load i32, i32* %i, align 4, !dbg !6437
  %2 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6438
  %n = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %2, i32 0, i32 1, !dbg !6439
  %3 = load i32, i32* %n, align 8, !dbg !6439
  %cmp = icmp slt i32 %1, %3, !dbg !6440
  %conv = zext i1 %cmp to i32, !dbg !6440
  %conv1 = trunc i32 %conv to i8, !dbg !6441
  ret i8 %conv1, !dbg !6442
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_const_call_expr_arg(%struct.const_call_expr_arg_iterator_d* %iter) #0 !dbg !6443 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.const_call_expr_arg_iterator_d*, align 8
  %result = alloca %union.tree_node*, align 8
  store %struct.const_call_expr_arg_iterator_d* %iter, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.const_call_expr_arg_iterator_d** %iter.addr, metadata !6446, metadata !DIExpression()), !dbg !6447
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !6448, metadata !DIExpression()), !dbg !6449
  %0 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6450
  %i = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %0, i32 0, i32 2, !dbg !6452
  %1 = load i32, i32* %i, align 4, !dbg !6452
  %2 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6453
  %n = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %2, i32 0, i32 1, !dbg !6454
  %3 = load i32, i32* %n, align 8, !dbg !6454
  %cmp = icmp sge i32 %1, %3, !dbg !6455
  br i1 %cmp, label %if.then, label %if.end, !dbg !6456

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6457
  br label %return, !dbg !6457

if.end:                                           ; preds = %entry
  %4 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6458
  %t = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %4, i32 0, i32 0, !dbg !6458
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6458
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !6458
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6458
  %6 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6458
  %i1 = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !6458
  %7 = load i32, i32* %i1, align 4, !dbg !6458
  %add = add nsw i32 %7, 3, !dbg !6458
  %idxprom = sext i32 %add to i64, !dbg !6458
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !6458
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6458
  store %union.tree_node* %8, %union.tree_node** %result, align 8, !dbg !6459
  %9 = load %struct.const_call_expr_arg_iterator_d*, %struct.const_call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !6460
  %i2 = getelementptr inbounds %struct.const_call_expr_arg_iterator_d, %struct.const_call_expr_arg_iterator_d* %9, i32 0, i32 2, !dbg !6461
  %10 = load i32, i32* %i2, align 4, !dbg !6462
  %inc = add nsw i32 %10, 1, !dbg !6462
  store i32 %inc, i32* %i2, align 4, !dbg !6462
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6463
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !6464
  br label %return, !dbg !6464

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6465
  ret %union.tree_node* %12, !dbg !6465
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_strcpy(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len) #0 !dbg !6466 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6469, metadata !DIExpression()), !dbg !6470
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !6475, metadata !DIExpression()), !dbg !6476
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !6477, metadata !DIExpression()), !dbg !6478
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6479, metadata !DIExpression()), !dbg !6480
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6481
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !6483
  %tobool = icmp ne i8 %call, 0, !dbg !6483
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6484

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6485
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !6486
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6486
  br i1 %tobool2, label %if.end, label %if.then, !dbg !6487

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6488
  br label %return, !dbg !6488

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6489
  %3 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6491
  %call3 = call i32 @operand_equal_p(%union.tree_node* %2, %union.tree_node* %3, i32 0), !dbg !6492
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6492
  br i1 %tobool4, label %if.then5, label %if.end9, !dbg !6493

if.then5:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !6494
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6495
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6495
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6495
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6495
  %common6 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6495
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !6495
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6495
  %8 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6496
  %call8 = call %union.tree_node* @fold_convert_loc(i32 %4, %union.tree_node* %7, %union.tree_node* %8), !dbg !6497
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !6498
  br label %return, !dbg !6498

if.end9:                                          ; preds = %if.end
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6499
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6499
  %call10 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !6501
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6501
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !6502

if.then12:                                        ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6503
  br label %return, !dbg !6503

if.end13:                                         ; preds = %if.end9
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !6504
  store %union.tree_node* %10, %union.tree_node** %fn, align 8, !dbg !6505
  %11 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6506
  %tobool14 = icmp ne %union.tree_node* %11, null, !dbg !6506
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !6508

if.then15:                                        ; preds = %if.end13
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6509
  br label %return, !dbg !6509

if.end16:                                         ; preds = %if.end13
  %12 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6510
  %tobool17 = icmp ne %union.tree_node* %12, null, !dbg !6510
  br i1 %tobool17, label %if.end25, label %if.then18, !dbg !6512

if.then18:                                        ; preds = %if.end16
  %13 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6513
  %call19 = call %union.tree_node* @c_strlen(%union.tree_node* %13, i32 1), !dbg !6515
  store %union.tree_node* %call19, %union.tree_node** %len.addr, align 8, !dbg !6516
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6517
  %tobool20 = icmp ne %union.tree_node* %14, null, !dbg !6517
  br i1 %tobool20, label %lor.lhs.false21, label %if.then23, !dbg !6519

lor.lhs.false21:                                  ; preds = %if.then18
  %15 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6520
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6520
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !6520
  %bf.load = load i64, i64* %16, align 8, !dbg !6520
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !6520
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6520
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6520
  %tobool22 = icmp ne i32 %bf.cast, 0, !dbg !6520
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !6521

if.then23:                                        ; preds = %lor.lhs.false21, %if.then18
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6522
  br label %return, !dbg !6522

if.end24:                                         ; preds = %lor.lhs.false21
  br label %if.end25, !dbg !6523

if.end25:                                         ; preds = %if.end24, %if.end16
  %17 = load i32, i32* %loc.addr, align 4, !dbg !6524
  %18 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6525
  %call26 = call %union.tree_node* @size_int_kind(i64 1, i32 1), !dbg !6526
  %call27 = call %union.tree_node* @size_binop_loc(i32 %17, i32 63, %union.tree_node* %18, %union.tree_node* %call26), !dbg !6527
  store %union.tree_node* %call27, %union.tree_node** %len.addr, align 8, !dbg !6528
  %19 = load i32, i32* %loc.addr, align 4, !dbg !6529
  %20 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6530
  %common28 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !6530
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !6530
  %21 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6530
  %common30 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !6530
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !6530
  %22 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !6530
  %23 = load i32, i32* %loc.addr, align 4, !dbg !6531
  %24 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6532
  %25 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6533
  %26 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6534
  %27 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6535
  %call32 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %23, %union.tree_node* %24, i32 3, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !6536
  %call33 = call %union.tree_node* @fold_convert_loc(i32 %19, %union.tree_node* %22, %union.tree_node* %call32), !dbg !6537
  store %union.tree_node* %call33, %union.tree_node** %retval, align 8, !dbg !6538
  br label %return, !dbg !6538

return:                                           ; preds = %if.end25, %if.then23, %if.then15, %if.then12, %if.then5, %if.then
  %28 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6539
  ret %union.tree_node* %28, !dbg !6539
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @validate_arg(%union.tree_node* %arg, i32 %code) #0 !dbg !6540 {
entry:
  %retval = alloca i8, align 1
  %arg.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !6543, metadata !DIExpression()), !dbg !6544
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6545, metadata !DIExpression()), !dbg !6546
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6547
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6547
  br i1 %tobool, label %if.else, label %if.then, !dbg !6549

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6550
  br label %return, !dbg !6550

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4, !dbg !6551
  %cmp = icmp eq i32 %1, 10, !dbg !6553
  br i1 %cmp, label %if.then1, label %if.else10, !dbg !6554

if.then1:                                         ; preds = %if.else
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6555
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6555
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6555
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6555
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6555
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6555
  %bf.load = load i64, i64* %4, align 8, !dbg !6555
  %bf.clear = and i64 %bf.load, 65535, !dbg !6555
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6555
  %cmp2 = icmp eq i32 %bf.cast, 10, !dbg !6555
  br i1 %cmp2, label %lor.end, label %lor.rhs, !dbg !6555

lor.rhs:                                          ; preds = %if.then1
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6555
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6555
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !6555
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !6555
  %base5 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6555
  %7 = bitcast %struct.tree_base* %base5 to i64*, !dbg !6555
  %bf.load6 = load i64, i64* %7, align 8, !dbg !6555
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !6555
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !6555
  %cmp9 = icmp eq i32 %bf.cast8, 12, !dbg !6555
  br label %lor.end, !dbg !6555

lor.end:                                          ; preds = %lor.rhs, %if.then1
  %8 = phi i1 [ true, %if.then1 ], [ %cmp9, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !6555
  %conv = trunc i32 %lor.ext to i8, !dbg !6555
  store i8 %conv, i8* %retval, align 1, !dbg !6556
  br label %return, !dbg !6556

if.else10:                                        ; preds = %if.else
  %9 = load i32, i32* %code.addr, align 4, !dbg !6557
  %cmp11 = icmp eq i32 %9, 8, !dbg !6559
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !6560

if.then13:                                        ; preds = %if.else10
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6561
  %common14 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6561
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !6561
  %11 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !6561
  %base16 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6561
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !6561
  %bf.load17 = load i64, i64* %12, align 8, !dbg !6561
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !6561
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !6561
  %cmp20 = icmp eq i32 %bf.cast19, 6, !dbg !6561
  br i1 %cmp20, label %lor.end39, label %lor.lhs.false, !dbg !6561

lor.lhs.false:                                    ; preds = %if.then13
  %13 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6561
  %common22 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !6561
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !6561
  %14 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !6561
  %base24 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6561
  %15 = bitcast %struct.tree_base* %base24 to i64*, !dbg !6561
  %bf.load25 = load i64, i64* %15, align 8, !dbg !6561
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6561
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !6561
  %cmp28 = icmp eq i32 %bf.cast27, 7, !dbg !6561
  br i1 %cmp28, label %lor.end39, label %lor.rhs30, !dbg !6561

lor.rhs30:                                        ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6561
  %common31 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !6561
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !6561
  %17 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !6561
  %base33 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6561
  %18 = bitcast %struct.tree_base* %base33 to i64*, !dbg !6561
  %bf.load34 = load i64, i64* %18, align 8, !dbg !6561
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !6561
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !6561
  %cmp37 = icmp eq i32 %bf.cast36, 8, !dbg !6561
  br label %lor.end39, !dbg !6561

lor.end39:                                        ; preds = %lor.rhs30, %lor.lhs.false, %if.then13
  %19 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then13 ], [ %cmp37, %lor.rhs30 ]
  %lor.ext40 = zext i1 %19 to i32, !dbg !6561
  %conv41 = trunc i32 %lor.ext40 to i8, !dbg !6561
  store i8 %conv41, i8* %retval, align 1, !dbg !6562
  br label %return, !dbg !6562

if.end:                                           ; preds = %if.else10
  br label %if.end42

if.end42:                                         ; preds = %if.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  %20 = load i32, i32* %code.addr, align 4, !dbg !6563
  %21 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6564
  %common44 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !6564
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !6564
  %22 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !6564
  %base46 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6564
  %23 = bitcast %struct.tree_base* %base46 to i64*, !dbg !6564
  %bf.load47 = load i64, i64* %23, align 8, !dbg !6564
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !6564
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !6564
  %cmp50 = icmp eq i32 %20, %bf.cast49, !dbg !6565
  %conv51 = zext i1 %cmp50 to i32, !dbg !6565
  %conv52 = trunc i32 %conv51 to i8, !dbg !6563
  store i8 %conv52, i8* %retval, align 1, !dbg !6566
  br label %return, !dbg !6566

return:                                           ; preds = %if.end43, %lor.end39, %lor.end, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !6567
  ret i8 %24, !dbg !6567
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local zeroext i8 @optimize_function_for_size_p(%struct.function*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_strncpy(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len, %union.tree_node* %slen) #0 !dbg !6568 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %slen.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6571, metadata !DIExpression()), !dbg !6572
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6573, metadata !DIExpression()), !dbg !6574
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !6575, metadata !DIExpression()), !dbg !6576
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !6577, metadata !DIExpression()), !dbg !6578
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !6579, metadata !DIExpression()), !dbg !6580
  store %union.tree_node* %slen, %union.tree_node** %slen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %slen.addr, metadata !6581, metadata !DIExpression()), !dbg !6582
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6583, metadata !DIExpression()), !dbg !6584
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6585
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !6587
  %tobool = icmp ne i8 %call, 0, !dbg !6587
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6588

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6589
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !6590
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6590
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !6591

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6592
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !6593
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6593
  br i1 %tobool5, label %if.end, label %if.then, !dbg !6594

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6595
  br label %return, !dbg !6595

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6596
  %call6 = call i32 @integer_zerop(%union.tree_node* %3), !dbg !6598
  %tobool7 = icmp ne i32 %call6, 0, !dbg !6598
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !6599

if.then8:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !6600
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6601
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6601
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6601
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6601
  %common9 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6601
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6601
  %7 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6601
  %8 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6602
  %9 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6603
  %call11 = call %union.tree_node* @omit_one_operand_loc(i32 %4, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !6604
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !6605
  br label %return, !dbg !6605

if.end12:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6606
  %cmp = icmp eq %union.tree_node* %10, null, !dbg !6608
  br i1 %cmp, label %if.then15, label %lor.lhs.false13, !dbg !6609

lor.lhs.false13:                                  ; preds = %if.end12
  %11 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6610
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6610
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !6610
  %bf.load = load i64, i64* %12, align 8, !dbg !6610
  %bf.clear = and i64 %bf.load, 65535, !dbg !6610
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6610
  %cmp14 = icmp ne i32 %bf.cast, 23, !dbg !6611
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6612

if.then15:                                        ; preds = %lor.lhs.false13, %if.end12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6613
  br label %return, !dbg !6613

if.end16:                                         ; preds = %lor.lhs.false13
  %13 = load %union.tree_node*, %union.tree_node** %slen.addr, align 8, !dbg !6614
  %tobool17 = icmp ne %union.tree_node* %13, null, !dbg !6614
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !6616

if.then18:                                        ; preds = %if.end16
  %14 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6617
  %call19 = call %union.tree_node* @c_strlen(%union.tree_node* %14, i32 1), !dbg !6618
  store %union.tree_node* %call19, %union.tree_node** %slen.addr, align 8, !dbg !6619
  br label %if.end20, !dbg !6620

if.end20:                                         ; preds = %if.then18, %if.end16
  %15 = load %union.tree_node*, %union.tree_node** %slen.addr, align 8, !dbg !6621
  %cmp21 = icmp eq %union.tree_node* %15, null, !dbg !6623
  br i1 %cmp21, label %if.then28, label %lor.lhs.false22, !dbg !6624

lor.lhs.false22:                                  ; preds = %if.end20
  %16 = load %union.tree_node*, %union.tree_node** %slen.addr, align 8, !dbg !6625
  %base23 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6625
  %17 = bitcast %struct.tree_base* %base23 to i64*, !dbg !6625
  %bf.load24 = load i64, i64* %17, align 8, !dbg !6625
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !6625
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !6625
  %cmp27 = icmp ne i32 %bf.cast26, 23, !dbg !6626
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !6627

if.then28:                                        ; preds = %lor.lhs.false22, %if.end20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6628
  br label %return, !dbg !6628

if.end29:                                         ; preds = %lor.lhs.false22
  %18 = load i32, i32* %loc.addr, align 4, !dbg !6629
  %19 = load %union.tree_node*, %union.tree_node** %slen.addr, align 8, !dbg !6630
  %call30 = call %union.tree_node* @size_int_kind(i64 1, i32 1), !dbg !6631
  %call31 = call %union.tree_node* @size_binop_loc(i32 %18, i32 63, %union.tree_node* %19, %union.tree_node* %call30), !dbg !6632
  store %union.tree_node* %call31, %union.tree_node** %slen.addr, align 8, !dbg !6633
  %20 = load %union.tree_node*, %union.tree_node** %slen.addr, align 8, !dbg !6634
  %21 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6636
  %call32 = call i32 @tree_int_cst_lt(%union.tree_node* %20, %union.tree_node* %21), !dbg !6637
  %tobool33 = icmp ne i32 %call32, 0, !dbg !6637
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !6638

if.then34:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6639
  br label %return, !dbg !6639

if.end35:                                         ; preds = %if.end29
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !6640
  store %union.tree_node* %22, %union.tree_node** %fn, align 8, !dbg !6641
  %23 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6642
  %tobool36 = icmp ne %union.tree_node* %23, null, !dbg !6642
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !6644

if.then37:                                        ; preds = %if.end35
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6645
  br label %return, !dbg !6645

if.end38:                                         ; preds = %if.end35
  %24 = load i32, i32* %loc.addr, align 4, !dbg !6646
  %25 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6647
  %common39 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !6647
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !6647
  %26 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6647
  %common41 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !6647
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !6647
  %27 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !6647
  %28 = load i32, i32* %loc.addr, align 4, !dbg !6648
  %29 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6649
  %30 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !6650
  %31 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !6651
  %32 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !6652
  %call43 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %28, %union.tree_node* %29, i32 3, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !6653
  %call44 = call %union.tree_node* @fold_convert_loc(i32 %24, %union.tree_node* %27, %union.tree_node* %call43), !dbg !6654
  store %union.tree_node* %call44, %union.tree_node** %retval, align 8, !dbg !6655
  br label %return, !dbg !6655

return:                                           ; preds = %if.end38, %if.then37, %if.then34, %if.then28, %if.then15, %if.then8, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6656
  ret %union.tree_node* %33, !dbg !6656
}

declare dso_local %union.tree_node* @omit_one_operand_loc(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_call_expr(i32 %loc, %union.tree_node* %exp, i8 zeroext %ignore) #0 !dbg !6657 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %ret = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %nargs = alloca i32, align 4
  %fndecl2 = alloca %union.tree_node*, align 8
  %args = alloca %union.tree_node**, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6660, metadata !DIExpression()), !dbg !6661
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6662, metadata !DIExpression()), !dbg !6663
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6666, metadata !DIExpression()), !dbg !6667
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !6667
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6668, metadata !DIExpression()), !dbg !6669
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6670
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %0), !dbg !6671
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6669
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6672
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6672
  br i1 %tobool, label %land.lhs.true, label %if.end88, !dbg !6674

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6675
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6675
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6675
  %bf.load = load i64, i64* %3, align 8, !dbg !6675
  %bf.clear = and i64 %bf.load, 65535, !dbg !6675
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6675
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !6676
  br i1 %cmp, label %land.lhs.true1, label %if.end88, !dbg !6677

land.lhs.true1:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6678
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !6678
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6678
  %bf.load2 = load i32, i32* %built_in_class, align 8, !dbg !6678
  %bf.lshr = lshr i32 %bf.load2, 11, !dbg !6678
  %bf.clear3 = and i32 %bf.lshr, 3, !dbg !6678
  %cmp4 = icmp ne i32 %bf.clear3, 0, !dbg !6678
  br i1 %cmp4, label %land.lhs.true5, label %if.end88, !dbg !6679

land.lhs.true5:                                   ; preds = %land.lhs.true1
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6680
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6680
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6680
  %bf.load7 = load i64, i64* %6, align 8, !dbg !6680
  %bf.lshr8 = lshr i64 %bf.load7, 27, !dbg !6680
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !6680
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6680
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !6680
  br i1 %tobool11, label %if.end88, label %if.then, !dbg !6681

if.then:                                          ; preds = %land.lhs.true5
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !6682, metadata !DIExpression()), !dbg !6684
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6685
  %exp12 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !6685
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !6685
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6685
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6685
  %int_cst = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !6685
  %int_cst13 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6685
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst13, i32 0, i32 0, !dbg !6685
  %9 = load i64, i64* %low, align 8, !dbg !6685
  %conv = trunc i64 %9 to i32, !dbg !6685
  %sub = sub nsw i32 %conv, 3, !dbg !6685
  store i32 %sub, i32* %nargs, align 4, !dbg !6684
  %10 = load i32, i32* %nargs, align 4, !dbg !6686
  %tobool14 = icmp ne i32 %10, 0, !dbg !6686
  br i1 %tobool14, label %land.lhs.true15, label %if.end57, !dbg !6688

land.lhs.true15:                                  ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6689
  %exp16 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !6689
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !6689
  %12 = load i32, i32* %nargs, align 4, !dbg !6689
  %sub18 = sub nsw i32 %12, 1, !dbg !6689
  %add = add nsw i32 %sub18, 3, !dbg !6689
  %idxprom = sext i32 %add to i64, !dbg !6689
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 %idxprom, !dbg !6689
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !6689
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6689
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6689
  %bf.load21 = load i64, i64* %14, align 8, !dbg !6689
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !6689
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !6689
  %cmp24 = icmp eq i32 %bf.cast23, 59, !dbg !6690
  br i1 %cmp24, label %if.then26, label %if.end57, !dbg !6691

if.then26:                                        ; preds = %land.lhs.true15
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl2, metadata !6692, metadata !DIExpression()), !dbg !6694
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6695
  %exp27 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !6695
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !6695
  %16 = load i32, i32* %nargs, align 4, !dbg !6695
  %sub29 = sub nsw i32 %16, 1, !dbg !6695
  %add30 = add nsw i32 %sub29, 3, !dbg !6695
  %idxprom31 = sext i32 %add30 to i64, !dbg !6695
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 %idxprom31, !dbg !6695
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !6695
  %call33 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %17), !dbg !6696
  store %union.tree_node* %call33, %union.tree_node** %fndecl2, align 8, !dbg !6694
  %18 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !6697
  %tobool34 = icmp ne %union.tree_node* %18, null, !dbg !6697
  br i1 %tobool34, label %land.lhs.true35, label %if.end, !dbg !6699

land.lhs.true35:                                  ; preds = %if.then26
  %19 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !6700
  %base36 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6700
  %20 = bitcast %struct.tree_base* %base36 to i64*, !dbg !6700
  %bf.load37 = load i64, i64* %20, align 8, !dbg !6700
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !6700
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !6700
  %cmp40 = icmp eq i32 %bf.cast39, 29, !dbg !6701
  br i1 %cmp40, label %land.lhs.true42, label %if.end, !dbg !6702

land.lhs.true42:                                  ; preds = %land.lhs.true35
  %21 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !6703
  %function_decl43 = bitcast %union.tree_node* %21 to %struct.tree_function_decl*, !dbg !6703
  %built_in_class44 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl43, i32 0, i32 5, !dbg !6703
  %bf.load45 = load i32, i32* %built_in_class44, align 8, !dbg !6703
  %bf.lshr46 = lshr i32 %bf.load45, 11, !dbg !6703
  %bf.clear47 = and i32 %bf.lshr46, 3, !dbg !6703
  %cmp48 = icmp eq i32 %bf.clear47, 3, !dbg !6704
  br i1 %cmp48, label %land.lhs.true50, label %if.end, !dbg !6705

land.lhs.true50:                                  ; preds = %land.lhs.true42
  %22 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !6706
  %function_decl51 = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !6706
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl51, i32 0, i32 5, !dbg !6706
  %bf.load52 = load i32, i32* %function_code, align 8, !dbg !6706
  %bf.clear53 = and i32 %bf.load52, 2047, !dbg !6706
  %cmp54 = icmp eq i32 %bf.clear53, 516, !dbg !6707
  br i1 %cmp54, label %if.then56, label %if.end, !dbg !6708

if.then56:                                        ; preds = %land.lhs.true50
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6709
  br label %return, !dbg !6709

if.end:                                           ; preds = %land.lhs.true50, %land.lhs.true42, %land.lhs.true35, %if.then26
  br label %if.end57, !dbg !6710

if.end57:                                         ; preds = %if.end, %land.lhs.true15, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6711
  %call58 = call zeroext i8 @avoid_folding_inline_builtin(%union.tree_node* %23), !dbg !6713
  %tobool59 = icmp ne i8 %call58, 0, !dbg !6713
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !6714

if.then60:                                        ; preds = %if.end57
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6715
  br label %return, !dbg !6715

if.end61:                                         ; preds = %if.end57
  %24 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6716
  %function_decl62 = bitcast %union.tree_node* %24 to %struct.tree_function_decl*, !dbg !6716
  %built_in_class63 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl62, i32 0, i32 5, !dbg !6716
  %bf.load64 = load i32, i32* %built_in_class63, align 8, !dbg !6716
  %bf.lshr65 = lshr i32 %bf.load64, 11, !dbg !6716
  %bf.clear66 = and i32 %bf.lshr65, 3, !dbg !6716
  %cmp67 = icmp eq i32 %bf.clear66, 2, !dbg !6718
  br i1 %cmp67, label %if.then69, label %if.else, !dbg !6719

if.then69:                                        ; preds = %if.end61
  %25 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 27), align 8, !dbg !6720
  %26 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6721
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6722
  %call70 = call %union.tree_node* @call_expr_arglist(%union.tree_node* %27), !dbg !6722
  %28 = load i8, i8* %ignore.addr, align 1, !dbg !6723
  %call71 = call %union.tree_node* %25(%union.tree_node* %26, %union.tree_node* %call70, i8 zeroext %28), !dbg !6724
  store %union.tree_node* %call71, %union.tree_node** %retval, align 8, !dbg !6725
  br label %return, !dbg !6725

if.else:                                          ; preds = %if.end61
  %29 = load i32, i32* %nargs, align 4, !dbg !6726
  %cmp72 = icmp sle i32 %29, 4, !dbg !6729
  br i1 %cmp72, label %if.then74, label %if.end79, !dbg !6730

if.then74:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node*** %args, metadata !6731, metadata !DIExpression()), !dbg !6733
  %30 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6734
  %exp75 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !6734
  %operands76 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp75, i32 0, i32 3, !dbg !6734
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands76, i64 0, i64 0, !dbg !6734
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %arrayidx77, i64 3, !dbg !6734
  store %union.tree_node** %add.ptr, %union.tree_node*** %args, align 8, !dbg !6733
  %31 = load i32, i32* %loc.addr, align 4, !dbg !6735
  %32 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6736
  %33 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6737
  %34 = load i32, i32* %nargs, align 4, !dbg !6738
  %35 = load i8, i8* %ignore.addr, align 1, !dbg !6739
  %call78 = call %union.tree_node* @fold_builtin_n(i32 %31, %union.tree_node* %32, %union.tree_node** %33, i32 %34, i8 zeroext %35), !dbg !6740
  store %union.tree_node* %call78, %union.tree_node** %ret, align 8, !dbg !6741
  br label %if.end79, !dbg !6742

if.end79:                                         ; preds = %if.then74, %if.else
  %36 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6743
  %tobool80 = icmp ne %union.tree_node* %36, null, !dbg !6743
  br i1 %tobool80, label %if.end83, label %if.then81, !dbg !6745

if.then81:                                        ; preds = %if.end79
  %37 = load i32, i32* %loc.addr, align 4, !dbg !6746
  %38 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6747
  %39 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6748
  %40 = load i8, i8* %ignore.addr, align 1, !dbg !6749
  %call82 = call %union.tree_node* @fold_builtin_varargs(i32 %37, %union.tree_node* %38, %union.tree_node* %39, i8 zeroext %40), !dbg !6750
  store %union.tree_node* %call82, %union.tree_node** %ret, align 8, !dbg !6751
  br label %if.end83, !dbg !6752

if.end83:                                         ; preds = %if.then81, %if.end79
  %41 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6753
  %tobool84 = icmp ne %union.tree_node* %41, null, !dbg !6753
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !6755

if.then85:                                        ; preds = %if.end83
  %42 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6756
  store %union.tree_node* %42, %union.tree_node** %retval, align 8, !dbg !6757
  br label %return, !dbg !6757

if.end86:                                         ; preds = %if.end83
  br label %if.end87

if.end87:                                         ; preds = %if.end86
  br label %if.end88, !dbg !6758

if.end88:                                         ; preds = %if.end87, %land.lhs.true5, %land.lhs.true1, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6759
  br label %return, !dbg !6759

return:                                           ; preds = %if.end88, %if.then85, %if.then69, %if.then60, %if.then56
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6760
  ret %union.tree_node* %43, !dbg !6760
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @avoid_folding_inline_builtin(%union.tree_node* %fndecl) #0 !dbg !6761 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6764
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6764
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6764
  %bf.load = load i32, i32* %declared_inline_flag, align 8, !dbg !6764
  %bf.lshr = lshr i32 %bf.load, 21, !dbg !6764
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6764
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6764
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !6765

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6766
  %function_decl1 = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !6766
  %disregard_inline_limits = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl1, i32 0, i32 5, !dbg !6766
  %bf.load2 = load i32, i32* %disregard_inline_limits, align 8, !dbg !6766
  %bf.lshr3 = lshr i32 %bf.load2, 26, !dbg !6766
  %bf.clear4 = and i32 %bf.lshr3, 1, !dbg !6766
  %tobool5 = icmp ne i32 %bf.clear4, 0, !dbg !6766
  br i1 %tobool5, label %land.lhs.true6, label %land.end, !dbg !6767

land.lhs.true6:                                   ; preds = %land.lhs.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6768
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !6768
  %tobool7 = icmp ne %struct.function* %add.ptr, null, !dbg !6768
  br i1 %tobool7, label %land.lhs.true8, label %land.end, !dbg !6769

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6770
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6770
  %always_inline_functions_inlined = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 20, !dbg !6771
  %bf.load10 = load i32, i32* %always_inline_functions_inlined, align 8, !dbg !6771
  %bf.lshr11 = lshr i32 %bf.load10, 25, !dbg !6771
  %bf.clear12 = and i32 %bf.lshr11, 1, !dbg !6771
  %tobool13 = icmp ne i32 %bf.clear12, 0, !dbg !6770
  br i1 %tobool13, label %land.end, label %land.rhs, !dbg !6772

land.rhs:                                         ; preds = %land.lhs.true8
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6773
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !6773
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !6773
  %5 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !6773
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.737, i64 0, i64 0), %union.tree_node* %5), !dbg !6774
  %tobool14 = icmp ne %union.tree_node* %call, null, !dbg !6772
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true8, %land.lhs.true6, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true8 ], [ false, %land.lhs.true6 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool14, %land.rhs ], !dbg !6775
  %land.ext = zext i1 %6 to i32, !dbg !6772
  %conv = trunc i32 %land.ext to i8, !dbg !6776
  ret i8 %conv, !dbg !6777
}

declare dso_local %union.tree_node* @call_expr_arglist(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_n(i32 %loc, %union.tree_node* %fndecl, %union.tree_node** %args, i32 %nargs, i8 zeroext %ignore) #0 !dbg !6778 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %union.tree_node**, align 8
  %nargs.addr = alloca i32, align 4
  %ignore.addr = alloca i8, align 1
  %ret = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6781, metadata !DIExpression()), !dbg !6782
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6783, metadata !DIExpression()), !dbg !6784
  store %union.tree_node** %args, %union.tree_node*** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %args.addr, metadata !6785, metadata !DIExpression()), !dbg !6786
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !6787, metadata !DIExpression()), !dbg !6788
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !6789, metadata !DIExpression()), !dbg !6790
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6791, metadata !DIExpression()), !dbg !6792
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !6792
  %0 = load i32, i32* %nargs.addr, align 4, !dbg !6793
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb7
    i32 4, label %sw.bb12
  ], !dbg !6794

sw.bb:                                            ; preds = %entry
  %1 = load i32, i32* %loc.addr, align 4, !dbg !6795
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6797
  %3 = load i8, i8* %ignore.addr, align 1, !dbg !6798
  %call = call %union.tree_node* @fold_builtin_0(i32 %1, %union.tree_node* %2, i8 zeroext %3), !dbg !6799
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !6800
  br label %sw.epilog, !dbg !6801

sw.bb1:                                           ; preds = %entry
  %4 = load i32, i32* %loc.addr, align 4, !dbg !6802
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6803
  %6 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6804
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 0, !dbg !6804
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6804
  %8 = load i8, i8* %ignore.addr, align 1, !dbg !6805
  %call2 = call %union.tree_node* @fold_builtin_1(i32 %4, %union.tree_node* %5, %union.tree_node* %7, i8 zeroext %8), !dbg !6806
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !6807
  br label %sw.epilog, !dbg !6808

sw.bb3:                                           ; preds = %entry
  %9 = load i32, i32* %loc.addr, align 4, !dbg !6809
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6810
  %11 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6811
  %arrayidx4 = getelementptr inbounds %union.tree_node*, %union.tree_node** %11, i64 0, !dbg !6811
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !6811
  %13 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6812
  %arrayidx5 = getelementptr inbounds %union.tree_node*, %union.tree_node** %13, i64 1, !dbg !6812
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !6812
  %15 = load i8, i8* %ignore.addr, align 1, !dbg !6813
  %call6 = call %union.tree_node* @fold_builtin_2(i32 %9, %union.tree_node* %10, %union.tree_node* %12, %union.tree_node* %14, i8 zeroext %15), !dbg !6814
  store %union.tree_node* %call6, %union.tree_node** %ret, align 8, !dbg !6815
  br label %sw.epilog, !dbg !6816

sw.bb7:                                           ; preds = %entry
  %16 = load i32, i32* %loc.addr, align 4, !dbg !6817
  %17 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6818
  %18 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6819
  %arrayidx8 = getelementptr inbounds %union.tree_node*, %union.tree_node** %18, i64 0, !dbg !6819
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !6819
  %20 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6820
  %arrayidx9 = getelementptr inbounds %union.tree_node*, %union.tree_node** %20, i64 1, !dbg !6820
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !6820
  %22 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6821
  %arrayidx10 = getelementptr inbounds %union.tree_node*, %union.tree_node** %22, i64 2, !dbg !6821
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !6821
  %24 = load i8, i8* %ignore.addr, align 1, !dbg !6822
  %call11 = call %union.tree_node* @fold_builtin_3(i32 %16, %union.tree_node* %17, %union.tree_node* %19, %union.tree_node* %21, %union.tree_node* %23, i8 zeroext %24), !dbg !6823
  store %union.tree_node* %call11, %union.tree_node** %ret, align 8, !dbg !6824
  br label %sw.epilog, !dbg !6825

sw.bb12:                                          ; preds = %entry
  %25 = load i32, i32* %loc.addr, align 4, !dbg !6826
  %26 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6827
  %27 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6828
  %arrayidx13 = getelementptr inbounds %union.tree_node*, %union.tree_node** %27, i64 0, !dbg !6828
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !6828
  %29 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6829
  %arrayidx14 = getelementptr inbounds %union.tree_node*, %union.tree_node** %29, i64 1, !dbg !6829
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !6829
  %31 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6830
  %arrayidx15 = getelementptr inbounds %union.tree_node*, %union.tree_node** %31, i64 2, !dbg !6830
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !6830
  %33 = load %union.tree_node**, %union.tree_node*** %args.addr, align 8, !dbg !6831
  %arrayidx16 = getelementptr inbounds %union.tree_node*, %union.tree_node** %33, i64 3, !dbg !6831
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !6831
  %35 = load i8, i8* %ignore.addr, align 1, !dbg !6832
  %call17 = call %union.tree_node* @fold_builtin_4(i32 %25, %union.tree_node* %26, %union.tree_node* %28, %union.tree_node* %30, %union.tree_node* %32, %union.tree_node* %34, i8 zeroext %35), !dbg !6833
  store %union.tree_node* %call17, %union.tree_node** %ret, align 8, !dbg !6834
  br label %sw.epilog, !dbg !6835

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6836

sw.epilog:                                        ; preds = %sw.default, %sw.bb12, %sw.bb7, %sw.bb3, %sw.bb1, %sw.bb
  %36 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6837
  %tobool = icmp ne %union.tree_node* %36, null, !dbg !6837
  br i1 %tobool, label %if.then, label %if.end, !dbg !6839

if.then:                                          ; preds = %sw.epilog
  %37 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6840
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !6840
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6840
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6840
  %39 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6840
  %call18 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %38, %union.tree_node* %39), !dbg !6840
  store %union.tree_node* %call18, %union.tree_node** %ret, align 8, !dbg !6842
  %40 = load i32, i32* %loc.addr, align 4, !dbg !6843
  %41 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6843
  %exp = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !6843
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !6843
  store i32 %40, i32* %locus, align 8, !dbg !6843
  %42 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6844
  %base = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6844
  %43 = bitcast %struct.tree_base* %base to i64*, !dbg !6844
  %bf.load = load i64, i64* %43, align 8, !dbg !6845
  %bf.clear = and i64 %bf.load, -8388609, !dbg !6845
  %bf.set = or i64 %bf.clear, 8388608, !dbg !6845
  store i64 %bf.set, i64* %43, align 8, !dbg !6845
  %44 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6846
  store %union.tree_node* %44, %union.tree_node** %retval, align 8, !dbg !6847
  br label %return, !dbg !6847

if.end:                                           ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6848
  br label %return, !dbg !6848

return:                                           ; preds = %if.end, %if.then
  %45 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6849
  ret %union.tree_node* %45, !dbg !6849
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_varargs(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %exp, i8 zeroext %ignore) #0 !dbg !6850 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode = alloca i32, align 4
  %ret = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6853, metadata !DIExpression()), !dbg !6854
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6855, metadata !DIExpression()), !dbg !6856
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6857, metadata !DIExpression()), !dbg !6858
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !6859, metadata !DIExpression()), !dbg !6860
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !6861, metadata !DIExpression()), !dbg !6862
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6863
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6863
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6863
  %bf.load = load i32, i32* %function_code, align 8, !dbg !6863
  %bf.clear = and i32 %bf.load, 2047, !dbg !6863
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !6862
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6864, metadata !DIExpression()), !dbg !6865
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !6865
  %1 = load i32, i32* %fcode, align 4, !dbg !6866
  switch i32 %1, label %sw.default [
    i32 539, label %sw.bb
    i32 541, label %sw.bb
    i32 538, label %sw.bb1
    i32 540, label %sw.bb1
    i32 466, label %sw.bb3
  ], !dbg !6867

sw.bb:                                            ; preds = %entry, %entry
  %2 = load i32, i32* %loc.addr, align 4, !dbg !6868
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6870
  %4 = load i32, i32* %fcode, align 4, !dbg !6871
  %call = call %union.tree_node* @fold_builtin_sprintf_chk(i32 %2, %union.tree_node* %3, i32 %4), !dbg !6872
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !6873
  br label %sw.epilog, !dbg !6874

sw.bb1:                                           ; preds = %entry, %entry
  %5 = load i32, i32* %loc.addr, align 4, !dbg !6875
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6876
  %7 = load i32, i32* %fcode, align 4, !dbg !6877
  %call2 = call %union.tree_node* @fold_builtin_snprintf_chk(i32 %5, %union.tree_node* %6, %union.tree_node* null, i32 %7), !dbg !6878
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !6879
  br label %sw.epilog, !dbg !6880

sw.bb3:                                           ; preds = %entry
  %8 = load i32, i32* %loc.addr, align 4, !dbg !6881
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6882
  %call4 = call %union.tree_node* @fold_builtin_fpclassify(i32 %8, %union.tree_node* %9), !dbg !6883
  store %union.tree_node* %call4, %union.tree_node** %ret, align 8, !dbg !6884
  br label %sw.epilog, !dbg !6885

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6886

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb1, %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6887
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !6887
  br i1 %tobool, label %if.then, label %if.end, !dbg !6889

if.then:                                          ; preds = %sw.epilog
  %11 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6890
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6890
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6890
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6890
  %13 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6890
  %call5 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %12, %union.tree_node* %13), !dbg !6890
  store %union.tree_node* %call5, %union.tree_node** %ret, align 8, !dbg !6892
  %14 = load i32, i32* %loc.addr, align 4, !dbg !6893
  %15 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6893
  %exp6 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !6893
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 1, !dbg !6893
  store i32 %14, i32* %locus, align 8, !dbg !6893
  %16 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6894
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6894
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !6894
  %bf.load7 = load i64, i64* %17, align 8, !dbg !6895
  %bf.clear8 = and i64 %bf.load7, -8388609, !dbg !6895
  %bf.set = or i64 %bf.clear8, 8388608, !dbg !6895
  store i64 %bf.set, i64* %17, align 8, !dbg !6895
  %18 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6896
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !6897
  br label %return, !dbg !6897

if.end:                                           ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6898
  br label %return, !dbg !6898

return:                                           ; preds = %if.end, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6899
  ret %union.tree_node* %19, !dbg !6899
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_function_call_expr(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arglist) #0 !dbg !6900 {
entry:
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arglist.addr = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %n = alloca i32, align 4
  %argarray = alloca %union.tree_node**, align 8
  %i = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6903, metadata !DIExpression()), !dbg !6904
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6905, metadata !DIExpression()), !dbg !6906
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arglist.addr, metadata !6907, metadata !DIExpression()), !dbg !6908
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !6909, metadata !DIExpression()), !dbg !6910
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6911
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6911
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6911
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6911
  store %union.tree_node* %1, %union.tree_node** %fntype, align 8, !dbg !6910
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6912, metadata !DIExpression()), !dbg !6913
  %2 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6914
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %2), !dbg !6914
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6914
  %call1 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %call, %union.tree_node* %3), !dbg !6914
  store %union.tree_node* %call1, %union.tree_node** %fn, align 8, !dbg !6913
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6915, metadata !DIExpression()), !dbg !6916
  %4 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8, !dbg !6917
  %call2 = call i32 @list_length(%union.tree_node* %4), !dbg !6918
  store i32 %call2, i32* %n, align 4, !dbg !6916
  call void @llvm.dbg.declare(metadata %union.tree_node*** %argarray, metadata !6919, metadata !DIExpression()), !dbg !6920
  %5 = load i32, i32* %n, align 4, !dbg !6921
  %conv = sext i32 %5 to i64, !dbg !6921
  %mul = mul i64 %conv, 8, !dbg !6921
  %6 = alloca i8, i64 %mul, align 16, !dbg !6921
  %7 = bitcast i8* %6 to %union.tree_node**, !dbg !6922
  store %union.tree_node** %7, %union.tree_node*** %argarray, align 8, !dbg !6920
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6923, metadata !DIExpression()), !dbg !6924
  store i32 0, i32* %i, align 4, !dbg !6925
  br label %for.cond, !dbg !6927

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !6928
  %9 = load i32, i32* %n, align 4, !dbg !6930
  %cmp = icmp slt i32 %8, %9, !dbg !6931
  br i1 %cmp, label %for.body, label %for.end, !dbg !6932

for.body:                                         ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8, !dbg !6933
  %list = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !6933
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6933
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6933
  %12 = load %union.tree_node**, %union.tree_node*** %argarray, align 8, !dbg !6934
  %13 = load i32, i32* %i, align 4, !dbg !6935
  %idxprom = sext i32 %13 to i64, !dbg !6934
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %12, i64 %idxprom, !dbg !6934
  store %union.tree_node* %11, %union.tree_node** %arrayidx, align 8, !dbg !6936
  br label %for.inc, !dbg !6934

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !6937
  %inc = add nsw i32 %14, 1, !dbg !6937
  store i32 %inc, i32* %i, align 4, !dbg !6937
  %15 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8, !dbg !6938
  %common4 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6938
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1, !dbg !6938
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6938
  store %union.tree_node* %16, %union.tree_node** %arglist.addr, align 8, !dbg !6939
  br label %for.cond, !dbg !6940, !llvm.loop !6941

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %loc.addr, align 4, !dbg !6943
  %18 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6944
  %common5 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !6944
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !6944
  %19 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !6944
  %20 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6945
  %21 = load i32, i32* %n, align 4, !dbg !6946
  %22 = load %union.tree_node**, %union.tree_node*** %argarray, align 8, !dbg !6947
  %call7 = call %union.tree_node* @fold_builtin_call_array(i32 %17, %union.tree_node* %19, %union.tree_node* %20, i32 %21, %union.tree_node** %22), !dbg !6948
  ret %union.tree_node* %call7, !dbg !6949
}

declare dso_local i32 @list_length(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_call_array(i32 %loc, %union.tree_node* %type, %union.tree_node* %fn, i32 %n, %union.tree_node** %argarray) #0 !dbg !6950 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  %n.addr = alloca i32, align 4
  %argarray.addr = alloca %union.tree_node**, align 8
  %ret = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %exp = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fndecl2 = alloca %union.tree_node*, align 8
  %arglist = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6953, metadata !DIExpression()), !dbg !6954
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6955, metadata !DIExpression()), !dbg !6956
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !6957, metadata !DIExpression()), !dbg !6958
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  store %union.tree_node** %argarray, %union.tree_node*** %argarray.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %argarray.addr, metadata !6961, metadata !DIExpression()), !dbg !6962
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6963, metadata !DIExpression()), !dbg !6964
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !6964
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6965, metadata !DIExpression()), !dbg !6966
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !6967, metadata !DIExpression()), !dbg !6968
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6969
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6969
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6969
  %bf.load = load i64, i64* %1, align 8, !dbg !6969
  %bf.clear = and i64 %bf.load, 65535, !dbg !6969
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6969
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6971
  br i1 %cmp, label %if.then, label %if.end78, !dbg !6972

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6973, metadata !DIExpression()), !dbg !6975
  %2 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6976
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6976
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !6976
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6976
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6976
  store %union.tree_node* %3, %union.tree_node** %fndecl, align 8, !dbg !6975
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6977
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6977
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6977
  %bf.load3 = load i64, i64* %5, align 8, !dbg !6977
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6977
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6977
  %cmp6 = icmp eq i32 %bf.cast5, 29, !dbg !6979
  br i1 %cmp6, label %land.lhs.true, label %if.end77, !dbg !6980

land.lhs.true:                                    ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6981
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !6981
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6981
  %bf.load7 = load i32, i32* %built_in_class, align 8, !dbg !6981
  %bf.lshr = lshr i32 %bf.load7, 11, !dbg !6981
  %bf.clear8 = and i32 %bf.lshr, 3, !dbg !6981
  %cmp9 = icmp ne i32 %bf.clear8, 0, !dbg !6981
  br i1 %cmp9, label %if.then10, label %if.end77, !dbg !6982

if.then10:                                        ; preds = %land.lhs.true
  %7 = load i32, i32* %n.addr, align 4, !dbg !6983
  %tobool = icmp ne i32 %7, 0, !dbg !6983
  br i1 %tobool, label %land.lhs.true11, label %if.end43, !dbg !6986

land.lhs.true11:                                  ; preds = %if.then10
  %8 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !6987
  %9 = load i32, i32* %n.addr, align 4, !dbg !6987
  %sub = sub nsw i32 %9, 1, !dbg !6987
  %idxprom = sext i32 %sub to i64, !dbg !6987
  %arrayidx12 = getelementptr inbounds %union.tree_node*, %union.tree_node** %8, i64 %idxprom, !dbg !6987
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6987
  %base13 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6987
  %11 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6987
  %bf.load14 = load i64, i64* %11, align 8, !dbg !6987
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6987
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6987
  %cmp17 = icmp eq i32 %bf.cast16, 59, !dbg !6988
  br i1 %cmp17, label %if.then18, label %if.end43, !dbg !6989

if.then18:                                        ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl2, metadata !6990, metadata !DIExpression()), !dbg !6992
  %12 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !6993
  %13 = load i32, i32* %n.addr, align 4, !dbg !6994
  %sub19 = sub nsw i32 %13, 1, !dbg !6995
  %idxprom20 = sext i32 %sub19 to i64, !dbg !6993
  %arrayidx21 = getelementptr inbounds %union.tree_node*, %union.tree_node** %12, i64 %idxprom20, !dbg !6993
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !6993
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %14), !dbg !6996
  store %union.tree_node* %call, %union.tree_node** %fndecl2, align 8, !dbg !6992
  %15 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !6997
  %tobool22 = icmp ne %union.tree_node* %15, null, !dbg !6997
  br i1 %tobool22, label %land.lhs.true23, label %if.end, !dbg !6999

land.lhs.true23:                                  ; preds = %if.then18
  %16 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !7000
  %base24 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7000
  %17 = bitcast %struct.tree_base* %base24 to i64*, !dbg !7000
  %bf.load25 = load i64, i64* %17, align 8, !dbg !7000
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !7000
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7000
  %cmp28 = icmp eq i32 %bf.cast27, 29, !dbg !7001
  br i1 %cmp28, label %land.lhs.true29, label %if.end, !dbg !7002

land.lhs.true29:                                  ; preds = %land.lhs.true23
  %18 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !7003
  %function_decl30 = bitcast %union.tree_node* %18 to %struct.tree_function_decl*, !dbg !7003
  %built_in_class31 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl30, i32 0, i32 5, !dbg !7003
  %bf.load32 = load i32, i32* %built_in_class31, align 8, !dbg !7003
  %bf.lshr33 = lshr i32 %bf.load32, 11, !dbg !7003
  %bf.clear34 = and i32 %bf.lshr33, 3, !dbg !7003
  %cmp35 = icmp eq i32 %bf.clear34, 3, !dbg !7004
  br i1 %cmp35, label %land.lhs.true36, label %if.end, !dbg !7005

land.lhs.true36:                                  ; preds = %land.lhs.true29
  %19 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !7006
  %function_decl37 = bitcast %union.tree_node* %19 to %struct.tree_function_decl*, !dbg !7006
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl37, i32 0, i32 5, !dbg !7006
  %bf.load38 = load i32, i32* %function_code, align 8, !dbg !7006
  %bf.clear39 = and i32 %bf.load38, 2047, !dbg !7006
  %cmp40 = icmp eq i32 %bf.clear39, 516, !dbg !7007
  br i1 %cmp40, label %if.then41, label %if.end, !dbg !7008

if.then41:                                        ; preds = %land.lhs.true36
  %20 = load i32, i32* %loc.addr, align 4, !dbg !7009
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7010
  %22 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7011
  %23 = load i32, i32* %n.addr, align 4, !dbg !7012
  %24 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7013
  %call42 = call %union.tree_node* @build_call_array_loc(i32 %20, %union.tree_node* %21, %union.tree_node* %22, i32 %23, %union.tree_node** %24), !dbg !7014
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !7015
  br label %return, !dbg !7015

if.end:                                           ; preds = %land.lhs.true36, %land.lhs.true29, %land.lhs.true23, %if.then18
  br label %if.end43, !dbg !7016

if.end43:                                         ; preds = %if.end, %land.lhs.true11, %if.then10
  %25 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7017
  %call44 = call zeroext i8 @avoid_folding_inline_builtin(%union.tree_node* %25), !dbg !7019
  %tobool45 = icmp ne i8 %call44, 0, !dbg !7019
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !7020

if.then46:                                        ; preds = %if.end43
  %26 = load i32, i32* %loc.addr, align 4, !dbg !7021
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7022
  %28 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7023
  %29 = load i32, i32* %n.addr, align 4, !dbg !7024
  %30 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7025
  %call47 = call %union.tree_node* @build_call_array_loc(i32 %26, %union.tree_node* %27, %union.tree_node* %28, i32 %29, %union.tree_node** %30), !dbg !7026
  store %union.tree_node* %call47, %union.tree_node** %retval, align 8, !dbg !7027
  br label %return, !dbg !7027

if.end48:                                         ; preds = %if.end43
  %31 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7028
  %function_decl49 = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !7028
  %built_in_class50 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl49, i32 0, i32 5, !dbg !7028
  %bf.load51 = load i32, i32* %built_in_class50, align 8, !dbg !7028
  %bf.lshr52 = lshr i32 %bf.load51, 11, !dbg !7028
  %bf.clear53 = and i32 %bf.lshr52, 3, !dbg !7028
  %cmp54 = icmp eq i32 %bf.clear53, 2, !dbg !7030
  br i1 %cmp54, label %if.then55, label %if.else, !dbg !7031

if.then55:                                        ; preds = %if.end48
  call void @llvm.dbg.declare(metadata %union.tree_node** %arglist, metadata !7032, metadata !DIExpression()), !dbg !7034
  store %union.tree_node* null, %union.tree_node** %arglist, align 8, !dbg !7034
  %32 = load i32, i32* %n.addr, align 4, !dbg !7035
  %sub56 = sub nsw i32 %32, 1, !dbg !7037
  store i32 %sub56, i32* %i, align 4, !dbg !7038
  br label %for.cond, !dbg !7039

for.cond:                                         ; preds = %for.inc, %if.then55
  %33 = load i32, i32* %i, align 4, !dbg !7040
  %cmp57 = icmp sge i32 %33, 0, !dbg !7042
  br i1 %cmp57, label %for.body, label %for.end, !dbg !7043

for.body:                                         ; preds = %for.cond
  %34 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7044
  %35 = load i32, i32* %i, align 4, !dbg !7044
  %idxprom58 = sext i32 %35 to i64, !dbg !7044
  %arrayidx59 = getelementptr inbounds %union.tree_node*, %union.tree_node** %34, i64 %idxprom58, !dbg !7044
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !7044
  %37 = load %union.tree_node*, %union.tree_node** %arglist, align 8, !dbg !7044
  %call60 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %36, %union.tree_node* %37), !dbg !7044
  store %union.tree_node* %call60, %union.tree_node** %arglist, align 8, !dbg !7045
  br label %for.inc, !dbg !7046

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4, !dbg !7047
  %dec = add nsw i32 %38, -1, !dbg !7047
  store i32 %dec, i32* %i, align 4, !dbg !7047
  br label %for.cond, !dbg !7048, !llvm.loop !7049

for.end:                                          ; preds = %for.cond
  %39 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 27), align 8, !dbg !7051
  %40 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7052
  %41 = load %union.tree_node*, %union.tree_node** %arglist, align 8, !dbg !7053
  %call61 = call %union.tree_node* %39(%union.tree_node* %40, %union.tree_node* %41, i8 zeroext 0), !dbg !7054
  store %union.tree_node* %call61, %union.tree_node** %ret, align 8, !dbg !7055
  %42 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7056
  %tobool62 = icmp ne %union.tree_node* %42, null, !dbg !7056
  br i1 %tobool62, label %if.then63, label %if.end64, !dbg !7058

if.then63:                                        ; preds = %for.end
  %43 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7059
  store %union.tree_node* %43, %union.tree_node** %retval, align 8, !dbg !7060
  br label %return, !dbg !7060

if.end64:                                         ; preds = %for.end
  %44 = load i32, i32* %loc.addr, align 4, !dbg !7061
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7062
  %46 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7063
  %47 = load i32, i32* %n.addr, align 4, !dbg !7064
  %48 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7065
  %call65 = call %union.tree_node* @build_call_array_loc(i32 %44, %union.tree_node* %45, %union.tree_node* %46, i32 %47, %union.tree_node** %48), !dbg !7066
  store %union.tree_node* %call65, %union.tree_node** %retval, align 8, !dbg !7067
  br label %return, !dbg !7067

if.else:                                          ; preds = %if.end48
  %49 = load i32, i32* %n.addr, align 4, !dbg !7068
  %cmp66 = icmp sle i32 %49, 4, !dbg !7070
  br i1 %cmp66, label %if.then67, label %if.end72, !dbg !7071

if.then67:                                        ; preds = %if.else
  %50 = load i32, i32* %loc.addr, align 4, !dbg !7072
  %51 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7074
  %52 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7075
  %53 = load i32, i32* %n.addr, align 4, !dbg !7076
  %call68 = call %union.tree_node* @fold_builtin_n(i32 %50, %union.tree_node* %51, %union.tree_node** %52, i32 %53, i8 zeroext 0), !dbg !7077
  store %union.tree_node* %call68, %union.tree_node** %ret, align 8, !dbg !7078
  %54 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7079
  %tobool69 = icmp ne %union.tree_node* %54, null, !dbg !7079
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !7081

if.then70:                                        ; preds = %if.then67
  %55 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7082
  store %union.tree_node* %55, %union.tree_node** %retval, align 8, !dbg !7083
  br label %return, !dbg !7083

if.end71:                                         ; preds = %if.then67
  br label %if.end72, !dbg !7084

if.end72:                                         ; preds = %if.end71, %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72
  %56 = load i32, i32* %loc.addr, align 4, !dbg !7085
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7086
  %58 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7087
  %59 = load i32, i32* %n.addr, align 4, !dbg !7088
  %60 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7089
  %call74 = call %union.tree_node* @build_call_array_loc(i32 %56, %union.tree_node* %57, %union.tree_node* %58, i32 %59, %union.tree_node** %60), !dbg !7090
  store %union.tree_node* %call74, %union.tree_node** %exp, align 8, !dbg !7091
  %61 = load i32, i32* %loc.addr, align 4, !dbg !7092
  %62 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7093
  %63 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !7094
  %call75 = call %union.tree_node* @fold_builtin_varargs(i32 %61, %union.tree_node* %62, %union.tree_node* %63, i8 zeroext 0), !dbg !7095
  store %union.tree_node* %call75, %union.tree_node** %ret, align 8, !dbg !7096
  %64 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7097
  %tobool76 = icmp ne %union.tree_node* %64, null, !dbg !7097
  br i1 %tobool76, label %cond.true, label %cond.false, !dbg !7097

cond.true:                                        ; preds = %if.end73
  %65 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7098
  br label %cond.end, !dbg !7097

cond.false:                                       ; preds = %if.end73
  %66 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !7099
  br label %cond.end, !dbg !7097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %65, %cond.true ], [ %66, %cond.false ], !dbg !7097
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !7100
  br label %return, !dbg !7100

if.end77:                                         ; preds = %land.lhs.true, %if.then
  br label %if.end78, !dbg !7101

if.end78:                                         ; preds = %if.end77, %entry
  %67 = load i32, i32* %loc.addr, align 4, !dbg !7102
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7103
  %69 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7104
  %70 = load i32, i32* %n.addr, align 4, !dbg !7105
  %71 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !7106
  %call79 = call %union.tree_node* @build_call_array_loc(i32 %67, %union.tree_node* %68, %union.tree_node* %69, i32 %70, %union.tree_node** %71), !dbg !7107
  store %union.tree_node* %call79, %union.tree_node** %retval, align 8, !dbg !7108
  br label %return, !dbg !7108

return:                                           ; preds = %if.end78, %cond.end, %if.then70, %if.end64, %if.then63, %if.then46, %if.then41
  %72 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7109
  ret %union.tree_node* %72, !dbg !7109
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

declare dso_local %union.tree_node* @build_call_array_loc(i32, %union.tree_node*, %union.tree_node*, i32, %union.tree_node**) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @validate_gimple_arglist(%union.gimple_statement_d* %call, ...) #0 !dbg !7110 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %res = alloca i8, align 1
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %arg = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7116, metadata !DIExpression()), !dbg !7117
  call void @llvm.dbg.declare(metadata i8* %res, metadata !7118, metadata !DIExpression()), !dbg !7119
  store i8 0, i8* %res, align 1, !dbg !7119
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !7120, metadata !DIExpression()), !dbg !7121
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7122, metadata !DIExpression()), !dbg !7123
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7124, metadata !DIExpression()), !dbg !7125
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7126
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !7126
  call void @llvm.va_start(i8* %arraydecay1), !dbg !7126
  store i64 0, i64* %i, align 8, !dbg !7127
  br label %do.body, !dbg !7128

do.body:                                          ; preds = %do.cond, %entry
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7129
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !7129
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !7129
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !7129
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !7129

vaarg.in_reg:                                     ; preds = %do.body
  %0 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !7129
  %reg_save_area = load i8*, i8** %0, align 16, !dbg !7129
  %1 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !7129
  %2 = bitcast i8* %1 to i32*, !dbg !7129
  %3 = add i32 %gp_offset, 8, !dbg !7129
  store i32 %3, i32* %gp_offset_p, align 16, !dbg !7129
  br label %vaarg.end, !dbg !7129

vaarg.in_mem:                                     ; preds = %do.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !7129
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !7129
  %4 = bitcast i8* %overflow_arg_area to i32*, !dbg !7129
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !7129
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !7129
  br label %vaarg.end, !dbg !7129

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %2, %vaarg.in_reg ], [ %4, %vaarg.in_mem ], !dbg !7129
  %5 = load i32, i32* %vaarg.addr, align 4, !dbg !7129
  store i32 %5, i32* %code, align 4, !dbg !7131
  %6 = load i32, i32* %code, align 4, !dbg !7132
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 19, label %sw.bb3
  ], !dbg !7133

sw.bb:                                            ; preds = %vaarg.end
  store i8 1, i8* %res, align 1, !dbg !7134
  br label %end, !dbg !7136

sw.bb3:                                           ; preds = %vaarg.end
  %7 = load i64, i64* %i, align 8, !dbg !7137
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7138
  %call4 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %8), !dbg !7139
  %conv = zext i32 %call4 to i64, !dbg !7139
  %cmp = icmp eq i64 %7, %conv, !dbg !7140
  %conv5 = zext i1 %cmp to i32, !dbg !7140
  %conv6 = trunc i32 %conv5 to i8, !dbg !7141
  store i8 %conv6, i8* %res, align 1, !dbg !7142
  br label %end, !dbg !7143

sw.default:                                       ; preds = %vaarg.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7144
  %10 = load i64, i64* %i, align 8, !dbg !7145
  %inc = add i64 %10, 1, !dbg !7145
  store i64 %inc, i64* %i, align 8, !dbg !7145
  %conv7 = trunc i64 %10 to i32, !dbg !7146
  %call8 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %9, i32 %conv7), !dbg !7147
  store %union.tree_node* %call8, %union.tree_node** %arg, align 8, !dbg !7148
  %11 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7149
  %12 = load i32, i32* %code, align 4, !dbg !7151
  %call9 = call zeroext i8 @validate_arg(%union.tree_node* %11, i32 %12), !dbg !7152
  %tobool = icmp ne i8 %call9, 0, !dbg !7152
  br i1 %tobool, label %if.end, label %if.then, !dbg !7153

if.then:                                          ; preds = %sw.default
  br label %end, !dbg !7154

if.end:                                           ; preds = %sw.default
  br label %sw.epilog, !dbg !7155

sw.epilog:                                        ; preds = %if.end
  br label %do.cond, !dbg !7156

do.cond:                                          ; preds = %sw.epilog
  br i1 true, label %do.body, label %do.end, !dbg !7156, !llvm.loop !7157

do.end:                                           ; preds = %do.cond
  br label %end, !dbg !7156

end:                                              ; preds = %do.end, %if.then, %sw.bb3, %sw.bb
  call void @llvm.dbg.label(metadata !7159), !dbg !7160
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7161
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !7161
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !7161
  %13 = load i8, i8* %res, align 1, !dbg !7162
  ret i8 %13, !dbg !7163
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7164 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7167, metadata !DIExpression()), !dbg !7168
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !7169, metadata !DIExpression()), !dbg !7170
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7171
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7172
  store i32 %call, i32* %num_ops, align 4, !dbg !7173
  %1 = load i32, i32* %num_ops, align 4, !dbg !7174
  %sub = sub i32 %1, 3, !dbg !7175
  ret i32 %sub, !dbg !7176
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7177 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7180, metadata !DIExpression()), !dbg !7181
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7184
  %1 = load i32, i32* %index.addr, align 4, !dbg !7185
  %add = add i32 %1, 3, !dbg !7186
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !7187
  ret %union.tree_node* %call, !dbg !7188
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @validate_arglist(%union.tree_node* %callexpr, ...) #0 !dbg !7189 {
entry:
  %callexpr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %res = alloca i8, align 1
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %iter = alloca %struct.const_call_expr_arg_iterator_d, align 8
  %arg = alloca %union.tree_node*, align 8
  store %union.tree_node* %callexpr, %union.tree_node** %callexpr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %callexpr.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7194, metadata !DIExpression()), !dbg !7195
  call void @llvm.dbg.declare(metadata i8* %res, metadata !7196, metadata !DIExpression()), !dbg !7197
  store i8 0, i8* %res, align 1, !dbg !7197
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !7198, metadata !DIExpression()), !dbg !7199
  call void @llvm.dbg.declare(metadata %struct.const_call_expr_arg_iterator_d* %iter, metadata !7200, metadata !DIExpression()), !dbg !7201
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7202, metadata !DIExpression()), !dbg !7203
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7204
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !7204
  call void @llvm.va_start(i8* %arraydecay1), !dbg !7204
  %0 = load %union.tree_node*, %union.tree_node** %callexpr.addr, align 8, !dbg !7205
  call void @init_const_call_expr_arg_iterator(%union.tree_node* %0, %struct.const_call_expr_arg_iterator_d* %iter), !dbg !7206
  br label %do.body, !dbg !7207

do.body:                                          ; preds = %do.cond, %entry
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7208
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !7208
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !7208
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !7208
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !7208

vaarg.in_reg:                                     ; preds = %do.body
  %1 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !7208
  %reg_save_area = load i8*, i8** %1, align 16, !dbg !7208
  %2 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !7208
  %3 = bitcast i8* %2 to i32*, !dbg !7208
  %4 = add i32 %gp_offset, 8, !dbg !7208
  store i32 %4, i32* %gp_offset_p, align 16, !dbg !7208
  br label %vaarg.end, !dbg !7208

vaarg.in_mem:                                     ; preds = %do.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !7208
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !7208
  %5 = bitcast i8* %overflow_arg_area to i32*, !dbg !7208
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !7208
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !7208
  br label %vaarg.end, !dbg !7208

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %3, %vaarg.in_reg ], [ %5, %vaarg.in_mem ], !dbg !7208
  %6 = load i32, i32* %vaarg.addr, align 4, !dbg !7208
  store i32 %6, i32* %code, align 4, !dbg !7210
  %7 = load i32, i32* %code, align 4, !dbg !7211
  switch i32 %7, label %sw.default [
    i32 0, label %sw.bb
    i32 19, label %sw.bb3
  ], !dbg !7212

sw.bb:                                            ; preds = %vaarg.end
  store i8 1, i8* %res, align 1, !dbg !7213
  br label %end, !dbg !7215

sw.bb3:                                           ; preds = %vaarg.end
  %call = call zeroext i8 @more_const_call_expr_args_p(%struct.const_call_expr_arg_iterator_d* %iter), !dbg !7216
  %tobool = icmp ne i8 %call, 0, !dbg !7217
  %lnot = xor i1 %tobool, true, !dbg !7217
  %lnot.ext = zext i1 %lnot to i32, !dbg !7217
  %conv = trunc i32 %lnot.ext to i8, !dbg !7217
  store i8 %conv, i8* %res, align 1, !dbg !7218
  br label %end, !dbg !7219

sw.default:                                       ; preds = %vaarg.end
  %call4 = call %union.tree_node* @next_const_call_expr_arg(%struct.const_call_expr_arg_iterator_d* %iter), !dbg !7220
  store %union.tree_node* %call4, %union.tree_node** %arg, align 8, !dbg !7221
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7222
  %9 = load i32, i32* %code, align 4, !dbg !7224
  %call5 = call zeroext i8 @validate_arg(%union.tree_node* %8, i32 %9), !dbg !7225
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7225
  br i1 %tobool6, label %if.end, label %if.then, !dbg !7226

if.then:                                          ; preds = %sw.default
  br label %end, !dbg !7227

if.end:                                           ; preds = %sw.default
  br label %sw.epilog, !dbg !7228

sw.epilog:                                        ; preds = %if.end
  br label %do.cond, !dbg !7229

do.cond:                                          ; preds = %sw.epilog
  br i1 true, label %do.body, label %do.end, !dbg !7229, !llvm.loop !7230

do.end:                                           ; preds = %do.cond
  br label %end, !dbg !7229

end:                                              ; preds = %do.end, %if.then, %sw.bb3, %sw.bb
  call void @llvm.dbg.label(metadata !7232), !dbg !7233
  %arraydecay7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !7234
  %arraydecay78 = bitcast %struct.__va_list_tag* %arraydecay7 to i8*, !dbg !7234
  call void @llvm.va_end(i8* %arraydecay78), !dbg !7234
  %10 = load i8, i8* %res, align 1, !dbg !7235
  ret i8 %10, !dbg !7236
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @default_expand_builtin(%union.tree_node* %exp, %struct.rtx_def* %target, %struct.rtx_def* %subtarget, i32 %mode, i32 %ignore) #0 !dbg !7237 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %subtarget.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %ignore.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7238, metadata !DIExpression()), !dbg !7239
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7240, metadata !DIExpression()), !dbg !7241
  store %struct.rtx_def* %subtarget, %struct.rtx_def** %subtarget.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget.addr, metadata !7242, metadata !DIExpression()), !dbg !7243
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7244, metadata !DIExpression()), !dbg !7245
  store i32 %ignore, i32* %ignore.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ignore.addr, metadata !7246, metadata !DIExpression()), !dbg !7247
  ret %struct.rtx_def* null, !dbg !7248
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_fputs(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, i8 zeroext %ignore, i8 zeroext %unlocked, %union.tree_node* %len) #0 !dbg !7249 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %unlocked.addr = alloca i8, align 1
  %len.addr = alloca %union.tree_node*, align 8
  %fn_fputc = alloca %union.tree_node*, align 8
  %fn_fwrite = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7252, metadata !DIExpression()), !dbg !7253
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !7254, metadata !DIExpression()), !dbg !7255
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !7256, metadata !DIExpression()), !dbg !7257
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !7258, metadata !DIExpression()), !dbg !7259
  store i8 %unlocked, i8* %unlocked.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unlocked.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !7262, metadata !DIExpression()), !dbg !7263
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_fputc, metadata !7264, metadata !DIExpression()), !dbg !7265
  %0 = load i8, i8* %unlocked.addr, align 1, !dbg !7266
  %conv = zext i8 %0 to i32, !dbg !7266
  %tobool = icmp ne i32 %conv, 0, !dbg !7266
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7266

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 359), align 8, !dbg !7267
  br label %cond.end, !dbg !7266

cond.false:                                       ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 358), align 16, !dbg !7268
  br label %cond.end, !dbg !7266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !7266
  store %union.tree_node* %cond, %union.tree_node** %fn_fputc, align 8, !dbg !7265
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_fwrite, metadata !7269, metadata !DIExpression()), !dbg !7270
  %3 = load i8, i8* %unlocked.addr, align 1, !dbg !7271
  %conv1 = zext i8 %3 to i32, !dbg !7271
  %tobool2 = icmp ne i32 %conv1, 0, !dbg !7271
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !7271

cond.true3:                                       ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 364), align 16, !dbg !7272
  br label %cond.end5, !dbg !7271

cond.false4:                                      ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 363), align 8, !dbg !7273
  br label %cond.end5, !dbg !7271

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %union.tree_node* [ %4, %cond.true3 ], [ %5, %cond.false4 ], !dbg !7271
  store %union.tree_node* %cond6, %union.tree_node** %fn_fwrite, align 8, !dbg !7270
  %6 = load i8, i8* %ignore.addr, align 1, !dbg !7274
  %tobool7 = icmp ne i8 %6, 0, !dbg !7274
  br i1 %tobool7, label %if.end, label %if.then, !dbg !7276

if.then:                                          ; preds = %cond.end5
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7277
  br label %return, !dbg !7277

if.end:                                           ; preds = %cond.end5
  %7 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !7278
  %call = call zeroext i8 @validate_arg(%union.tree_node* %7, i32 10), !dbg !7280
  %tobool8 = icmp ne i8 %call, 0, !dbg !7280
  br i1 %tobool8, label %lor.lhs.false, label %if.then11, !dbg !7281

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !7282
  %call9 = call zeroext i8 @validate_arg(%union.tree_node* %8, i32 10), !dbg !7283
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7283
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !7284

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7285
  br label %return, !dbg !7285

if.end12:                                         ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7286
  %tobool13 = icmp ne %union.tree_node* %9, null, !dbg !7286
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !7288

if.then14:                                        ; preds = %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !7289
  %call15 = call %union.tree_node* @c_strlen(%union.tree_node* %10, i32 0), !dbg !7290
  store %union.tree_node* %call15, %union.tree_node** %len.addr, align 8, !dbg !7291
  br label %if.end16, !dbg !7292

if.end16:                                         ; preds = %if.then14, %if.end12
  %11 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7293
  %tobool17 = icmp ne %union.tree_node* %11, null, !dbg !7293
  br i1 %tobool17, label %lor.lhs.false18, label %if.then20, !dbg !7295

lor.lhs.false18:                                  ; preds = %if.end16
  %12 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7296
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7296
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !7296
  %bf.load = load i64, i64* %13, align 8, !dbg !7296
  %bf.clear = and i64 %bf.load, 65535, !dbg !7296
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7296
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !7297
  br i1 %cmp, label %if.then20, label %if.end21, !dbg !7298

if.then20:                                        ; preds = %lor.lhs.false18, %if.end16
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7299
  br label %return, !dbg !7299

if.end21:                                         ; preds = %lor.lhs.false18
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7300
  %call22 = call i32 @compare_tree_int(%union.tree_node* %14, i64 1), !dbg !7301
  switch i32 %call22, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb24
    i32 1, label %sw.bb35
  ], !dbg !7302

sw.bb:                                            ; preds = %if.end21
  %15 = load i32, i32* %loc.addr, align 4, !dbg !7303
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7305
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7306
  %18 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !7307
  %call23 = call %union.tree_node* @omit_one_operand_loc(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !7308
  store %union.tree_node* %call23, %union.tree_node** %retval, align 8, !dbg !7309
  br label %return, !dbg !7309

sw.bb24:                                          ; preds = %if.end21
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7310, metadata !DIExpression()), !dbg !7312
  %19 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !7313
  %call25 = call i8* @c_getstr(%union.tree_node* %19), !dbg !7314
  store i8* %call25, i8** %p, align 8, !dbg !7312
  %20 = load i8*, i8** %p, align 8, !dbg !7315
  %cmp26 = icmp ne i8* %20, null, !dbg !7317
  br i1 %cmp26, label %if.then28, label %if.end34, !dbg !7318

if.then28:                                        ; preds = %sw.bb24
  %21 = load %union.tree_node*, %union.tree_node** %fn_fputc, align 8, !dbg !7319
  %tobool29 = icmp ne %union.tree_node* %21, null, !dbg !7319
  br i1 %tobool29, label %if.then30, label %if.else, !dbg !7322

if.then30:                                        ; preds = %if.then28
  %22 = load i32, i32* %loc.addr, align 4, !dbg !7323
  %23 = load %union.tree_node*, %union.tree_node** %fn_fputc, align 8, !dbg !7324
  %24 = load i8*, i8** %p, align 8, !dbg !7325
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 0, !dbg !7325
  %25 = load i8, i8* %arrayidx, align 1, !dbg !7325
  %conv31 = sext i8 %25 to i64, !dbg !7325
  %call32 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv31), !dbg !7326
  %26 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !7327
  %call33 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %22, %union.tree_node* %23, i32 2, %union.tree_node* %call32, %union.tree_node* %26), !dbg !7328
  store %union.tree_node* %call33, %union.tree_node** %retval, align 8, !dbg !7329
  br label %return, !dbg !7329

if.else:                                          ; preds = %if.then28
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7330
  br label %return, !dbg !7330

if.end34:                                         ; preds = %sw.bb24
  br label %sw.bb35, !dbg !7331

sw.bb35:                                          ; preds = %if.end21, %if.end34
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7332
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !7332
  %call36 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !7335
  %tobool37 = icmp ne i8 %call36, 0, !dbg !7335
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !7336

if.then38:                                        ; preds = %sw.bb35
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7337
  br label %return, !dbg !7337

if.end39:                                         ; preds = %sw.bb35
  %28 = load %union.tree_node*, %union.tree_node** %fn_fwrite, align 8, !dbg !7338
  %tobool40 = icmp ne %union.tree_node* %28, null, !dbg !7338
  br i1 %tobool40, label %if.then41, label %if.else43, !dbg !7340

if.then41:                                        ; preds = %if.end39
  %29 = load i32, i32* %loc.addr, align 4, !dbg !7341
  %30 = load %union.tree_node*, %union.tree_node** %fn_fwrite, align 8, !dbg !7342
  %31 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !7343
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !dbg !7344
  %33 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7345
  %34 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !7346
  %call42 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %29, %union.tree_node* %30, i32 4, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !7347
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !7348
  br label %return, !dbg !7348

if.else43:                                        ; preds = %if.end39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7349
  br label %return, !dbg !7349

sw.default:                                       ; preds = %if.end21
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 11645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !7350
  br label %sw.epilog, !dbg !7351

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7352
  br label %return, !dbg !7352

return:                                           ; preds = %sw.epilog, %if.else43, %if.then41, %if.then38, %if.else, %if.then30, %sw.bb, %if.then20, %if.then11, %if.then
  %35 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7353
  ret %union.tree_node* %35, !dbg !7353
}

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @c_getstr(%union.tree_node* %src) #0 !dbg !7354 {
entry:
  %retval = alloca i8*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %offset_node = alloca %union.tree_node*, align 8
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !7357, metadata !DIExpression()), !dbg !7358
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset_node, metadata !7359, metadata !DIExpression()), !dbg !7360
  %0 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7361
  %call = call %union.tree_node* @string_constant(%union.tree_node* %0, %union.tree_node** %offset_node), !dbg !7362
  store %union.tree_node* %call, %union.tree_node** %src.addr, align 8, !dbg !7363
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7364
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !7366
  br i1 %cmp, label %if.then, label %if.end, !dbg !7367

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !7368
  br label %return, !dbg !7368

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !7369
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !7371
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7372

if.then2:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7373
  %string = bitcast %union.tree_node* %3 to %struct.tree_string*, !dbg !7373
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !7373
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !7373
  store i8* %arraydecay, i8** %retval, align 8, !dbg !7374
  br label %return, !dbg !7374

if.else:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !7375
  %call3 = call i32 @host_integerp(%union.tree_node* %4, i32 1), !dbg !7377
  %tobool = icmp ne i32 %call3, 0, !dbg !7377
  br i1 %tobool, label %lor.lhs.false, label %if.then8, !dbg !7378

lor.lhs.false:                                    ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !7379
  %6 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7380
  %string4 = bitcast %union.tree_node* %6 to %struct.tree_string*, !dbg !7380
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string4, i32 0, i32 1, !dbg !7380
  %7 = load i32, i32* %length, align 8, !dbg !7380
  %sub = sub nsw i32 %7, 1, !dbg !7381
  %conv = sext i32 %sub to i64, !dbg !7380
  %call5 = call i32 @compare_tree_int(%union.tree_node* %5, i64 %conv), !dbg !7382
  %cmp6 = icmp sgt i32 %call5, 0, !dbg !7383
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !7384

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  store i8* null, i8** %retval, align 8, !dbg !7385
  br label %return, !dbg !7385

if.end9:                                          ; preds = %lor.lhs.false
  br label %if.end10

if.end10:                                         ; preds = %if.end9
  %8 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7386
  %string11 = bitcast %union.tree_node* %8 to %struct.tree_string*, !dbg !7386
  %str12 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string11, i32 0, i32 2, !dbg !7386
  %arraydecay13 = getelementptr inbounds [1 x i8], [1 x i8]* %str12, i64 0, i64 0, !dbg !7386
  %9 = load %union.tree_node*, %union.tree_node** %offset_node, align 8, !dbg !7387
  %call14 = call i64 @tree_low_cst(%union.tree_node* %9, i32 1), !dbg !7388
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay13, i64 %call14, !dbg !7389
  store i8* %add.ptr, i8** %retval, align 8, !dbg !7390
  br label %return, !dbg !7390

return:                                           ; preds = %if.end10, %if.then8, %if.then2, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !7391
  ret i8* %10, !dbg !7391
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @fold_builtin_next_arg(%union.tree_node* %exp, i8 zeroext %va_start_p) #0 !dbg !7392 {
entry:
  %retval = alloca i8, align 1
  %exp.addr = alloca %union.tree_node*, align 8
  %va_start_p.addr = alloca i8, align 1
  %fntype = alloca %union.tree_node*, align 8
  %nargs = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %last_parm = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7395, metadata !DIExpression()), !dbg !7396
  store i8 %va_start_p, i8* %va_start_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %va_start_p.addr, metadata !7397, metadata !DIExpression()), !dbg !7398
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !7399, metadata !DIExpression()), !dbg !7400
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7401
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7401
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7401
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7401
  store %union.tree_node* %1, %union.tree_node** %fntype, align 8, !dbg !7400
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !7402, metadata !DIExpression()), !dbg !7403
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7404
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7404
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7404
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7404
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7404
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !7404
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7404
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !7404
  %4 = load i64, i64* %low, align 8, !dbg !7404
  %conv = trunc i64 %4 to i32, !dbg !7404
  %sub = sub nsw i32 %conv, 3, !dbg !7404
  store i32 %sub, i32* %nargs, align 4, !dbg !7403
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7405, metadata !DIExpression()), !dbg !7406
  %5 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !7407
  %type3 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !7407
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1, !dbg !7407
  %6 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7407
  %cmp = icmp eq %union.tree_node* %6, null, !dbg !7409
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7410

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !7411
  %type5 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !7411
  %values6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 1, !dbg !7411
  %8 = load %union.tree_node*, %union.tree_node** %values6, align 8, !dbg !7411
  %call = call %union.tree_node* @tree_last(%union.tree_node* %8), !dbg !7411
  %list = bitcast %union.tree_node* %call to %struct.tree_list*, !dbg !7411
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !7411
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7411
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7412
  %cmp7 = icmp eq %union.tree_node* %9, %10, !dbg !7413
  br i1 %cmp7, label %if.then, label %if.end, !dbg !7414

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.726, i64 0, i64 0)), !dbg !7415
  store i8 1, i8* %retval, align 1, !dbg !7417
  br label %return, !dbg !7417

if.end:                                           ; preds = %lor.lhs.false
  %11 = load i8, i8* %va_start_p.addr, align 1, !dbg !7418
  %tobool = icmp ne i8 %11, 0, !dbg !7418
  br i1 %tobool, label %if.then9, label %if.else, !dbg !7420

if.then9:                                         ; preds = %if.end
  %12 = load i8, i8* %va_start_p.addr, align 1, !dbg !7421
  %conv10 = zext i8 %12 to i32, !dbg !7421
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !7421
  br i1 %tobool11, label %land.lhs.true, label %if.end15, !dbg !7424

land.lhs.true:                                    ; preds = %if.then9
  %13 = load i32, i32* %nargs, align 4, !dbg !7425
  %cmp12 = icmp ne i32 %13, 2, !dbg !7426
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !7427

if.then14:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.727, i64 0, i64 0)), !dbg !7428
  store i8 1, i8* %retval, align 1, !dbg !7430
  br label %return, !dbg !7430

if.end15:                                         ; preds = %land.lhs.true, %if.then9
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7431
  %exp16 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !7431
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !7431
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 4, !dbg !7431
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !7431
  store %union.tree_node* %15, %union.tree_node** %arg, align 8, !dbg !7432
  br label %if.end32, !dbg !7433

if.else:                                          ; preds = %if.end
  %16 = load i32, i32* %nargs, align 4, !dbg !7434
  %cmp19 = icmp eq i32 %16, 0, !dbg !7437
  br i1 %cmp19, label %if.then21, label %if.else23, !dbg !7438

if.then21:                                        ; preds = %if.else
  %call22 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.728, i64 0, i64 0)), !dbg !7439
  store i8 1, i8* %retval, align 1, !dbg !7441
  br label %return, !dbg !7441

if.else23:                                        ; preds = %if.else
  %17 = load i32, i32* %nargs, align 4, !dbg !7442
  %cmp24 = icmp sgt i32 %17, 1, !dbg !7444
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !7445

if.then26:                                        ; preds = %if.else23
  call void (i8*, ...) @error(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.729, i64 0, i64 0)), !dbg !7446
  store i8 1, i8* %retval, align 1, !dbg !7448
  br label %return, !dbg !7448

if.end27:                                         ; preds = %if.else23
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7449
  %exp29 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !7449
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !7449
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 3, !dbg !7449
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !7449
  store %union.tree_node* %19, %union.tree_node** %arg, align 8, !dbg !7450
  br label %if.end32

if.end32:                                         ; preds = %if.end28, %if.end15
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7451
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7451
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !7451
  %bf.load = load i64, i64* %21, align 8, !dbg !7451
  %bf.clear = and i64 %bf.load, 65535, !dbg !7451
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7451
  %cmp33 = icmp eq i32 %bf.cast, 141, !dbg !7453
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !7454

if.then35:                                        ; preds = %if.end32
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7455
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !7455
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7455
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7455
  store %union.tree_node* %23, %union.tree_node** %arg, align 8, !dbg !7456
  br label %if.end36, !dbg !7457

if.end36:                                         ; preds = %if.then35, %if.end32
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7458
  %call37 = call i32 @integer_zerop(%union.tree_node* %24), !dbg !7460
  %tobool38 = icmp ne i32 %call37, 0, !dbg !7460
  br i1 %tobool38, label %if.end86, label %if.then39, !dbg !7461

if.then39:                                        ; preds = %if.end36
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_parm, metadata !7462, metadata !DIExpression()), !dbg !7464
  %25 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7465
  %decl_non_common = bitcast %union.tree_node* %25 to %struct.tree_decl_non_common*, !dbg !7465
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !7465
  %26 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !7465
  %call40 = call %union.tree_node* @tree_last(%union.tree_node* %26), !dbg !7466
  store %union.tree_node* %call40, %union.tree_node** %last_parm, align 8, !dbg !7464
  br label %while.cond, !dbg !7467

while.cond:                                       ; preds = %while.body, %if.then39
  %27 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7468
  %base41 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !7468
  %28 = bitcast %struct.tree_base* %base41 to i64*, !dbg !7468
  %bf.load42 = load i64, i64* %28, align 8, !dbg !7468
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !7468
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !7468
  %cmp45 = icmp eq i32 %bf.cast44, 116, !dbg !7468
  br i1 %cmp45, label %lor.end, label %lor.lhs.false47, !dbg !7468

lor.lhs.false47:                                  ; preds = %while.cond
  %29 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7468
  %base48 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !7468
  %30 = bitcast %struct.tree_base* %base48 to i64*, !dbg !7468
  %bf.load49 = load i64, i64* %30, align 8, !dbg !7468
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !7468
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !7468
  %cmp52 = icmp eq i32 %bf.cast51, 113, !dbg !7468
  br i1 %cmp52, label %lor.end, label %lor.rhs, !dbg !7469

lor.rhs:                                          ; preds = %lor.lhs.false47
  %31 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7470
  %base54 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !7470
  %32 = bitcast %struct.tree_base* %base54 to i64*, !dbg !7470
  %bf.load55 = load i64, i64* %32, align 8, !dbg !7470
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !7470
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !7470
  %cmp58 = icmp eq i32 %bf.cast57, 47, !dbg !7471
  br label %lor.end, !dbg !7469

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false47, %while.cond
  %33 = phi i1 [ true, %lor.lhs.false47 ], [ true, %while.cond ], [ %cmp58, %lor.rhs ]
  br i1 %33, label %while.body, label %while.end, !dbg !7467

while.body:                                       ; preds = %lor.end
  %34 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7472
  %exp60 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !7472
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !7472
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 0, !dbg !7472
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !7472
  store %union.tree_node* %35, %union.tree_node** %arg, align 8, !dbg !7473
  br label %while.cond, !dbg !7467, !llvm.loop !7474

while.end:                                        ; preds = %lor.end
  %36 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7475
  %37 = load %union.tree_node*, %union.tree_node** %last_parm, align 8, !dbg !7477
  %cmp63 = icmp ne %union.tree_node* %36, %37, !dbg !7478
  br i1 %cmp63, label %if.then65, label %if.else67, !dbg !7479

if.then65:                                        ; preds = %while.end
  %call66 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.730, i64 0, i64 0)), !dbg !7480
  br label %if.end75, !dbg !7482

if.else67:                                        ; preds = %while.end
  %38 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7483
  %decl_common = bitcast %union.tree_node* %38 to %struct.tree_decl_common*, !dbg !7483
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7483
  %39 = bitcast i40* %decl_flag_0 to i64*, !dbg !7483
  %bf.load68 = load i64, i64* %39, align 8, !dbg !7483
  %bf.lshr = lshr i64 %bf.load68, 24, !dbg !7483
  %bf.clear69 = and i64 %bf.lshr, 1, !dbg !7483
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !7483
  %tobool71 = icmp ne i32 %bf.cast70, 0, !dbg !7483
  br i1 %tobool71, label %if.then72, label %if.end74, !dbg !7485

if.then72:                                        ; preds = %if.else67
  %call73 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.731, i64 0, i64 0)), !dbg !7486
  br label %if.end74, !dbg !7486

if.end74:                                         ; preds = %if.then72, %if.else67
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then65
  %40 = load i8, i8* %va_start_p.addr, align 1, !dbg !7487
  %tobool76 = icmp ne i8 %40, 0, !dbg !7487
  br i1 %tobool76, label %if.then77, label %if.else81, !dbg !7489

if.then77:                                        ; preds = %if.end75
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7490
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7491
  %exp78 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !7491
  %operands79 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp78, i32 0, i32 3, !dbg !7491
  %arrayidx80 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands79, i64 0, i64 4, !dbg !7491
  store %union.tree_node* %41, %union.tree_node** %arrayidx80, align 8, !dbg !7492
  br label %if.end85, !dbg !7491

if.else81:                                        ; preds = %if.end75
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7493
  %44 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7494
  %exp82 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !7494
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !7494
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 3, !dbg !7494
  store %union.tree_node* %43, %union.tree_node** %arrayidx84, align 8, !dbg !7495
  br label %if.end85

if.end85:                                         ; preds = %if.else81, %if.then77
  br label %if.end86, !dbg !7496

if.end86:                                         ; preds = %if.end85, %if.end36
  store i8 0, i8* %retval, align 1, !dbg !7497
  br label %return, !dbg !7497

return:                                           ; preds = %if.end86, %if.then26, %if.then21, %if.then14, %if.then
  %45 = load i8, i8* %retval, align 1, !dbg !7498
  ret i8 %45, !dbg !7498
}

declare dso_local %union.tree_node* @tree_last(%union.tree_node*) #2

declare dso_local void @error(i8*, ...) #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_memory_chk(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len, %union.tree_node* %size, %union.tree_node* %maxlen, i8 zeroext %ignore, i32 %fcode) #0 !dbg !7499 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %maxlen.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode.addr = alloca i32, align 4
  %fn = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7502, metadata !DIExpression()), !dbg !7503
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7504, metadata !DIExpression()), !dbg !7505
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !7506, metadata !DIExpression()), !dbg !7507
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !7508, metadata !DIExpression()), !dbg !7509
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !7510, metadata !DIExpression()), !dbg !7511
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !7512, metadata !DIExpression()), !dbg !7513
  store %union.tree_node* %maxlen, %union.tree_node** %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxlen.addr, metadata !7514, metadata !DIExpression()), !dbg !7515
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !7516, metadata !DIExpression()), !dbg !7517
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !7518, metadata !DIExpression()), !dbg !7519
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7520, metadata !DIExpression()), !dbg !7521
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7522
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !7524
  %tobool = icmp ne i8 %call, 0, !dbg !7524
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7525

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7526
  %2 = load i32, i32* %fcode.addr, align 4, !dbg !7527
  %cmp = icmp eq i32 %2, 532, !dbg !7528
  %3 = zext i1 %cmp to i64, !dbg !7527
  %cond = select i1 %cmp, i32 8, i32 10, !dbg !7527
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 %cond), !dbg !7529
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7529
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !7530

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7531
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %4, i32 8), !dbg !7532
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7532
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !7533

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %5 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7534
  %call7 = call zeroext i8 @validate_arg(%union.tree_node* %5, i32 8), !dbg !7535
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7535
  br i1 %tobool8, label %if.end, label %if.then, !dbg !7536

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7537
  br label %return, !dbg !7537

if.end:                                           ; preds = %lor.lhs.false6
  %6 = load i32, i32* %fcode.addr, align 4, !dbg !7538
  %cmp9 = icmp ne i32 %6, 532, !dbg !7540
  br i1 %cmp9, label %land.lhs.true, label %if.end26, !dbg !7541

land.lhs.true:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7542
  %8 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7543
  %call10 = call i32 @operand_equal_p(%union.tree_node* %7, %union.tree_node* %8, i32 0), !dbg !7544
  %tobool11 = icmp ne i32 %call10, 0, !dbg !7544
  br i1 %tobool11, label %if.then12, label %if.end26, !dbg !7545

if.then12:                                        ; preds = %land.lhs.true
  %9 = load i32, i32* %fcode.addr, align 4, !dbg !7546
  %cmp13 = icmp ne i32 %9, 531, !dbg !7549
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !7550

if.then14:                                        ; preds = %if.then12
  %10 = load i32, i32* %loc.addr, align 4, !dbg !7551
  %11 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7552
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !7552
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7552
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7552
  %common15 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !7552
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !7552
  %13 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !7552
  %14 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7553
  %15 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7554
  %call17 = call %union.tree_node* @omit_one_operand_loc(i32 %10, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !7555
  store %union.tree_node* %call17, %union.tree_node** %retval, align 8, !dbg !7556
  br label %return, !dbg !7556

if.else:                                          ; preds = %if.then12
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !7557, metadata !DIExpression()), !dbg !7559
  %16 = load i32, i32* %loc.addr, align 4, !dbg !7560
  %17 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7560
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !7560
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !7560
  %18 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !7560
  %19 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7560
  %20 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7560
  %call20 = call %union.tree_node* @fold_build2_stat_loc(i32 %16, i32 66, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !7560
  store %union.tree_node* %call20, %union.tree_node** %temp, align 8, !dbg !7559
  %21 = load i32, i32* %loc.addr, align 4, !dbg !7561
  %22 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7562
  %common21 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !7562
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !7562
  %23 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !7562
  %common23 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !7562
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !7562
  %24 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !7562
  %25 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !7563
  %call25 = call %union.tree_node* @fold_convert_loc(i32 %21, %union.tree_node* %24, %union.tree_node* %25), !dbg !7564
  store %union.tree_node* %call25, %union.tree_node** %retval, align 8, !dbg !7565
  br label %return, !dbg !7565

if.end26:                                         ; preds = %land.lhs.true, %if.end
  %26 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7566
  %call27 = call i32 @host_integerp(%union.tree_node* %26, i32 1), !dbg !7568
  %tobool28 = icmp ne i32 %call27, 0, !dbg !7568
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !7569

if.then29:                                        ; preds = %if.end26
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7570
  br label %return, !dbg !7570

if.end30:                                         ; preds = %if.end26
  %27 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7571
  %call31 = call i32 @integer_all_onesp(%union.tree_node* %27), !dbg !7573
  %tobool32 = icmp ne i32 %call31, 0, !dbg !7573
  br i1 %tobool32, label %if.end58, label %if.then33, !dbg !7574

if.then33:                                        ; preds = %if.end30
  %28 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7575
  %call34 = call i32 @host_integerp(%union.tree_node* %28, i32 1), !dbg !7578
  %tobool35 = icmp ne i32 %call34, 0, !dbg !7578
  br i1 %tobool35, label %if.else52, label %if.then36, !dbg !7579

if.then36:                                        ; preds = %if.then33
  %29 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7580
  %cmp37 = icmp eq %union.tree_node* %29, null, !dbg !7583
  br i1 %cmp37, label %if.then41, label %lor.lhs.false38, !dbg !7584

lor.lhs.false38:                                  ; preds = %if.then36
  %30 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7585
  %call39 = call i32 @host_integerp(%union.tree_node* %30, i32 1), !dbg !7586
  %tobool40 = icmp ne i32 %call39, 0, !dbg !7586
  br i1 %tobool40, label %if.end51, label %if.then41, !dbg !7587

if.then41:                                        ; preds = %lor.lhs.false38, %if.then36
  %31 = load i32, i32* %fcode.addr, align 4, !dbg !7588
  %cmp42 = icmp eq i32 %31, 531, !dbg !7591
  br i1 %cmp42, label %land.lhs.true43, label %if.end50, !dbg !7592

land.lhs.true43:                                  ; preds = %if.then41
  %32 = load i8, i8* %ignore.addr, align 1, !dbg !7593
  %conv = zext i8 %32 to i32, !dbg !7593
  %tobool44 = icmp ne i32 %conv, 0, !dbg !7593
  br i1 %tobool44, label %if.then45, label %if.end50, !dbg !7594

if.then45:                                        ; preds = %land.lhs.true43
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 529), align 8, !dbg !7595
  store %union.tree_node* %33, %union.tree_node** %fn, align 8, !dbg !7597
  %34 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7598
  %tobool46 = icmp ne %union.tree_node* %34, null, !dbg !7598
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !7600

if.then47:                                        ; preds = %if.then45
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7601
  br label %return, !dbg !7601

if.end48:                                         ; preds = %if.then45
  %35 = load i32, i32* %loc.addr, align 4, !dbg !7602
  %36 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7603
  %37 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7604
  %38 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7605
  %39 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7606
  %40 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7607
  %call49 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %35, %union.tree_node* %36, i32 4, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39, %union.tree_node* %40), !dbg !7608
  store %union.tree_node* %call49, %union.tree_node** %retval, align 8, !dbg !7609
  br label %return, !dbg !7609

if.end50:                                         ; preds = %land.lhs.true43, %if.then41
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7610
  br label %return, !dbg !7610

if.end51:                                         ; preds = %lor.lhs.false38
  br label %if.end53, !dbg !7611

if.else52:                                        ; preds = %if.then33
  %41 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7612
  store %union.tree_node* %41, %union.tree_node** %maxlen.addr, align 8, !dbg !7613
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %if.end51
  %42 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7614
  %43 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7616
  %call54 = call i32 @tree_int_cst_lt(%union.tree_node* %42, %union.tree_node* %43), !dbg !7617
  %tobool55 = icmp ne i32 %call54, 0, !dbg !7617
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !7618

if.then56:                                        ; preds = %if.end53
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7619
  br label %return, !dbg !7619

if.end57:                                         ; preds = %if.end53
  br label %if.end58, !dbg !7620

if.end58:                                         ; preds = %if.end57, %if.end30
  store %union.tree_node* null, %union.tree_node** %fn, align 8, !dbg !7621
  %44 = load i32, i32* %fcode.addr, align 4, !dbg !7622
  switch i32 %44, label %sw.default [
    i32 529, label %sw.bb
    i32 531, label %sw.bb59
    i32 530, label %sw.bb60
    i32 532, label %sw.bb61
  ], !dbg !7623

sw.bb:                                            ; preds = %if.end58
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 330), align 16, !dbg !7624
  store %union.tree_node* %45, %union.tree_node** %fn, align 8, !dbg !7626
  br label %sw.epilog, !dbg !7627

sw.bb59:                                          ; preds = %if.end58
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 332), align 16, !dbg !7628
  store %union.tree_node* %46, %union.tree_node** %fn, align 8, !dbg !7629
  br label %sw.epilog, !dbg !7630

sw.bb60:                                          ; preds = %if.end58
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 331), align 8, !dbg !7631
  store %union.tree_node* %47, %union.tree_node** %fn, align 8, !dbg !7632
  br label %sw.epilog, !dbg !7633

sw.bb61:                                          ; preds = %if.end58
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 333), align 8, !dbg !7634
  store %union.tree_node* %48, %union.tree_node** %fn, align 8, !dbg !7635
  br label %sw.epilog, !dbg !7636

sw.default:                                       ; preds = %if.end58
  br label %sw.epilog, !dbg !7637

sw.epilog:                                        ; preds = %sw.default, %sw.bb61, %sw.bb60, %sw.bb59, %sw.bb
  %49 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7638
  %tobool62 = icmp ne %union.tree_node* %49, null, !dbg !7638
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !7640

if.then63:                                        ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7641
  br label %return, !dbg !7641

if.end64:                                         ; preds = %sw.epilog
  %50 = load i32, i32* %loc.addr, align 4, !dbg !7642
  %51 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7643
  %52 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7644
  %53 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7645
  %54 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7646
  %call65 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %50, %union.tree_node* %51, i32 3, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %54), !dbg !7647
  store %union.tree_node* %call65, %union.tree_node** %retval, align 8, !dbg !7648
  br label %return, !dbg !7648

return:                                           ; preds = %if.end64, %if.then63, %if.then56, %if.end50, %if.end48, %if.then47, %if.then29, %if.else, %if.then14, %if.then
  %55 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7649
  ret %union.tree_node* %55, !dbg !7649
}

declare dso_local i32 @integer_all_onesp(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_stxcpy_chk(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %size, %union.tree_node* %maxlen, i8 zeroext %ignore, i32 %fcode) #0 !dbg !7650 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %maxlen.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode.addr = alloca i32, align 4
  %len = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7653, metadata !DIExpression()), !dbg !7654
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7655, metadata !DIExpression()), !dbg !7656
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !7657, metadata !DIExpression()), !dbg !7658
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !7659, metadata !DIExpression()), !dbg !7660
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !7661, metadata !DIExpression()), !dbg !7662
  store %union.tree_node* %maxlen, %union.tree_node** %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxlen.addr, metadata !7663, metadata !DIExpression()), !dbg !7664
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !7667, metadata !DIExpression()), !dbg !7668
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !7669, metadata !DIExpression()), !dbg !7670
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7671, metadata !DIExpression()), !dbg !7672
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7673
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !7675
  %tobool = icmp ne i8 %call, 0, !dbg !7675
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7676

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7677
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !7678
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7678
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !7679

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7680
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !7681
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7681
  br i1 %tobool5, label %if.end, label %if.then, !dbg !7682

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7683
  br label %return, !dbg !7683

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load i32, i32* %fcode.addr, align 4, !dbg !7684
  %cmp = icmp eq i32 %3, 535, !dbg !7686
  br i1 %cmp, label %land.lhs.true, label %if.end12, !dbg !7687

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7688
  %5 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7689
  %call6 = call i32 @operand_equal_p(%union.tree_node* %4, %union.tree_node* %5, i32 0), !dbg !7690
  %tobool7 = icmp ne i32 %call6, 0, !dbg !7690
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !7691

if.then8:                                         ; preds = %land.lhs.true
  %6 = load i32, i32* %loc.addr, align 4, !dbg !7692
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7693
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !7693
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7693
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7693
  %common9 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !7693
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7693
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7693
  %10 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7694
  %call11 = call %union.tree_node* @fold_convert_loc(i32 %6, %union.tree_node* %9, %union.tree_node* %10), !dbg !7695
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !7696
  br label %return, !dbg !7696

if.end12:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7697
  %call13 = call i32 @host_integerp(%union.tree_node* %11, i32 1), !dbg !7699
  %tobool14 = icmp ne i32 %call13, 0, !dbg !7699
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !7700

if.then15:                                        ; preds = %if.end12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7701
  br label %return, !dbg !7701

if.end16:                                         ; preds = %if.end12
  %12 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7702
  %call17 = call i32 @integer_all_onesp(%union.tree_node* %12), !dbg !7704
  %tobool18 = icmp ne i32 %call17, 0, !dbg !7704
  br i1 %tobool18, label %if.end63, label %if.then19, !dbg !7705

if.then19:                                        ; preds = %if.end16
  %13 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7706
  %call20 = call %union.tree_node* @c_strlen(%union.tree_node* %13, i32 1), !dbg !7708
  store %union.tree_node* %call20, %union.tree_node** %len, align 8, !dbg !7709
  %14 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7710
  %tobool21 = icmp ne %union.tree_node* %14, null, !dbg !7710
  br i1 %tobool21, label %lor.lhs.false22, label %if.then25, !dbg !7712

lor.lhs.false22:                                  ; preds = %if.then19
  %15 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7713
  %call23 = call i32 @host_integerp(%union.tree_node* %15, i32 1), !dbg !7714
  %tobool24 = icmp ne i32 %call23, 0, !dbg !7714
  br i1 %tobool24, label %if.else, label %if.then25, !dbg !7715

if.then25:                                        ; preds = %lor.lhs.false22, %if.then19
  %16 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7716
  %cmp26 = icmp eq %union.tree_node* %16, null, !dbg !7719
  br i1 %cmp26, label %if.then30, label %lor.lhs.false27, !dbg !7720

lor.lhs.false27:                                  ; preds = %if.then25
  %17 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7721
  %call28 = call i32 @host_integerp(%union.tree_node* %17, i32 1), !dbg !7722
  %tobool29 = icmp ne i32 %call28, 0, !dbg !7722
  br i1 %tobool29, label %if.end57, label %if.then30, !dbg !7723

if.then30:                                        ; preds = %lor.lhs.false27, %if.then25
  %18 = load i32, i32* %fcode.addr, align 4, !dbg !7724
  %cmp31 = icmp eq i32 %18, 533, !dbg !7727
  br i1 %cmp31, label %if.then32, label %if.end40, !dbg !7728

if.then32:                                        ; preds = %if.then30
  %19 = load i8, i8* %ignore.addr, align 1, !dbg !7729
  %tobool33 = icmp ne i8 %19, 0, !dbg !7729
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !7732

if.then34:                                        ; preds = %if.then32
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7733
  br label %return, !dbg !7733

if.end35:                                         ; preds = %if.then32
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 535), align 8, !dbg !7734
  store %union.tree_node* %20, %union.tree_node** %fn, align 8, !dbg !7735
  %21 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7736
  %tobool36 = icmp ne %union.tree_node* %21, null, !dbg !7736
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7738

if.then37:                                        ; preds = %if.end35
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7739
  br label %return, !dbg !7739

if.end38:                                         ; preds = %if.end35
  %22 = load i32, i32* %loc.addr, align 4, !dbg !7740
  %23 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7741
  %24 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7742
  %25 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7743
  %26 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7744
  %call39 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %22, %union.tree_node* %23, i32 3, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !7745
  store %union.tree_node* %call39, %union.tree_node** %retval, align 8, !dbg !7746
  br label %return, !dbg !7746

if.end40:                                         ; preds = %if.then30
  %27 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7747
  %tobool41 = icmp ne %union.tree_node* %27, null, !dbg !7747
  br i1 %tobool41, label %lor.lhs.false42, label %if.then44, !dbg !7749

lor.lhs.false42:                                  ; preds = %if.end40
  %28 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7750
  %base = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7750
  %29 = bitcast %struct.tree_base* %base to i64*, !dbg !7750
  %bf.load = load i64, i64* %29, align 8, !dbg !7750
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !7750
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7750
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7750
  %tobool43 = icmp ne i32 %bf.cast, 0, !dbg !7750
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !7751

if.then44:                                        ; preds = %lor.lhs.false42, %if.end40
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7752
  br label %return, !dbg !7752

if.end45:                                         ; preds = %lor.lhs.false42
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 529), align 8, !dbg !7753
  store %union.tree_node* %30, %union.tree_node** %fn, align 8, !dbg !7754
  %31 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7755
  %tobool46 = icmp ne %union.tree_node* %31, null, !dbg !7755
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !7757

if.then47:                                        ; preds = %if.end45
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7758
  br label %return, !dbg !7758

if.end48:                                         ; preds = %if.end45
  %32 = load i32, i32* %loc.addr, align 4, !dbg !7759
  %33 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7760
  %call49 = call %union.tree_node* @size_int_kind(i64 1, i32 1), !dbg !7761
  %call50 = call %union.tree_node* @size_binop_loc(i32 %32, i32 63, %union.tree_node* %33, %union.tree_node* %call49), !dbg !7762
  store %union.tree_node* %call50, %union.tree_node** %len, align 8, !dbg !7763
  %34 = load i32, i32* %loc.addr, align 4, !dbg !7764
  %35 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7765
  %common51 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !7765
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !7765
  %36 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !7765
  %common53 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !7765
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !7765
  %37 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !7765
  %38 = load i32, i32* %loc.addr, align 4, !dbg !7766
  %39 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7767
  %40 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7768
  %41 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7769
  %42 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7770
  %43 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7771
  %call55 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %38, %union.tree_node* %39, i32 4, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43), !dbg !7772
  %call56 = call %union.tree_node* @fold_convert_loc(i32 %34, %union.tree_node* %37, %union.tree_node* %call55), !dbg !7773
  store %union.tree_node* %call56, %union.tree_node** %retval, align 8, !dbg !7774
  br label %return, !dbg !7774

if.end57:                                         ; preds = %lor.lhs.false27
  br label %if.end58, !dbg !7775

if.else:                                          ; preds = %lor.lhs.false22
  %44 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7776
  store %union.tree_node* %44, %union.tree_node** %maxlen.addr, align 8, !dbg !7777
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.end57
  %45 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7778
  %46 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7780
  %call59 = call i32 @tree_int_cst_lt(%union.tree_node* %45, %union.tree_node* %46), !dbg !7781
  %tobool60 = icmp ne i32 %call59, 0, !dbg !7781
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !7782

if.then61:                                        ; preds = %if.end58
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7783
  br label %return, !dbg !7783

if.end62:                                         ; preds = %if.end58
  br label %if.end63, !dbg !7784

if.end63:                                         ; preds = %if.end62, %if.end16
  %47 = load i32, i32* %fcode.addr, align 4, !dbg !7785
  %cmp64 = icmp eq i32 %47, 533, !dbg !7786
  %48 = zext i1 %cmp64 to i64, !dbg !7785
  %cond = select i1 %cmp64, i32 335, i32 341, !dbg !7785
  %idxprom = sext i32 %cond to i64, !dbg !7787
  %arrayidx = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !7787
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7787
  store %union.tree_node* %49, %union.tree_node** %fn, align 8, !dbg !7788
  %50 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7789
  %tobool65 = icmp ne %union.tree_node* %50, null, !dbg !7789
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !7791

if.then66:                                        ; preds = %if.end63
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7792
  br label %return, !dbg !7792

if.end67:                                         ; preds = %if.end63
  %51 = load i32, i32* %loc.addr, align 4, !dbg !7793
  %52 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7794
  %53 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7795
  %54 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7796
  %call68 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %51, %union.tree_node* %52, i32 2, %union.tree_node* %53, %union.tree_node* %54), !dbg !7797
  store %union.tree_node* %call68, %union.tree_node** %retval, align 8, !dbg !7798
  br label %return, !dbg !7798

return:                                           ; preds = %if.end67, %if.then66, %if.then61, %if.end48, %if.then47, %if.then44, %if.end38, %if.then37, %if.then34, %if.then15, %if.then8, %if.then
  %55 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7799
  ret %union.tree_node* %55, !dbg !7799
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_strncpy_chk(i32 %loc, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len, %union.tree_node* %size, %union.tree_node* %maxlen) #0 !dbg !7800 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %maxlen.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !7803, metadata !DIExpression()), !dbg !7804
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !7805, metadata !DIExpression()), !dbg !7806
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !7807, metadata !DIExpression()), !dbg !7808
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !7809, metadata !DIExpression()), !dbg !7810
  store %union.tree_node* %maxlen, %union.tree_node** %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxlen.addr, metadata !7811, metadata !DIExpression()), !dbg !7812
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7813, metadata !DIExpression()), !dbg !7814
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7815
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !7817
  %tobool = icmp ne i8 %call, 0, !dbg !7817
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7818

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7819
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !7820
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7820
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !7821

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7822
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !7823
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7823
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !7824

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7825
  %call7 = call zeroext i8 @validate_arg(%union.tree_node* %3, i32 8), !dbg !7826
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7826
  br i1 %tobool8, label %if.end, label %if.then, !dbg !7827

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7828
  br label %return, !dbg !7828

if.end:                                           ; preds = %lor.lhs.false6
  %4 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7829
  %call9 = call i32 @host_integerp(%union.tree_node* %4, i32 1), !dbg !7831
  %tobool10 = icmp ne i32 %call9, 0, !dbg !7831
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !7832

if.then11:                                        ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7833
  br label %return, !dbg !7833

if.end12:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7834
  %call13 = call i32 @integer_all_onesp(%union.tree_node* %5), !dbg !7836
  %tobool14 = icmp ne i32 %call13, 0, !dbg !7836
  br i1 %tobool14, label %if.end29, label %if.then15, !dbg !7837

if.then15:                                        ; preds = %if.end12
  %6 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7838
  %call16 = call i32 @host_integerp(%union.tree_node* %6, i32 1), !dbg !7841
  %tobool17 = icmp ne i32 %call16, 0, !dbg !7841
  br i1 %tobool17, label %if.else, label %if.then18, !dbg !7842

if.then18:                                        ; preds = %if.then15
  %7 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7843
  %cmp = icmp eq %union.tree_node* %7, null, !dbg !7846
  br i1 %cmp, label %if.then22, label %lor.lhs.false19, !dbg !7847

lor.lhs.false19:                                  ; preds = %if.then18
  %8 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7848
  %call20 = call i32 @host_integerp(%union.tree_node* %8, i32 1), !dbg !7849
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7849
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !7850

if.then22:                                        ; preds = %lor.lhs.false19, %if.then18
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7851
  br label %return, !dbg !7851

if.end23:                                         ; preds = %lor.lhs.false19
  br label %if.end24, !dbg !7852

if.else:                                          ; preds = %if.then15
  %9 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7853
  store %union.tree_node* %9, %union.tree_node** %maxlen.addr, align 8, !dbg !7854
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.end23
  %10 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !7855
  %11 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7857
  %call25 = call i32 @tree_int_cst_lt(%union.tree_node* %10, %union.tree_node* %11), !dbg !7858
  %tobool26 = icmp ne i32 %call25, 0, !dbg !7858
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !7859

if.then27:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7860
  br label %return, !dbg !7860

if.end28:                                         ; preds = %if.end24
  br label %if.end29, !dbg !7861

if.end29:                                         ; preds = %if.end28, %if.end12
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 349), align 8, !dbg !7862
  store %union.tree_node* %12, %union.tree_node** %fn, align 8, !dbg !7863
  %13 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7864
  %tobool30 = icmp ne %union.tree_node* %13, null, !dbg !7864
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !7866

if.then31:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7867
  br label %return, !dbg !7867

if.end32:                                         ; preds = %if.end29
  %14 = load i32, i32* %loc.addr, align 4, !dbg !7868
  %15 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7869
  %16 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !7870
  %17 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !7871
  %18 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !7872
  %call33 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %14, %union.tree_node* %15, i32 3, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !7873
  store %union.tree_node* %call33, %union.tree_node** %retval, align 8, !dbg !7874
  br label %return, !dbg !7874

return:                                           ; preds = %if.end32, %if.then31, %if.then27, %if.then22, %if.then11, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7875
  ret %union.tree_node* %19, !dbg !7875
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_builtin_snprintf_chk(i32 %loc, %union.tree_node* %exp, %union.tree_node* %maxlen, i32 %fcode) #0 !dbg !7876 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %maxlen.addr = alloca %union.tree_node*, align 8
  %fcode.addr = alloca i32, align 4
  %dest = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fmt = alloca %union.tree_node*, align 8
  %flag = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7879, metadata !DIExpression()), !dbg !7880
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7881, metadata !DIExpression()), !dbg !7882
  store %union.tree_node* %maxlen, %union.tree_node** %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxlen.addr, metadata !7883, metadata !DIExpression()), !dbg !7884
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !7885, metadata !DIExpression()), !dbg !7886
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !7887, metadata !DIExpression()), !dbg !7888
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !7889, metadata !DIExpression()), !dbg !7890
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !7891, metadata !DIExpression()), !dbg !7892
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7893, metadata !DIExpression()), !dbg !7894
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt, metadata !7895, metadata !DIExpression()), !dbg !7896
  call void @llvm.dbg.declare(metadata %union.tree_node** %flag, metadata !7897, metadata !DIExpression()), !dbg !7898
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !7899, metadata !DIExpression()), !dbg !7900
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7901
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !7901
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7901
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7901
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7901
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !7901
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7901
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !7901
  %2 = load i64, i64* %low, align 8, !dbg !7901
  %conv = trunc i64 %2 to i32, !dbg !7901
  %sub = sub nsw i32 %conv, 3, !dbg !7901
  %cmp = icmp slt i32 %sub, 5, !dbg !7903
  br i1 %cmp, label %if.then, label %if.end, !dbg !7904

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7905
  br label %return, !dbg !7905

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7906
  %exp4 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7906
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !7906
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 3, !dbg !7906
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !7906
  store %union.tree_node* %4, %union.tree_node** %dest, align 8, !dbg !7907
  %5 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !7908
  %call = call zeroext i8 @validate_arg(%union.tree_node* %5, i32 10), !dbg !7910
  %tobool = icmp ne i8 %call, 0, !dbg !7910
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !7911

if.then7:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7912
  br label %return, !dbg !7912

if.end8:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7913
  %exp9 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !7913
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !7913
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 4, !dbg !7913
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !7913
  store %union.tree_node* %7, %union.tree_node** %len, align 8, !dbg !7914
  %8 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7915
  %call12 = call zeroext i8 @validate_arg(%union.tree_node* %8, i32 8), !dbg !7917
  %tobool13 = icmp ne i8 %call12, 0, !dbg !7917
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !7918

if.then14:                                        ; preds = %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7919
  br label %return, !dbg !7919

if.end15:                                         ; preds = %if.end8
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7920
  %exp16 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7920
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !7920
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 5, !dbg !7920
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !7920
  store %union.tree_node* %10, %union.tree_node** %flag, align 8, !dbg !7921
  %11 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !7922
  %call19 = call zeroext i8 @validate_arg(%union.tree_node* %11, i32 8), !dbg !7924
  %tobool20 = icmp ne i8 %call19, 0, !dbg !7924
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !7925

if.then21:                                        ; preds = %if.end15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7926
  br label %return, !dbg !7926

if.end22:                                         ; preds = %if.end15
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7927
  %exp23 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !7927
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !7927
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 6, !dbg !7927
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !7927
  store %union.tree_node* %13, %union.tree_node** %size, align 8, !dbg !7928
  %14 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7929
  %call26 = call zeroext i8 @validate_arg(%union.tree_node* %14, i32 8), !dbg !7931
  %tobool27 = icmp ne i8 %call26, 0, !dbg !7931
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !7932

if.then28:                                        ; preds = %if.end22
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7933
  br label %return, !dbg !7933

if.end29:                                         ; preds = %if.end22
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7934
  %exp30 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !7934
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !7934
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 7, !dbg !7934
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !7934
  store %union.tree_node* %16, %union.tree_node** %fmt, align 8, !dbg !7935
  %17 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !7936
  %call33 = call zeroext i8 @validate_arg(%union.tree_node* %17, i32 10), !dbg !7938
  %tobool34 = icmp ne i8 %call33, 0, !dbg !7938
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !7939

if.then35:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7940
  br label %return, !dbg !7940

if.end36:                                         ; preds = %if.end29
  %18 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7941
  %call37 = call i32 @host_integerp(%union.tree_node* %18, i32 1), !dbg !7943
  %tobool38 = icmp ne i32 %call37, 0, !dbg !7943
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !7944

if.then39:                                        ; preds = %if.end36
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7945
  br label %return, !dbg !7945

if.end40:                                         ; preds = %if.end36
  %19 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7946
  %call41 = call i32 @integer_all_onesp(%union.tree_node* %19), !dbg !7948
  %tobool42 = icmp ne i32 %call41, 0, !dbg !7948
  br i1 %tobool42, label %if.end58, label %if.then43, !dbg !7949

if.then43:                                        ; preds = %if.end40
  %20 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7950
  %call44 = call i32 @host_integerp(%union.tree_node* %20, i32 1), !dbg !7953
  %tobool45 = icmp ne i32 %call44, 0, !dbg !7953
  br i1 %tobool45, label %if.else, label %if.then46, !dbg !7954

if.then46:                                        ; preds = %if.then43
  %21 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7955
  %cmp47 = icmp eq %union.tree_node* %21, null, !dbg !7958
  br i1 %cmp47, label %if.then51, label %lor.lhs.false, !dbg !7959

lor.lhs.false:                                    ; preds = %if.then46
  %22 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7960
  %call49 = call i32 @host_integerp(%union.tree_node* %22, i32 1), !dbg !7961
  %tobool50 = icmp ne i32 %call49, 0, !dbg !7961
  br i1 %tobool50, label %if.end52, label %if.then51, !dbg !7962

if.then51:                                        ; preds = %lor.lhs.false, %if.then46
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7963
  br label %return, !dbg !7963

if.end52:                                         ; preds = %lor.lhs.false
  br label %if.end53, !dbg !7964

if.else:                                          ; preds = %if.then43
  %23 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !7965
  store %union.tree_node* %23, %union.tree_node** %maxlen.addr, align 8, !dbg !7966
  br label %if.end53

if.end53:                                         ; preds = %if.else, %if.end52
  %24 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7967
  %25 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !7969
  %call54 = call i32 @tree_int_cst_lt(%union.tree_node* %24, %union.tree_node* %25), !dbg !7970
  %tobool55 = icmp ne i32 %call54, 0, !dbg !7970
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !7971

if.then56:                                        ; preds = %if.end53
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7972
  br label %return, !dbg !7972

if.end57:                                         ; preds = %if.end53
  br label %if.end58, !dbg !7973

if.end58:                                         ; preds = %if.end57, %if.end40
  %call59 = call zeroext i8 @init_target_chars(), !dbg !7974
  %tobool60 = icmp ne i8 %call59, 0, !dbg !7974
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !7976

if.then61:                                        ; preds = %if.end58
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7977
  br label %return, !dbg !7977

if.end62:                                         ; preds = %if.end58
  %26 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !7978
  %call63 = call i32 @integer_zerop(%union.tree_node* %26), !dbg !7980
  %tobool64 = icmp ne i32 %call63, 0, !dbg !7980
  br i1 %tobool64, label %if.end79, label %if.then65, !dbg !7981

if.then65:                                        ; preds = %if.end62
  %27 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !7982
  %call66 = call i8* @c_getstr(%union.tree_node* %27), !dbg !7984
  store i8* %call66, i8** %fmt_str, align 8, !dbg !7985
  %28 = load i8*, i8** %fmt_str, align 8, !dbg !7986
  %cmp67 = icmp eq i8* %28, null, !dbg !7988
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !7989

if.then69:                                        ; preds = %if.then65
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7990
  br label %return, !dbg !7990

if.end70:                                         ; preds = %if.then65
  %29 = load i8*, i8** %fmt_str, align 8, !dbg !7991
  %30 = load i64, i64* @target_percent, align 8, !dbg !7993
  %conv71 = trunc i64 %30 to i32, !dbg !7993
  %call72 = call i8* @strchr(i8* %29, i32 %conv71), !dbg !7994
  %cmp73 = icmp ne i8* %call72, null, !dbg !7995
  br i1 %cmp73, label %land.lhs.true, label %if.end78, !dbg !7996

land.lhs.true:                                    ; preds = %if.end70
  %31 = load i8*, i8** %fmt_str, align 8, !dbg !7997
  %call75 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !7998
  %tobool76 = icmp ne i32 %call75, 0, !dbg !7998
  br i1 %tobool76, label %if.then77, label %if.end78, !dbg !7999

if.then77:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8000
  br label %return, !dbg !8000

if.end78:                                         ; preds = %land.lhs.true, %if.end70
  br label %if.end79, !dbg !8001

if.end79:                                         ; preds = %if.end78, %if.end62
  %32 = load i32, i32* %fcode.addr, align 4, !dbg !8002
  %cmp80 = icmp eq i32 %32, 540, !dbg !8003
  %33 = zext i1 %cmp80 to i64, !dbg !8002
  %cond = select i1 %cmp80, i32 379, i32 372, !dbg !8002
  %idxprom = sext i32 %cond to i64, !dbg !8004
  %arrayidx82 = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !8004
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !8004
  store %union.tree_node* %34, %union.tree_node** %fn, align 8, !dbg !8005
  %35 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8006
  %tobool83 = icmp ne %union.tree_node* %35, null, !dbg !8006
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !8008

if.then84:                                        ; preds = %if.end79
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8009
  br label %return, !dbg !8009

if.end85:                                         ; preds = %if.end79
  %36 = load i32, i32* %loc.addr, align 4, !dbg !8010
  %37 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8011
  %38 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8012
  %39 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8013
  %40 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !8014
  %41 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !8015
  %call86 = call %union.tree_node* (i32, %union.tree_node*, i32, %union.tree_node*, i32, ...) @rewrite_call_expr(i32 %36, %union.tree_node* %37, i32 5, %union.tree_node* %38, i32 3, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41), !dbg !8016
  store %union.tree_node* %call86, %union.tree_node** %retval, align 8, !dbg !8017
  br label %return, !dbg !8017

return:                                           ; preds = %if.end85, %if.then84, %if.then77, %if.then69, %if.then61, %if.then56, %if.then51, %if.then39, %if.then35, %if.then28, %if.then21, %if.then14, %if.then7, %if.then
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8018
  ret %union.tree_node* %42, !dbg !8018
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @init_target_chars() #0 !dbg !4782 {
entry:
  %retval = alloca i8, align 1
  %0 = load i8, i8* @init_target_chars.init, align 1, !dbg !8019
  %tobool = icmp ne i8 %0, 0, !dbg !8019
  br i1 %tobool, label %if.end16, label %if.then, !dbg !8021

if.then:                                          ; preds = %entry
  %1 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 26), align 8, !dbg !8022
  %call = call i64 %1(i64 10), !dbg !8024
  store i64 %call, i64* @target_newline, align 8, !dbg !8025
  %2 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 26), align 8, !dbg !8026
  %call1 = call i64 %2(i64 37), !dbg !8027
  store i64 %call1, i64* @target_percent, align 8, !dbg !8028
  %3 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 26), align 8, !dbg !8029
  %call2 = call i64 %3(i64 99), !dbg !8030
  store i64 %call2, i64* @target_c, align 8, !dbg !8031
  %4 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 26), align 8, !dbg !8032
  %call3 = call i64 %4(i64 115), !dbg !8033
  store i64 %call3, i64* @target_s, align 8, !dbg !8034
  %5 = load i64, i64* @target_newline, align 8, !dbg !8035
  %cmp = icmp eq i64 %5, 0, !dbg !8037
  br i1 %cmp, label %if.then9, label %lor.lhs.false, !dbg !8038

lor.lhs.false:                                    ; preds = %if.then
  %6 = load i64, i64* @target_percent, align 8, !dbg !8039
  %cmp4 = icmp eq i64 %6, 0, !dbg !8040
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5, !dbg !8041

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %7 = load i64, i64* @target_c, align 8, !dbg !8042
  %cmp6 = icmp eq i64 %7, 0, !dbg !8043
  br i1 %cmp6, label %if.then9, label %lor.lhs.false7, !dbg !8044

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %8 = load i64, i64* @target_s, align 8, !dbg !8045
  %cmp8 = icmp eq i64 %8, 0, !dbg !8046
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !8047

if.then9:                                         ; preds = %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false, %if.then
  store i8 0, i8* %retval, align 1, !dbg !8048
  br label %return, !dbg !8048

if.end:                                           ; preds = %lor.lhs.false7
  %9 = load i64, i64* @target_percent, align 8, !dbg !8049
  %conv = trunc i64 %9 to i8, !dbg !8049
  store i8 %conv, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_c, i64 0, i64 0), align 1, !dbg !8050
  %10 = load i64, i64* @target_c, align 8, !dbg !8051
  %conv10 = trunc i64 %10 to i8, !dbg !8051
  store i8 %conv10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_c, i64 0, i64 1), align 1, !dbg !8052
  store i8 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_c, i64 0, i64 2), align 1, !dbg !8053
  %11 = load i64, i64* @target_percent, align 8, !dbg !8054
  %conv11 = trunc i64 %11 to i8, !dbg !8054
  store i8 %conv11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0), align 1, !dbg !8055
  %12 = load i64, i64* @target_s, align 8, !dbg !8056
  %conv12 = trunc i64 %12 to i8, !dbg !8056
  store i8 %conv12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 1), align 1, !dbg !8057
  store i8 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 2), align 1, !dbg !8058
  %13 = load i64, i64* @target_percent, align 8, !dbg !8059
  %conv13 = trunc i64 %13 to i8, !dbg !8059
  store i8 %conv13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @target_percent_s_newline, i64 0, i64 0), align 1, !dbg !8060
  %14 = load i64, i64* @target_s, align 8, !dbg !8061
  %conv14 = trunc i64 %14 to i8, !dbg !8061
  store i8 %conv14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @target_percent_s_newline, i64 0, i64 1), align 1, !dbg !8062
  %15 = load i64, i64* @target_newline, align 8, !dbg !8063
  %conv15 = trunc i64 %15 to i8, !dbg !8063
  store i8 %conv15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @target_percent_s_newline, i64 0, i64 2), align 1, !dbg !8064
  store i8 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @target_percent_s_newline, i64 0, i64 3), align 1, !dbg !8065
  store i8 1, i8* @init_target_chars.init, align 1, !dbg !8066
  br label %if.end16, !dbg !8067

if.end16:                                         ; preds = %if.end, %entry
  store i8 1, i8* %retval, align 1, !dbg !8068
  br label %return, !dbg !8068

return:                                           ; preds = %if.end16, %if.then9
  %16 = load i8, i8* %retval, align 1, !dbg !8069
  ret i8 %16, !dbg !8069
}

declare dso_local i8* @strchr(i8*, i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @rewrite_call_expr(i32 %loc, %union.tree_node* %exp, i32 %skip, %union.tree_node* %fndecl, i32 %n, ...) #0 !dbg !8070 {
entry:
  %loc.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %skip.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %n.addr = alloca i32, align 4
  %oldnargs = alloca i32, align 4
  %nargs = alloca i32, align 4
  %fntype = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %buffer = alloca %union.tree_node**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8073, metadata !DIExpression()), !dbg !8074
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8075, metadata !DIExpression()), !dbg !8076
  store i32 %skip, i32* %skip.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %skip.addr, metadata !8077, metadata !DIExpression()), !dbg !8078
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8079, metadata !DIExpression()), !dbg !8080
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8081, metadata !DIExpression()), !dbg !8082
  call void @llvm.dbg.declare(metadata i32* %oldnargs, metadata !8083, metadata !DIExpression()), !dbg !8084
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8085
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !8085
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8085
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8085
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8085
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !8085
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8085
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !8085
  %2 = load i64, i64* %low, align 8, !dbg !8085
  %conv = trunc i64 %2 to i32, !dbg !8085
  %sub = sub nsw i32 %conv, 3, !dbg !8085
  store i32 %sub, i32* %oldnargs, align 4, !dbg !8084
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !8086, metadata !DIExpression()), !dbg !8087
  %3 = load i32, i32* %oldnargs, align 4, !dbg !8088
  %4 = load i32, i32* %skip.addr, align 4, !dbg !8089
  %sub3 = sub nsw i32 %3, %4, !dbg !8090
  %5 = load i32, i32* %n.addr, align 4, !dbg !8091
  %add = add nsw i32 %sub3, %5, !dbg !8092
  store i32 %add, i32* %nargs, align 4, !dbg !8087
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !8093, metadata !DIExpression()), !dbg !8094
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8095
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !8095
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8095
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8095
  store %union.tree_node* %7, %union.tree_node** %fntype, align 8, !dbg !8094
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8096, metadata !DIExpression()), !dbg !8097
  %8 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !8098
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %8), !dbg !8098
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8098
  %call4 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %call, %union.tree_node* %9), !dbg !8098
  store %union.tree_node* %call4, %union.tree_node** %fn, align 8, !dbg !8097
  call void @llvm.dbg.declare(metadata %union.tree_node*** %buffer, metadata !8099, metadata !DIExpression()), !dbg !8100
  %10 = load i32, i32* %n.addr, align 4, !dbg !8101
  %cmp = icmp sgt i32 %10, 0, !dbg !8103
  br i1 %cmp, label %if.then, label %if.else, !dbg !8104

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8105, metadata !DIExpression()), !dbg !8107
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8108, metadata !DIExpression()), !dbg !8109
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !8110, metadata !DIExpression()), !dbg !8111
  %11 = load i32, i32* %nargs, align 4, !dbg !8112
  %conv6 = sext i32 %11 to i64, !dbg !8112
  %mul = mul i64 8, %conv6, !dbg !8112
  %12 = alloca i8, i64 %mul, align 16, !dbg !8112
  %13 = bitcast i8* %12 to %union.tree_node**, !dbg !8112
  store %union.tree_node** %13, %union.tree_node*** %buffer, align 8, !dbg !8113
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8114
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8114
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8114
  store i32 0, i32* %i, align 4, !dbg !8115
  br label %for.cond, !dbg !8117

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = load i32, i32* %i, align 4, !dbg !8118
  %15 = load i32, i32* %n.addr, align 4, !dbg !8120
  %cmp8 = icmp slt i32 %14, %15, !dbg !8121
  br i1 %cmp8, label %for.body, label %for.end, !dbg !8122

for.body:                                         ; preds = %for.cond
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8123
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay10, i32 0, i32 0, !dbg !8123
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !8123
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8123
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8123

vaarg.in_reg:                                     ; preds = %for.body
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay10, i32 0, i32 3, !dbg !8123
  %reg_save_area = load i8*, i8** %16, align 16, !dbg !8123
  %17 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8123
  %18 = bitcast i8* %17 to %union.tree_node**, !dbg !8123
  %19 = add i32 %gp_offset, 8, !dbg !8123
  store i32 %19, i32* %gp_offset_p, align 16, !dbg !8123
  br label %vaarg.end, !dbg !8123

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay10, i32 0, i32 2, !dbg !8123
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8123
  %20 = bitcast i8* %overflow_arg_area to %union.tree_node**, !dbg !8123
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8123
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8123
  br label %vaarg.end, !dbg !8123

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %union.tree_node** [ %18, %vaarg.in_reg ], [ %20, %vaarg.in_mem ], !dbg !8123
  %21 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !8123
  %22 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8124
  %23 = load i32, i32* %i, align 4, !dbg !8125
  %idxprom = sext i32 %23 to i64, !dbg !8124
  %arrayidx11 = getelementptr inbounds %union.tree_node*, %union.tree_node** %22, i64 %idxprom, !dbg !8124
  store %union.tree_node* %21, %union.tree_node** %arrayidx11, align 8, !dbg !8126
  br label %for.inc, !dbg !8124

for.inc:                                          ; preds = %vaarg.end
  %24 = load i32, i32* %i, align 4, !dbg !8127
  %inc = add nsw i32 %24, 1, !dbg !8127
  store i32 %inc, i32* %i, align 4, !dbg !8127
  br label %for.cond, !dbg !8128, !llvm.loop !8129

for.end:                                          ; preds = %for.cond
  %arraydecay12 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8131
  %arraydecay1213 = bitcast %struct.__va_list_tag* %arraydecay12 to i8*, !dbg !8131
  call void @llvm.va_end(i8* %arraydecay1213), !dbg !8131
  %25 = load i32, i32* %skip.addr, align 4, !dbg !8132
  store i32 %25, i32* %j, align 4, !dbg !8134
  br label %for.cond14, !dbg !8135

for.cond14:                                       ; preds = %for.inc25, %for.end
  %26 = load i32, i32* %j, align 4, !dbg !8136
  %27 = load i32, i32* %oldnargs, align 4, !dbg !8138
  %cmp15 = icmp slt i32 %26, %27, !dbg !8139
  br i1 %cmp15, label %for.body17, label %for.end28, !dbg !8140

for.body17:                                       ; preds = %for.cond14
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8141
  %exp18 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !8141
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !8141
  %29 = load i32, i32* %j, align 4, !dbg !8141
  %add20 = add nsw i32 %29, 3, !dbg !8141
  %idxprom21 = sext i32 %add20 to i64, !dbg !8141
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 %idxprom21, !dbg !8141
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !8141
  %31 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8142
  %32 = load i32, i32* %i, align 4, !dbg !8143
  %idxprom23 = sext i32 %32 to i64, !dbg !8142
  %arrayidx24 = getelementptr inbounds %union.tree_node*, %union.tree_node** %31, i64 %idxprom23, !dbg !8142
  store %union.tree_node* %30, %union.tree_node** %arrayidx24, align 8, !dbg !8144
  br label %for.inc25, !dbg !8142

for.inc25:                                        ; preds = %for.body17
  %33 = load i32, i32* %j, align 4, !dbg !8145
  %inc26 = add nsw i32 %33, 1, !dbg !8145
  store i32 %inc26, i32* %j, align 4, !dbg !8145
  %34 = load i32, i32* %i, align 4, !dbg !8146
  %inc27 = add nsw i32 %34, 1, !dbg !8146
  store i32 %inc27, i32* %i, align 4, !dbg !8146
  br label %for.cond14, !dbg !8147, !llvm.loop !8148

for.end28:                                        ; preds = %for.cond14
  br label %if.end, !dbg !8150

if.else:                                          ; preds = %entry
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8151
  %exp29 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !8151
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !8151
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 0, !dbg !8151
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %arrayidx31, i64 3, !dbg !8151
  %36 = load i32, i32* %skip.addr, align 4, !dbg !8152
  %idx.ext = sext i32 %36 to i64, !dbg !8153
  %add.ptr32 = getelementptr inbounds %union.tree_node*, %union.tree_node** %add.ptr, i64 %idx.ext, !dbg !8153
  store %union.tree_node** %add.ptr32, %union.tree_node*** %buffer, align 8, !dbg !8154
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end28
  %37 = load i32, i32* %loc.addr, align 4, !dbg !8155
  %38 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8156
  %common33 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !8156
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !8156
  %39 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !8156
  %40 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8157
  %41 = load i32, i32* %nargs, align 4, !dbg !8158
  %42 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8159
  %call35 = call %union.tree_node* @build_call_array_loc(i32 %37, %union.tree_node* %39, %union.tree_node* %40, i32 %41, %union.tree_node** %42), !dbg !8160
  %call36 = call %union.tree_node* @fold(%union.tree_node* %call35), !dbg !8161
  ret %union.tree_node* %call36, !dbg !8162
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_fold_builtin_snprintf_chk(%union.gimple_statement_d* %stmt, %union.tree_node* %maxlen, i32 %fcode) #0 !dbg !8163 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %maxlen.addr = alloca %union.tree_node*, align 8
  %fcode.addr = alloca i32, align 4
  %dest = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fmt = alloca %union.tree_node*, align 8
  %flag = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8166, metadata !DIExpression()), !dbg !8167
  store %union.tree_node* %maxlen, %union.tree_node** %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxlen.addr, metadata !8168, metadata !DIExpression()), !dbg !8169
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !8170, metadata !DIExpression()), !dbg !8171
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !8172, metadata !DIExpression()), !dbg !8173
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !8174, metadata !DIExpression()), !dbg !8175
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !8176, metadata !DIExpression()), !dbg !8177
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8178, metadata !DIExpression()), !dbg !8179
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt, metadata !8180, metadata !DIExpression()), !dbg !8181
  call void @llvm.dbg.declare(metadata %union.tree_node** %flag, metadata !8182, metadata !DIExpression()), !dbg !8183
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !8184, metadata !DIExpression()), !dbg !8185
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8186
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !8188
  %cmp = icmp ult i32 %call, 5, !dbg !8189
  br i1 %cmp, label %if.then, label %if.end, !dbg !8190

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8191
  br label %return, !dbg !8191

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8192
  %call1 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %1, i32 0), !dbg !8193
  store %union.tree_node* %call1, %union.tree_node** %dest, align 8, !dbg !8194
  %2 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8195
  %call2 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 10), !dbg !8197
  %tobool = icmp ne i8 %call2, 0, !dbg !8197
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !8198

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8199
  br label %return, !dbg !8199

if.end4:                                          ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8200
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %3, i32 1), !dbg !8201
  store %union.tree_node* %call5, %union.tree_node** %len, align 8, !dbg !8202
  %4 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !8203
  %call6 = call zeroext i8 @validate_arg(%union.tree_node* %4, i32 8), !dbg !8205
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8205
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !8206

if.then8:                                         ; preds = %if.end4
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8207
  br label %return, !dbg !8207

if.end9:                                          ; preds = %if.end4
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8208
  %call10 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %5, i32 2), !dbg !8209
  store %union.tree_node* %call10, %union.tree_node** %flag, align 8, !dbg !8210
  %6 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !8211
  %call11 = call zeroext i8 @validate_arg(%union.tree_node* %6, i32 8), !dbg !8213
  %tobool12 = icmp ne i8 %call11, 0, !dbg !8213
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !8214

if.then13:                                        ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8215
  br label %return, !dbg !8215

if.end14:                                         ; preds = %if.end9
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8216
  %call15 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 3), !dbg !8217
  store %union.tree_node* %call15, %union.tree_node** %size, align 8, !dbg !8218
  %8 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !8219
  %call16 = call zeroext i8 @validate_arg(%union.tree_node* %8, i32 8), !dbg !8221
  %tobool17 = icmp ne i8 %call16, 0, !dbg !8221
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !8222

if.then18:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8223
  br label %return, !dbg !8223

if.end19:                                         ; preds = %if.end14
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8224
  %call20 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %9, i32 4), !dbg !8225
  store %union.tree_node* %call20, %union.tree_node** %fmt, align 8, !dbg !8226
  %10 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !8227
  %call21 = call zeroext i8 @validate_arg(%union.tree_node* %10, i32 10), !dbg !8229
  %tobool22 = icmp ne i8 %call21, 0, !dbg !8229
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !8230

if.then23:                                        ; preds = %if.end19
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8231
  br label %return, !dbg !8231

if.end24:                                         ; preds = %if.end19
  %11 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !8232
  %call25 = call i32 @host_integerp(%union.tree_node* %11, i32 1), !dbg !8234
  %tobool26 = icmp ne i32 %call25, 0, !dbg !8234
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !8235

if.then27:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8236
  br label %return, !dbg !8236

if.end28:                                         ; preds = %if.end24
  %12 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !8237
  %call29 = call i32 @integer_all_onesp(%union.tree_node* %12), !dbg !8239
  %tobool30 = icmp ne i32 %call29, 0, !dbg !8239
  br i1 %tobool30, label %if.end45, label %if.then31, !dbg !8240

if.then31:                                        ; preds = %if.end28
  %13 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !8241
  %call32 = call i32 @host_integerp(%union.tree_node* %13, i32 1), !dbg !8244
  %tobool33 = icmp ne i32 %call32, 0, !dbg !8244
  br i1 %tobool33, label %if.else, label %if.then34, !dbg !8245

if.then34:                                        ; preds = %if.then31
  %14 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !8246
  %cmp35 = icmp eq %union.tree_node* %14, null, !dbg !8249
  br i1 %cmp35, label %if.then38, label %lor.lhs.false, !dbg !8250

lor.lhs.false:                                    ; preds = %if.then34
  %15 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !8251
  %call36 = call i32 @host_integerp(%union.tree_node* %15, i32 1), !dbg !8252
  %tobool37 = icmp ne i32 %call36, 0, !dbg !8252
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !8253

if.then38:                                        ; preds = %lor.lhs.false, %if.then34
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8254
  br label %return, !dbg !8254

if.end39:                                         ; preds = %lor.lhs.false
  br label %if.end40, !dbg !8255

if.else:                                          ; preds = %if.then31
  %16 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !8256
  store %union.tree_node* %16, %union.tree_node** %maxlen.addr, align 8, !dbg !8257
  br label %if.end40

if.end40:                                         ; preds = %if.else, %if.end39
  %17 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !8258
  %18 = load %union.tree_node*, %union.tree_node** %maxlen.addr, align 8, !dbg !8260
  %call41 = call i32 @tree_int_cst_lt(%union.tree_node* %17, %union.tree_node* %18), !dbg !8261
  %tobool42 = icmp ne i32 %call41, 0, !dbg !8261
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !8262

if.then43:                                        ; preds = %if.end40
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8263
  br label %return, !dbg !8263

if.end44:                                         ; preds = %if.end40
  br label %if.end45, !dbg !8264

if.end45:                                         ; preds = %if.end44, %if.end28
  %call46 = call zeroext i8 @init_target_chars(), !dbg !8265
  %tobool47 = icmp ne i8 %call46, 0, !dbg !8265
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !8267

if.then48:                                        ; preds = %if.end45
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8268
  br label %return, !dbg !8268

if.end49:                                         ; preds = %if.end45
  %19 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !8269
  %call50 = call i32 @integer_zerop(%union.tree_node* %19), !dbg !8271
  %tobool51 = icmp ne i32 %call50, 0, !dbg !8271
  br i1 %tobool51, label %if.end64, label %if.then52, !dbg !8272

if.then52:                                        ; preds = %if.end49
  %20 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !8273
  %call53 = call i8* @c_getstr(%union.tree_node* %20), !dbg !8275
  store i8* %call53, i8** %fmt_str, align 8, !dbg !8276
  %21 = load i8*, i8** %fmt_str, align 8, !dbg !8277
  %cmp54 = icmp eq i8* %21, null, !dbg !8279
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !8280

if.then55:                                        ; preds = %if.then52
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8281
  br label %return, !dbg !8281

if.end56:                                         ; preds = %if.then52
  %22 = load i8*, i8** %fmt_str, align 8, !dbg !8282
  %23 = load i64, i64* @target_percent, align 8, !dbg !8284
  %conv = trunc i64 %23 to i32, !dbg !8284
  %call57 = call i8* @strchr(i8* %22, i32 %conv), !dbg !8285
  %cmp58 = icmp ne i8* %call57, null, !dbg !8286
  br i1 %cmp58, label %land.lhs.true, label %if.end63, !dbg !8287

land.lhs.true:                                    ; preds = %if.end56
  %24 = load i8*, i8** %fmt_str, align 8, !dbg !8288
  %call60 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !8289
  %tobool61 = icmp ne i32 %call60, 0, !dbg !8289
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !8290

if.then62:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8291
  br label %return, !dbg !8291

if.end63:                                         ; preds = %land.lhs.true, %if.end56
  br label %if.end64, !dbg !8292

if.end64:                                         ; preds = %if.end63, %if.end49
  %25 = load i32, i32* %fcode.addr, align 4, !dbg !8293
  %cmp65 = icmp eq i32 %25, 540, !dbg !8294
  %26 = zext i1 %cmp65 to i64, !dbg !8293
  %cond = select i1 %cmp65, i32 379, i32 372, !dbg !8293
  %idxprom = sext i32 %cond to i64, !dbg !8295
  %arrayidx = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !8295
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8295
  store %union.tree_node* %27, %union.tree_node** %fn, align 8, !dbg !8296
  %28 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8297
  %tobool67 = icmp ne %union.tree_node* %28, null, !dbg !8297
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !8299

if.then68:                                        ; preds = %if.end64
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8300
  br label %return, !dbg !8300

if.end69:                                         ; preds = %if.end64
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8301
  %30 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8302
  %31 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8303
  %32 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !8304
  %33 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !8305
  %call70 = call %union.tree_node* (%union.gimple_statement_d*, i32, %union.tree_node*, i32, ...) @gimple_rewrite_call_expr(%union.gimple_statement_d* %29, i32 5, %union.tree_node* %30, i32 3, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !8306
  store %union.tree_node* %call70, %union.tree_node** %retval, align 8, !dbg !8307
  br label %return, !dbg !8307

return:                                           ; preds = %if.end69, %if.then68, %if.then62, %if.then55, %if.then48, %if.then43, %if.then38, %if.then27, %if.then23, %if.then18, %if.then13, %if.then8, %if.then3, %if.then
  %34 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8308
  ret %union.tree_node* %34, !dbg !8308
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_rewrite_call_expr(%union.gimple_statement_d* %stmt, i32 %skip, %union.tree_node* %fndecl, i32 %n, ...) #0 !dbg !8309 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %skip.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %n.addr = alloca i32, align 4
  %oldnargs = alloca i32, align 4
  %nargs = alloca i32, align 4
  %fntype = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %buffer = alloca %union.tree_node**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %loc = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8312, metadata !DIExpression()), !dbg !8313
  store i32 %skip, i32* %skip.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %skip.addr, metadata !8314, metadata !DIExpression()), !dbg !8315
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8316, metadata !DIExpression()), !dbg !8317
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8318, metadata !DIExpression()), !dbg !8319
  call void @llvm.dbg.declare(metadata i32* %oldnargs, metadata !8320, metadata !DIExpression()), !dbg !8321
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8322
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !8323
  store i32 %call, i32* %oldnargs, align 4, !dbg !8321
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !8324, metadata !DIExpression()), !dbg !8325
  %1 = load i32, i32* %oldnargs, align 4, !dbg !8326
  %2 = load i32, i32* %skip.addr, align 4, !dbg !8327
  %sub = sub nsw i32 %1, %2, !dbg !8328
  %3 = load i32, i32* %n.addr, align 4, !dbg !8329
  %add = add nsw i32 %sub, %3, !dbg !8330
  store i32 %add, i32* %nargs, align 4, !dbg !8325
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !8331, metadata !DIExpression()), !dbg !8332
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8333
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !8333
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8333
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8333
  store %union.tree_node* %5, %union.tree_node** %fntype, align 8, !dbg !8332
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8334, metadata !DIExpression()), !dbg !8335
  %6 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !8336
  %call1 = call %union.tree_node* @build_pointer_type(%union.tree_node* %6), !dbg !8336
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8336
  %call2 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %call1, %union.tree_node* %7), !dbg !8336
  store %union.tree_node* %call2, %union.tree_node** %fn, align 8, !dbg !8335
  call void @llvm.dbg.declare(metadata %union.tree_node*** %buffer, metadata !8337, metadata !DIExpression()), !dbg !8338
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8339, metadata !DIExpression()), !dbg !8340
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8341, metadata !DIExpression()), !dbg !8342
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !8343, metadata !DIExpression()), !dbg !8344
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8345, metadata !DIExpression()), !dbg !8346
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8347
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %8), !dbg !8348
  store i32 %call3, i32* %loc, align 4, !dbg !8346
  %9 = load i32, i32* %nargs, align 4, !dbg !8349
  %conv = sext i32 %9 to i64, !dbg !8349
  %mul = mul i64 8, %conv, !dbg !8349
  %10 = alloca i8, i64 %mul, align 16, !dbg !8349
  %11 = bitcast i8* %10 to %union.tree_node**, !dbg !8349
  store %union.tree_node** %11, %union.tree_node*** %buffer, align 8, !dbg !8350
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8351
  %arraydecay4 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8351
  call void @llvm.va_start(i8* %arraydecay4), !dbg !8351
  store i32 0, i32* %i, align 4, !dbg !8352
  br label %for.cond, !dbg !8354

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %i, align 4, !dbg !8355
  %13 = load i32, i32* %n.addr, align 4, !dbg !8357
  %cmp = icmp slt i32 %12, %13, !dbg !8358
  br i1 %cmp, label %for.body, label %for.end, !dbg !8359

for.body:                                         ; preds = %for.cond
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8360
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 0, !dbg !8360
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !8360
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8360
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8360

vaarg.in_reg:                                     ; preds = %for.body
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 3, !dbg !8360
  %reg_save_area = load i8*, i8** %14, align 16, !dbg !8360
  %15 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8360
  %16 = bitcast i8* %15 to %union.tree_node**, !dbg !8360
  %17 = add i32 %gp_offset, 8, !dbg !8360
  store i32 %17, i32* %gp_offset_p, align 16, !dbg !8360
  br label %vaarg.end, !dbg !8360

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 2, !dbg !8360
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8360
  %18 = bitcast i8* %overflow_arg_area to %union.tree_node**, !dbg !8360
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8360
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8360
  br label %vaarg.end, !dbg !8360

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %union.tree_node** [ %16, %vaarg.in_reg ], [ %18, %vaarg.in_mem ], !dbg !8360
  %19 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !8360
  %20 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8361
  %21 = load i32, i32* %i, align 4, !dbg !8362
  %idxprom = sext i32 %21 to i64, !dbg !8361
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %20, i64 %idxprom, !dbg !8361
  store %union.tree_node* %19, %union.tree_node** %arrayidx, align 8, !dbg !8363
  br label %for.inc, !dbg !8361

for.inc:                                          ; preds = %vaarg.end
  %22 = load i32, i32* %i, align 4, !dbg !8364
  %inc = add nsw i32 %22, 1, !dbg !8364
  store i32 %inc, i32* %i, align 4, !dbg !8364
  br label %for.cond, !dbg !8365, !llvm.loop !8366

for.end:                                          ; preds = %for.cond
  %arraydecay7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8368
  %arraydecay78 = bitcast %struct.__va_list_tag* %arraydecay7 to i8*, !dbg !8368
  call void @llvm.va_end(i8* %arraydecay78), !dbg !8368
  %23 = load i32, i32* %skip.addr, align 4, !dbg !8369
  store i32 %23, i32* %j, align 4, !dbg !8371
  br label %for.cond9, !dbg !8372

for.cond9:                                        ; preds = %for.inc16, %for.end
  %24 = load i32, i32* %j, align 4, !dbg !8373
  %25 = load i32, i32* %oldnargs, align 4, !dbg !8375
  %cmp10 = icmp slt i32 %24, %25, !dbg !8376
  br i1 %cmp10, label %for.body12, label %for.end19, !dbg !8377

for.body12:                                       ; preds = %for.cond9
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8378
  %27 = load i32, i32* %j, align 4, !dbg !8379
  %call13 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %26, i32 %27), !dbg !8380
  %28 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8381
  %29 = load i32, i32* %i, align 4, !dbg !8382
  %idxprom14 = sext i32 %29 to i64, !dbg !8381
  %arrayidx15 = getelementptr inbounds %union.tree_node*, %union.tree_node** %28, i64 %idxprom14, !dbg !8381
  store %union.tree_node* %call13, %union.tree_node** %arrayidx15, align 8, !dbg !8383
  br label %for.inc16, !dbg !8381

for.inc16:                                        ; preds = %for.body12
  %30 = load i32, i32* %j, align 4, !dbg !8384
  %inc17 = add nsw i32 %30, 1, !dbg !8384
  store i32 %inc17, i32* %j, align 4, !dbg !8384
  %31 = load i32, i32* %i, align 4, !dbg !8385
  %inc18 = add nsw i32 %31, 1, !dbg !8385
  store i32 %inc18, i32* %i, align 4, !dbg !8385
  br label %for.cond9, !dbg !8386, !llvm.loop !8387

for.end19:                                        ; preds = %for.cond9
  %32 = load i32, i32* %loc, align 4, !dbg !8389
  %33 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !8390
  %common20 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !8390
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !8390
  %34 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !8390
  %35 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8391
  %36 = load i32, i32* %nargs, align 4, !dbg !8392
  %37 = load %union.tree_node**, %union.tree_node*** %buffer, align 8, !dbg !8393
  %call22 = call %union.tree_node* @build_call_array_loc(i32 %32, %union.tree_node* %34, %union.tree_node* %35, i32 %36, %union.tree_node** %37), !dbg !8394
  %call23 = call %union.tree_node* @fold(%union.tree_node* %call22), !dbg !8395
  ret %union.tree_node* %call23, !dbg !8396
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_call_stmt(%union.gimple_statement_d* %stmt, i8 zeroext %ignore) #0 !dbg !8397 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ignore.addr = alloca i8, align 1
  %ret = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %nargs = alloca i32, align 4
  %arglist = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %args = alloca [4 x %union.tree_node*], align 16
  %i26 = alloca i32, align 4
  %realret = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8400, metadata !DIExpression()), !dbg !8401
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !8402, metadata !DIExpression()), !dbg !8403
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !8404, metadata !DIExpression()), !dbg !8405
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !8405
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !8406, metadata !DIExpression()), !dbg !8407
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8408
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %0), !dbg !8409
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !8407
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8410, metadata !DIExpression()), !dbg !8411
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8412
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !8413
  store i32 %call1, i32* %loc, align 4, !dbg !8411
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8414
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8414
  br i1 %tobool, label %land.lhs.true, label %if.end94, !dbg !8416

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8417
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8417
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8417
  %bf.load = load i64, i64* %4, align 8, !dbg !8417
  %bf.clear = and i64 %bf.load, 65535, !dbg !8417
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8417
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !8418
  br i1 %cmp, label %land.lhs.true2, label %if.end94, !dbg !8419

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8420
  %function_decl = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !8420
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8420
  %bf.load3 = load i32, i32* %built_in_class, align 8, !dbg !8420
  %bf.lshr = lshr i32 %bf.load3, 11, !dbg !8420
  %bf.clear4 = and i32 %bf.lshr, 3, !dbg !8420
  %cmp5 = icmp ne i32 %bf.clear4, 0, !dbg !8420
  br i1 %cmp5, label %land.lhs.true6, label %if.end94, !dbg !8421

land.lhs.true6:                                   ; preds = %land.lhs.true2
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8422
  %call7 = call zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %6), !dbg !8423
  %tobool8 = icmp ne i8 %call7, 0, !dbg !8423
  br i1 %tobool8, label %if.end94, label %if.then, !dbg !8424

if.then:                                          ; preds = %land.lhs.true6
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !8425, metadata !DIExpression()), !dbg !8427
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8428
  %call9 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %7), !dbg !8429
  store i32 %call9, i32* %nargs, align 4, !dbg !8427
  %8 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8430
  %call10 = call zeroext i8 @avoid_folding_inline_builtin(%union.tree_node* %8), !dbg !8432
  %tobool11 = icmp ne i8 %call10, 0, !dbg !8432
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !8433

if.then12:                                        ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8434
  br label %return, !dbg !8434

if.end:                                           ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8435
  %function_decl13 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !8435
  %built_in_class14 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl13, i32 0, i32 5, !dbg !8435
  %bf.load15 = load i32, i32* %built_in_class14, align 8, !dbg !8435
  %bf.lshr16 = lshr i32 %bf.load15, 11, !dbg !8435
  %bf.clear17 = and i32 %bf.lshr16, 3, !dbg !8435
  %cmp18 = icmp eq i32 %bf.clear17, 2, !dbg !8437
  br i1 %cmp18, label %if.then19, label %if.else, !dbg !8438

if.then19:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %arglist, metadata !8439, metadata !DIExpression()), !dbg !8441
  store %union.tree_node* null, %union.tree_node** %arglist, align 8, !dbg !8441
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8442, metadata !DIExpression()), !dbg !8443
  %10 = load i32, i32* %nargs, align 4, !dbg !8444
  %sub = sub nsw i32 %10, 1, !dbg !8446
  store i32 %sub, i32* %i, align 4, !dbg !8447
  br label %for.cond, !dbg !8448

for.cond:                                         ; preds = %for.inc, %if.then19
  %11 = load i32, i32* %i, align 4, !dbg !8449
  %cmp20 = icmp sge i32 %11, 0, !dbg !8451
  br i1 %cmp20, label %for.body, label %for.end, !dbg !8452

for.body:                                         ; preds = %for.cond
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8453
  %13 = load i32, i32* %i, align 4, !dbg !8453
  %call21 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %12, i32 %13), !dbg !8453
  %14 = load %union.tree_node*, %union.tree_node** %arglist, align 8, !dbg !8453
  %call22 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call21, %union.tree_node* %14), !dbg !8453
  store %union.tree_node* %call22, %union.tree_node** %arglist, align 8, !dbg !8454
  br label %for.inc, !dbg !8455

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !8456
  %dec = add nsw i32 %15, -1, !dbg !8456
  store i32 %dec, i32* %i, align 4, !dbg !8456
  br label %for.cond, !dbg !8457, !llvm.loop !8458

for.end:                                          ; preds = %for.cond
  %16 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 27), align 8, !dbg !8460
  %17 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8461
  %18 = load %union.tree_node*, %union.tree_node** %arglist, align 8, !dbg !8462
  %19 = load i8, i8* %ignore.addr, align 1, !dbg !8463
  %call23 = call %union.tree_node* %16(%union.tree_node* %17, %union.tree_node* %18, i8 zeroext %19), !dbg !8464
  store %union.tree_node* %call23, %union.tree_node** %retval, align 8, !dbg !8465
  br label %return, !dbg !8465

if.else:                                          ; preds = %if.end
  %20 = load i32, i32* %nargs, align 4, !dbg !8466
  %cmp24 = icmp sle i32 %20, 4, !dbg !8469
  br i1 %cmp24, label %if.then25, label %if.end34, !dbg !8470

if.then25:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata [4 x %union.tree_node*]* %args, metadata !8471, metadata !DIExpression()), !dbg !8474
  call void @llvm.dbg.declare(metadata i32* %i26, metadata !8475, metadata !DIExpression()), !dbg !8476
  store i32 0, i32* %i26, align 4, !dbg !8477
  br label %for.cond27, !dbg !8479

for.cond27:                                       ; preds = %for.inc31, %if.then25
  %21 = load i32, i32* %i26, align 4, !dbg !8480
  %22 = load i32, i32* %nargs, align 4, !dbg !8482
  %cmp28 = icmp slt i32 %21, %22, !dbg !8483
  br i1 %cmp28, label %for.body29, label %for.end32, !dbg !8484

for.body29:                                       ; preds = %for.cond27
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8485
  %24 = load i32, i32* %i26, align 4, !dbg !8486
  %call30 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %23, i32 %24), !dbg !8487
  %25 = load i32, i32* %i26, align 4, !dbg !8488
  %idxprom = sext i32 %25 to i64, !dbg !8489
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %args, i64 0, i64 %idxprom, !dbg !8489
  store %union.tree_node* %call30, %union.tree_node** %arrayidx, align 8, !dbg !8490
  br label %for.inc31, !dbg !8489

for.inc31:                                        ; preds = %for.body29
  %26 = load i32, i32* %i26, align 4, !dbg !8491
  %inc = add nsw i32 %26, 1, !dbg !8491
  store i32 %inc, i32* %i26, align 4, !dbg !8491
  br label %for.cond27, !dbg !8492, !llvm.loop !8493

for.end32:                                        ; preds = %for.cond27
  %27 = load i32, i32* %loc, align 4, !dbg !8495
  %28 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8496
  %arraydecay = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %args, i64 0, i64 0, !dbg !8497
  %29 = load i32, i32* %nargs, align 4, !dbg !8498
  %30 = load i8, i8* %ignore.addr, align 1, !dbg !8499
  %call33 = call %union.tree_node* @fold_builtin_n(i32 %27, %union.tree_node* %28, %union.tree_node** %arraydecay, i32 %29, i8 zeroext %30), !dbg !8500
  store %union.tree_node* %call33, %union.tree_node** %ret, align 8, !dbg !8501
  br label %if.end34, !dbg !8502

if.end34:                                         ; preds = %for.end32, %if.else
  %31 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8503
  %tobool35 = icmp ne %union.tree_node* %31, null, !dbg !8503
  br i1 %tobool35, label %if.end38, label %if.then36, !dbg !8505

if.then36:                                        ; preds = %if.end34
  %32 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8506
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8507
  %34 = load i8, i8* %ignore.addr, align 1, !dbg !8508
  %call37 = call %union.tree_node* @gimple_fold_builtin_varargs(%union.tree_node* %32, %union.gimple_statement_d* %33, i8 zeroext %34), !dbg !8509
  store %union.tree_node* %call37, %union.tree_node** %ret, align 8, !dbg !8510
  br label %if.end38, !dbg !8511

if.end38:                                         ; preds = %if.then36, %if.end34
  %35 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8512
  %tobool39 = icmp ne %union.tree_node* %35, null, !dbg !8512
  br i1 %tobool39, label %if.then40, label %if.end92, !dbg !8514

if.then40:                                        ; preds = %if.end38
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8515
  %call41 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %36), !dbg !8518
  %tobool42 = icmp ne i8 %call41, 0, !dbg !8518
  br i1 %tobool42, label %if.then43, label %if.end91, !dbg !8519

if.then43:                                        ; preds = %if.then40
  call void @llvm.dbg.declare(metadata %union.tree_node** %realret, metadata !8520, metadata !DIExpression()), !dbg !8522
  %37 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8523
  store %union.tree_node* %37, %union.tree_node** %realret, align 8, !dbg !8522
  %38 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8524
  %base44 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8524
  %39 = bitcast %struct.tree_base* %base44 to i64*, !dbg !8524
  %bf.load45 = load i64, i64* %39, align 8, !dbg !8524
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !8524
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !8524
  %cmp48 = icmp eq i32 %bf.cast47, 116, !dbg !8526
  br i1 %cmp48, label %if.then49, label %if.end51, !dbg !8527

if.then49:                                        ; preds = %if.then43
  %40 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8528
  %exp = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !8528
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8528
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8528
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !8528
  store %union.tree_node* %41, %union.tree_node** %realret, align 8, !dbg !8529
  br label %if.end51, !dbg !8530

if.end51:                                         ; preds = %if.then49, %if.then43
  %42 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8531
  %tobool52 = icmp ne %union.tree_node* %42, null, !dbg !8531
  br i1 %tobool52, label %land.lhs.true53, label %if.end90, !dbg !8531

land.lhs.true53:                                  ; preds = %if.end51
  %43 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8531
  %base54 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !8531
  %44 = bitcast %struct.tree_base* %base54 to i64*, !dbg !8531
  %bf.load55 = load i64, i64* %44, align 8, !dbg !8531
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !8531
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !8531
  %idxprom58 = sext i32 %bf.cast57 to i64, !dbg !8531
  %arrayidx59 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom58, !dbg !8531
  %45 = load i32, i32* %arrayidx59, align 4, !dbg !8531
  %cmp60 = icmp uge i32 %45, 4, !dbg !8531
  br i1 %cmp60, label %land.lhs.true61, label %if.end90, !dbg !8531

land.lhs.true61:                                  ; preds = %land.lhs.true53
  %46 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8531
  %base62 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !8531
  %47 = bitcast %struct.tree_base* %base62 to i64*, !dbg !8531
  %bf.load63 = load i64, i64* %47, align 8, !dbg !8531
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !8531
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !8531
  %idxprom66 = sext i32 %bf.cast65 to i64, !dbg !8531
  %arrayidx67 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom66, !dbg !8531
  %48 = load i32, i32* %arrayidx67, align 4, !dbg !8531
  %cmp68 = icmp ule i32 %48, 10, !dbg !8531
  br i1 %cmp68, label %land.lhs.true69, label %if.end90, !dbg !8533

land.lhs.true69:                                  ; preds = %land.lhs.true61
  %49 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8534
  %base70 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !8534
  %50 = bitcast %struct.tree_base* %base70 to i64*, !dbg !8534
  %bf.load71 = load i64, i64* %50, align 8, !dbg !8534
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !8534
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !8534
  %idxprom74 = sext i32 %bf.cast73 to i64, !dbg !8534
  %arrayidx75 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom74, !dbg !8534
  %51 = load i32, i32* %arrayidx75, align 4, !dbg !8534
  %cmp76 = icmp uge i32 %51, 4, !dbg !8534
  br i1 %cmp76, label %land.lhs.true77, label %cond.false, !dbg !8534

land.lhs.true77:                                  ; preds = %land.lhs.true69
  %52 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8534
  %base78 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !8534
  %53 = bitcast %struct.tree_base* %base78 to i64*, !dbg !8534
  %bf.load79 = load i64, i64* %53, align 8, !dbg !8534
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !8534
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !8534
  %idxprom82 = sext i32 %bf.cast81 to i64, !dbg !8534
  %arrayidx83 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom82, !dbg !8534
  %54 = load i32, i32* %arrayidx83, align 4, !dbg !8534
  %cmp84 = icmp ule i32 %54, 10, !dbg !8534
  br i1 %cmp84, label %cond.true, label %cond.false, !dbg !8534

cond.true:                                        ; preds = %land.lhs.true77
  %55 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8534
  %exp85 = bitcast %union.tree_node* %55 to %struct.tree_exp*, !dbg !8534
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp85, i32 0, i32 1, !dbg !8534
  %56 = load i32, i32* %locus, align 8, !dbg !8534
  br label %cond.end, !dbg !8534

cond.false:                                       ; preds = %land.lhs.true77, %land.lhs.true69
  br label %cond.end, !dbg !8534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %56, %cond.true ], [ 0, %cond.false ], !dbg !8534
  %cmp86 = icmp ne i32 %cond, 0, !dbg !8534
  br i1 %cmp86, label %if.end90, label %if.then87, !dbg !8535

if.then87:                                        ; preds = %cond.end
  %57 = load i32, i32* %loc, align 4, !dbg !8536
  %58 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8536
  %exp88 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !8536
  %locus89 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp88, i32 0, i32 1, !dbg !8536
  store i32 %57, i32* %locus89, align 8, !dbg !8536
  br label %if.end90, !dbg !8536

if.end90:                                         ; preds = %if.then87, %cond.end, %land.lhs.true61, %land.lhs.true53, %if.end51
  %59 = load %union.tree_node*, %union.tree_node** %realret, align 8, !dbg !8537
  store %union.tree_node* %59, %union.tree_node** %retval, align 8, !dbg !8538
  br label %return, !dbg !8538

if.end91:                                         ; preds = %if.then40
  %60 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8539
  store %union.tree_node* %60, %union.tree_node** %retval, align 8, !dbg !8540
  br label %return, !dbg !8540

if.end92:                                         ; preds = %if.end38
  br label %if.end93

if.end93:                                         ; preds = %if.end92
  br label %if.end94, !dbg !8541

if.end94:                                         ; preds = %if.end93, %land.lhs.true6, %land.lhs.true2, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8542
  br label %return, !dbg !8542

return:                                           ; preds = %if.end94, %if.end91, %if.end90, %for.end, %if.then12
  %61 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8543
  ret %union.tree_node* %61, !dbg !8543
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !8544 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8547, metadata !DIExpression()), !dbg !8548
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !8549, metadata !DIExpression()), !dbg !8550
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8551
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !8552
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !8550
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8553
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8553
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8553
  %bf.load = load i64, i64* %2, align 8, !dbg !8553
  %bf.clear = and i64 %bf.load, 65535, !dbg !8553
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8553
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !8555
  br i1 %cmp, label %if.then, label %if.end, !dbg !8556

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8557
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !8557
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8557
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8557
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8557
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !8558
  br label %return, !dbg !8558

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8559
  br label %return, !dbg !8559

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8560
  ret %union.tree_node* %5, !dbg !8560
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !8561 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8564, metadata !DIExpression()), !dbg !8565
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8566
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8567
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !8568
  %1 = load i32, i32* %location, align 8, !dbg !8568
  ret i32 %1, !dbg !8569
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) #0 !dbg !8570 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8573, metadata !DIExpression()), !dbg !8574
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8575
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8576
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8577
  %bf.load = load i32, i32* %1, align 8, !dbg !8577
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8577
  %and = and i32 %bf.lshr, 16, !dbg !8578
  %cmp = icmp ne i32 %and, 0, !dbg !8579
  %conv = zext i1 %cmp to i32, !dbg !8579
  %conv1 = trunc i32 %conv to i8, !dbg !8580
  ret i8 %conv1, !dbg !8581
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_fold_builtin_varargs(%union.tree_node* %fndecl, %union.gimple_statement_d* %stmt, i8 zeroext %ignore) #0 !dbg !8582 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode = alloca i32, align 4
  %ret = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8585, metadata !DIExpression()), !dbg !8586
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8587, metadata !DIExpression()), !dbg !8588
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !8589, metadata !DIExpression()), !dbg !8590
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !8591, metadata !DIExpression()), !dbg !8592
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8593
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !8593
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8593
  %bf.load = load i32, i32* %function_code, align 8, !dbg !8593
  %bf.clear = and i32 %bf.load, 2047, !dbg !8593
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !8592
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !8594, metadata !DIExpression()), !dbg !8595
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !8595
  %1 = load i32, i32* %fcode, align 4, !dbg !8596
  switch i32 %1, label %sw.default [
    i32 539, label %sw.bb
    i32 541, label %sw.bb
    i32 538, label %sw.bb1
    i32 540, label %sw.bb1
  ], !dbg !8597

sw.bb:                                            ; preds = %entry, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8598
  %3 = load i32, i32* %fcode, align 4, !dbg !8600
  %call = call %union.tree_node* @gimple_fold_builtin_sprintf_chk(%union.gimple_statement_d* %2, i32 %3), !dbg !8601
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !8602
  br label %sw.epilog, !dbg !8603

sw.bb1:                                           ; preds = %entry, %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8604
  %5 = load i32, i32* %fcode, align 4, !dbg !8605
  %call2 = call %union.tree_node* @gimple_fold_builtin_snprintf_chk(%union.gimple_statement_d* %4, %union.tree_node* null, i32 %5), !dbg !8606
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !8607
  br label %sw.default, !dbg !8608

sw.default:                                       ; preds = %entry, %sw.bb1
  br label %sw.epilog, !dbg !8609

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8610
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !8610
  br i1 %tobool, label %if.then, label %if.end, !dbg !8612

if.then:                                          ; preds = %sw.epilog
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8613
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !8613
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8613
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8613
  %9 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8613
  %call3 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %8, %union.tree_node* %9), !dbg !8613
  store %union.tree_node* %call3, %union.tree_node** %ret, align 8, !dbg !8615
  %10 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8616
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8616
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !8616
  %bf.load4 = load i64, i64* %11, align 8, !dbg !8617
  %bf.clear5 = and i64 %bf.load4, -8388609, !dbg !8617
  %bf.set = or i64 %bf.clear5, 8388608, !dbg !8617
  store i64 %bf.set, i64* %11, align 8, !dbg !8617
  %12 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8618
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !8619
  br label %return, !dbg !8619

if.end:                                           ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8620
  br label %return, !dbg !8620

return:                                           ; preds = %if.end, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8621
  ret %union.tree_node* %13, !dbg !8621
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !8622 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8625, metadata !DIExpression()), !dbg !8626
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8627
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !8628
  %cmp = icmp ne i32 %call, 0, !dbg !8629
  %conv = zext i1 %cmp to i32, !dbg !8629
  %conv1 = trunc i32 %conv to i8, !dbg !8628
  ret i8 %conv1, !dbg !8630
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_builtin_user_assembler_name(%union.tree_node* %decl, i8* %asmspec) #0 !dbg !8631 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %asmspec.addr = alloca i8*, align 8
  %builtin = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8634, metadata !DIExpression()), !dbg !8635
  store i8* %asmspec, i8** %asmspec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %asmspec.addr, metadata !8636, metadata !DIExpression()), !dbg !8637
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtin, metadata !8638, metadata !DIExpression()), !dbg !8639
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8640
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8640
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8640
  %bf.load = load i64, i64* %1, align 8, !dbg !8640
  %bf.clear = and i64 %bf.load, 65535, !dbg !8640
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8640
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !8640
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8640

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8640
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !8640
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8640
  %bf.load1 = load i32, i32* %built_in_class, align 8, !dbg !8640
  %bf.lshr = lshr i32 %bf.load1, 11, !dbg !8640
  %bf.clear2 = and i32 %bf.lshr, 3, !dbg !8640
  %cmp3 = icmp eq i32 %bf.clear2, 3, !dbg !8640
  br i1 %cmp3, label %land.lhs.true4, label %cond.true, !dbg !8640

land.lhs.true4:                                   ; preds = %land.lhs.true
  %3 = load i8*, i8** %asmspec.addr, align 8, !dbg !8640
  %cmp5 = icmp ne i8* %3, null, !dbg !8640
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !8640

cond.true:                                        ; preds = %land.lhs.true4, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 13869, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !8640
  br label %cond.end, !dbg !8640

cond.false:                                       ; preds = %land.lhs.true4
  br label %cond.end, !dbg !8640

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8640
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8641
  %function_decl6 = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !8641
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl6, i32 0, i32 5, !dbg !8641
  %bf.load7 = load i32, i32* %function_code, align 8, !dbg !8641
  %bf.clear8 = and i32 %bf.load7, 2047, !dbg !8641
  %idxprom = zext i32 %bf.clear8 to i64, !dbg !8642
  %arrayidx = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !8642
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8642
  store %union.tree_node* %5, %union.tree_node** %builtin, align 8, !dbg !8643
  %6 = load %union.tree_node*, %union.tree_node** %builtin, align 8, !dbg !8644
  %7 = load i8*, i8** %asmspec.addr, align 8, !dbg !8645
  call void @set_user_assembler_name(%union.tree_node* %6, i8* %7), !dbg !8646
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8647
  %function_decl9 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !8647
  %function_code10 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl9, i32 0, i32 5, !dbg !8647
  %bf.load11 = load i32, i32* %function_code10, align 8, !dbg !8647
  %bf.clear12 = and i32 %bf.load11, 2047, !dbg !8647
  switch i32 %bf.clear12, label %sw.default [
    i32 330, label %sw.bb
    i32 333, label %sw.bb13
    i32 331, label %sw.bb15
    i32 329, label %sw.bb17
    i32 412, label %sw.bb19
    i32 449, label %sw.bb21
  ], !dbg !8648

sw.bb:                                            ; preds = %cond.end
  %9 = load i8*, i8** %asmspec.addr, align 8, !dbg !8649
  call void @init_block_move_fn(i8* %9), !dbg !8651
  %10 = load i8*, i8** %asmspec.addr, align 8, !dbg !8652
  %call = call %struct.rtx_def* @set_user_assembler_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.732, i64 0, i64 0), i8* %10), !dbg !8653
  store %struct.rtx_def* %call, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 1), align 8, !dbg !8654
  br label %sw.epilog, !dbg !8655

sw.bb13:                                          ; preds = %cond.end
  %11 = load i8*, i8** %asmspec.addr, align 8, !dbg !8656
  call void @init_block_clear_fn(i8* %11), !dbg !8657
  %12 = load i8*, i8** %asmspec.addr, align 8, !dbg !8658
  %call14 = call %struct.rtx_def* @set_user_assembler_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.733, i64 0, i64 0), i8* %12), !dbg !8659
  store %struct.rtx_def* %call14, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 4), align 16, !dbg !8660
  br label %sw.epilog, !dbg !8661

sw.bb15:                                          ; preds = %cond.end
  %13 = load i8*, i8** %asmspec.addr, align 8, !dbg !8662
  %call16 = call %struct.rtx_def* @set_user_assembler_libfunc(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.734, i64 0, i64 0), i8* %13), !dbg !8663
  store %struct.rtx_def* %call16, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 2), align 16, !dbg !8664
  br label %sw.epilog, !dbg !8665

sw.bb17:                                          ; preds = %cond.end
  %14 = load i8*, i8** %asmspec.addr, align 8, !dbg !8666
  %call18 = call %struct.rtx_def* @set_user_assembler_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.735, i64 0, i64 0), i8* %14), !dbg !8667
  store %struct.rtx_def* %call18, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 3), align 8, !dbg !8668
  br label %sw.epilog, !dbg !8669

sw.bb19:                                          ; preds = %cond.end
  %15 = load i8*, i8** %asmspec.addr, align 8, !dbg !8670
  %call20 = call %struct.rtx_def* @set_user_assembler_libfunc(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.736, i64 0, i64 0), i8* %15), !dbg !8671
  store %struct.rtx_def* %call20, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 0), align 16, !dbg !8672
  br label %sw.epilog, !dbg !8673

sw.bb21:                                          ; preds = %cond.end
  br label %sw.epilog, !dbg !8674

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog, !dbg !8675

sw.epilog:                                        ; preds = %sw.default, %sw.bb21, %sw.bb19, %sw.bb17, %sw.bb15, %sw.bb13, %sw.bb
  ret void, !dbg !8676
}

declare dso_local void @set_user_assembler_name(%union.tree_node*, i8*) #2

declare dso_local void @init_block_move_fn(i8*) #2

declare dso_local %struct.rtx_def* @set_user_assembler_libfunc(i8*, i8*) #2

declare dso_local void @init_block_clear_fn(i8*) #2

declare dso_local %struct.rtx_def* @immed_double_const(i64, i64, i32) #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_call_expr_arg_iterator(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !8677 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8680, metadata !DIExpression()), !dbg !8681
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !8682, metadata !DIExpression()), !dbg !8683
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8684
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !8685
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %1, i32 0, i32 0, !dbg !8686
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !8687
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8688
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8688
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8688
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8688
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8688
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !8688
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8688
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !8688
  %4 = load i64, i64* %low, align 8, !dbg !8688
  %conv = trunc i64 %4 to i32, !dbg !8688
  %sub = sub nsw i32 %conv, 3, !dbg !8688
  %5 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !8689
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %5, i32 0, i32 1, !dbg !8690
  store i32 %sub, i32* %n, align 8, !dbg !8691
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !8692
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !8693
  store i32 0, i32* %i, align 4, !dbg !8694
  ret void, !dbg !8695
}

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_0(i32 %loc, %union.tree_node* %fndecl, i8 zeroext %ignore) #0 !dbg !8696 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8697, metadata !DIExpression()), !dbg !8698
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8699, metadata !DIExpression()), !dbg !8700
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !8701, metadata !DIExpression()), !dbg !8702
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8703, metadata !DIExpression()), !dbg !8704
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8705
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !8705
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8705
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8705
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8705
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !8705
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8705
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !8704
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !8706, metadata !DIExpression()), !dbg !8707
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8708
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !8708
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8708
  %bf.load = load i32, i32* %function_code, align 8, !dbg !8708
  %bf.clear = and i32 %bf.load, 2047, !dbg !8708
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !8707
  %4 = load i32, i32* %fcode, align 4, !dbg !8709
  switch i32 %4, label %sw.default [
    i32 96, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 87, label %sw.bb4
    i32 88, label %sw.bb4
    i32 89, label %sw.bb4
    i32 423, label %sw.bb6
  ], !dbg !8710

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %5 = load i32, i32* %loc.addr, align 4, !dbg !8711
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8713
  %call = call %union.tree_node* @fold_builtin_inf(i32 %5, %union.tree_node* %6, i32 1), !dbg !8714
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !8715
  br label %return, !dbg !8715

sw.bb4:                                           ; preds = %entry, %entry, %entry
  %7 = load i32, i32* %loc.addr, align 4, !dbg !8716
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8717
  %call5 = call %union.tree_node* @fold_builtin_inf(i32 %7, %union.tree_node* %8, i32 0), !dbg !8718
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !8719
  br label %return, !dbg !8719

sw.bb6:                                           ; preds = %entry
  %call7 = call %union.tree_node* @fold_builtin_classify_type(%union.tree_node* null), !dbg !8720
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !8721
  br label %return, !dbg !8721

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !8722

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8723
  br label %return, !dbg !8723

return:                                           ; preds = %sw.epilog, %sw.bb6, %sw.bb4, %sw.bb
  %9 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8724
  ret %union.tree_node* %9, !dbg !8724
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_1(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, i8 zeroext %ignore) #0 !dbg !8725 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %ret163 = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8726, metadata !DIExpression()), !dbg !8727
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8728, metadata !DIExpression()), !dbg !8729
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !8730, metadata !DIExpression()), !dbg !8731
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !8732, metadata !DIExpression()), !dbg !8733
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8734, metadata !DIExpression()), !dbg !8735
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8736
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !8736
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8736
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8736
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8736
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !8736
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8736
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !8735
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !8737, metadata !DIExpression()), !dbg !8738
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8739
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !8739
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8739
  %bf.load = load i32, i32* %function_code, align 8, !dbg !8739
  %bf.clear = and i32 %bf.load, 2047, !dbg !8739
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !8738
  %4 = load i32, i32* %fcode, align 4, !dbg !8740
  switch i32 %4, label %sw.default [
    i32 428, label %sw.bb
    i32 423, label %sw.bb5
    i32 345, label %sw.bb7
    i32 57, label %sw.bb9
    i32 58, label %sw.bb9
    i32 59, label %sw.bb9
    i32 413, label %sw.bb11
    i32 488, label %sw.bb11
    i32 489, label %sw.bb11
    i32 458, label %sw.bb11
    i32 297, label %sw.bb13
    i32 298, label %sw.bb13
    i32 299, label %sw.bb13
    i32 306, label %sw.bb27
    i32 307, label %sw.bb27
    i32 308, label %sw.bb27
    i32 288, label %sw.bb46
    i32 289, label %sw.bb46
    i32 290, label %sw.bb46
    i32 276, label %sw.bb65
    i32 277, label %sw.bb65
    i32 281, label %sw.bb65
    i32 278, label %sw.bb67
    i32 279, label %sw.bb67
    i32 280, label %sw.bb67
    i32 309, label %sw.bb69
    i32 310, label %sw.bb69
    i32 314, label %sw.bb69
    i32 311, label %sw.bb70
    i32 312, label %sw.bb70
    i32 313, label %sw.bb70
    i32 318, label %sw.bb71
    i32 319, label %sw.bb71
    i32 323, label %sw.bb71
    i32 320, label %sw.bb72
    i32 321, label %sw.bb72
    i32 322, label %sw.bb72
    i32 291, label %sw.bb73
    i32 292, label %sw.bb73
    i32 293, label %sw.bb73
    i32 315, label %sw.bb74
    i32 316, label %sw.bb74
    i32 317, label %sw.bb74
    i32 264, label %sw.bb75
    i32 265, label %sw.bb75
    i32 269, label %sw.bb75
    i32 255, label %sw.bb76
    i32 256, label %sw.bb76
    i32 260, label %sw.bb76
    i32 270, label %sw.bb77
    i32 271, label %sw.bb77
    i32 275, label %sw.bb77
    i32 266, label %sw.bb78
    i32 267, label %sw.bb78
    i32 268, label %sw.bb78
    i32 257, label %sw.bb79
    i32 258, label %sw.bb79
    i32 259, label %sw.bb79
    i32 272, label %sw.bb80
    i32 273, label %sw.bb80
    i32 274, label %sw.bb80
    i32 252, label %sw.bb81
    i32 253, label %sw.bb81
    i32 254, label %sw.bb81
    i32 261, label %sw.bb83
    i32 262, label %sw.bb83
    i32 263, label %sw.bb83
    i32 228, label %sw.bb85
    i32 229, label %sw.bb85
    i32 230, label %sw.bb85
    i32 21, label %sw.bb87
    i32 22, label %sw.bb87
    i32 23, label %sw.bb87
    i32 6, label %sw.bb89
    i32 7, label %sw.bb89
    i32 11, label %sw.bb89
    i32 0, label %sw.bb90
    i32 1, label %sw.bb90
    i32 5, label %sw.bb90
    i32 12, label %sw.bb91
    i32 16, label %sw.bb91
    i32 20, label %sw.bb91
    i32 8, label %sw.bb92
    i32 9, label %sw.bb92
    i32 10, label %sw.bb92
    i32 2, label %sw.bb93
    i32 3, label %sw.bb93
    i32 4, label %sw.bb93
    i32 17, label %sw.bb94
    i32 18, label %sw.bb94
    i32 19, label %sw.bb94
    i32 219, label %sw.bb95
    i32 223, label %sw.bb95
    i32 227, label %sw.bb95
    i32 30, label %sw.bb96
    i32 31, label %sw.bb96
    i32 35, label %sw.bb96
    i32 231, label %sw.bb98
    i32 232, label %sw.bb98
    i32 236, label %sw.bb98
    i32 282, label %sw.bb100
    i32 283, label %sw.bb100
    i32 284, label %sw.bb100
    i32 285, label %sw.bb102
    i32 286, label %sw.bb102
    i32 287, label %sw.bb102
    i32 224, label %sw.bb103
    i32 225, label %sw.bb103
    i32 226, label %sw.bb103
    i32 32, label %sw.bb104
    i32 33, label %sw.bb104
    i32 34, label %sw.bb104
    i32 233, label %sw.bb106
    i32 234, label %sw.bb106
    i32 235, label %sw.bb106
    i32 39, label %sw.bb107
    i32 43, label %sw.bb107
    i32 44, label %sw.bb107
    i32 40, label %sw.bb108
    i32 41, label %sw.bb108
    i32 42, label %sw.bb108
    i32 237, label %sw.bb109
    i32 238, label %sw.bb109
    i32 239, label %sw.bb109
    i32 45, label %sw.bb110
    i32 52, label %sw.bb110
    i32 53, label %sw.bb110
    i32 49, label %sw.bb111
    i32 50, label %sw.bb111
    i32 51, label %sw.bb111
    i32 46, label %sw.bb112
    i32 47, label %sw.bb112
    i32 48, label %sw.bb112
    i32 181, label %sw.bb112
    i32 182, label %sw.bb112
    i32 183, label %sw.bb112
    i32 54, label %sw.bb113
    i32 55, label %sw.bb113
    i32 56, label %sw.bb113
    i32 138, label %sw.bb114
    i32 151, label %sw.bb114
    i32 152, label %sw.bb114
    i32 145, label %sw.bb115
    i32 146, label %sw.bb115
    i32 147, label %sw.bb115
    i32 139, label %sw.bb116
    i32 140, label %sw.bb116
    i32 141, label %sw.bb116
    i32 142, label %sw.bb117
    i32 143, label %sw.bb117
    i32 144, label %sw.bb117
    i32 102, label %sw.bb118
    i32 103, label %sw.bb118
    i32 104, label %sw.bb118
    i32 105, label %sw.bb119
    i32 106, label %sw.bb119
    i32 107, label %sw.bb119
    i32 243, label %sw.bb120
    i32 244, label %sw.bb120
    i32 245, label %sw.bb120
    i32 246, label %sw.bb121
    i32 247, label %sw.bb121
    i32 248, label %sw.bb121
    i32 162, label %sw.bb122
    i32 163, label %sw.bb122
    i32 164, label %sw.bb122
    i32 165, label %sw.bb122
    i32 166, label %sw.bb122
    i32 167, label %sw.bb122
    i32 168, label %sw.bb124
    i32 169, label %sw.bb124
    i32 170, label %sw.bb124
    i32 63, label %sw.bb126
    i32 64, label %sw.bb126
    i32 65, label %sw.bb126
    i32 24, label %sw.bb128
    i32 25, label %sw.bb128
    i32 26, label %sw.bb128
    i32 240, label %sw.bb130
    i32 241, label %sw.bb130
    i32 242, label %sw.bb130
    i32 198, label %sw.bb132
    i32 199, label %sw.bb132
    i32 200, label %sw.bb132
    i32 171, label %sw.bb134
    i32 172, label %sw.bb134
    i32 173, label %sw.bb134
    i32 195, label %sw.bb134
    i32 196, label %sw.bb134
    i32 197, label %sw.bb134
    i32 111, label %sw.bb136
    i32 112, label %sw.bb136
    i32 113, label %sw.bb136
    i32 126, label %sw.bb136
    i32 127, label %sw.bb136
    i32 128, label %sw.bb136
    i32 117, label %sw.bb136
    i32 118, label %sw.bb136
    i32 119, label %sw.bb136
    i32 129, label %sw.bb136
    i32 130, label %sw.bb136
    i32 131, label %sw.bb136
    i32 156, label %sw.bb136
    i32 157, label %sw.bb136
    i32 158, label %sw.bb136
    i32 135, label %sw.bb136
    i32 136, label %sw.bb136
    i32 137, label %sw.bb136
    i32 153, label %sw.bb138
    i32 154, label %sw.bb138
    i32 155, label %sw.bb138
    i32 132, label %sw.bb138
    i32 133, label %sw.bb138
    i32 134, label %sw.bb138
    i32 419, label %sw.bb140
    i32 420, label %sw.bb140
    i32 449, label %sw.bb142
    i32 451, label %sw.bb142
    i32 452, label %sw.bb142
    i32 424, label %sw.bb142
    i32 426, label %sw.bb142
    i32 427, label %sw.bb142
    i32 429, label %sw.bb142
    i32 431, label %sw.bb142
    i32 432, label %sw.bb142
    i32 497, label %sw.bb142
    i32 499, label %sw.bb142
    i32 500, label %sw.bb142
    i32 493, label %sw.bb142
    i32 495, label %sw.bb142
    i32 496, label %sw.bb142
    i32 210, label %sw.bb144
    i32 211, label %sw.bb144
    i32 212, label %sw.bb144
    i32 216, label %sw.bb146
    i32 217, label %sw.bb146
    i32 218, label %sw.bb146
    i32 93, label %sw.bb148
    i32 94, label %sw.bb148
    i32 95, label %sw.bb148
    i32 148, label %sw.bb148
    i32 149, label %sw.bb148
    i32 150, label %sw.bb148
    i32 384, label %sw.bb150
    i32 395, label %sw.bb152
    i32 387, label %sw.bb154
    i32 460, label %sw.bb156
    i32 461, label %sw.bb156
    i32 462, label %sw.bb156
    i32 463, label %sw.bb156
    i32 464, label %sw.bb156
    i32 465, label %sw.bb156
    i32 467, label %sw.bb156
    i32 469, label %sw.bb162
    i32 470, label %sw.bb162
    i32 471, label %sw.bb162
    i32 472, label %sw.bb162
    i32 473, label %sw.bb162
    i32 474, label %sw.bb162
    i32 481, label %sw.bb169
    i32 468, label %sw.bb171
    i32 475, label %sw.bb173
    i32 476, label %sw.bb173
    i32 477, label %sw.bb173
    i32 478, label %sw.bb173
    i32 479, label %sw.bb173
    i32 480, label %sw.bb173
    i32 365, label %sw.bb175
    i32 366, label %sw.bb175
    i32 377, label %sw.bb175
  ], !dbg !8741

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8742, metadata !DIExpression()), !dbg !8745
  %5 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8746
  %call = call %union.tree_node* @fold_builtin_constant_p(%union.tree_node* %5), !dbg !8747
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8745
  %6 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8748
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !8748
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8750

land.lhs.true:                                    ; preds = %sw.bb
  %7 = load i32, i32* @optimize, align 4, !dbg !8751
  %tobool4 = icmp ne i32 %7, 0, !dbg !8751
  br i1 %tobool4, label %if.end, label %if.then, !dbg !8752

if.then:                                          ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8753
  store %union.tree_node* %8, %union.tree_node** %val, align 8, !dbg !8754
  br label %if.end, !dbg !8755

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8756
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !8757
  br label %return, !dbg !8757

sw.bb5:                                           ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8758
  %call6 = call %union.tree_node* @fold_builtin_classify_type(%union.tree_node* %10), !dbg !8759
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !8760
  br label %return, !dbg !8760

sw.bb7:                                           ; preds = %entry
  %11 = load i32, i32* %loc.addr, align 4, !dbg !8761
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8762
  %13 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8763
  %call8 = call %union.tree_node* @fold_builtin_strlen(i32 %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !8764
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !8765
  br label %return, !dbg !8765

sw.bb9:                                           ; preds = %entry, %entry, %entry
  %14 = load i32, i32* %loc.addr, align 4, !dbg !8766
  %15 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8767
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8768
  %call10 = call %union.tree_node* @fold_builtin_fabs(i32 %14, %union.tree_node* %15, %union.tree_node* %16), !dbg !8769
  store %union.tree_node* %call10, %union.tree_node** %retval, align 8, !dbg !8770
  br label %return, !dbg !8770

sw.bb11:                                          ; preds = %entry, %entry, %entry, %entry
  %17 = load i32, i32* %loc.addr, align 4, !dbg !8771
  %18 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8772
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8773
  %call12 = call %union.tree_node* @fold_builtin_abs(i32 %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !8774
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !8775
  br label %return, !dbg !8775

sw.bb13:                                          ; preds = %entry, %entry, %entry
  %20 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8776
  %call14 = call zeroext i8 @validate_arg(%union.tree_node* %20, i32 13), !dbg !8778
  %conv = zext i8 %call14 to i32, !dbg !8778
  %tobool15 = icmp ne i32 %conv, 0, !dbg !8778
  br i1 %tobool15, label %land.lhs.true16, label %if.end26, !dbg !8779

land.lhs.true16:                                  ; preds = %sw.bb13
  %21 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8780
  %common17 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8780
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !8780
  %22 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !8780
  %common19 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !8780
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !8780
  %23 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !8780
  %base = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8780
  %24 = bitcast %struct.tree_base* %base to i64*, !dbg !8780
  %bf.load21 = load i64, i64* %24, align 8, !dbg !8780
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !8780
  %bf.cast = trunc i64 %bf.clear22 to i32, !dbg !8780
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !8781
  br i1 %cmp, label %if.then24, label %if.end26, !dbg !8782

if.then24:                                        ; preds = %land.lhs.true16
  %25 = load i32, i32* %loc.addr, align 4, !dbg !8783
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8783
  %27 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8783
  %call25 = call %union.tree_node* @fold_build1_stat_loc(i32 %25, i32 124, %union.tree_node* %26, %union.tree_node* %27), !dbg !8783
  store %union.tree_node* %call25, %union.tree_node** %retval, align 8, !dbg !8784
  br label %return, !dbg !8784

if.end26:                                         ; preds = %land.lhs.true16, %sw.bb13
  br label %sw.epilog, !dbg !8785

sw.bb27:                                          ; preds = %entry, %entry, %entry
  %28 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8786
  %call28 = call zeroext i8 @validate_arg(%union.tree_node* %28, i32 13), !dbg !8788
  %conv29 = zext i8 %call28 to i32, !dbg !8788
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !8788
  br i1 %tobool30, label %land.lhs.true31, label %if.end45, !dbg !8789

land.lhs.true31:                                  ; preds = %sw.bb27
  %29 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8790
  %common32 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !8790
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !8790
  %30 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !8790
  %common34 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !8790
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !8790
  %31 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !8790
  %base36 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !8790
  %32 = bitcast %struct.tree_base* %base36 to i64*, !dbg !8790
  %bf.load37 = load i64, i64* %32, align 8, !dbg !8790
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !8790
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !8790
  %cmp40 = icmp eq i32 %bf.cast39, 9, !dbg !8791
  br i1 %cmp40, label %if.then42, label %if.end45, !dbg !8792

if.then42:                                        ; preds = %land.lhs.true31
  %33 = load i32, i32* %loc.addr, align 4, !dbg !8793
  %34 = load i32, i32* %loc.addr, align 4, !dbg !8794
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8794
  %36 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8794
  %call43 = call %union.tree_node* @fold_build1_stat_loc(i32 %34, i32 43, %union.tree_node* %35, %union.tree_node* %36), !dbg !8794
  %call44 = call %union.tree_node* @non_lvalue_loc(i32 %33, %union.tree_node* %call43), !dbg !8795
  store %union.tree_node* %call44, %union.tree_node** %retval, align 8, !dbg !8796
  br label %return, !dbg !8796

if.end45:                                         ; preds = %land.lhs.true31, %sw.bb27
  br label %sw.epilog, !dbg !8797

sw.bb46:                                          ; preds = %entry, %entry, %entry
  %37 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8798
  %call47 = call zeroext i8 @validate_arg(%union.tree_node* %37, i32 13), !dbg !8800
  %conv48 = zext i8 %call47 to i32, !dbg !8800
  %tobool49 = icmp ne i32 %conv48, 0, !dbg !8800
  br i1 %tobool49, label %land.lhs.true50, label %if.end64, !dbg !8801

land.lhs.true50:                                  ; preds = %sw.bb46
  %38 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8802
  %common51 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !8802
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !8802
  %39 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !8802
  %common53 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !8802
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !8802
  %40 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !8802
  %base55 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !8802
  %41 = bitcast %struct.tree_base* %base55 to i64*, !dbg !8802
  %bf.load56 = load i64, i64* %41, align 8, !dbg !8802
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !8802
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !8802
  %cmp59 = icmp eq i32 %bf.cast58, 9, !dbg !8803
  br i1 %cmp59, label %if.then61, label %if.end64, !dbg !8804

if.then61:                                        ; preds = %land.lhs.true50
  %42 = load i32, i32* %loc.addr, align 4, !dbg !8805
  %43 = load i32, i32* %loc.addr, align 4, !dbg !8806
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8806
  %45 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8806
  %call62 = call %union.tree_node* @fold_build1_stat_loc(i32 %43, i32 44, %union.tree_node* %44, %union.tree_node* %45), !dbg !8806
  %call63 = call %union.tree_node* @non_lvalue_loc(i32 %42, %union.tree_node* %call62), !dbg !8807
  store %union.tree_node* %call63, %union.tree_node** %retval, align 8, !dbg !8808
  br label %return, !dbg !8808

if.end64:                                         ; preds = %land.lhs.true50, %sw.bb46
  br label %sw.epilog, !dbg !8809

sw.bb65:                                          ; preds = %entry, %entry, %entry
  %46 = load i32, i32* %loc.addr, align 4, !dbg !8810
  %47 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8811
  %48 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8812
  %49 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8813
  %call66 = call %union.tree_node* @fold_builtin_ccos(i32 %46, %union.tree_node* %47, %union.tree_node* %48, %union.tree_node* %49, i8 zeroext 0), !dbg !8814
  store %union.tree_node* %call66, %union.tree_node** %retval, align 8, !dbg !8815
  br label %return, !dbg !8815

sw.bb67:                                          ; preds = %entry, %entry, %entry
  %50 = load i32, i32* %loc.addr, align 4, !dbg !8816
  %51 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8817
  %52 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8818
  %53 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8819
  %call68 = call %union.tree_node* @fold_builtin_ccos(i32 %50, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %53, i8 zeroext 1), !dbg !8820
  store %union.tree_node* %call68, %union.tree_node** %retval, align 8, !dbg !8821
  br label %return, !dbg !8821

sw.bb69:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8822
  br label %return, !dbg !8822

sw.bb70:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8823
  br label %return, !dbg !8823

sw.bb71:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8824
  br label %return, !dbg !8824

sw.bb72:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8825
  br label %return, !dbg !8825

sw.bb73:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8826
  br label %return, !dbg !8826

sw.bb74:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8827
  br label %return, !dbg !8827

sw.bb75:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8828
  br label %return, !dbg !8828

sw.bb76:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8829
  br label %return, !dbg !8829

sw.bb77:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8830
  br label %return, !dbg !8830

sw.bb78:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8831
  br label %return, !dbg !8831

sw.bb79:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8832
  br label %return, !dbg !8832

sw.bb80:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8833
  br label %return, !dbg !8833

sw.bb81:                                          ; preds = %entry, %entry, %entry
  %54 = load i32, i32* %loc.addr, align 4, !dbg !8834
  %55 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8835
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8836
  %57 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8837
  %call82 = call %union.tree_node* @fold_builtin_cabs(i32 %54, %union.tree_node* %55, %union.tree_node* %56, %union.tree_node* %57), !dbg !8838
  store %union.tree_node* %call82, %union.tree_node** %retval, align 8, !dbg !8839
  br label %return, !dbg !8839

sw.bb83:                                          ; preds = %entry, %entry, %entry
  %58 = load i32, i32* %loc.addr, align 4, !dbg !8840
  %59 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8841
  %60 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8842
  %call84 = call %union.tree_node* @fold_builtin_carg(i32 %58, %union.tree_node* %59, %union.tree_node* %60), !dbg !8843
  store %union.tree_node* %call84, %union.tree_node** %retval, align 8, !dbg !8844
  br label %return, !dbg !8844

sw.bb85:                                          ; preds = %entry, %entry, %entry
  %61 = load i32, i32* %loc.addr, align 4, !dbg !8845
  %62 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8846
  %63 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8847
  %call86 = call %union.tree_node* @fold_builtin_sqrt(i32 %61, %union.tree_node* %62, %union.tree_node* %63), !dbg !8848
  store %union.tree_node* %call86, %union.tree_node** %retval, align 8, !dbg !8849
  br label %return, !dbg !8849

sw.bb87:                                          ; preds = %entry, %entry, %entry
  %64 = load i32, i32* %loc.addr, align 4, !dbg !8850
  %65 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8851
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8852
  %call88 = call %union.tree_node* @fold_builtin_cbrt(i32 %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !8853
  store %union.tree_node* %call88, %union.tree_node** %retval, align 8, !dbg !8854
  br label %return, !dbg !8854

sw.bb89:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8855
  br label %return, !dbg !8855

sw.bb90:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8856
  br label %return, !dbg !8856

sw.bb91:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8857
  br label %return, !dbg !8857

sw.bb92:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8858
  br label %return, !dbg !8858

sw.bb93:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8859
  br label %return, !dbg !8859

sw.bb94:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8860
  br label %return, !dbg !8860

sw.bb95:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8861
  br label %return, !dbg !8861

sw.bb96:                                          ; preds = %entry, %entry, %entry
  %67 = load i32, i32* %loc.addr, align 4, !dbg !8862
  %68 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8863
  %69 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8864
  %70 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8865
  %call97 = call %union.tree_node* @fold_builtin_cos(i32 %67, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !8866
  store %union.tree_node* %call97, %union.tree_node** %retval, align 8, !dbg !8867
  br label %return, !dbg !8867

sw.bb98:                                          ; preds = %entry, %entry, %entry
  %71 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8868
  %72 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8869
  %call99 = call %union.tree_node* @fold_builtin_tan(%union.tree_node* %71, %union.tree_node* %72), !dbg !8870
  store %union.tree_node* %call99, %union.tree_node** %retval, align 8, !dbg !8871
  br label %return, !dbg !8871

sw.bb100:                                         ; preds = %entry, %entry, %entry
  %73 = load i32, i32* %loc.addr, align 4, !dbg !8872
  %74 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8873
  %75 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8874
  %call101 = call %union.tree_node* @fold_builtin_cexp(i32 %73, %union.tree_node* %74, %union.tree_node* %75), !dbg !8875
  store %union.tree_node* %call101, %union.tree_node** %retval, align 8, !dbg !8876
  br label %return, !dbg !8876

sw.bb102:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8877
  br label %return, !dbg !8877

sw.bb103:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8878
  br label %return, !dbg !8878

sw.bb104:                                         ; preds = %entry, %entry, %entry
  %76 = load i32, i32* %loc.addr, align 4, !dbg !8879
  %77 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8880
  %78 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8881
  %79 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8882
  %call105 = call %union.tree_node* @fold_builtin_cosh(i32 %76, %union.tree_node* %77, %union.tree_node* %78, %union.tree_node* %79), !dbg !8883
  store %union.tree_node* %call105, %union.tree_node** %retval, align 8, !dbg !8884
  br label %return, !dbg !8884

sw.bb106:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8885
  br label %return, !dbg !8885

sw.bb107:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8886
  br label %return, !dbg !8886

sw.bb108:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8887
  br label %return, !dbg !8887

sw.bb109:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8888
  br label %return, !dbg !8888

sw.bb110:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8889
  br label %return, !dbg !8889

sw.bb111:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8890
  br label %return, !dbg !8890

sw.bb112:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8891
  br label %return, !dbg !8891

sw.bb113:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8892
  br label %return, !dbg !8892

sw.bb114:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8893
  br label %return, !dbg !8893

sw.bb115:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8894
  br label %return, !dbg !8894

sw.bb116:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8895
  br label %return, !dbg !8895

sw.bb117:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8896
  br label %return, !dbg !8896

sw.bb118:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8897
  br label %return, !dbg !8897

sw.bb119:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8898
  br label %return, !dbg !8898

sw.bb120:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8899
  br label %return, !dbg !8899

sw.bb121:                                         ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8900
  br label %return, !dbg !8900

sw.bb122:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %80 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8901
  %81 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8902
  %call123 = call %union.tree_node* @fold_builtin_nan(%union.tree_node* %80, %union.tree_node* %81, i32 1), !dbg !8903
  store %union.tree_node* %call123, %union.tree_node** %retval, align 8, !dbg !8904
  br label %return, !dbg !8904

sw.bb124:                                         ; preds = %entry, %entry, %entry
  %82 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8905
  %83 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8906
  %call125 = call %union.tree_node* @fold_builtin_nan(%union.tree_node* %82, %union.tree_node* %83, i32 0), !dbg !8907
  store %union.tree_node* %call125, %union.tree_node** %retval, align 8, !dbg !8908
  br label %return, !dbg !8908

sw.bb126:                                         ; preds = %entry, %entry, %entry
  %84 = load i32, i32* %loc.addr, align 4, !dbg !8909
  %85 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8910
  %86 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8911
  %call127 = call %union.tree_node* @fold_builtin_floor(i32 %84, %union.tree_node* %85, %union.tree_node* %86), !dbg !8912
  store %union.tree_node* %call127, %union.tree_node** %retval, align 8, !dbg !8913
  br label %return, !dbg !8913

sw.bb128:                                         ; preds = %entry, %entry, %entry
  %87 = load i32, i32* %loc.addr, align 4, !dbg !8914
  %88 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8915
  %89 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8916
  %call129 = call %union.tree_node* @fold_builtin_ceil(i32 %87, %union.tree_node* %88, %union.tree_node* %89), !dbg !8917
  store %union.tree_node* %call129, %union.tree_node** %retval, align 8, !dbg !8918
  br label %return, !dbg !8918

sw.bb130:                                         ; preds = %entry, %entry, %entry
  %90 = load i32, i32* %loc.addr, align 4, !dbg !8919
  %91 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8920
  %92 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8921
  %call131 = call %union.tree_node* @fold_builtin_trunc(i32 %90, %union.tree_node* %91, %union.tree_node* %92), !dbg !8922
  store %union.tree_node* %call131, %union.tree_node** %retval, align 8, !dbg !8923
  br label %return, !dbg !8923

sw.bb132:                                         ; preds = %entry, %entry, %entry
  %93 = load i32, i32* %loc.addr, align 4, !dbg !8924
  %94 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8925
  %95 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8926
  %call133 = call %union.tree_node* @fold_builtin_round(i32 %93, %union.tree_node* %94, %union.tree_node* %95), !dbg !8927
  store %union.tree_node* %call133, %union.tree_node** %retval, align 8, !dbg !8928
  br label %return, !dbg !8928

sw.bb134:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %96 = load i32, i32* %loc.addr, align 4, !dbg !8929
  %97 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8930
  %98 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8931
  %call135 = call %union.tree_node* @fold_trunc_transparent_mathfn(i32 %96, %union.tree_node* %97, %union.tree_node* %98), !dbg !8932
  store %union.tree_node* %call135, %union.tree_node** %retval, align 8, !dbg !8933
  br label %return, !dbg !8933

sw.bb136:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %99 = load i32, i32* %loc.addr, align 4, !dbg !8934
  %100 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8935
  %101 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8936
  %call137 = call %union.tree_node* @fold_builtin_int_roundingfn(i32 %99, %union.tree_node* %100, %union.tree_node* %101), !dbg !8937
  store %union.tree_node* %call137, %union.tree_node** %retval, align 8, !dbg !8938
  br label %return, !dbg !8938

sw.bb138:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %102 = load i32, i32* %loc.addr, align 4, !dbg !8939
  %103 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8940
  %104 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8941
  %call139 = call %union.tree_node* @fold_fixed_mathfn(i32 %102, %union.tree_node* %103, %union.tree_node* %104), !dbg !8942
  store %union.tree_node* %call139, %union.tree_node** %retval, align 8, !dbg !8943
  br label %return, !dbg !8943

sw.bb140:                                         ; preds = %entry, %entry
  %105 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8944
  %106 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8945
  %call141 = call %union.tree_node* @fold_builtin_bswap(%union.tree_node* %105, %union.tree_node* %106), !dbg !8946
  store %union.tree_node* %call141, %union.tree_node** %retval, align 8, !dbg !8947
  br label %return, !dbg !8947

sw.bb142:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %107 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8948
  %108 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8949
  %call143 = call %union.tree_node* @fold_builtin_bitop(%union.tree_node* %107, %union.tree_node* %108), !dbg !8950
  store %union.tree_node* %call143, %union.tree_node** %retval, align 8, !dbg !8951
  br label %return, !dbg !8951

sw.bb144:                                         ; preds = %entry, %entry, %entry
  %109 = load i32, i32* %loc.addr, align 4, !dbg !8952
  %110 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8953
  %111 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8954
  %call145 = call %union.tree_node* @fold_builtin_signbit(i32 %109, %union.tree_node* %110, %union.tree_node* %111), !dbg !8955
  store %union.tree_node* %call145, %union.tree_node** %retval, align 8, !dbg !8956
  br label %return, !dbg !8956

sw.bb146:                                         ; preds = %entry, %entry, %entry
  %112 = load i32, i32* %loc.addr, align 4, !dbg !8957
  %113 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8958
  %114 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8959
  %call147 = call %union.tree_node* @fold_builtin_significand(i32 %112, %union.tree_node* %113, %union.tree_node* %114), !dbg !8960
  store %union.tree_node* %call147, %union.tree_node** %retval, align 8, !dbg !8961
  br label %return, !dbg !8961

sw.bb148:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %115 = load i32, i32* %loc.addr, align 4, !dbg !8962
  %116 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8963
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8964
  %call149 = call %union.tree_node* @fold_builtin_logb(i32 %115, %union.tree_node* %116, %union.tree_node* %117), !dbg !8965
  store %union.tree_node* %call149, %union.tree_node** %retval, align 8, !dbg !8966
  br label %return, !dbg !8966

sw.bb150:                                         ; preds = %entry
  %118 = load i32, i32* %loc.addr, align 4, !dbg !8967
  %119 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8968
  %call151 = call %union.tree_node* @fold_builtin_isascii(i32 %118, %union.tree_node* %119), !dbg !8969
  store %union.tree_node* %call151, %union.tree_node** %retval, align 8, !dbg !8970
  br label %return, !dbg !8970

sw.bb152:                                         ; preds = %entry
  %120 = load i32, i32* %loc.addr, align 4, !dbg !8971
  %121 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8972
  %call153 = call %union.tree_node* @fold_builtin_toascii(i32 %120, %union.tree_node* %121), !dbg !8973
  store %union.tree_node* %call153, %union.tree_node** %retval, align 8, !dbg !8974
  br label %return, !dbg !8974

sw.bb154:                                         ; preds = %entry
  %122 = load i32, i32* %loc.addr, align 4, !dbg !8975
  %123 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8976
  %call155 = call %union.tree_node* @fold_builtin_isdigit(i32 %122, %union.tree_node* %123), !dbg !8977
  store %union.tree_node* %call155, %union.tree_node** %retval, align 8, !dbg !8978
  br label %return, !dbg !8978

sw.bb156:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !8979, metadata !DIExpression()), !dbg !8981
  %124 = load i32, i32* %loc.addr, align 4, !dbg !8982
  %125 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8983
  %126 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8984
  %call157 = call %union.tree_node* @fold_builtin_classify(i32 %124, %union.tree_node* %125, %union.tree_node* %126, i32 467), !dbg !8985
  store %union.tree_node* %call157, %union.tree_node** %ret, align 8, !dbg !8981
  %127 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8986
  %tobool158 = icmp ne %union.tree_node* %127, null, !dbg !8986
  br i1 %tobool158, label %if.then159, label %if.end160, !dbg !8988

if.then159:                                       ; preds = %sw.bb156
  %128 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !8989
  store %union.tree_node* %128, %union.tree_node** %retval, align 8, !dbg !8990
  br label %return, !dbg !8990

if.end160:                                        ; preds = %sw.bb156
  %129 = load i32, i32* %loc.addr, align 4, !dbg !8991
  %130 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8992
  %131 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !8993
  %call161 = call %union.tree_node* @fold_builtin_interclass_mathfn(i32 %129, %union.tree_node* %130, %union.tree_node* %131), !dbg !8994
  store %union.tree_node* %call161, %union.tree_node** %retval, align 8, !dbg !8995
  br label %return, !dbg !8995

sw.bb162:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret163, metadata !8996, metadata !DIExpression()), !dbg !8998
  %132 = load i32, i32* %loc.addr, align 4, !dbg !8999
  %133 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9000
  %134 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9001
  %call164 = call %union.tree_node* @fold_builtin_classify(i32 %132, %union.tree_node* %133, %union.tree_node* %134, i32 469), !dbg !9002
  store %union.tree_node* %call164, %union.tree_node** %ret163, align 8, !dbg !8998
  %135 = load %union.tree_node*, %union.tree_node** %ret163, align 8, !dbg !9003
  %tobool165 = icmp ne %union.tree_node* %135, null, !dbg !9003
  br i1 %tobool165, label %if.then166, label %if.end167, !dbg !9005

if.then166:                                       ; preds = %sw.bb162
  %136 = load %union.tree_node*, %union.tree_node** %ret163, align 8, !dbg !9006
  store %union.tree_node* %136, %union.tree_node** %retval, align 8, !dbg !9007
  br label %return, !dbg !9007

if.end167:                                        ; preds = %sw.bb162
  %137 = load i32, i32* %loc.addr, align 4, !dbg !9008
  %138 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9009
  %139 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9010
  %call168 = call %union.tree_node* @fold_builtin_interclass_mathfn(i32 %137, %union.tree_node* %138, %union.tree_node* %139), !dbg !9011
  store %union.tree_node* %call168, %union.tree_node** %retval, align 8, !dbg !9012
  br label %return, !dbg !9012

sw.bb169:                                         ; preds = %entry
  %140 = load i32, i32* %loc.addr, align 4, !dbg !9013
  %141 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9014
  %142 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9015
  %call170 = call %union.tree_node* @fold_builtin_interclass_mathfn(i32 %140, %union.tree_node* %141, %union.tree_node* %142), !dbg !9016
  store %union.tree_node* %call170, %union.tree_node** %retval, align 8, !dbg !9017
  br label %return, !dbg !9017

sw.bb171:                                         ; preds = %entry
  %143 = load i32, i32* %loc.addr, align 4, !dbg !9018
  %144 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9019
  %145 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9020
  %call172 = call %union.tree_node* @fold_builtin_classify(i32 %143, %union.tree_node* %144, %union.tree_node* %145, i32 468), !dbg !9021
  store %union.tree_node* %call172, %union.tree_node** %retval, align 8, !dbg !9022
  br label %return, !dbg !9022

sw.bb173:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %146 = load i32, i32* %loc.addr, align 4, !dbg !9023
  %147 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9024
  %148 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9025
  %call174 = call %union.tree_node* @fold_builtin_classify(i32 %146, %union.tree_node* %147, %union.tree_node* %148, i32 475), !dbg !9026
  store %union.tree_node* %call174, %union.tree_node** %retval, align 8, !dbg !9027
  br label %return, !dbg !9027

sw.bb175:                                         ; preds = %entry, %entry, %entry
  %149 = load i32, i32* %loc.addr, align 4, !dbg !9028
  %150 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9029
  %151 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9030
  %152 = load i8, i8* %ignore.addr, align 1, !dbg !9031
  %153 = load i32, i32* %fcode, align 4, !dbg !9032
  %call176 = call %union.tree_node* @fold_builtin_printf(i32 %149, %union.tree_node* %150, %union.tree_node* %151, %union.tree_node* null, i8 zeroext %152, i32 %153), !dbg !9033
  store %union.tree_node* %call176, %union.tree_node** %retval, align 8, !dbg !9034
  br label %return, !dbg !9034

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9035

sw.epilog:                                        ; preds = %sw.default, %if.end64, %if.end45, %if.end26
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9036
  br label %return, !dbg !9036

return:                                           ; preds = %sw.epilog, %sw.bb175, %sw.bb173, %sw.bb171, %sw.bb169, %if.end167, %if.then166, %if.end160, %if.then159, %sw.bb154, %sw.bb152, %sw.bb150, %sw.bb148, %sw.bb146, %sw.bb144, %sw.bb142, %sw.bb140, %sw.bb138, %sw.bb136, %sw.bb134, %sw.bb132, %sw.bb130, %sw.bb128, %sw.bb126, %sw.bb124, %sw.bb122, %sw.bb121, %sw.bb120, %sw.bb119, %sw.bb118, %sw.bb117, %sw.bb116, %sw.bb115, %sw.bb114, %sw.bb113, %sw.bb112, %sw.bb111, %sw.bb110, %sw.bb109, %sw.bb108, %sw.bb107, %sw.bb106, %sw.bb104, %sw.bb103, %sw.bb102, %sw.bb100, %sw.bb98, %sw.bb96, %sw.bb95, %sw.bb94, %sw.bb93, %sw.bb92, %sw.bb91, %sw.bb90, %sw.bb89, %sw.bb87, %sw.bb85, %sw.bb83, %sw.bb81, %sw.bb80, %sw.bb79, %sw.bb78, %sw.bb77, %sw.bb76, %sw.bb75, %sw.bb74, %sw.bb73, %sw.bb72, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb67, %sw.bb65, %if.then61, %if.then42, %if.then24, %sw.bb11, %sw.bb9, %sw.bb7, %sw.bb5, %if.end
  %154 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9037
  ret %union.tree_node* %154, !dbg !9037
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_2(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, i8 zeroext %ignore) #0 !dbg !9038 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9041, metadata !DIExpression()), !dbg !9042
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9043, metadata !DIExpression()), !dbg !9044
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !9045, metadata !DIExpression()), !dbg !9046
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !9047, metadata !DIExpression()), !dbg !9048
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !9049, metadata !DIExpression()), !dbg !9050
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9051, metadata !DIExpression()), !dbg !9052
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9053
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9053
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9053
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9053
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9053
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !9053
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9053
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !9052
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !9054, metadata !DIExpression()), !dbg !9055
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9056
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !9056
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9056
  %bf.load = load i32, i32* %function_code, align 8, !dbg !9056
  %bf.clear = and i32 %bf.load, 2047, !dbg !9056
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !9055
  %4 = load i32, i32* %fcode, align 4, !dbg !9057
  switch i32 %4, label %sw.default [
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 249, label %sw.bb4
    i32 250, label %sw.bb4
    i32 251, label %sw.bb4
    i32 36, label %sw.bb5
    i32 37, label %sw.bb5
    i32 38, label %sw.bb5
    i32 189, label %sw.bb5
    i32 190, label %sw.bb5
    i32 191, label %sw.bb5
    i32 84, label %sw.bb6
    i32 85, label %sw.bb6
    i32 86, label %sw.bb6
    i32 123, label %sw.bb6
    i32 124, label %sw.bb6
    i32 125, label %sw.bb6
    i32 13, label %sw.bb7
    i32 14, label %sw.bb7
    i32 15, label %sw.bb7
    i32 60, label %sw.bb8
    i32 61, label %sw.bb8
    i32 62, label %sw.bb8
    i32 90, label %sw.bb9
    i32 91, label %sw.bb9
    i32 92, label %sw.bb9
    i32 300, label %sw.bb10
    i32 301, label %sw.bb10
    i32 302, label %sw.bb10
    i32 114, label %sw.bb11
    i32 115, label %sw.bb11
    i32 116, label %sw.bb11
    i32 207, label %sw.bb13
    i32 208, label %sw.bb13
    i32 209, label %sw.bb13
    i32 204, label %sw.bb13
    i32 205, label %sw.bb13
    i32 206, label %sw.bb13
    i32 78, label %sw.bb15
    i32 79, label %sw.bb15
    i32 80, label %sw.bb15
    i32 159, label %sw.bb17
    i32 160, label %sw.bb17
    i32 161, label %sw.bb17
    i32 326, label %sw.bb19
    i32 360, label %sw.bb21
    i32 361, label %sw.bb23
    i32 353, label %sw.bb25
    i32 338, label %sw.bb27
    i32 352, label %sw.bb29
    i32 342, label %sw.bb31
    i32 339, label %sw.bb33
    i32 327, label %sw.bb33
    i32 351, label %sw.bb35
    i32 334, label %sw.bb35
    i32 341, label %sw.bb37
    i32 335, label %sw.bb39
    i32 340, label %sw.bb44
    i32 350, label %sw.bb46
    i32 446, label %sw.bb48
    i32 180, label %sw.bb50
    i32 184, label %sw.bb50
    i32 188, label %sw.bb50
    i32 185, label %sw.bb52
    i32 186, label %sw.bb52
    i32 187, label %sw.bb52
    i32 27, label %sw.bb54
    i32 28, label %sw.bb54
    i32 29, label %sw.bb54
    i32 72, label %sw.bb56
    i32 73, label %sw.bb56
    i32 74, label %sw.bb56
    i32 69, label %sw.bb58
    i32 70, label %sw.bb58
    i32 71, label %sw.bb58
    i32 482, label %sw.bb60
    i32 483, label %sw.bb62
    i32 484, label %sw.bb64
    i32 485, label %sw.bb66
    i32 486, label %sw.bb68
    i32 487, label %sw.bb70
    i32 515, label %sw.bb72
    i32 373, label %sw.bb73
    i32 528, label %sw.bb75
    i32 365, label %sw.bb77
    i32 366, label %sw.bb77
    i32 377, label %sw.bb77
    i32 543, label %sw.bb79
    i32 545, label %sw.bb79
    i32 354, label %sw.bb88
    i32 355, label %sw.bb88
    i32 375, label %sw.bb88
  ], !dbg !9058

sw.bb:                                            ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9059
  br label %return, !dbg !9059

sw.bb4:                                           ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9061
  br label %return, !dbg !9061

sw.bb5:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9062
  br label %return, !dbg !9062

sw.bb6:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9063
  br label %return, !dbg !9063

sw.bb7:                                           ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9064
  br label %return, !dbg !9064

sw.bb8:                                           ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9065
  br label %return, !dbg !9065

sw.bb9:                                           ; preds = %entry, %entry, %entry
  %5 = load i32, i32* %loc.addr, align 4, !dbg !9066
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9067
  %7 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9068
  %8 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9069
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9070
  %call = call %union.tree_node* @fold_builtin_hypot(i32 %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !9071
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !9072
  br label %return, !dbg !9072

sw.bb10:                                          ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9073
  br label %return, !dbg !9073

sw.bb11:                                          ; preds = %entry, %entry, %entry
  %10 = load i32, i32* %loc.addr, align 4, !dbg !9074
  %11 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9075
  %12 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9076
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9077
  %call12 = call %union.tree_node* @fold_builtin_load_exponent(i32 %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext 1), !dbg !9078
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !9079
  br label %return, !dbg !9079

sw.bb13:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %14 = load i32, i32* %loc.addr, align 4, !dbg !9080
  %15 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9081
  %16 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9082
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9083
  %call14 = call %union.tree_node* @fold_builtin_load_exponent(i32 %14, %union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %17, i8 zeroext 0), !dbg !9084
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !9085
  br label %return, !dbg !9085

sw.bb15:                                          ; preds = %entry, %entry, %entry
  %18 = load i32, i32* %loc.addr, align 4, !dbg !9086
  %19 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9087
  %20 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9088
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9089
  %call16 = call %union.tree_node* @fold_builtin_frexp(i32 %18, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %21), !dbg !9090
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !9091
  br label %return, !dbg !9091

sw.bb17:                                          ; preds = %entry, %entry, %entry
  %22 = load i32, i32* %loc.addr, align 4, !dbg !9092
  %23 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9093
  %24 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9094
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9095
  %call18 = call %union.tree_node* @fold_builtin_modf(i32 %22, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !9096
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !9097
  br label %return, !dbg !9097

sw.bb19:                                          ; preds = %entry
  %26 = load i32, i32* %loc.addr, align 4, !dbg !9098
  %27 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9099
  %28 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9100
  %29 = load i8, i8* %ignore.addr, align 1, !dbg !9101
  %call20 = call %union.tree_node* @fold_builtin_bzero(i32 %26, %union.tree_node* %27, %union.tree_node* %28, i8 zeroext %29), !dbg !9102
  store %union.tree_node* %call20, %union.tree_node** %retval, align 8, !dbg !9103
  br label %return, !dbg !9103

sw.bb21:                                          ; preds = %entry
  %30 = load i32, i32* %loc.addr, align 4, !dbg !9104
  %31 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9105
  %32 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9106
  %33 = load i8, i8* %ignore.addr, align 1, !dbg !9107
  %call22 = call %union.tree_node* @fold_builtin_fputs(i32 %30, %union.tree_node* %31, %union.tree_node* %32, i8 zeroext %33, i8 zeroext 0, %union.tree_node* null), !dbg !9108
  store %union.tree_node* %call22, %union.tree_node** %retval, align 8, !dbg !9109
  br label %return, !dbg !9109

sw.bb23:                                          ; preds = %entry
  %34 = load i32, i32* %loc.addr, align 4, !dbg !9110
  %35 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9111
  %36 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9112
  %37 = load i8, i8* %ignore.addr, align 1, !dbg !9113
  %call24 = call %union.tree_node* @fold_builtin_fputs(i32 %34, %union.tree_node* %35, %union.tree_node* %36, i8 zeroext %37, i8 zeroext 1, %union.tree_node* null), !dbg !9114
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !9115
  br label %return, !dbg !9115

sw.bb25:                                          ; preds = %entry
  %38 = load i32, i32* %loc.addr, align 4, !dbg !9116
  %39 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9117
  %40 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9118
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9119
  %call26 = call %union.tree_node* @fold_builtin_strstr(i32 %38, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41), !dbg !9120
  store %union.tree_node* %call26, %union.tree_node** %retval, align 8, !dbg !9121
  br label %return, !dbg !9121

sw.bb27:                                          ; preds = %entry
  %42 = load i32, i32* %loc.addr, align 4, !dbg !9122
  %43 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9123
  %44 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9124
  %call28 = call %union.tree_node* @fold_builtin_strcat(i32 %42, %union.tree_node* %43, %union.tree_node* %44), !dbg !9125
  store %union.tree_node* %call28, %union.tree_node** %retval, align 8, !dbg !9126
  br label %return, !dbg !9126

sw.bb29:                                          ; preds = %entry
  %45 = load i32, i32* %loc.addr, align 4, !dbg !9127
  %46 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9128
  %47 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9129
  %call30 = call %union.tree_node* @fold_builtin_strspn(i32 %45, %union.tree_node* %46, %union.tree_node* %47), !dbg !9130
  store %union.tree_node* %call30, %union.tree_node** %retval, align 8, !dbg !9131
  br label %return, !dbg !9131

sw.bb31:                                          ; preds = %entry
  %48 = load i32, i32* %loc.addr, align 4, !dbg !9132
  %49 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9133
  %50 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9134
  %call32 = call %union.tree_node* @fold_builtin_strcspn(i32 %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !9135
  store %union.tree_node* %call32, %union.tree_node** %retval, align 8, !dbg !9136
  br label %return, !dbg !9136

sw.bb33:                                          ; preds = %entry, %entry
  %51 = load i32, i32* %loc.addr, align 4, !dbg !9137
  %52 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9138
  %53 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9139
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9140
  %call34 = call %union.tree_node* @fold_builtin_strchr(i32 %51, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %54), !dbg !9141
  store %union.tree_node* %call34, %union.tree_node** %retval, align 8, !dbg !9142
  br label %return, !dbg !9142

sw.bb35:                                          ; preds = %entry, %entry
  %55 = load i32, i32* %loc.addr, align 4, !dbg !9143
  %56 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9144
  %57 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9145
  %58 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9146
  %call36 = call %union.tree_node* @fold_builtin_strrchr(i32 %55, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %58), !dbg !9147
  store %union.tree_node* %call36, %union.tree_node** %retval, align 8, !dbg !9148
  br label %return, !dbg !9148

sw.bb37:                                          ; preds = %entry
  %59 = load i32, i32* %loc.addr, align 4, !dbg !9149
  %60 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9150
  %61 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9151
  %62 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9152
  %call38 = call %union.tree_node* @fold_builtin_strcpy(i32 %59, %union.tree_node* %60, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* null), !dbg !9153
  store %union.tree_node* %call38, %union.tree_node** %retval, align 8, !dbg !9154
  br label %return, !dbg !9154

sw.bb39:                                          ; preds = %entry
  %63 = load i8, i8* %ignore.addr, align 1, !dbg !9155
  %tobool = icmp ne i8 %63, 0, !dbg !9155
  br i1 %tobool, label %if.then, label %if.else, !dbg !9157

if.then:                                          ; preds = %sw.bb39
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !9158, metadata !DIExpression()), !dbg !9160
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 341), align 8, !dbg !9161
  store %union.tree_node* %64, %union.tree_node** %fn, align 8, !dbg !9160
  %65 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9162
  %tobool40 = icmp ne %union.tree_node* %65, null, !dbg !9162
  br i1 %tobool40, label %if.end, label %if.then41, !dbg !9164

if.then41:                                        ; preds = %if.then
  br label %sw.epilog, !dbg !9165

if.end:                                           ; preds = %if.then
  %66 = load i32, i32* %loc.addr, align 4, !dbg !9166
  %67 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9167
  %68 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9168
  %69 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9169
  %call42 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %66, %union.tree_node* %67, i32 2, %union.tree_node* %68, %union.tree_node* %69), !dbg !9170
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !9171
  br label %return, !dbg !9171

if.else:                                          ; preds = %sw.bb39
  %70 = load i32, i32* %loc.addr, align 4, !dbg !9172
  %71 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9173
  %72 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9174
  %73 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9175
  %call43 = call %union.tree_node* @fold_builtin_stpcpy(i32 %70, %union.tree_node* %71, %union.tree_node* %72, %union.tree_node* %73), !dbg !9176
  store %union.tree_node* %call43, %union.tree_node** %retval, align 8, !dbg !9177
  br label %return, !dbg !9177

sw.bb44:                                          ; preds = %entry
  %74 = load i32, i32* %loc.addr, align 4, !dbg !9178
  %75 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9179
  %76 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9180
  %call45 = call %union.tree_node* @fold_builtin_strcmp(i32 %74, %union.tree_node* %75, %union.tree_node* %76), !dbg !9181
  store %union.tree_node* %call45, %union.tree_node** %retval, align 8, !dbg !9182
  br label %return, !dbg !9182

sw.bb46:                                          ; preds = %entry
  %77 = load i32, i32* %loc.addr, align 4, !dbg !9183
  %78 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9184
  %79 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9185
  %80 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9186
  %call47 = call %union.tree_node* @fold_builtin_strpbrk(i32 %77, %union.tree_node* %78, %union.tree_node* %79, %union.tree_node* %80), !dbg !9187
  store %union.tree_node* %call47, %union.tree_node** %retval, align 8, !dbg !9188
  br label %return, !dbg !9188

sw.bb48:                                          ; preds = %entry
  %81 = load i32, i32* %loc.addr, align 4, !dbg !9189
  %82 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9190
  %83 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9191
  %call49 = call %union.tree_node* @fold_builtin_expect(i32 %81, %union.tree_node* %82, %union.tree_node* %83), !dbg !9192
  store %union.tree_node* %call49, %union.tree_node** %retval, align 8, !dbg !9193
  br label %return, !dbg !9193

sw.bb50:                                          ; preds = %entry, %entry, %entry
  %84 = load i32, i32* %loc.addr, align 4, !dbg !9194
  %85 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9195
  %86 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9196
  %87 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9197
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9198
  %call51 = call %union.tree_node* @fold_builtin_pow(i32 %84, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %87, %union.tree_node* %88), !dbg !9199
  store %union.tree_node* %call51, %union.tree_node** %retval, align 8, !dbg !9200
  br label %return, !dbg !9200

sw.bb52:                                          ; preds = %entry, %entry, %entry
  %89 = load i32, i32* %loc.addr, align 4, !dbg !9201
  %90 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9202
  %91 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9203
  %92 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9204
  %93 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9205
  %call53 = call %union.tree_node* @fold_builtin_powi(i32 %89, %union.tree_node* %90, %union.tree_node* %91, %union.tree_node* %92, %union.tree_node* %93), !dbg !9206
  store %union.tree_node* %call53, %union.tree_node** %retval, align 8, !dbg !9207
  br label %return, !dbg !9207

sw.bb54:                                          ; preds = %entry, %entry, %entry
  %94 = load i32, i32* %loc.addr, align 4, !dbg !9208
  %95 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9209
  %96 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9210
  %97 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9211
  %98 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9212
  %call55 = call %union.tree_node* @fold_builtin_copysign(i32 %94, %union.tree_node* %95, %union.tree_node* %96, %union.tree_node* %97, %union.tree_node* %98), !dbg !9213
  store %union.tree_node* %call55, %union.tree_node** %retval, align 8, !dbg !9214
  br label %return, !dbg !9214

sw.bb56:                                          ; preds = %entry, %entry, %entry
  %99 = load i32, i32* %loc.addr, align 4, !dbg !9215
  %100 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9216
  %101 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9217
  %102 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9218
  %call57 = call %union.tree_node* @fold_builtin_fmin_fmax(i32 %99, %union.tree_node* %100, %union.tree_node* %101, %union.tree_node* %102, i8 zeroext 0), !dbg !9219
  store %union.tree_node* %call57, %union.tree_node** %retval, align 8, !dbg !9220
  br label %return, !dbg !9220

sw.bb58:                                          ; preds = %entry, %entry, %entry
  %103 = load i32, i32* %loc.addr, align 4, !dbg !9221
  %104 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9222
  %105 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9223
  %106 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9224
  %call59 = call %union.tree_node* @fold_builtin_fmin_fmax(i32 %103, %union.tree_node* %104, %union.tree_node* %105, %union.tree_node* %106, i8 zeroext 1), !dbg !9225
  store %union.tree_node* %call59, %union.tree_node** %retval, align 8, !dbg !9226
  br label %return, !dbg !9226

sw.bb60:                                          ; preds = %entry
  %107 = load i32, i32* %loc.addr, align 4, !dbg !9227
  %108 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9228
  %109 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9229
  %110 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9230
  %call61 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %107, %union.tree_node* %108, %union.tree_node* %109, %union.tree_node* %110, i32 106, i32 98), !dbg !9231
  store %union.tree_node* %call61, %union.tree_node** %retval, align 8, !dbg !9232
  br label %return, !dbg !9232

sw.bb62:                                          ; preds = %entry
  %111 = load i32, i32* %loc.addr, align 4, !dbg !9233
  %112 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9234
  %113 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9235
  %114 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9236
  %call63 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %111, %union.tree_node* %112, %union.tree_node* %113, %union.tree_node* %114, i32 105, i32 97), !dbg !9237
  store %union.tree_node* %call63, %union.tree_node** %retval, align 8, !dbg !9238
  br label %return, !dbg !9238

sw.bb64:                                          ; preds = %entry
  %115 = load i32, i32* %loc.addr, align 4, !dbg !9239
  %116 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9240
  %117 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9241
  %118 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9242
  %call65 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %115, %union.tree_node* %116, %union.tree_node* %117, %union.tree_node* %118, i32 108, i32 100), !dbg !9243
  store %union.tree_node* %call65, %union.tree_node** %retval, align 8, !dbg !9244
  br label %return, !dbg !9244

sw.bb66:                                          ; preds = %entry
  %119 = load i32, i32* %loc.addr, align 4, !dbg !9245
  %120 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9246
  %121 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9247
  %122 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9248
  %call67 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %119, %union.tree_node* %120, %union.tree_node* %121, %union.tree_node* %122, i32 107, i32 99), !dbg !9249
  store %union.tree_node* %call67, %union.tree_node** %retval, align 8, !dbg !9250
  br label %return, !dbg !9250

sw.bb68:                                          ; preds = %entry
  %123 = load i32, i32* %loc.addr, align 4, !dbg !9251
  %124 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9252
  %125 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9253
  %126 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9254
  %call69 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %123, %union.tree_node* %124, %union.tree_node* %125, %union.tree_node* %126, i32 109, i32 101), !dbg !9255
  store %union.tree_node* %call69, %union.tree_node** %retval, align 8, !dbg !9256
  br label %return, !dbg !9256

sw.bb70:                                          ; preds = %entry
  %127 = load i32, i32* %loc.addr, align 4, !dbg !9257
  %128 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9258
  %129 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9259
  %130 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9260
  %call71 = call %union.tree_node* @fold_builtin_unordered_cmp(i32 %127, %union.tree_node* %128, %union.tree_node* %129, %union.tree_node* %130, i32 103, i32 116), !dbg !9261
  store %union.tree_node* %call71, %union.tree_node** %retval, align 8, !dbg !9262
  br label %return, !dbg !9262

sw.bb72:                                          ; preds = %entry
  br label %sw.epilog, !dbg !9263

sw.bb73:                                          ; preds = %entry
  %131 = load i32, i32* %loc.addr, align 4, !dbg !9264
  %132 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9265
  %133 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9266
  %134 = load i8, i8* %ignore.addr, align 1, !dbg !9267
  %conv = zext i8 %134 to i32, !dbg !9267
  %call74 = call %union.tree_node* @fold_builtin_sprintf(i32 %131, %union.tree_node* %132, %union.tree_node* %133, %union.tree_node* null, i32 %conv), !dbg !9268
  store %union.tree_node* %call74, %union.tree_node** %retval, align 8, !dbg !9269
  br label %return, !dbg !9269

sw.bb75:                                          ; preds = %entry
  %135 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9270
  %136 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9271
  %call76 = call %union.tree_node* @fold_builtin_object_size(%union.tree_node* %135, %union.tree_node* %136), !dbg !9272
  store %union.tree_node* %call76, %union.tree_node** %retval, align 8, !dbg !9273
  br label %return, !dbg !9273

sw.bb77:                                          ; preds = %entry, %entry, %entry
  %137 = load i32, i32* %loc.addr, align 4, !dbg !9274
  %138 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9275
  %139 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9276
  %140 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9277
  %141 = load i8, i8* %ignore.addr, align 1, !dbg !9278
  %142 = load i32, i32* %fcode, align 4, !dbg !9279
  %call78 = call %union.tree_node* @fold_builtin_printf(i32 %137, %union.tree_node* %138, %union.tree_node* %139, %union.tree_node* %140, i8 zeroext %141, i32 %142), !dbg !9280
  store %union.tree_node* %call78, %union.tree_node** %retval, align 8, !dbg !9281
  br label %return, !dbg !9281

sw.bb79:                                          ; preds = %entry, %entry
  %143 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9282
  %call80 = call zeroext i8 @validate_arg(%union.tree_node* %143, i32 8), !dbg !9284
  %tobool81 = icmp ne i8 %call80, 0, !dbg !9284
  br i1 %tobool81, label %lor.lhs.false, label %if.then85, !dbg !9285

lor.lhs.false:                                    ; preds = %sw.bb79
  %144 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9286
  %base = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !9286
  %145 = bitcast %struct.tree_base* %base to i64*, !dbg !9286
  %bf.load82 = load i64, i64* %145, align 8, !dbg !9286
  %bf.lshr = lshr i64 %bf.load82, 16, !dbg !9286
  %bf.clear83 = and i64 %bf.lshr, 1, !dbg !9286
  %bf.cast = trunc i64 %bf.clear83 to i32, !dbg !9286
  %tobool84 = icmp ne i32 %bf.cast, 0, !dbg !9286
  br i1 %tobool84, label %if.then85, label %if.else86, !dbg !9287

if.then85:                                        ; preds = %lor.lhs.false, %sw.bb79
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9288
  br label %return, !dbg !9288

if.else86:                                        ; preds = %lor.lhs.false
  %146 = load i32, i32* %loc.addr, align 4, !dbg !9289
  %147 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9290
  %148 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9291
  %149 = load i8, i8* %ignore.addr, align 1, !dbg !9292
  %150 = load i32, i32* %fcode, align 4, !dbg !9293
  %call87 = call %union.tree_node* @fold_builtin_printf(i32 %146, %union.tree_node* %147, %union.tree_node* %148, %union.tree_node* null, i8 zeroext %149, i32 %150), !dbg !9294
  store %union.tree_node* %call87, %union.tree_node** %retval, align 8, !dbg !9295
  br label %return, !dbg !9295

sw.bb88:                                          ; preds = %entry, %entry, %entry
  %151 = load i32, i32* %loc.addr, align 4, !dbg !9296
  %152 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9297
  %153 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9298
  %154 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9299
  %155 = load i8, i8* %ignore.addr, align 1, !dbg !9300
  %156 = load i32, i32* %fcode, align 4, !dbg !9301
  %call89 = call %union.tree_node* @fold_builtin_fprintf(i32 %151, %union.tree_node* %152, %union.tree_node* %153, %union.tree_node* %154, %union.tree_node* null, i8 zeroext %155, i32 %156), !dbg !9302
  store %union.tree_node* %call89, %union.tree_node** %retval, align 8, !dbg !9303
  br label %return, !dbg !9303

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9304

sw.epilog:                                        ; preds = %sw.default, %sw.bb72, %if.then41
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9305
  br label %return, !dbg !9305

return:                                           ; preds = %sw.epilog, %sw.bb88, %if.else86, %if.then85, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb70, %sw.bb68, %sw.bb66, %sw.bb64, %sw.bb62, %sw.bb60, %sw.bb58, %sw.bb56, %sw.bb54, %sw.bb52, %sw.bb50, %sw.bb48, %sw.bb46, %sw.bb44, %if.else, %if.end, %sw.bb37, %sw.bb35, %sw.bb33, %sw.bb31, %sw.bb29, %sw.bb27, %sw.bb25, %sw.bb23, %sw.bb21, %sw.bb19, %sw.bb17, %sw.bb15, %sw.bb13, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb
  %157 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9306
  ret %union.tree_node* %157, !dbg !9306
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_3(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %arg2, i8 zeroext %ignore) #0 !dbg !9307 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9310, metadata !DIExpression()), !dbg !9311
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9312, metadata !DIExpression()), !dbg !9313
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !9314, metadata !DIExpression()), !dbg !9315
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !9316, metadata !DIExpression()), !dbg !9317
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !9318, metadata !DIExpression()), !dbg !9319
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !9320, metadata !DIExpression()), !dbg !9321
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9322, metadata !DIExpression()), !dbg !9323
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9324
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9324
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9324
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9324
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9324
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !9324
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9324
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !9323
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !9325, metadata !DIExpression()), !dbg !9326
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9327
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !9327
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9327
  %bf.load = load i32, i32* %function_code, align 8, !dbg !9327
  %bf.clear = and i32 %bf.load, 2047, !dbg !9327
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !9326
  %4 = load i32, i32* %fcode, align 4, !dbg !9328
  switch i32 %4, label %sw.default [
    i32 220, label %sw.bb
    i32 221, label %sw.bb
    i32 222, label %sw.bb
    i32 66, label %sw.bb4
    i32 67, label %sw.bb4
    i32 68, label %sw.bb4
    i32 192, label %sw.bb5
    i32 193, label %sw.bb5
    i32 194, label %sw.bb5
    i32 333, label %sw.bb6
    i32 325, label %sw.bb8
    i32 330, label %sw.bb10
    i32 332, label %sw.bb12
    i32 331, label %sw.bb14
    i32 347, label %sw.bb16
    i32 349, label %sw.bb18
    i32 348, label %sw.bb20
    i32 328, label %sw.bb22
    i32 324, label %sw.bb24
    i32 329, label %sw.bb24
    i32 373, label %sw.bb26
    i32 535, label %sw.bb28
    i32 533, label %sw.bb28
    i32 534, label %sw.bb30
    i32 543, label %sw.bb32
    i32 545, label %sw.bb32
    i32 354, label %sw.bb38
    i32 355, label %sw.bb38
    i32 375, label %sw.bb38
    i32 542, label %sw.bb40
    i32 544, label %sw.bb40
  ], !dbg !9329

sw.bb:                                            ; preds = %entry, %entry, %entry
  %5 = load i32, i32* %loc.addr, align 4, !dbg !9330
  %6 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9332
  %7 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9333
  %8 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9334
  %call = call %union.tree_node* @fold_builtin_sincos(i32 %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !9335
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !9336
  br label %return, !dbg !9336

sw.bb4:                                           ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9337
  br label %return, !dbg !9337

sw.bb5:                                           ; preds = %entry, %entry, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9338
  br label %return, !dbg !9338

sw.bb6:                                           ; preds = %entry
  %9 = load i32, i32* %loc.addr, align 4, !dbg !9339
  %10 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9340
  %11 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9341
  %12 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9342
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9343
  %14 = load i8, i8* %ignore.addr, align 1, !dbg !9344
  %call7 = call %union.tree_node* @fold_builtin_memset(i32 %9, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext %14), !dbg !9345
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !9346
  br label %return, !dbg !9346

sw.bb8:                                           ; preds = %entry
  %15 = load i32, i32* %loc.addr, align 4, !dbg !9347
  %16 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9348
  %17 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9349
  %18 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9350
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9351
  %call9 = call %union.tree_node* @fold_builtin_memory_op(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19, i8 zeroext 1, i32 3), !dbg !9352
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !9353
  br label %return, !dbg !9353

sw.bb10:                                          ; preds = %entry
  %20 = load i32, i32* %loc.addr, align 4, !dbg !9354
  %21 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9355
  %22 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9356
  %23 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9357
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9358
  %25 = load i8, i8* %ignore.addr, align 1, !dbg !9359
  %call11 = call %union.tree_node* @fold_builtin_memory_op(i32 %20, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24, i8 zeroext %25, i32 0), !dbg !9360
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !9361
  br label %return, !dbg !9361

sw.bb12:                                          ; preds = %entry
  %26 = load i32, i32* %loc.addr, align 4, !dbg !9362
  %27 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9363
  %28 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9364
  %29 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9365
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9366
  %31 = load i8, i8* %ignore.addr, align 1, !dbg !9367
  %call13 = call %union.tree_node* @fold_builtin_memory_op(i32 %26, %union.tree_node* %27, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %30, i8 zeroext %31, i32 1), !dbg !9368
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !9369
  br label %return, !dbg !9369

sw.bb14:                                          ; preds = %entry
  %32 = load i32, i32* %loc.addr, align 4, !dbg !9370
  %33 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9371
  %34 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9372
  %35 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9373
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9374
  %37 = load i8, i8* %ignore.addr, align 1, !dbg !9375
  %call15 = call %union.tree_node* @fold_builtin_memory_op(i32 %32, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36, i8 zeroext %37, i32 3), !dbg !9376
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !9377
  br label %return, !dbg !9377

sw.bb16:                                          ; preds = %entry
  %38 = load i32, i32* %loc.addr, align 4, !dbg !9378
  %39 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9379
  %40 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9380
  %41 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9381
  %call17 = call %union.tree_node* @fold_builtin_strncat(i32 %38, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41), !dbg !9382
  store %union.tree_node* %call17, %union.tree_node** %retval, align 8, !dbg !9383
  br label %return, !dbg !9383

sw.bb18:                                          ; preds = %entry
  %42 = load i32, i32* %loc.addr, align 4, !dbg !9384
  %43 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9385
  %44 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9386
  %45 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9387
  %46 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9388
  %call19 = call %union.tree_node* @fold_builtin_strncpy(i32 %42, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* null), !dbg !9389
  store %union.tree_node* %call19, %union.tree_node** %retval, align 8, !dbg !9390
  br label %return, !dbg !9390

sw.bb20:                                          ; preds = %entry
  %47 = load i32, i32* %loc.addr, align 4, !dbg !9391
  %48 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9392
  %49 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9393
  %50 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9394
  %call21 = call %union.tree_node* @fold_builtin_strncmp(i32 %47, %union.tree_node* %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !9395
  store %union.tree_node* %call21, %union.tree_node** %retval, align 8, !dbg !9396
  br label %return, !dbg !9396

sw.bb22:                                          ; preds = %entry
  %51 = load i32, i32* %loc.addr, align 4, !dbg !9397
  %52 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9398
  %53 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9399
  %54 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9400
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9401
  %call23 = call %union.tree_node* @fold_builtin_memchr(i32 %51, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %54, %union.tree_node* %55), !dbg !9402
  store %union.tree_node* %call23, %union.tree_node** %retval, align 8, !dbg !9403
  br label %return, !dbg !9403

sw.bb24:                                          ; preds = %entry, %entry
  %56 = load i32, i32* %loc.addr, align 4, !dbg !9404
  %57 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9405
  %58 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9406
  %59 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9407
  %call25 = call %union.tree_node* @fold_builtin_memcmp(i32 %56, %union.tree_node* %57, %union.tree_node* %58, %union.tree_node* %59), !dbg !9408
  store %union.tree_node* %call25, %union.tree_node** %retval, align 8, !dbg !9409
  br label %return, !dbg !9409

sw.bb26:                                          ; preds = %entry
  %60 = load i32, i32* %loc.addr, align 4, !dbg !9410
  %61 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9411
  %62 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9412
  %63 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9413
  %64 = load i8, i8* %ignore.addr, align 1, !dbg !9414
  %conv = zext i8 %64 to i32, !dbg !9414
  %call27 = call %union.tree_node* @fold_builtin_sprintf(i32 %60, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63, i32 %conv), !dbg !9415
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !9416
  br label %return, !dbg !9416

sw.bb28:                                          ; preds = %entry, %entry
  %65 = load i32, i32* %loc.addr, align 4, !dbg !9417
  %66 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9418
  %67 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9419
  %68 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9420
  %69 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9421
  %70 = load i8, i8* %ignore.addr, align 1, !dbg !9422
  %71 = load i32, i32* %fcode, align 4, !dbg !9423
  %call29 = call %union.tree_node* @fold_builtin_stxcpy_chk(i32 %65, %union.tree_node* %66, %union.tree_node* %67, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* null, i8 zeroext %70, i32 %71), !dbg !9424
  store %union.tree_node* %call29, %union.tree_node** %retval, align 8, !dbg !9425
  br label %return, !dbg !9425

sw.bb30:                                          ; preds = %entry
  %72 = load i32, i32* %loc.addr, align 4, !dbg !9426
  %73 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9427
  %74 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9428
  %75 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9429
  %76 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9430
  %call31 = call %union.tree_node* @fold_builtin_strcat_chk(i32 %72, %union.tree_node* %73, %union.tree_node* %74, %union.tree_node* %75, %union.tree_node* %76), !dbg !9431
  store %union.tree_node* %call31, %union.tree_node** %retval, align 8, !dbg !9432
  br label %return, !dbg !9432

sw.bb32:                                          ; preds = %entry, %entry
  %77 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9433
  %call33 = call zeroext i8 @validate_arg(%union.tree_node* %77, i32 8), !dbg !9435
  %tobool = icmp ne i8 %call33, 0, !dbg !9435
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9436

lor.lhs.false:                                    ; preds = %sw.bb32
  %78 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9437
  %base = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !9437
  %79 = bitcast %struct.tree_base* %base to i64*, !dbg !9437
  %bf.load34 = load i64, i64* %79, align 8, !dbg !9437
  %bf.lshr = lshr i64 %bf.load34, 16, !dbg !9437
  %bf.clear35 = and i64 %bf.lshr, 1, !dbg !9437
  %bf.cast = trunc i64 %bf.clear35 to i32, !dbg !9437
  %tobool36 = icmp ne i32 %bf.cast, 0, !dbg !9437
  br i1 %tobool36, label %if.then, label %if.else, !dbg !9438

if.then:                                          ; preds = %lor.lhs.false, %sw.bb32
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9439
  br label %return, !dbg !9439

if.else:                                          ; preds = %lor.lhs.false
  %80 = load i32, i32* %loc.addr, align 4, !dbg !9440
  %81 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9441
  %82 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9442
  %83 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9443
  %84 = load i8, i8* %ignore.addr, align 1, !dbg !9444
  %85 = load i32, i32* %fcode, align 4, !dbg !9445
  %call37 = call %union.tree_node* @fold_builtin_printf(i32 %80, %union.tree_node* %81, %union.tree_node* %82, %union.tree_node* %83, i8 zeroext %84, i32 %85), !dbg !9446
  store %union.tree_node* %call37, %union.tree_node** %retval, align 8, !dbg !9447
  br label %return, !dbg !9447

sw.bb38:                                          ; preds = %entry, %entry, %entry
  %86 = load i32, i32* %loc.addr, align 4, !dbg !9448
  %87 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9449
  %88 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9450
  %89 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9451
  %90 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9452
  %91 = load i8, i8* %ignore.addr, align 1, !dbg !9453
  %92 = load i32, i32* %fcode, align 4, !dbg !9454
  %call39 = call %union.tree_node* @fold_builtin_fprintf(i32 %86, %union.tree_node* %87, %union.tree_node* %88, %union.tree_node* %89, %union.tree_node* %90, i8 zeroext %91, i32 %92), !dbg !9455
  store %union.tree_node* %call39, %union.tree_node** %retval, align 8, !dbg !9456
  br label %return, !dbg !9456

sw.bb40:                                          ; preds = %entry, %entry
  %93 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9457
  %call41 = call zeroext i8 @validate_arg(%union.tree_node* %93, i32 8), !dbg !9459
  %tobool42 = icmp ne i8 %call41, 0, !dbg !9459
  br i1 %tobool42, label %lor.lhs.false43, label %if.then50, !dbg !9460

lor.lhs.false43:                                  ; preds = %sw.bb40
  %94 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9461
  %base44 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !9461
  %95 = bitcast %struct.tree_base* %base44 to i64*, !dbg !9461
  %bf.load45 = load i64, i64* %95, align 8, !dbg !9461
  %bf.lshr46 = lshr i64 %bf.load45, 16, !dbg !9461
  %bf.clear47 = and i64 %bf.lshr46, 1, !dbg !9461
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !9461
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !9461
  br i1 %tobool49, label %if.then50, label %if.else51, !dbg !9462

if.then50:                                        ; preds = %lor.lhs.false43, %sw.bb40
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9463
  br label %return, !dbg !9463

if.else51:                                        ; preds = %lor.lhs.false43
  %96 = load i32, i32* %loc.addr, align 4, !dbg !9464
  %97 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9465
  %98 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9466
  %99 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9467
  %100 = load i8, i8* %ignore.addr, align 1, !dbg !9468
  %101 = load i32, i32* %fcode, align 4, !dbg !9469
  %call52 = call %union.tree_node* @fold_builtin_fprintf(i32 %96, %union.tree_node* %97, %union.tree_node* %98, %union.tree_node* %99, %union.tree_node* null, i8 zeroext %100, i32 %101), !dbg !9470
  store %union.tree_node* %call52, %union.tree_node** %retval, align 8, !dbg !9471
  br label %return, !dbg !9471

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9472

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9473
  br label %return, !dbg !9473

return:                                           ; preds = %sw.epilog, %if.else51, %if.then50, %sw.bb38, %if.else, %if.then, %sw.bb30, %sw.bb28, %sw.bb26, %sw.bb24, %sw.bb22, %sw.bb20, %sw.bb18, %sw.bb16, %sw.bb14, %sw.bb12, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb
  %102 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9474
  ret %union.tree_node* %102, !dbg !9474
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_4(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %arg2, %union.tree_node* %arg3, i8 zeroext %ignore) #0 !dbg !9475 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %arg3.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9478, metadata !DIExpression()), !dbg !9479
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9480, metadata !DIExpression()), !dbg !9481
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !9482, metadata !DIExpression()), !dbg !9483
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !9484, metadata !DIExpression()), !dbg !9485
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !9486, metadata !DIExpression()), !dbg !9487
  store %union.tree_node* %arg3, %union.tree_node** %arg3.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg3.addr, metadata !9488, metadata !DIExpression()), !dbg !9489
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !9490, metadata !DIExpression()), !dbg !9491
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !9492, metadata !DIExpression()), !dbg !9493
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9494
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !9494
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9494
  %bf.load = load i32, i32* %function_code, align 8, !dbg !9494
  %bf.clear = and i32 %bf.load, 2047, !dbg !9494
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !9493
  %1 = load i32, i32* %fcode, align 4, !dbg !9495
  switch i32 %1, label %sw.default [
    i32 529, label %sw.bb
    i32 531, label %sw.bb
    i32 530, label %sw.bb
    i32 532, label %sw.bb
    i32 537, label %sw.bb5
    i32 536, label %sw.bb7
    i32 542, label %sw.bb9
    i32 544, label %sw.bb9
  ], !dbg !9496

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  %2 = load i32, i32* %loc.addr, align 4, !dbg !9497
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9499
  %4 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9500
  %5 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9501
  %6 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9502
  %7 = load %union.tree_node*, %union.tree_node** %arg3.addr, align 8, !dbg !9503
  %8 = load i8, i8* %ignore.addr, align 1, !dbg !9504
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9505
  %function_decl1 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !9505
  %function_code2 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl1, i32 0, i32 5, !dbg !9505
  %bf.load3 = load i32, i32* %function_code2, align 8, !dbg !9505
  %bf.clear4 = and i32 %bf.load3, 2047, !dbg !9505
  %call = call %union.tree_node* @fold_builtin_memory_chk(i32 %2, %union.tree_node* %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* null, i8 zeroext %8, i32 %bf.clear4), !dbg !9506
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !9507
  br label %return, !dbg !9507

sw.bb5:                                           ; preds = %entry
  %10 = load i32, i32* %loc.addr, align 4, !dbg !9508
  %11 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9509
  %12 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9510
  %13 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9511
  %14 = load %union.tree_node*, %union.tree_node** %arg3.addr, align 8, !dbg !9512
  %call6 = call %union.tree_node* @fold_builtin_strncpy_chk(i32 %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* null), !dbg !9513
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !9514
  br label %return, !dbg !9514

sw.bb7:                                           ; preds = %entry
  %15 = load i32, i32* %loc.addr, align 4, !dbg !9515
  %16 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9516
  %17 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9517
  %18 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9518
  %19 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9519
  %20 = load %union.tree_node*, %union.tree_node** %arg3.addr, align 8, !dbg !9520
  %call8 = call %union.tree_node* @fold_builtin_strncat_chk(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !9521
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !9522
  br label %return, !dbg !9522

sw.bb9:                                           ; preds = %entry, %entry
  %21 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9523
  %call10 = call zeroext i8 @validate_arg(%union.tree_node* %21, i32 8), !dbg !9525
  %tobool = icmp ne i8 %call10, 0, !dbg !9525
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9526

lor.lhs.false:                                    ; preds = %sw.bb9
  %22 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !9527
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9527
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !9527
  %bf.load11 = load i64, i64* %23, align 8, !dbg !9527
  %bf.lshr = lshr i64 %bf.load11, 16, !dbg !9527
  %bf.clear12 = and i64 %bf.lshr, 1, !dbg !9527
  %bf.cast = trunc i64 %bf.clear12 to i32, !dbg !9527
  %tobool13 = icmp ne i32 %bf.cast, 0, !dbg !9527
  br i1 %tobool13, label %if.then, label %if.else, !dbg !9528

if.then:                                          ; preds = %lor.lhs.false, %sw.bb9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9529
  br label %return, !dbg !9529

if.else:                                          ; preds = %lor.lhs.false
  %24 = load i32, i32* %loc.addr, align 4, !dbg !9530
  %25 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9531
  %26 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !9532
  %27 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !9533
  %28 = load %union.tree_node*, %union.tree_node** %arg3.addr, align 8, !dbg !9534
  %29 = load i8, i8* %ignore.addr, align 1, !dbg !9535
  %30 = load i32, i32* %fcode, align 4, !dbg !9536
  %call14 = call %union.tree_node* @fold_builtin_fprintf(i32 %24, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28, i8 zeroext %29, i32 %30), !dbg !9537
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !9538
  br label %return, !dbg !9538

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9539

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9540
  br label %return, !dbg !9540

return:                                           ; preds = %sw.epilog, %if.else, %if.then, %sw.bb7, %sw.bb5, %sw.bb
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9541
  ret %union.tree_node* %31, !dbg !9541
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_inf(i32 %loc, %union.tree_node* %type, i32 %warn) #0 !dbg !9542 {
entry:
  %loc.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %warn.addr = alloca i32, align 4
  %real = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9545, metadata !DIExpression()), !dbg !9546
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9547, metadata !DIExpression()), !dbg !9548
  store i32 %warn, i32* %warn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %warn.addr, metadata !9549, metadata !DIExpression()), !dbg !9550
  call void @llvm.dbg.declare(metadata %struct.real_value* %real, metadata !9551, metadata !DIExpression()), !dbg !9552
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9553
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9553
  %bf.load = load i64, i64* %1, align 8, !dbg !9553
  %bf.clear = and i64 %bf.load, 65535, !dbg !9553
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9553
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !9553
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9553

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call = call i32 @vector_type_mode(%union.tree_node* %2), !dbg !9553
  br label %cond.end, !dbg !9553

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !9553
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !9553
  %bf.load2 = load i32, i32* %mode, align 4, !dbg !9553
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !9553
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !9553
  br label %cond.end, !dbg !9553

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear3, %cond.false ], !dbg !9553
  %idxprom = zext i32 %cond to i64, !dbg !9553
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9553
  %4 = load i8, i8* %arrayidx, align 1, !dbg !9553
  %conv = zext i8 %4 to i32, !dbg !9553
  %cmp4 = icmp eq i32 %conv, 8, !dbg !9553
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false, !dbg !9553

lor.lhs.false:                                    ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9553
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !9553
  %bf.load7 = load i64, i64* %6, align 8, !dbg !9553
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !9553
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9553
  %cmp10 = icmp eq i32 %bf.cast9, 14, !dbg !9553
  br i1 %cmp10, label %cond.true12, label %cond.false14, !dbg !9553

cond.true12:                                      ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call13 = call i32 @vector_type_mode(%union.tree_node* %7), !dbg !9553
  br label %cond.end20, !dbg !9553

cond.false14:                                     ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type15 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !9553
  %mode16 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6, !dbg !9553
  %bf.load17 = load i32, i32* %mode16, align 4, !dbg !9553
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !9553
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !9553
  br label %cond.end20, !dbg !9553

cond.end20:                                       ; preds = %cond.false14, %cond.true12
  %cond21 = phi i32 [ %call13, %cond.true12 ], [ %bf.clear19, %cond.false14 ], !dbg !9553
  %idxprom22 = zext i32 %cond21 to i64, !dbg !9553
  %arrayidx23 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom22, !dbg !9553
  %9 = load i8, i8* %arrayidx23, align 1, !dbg !9553
  %conv24 = zext i8 %9 to i32, !dbg !9553
  %cmp25 = icmp eq i32 %conv24, 9, !dbg !9553
  br i1 %cmp25, label %land.lhs.true, label %lor.lhs.false27, !dbg !9553

lor.lhs.false27:                                  ; preds = %cond.end20
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base28 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9553
  %11 = bitcast %struct.tree_base* %base28 to i64*, !dbg !9553
  %bf.load29 = load i64, i64* %11, align 8, !dbg !9553
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !9553
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !9553
  %cmp32 = icmp eq i32 %bf.cast31, 14, !dbg !9553
  br i1 %cmp32, label %cond.true34, label %cond.false36, !dbg !9553

cond.true34:                                      ; preds = %lor.lhs.false27
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call35 = call i32 @vector_type_mode(%union.tree_node* %12), !dbg !9553
  br label %cond.end42, !dbg !9553

cond.false36:                                     ; preds = %lor.lhs.false27
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type37 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !9553
  %mode38 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 6, !dbg !9553
  %bf.load39 = load i32, i32* %mode38, align 4, !dbg !9553
  %bf.lshr40 = lshr i32 %bf.load39, 16, !dbg !9553
  %bf.clear41 = and i32 %bf.lshr40, 255, !dbg !9553
  br label %cond.end42, !dbg !9553

cond.end42:                                       ; preds = %cond.false36, %cond.true34
  %cond43 = phi i32 [ %call35, %cond.true34 ], [ %bf.clear41, %cond.false36 ], !dbg !9553
  %idxprom44 = zext i32 %cond43 to i64, !dbg !9553
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom44, !dbg !9553
  %14 = load i8, i8* %arrayidx45, align 1, !dbg !9553
  %conv46 = zext i8 %14 to i32, !dbg !9553
  %cmp47 = icmp eq i32 %conv46, 11, !dbg !9553
  br i1 %cmp47, label %land.lhs.true, label %lor.lhs.false49, !dbg !9553

lor.lhs.false49:                                  ; preds = %cond.end42
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base50 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9553
  %16 = bitcast %struct.tree_base* %base50 to i64*, !dbg !9553
  %bf.load51 = load i64, i64* %16, align 8, !dbg !9553
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !9553
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !9553
  %cmp54 = icmp eq i32 %bf.cast53, 14, !dbg !9553
  br i1 %cmp54, label %cond.true56, label %cond.false58, !dbg !9553

cond.true56:                                      ; preds = %lor.lhs.false49
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call57 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !9553
  br label %cond.end64, !dbg !9553

cond.false58:                                     ; preds = %lor.lhs.false49
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type59 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !9553
  %mode60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 6, !dbg !9553
  %bf.load61 = load i32, i32* %mode60, align 4, !dbg !9553
  %bf.lshr62 = lshr i32 %bf.load61, 16, !dbg !9553
  %bf.clear63 = and i32 %bf.lshr62, 255, !dbg !9553
  br label %cond.end64, !dbg !9553

cond.end64:                                       ; preds = %cond.false58, %cond.true56
  %cond65 = phi i32 [ %call57, %cond.true56 ], [ %bf.clear63, %cond.false58 ], !dbg !9553
  %idxprom66 = zext i32 %cond65 to i64, !dbg !9553
  %arrayidx67 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom66, !dbg !9553
  %19 = load i8, i8* %arrayidx67, align 1, !dbg !9553
  %conv68 = zext i8 %19 to i32, !dbg !9553
  %cmp69 = icmp eq i32 %conv68, 17, !dbg !9553
  br i1 %cmp69, label %land.lhs.true, label %land.lhs.true330, !dbg !9553

land.lhs.true:                                    ; preds = %cond.end64, %cond.end42, %cond.end20, %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base71 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9553
  %21 = bitcast %struct.tree_base* %base71 to i64*, !dbg !9553
  %bf.load72 = load i64, i64* %21, align 8, !dbg !9553
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !9553
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !9553
  %cmp75 = icmp eq i32 %bf.cast74, 14, !dbg !9553
  br i1 %cmp75, label %cond.true77, label %cond.false79, !dbg !9553

cond.true77:                                      ; preds = %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call78 = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !9553
  br label %cond.end85, !dbg !9553

cond.false79:                                     ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type80 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !9553
  %mode81 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 6, !dbg !9553
  %bf.load82 = load i32, i32* %mode81, align 4, !dbg !9553
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !9553
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !9553
  br label %cond.end85, !dbg !9553

cond.end85:                                       ; preds = %cond.false79, %cond.true77
  %cond86 = phi i32 [ %call78, %cond.true77 ], [ %bf.clear84, %cond.false79 ], !dbg !9553
  %idxprom87 = zext i32 %cond86 to i64, !dbg !9553
  %arrayidx88 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom87, !dbg !9553
  %24 = load i8, i8* %arrayidx88, align 1, !dbg !9553
  %conv89 = zext i8 %24 to i32, !dbg !9553
  %cmp90 = icmp eq i32 %conv89, 8, !dbg !9553
  br i1 %cmp90, label %cond.true114, label %lor.lhs.false92, !dbg !9553

lor.lhs.false92:                                  ; preds = %cond.end85
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base93 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !9553
  %26 = bitcast %struct.tree_base* %base93 to i64*, !dbg !9553
  %bf.load94 = load i64, i64* %26, align 8, !dbg !9553
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !9553
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !9553
  %cmp97 = icmp eq i32 %bf.cast96, 14, !dbg !9553
  br i1 %cmp97, label %cond.true99, label %cond.false101, !dbg !9553

cond.true99:                                      ; preds = %lor.lhs.false92
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call100 = call i32 @vector_type_mode(%union.tree_node* %27), !dbg !9553
  br label %cond.end107, !dbg !9553

cond.false101:                                    ; preds = %lor.lhs.false92
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type102 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !9553
  %mode103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 6, !dbg !9553
  %bf.load104 = load i32, i32* %mode103, align 4, !dbg !9553
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !9553
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !9553
  br label %cond.end107, !dbg !9553

cond.end107:                                      ; preds = %cond.false101, %cond.true99
  %cond108 = phi i32 [ %call100, %cond.true99 ], [ %bf.clear106, %cond.false101 ], !dbg !9553
  %idxprom109 = zext i32 %cond108 to i64, !dbg !9553
  %arrayidx110 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom109, !dbg !9553
  %29 = load i8, i8* %arrayidx110, align 1, !dbg !9553
  %conv111 = zext i8 %29 to i32, !dbg !9553
  %cmp112 = icmp eq i32 %conv111, 9, !dbg !9553
  br i1 %cmp112, label %cond.true114, label %cond.false131, !dbg !9553

cond.true114:                                     ; preds = %cond.end107, %cond.end85
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base115 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !9553
  %31 = bitcast %struct.tree_base* %base115 to i64*, !dbg !9553
  %bf.load116 = load i64, i64* %31, align 8, !dbg !9553
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !9553
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !9553
  %cmp119 = icmp eq i32 %bf.cast118, 14, !dbg !9553
  br i1 %cmp119, label %cond.true121, label %cond.false123, !dbg !9553

cond.true121:                                     ; preds = %cond.true114
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call122 = call i32 @vector_type_mode(%union.tree_node* %32), !dbg !9553
  br label %cond.end129, !dbg !9553

cond.false123:                                    ; preds = %cond.true114
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type124 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !9553
  %mode125 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 6, !dbg !9553
  %bf.load126 = load i32, i32* %mode125, align 4, !dbg !9553
  %bf.lshr127 = lshr i32 %bf.load126, 16, !dbg !9553
  %bf.clear128 = and i32 %bf.lshr127, 255, !dbg !9553
  br label %cond.end129, !dbg !9553

cond.end129:                                      ; preds = %cond.false123, %cond.true121
  %cond130 = phi i32 [ %call122, %cond.true121 ], [ %bf.clear128, %cond.false123 ], !dbg !9553
  br label %cond.end151, !dbg !9553

cond.false131:                                    ; preds = %cond.end107
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base132 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !9553
  %35 = bitcast %struct.tree_base* %base132 to i64*, !dbg !9553
  %bf.load133 = load i64, i64* %35, align 8, !dbg !9553
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !9553
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !9553
  %cmp136 = icmp eq i32 %bf.cast135, 14, !dbg !9553
  br i1 %cmp136, label %cond.true138, label %cond.false140, !dbg !9553

cond.true138:                                     ; preds = %cond.false131
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call139 = call i32 @vector_type_mode(%union.tree_node* %36), !dbg !9553
  br label %cond.end146, !dbg !9553

cond.false140:                                    ; preds = %cond.false131
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type141 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !9553
  %mode142 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type141, i32 0, i32 6, !dbg !9553
  %bf.load143 = load i32, i32* %mode142, align 4, !dbg !9553
  %bf.lshr144 = lshr i32 %bf.load143, 16, !dbg !9553
  %bf.clear145 = and i32 %bf.lshr144, 255, !dbg !9553
  br label %cond.end146, !dbg !9553

cond.end146:                                      ; preds = %cond.false140, %cond.true138
  %cond147 = phi i32 [ %call139, %cond.true138 ], [ %bf.clear145, %cond.false140 ], !dbg !9553
  %idxprom148 = zext i32 %cond147 to i64, !dbg !9553
  %arrayidx149 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom148, !dbg !9553
  %38 = load i8, i8* %arrayidx149, align 1, !dbg !9553
  %conv150 = zext i8 %38 to i32, !dbg !9553
  br label %cond.end151, !dbg !9553

cond.end151:                                      ; preds = %cond.end146, %cond.end129
  %cond152 = phi i32 [ %cond130, %cond.end129 ], [ %conv150, %cond.end146 ], !dbg !9553
  %idxprom153 = zext i32 %cond152 to i64, !dbg !9553
  %arrayidx154 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom153, !dbg !9553
  %39 = load i8, i8* %arrayidx154, align 1, !dbg !9553
  %conv155 = zext i8 %39 to i32, !dbg !9553
  %cmp156 = icmp eq i32 %conv155, 9, !dbg !9553
  br i1 %cmp156, label %cond.true158, label %cond.false241, !dbg !9553

cond.true158:                                     ; preds = %cond.end151
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base159 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !9553
  %41 = bitcast %struct.tree_base* %base159 to i64*, !dbg !9553
  %bf.load160 = load i64, i64* %41, align 8, !dbg !9553
  %bf.clear161 = and i64 %bf.load160, 65535, !dbg !9553
  %bf.cast162 = trunc i64 %bf.clear161 to i32, !dbg !9553
  %cmp163 = icmp eq i32 %bf.cast162, 14, !dbg !9553
  br i1 %cmp163, label %cond.true165, label %cond.false167, !dbg !9553

cond.true165:                                     ; preds = %cond.true158
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call166 = call i32 @vector_type_mode(%union.tree_node* %42), !dbg !9553
  br label %cond.end173, !dbg !9553

cond.false167:                                    ; preds = %cond.true158
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type168 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !9553
  %mode169 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type168, i32 0, i32 6, !dbg !9553
  %bf.load170 = load i32, i32* %mode169, align 4, !dbg !9553
  %bf.lshr171 = lshr i32 %bf.load170, 16, !dbg !9553
  %bf.clear172 = and i32 %bf.lshr171, 255, !dbg !9553
  br label %cond.end173, !dbg !9553

cond.end173:                                      ; preds = %cond.false167, %cond.true165
  %cond174 = phi i32 [ %call166, %cond.true165 ], [ %bf.clear172, %cond.false167 ], !dbg !9553
  %idxprom175 = zext i32 %cond174 to i64, !dbg !9553
  %arrayidx176 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom175, !dbg !9553
  %44 = load i8, i8* %arrayidx176, align 1, !dbg !9553
  %conv177 = zext i8 %44 to i32, !dbg !9553
  %cmp178 = icmp eq i32 %conv177, 8, !dbg !9553
  br i1 %cmp178, label %cond.true202, label %lor.lhs.false180, !dbg !9553

lor.lhs.false180:                                 ; preds = %cond.end173
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base181 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !9553
  %46 = bitcast %struct.tree_base* %base181 to i64*, !dbg !9553
  %bf.load182 = load i64, i64* %46, align 8, !dbg !9553
  %bf.clear183 = and i64 %bf.load182, 65535, !dbg !9553
  %bf.cast184 = trunc i64 %bf.clear183 to i32, !dbg !9553
  %cmp185 = icmp eq i32 %bf.cast184, 14, !dbg !9553
  br i1 %cmp185, label %cond.true187, label %cond.false189, !dbg !9553

cond.true187:                                     ; preds = %lor.lhs.false180
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call188 = call i32 @vector_type_mode(%union.tree_node* %47), !dbg !9553
  br label %cond.end195, !dbg !9553

cond.false189:                                    ; preds = %lor.lhs.false180
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type190 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !9553
  %mode191 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type190, i32 0, i32 6, !dbg !9553
  %bf.load192 = load i32, i32* %mode191, align 4, !dbg !9553
  %bf.lshr193 = lshr i32 %bf.load192, 16, !dbg !9553
  %bf.clear194 = and i32 %bf.lshr193, 255, !dbg !9553
  br label %cond.end195, !dbg !9553

cond.end195:                                      ; preds = %cond.false189, %cond.true187
  %cond196 = phi i32 [ %call188, %cond.true187 ], [ %bf.clear194, %cond.false189 ], !dbg !9553
  %idxprom197 = zext i32 %cond196 to i64, !dbg !9553
  %arrayidx198 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom197, !dbg !9553
  %49 = load i8, i8* %arrayidx198, align 1, !dbg !9553
  %conv199 = zext i8 %49 to i32, !dbg !9553
  %cmp200 = icmp eq i32 %conv199, 9, !dbg !9553
  br i1 %cmp200, label %cond.true202, label %cond.false219, !dbg !9553

cond.true202:                                     ; preds = %cond.end195, %cond.end173
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base203 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !9553
  %51 = bitcast %struct.tree_base* %base203 to i64*, !dbg !9553
  %bf.load204 = load i64, i64* %51, align 8, !dbg !9553
  %bf.clear205 = and i64 %bf.load204, 65535, !dbg !9553
  %bf.cast206 = trunc i64 %bf.clear205 to i32, !dbg !9553
  %cmp207 = icmp eq i32 %bf.cast206, 14, !dbg !9553
  br i1 %cmp207, label %cond.true209, label %cond.false211, !dbg !9553

cond.true209:                                     ; preds = %cond.true202
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call210 = call i32 @vector_type_mode(%union.tree_node* %52), !dbg !9553
  br label %cond.end217, !dbg !9553

cond.false211:                                    ; preds = %cond.true202
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type212 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !9553
  %mode213 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type212, i32 0, i32 6, !dbg !9553
  %bf.load214 = load i32, i32* %mode213, align 4, !dbg !9553
  %bf.lshr215 = lshr i32 %bf.load214, 16, !dbg !9553
  %bf.clear216 = and i32 %bf.lshr215, 255, !dbg !9553
  br label %cond.end217, !dbg !9553

cond.end217:                                      ; preds = %cond.false211, %cond.true209
  %cond218 = phi i32 [ %call210, %cond.true209 ], [ %bf.clear216, %cond.false211 ], !dbg !9553
  br label %cond.end239, !dbg !9553

cond.false219:                                    ; preds = %cond.end195
  %54 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base220 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !9553
  %55 = bitcast %struct.tree_base* %base220 to i64*, !dbg !9553
  %bf.load221 = load i64, i64* %55, align 8, !dbg !9553
  %bf.clear222 = and i64 %bf.load221, 65535, !dbg !9553
  %bf.cast223 = trunc i64 %bf.clear222 to i32, !dbg !9553
  %cmp224 = icmp eq i32 %bf.cast223, 14, !dbg !9553
  br i1 %cmp224, label %cond.true226, label %cond.false228, !dbg !9553

cond.true226:                                     ; preds = %cond.false219
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call227 = call i32 @vector_type_mode(%union.tree_node* %56), !dbg !9553
  br label %cond.end234, !dbg !9553

cond.false228:                                    ; preds = %cond.false219
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type229 = bitcast %union.tree_node* %57 to %struct.tree_type*, !dbg !9553
  %mode230 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type229, i32 0, i32 6, !dbg !9553
  %bf.load231 = load i32, i32* %mode230, align 4, !dbg !9553
  %bf.lshr232 = lshr i32 %bf.load231, 16, !dbg !9553
  %bf.clear233 = and i32 %bf.lshr232, 255, !dbg !9553
  br label %cond.end234, !dbg !9553

cond.end234:                                      ; preds = %cond.false228, %cond.true226
  %cond235 = phi i32 [ %call227, %cond.true226 ], [ %bf.clear233, %cond.false228 ], !dbg !9553
  %idxprom236 = zext i32 %cond235 to i64, !dbg !9553
  %arrayidx237 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom236, !dbg !9553
  %58 = load i8, i8* %arrayidx237, align 1, !dbg !9553
  %conv238 = zext i8 %58 to i32, !dbg !9553
  br label %cond.end239, !dbg !9553

cond.end239:                                      ; preds = %cond.end234, %cond.end217
  %cond240 = phi i32 [ %cond218, %cond.end217 ], [ %conv238, %cond.end234 ], !dbg !9553
  %sub = sub i32 %cond240, 42, !dbg !9553
  %add = add i32 %sub, 4, !dbg !9553
  br label %cond.end325, !dbg !9553

cond.false241:                                    ; preds = %cond.end151
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base242 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !9553
  %60 = bitcast %struct.tree_base* %base242 to i64*, !dbg !9553
  %bf.load243 = load i64, i64* %60, align 8, !dbg !9553
  %bf.clear244 = and i64 %bf.load243, 65535, !dbg !9553
  %bf.cast245 = trunc i64 %bf.clear244 to i32, !dbg !9553
  %cmp246 = icmp eq i32 %bf.cast245, 14, !dbg !9553
  br i1 %cmp246, label %cond.true248, label %cond.false250, !dbg !9553

cond.true248:                                     ; preds = %cond.false241
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call249 = call i32 @vector_type_mode(%union.tree_node* %61), !dbg !9553
  br label %cond.end256, !dbg !9553

cond.false250:                                    ; preds = %cond.false241
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type251 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !9553
  %mode252 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type251, i32 0, i32 6, !dbg !9553
  %bf.load253 = load i32, i32* %mode252, align 4, !dbg !9553
  %bf.lshr254 = lshr i32 %bf.load253, 16, !dbg !9553
  %bf.clear255 = and i32 %bf.lshr254, 255, !dbg !9553
  br label %cond.end256, !dbg !9553

cond.end256:                                      ; preds = %cond.false250, %cond.true248
  %cond257 = phi i32 [ %call249, %cond.true248 ], [ %bf.clear255, %cond.false250 ], !dbg !9553
  %idxprom258 = zext i32 %cond257 to i64, !dbg !9553
  %arrayidx259 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom258, !dbg !9553
  %63 = load i8, i8* %arrayidx259, align 1, !dbg !9553
  %conv260 = zext i8 %63 to i32, !dbg !9553
  %cmp261 = icmp eq i32 %conv260, 8, !dbg !9553
  br i1 %cmp261, label %cond.true285, label %lor.lhs.false263, !dbg !9553

lor.lhs.false263:                                 ; preds = %cond.end256
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base264 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !9553
  %65 = bitcast %struct.tree_base* %base264 to i64*, !dbg !9553
  %bf.load265 = load i64, i64* %65, align 8, !dbg !9553
  %bf.clear266 = and i64 %bf.load265, 65535, !dbg !9553
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !9553
  %cmp268 = icmp eq i32 %bf.cast267, 14, !dbg !9553
  br i1 %cmp268, label %cond.true270, label %cond.false272, !dbg !9553

cond.true270:                                     ; preds = %lor.lhs.false263
  %66 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call271 = call i32 @vector_type_mode(%union.tree_node* %66), !dbg !9553
  br label %cond.end278, !dbg !9553

cond.false272:                                    ; preds = %lor.lhs.false263
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type273 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !9553
  %mode274 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type273, i32 0, i32 6, !dbg !9553
  %bf.load275 = load i32, i32* %mode274, align 4, !dbg !9553
  %bf.lshr276 = lshr i32 %bf.load275, 16, !dbg !9553
  %bf.clear277 = and i32 %bf.lshr276, 255, !dbg !9553
  br label %cond.end278, !dbg !9553

cond.end278:                                      ; preds = %cond.false272, %cond.true270
  %cond279 = phi i32 [ %call271, %cond.true270 ], [ %bf.clear277, %cond.false272 ], !dbg !9553
  %idxprom280 = zext i32 %cond279 to i64, !dbg !9553
  %arrayidx281 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom280, !dbg !9553
  %68 = load i8, i8* %arrayidx281, align 1, !dbg !9553
  %conv282 = zext i8 %68 to i32, !dbg !9553
  %cmp283 = icmp eq i32 %conv282, 9, !dbg !9553
  br i1 %cmp283, label %cond.true285, label %cond.false302, !dbg !9553

cond.true285:                                     ; preds = %cond.end278, %cond.end256
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base286 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !9553
  %70 = bitcast %struct.tree_base* %base286 to i64*, !dbg !9553
  %bf.load287 = load i64, i64* %70, align 8, !dbg !9553
  %bf.clear288 = and i64 %bf.load287, 65535, !dbg !9553
  %bf.cast289 = trunc i64 %bf.clear288 to i32, !dbg !9553
  %cmp290 = icmp eq i32 %bf.cast289, 14, !dbg !9553
  br i1 %cmp290, label %cond.true292, label %cond.false294, !dbg !9553

cond.true292:                                     ; preds = %cond.true285
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call293 = call i32 @vector_type_mode(%union.tree_node* %71), !dbg !9553
  br label %cond.end300, !dbg !9553

cond.false294:                                    ; preds = %cond.true285
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type295 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !9553
  %mode296 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type295, i32 0, i32 6, !dbg !9553
  %bf.load297 = load i32, i32* %mode296, align 4, !dbg !9553
  %bf.lshr298 = lshr i32 %bf.load297, 16, !dbg !9553
  %bf.clear299 = and i32 %bf.lshr298, 255, !dbg !9553
  br label %cond.end300, !dbg !9553

cond.end300:                                      ; preds = %cond.false294, %cond.true292
  %cond301 = phi i32 [ %call293, %cond.true292 ], [ %bf.clear299, %cond.false294 ], !dbg !9553
  br label %cond.end322, !dbg !9553

cond.false302:                                    ; preds = %cond.end278
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %base303 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !9553
  %74 = bitcast %struct.tree_base* %base303 to i64*, !dbg !9553
  %bf.load304 = load i64, i64* %74, align 8, !dbg !9553
  %bf.clear305 = and i64 %bf.load304, 65535, !dbg !9553
  %bf.cast306 = trunc i64 %bf.clear305 to i32, !dbg !9553
  %cmp307 = icmp eq i32 %bf.cast306, 14, !dbg !9553
  br i1 %cmp307, label %cond.true309, label %cond.false311, !dbg !9553

cond.true309:                                     ; preds = %cond.false302
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %call310 = call i32 @vector_type_mode(%union.tree_node* %75), !dbg !9553
  br label %cond.end317, !dbg !9553

cond.false311:                                    ; preds = %cond.false302
  %76 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9553
  %type312 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !9553
  %mode313 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type312, i32 0, i32 6, !dbg !9553
  %bf.load314 = load i32, i32* %mode313, align 4, !dbg !9553
  %bf.lshr315 = lshr i32 %bf.load314, 16, !dbg !9553
  %bf.clear316 = and i32 %bf.lshr315, 255, !dbg !9553
  br label %cond.end317, !dbg !9553

cond.end317:                                      ; preds = %cond.false311, %cond.true309
  %cond318 = phi i32 [ %call310, %cond.true309 ], [ %bf.clear316, %cond.false311 ], !dbg !9553
  %idxprom319 = zext i32 %cond318 to i64, !dbg !9553
  %arrayidx320 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom319, !dbg !9553
  %77 = load i8, i8* %arrayidx320, align 1, !dbg !9553
  %conv321 = zext i8 %77 to i32, !dbg !9553
  br label %cond.end322, !dbg !9553

cond.end322:                                      ; preds = %cond.end317, %cond.end300
  %cond323 = phi i32 [ %cond301, %cond.end300 ], [ %conv321, %cond.end317 ], !dbg !9553
  %sub324 = sub i32 %cond323, 38, !dbg !9553
  br label %cond.end325, !dbg !9553

cond.end325:                                      ; preds = %cond.end322, %cond.end239
  %cond326 = phi i32 [ %add, %cond.end239 ], [ %sub324, %cond.end322 ], !dbg !9553
  %idxprom327 = zext i32 %cond326 to i64, !dbg !9553
  %arrayidx328 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom327, !dbg !9553
  %78 = load %struct.real_format*, %struct.real_format** %arrayidx328, align 8, !dbg !9553
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %78, i32 0, i32 12, !dbg !9553
  %79 = load i8, i8* %has_inf, align 1, !dbg !9553
  %conv329 = zext i8 %79 to i32, !dbg !9553
  %tobool = icmp ne i32 %conv329, 0, !dbg !9553
  br i1 %tobool, label %if.end, label %land.lhs.true330, !dbg !9555

land.lhs.true330:                                 ; preds = %cond.end325, %cond.end64
  %80 = load i32, i32* %warn.addr, align 4, !dbg !9556
  %tobool331 = icmp ne i32 %80, 0, !dbg !9556
  br i1 %tobool331, label %if.then, label %if.end, !dbg !9557

if.then:                                          ; preds = %land.lhs.true330
  %81 = load i32, i32* %loc.addr, align 4, !dbg !9558
  %call332 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %81, i32 0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.738, i64 0, i64 0)), !dbg !9559
  br label %if.end, !dbg !9559

if.end:                                           ; preds = %if.then, %land.lhs.true330, %cond.end325
  call void @real_inf(%struct.real_value* %real), !dbg !9560
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9561
  %call333 = call %union.tree_node* @build_real(%union.tree_node* %82, %struct.real_value* byval(%struct.real_value) align 8 %real), !dbg !9562
  ret %union.tree_node* %call333, !dbg !9563
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_classify_type(%union.tree_node* %arg) #0 !dbg !9564 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9565, metadata !DIExpression()), !dbg !9566
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9567
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !9569
  br i1 %cmp, label %if.then, label %if.end, !dbg !9570

if.then:                                          ; preds = %entry
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 -1), !dbg !9571
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !9572
  br label %return, !dbg !9572

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9573
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9573
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9573
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9573
  %call1 = call i32 @type_to_class(%union.tree_node* %2), !dbg !9574
  %conv = sext i32 %call1 to i64, !dbg !9574
  %call2 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !9575
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !9576
  br label %return, !dbg !9576

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9577
  ret %union.tree_node* %3, !dbg !9577
}

declare dso_local zeroext i8 @pedwarn(i32, i32, i8*, ...) #2

declare dso_local void @real_inf(%struct.real_value*) #2

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @type_to_class(%union.tree_node* %type) #0 !dbg !9578 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9581, metadata !DIExpression()), !dbg !9582
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9583
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9583
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9583
  %bf.load = load i64, i64* %1, align 8, !dbg !9583
  %bf.clear = and i64 %bf.load, 65535, !dbg !9583
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9583
  switch i32 %bf.cast, label %sw.default [
    i32 19, label %sw.bb
    i32 8, label %sw.bb1
    i32 6, label %sw.bb2
    i32 7, label %sw.bb3
    i32 10, label %sw.bb4
    i32 12, label %sw.bb5
    i32 5, label %sw.bb6
    i32 9, label %sw.bb7
    i32 13, label %sw.bb8
    i32 20, label %sw.bb9
    i32 21, label %sw.bb10
    i32 16, label %sw.bb11
    i32 17, label %sw.bb12
    i32 18, label %sw.bb12
    i32 15, label %sw.bb13
    i32 22, label %sw.bb17
  ], !dbg !9584

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !9585
  br label %return, !dbg !9585

sw.bb1:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !9587
  br label %return, !dbg !9587

sw.bb2:                                           ; preds = %entry
  store i32 3, i32* %retval, align 4, !dbg !9588
  br label %return, !dbg !9588

sw.bb3:                                           ; preds = %entry
  store i32 4, i32* %retval, align 4, !dbg !9589
  br label %return, !dbg !9589

sw.bb4:                                           ; preds = %entry
  store i32 5, i32* %retval, align 4, !dbg !9590
  br label %return, !dbg !9590

sw.bb5:                                           ; preds = %entry
  store i32 6, i32* %retval, align 4, !dbg !9591
  br label %return, !dbg !9591

sw.bb6:                                           ; preds = %entry
  store i32 7, i32* %retval, align 4, !dbg !9592
  br label %return, !dbg !9592

sw.bb7:                                           ; preds = %entry
  store i32 8, i32* %retval, align 4, !dbg !9593
  br label %return, !dbg !9593

sw.bb8:                                           ; preds = %entry
  store i32 9, i32* %retval, align 4, !dbg !9594
  br label %return, !dbg !9594

sw.bb9:                                           ; preds = %entry
  store i32 10, i32* %retval, align 4, !dbg !9595
  br label %return, !dbg !9595

sw.bb10:                                          ; preds = %entry
  store i32 11, i32* %retval, align 4, !dbg !9596
  br label %return, !dbg !9596

sw.bb11:                                          ; preds = %entry
  store i32 12, i32* %retval, align 4, !dbg !9597
  br label %return, !dbg !9597

sw.bb12:                                          ; preds = %entry, %entry
  store i32 13, i32* %retval, align 4, !dbg !9598
  br label %return, !dbg !9598

sw.bb13:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9599
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !9599
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6, !dbg !9599
  %bf.load15 = load i32, i32* %string_flag, align 4, !dbg !9599
  %bf.lshr = lshr i32 %bf.load15, 24, !dbg !9599
  %bf.clear16 = and i32 %bf.lshr, 1, !dbg !9599
  %tobool = icmp ne i32 %bf.clear16, 0, !dbg !9599
  %3 = zext i1 %tobool to i64, !dbg !9599
  %cond = select i1 %tobool, i32 15, i32 14, !dbg !9599
  store i32 %cond, i32* %retval, align 4, !dbg !9600
  br label %return, !dbg !9600

sw.bb17:                                          ; preds = %entry
  store i32 16, i32* %retval, align 4, !dbg !9601
  br label %return, !dbg !9601

sw.default:                                       ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !9602
  br label %return, !dbg !9602

return:                                           ; preds = %sw.default, %sw.bb17, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %4 = load i32, i32* %retval, align 4, !dbg !9603
  ret i32 %4, !dbg !9603
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_constant_p(%union.tree_node* %arg) #0 !dbg !9604 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9605, metadata !DIExpression()), !dbg !9606
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9607
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %0), !dbg !9607
  store %union.tree_node* %call, %union.tree_node** %arg.addr, align 8, !dbg !9607
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9608
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9608
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9608
  %bf.load = load i64, i64* %2, align 8, !dbg !9608
  %bf.clear = and i64 %bf.load, 65535, !dbg !9608
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9608
  %idxprom = sext i32 %bf.cast to i64, !dbg !9608
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9608
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9608
  %cmp = icmp eq i32 %3, 1, !dbg !9608
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9610

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9611
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9611
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9611
  %bf.load2 = load i64, i64* %5, align 8, !dbg !9611
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9611
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9611
  %cmp5 = icmp eq i32 %bf.cast4, 51, !dbg !9612
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !9613

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9614
  %base6 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9614
  %7 = bitcast %struct.tree_base* %base6 to i64*, !dbg !9614
  %bf.load7 = load i64, i64* %7, align 8, !dbg !9614
  %bf.lshr = lshr i64 %bf.load7, 17, !dbg !9614
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !9614
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9614
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !9614
  br i1 %tobool, label %if.then, label %if.end, !dbg !9615

if.then:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !9616
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !9617
  br label %return, !dbg !9617

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9618
  %base10 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9618
  %10 = bitcast %struct.tree_base* %base10 to i64*, !dbg !9618
  %bf.load11 = load i64, i64* %10, align 8, !dbg !9618
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !9618
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !9618
  %cmp14 = icmp eq i32 %bf.cast13, 121, !dbg !9620
  br i1 %cmp14, label %if.then15, label %if.end45, !dbg !9621

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !9622, metadata !DIExpression()), !dbg !9624
  %11 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9625
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !9625
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9625
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9625
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !9625
  store %union.tree_node* %12, %union.tree_node** %op, align 8, !dbg !9624
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9626
  %base17 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9626
  %14 = bitcast %struct.tree_base* %base17 to i64*, !dbg !9626
  %bf.load18 = load i64, i64* %14, align 8, !dbg !9626
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !9626
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !9626
  %cmp21 = icmp eq i32 %bf.cast20, 28, !dbg !9628
  br i1 %cmp21, label %if.then43, label %lor.lhs.false22, !dbg !9629

lor.lhs.false22:                                  ; preds = %if.then15
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9630
  %base23 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9630
  %16 = bitcast %struct.tree_base* %base23 to i64*, !dbg !9630
  %bf.load24 = load i64, i64* %16, align 8, !dbg !9630
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !9630
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !9630
  %cmp27 = icmp eq i32 %bf.cast26, 45, !dbg !9631
  br i1 %cmp27, label %land.lhs.true28, label %if.end44, !dbg !9632

land.lhs.true28:                                  ; preds = %lor.lhs.false22
  %17 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9633
  %exp29 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !9633
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !9633
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 1, !dbg !9633
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !9633
  %call32 = call i32 @integer_zerop(%union.tree_node* %18), !dbg !9634
  %tobool33 = icmp ne i32 %call32, 0, !dbg !9634
  br i1 %tobool33, label %land.lhs.true34, label %if.end44, !dbg !9635

land.lhs.true34:                                  ; preds = %land.lhs.true28
  %19 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9636
  %exp35 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !9636
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !9636
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 0, !dbg !9636
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !9636
  %base38 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9636
  %21 = bitcast %struct.tree_base* %base38 to i64*, !dbg !9636
  %bf.load39 = load i64, i64* %21, align 8, !dbg !9636
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !9636
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !9636
  %cmp42 = icmp eq i32 %bf.cast41, 28, !dbg !9637
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !9638

if.then43:                                        ; preds = %land.lhs.true34, %if.then15
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !9639
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !9640
  br label %return, !dbg !9640

if.end44:                                         ; preds = %land.lhs.true34, %land.lhs.true28, %lor.lhs.false22
  br label %if.end45, !dbg !9641

if.end45:                                         ; preds = %if.end44, %if.end
  %23 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9642
  %base46 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !9642
  %24 = bitcast %struct.tree_base* %base46 to i64*, !dbg !9642
  %bf.load47 = load i64, i64* %24, align 8, !dbg !9642
  %bf.lshr48 = lshr i64 %bf.load47, 16, !dbg !9642
  %bf.clear49 = and i64 %bf.lshr48, 1, !dbg !9642
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !9642
  %tobool51 = icmp ne i32 %bf.cast50, 0, !dbg !9642
  br i1 %tobool51, label %if.then102, label %lor.lhs.false52, !dbg !9644

lor.lhs.false52:                                  ; preds = %if.end45
  %25 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9645
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !9645
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9645
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9645
  %base53 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !9645
  %27 = bitcast %struct.tree_base* %base53 to i64*, !dbg !9645
  %bf.load54 = load i64, i64* %27, align 8, !dbg !9645
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !9645
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !9645
  %cmp57 = icmp eq i32 %bf.cast56, 15, !dbg !9645
  br i1 %cmp57, label %if.then102, label %lor.lhs.false58, !dbg !9645

lor.lhs.false58:                                  ; preds = %lor.lhs.false52
  %28 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9645
  %common59 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !9645
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !9645
  %29 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !9645
  %base61 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !9645
  %30 = bitcast %struct.tree_base* %base61 to i64*, !dbg !9645
  %bf.load62 = load i64, i64* %30, align 8, !dbg !9645
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !9645
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !9645
  %cmp65 = icmp eq i32 %bf.cast64, 16, !dbg !9645
  br i1 %cmp65, label %if.then102, label %lor.lhs.false66, !dbg !9645

lor.lhs.false66:                                  ; preds = %lor.lhs.false58
  %31 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9645
  %common67 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !9645
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !9645
  %32 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !9645
  %base69 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !9645
  %33 = bitcast %struct.tree_base* %base69 to i64*, !dbg !9645
  %bf.load70 = load i64, i64* %33, align 8, !dbg !9645
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !9645
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !9645
  %cmp73 = icmp eq i32 %bf.cast72, 17, !dbg !9645
  br i1 %cmp73, label %if.then102, label %lor.lhs.false74, !dbg !9645

lor.lhs.false74:                                  ; preds = %lor.lhs.false66
  %34 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9645
  %common75 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !9645
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !9645
  %35 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !9645
  %base77 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !9645
  %36 = bitcast %struct.tree_base* %base77 to i64*, !dbg !9645
  %bf.load78 = load i64, i64* %36, align 8, !dbg !9645
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !9645
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !9645
  %cmp81 = icmp eq i32 %bf.cast80, 18, !dbg !9645
  br i1 %cmp81, label %if.then102, label %lor.lhs.false82, !dbg !9646

lor.lhs.false82:                                  ; preds = %lor.lhs.false74
  %37 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9647
  %common83 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !9647
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !9647
  %38 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !9647
  %base85 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !9647
  %39 = bitcast %struct.tree_base* %base85 to i64*, !dbg !9647
  %bf.load86 = load i64, i64* %39, align 8, !dbg !9647
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !9647
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !9647
  %cmp89 = icmp eq i32 %bf.cast88, 10, !dbg !9647
  br i1 %cmp89, label %if.then102, label %lor.lhs.false90, !dbg !9647

lor.lhs.false90:                                  ; preds = %lor.lhs.false82
  %40 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9647
  %common91 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !9647
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !9647
  %41 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !9647
  %base93 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !9647
  %42 = bitcast %struct.tree_base* %base93 to i64*, !dbg !9647
  %bf.load94 = load i64, i64* %42, align 8, !dbg !9647
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !9647
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !9647
  %cmp97 = icmp eq i32 %bf.cast96, 12, !dbg !9647
  br i1 %cmp97, label %if.then102, label %lor.lhs.false98, !dbg !9648

lor.lhs.false98:                                  ; preds = %lor.lhs.false90
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9649
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !9649
  %cmp99 = icmp eq %struct.function* %add.ptr, null, !dbg !9650
  br i1 %cmp99, label %if.then102, label %lor.lhs.false100, !dbg !9651

lor.lhs.false100:                                 ; preds = %lor.lhs.false98
  %44 = load i32, i32* @folding_initializer, align 4, !dbg !9652
  %tobool101 = icmp ne i32 %44, 0, !dbg !9652
  br i1 %tobool101, label %if.then102, label %if.end103, !dbg !9653

if.then102:                                       ; preds = %lor.lhs.false100, %lor.lhs.false98, %lor.lhs.false90, %lor.lhs.false82, %lor.lhs.false74, %lor.lhs.false66, %lor.lhs.false58, %lor.lhs.false52, %if.end45
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9654
  store %union.tree_node* %45, %union.tree_node** %retval, align 8, !dbg !9655
  br label %return, !dbg !9655

if.end103:                                        ; preds = %lor.lhs.false100
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9656
  br label %return, !dbg !9656

return:                                           ; preds = %if.end103, %if.then102, %if.then43, %if.then
  %46 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9657
  ret %union.tree_node* %46, !dbg !9657
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strlen(i32 %loc, %union.tree_node* %type, %union.tree_node* %arg) #0 !dbg !9658 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9659, metadata !DIExpression()), !dbg !9660
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9661, metadata !DIExpression()), !dbg !9662
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9663, metadata !DIExpression()), !dbg !9664
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9665
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !9667
  %tobool = icmp ne i8 %call, 0, !dbg !9667
  br i1 %tobool, label %if.else, label %if.then, !dbg !9668

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9669
  br label %return, !dbg !9669

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !9670, metadata !DIExpression()), !dbg !9672
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9673
  %call1 = call %union.tree_node* @c_strlen(%union.tree_node* %1, i32 0), !dbg !9674
  store %union.tree_node* %call1, %union.tree_node** %len, align 8, !dbg !9672
  %2 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !9675
  %tobool2 = icmp ne %union.tree_node* %2, null, !dbg !9675
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !9677

if.then3:                                         ; preds = %if.else
  %3 = load i32, i32* %loc.addr, align 4, !dbg !9678
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9679
  %5 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !9680
  %call4 = call %union.tree_node* @fold_convert_loc(i32 %3, %union.tree_node* %4, %union.tree_node* %5), !dbg !9681
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !9682
  br label %return, !dbg !9682

if.end:                                           ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9683
  br label %return, !dbg !9683

return:                                           ; preds = %if.end, %if.then3, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9684
  ret %union.tree_node* %6, !dbg !9684
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_fabs(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9685 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9686, metadata !DIExpression()), !dbg !9687
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9688, metadata !DIExpression()), !dbg !9689
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9690, metadata !DIExpression()), !dbg !9691
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9692
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !9694
  %tobool = icmp ne i8 %call, 0, !dbg !9694
  br i1 %tobool, label %if.end, label %if.then, !dbg !9695

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9696
  br label %return, !dbg !9696

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %loc.addr, align 4, !dbg !9697
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9698
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9699
  %call1 = call %union.tree_node* @fold_convert_loc(i32 %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !9700
  store %union.tree_node* %call1, %union.tree_node** %arg.addr, align 8, !dbg !9701
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9702
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9702
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9702
  %bf.load = load i64, i64* %5, align 8, !dbg !9702
  %bf.clear = and i64 %bf.load, 65535, !dbg !9702
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9702
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !9704
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !9705

if.then2:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9706
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9707
  %call3 = call %union.tree_node* @fold_abs_const(%union.tree_node* %6, %union.tree_node* %7), !dbg !9708
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !9709
  br label %return, !dbg !9709

if.end4:                                          ; preds = %if.end
  %8 = load i32, i32* %loc.addr, align 4, !dbg !9710
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9710
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9710
  %call5 = call %union.tree_node* @fold_build1_stat_loc(i32 %8, i32 82, %union.tree_node* %9, %union.tree_node* %10), !dbg !9710
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !9711
  br label %return, !dbg !9711

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9712
  ret %union.tree_node* %11, !dbg !9712
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_abs(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9713 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9714, metadata !DIExpression()), !dbg !9715
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9716, metadata !DIExpression()), !dbg !9717
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9718, metadata !DIExpression()), !dbg !9719
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9720
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !9722
  %tobool = icmp ne i8 %call, 0, !dbg !9722
  br i1 %tobool, label %if.end, label %if.then, !dbg !9723

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9724
  br label %return, !dbg !9724

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %loc.addr, align 4, !dbg !9725
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9726
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9727
  %call1 = call %union.tree_node* @fold_convert_loc(i32 %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !9728
  store %union.tree_node* %call1, %union.tree_node** %arg.addr, align 8, !dbg !9729
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9730
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9730
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9730
  %bf.load = load i64, i64* %5, align 8, !dbg !9730
  %bf.clear = and i64 %bf.load, 65535, !dbg !9730
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9730
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !9732
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !9733

if.then2:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9734
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9735
  %call3 = call %union.tree_node* @fold_abs_const(%union.tree_node* %6, %union.tree_node* %7), !dbg !9736
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !9737
  br label %return, !dbg !9737

if.end4:                                          ; preds = %if.end
  %8 = load i32, i32* %loc.addr, align 4, !dbg !9738
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9738
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9738
  %call5 = call %union.tree_node* @fold_build1_stat_loc(i32 %8, i32 82, %union.tree_node* %9, %union.tree_node* %10), !dbg !9738
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !9739
  br label %return, !dbg !9739

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9740
  ret %union.tree_node* %11, !dbg !9740
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @non_lvalue_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_ccos(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type, %union.tree_node* %fndecl, i8 zeroext %hyper) #0 !dbg !9741 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %hyper.addr = alloca i8, align 1
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9742, metadata !DIExpression()), !dbg !9743
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9744, metadata !DIExpression()), !dbg !9745
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9746, metadata !DIExpression()), !dbg !9747
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9748, metadata !DIExpression()), !dbg !9749
  store i8 %hyper, i8* %hyper.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %hyper.addr, metadata !9750, metadata !DIExpression()), !dbg !9751
  ret %union.tree_node* null, !dbg !9752
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_cabs(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type, %union.tree_node* %fndecl) #0 !dbg !9753 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9756, metadata !DIExpression()), !dbg !9757
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9758, metadata !DIExpression()), !dbg !9759
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9760, metadata !DIExpression()), !dbg !9761
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9762, metadata !DIExpression()), !dbg !9763
  ret %union.tree_node* null, !dbg !9764
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_carg(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9765 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %atan2_fn = alloca %union.tree_node*, align 8
  %new_arg = alloca %union.tree_node*, align 8
  %r_arg = alloca %union.tree_node*, align 8
  %i_arg = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9766, metadata !DIExpression()), !dbg !9767
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9768, metadata !DIExpression()), !dbg !9769
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9770, metadata !DIExpression()), !dbg !9771
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9772
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 13), !dbg !9774
  %conv = zext i8 %call to i32, !dbg !9774
  %tobool = icmp ne i32 %conv, 0, !dbg !9774
  br i1 %tobool, label %land.lhs.true, label %if.end12, !dbg !9775

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9776
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9776
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9776
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9776
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !9776
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !9776
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9776
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9776
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9776
  %bf.load = load i64, i64* %4, align 8, !dbg !9776
  %bf.clear = and i64 %bf.load, 65535, !dbg !9776
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9776
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !9777
  br i1 %cmp, label %if.then, label %if.end12, !dbg !9778

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %atan2_fn, metadata !9779, metadata !DIExpression()), !dbg !9781
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9782
  %call5 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %5, i32 13), !dbg !9783
  store %union.tree_node* %call5, %union.tree_node** %atan2_fn, align 8, !dbg !9781
  %6 = load %union.tree_node*, %union.tree_node** %atan2_fn, align 8, !dbg !9784
  %tobool6 = icmp ne %union.tree_node* %6, null, !dbg !9784
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !9786

if.then7:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_arg, metadata !9787, metadata !DIExpression()), !dbg !9789
  %7 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9790
  %call8 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %7), !dbg !9791
  store %union.tree_node* %call8, %union.tree_node** %new_arg, align 8, !dbg !9789
  call void @llvm.dbg.declare(metadata %union.tree_node** %r_arg, metadata !9792, metadata !DIExpression()), !dbg !9793
  %8 = load i32, i32* %loc.addr, align 4, !dbg !9794
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9794
  %10 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !9794
  %call9 = call %union.tree_node* @fold_build1_stat_loc(i32 %8, i32 43, %union.tree_node* %9, %union.tree_node* %10), !dbg !9794
  store %union.tree_node* %call9, %union.tree_node** %r_arg, align 8, !dbg !9793
  call void @llvm.dbg.declare(metadata %union.tree_node** %i_arg, metadata !9795, metadata !DIExpression()), !dbg !9796
  %11 = load i32, i32* %loc.addr, align 4, !dbg !9797
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9797
  %13 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !9797
  %call10 = call %union.tree_node* @fold_build1_stat_loc(i32 %11, i32 44, %union.tree_node* %12, %union.tree_node* %13), !dbg !9797
  store %union.tree_node* %call10, %union.tree_node** %i_arg, align 8, !dbg !9796
  %14 = load i32, i32* %loc.addr, align 4, !dbg !9798
  %15 = load %union.tree_node*, %union.tree_node** %atan2_fn, align 8, !dbg !9799
  %16 = load %union.tree_node*, %union.tree_node** %i_arg, align 8, !dbg !9800
  %17 = load %union.tree_node*, %union.tree_node** %r_arg, align 8, !dbg !9801
  %call11 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %14, %union.tree_node* %15, i32 2, %union.tree_node* %16, %union.tree_node* %17), !dbg !9802
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !9803
  br label %return, !dbg !9803

if.end:                                           ; preds = %if.then
  br label %if.end12, !dbg !9804

if.end12:                                         ; preds = %if.end, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9805
  br label %return, !dbg !9805

return:                                           ; preds = %if.end12, %if.then7
  %18 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9806
  ret %union.tree_node* %18, !dbg !9806
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_sqrt(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9807 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9808, metadata !DIExpression()), !dbg !9809
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9810, metadata !DIExpression()), !dbg !9811
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9812, metadata !DIExpression()), !dbg !9813
  ret %union.tree_node* null, !dbg !9814
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_cbrt(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9815 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9816, metadata !DIExpression()), !dbg !9817
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9818, metadata !DIExpression()), !dbg !9819
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  ret %union.tree_node* null, !dbg !9822
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_cos(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type, %union.tree_node* %fndecl) #0 !dbg !9823 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9824, metadata !DIExpression()), !dbg !9825
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9826, metadata !DIExpression()), !dbg !9827
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9828, metadata !DIExpression()), !dbg !9829
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9830, metadata !DIExpression()), !dbg !9831
  ret %union.tree_node* null, !dbg !9832
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_tan(%union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !9833 {
entry:
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9836, metadata !DIExpression()), !dbg !9837
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9838, metadata !DIExpression()), !dbg !9839
  ret %union.tree_node* null, !dbg !9840
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_cexp(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %type) #0 !dbg !9841 {
entry:
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9842, metadata !DIExpression()), !dbg !9843
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !9844, metadata !DIExpression()), !dbg !9845
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9846, metadata !DIExpression()), !dbg !9847
  ret %union.tree_node* null, !dbg !9848
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_cosh(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type, %union.tree_node* %fndecl) #0 !dbg !9849 {
entry:
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9850, metadata !DIExpression()), !dbg !9851
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9852, metadata !DIExpression()), !dbg !9853
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9854, metadata !DIExpression()), !dbg !9855
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9856, metadata !DIExpression()), !dbg !9857
  ret %union.tree_node* null, !dbg !9858
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_nan(%union.tree_node* %arg, %union.tree_node* %type, i32 %quiet) #0 !dbg !9859 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %quiet.addr = alloca i32, align 4
  %real = alloca %struct.real_value, align 8
  %str = alloca i8*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9862, metadata !DIExpression()), !dbg !9863
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9864, metadata !DIExpression()), !dbg !9865
  store i32 %quiet, i32* %quiet.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %quiet.addr, metadata !9866, metadata !DIExpression()), !dbg !9867
  call void @llvm.dbg.declare(metadata %struct.real_value* %real, metadata !9868, metadata !DIExpression()), !dbg !9869
  call void @llvm.dbg.declare(metadata i8** %str, metadata !9870, metadata !DIExpression()), !dbg !9871
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9872
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !9874
  %tobool = icmp ne i8 %call, 0, !dbg !9874
  br i1 %tobool, label %if.end, label %if.then, !dbg !9875

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9876
  br label %return, !dbg !9876

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9877
  %call1 = call i8* @c_getstr(%union.tree_node* %1), !dbg !9878
  store i8* %call1, i8** %str, align 8, !dbg !9879
  %2 = load i8*, i8** %str, align 8, !dbg !9880
  %tobool2 = icmp ne i8* %2, null, !dbg !9880
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !9882

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9883
  br label %return, !dbg !9883

if.end4:                                          ; preds = %if.end
  %3 = load i8*, i8** %str, align 8, !dbg !9884
  %4 = load i32, i32* %quiet.addr, align 4, !dbg !9886
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9887
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9887
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !9887
  %bf.load = load i64, i64* %6, align 8, !dbg !9887
  %bf.clear = and i64 %bf.load, 65535, !dbg !9887
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9887
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !9887
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9887

cond.true:                                        ; preds = %if.end4
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9887
  %call5 = call i32 @vector_type_mode(%union.tree_node* %7), !dbg !9887
  br label %cond.end, !dbg !9887

cond.false:                                       ; preds = %if.end4
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9887
  %type6 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !9887
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6, !dbg !9887
  %bf.load7 = load i32, i32* %mode, align 4, !dbg !9887
  %bf.lshr = lshr i32 %bf.load7, 16, !dbg !9887
  %bf.clear8 = and i32 %bf.lshr, 255, !dbg !9887
  br label %cond.end, !dbg !9887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call5, %cond.true ], [ %bf.clear8, %cond.false ], !dbg !9887
  %call9 = call zeroext i8 @real_nan(%struct.real_value* %real, i8* %3, i32 %4, i32 %cond), !dbg !9888
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9888
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !9889

if.then11:                                        ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9890
  br label %return, !dbg !9890

if.end12:                                         ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9891
  %call13 = call %union.tree_node* @build_real(%union.tree_node* %9, %struct.real_value* byval(%struct.real_value) align 8 %real), !dbg !9892
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !9893
  br label %return, !dbg !9893

return:                                           ; preds = %if.end12, %if.then11, %if.then3, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9894
  ret %union.tree_node* %10, !dbg !9894
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_floor(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !9895 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.real_value, align 8
  %type = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  %truncfn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9896, metadata !DIExpression()), !dbg !9897
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9898, metadata !DIExpression()), !dbg !9899
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9900, metadata !DIExpression()), !dbg !9901
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9902
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !9904
  %tobool = icmp ne i8 %call, 0, !dbg !9904
  br i1 %tobool, label %if.end, label %if.then, !dbg !9905

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9906
  br label %return, !dbg !9906

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9907
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9907
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9907
  %bf.load = load i64, i64* %2, align 8, !dbg !9907
  %bf.clear = and i64 %bf.load, 65535, !dbg !9907
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9907
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !9909
  br i1 %cmp, label %land.lhs.true, label %if.end26, !dbg !9910

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9911
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9911
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9911
  %bf.load2 = load i64, i64* %4, align 8, !dbg !9911
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !9911
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !9911
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9911
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !9911
  br i1 %tobool5, label %if.end26, label %if.then6, !dbg !9912

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !9913, metadata !DIExpression()), !dbg !9915
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9916
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !9916
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !9916
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !9916
  %7 = bitcast %struct.real_value* %x to i8*, !dbg !9916
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !9916
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !9916
  %call7 = call zeroext i8 @real_isnan(%struct.real_value* %x), !dbg !9917
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9917
  br i1 %tobool8, label %lor.lhs.false, label %if.then10, !dbg !9919

lor.lhs.false:                                    ; preds = %if.then6
  %9 = load i32, i32* @flag_errno_math, align 4, !dbg !9920
  %tobool9 = icmp ne i32 %9, 0, !dbg !9920
  br i1 %tobool9, label %if.end25, label %if.then10, !dbg !9921

if.then10:                                        ; preds = %lor.lhs.false, %if.then6
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9922, metadata !DIExpression()), !dbg !9924
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9925
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !9925
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9925
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !9925
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !9925
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !9925
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !9925
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !9924
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !9926, metadata !DIExpression()), !dbg !9927
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9928
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9928
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9928
  %bf.load15 = load i64, i64* %14, align 8, !dbg !9928
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9928
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9928
  %cmp18 = icmp eq i32 %bf.cast17, 14, !dbg !9928
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !9928

cond.true:                                        ; preds = %if.then10
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9928
  %call19 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !9928
  br label %cond.end, !dbg !9928

cond.false:                                       ; preds = %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9928
  %type20 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !9928
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 6, !dbg !9928
  %bf.load21 = load i32, i32* %mode, align 4, !dbg !9928
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !9928
  %bf.clear23 = and i32 %bf.lshr22, 255, !dbg !9928
  br label %cond.end, !dbg !9928

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call19, %cond.true ], [ %bf.clear23, %cond.false ], !dbg !9928
  call void @real_floor(%struct.real_value* %r, i32 %cond, %struct.real_value* %x), !dbg !9929
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9930
  %call24 = call %union.tree_node* @build_real(%union.tree_node* %17, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !9931
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !9932
  br label %return, !dbg !9932

if.end25:                                         ; preds = %lor.lhs.false
  br label %if.end26, !dbg !9933

if.end26:                                         ; preds = %if.end25, %land.lhs.true, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9934
  %call27 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %18), !dbg !9936
  %tobool28 = icmp ne i8 %call27, 0, !dbg !9936
  br i1 %tobool28, label %if.then29, label %if.end37, !dbg !9937

if.then29:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata %union.tree_node** %truncfn, metadata !9938, metadata !DIExpression()), !dbg !9940
  %19 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9941
  %common30 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !9941
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !9941
  %20 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !9941
  %call32 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %20, i32 240), !dbg !9942
  store %union.tree_node* %call32, %union.tree_node** %truncfn, align 8, !dbg !9940
  %21 = load %union.tree_node*, %union.tree_node** %truncfn, align 8, !dbg !9943
  %tobool33 = icmp ne %union.tree_node* %21, null, !dbg !9943
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !9945

if.then34:                                        ; preds = %if.then29
  %22 = load i32, i32* %loc.addr, align 4, !dbg !9946
  %23 = load %union.tree_node*, %union.tree_node** %truncfn, align 8, !dbg !9947
  %24 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9948
  %call35 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %22, %union.tree_node* %23, i32 1, %union.tree_node* %24), !dbg !9949
  store %union.tree_node* %call35, %union.tree_node** %retval, align 8, !dbg !9950
  br label %return, !dbg !9950

if.end36:                                         ; preds = %if.then29
  br label %if.end37, !dbg !9951

if.end37:                                         ; preds = %if.end36, %if.end26
  %25 = load i32, i32* %loc.addr, align 4, !dbg !9952
  %26 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9953
  %27 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9954
  %call38 = call %union.tree_node* @fold_trunc_transparent_mathfn(i32 %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !9955
  store %union.tree_node* %call38, %union.tree_node** %retval, align 8, !dbg !9956
  br label %return, !dbg !9956

return:                                           ; preds = %if.end37, %if.then34, %cond.end, %if.then
  %28 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9957
  ret %union.tree_node* %28, !dbg !9957
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_ceil(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !9958 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.real_value, align 8
  %type = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !9959, metadata !DIExpression()), !dbg !9960
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !9961, metadata !DIExpression()), !dbg !9962
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !9963, metadata !DIExpression()), !dbg !9964
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9965
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !9967
  %tobool = icmp ne i8 %call, 0, !dbg !9967
  br i1 %tobool, label %if.end, label %if.then, !dbg !9968

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9969
  br label %return, !dbg !9969

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9970
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9970
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9970
  %bf.load = load i64, i64* %2, align 8, !dbg !9970
  %bf.clear = and i64 %bf.load, 65535, !dbg !9970
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9970
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !9972
  br i1 %cmp, label %land.lhs.true, label %if.end26, !dbg !9973

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9974
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9974
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9974
  %bf.load2 = load i64, i64* %4, align 8, !dbg !9974
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !9974
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !9974
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9974
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !9974
  br i1 %tobool5, label %if.end26, label %if.then6, !dbg !9975

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !9976, metadata !DIExpression()), !dbg !9978
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9979
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !9979
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !9979
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !9979
  %7 = bitcast %struct.real_value* %x to i8*, !dbg !9979
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !9979
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !9979
  %call7 = call zeroext i8 @real_isnan(%struct.real_value* %x), !dbg !9980
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9980
  br i1 %tobool8, label %lor.lhs.false, label %if.then10, !dbg !9982

lor.lhs.false:                                    ; preds = %if.then6
  %9 = load i32, i32* @flag_errno_math, align 4, !dbg !9983
  %tobool9 = icmp ne i32 %9, 0, !dbg !9983
  br i1 %tobool9, label %if.end25, label %if.then10, !dbg !9984

if.then10:                                        ; preds = %lor.lhs.false, %if.then6
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9985, metadata !DIExpression()), !dbg !9987
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9988
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !9988
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9988
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !9988
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !9988
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !9988
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !9988
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !9987
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !9989, metadata !DIExpression()), !dbg !9990
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9991
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9991
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9991
  %bf.load15 = load i64, i64* %14, align 8, !dbg !9991
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9991
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9991
  %cmp18 = icmp eq i32 %bf.cast17, 14, !dbg !9991
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !9991

cond.true:                                        ; preds = %if.then10
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9991
  %call19 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !9991
  br label %cond.end, !dbg !9991

cond.false:                                       ; preds = %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9991
  %type20 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !9991
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 6, !dbg !9991
  %bf.load21 = load i32, i32* %mode, align 4, !dbg !9991
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !9991
  %bf.clear23 = and i32 %bf.lshr22, 255, !dbg !9991
  br label %cond.end, !dbg !9991

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call19, %cond.true ], [ %bf.clear23, %cond.false ], !dbg !9991
  call void @real_ceil(%struct.real_value* %r, i32 %cond, %struct.real_value* %x), !dbg !9992
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9993
  %call24 = call %union.tree_node* @build_real(%union.tree_node* %17, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !9994
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !9995
  br label %return, !dbg !9995

if.end25:                                         ; preds = %lor.lhs.false
  br label %if.end26, !dbg !9996

if.end26:                                         ; preds = %if.end25, %land.lhs.true, %if.end
  %18 = load i32, i32* %loc.addr, align 4, !dbg !9997
  %19 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !9998
  %20 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !9999
  %call27 = call %union.tree_node* @fold_trunc_transparent_mathfn(i32 %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !10000
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !10001
  br label %return, !dbg !10001

return:                                           ; preds = %if.end26, %cond.end, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10002
  ret %union.tree_node* %21, !dbg !10002
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_trunc(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10003 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  %x = alloca %struct.real_value, align 8
  %type = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10004, metadata !DIExpression()), !dbg !10005
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10006, metadata !DIExpression()), !dbg !10007
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10008, metadata !DIExpression()), !dbg !10009
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10010
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10012
  %tobool = icmp ne i8 %call, 0, !dbg !10012
  br i1 %tobool, label %if.end, label %if.then, !dbg !10013

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10014
  br label %return, !dbg !10014

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10015
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10015
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10015
  %bf.load = load i64, i64* %2, align 8, !dbg !10015
  %bf.clear = and i64 %bf.load, 65535, !dbg !10015
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10015
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10017
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !10018

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10019
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10019
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10019
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10019
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10019
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10019
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10019
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10019
  br i1 %tobool5, label %if.end21, label %if.then6, !dbg !10020

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !10021, metadata !DIExpression()), !dbg !10023
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !10024, metadata !DIExpression()), !dbg !10025
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10026, metadata !DIExpression()), !dbg !10027
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10028
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10028
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10028
  %6 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10028
  %common8 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !10028
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !10028
  %7 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !10028
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !10027
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10029
  %real_cst = bitcast %union.tree_node* %8 to %struct.tree_real_cst*, !dbg !10029
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10029
  %9 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10029
  %10 = bitcast %struct.real_value* %x to i8*, !dbg !10029
  %11 = bitcast %struct.real_value* %9 to i8*, !dbg !10029
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 32, i1 false), !dbg !10029
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10030
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !10030
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10030
  %bf.load11 = load i64, i64* %13, align 8, !dbg !10030
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10030
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10030
  %cmp14 = icmp eq i32 %bf.cast13, 14, !dbg !10030
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !10030

cond.true:                                        ; preds = %if.then6
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10030
  %call15 = call i32 @vector_type_mode(%union.tree_node* %14), !dbg !10030
  br label %cond.end, !dbg !10030

cond.false:                                       ; preds = %if.then6
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10030
  %type16 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !10030
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 6, !dbg !10030
  %bf.load17 = load i32, i32* %mode, align 4, !dbg !10030
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !10030
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !10030
  br label %cond.end, !dbg !10030

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call15, %cond.true ], [ %bf.clear19, %cond.false ], !dbg !10030
  call void @real_trunc(%struct.real_value* %r, i32 %cond, %struct.real_value* %x), !dbg !10031
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10032
  %call20 = call %union.tree_node* @build_real(%union.tree_node* %16, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !10033
  store %union.tree_node* %call20, %union.tree_node** %retval, align 8, !dbg !10034
  br label %return, !dbg !10034

if.end21:                                         ; preds = %land.lhs.true, %if.end
  %17 = load i32, i32* %loc.addr, align 4, !dbg !10035
  %18 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10036
  %19 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10037
  %call22 = call %union.tree_node* @fold_trunc_transparent_mathfn(i32 %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !10038
  store %union.tree_node* %call22, %union.tree_node** %retval, align 8, !dbg !10039
  br label %return, !dbg !10039

return:                                           ; preds = %if.end21, %cond.end, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10040
  ret %union.tree_node* %20, !dbg !10040
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_round(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10041 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.real_value, align 8
  %type = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10042, metadata !DIExpression()), !dbg !10043
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10044, metadata !DIExpression()), !dbg !10045
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10046, metadata !DIExpression()), !dbg !10047
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10048
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10050
  %tobool = icmp ne i8 %call, 0, !dbg !10050
  br i1 %tobool, label %if.end, label %if.then, !dbg !10051

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10052
  br label %return, !dbg !10052

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10053
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10053
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10053
  %bf.load = load i64, i64* %2, align 8, !dbg !10053
  %bf.clear = and i64 %bf.load, 65535, !dbg !10053
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10053
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10055
  br i1 %cmp, label %land.lhs.true, label %if.end26, !dbg !10056

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10057
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10057
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10057
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10057
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10057
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10057
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10057
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10057
  br i1 %tobool5, label %if.end26, label %if.then6, !dbg !10058

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !10059, metadata !DIExpression()), !dbg !10061
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10062
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !10062
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10062
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10062
  %7 = bitcast %struct.real_value* %x to i8*, !dbg !10062
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !10062
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !10062
  %call7 = call zeroext i8 @real_isnan(%struct.real_value* %x), !dbg !10063
  %tobool8 = icmp ne i8 %call7, 0, !dbg !10063
  br i1 %tobool8, label %lor.lhs.false, label %if.then10, !dbg !10065

lor.lhs.false:                                    ; preds = %if.then6
  %9 = load i32, i32* @flag_errno_math, align 4, !dbg !10066
  %tobool9 = icmp ne i32 %9, 0, !dbg !10066
  br i1 %tobool9, label %if.end25, label %if.then10, !dbg !10067

if.then10:                                        ; preds = %lor.lhs.false, %if.then6
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10068, metadata !DIExpression()), !dbg !10070
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10071
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10071
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10071
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !10071
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10071
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !10071
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !10071
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !10070
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !10072, metadata !DIExpression()), !dbg !10073
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10074
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10074
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !10074
  %bf.load15 = load i64, i64* %14, align 8, !dbg !10074
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !10074
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !10074
  %cmp18 = icmp eq i32 %bf.cast17, 14, !dbg !10074
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !10074

cond.true:                                        ; preds = %if.then10
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10074
  %call19 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !10074
  br label %cond.end, !dbg !10074

cond.false:                                       ; preds = %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10074
  %type20 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !10074
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 6, !dbg !10074
  %bf.load21 = load i32, i32* %mode, align 4, !dbg !10074
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !10074
  %bf.clear23 = and i32 %bf.lshr22, 255, !dbg !10074
  br label %cond.end, !dbg !10074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call19, %cond.true ], [ %bf.clear23, %cond.false ], !dbg !10074
  call void @real_round(%struct.real_value* %r, i32 %cond, %struct.real_value* %x), !dbg !10075
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10076
  %call24 = call %union.tree_node* @build_real(%union.tree_node* %17, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !10077
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !10078
  br label %return, !dbg !10078

if.end25:                                         ; preds = %lor.lhs.false
  br label %if.end26, !dbg !10079

if.end26:                                         ; preds = %if.end25, %land.lhs.true, %if.end
  %18 = load i32, i32* %loc.addr, align 4, !dbg !10080
  %19 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10081
  %20 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10082
  %call27 = call %union.tree_node* @fold_trunc_transparent_mathfn(i32 %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !10083
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !10084
  br label %return, !dbg !10084

return:                                           ; preds = %if.end26, %cond.end, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10085
  ret %union.tree_node* %21, !dbg !10085
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_trunc_transparent_mathfn(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10086 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %arg0 = alloca %union.tree_node*, align 8
  %ftype = alloca %union.tree_node*, align 8
  %newtype = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10087, metadata !DIExpression()), !dbg !10088
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10089, metadata !DIExpression()), !dbg !10090
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10091, metadata !DIExpression()), !dbg !10092
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !10093, metadata !DIExpression()), !dbg !10094
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10095
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !10095
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10095
  %bf.load = load i32, i32* %function_code, align 8, !dbg !10095
  %bf.clear = and i32 %bf.load, 2047, !dbg !10095
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !10094
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10096
  %call = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 9), !dbg !10098
  %tobool = icmp ne i8 %call, 0, !dbg !10098
  br i1 %tobool, label %if.end, label %if.then, !dbg !10099

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10100
  br label %return, !dbg !10100

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fcode, align 4, !dbg !10101
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10103
  %call1 = call i32 @builtin_mathfn_code(%union.tree_node* %3), !dbg !10104
  %cmp = icmp eq i32 %2, %call1, !dbg !10105
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !10106

if.then2:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10107
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !10108
  br label %return, !dbg !10108

if.end3:                                          ; preds = %if.end
  %5 = load i32, i32* @flag_errno_math, align 4, !dbg !10109
  %tobool4 = icmp ne i32 %5, 0, !dbg !10109
  br i1 %tobool4, label %if.end8, label %land.lhs.true, !dbg !10111

land.lhs.true:                                    ; preds = %if.end3
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10112
  %call5 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %6), !dbg !10113
  %conv = zext i8 %call5 to i32, !dbg !10113
  %tobool6 = icmp ne i32 %conv, 0, !dbg !10113
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !10114

if.then7:                                         ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10115
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !10116
  br label %return, !dbg !10116

if.end8:                                          ; preds = %land.lhs.true, %if.end3
  %8 = load i32, i32* @optimize, align 4, !dbg !10117
  %tobool9 = icmp ne i32 %8, 0, !dbg !10117
  br i1 %tobool9, label %if.then10, label %if.end33, !dbg !10119

if.then10:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !10120, metadata !DIExpression()), !dbg !10122
  %9 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10123
  %call11 = call %union.tree_node* @strip_float_extensions(%union.tree_node* %9), !dbg !10124
  store %union.tree_node* %call11, %union.tree_node** %arg0, align 8, !dbg !10122
  call void @llvm.dbg.declare(metadata %union.tree_node** %ftype, metadata !10125, metadata !DIExpression()), !dbg !10126
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10127
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10127
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10127
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10127
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10127
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !10127
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !10127
  store %union.tree_node* %12, %union.tree_node** %ftype, align 8, !dbg !10126
  call void @llvm.dbg.declare(metadata %union.tree_node** %newtype, metadata !10128, metadata !DIExpression()), !dbg !10129
  %13 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10130
  %common14 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !10130
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !10130
  %14 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !10130
  store %union.tree_node* %14, %union.tree_node** %newtype, align 8, !dbg !10129
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !10131, metadata !DIExpression()), !dbg !10132
  %15 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10133
  %type16 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !10133
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 6, !dbg !10133
  %bf.load17 = load i32, i32* %precision, align 4, !dbg !10133
  %bf.clear18 = and i32 %bf.load17, 1023, !dbg !10133
  %16 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10135
  %type19 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !10135
  %precision20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !10135
  %bf.load21 = load i32, i32* %precision20, align 4, !dbg !10135
  %bf.clear22 = and i32 %bf.load21, 1023, !dbg !10135
  %cmp23 = icmp slt i32 %bf.clear18, %bf.clear22, !dbg !10136
  br i1 %cmp23, label %land.lhs.true25, label %if.end32, !dbg !10137

land.lhs.true25:                                  ; preds = %if.then10
  %17 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10138
  %18 = load i32, i32* %fcode, align 4, !dbg !10139
  %call26 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %17, i32 %18), !dbg !10140
  store %union.tree_node* %call26, %union.tree_node** %decl, align 8, !dbg !10141
  %tobool27 = icmp ne %union.tree_node* %call26, null, !dbg !10141
  br i1 %tobool27, label %if.then28, label %if.end32, !dbg !10142

if.then28:                                        ; preds = %land.lhs.true25
  %19 = load i32, i32* %loc.addr, align 4, !dbg !10143
  %20 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10144
  %21 = load i32, i32* %loc.addr, align 4, !dbg !10145
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10146
  %23 = load i32, i32* %loc.addr, align 4, !dbg !10147
  %24 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10148
  %25 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10149
  %call29 = call %union.tree_node* @fold_convert_loc(i32 %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !10150
  %call30 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %21, %union.tree_node* %22, i32 1, %union.tree_node* %call29), !dbg !10151
  %call31 = call %union.tree_node* @fold_convert_loc(i32 %19, %union.tree_node* %20, %union.tree_node* %call30), !dbg !10152
  store %union.tree_node* %call31, %union.tree_node** %retval, align 8, !dbg !10153
  br label %return, !dbg !10153

if.end32:                                         ; preds = %land.lhs.true25, %if.then10
  br label %if.end33, !dbg !10154

if.end33:                                         ; preds = %if.end32, %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10155
  br label %return, !dbg !10155

return:                                           ; preds = %if.end33, %if.then28, %if.then7, %if.then2, %if.then
  %26 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10156
  ret %union.tree_node* %26, !dbg !10156
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_int_roundingfn(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10157 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.real_value, align 8
  %itype = alloca %union.tree_node*, align 8
  %ftype = alloca %union.tree_node*, align 8
  %lo2 = alloca i64, align 8
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  %r = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10158, metadata !DIExpression()), !dbg !10159
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10160, metadata !DIExpression()), !dbg !10161
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10162, metadata !DIExpression()), !dbg !10163
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10164
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10166
  %tobool = icmp ne i8 %call, 0, !dbg !10166
  br i1 %tobool, label %if.end, label %if.then, !dbg !10167

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10168
  br label %return, !dbg !10168

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10169
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10169
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10169
  %bf.load = load i64, i64* %2, align 8, !dbg !10169
  %bf.clear = and i64 %bf.load, 65535, !dbg !10169
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10169
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10171
  br i1 %cmp, label %land.lhs.true, label %if.end64, !dbg !10172

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10173
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10173
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10173
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10173
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10173
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10173
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10173
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10173
  br i1 %tobool5, label %if.end64, label %if.then6, !dbg !10174

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !10175, metadata !DIExpression()), !dbg !10178
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10179
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !10179
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10179
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10179
  %7 = bitcast %struct.real_value* %x to i8*, !dbg !10179
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !10179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !10179
  %call7 = call zeroext i8 @real_isfinite(%struct.real_value* %x), !dbg !10180
  %tobool8 = icmp ne i8 %call7, 0, !dbg !10180
  br i1 %tobool8, label %if.then9, label %if.end63, !dbg !10182

if.then9:                                         ; preds = %if.then6
  call void @llvm.dbg.declare(metadata %union.tree_node** %itype, metadata !10183, metadata !DIExpression()), !dbg !10185
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10186
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !10186
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10186
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10186
  %common10 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10186
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !10186
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !10186
  store %union.tree_node* %11, %union.tree_node** %itype, align 8, !dbg !10185
  call void @llvm.dbg.declare(metadata %union.tree_node** %ftype, metadata !10187, metadata !DIExpression()), !dbg !10188
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10189
  %common12 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !10189
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !10189
  %13 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !10189
  store %union.tree_node* %13, %union.tree_node** %ftype, align 8, !dbg !10188
  call void @llvm.dbg.declare(metadata i64* %lo2, metadata !10190, metadata !DIExpression()), !dbg !10191
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !10192, metadata !DIExpression()), !dbg !10193
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !10194, metadata !DIExpression()), !dbg !10195
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !10196, metadata !DIExpression()), !dbg !10197
  %14 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10198
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !10198
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10198
  %bf.load14 = load i32, i32* %function_code, align 8, !dbg !10198
  %bf.clear15 = and i32 %bf.load14, 2047, !dbg !10198
  switch i32 %bf.clear15, label %sw.default [
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 129, label %sw.bb
    i32 130, label %sw.bb
    i32 131, label %sw.bb
    i32 111, label %sw.bb26
    i32 112, label %sw.bb26
    i32 113, label %sw.bb26
    i32 126, label %sw.bb26
    i32 127, label %sw.bb26
    i32 128, label %sw.bb26
    i32 156, label %sw.bb42
    i32 157, label %sw.bb42
    i32 158, label %sw.bb42
    i32 135, label %sw.bb42
    i32 136, label %sw.bb42
    i32 137, label %sw.bb42
  ], !dbg !10199

sw.bb:                                            ; preds = %if.then9, %if.then9, %if.then9, %if.then9, %if.then9, %if.then9
  %15 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10200
  %base16 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !10200
  %16 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10200
  %bf.load17 = load i64, i64* %16, align 8, !dbg !10200
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !10200
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !10200
  %cmp20 = icmp eq i32 %bf.cast19, 14, !dbg !10200
  br i1 %cmp20, label %cond.true, label %cond.false, !dbg !10200

cond.true:                                        ; preds = %sw.bb
  %17 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10200
  %call21 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !10200
  br label %cond.end, !dbg !10200

cond.false:                                       ; preds = %sw.bb
  %18 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10200
  %type22 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !10200
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6, !dbg !10200
  %bf.load23 = load i32, i32* %mode, align 4, !dbg !10200
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !10200
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !10200
  br label %cond.end, !dbg !10200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call21, %cond.true ], [ %bf.clear25, %cond.false ], !dbg !10200
  call void @real_floor(%struct.real_value* %r, i32 %cond, %struct.real_value* %x), !dbg !10202
  br label %sw.epilog, !dbg !10203

sw.bb26:                                          ; preds = %if.then9, %if.then9, %if.then9, %if.then9, %if.then9, %if.then9
  %19 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10204
  %base27 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !10204
  %20 = bitcast %struct.tree_base* %base27 to i64*, !dbg !10204
  %bf.load28 = load i64, i64* %20, align 8, !dbg !10204
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !10204
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !10204
  %cmp31 = icmp eq i32 %bf.cast30, 14, !dbg !10204
  br i1 %cmp31, label %cond.true32, label %cond.false34, !dbg !10204

cond.true32:                                      ; preds = %sw.bb26
  %21 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10204
  %call33 = call i32 @vector_type_mode(%union.tree_node* %21), !dbg !10204
  br label %cond.end40, !dbg !10204

cond.false34:                                     ; preds = %sw.bb26
  %22 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10204
  %type35 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !10204
  %mode36 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 6, !dbg !10204
  %bf.load37 = load i32, i32* %mode36, align 4, !dbg !10204
  %bf.lshr38 = lshr i32 %bf.load37, 16, !dbg !10204
  %bf.clear39 = and i32 %bf.lshr38, 255, !dbg !10204
  br label %cond.end40, !dbg !10204

cond.end40:                                       ; preds = %cond.false34, %cond.true32
  %cond41 = phi i32 [ %call33, %cond.true32 ], [ %bf.clear39, %cond.false34 ], !dbg !10204
  call void @real_ceil(%struct.real_value* %r, i32 %cond41, %struct.real_value* %x), !dbg !10205
  br label %sw.epilog, !dbg !10206

sw.bb42:                                          ; preds = %if.then9, %if.then9, %if.then9, %if.then9, %if.then9, %if.then9
  %23 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10207
  %base43 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !10207
  %24 = bitcast %struct.tree_base* %base43 to i64*, !dbg !10207
  %bf.load44 = load i64, i64* %24, align 8, !dbg !10207
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !10207
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !10207
  %cmp47 = icmp eq i32 %bf.cast46, 14, !dbg !10207
  br i1 %cmp47, label %cond.true48, label %cond.false50, !dbg !10207

cond.true48:                                      ; preds = %sw.bb42
  %25 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10207
  %call49 = call i32 @vector_type_mode(%union.tree_node* %25), !dbg !10207
  br label %cond.end56, !dbg !10207

cond.false50:                                     ; preds = %sw.bb42
  %26 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10207
  %type51 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !10207
  %mode52 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6, !dbg !10207
  %bf.load53 = load i32, i32* %mode52, align 4, !dbg !10207
  %bf.lshr54 = lshr i32 %bf.load53, 16, !dbg !10207
  %bf.clear55 = and i32 %bf.lshr54, 255, !dbg !10207
  br label %cond.end56, !dbg !10207

cond.end56:                                       ; preds = %cond.false50, %cond.true48
  %cond57 = phi i32 [ %call49, %cond.true48 ], [ %bf.clear55, %cond.false50 ], !dbg !10207
  call void @real_round(%struct.real_value* %r, i32 %cond57, %struct.real_value* %x), !dbg !10208
  br label %sw.epilog, !dbg !10209

sw.default:                                       ; preds = %if.then9
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 7529, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !10210
  br label %sw.epilog, !dbg !10211

sw.epilog:                                        ; preds = %sw.default, %cond.end56, %cond.end40, %cond.end
  call void @real_to_integer2(i64* %lo, i64* %hi, %struct.real_value* %r), !dbg !10212
  %27 = load i64, i64* %lo, align 8, !dbg !10213
  %28 = load i64, i64* %hi, align 8, !dbg !10215
  %29 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !10216
  %call58 = call i32 @fit_double_type(i64 %27, i64 %28, i64* %lo2, i64* %hi, %union.tree_node* %29), !dbg !10217
  %tobool59 = icmp ne i32 %call58, 0, !dbg !10217
  br i1 %tobool59, label %if.end62, label %if.then60, !dbg !10218

if.then60:                                        ; preds = %sw.epilog
  %30 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !10219
  %31 = load i64, i64* %lo2, align 8, !dbg !10220
  %32 = load i64, i64* %hi, align 8, !dbg !10221
  %call61 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %30, i64 %31, i64 %32), !dbg !10222
  store %union.tree_node* %call61, %union.tree_node** %retval, align 8, !dbg !10223
  br label %return, !dbg !10223

if.end62:                                         ; preds = %sw.epilog
  br label %if.end63, !dbg !10224

if.end63:                                         ; preds = %if.end62, %if.then6
  br label %if.end64, !dbg !10225

if.end64:                                         ; preds = %if.end63, %land.lhs.true, %if.end
  %33 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10226
  %function_decl65 = bitcast %union.tree_node* %33 to %struct.tree_function_decl*, !dbg !10226
  %function_code66 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl65, i32 0, i32 5, !dbg !10226
  %bf.load67 = load i32, i32* %function_code66, align 8, !dbg !10226
  %bf.clear68 = and i32 %bf.load67, 2047, !dbg !10226
  switch i32 %bf.clear68, label %sw.default79 [
    i32 117, label %sw.bb69
    i32 118, label %sw.bb69
    i32 119, label %sw.bb69
    i32 129, label %sw.bb69
    i32 130, label %sw.bb69
    i32 131, label %sw.bb69
  ], !dbg !10227

sw.bb69:                                          ; preds = %if.end64, %if.end64, %if.end64, %if.end64, %if.end64, %if.end64
  %34 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10228
  %call70 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %34), !dbg !10231
  %tobool71 = icmp ne i8 %call70, 0, !dbg !10231
  br i1 %tobool71, label %if.then72, label %if.end78, !dbg !10232

if.then72:                                        ; preds = %sw.bb69
  %35 = load i32, i32* %loc.addr, align 4, !dbg !10233
  %36 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10233
  %common73 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !10233
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !10233
  %37 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !10233
  %common75 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !10233
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !10233
  %38 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !10233
  %39 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10233
  %call77 = call %union.tree_node* @fold_build1_stat_loc(i32 %35, i32 77, %union.tree_node* %38, %union.tree_node* %39), !dbg !10233
  store %union.tree_node* %call77, %union.tree_node** %retval, align 8, !dbg !10234
  br label %return, !dbg !10234

if.end78:                                         ; preds = %sw.bb69
  br label %sw.epilog80, !dbg !10235

sw.default79:                                     ; preds = %if.end64
  br label %sw.epilog80, !dbg !10236

sw.epilog80:                                      ; preds = %sw.default79, %if.end78
  %40 = load i32, i32* %loc.addr, align 4, !dbg !10237
  %41 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10238
  %42 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10239
  %call81 = call %union.tree_node* @fold_fixed_mathfn(i32 %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !10240
  store %union.tree_node* %call81, %union.tree_node** %retval, align 8, !dbg !10241
  br label %return, !dbg !10241

return:                                           ; preds = %sw.epilog80, %if.then72, %if.then60, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10242
  ret %union.tree_node* %43, !dbg !10242
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_fixed_mathfn(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10243 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %ftype = alloca %union.tree_node*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %newtype = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %newfn = alloca %union.tree_node*, align 8
  %newcall = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10244, metadata !DIExpression()), !dbg !10245
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10246, metadata !DIExpression()), !dbg !10247
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10248, metadata !DIExpression()), !dbg !10249
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !10250, metadata !DIExpression()), !dbg !10251
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10252
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !10252
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10252
  %bf.load = load i32, i32* %function_code, align 8, !dbg !10252
  %bf.clear = and i32 %bf.load, 2047, !dbg !10252
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !10251
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10253
  %call = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 9), !dbg !10255
  %tobool = icmp ne i8 %call, 0, !dbg !10255
  br i1 %tobool, label %if.end, label %if.then, !dbg !10256

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10257
  br label %return, !dbg !10257

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @flag_errno_math, align 4, !dbg !10258
  %tobool1 = icmp ne i32 %2, 0, !dbg !10258
  br i1 %tobool1, label %if.end8, label %land.lhs.true, !dbg !10260

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10261
  %call2 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %3), !dbg !10262
  %conv = zext i8 %call2 to i32, !dbg !10262
  %tobool3 = icmp ne i32 %conv, 0, !dbg !10262
  br i1 %tobool3, label %if.then4, label %if.end8, !dbg !10263

if.then4:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %loc.addr, align 4, !dbg !10264
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10264
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10264
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10264
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10264
  %common5 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !10264
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !10264
  %7 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !10264
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10264
  %call7 = call %union.tree_node* @fold_build1_stat_loc(i32 %4, i32 77, %union.tree_node* %7, %union.tree_node* %8), !dbg !10264
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !10265
  br label %return, !dbg !10265

if.end8:                                          ; preds = %land.lhs.true, %if.end
  %9 = load i32, i32* @optimize, align 4, !dbg !10266
  %tobool9 = icmp ne i32 %9, 0, !dbg !10266
  br i1 %tobool9, label %if.then10, label %if.end31, !dbg !10268

if.then10:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ftype, metadata !10269, metadata !DIExpression()), !dbg !10271
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10272
  %common11 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10272
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !10272
  %11 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !10272
  store %union.tree_node* %11, %union.tree_node** %ftype, align 8, !dbg !10271
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !10273, metadata !DIExpression()), !dbg !10274
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10275
  %call13 = call %union.tree_node* @strip_float_extensions(%union.tree_node* %12), !dbg !10276
  store %union.tree_node* %call13, %union.tree_node** %arg0, align 8, !dbg !10274
  call void @llvm.dbg.declare(metadata %union.tree_node** %newtype, metadata !10277, metadata !DIExpression()), !dbg !10278
  %13 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10279
  %common14 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !10279
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !10279
  %14 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !10279
  store %union.tree_node* %14, %union.tree_node** %newtype, align 8, !dbg !10278
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !10280, metadata !DIExpression()), !dbg !10281
  %15 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10282
  %type16 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !10282
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 6, !dbg !10282
  %bf.load17 = load i32, i32* %precision, align 4, !dbg !10282
  %bf.clear18 = and i32 %bf.load17, 1023, !dbg !10282
  %16 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !10284
  %type19 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !10284
  %precision20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !10284
  %bf.load21 = load i32, i32* %precision20, align 4, !dbg !10284
  %bf.clear22 = and i32 %bf.load21, 1023, !dbg !10284
  %cmp = icmp slt i32 %bf.clear18, %bf.clear22, !dbg !10285
  br i1 %cmp, label %land.lhs.true24, label %if.end30, !dbg !10286

land.lhs.true24:                                  ; preds = %if.then10
  %17 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10287
  %18 = load i32, i32* %fcode, align 4, !dbg !10288
  %call25 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %17, i32 %18), !dbg !10289
  store %union.tree_node* %call25, %union.tree_node** %decl, align 8, !dbg !10290
  %tobool26 = icmp ne %union.tree_node* %call25, null, !dbg !10290
  br i1 %tobool26, label %if.then27, label %if.end30, !dbg !10291

if.then27:                                        ; preds = %land.lhs.true24
  %19 = load i32, i32* %loc.addr, align 4, !dbg !10292
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10293
  %21 = load i32, i32* %loc.addr, align 4, !dbg !10294
  %22 = load %union.tree_node*, %union.tree_node** %newtype, align 8, !dbg !10295
  %23 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10296
  %call28 = call %union.tree_node* @fold_convert_loc(i32 %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !10297
  %call29 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %19, %union.tree_node* %20, i32 1, %union.tree_node* %call28), !dbg !10298
  store %union.tree_node* %call29, %union.tree_node** %retval, align 8, !dbg !10299
  br label %return, !dbg !10299

if.end30:                                         ; preds = %land.lhs.true24, %if.then10
  br label %if.end31, !dbg !10300

if.end31:                                         ; preds = %if.end30, %if.end8
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !10301
  %type32 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !10301
  %precision33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !10301
  %bf.load34 = load i32, i32* %precision33, align 4, !dbg !10301
  %bf.clear35 = and i32 %bf.load34, 1023, !dbg !10301
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !10303
  %type36 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !10303
  %precision37 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6, !dbg !10303
  %bf.load38 = load i32, i32* %precision37, align 4, !dbg !10303
  %bf.clear39 = and i32 %bf.load38, 1023, !dbg !10303
  %cmp40 = icmp eq i32 %bf.clear35, %bf.clear39, !dbg !10304
  br i1 %cmp40, label %if.then42, label %if.end67, !dbg !10305

if.then42:                                        ; preds = %if.end31
  call void @llvm.dbg.declare(metadata %union.tree_node** %newfn, metadata !10306, metadata !DIExpression()), !dbg !10308
  store %union.tree_node* null, %union.tree_node** %newfn, align 8, !dbg !10308
  %26 = load i32, i32* %fcode, align 4, !dbg !10309
  switch i32 %26, label %sw.default [
    i32 126, label %sw.bb
    i32 127, label %sw.bb
    i32 128, label %sw.bb
    i32 129, label %sw.bb46
    i32 130, label %sw.bb46
    i32 131, label %sw.bb46
    i32 135, label %sw.bb50
    i32 136, label %sw.bb50
    i32 137, label %sw.bb50
    i32 132, label %sw.bb54
    i32 133, label %sw.bb54
    i32 134, label %sw.bb54
  ], !dbg !10310

sw.bb:                                            ; preds = %if.then42, %if.then42, %if.then42
  %27 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10311
  %common43 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !10311
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !10311
  %28 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !10311
  %call45 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %28, i32 111), !dbg !10313
  store %union.tree_node* %call45, %union.tree_node** %newfn, align 8, !dbg !10314
  br label %sw.epilog, !dbg !10315

sw.bb46:                                          ; preds = %if.then42, %if.then42, %if.then42
  %29 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10316
  %common47 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !10316
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !10316
  %30 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !10316
  %call49 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %30, i32 117), !dbg !10317
  store %union.tree_node* %call49, %union.tree_node** %newfn, align 8, !dbg !10318
  br label %sw.epilog, !dbg !10319

sw.bb50:                                          ; preds = %if.then42, %if.then42, %if.then42
  %31 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10320
  %common51 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !10320
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !10320
  %32 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !10320
  %call53 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %32, i32 156), !dbg !10321
  store %union.tree_node* %call53, %union.tree_node** %newfn, align 8, !dbg !10322
  br label %sw.epilog, !dbg !10323

sw.bb54:                                          ; preds = %if.then42, %if.then42, %if.then42
  %33 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10324
  %common55 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !10324
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !10324
  %34 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !10324
  %call57 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %34, i32 153), !dbg !10325
  store %union.tree_node* %call57, %union.tree_node** %newfn, align 8, !dbg !10326
  br label %sw.epilog, !dbg !10327

sw.default:                                       ; preds = %if.then42
  br label %sw.epilog, !dbg !10328

sw.epilog:                                        ; preds = %sw.default, %sw.bb54, %sw.bb50, %sw.bb46, %sw.bb
  %35 = load %union.tree_node*, %union.tree_node** %newfn, align 8, !dbg !10329
  %tobool58 = icmp ne %union.tree_node* %35, null, !dbg !10329
  br i1 %tobool58, label %if.then59, label %if.end66, !dbg !10331

if.then59:                                        ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %union.tree_node** %newcall, metadata !10332, metadata !DIExpression()), !dbg !10334
  %36 = load i32, i32* %loc.addr, align 4, !dbg !10335
  %37 = load %union.tree_node*, %union.tree_node** %newfn, align 8, !dbg !10336
  %38 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10337
  %call60 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %36, %union.tree_node* %37, i32 1, %union.tree_node* %38), !dbg !10338
  store %union.tree_node* %call60, %union.tree_node** %newcall, align 8, !dbg !10334
  %39 = load i32, i32* %loc.addr, align 4, !dbg !10339
  %40 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10340
  %common61 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !10340
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !10340
  %41 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !10340
  %common63 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !10340
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !10340
  %42 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !10340
  %43 = load %union.tree_node*, %union.tree_node** %newcall, align 8, !dbg !10341
  %call65 = call %union.tree_node* @fold_convert_loc(i32 %39, %union.tree_node* %42, %union.tree_node* %43), !dbg !10342
  store %union.tree_node* %call65, %union.tree_node** %retval, align 8, !dbg !10343
  br label %return, !dbg !10343

if.end66:                                         ; preds = %sw.epilog
  br label %if.end67, !dbg !10344

if.end67:                                         ; preds = %if.end66, %if.end31
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10345
  br label %return, !dbg !10345

return:                                           ; preds = %if.end67, %if.then59, %if.then27, %if.then4, %if.then
  %44 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10346
  ret %union.tree_node* %44, !dbg !10346
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_bswap(%union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10347 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %hi = alloca i64, align 8
  %width = alloca i64, align 8
  %r_hi = alloca i64, align 8
  %lo = alloca i64, align 8
  %r_lo = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %s = alloca i32, align 4
  %d = alloca i32, align 4
  %byte = alloca i64, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10348, metadata !DIExpression()), !dbg !10349
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10350, metadata !DIExpression()), !dbg !10351
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10352
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !10354
  %tobool = icmp ne i8 %call, 0, !dbg !10354
  br i1 %tobool, label %if.end, label %if.then, !dbg !10355

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10356
  br label %return, !dbg !10356

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10357
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10357
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10357
  %bf.load = load i64, i64* %2, align 8, !dbg !10357
  %bf.clear = and i64 %bf.load, 65535, !dbg !10357
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10357
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !10359
  br i1 %cmp, label %land.lhs.true, label %if.end54, !dbg !10360

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10361
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10361
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10361
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10361
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10361
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10361
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10361
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10361
  br i1 %tobool5, label %if.end54, label %if.then6, !dbg !10362

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !10363, metadata !DIExpression()), !dbg !10365
  call void @llvm.dbg.declare(metadata i64* %width, metadata !10366, metadata !DIExpression()), !dbg !10367
  call void @llvm.dbg.declare(metadata i64* %r_hi, metadata !10368, metadata !DIExpression()), !dbg !10369
  store i64 0, i64* %r_hi, align 8, !dbg !10369
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !10370, metadata !DIExpression()), !dbg !10371
  call void @llvm.dbg.declare(metadata i64* %r_lo, metadata !10372, metadata !DIExpression()), !dbg !10373
  store i64 0, i64* %r_lo, align 8, !dbg !10373
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10374, metadata !DIExpression()), !dbg !10375
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10376
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10376
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10376
  %6 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10376
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !10377
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10378
  %type8 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !10378
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !10378
  %bf.load9 = load i32, i32* %precision, align 4, !dbg !10378
  %bf.clear10 = and i32 %bf.load9, 1023, !dbg !10378
  %conv = zext i32 %bf.clear10 to i64, !dbg !10378
  store i64 %conv, i64* %width, align 8, !dbg !10379
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10380
  %int_cst = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !10380
  %int_cst11 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !10380
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst11, i32 0, i32 0, !dbg !10380
  %9 = load i64, i64* %low, align 8, !dbg !10380
  store i64 %9, i64* %lo, align 8, !dbg !10381
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10382
  %int_cst12 = bitcast %union.tree_node* %10 to %struct.tree_int_cst*, !dbg !10382
  %int_cst13 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst12, i32 0, i32 1, !dbg !10382
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst13, i32 0, i32 1, !dbg !10382
  %11 = load i64, i64* %high, align 8, !dbg !10382
  store i64 %11, i64* %hi, align 8, !dbg !10383
  %12 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10384
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !10384
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10384
  %bf.load14 = load i32, i32* %function_code, align 8, !dbg !10384
  %bf.clear15 = and i32 %bf.load14, 2047, !dbg !10384
  switch i32 %bf.clear15, label %sw.default [
    i32 419, label %sw.bb
    i32 420, label %sw.bb
  ], !dbg !10385

sw.bb:                                            ; preds = %if.then6, %if.then6
  call void @llvm.dbg.declare(metadata i32* %s, metadata !10386, metadata !DIExpression()), !dbg !10389
  store i32 0, i32* %s, align 4, !dbg !10390
  br label %for.cond, !dbg !10392

for.cond:                                         ; preds = %for.inc, %sw.bb
  %13 = load i32, i32* %s, align 4, !dbg !10393
  %conv16 = sext i32 %13 to i64, !dbg !10393
  %14 = load i64, i64* %width, align 8, !dbg !10395
  %cmp17 = icmp slt i64 %conv16, %14, !dbg !10396
  br i1 %cmp17, label %for.body, label %for.end, !dbg !10397

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %d, metadata !10398, metadata !DIExpression()), !dbg !10400
  %15 = load i64, i64* %width, align 8, !dbg !10401
  %16 = load i32, i32* %s, align 4, !dbg !10402
  %conv19 = sext i32 %16 to i64, !dbg !10402
  %sub = sub nsw i64 %15, %conv19, !dbg !10403
  %sub20 = sub nsw i64 %sub, 8, !dbg !10404
  %conv21 = trunc i64 %sub20 to i32, !dbg !10401
  store i32 %conv21, i32* %d, align 4, !dbg !10400
  call void @llvm.dbg.declare(metadata i64* %byte, metadata !10405, metadata !DIExpression()), !dbg !10406
  %17 = load i32, i32* %s, align 4, !dbg !10407
  %cmp22 = icmp slt i32 %17, 64, !dbg !10409
  br i1 %cmp22, label %if.then24, label %if.else, !dbg !10410

if.then24:                                        ; preds = %for.body
  %18 = load i64, i64* %lo, align 8, !dbg !10411
  %19 = load i32, i32* %s, align 4, !dbg !10412
  %sh_prom = zext i32 %19 to i64, !dbg !10413
  %shr = lshr i64 %18, %sh_prom, !dbg !10413
  %and = and i64 %shr, 255, !dbg !10414
  store i64 %and, i64* %byte, align 8, !dbg !10415
  br label %if.end29, !dbg !10416

if.else:                                          ; preds = %for.body
  %20 = load i64, i64* %hi, align 8, !dbg !10417
  %21 = load i32, i32* %s, align 4, !dbg !10418
  %sub25 = sub nsw i32 %21, 64, !dbg !10419
  %sh_prom26 = zext i32 %sub25 to i64, !dbg !10420
  %shr27 = ashr i64 %20, %sh_prom26, !dbg !10420
  %and28 = and i64 %shr27, 255, !dbg !10421
  store i64 %and28, i64* %byte, align 8, !dbg !10422
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then24
  %22 = load i32, i32* %d, align 4, !dbg !10423
  %cmp30 = icmp slt i32 %22, 64, !dbg !10425
  br i1 %cmp30, label %if.then32, label %if.else34, !dbg !10426

if.then32:                                        ; preds = %if.end29
  %23 = load i64, i64* %byte, align 8, !dbg !10427
  %24 = load i32, i32* %d, align 4, !dbg !10428
  %sh_prom33 = zext i32 %24 to i64, !dbg !10429
  %shl = shl i64 %23, %sh_prom33, !dbg !10429
  %25 = load i64, i64* %r_lo, align 8, !dbg !10430
  %or = or i64 %25, %shl, !dbg !10430
  store i64 %or, i64* %r_lo, align 8, !dbg !10430
  br label %if.end39, !dbg !10431

if.else34:                                        ; preds = %if.end29
  %26 = load i64, i64* %byte, align 8, !dbg !10432
  %27 = load i32, i32* %d, align 4, !dbg !10433
  %sub35 = sub nsw i32 %27, 64, !dbg !10434
  %sh_prom36 = zext i32 %sub35 to i64, !dbg !10435
  %shl37 = shl i64 %26, %sh_prom36, !dbg !10435
  %28 = load i64, i64* %r_hi, align 8, !dbg !10436
  %or38 = or i64 %28, %shl37, !dbg !10436
  store i64 %or38, i64* %r_hi, align 8, !dbg !10436
  br label %if.end39

if.end39:                                         ; preds = %if.else34, %if.then32
  br label %for.inc, !dbg !10437

for.inc:                                          ; preds = %if.end39
  %29 = load i32, i32* %s, align 4, !dbg !10438
  %add = add nsw i32 %29, 8, !dbg !10438
  store i32 %add, i32* %s, align 4, !dbg !10438
  br label %for.cond, !dbg !10439, !llvm.loop !10440

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !10442

sw.default:                                       ; preds = %if.then6
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 7692, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !10443
  br label %sw.epilog, !dbg !10444

sw.epilog:                                        ; preds = %sw.default, %for.end
  %30 = load i64, i64* %width, align 8, !dbg !10445
  %cmp40 = icmp slt i64 %30, 64, !dbg !10447
  br i1 %cmp40, label %if.then42, label %if.else48, !dbg !10448

if.then42:                                        ; preds = %sw.epilog
  %31 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10449
  %common43 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !10449
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !10449
  %32 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !10449
  %common45 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !10449
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !10449
  %33 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !10449
  %34 = load i64, i64* %r_lo, align 8, !dbg !10450
  %call47 = call %union.tree_node* @build_int_cst(%union.tree_node* %33, i64 %34), !dbg !10451
  store %union.tree_node* %call47, %union.tree_node** %retval, align 8, !dbg !10452
  br label %return, !dbg !10452

if.else48:                                        ; preds = %sw.epilog
  %35 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10453
  %common49 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !10453
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !10453
  %36 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !10453
  %common51 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !10453
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !10453
  %37 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !10453
  %38 = load i64, i64* %r_lo, align 8, !dbg !10454
  %39 = load i64, i64* %r_hi, align 8, !dbg !10455
  %call53 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %37, i64 %38, i64 %39), !dbg !10456
  store %union.tree_node* %call53, %union.tree_node** %retval, align 8, !dbg !10457
  br label %return, !dbg !10457

if.end54:                                         ; preds = %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10458
  br label %return, !dbg !10458

return:                                           ; preds = %if.end54, %if.else48, %if.then42, %if.then
  %40 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10459
  ret %union.tree_node* %40, !dbg !10459
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_bitop(%union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !10460 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %hi = alloca i64, align 8
  %width = alloca i64, align 8
  %result = alloca i64, align 8
  %lo = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10461, metadata !DIExpression()), !dbg !10462
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10463, metadata !DIExpression()), !dbg !10464
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10465
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !10467
  %tobool = icmp ne i8 %call, 0, !dbg !10467
  br i1 %tobool, label %if.end, label %if.then, !dbg !10468

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10469
  br label %return, !dbg !10469

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10470
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10470
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10470
  %bf.load = load i64, i64* %2, align 8, !dbg !10470
  %bf.clear = and i64 %bf.load, 65535, !dbg !10470
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10470
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !10472
  br i1 %cmp, label %land.lhs.true, label %if.end122, !dbg !10473

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10474
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10474
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10474
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10474
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10474
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10474
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10474
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10474
  br i1 %tobool5, label %if.end122, label %if.then6, !dbg !10475

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !10476, metadata !DIExpression()), !dbg !10478
  call void @llvm.dbg.declare(metadata i64* %width, metadata !10479, metadata !DIExpression()), !dbg !10480
  call void @llvm.dbg.declare(metadata i64* %result, metadata !10481, metadata !DIExpression()), !dbg !10482
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !10483, metadata !DIExpression()), !dbg !10484
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10485, metadata !DIExpression()), !dbg !10486
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10487
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10487
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10487
  %6 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10487
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !10488
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10489
  %type8 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !10489
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !10489
  %bf.load9 = load i32, i32* %precision, align 4, !dbg !10489
  %bf.clear10 = and i32 %bf.load9, 1023, !dbg !10489
  %conv = zext i32 %bf.clear10 to i64, !dbg !10489
  store i64 %conv, i64* %width, align 8, !dbg !10490
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10491
  %int_cst = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !10491
  %int_cst11 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !10491
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst11, i32 0, i32 0, !dbg !10491
  %9 = load i64, i64* %low, align 8, !dbg !10491
  store i64 %9, i64* %lo, align 8, !dbg !10492
  %10 = load i64, i64* %width, align 8, !dbg !10493
  %cmp12 = icmp sgt i64 %10, 64, !dbg !10495
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !10496

if.then14:                                        ; preds = %if.then6
  %11 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10497
  %int_cst15 = bitcast %union.tree_node* %11 to %struct.tree_int_cst*, !dbg !10497
  %int_cst16 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst15, i32 0, i32 1, !dbg !10497
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst16, i32 0, i32 1, !dbg !10497
  %12 = load i64, i64* %high, align 8, !dbg !10497
  store i64 %12, i64* %hi, align 8, !dbg !10499
  %13 = load i64, i64* %width, align 8, !dbg !10500
  %cmp17 = icmp slt i64 %13, 128, !dbg !10502
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !10503

if.then19:                                        ; preds = %if.then14
  %14 = load i64, i64* %width, align 8, !dbg !10504
  %sub = sub nsw i64 %14, 64, !dbg !10505
  %shr = ashr i64 -1, %sub, !dbg !10506
  %neg = xor i64 %shr, -1, !dbg !10507
  %15 = load i64, i64* %hi, align 8, !dbg !10508
  %and = and i64 %15, %neg, !dbg !10508
  store i64 %and, i64* %hi, align 8, !dbg !10508
  br label %if.end20, !dbg !10509

if.end20:                                         ; preds = %if.then19, %if.then14
  br label %if.end27, !dbg !10510

if.else:                                          ; preds = %if.then6
  store i64 0, i64* %hi, align 8, !dbg !10511
  %16 = load i64, i64* %width, align 8, !dbg !10513
  %cmp21 = icmp slt i64 %16, 64, !dbg !10515
  br i1 %cmp21, label %if.then23, label %if.end26, !dbg !10516

if.then23:                                        ; preds = %if.else
  %17 = load i64, i64* %width, align 8, !dbg !10517
  %shl = shl i64 -1, %17, !dbg !10518
  %neg24 = xor i64 %shl, -1, !dbg !10519
  %18 = load i64, i64* %lo, align 8, !dbg !10520
  %and25 = and i64 %18, %neg24, !dbg !10520
  store i64 %and25, i64* %lo, align 8, !dbg !10520
  br label %if.end26, !dbg !10521

if.end26:                                         ; preds = %if.then23, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end20
  %19 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10522
  %function_decl = bitcast %union.tree_node* %19 to %struct.tree_function_decl*, !dbg !10522
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10522
  %bf.load28 = load i32, i32* %function_code, align 8, !dbg !10522
  %bf.clear29 = and i32 %bf.load28, 2047, !dbg !10522
  switch i32 %bf.clear29, label %sw.default [
    i32 449, label %sw.bb
    i32 451, label %sw.bb
    i32 452, label %sw.bb
    i32 424, label %sw.bb50
    i32 426, label %sw.bb50
    i32 427, label %sw.bb50
    i32 429, label %sw.bb70
    i32 431, label %sw.bb70
    i32 432, label %sw.bb70
    i32 497, label %sw.bb90
    i32 499, label %sw.bb90
    i32 500, label %sw.bb90
    i32 493, label %sw.bb101
    i32 495, label %sw.bb101
    i32 496, label %sw.bb101
  ], !dbg !10523

sw.bb:                                            ; preds = %if.end27, %if.end27, %if.end27
  %20 = load i64, i64* %lo, align 8, !dbg !10524
  %cmp30 = icmp ne i64 %20, 0, !dbg !10527
  br i1 %cmp30, label %if.then32, label %if.else37, !dbg !10528

if.then32:                                        ; preds = %sw.bb
  %21 = load i64, i64* %lo, align 8, !dbg !10529
  %22 = load i64, i64* %lo, align 8, !dbg !10530
  %sub33 = sub i64 0, %22, !dbg !10531
  %and34 = and i64 %21, %sub33, !dbg !10532
  %call35 = call i32 @exact_log2(i64 %and34), !dbg !10533
  %add = add nsw i32 %call35, 1, !dbg !10534
  %conv36 = sext i32 %add to i64, !dbg !10533
  store i64 %conv36, i64* %result, align 8, !dbg !10535
  br label %if.end49, !dbg !10536

if.else37:                                        ; preds = %sw.bb
  %23 = load i64, i64* %hi, align 8, !dbg !10537
  %cmp38 = icmp ne i64 %23, 0, !dbg !10539
  br i1 %cmp38, label %if.then40, label %if.else47, !dbg !10540

if.then40:                                        ; preds = %if.else37
  %24 = load i64, i64* %hi, align 8, !dbg !10541
  %25 = load i64, i64* %hi, align 8, !dbg !10542
  %sub41 = sub nsw i64 0, %25, !dbg !10543
  %and42 = and i64 %24, %sub41, !dbg !10544
  %call43 = call i32 @exact_log2(i64 %and42), !dbg !10545
  %add44 = add nsw i32 64, %call43, !dbg !10546
  %add45 = add nsw i32 %add44, 1, !dbg !10547
  %conv46 = sext i32 %add45 to i64, !dbg !10548
  store i64 %conv46, i64* %result, align 8, !dbg !10549
  br label %if.end48, !dbg !10550

if.else47:                                        ; preds = %if.else37
  store i64 0, i64* %result, align 8, !dbg !10551
  br label %if.end48

if.end48:                                         ; preds = %if.else47, %if.then40
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then32
  br label %sw.epilog, !dbg !10552

sw.bb50:                                          ; preds = %if.end27, %if.end27, %if.end27
  %26 = load i64, i64* %hi, align 8, !dbg !10553
  %cmp51 = icmp ne i64 %26, 0, !dbg !10555
  br i1 %cmp51, label %if.then53, label %if.else59, !dbg !10556

if.then53:                                        ; preds = %sw.bb50
  %27 = load i64, i64* %width, align 8, !dbg !10557
  %28 = load i64, i64* %hi, align 8, !dbg !10558
  %call54 = call i32 @floor_log2(i64 %28), !dbg !10559
  %conv55 = sext i32 %call54 to i64, !dbg !10559
  %sub56 = sub nsw i64 %27, %conv55, !dbg !10560
  %sub57 = sub nsw i64 %sub56, 1, !dbg !10561
  %sub58 = sub nsw i64 %sub57, 64, !dbg !10562
  store i64 %sub58, i64* %result, align 8, !dbg !10563
  br label %if.end69, !dbg !10564

if.else59:                                        ; preds = %sw.bb50
  %29 = load i64, i64* %lo, align 8, !dbg !10565
  %cmp60 = icmp ne i64 %29, 0, !dbg !10567
  br i1 %cmp60, label %if.then62, label %if.else67, !dbg !10568

if.then62:                                        ; preds = %if.else59
  %30 = load i64, i64* %width, align 8, !dbg !10569
  %31 = load i64, i64* %lo, align 8, !dbg !10570
  %call63 = call i32 @floor_log2(i64 %31), !dbg !10571
  %conv64 = sext i32 %call63 to i64, !dbg !10571
  %sub65 = sub nsw i64 %30, %conv64, !dbg !10572
  %sub66 = sub nsw i64 %sub65, 1, !dbg !10573
  store i64 %sub66, i64* %result, align 8, !dbg !10574
  br label %if.end68, !dbg !10575

if.else67:                                        ; preds = %if.else59
  %32 = load i64, i64* %width, align 8, !dbg !10576
  store i64 %32, i64* %result, align 8, !dbg !10578
  br label %if.end68

if.end68:                                         ; preds = %if.else67, %if.then62
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then53
  br label %sw.epilog, !dbg !10579

sw.bb70:                                          ; preds = %if.end27, %if.end27, %if.end27
  %33 = load i64, i64* %lo, align 8, !dbg !10580
  %cmp71 = icmp ne i64 %33, 0, !dbg !10582
  br i1 %cmp71, label %if.then73, label %if.else78, !dbg !10583

if.then73:                                        ; preds = %sw.bb70
  %34 = load i64, i64* %lo, align 8, !dbg !10584
  %35 = load i64, i64* %lo, align 8, !dbg !10585
  %sub74 = sub i64 0, %35, !dbg !10586
  %and75 = and i64 %34, %sub74, !dbg !10587
  %call76 = call i32 @exact_log2(i64 %and75), !dbg !10588
  %conv77 = sext i32 %call76 to i64, !dbg !10588
  store i64 %conv77, i64* %result, align 8, !dbg !10589
  br label %if.end89, !dbg !10590

if.else78:                                        ; preds = %sw.bb70
  %36 = load i64, i64* %hi, align 8, !dbg !10591
  %cmp79 = icmp ne i64 %36, 0, !dbg !10593
  br i1 %cmp79, label %if.then81, label %if.else87, !dbg !10594

if.then81:                                        ; preds = %if.else78
  %37 = load i64, i64* %hi, align 8, !dbg !10595
  %38 = load i64, i64* %hi, align 8, !dbg !10596
  %sub82 = sub nsw i64 0, %38, !dbg !10597
  %and83 = and i64 %37, %sub82, !dbg !10598
  %call84 = call i32 @exact_log2(i64 %and83), !dbg !10599
  %add85 = add nsw i32 64, %call84, !dbg !10600
  %conv86 = sext i32 %add85 to i64, !dbg !10601
  store i64 %conv86, i64* %result, align 8, !dbg !10602
  br label %if.end88, !dbg !10603

if.else87:                                        ; preds = %if.else78
  %39 = load i64, i64* %width, align 8, !dbg !10604
  store i64 %39, i64* %result, align 8, !dbg !10606
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then81
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.then73
  br label %sw.epilog, !dbg !10607

sw.bb90:                                          ; preds = %if.end27, %if.end27, %if.end27
  store i64 0, i64* %result, align 8, !dbg !10608
  br label %while.cond, !dbg !10609

while.cond:                                       ; preds = %while.body, %sw.bb90
  %40 = load i64, i64* %lo, align 8, !dbg !10610
  %tobool91 = icmp ne i64 %40, 0, !dbg !10609
  br i1 %tobool91, label %while.body, label %while.end, !dbg !10609

while.body:                                       ; preds = %while.cond
  %41 = load i64, i64* %result, align 8, !dbg !10611
  %inc = add nsw i64 %41, 1, !dbg !10611
  store i64 %inc, i64* %result, align 8, !dbg !10611
  %42 = load i64, i64* %lo, align 8, !dbg !10612
  %sub92 = sub i64 %42, 1, !dbg !10613
  %43 = load i64, i64* %lo, align 8, !dbg !10614
  %and93 = and i64 %43, %sub92, !dbg !10614
  store i64 %and93, i64* %lo, align 8, !dbg !10614
  br label %while.cond, !dbg !10609, !llvm.loop !10615

while.end:                                        ; preds = %while.cond
  br label %while.cond94, !dbg !10617

while.cond94:                                     ; preds = %while.body96, %while.end
  %44 = load i64, i64* %hi, align 8, !dbg !10618
  %tobool95 = icmp ne i64 %44, 0, !dbg !10617
  br i1 %tobool95, label %while.body96, label %while.end100, !dbg !10617

while.body96:                                     ; preds = %while.cond94
  %45 = load i64, i64* %result, align 8, !dbg !10619
  %inc97 = add nsw i64 %45, 1, !dbg !10619
  store i64 %inc97, i64* %result, align 8, !dbg !10619
  %46 = load i64, i64* %hi, align 8, !dbg !10620
  %sub98 = sub nsw i64 %46, 1, !dbg !10621
  %47 = load i64, i64* %hi, align 8, !dbg !10622
  %and99 = and i64 %47, %sub98, !dbg !10622
  store i64 %and99, i64* %hi, align 8, !dbg !10622
  br label %while.cond94, !dbg !10617, !llvm.loop !10623

while.end100:                                     ; preds = %while.cond94
  br label %sw.epilog, !dbg !10625

sw.bb101:                                         ; preds = %if.end27, %if.end27, %if.end27
  store i64 0, i64* %result, align 8, !dbg !10626
  br label %while.cond102, !dbg !10627

while.cond102:                                    ; preds = %while.body104, %sw.bb101
  %48 = load i64, i64* %lo, align 8, !dbg !10628
  %tobool103 = icmp ne i64 %48, 0, !dbg !10627
  br i1 %tobool103, label %while.body104, label %while.end108, !dbg !10627

while.body104:                                    ; preds = %while.cond102
  %49 = load i64, i64* %result, align 8, !dbg !10629
  %inc105 = add nsw i64 %49, 1, !dbg !10629
  store i64 %inc105, i64* %result, align 8, !dbg !10629
  %50 = load i64, i64* %lo, align 8, !dbg !10630
  %sub106 = sub i64 %50, 1, !dbg !10631
  %51 = load i64, i64* %lo, align 8, !dbg !10632
  %and107 = and i64 %51, %sub106, !dbg !10632
  store i64 %and107, i64* %lo, align 8, !dbg !10632
  br label %while.cond102, !dbg !10627, !llvm.loop !10633

while.end108:                                     ; preds = %while.cond102
  br label %while.cond109, !dbg !10635

while.cond109:                                    ; preds = %while.body111, %while.end108
  %52 = load i64, i64* %hi, align 8, !dbg !10636
  %tobool110 = icmp ne i64 %52, 0, !dbg !10635
  br i1 %tobool110, label %while.body111, label %while.end115, !dbg !10635

while.body111:                                    ; preds = %while.cond109
  %53 = load i64, i64* %result, align 8, !dbg !10637
  %inc112 = add nsw i64 %53, 1, !dbg !10637
  store i64 %inc112, i64* %result, align 8, !dbg !10637
  %54 = load i64, i64* %hi, align 8, !dbg !10638
  %sub113 = sub nsw i64 %54, 1, !dbg !10639
  %55 = load i64, i64* %hi, align 8, !dbg !10640
  %and114 = and i64 %55, %sub113, !dbg !10640
  store i64 %and114, i64* %hi, align 8, !dbg !10640
  br label %while.cond109, !dbg !10635, !llvm.loop !10641

while.end115:                                     ; preds = %while.cond109
  %56 = load i64, i64* %result, align 8, !dbg !10643
  %and116 = and i64 %56, 1, !dbg !10643
  store i64 %and116, i64* %result, align 8, !dbg !10643
  br label %sw.epilog, !dbg !10644

sw.default:                                       ; preds = %if.end27
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 7636, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !10645
  br label %sw.epilog, !dbg !10646

sw.epilog:                                        ; preds = %sw.default, %while.end115, %while.end100, %if.end89, %if.end69, %if.end49
  %57 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10647
  %common117 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !10647
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !10647
  %58 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !10647
  %common119 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !10647
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !10647
  %59 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !10647
  %60 = load i64, i64* %result, align 8, !dbg !10648
  %call121 = call %union.tree_node* @build_int_cst(%union.tree_node* %59, i64 %60), !dbg !10649
  store %union.tree_node* %call121, %union.tree_node** %retval, align 8, !dbg !10650
  br label %return, !dbg !10650

if.end122:                                        ; preds = %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10651
  br label %return, !dbg !10651

return:                                           ; preds = %if.end122, %sw.epilog, %if.then
  %61 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10652
  ret %union.tree_node* %61, !dbg !10652
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_signbit(i32 %loc, %union.tree_node* %arg, %union.tree_node* %type) #0 !dbg !10653 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %c = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10654, metadata !DIExpression()), !dbg !10655
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10656, metadata !DIExpression()), !dbg !10657
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !10658, metadata !DIExpression()), !dbg !10659
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !10660, metadata !DIExpression()), !dbg !10661
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10662
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10664
  %tobool = icmp ne i8 %call, 0, !dbg !10664
  br i1 %tobool, label %if.end, label %if.then, !dbg !10665

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10666
  br label %return, !dbg !10666

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10667
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10667
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10667
  %bf.load = load i64, i64* %2, align 8, !dbg !10667
  %bf.clear = and i64 %bf.load, 65535, !dbg !10667
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10667
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10669
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !10670

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10671
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10671
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10671
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10671
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !10671
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10671
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10671
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10671
  br i1 %tobool5, label %if.end10, label %if.then6, !dbg !10672

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %c, metadata !10673, metadata !DIExpression()), !dbg !10675
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10676
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !10676
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10676
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10676
  %7 = bitcast %struct.real_value* %c to i8*, !dbg !10676
  %8 = bitcast %struct.real_value* %6 to i8*, !dbg !10676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !10676
  %call7 = call zeroext i8 @real_isneg(%struct.real_value* %c), !dbg !10677
  %conv = zext i8 %call7 to i32, !dbg !10677
  %tobool8 = icmp ne i32 %conv, 0, !dbg !10677
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !10677

cond.true:                                        ; preds = %if.then6
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10678
  br label %cond.end, !dbg !10677

cond.false:                                       ; preds = %if.then6
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10679
  br label %cond.end, !dbg !10677

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %9, %cond.true ], [ %10, %cond.false ], !dbg !10677
  store %union.tree_node* %cond, %union.tree_node** %temp, align 8, !dbg !10680
  %11 = load i32, i32* %loc.addr, align 4, !dbg !10681
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10682
  %13 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !10683
  %call9 = call %union.tree_node* @fold_convert_loc(i32 %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !10684
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !10685
  br label %return, !dbg !10685

if.end10:                                         ; preds = %land.lhs.true, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10686
  %call11 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %14), !dbg !10688
  %tobool12 = icmp ne i8 %call11, 0, !dbg !10688
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !10689

if.then13:                                        ; preds = %if.end10
  %15 = load i32, i32* %loc.addr, align 4, !dbg !10690
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10691
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10692
  %18 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10693
  %call14 = call %union.tree_node* @omit_one_operand_loc(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !10694
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !10695
  br label %return, !dbg !10695

if.end15:                                         ; preds = %if.end10
  %19 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !10696
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10696
  %20 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !10696
  %base17 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !10696
  %21 = bitcast %struct.tree_base* %base17 to i64*, !dbg !10696
  %bf.load18 = load i64, i64* %21, align 8, !dbg !10696
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !10696
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !10696
  %cmp21 = icmp eq i32 %bf.cast20, 14, !dbg !10696
  br i1 %cmp21, label %cond.true23, label %cond.false27, !dbg !10696

cond.true23:                                      ; preds = %if.end15
  %22 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common24 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !10696
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !10696
  %23 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !10696
  %call26 = call i32 @vector_type_mode(%union.tree_node* %23), !dbg !10696
  br label %cond.end34, !dbg !10696

cond.false27:                                     ; preds = %if.end15
  %24 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common28 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !10696
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !10696
  %25 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !10696
  %type30 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !10696
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 6, !dbg !10696
  %bf.load31 = load i32, i32* %mode, align 4, !dbg !10696
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !10696
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !10696
  br label %cond.end34, !dbg !10696

cond.end34:                                       ; preds = %cond.false27, %cond.true23
  %cond35 = phi i32 [ %call26, %cond.true23 ], [ %bf.clear33, %cond.false27 ], !dbg !10696
  %idxprom = zext i32 %cond35 to i64, !dbg !10696
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10696
  %26 = load i8, i8* %arrayidx, align 1, !dbg !10696
  %conv36 = zext i8 %26 to i32, !dbg !10696
  %cmp37 = icmp eq i32 %conv36, 8, !dbg !10696
  br i1 %cmp37, label %land.lhs.true122, label %lor.lhs.false, !dbg !10696

lor.lhs.false:                                    ; preds = %cond.end34
  %27 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common39 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !10696
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !10696
  %28 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !10696
  %base41 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !10696
  %29 = bitcast %struct.tree_base* %base41 to i64*, !dbg !10696
  %bf.load42 = load i64, i64* %29, align 8, !dbg !10696
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !10696
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !10696
  %cmp45 = icmp eq i32 %bf.cast44, 14, !dbg !10696
  br i1 %cmp45, label %cond.true47, label %cond.false51, !dbg !10696

cond.true47:                                      ; preds = %lor.lhs.false
  %30 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common48 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !10696
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !10696
  %31 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !10696
  %call50 = call i32 @vector_type_mode(%union.tree_node* %31), !dbg !10696
  br label %cond.end59, !dbg !10696

cond.false51:                                     ; preds = %lor.lhs.false
  %32 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common52 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !10696
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !10696
  %33 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !10696
  %type54 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !10696
  %mode55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 6, !dbg !10696
  %bf.load56 = load i32, i32* %mode55, align 4, !dbg !10696
  %bf.lshr57 = lshr i32 %bf.load56, 16, !dbg !10696
  %bf.clear58 = and i32 %bf.lshr57, 255, !dbg !10696
  br label %cond.end59, !dbg !10696

cond.end59:                                       ; preds = %cond.false51, %cond.true47
  %cond60 = phi i32 [ %call50, %cond.true47 ], [ %bf.clear58, %cond.false51 ], !dbg !10696
  %idxprom61 = zext i32 %cond60 to i64, !dbg !10696
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom61, !dbg !10696
  %34 = load i8, i8* %arrayidx62, align 1, !dbg !10696
  %conv63 = zext i8 %34 to i32, !dbg !10696
  %cmp64 = icmp eq i32 %conv63, 9, !dbg !10696
  br i1 %cmp64, label %land.lhs.true122, label %lor.lhs.false66, !dbg !10696

lor.lhs.false66:                                  ; preds = %cond.end59
  %35 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common67 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !10696
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !10696
  %36 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !10696
  %base69 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !10696
  %37 = bitcast %struct.tree_base* %base69 to i64*, !dbg !10696
  %bf.load70 = load i64, i64* %37, align 8, !dbg !10696
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !10696
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !10696
  %cmp73 = icmp eq i32 %bf.cast72, 14, !dbg !10696
  br i1 %cmp73, label %cond.true75, label %cond.false79, !dbg !10696

cond.true75:                                      ; preds = %lor.lhs.false66
  %38 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common76 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !10696
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !10696
  %39 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !10696
  %call78 = call i32 @vector_type_mode(%union.tree_node* %39), !dbg !10696
  br label %cond.end87, !dbg !10696

cond.false79:                                     ; preds = %lor.lhs.false66
  %40 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common80 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !10696
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !10696
  %41 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !10696
  %type82 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !10696
  %mode83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 6, !dbg !10696
  %bf.load84 = load i32, i32* %mode83, align 4, !dbg !10696
  %bf.lshr85 = lshr i32 %bf.load84, 16, !dbg !10696
  %bf.clear86 = and i32 %bf.lshr85, 255, !dbg !10696
  br label %cond.end87, !dbg !10696

cond.end87:                                       ; preds = %cond.false79, %cond.true75
  %cond88 = phi i32 [ %call78, %cond.true75 ], [ %bf.clear86, %cond.false79 ], !dbg !10696
  %idxprom89 = zext i32 %cond88 to i64, !dbg !10696
  %arrayidx90 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom89, !dbg !10696
  %42 = load i8, i8* %arrayidx90, align 1, !dbg !10696
  %conv91 = zext i8 %42 to i32, !dbg !10696
  %cmp92 = icmp eq i32 %conv91, 11, !dbg !10696
  br i1 %cmp92, label %land.lhs.true122, label %lor.lhs.false94, !dbg !10696

lor.lhs.false94:                                  ; preds = %cond.end87
  %43 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common95 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !10696
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !10696
  %44 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !10696
  %base97 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !10696
  %45 = bitcast %struct.tree_base* %base97 to i64*, !dbg !10696
  %bf.load98 = load i64, i64* %45, align 8, !dbg !10696
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !10696
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !10696
  %cmp101 = icmp eq i32 %bf.cast100, 14, !dbg !10696
  br i1 %cmp101, label %cond.true103, label %cond.false107, !dbg !10696

cond.true103:                                     ; preds = %lor.lhs.false94
  %46 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common104 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !10696
  %type105 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common104, i32 0, i32 2, !dbg !10696
  %47 = load %union.tree_node*, %union.tree_node** %type105, align 8, !dbg !10696
  %call106 = call i32 @vector_type_mode(%union.tree_node* %47), !dbg !10696
  br label %cond.end115, !dbg !10696

cond.false107:                                    ; preds = %lor.lhs.false94
  %48 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common108 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !10696
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !10696
  %49 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !10696
  %type110 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !10696
  %mode111 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type110, i32 0, i32 6, !dbg !10696
  %bf.load112 = load i32, i32* %mode111, align 4, !dbg !10696
  %bf.lshr113 = lshr i32 %bf.load112, 16, !dbg !10696
  %bf.clear114 = and i32 %bf.lshr113, 255, !dbg !10696
  br label %cond.end115, !dbg !10696

cond.end115:                                      ; preds = %cond.false107, %cond.true103
  %cond116 = phi i32 [ %call106, %cond.true103 ], [ %bf.clear114, %cond.false107 ], !dbg !10696
  %idxprom117 = zext i32 %cond116 to i64, !dbg !10696
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom117, !dbg !10696
  %50 = load i8, i8* %arrayidx118, align 1, !dbg !10696
  %conv119 = zext i8 %50 to i32, !dbg !10696
  %cmp120 = icmp eq i32 %conv119, 17, !dbg !10696
  br i1 %cmp120, label %land.lhs.true122, label %if.then457, !dbg !10696

land.lhs.true122:                                 ; preds = %cond.end115, %cond.end87, %cond.end59, %cond.end34
  %51 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common123 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !10696
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 2, !dbg !10696
  %52 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !10696
  %base125 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !10696
  %53 = bitcast %struct.tree_base* %base125 to i64*, !dbg !10696
  %bf.load126 = load i64, i64* %53, align 8, !dbg !10696
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !10696
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !10696
  %cmp129 = icmp eq i32 %bf.cast128, 14, !dbg !10696
  br i1 %cmp129, label %cond.true131, label %cond.false135, !dbg !10696

cond.true131:                                     ; preds = %land.lhs.true122
  %54 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common132 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !10696
  %type133 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common132, i32 0, i32 2, !dbg !10696
  %55 = load %union.tree_node*, %union.tree_node** %type133, align 8, !dbg !10696
  %call134 = call i32 @vector_type_mode(%union.tree_node* %55), !dbg !10696
  br label %cond.end143, !dbg !10696

cond.false135:                                    ; preds = %land.lhs.true122
  %56 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common136 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !10696
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !10696
  %57 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !10696
  %type138 = bitcast %union.tree_node* %57 to %struct.tree_type*, !dbg !10696
  %mode139 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 6, !dbg !10696
  %bf.load140 = load i32, i32* %mode139, align 4, !dbg !10696
  %bf.lshr141 = lshr i32 %bf.load140, 16, !dbg !10696
  %bf.clear142 = and i32 %bf.lshr141, 255, !dbg !10696
  br label %cond.end143, !dbg !10696

cond.end143:                                      ; preds = %cond.false135, %cond.true131
  %cond144 = phi i32 [ %call134, %cond.true131 ], [ %bf.clear142, %cond.false135 ], !dbg !10696
  %idxprom145 = zext i32 %cond144 to i64, !dbg !10696
  %arrayidx146 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom145, !dbg !10696
  %58 = load i8, i8* %arrayidx146, align 1, !dbg !10696
  %conv147 = zext i8 %58 to i32, !dbg !10696
  %cmp148 = icmp eq i32 %conv147, 8, !dbg !10696
  br i1 %cmp148, label %cond.true178, label %lor.lhs.false150, !dbg !10696

lor.lhs.false150:                                 ; preds = %cond.end143
  %59 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common151 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !10696
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !10696
  %60 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !10696
  %base153 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !10696
  %61 = bitcast %struct.tree_base* %base153 to i64*, !dbg !10696
  %bf.load154 = load i64, i64* %61, align 8, !dbg !10696
  %bf.clear155 = and i64 %bf.load154, 65535, !dbg !10696
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !10696
  %cmp157 = icmp eq i32 %bf.cast156, 14, !dbg !10696
  br i1 %cmp157, label %cond.true159, label %cond.false163, !dbg !10696

cond.true159:                                     ; preds = %lor.lhs.false150
  %62 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common160 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !10696
  %type161 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common160, i32 0, i32 2, !dbg !10696
  %63 = load %union.tree_node*, %union.tree_node** %type161, align 8, !dbg !10696
  %call162 = call i32 @vector_type_mode(%union.tree_node* %63), !dbg !10696
  br label %cond.end171, !dbg !10696

cond.false163:                                    ; preds = %lor.lhs.false150
  %64 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common164 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !10696
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2, !dbg !10696
  %65 = load %union.tree_node*, %union.tree_node** %type165, align 8, !dbg !10696
  %type166 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !10696
  %mode167 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type166, i32 0, i32 6, !dbg !10696
  %bf.load168 = load i32, i32* %mode167, align 4, !dbg !10696
  %bf.lshr169 = lshr i32 %bf.load168, 16, !dbg !10696
  %bf.clear170 = and i32 %bf.lshr169, 255, !dbg !10696
  br label %cond.end171, !dbg !10696

cond.end171:                                      ; preds = %cond.false163, %cond.true159
  %cond172 = phi i32 [ %call162, %cond.true159 ], [ %bf.clear170, %cond.false163 ], !dbg !10696
  %idxprom173 = zext i32 %cond172 to i64, !dbg !10696
  %arrayidx174 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom173, !dbg !10696
  %66 = load i8, i8* %arrayidx174, align 1, !dbg !10696
  %conv175 = zext i8 %66 to i32, !dbg !10696
  %cmp176 = icmp eq i32 %conv175, 9, !dbg !10696
  br i1 %cmp176, label %cond.true178, label %cond.false201, !dbg !10696

cond.true178:                                     ; preds = %cond.end171, %cond.end143
  %67 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common179 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !10696
  %type180 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common179, i32 0, i32 2, !dbg !10696
  %68 = load %union.tree_node*, %union.tree_node** %type180, align 8, !dbg !10696
  %base181 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !10696
  %69 = bitcast %struct.tree_base* %base181 to i64*, !dbg !10696
  %bf.load182 = load i64, i64* %69, align 8, !dbg !10696
  %bf.clear183 = and i64 %bf.load182, 65535, !dbg !10696
  %bf.cast184 = trunc i64 %bf.clear183 to i32, !dbg !10696
  %cmp185 = icmp eq i32 %bf.cast184, 14, !dbg !10696
  br i1 %cmp185, label %cond.true187, label %cond.false191, !dbg !10696

cond.true187:                                     ; preds = %cond.true178
  %70 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common188 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !10696
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !10696
  %71 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !10696
  %call190 = call i32 @vector_type_mode(%union.tree_node* %71), !dbg !10696
  br label %cond.end199, !dbg !10696

cond.false191:                                    ; preds = %cond.true178
  %72 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common192 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !10696
  %type193 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common192, i32 0, i32 2, !dbg !10696
  %73 = load %union.tree_node*, %union.tree_node** %type193, align 8, !dbg !10696
  %type194 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !10696
  %mode195 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type194, i32 0, i32 6, !dbg !10696
  %bf.load196 = load i32, i32* %mode195, align 4, !dbg !10696
  %bf.lshr197 = lshr i32 %bf.load196, 16, !dbg !10696
  %bf.clear198 = and i32 %bf.lshr197, 255, !dbg !10696
  br label %cond.end199, !dbg !10696

cond.end199:                                      ; preds = %cond.false191, %cond.true187
  %cond200 = phi i32 [ %call190, %cond.true187 ], [ %bf.clear198, %cond.false191 ], !dbg !10696
  br label %cond.end227, !dbg !10696

cond.false201:                                    ; preds = %cond.end171
  %74 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common202 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !10696
  %type203 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common202, i32 0, i32 2, !dbg !10696
  %75 = load %union.tree_node*, %union.tree_node** %type203, align 8, !dbg !10696
  %base204 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !10696
  %76 = bitcast %struct.tree_base* %base204 to i64*, !dbg !10696
  %bf.load205 = load i64, i64* %76, align 8, !dbg !10696
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !10696
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !10696
  %cmp208 = icmp eq i32 %bf.cast207, 14, !dbg !10696
  br i1 %cmp208, label %cond.true210, label %cond.false214, !dbg !10696

cond.true210:                                     ; preds = %cond.false201
  %77 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common211 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !10696
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !10696
  %78 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !10696
  %call213 = call i32 @vector_type_mode(%union.tree_node* %78), !dbg !10696
  br label %cond.end222, !dbg !10696

cond.false214:                                    ; preds = %cond.false201
  %79 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common215 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !10696
  %type216 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common215, i32 0, i32 2, !dbg !10696
  %80 = load %union.tree_node*, %union.tree_node** %type216, align 8, !dbg !10696
  %type217 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !10696
  %mode218 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type217, i32 0, i32 6, !dbg !10696
  %bf.load219 = load i32, i32* %mode218, align 4, !dbg !10696
  %bf.lshr220 = lshr i32 %bf.load219, 16, !dbg !10696
  %bf.clear221 = and i32 %bf.lshr220, 255, !dbg !10696
  br label %cond.end222, !dbg !10696

cond.end222:                                      ; preds = %cond.false214, %cond.true210
  %cond223 = phi i32 [ %call213, %cond.true210 ], [ %bf.clear221, %cond.false214 ], !dbg !10696
  %idxprom224 = zext i32 %cond223 to i64, !dbg !10696
  %arrayidx225 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom224, !dbg !10696
  %81 = load i8, i8* %arrayidx225, align 1, !dbg !10696
  %conv226 = zext i8 %81 to i32, !dbg !10696
  br label %cond.end227, !dbg !10696

cond.end227:                                      ; preds = %cond.end222, %cond.end199
  %cond228 = phi i32 [ %cond200, %cond.end199 ], [ %conv226, %cond.end222 ], !dbg !10696
  %idxprom229 = zext i32 %cond228 to i64, !dbg !10696
  %arrayidx230 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom229, !dbg !10696
  %82 = load i8, i8* %arrayidx230, align 1, !dbg !10696
  %conv231 = zext i8 %82 to i32, !dbg !10696
  %cmp232 = icmp eq i32 %conv231, 9, !dbg !10696
  br i1 %cmp232, label %cond.true234, label %cond.false341, !dbg !10696

cond.true234:                                     ; preds = %cond.end227
  %83 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common235 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !10696
  %type236 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common235, i32 0, i32 2, !dbg !10696
  %84 = load %union.tree_node*, %union.tree_node** %type236, align 8, !dbg !10696
  %base237 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !10696
  %85 = bitcast %struct.tree_base* %base237 to i64*, !dbg !10696
  %bf.load238 = load i64, i64* %85, align 8, !dbg !10696
  %bf.clear239 = and i64 %bf.load238, 65535, !dbg !10696
  %bf.cast240 = trunc i64 %bf.clear239 to i32, !dbg !10696
  %cmp241 = icmp eq i32 %bf.cast240, 14, !dbg !10696
  br i1 %cmp241, label %cond.true243, label %cond.false247, !dbg !10696

cond.true243:                                     ; preds = %cond.true234
  %86 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common244 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !10696
  %type245 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common244, i32 0, i32 2, !dbg !10696
  %87 = load %union.tree_node*, %union.tree_node** %type245, align 8, !dbg !10696
  %call246 = call i32 @vector_type_mode(%union.tree_node* %87), !dbg !10696
  br label %cond.end255, !dbg !10696

cond.false247:                                    ; preds = %cond.true234
  %88 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common248 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !10696
  %type249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2, !dbg !10696
  %89 = load %union.tree_node*, %union.tree_node** %type249, align 8, !dbg !10696
  %type250 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !10696
  %mode251 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type250, i32 0, i32 6, !dbg !10696
  %bf.load252 = load i32, i32* %mode251, align 4, !dbg !10696
  %bf.lshr253 = lshr i32 %bf.load252, 16, !dbg !10696
  %bf.clear254 = and i32 %bf.lshr253, 255, !dbg !10696
  br label %cond.end255, !dbg !10696

cond.end255:                                      ; preds = %cond.false247, %cond.true243
  %cond256 = phi i32 [ %call246, %cond.true243 ], [ %bf.clear254, %cond.false247 ], !dbg !10696
  %idxprom257 = zext i32 %cond256 to i64, !dbg !10696
  %arrayidx258 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom257, !dbg !10696
  %90 = load i8, i8* %arrayidx258, align 1, !dbg !10696
  %conv259 = zext i8 %90 to i32, !dbg !10696
  %cmp260 = icmp eq i32 %conv259, 8, !dbg !10696
  br i1 %cmp260, label %cond.true290, label %lor.lhs.false262, !dbg !10696

lor.lhs.false262:                                 ; preds = %cond.end255
  %91 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common263 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !10696
  %type264 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common263, i32 0, i32 2, !dbg !10696
  %92 = load %union.tree_node*, %union.tree_node** %type264, align 8, !dbg !10696
  %base265 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !10696
  %93 = bitcast %struct.tree_base* %base265 to i64*, !dbg !10696
  %bf.load266 = load i64, i64* %93, align 8, !dbg !10696
  %bf.clear267 = and i64 %bf.load266, 65535, !dbg !10696
  %bf.cast268 = trunc i64 %bf.clear267 to i32, !dbg !10696
  %cmp269 = icmp eq i32 %bf.cast268, 14, !dbg !10696
  br i1 %cmp269, label %cond.true271, label %cond.false275, !dbg !10696

cond.true271:                                     ; preds = %lor.lhs.false262
  %94 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common272 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !10696
  %type273 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common272, i32 0, i32 2, !dbg !10696
  %95 = load %union.tree_node*, %union.tree_node** %type273, align 8, !dbg !10696
  %call274 = call i32 @vector_type_mode(%union.tree_node* %95), !dbg !10696
  br label %cond.end283, !dbg !10696

cond.false275:                                    ; preds = %lor.lhs.false262
  %96 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common276 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !10696
  %type277 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common276, i32 0, i32 2, !dbg !10696
  %97 = load %union.tree_node*, %union.tree_node** %type277, align 8, !dbg !10696
  %type278 = bitcast %union.tree_node* %97 to %struct.tree_type*, !dbg !10696
  %mode279 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type278, i32 0, i32 6, !dbg !10696
  %bf.load280 = load i32, i32* %mode279, align 4, !dbg !10696
  %bf.lshr281 = lshr i32 %bf.load280, 16, !dbg !10696
  %bf.clear282 = and i32 %bf.lshr281, 255, !dbg !10696
  br label %cond.end283, !dbg !10696

cond.end283:                                      ; preds = %cond.false275, %cond.true271
  %cond284 = phi i32 [ %call274, %cond.true271 ], [ %bf.clear282, %cond.false275 ], !dbg !10696
  %idxprom285 = zext i32 %cond284 to i64, !dbg !10696
  %arrayidx286 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom285, !dbg !10696
  %98 = load i8, i8* %arrayidx286, align 1, !dbg !10696
  %conv287 = zext i8 %98 to i32, !dbg !10696
  %cmp288 = icmp eq i32 %conv287, 9, !dbg !10696
  br i1 %cmp288, label %cond.true290, label %cond.false313, !dbg !10696

cond.true290:                                     ; preds = %cond.end283, %cond.end255
  %99 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common291 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !10696
  %type292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common291, i32 0, i32 2, !dbg !10696
  %100 = load %union.tree_node*, %union.tree_node** %type292, align 8, !dbg !10696
  %base293 = bitcast %union.tree_node* %100 to %struct.tree_base*, !dbg !10696
  %101 = bitcast %struct.tree_base* %base293 to i64*, !dbg !10696
  %bf.load294 = load i64, i64* %101, align 8, !dbg !10696
  %bf.clear295 = and i64 %bf.load294, 65535, !dbg !10696
  %bf.cast296 = trunc i64 %bf.clear295 to i32, !dbg !10696
  %cmp297 = icmp eq i32 %bf.cast296, 14, !dbg !10696
  br i1 %cmp297, label %cond.true299, label %cond.false303, !dbg !10696

cond.true299:                                     ; preds = %cond.true290
  %102 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common300 = bitcast %union.tree_node* %102 to %struct.tree_common*, !dbg !10696
  %type301 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common300, i32 0, i32 2, !dbg !10696
  %103 = load %union.tree_node*, %union.tree_node** %type301, align 8, !dbg !10696
  %call302 = call i32 @vector_type_mode(%union.tree_node* %103), !dbg !10696
  br label %cond.end311, !dbg !10696

cond.false303:                                    ; preds = %cond.true290
  %104 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common304 = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !10696
  %type305 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common304, i32 0, i32 2, !dbg !10696
  %105 = load %union.tree_node*, %union.tree_node** %type305, align 8, !dbg !10696
  %type306 = bitcast %union.tree_node* %105 to %struct.tree_type*, !dbg !10696
  %mode307 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type306, i32 0, i32 6, !dbg !10696
  %bf.load308 = load i32, i32* %mode307, align 4, !dbg !10696
  %bf.lshr309 = lshr i32 %bf.load308, 16, !dbg !10696
  %bf.clear310 = and i32 %bf.lshr309, 255, !dbg !10696
  br label %cond.end311, !dbg !10696

cond.end311:                                      ; preds = %cond.false303, %cond.true299
  %cond312 = phi i32 [ %call302, %cond.true299 ], [ %bf.clear310, %cond.false303 ], !dbg !10696
  br label %cond.end339, !dbg !10696

cond.false313:                                    ; preds = %cond.end283
  %106 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common314 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !10696
  %type315 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common314, i32 0, i32 2, !dbg !10696
  %107 = load %union.tree_node*, %union.tree_node** %type315, align 8, !dbg !10696
  %base316 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !10696
  %108 = bitcast %struct.tree_base* %base316 to i64*, !dbg !10696
  %bf.load317 = load i64, i64* %108, align 8, !dbg !10696
  %bf.clear318 = and i64 %bf.load317, 65535, !dbg !10696
  %bf.cast319 = trunc i64 %bf.clear318 to i32, !dbg !10696
  %cmp320 = icmp eq i32 %bf.cast319, 14, !dbg !10696
  br i1 %cmp320, label %cond.true322, label %cond.false326, !dbg !10696

cond.true322:                                     ; preds = %cond.false313
  %109 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common323 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !10696
  %type324 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common323, i32 0, i32 2, !dbg !10696
  %110 = load %union.tree_node*, %union.tree_node** %type324, align 8, !dbg !10696
  %call325 = call i32 @vector_type_mode(%union.tree_node* %110), !dbg !10696
  br label %cond.end334, !dbg !10696

cond.false326:                                    ; preds = %cond.false313
  %111 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common327 = bitcast %union.tree_node* %111 to %struct.tree_common*, !dbg !10696
  %type328 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common327, i32 0, i32 2, !dbg !10696
  %112 = load %union.tree_node*, %union.tree_node** %type328, align 8, !dbg !10696
  %type329 = bitcast %union.tree_node* %112 to %struct.tree_type*, !dbg !10696
  %mode330 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type329, i32 0, i32 6, !dbg !10696
  %bf.load331 = load i32, i32* %mode330, align 4, !dbg !10696
  %bf.lshr332 = lshr i32 %bf.load331, 16, !dbg !10696
  %bf.clear333 = and i32 %bf.lshr332, 255, !dbg !10696
  br label %cond.end334, !dbg !10696

cond.end334:                                      ; preds = %cond.false326, %cond.true322
  %cond335 = phi i32 [ %call325, %cond.true322 ], [ %bf.clear333, %cond.false326 ], !dbg !10696
  %idxprom336 = zext i32 %cond335 to i64, !dbg !10696
  %arrayidx337 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom336, !dbg !10696
  %113 = load i8, i8* %arrayidx337, align 1, !dbg !10696
  %conv338 = zext i8 %113 to i32, !dbg !10696
  br label %cond.end339, !dbg !10696

cond.end339:                                      ; preds = %cond.end334, %cond.end311
  %cond340 = phi i32 [ %cond312, %cond.end311 ], [ %conv338, %cond.end334 ], !dbg !10696
  %sub = sub i32 %cond340, 42, !dbg !10696
  %add = add i32 %sub, 4, !dbg !10696
  br label %cond.end449, !dbg !10696

cond.false341:                                    ; preds = %cond.end227
  %114 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common342 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !10696
  %type343 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common342, i32 0, i32 2, !dbg !10696
  %115 = load %union.tree_node*, %union.tree_node** %type343, align 8, !dbg !10696
  %base344 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !10696
  %116 = bitcast %struct.tree_base* %base344 to i64*, !dbg !10696
  %bf.load345 = load i64, i64* %116, align 8, !dbg !10696
  %bf.clear346 = and i64 %bf.load345, 65535, !dbg !10696
  %bf.cast347 = trunc i64 %bf.clear346 to i32, !dbg !10696
  %cmp348 = icmp eq i32 %bf.cast347, 14, !dbg !10696
  br i1 %cmp348, label %cond.true350, label %cond.false354, !dbg !10696

cond.true350:                                     ; preds = %cond.false341
  %117 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common351 = bitcast %union.tree_node* %117 to %struct.tree_common*, !dbg !10696
  %type352 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common351, i32 0, i32 2, !dbg !10696
  %118 = load %union.tree_node*, %union.tree_node** %type352, align 8, !dbg !10696
  %call353 = call i32 @vector_type_mode(%union.tree_node* %118), !dbg !10696
  br label %cond.end362, !dbg !10696

cond.false354:                                    ; preds = %cond.false341
  %119 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common355 = bitcast %union.tree_node* %119 to %struct.tree_common*, !dbg !10696
  %type356 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common355, i32 0, i32 2, !dbg !10696
  %120 = load %union.tree_node*, %union.tree_node** %type356, align 8, !dbg !10696
  %type357 = bitcast %union.tree_node* %120 to %struct.tree_type*, !dbg !10696
  %mode358 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type357, i32 0, i32 6, !dbg !10696
  %bf.load359 = load i32, i32* %mode358, align 4, !dbg !10696
  %bf.lshr360 = lshr i32 %bf.load359, 16, !dbg !10696
  %bf.clear361 = and i32 %bf.lshr360, 255, !dbg !10696
  br label %cond.end362, !dbg !10696

cond.end362:                                      ; preds = %cond.false354, %cond.true350
  %cond363 = phi i32 [ %call353, %cond.true350 ], [ %bf.clear361, %cond.false354 ], !dbg !10696
  %idxprom364 = zext i32 %cond363 to i64, !dbg !10696
  %arrayidx365 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom364, !dbg !10696
  %121 = load i8, i8* %arrayidx365, align 1, !dbg !10696
  %conv366 = zext i8 %121 to i32, !dbg !10696
  %cmp367 = icmp eq i32 %conv366, 8, !dbg !10696
  br i1 %cmp367, label %cond.true397, label %lor.lhs.false369, !dbg !10696

lor.lhs.false369:                                 ; preds = %cond.end362
  %122 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common370 = bitcast %union.tree_node* %122 to %struct.tree_common*, !dbg !10696
  %type371 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common370, i32 0, i32 2, !dbg !10696
  %123 = load %union.tree_node*, %union.tree_node** %type371, align 8, !dbg !10696
  %base372 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !10696
  %124 = bitcast %struct.tree_base* %base372 to i64*, !dbg !10696
  %bf.load373 = load i64, i64* %124, align 8, !dbg !10696
  %bf.clear374 = and i64 %bf.load373, 65535, !dbg !10696
  %bf.cast375 = trunc i64 %bf.clear374 to i32, !dbg !10696
  %cmp376 = icmp eq i32 %bf.cast375, 14, !dbg !10696
  br i1 %cmp376, label %cond.true378, label %cond.false382, !dbg !10696

cond.true378:                                     ; preds = %lor.lhs.false369
  %125 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common379 = bitcast %union.tree_node* %125 to %struct.tree_common*, !dbg !10696
  %type380 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common379, i32 0, i32 2, !dbg !10696
  %126 = load %union.tree_node*, %union.tree_node** %type380, align 8, !dbg !10696
  %call381 = call i32 @vector_type_mode(%union.tree_node* %126), !dbg !10696
  br label %cond.end390, !dbg !10696

cond.false382:                                    ; preds = %lor.lhs.false369
  %127 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common383 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !10696
  %type384 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common383, i32 0, i32 2, !dbg !10696
  %128 = load %union.tree_node*, %union.tree_node** %type384, align 8, !dbg !10696
  %type385 = bitcast %union.tree_node* %128 to %struct.tree_type*, !dbg !10696
  %mode386 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type385, i32 0, i32 6, !dbg !10696
  %bf.load387 = load i32, i32* %mode386, align 4, !dbg !10696
  %bf.lshr388 = lshr i32 %bf.load387, 16, !dbg !10696
  %bf.clear389 = and i32 %bf.lshr388, 255, !dbg !10696
  br label %cond.end390, !dbg !10696

cond.end390:                                      ; preds = %cond.false382, %cond.true378
  %cond391 = phi i32 [ %call381, %cond.true378 ], [ %bf.clear389, %cond.false382 ], !dbg !10696
  %idxprom392 = zext i32 %cond391 to i64, !dbg !10696
  %arrayidx393 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom392, !dbg !10696
  %129 = load i8, i8* %arrayidx393, align 1, !dbg !10696
  %conv394 = zext i8 %129 to i32, !dbg !10696
  %cmp395 = icmp eq i32 %conv394, 9, !dbg !10696
  br i1 %cmp395, label %cond.true397, label %cond.false420, !dbg !10696

cond.true397:                                     ; preds = %cond.end390, %cond.end362
  %130 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common398 = bitcast %union.tree_node* %130 to %struct.tree_common*, !dbg !10696
  %type399 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common398, i32 0, i32 2, !dbg !10696
  %131 = load %union.tree_node*, %union.tree_node** %type399, align 8, !dbg !10696
  %base400 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !10696
  %132 = bitcast %struct.tree_base* %base400 to i64*, !dbg !10696
  %bf.load401 = load i64, i64* %132, align 8, !dbg !10696
  %bf.clear402 = and i64 %bf.load401, 65535, !dbg !10696
  %bf.cast403 = trunc i64 %bf.clear402 to i32, !dbg !10696
  %cmp404 = icmp eq i32 %bf.cast403, 14, !dbg !10696
  br i1 %cmp404, label %cond.true406, label %cond.false410, !dbg !10696

cond.true406:                                     ; preds = %cond.true397
  %133 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common407 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !10696
  %type408 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common407, i32 0, i32 2, !dbg !10696
  %134 = load %union.tree_node*, %union.tree_node** %type408, align 8, !dbg !10696
  %call409 = call i32 @vector_type_mode(%union.tree_node* %134), !dbg !10696
  br label %cond.end418, !dbg !10696

cond.false410:                                    ; preds = %cond.true397
  %135 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common411 = bitcast %union.tree_node* %135 to %struct.tree_common*, !dbg !10696
  %type412 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common411, i32 0, i32 2, !dbg !10696
  %136 = load %union.tree_node*, %union.tree_node** %type412, align 8, !dbg !10696
  %type413 = bitcast %union.tree_node* %136 to %struct.tree_type*, !dbg !10696
  %mode414 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type413, i32 0, i32 6, !dbg !10696
  %bf.load415 = load i32, i32* %mode414, align 4, !dbg !10696
  %bf.lshr416 = lshr i32 %bf.load415, 16, !dbg !10696
  %bf.clear417 = and i32 %bf.lshr416, 255, !dbg !10696
  br label %cond.end418, !dbg !10696

cond.end418:                                      ; preds = %cond.false410, %cond.true406
  %cond419 = phi i32 [ %call409, %cond.true406 ], [ %bf.clear417, %cond.false410 ], !dbg !10696
  br label %cond.end446, !dbg !10696

cond.false420:                                    ; preds = %cond.end390
  %137 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common421 = bitcast %union.tree_node* %137 to %struct.tree_common*, !dbg !10696
  %type422 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common421, i32 0, i32 2, !dbg !10696
  %138 = load %union.tree_node*, %union.tree_node** %type422, align 8, !dbg !10696
  %base423 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !10696
  %139 = bitcast %struct.tree_base* %base423 to i64*, !dbg !10696
  %bf.load424 = load i64, i64* %139, align 8, !dbg !10696
  %bf.clear425 = and i64 %bf.load424, 65535, !dbg !10696
  %bf.cast426 = trunc i64 %bf.clear425 to i32, !dbg !10696
  %cmp427 = icmp eq i32 %bf.cast426, 14, !dbg !10696
  br i1 %cmp427, label %cond.true429, label %cond.false433, !dbg !10696

cond.true429:                                     ; preds = %cond.false420
  %140 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common430 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !10696
  %type431 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common430, i32 0, i32 2, !dbg !10696
  %141 = load %union.tree_node*, %union.tree_node** %type431, align 8, !dbg !10696
  %call432 = call i32 @vector_type_mode(%union.tree_node* %141), !dbg !10696
  br label %cond.end441, !dbg !10696

cond.false433:                                    ; preds = %cond.false420
  %142 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10696
  %common434 = bitcast %union.tree_node* %142 to %struct.tree_common*, !dbg !10696
  %type435 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common434, i32 0, i32 2, !dbg !10696
  %143 = load %union.tree_node*, %union.tree_node** %type435, align 8, !dbg !10696
  %type436 = bitcast %union.tree_node* %143 to %struct.tree_type*, !dbg !10696
  %mode437 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type436, i32 0, i32 6, !dbg !10696
  %bf.load438 = load i32, i32* %mode437, align 4, !dbg !10696
  %bf.lshr439 = lshr i32 %bf.load438, 16, !dbg !10696
  %bf.clear440 = and i32 %bf.lshr439, 255, !dbg !10696
  br label %cond.end441, !dbg !10696

cond.end441:                                      ; preds = %cond.false433, %cond.true429
  %cond442 = phi i32 [ %call432, %cond.true429 ], [ %bf.clear440, %cond.false433 ], !dbg !10696
  %idxprom443 = zext i32 %cond442 to i64, !dbg !10696
  %arrayidx444 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom443, !dbg !10696
  %144 = load i8, i8* %arrayidx444, align 1, !dbg !10696
  %conv445 = zext i8 %144 to i32, !dbg !10696
  br label %cond.end446, !dbg !10696

cond.end446:                                      ; preds = %cond.end441, %cond.end418
  %cond447 = phi i32 [ %cond419, %cond.end418 ], [ %conv445, %cond.end441 ], !dbg !10696
  %sub448 = sub i32 %cond447, 38, !dbg !10696
  br label %cond.end449, !dbg !10696

cond.end449:                                      ; preds = %cond.end446, %cond.end339
  %cond450 = phi i32 [ %add, %cond.end339 ], [ %sub448, %cond.end446 ], !dbg !10696
  %idxprom451 = zext i32 %cond450 to i64, !dbg !10696
  %arrayidx452 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom451, !dbg !10696
  %145 = load %struct.real_format*, %struct.real_format** %arrayidx452, align 8, !dbg !10696
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %145, i32 0, i32 14, !dbg !10696
  %146 = load i8, i8* %has_signed_zero, align 1, !dbg !10696
  %conv453 = zext i8 %146 to i32, !dbg !10696
  %tobool454 = icmp ne i32 %conv453, 0, !dbg !10696
  br i1 %tobool454, label %land.lhs.true455, label %if.then457, !dbg !10696

land.lhs.true455:                                 ; preds = %cond.end449
  %147 = load i32, i32* @flag_signed_zeros, align 4, !dbg !10696
  %tobool456 = icmp ne i32 %147, 0, !dbg !10696
  br i1 %tobool456, label %if.end462, label %if.then457, !dbg !10698

if.then457:                                       ; preds = %land.lhs.true455, %cond.end449, %cond.end115
  %148 = load i32, i32* %loc.addr, align 4, !dbg !10699
  %149 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10699
  %150 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10699
  %151 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10699
  %common458 = bitcast %union.tree_node* %151 to %struct.tree_common*, !dbg !10699
  %type459 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common458, i32 0, i32 2, !dbg !10699
  %152 = load %union.tree_node*, %union.tree_node** %type459, align 8, !dbg !10699
  %call460 = call %union.tree_node* @build_real(%union.tree_node* %152, %struct.real_value* byval(%struct.real_value) align 8 @dconst0), !dbg !10699
  %call461 = call %union.tree_node* @fold_build2_stat_loc(i32 %148, i32 97, %union.tree_node* %149, %union.tree_node* %150, %union.tree_node* %call460), !dbg !10699
  store %union.tree_node* %call461, %union.tree_node** %retval, align 8, !dbg !10700
  br label %return, !dbg !10700

if.end462:                                        ; preds = %land.lhs.true455
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10701
  br label %return, !dbg !10701

return:                                           ; preds = %if.end462, %if.then457, %if.then13, %cond.end, %if.then
  %153 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10702
  ret %union.tree_node* %153, !dbg !10702
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_significand(i32 %loc, %union.tree_node* %arg, %union.tree_node* %rettype) #0 !dbg !10703 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %rettype.addr = alloca %union.tree_node*, align 8
  %value = alloca %struct.real_value*, align 8
  %result = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10704, metadata !DIExpression()), !dbg !10705
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10706, metadata !DIExpression()), !dbg !10707
  store %union.tree_node* %rettype, %union.tree_node** %rettype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rettype.addr, metadata !10708, metadata !DIExpression()), !dbg !10709
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10710
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10712
  %tobool = icmp ne i8 %call, 0, !dbg !10712
  br i1 %tobool, label %if.end, label %if.then, !dbg !10713

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10714
  br label %return, !dbg !10714

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10715
  %call1 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %1), !dbg !10715
  store %union.tree_node* %call1, %union.tree_node** %arg.addr, align 8, !dbg !10715
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10716
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10716
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10716
  %bf.load = load i64, i64* %3, align 8, !dbg !10716
  %bf.clear = and i64 %bf.load, 65535, !dbg !10716
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10716
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10718
  br i1 %cmp, label %land.lhs.true, label %if.end86, !dbg !10719

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10720
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10720
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10720
  %bf.load3 = load i64, i64* %5, align 8, !dbg !10720
  %bf.lshr = lshr i64 %bf.load3, 27, !dbg !10720
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !10720
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10720
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !10720
  br i1 %tobool6, label %if.end86, label %if.then7, !dbg !10721

if.then7:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value** %value, metadata !10722, metadata !DIExpression()), !dbg !10726
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10727
  %real_cst = bitcast %union.tree_node* %6 to %struct.tree_real_cst*, !dbg !10727
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10727
  %7 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10727
  store %struct.real_value* %7, %struct.real_value** %value, align 8, !dbg !10726
  %8 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !10728
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !10729
  %bf.load8 = load i32, i32* %9, align 8, !dbg !10729
  %bf.clear9 = and i32 %bf.load8, 3, !dbg !10729
  switch i32 %bf.clear9, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb11
  ], !dbg !10730

sw.bb:                                            ; preds = %if.then7, %if.then7, %if.then7
  %10 = load i32, i32* %loc.addr, align 4, !dbg !10731
  %11 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !10733
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10734
  %call10 = call %union.tree_node* @fold_convert_loc(i32 %10, %union.tree_node* %11, %union.tree_node* %12), !dbg !10735
  store %union.tree_node* %call10, %union.tree_node** %retval, align 8, !dbg !10736
  br label %return, !dbg !10736

sw.bb11:                                          ; preds = %if.then7
  %13 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !10737
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10737
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10737
  %base12 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !10737
  %15 = bitcast %struct.tree_base* %base12 to i64*, !dbg !10737
  %bf.load13 = load i64, i64* %15, align 8, !dbg !10737
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !10737
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !10737
  %cmp16 = icmp eq i32 %bf.cast15, 14, !dbg !10737
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !10737

cond.true:                                        ; preds = %sw.bb11
  %16 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common17 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !10737
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !10737
  %17 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !10737
  %call19 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !10737
  br label %cond.end, !dbg !10737

cond.false:                                       ; preds = %sw.bb11
  %18 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common20 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !10737
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !10737
  %19 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !10737
  %type22 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !10737
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6, !dbg !10737
  %bf.load23 = load i32, i32* %mode, align 4, !dbg !10737
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !10737
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !10737
  br label %cond.end, !dbg !10737

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call19, %cond.true ], [ %bf.clear25, %cond.false ], !dbg !10737
  %idxprom = zext i32 %cond to i64, !dbg !10737
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10737
  %20 = load i8, i8* %arrayidx, align 1, !dbg !10737
  %conv = zext i8 %20 to i32, !dbg !10737
  %cmp26 = icmp eq i32 %conv, 9, !dbg !10737
  br i1 %cmp26, label %cond.true28, label %cond.false51, !dbg !10737

cond.true28:                                      ; preds = %cond.end
  %21 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common29 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !10737
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !10737
  %22 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !10737
  %base31 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10737
  %23 = bitcast %struct.tree_base* %base31 to i64*, !dbg !10737
  %bf.load32 = load i64, i64* %23, align 8, !dbg !10737
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !10737
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !10737
  %cmp35 = icmp eq i32 %bf.cast34, 14, !dbg !10737
  br i1 %cmp35, label %cond.true37, label %cond.false41, !dbg !10737

cond.true37:                                      ; preds = %cond.true28
  %24 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common38 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !10737
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !10737
  %25 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !10737
  %call40 = call i32 @vector_type_mode(%union.tree_node* %25), !dbg !10737
  br label %cond.end49, !dbg !10737

cond.false41:                                     ; preds = %cond.true28
  %26 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common42 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10737
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !10737
  %27 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !10737
  %type44 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !10737
  %mode45 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 6, !dbg !10737
  %bf.load46 = load i32, i32* %mode45, align 4, !dbg !10737
  %bf.lshr47 = lshr i32 %bf.load46, 16, !dbg !10737
  %bf.clear48 = and i32 %bf.lshr47, 255, !dbg !10737
  br label %cond.end49, !dbg !10737

cond.end49:                                       ; preds = %cond.false41, %cond.true37
  %cond50 = phi i32 [ %call40, %cond.true37 ], [ %bf.clear48, %cond.false41 ], !dbg !10737
  %sub = sub i32 %cond50, 42, !dbg !10737
  %add = add i32 %sub, 4, !dbg !10737
  br label %cond.end75, !dbg !10737

cond.false51:                                     ; preds = %cond.end
  %28 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common52 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !10737
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !10737
  %29 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !10737
  %base54 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !10737
  %30 = bitcast %struct.tree_base* %base54 to i64*, !dbg !10737
  %bf.load55 = load i64, i64* %30, align 8, !dbg !10737
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !10737
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !10737
  %cmp58 = icmp eq i32 %bf.cast57, 14, !dbg !10737
  br i1 %cmp58, label %cond.true60, label %cond.false64, !dbg !10737

cond.true60:                                      ; preds = %cond.false51
  %31 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common61 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !10737
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !10737
  %32 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !10737
  %call63 = call i32 @vector_type_mode(%union.tree_node* %32), !dbg !10737
  br label %cond.end72, !dbg !10737

cond.false64:                                     ; preds = %cond.false51
  %33 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10737
  %common65 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !10737
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !10737
  %34 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !10737
  %type67 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !10737
  %mode68 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 6, !dbg !10737
  %bf.load69 = load i32, i32* %mode68, align 4, !dbg !10737
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !10737
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !10737
  br label %cond.end72, !dbg !10737

cond.end72:                                       ; preds = %cond.false64, %cond.true60
  %cond73 = phi i32 [ %call63, %cond.true60 ], [ %bf.clear71, %cond.false64 ], !dbg !10737
  %sub74 = sub i32 %cond73, 38, !dbg !10737
  br label %cond.end75, !dbg !10737

cond.end75:                                       ; preds = %cond.end72, %cond.end49
  %cond76 = phi i32 [ %add, %cond.end49 ], [ %sub74, %cond.end72 ], !dbg !10737
  %idxprom77 = zext i32 %cond76 to i64, !dbg !10737
  %arrayidx78 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom77, !dbg !10737
  %35 = load %struct.real_format*, %struct.real_format** %arrayidx78, align 8, !dbg !10737
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %35, i32 0, i32 2, !dbg !10739
  %36 = load i32, i32* %b, align 8, !dbg !10739
  %cmp79 = icmp eq i32 %36, 2, !dbg !10740
  br i1 %cmp79, label %if.then81, label %if.end85, !dbg !10741

if.then81:                                        ; preds = %cond.end75
  call void @llvm.dbg.declare(metadata %struct.real_value* %result, metadata !10742, metadata !DIExpression()), !dbg !10744
  %37 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !10745
  %38 = bitcast %struct.real_value* %result to i8*, !dbg !10746
  %39 = bitcast %struct.real_value* %37 to i8*, !dbg !10746
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 32, i1 false), !dbg !10746
  %40 = bitcast %struct.real_value* %result to i32*, !dbg !10747
  %bf.load82 = load i32, i32* %40, align 8, !dbg !10747
  %bf.clear83 = and i32 %bf.load82, 63, !dbg !10747
  %bf.set = or i32 %bf.clear83, 64, !dbg !10747
  store i32 %bf.set, i32* %40, align 8, !dbg !10747
  %41 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !10748
  %call84 = call %union.tree_node* @build_real(%union.tree_node* %41, %struct.real_value* byval(%struct.real_value) align 8 %result), !dbg !10749
  store %union.tree_node* %call84, %union.tree_node** %retval, align 8, !dbg !10750
  br label %return, !dbg !10750

if.end85:                                         ; preds = %cond.end75
  br label %sw.epilog, !dbg !10751

sw.epilog:                                        ; preds = %if.then7, %if.end85
  br label %if.end86, !dbg !10752

if.end86:                                         ; preds = %sw.epilog, %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10753
  br label %return, !dbg !10753

return:                                           ; preds = %if.end86, %if.then81, %sw.bb, %if.then
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10754
  ret %union.tree_node* %42, !dbg !10754
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_logb(i32 %loc, %union.tree_node* %arg, %union.tree_node* %rettype) #0 !dbg !10755 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %rettype.addr = alloca %union.tree_node*, align 8
  %value = alloca %struct.real_value*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10756, metadata !DIExpression()), !dbg !10757
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10758, metadata !DIExpression()), !dbg !10759
  store %union.tree_node* %rettype, %union.tree_node** %rettype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rettype.addr, metadata !10760, metadata !DIExpression()), !dbg !10761
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10762
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !10764
  %tobool = icmp ne i8 %call, 0, !dbg !10764
  br i1 %tobool, label %if.end, label %if.then, !dbg !10765

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10766
  br label %return, !dbg !10766

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10767
  %call1 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %1), !dbg !10767
  store %union.tree_node* %call1, %union.tree_node** %arg.addr, align 8, !dbg !10767
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10768
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10768
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10768
  %bf.load = load i64, i64* %3, align 8, !dbg !10768
  %bf.clear = and i64 %bf.load, 65535, !dbg !10768
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10768
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !10770
  br i1 %cmp, label %land.lhs.true, label %if.end98, !dbg !10771

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10772
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10772
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10772
  %bf.load3 = load i64, i64* %5, align 8, !dbg !10772
  %bf.lshr = lshr i64 %bf.load3, 27, !dbg !10772
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !10772
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10772
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !10772
  br i1 %tobool6, label %if.end98, label %if.then7, !dbg !10773

if.then7:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value** %value, metadata !10774, metadata !DIExpression()), !dbg !10776
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10777
  %real_cst = bitcast %union.tree_node* %6 to %struct.tree_real_cst*, !dbg !10777
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10777
  %7 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10777
  store %struct.real_value* %7, %struct.real_value** %value, align 8, !dbg !10776
  %8 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !10778
  %9 = bitcast %struct.real_value* %8 to i32*, !dbg !10779
  %bf.load8 = load i32, i32* %9, align 8, !dbg !10779
  %bf.clear9 = and i32 %bf.load8, 3, !dbg !10779
  switch i32 %bf.clear9, label %sw.epilog [
    i32 3, label %sw.bb
    i32 2, label %sw.bb
    i32 0, label %sw.bb18
    i32 1, label %sw.bb19
  ], !dbg !10780

sw.bb:                                            ; preds = %if.then7, %if.then7
  %10 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !10781
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10781
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10781
  %bf.load11 = load i64, i64* %11, align 8, !dbg !10781
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10781
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10781
  %cmp14 = icmp eq i32 %bf.cast13, 9, !dbg !10784
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !10785

if.then15:                                        ; preds = %sw.bb
  %12 = load i32, i32* %loc.addr, align 4, !dbg !10786
  %13 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !10787
  %14 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10788
  %call16 = call %union.tree_node* @fold_convert_loc(i32 %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !10789
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !10790
  br label %return, !dbg !10790

if.end17:                                         ; preds = %sw.bb
  br label %sw.bb18, !dbg !10791

sw.bb18:                                          ; preds = %if.then7, %if.end17
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10792
  br label %return, !dbg !10792

sw.bb19:                                          ; preds = %if.then7
  %15 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !10793
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10793
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10793
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !10793
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !10793
  %bf.load21 = load i64, i64* %17, align 8, !dbg !10793
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !10793
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !10793
  %cmp24 = icmp eq i32 %bf.cast23, 14, !dbg !10793
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !10793

cond.true:                                        ; preds = %sw.bb19
  %18 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common25 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !10793
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !10793
  %19 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !10793
  %call27 = call i32 @vector_type_mode(%union.tree_node* %19), !dbg !10793
  br label %cond.end, !dbg !10793

cond.false:                                       ; preds = %sw.bb19
  %20 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common28 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !10793
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !10793
  %21 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !10793
  %type30 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !10793
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 6, !dbg !10793
  %bf.load31 = load i32, i32* %mode, align 4, !dbg !10793
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !10793
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !10793
  br label %cond.end, !dbg !10793

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call27, %cond.true ], [ %bf.clear33, %cond.false ], !dbg !10793
  %idxprom = zext i32 %cond to i64, !dbg !10793
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10793
  %22 = load i8, i8* %arrayidx, align 1, !dbg !10793
  %conv = zext i8 %22 to i32, !dbg !10793
  %cmp34 = icmp eq i32 %conv, 9, !dbg !10793
  br i1 %cmp34, label %cond.true36, label %cond.false59, !dbg !10793

cond.true36:                                      ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common37 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !10793
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !10793
  %24 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !10793
  %base39 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !10793
  %25 = bitcast %struct.tree_base* %base39 to i64*, !dbg !10793
  %bf.load40 = load i64, i64* %25, align 8, !dbg !10793
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !10793
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !10793
  %cmp43 = icmp eq i32 %bf.cast42, 14, !dbg !10793
  br i1 %cmp43, label %cond.true45, label %cond.false49, !dbg !10793

cond.true45:                                      ; preds = %cond.true36
  %26 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common46 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10793
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !10793
  %27 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !10793
  %call48 = call i32 @vector_type_mode(%union.tree_node* %27), !dbg !10793
  br label %cond.end57, !dbg !10793

cond.false49:                                     ; preds = %cond.true36
  %28 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common50 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !10793
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !10793
  %29 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !10793
  %type52 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !10793
  %mode53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 6, !dbg !10793
  %bf.load54 = load i32, i32* %mode53, align 4, !dbg !10793
  %bf.lshr55 = lshr i32 %bf.load54, 16, !dbg !10793
  %bf.clear56 = and i32 %bf.lshr55, 255, !dbg !10793
  br label %cond.end57, !dbg !10793

cond.end57:                                       ; preds = %cond.false49, %cond.true45
  %cond58 = phi i32 [ %call48, %cond.true45 ], [ %bf.clear56, %cond.false49 ], !dbg !10793
  %sub = sub i32 %cond58, 42, !dbg !10793
  %add = add i32 %sub, 4, !dbg !10793
  br label %cond.end83, !dbg !10793

cond.false59:                                     ; preds = %cond.end
  %30 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common60 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !10793
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !10793
  %31 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !10793
  %base62 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !10793
  %32 = bitcast %struct.tree_base* %base62 to i64*, !dbg !10793
  %bf.load63 = load i64, i64* %32, align 8, !dbg !10793
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !10793
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !10793
  %cmp66 = icmp eq i32 %bf.cast65, 14, !dbg !10793
  br i1 %cmp66, label %cond.true68, label %cond.false72, !dbg !10793

cond.true68:                                      ; preds = %cond.false59
  %33 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common69 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !10793
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !10793
  %34 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !10793
  %call71 = call i32 @vector_type_mode(%union.tree_node* %34), !dbg !10793
  br label %cond.end80, !dbg !10793

cond.false72:                                     ; preds = %cond.false59
  %35 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10793
  %common73 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !10793
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !10793
  %36 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !10793
  %type75 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !10793
  %mode76 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type75, i32 0, i32 6, !dbg !10793
  %bf.load77 = load i32, i32* %mode76, align 4, !dbg !10793
  %bf.lshr78 = lshr i32 %bf.load77, 16, !dbg !10793
  %bf.clear79 = and i32 %bf.lshr78, 255, !dbg !10793
  br label %cond.end80, !dbg !10793

cond.end80:                                       ; preds = %cond.false72, %cond.true68
  %cond81 = phi i32 [ %call71, %cond.true68 ], [ %bf.clear79, %cond.false72 ], !dbg !10793
  %sub82 = sub i32 %cond81, 38, !dbg !10793
  br label %cond.end83, !dbg !10793

cond.end83:                                       ; preds = %cond.end80, %cond.end57
  %cond84 = phi i32 [ %add, %cond.end57 ], [ %sub82, %cond.end80 ], !dbg !10793
  %idxprom85 = zext i32 %cond84 to i64, !dbg !10793
  %arrayidx86 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom85, !dbg !10793
  %37 = load %struct.real_format*, %struct.real_format** %arrayidx86, align 8, !dbg !10793
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %37, i32 0, i32 2, !dbg !10795
  %38 = load i32, i32* %b, align 8, !dbg !10795
  %cmp87 = icmp eq i32 %38, 2, !dbg !10796
  br i1 %cmp87, label %if.then89, label %if.end97, !dbg !10797

if.then89:                                        ; preds = %cond.end83
  %39 = load i32, i32* %loc.addr, align 4, !dbg !10798
  %40 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !10799
  %41 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !10800
  %42 = bitcast %struct.real_value* %41 to i32*, !dbg !10800
  %bf.load90 = load i32, i32* %42, align 8, !dbg !10800
  %bf.lshr91 = lshr i32 %bf.load90, 6, !dbg !10800
  %xor = xor i32 %bf.lshr91, 33554432, !dbg !10800
  %sub92 = sub nsw i32 %xor, 33554432, !dbg !10800
  %sub93 = sub nsw i32 %sub92, 1, !dbg !10801
  %conv94 = sext i32 %sub93 to i64, !dbg !10800
  %call95 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv94), !dbg !10802
  %call96 = call %union.tree_node* @fold_convert_loc(i32 %39, %union.tree_node* %40, %union.tree_node* %call95), !dbg !10803
  store %union.tree_node* %call96, %union.tree_node** %retval, align 8, !dbg !10804
  br label %return, !dbg !10804

if.end97:                                         ; preds = %cond.end83
  br label %sw.epilog, !dbg !10805

sw.epilog:                                        ; preds = %if.then7, %if.end97
  br label %if.end98, !dbg !10806

if.end98:                                         ; preds = %sw.epilog, %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10807
  br label %return, !dbg !10807

return:                                           ; preds = %if.end98, %if.then89, %sw.bb18, %if.then15, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10808
  ret %union.tree_node* %43, !dbg !10808
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_isascii(i32 %loc, %union.tree_node* %arg) #0 !dbg !10809 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10812, metadata !DIExpression()), !dbg !10813
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10814, metadata !DIExpression()), !dbg !10815
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10816
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !10818
  %tobool = icmp ne i8 %call, 0, !dbg !10818
  br i1 %tobool, label %if.else, label %if.then, !dbg !10819

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10820
  br label %return, !dbg !10820

if.else:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10821
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10821
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 -128), !dbg !10821
  %call2 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %call1), !dbg !10821
  store %union.tree_node* %call2, %union.tree_node** %arg.addr, align 8, !dbg !10823
  %3 = load i32, i32* %loc.addr, align 4, !dbg !10824
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10824
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10824
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10824
  %call3 = call %union.tree_node* @fold_build2_stat_loc(i32 %3, i32 101, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !10824
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !10825
  br label %return, !dbg !10825

return:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10826
  ret %union.tree_node* %7, !dbg !10826
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_toascii(i32 %loc, %union.tree_node* %arg) #0 !dbg !10827 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10828, metadata !DIExpression()), !dbg !10829
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10830, metadata !DIExpression()), !dbg !10831
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10832
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !10834
  %tobool = icmp ne i8 %call, 0, !dbg !10834
  br i1 %tobool, label %if.end, label %if.then, !dbg !10835

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10836
  br label %return, !dbg !10836

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %loc.addr, align 4, !dbg !10837
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10837
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10837
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 127), !dbg !10837
  %call2 = call %union.tree_node* @fold_build2_stat_loc(i32 %1, i32 89, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %call1), !dbg !10837
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !10838
  br label %return, !dbg !10838

return:                                           ; preds = %if.end, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10839
  ret %union.tree_node* %4, !dbg !10839
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_isdigit(i32 %loc, %union.tree_node* %arg) #0 !dbg !10840 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %target_digit0 = alloca i64, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10841, metadata !DIExpression()), !dbg !10842
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10843, metadata !DIExpression()), !dbg !10844
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10845
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 8), !dbg !10847
  %tobool = icmp ne i8 %call, 0, !dbg !10847
  br i1 %tobool, label %if.else, label %if.then, !dbg !10848

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10849
  br label %return, !dbg !10849

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %target_digit0, metadata !10850, metadata !DIExpression()), !dbg !10852
  %1 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 26), align 8, !dbg !10853
  %call1 = call i64 %1(i64 48), !dbg !10854
  store i64 %call1, i64* %target_digit0, align 8, !dbg !10852
  %2 = load i64, i64* %target_digit0, align 8, !dbg !10855
  %cmp = icmp eq i64 %2, 0, !dbg !10857
  br i1 %cmp, label %if.then2, label %if.end, !dbg !10858

if.then2:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10859
  br label %return, !dbg !10859

if.end:                                           ; preds = %if.else
  %3 = load i32, i32* %loc.addr, align 4, !dbg !10860
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !10861
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10862
  %call3 = call %union.tree_node* @fold_convert_loc(i32 %3, %union.tree_node* %4, %union.tree_node* %5), !dbg !10863
  store %union.tree_node* %call3, %union.tree_node** %arg.addr, align 8, !dbg !10864
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !10865
  %7 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10865
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !10865
  %9 = load i64, i64* %target_digit0, align 8, !dbg !10865
  %call4 = call %union.tree_node* @build_int_cst(%union.tree_node* %8, i64 %9), !dbg !10865
  %call5 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %call4), !dbg !10865
  store %union.tree_node* %call5, %union.tree_node** %arg.addr, align 8, !dbg !10866
  %10 = load i32, i32* %loc.addr, align 4, !dbg !10867
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10867
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10867
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !10867
  %call6 = call %union.tree_node* @build_int_cst(%union.tree_node* %13, i64 9), !dbg !10867
  %call7 = call %union.tree_node* @fold_build2_stat_loc(i32 %10, i32 98, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %call6), !dbg !10867
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !10868
  br label %return, !dbg !10868

return:                                           ; preds = %if.end, %if.then2, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10869
  ret %union.tree_node* %14, !dbg !10869
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_classify(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg, i32 %builtin_index) #0 !dbg !10870 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %builtin_index.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  %signbit_fn = alloca %union.tree_node*, align 8
  %isinf_fn = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %signbit_call = alloca %union.tree_node*, align 8
  %isinf_call = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !10873, metadata !DIExpression()), !dbg !10874
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10875, metadata !DIExpression()), !dbg !10876
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10877, metadata !DIExpression()), !dbg !10878
  store i32 %builtin_index, i32* %builtin_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %builtin_index.addr, metadata !10879, metadata !DIExpression()), !dbg !10880
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10881, metadata !DIExpression()), !dbg !10882
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10883
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !10883
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10883
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !10883
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !10883
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !10883
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !10883
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !10882
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !10884, metadata !DIExpression()), !dbg !10885
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10886
  %call = call zeroext i8 @validate_arg(%union.tree_node* %3, i32 9), !dbg !10888
  %tobool = icmp ne i8 %call, 0, !dbg !10888
  br i1 %tobool, label %if.end, label %if.then, !dbg !10889

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10890
  br label %return, !dbg !10890

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %builtin_index.addr, align 4, !dbg !10891
  switch i32 %4, label %sw.default [
    i32 469, label %sw.bb
    i32 468, label %sw.bb454
    i32 467, label %sw.bb470
    i32 475, label %sw.bb1389
  ], !dbg !10892

sw.bb:                                            ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10893
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !10893
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !10893
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10893
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !10893
  %bf.load = load i64, i64* %7, align 8, !dbg !10893
  %bf.clear = and i64 %bf.load, 65535, !dbg !10893
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10893
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !10893
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10893

cond.true:                                        ; preds = %sw.bb
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common6 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !10893
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !10893
  %9 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10893
  %call8 = call i32 @vector_type_mode(%union.tree_node* %9), !dbg !10893
  br label %cond.end, !dbg !10893

cond.false:                                       ; preds = %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10893
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !10893
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !10893
  %type11 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !10893
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !10893
  %bf.load12 = load i32, i32* %mode, align 4, !dbg !10893
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !10893
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !10893
  br label %cond.end, !dbg !10893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call8, %cond.true ], [ %bf.clear13, %cond.false ], !dbg !10893
  %idxprom = zext i32 %cond to i64, !dbg !10893
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10893
  %12 = load i8, i8* %arrayidx, align 1, !dbg !10893
  %conv = zext i8 %12 to i32, !dbg !10893
  %cmp14 = icmp eq i32 %conv, 8, !dbg !10893
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false, !dbg !10893

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common16 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !10893
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !10893
  %14 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !10893
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !10893
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !10893
  %bf.load19 = load i64, i64* %15, align 8, !dbg !10893
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !10893
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !10893
  %cmp22 = icmp eq i32 %bf.cast21, 14, !dbg !10893
  br i1 %cmp22, label %cond.true24, label %cond.false28, !dbg !10893

cond.true24:                                      ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common25 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !10893
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !10893
  %17 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !10893
  %call27 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !10893
  br label %cond.end36, !dbg !10893

cond.false28:                                     ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !10893
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !10893
  %19 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !10893
  %type31 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !10893
  %mode32 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 6, !dbg !10893
  %bf.load33 = load i32, i32* %mode32, align 4, !dbg !10893
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !10893
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !10893
  br label %cond.end36, !dbg !10893

cond.end36:                                       ; preds = %cond.false28, %cond.true24
  %cond37 = phi i32 [ %call27, %cond.true24 ], [ %bf.clear35, %cond.false28 ], !dbg !10893
  %idxprom38 = zext i32 %cond37 to i64, !dbg !10893
  %arrayidx39 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom38, !dbg !10893
  %20 = load i8, i8* %arrayidx39, align 1, !dbg !10893
  %conv40 = zext i8 %20 to i32, !dbg !10893
  %cmp41 = icmp eq i32 %conv40, 9, !dbg !10893
  br i1 %cmp41, label %land.lhs.true, label %lor.lhs.false43, !dbg !10893

lor.lhs.false43:                                  ; preds = %cond.end36
  %21 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common44 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !10893
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !10893
  %22 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !10893
  %base46 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10893
  %23 = bitcast %struct.tree_base* %base46 to i64*, !dbg !10893
  %bf.load47 = load i64, i64* %23, align 8, !dbg !10893
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !10893
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !10893
  %cmp50 = icmp eq i32 %bf.cast49, 14, !dbg !10893
  br i1 %cmp50, label %cond.true52, label %cond.false56, !dbg !10893

cond.true52:                                      ; preds = %lor.lhs.false43
  %24 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common53 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !10893
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !10893
  %25 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !10893
  %call55 = call i32 @vector_type_mode(%union.tree_node* %25), !dbg !10893
  br label %cond.end64, !dbg !10893

cond.false56:                                     ; preds = %lor.lhs.false43
  %26 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common57 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10893
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !10893
  %27 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !10893
  %type59 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !10893
  %mode60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 6, !dbg !10893
  %bf.load61 = load i32, i32* %mode60, align 4, !dbg !10893
  %bf.lshr62 = lshr i32 %bf.load61, 16, !dbg !10893
  %bf.clear63 = and i32 %bf.lshr62, 255, !dbg !10893
  br label %cond.end64, !dbg !10893

cond.end64:                                       ; preds = %cond.false56, %cond.true52
  %cond65 = phi i32 [ %call55, %cond.true52 ], [ %bf.clear63, %cond.false56 ], !dbg !10893
  %idxprom66 = zext i32 %cond65 to i64, !dbg !10893
  %arrayidx67 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom66, !dbg !10893
  %28 = load i8, i8* %arrayidx67, align 1, !dbg !10893
  %conv68 = zext i8 %28 to i32, !dbg !10893
  %cmp69 = icmp eq i32 %conv68, 11, !dbg !10893
  br i1 %cmp69, label %land.lhs.true, label %lor.lhs.false71, !dbg !10893

lor.lhs.false71:                                  ; preds = %cond.end64
  %29 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common72 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !10893
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !10893
  %30 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !10893
  %base74 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !10893
  %31 = bitcast %struct.tree_base* %base74 to i64*, !dbg !10893
  %bf.load75 = load i64, i64* %31, align 8, !dbg !10893
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !10893
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !10893
  %cmp78 = icmp eq i32 %bf.cast77, 14, !dbg !10893
  br i1 %cmp78, label %cond.true80, label %cond.false84, !dbg !10893

cond.true80:                                      ; preds = %lor.lhs.false71
  %32 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common81 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !10893
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !10893
  %33 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !10893
  %call83 = call i32 @vector_type_mode(%union.tree_node* %33), !dbg !10893
  br label %cond.end92, !dbg !10893

cond.false84:                                     ; preds = %lor.lhs.false71
  %34 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common85 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !10893
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !10893
  %35 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !10893
  %type87 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !10893
  %mode88 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 6, !dbg !10893
  %bf.load89 = load i32, i32* %mode88, align 4, !dbg !10893
  %bf.lshr90 = lshr i32 %bf.load89, 16, !dbg !10893
  %bf.clear91 = and i32 %bf.lshr90, 255, !dbg !10893
  br label %cond.end92, !dbg !10893

cond.end92:                                       ; preds = %cond.false84, %cond.true80
  %cond93 = phi i32 [ %call83, %cond.true80 ], [ %bf.clear91, %cond.false84 ], !dbg !10893
  %idxprom94 = zext i32 %cond93 to i64, !dbg !10893
  %arrayidx95 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom94, !dbg !10893
  %36 = load i8, i8* %arrayidx95, align 1, !dbg !10893
  %conv96 = zext i8 %36 to i32, !dbg !10893
  %cmp97 = icmp eq i32 %conv96, 17, !dbg !10893
  br i1 %cmp97, label %land.lhs.true, label %if.then433, !dbg !10893

land.lhs.true:                                    ; preds = %cond.end92, %cond.end64, %cond.end36, %cond.end
  %37 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common99 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !10893
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !10893
  %38 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !10893
  %base101 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !10893
  %39 = bitcast %struct.tree_base* %base101 to i64*, !dbg !10893
  %bf.load102 = load i64, i64* %39, align 8, !dbg !10893
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !10893
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !10893
  %cmp105 = icmp eq i32 %bf.cast104, 14, !dbg !10893
  br i1 %cmp105, label %cond.true107, label %cond.false111, !dbg !10893

cond.true107:                                     ; preds = %land.lhs.true
  %40 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common108 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !10893
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !10893
  %41 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !10893
  %call110 = call i32 @vector_type_mode(%union.tree_node* %41), !dbg !10893
  br label %cond.end119, !dbg !10893

cond.false111:                                    ; preds = %land.lhs.true
  %42 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common112 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !10893
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !10893
  %43 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !10893
  %type114 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !10893
  %mode115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 6, !dbg !10893
  %bf.load116 = load i32, i32* %mode115, align 4, !dbg !10893
  %bf.lshr117 = lshr i32 %bf.load116, 16, !dbg !10893
  %bf.clear118 = and i32 %bf.lshr117, 255, !dbg !10893
  br label %cond.end119, !dbg !10893

cond.end119:                                      ; preds = %cond.false111, %cond.true107
  %cond120 = phi i32 [ %call110, %cond.true107 ], [ %bf.clear118, %cond.false111 ], !dbg !10893
  %idxprom121 = zext i32 %cond120 to i64, !dbg !10893
  %arrayidx122 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom121, !dbg !10893
  %44 = load i8, i8* %arrayidx122, align 1, !dbg !10893
  %conv123 = zext i8 %44 to i32, !dbg !10893
  %cmp124 = icmp eq i32 %conv123, 8, !dbg !10893
  br i1 %cmp124, label %cond.true154, label %lor.lhs.false126, !dbg !10893

lor.lhs.false126:                                 ; preds = %cond.end119
  %45 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common127 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !10893
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !10893
  %46 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !10893
  %base129 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !10893
  %47 = bitcast %struct.tree_base* %base129 to i64*, !dbg !10893
  %bf.load130 = load i64, i64* %47, align 8, !dbg !10893
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !10893
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !10893
  %cmp133 = icmp eq i32 %bf.cast132, 14, !dbg !10893
  br i1 %cmp133, label %cond.true135, label %cond.false139, !dbg !10893

cond.true135:                                     ; preds = %lor.lhs.false126
  %48 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common136 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !10893
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !10893
  %49 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !10893
  %call138 = call i32 @vector_type_mode(%union.tree_node* %49), !dbg !10893
  br label %cond.end147, !dbg !10893

cond.false139:                                    ; preds = %lor.lhs.false126
  %50 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common140 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !10893
  %type141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2, !dbg !10893
  %51 = load %union.tree_node*, %union.tree_node** %type141, align 8, !dbg !10893
  %type142 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !10893
  %mode143 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 6, !dbg !10893
  %bf.load144 = load i32, i32* %mode143, align 4, !dbg !10893
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !10893
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !10893
  br label %cond.end147, !dbg !10893

cond.end147:                                      ; preds = %cond.false139, %cond.true135
  %cond148 = phi i32 [ %call138, %cond.true135 ], [ %bf.clear146, %cond.false139 ], !dbg !10893
  %idxprom149 = zext i32 %cond148 to i64, !dbg !10893
  %arrayidx150 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom149, !dbg !10893
  %52 = load i8, i8* %arrayidx150, align 1, !dbg !10893
  %conv151 = zext i8 %52 to i32, !dbg !10893
  %cmp152 = icmp eq i32 %conv151, 9, !dbg !10893
  br i1 %cmp152, label %cond.true154, label %cond.false177, !dbg !10893

cond.true154:                                     ; preds = %cond.end147, %cond.end119
  %53 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common155 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !10893
  %type156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common155, i32 0, i32 2, !dbg !10893
  %54 = load %union.tree_node*, %union.tree_node** %type156, align 8, !dbg !10893
  %base157 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !10893
  %55 = bitcast %struct.tree_base* %base157 to i64*, !dbg !10893
  %bf.load158 = load i64, i64* %55, align 8, !dbg !10893
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !10893
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !10893
  %cmp161 = icmp eq i32 %bf.cast160, 14, !dbg !10893
  br i1 %cmp161, label %cond.true163, label %cond.false167, !dbg !10893

cond.true163:                                     ; preds = %cond.true154
  %56 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common164 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !10893
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2, !dbg !10893
  %57 = load %union.tree_node*, %union.tree_node** %type165, align 8, !dbg !10893
  %call166 = call i32 @vector_type_mode(%union.tree_node* %57), !dbg !10893
  br label %cond.end175, !dbg !10893

cond.false167:                                    ; preds = %cond.true154
  %58 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common168 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !10893
  %type169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2, !dbg !10893
  %59 = load %union.tree_node*, %union.tree_node** %type169, align 8, !dbg !10893
  %type170 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !10893
  %mode171 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type170, i32 0, i32 6, !dbg !10893
  %bf.load172 = load i32, i32* %mode171, align 4, !dbg !10893
  %bf.lshr173 = lshr i32 %bf.load172, 16, !dbg !10893
  %bf.clear174 = and i32 %bf.lshr173, 255, !dbg !10893
  br label %cond.end175, !dbg !10893

cond.end175:                                      ; preds = %cond.false167, %cond.true163
  %cond176 = phi i32 [ %call166, %cond.true163 ], [ %bf.clear174, %cond.false167 ], !dbg !10893
  br label %cond.end203, !dbg !10893

cond.false177:                                    ; preds = %cond.end147
  %60 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common178 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !10893
  %type179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 2, !dbg !10893
  %61 = load %union.tree_node*, %union.tree_node** %type179, align 8, !dbg !10893
  %base180 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !10893
  %62 = bitcast %struct.tree_base* %base180 to i64*, !dbg !10893
  %bf.load181 = load i64, i64* %62, align 8, !dbg !10893
  %bf.clear182 = and i64 %bf.load181, 65535, !dbg !10893
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !10893
  %cmp184 = icmp eq i32 %bf.cast183, 14, !dbg !10893
  br i1 %cmp184, label %cond.true186, label %cond.false190, !dbg !10893

cond.true186:                                     ; preds = %cond.false177
  %63 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common187 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !10893
  %type188 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common187, i32 0, i32 2, !dbg !10893
  %64 = load %union.tree_node*, %union.tree_node** %type188, align 8, !dbg !10893
  %call189 = call i32 @vector_type_mode(%union.tree_node* %64), !dbg !10893
  br label %cond.end198, !dbg !10893

cond.false190:                                    ; preds = %cond.false177
  %65 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common191 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !10893
  %type192 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 2, !dbg !10893
  %66 = load %union.tree_node*, %union.tree_node** %type192, align 8, !dbg !10893
  %type193 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !10893
  %mode194 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type193, i32 0, i32 6, !dbg !10893
  %bf.load195 = load i32, i32* %mode194, align 4, !dbg !10893
  %bf.lshr196 = lshr i32 %bf.load195, 16, !dbg !10893
  %bf.clear197 = and i32 %bf.lshr196, 255, !dbg !10893
  br label %cond.end198, !dbg !10893

cond.end198:                                      ; preds = %cond.false190, %cond.true186
  %cond199 = phi i32 [ %call189, %cond.true186 ], [ %bf.clear197, %cond.false190 ], !dbg !10893
  %idxprom200 = zext i32 %cond199 to i64, !dbg !10893
  %arrayidx201 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom200, !dbg !10893
  %67 = load i8, i8* %arrayidx201, align 1, !dbg !10893
  %conv202 = zext i8 %67 to i32, !dbg !10893
  br label %cond.end203, !dbg !10893

cond.end203:                                      ; preds = %cond.end198, %cond.end175
  %cond204 = phi i32 [ %cond176, %cond.end175 ], [ %conv202, %cond.end198 ], !dbg !10893
  %idxprom205 = zext i32 %cond204 to i64, !dbg !10893
  %arrayidx206 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom205, !dbg !10893
  %68 = load i8, i8* %arrayidx206, align 1, !dbg !10893
  %conv207 = zext i8 %68 to i32, !dbg !10893
  %cmp208 = icmp eq i32 %conv207, 9, !dbg !10893
  br i1 %cmp208, label %cond.true210, label %cond.false317, !dbg !10893

cond.true210:                                     ; preds = %cond.end203
  %69 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common211 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !10893
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !10893
  %70 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !10893
  %base213 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !10893
  %71 = bitcast %struct.tree_base* %base213 to i64*, !dbg !10893
  %bf.load214 = load i64, i64* %71, align 8, !dbg !10893
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !10893
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !10893
  %cmp217 = icmp eq i32 %bf.cast216, 14, !dbg !10893
  br i1 %cmp217, label %cond.true219, label %cond.false223, !dbg !10893

cond.true219:                                     ; preds = %cond.true210
  %72 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common220 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !10893
  %type221 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common220, i32 0, i32 2, !dbg !10893
  %73 = load %union.tree_node*, %union.tree_node** %type221, align 8, !dbg !10893
  %call222 = call i32 @vector_type_mode(%union.tree_node* %73), !dbg !10893
  br label %cond.end231, !dbg !10893

cond.false223:                                    ; preds = %cond.true210
  %74 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common224 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !10893
  %type225 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common224, i32 0, i32 2, !dbg !10893
  %75 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !10893
  %type226 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !10893
  %mode227 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type226, i32 0, i32 6, !dbg !10893
  %bf.load228 = load i32, i32* %mode227, align 4, !dbg !10893
  %bf.lshr229 = lshr i32 %bf.load228, 16, !dbg !10893
  %bf.clear230 = and i32 %bf.lshr229, 255, !dbg !10893
  br label %cond.end231, !dbg !10893

cond.end231:                                      ; preds = %cond.false223, %cond.true219
  %cond232 = phi i32 [ %call222, %cond.true219 ], [ %bf.clear230, %cond.false223 ], !dbg !10893
  %idxprom233 = zext i32 %cond232 to i64, !dbg !10893
  %arrayidx234 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom233, !dbg !10893
  %76 = load i8, i8* %arrayidx234, align 1, !dbg !10893
  %conv235 = zext i8 %76 to i32, !dbg !10893
  %cmp236 = icmp eq i32 %conv235, 8, !dbg !10893
  br i1 %cmp236, label %cond.true266, label %lor.lhs.false238, !dbg !10893

lor.lhs.false238:                                 ; preds = %cond.end231
  %77 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common239 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !10893
  %type240 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common239, i32 0, i32 2, !dbg !10893
  %78 = load %union.tree_node*, %union.tree_node** %type240, align 8, !dbg !10893
  %base241 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !10893
  %79 = bitcast %struct.tree_base* %base241 to i64*, !dbg !10893
  %bf.load242 = load i64, i64* %79, align 8, !dbg !10893
  %bf.clear243 = and i64 %bf.load242, 65535, !dbg !10893
  %bf.cast244 = trunc i64 %bf.clear243 to i32, !dbg !10893
  %cmp245 = icmp eq i32 %bf.cast244, 14, !dbg !10893
  br i1 %cmp245, label %cond.true247, label %cond.false251, !dbg !10893

cond.true247:                                     ; preds = %lor.lhs.false238
  %80 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common248 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !10893
  %type249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2, !dbg !10893
  %81 = load %union.tree_node*, %union.tree_node** %type249, align 8, !dbg !10893
  %call250 = call i32 @vector_type_mode(%union.tree_node* %81), !dbg !10893
  br label %cond.end259, !dbg !10893

cond.false251:                                    ; preds = %lor.lhs.false238
  %82 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common252 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !10893
  %type253 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common252, i32 0, i32 2, !dbg !10893
  %83 = load %union.tree_node*, %union.tree_node** %type253, align 8, !dbg !10893
  %type254 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !10893
  %mode255 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type254, i32 0, i32 6, !dbg !10893
  %bf.load256 = load i32, i32* %mode255, align 4, !dbg !10893
  %bf.lshr257 = lshr i32 %bf.load256, 16, !dbg !10893
  %bf.clear258 = and i32 %bf.lshr257, 255, !dbg !10893
  br label %cond.end259, !dbg !10893

cond.end259:                                      ; preds = %cond.false251, %cond.true247
  %cond260 = phi i32 [ %call250, %cond.true247 ], [ %bf.clear258, %cond.false251 ], !dbg !10893
  %idxprom261 = zext i32 %cond260 to i64, !dbg !10893
  %arrayidx262 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom261, !dbg !10893
  %84 = load i8, i8* %arrayidx262, align 1, !dbg !10893
  %conv263 = zext i8 %84 to i32, !dbg !10893
  %cmp264 = icmp eq i32 %conv263, 9, !dbg !10893
  br i1 %cmp264, label %cond.true266, label %cond.false289, !dbg !10893

cond.true266:                                     ; preds = %cond.end259, %cond.end231
  %85 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common267 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !10893
  %type268 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common267, i32 0, i32 2, !dbg !10893
  %86 = load %union.tree_node*, %union.tree_node** %type268, align 8, !dbg !10893
  %base269 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !10893
  %87 = bitcast %struct.tree_base* %base269 to i64*, !dbg !10893
  %bf.load270 = load i64, i64* %87, align 8, !dbg !10893
  %bf.clear271 = and i64 %bf.load270, 65535, !dbg !10893
  %bf.cast272 = trunc i64 %bf.clear271 to i32, !dbg !10893
  %cmp273 = icmp eq i32 %bf.cast272, 14, !dbg !10893
  br i1 %cmp273, label %cond.true275, label %cond.false279, !dbg !10893

cond.true275:                                     ; preds = %cond.true266
  %88 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common276 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !10893
  %type277 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common276, i32 0, i32 2, !dbg !10893
  %89 = load %union.tree_node*, %union.tree_node** %type277, align 8, !dbg !10893
  %call278 = call i32 @vector_type_mode(%union.tree_node* %89), !dbg !10893
  br label %cond.end287, !dbg !10893

cond.false279:                                    ; preds = %cond.true266
  %90 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common280 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !10893
  %type281 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common280, i32 0, i32 2, !dbg !10893
  %91 = load %union.tree_node*, %union.tree_node** %type281, align 8, !dbg !10893
  %type282 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !10893
  %mode283 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type282, i32 0, i32 6, !dbg !10893
  %bf.load284 = load i32, i32* %mode283, align 4, !dbg !10893
  %bf.lshr285 = lshr i32 %bf.load284, 16, !dbg !10893
  %bf.clear286 = and i32 %bf.lshr285, 255, !dbg !10893
  br label %cond.end287, !dbg !10893

cond.end287:                                      ; preds = %cond.false279, %cond.true275
  %cond288 = phi i32 [ %call278, %cond.true275 ], [ %bf.clear286, %cond.false279 ], !dbg !10893
  br label %cond.end315, !dbg !10893

cond.false289:                                    ; preds = %cond.end259
  %92 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common290 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !10893
  %type291 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common290, i32 0, i32 2, !dbg !10893
  %93 = load %union.tree_node*, %union.tree_node** %type291, align 8, !dbg !10893
  %base292 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !10893
  %94 = bitcast %struct.tree_base* %base292 to i64*, !dbg !10893
  %bf.load293 = load i64, i64* %94, align 8, !dbg !10893
  %bf.clear294 = and i64 %bf.load293, 65535, !dbg !10893
  %bf.cast295 = trunc i64 %bf.clear294 to i32, !dbg !10893
  %cmp296 = icmp eq i32 %bf.cast295, 14, !dbg !10893
  br i1 %cmp296, label %cond.true298, label %cond.false302, !dbg !10893

cond.true298:                                     ; preds = %cond.false289
  %95 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common299 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !10893
  %type300 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common299, i32 0, i32 2, !dbg !10893
  %96 = load %union.tree_node*, %union.tree_node** %type300, align 8, !dbg !10893
  %call301 = call i32 @vector_type_mode(%union.tree_node* %96), !dbg !10893
  br label %cond.end310, !dbg !10893

cond.false302:                                    ; preds = %cond.false289
  %97 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common303 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !10893
  %type304 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common303, i32 0, i32 2, !dbg !10893
  %98 = load %union.tree_node*, %union.tree_node** %type304, align 8, !dbg !10893
  %type305 = bitcast %union.tree_node* %98 to %struct.tree_type*, !dbg !10893
  %mode306 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type305, i32 0, i32 6, !dbg !10893
  %bf.load307 = load i32, i32* %mode306, align 4, !dbg !10893
  %bf.lshr308 = lshr i32 %bf.load307, 16, !dbg !10893
  %bf.clear309 = and i32 %bf.lshr308, 255, !dbg !10893
  br label %cond.end310, !dbg !10893

cond.end310:                                      ; preds = %cond.false302, %cond.true298
  %cond311 = phi i32 [ %call301, %cond.true298 ], [ %bf.clear309, %cond.false302 ], !dbg !10893
  %idxprom312 = zext i32 %cond311 to i64, !dbg !10893
  %arrayidx313 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom312, !dbg !10893
  %99 = load i8, i8* %arrayidx313, align 1, !dbg !10893
  %conv314 = zext i8 %99 to i32, !dbg !10893
  br label %cond.end315, !dbg !10893

cond.end315:                                      ; preds = %cond.end310, %cond.end287
  %cond316 = phi i32 [ %cond288, %cond.end287 ], [ %conv314, %cond.end310 ], !dbg !10893
  %sub = sub i32 %cond316, 42, !dbg !10893
  %add = add i32 %sub, 4, !dbg !10893
  br label %cond.end425, !dbg !10893

cond.false317:                                    ; preds = %cond.end203
  %100 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common318 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !10893
  %type319 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common318, i32 0, i32 2, !dbg !10893
  %101 = load %union.tree_node*, %union.tree_node** %type319, align 8, !dbg !10893
  %base320 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !10893
  %102 = bitcast %struct.tree_base* %base320 to i64*, !dbg !10893
  %bf.load321 = load i64, i64* %102, align 8, !dbg !10893
  %bf.clear322 = and i64 %bf.load321, 65535, !dbg !10893
  %bf.cast323 = trunc i64 %bf.clear322 to i32, !dbg !10893
  %cmp324 = icmp eq i32 %bf.cast323, 14, !dbg !10893
  br i1 %cmp324, label %cond.true326, label %cond.false330, !dbg !10893

cond.true326:                                     ; preds = %cond.false317
  %103 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common327 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !10893
  %type328 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common327, i32 0, i32 2, !dbg !10893
  %104 = load %union.tree_node*, %union.tree_node** %type328, align 8, !dbg !10893
  %call329 = call i32 @vector_type_mode(%union.tree_node* %104), !dbg !10893
  br label %cond.end338, !dbg !10893

cond.false330:                                    ; preds = %cond.false317
  %105 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common331 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !10893
  %type332 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common331, i32 0, i32 2, !dbg !10893
  %106 = load %union.tree_node*, %union.tree_node** %type332, align 8, !dbg !10893
  %type333 = bitcast %union.tree_node* %106 to %struct.tree_type*, !dbg !10893
  %mode334 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type333, i32 0, i32 6, !dbg !10893
  %bf.load335 = load i32, i32* %mode334, align 4, !dbg !10893
  %bf.lshr336 = lshr i32 %bf.load335, 16, !dbg !10893
  %bf.clear337 = and i32 %bf.lshr336, 255, !dbg !10893
  br label %cond.end338, !dbg !10893

cond.end338:                                      ; preds = %cond.false330, %cond.true326
  %cond339 = phi i32 [ %call329, %cond.true326 ], [ %bf.clear337, %cond.false330 ], !dbg !10893
  %idxprom340 = zext i32 %cond339 to i64, !dbg !10893
  %arrayidx341 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom340, !dbg !10893
  %107 = load i8, i8* %arrayidx341, align 1, !dbg !10893
  %conv342 = zext i8 %107 to i32, !dbg !10893
  %cmp343 = icmp eq i32 %conv342, 8, !dbg !10893
  br i1 %cmp343, label %cond.true373, label %lor.lhs.false345, !dbg !10893

lor.lhs.false345:                                 ; preds = %cond.end338
  %108 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common346 = bitcast %union.tree_node* %108 to %struct.tree_common*, !dbg !10893
  %type347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common346, i32 0, i32 2, !dbg !10893
  %109 = load %union.tree_node*, %union.tree_node** %type347, align 8, !dbg !10893
  %base348 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !10893
  %110 = bitcast %struct.tree_base* %base348 to i64*, !dbg !10893
  %bf.load349 = load i64, i64* %110, align 8, !dbg !10893
  %bf.clear350 = and i64 %bf.load349, 65535, !dbg !10893
  %bf.cast351 = trunc i64 %bf.clear350 to i32, !dbg !10893
  %cmp352 = icmp eq i32 %bf.cast351, 14, !dbg !10893
  br i1 %cmp352, label %cond.true354, label %cond.false358, !dbg !10893

cond.true354:                                     ; preds = %lor.lhs.false345
  %111 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common355 = bitcast %union.tree_node* %111 to %struct.tree_common*, !dbg !10893
  %type356 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common355, i32 0, i32 2, !dbg !10893
  %112 = load %union.tree_node*, %union.tree_node** %type356, align 8, !dbg !10893
  %call357 = call i32 @vector_type_mode(%union.tree_node* %112), !dbg !10893
  br label %cond.end366, !dbg !10893

cond.false358:                                    ; preds = %lor.lhs.false345
  %113 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common359 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !10893
  %type360 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common359, i32 0, i32 2, !dbg !10893
  %114 = load %union.tree_node*, %union.tree_node** %type360, align 8, !dbg !10893
  %type361 = bitcast %union.tree_node* %114 to %struct.tree_type*, !dbg !10893
  %mode362 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type361, i32 0, i32 6, !dbg !10893
  %bf.load363 = load i32, i32* %mode362, align 4, !dbg !10893
  %bf.lshr364 = lshr i32 %bf.load363, 16, !dbg !10893
  %bf.clear365 = and i32 %bf.lshr364, 255, !dbg !10893
  br label %cond.end366, !dbg !10893

cond.end366:                                      ; preds = %cond.false358, %cond.true354
  %cond367 = phi i32 [ %call357, %cond.true354 ], [ %bf.clear365, %cond.false358 ], !dbg !10893
  %idxprom368 = zext i32 %cond367 to i64, !dbg !10893
  %arrayidx369 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom368, !dbg !10893
  %115 = load i8, i8* %arrayidx369, align 1, !dbg !10893
  %conv370 = zext i8 %115 to i32, !dbg !10893
  %cmp371 = icmp eq i32 %conv370, 9, !dbg !10893
  br i1 %cmp371, label %cond.true373, label %cond.false396, !dbg !10893

cond.true373:                                     ; preds = %cond.end366, %cond.end338
  %116 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common374 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !10893
  %type375 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common374, i32 0, i32 2, !dbg !10893
  %117 = load %union.tree_node*, %union.tree_node** %type375, align 8, !dbg !10893
  %base376 = bitcast %union.tree_node* %117 to %struct.tree_base*, !dbg !10893
  %118 = bitcast %struct.tree_base* %base376 to i64*, !dbg !10893
  %bf.load377 = load i64, i64* %118, align 8, !dbg !10893
  %bf.clear378 = and i64 %bf.load377, 65535, !dbg !10893
  %bf.cast379 = trunc i64 %bf.clear378 to i32, !dbg !10893
  %cmp380 = icmp eq i32 %bf.cast379, 14, !dbg !10893
  br i1 %cmp380, label %cond.true382, label %cond.false386, !dbg !10893

cond.true382:                                     ; preds = %cond.true373
  %119 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common383 = bitcast %union.tree_node* %119 to %struct.tree_common*, !dbg !10893
  %type384 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common383, i32 0, i32 2, !dbg !10893
  %120 = load %union.tree_node*, %union.tree_node** %type384, align 8, !dbg !10893
  %call385 = call i32 @vector_type_mode(%union.tree_node* %120), !dbg !10893
  br label %cond.end394, !dbg !10893

cond.false386:                                    ; preds = %cond.true373
  %121 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common387 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !10893
  %type388 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common387, i32 0, i32 2, !dbg !10893
  %122 = load %union.tree_node*, %union.tree_node** %type388, align 8, !dbg !10893
  %type389 = bitcast %union.tree_node* %122 to %struct.tree_type*, !dbg !10893
  %mode390 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type389, i32 0, i32 6, !dbg !10893
  %bf.load391 = load i32, i32* %mode390, align 4, !dbg !10893
  %bf.lshr392 = lshr i32 %bf.load391, 16, !dbg !10893
  %bf.clear393 = and i32 %bf.lshr392, 255, !dbg !10893
  br label %cond.end394, !dbg !10893

cond.end394:                                      ; preds = %cond.false386, %cond.true382
  %cond395 = phi i32 [ %call385, %cond.true382 ], [ %bf.clear393, %cond.false386 ], !dbg !10893
  br label %cond.end422, !dbg !10893

cond.false396:                                    ; preds = %cond.end366
  %123 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common397 = bitcast %union.tree_node* %123 to %struct.tree_common*, !dbg !10893
  %type398 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common397, i32 0, i32 2, !dbg !10893
  %124 = load %union.tree_node*, %union.tree_node** %type398, align 8, !dbg !10893
  %base399 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !10893
  %125 = bitcast %struct.tree_base* %base399 to i64*, !dbg !10893
  %bf.load400 = load i64, i64* %125, align 8, !dbg !10893
  %bf.clear401 = and i64 %bf.load400, 65535, !dbg !10893
  %bf.cast402 = trunc i64 %bf.clear401 to i32, !dbg !10893
  %cmp403 = icmp eq i32 %bf.cast402, 14, !dbg !10893
  br i1 %cmp403, label %cond.true405, label %cond.false409, !dbg !10893

cond.true405:                                     ; preds = %cond.false396
  %126 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common406 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !10893
  %type407 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common406, i32 0, i32 2, !dbg !10893
  %127 = load %union.tree_node*, %union.tree_node** %type407, align 8, !dbg !10893
  %call408 = call i32 @vector_type_mode(%union.tree_node* %127), !dbg !10893
  br label %cond.end417, !dbg !10893

cond.false409:                                    ; preds = %cond.false396
  %128 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10893
  %common410 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !10893
  %type411 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common410, i32 0, i32 2, !dbg !10893
  %129 = load %union.tree_node*, %union.tree_node** %type411, align 8, !dbg !10893
  %type412 = bitcast %union.tree_node* %129 to %struct.tree_type*, !dbg !10893
  %mode413 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type412, i32 0, i32 6, !dbg !10893
  %bf.load414 = load i32, i32* %mode413, align 4, !dbg !10893
  %bf.lshr415 = lshr i32 %bf.load414, 16, !dbg !10893
  %bf.clear416 = and i32 %bf.lshr415, 255, !dbg !10893
  br label %cond.end417, !dbg !10893

cond.end417:                                      ; preds = %cond.false409, %cond.true405
  %cond418 = phi i32 [ %call408, %cond.true405 ], [ %bf.clear416, %cond.false409 ], !dbg !10893
  %idxprom419 = zext i32 %cond418 to i64, !dbg !10893
  %arrayidx420 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom419, !dbg !10893
  %130 = load i8, i8* %arrayidx420, align 1, !dbg !10893
  %conv421 = zext i8 %130 to i32, !dbg !10893
  br label %cond.end422, !dbg !10893

cond.end422:                                      ; preds = %cond.end417, %cond.end394
  %cond423 = phi i32 [ %cond395, %cond.end394 ], [ %conv421, %cond.end417 ], !dbg !10893
  %sub424 = sub i32 %cond423, 38, !dbg !10893
  br label %cond.end425, !dbg !10893

cond.end425:                                      ; preds = %cond.end422, %cond.end315
  %cond426 = phi i32 [ %add, %cond.end315 ], [ %sub424, %cond.end422 ], !dbg !10893
  %idxprom427 = zext i32 %cond426 to i64, !dbg !10893
  %arrayidx428 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom427, !dbg !10893
  %131 = load %struct.real_format*, %struct.real_format** %arrayidx428, align 8, !dbg !10893
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %131, i32 0, i32 12, !dbg !10893
  %132 = load i8, i8* %has_inf, align 1, !dbg !10893
  %conv429 = zext i8 %132 to i32, !dbg !10893
  %tobool430 = icmp ne i32 %conv429, 0, !dbg !10893
  br i1 %tobool430, label %land.lhs.true431, label %if.then433, !dbg !10893

land.lhs.true431:                                 ; preds = %cond.end425
  %133 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10893
  %tobool432 = icmp ne i32 %133, 0, !dbg !10893
  br i1 %tobool432, label %if.then433, label %if.end435, !dbg !10896

if.then433:                                       ; preds = %land.lhs.true431, %cond.end425, %cond.end92
  %134 = load i32, i32* %loc.addr, align 4, !dbg !10897
  %135 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10898
  %136 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10899
  %137 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10900
  %call434 = call %union.tree_node* @omit_one_operand_loc(i32 %134, %union.tree_node* %135, %union.tree_node* %136, %union.tree_node* %137), !dbg !10901
  store %union.tree_node* %call434, %union.tree_node** %retval, align 8, !dbg !10902
  br label %return, !dbg !10902

if.end435:                                        ; preds = %land.lhs.true431
  %138 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10903
  %base436 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !10903
  %139 = bitcast %struct.tree_base* %base436 to i64*, !dbg !10903
  %bf.load437 = load i64, i64* %139, align 8, !dbg !10903
  %bf.clear438 = and i64 %bf.load437, 65535, !dbg !10903
  %bf.cast439 = trunc i64 %bf.clear438 to i32, !dbg !10903
  %cmp440 = icmp eq i32 %bf.cast439, 24, !dbg !10905
  br i1 %cmp440, label %if.then442, label %if.end453, !dbg !10906

if.then442:                                       ; preds = %if.end435
  %140 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10907
  %real_cst = bitcast %union.tree_node* %140 to %struct.tree_real_cst*, !dbg !10907
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !10907
  %141 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !10907
  %142 = bitcast %struct.real_value* %r to i8*, !dbg !10907
  %143 = bitcast %struct.real_value* %141 to i8*, !dbg !10907
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 32, i1 false), !dbg !10907
  %call443 = call zeroext i8 @real_isinf(%struct.real_value* %r), !dbg !10909
  %tobool444 = icmp ne i8 %call443, 0, !dbg !10909
  br i1 %tobool444, label %if.then445, label %if.else, !dbg !10911

if.then445:                                       ; preds = %if.then442
  %call446 = call zeroext i8 @real_compare(i32 99, %struct.real_value* %r, %struct.real_value* @dconst0), !dbg !10912
  %conv447 = zext i8 %call446 to i32, !dbg !10912
  %tobool448 = icmp ne i32 %conv447, 0, !dbg !10912
  br i1 %tobool448, label %cond.true449, label %cond.false450, !dbg !10912

cond.true449:                                     ; preds = %if.then445
  %144 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10913
  br label %cond.end451, !dbg !10912

cond.false450:                                    ; preds = %if.then445
  %145 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !10914
  br label %cond.end451, !dbg !10912

cond.end451:                                      ; preds = %cond.false450, %cond.true449
  %cond452 = phi %union.tree_node* [ %144, %cond.true449 ], [ %145, %cond.false450 ], !dbg !10912
  store %union.tree_node* %cond452, %union.tree_node** %retval, align 8, !dbg !10915
  br label %return, !dbg !10915

if.else:                                          ; preds = %if.then442
  %146 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10916
  store %union.tree_node* %146, %union.tree_node** %retval, align 8, !dbg !10917
  br label %return, !dbg !10917

if.end453:                                        ; preds = %if.end435
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10918
  br label %return, !dbg !10918

sw.bb454:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %signbit_fn, metadata !10919, metadata !DIExpression()), !dbg !10921
  %147 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10922
  %common455 = bitcast %union.tree_node* %147 to %struct.tree_common*, !dbg !10922
  %type456 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common455, i32 0, i32 2, !dbg !10922
  %148 = load %union.tree_node*, %union.tree_node** %type456, align 8, !dbg !10922
  %call457 = call %union.tree_node* @mathfn_built_in_1(%union.tree_node* %148, i32 210, i8 zeroext 0), !dbg !10923
  store %union.tree_node* %call457, %union.tree_node** %signbit_fn, align 8, !dbg !10921
  call void @llvm.dbg.declare(metadata %union.tree_node** %isinf_fn, metadata !10924, metadata !DIExpression()), !dbg !10925
  %149 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 469), align 8, !dbg !10926
  store %union.tree_node* %149, %union.tree_node** %isinf_fn, align 8, !dbg !10925
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !10927, metadata !DIExpression()), !dbg !10928
  store %union.tree_node* null, %union.tree_node** %tmp, align 8, !dbg !10928
  %150 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10929
  %call458 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %150), !dbg !10930
  store %union.tree_node* %call458, %union.tree_node** %arg.addr, align 8, !dbg !10931
  %151 = load %union.tree_node*, %union.tree_node** %signbit_fn, align 8, !dbg !10932
  %tobool459 = icmp ne %union.tree_node* %151, null, !dbg !10932
  br i1 %tobool459, label %land.lhs.true460, label %if.end469, !dbg !10934

land.lhs.true460:                                 ; preds = %sw.bb454
  %152 = load %union.tree_node*, %union.tree_node** %isinf_fn, align 8, !dbg !10935
  %tobool461 = icmp ne %union.tree_node* %152, null, !dbg !10935
  br i1 %tobool461, label %if.then462, label %if.end469, !dbg !10936

if.then462:                                       ; preds = %land.lhs.true460
  call void @llvm.dbg.declare(metadata %union.tree_node** %signbit_call, metadata !10937, metadata !DIExpression()), !dbg !10939
  %153 = load i32, i32* %loc.addr, align 4, !dbg !10940
  %154 = load %union.tree_node*, %union.tree_node** %signbit_fn, align 8, !dbg !10941
  %155 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10942
  %call463 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %153, %union.tree_node* %154, i32 1, %union.tree_node* %155), !dbg !10943
  store %union.tree_node* %call463, %union.tree_node** %signbit_call, align 8, !dbg !10939
  call void @llvm.dbg.declare(metadata %union.tree_node** %isinf_call, metadata !10944, metadata !DIExpression()), !dbg !10945
  %156 = load i32, i32* %loc.addr, align 4, !dbg !10946
  %157 = load %union.tree_node*, %union.tree_node** %isinf_fn, align 8, !dbg !10947
  %158 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10948
  %call464 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %156, %union.tree_node* %157, i32 1, %union.tree_node* %158), !dbg !10949
  store %union.tree_node* %call464, %union.tree_node** %isinf_call, align 8, !dbg !10945
  %159 = load i32, i32* %loc.addr, align 4, !dbg !10950
  %160 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10950
  %161 = load %union.tree_node*, %union.tree_node** %signbit_call, align 8, !dbg !10950
  %162 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10950
  %call465 = call %union.tree_node* @fold_build2_stat_loc(i32 %159, i32 102, %union.tree_node* %160, %union.tree_node* %161, %union.tree_node* %162), !dbg !10950
  store %union.tree_node* %call465, %union.tree_node** %signbit_call, align 8, !dbg !10951
  %163 = load i32, i32* %loc.addr, align 4, !dbg !10952
  %164 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10952
  %165 = load %union.tree_node*, %union.tree_node** %isinf_call, align 8, !dbg !10952
  %166 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10952
  %call466 = call %union.tree_node* @fold_build2_stat_loc(i32 %163, i32 102, %union.tree_node* %164, %union.tree_node* %165, %union.tree_node* %166), !dbg !10952
  store %union.tree_node* %call466, %union.tree_node** %isinf_call, align 8, !dbg !10953
  %167 = load i32, i32* %loc.addr, align 4, !dbg !10954
  %168 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10954
  %169 = load %union.tree_node*, %union.tree_node** %signbit_call, align 8, !dbg !10954
  %170 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !10954
  %171 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10954
  %call467 = call %union.tree_node* @fold_build3_stat_loc(i32 %167, i32 56, %union.tree_node* %168, %union.tree_node* %169, %union.tree_node* %170, %union.tree_node* %171), !dbg !10954
  store %union.tree_node* %call467, %union.tree_node** %tmp, align 8, !dbg !10955
  %172 = load i32, i32* %loc.addr, align 4, !dbg !10956
  %173 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10956
  %174 = load %union.tree_node*, %union.tree_node** %isinf_call, align 8, !dbg !10956
  %175 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !10956
  %176 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10956
  %call468 = call %union.tree_node* @fold_build3_stat_loc(i32 %172, i32 56, %union.tree_node* %173, %union.tree_node* %174, %union.tree_node* %175, %union.tree_node* %176), !dbg !10956
  store %union.tree_node* %call468, %union.tree_node** %tmp, align 8, !dbg !10957
  br label %if.end469, !dbg !10958

if.end469:                                        ; preds = %if.then462, %land.lhs.true460, %sw.bb454
  %177 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !10959
  store %union.tree_node* %177, %union.tree_node** %retval, align 8, !dbg !10960
  br label %return, !dbg !10960

sw.bb470:                                         ; preds = %if.end
  %178 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common471 = bitcast %union.tree_node* %178 to %struct.tree_common*, !dbg !10961
  %type472 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common471, i32 0, i32 2, !dbg !10961
  %179 = load %union.tree_node*, %union.tree_node** %type472, align 8, !dbg !10961
  %base473 = bitcast %union.tree_node* %179 to %struct.tree_base*, !dbg !10961
  %180 = bitcast %struct.tree_base* %base473 to i64*, !dbg !10961
  %bf.load474 = load i64, i64* %180, align 8, !dbg !10961
  %bf.clear475 = and i64 %bf.load474, 65535, !dbg !10961
  %bf.cast476 = trunc i64 %bf.clear475 to i32, !dbg !10961
  %cmp477 = icmp eq i32 %bf.cast476, 14, !dbg !10961
  br i1 %cmp477, label %cond.true479, label %cond.false483, !dbg !10961

cond.true479:                                     ; preds = %sw.bb470
  %181 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common480 = bitcast %union.tree_node* %181 to %struct.tree_common*, !dbg !10961
  %type481 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common480, i32 0, i32 2, !dbg !10961
  %182 = load %union.tree_node*, %union.tree_node** %type481, align 8, !dbg !10961
  %call482 = call i32 @vector_type_mode(%union.tree_node* %182), !dbg !10961
  br label %cond.end491, !dbg !10961

cond.false483:                                    ; preds = %sw.bb470
  %183 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common484 = bitcast %union.tree_node* %183 to %struct.tree_common*, !dbg !10961
  %type485 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common484, i32 0, i32 2, !dbg !10961
  %184 = load %union.tree_node*, %union.tree_node** %type485, align 8, !dbg !10961
  %type486 = bitcast %union.tree_node* %184 to %struct.tree_type*, !dbg !10961
  %mode487 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type486, i32 0, i32 6, !dbg !10961
  %bf.load488 = load i32, i32* %mode487, align 4, !dbg !10961
  %bf.lshr489 = lshr i32 %bf.load488, 16, !dbg !10961
  %bf.clear490 = and i32 %bf.lshr489, 255, !dbg !10961
  br label %cond.end491, !dbg !10961

cond.end491:                                      ; preds = %cond.false483, %cond.true479
  %cond492 = phi i32 [ %call482, %cond.true479 ], [ %bf.clear490, %cond.false483 ], !dbg !10961
  %idxprom493 = zext i32 %cond492 to i64, !dbg !10961
  %arrayidx494 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom493, !dbg !10961
  %185 = load i8, i8* %arrayidx494, align 1, !dbg !10961
  %conv495 = zext i8 %185 to i32, !dbg !10961
  %cmp496 = icmp eq i32 %conv495, 8, !dbg !10961
  br i1 %cmp496, label %land.lhs.true582, label %lor.lhs.false498, !dbg !10961

lor.lhs.false498:                                 ; preds = %cond.end491
  %186 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common499 = bitcast %union.tree_node* %186 to %struct.tree_common*, !dbg !10961
  %type500 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common499, i32 0, i32 2, !dbg !10961
  %187 = load %union.tree_node*, %union.tree_node** %type500, align 8, !dbg !10961
  %base501 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !10961
  %188 = bitcast %struct.tree_base* %base501 to i64*, !dbg !10961
  %bf.load502 = load i64, i64* %188, align 8, !dbg !10961
  %bf.clear503 = and i64 %bf.load502, 65535, !dbg !10961
  %bf.cast504 = trunc i64 %bf.clear503 to i32, !dbg !10961
  %cmp505 = icmp eq i32 %bf.cast504, 14, !dbg !10961
  br i1 %cmp505, label %cond.true507, label %cond.false511, !dbg !10961

cond.true507:                                     ; preds = %lor.lhs.false498
  %189 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common508 = bitcast %union.tree_node* %189 to %struct.tree_common*, !dbg !10961
  %type509 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common508, i32 0, i32 2, !dbg !10961
  %190 = load %union.tree_node*, %union.tree_node** %type509, align 8, !dbg !10961
  %call510 = call i32 @vector_type_mode(%union.tree_node* %190), !dbg !10961
  br label %cond.end519, !dbg !10961

cond.false511:                                    ; preds = %lor.lhs.false498
  %191 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common512 = bitcast %union.tree_node* %191 to %struct.tree_common*, !dbg !10961
  %type513 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common512, i32 0, i32 2, !dbg !10961
  %192 = load %union.tree_node*, %union.tree_node** %type513, align 8, !dbg !10961
  %type514 = bitcast %union.tree_node* %192 to %struct.tree_type*, !dbg !10961
  %mode515 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type514, i32 0, i32 6, !dbg !10961
  %bf.load516 = load i32, i32* %mode515, align 4, !dbg !10961
  %bf.lshr517 = lshr i32 %bf.load516, 16, !dbg !10961
  %bf.clear518 = and i32 %bf.lshr517, 255, !dbg !10961
  br label %cond.end519, !dbg !10961

cond.end519:                                      ; preds = %cond.false511, %cond.true507
  %cond520 = phi i32 [ %call510, %cond.true507 ], [ %bf.clear518, %cond.false511 ], !dbg !10961
  %idxprom521 = zext i32 %cond520 to i64, !dbg !10961
  %arrayidx522 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom521, !dbg !10961
  %193 = load i8, i8* %arrayidx522, align 1, !dbg !10961
  %conv523 = zext i8 %193 to i32, !dbg !10961
  %cmp524 = icmp eq i32 %conv523, 9, !dbg !10961
  br i1 %cmp524, label %land.lhs.true582, label %lor.lhs.false526, !dbg !10961

lor.lhs.false526:                                 ; preds = %cond.end519
  %194 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common527 = bitcast %union.tree_node* %194 to %struct.tree_common*, !dbg !10961
  %type528 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common527, i32 0, i32 2, !dbg !10961
  %195 = load %union.tree_node*, %union.tree_node** %type528, align 8, !dbg !10961
  %base529 = bitcast %union.tree_node* %195 to %struct.tree_base*, !dbg !10961
  %196 = bitcast %struct.tree_base* %base529 to i64*, !dbg !10961
  %bf.load530 = load i64, i64* %196, align 8, !dbg !10961
  %bf.clear531 = and i64 %bf.load530, 65535, !dbg !10961
  %bf.cast532 = trunc i64 %bf.clear531 to i32, !dbg !10961
  %cmp533 = icmp eq i32 %bf.cast532, 14, !dbg !10961
  br i1 %cmp533, label %cond.true535, label %cond.false539, !dbg !10961

cond.true535:                                     ; preds = %lor.lhs.false526
  %197 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common536 = bitcast %union.tree_node* %197 to %struct.tree_common*, !dbg !10961
  %type537 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common536, i32 0, i32 2, !dbg !10961
  %198 = load %union.tree_node*, %union.tree_node** %type537, align 8, !dbg !10961
  %call538 = call i32 @vector_type_mode(%union.tree_node* %198), !dbg !10961
  br label %cond.end547, !dbg !10961

cond.false539:                                    ; preds = %lor.lhs.false526
  %199 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common540 = bitcast %union.tree_node* %199 to %struct.tree_common*, !dbg !10961
  %type541 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common540, i32 0, i32 2, !dbg !10961
  %200 = load %union.tree_node*, %union.tree_node** %type541, align 8, !dbg !10961
  %type542 = bitcast %union.tree_node* %200 to %struct.tree_type*, !dbg !10961
  %mode543 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type542, i32 0, i32 6, !dbg !10961
  %bf.load544 = load i32, i32* %mode543, align 4, !dbg !10961
  %bf.lshr545 = lshr i32 %bf.load544, 16, !dbg !10961
  %bf.clear546 = and i32 %bf.lshr545, 255, !dbg !10961
  br label %cond.end547, !dbg !10961

cond.end547:                                      ; preds = %cond.false539, %cond.true535
  %cond548 = phi i32 [ %call538, %cond.true535 ], [ %bf.clear546, %cond.false539 ], !dbg !10961
  %idxprom549 = zext i32 %cond548 to i64, !dbg !10961
  %arrayidx550 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom549, !dbg !10961
  %201 = load i8, i8* %arrayidx550, align 1, !dbg !10961
  %conv551 = zext i8 %201 to i32, !dbg !10961
  %cmp552 = icmp eq i32 %conv551, 11, !dbg !10961
  br i1 %cmp552, label %land.lhs.true582, label %lor.lhs.false554, !dbg !10961

lor.lhs.false554:                                 ; preds = %cond.end547
  %202 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common555 = bitcast %union.tree_node* %202 to %struct.tree_common*, !dbg !10961
  %type556 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common555, i32 0, i32 2, !dbg !10961
  %203 = load %union.tree_node*, %union.tree_node** %type556, align 8, !dbg !10961
  %base557 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !10961
  %204 = bitcast %struct.tree_base* %base557 to i64*, !dbg !10961
  %bf.load558 = load i64, i64* %204, align 8, !dbg !10961
  %bf.clear559 = and i64 %bf.load558, 65535, !dbg !10961
  %bf.cast560 = trunc i64 %bf.clear559 to i32, !dbg !10961
  %cmp561 = icmp eq i32 %bf.cast560, 14, !dbg !10961
  br i1 %cmp561, label %cond.true563, label %cond.false567, !dbg !10961

cond.true563:                                     ; preds = %lor.lhs.false554
  %205 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common564 = bitcast %union.tree_node* %205 to %struct.tree_common*, !dbg !10961
  %type565 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common564, i32 0, i32 2, !dbg !10961
  %206 = load %union.tree_node*, %union.tree_node** %type565, align 8, !dbg !10961
  %call566 = call i32 @vector_type_mode(%union.tree_node* %206), !dbg !10961
  br label %cond.end575, !dbg !10961

cond.false567:                                    ; preds = %lor.lhs.false554
  %207 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common568 = bitcast %union.tree_node* %207 to %struct.tree_common*, !dbg !10961
  %type569 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common568, i32 0, i32 2, !dbg !10961
  %208 = load %union.tree_node*, %union.tree_node** %type569, align 8, !dbg !10961
  %type570 = bitcast %union.tree_node* %208 to %struct.tree_type*, !dbg !10961
  %mode571 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type570, i32 0, i32 6, !dbg !10961
  %bf.load572 = load i32, i32* %mode571, align 4, !dbg !10961
  %bf.lshr573 = lshr i32 %bf.load572, 16, !dbg !10961
  %bf.clear574 = and i32 %bf.lshr573, 255, !dbg !10961
  br label %cond.end575, !dbg !10961

cond.end575:                                      ; preds = %cond.false567, %cond.true563
  %cond576 = phi i32 [ %call566, %cond.true563 ], [ %bf.clear574, %cond.false567 ], !dbg !10961
  %idxprom577 = zext i32 %cond576 to i64, !dbg !10961
  %arrayidx578 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom577, !dbg !10961
  %209 = load i8, i8* %arrayidx578, align 1, !dbg !10961
  %conv579 = zext i8 %209 to i32, !dbg !10961
  %cmp580 = icmp eq i32 %conv579, 17, !dbg !10961
  br i1 %cmp580, label %land.lhs.true582, label %land.lhs.true919, !dbg !10961

land.lhs.true582:                                 ; preds = %cond.end575, %cond.end547, %cond.end519, %cond.end491
  %210 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common583 = bitcast %union.tree_node* %210 to %struct.tree_common*, !dbg !10961
  %type584 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common583, i32 0, i32 2, !dbg !10961
  %211 = load %union.tree_node*, %union.tree_node** %type584, align 8, !dbg !10961
  %base585 = bitcast %union.tree_node* %211 to %struct.tree_base*, !dbg !10961
  %212 = bitcast %struct.tree_base* %base585 to i64*, !dbg !10961
  %bf.load586 = load i64, i64* %212, align 8, !dbg !10961
  %bf.clear587 = and i64 %bf.load586, 65535, !dbg !10961
  %bf.cast588 = trunc i64 %bf.clear587 to i32, !dbg !10961
  %cmp589 = icmp eq i32 %bf.cast588, 14, !dbg !10961
  br i1 %cmp589, label %cond.true591, label %cond.false595, !dbg !10961

cond.true591:                                     ; preds = %land.lhs.true582
  %213 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common592 = bitcast %union.tree_node* %213 to %struct.tree_common*, !dbg !10961
  %type593 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common592, i32 0, i32 2, !dbg !10961
  %214 = load %union.tree_node*, %union.tree_node** %type593, align 8, !dbg !10961
  %call594 = call i32 @vector_type_mode(%union.tree_node* %214), !dbg !10961
  br label %cond.end603, !dbg !10961

cond.false595:                                    ; preds = %land.lhs.true582
  %215 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common596 = bitcast %union.tree_node* %215 to %struct.tree_common*, !dbg !10961
  %type597 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common596, i32 0, i32 2, !dbg !10961
  %216 = load %union.tree_node*, %union.tree_node** %type597, align 8, !dbg !10961
  %type598 = bitcast %union.tree_node* %216 to %struct.tree_type*, !dbg !10961
  %mode599 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type598, i32 0, i32 6, !dbg !10961
  %bf.load600 = load i32, i32* %mode599, align 4, !dbg !10961
  %bf.lshr601 = lshr i32 %bf.load600, 16, !dbg !10961
  %bf.clear602 = and i32 %bf.lshr601, 255, !dbg !10961
  br label %cond.end603, !dbg !10961

cond.end603:                                      ; preds = %cond.false595, %cond.true591
  %cond604 = phi i32 [ %call594, %cond.true591 ], [ %bf.clear602, %cond.false595 ], !dbg !10961
  %idxprom605 = zext i32 %cond604 to i64, !dbg !10961
  %arrayidx606 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom605, !dbg !10961
  %217 = load i8, i8* %arrayidx606, align 1, !dbg !10961
  %conv607 = zext i8 %217 to i32, !dbg !10961
  %cmp608 = icmp eq i32 %conv607, 8, !dbg !10961
  br i1 %cmp608, label %cond.true638, label %lor.lhs.false610, !dbg !10961

lor.lhs.false610:                                 ; preds = %cond.end603
  %218 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common611 = bitcast %union.tree_node* %218 to %struct.tree_common*, !dbg !10961
  %type612 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common611, i32 0, i32 2, !dbg !10961
  %219 = load %union.tree_node*, %union.tree_node** %type612, align 8, !dbg !10961
  %base613 = bitcast %union.tree_node* %219 to %struct.tree_base*, !dbg !10961
  %220 = bitcast %struct.tree_base* %base613 to i64*, !dbg !10961
  %bf.load614 = load i64, i64* %220, align 8, !dbg !10961
  %bf.clear615 = and i64 %bf.load614, 65535, !dbg !10961
  %bf.cast616 = trunc i64 %bf.clear615 to i32, !dbg !10961
  %cmp617 = icmp eq i32 %bf.cast616, 14, !dbg !10961
  br i1 %cmp617, label %cond.true619, label %cond.false623, !dbg !10961

cond.true619:                                     ; preds = %lor.lhs.false610
  %221 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common620 = bitcast %union.tree_node* %221 to %struct.tree_common*, !dbg !10961
  %type621 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common620, i32 0, i32 2, !dbg !10961
  %222 = load %union.tree_node*, %union.tree_node** %type621, align 8, !dbg !10961
  %call622 = call i32 @vector_type_mode(%union.tree_node* %222), !dbg !10961
  br label %cond.end631, !dbg !10961

cond.false623:                                    ; preds = %lor.lhs.false610
  %223 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common624 = bitcast %union.tree_node* %223 to %struct.tree_common*, !dbg !10961
  %type625 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common624, i32 0, i32 2, !dbg !10961
  %224 = load %union.tree_node*, %union.tree_node** %type625, align 8, !dbg !10961
  %type626 = bitcast %union.tree_node* %224 to %struct.tree_type*, !dbg !10961
  %mode627 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type626, i32 0, i32 6, !dbg !10961
  %bf.load628 = load i32, i32* %mode627, align 4, !dbg !10961
  %bf.lshr629 = lshr i32 %bf.load628, 16, !dbg !10961
  %bf.clear630 = and i32 %bf.lshr629, 255, !dbg !10961
  br label %cond.end631, !dbg !10961

cond.end631:                                      ; preds = %cond.false623, %cond.true619
  %cond632 = phi i32 [ %call622, %cond.true619 ], [ %bf.clear630, %cond.false623 ], !dbg !10961
  %idxprom633 = zext i32 %cond632 to i64, !dbg !10961
  %arrayidx634 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom633, !dbg !10961
  %225 = load i8, i8* %arrayidx634, align 1, !dbg !10961
  %conv635 = zext i8 %225 to i32, !dbg !10961
  %cmp636 = icmp eq i32 %conv635, 9, !dbg !10961
  br i1 %cmp636, label %cond.true638, label %cond.false661, !dbg !10961

cond.true638:                                     ; preds = %cond.end631, %cond.end603
  %226 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common639 = bitcast %union.tree_node* %226 to %struct.tree_common*, !dbg !10961
  %type640 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common639, i32 0, i32 2, !dbg !10961
  %227 = load %union.tree_node*, %union.tree_node** %type640, align 8, !dbg !10961
  %base641 = bitcast %union.tree_node* %227 to %struct.tree_base*, !dbg !10961
  %228 = bitcast %struct.tree_base* %base641 to i64*, !dbg !10961
  %bf.load642 = load i64, i64* %228, align 8, !dbg !10961
  %bf.clear643 = and i64 %bf.load642, 65535, !dbg !10961
  %bf.cast644 = trunc i64 %bf.clear643 to i32, !dbg !10961
  %cmp645 = icmp eq i32 %bf.cast644, 14, !dbg !10961
  br i1 %cmp645, label %cond.true647, label %cond.false651, !dbg !10961

cond.true647:                                     ; preds = %cond.true638
  %229 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common648 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !10961
  %type649 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common648, i32 0, i32 2, !dbg !10961
  %230 = load %union.tree_node*, %union.tree_node** %type649, align 8, !dbg !10961
  %call650 = call i32 @vector_type_mode(%union.tree_node* %230), !dbg !10961
  br label %cond.end659, !dbg !10961

cond.false651:                                    ; preds = %cond.true638
  %231 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common652 = bitcast %union.tree_node* %231 to %struct.tree_common*, !dbg !10961
  %type653 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common652, i32 0, i32 2, !dbg !10961
  %232 = load %union.tree_node*, %union.tree_node** %type653, align 8, !dbg !10961
  %type654 = bitcast %union.tree_node* %232 to %struct.tree_type*, !dbg !10961
  %mode655 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type654, i32 0, i32 6, !dbg !10961
  %bf.load656 = load i32, i32* %mode655, align 4, !dbg !10961
  %bf.lshr657 = lshr i32 %bf.load656, 16, !dbg !10961
  %bf.clear658 = and i32 %bf.lshr657, 255, !dbg !10961
  br label %cond.end659, !dbg !10961

cond.end659:                                      ; preds = %cond.false651, %cond.true647
  %cond660 = phi i32 [ %call650, %cond.true647 ], [ %bf.clear658, %cond.false651 ], !dbg !10961
  br label %cond.end687, !dbg !10961

cond.false661:                                    ; preds = %cond.end631
  %233 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common662 = bitcast %union.tree_node* %233 to %struct.tree_common*, !dbg !10961
  %type663 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common662, i32 0, i32 2, !dbg !10961
  %234 = load %union.tree_node*, %union.tree_node** %type663, align 8, !dbg !10961
  %base664 = bitcast %union.tree_node* %234 to %struct.tree_base*, !dbg !10961
  %235 = bitcast %struct.tree_base* %base664 to i64*, !dbg !10961
  %bf.load665 = load i64, i64* %235, align 8, !dbg !10961
  %bf.clear666 = and i64 %bf.load665, 65535, !dbg !10961
  %bf.cast667 = trunc i64 %bf.clear666 to i32, !dbg !10961
  %cmp668 = icmp eq i32 %bf.cast667, 14, !dbg !10961
  br i1 %cmp668, label %cond.true670, label %cond.false674, !dbg !10961

cond.true670:                                     ; preds = %cond.false661
  %236 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common671 = bitcast %union.tree_node* %236 to %struct.tree_common*, !dbg !10961
  %type672 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common671, i32 0, i32 2, !dbg !10961
  %237 = load %union.tree_node*, %union.tree_node** %type672, align 8, !dbg !10961
  %call673 = call i32 @vector_type_mode(%union.tree_node* %237), !dbg !10961
  br label %cond.end682, !dbg !10961

cond.false674:                                    ; preds = %cond.false661
  %238 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common675 = bitcast %union.tree_node* %238 to %struct.tree_common*, !dbg !10961
  %type676 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common675, i32 0, i32 2, !dbg !10961
  %239 = load %union.tree_node*, %union.tree_node** %type676, align 8, !dbg !10961
  %type677 = bitcast %union.tree_node* %239 to %struct.tree_type*, !dbg !10961
  %mode678 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type677, i32 0, i32 6, !dbg !10961
  %bf.load679 = load i32, i32* %mode678, align 4, !dbg !10961
  %bf.lshr680 = lshr i32 %bf.load679, 16, !dbg !10961
  %bf.clear681 = and i32 %bf.lshr680, 255, !dbg !10961
  br label %cond.end682, !dbg !10961

cond.end682:                                      ; preds = %cond.false674, %cond.true670
  %cond683 = phi i32 [ %call673, %cond.true670 ], [ %bf.clear681, %cond.false674 ], !dbg !10961
  %idxprom684 = zext i32 %cond683 to i64, !dbg !10961
  %arrayidx685 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom684, !dbg !10961
  %240 = load i8, i8* %arrayidx685, align 1, !dbg !10961
  %conv686 = zext i8 %240 to i32, !dbg !10961
  br label %cond.end687, !dbg !10961

cond.end687:                                      ; preds = %cond.end682, %cond.end659
  %cond688 = phi i32 [ %cond660, %cond.end659 ], [ %conv686, %cond.end682 ], !dbg !10961
  %idxprom689 = zext i32 %cond688 to i64, !dbg !10961
  %arrayidx690 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom689, !dbg !10961
  %241 = load i8, i8* %arrayidx690, align 1, !dbg !10961
  %conv691 = zext i8 %241 to i32, !dbg !10961
  %cmp692 = icmp eq i32 %conv691, 9, !dbg !10961
  br i1 %cmp692, label %cond.true694, label %cond.false803, !dbg !10961

cond.true694:                                     ; preds = %cond.end687
  %242 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common695 = bitcast %union.tree_node* %242 to %struct.tree_common*, !dbg !10961
  %type696 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common695, i32 0, i32 2, !dbg !10961
  %243 = load %union.tree_node*, %union.tree_node** %type696, align 8, !dbg !10961
  %base697 = bitcast %union.tree_node* %243 to %struct.tree_base*, !dbg !10961
  %244 = bitcast %struct.tree_base* %base697 to i64*, !dbg !10961
  %bf.load698 = load i64, i64* %244, align 8, !dbg !10961
  %bf.clear699 = and i64 %bf.load698, 65535, !dbg !10961
  %bf.cast700 = trunc i64 %bf.clear699 to i32, !dbg !10961
  %cmp701 = icmp eq i32 %bf.cast700, 14, !dbg !10961
  br i1 %cmp701, label %cond.true703, label %cond.false707, !dbg !10961

cond.true703:                                     ; preds = %cond.true694
  %245 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common704 = bitcast %union.tree_node* %245 to %struct.tree_common*, !dbg !10961
  %type705 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common704, i32 0, i32 2, !dbg !10961
  %246 = load %union.tree_node*, %union.tree_node** %type705, align 8, !dbg !10961
  %call706 = call i32 @vector_type_mode(%union.tree_node* %246), !dbg !10961
  br label %cond.end715, !dbg !10961

cond.false707:                                    ; preds = %cond.true694
  %247 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common708 = bitcast %union.tree_node* %247 to %struct.tree_common*, !dbg !10961
  %type709 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common708, i32 0, i32 2, !dbg !10961
  %248 = load %union.tree_node*, %union.tree_node** %type709, align 8, !dbg !10961
  %type710 = bitcast %union.tree_node* %248 to %struct.tree_type*, !dbg !10961
  %mode711 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type710, i32 0, i32 6, !dbg !10961
  %bf.load712 = load i32, i32* %mode711, align 4, !dbg !10961
  %bf.lshr713 = lshr i32 %bf.load712, 16, !dbg !10961
  %bf.clear714 = and i32 %bf.lshr713, 255, !dbg !10961
  br label %cond.end715, !dbg !10961

cond.end715:                                      ; preds = %cond.false707, %cond.true703
  %cond716 = phi i32 [ %call706, %cond.true703 ], [ %bf.clear714, %cond.false707 ], !dbg !10961
  %idxprom717 = zext i32 %cond716 to i64, !dbg !10961
  %arrayidx718 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom717, !dbg !10961
  %249 = load i8, i8* %arrayidx718, align 1, !dbg !10961
  %conv719 = zext i8 %249 to i32, !dbg !10961
  %cmp720 = icmp eq i32 %conv719, 8, !dbg !10961
  br i1 %cmp720, label %cond.true750, label %lor.lhs.false722, !dbg !10961

lor.lhs.false722:                                 ; preds = %cond.end715
  %250 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common723 = bitcast %union.tree_node* %250 to %struct.tree_common*, !dbg !10961
  %type724 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common723, i32 0, i32 2, !dbg !10961
  %251 = load %union.tree_node*, %union.tree_node** %type724, align 8, !dbg !10961
  %base725 = bitcast %union.tree_node* %251 to %struct.tree_base*, !dbg !10961
  %252 = bitcast %struct.tree_base* %base725 to i64*, !dbg !10961
  %bf.load726 = load i64, i64* %252, align 8, !dbg !10961
  %bf.clear727 = and i64 %bf.load726, 65535, !dbg !10961
  %bf.cast728 = trunc i64 %bf.clear727 to i32, !dbg !10961
  %cmp729 = icmp eq i32 %bf.cast728, 14, !dbg !10961
  br i1 %cmp729, label %cond.true731, label %cond.false735, !dbg !10961

cond.true731:                                     ; preds = %lor.lhs.false722
  %253 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common732 = bitcast %union.tree_node* %253 to %struct.tree_common*, !dbg !10961
  %type733 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common732, i32 0, i32 2, !dbg !10961
  %254 = load %union.tree_node*, %union.tree_node** %type733, align 8, !dbg !10961
  %call734 = call i32 @vector_type_mode(%union.tree_node* %254), !dbg !10961
  br label %cond.end743, !dbg !10961

cond.false735:                                    ; preds = %lor.lhs.false722
  %255 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common736 = bitcast %union.tree_node* %255 to %struct.tree_common*, !dbg !10961
  %type737 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common736, i32 0, i32 2, !dbg !10961
  %256 = load %union.tree_node*, %union.tree_node** %type737, align 8, !dbg !10961
  %type738 = bitcast %union.tree_node* %256 to %struct.tree_type*, !dbg !10961
  %mode739 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type738, i32 0, i32 6, !dbg !10961
  %bf.load740 = load i32, i32* %mode739, align 4, !dbg !10961
  %bf.lshr741 = lshr i32 %bf.load740, 16, !dbg !10961
  %bf.clear742 = and i32 %bf.lshr741, 255, !dbg !10961
  br label %cond.end743, !dbg !10961

cond.end743:                                      ; preds = %cond.false735, %cond.true731
  %cond744 = phi i32 [ %call734, %cond.true731 ], [ %bf.clear742, %cond.false735 ], !dbg !10961
  %idxprom745 = zext i32 %cond744 to i64, !dbg !10961
  %arrayidx746 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom745, !dbg !10961
  %257 = load i8, i8* %arrayidx746, align 1, !dbg !10961
  %conv747 = zext i8 %257 to i32, !dbg !10961
  %cmp748 = icmp eq i32 %conv747, 9, !dbg !10961
  br i1 %cmp748, label %cond.true750, label %cond.false773, !dbg !10961

cond.true750:                                     ; preds = %cond.end743, %cond.end715
  %258 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common751 = bitcast %union.tree_node* %258 to %struct.tree_common*, !dbg !10961
  %type752 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common751, i32 0, i32 2, !dbg !10961
  %259 = load %union.tree_node*, %union.tree_node** %type752, align 8, !dbg !10961
  %base753 = bitcast %union.tree_node* %259 to %struct.tree_base*, !dbg !10961
  %260 = bitcast %struct.tree_base* %base753 to i64*, !dbg !10961
  %bf.load754 = load i64, i64* %260, align 8, !dbg !10961
  %bf.clear755 = and i64 %bf.load754, 65535, !dbg !10961
  %bf.cast756 = trunc i64 %bf.clear755 to i32, !dbg !10961
  %cmp757 = icmp eq i32 %bf.cast756, 14, !dbg !10961
  br i1 %cmp757, label %cond.true759, label %cond.false763, !dbg !10961

cond.true759:                                     ; preds = %cond.true750
  %261 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common760 = bitcast %union.tree_node* %261 to %struct.tree_common*, !dbg !10961
  %type761 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common760, i32 0, i32 2, !dbg !10961
  %262 = load %union.tree_node*, %union.tree_node** %type761, align 8, !dbg !10961
  %call762 = call i32 @vector_type_mode(%union.tree_node* %262), !dbg !10961
  br label %cond.end771, !dbg !10961

cond.false763:                                    ; preds = %cond.true750
  %263 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common764 = bitcast %union.tree_node* %263 to %struct.tree_common*, !dbg !10961
  %type765 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common764, i32 0, i32 2, !dbg !10961
  %264 = load %union.tree_node*, %union.tree_node** %type765, align 8, !dbg !10961
  %type766 = bitcast %union.tree_node* %264 to %struct.tree_type*, !dbg !10961
  %mode767 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type766, i32 0, i32 6, !dbg !10961
  %bf.load768 = load i32, i32* %mode767, align 4, !dbg !10961
  %bf.lshr769 = lshr i32 %bf.load768, 16, !dbg !10961
  %bf.clear770 = and i32 %bf.lshr769, 255, !dbg !10961
  br label %cond.end771, !dbg !10961

cond.end771:                                      ; preds = %cond.false763, %cond.true759
  %cond772 = phi i32 [ %call762, %cond.true759 ], [ %bf.clear770, %cond.false763 ], !dbg !10961
  br label %cond.end799, !dbg !10961

cond.false773:                                    ; preds = %cond.end743
  %265 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common774 = bitcast %union.tree_node* %265 to %struct.tree_common*, !dbg !10961
  %type775 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common774, i32 0, i32 2, !dbg !10961
  %266 = load %union.tree_node*, %union.tree_node** %type775, align 8, !dbg !10961
  %base776 = bitcast %union.tree_node* %266 to %struct.tree_base*, !dbg !10961
  %267 = bitcast %struct.tree_base* %base776 to i64*, !dbg !10961
  %bf.load777 = load i64, i64* %267, align 8, !dbg !10961
  %bf.clear778 = and i64 %bf.load777, 65535, !dbg !10961
  %bf.cast779 = trunc i64 %bf.clear778 to i32, !dbg !10961
  %cmp780 = icmp eq i32 %bf.cast779, 14, !dbg !10961
  br i1 %cmp780, label %cond.true782, label %cond.false786, !dbg !10961

cond.true782:                                     ; preds = %cond.false773
  %268 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common783 = bitcast %union.tree_node* %268 to %struct.tree_common*, !dbg !10961
  %type784 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common783, i32 0, i32 2, !dbg !10961
  %269 = load %union.tree_node*, %union.tree_node** %type784, align 8, !dbg !10961
  %call785 = call i32 @vector_type_mode(%union.tree_node* %269), !dbg !10961
  br label %cond.end794, !dbg !10961

cond.false786:                                    ; preds = %cond.false773
  %270 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common787 = bitcast %union.tree_node* %270 to %struct.tree_common*, !dbg !10961
  %type788 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common787, i32 0, i32 2, !dbg !10961
  %271 = load %union.tree_node*, %union.tree_node** %type788, align 8, !dbg !10961
  %type789 = bitcast %union.tree_node* %271 to %struct.tree_type*, !dbg !10961
  %mode790 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type789, i32 0, i32 6, !dbg !10961
  %bf.load791 = load i32, i32* %mode790, align 4, !dbg !10961
  %bf.lshr792 = lshr i32 %bf.load791, 16, !dbg !10961
  %bf.clear793 = and i32 %bf.lshr792, 255, !dbg !10961
  br label %cond.end794, !dbg !10961

cond.end794:                                      ; preds = %cond.false786, %cond.true782
  %cond795 = phi i32 [ %call785, %cond.true782 ], [ %bf.clear793, %cond.false786 ], !dbg !10961
  %idxprom796 = zext i32 %cond795 to i64, !dbg !10961
  %arrayidx797 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom796, !dbg !10961
  %272 = load i8, i8* %arrayidx797, align 1, !dbg !10961
  %conv798 = zext i8 %272 to i32, !dbg !10961
  br label %cond.end799, !dbg !10961

cond.end799:                                      ; preds = %cond.end794, %cond.end771
  %cond800 = phi i32 [ %cond772, %cond.end771 ], [ %conv798, %cond.end794 ], !dbg !10961
  %sub801 = sub i32 %cond800, 42, !dbg !10961
  %add802 = add i32 %sub801, 4, !dbg !10961
  br label %cond.end911, !dbg !10961

cond.false803:                                    ; preds = %cond.end687
  %273 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common804 = bitcast %union.tree_node* %273 to %struct.tree_common*, !dbg !10961
  %type805 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common804, i32 0, i32 2, !dbg !10961
  %274 = load %union.tree_node*, %union.tree_node** %type805, align 8, !dbg !10961
  %base806 = bitcast %union.tree_node* %274 to %struct.tree_base*, !dbg !10961
  %275 = bitcast %struct.tree_base* %base806 to i64*, !dbg !10961
  %bf.load807 = load i64, i64* %275, align 8, !dbg !10961
  %bf.clear808 = and i64 %bf.load807, 65535, !dbg !10961
  %bf.cast809 = trunc i64 %bf.clear808 to i32, !dbg !10961
  %cmp810 = icmp eq i32 %bf.cast809, 14, !dbg !10961
  br i1 %cmp810, label %cond.true812, label %cond.false816, !dbg !10961

cond.true812:                                     ; preds = %cond.false803
  %276 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common813 = bitcast %union.tree_node* %276 to %struct.tree_common*, !dbg !10961
  %type814 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common813, i32 0, i32 2, !dbg !10961
  %277 = load %union.tree_node*, %union.tree_node** %type814, align 8, !dbg !10961
  %call815 = call i32 @vector_type_mode(%union.tree_node* %277), !dbg !10961
  br label %cond.end824, !dbg !10961

cond.false816:                                    ; preds = %cond.false803
  %278 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common817 = bitcast %union.tree_node* %278 to %struct.tree_common*, !dbg !10961
  %type818 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common817, i32 0, i32 2, !dbg !10961
  %279 = load %union.tree_node*, %union.tree_node** %type818, align 8, !dbg !10961
  %type819 = bitcast %union.tree_node* %279 to %struct.tree_type*, !dbg !10961
  %mode820 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type819, i32 0, i32 6, !dbg !10961
  %bf.load821 = load i32, i32* %mode820, align 4, !dbg !10961
  %bf.lshr822 = lshr i32 %bf.load821, 16, !dbg !10961
  %bf.clear823 = and i32 %bf.lshr822, 255, !dbg !10961
  br label %cond.end824, !dbg !10961

cond.end824:                                      ; preds = %cond.false816, %cond.true812
  %cond825 = phi i32 [ %call815, %cond.true812 ], [ %bf.clear823, %cond.false816 ], !dbg !10961
  %idxprom826 = zext i32 %cond825 to i64, !dbg !10961
  %arrayidx827 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom826, !dbg !10961
  %280 = load i8, i8* %arrayidx827, align 1, !dbg !10961
  %conv828 = zext i8 %280 to i32, !dbg !10961
  %cmp829 = icmp eq i32 %conv828, 8, !dbg !10961
  br i1 %cmp829, label %cond.true859, label %lor.lhs.false831, !dbg !10961

lor.lhs.false831:                                 ; preds = %cond.end824
  %281 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common832 = bitcast %union.tree_node* %281 to %struct.tree_common*, !dbg !10961
  %type833 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common832, i32 0, i32 2, !dbg !10961
  %282 = load %union.tree_node*, %union.tree_node** %type833, align 8, !dbg !10961
  %base834 = bitcast %union.tree_node* %282 to %struct.tree_base*, !dbg !10961
  %283 = bitcast %struct.tree_base* %base834 to i64*, !dbg !10961
  %bf.load835 = load i64, i64* %283, align 8, !dbg !10961
  %bf.clear836 = and i64 %bf.load835, 65535, !dbg !10961
  %bf.cast837 = trunc i64 %bf.clear836 to i32, !dbg !10961
  %cmp838 = icmp eq i32 %bf.cast837, 14, !dbg !10961
  br i1 %cmp838, label %cond.true840, label %cond.false844, !dbg !10961

cond.true840:                                     ; preds = %lor.lhs.false831
  %284 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common841 = bitcast %union.tree_node* %284 to %struct.tree_common*, !dbg !10961
  %type842 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common841, i32 0, i32 2, !dbg !10961
  %285 = load %union.tree_node*, %union.tree_node** %type842, align 8, !dbg !10961
  %call843 = call i32 @vector_type_mode(%union.tree_node* %285), !dbg !10961
  br label %cond.end852, !dbg !10961

cond.false844:                                    ; preds = %lor.lhs.false831
  %286 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common845 = bitcast %union.tree_node* %286 to %struct.tree_common*, !dbg !10961
  %type846 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common845, i32 0, i32 2, !dbg !10961
  %287 = load %union.tree_node*, %union.tree_node** %type846, align 8, !dbg !10961
  %type847 = bitcast %union.tree_node* %287 to %struct.tree_type*, !dbg !10961
  %mode848 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type847, i32 0, i32 6, !dbg !10961
  %bf.load849 = load i32, i32* %mode848, align 4, !dbg !10961
  %bf.lshr850 = lshr i32 %bf.load849, 16, !dbg !10961
  %bf.clear851 = and i32 %bf.lshr850, 255, !dbg !10961
  br label %cond.end852, !dbg !10961

cond.end852:                                      ; preds = %cond.false844, %cond.true840
  %cond853 = phi i32 [ %call843, %cond.true840 ], [ %bf.clear851, %cond.false844 ], !dbg !10961
  %idxprom854 = zext i32 %cond853 to i64, !dbg !10961
  %arrayidx855 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom854, !dbg !10961
  %288 = load i8, i8* %arrayidx855, align 1, !dbg !10961
  %conv856 = zext i8 %288 to i32, !dbg !10961
  %cmp857 = icmp eq i32 %conv856, 9, !dbg !10961
  br i1 %cmp857, label %cond.true859, label %cond.false882, !dbg !10961

cond.true859:                                     ; preds = %cond.end852, %cond.end824
  %289 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common860 = bitcast %union.tree_node* %289 to %struct.tree_common*, !dbg !10961
  %type861 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common860, i32 0, i32 2, !dbg !10961
  %290 = load %union.tree_node*, %union.tree_node** %type861, align 8, !dbg !10961
  %base862 = bitcast %union.tree_node* %290 to %struct.tree_base*, !dbg !10961
  %291 = bitcast %struct.tree_base* %base862 to i64*, !dbg !10961
  %bf.load863 = load i64, i64* %291, align 8, !dbg !10961
  %bf.clear864 = and i64 %bf.load863, 65535, !dbg !10961
  %bf.cast865 = trunc i64 %bf.clear864 to i32, !dbg !10961
  %cmp866 = icmp eq i32 %bf.cast865, 14, !dbg !10961
  br i1 %cmp866, label %cond.true868, label %cond.false872, !dbg !10961

cond.true868:                                     ; preds = %cond.true859
  %292 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common869 = bitcast %union.tree_node* %292 to %struct.tree_common*, !dbg !10961
  %type870 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common869, i32 0, i32 2, !dbg !10961
  %293 = load %union.tree_node*, %union.tree_node** %type870, align 8, !dbg !10961
  %call871 = call i32 @vector_type_mode(%union.tree_node* %293), !dbg !10961
  br label %cond.end880, !dbg !10961

cond.false872:                                    ; preds = %cond.true859
  %294 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common873 = bitcast %union.tree_node* %294 to %struct.tree_common*, !dbg !10961
  %type874 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common873, i32 0, i32 2, !dbg !10961
  %295 = load %union.tree_node*, %union.tree_node** %type874, align 8, !dbg !10961
  %type875 = bitcast %union.tree_node* %295 to %struct.tree_type*, !dbg !10961
  %mode876 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type875, i32 0, i32 6, !dbg !10961
  %bf.load877 = load i32, i32* %mode876, align 4, !dbg !10961
  %bf.lshr878 = lshr i32 %bf.load877, 16, !dbg !10961
  %bf.clear879 = and i32 %bf.lshr878, 255, !dbg !10961
  br label %cond.end880, !dbg !10961

cond.end880:                                      ; preds = %cond.false872, %cond.true868
  %cond881 = phi i32 [ %call871, %cond.true868 ], [ %bf.clear879, %cond.false872 ], !dbg !10961
  br label %cond.end908, !dbg !10961

cond.false882:                                    ; preds = %cond.end852
  %296 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common883 = bitcast %union.tree_node* %296 to %struct.tree_common*, !dbg !10961
  %type884 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common883, i32 0, i32 2, !dbg !10961
  %297 = load %union.tree_node*, %union.tree_node** %type884, align 8, !dbg !10961
  %base885 = bitcast %union.tree_node* %297 to %struct.tree_base*, !dbg !10961
  %298 = bitcast %struct.tree_base* %base885 to i64*, !dbg !10961
  %bf.load886 = load i64, i64* %298, align 8, !dbg !10961
  %bf.clear887 = and i64 %bf.load886, 65535, !dbg !10961
  %bf.cast888 = trunc i64 %bf.clear887 to i32, !dbg !10961
  %cmp889 = icmp eq i32 %bf.cast888, 14, !dbg !10961
  br i1 %cmp889, label %cond.true891, label %cond.false895, !dbg !10961

cond.true891:                                     ; preds = %cond.false882
  %299 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common892 = bitcast %union.tree_node* %299 to %struct.tree_common*, !dbg !10961
  %type893 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common892, i32 0, i32 2, !dbg !10961
  %300 = load %union.tree_node*, %union.tree_node** %type893, align 8, !dbg !10961
  %call894 = call i32 @vector_type_mode(%union.tree_node* %300), !dbg !10961
  br label %cond.end903, !dbg !10961

cond.false895:                                    ; preds = %cond.false882
  %301 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10961
  %common896 = bitcast %union.tree_node* %301 to %struct.tree_common*, !dbg !10961
  %type897 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common896, i32 0, i32 2, !dbg !10961
  %302 = load %union.tree_node*, %union.tree_node** %type897, align 8, !dbg !10961
  %type898 = bitcast %union.tree_node* %302 to %struct.tree_type*, !dbg !10961
  %mode899 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type898, i32 0, i32 6, !dbg !10961
  %bf.load900 = load i32, i32* %mode899, align 4, !dbg !10961
  %bf.lshr901 = lshr i32 %bf.load900, 16, !dbg !10961
  %bf.clear902 = and i32 %bf.lshr901, 255, !dbg !10961
  br label %cond.end903, !dbg !10961

cond.end903:                                      ; preds = %cond.false895, %cond.true891
  %cond904 = phi i32 [ %call894, %cond.true891 ], [ %bf.clear902, %cond.false895 ], !dbg !10961
  %idxprom905 = zext i32 %cond904 to i64, !dbg !10961
  %arrayidx906 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom905, !dbg !10961
  %303 = load i8, i8* %arrayidx906, align 1, !dbg !10961
  %conv907 = zext i8 %303 to i32, !dbg !10961
  br label %cond.end908, !dbg !10961

cond.end908:                                      ; preds = %cond.end903, %cond.end880
  %cond909 = phi i32 [ %cond881, %cond.end880 ], [ %conv907, %cond.end903 ], !dbg !10961
  %sub910 = sub i32 %cond909, 38, !dbg !10961
  br label %cond.end911, !dbg !10961

cond.end911:                                      ; preds = %cond.end908, %cond.end799
  %cond912 = phi i32 [ %add802, %cond.end799 ], [ %sub910, %cond.end908 ], !dbg !10961
  %idxprom913 = zext i32 %cond912 to i64, !dbg !10961
  %arrayidx914 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom913, !dbg !10961
  %304 = load %struct.real_format*, %struct.real_format** %arrayidx914, align 8, !dbg !10961
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %304, i32 0, i32 11, !dbg !10961
  %305 = load i8, i8* %has_nans, align 2, !dbg !10961
  %conv915 = zext i8 %305 to i32, !dbg !10961
  %tobool916 = icmp ne i32 %conv915, 0, !dbg !10961
  br i1 %tobool916, label %land.lhs.true917, label %land.lhs.true919, !dbg !10961

land.lhs.true917:                                 ; preds = %cond.end911
  %306 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10961
  %tobool918 = icmp ne i32 %306, 0, !dbg !10961
  br i1 %tobool918, label %land.lhs.true919, label %if.end1371, !dbg !10963

land.lhs.true919:                                 ; preds = %land.lhs.true917, %cond.end911, %cond.end575
  %307 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common920 = bitcast %union.tree_node* %307 to %struct.tree_common*, !dbg !10964
  %type921 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common920, i32 0, i32 2, !dbg !10964
  %308 = load %union.tree_node*, %union.tree_node** %type921, align 8, !dbg !10964
  %base922 = bitcast %union.tree_node* %308 to %struct.tree_base*, !dbg !10964
  %309 = bitcast %struct.tree_base* %base922 to i64*, !dbg !10964
  %bf.load923 = load i64, i64* %309, align 8, !dbg !10964
  %bf.clear924 = and i64 %bf.load923, 65535, !dbg !10964
  %bf.cast925 = trunc i64 %bf.clear924 to i32, !dbg !10964
  %cmp926 = icmp eq i32 %bf.cast925, 14, !dbg !10964
  br i1 %cmp926, label %cond.true928, label %cond.false932, !dbg !10964

cond.true928:                                     ; preds = %land.lhs.true919
  %310 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common929 = bitcast %union.tree_node* %310 to %struct.tree_common*, !dbg !10964
  %type930 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common929, i32 0, i32 2, !dbg !10964
  %311 = load %union.tree_node*, %union.tree_node** %type930, align 8, !dbg !10964
  %call931 = call i32 @vector_type_mode(%union.tree_node* %311), !dbg !10964
  br label %cond.end940, !dbg !10964

cond.false932:                                    ; preds = %land.lhs.true919
  %312 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common933 = bitcast %union.tree_node* %312 to %struct.tree_common*, !dbg !10964
  %type934 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common933, i32 0, i32 2, !dbg !10964
  %313 = load %union.tree_node*, %union.tree_node** %type934, align 8, !dbg !10964
  %type935 = bitcast %union.tree_node* %313 to %struct.tree_type*, !dbg !10964
  %mode936 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type935, i32 0, i32 6, !dbg !10964
  %bf.load937 = load i32, i32* %mode936, align 4, !dbg !10964
  %bf.lshr938 = lshr i32 %bf.load937, 16, !dbg !10964
  %bf.clear939 = and i32 %bf.lshr938, 255, !dbg !10964
  br label %cond.end940, !dbg !10964

cond.end940:                                      ; preds = %cond.false932, %cond.true928
  %cond941 = phi i32 [ %call931, %cond.true928 ], [ %bf.clear939, %cond.false932 ], !dbg !10964
  %idxprom942 = zext i32 %cond941 to i64, !dbg !10964
  %arrayidx943 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom942, !dbg !10964
  %314 = load i8, i8* %arrayidx943, align 1, !dbg !10964
  %conv944 = zext i8 %314 to i32, !dbg !10964
  %cmp945 = icmp eq i32 %conv944, 8, !dbg !10964
  br i1 %cmp945, label %land.lhs.true1031, label %lor.lhs.false947, !dbg !10964

lor.lhs.false947:                                 ; preds = %cond.end940
  %315 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common948 = bitcast %union.tree_node* %315 to %struct.tree_common*, !dbg !10964
  %type949 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common948, i32 0, i32 2, !dbg !10964
  %316 = load %union.tree_node*, %union.tree_node** %type949, align 8, !dbg !10964
  %base950 = bitcast %union.tree_node* %316 to %struct.tree_base*, !dbg !10964
  %317 = bitcast %struct.tree_base* %base950 to i64*, !dbg !10964
  %bf.load951 = load i64, i64* %317, align 8, !dbg !10964
  %bf.clear952 = and i64 %bf.load951, 65535, !dbg !10964
  %bf.cast953 = trunc i64 %bf.clear952 to i32, !dbg !10964
  %cmp954 = icmp eq i32 %bf.cast953, 14, !dbg !10964
  br i1 %cmp954, label %cond.true956, label %cond.false960, !dbg !10964

cond.true956:                                     ; preds = %lor.lhs.false947
  %318 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common957 = bitcast %union.tree_node* %318 to %struct.tree_common*, !dbg !10964
  %type958 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common957, i32 0, i32 2, !dbg !10964
  %319 = load %union.tree_node*, %union.tree_node** %type958, align 8, !dbg !10964
  %call959 = call i32 @vector_type_mode(%union.tree_node* %319), !dbg !10964
  br label %cond.end968, !dbg !10964

cond.false960:                                    ; preds = %lor.lhs.false947
  %320 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common961 = bitcast %union.tree_node* %320 to %struct.tree_common*, !dbg !10964
  %type962 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common961, i32 0, i32 2, !dbg !10964
  %321 = load %union.tree_node*, %union.tree_node** %type962, align 8, !dbg !10964
  %type963 = bitcast %union.tree_node* %321 to %struct.tree_type*, !dbg !10964
  %mode964 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type963, i32 0, i32 6, !dbg !10964
  %bf.load965 = load i32, i32* %mode964, align 4, !dbg !10964
  %bf.lshr966 = lshr i32 %bf.load965, 16, !dbg !10964
  %bf.clear967 = and i32 %bf.lshr966, 255, !dbg !10964
  br label %cond.end968, !dbg !10964

cond.end968:                                      ; preds = %cond.false960, %cond.true956
  %cond969 = phi i32 [ %call959, %cond.true956 ], [ %bf.clear967, %cond.false960 ], !dbg !10964
  %idxprom970 = zext i32 %cond969 to i64, !dbg !10964
  %arrayidx971 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom970, !dbg !10964
  %322 = load i8, i8* %arrayidx971, align 1, !dbg !10964
  %conv972 = zext i8 %322 to i32, !dbg !10964
  %cmp973 = icmp eq i32 %conv972, 9, !dbg !10964
  br i1 %cmp973, label %land.lhs.true1031, label %lor.lhs.false975, !dbg !10964

lor.lhs.false975:                                 ; preds = %cond.end968
  %323 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common976 = bitcast %union.tree_node* %323 to %struct.tree_common*, !dbg !10964
  %type977 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common976, i32 0, i32 2, !dbg !10964
  %324 = load %union.tree_node*, %union.tree_node** %type977, align 8, !dbg !10964
  %base978 = bitcast %union.tree_node* %324 to %struct.tree_base*, !dbg !10964
  %325 = bitcast %struct.tree_base* %base978 to i64*, !dbg !10964
  %bf.load979 = load i64, i64* %325, align 8, !dbg !10964
  %bf.clear980 = and i64 %bf.load979, 65535, !dbg !10964
  %bf.cast981 = trunc i64 %bf.clear980 to i32, !dbg !10964
  %cmp982 = icmp eq i32 %bf.cast981, 14, !dbg !10964
  br i1 %cmp982, label %cond.true984, label %cond.false988, !dbg !10964

cond.true984:                                     ; preds = %lor.lhs.false975
  %326 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common985 = bitcast %union.tree_node* %326 to %struct.tree_common*, !dbg !10964
  %type986 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common985, i32 0, i32 2, !dbg !10964
  %327 = load %union.tree_node*, %union.tree_node** %type986, align 8, !dbg !10964
  %call987 = call i32 @vector_type_mode(%union.tree_node* %327), !dbg !10964
  br label %cond.end996, !dbg !10964

cond.false988:                                    ; preds = %lor.lhs.false975
  %328 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common989 = bitcast %union.tree_node* %328 to %struct.tree_common*, !dbg !10964
  %type990 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common989, i32 0, i32 2, !dbg !10964
  %329 = load %union.tree_node*, %union.tree_node** %type990, align 8, !dbg !10964
  %type991 = bitcast %union.tree_node* %329 to %struct.tree_type*, !dbg !10964
  %mode992 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type991, i32 0, i32 6, !dbg !10964
  %bf.load993 = load i32, i32* %mode992, align 4, !dbg !10964
  %bf.lshr994 = lshr i32 %bf.load993, 16, !dbg !10964
  %bf.clear995 = and i32 %bf.lshr994, 255, !dbg !10964
  br label %cond.end996, !dbg !10964

cond.end996:                                      ; preds = %cond.false988, %cond.true984
  %cond997 = phi i32 [ %call987, %cond.true984 ], [ %bf.clear995, %cond.false988 ], !dbg !10964
  %idxprom998 = zext i32 %cond997 to i64, !dbg !10964
  %arrayidx999 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom998, !dbg !10964
  %330 = load i8, i8* %arrayidx999, align 1, !dbg !10964
  %conv1000 = zext i8 %330 to i32, !dbg !10964
  %cmp1001 = icmp eq i32 %conv1000, 11, !dbg !10964
  br i1 %cmp1001, label %land.lhs.true1031, label %lor.lhs.false1003, !dbg !10964

lor.lhs.false1003:                                ; preds = %cond.end996
  %331 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1004 = bitcast %union.tree_node* %331 to %struct.tree_common*, !dbg !10964
  %type1005 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1004, i32 0, i32 2, !dbg !10964
  %332 = load %union.tree_node*, %union.tree_node** %type1005, align 8, !dbg !10964
  %base1006 = bitcast %union.tree_node* %332 to %struct.tree_base*, !dbg !10964
  %333 = bitcast %struct.tree_base* %base1006 to i64*, !dbg !10964
  %bf.load1007 = load i64, i64* %333, align 8, !dbg !10964
  %bf.clear1008 = and i64 %bf.load1007, 65535, !dbg !10964
  %bf.cast1009 = trunc i64 %bf.clear1008 to i32, !dbg !10964
  %cmp1010 = icmp eq i32 %bf.cast1009, 14, !dbg !10964
  br i1 %cmp1010, label %cond.true1012, label %cond.false1016, !dbg !10964

cond.true1012:                                    ; preds = %lor.lhs.false1003
  %334 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1013 = bitcast %union.tree_node* %334 to %struct.tree_common*, !dbg !10964
  %type1014 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1013, i32 0, i32 2, !dbg !10964
  %335 = load %union.tree_node*, %union.tree_node** %type1014, align 8, !dbg !10964
  %call1015 = call i32 @vector_type_mode(%union.tree_node* %335), !dbg !10964
  br label %cond.end1024, !dbg !10964

cond.false1016:                                   ; preds = %lor.lhs.false1003
  %336 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1017 = bitcast %union.tree_node* %336 to %struct.tree_common*, !dbg !10964
  %type1018 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1017, i32 0, i32 2, !dbg !10964
  %337 = load %union.tree_node*, %union.tree_node** %type1018, align 8, !dbg !10964
  %type1019 = bitcast %union.tree_node* %337 to %struct.tree_type*, !dbg !10964
  %mode1020 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1019, i32 0, i32 6, !dbg !10964
  %bf.load1021 = load i32, i32* %mode1020, align 4, !dbg !10964
  %bf.lshr1022 = lshr i32 %bf.load1021, 16, !dbg !10964
  %bf.clear1023 = and i32 %bf.lshr1022, 255, !dbg !10964
  br label %cond.end1024, !dbg !10964

cond.end1024:                                     ; preds = %cond.false1016, %cond.true1012
  %cond1025 = phi i32 [ %call1015, %cond.true1012 ], [ %bf.clear1023, %cond.false1016 ], !dbg !10964
  %idxprom1026 = zext i32 %cond1025 to i64, !dbg !10964
  %arrayidx1027 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1026, !dbg !10964
  %338 = load i8, i8* %arrayidx1027, align 1, !dbg !10964
  %conv1028 = zext i8 %338 to i32, !dbg !10964
  %cmp1029 = icmp eq i32 %conv1028, 17, !dbg !10964
  br i1 %cmp1029, label %land.lhs.true1031, label %if.then1369, !dbg !10964

land.lhs.true1031:                                ; preds = %cond.end1024, %cond.end996, %cond.end968, %cond.end940
  %339 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1032 = bitcast %union.tree_node* %339 to %struct.tree_common*, !dbg !10964
  %type1033 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1032, i32 0, i32 2, !dbg !10964
  %340 = load %union.tree_node*, %union.tree_node** %type1033, align 8, !dbg !10964
  %base1034 = bitcast %union.tree_node* %340 to %struct.tree_base*, !dbg !10964
  %341 = bitcast %struct.tree_base* %base1034 to i64*, !dbg !10964
  %bf.load1035 = load i64, i64* %341, align 8, !dbg !10964
  %bf.clear1036 = and i64 %bf.load1035, 65535, !dbg !10964
  %bf.cast1037 = trunc i64 %bf.clear1036 to i32, !dbg !10964
  %cmp1038 = icmp eq i32 %bf.cast1037, 14, !dbg !10964
  br i1 %cmp1038, label %cond.true1040, label %cond.false1044, !dbg !10964

cond.true1040:                                    ; preds = %land.lhs.true1031
  %342 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1041 = bitcast %union.tree_node* %342 to %struct.tree_common*, !dbg !10964
  %type1042 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1041, i32 0, i32 2, !dbg !10964
  %343 = load %union.tree_node*, %union.tree_node** %type1042, align 8, !dbg !10964
  %call1043 = call i32 @vector_type_mode(%union.tree_node* %343), !dbg !10964
  br label %cond.end1052, !dbg !10964

cond.false1044:                                   ; preds = %land.lhs.true1031
  %344 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1045 = bitcast %union.tree_node* %344 to %struct.tree_common*, !dbg !10964
  %type1046 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1045, i32 0, i32 2, !dbg !10964
  %345 = load %union.tree_node*, %union.tree_node** %type1046, align 8, !dbg !10964
  %type1047 = bitcast %union.tree_node* %345 to %struct.tree_type*, !dbg !10964
  %mode1048 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1047, i32 0, i32 6, !dbg !10964
  %bf.load1049 = load i32, i32* %mode1048, align 4, !dbg !10964
  %bf.lshr1050 = lshr i32 %bf.load1049, 16, !dbg !10964
  %bf.clear1051 = and i32 %bf.lshr1050, 255, !dbg !10964
  br label %cond.end1052, !dbg !10964

cond.end1052:                                     ; preds = %cond.false1044, %cond.true1040
  %cond1053 = phi i32 [ %call1043, %cond.true1040 ], [ %bf.clear1051, %cond.false1044 ], !dbg !10964
  %idxprom1054 = zext i32 %cond1053 to i64, !dbg !10964
  %arrayidx1055 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1054, !dbg !10964
  %346 = load i8, i8* %arrayidx1055, align 1, !dbg !10964
  %conv1056 = zext i8 %346 to i32, !dbg !10964
  %cmp1057 = icmp eq i32 %conv1056, 8, !dbg !10964
  br i1 %cmp1057, label %cond.true1087, label %lor.lhs.false1059, !dbg !10964

lor.lhs.false1059:                                ; preds = %cond.end1052
  %347 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1060 = bitcast %union.tree_node* %347 to %struct.tree_common*, !dbg !10964
  %type1061 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1060, i32 0, i32 2, !dbg !10964
  %348 = load %union.tree_node*, %union.tree_node** %type1061, align 8, !dbg !10964
  %base1062 = bitcast %union.tree_node* %348 to %struct.tree_base*, !dbg !10964
  %349 = bitcast %struct.tree_base* %base1062 to i64*, !dbg !10964
  %bf.load1063 = load i64, i64* %349, align 8, !dbg !10964
  %bf.clear1064 = and i64 %bf.load1063, 65535, !dbg !10964
  %bf.cast1065 = trunc i64 %bf.clear1064 to i32, !dbg !10964
  %cmp1066 = icmp eq i32 %bf.cast1065, 14, !dbg !10964
  br i1 %cmp1066, label %cond.true1068, label %cond.false1072, !dbg !10964

cond.true1068:                                    ; preds = %lor.lhs.false1059
  %350 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1069 = bitcast %union.tree_node* %350 to %struct.tree_common*, !dbg !10964
  %type1070 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1069, i32 0, i32 2, !dbg !10964
  %351 = load %union.tree_node*, %union.tree_node** %type1070, align 8, !dbg !10964
  %call1071 = call i32 @vector_type_mode(%union.tree_node* %351), !dbg !10964
  br label %cond.end1080, !dbg !10964

cond.false1072:                                   ; preds = %lor.lhs.false1059
  %352 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1073 = bitcast %union.tree_node* %352 to %struct.tree_common*, !dbg !10964
  %type1074 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1073, i32 0, i32 2, !dbg !10964
  %353 = load %union.tree_node*, %union.tree_node** %type1074, align 8, !dbg !10964
  %type1075 = bitcast %union.tree_node* %353 to %struct.tree_type*, !dbg !10964
  %mode1076 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1075, i32 0, i32 6, !dbg !10964
  %bf.load1077 = load i32, i32* %mode1076, align 4, !dbg !10964
  %bf.lshr1078 = lshr i32 %bf.load1077, 16, !dbg !10964
  %bf.clear1079 = and i32 %bf.lshr1078, 255, !dbg !10964
  br label %cond.end1080, !dbg !10964

cond.end1080:                                     ; preds = %cond.false1072, %cond.true1068
  %cond1081 = phi i32 [ %call1071, %cond.true1068 ], [ %bf.clear1079, %cond.false1072 ], !dbg !10964
  %idxprom1082 = zext i32 %cond1081 to i64, !dbg !10964
  %arrayidx1083 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1082, !dbg !10964
  %354 = load i8, i8* %arrayidx1083, align 1, !dbg !10964
  %conv1084 = zext i8 %354 to i32, !dbg !10964
  %cmp1085 = icmp eq i32 %conv1084, 9, !dbg !10964
  br i1 %cmp1085, label %cond.true1087, label %cond.false1110, !dbg !10964

cond.true1087:                                    ; preds = %cond.end1080, %cond.end1052
  %355 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1088 = bitcast %union.tree_node* %355 to %struct.tree_common*, !dbg !10964
  %type1089 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1088, i32 0, i32 2, !dbg !10964
  %356 = load %union.tree_node*, %union.tree_node** %type1089, align 8, !dbg !10964
  %base1090 = bitcast %union.tree_node* %356 to %struct.tree_base*, !dbg !10964
  %357 = bitcast %struct.tree_base* %base1090 to i64*, !dbg !10964
  %bf.load1091 = load i64, i64* %357, align 8, !dbg !10964
  %bf.clear1092 = and i64 %bf.load1091, 65535, !dbg !10964
  %bf.cast1093 = trunc i64 %bf.clear1092 to i32, !dbg !10964
  %cmp1094 = icmp eq i32 %bf.cast1093, 14, !dbg !10964
  br i1 %cmp1094, label %cond.true1096, label %cond.false1100, !dbg !10964

cond.true1096:                                    ; preds = %cond.true1087
  %358 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1097 = bitcast %union.tree_node* %358 to %struct.tree_common*, !dbg !10964
  %type1098 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1097, i32 0, i32 2, !dbg !10964
  %359 = load %union.tree_node*, %union.tree_node** %type1098, align 8, !dbg !10964
  %call1099 = call i32 @vector_type_mode(%union.tree_node* %359), !dbg !10964
  br label %cond.end1108, !dbg !10964

cond.false1100:                                   ; preds = %cond.true1087
  %360 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1101 = bitcast %union.tree_node* %360 to %struct.tree_common*, !dbg !10964
  %type1102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1101, i32 0, i32 2, !dbg !10964
  %361 = load %union.tree_node*, %union.tree_node** %type1102, align 8, !dbg !10964
  %type1103 = bitcast %union.tree_node* %361 to %struct.tree_type*, !dbg !10964
  %mode1104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1103, i32 0, i32 6, !dbg !10964
  %bf.load1105 = load i32, i32* %mode1104, align 4, !dbg !10964
  %bf.lshr1106 = lshr i32 %bf.load1105, 16, !dbg !10964
  %bf.clear1107 = and i32 %bf.lshr1106, 255, !dbg !10964
  br label %cond.end1108, !dbg !10964

cond.end1108:                                     ; preds = %cond.false1100, %cond.true1096
  %cond1109 = phi i32 [ %call1099, %cond.true1096 ], [ %bf.clear1107, %cond.false1100 ], !dbg !10964
  br label %cond.end1136, !dbg !10964

cond.false1110:                                   ; preds = %cond.end1080
  %362 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1111 = bitcast %union.tree_node* %362 to %struct.tree_common*, !dbg !10964
  %type1112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1111, i32 0, i32 2, !dbg !10964
  %363 = load %union.tree_node*, %union.tree_node** %type1112, align 8, !dbg !10964
  %base1113 = bitcast %union.tree_node* %363 to %struct.tree_base*, !dbg !10964
  %364 = bitcast %struct.tree_base* %base1113 to i64*, !dbg !10964
  %bf.load1114 = load i64, i64* %364, align 8, !dbg !10964
  %bf.clear1115 = and i64 %bf.load1114, 65535, !dbg !10964
  %bf.cast1116 = trunc i64 %bf.clear1115 to i32, !dbg !10964
  %cmp1117 = icmp eq i32 %bf.cast1116, 14, !dbg !10964
  br i1 %cmp1117, label %cond.true1119, label %cond.false1123, !dbg !10964

cond.true1119:                                    ; preds = %cond.false1110
  %365 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1120 = bitcast %union.tree_node* %365 to %struct.tree_common*, !dbg !10964
  %type1121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1120, i32 0, i32 2, !dbg !10964
  %366 = load %union.tree_node*, %union.tree_node** %type1121, align 8, !dbg !10964
  %call1122 = call i32 @vector_type_mode(%union.tree_node* %366), !dbg !10964
  br label %cond.end1131, !dbg !10964

cond.false1123:                                   ; preds = %cond.false1110
  %367 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1124 = bitcast %union.tree_node* %367 to %struct.tree_common*, !dbg !10964
  %type1125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1124, i32 0, i32 2, !dbg !10964
  %368 = load %union.tree_node*, %union.tree_node** %type1125, align 8, !dbg !10964
  %type1126 = bitcast %union.tree_node* %368 to %struct.tree_type*, !dbg !10964
  %mode1127 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1126, i32 0, i32 6, !dbg !10964
  %bf.load1128 = load i32, i32* %mode1127, align 4, !dbg !10964
  %bf.lshr1129 = lshr i32 %bf.load1128, 16, !dbg !10964
  %bf.clear1130 = and i32 %bf.lshr1129, 255, !dbg !10964
  br label %cond.end1131, !dbg !10964

cond.end1131:                                     ; preds = %cond.false1123, %cond.true1119
  %cond1132 = phi i32 [ %call1122, %cond.true1119 ], [ %bf.clear1130, %cond.false1123 ], !dbg !10964
  %idxprom1133 = zext i32 %cond1132 to i64, !dbg !10964
  %arrayidx1134 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1133, !dbg !10964
  %369 = load i8, i8* %arrayidx1134, align 1, !dbg !10964
  %conv1135 = zext i8 %369 to i32, !dbg !10964
  br label %cond.end1136, !dbg !10964

cond.end1136:                                     ; preds = %cond.end1131, %cond.end1108
  %cond1137 = phi i32 [ %cond1109, %cond.end1108 ], [ %conv1135, %cond.end1131 ], !dbg !10964
  %idxprom1138 = zext i32 %cond1137 to i64, !dbg !10964
  %arrayidx1139 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1138, !dbg !10964
  %370 = load i8, i8* %arrayidx1139, align 1, !dbg !10964
  %conv1140 = zext i8 %370 to i32, !dbg !10964
  %cmp1141 = icmp eq i32 %conv1140, 9, !dbg !10964
  br i1 %cmp1141, label %cond.true1143, label %cond.false1252, !dbg !10964

cond.true1143:                                    ; preds = %cond.end1136
  %371 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1144 = bitcast %union.tree_node* %371 to %struct.tree_common*, !dbg !10964
  %type1145 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1144, i32 0, i32 2, !dbg !10964
  %372 = load %union.tree_node*, %union.tree_node** %type1145, align 8, !dbg !10964
  %base1146 = bitcast %union.tree_node* %372 to %struct.tree_base*, !dbg !10964
  %373 = bitcast %struct.tree_base* %base1146 to i64*, !dbg !10964
  %bf.load1147 = load i64, i64* %373, align 8, !dbg !10964
  %bf.clear1148 = and i64 %bf.load1147, 65535, !dbg !10964
  %bf.cast1149 = trunc i64 %bf.clear1148 to i32, !dbg !10964
  %cmp1150 = icmp eq i32 %bf.cast1149, 14, !dbg !10964
  br i1 %cmp1150, label %cond.true1152, label %cond.false1156, !dbg !10964

cond.true1152:                                    ; preds = %cond.true1143
  %374 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1153 = bitcast %union.tree_node* %374 to %struct.tree_common*, !dbg !10964
  %type1154 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1153, i32 0, i32 2, !dbg !10964
  %375 = load %union.tree_node*, %union.tree_node** %type1154, align 8, !dbg !10964
  %call1155 = call i32 @vector_type_mode(%union.tree_node* %375), !dbg !10964
  br label %cond.end1164, !dbg !10964

cond.false1156:                                   ; preds = %cond.true1143
  %376 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1157 = bitcast %union.tree_node* %376 to %struct.tree_common*, !dbg !10964
  %type1158 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1157, i32 0, i32 2, !dbg !10964
  %377 = load %union.tree_node*, %union.tree_node** %type1158, align 8, !dbg !10964
  %type1159 = bitcast %union.tree_node* %377 to %struct.tree_type*, !dbg !10964
  %mode1160 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1159, i32 0, i32 6, !dbg !10964
  %bf.load1161 = load i32, i32* %mode1160, align 4, !dbg !10964
  %bf.lshr1162 = lshr i32 %bf.load1161, 16, !dbg !10964
  %bf.clear1163 = and i32 %bf.lshr1162, 255, !dbg !10964
  br label %cond.end1164, !dbg !10964

cond.end1164:                                     ; preds = %cond.false1156, %cond.true1152
  %cond1165 = phi i32 [ %call1155, %cond.true1152 ], [ %bf.clear1163, %cond.false1156 ], !dbg !10964
  %idxprom1166 = zext i32 %cond1165 to i64, !dbg !10964
  %arrayidx1167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1166, !dbg !10964
  %378 = load i8, i8* %arrayidx1167, align 1, !dbg !10964
  %conv1168 = zext i8 %378 to i32, !dbg !10964
  %cmp1169 = icmp eq i32 %conv1168, 8, !dbg !10964
  br i1 %cmp1169, label %cond.true1199, label %lor.lhs.false1171, !dbg !10964

lor.lhs.false1171:                                ; preds = %cond.end1164
  %379 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1172 = bitcast %union.tree_node* %379 to %struct.tree_common*, !dbg !10964
  %type1173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1172, i32 0, i32 2, !dbg !10964
  %380 = load %union.tree_node*, %union.tree_node** %type1173, align 8, !dbg !10964
  %base1174 = bitcast %union.tree_node* %380 to %struct.tree_base*, !dbg !10964
  %381 = bitcast %struct.tree_base* %base1174 to i64*, !dbg !10964
  %bf.load1175 = load i64, i64* %381, align 8, !dbg !10964
  %bf.clear1176 = and i64 %bf.load1175, 65535, !dbg !10964
  %bf.cast1177 = trunc i64 %bf.clear1176 to i32, !dbg !10964
  %cmp1178 = icmp eq i32 %bf.cast1177, 14, !dbg !10964
  br i1 %cmp1178, label %cond.true1180, label %cond.false1184, !dbg !10964

cond.true1180:                                    ; preds = %lor.lhs.false1171
  %382 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1181 = bitcast %union.tree_node* %382 to %struct.tree_common*, !dbg !10964
  %type1182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1181, i32 0, i32 2, !dbg !10964
  %383 = load %union.tree_node*, %union.tree_node** %type1182, align 8, !dbg !10964
  %call1183 = call i32 @vector_type_mode(%union.tree_node* %383), !dbg !10964
  br label %cond.end1192, !dbg !10964

cond.false1184:                                   ; preds = %lor.lhs.false1171
  %384 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1185 = bitcast %union.tree_node* %384 to %struct.tree_common*, !dbg !10964
  %type1186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1185, i32 0, i32 2, !dbg !10964
  %385 = load %union.tree_node*, %union.tree_node** %type1186, align 8, !dbg !10964
  %type1187 = bitcast %union.tree_node* %385 to %struct.tree_type*, !dbg !10964
  %mode1188 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1187, i32 0, i32 6, !dbg !10964
  %bf.load1189 = load i32, i32* %mode1188, align 4, !dbg !10964
  %bf.lshr1190 = lshr i32 %bf.load1189, 16, !dbg !10964
  %bf.clear1191 = and i32 %bf.lshr1190, 255, !dbg !10964
  br label %cond.end1192, !dbg !10964

cond.end1192:                                     ; preds = %cond.false1184, %cond.true1180
  %cond1193 = phi i32 [ %call1183, %cond.true1180 ], [ %bf.clear1191, %cond.false1184 ], !dbg !10964
  %idxprom1194 = zext i32 %cond1193 to i64, !dbg !10964
  %arrayidx1195 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1194, !dbg !10964
  %386 = load i8, i8* %arrayidx1195, align 1, !dbg !10964
  %conv1196 = zext i8 %386 to i32, !dbg !10964
  %cmp1197 = icmp eq i32 %conv1196, 9, !dbg !10964
  br i1 %cmp1197, label %cond.true1199, label %cond.false1222, !dbg !10964

cond.true1199:                                    ; preds = %cond.end1192, %cond.end1164
  %387 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1200 = bitcast %union.tree_node* %387 to %struct.tree_common*, !dbg !10964
  %type1201 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1200, i32 0, i32 2, !dbg !10964
  %388 = load %union.tree_node*, %union.tree_node** %type1201, align 8, !dbg !10964
  %base1202 = bitcast %union.tree_node* %388 to %struct.tree_base*, !dbg !10964
  %389 = bitcast %struct.tree_base* %base1202 to i64*, !dbg !10964
  %bf.load1203 = load i64, i64* %389, align 8, !dbg !10964
  %bf.clear1204 = and i64 %bf.load1203, 65535, !dbg !10964
  %bf.cast1205 = trunc i64 %bf.clear1204 to i32, !dbg !10964
  %cmp1206 = icmp eq i32 %bf.cast1205, 14, !dbg !10964
  br i1 %cmp1206, label %cond.true1208, label %cond.false1212, !dbg !10964

cond.true1208:                                    ; preds = %cond.true1199
  %390 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1209 = bitcast %union.tree_node* %390 to %struct.tree_common*, !dbg !10964
  %type1210 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1209, i32 0, i32 2, !dbg !10964
  %391 = load %union.tree_node*, %union.tree_node** %type1210, align 8, !dbg !10964
  %call1211 = call i32 @vector_type_mode(%union.tree_node* %391), !dbg !10964
  br label %cond.end1220, !dbg !10964

cond.false1212:                                   ; preds = %cond.true1199
  %392 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1213 = bitcast %union.tree_node* %392 to %struct.tree_common*, !dbg !10964
  %type1214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1213, i32 0, i32 2, !dbg !10964
  %393 = load %union.tree_node*, %union.tree_node** %type1214, align 8, !dbg !10964
  %type1215 = bitcast %union.tree_node* %393 to %struct.tree_type*, !dbg !10964
  %mode1216 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1215, i32 0, i32 6, !dbg !10964
  %bf.load1217 = load i32, i32* %mode1216, align 4, !dbg !10964
  %bf.lshr1218 = lshr i32 %bf.load1217, 16, !dbg !10964
  %bf.clear1219 = and i32 %bf.lshr1218, 255, !dbg !10964
  br label %cond.end1220, !dbg !10964

cond.end1220:                                     ; preds = %cond.false1212, %cond.true1208
  %cond1221 = phi i32 [ %call1211, %cond.true1208 ], [ %bf.clear1219, %cond.false1212 ], !dbg !10964
  br label %cond.end1248, !dbg !10964

cond.false1222:                                   ; preds = %cond.end1192
  %394 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1223 = bitcast %union.tree_node* %394 to %struct.tree_common*, !dbg !10964
  %type1224 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1223, i32 0, i32 2, !dbg !10964
  %395 = load %union.tree_node*, %union.tree_node** %type1224, align 8, !dbg !10964
  %base1225 = bitcast %union.tree_node* %395 to %struct.tree_base*, !dbg !10964
  %396 = bitcast %struct.tree_base* %base1225 to i64*, !dbg !10964
  %bf.load1226 = load i64, i64* %396, align 8, !dbg !10964
  %bf.clear1227 = and i64 %bf.load1226, 65535, !dbg !10964
  %bf.cast1228 = trunc i64 %bf.clear1227 to i32, !dbg !10964
  %cmp1229 = icmp eq i32 %bf.cast1228, 14, !dbg !10964
  br i1 %cmp1229, label %cond.true1231, label %cond.false1235, !dbg !10964

cond.true1231:                                    ; preds = %cond.false1222
  %397 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1232 = bitcast %union.tree_node* %397 to %struct.tree_common*, !dbg !10964
  %type1233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1232, i32 0, i32 2, !dbg !10964
  %398 = load %union.tree_node*, %union.tree_node** %type1233, align 8, !dbg !10964
  %call1234 = call i32 @vector_type_mode(%union.tree_node* %398), !dbg !10964
  br label %cond.end1243, !dbg !10964

cond.false1235:                                   ; preds = %cond.false1222
  %399 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1236 = bitcast %union.tree_node* %399 to %struct.tree_common*, !dbg !10964
  %type1237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1236, i32 0, i32 2, !dbg !10964
  %400 = load %union.tree_node*, %union.tree_node** %type1237, align 8, !dbg !10964
  %type1238 = bitcast %union.tree_node* %400 to %struct.tree_type*, !dbg !10964
  %mode1239 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1238, i32 0, i32 6, !dbg !10964
  %bf.load1240 = load i32, i32* %mode1239, align 4, !dbg !10964
  %bf.lshr1241 = lshr i32 %bf.load1240, 16, !dbg !10964
  %bf.clear1242 = and i32 %bf.lshr1241, 255, !dbg !10964
  br label %cond.end1243, !dbg !10964

cond.end1243:                                     ; preds = %cond.false1235, %cond.true1231
  %cond1244 = phi i32 [ %call1234, %cond.true1231 ], [ %bf.clear1242, %cond.false1235 ], !dbg !10964
  %idxprom1245 = zext i32 %cond1244 to i64, !dbg !10964
  %arrayidx1246 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1245, !dbg !10964
  %401 = load i8, i8* %arrayidx1246, align 1, !dbg !10964
  %conv1247 = zext i8 %401 to i32, !dbg !10964
  br label %cond.end1248, !dbg !10964

cond.end1248:                                     ; preds = %cond.end1243, %cond.end1220
  %cond1249 = phi i32 [ %cond1221, %cond.end1220 ], [ %conv1247, %cond.end1243 ], !dbg !10964
  %sub1250 = sub i32 %cond1249, 42, !dbg !10964
  %add1251 = add i32 %sub1250, 4, !dbg !10964
  br label %cond.end1360, !dbg !10964

cond.false1252:                                   ; preds = %cond.end1136
  %402 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1253 = bitcast %union.tree_node* %402 to %struct.tree_common*, !dbg !10964
  %type1254 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1253, i32 0, i32 2, !dbg !10964
  %403 = load %union.tree_node*, %union.tree_node** %type1254, align 8, !dbg !10964
  %base1255 = bitcast %union.tree_node* %403 to %struct.tree_base*, !dbg !10964
  %404 = bitcast %struct.tree_base* %base1255 to i64*, !dbg !10964
  %bf.load1256 = load i64, i64* %404, align 8, !dbg !10964
  %bf.clear1257 = and i64 %bf.load1256, 65535, !dbg !10964
  %bf.cast1258 = trunc i64 %bf.clear1257 to i32, !dbg !10964
  %cmp1259 = icmp eq i32 %bf.cast1258, 14, !dbg !10964
  br i1 %cmp1259, label %cond.true1261, label %cond.false1265, !dbg !10964

cond.true1261:                                    ; preds = %cond.false1252
  %405 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1262 = bitcast %union.tree_node* %405 to %struct.tree_common*, !dbg !10964
  %type1263 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1262, i32 0, i32 2, !dbg !10964
  %406 = load %union.tree_node*, %union.tree_node** %type1263, align 8, !dbg !10964
  %call1264 = call i32 @vector_type_mode(%union.tree_node* %406), !dbg !10964
  br label %cond.end1273, !dbg !10964

cond.false1265:                                   ; preds = %cond.false1252
  %407 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1266 = bitcast %union.tree_node* %407 to %struct.tree_common*, !dbg !10964
  %type1267 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1266, i32 0, i32 2, !dbg !10964
  %408 = load %union.tree_node*, %union.tree_node** %type1267, align 8, !dbg !10964
  %type1268 = bitcast %union.tree_node* %408 to %struct.tree_type*, !dbg !10964
  %mode1269 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1268, i32 0, i32 6, !dbg !10964
  %bf.load1270 = load i32, i32* %mode1269, align 4, !dbg !10964
  %bf.lshr1271 = lshr i32 %bf.load1270, 16, !dbg !10964
  %bf.clear1272 = and i32 %bf.lshr1271, 255, !dbg !10964
  br label %cond.end1273, !dbg !10964

cond.end1273:                                     ; preds = %cond.false1265, %cond.true1261
  %cond1274 = phi i32 [ %call1264, %cond.true1261 ], [ %bf.clear1272, %cond.false1265 ], !dbg !10964
  %idxprom1275 = zext i32 %cond1274 to i64, !dbg !10964
  %arrayidx1276 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1275, !dbg !10964
  %409 = load i8, i8* %arrayidx1276, align 1, !dbg !10964
  %conv1277 = zext i8 %409 to i32, !dbg !10964
  %cmp1278 = icmp eq i32 %conv1277, 8, !dbg !10964
  br i1 %cmp1278, label %cond.true1308, label %lor.lhs.false1280, !dbg !10964

lor.lhs.false1280:                                ; preds = %cond.end1273
  %410 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1281 = bitcast %union.tree_node* %410 to %struct.tree_common*, !dbg !10964
  %type1282 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1281, i32 0, i32 2, !dbg !10964
  %411 = load %union.tree_node*, %union.tree_node** %type1282, align 8, !dbg !10964
  %base1283 = bitcast %union.tree_node* %411 to %struct.tree_base*, !dbg !10964
  %412 = bitcast %struct.tree_base* %base1283 to i64*, !dbg !10964
  %bf.load1284 = load i64, i64* %412, align 8, !dbg !10964
  %bf.clear1285 = and i64 %bf.load1284, 65535, !dbg !10964
  %bf.cast1286 = trunc i64 %bf.clear1285 to i32, !dbg !10964
  %cmp1287 = icmp eq i32 %bf.cast1286, 14, !dbg !10964
  br i1 %cmp1287, label %cond.true1289, label %cond.false1293, !dbg !10964

cond.true1289:                                    ; preds = %lor.lhs.false1280
  %413 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1290 = bitcast %union.tree_node* %413 to %struct.tree_common*, !dbg !10964
  %type1291 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1290, i32 0, i32 2, !dbg !10964
  %414 = load %union.tree_node*, %union.tree_node** %type1291, align 8, !dbg !10964
  %call1292 = call i32 @vector_type_mode(%union.tree_node* %414), !dbg !10964
  br label %cond.end1301, !dbg !10964

cond.false1293:                                   ; preds = %lor.lhs.false1280
  %415 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1294 = bitcast %union.tree_node* %415 to %struct.tree_common*, !dbg !10964
  %type1295 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1294, i32 0, i32 2, !dbg !10964
  %416 = load %union.tree_node*, %union.tree_node** %type1295, align 8, !dbg !10964
  %type1296 = bitcast %union.tree_node* %416 to %struct.tree_type*, !dbg !10964
  %mode1297 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1296, i32 0, i32 6, !dbg !10964
  %bf.load1298 = load i32, i32* %mode1297, align 4, !dbg !10964
  %bf.lshr1299 = lshr i32 %bf.load1298, 16, !dbg !10964
  %bf.clear1300 = and i32 %bf.lshr1299, 255, !dbg !10964
  br label %cond.end1301, !dbg !10964

cond.end1301:                                     ; preds = %cond.false1293, %cond.true1289
  %cond1302 = phi i32 [ %call1292, %cond.true1289 ], [ %bf.clear1300, %cond.false1293 ], !dbg !10964
  %idxprom1303 = zext i32 %cond1302 to i64, !dbg !10964
  %arrayidx1304 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1303, !dbg !10964
  %417 = load i8, i8* %arrayidx1304, align 1, !dbg !10964
  %conv1305 = zext i8 %417 to i32, !dbg !10964
  %cmp1306 = icmp eq i32 %conv1305, 9, !dbg !10964
  br i1 %cmp1306, label %cond.true1308, label %cond.false1331, !dbg !10964

cond.true1308:                                    ; preds = %cond.end1301, %cond.end1273
  %418 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1309 = bitcast %union.tree_node* %418 to %struct.tree_common*, !dbg !10964
  %type1310 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1309, i32 0, i32 2, !dbg !10964
  %419 = load %union.tree_node*, %union.tree_node** %type1310, align 8, !dbg !10964
  %base1311 = bitcast %union.tree_node* %419 to %struct.tree_base*, !dbg !10964
  %420 = bitcast %struct.tree_base* %base1311 to i64*, !dbg !10964
  %bf.load1312 = load i64, i64* %420, align 8, !dbg !10964
  %bf.clear1313 = and i64 %bf.load1312, 65535, !dbg !10964
  %bf.cast1314 = trunc i64 %bf.clear1313 to i32, !dbg !10964
  %cmp1315 = icmp eq i32 %bf.cast1314, 14, !dbg !10964
  br i1 %cmp1315, label %cond.true1317, label %cond.false1321, !dbg !10964

cond.true1317:                                    ; preds = %cond.true1308
  %421 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1318 = bitcast %union.tree_node* %421 to %struct.tree_common*, !dbg !10964
  %type1319 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1318, i32 0, i32 2, !dbg !10964
  %422 = load %union.tree_node*, %union.tree_node** %type1319, align 8, !dbg !10964
  %call1320 = call i32 @vector_type_mode(%union.tree_node* %422), !dbg !10964
  br label %cond.end1329, !dbg !10964

cond.false1321:                                   ; preds = %cond.true1308
  %423 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1322 = bitcast %union.tree_node* %423 to %struct.tree_common*, !dbg !10964
  %type1323 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1322, i32 0, i32 2, !dbg !10964
  %424 = load %union.tree_node*, %union.tree_node** %type1323, align 8, !dbg !10964
  %type1324 = bitcast %union.tree_node* %424 to %struct.tree_type*, !dbg !10964
  %mode1325 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1324, i32 0, i32 6, !dbg !10964
  %bf.load1326 = load i32, i32* %mode1325, align 4, !dbg !10964
  %bf.lshr1327 = lshr i32 %bf.load1326, 16, !dbg !10964
  %bf.clear1328 = and i32 %bf.lshr1327, 255, !dbg !10964
  br label %cond.end1329, !dbg !10964

cond.end1329:                                     ; preds = %cond.false1321, %cond.true1317
  %cond1330 = phi i32 [ %call1320, %cond.true1317 ], [ %bf.clear1328, %cond.false1321 ], !dbg !10964
  br label %cond.end1357, !dbg !10964

cond.false1331:                                   ; preds = %cond.end1301
  %425 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1332 = bitcast %union.tree_node* %425 to %struct.tree_common*, !dbg !10964
  %type1333 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1332, i32 0, i32 2, !dbg !10964
  %426 = load %union.tree_node*, %union.tree_node** %type1333, align 8, !dbg !10964
  %base1334 = bitcast %union.tree_node* %426 to %struct.tree_base*, !dbg !10964
  %427 = bitcast %struct.tree_base* %base1334 to i64*, !dbg !10964
  %bf.load1335 = load i64, i64* %427, align 8, !dbg !10964
  %bf.clear1336 = and i64 %bf.load1335, 65535, !dbg !10964
  %bf.cast1337 = trunc i64 %bf.clear1336 to i32, !dbg !10964
  %cmp1338 = icmp eq i32 %bf.cast1337, 14, !dbg !10964
  br i1 %cmp1338, label %cond.true1340, label %cond.false1344, !dbg !10964

cond.true1340:                                    ; preds = %cond.false1331
  %428 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1341 = bitcast %union.tree_node* %428 to %struct.tree_common*, !dbg !10964
  %type1342 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1341, i32 0, i32 2, !dbg !10964
  %429 = load %union.tree_node*, %union.tree_node** %type1342, align 8, !dbg !10964
  %call1343 = call i32 @vector_type_mode(%union.tree_node* %429), !dbg !10964
  br label %cond.end1352, !dbg !10964

cond.false1344:                                   ; preds = %cond.false1331
  %430 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10964
  %common1345 = bitcast %union.tree_node* %430 to %struct.tree_common*, !dbg !10964
  %type1346 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1345, i32 0, i32 2, !dbg !10964
  %431 = load %union.tree_node*, %union.tree_node** %type1346, align 8, !dbg !10964
  %type1347 = bitcast %union.tree_node* %431 to %struct.tree_type*, !dbg !10964
  %mode1348 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1347, i32 0, i32 6, !dbg !10964
  %bf.load1349 = load i32, i32* %mode1348, align 4, !dbg !10964
  %bf.lshr1350 = lshr i32 %bf.load1349, 16, !dbg !10964
  %bf.clear1351 = and i32 %bf.lshr1350, 255, !dbg !10964
  br label %cond.end1352, !dbg !10964

cond.end1352:                                     ; preds = %cond.false1344, %cond.true1340
  %cond1353 = phi i32 [ %call1343, %cond.true1340 ], [ %bf.clear1351, %cond.false1344 ], !dbg !10964
  %idxprom1354 = zext i32 %cond1353 to i64, !dbg !10964
  %arrayidx1355 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1354, !dbg !10964
  %432 = load i8, i8* %arrayidx1355, align 1, !dbg !10964
  %conv1356 = zext i8 %432 to i32, !dbg !10964
  br label %cond.end1357, !dbg !10964

cond.end1357:                                     ; preds = %cond.end1352, %cond.end1329
  %cond1358 = phi i32 [ %cond1330, %cond.end1329 ], [ %conv1356, %cond.end1352 ], !dbg !10964
  %sub1359 = sub i32 %cond1358, 38, !dbg !10964
  br label %cond.end1360, !dbg !10964

cond.end1360:                                     ; preds = %cond.end1357, %cond.end1248
  %cond1361 = phi i32 [ %add1251, %cond.end1248 ], [ %sub1359, %cond.end1357 ], !dbg !10964
  %idxprom1362 = zext i32 %cond1361 to i64, !dbg !10964
  %arrayidx1363 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom1362, !dbg !10964
  %433 = load %struct.real_format*, %struct.real_format** %arrayidx1363, align 8, !dbg !10964
  %has_inf1364 = getelementptr inbounds %struct.real_format, %struct.real_format* %433, i32 0, i32 12, !dbg !10964
  %434 = load i8, i8* %has_inf1364, align 1, !dbg !10964
  %conv1365 = zext i8 %434 to i32, !dbg !10964
  %tobool1366 = icmp ne i32 %conv1365, 0, !dbg !10964
  br i1 %tobool1366, label %land.lhs.true1367, label %if.then1369, !dbg !10964

land.lhs.true1367:                                ; preds = %cond.end1360
  %435 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10964
  %tobool1368 = icmp ne i32 %435, 0, !dbg !10964
  br i1 %tobool1368, label %if.then1369, label %if.end1371, !dbg !10965

if.then1369:                                      ; preds = %land.lhs.true1367, %cond.end1360, %cond.end1024
  %436 = load i32, i32* %loc.addr, align 4, !dbg !10966
  %437 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10967
  %438 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10968
  %439 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10969
  %call1370 = call %union.tree_node* @omit_one_operand_loc(i32 %436, %union.tree_node* %437, %union.tree_node* %438, %union.tree_node* %439), !dbg !10970
  store %union.tree_node* %call1370, %union.tree_node** %retval, align 8, !dbg !10971
  br label %return, !dbg !10971

if.end1371:                                       ; preds = %land.lhs.true1367, %land.lhs.true917
  %440 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10972
  %base1372 = bitcast %union.tree_node* %440 to %struct.tree_base*, !dbg !10972
  %441 = bitcast %struct.tree_base* %base1372 to i64*, !dbg !10972
  %bf.load1373 = load i64, i64* %441, align 8, !dbg !10972
  %bf.clear1374 = and i64 %bf.load1373, 65535, !dbg !10972
  %bf.cast1375 = trunc i64 %bf.clear1374 to i32, !dbg !10972
  %cmp1376 = icmp eq i32 %bf.cast1375, 24, !dbg !10974
  br i1 %cmp1376, label %if.then1378, label %if.end1388, !dbg !10975

if.then1378:                                      ; preds = %if.end1371
  %442 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10976
  %real_cst1379 = bitcast %union.tree_node* %442 to %struct.tree_real_cst*, !dbg !10976
  %real_cst_ptr1380 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst1379, i32 0, i32 1, !dbg !10976
  %443 = load %struct.real_value*, %struct.real_value** %real_cst_ptr1380, align 8, !dbg !10976
  %444 = bitcast %struct.real_value* %r to i8*, !dbg !10976
  %445 = bitcast %struct.real_value* %443 to i8*, !dbg !10976
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %444, i8* align 8 %445, i64 32, i1 false), !dbg !10976
  %call1381 = call zeroext i8 @real_isfinite(%struct.real_value* %r), !dbg !10978
  %conv1382 = zext i8 %call1381 to i32, !dbg !10978
  %tobool1383 = icmp ne i32 %conv1382, 0, !dbg !10978
  br i1 %tobool1383, label %cond.true1384, label %cond.false1385, !dbg !10978

cond.true1384:                                    ; preds = %if.then1378
  %446 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10979
  br label %cond.end1386, !dbg !10978

cond.false1385:                                   ; preds = %if.then1378
  %447 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10980
  br label %cond.end1386, !dbg !10978

cond.end1386:                                     ; preds = %cond.false1385, %cond.true1384
  %cond1387 = phi %union.tree_node* [ %446, %cond.true1384 ], [ %447, %cond.false1385 ], !dbg !10978
  store %union.tree_node* %cond1387, %union.tree_node** %retval, align 8, !dbg !10981
  br label %return, !dbg !10981

if.end1388:                                       ; preds = %if.end1371
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10982
  br label %return, !dbg !10982

sw.bb1389:                                        ; preds = %if.end
  %448 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1390 = bitcast %union.tree_node* %448 to %struct.tree_common*, !dbg !10983
  %type1391 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1390, i32 0, i32 2, !dbg !10983
  %449 = load %union.tree_node*, %union.tree_node** %type1391, align 8, !dbg !10983
  %base1392 = bitcast %union.tree_node* %449 to %struct.tree_base*, !dbg !10983
  %450 = bitcast %struct.tree_base* %base1392 to i64*, !dbg !10983
  %bf.load1393 = load i64, i64* %450, align 8, !dbg !10983
  %bf.clear1394 = and i64 %bf.load1393, 65535, !dbg !10983
  %bf.cast1395 = trunc i64 %bf.clear1394 to i32, !dbg !10983
  %cmp1396 = icmp eq i32 %bf.cast1395, 14, !dbg !10983
  br i1 %cmp1396, label %cond.true1398, label %cond.false1402, !dbg !10983

cond.true1398:                                    ; preds = %sw.bb1389
  %451 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1399 = bitcast %union.tree_node* %451 to %struct.tree_common*, !dbg !10983
  %type1400 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1399, i32 0, i32 2, !dbg !10983
  %452 = load %union.tree_node*, %union.tree_node** %type1400, align 8, !dbg !10983
  %call1401 = call i32 @vector_type_mode(%union.tree_node* %452), !dbg !10983
  br label %cond.end1410, !dbg !10983

cond.false1402:                                   ; preds = %sw.bb1389
  %453 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1403 = bitcast %union.tree_node* %453 to %struct.tree_common*, !dbg !10983
  %type1404 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1403, i32 0, i32 2, !dbg !10983
  %454 = load %union.tree_node*, %union.tree_node** %type1404, align 8, !dbg !10983
  %type1405 = bitcast %union.tree_node* %454 to %struct.tree_type*, !dbg !10983
  %mode1406 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1405, i32 0, i32 6, !dbg !10983
  %bf.load1407 = load i32, i32* %mode1406, align 4, !dbg !10983
  %bf.lshr1408 = lshr i32 %bf.load1407, 16, !dbg !10983
  %bf.clear1409 = and i32 %bf.lshr1408, 255, !dbg !10983
  br label %cond.end1410, !dbg !10983

cond.end1410:                                     ; preds = %cond.false1402, %cond.true1398
  %cond1411 = phi i32 [ %call1401, %cond.true1398 ], [ %bf.clear1409, %cond.false1402 ], !dbg !10983
  %idxprom1412 = zext i32 %cond1411 to i64, !dbg !10983
  %arrayidx1413 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1412, !dbg !10983
  %455 = load i8, i8* %arrayidx1413, align 1, !dbg !10983
  %conv1414 = zext i8 %455 to i32, !dbg !10983
  %cmp1415 = icmp eq i32 %conv1414, 8, !dbg !10983
  br i1 %cmp1415, label %land.lhs.true1501, label %lor.lhs.false1417, !dbg !10983

lor.lhs.false1417:                                ; preds = %cond.end1410
  %456 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1418 = bitcast %union.tree_node* %456 to %struct.tree_common*, !dbg !10983
  %type1419 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1418, i32 0, i32 2, !dbg !10983
  %457 = load %union.tree_node*, %union.tree_node** %type1419, align 8, !dbg !10983
  %base1420 = bitcast %union.tree_node* %457 to %struct.tree_base*, !dbg !10983
  %458 = bitcast %struct.tree_base* %base1420 to i64*, !dbg !10983
  %bf.load1421 = load i64, i64* %458, align 8, !dbg !10983
  %bf.clear1422 = and i64 %bf.load1421, 65535, !dbg !10983
  %bf.cast1423 = trunc i64 %bf.clear1422 to i32, !dbg !10983
  %cmp1424 = icmp eq i32 %bf.cast1423, 14, !dbg !10983
  br i1 %cmp1424, label %cond.true1426, label %cond.false1430, !dbg !10983

cond.true1426:                                    ; preds = %lor.lhs.false1417
  %459 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1427 = bitcast %union.tree_node* %459 to %struct.tree_common*, !dbg !10983
  %type1428 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1427, i32 0, i32 2, !dbg !10983
  %460 = load %union.tree_node*, %union.tree_node** %type1428, align 8, !dbg !10983
  %call1429 = call i32 @vector_type_mode(%union.tree_node* %460), !dbg !10983
  br label %cond.end1438, !dbg !10983

cond.false1430:                                   ; preds = %lor.lhs.false1417
  %461 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1431 = bitcast %union.tree_node* %461 to %struct.tree_common*, !dbg !10983
  %type1432 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1431, i32 0, i32 2, !dbg !10983
  %462 = load %union.tree_node*, %union.tree_node** %type1432, align 8, !dbg !10983
  %type1433 = bitcast %union.tree_node* %462 to %struct.tree_type*, !dbg !10983
  %mode1434 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1433, i32 0, i32 6, !dbg !10983
  %bf.load1435 = load i32, i32* %mode1434, align 4, !dbg !10983
  %bf.lshr1436 = lshr i32 %bf.load1435, 16, !dbg !10983
  %bf.clear1437 = and i32 %bf.lshr1436, 255, !dbg !10983
  br label %cond.end1438, !dbg !10983

cond.end1438:                                     ; preds = %cond.false1430, %cond.true1426
  %cond1439 = phi i32 [ %call1429, %cond.true1426 ], [ %bf.clear1437, %cond.false1430 ], !dbg !10983
  %idxprom1440 = zext i32 %cond1439 to i64, !dbg !10983
  %arrayidx1441 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1440, !dbg !10983
  %463 = load i8, i8* %arrayidx1441, align 1, !dbg !10983
  %conv1442 = zext i8 %463 to i32, !dbg !10983
  %cmp1443 = icmp eq i32 %conv1442, 9, !dbg !10983
  br i1 %cmp1443, label %land.lhs.true1501, label %lor.lhs.false1445, !dbg !10983

lor.lhs.false1445:                                ; preds = %cond.end1438
  %464 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1446 = bitcast %union.tree_node* %464 to %struct.tree_common*, !dbg !10983
  %type1447 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1446, i32 0, i32 2, !dbg !10983
  %465 = load %union.tree_node*, %union.tree_node** %type1447, align 8, !dbg !10983
  %base1448 = bitcast %union.tree_node* %465 to %struct.tree_base*, !dbg !10983
  %466 = bitcast %struct.tree_base* %base1448 to i64*, !dbg !10983
  %bf.load1449 = load i64, i64* %466, align 8, !dbg !10983
  %bf.clear1450 = and i64 %bf.load1449, 65535, !dbg !10983
  %bf.cast1451 = trunc i64 %bf.clear1450 to i32, !dbg !10983
  %cmp1452 = icmp eq i32 %bf.cast1451, 14, !dbg !10983
  br i1 %cmp1452, label %cond.true1454, label %cond.false1458, !dbg !10983

cond.true1454:                                    ; preds = %lor.lhs.false1445
  %467 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1455 = bitcast %union.tree_node* %467 to %struct.tree_common*, !dbg !10983
  %type1456 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1455, i32 0, i32 2, !dbg !10983
  %468 = load %union.tree_node*, %union.tree_node** %type1456, align 8, !dbg !10983
  %call1457 = call i32 @vector_type_mode(%union.tree_node* %468), !dbg !10983
  br label %cond.end1466, !dbg !10983

cond.false1458:                                   ; preds = %lor.lhs.false1445
  %469 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1459 = bitcast %union.tree_node* %469 to %struct.tree_common*, !dbg !10983
  %type1460 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1459, i32 0, i32 2, !dbg !10983
  %470 = load %union.tree_node*, %union.tree_node** %type1460, align 8, !dbg !10983
  %type1461 = bitcast %union.tree_node* %470 to %struct.tree_type*, !dbg !10983
  %mode1462 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1461, i32 0, i32 6, !dbg !10983
  %bf.load1463 = load i32, i32* %mode1462, align 4, !dbg !10983
  %bf.lshr1464 = lshr i32 %bf.load1463, 16, !dbg !10983
  %bf.clear1465 = and i32 %bf.lshr1464, 255, !dbg !10983
  br label %cond.end1466, !dbg !10983

cond.end1466:                                     ; preds = %cond.false1458, %cond.true1454
  %cond1467 = phi i32 [ %call1457, %cond.true1454 ], [ %bf.clear1465, %cond.false1458 ], !dbg !10983
  %idxprom1468 = zext i32 %cond1467 to i64, !dbg !10983
  %arrayidx1469 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1468, !dbg !10983
  %471 = load i8, i8* %arrayidx1469, align 1, !dbg !10983
  %conv1470 = zext i8 %471 to i32, !dbg !10983
  %cmp1471 = icmp eq i32 %conv1470, 11, !dbg !10983
  br i1 %cmp1471, label %land.lhs.true1501, label %lor.lhs.false1473, !dbg !10983

lor.lhs.false1473:                                ; preds = %cond.end1466
  %472 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1474 = bitcast %union.tree_node* %472 to %struct.tree_common*, !dbg !10983
  %type1475 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1474, i32 0, i32 2, !dbg !10983
  %473 = load %union.tree_node*, %union.tree_node** %type1475, align 8, !dbg !10983
  %base1476 = bitcast %union.tree_node* %473 to %struct.tree_base*, !dbg !10983
  %474 = bitcast %struct.tree_base* %base1476 to i64*, !dbg !10983
  %bf.load1477 = load i64, i64* %474, align 8, !dbg !10983
  %bf.clear1478 = and i64 %bf.load1477, 65535, !dbg !10983
  %bf.cast1479 = trunc i64 %bf.clear1478 to i32, !dbg !10983
  %cmp1480 = icmp eq i32 %bf.cast1479, 14, !dbg !10983
  br i1 %cmp1480, label %cond.true1482, label %cond.false1486, !dbg !10983

cond.true1482:                                    ; preds = %lor.lhs.false1473
  %475 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1483 = bitcast %union.tree_node* %475 to %struct.tree_common*, !dbg !10983
  %type1484 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1483, i32 0, i32 2, !dbg !10983
  %476 = load %union.tree_node*, %union.tree_node** %type1484, align 8, !dbg !10983
  %call1485 = call i32 @vector_type_mode(%union.tree_node* %476), !dbg !10983
  br label %cond.end1494, !dbg !10983

cond.false1486:                                   ; preds = %lor.lhs.false1473
  %477 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1487 = bitcast %union.tree_node* %477 to %struct.tree_common*, !dbg !10983
  %type1488 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1487, i32 0, i32 2, !dbg !10983
  %478 = load %union.tree_node*, %union.tree_node** %type1488, align 8, !dbg !10983
  %type1489 = bitcast %union.tree_node* %478 to %struct.tree_type*, !dbg !10983
  %mode1490 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1489, i32 0, i32 6, !dbg !10983
  %bf.load1491 = load i32, i32* %mode1490, align 4, !dbg !10983
  %bf.lshr1492 = lshr i32 %bf.load1491, 16, !dbg !10983
  %bf.clear1493 = and i32 %bf.lshr1492, 255, !dbg !10983
  br label %cond.end1494, !dbg !10983

cond.end1494:                                     ; preds = %cond.false1486, %cond.true1482
  %cond1495 = phi i32 [ %call1485, %cond.true1482 ], [ %bf.clear1493, %cond.false1486 ], !dbg !10983
  %idxprom1496 = zext i32 %cond1495 to i64, !dbg !10983
  %arrayidx1497 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1496, !dbg !10983
  %479 = load i8, i8* %arrayidx1497, align 1, !dbg !10983
  %conv1498 = zext i8 %479 to i32, !dbg !10983
  %cmp1499 = icmp eq i32 %conv1498, 17, !dbg !10983
  br i1 %cmp1499, label %land.lhs.true1501, label %if.then1839, !dbg !10983

land.lhs.true1501:                                ; preds = %cond.end1494, %cond.end1466, %cond.end1438, %cond.end1410
  %480 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1502 = bitcast %union.tree_node* %480 to %struct.tree_common*, !dbg !10983
  %type1503 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1502, i32 0, i32 2, !dbg !10983
  %481 = load %union.tree_node*, %union.tree_node** %type1503, align 8, !dbg !10983
  %base1504 = bitcast %union.tree_node* %481 to %struct.tree_base*, !dbg !10983
  %482 = bitcast %struct.tree_base* %base1504 to i64*, !dbg !10983
  %bf.load1505 = load i64, i64* %482, align 8, !dbg !10983
  %bf.clear1506 = and i64 %bf.load1505, 65535, !dbg !10983
  %bf.cast1507 = trunc i64 %bf.clear1506 to i32, !dbg !10983
  %cmp1508 = icmp eq i32 %bf.cast1507, 14, !dbg !10983
  br i1 %cmp1508, label %cond.true1510, label %cond.false1514, !dbg !10983

cond.true1510:                                    ; preds = %land.lhs.true1501
  %483 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1511 = bitcast %union.tree_node* %483 to %struct.tree_common*, !dbg !10983
  %type1512 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1511, i32 0, i32 2, !dbg !10983
  %484 = load %union.tree_node*, %union.tree_node** %type1512, align 8, !dbg !10983
  %call1513 = call i32 @vector_type_mode(%union.tree_node* %484), !dbg !10983
  br label %cond.end1522, !dbg !10983

cond.false1514:                                   ; preds = %land.lhs.true1501
  %485 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1515 = bitcast %union.tree_node* %485 to %struct.tree_common*, !dbg !10983
  %type1516 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1515, i32 0, i32 2, !dbg !10983
  %486 = load %union.tree_node*, %union.tree_node** %type1516, align 8, !dbg !10983
  %type1517 = bitcast %union.tree_node* %486 to %struct.tree_type*, !dbg !10983
  %mode1518 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1517, i32 0, i32 6, !dbg !10983
  %bf.load1519 = load i32, i32* %mode1518, align 4, !dbg !10983
  %bf.lshr1520 = lshr i32 %bf.load1519, 16, !dbg !10983
  %bf.clear1521 = and i32 %bf.lshr1520, 255, !dbg !10983
  br label %cond.end1522, !dbg !10983

cond.end1522:                                     ; preds = %cond.false1514, %cond.true1510
  %cond1523 = phi i32 [ %call1513, %cond.true1510 ], [ %bf.clear1521, %cond.false1514 ], !dbg !10983
  %idxprom1524 = zext i32 %cond1523 to i64, !dbg !10983
  %arrayidx1525 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1524, !dbg !10983
  %487 = load i8, i8* %arrayidx1525, align 1, !dbg !10983
  %conv1526 = zext i8 %487 to i32, !dbg !10983
  %cmp1527 = icmp eq i32 %conv1526, 8, !dbg !10983
  br i1 %cmp1527, label %cond.true1557, label %lor.lhs.false1529, !dbg !10983

lor.lhs.false1529:                                ; preds = %cond.end1522
  %488 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1530 = bitcast %union.tree_node* %488 to %struct.tree_common*, !dbg !10983
  %type1531 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1530, i32 0, i32 2, !dbg !10983
  %489 = load %union.tree_node*, %union.tree_node** %type1531, align 8, !dbg !10983
  %base1532 = bitcast %union.tree_node* %489 to %struct.tree_base*, !dbg !10983
  %490 = bitcast %struct.tree_base* %base1532 to i64*, !dbg !10983
  %bf.load1533 = load i64, i64* %490, align 8, !dbg !10983
  %bf.clear1534 = and i64 %bf.load1533, 65535, !dbg !10983
  %bf.cast1535 = trunc i64 %bf.clear1534 to i32, !dbg !10983
  %cmp1536 = icmp eq i32 %bf.cast1535, 14, !dbg !10983
  br i1 %cmp1536, label %cond.true1538, label %cond.false1542, !dbg !10983

cond.true1538:                                    ; preds = %lor.lhs.false1529
  %491 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1539 = bitcast %union.tree_node* %491 to %struct.tree_common*, !dbg !10983
  %type1540 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1539, i32 0, i32 2, !dbg !10983
  %492 = load %union.tree_node*, %union.tree_node** %type1540, align 8, !dbg !10983
  %call1541 = call i32 @vector_type_mode(%union.tree_node* %492), !dbg !10983
  br label %cond.end1550, !dbg !10983

cond.false1542:                                   ; preds = %lor.lhs.false1529
  %493 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1543 = bitcast %union.tree_node* %493 to %struct.tree_common*, !dbg !10983
  %type1544 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1543, i32 0, i32 2, !dbg !10983
  %494 = load %union.tree_node*, %union.tree_node** %type1544, align 8, !dbg !10983
  %type1545 = bitcast %union.tree_node* %494 to %struct.tree_type*, !dbg !10983
  %mode1546 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1545, i32 0, i32 6, !dbg !10983
  %bf.load1547 = load i32, i32* %mode1546, align 4, !dbg !10983
  %bf.lshr1548 = lshr i32 %bf.load1547, 16, !dbg !10983
  %bf.clear1549 = and i32 %bf.lshr1548, 255, !dbg !10983
  br label %cond.end1550, !dbg !10983

cond.end1550:                                     ; preds = %cond.false1542, %cond.true1538
  %cond1551 = phi i32 [ %call1541, %cond.true1538 ], [ %bf.clear1549, %cond.false1542 ], !dbg !10983
  %idxprom1552 = zext i32 %cond1551 to i64, !dbg !10983
  %arrayidx1553 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1552, !dbg !10983
  %495 = load i8, i8* %arrayidx1553, align 1, !dbg !10983
  %conv1554 = zext i8 %495 to i32, !dbg !10983
  %cmp1555 = icmp eq i32 %conv1554, 9, !dbg !10983
  br i1 %cmp1555, label %cond.true1557, label %cond.false1580, !dbg !10983

cond.true1557:                                    ; preds = %cond.end1550, %cond.end1522
  %496 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1558 = bitcast %union.tree_node* %496 to %struct.tree_common*, !dbg !10983
  %type1559 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1558, i32 0, i32 2, !dbg !10983
  %497 = load %union.tree_node*, %union.tree_node** %type1559, align 8, !dbg !10983
  %base1560 = bitcast %union.tree_node* %497 to %struct.tree_base*, !dbg !10983
  %498 = bitcast %struct.tree_base* %base1560 to i64*, !dbg !10983
  %bf.load1561 = load i64, i64* %498, align 8, !dbg !10983
  %bf.clear1562 = and i64 %bf.load1561, 65535, !dbg !10983
  %bf.cast1563 = trunc i64 %bf.clear1562 to i32, !dbg !10983
  %cmp1564 = icmp eq i32 %bf.cast1563, 14, !dbg !10983
  br i1 %cmp1564, label %cond.true1566, label %cond.false1570, !dbg !10983

cond.true1566:                                    ; preds = %cond.true1557
  %499 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1567 = bitcast %union.tree_node* %499 to %struct.tree_common*, !dbg !10983
  %type1568 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1567, i32 0, i32 2, !dbg !10983
  %500 = load %union.tree_node*, %union.tree_node** %type1568, align 8, !dbg !10983
  %call1569 = call i32 @vector_type_mode(%union.tree_node* %500), !dbg !10983
  br label %cond.end1578, !dbg !10983

cond.false1570:                                   ; preds = %cond.true1557
  %501 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1571 = bitcast %union.tree_node* %501 to %struct.tree_common*, !dbg !10983
  %type1572 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1571, i32 0, i32 2, !dbg !10983
  %502 = load %union.tree_node*, %union.tree_node** %type1572, align 8, !dbg !10983
  %type1573 = bitcast %union.tree_node* %502 to %struct.tree_type*, !dbg !10983
  %mode1574 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1573, i32 0, i32 6, !dbg !10983
  %bf.load1575 = load i32, i32* %mode1574, align 4, !dbg !10983
  %bf.lshr1576 = lshr i32 %bf.load1575, 16, !dbg !10983
  %bf.clear1577 = and i32 %bf.lshr1576, 255, !dbg !10983
  br label %cond.end1578, !dbg !10983

cond.end1578:                                     ; preds = %cond.false1570, %cond.true1566
  %cond1579 = phi i32 [ %call1569, %cond.true1566 ], [ %bf.clear1577, %cond.false1570 ], !dbg !10983
  br label %cond.end1606, !dbg !10983

cond.false1580:                                   ; preds = %cond.end1550
  %503 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1581 = bitcast %union.tree_node* %503 to %struct.tree_common*, !dbg !10983
  %type1582 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1581, i32 0, i32 2, !dbg !10983
  %504 = load %union.tree_node*, %union.tree_node** %type1582, align 8, !dbg !10983
  %base1583 = bitcast %union.tree_node* %504 to %struct.tree_base*, !dbg !10983
  %505 = bitcast %struct.tree_base* %base1583 to i64*, !dbg !10983
  %bf.load1584 = load i64, i64* %505, align 8, !dbg !10983
  %bf.clear1585 = and i64 %bf.load1584, 65535, !dbg !10983
  %bf.cast1586 = trunc i64 %bf.clear1585 to i32, !dbg !10983
  %cmp1587 = icmp eq i32 %bf.cast1586, 14, !dbg !10983
  br i1 %cmp1587, label %cond.true1589, label %cond.false1593, !dbg !10983

cond.true1589:                                    ; preds = %cond.false1580
  %506 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1590 = bitcast %union.tree_node* %506 to %struct.tree_common*, !dbg !10983
  %type1591 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1590, i32 0, i32 2, !dbg !10983
  %507 = load %union.tree_node*, %union.tree_node** %type1591, align 8, !dbg !10983
  %call1592 = call i32 @vector_type_mode(%union.tree_node* %507), !dbg !10983
  br label %cond.end1601, !dbg !10983

cond.false1593:                                   ; preds = %cond.false1580
  %508 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1594 = bitcast %union.tree_node* %508 to %struct.tree_common*, !dbg !10983
  %type1595 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1594, i32 0, i32 2, !dbg !10983
  %509 = load %union.tree_node*, %union.tree_node** %type1595, align 8, !dbg !10983
  %type1596 = bitcast %union.tree_node* %509 to %struct.tree_type*, !dbg !10983
  %mode1597 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1596, i32 0, i32 6, !dbg !10983
  %bf.load1598 = load i32, i32* %mode1597, align 4, !dbg !10983
  %bf.lshr1599 = lshr i32 %bf.load1598, 16, !dbg !10983
  %bf.clear1600 = and i32 %bf.lshr1599, 255, !dbg !10983
  br label %cond.end1601, !dbg !10983

cond.end1601:                                     ; preds = %cond.false1593, %cond.true1589
  %cond1602 = phi i32 [ %call1592, %cond.true1589 ], [ %bf.clear1600, %cond.false1593 ], !dbg !10983
  %idxprom1603 = zext i32 %cond1602 to i64, !dbg !10983
  %arrayidx1604 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1603, !dbg !10983
  %510 = load i8, i8* %arrayidx1604, align 1, !dbg !10983
  %conv1605 = zext i8 %510 to i32, !dbg !10983
  br label %cond.end1606, !dbg !10983

cond.end1606:                                     ; preds = %cond.end1601, %cond.end1578
  %cond1607 = phi i32 [ %cond1579, %cond.end1578 ], [ %conv1605, %cond.end1601 ], !dbg !10983
  %idxprom1608 = zext i32 %cond1607 to i64, !dbg !10983
  %arrayidx1609 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1608, !dbg !10983
  %511 = load i8, i8* %arrayidx1609, align 1, !dbg !10983
  %conv1610 = zext i8 %511 to i32, !dbg !10983
  %cmp1611 = icmp eq i32 %conv1610, 9, !dbg !10983
  br i1 %cmp1611, label %cond.true1613, label %cond.false1722, !dbg !10983

cond.true1613:                                    ; preds = %cond.end1606
  %512 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1614 = bitcast %union.tree_node* %512 to %struct.tree_common*, !dbg !10983
  %type1615 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1614, i32 0, i32 2, !dbg !10983
  %513 = load %union.tree_node*, %union.tree_node** %type1615, align 8, !dbg !10983
  %base1616 = bitcast %union.tree_node* %513 to %struct.tree_base*, !dbg !10983
  %514 = bitcast %struct.tree_base* %base1616 to i64*, !dbg !10983
  %bf.load1617 = load i64, i64* %514, align 8, !dbg !10983
  %bf.clear1618 = and i64 %bf.load1617, 65535, !dbg !10983
  %bf.cast1619 = trunc i64 %bf.clear1618 to i32, !dbg !10983
  %cmp1620 = icmp eq i32 %bf.cast1619, 14, !dbg !10983
  br i1 %cmp1620, label %cond.true1622, label %cond.false1626, !dbg !10983

cond.true1622:                                    ; preds = %cond.true1613
  %515 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1623 = bitcast %union.tree_node* %515 to %struct.tree_common*, !dbg !10983
  %type1624 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1623, i32 0, i32 2, !dbg !10983
  %516 = load %union.tree_node*, %union.tree_node** %type1624, align 8, !dbg !10983
  %call1625 = call i32 @vector_type_mode(%union.tree_node* %516), !dbg !10983
  br label %cond.end1634, !dbg !10983

cond.false1626:                                   ; preds = %cond.true1613
  %517 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1627 = bitcast %union.tree_node* %517 to %struct.tree_common*, !dbg !10983
  %type1628 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1627, i32 0, i32 2, !dbg !10983
  %518 = load %union.tree_node*, %union.tree_node** %type1628, align 8, !dbg !10983
  %type1629 = bitcast %union.tree_node* %518 to %struct.tree_type*, !dbg !10983
  %mode1630 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1629, i32 0, i32 6, !dbg !10983
  %bf.load1631 = load i32, i32* %mode1630, align 4, !dbg !10983
  %bf.lshr1632 = lshr i32 %bf.load1631, 16, !dbg !10983
  %bf.clear1633 = and i32 %bf.lshr1632, 255, !dbg !10983
  br label %cond.end1634, !dbg !10983

cond.end1634:                                     ; preds = %cond.false1626, %cond.true1622
  %cond1635 = phi i32 [ %call1625, %cond.true1622 ], [ %bf.clear1633, %cond.false1626 ], !dbg !10983
  %idxprom1636 = zext i32 %cond1635 to i64, !dbg !10983
  %arrayidx1637 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1636, !dbg !10983
  %519 = load i8, i8* %arrayidx1637, align 1, !dbg !10983
  %conv1638 = zext i8 %519 to i32, !dbg !10983
  %cmp1639 = icmp eq i32 %conv1638, 8, !dbg !10983
  br i1 %cmp1639, label %cond.true1669, label %lor.lhs.false1641, !dbg !10983

lor.lhs.false1641:                                ; preds = %cond.end1634
  %520 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1642 = bitcast %union.tree_node* %520 to %struct.tree_common*, !dbg !10983
  %type1643 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1642, i32 0, i32 2, !dbg !10983
  %521 = load %union.tree_node*, %union.tree_node** %type1643, align 8, !dbg !10983
  %base1644 = bitcast %union.tree_node* %521 to %struct.tree_base*, !dbg !10983
  %522 = bitcast %struct.tree_base* %base1644 to i64*, !dbg !10983
  %bf.load1645 = load i64, i64* %522, align 8, !dbg !10983
  %bf.clear1646 = and i64 %bf.load1645, 65535, !dbg !10983
  %bf.cast1647 = trunc i64 %bf.clear1646 to i32, !dbg !10983
  %cmp1648 = icmp eq i32 %bf.cast1647, 14, !dbg !10983
  br i1 %cmp1648, label %cond.true1650, label %cond.false1654, !dbg !10983

cond.true1650:                                    ; preds = %lor.lhs.false1641
  %523 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1651 = bitcast %union.tree_node* %523 to %struct.tree_common*, !dbg !10983
  %type1652 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1651, i32 0, i32 2, !dbg !10983
  %524 = load %union.tree_node*, %union.tree_node** %type1652, align 8, !dbg !10983
  %call1653 = call i32 @vector_type_mode(%union.tree_node* %524), !dbg !10983
  br label %cond.end1662, !dbg !10983

cond.false1654:                                   ; preds = %lor.lhs.false1641
  %525 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1655 = bitcast %union.tree_node* %525 to %struct.tree_common*, !dbg !10983
  %type1656 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1655, i32 0, i32 2, !dbg !10983
  %526 = load %union.tree_node*, %union.tree_node** %type1656, align 8, !dbg !10983
  %type1657 = bitcast %union.tree_node* %526 to %struct.tree_type*, !dbg !10983
  %mode1658 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1657, i32 0, i32 6, !dbg !10983
  %bf.load1659 = load i32, i32* %mode1658, align 4, !dbg !10983
  %bf.lshr1660 = lshr i32 %bf.load1659, 16, !dbg !10983
  %bf.clear1661 = and i32 %bf.lshr1660, 255, !dbg !10983
  br label %cond.end1662, !dbg !10983

cond.end1662:                                     ; preds = %cond.false1654, %cond.true1650
  %cond1663 = phi i32 [ %call1653, %cond.true1650 ], [ %bf.clear1661, %cond.false1654 ], !dbg !10983
  %idxprom1664 = zext i32 %cond1663 to i64, !dbg !10983
  %arrayidx1665 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1664, !dbg !10983
  %527 = load i8, i8* %arrayidx1665, align 1, !dbg !10983
  %conv1666 = zext i8 %527 to i32, !dbg !10983
  %cmp1667 = icmp eq i32 %conv1666, 9, !dbg !10983
  br i1 %cmp1667, label %cond.true1669, label %cond.false1692, !dbg !10983

cond.true1669:                                    ; preds = %cond.end1662, %cond.end1634
  %528 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1670 = bitcast %union.tree_node* %528 to %struct.tree_common*, !dbg !10983
  %type1671 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1670, i32 0, i32 2, !dbg !10983
  %529 = load %union.tree_node*, %union.tree_node** %type1671, align 8, !dbg !10983
  %base1672 = bitcast %union.tree_node* %529 to %struct.tree_base*, !dbg !10983
  %530 = bitcast %struct.tree_base* %base1672 to i64*, !dbg !10983
  %bf.load1673 = load i64, i64* %530, align 8, !dbg !10983
  %bf.clear1674 = and i64 %bf.load1673, 65535, !dbg !10983
  %bf.cast1675 = trunc i64 %bf.clear1674 to i32, !dbg !10983
  %cmp1676 = icmp eq i32 %bf.cast1675, 14, !dbg !10983
  br i1 %cmp1676, label %cond.true1678, label %cond.false1682, !dbg !10983

cond.true1678:                                    ; preds = %cond.true1669
  %531 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1679 = bitcast %union.tree_node* %531 to %struct.tree_common*, !dbg !10983
  %type1680 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1679, i32 0, i32 2, !dbg !10983
  %532 = load %union.tree_node*, %union.tree_node** %type1680, align 8, !dbg !10983
  %call1681 = call i32 @vector_type_mode(%union.tree_node* %532), !dbg !10983
  br label %cond.end1690, !dbg !10983

cond.false1682:                                   ; preds = %cond.true1669
  %533 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1683 = bitcast %union.tree_node* %533 to %struct.tree_common*, !dbg !10983
  %type1684 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1683, i32 0, i32 2, !dbg !10983
  %534 = load %union.tree_node*, %union.tree_node** %type1684, align 8, !dbg !10983
  %type1685 = bitcast %union.tree_node* %534 to %struct.tree_type*, !dbg !10983
  %mode1686 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1685, i32 0, i32 6, !dbg !10983
  %bf.load1687 = load i32, i32* %mode1686, align 4, !dbg !10983
  %bf.lshr1688 = lshr i32 %bf.load1687, 16, !dbg !10983
  %bf.clear1689 = and i32 %bf.lshr1688, 255, !dbg !10983
  br label %cond.end1690, !dbg !10983

cond.end1690:                                     ; preds = %cond.false1682, %cond.true1678
  %cond1691 = phi i32 [ %call1681, %cond.true1678 ], [ %bf.clear1689, %cond.false1682 ], !dbg !10983
  br label %cond.end1718, !dbg !10983

cond.false1692:                                   ; preds = %cond.end1662
  %535 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1693 = bitcast %union.tree_node* %535 to %struct.tree_common*, !dbg !10983
  %type1694 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1693, i32 0, i32 2, !dbg !10983
  %536 = load %union.tree_node*, %union.tree_node** %type1694, align 8, !dbg !10983
  %base1695 = bitcast %union.tree_node* %536 to %struct.tree_base*, !dbg !10983
  %537 = bitcast %struct.tree_base* %base1695 to i64*, !dbg !10983
  %bf.load1696 = load i64, i64* %537, align 8, !dbg !10983
  %bf.clear1697 = and i64 %bf.load1696, 65535, !dbg !10983
  %bf.cast1698 = trunc i64 %bf.clear1697 to i32, !dbg !10983
  %cmp1699 = icmp eq i32 %bf.cast1698, 14, !dbg !10983
  br i1 %cmp1699, label %cond.true1701, label %cond.false1705, !dbg !10983

cond.true1701:                                    ; preds = %cond.false1692
  %538 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1702 = bitcast %union.tree_node* %538 to %struct.tree_common*, !dbg !10983
  %type1703 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1702, i32 0, i32 2, !dbg !10983
  %539 = load %union.tree_node*, %union.tree_node** %type1703, align 8, !dbg !10983
  %call1704 = call i32 @vector_type_mode(%union.tree_node* %539), !dbg !10983
  br label %cond.end1713, !dbg !10983

cond.false1705:                                   ; preds = %cond.false1692
  %540 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1706 = bitcast %union.tree_node* %540 to %struct.tree_common*, !dbg !10983
  %type1707 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1706, i32 0, i32 2, !dbg !10983
  %541 = load %union.tree_node*, %union.tree_node** %type1707, align 8, !dbg !10983
  %type1708 = bitcast %union.tree_node* %541 to %struct.tree_type*, !dbg !10983
  %mode1709 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1708, i32 0, i32 6, !dbg !10983
  %bf.load1710 = load i32, i32* %mode1709, align 4, !dbg !10983
  %bf.lshr1711 = lshr i32 %bf.load1710, 16, !dbg !10983
  %bf.clear1712 = and i32 %bf.lshr1711, 255, !dbg !10983
  br label %cond.end1713, !dbg !10983

cond.end1713:                                     ; preds = %cond.false1705, %cond.true1701
  %cond1714 = phi i32 [ %call1704, %cond.true1701 ], [ %bf.clear1712, %cond.false1705 ], !dbg !10983
  %idxprom1715 = zext i32 %cond1714 to i64, !dbg !10983
  %arrayidx1716 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1715, !dbg !10983
  %542 = load i8, i8* %arrayidx1716, align 1, !dbg !10983
  %conv1717 = zext i8 %542 to i32, !dbg !10983
  br label %cond.end1718, !dbg !10983

cond.end1718:                                     ; preds = %cond.end1713, %cond.end1690
  %cond1719 = phi i32 [ %cond1691, %cond.end1690 ], [ %conv1717, %cond.end1713 ], !dbg !10983
  %sub1720 = sub i32 %cond1719, 42, !dbg !10983
  %add1721 = add i32 %sub1720, 4, !dbg !10983
  br label %cond.end1830, !dbg !10983

cond.false1722:                                   ; preds = %cond.end1606
  %543 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1723 = bitcast %union.tree_node* %543 to %struct.tree_common*, !dbg !10983
  %type1724 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1723, i32 0, i32 2, !dbg !10983
  %544 = load %union.tree_node*, %union.tree_node** %type1724, align 8, !dbg !10983
  %base1725 = bitcast %union.tree_node* %544 to %struct.tree_base*, !dbg !10983
  %545 = bitcast %struct.tree_base* %base1725 to i64*, !dbg !10983
  %bf.load1726 = load i64, i64* %545, align 8, !dbg !10983
  %bf.clear1727 = and i64 %bf.load1726, 65535, !dbg !10983
  %bf.cast1728 = trunc i64 %bf.clear1727 to i32, !dbg !10983
  %cmp1729 = icmp eq i32 %bf.cast1728, 14, !dbg !10983
  br i1 %cmp1729, label %cond.true1731, label %cond.false1735, !dbg !10983

cond.true1731:                                    ; preds = %cond.false1722
  %546 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1732 = bitcast %union.tree_node* %546 to %struct.tree_common*, !dbg !10983
  %type1733 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1732, i32 0, i32 2, !dbg !10983
  %547 = load %union.tree_node*, %union.tree_node** %type1733, align 8, !dbg !10983
  %call1734 = call i32 @vector_type_mode(%union.tree_node* %547), !dbg !10983
  br label %cond.end1743, !dbg !10983

cond.false1735:                                   ; preds = %cond.false1722
  %548 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1736 = bitcast %union.tree_node* %548 to %struct.tree_common*, !dbg !10983
  %type1737 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1736, i32 0, i32 2, !dbg !10983
  %549 = load %union.tree_node*, %union.tree_node** %type1737, align 8, !dbg !10983
  %type1738 = bitcast %union.tree_node* %549 to %struct.tree_type*, !dbg !10983
  %mode1739 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1738, i32 0, i32 6, !dbg !10983
  %bf.load1740 = load i32, i32* %mode1739, align 4, !dbg !10983
  %bf.lshr1741 = lshr i32 %bf.load1740, 16, !dbg !10983
  %bf.clear1742 = and i32 %bf.lshr1741, 255, !dbg !10983
  br label %cond.end1743, !dbg !10983

cond.end1743:                                     ; preds = %cond.false1735, %cond.true1731
  %cond1744 = phi i32 [ %call1734, %cond.true1731 ], [ %bf.clear1742, %cond.false1735 ], !dbg !10983
  %idxprom1745 = zext i32 %cond1744 to i64, !dbg !10983
  %arrayidx1746 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1745, !dbg !10983
  %550 = load i8, i8* %arrayidx1746, align 1, !dbg !10983
  %conv1747 = zext i8 %550 to i32, !dbg !10983
  %cmp1748 = icmp eq i32 %conv1747, 8, !dbg !10983
  br i1 %cmp1748, label %cond.true1778, label %lor.lhs.false1750, !dbg !10983

lor.lhs.false1750:                                ; preds = %cond.end1743
  %551 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1751 = bitcast %union.tree_node* %551 to %struct.tree_common*, !dbg !10983
  %type1752 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1751, i32 0, i32 2, !dbg !10983
  %552 = load %union.tree_node*, %union.tree_node** %type1752, align 8, !dbg !10983
  %base1753 = bitcast %union.tree_node* %552 to %struct.tree_base*, !dbg !10983
  %553 = bitcast %struct.tree_base* %base1753 to i64*, !dbg !10983
  %bf.load1754 = load i64, i64* %553, align 8, !dbg !10983
  %bf.clear1755 = and i64 %bf.load1754, 65535, !dbg !10983
  %bf.cast1756 = trunc i64 %bf.clear1755 to i32, !dbg !10983
  %cmp1757 = icmp eq i32 %bf.cast1756, 14, !dbg !10983
  br i1 %cmp1757, label %cond.true1759, label %cond.false1763, !dbg !10983

cond.true1759:                                    ; preds = %lor.lhs.false1750
  %554 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1760 = bitcast %union.tree_node* %554 to %struct.tree_common*, !dbg !10983
  %type1761 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1760, i32 0, i32 2, !dbg !10983
  %555 = load %union.tree_node*, %union.tree_node** %type1761, align 8, !dbg !10983
  %call1762 = call i32 @vector_type_mode(%union.tree_node* %555), !dbg !10983
  br label %cond.end1771, !dbg !10983

cond.false1763:                                   ; preds = %lor.lhs.false1750
  %556 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1764 = bitcast %union.tree_node* %556 to %struct.tree_common*, !dbg !10983
  %type1765 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1764, i32 0, i32 2, !dbg !10983
  %557 = load %union.tree_node*, %union.tree_node** %type1765, align 8, !dbg !10983
  %type1766 = bitcast %union.tree_node* %557 to %struct.tree_type*, !dbg !10983
  %mode1767 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1766, i32 0, i32 6, !dbg !10983
  %bf.load1768 = load i32, i32* %mode1767, align 4, !dbg !10983
  %bf.lshr1769 = lshr i32 %bf.load1768, 16, !dbg !10983
  %bf.clear1770 = and i32 %bf.lshr1769, 255, !dbg !10983
  br label %cond.end1771, !dbg !10983

cond.end1771:                                     ; preds = %cond.false1763, %cond.true1759
  %cond1772 = phi i32 [ %call1762, %cond.true1759 ], [ %bf.clear1770, %cond.false1763 ], !dbg !10983
  %idxprom1773 = zext i32 %cond1772 to i64, !dbg !10983
  %arrayidx1774 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1773, !dbg !10983
  %558 = load i8, i8* %arrayidx1774, align 1, !dbg !10983
  %conv1775 = zext i8 %558 to i32, !dbg !10983
  %cmp1776 = icmp eq i32 %conv1775, 9, !dbg !10983
  br i1 %cmp1776, label %cond.true1778, label %cond.false1801, !dbg !10983

cond.true1778:                                    ; preds = %cond.end1771, %cond.end1743
  %559 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1779 = bitcast %union.tree_node* %559 to %struct.tree_common*, !dbg !10983
  %type1780 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1779, i32 0, i32 2, !dbg !10983
  %560 = load %union.tree_node*, %union.tree_node** %type1780, align 8, !dbg !10983
  %base1781 = bitcast %union.tree_node* %560 to %struct.tree_base*, !dbg !10983
  %561 = bitcast %struct.tree_base* %base1781 to i64*, !dbg !10983
  %bf.load1782 = load i64, i64* %561, align 8, !dbg !10983
  %bf.clear1783 = and i64 %bf.load1782, 65535, !dbg !10983
  %bf.cast1784 = trunc i64 %bf.clear1783 to i32, !dbg !10983
  %cmp1785 = icmp eq i32 %bf.cast1784, 14, !dbg !10983
  br i1 %cmp1785, label %cond.true1787, label %cond.false1791, !dbg !10983

cond.true1787:                                    ; preds = %cond.true1778
  %562 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1788 = bitcast %union.tree_node* %562 to %struct.tree_common*, !dbg !10983
  %type1789 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1788, i32 0, i32 2, !dbg !10983
  %563 = load %union.tree_node*, %union.tree_node** %type1789, align 8, !dbg !10983
  %call1790 = call i32 @vector_type_mode(%union.tree_node* %563), !dbg !10983
  br label %cond.end1799, !dbg !10983

cond.false1791:                                   ; preds = %cond.true1778
  %564 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1792 = bitcast %union.tree_node* %564 to %struct.tree_common*, !dbg !10983
  %type1793 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1792, i32 0, i32 2, !dbg !10983
  %565 = load %union.tree_node*, %union.tree_node** %type1793, align 8, !dbg !10983
  %type1794 = bitcast %union.tree_node* %565 to %struct.tree_type*, !dbg !10983
  %mode1795 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1794, i32 0, i32 6, !dbg !10983
  %bf.load1796 = load i32, i32* %mode1795, align 4, !dbg !10983
  %bf.lshr1797 = lshr i32 %bf.load1796, 16, !dbg !10983
  %bf.clear1798 = and i32 %bf.lshr1797, 255, !dbg !10983
  br label %cond.end1799, !dbg !10983

cond.end1799:                                     ; preds = %cond.false1791, %cond.true1787
  %cond1800 = phi i32 [ %call1790, %cond.true1787 ], [ %bf.clear1798, %cond.false1791 ], !dbg !10983
  br label %cond.end1827, !dbg !10983

cond.false1801:                                   ; preds = %cond.end1771
  %566 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1802 = bitcast %union.tree_node* %566 to %struct.tree_common*, !dbg !10983
  %type1803 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1802, i32 0, i32 2, !dbg !10983
  %567 = load %union.tree_node*, %union.tree_node** %type1803, align 8, !dbg !10983
  %base1804 = bitcast %union.tree_node* %567 to %struct.tree_base*, !dbg !10983
  %568 = bitcast %struct.tree_base* %base1804 to i64*, !dbg !10983
  %bf.load1805 = load i64, i64* %568, align 8, !dbg !10983
  %bf.clear1806 = and i64 %bf.load1805, 65535, !dbg !10983
  %bf.cast1807 = trunc i64 %bf.clear1806 to i32, !dbg !10983
  %cmp1808 = icmp eq i32 %bf.cast1807, 14, !dbg !10983
  br i1 %cmp1808, label %cond.true1810, label %cond.false1814, !dbg !10983

cond.true1810:                                    ; preds = %cond.false1801
  %569 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1811 = bitcast %union.tree_node* %569 to %struct.tree_common*, !dbg !10983
  %type1812 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1811, i32 0, i32 2, !dbg !10983
  %570 = load %union.tree_node*, %union.tree_node** %type1812, align 8, !dbg !10983
  %call1813 = call i32 @vector_type_mode(%union.tree_node* %570), !dbg !10983
  br label %cond.end1822, !dbg !10983

cond.false1814:                                   ; preds = %cond.false1801
  %571 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10983
  %common1815 = bitcast %union.tree_node* %571 to %struct.tree_common*, !dbg !10983
  %type1816 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1815, i32 0, i32 2, !dbg !10983
  %572 = load %union.tree_node*, %union.tree_node** %type1816, align 8, !dbg !10983
  %type1817 = bitcast %union.tree_node* %572 to %struct.tree_type*, !dbg !10983
  %mode1818 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1817, i32 0, i32 6, !dbg !10983
  %bf.load1819 = load i32, i32* %mode1818, align 4, !dbg !10983
  %bf.lshr1820 = lshr i32 %bf.load1819, 16, !dbg !10983
  %bf.clear1821 = and i32 %bf.lshr1820, 255, !dbg !10983
  br label %cond.end1822, !dbg !10983

cond.end1822:                                     ; preds = %cond.false1814, %cond.true1810
  %cond1823 = phi i32 [ %call1813, %cond.true1810 ], [ %bf.clear1821, %cond.false1814 ], !dbg !10983
  %idxprom1824 = zext i32 %cond1823 to i64, !dbg !10983
  %arrayidx1825 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1824, !dbg !10983
  %573 = load i8, i8* %arrayidx1825, align 1, !dbg !10983
  %conv1826 = zext i8 %573 to i32, !dbg !10983
  br label %cond.end1827, !dbg !10983

cond.end1827:                                     ; preds = %cond.end1822, %cond.end1799
  %cond1828 = phi i32 [ %cond1800, %cond.end1799 ], [ %conv1826, %cond.end1822 ], !dbg !10983
  %sub1829 = sub i32 %cond1828, 38, !dbg !10983
  br label %cond.end1830, !dbg !10983

cond.end1830:                                     ; preds = %cond.end1827, %cond.end1718
  %cond1831 = phi i32 [ %add1721, %cond.end1718 ], [ %sub1829, %cond.end1827 ], !dbg !10983
  %idxprom1832 = zext i32 %cond1831 to i64, !dbg !10983
  %arrayidx1833 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom1832, !dbg !10983
  %574 = load %struct.real_format*, %struct.real_format** %arrayidx1833, align 8, !dbg !10983
  %has_nans1834 = getelementptr inbounds %struct.real_format, %struct.real_format* %574, i32 0, i32 11, !dbg !10983
  %575 = load i8, i8* %has_nans1834, align 2, !dbg !10983
  %conv1835 = zext i8 %575 to i32, !dbg !10983
  %tobool1836 = icmp ne i32 %conv1835, 0, !dbg !10983
  br i1 %tobool1836, label %land.lhs.true1837, label %if.then1839, !dbg !10983

land.lhs.true1837:                                ; preds = %cond.end1830
  %576 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10983
  %tobool1838 = icmp ne i32 %576, 0, !dbg !10983
  br i1 %tobool1838, label %if.then1839, label %if.end1841, !dbg !10985

if.then1839:                                      ; preds = %land.lhs.true1837, %cond.end1830, %cond.end1494
  %577 = load i32, i32* %loc.addr, align 4, !dbg !10986
  %578 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10987
  %579 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10988
  %580 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10989
  %call1840 = call %union.tree_node* @omit_one_operand_loc(i32 %577, %union.tree_node* %578, %union.tree_node* %579, %union.tree_node* %580), !dbg !10990
  store %union.tree_node* %call1840, %union.tree_node** %retval, align 8, !dbg !10991
  br label %return, !dbg !10991

if.end1841:                                       ; preds = %land.lhs.true1837
  %581 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10992
  %base1842 = bitcast %union.tree_node* %581 to %struct.tree_base*, !dbg !10992
  %582 = bitcast %struct.tree_base* %base1842 to i64*, !dbg !10992
  %bf.load1843 = load i64, i64* %582, align 8, !dbg !10992
  %bf.clear1844 = and i64 %bf.load1843, 65535, !dbg !10992
  %bf.cast1845 = trunc i64 %bf.clear1844 to i32, !dbg !10992
  %cmp1846 = icmp eq i32 %bf.cast1845, 24, !dbg !10994
  br i1 %cmp1846, label %if.then1848, label %if.end1858, !dbg !10995

if.then1848:                                      ; preds = %if.end1841
  %583 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10996
  %real_cst1849 = bitcast %union.tree_node* %583 to %struct.tree_real_cst*, !dbg !10996
  %real_cst_ptr1850 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst1849, i32 0, i32 1, !dbg !10996
  %584 = load %struct.real_value*, %struct.real_value** %real_cst_ptr1850, align 8, !dbg !10996
  %585 = bitcast %struct.real_value* %r to i8*, !dbg !10996
  %586 = bitcast %struct.real_value* %584 to i8*, !dbg !10996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %585, i8* align 8 %586, i64 32, i1 false), !dbg !10996
  %call1851 = call zeroext i8 @real_isnan(%struct.real_value* %r), !dbg !10998
  %conv1852 = zext i8 %call1851 to i32, !dbg !10998
  %tobool1853 = icmp ne i32 %conv1852, 0, !dbg !10998
  br i1 %tobool1853, label %cond.true1854, label %cond.false1855, !dbg !10998

cond.true1854:                                    ; preds = %if.then1848
  %587 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !10999
  br label %cond.end1856, !dbg !10998

cond.false1855:                                   ; preds = %if.then1848
  %588 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11000
  br label %cond.end1856, !dbg !10998

cond.end1856:                                     ; preds = %cond.false1855, %cond.true1854
  %cond1857 = phi %union.tree_node* [ %587, %cond.true1854 ], [ %588, %cond.false1855 ], !dbg !10998
  store %union.tree_node* %cond1857, %union.tree_node** %retval, align 8, !dbg !11001
  br label %return, !dbg !11001

if.end1858:                                       ; preds = %if.end1841
  %589 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11002
  %call1859 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %589), !dbg !11003
  store %union.tree_node* %call1859, %union.tree_node** %arg.addr, align 8, !dbg !11004
  %590 = load i32, i32* %loc.addr, align 4, !dbg !11005
  %591 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11005
  %592 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11005
  %593 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11005
  %call1860 = call %union.tree_node* @fold_build2_stat_loc(i32 %590, i32 103, %union.tree_node* %591, %union.tree_node* %592, %union.tree_node* %593), !dbg !11005
  store %union.tree_node* %call1860, %union.tree_node** %retval, align 8, !dbg !11006
  br label %return, !dbg !11006

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 9559, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !11007
  br label %sw.epilog, !dbg !11008

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11009
  br label %return, !dbg !11009

return:                                           ; preds = %sw.epilog, %if.end1858, %cond.end1856, %if.then1839, %if.end1388, %cond.end1386, %if.then1369, %if.end469, %if.end453, %if.else, %cond.end451, %if.then433, %if.then
  %594 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11010
  ret %union.tree_node* %594, !dbg !11010
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_interclass_mathfn(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg) #0 !dbg !11011 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %isgr_fn = alloca %union.tree_node*, align 8
  %type16 = alloca %union.tree_node*, align 8
  %r = alloca %struct.real_value, align 8
  %buf = alloca [128 x i8], align 16
  %isle_fn = alloca %union.tree_node*, align 8
  %type34 = alloca %union.tree_node*, align 8
  %r37 = alloca %struct.real_value, align 8
  %buf38 = alloca [128 x i8], align 16
  %isle_fn60 = alloca %union.tree_node*, align 8
  %isge_fn = alloca %union.tree_node*, align 8
  %type61 = alloca %union.tree_node*, align 8
  %rmax = alloca %struct.real_value, align 8
  %rmin = alloca %struct.real_value, align 8
  %buf64 = alloca [128 x i8], align 16
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11012, metadata !DIExpression()), !dbg !11013
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11014, metadata !DIExpression()), !dbg !11015
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !11016, metadata !DIExpression()), !dbg !11017
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11018, metadata !DIExpression()), !dbg !11019
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11020
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !11022
  %tobool = icmp ne i8 %call, 0, !dbg !11022
  br i1 %tobool, label %if.end, label %if.then, !dbg !11023

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11024
  br label %return, !dbg !11024

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11025
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11027
  %call1 = call i32 @interclass_mathfn_icode(%union.tree_node* %1, %union.tree_node* %2), !dbg !11028
  %cmp = icmp ne i32 %call1, 2956, !dbg !11029
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !11030

if.then2:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11031
  br label %return, !dbg !11031

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11032
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !11032
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11032
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11032
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11032
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !11032
  %bf.load = load i64, i64* %5, align 8, !dbg !11032
  %bf.clear = and i64 %bf.load, 65535, !dbg !11032
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11032
  %cmp4 = icmp eq i32 %bf.cast, 14, !dbg !11032
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !11032

cond.true:                                        ; preds = %if.end3
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11032
  %common5 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !11032
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !11032
  %7 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !11032
  %call7 = call i32 @vector_type_mode(%union.tree_node* %7), !dbg !11032
  br label %cond.end, !dbg !11032

cond.false:                                       ; preds = %if.end3
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11032
  %common8 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !11032
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !11032
  %9 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !11032
  %type10 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !11032
  %mode11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6, !dbg !11032
  %bf.load12 = load i32, i32* %mode11, align 4, !dbg !11032
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !11032
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !11032
  br label %cond.end, !dbg !11032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call7, %cond.true ], [ %bf.clear13, %cond.false ], !dbg !11032
  store i32 %cond, i32* %mode, align 4, !dbg !11033
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11034
  %function_decl = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !11034
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !11034
  %bf.load14 = load i32, i32* %function_code, align 8, !dbg !11034
  %bf.clear15 = and i32 %bf.load14, 2047, !dbg !11034
  switch i32 %bf.clear15, label %sw.default [
    i32 469, label %sw.bb
    i32 470, label %sw.bb
    i32 471, label %sw.bb
    i32 460, label %sw.bb33
    i32 461, label %sw.bb33
    i32 462, label %sw.bb33
    i32 467, label %sw.bb33
    i32 481, label %sw.bb59
  ], !dbg !11035

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %isgr_fn, metadata !11036, metadata !DIExpression()), !dbg !11039
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 482), align 16, !dbg !11040
  store %union.tree_node* %11, %union.tree_node** %isgr_fn, align 8, !dbg !11039
  call void @llvm.dbg.declare(metadata %union.tree_node** %type16, metadata !11041, metadata !DIExpression()), !dbg !11042
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11043
  %common17 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11043
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !11043
  %13 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !11043
  store %union.tree_node* %13, %union.tree_node** %type16, align 8, !dbg !11042
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !11044, metadata !DIExpression()), !dbg !11045
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf, metadata !11046, metadata !DIExpression()), !dbg !11050
  %14 = load i32, i32* %mode, align 4, !dbg !11051
  %idxprom = zext i32 %14 to i64, !dbg !11051
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !11051
  %15 = load i8, i8* %arrayidx, align 1, !dbg !11051
  %conv = zext i8 %15 to i32, !dbg !11051
  %cmp19 = icmp eq i32 %conv, 9, !dbg !11051
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !11051

cond.true21:                                      ; preds = %sw.bb
  %16 = load i32, i32* %mode, align 4, !dbg !11051
  %sub = sub i32 %16, 42, !dbg !11051
  %add = add i32 %sub, 4, !dbg !11051
  br label %cond.end24, !dbg !11051

cond.false22:                                     ; preds = %sw.bb
  %17 = load i32, i32* %mode, align 4, !dbg !11051
  %sub23 = sub i32 %17, 38, !dbg !11051
  br label %cond.end24, !dbg !11051

cond.end24:                                       ; preds = %cond.false22, %cond.true21
  %cond25 = phi i32 [ %add, %cond.true21 ], [ %sub23, %cond.false22 ], !dbg !11051
  %idxprom26 = zext i32 %cond25 to i64, !dbg !11051
  %arrayidx27 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom26, !dbg !11051
  %18 = load %struct.real_format*, %struct.real_format** %arrayidx27, align 8, !dbg !11051
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !11052
  call void @get_max_float(%struct.real_format* %18, i8* %arraydecay, i64 128), !dbg !11053
  %arraydecay28 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !11054
  %call29 = call i32 @real_from_string(%struct.real_value* %r, i8* %arraydecay28), !dbg !11055
  %19 = load %union.tree_node*, %union.tree_node** %isgr_fn, align 8, !dbg !11056
  %20 = load i32, i32* %loc.addr, align 4, !dbg !11056
  %21 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !11056
  %22 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11056
  %call30 = call %union.tree_node* @fold_build1_stat_loc(i32 %20, i32 82, %union.tree_node* %21, %union.tree_node* %22), !dbg !11056
  %23 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !11056
  %call31 = call %union.tree_node* @build_real(%union.tree_node* %23, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !11056
  %call32 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %19, i32 2, %union.tree_node* %call30, %union.tree_node* %call31), !dbg !11056
  store %union.tree_node* %call32, %union.tree_node** %result, align 8, !dbg !11057
  %24 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11058
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !11059
  br label %return, !dbg !11059

sw.bb33:                                          ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %isle_fn, metadata !11060, metadata !DIExpression()), !dbg !11062
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 485), align 8, !dbg !11063
  store %union.tree_node* %25, %union.tree_node** %isle_fn, align 8, !dbg !11062
  call void @llvm.dbg.declare(metadata %union.tree_node** %type34, metadata !11064, metadata !DIExpression()), !dbg !11065
  %26 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11066
  %common35 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !11066
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !11066
  %27 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !11066
  store %union.tree_node* %27, %union.tree_node** %type34, align 8, !dbg !11065
  call void @llvm.dbg.declare(metadata %struct.real_value* %r37, metadata !11067, metadata !DIExpression()), !dbg !11068
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf38, metadata !11069, metadata !DIExpression()), !dbg !11070
  %28 = load i32, i32* %mode, align 4, !dbg !11071
  %idxprom39 = zext i32 %28 to i64, !dbg !11071
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !11071
  %29 = load i8, i8* %arrayidx40, align 1, !dbg !11071
  %conv41 = zext i8 %29 to i32, !dbg !11071
  %cmp42 = icmp eq i32 %conv41, 9, !dbg !11071
  br i1 %cmp42, label %cond.true44, label %cond.false47, !dbg !11071

cond.true44:                                      ; preds = %sw.bb33
  %30 = load i32, i32* %mode, align 4, !dbg !11071
  %sub45 = sub i32 %30, 42, !dbg !11071
  %add46 = add i32 %sub45, 4, !dbg !11071
  br label %cond.end49, !dbg !11071

cond.false47:                                     ; preds = %sw.bb33
  %31 = load i32, i32* %mode, align 4, !dbg !11071
  %sub48 = sub i32 %31, 38, !dbg !11071
  br label %cond.end49, !dbg !11071

cond.end49:                                       ; preds = %cond.false47, %cond.true44
  %cond50 = phi i32 [ %add46, %cond.true44 ], [ %sub48, %cond.false47 ], !dbg !11071
  %idxprom51 = zext i32 %cond50 to i64, !dbg !11071
  %arrayidx52 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom51, !dbg !11071
  %32 = load %struct.real_format*, %struct.real_format** %arrayidx52, align 8, !dbg !11071
  %arraydecay53 = getelementptr inbounds [128 x i8], [128 x i8]* %buf38, i64 0, i64 0, !dbg !11072
  call void @get_max_float(%struct.real_format* %32, i8* %arraydecay53, i64 128), !dbg !11073
  %arraydecay54 = getelementptr inbounds [128 x i8], [128 x i8]* %buf38, i64 0, i64 0, !dbg !11074
  %call55 = call i32 @real_from_string(%struct.real_value* %r37, i8* %arraydecay54), !dbg !11075
  %33 = load %union.tree_node*, %union.tree_node** %isle_fn, align 8, !dbg !11076
  %34 = load i32, i32* %loc.addr, align 4, !dbg !11076
  %35 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !11076
  %36 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11076
  %call56 = call %union.tree_node* @fold_build1_stat_loc(i32 %34, i32 82, %union.tree_node* %35, %union.tree_node* %36), !dbg !11076
  %37 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !11076
  %call57 = call %union.tree_node* @build_real(%union.tree_node* %37, %struct.real_value* byval(%struct.real_value) align 8 %r37), !dbg !11076
  %call58 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %33, i32 2, %union.tree_node* %call56, %union.tree_node* %call57), !dbg !11076
  store %union.tree_node* %call58, %union.tree_node** %result, align 8, !dbg !11077
  %38 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11078
  store %union.tree_node* %38, %union.tree_node** %retval, align 8, !dbg !11079
  br label %return, !dbg !11079

sw.bb59:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %isle_fn60, metadata !11080, metadata !DIExpression()), !dbg !11082
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 485), align 8, !dbg !11083
  store %union.tree_node* %39, %union.tree_node** %isle_fn60, align 8, !dbg !11082
  call void @llvm.dbg.declare(metadata %union.tree_node** %isge_fn, metadata !11084, metadata !DIExpression()), !dbg !11085
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 483), align 8, !dbg !11086
  store %union.tree_node* %40, %union.tree_node** %isge_fn, align 8, !dbg !11085
  call void @llvm.dbg.declare(metadata %union.tree_node** %type61, metadata !11087, metadata !DIExpression()), !dbg !11088
  %41 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11089
  %common62 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !11089
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !11089
  %42 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !11089
  store %union.tree_node* %42, %union.tree_node** %type61, align 8, !dbg !11088
  call void @llvm.dbg.declare(metadata %struct.real_value* %rmax, metadata !11090, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.declare(metadata %struct.real_value* %rmin, metadata !11092, metadata !DIExpression()), !dbg !11093
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf64, metadata !11094, metadata !DIExpression()), !dbg !11095
  %43 = load i32, i32* %mode, align 4, !dbg !11096
  %idxprom65 = zext i32 %43 to i64, !dbg !11096
  %arrayidx66 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom65, !dbg !11096
  %44 = load i8, i8* %arrayidx66, align 1, !dbg !11096
  %conv67 = zext i8 %44 to i32, !dbg !11096
  %cmp68 = icmp eq i32 %conv67, 9, !dbg !11096
  br i1 %cmp68, label %cond.true70, label %cond.false73, !dbg !11096

cond.true70:                                      ; preds = %sw.bb59
  %45 = load i32, i32* %mode, align 4, !dbg !11096
  %sub71 = sub i32 %45, 42, !dbg !11096
  %add72 = add i32 %sub71, 4, !dbg !11096
  br label %cond.end75, !dbg !11096

cond.false73:                                     ; preds = %sw.bb59
  %46 = load i32, i32* %mode, align 4, !dbg !11096
  %sub74 = sub i32 %46, 38, !dbg !11096
  br label %cond.end75, !dbg !11096

cond.end75:                                       ; preds = %cond.false73, %cond.true70
  %cond76 = phi i32 [ %add72, %cond.true70 ], [ %sub74, %cond.false73 ], !dbg !11096
  %idxprom77 = zext i32 %cond76 to i64, !dbg !11096
  %arrayidx78 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom77, !dbg !11096
  %47 = load %struct.real_format*, %struct.real_format** %arrayidx78, align 8, !dbg !11096
  %arraydecay79 = getelementptr inbounds [128 x i8], [128 x i8]* %buf64, i64 0, i64 0, !dbg !11097
  call void @get_max_float(%struct.real_format* %47, i8* %arraydecay79, i64 128), !dbg !11098
  %arraydecay80 = getelementptr inbounds [128 x i8], [128 x i8]* %buf64, i64 0, i64 0, !dbg !11099
  %call81 = call i32 @real_from_string(%struct.real_value* %rmax, i8* %arraydecay80), !dbg !11100
  %arraydecay82 = getelementptr inbounds [128 x i8], [128 x i8]* %buf64, i64 0, i64 0, !dbg !11101
  %48 = load i32, i32* %mode, align 4, !dbg !11102
  %idxprom83 = zext i32 %48 to i64, !dbg !11102
  %arrayidx84 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom83, !dbg !11102
  %49 = load i8, i8* %arrayidx84, align 1, !dbg !11102
  %conv85 = zext i8 %49 to i32, !dbg !11102
  %cmp86 = icmp eq i32 %conv85, 9, !dbg !11102
  br i1 %cmp86, label %cond.true88, label %cond.false91, !dbg !11102

cond.true88:                                      ; preds = %cond.end75
  %50 = load i32, i32* %mode, align 4, !dbg !11102
  %sub89 = sub i32 %50, 42, !dbg !11102
  %add90 = add i32 %sub89, 4, !dbg !11102
  br label %cond.end93, !dbg !11102

cond.false91:                                     ; preds = %cond.end75
  %51 = load i32, i32* %mode, align 4, !dbg !11102
  %sub92 = sub i32 %51, 38, !dbg !11102
  br label %cond.end93, !dbg !11102

cond.end93:                                       ; preds = %cond.false91, %cond.true88
  %cond94 = phi i32 [ %add90, %cond.true88 ], [ %sub92, %cond.false91 ], !dbg !11102
  %idxprom95 = zext i32 %cond94 to i64, !dbg !11102
  %arrayidx96 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom95, !dbg !11102
  %52 = load %struct.real_format*, %struct.real_format** %arrayidx96, align 8, !dbg !11102
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %52, i32 0, i32 5, !dbg !11103
  %53 = load i32, i32* %emin, align 4, !dbg !11103
  %sub97 = sub nsw i32 %53, 1, !dbg !11104
  %call98 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.739, i64 0, i64 0), i32 %sub97), !dbg !11105
  %arraydecay99 = getelementptr inbounds [128 x i8], [128 x i8]* %buf64, i64 0, i64 0, !dbg !11106
  %call100 = call i32 @real_from_string(%struct.real_value* %rmin, i8* %arraydecay99), !dbg !11107
  %54 = load i32, i32* %loc.addr, align 4, !dbg !11108
  %55 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !11108
  %56 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11108
  %call101 = call %union.tree_node* @fold_build1_stat_loc(i32 %54, i32 82, %union.tree_node* %55, %union.tree_node* %56), !dbg !11108
  %call102 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %call101), !dbg !11109
  store %union.tree_node* %call102, %union.tree_node** %arg.addr, align 8, !dbg !11110
  %57 = load %union.tree_node*, %union.tree_node** %isle_fn60, align 8, !dbg !11111
  %58 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11111
  %59 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !11111
  %call103 = call %union.tree_node* @build_real(%union.tree_node* %59, %struct.real_value* byval(%struct.real_value) align 8 %rmax), !dbg !11111
  %call104 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %57, i32 2, %union.tree_node* %58, %union.tree_node* %call103), !dbg !11111
  store %union.tree_node* %call104, %union.tree_node** %result, align 8, !dbg !11112
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !11113
  %61 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11113
  %62 = load %union.tree_node*, %union.tree_node** %isge_fn, align 8, !dbg !11113
  %63 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11113
  %64 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !11113
  %call105 = call %union.tree_node* @build_real(%union.tree_node* %64, %struct.real_value* byval(%struct.real_value) align 8 %rmin), !dbg !11113
  %call106 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %62, i32 2, %union.tree_node* %63, %union.tree_node* %call105), !dbg !11113
  %call107 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %60, %union.tree_node* %61, %union.tree_node* %call106), !dbg !11113
  store %union.tree_node* %call107, %union.tree_node** %result, align 8, !dbg !11114
  %65 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11115
  store %union.tree_node* %65, %union.tree_node** %retval, align 8, !dbg !11116
  br label %return, !dbg !11116

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog, !dbg !11117

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11118
  br label %return, !dbg !11118

return:                                           ; preds = %sw.epilog, %cond.end93, %cond.end49, %cond.end24, %if.then2, %if.then
  %66 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11119
  ret %union.tree_node* %66, !dbg !11119
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_printf(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %fmt, %union.tree_node* %arg, i8 zeroext %ignore, i32 %fcode) #0 !dbg !11120 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fmt.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode.addr = alloca i32, align 4
  %fn_putchar = alloca %union.tree_node*, align 8
  %fn_puts = alloca %union.tree_node*, align 8
  %newarg = alloca %union.tree_node*, align 8
  %call = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  %str = alloca i8*, align 8
  %len = alloca i64, align 8
  %newstr = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11123, metadata !DIExpression()), !dbg !11124
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11125, metadata !DIExpression()), !dbg !11126
  store %union.tree_node* %fmt, %union.tree_node** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt.addr, metadata !11127, metadata !DIExpression()), !dbg !11128
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !11129, metadata !DIExpression()), !dbg !11130
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !11131, metadata !DIExpression()), !dbg !11132
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !11133, metadata !DIExpression()), !dbg !11134
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_putchar, metadata !11135, metadata !DIExpression()), !dbg !11136
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_puts, metadata !11137, metadata !DIExpression()), !dbg !11138
  call void @llvm.dbg.declare(metadata %union.tree_node** %newarg, metadata !11139, metadata !DIExpression()), !dbg !11140
  call void @llvm.dbg.declare(metadata %union.tree_node** %call, metadata !11141, metadata !DIExpression()), !dbg !11142
  store %union.tree_node* null, %union.tree_node** %call, align 8, !dbg !11142
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !11143, metadata !DIExpression()), !dbg !11144
  store i8* null, i8** %fmt_str, align 8, !dbg !11144
  %0 = load i8, i8* %ignore.addr, align 1, !dbg !11145
  %tobool = icmp ne i8 %0, 0, !dbg !11145
  br i1 %tobool, label %if.end, label %if.then, !dbg !11147

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11148
  br label %return, !dbg !11148

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !11149
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !11151
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11151
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !11152

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11153
  br label %return, !dbg !11153

if.end4:                                          ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !11154
  %call5 = call i8* @c_getstr(%union.tree_node* %2), !dbg !11155
  store i8* %call5, i8** %fmt_str, align 8, !dbg !11156
  %3 = load i8*, i8** %fmt_str, align 8, !dbg !11157
  %cmp = icmp eq i8* %3, null, !dbg !11159
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !11160

if.then6:                                         ; preds = %if.end4
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11161
  br label %return, !dbg !11161

if.end7:                                          ; preds = %if.end4
  %4 = load i32, i32* %fcode.addr, align 4, !dbg !11162
  %cmp8 = icmp eq i32 %4, 366, !dbg !11164
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !11165

if.then9:                                         ; preds = %if.end7
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 368), align 16, !dbg !11166
  store %union.tree_node* %5, %union.tree_node** %fn_putchar, align 8, !dbg !11168
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 370), align 16, !dbg !11169
  store %union.tree_node* %6, %union.tree_node** %fn_puts, align 8, !dbg !11170
  br label %if.end10, !dbg !11171

if.else:                                          ; preds = %if.end7
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 367), align 8, !dbg !11172
  store %union.tree_node* %7, %union.tree_node** %fn_putchar, align 8, !dbg !11174
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 369), align 8, !dbg !11175
  store %union.tree_node* %8, %union.tree_node** %fn_puts, align 8, !dbg !11176
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  %call11 = call zeroext i8 @init_target_chars(), !dbg !11177
  %tobool12 = icmp ne i8 %call11, 0, !dbg !11177
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !11179

if.then13:                                        ; preds = %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11180
  br label %return, !dbg !11180

if.end14:                                         ; preds = %if.end10
  %9 = load i8*, i8** %fmt_str, align 8, !dbg !11181
  %call15 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !11183
  %cmp16 = icmp eq i32 %call15, 0, !dbg !11184
  br i1 %cmp16, label %if.then20, label %lor.lhs.false, !dbg !11185

lor.lhs.false:                                    ; preds = %if.end14
  %10 = load i8*, i8** %fmt_str, align 8, !dbg !11186
  %11 = load i64, i64* @target_percent, align 8, !dbg !11187
  %conv = trunc i64 %11 to i32, !dbg !11187
  %call17 = call i8* @strchr(i8* %10, i32 %conv), !dbg !11188
  %cmp18 = icmp eq i8* %call17, null, !dbg !11189
  br i1 %cmp18, label %if.then20, label %if.else92, !dbg !11190

if.then20:                                        ; preds = %lor.lhs.false, %if.end14
  call void @llvm.dbg.declare(metadata i8** %str, metadata !11191, metadata !DIExpression()), !dbg !11193
  %12 = load i8*, i8** %fmt_str, align 8, !dbg !11194
  %call21 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !11196
  %cmp22 = icmp eq i32 %call21, 0, !dbg !11197
  br i1 %cmp22, label %if.then24, label %if.else43, !dbg !11198

if.then24:                                        ; preds = %if.then20
  %13 = load i32, i32* %fcode.addr, align 4, !dbg !11199
  %cmp25 = icmp eq i32 %13, 377, !dbg !11202
  br i1 %cmp25, label %if.then30, label %lor.lhs.false27, !dbg !11203

lor.lhs.false27:                                  ; preds = %if.then24
  %14 = load i32, i32* %fcode.addr, align 4, !dbg !11204
  %cmp28 = icmp eq i32 %14, 545, !dbg !11205
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !11206

if.then30:                                        ; preds = %lor.lhs.false27, %if.then24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11207
  br label %return, !dbg !11207

if.end31:                                         ; preds = %lor.lhs.false27
  %15 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11208
  %tobool32 = icmp ne %union.tree_node* %15, null, !dbg !11208
  br i1 %tobool32, label %lor.lhs.false33, label %if.then36, !dbg !11210

lor.lhs.false33:                                  ; preds = %if.end31
  %16 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11211
  %call34 = call zeroext i8 @validate_arg(%union.tree_node* %16, i32 10), !dbg !11212
  %tobool35 = icmp ne i8 %call34, 0, !dbg !11212
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !11213

if.then36:                                        ; preds = %lor.lhs.false33, %if.end31
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11214
  br label %return, !dbg !11214

if.end37:                                         ; preds = %lor.lhs.false33
  %17 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11215
  %call38 = call i8* @c_getstr(%union.tree_node* %17), !dbg !11216
  store i8* %call38, i8** %str, align 8, !dbg !11217
  %18 = load i8*, i8** %str, align 8, !dbg !11218
  %cmp39 = icmp eq i8* %18, null, !dbg !11220
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !11221

if.then41:                                        ; preds = %if.end37
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11222
  br label %return, !dbg !11222

if.end42:                                         ; preds = %if.end37
  br label %if.end52, !dbg !11223

if.else43:                                        ; preds = %if.then20
  %19 = load i32, i32* %fcode.addr, align 4, !dbg !11224
  %cmp44 = icmp ne i32 %19, 377, !dbg !11227
  br i1 %cmp44, label %land.lhs.true, label %if.end51, !dbg !11228

land.lhs.true:                                    ; preds = %if.else43
  %20 = load i32, i32* %fcode.addr, align 4, !dbg !11229
  %cmp46 = icmp ne i32 %20, 545, !dbg !11230
  br i1 %cmp46, label %land.lhs.true48, label %if.end51, !dbg !11231

land.lhs.true48:                                  ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11232
  %tobool49 = icmp ne %union.tree_node* %21, null, !dbg !11232
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !11233

if.then50:                                        ; preds = %land.lhs.true48
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11234
  br label %return, !dbg !11234

if.end51:                                         ; preds = %land.lhs.true48, %land.lhs.true, %if.else43
  %22 = load i8*, i8** %fmt_str, align 8, !dbg !11235
  store i8* %22, i8** %str, align 8, !dbg !11236
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end42
  %23 = load i8*, i8** %str, align 8, !dbg !11237
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 0, !dbg !11237
  %24 = load i8, i8* %arrayidx, align 1, !dbg !11237
  %conv53 = sext i8 %24 to i32, !dbg !11237
  %cmp54 = icmp eq i32 %conv53, 0, !dbg !11239
  br i1 %cmp54, label %if.then56, label %if.end60, !dbg !11240

if.then56:                                        ; preds = %if.end52
  %25 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11241
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !11241
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11241
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11241
  %common57 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !11241
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !11241
  %27 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !11241
  %call59 = call %union.tree_node* @build_int_cst(%union.tree_node* %27, i64 0), !dbg !11242
  store %union.tree_node* %call59, %union.tree_node** %retval, align 8, !dbg !11243
  br label %return, !dbg !11243

if.end60:                                         ; preds = %if.end52
  %28 = load i8*, i8** %str, align 8, !dbg !11244
  %arrayidx61 = getelementptr inbounds i8, i8* %28, i64 1, !dbg !11244
  %29 = load i8, i8* %arrayidx61, align 1, !dbg !11244
  %conv62 = sext i8 %29 to i32, !dbg !11244
  %cmp63 = icmp eq i32 %conv62, 0, !dbg !11246
  br i1 %cmp63, label %if.then65, label %if.else73, !dbg !11247

if.then65:                                        ; preds = %if.end60
  %30 = load i8*, i8** %str, align 8, !dbg !11248
  %arrayidx66 = getelementptr inbounds i8, i8* %30, i64 0, !dbg !11248
  %31 = load i8, i8* %arrayidx66, align 1, !dbg !11248
  %conv67 = sext i8 %31 to i64, !dbg !11248
  %call68 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv67), !dbg !11250
  store %union.tree_node* %call68, %union.tree_node** %newarg, align 8, !dbg !11251
  %32 = load %union.tree_node*, %union.tree_node** %fn_putchar, align 8, !dbg !11252
  %tobool69 = icmp ne %union.tree_node* %32, null, !dbg !11252
  br i1 %tobool69, label %if.then70, label %if.end72, !dbg !11254

if.then70:                                        ; preds = %if.then65
  %33 = load i32, i32* %loc.addr, align 4, !dbg !11255
  %34 = load %union.tree_node*, %union.tree_node** %fn_putchar, align 8, !dbg !11256
  %35 = load %union.tree_node*, %union.tree_node** %newarg, align 8, !dbg !11257
  %call71 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %33, %union.tree_node* %34, i32 1, %union.tree_node* %35), !dbg !11258
  store %union.tree_node* %call71, %union.tree_node** %call, align 8, !dbg !11259
  br label %if.end72, !dbg !11260

if.end72:                                         ; preds = %if.then70, %if.then65
  br label %if.end91, !dbg !11261

if.else73:                                        ; preds = %if.end60
  call void @llvm.dbg.declare(metadata i64* %len, metadata !11262, metadata !DIExpression()), !dbg !11264
  %36 = load i8*, i8** %str, align 8, !dbg !11265
  %call74 = call i64 @strlen(i8* %36), !dbg !11266
  store i64 %call74, i64* %len, align 8, !dbg !11264
  %37 = load i8*, i8** %str, align 8, !dbg !11267
  %38 = load i64, i64* %len, align 8, !dbg !11269
  %sub = sub i64 %38, 1, !dbg !11270
  %arrayidx75 = getelementptr inbounds i8, i8* %37, i64 %sub, !dbg !11267
  %39 = load i8, i8* %arrayidx75, align 1, !dbg !11267
  %conv76 = zext i8 %39 to i64, !dbg !11271
  %40 = load i64, i64* @target_newline, align 8, !dbg !11272
  %cmp77 = icmp eq i64 %conv76, %40, !dbg !11273
  br i1 %cmp77, label %if.then79, label %if.else89, !dbg !11274

if.then79:                                        ; preds = %if.else73
  call void @llvm.dbg.declare(metadata i8** %newstr, metadata !11275, metadata !DIExpression()), !dbg !11277
  %41 = load i64, i64* %len, align 8, !dbg !11278
  %mul = mul i64 1, %41, !dbg !11278
  %42 = alloca i8, i64 %mul, align 16, !dbg !11278
  store i8* %42, i8** %newstr, align 8, !dbg !11277
  %43 = load i8*, i8** %newstr, align 8, !dbg !11279
  %44 = load i8*, i8** %str, align 8, !dbg !11280
  %45 = load i64, i64* %len, align 8, !dbg !11281
  %sub80 = sub i64 %45, 1, !dbg !11282
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %44, i64 %sub80, i1 false), !dbg !11283
  %46 = load i8*, i8** %newstr, align 8, !dbg !11284
  %47 = load i64, i64* %len, align 8, !dbg !11285
  %sub81 = sub i64 %47, 1, !dbg !11286
  %arrayidx82 = getelementptr inbounds i8, i8* %46, i64 %sub81, !dbg !11284
  store i8 0, i8* %arrayidx82, align 1, !dbg !11287
  %48 = load i64, i64* %len, align 8, !dbg !11288
  %conv83 = trunc i64 %48 to i32, !dbg !11288
  %49 = load i8*, i8** %newstr, align 8, !dbg !11289
  %call84 = call %union.tree_node* @build_string_literal(i32 %conv83, i8* %49), !dbg !11290
  store %union.tree_node* %call84, %union.tree_node** %newarg, align 8, !dbg !11291
  %50 = load %union.tree_node*, %union.tree_node** %fn_puts, align 8, !dbg !11292
  %tobool85 = icmp ne %union.tree_node* %50, null, !dbg !11292
  br i1 %tobool85, label %if.then86, label %if.end88, !dbg !11294

if.then86:                                        ; preds = %if.then79
  %51 = load i32, i32* %loc.addr, align 4, !dbg !11295
  %52 = load %union.tree_node*, %union.tree_node** %fn_puts, align 8, !dbg !11296
  %53 = load %union.tree_node*, %union.tree_node** %newarg, align 8, !dbg !11297
  %call87 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %51, %union.tree_node* %52, i32 1, %union.tree_node* %53), !dbg !11298
  store %union.tree_node* %call87, %union.tree_node** %call, align 8, !dbg !11299
  br label %if.end88, !dbg !11300

if.end88:                                         ; preds = %if.then86, %if.then79
  br label %if.end90, !dbg !11301

if.else89:                                        ; preds = %if.else73
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11302
  br label %return, !dbg !11302

if.end90:                                         ; preds = %if.end88
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end72
  br label %if.end132, !dbg !11303

if.else92:                                        ; preds = %lor.lhs.false
  %54 = load i32, i32* %fcode.addr, align 4, !dbg !11304
  %cmp93 = icmp eq i32 %54, 377, !dbg !11306
  br i1 %cmp93, label %if.then98, label %lor.lhs.false95, !dbg !11307

lor.lhs.false95:                                  ; preds = %if.else92
  %55 = load i32, i32* %fcode.addr, align 4, !dbg !11308
  %cmp96 = icmp eq i32 %55, 545, !dbg !11309
  br i1 %cmp96, label %if.then98, label %if.else99, !dbg !11310

if.then98:                                        ; preds = %lor.lhs.false95, %if.else92
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11311
  br label %return, !dbg !11311

if.else99:                                        ; preds = %lor.lhs.false95
  %56 = load i8*, i8** %fmt_str, align 8, !dbg !11312
  %call100 = call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @target_percent_s_newline, i64 0, i64 0)), !dbg !11314
  %cmp101 = icmp eq i32 %call100, 0, !dbg !11315
  br i1 %cmp101, label %if.then103, label %if.else114, !dbg !11316

if.then103:                                       ; preds = %if.else99
  %57 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11317
  %tobool104 = icmp ne %union.tree_node* %57, null, !dbg !11317
  br i1 %tobool104, label %lor.lhs.false105, label %if.then108, !dbg !11320

lor.lhs.false105:                                 ; preds = %if.then103
  %58 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11321
  %call106 = call zeroext i8 @validate_arg(%union.tree_node* %58, i32 10), !dbg !11322
  %tobool107 = icmp ne i8 %call106, 0, !dbg !11322
  br i1 %tobool107, label %if.end109, label %if.then108, !dbg !11323

if.then108:                                       ; preds = %lor.lhs.false105, %if.then103
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11324
  br label %return, !dbg !11324

if.end109:                                        ; preds = %lor.lhs.false105
  %59 = load %union.tree_node*, %union.tree_node** %fn_puts, align 8, !dbg !11325
  %tobool110 = icmp ne %union.tree_node* %59, null, !dbg !11325
  br i1 %tobool110, label %if.then111, label %if.end113, !dbg !11327

if.then111:                                       ; preds = %if.end109
  %60 = load i32, i32* %loc.addr, align 4, !dbg !11328
  %61 = load %union.tree_node*, %union.tree_node** %fn_puts, align 8, !dbg !11329
  %62 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11330
  %call112 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %60, %union.tree_node* %61, i32 1, %union.tree_node* %62), !dbg !11331
  store %union.tree_node* %call112, %union.tree_node** %call, align 8, !dbg !11332
  br label %if.end113, !dbg !11333

if.end113:                                        ; preds = %if.then111, %if.end109
  br label %if.end130, !dbg !11334

if.else114:                                       ; preds = %if.else99
  %63 = load i8*, i8** %fmt_str, align 8, !dbg !11335
  %call115 = call i32 @strcmp(i8* %63, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_c, i64 0, i64 0)), !dbg !11337
  %cmp116 = icmp eq i32 %call115, 0, !dbg !11338
  br i1 %cmp116, label %if.then118, label %if.end129, !dbg !11339

if.then118:                                       ; preds = %if.else114
  %64 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11340
  %tobool119 = icmp ne %union.tree_node* %64, null, !dbg !11340
  br i1 %tobool119, label %lor.lhs.false120, label %if.then123, !dbg !11343

lor.lhs.false120:                                 ; preds = %if.then118
  %65 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11344
  %call121 = call zeroext i8 @validate_arg(%union.tree_node* %65, i32 8), !dbg !11345
  %tobool122 = icmp ne i8 %call121, 0, !dbg !11345
  br i1 %tobool122, label %if.end124, label %if.then123, !dbg !11346

if.then123:                                       ; preds = %lor.lhs.false120, %if.then118
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11347
  br label %return, !dbg !11347

if.end124:                                        ; preds = %lor.lhs.false120
  %66 = load %union.tree_node*, %union.tree_node** %fn_putchar, align 8, !dbg !11348
  %tobool125 = icmp ne %union.tree_node* %66, null, !dbg !11348
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !11350

if.then126:                                       ; preds = %if.end124
  %67 = load i32, i32* %loc.addr, align 4, !dbg !11351
  %68 = load %union.tree_node*, %union.tree_node** %fn_putchar, align 8, !dbg !11352
  %69 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11353
  %call127 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %67, %union.tree_node* %68, i32 1, %union.tree_node* %69), !dbg !11354
  store %union.tree_node* %call127, %union.tree_node** %call, align 8, !dbg !11355
  br label %if.end128, !dbg !11356

if.end128:                                        ; preds = %if.then126, %if.end124
  br label %if.end129, !dbg !11357

if.end129:                                        ; preds = %if.end128, %if.else114
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end113
  br label %if.end131

if.end131:                                        ; preds = %if.end130
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end91
  %70 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !11358
  %tobool133 = icmp ne %union.tree_node* %70, null, !dbg !11358
  br i1 %tobool133, label %if.end135, label %if.then134, !dbg !11360

if.then134:                                       ; preds = %if.end132
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11361
  br label %return, !dbg !11361

if.end135:                                        ; preds = %if.end132
  %71 = load i32, i32* %loc.addr, align 4, !dbg !11362
  %72 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11363
  %common136 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !11363
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !11363
  %73 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !11363
  %common138 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !11363
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !11363
  %74 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !11363
  %75 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !11364
  %call140 = call %union.tree_node* @fold_convert_loc(i32 %71, %union.tree_node* %74, %union.tree_node* %75), !dbg !11365
  store %union.tree_node* %call140, %union.tree_node** %retval, align 8, !dbg !11366
  br label %return, !dbg !11366

return:                                           ; preds = %if.end135, %if.then134, %if.then123, %if.then108, %if.then98, %if.else89, %if.then56, %if.then50, %if.then41, %if.then36, %if.then30, %if.then13, %if.then6, %if.then3, %if.then
  %76 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11367
  ret %union.tree_node* %76, !dbg !11367
}

declare dso_local %union.tree_node* @fold_abs_const(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @builtin_save_expr(%union.tree_node* %exp) #0 !dbg !11368 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11369, metadata !DIExpression()), !dbg !11370
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11371
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !11371
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !11371
  %bf.load = load i64, i64* %1, align 8, !dbg !11371
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !11371
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11371
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11371
  %cmp = icmp eq i32 %bf.cast, 0, !dbg !11373
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11374

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11375
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !11375
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !11375
  %bf.load2 = load i64, i64* %3, align 8, !dbg !11375
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !11375
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !11375
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !11376
  br i1 %cmp5, label %if.then, label %lor.lhs.false, !dbg !11377

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11378
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11378
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !11378
  %bf.load7 = load i64, i64* %5, align 8, !dbg !11378
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !11378
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !11378
  %cmp10 = icmp eq i32 %bf.cast9, 32, !dbg !11379
  br i1 %cmp10, label %land.lhs.true11, label %if.end, !dbg !11380

land.lhs.true11:                                  ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11381
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !11381
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !11381
  %bf.load13 = load i64, i64* %7, align 8, !dbg !11381
  %bf.lshr14 = lshr i64 %bf.load13, 26, !dbg !11381
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !11381
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !11381
  %tobool = icmp ne i32 %bf.cast16, 0, !dbg !11381
  br i1 %tobool, label %if.end, label %if.then, !dbg !11382

if.then:                                          ; preds = %land.lhs.true11, %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11383
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !11384
  br label %return, !dbg !11384

if.end:                                           ; preds = %land.lhs.true11, %lor.lhs.false, %entry
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11385
  %call = call %union.tree_node* @save_expr(%union.tree_node* %9), !dbg !11386
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !11387
  br label %return, !dbg !11387

return:                                           ; preds = %if.end, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11388
  ret %union.tree_node* %10, !dbg !11388
}

declare dso_local %union.tree_node* @save_expr(%union.tree_node*) #2

declare dso_local zeroext i8 @real_nan(%struct.real_value*, i8*, i32, i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local zeroext i8 @real_isnan(%struct.real_value*) #2

declare dso_local void @real_floor(%struct.real_value*, i32, %struct.real_value*) #2

declare dso_local zeroext i8 @tree_expr_nonnegative_p(%union.tree_node*) #2

declare dso_local void @real_ceil(%struct.real_value*, i32, %struct.real_value*) #2

declare dso_local void @real_trunc(%struct.real_value*, i32, %struct.real_value*) #2

declare dso_local void @real_round(%struct.real_value*, i32, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @integer_valued_real_p(%union.tree_node* %t) #0 !dbg !11389 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %type52 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !11390, metadata !DIExpression()), !dbg !11391
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11392
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !11392
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !11392
  %bf.load = load i64, i64* %1, align 8, !dbg !11392
  %bf.clear = and i64 %bf.load, 65535, !dbg !11392
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11392
  switch i32 %bf.cast, label %sw.default96 [
    i32 78, label %sw.bb
    i32 82, label %sw.bb1
    i32 120, label %sw.bb1
    i32 52, label %sw.bb2
    i32 53, label %sw.bb2
    i32 58, label %sw.bb2
    i32 63, label %sw.bb7
    i32 64, label %sw.bb7
    i32 65, label %sw.bb7
    i32 80, label %sw.bb7
    i32 81, label %sw.bb7
    i32 56, label %sw.bb19
    i32 24, label %sw.bb36
    i32 116, label %sw.bb51
    i32 59, label %sw.bb76
  ], !dbg !11393

sw.bb:                                            ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !11394
  br label %return, !dbg !11394

sw.bb1:                                           ; preds = %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11396
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !11396
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11396
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11396
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11396
  %call = call zeroext i8 @integer_valued_real_p(%union.tree_node* %3), !dbg !11397
  store i8 %call, i8* %retval, align 1, !dbg !11398
  br label %return, !dbg !11398

sw.bb2:                                           ; preds = %entry, %entry, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11399
  %exp3 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !11399
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !11399
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 1, !dbg !11399
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !11399
  %call6 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %5), !dbg !11400
  store i8 %call6, i8* %retval, align 1, !dbg !11401
  br label %return, !dbg !11401

sw.bb7:                                           ; preds = %entry, %entry, %entry, %entry, %entry
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11402
  %exp8 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !11402
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !11402
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !11402
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !11402
  %call11 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %7), !dbg !11403
  %conv = zext i8 %call11 to i32, !dbg !11403
  %tobool = icmp ne i32 %conv, 0, !dbg !11403
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11404

land.rhs:                                         ; preds = %sw.bb7
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11405
  %exp12 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !11405
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !11405
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !11405
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !11405
  %call15 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %9), !dbg !11406
  %conv16 = zext i8 %call15 to i32, !dbg !11406
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !11404
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb7
  %10 = phi i1 [ false, %sw.bb7 ], [ %tobool17, %land.rhs ], !dbg !11407
  %land.ext = zext i1 %10 to i32, !dbg !11404
  %conv18 = trunc i32 %land.ext to i8, !dbg !11403
  store i8 %conv18, i8* %retval, align 1, !dbg !11408
  br label %return, !dbg !11408

sw.bb19:                                          ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11409
  %exp20 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !11409
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !11409
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 1, !dbg !11409
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !11409
  %call23 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %12), !dbg !11410
  %conv24 = zext i8 %call23 to i32, !dbg !11410
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !11410
  br i1 %tobool25, label %land.rhs26, label %land.end33, !dbg !11411

land.rhs26:                                       ; preds = %sw.bb19
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11412
  %exp27 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !11412
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !11412
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 2, !dbg !11412
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !11412
  %call30 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %14), !dbg !11413
  %conv31 = zext i8 %call30 to i32, !dbg !11413
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !11411
  br label %land.end33

land.end33:                                       ; preds = %land.rhs26, %sw.bb19
  %15 = phi i1 [ false, %sw.bb19 ], [ %tobool32, %land.rhs26 ], !dbg !11407
  %land.ext34 = zext i1 %15 to i32, !dbg !11411
  %conv35 = trunc i32 %land.ext34 to i8, !dbg !11410
  store i8 %conv35, i8* %retval, align 1, !dbg !11414
  br label %return, !dbg !11414

sw.bb36:                                          ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11415
  %real_cst = bitcast %union.tree_node* %16 to %struct.tree_real_cst*, !dbg !11415
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !11415
  %17 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !11415
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11416
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !11416
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11416
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11416
  %base37 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !11416
  %20 = bitcast %struct.tree_base* %base37 to i64*, !dbg !11416
  %bf.load38 = load i64, i64* %20, align 8, !dbg !11416
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !11416
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !11416
  %cmp = icmp eq i32 %bf.cast40, 14, !dbg !11416
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11416

cond.true:                                        ; preds = %sw.bb36
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11416
  %common42 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !11416
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !11416
  %22 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !11416
  %call44 = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !11416
  br label %cond.end, !dbg !11416

cond.false:                                       ; preds = %sw.bb36
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11416
  %common45 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !11416
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !11416
  %24 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !11416
  %type47 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !11416
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6, !dbg !11416
  %bf.load48 = load i32, i32* %mode, align 4, !dbg !11416
  %bf.lshr = lshr i32 %bf.load48, 16, !dbg !11416
  %bf.clear49 = and i32 %bf.lshr, 255, !dbg !11416
  br label %cond.end, !dbg !11416

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call44, %cond.true ], [ %bf.clear49, %cond.false ], !dbg !11416
  %call50 = call zeroext i8 @real_isinteger(%struct.real_value* %17, i32 %cond), !dbg !11417
  store i8 %call50, i8* %retval, align 1, !dbg !11418
  br label %return, !dbg !11418

sw.bb51:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type52, metadata !11419, metadata !DIExpression()), !dbg !11421
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11422
  %exp53 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !11422
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !11422
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 0, !dbg !11422
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !11422
  %common56 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !11422
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !11422
  %27 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !11422
  store %union.tree_node* %27, %union.tree_node** %type52, align 8, !dbg !11421
  %28 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !11423
  %base58 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !11423
  %29 = bitcast %struct.tree_base* %base58 to i64*, !dbg !11423
  %bf.load59 = load i64, i64* %29, align 8, !dbg !11423
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !11423
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !11423
  %cmp62 = icmp eq i32 %bf.cast61, 8, !dbg !11425
  br i1 %cmp62, label %if.then, label %if.end, !dbg !11426

if.then:                                          ; preds = %sw.bb51
  store i8 1, i8* %retval, align 1, !dbg !11427
  br label %return, !dbg !11427

if.end:                                           ; preds = %sw.bb51
  %30 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !11428
  %base64 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !11428
  %31 = bitcast %struct.tree_base* %base64 to i64*, !dbg !11428
  %bf.load65 = load i64, i64* %31, align 8, !dbg !11428
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !11428
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !11428
  %cmp68 = icmp eq i32 %bf.cast67, 9, !dbg !11430
  br i1 %cmp68, label %if.then70, label %if.end75, !dbg !11431

if.then70:                                        ; preds = %if.end
  %32 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11432
  %exp71 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !11432
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !11432
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 0, !dbg !11432
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !11432
  %call74 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %33), !dbg !11433
  store i8 %call74, i8* %retval, align 1, !dbg !11434
  br label %return, !dbg !11434

if.end75:                                         ; preds = %if.end
  br label %sw.epilog97, !dbg !11435

sw.bb76:                                          ; preds = %entry
  %34 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11436
  %call77 = call i32 @builtin_mathfn_code(%union.tree_node* %34), !dbg !11437
  switch i32 %call77, label %sw.default [
    i32 24, label %sw.bb78
    i32 25, label %sw.bb78
    i32 26, label %sw.bb78
    i32 63, label %sw.bb78
    i32 64, label %sw.bb78
    i32 65, label %sw.bb78
    i32 171, label %sw.bb78
    i32 172, label %sw.bb78
    i32 173, label %sw.bb78
    i32 195, label %sw.bb78
    i32 196, label %sw.bb78
    i32 197, label %sw.bb78
    i32 198, label %sw.bb78
    i32 199, label %sw.bb78
    i32 200, label %sw.bb78
    i32 240, label %sw.bb78
    i32 241, label %sw.bb78
    i32 242, label %sw.bb78
    i32 72, label %sw.bb79
    i32 73, label %sw.bb79
    i32 74, label %sw.bb79
    i32 69, label %sw.bb79
    i32 70, label %sw.bb79
    i32 71, label %sw.bb79
  ], !dbg !11438

sw.bb78:                                          ; preds = %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76
  store i8 1, i8* %retval, align 1, !dbg !11439
  br label %return, !dbg !11439

sw.bb79:                                          ; preds = %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76, %sw.bb76
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11441
  %exp80 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !11441
  %operands81 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp80, i32 0, i32 3, !dbg !11441
  %arrayidx82 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands81, i64 0, i64 3, !dbg !11441
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !11441
  %call83 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %36), !dbg !11442
  %conv84 = zext i8 %call83 to i32, !dbg !11442
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !11442
  br i1 %tobool85, label %land.rhs86, label %land.end93, !dbg !11443

land.rhs86:                                       ; preds = %sw.bb79
  %37 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !11444
  %exp87 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !11444
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 3, !dbg !11444
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i64 0, i64 4, !dbg !11444
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !11444
  %call90 = call zeroext i8 @integer_valued_real_p(%union.tree_node* %38), !dbg !11445
  %conv91 = zext i8 %call90 to i32, !dbg !11445
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !11443
  br label %land.end93

land.end93:                                       ; preds = %land.rhs86, %sw.bb79
  %39 = phi i1 [ false, %sw.bb79 ], [ %tobool92, %land.rhs86 ], !dbg !11446
  %land.ext94 = zext i1 %39 to i32, !dbg !11443
  %conv95 = trunc i32 %land.ext94 to i8, !dbg !11442
  store i8 %conv95, i8* %retval, align 1, !dbg !11447
  br label %return, !dbg !11447

sw.default:                                       ; preds = %sw.bb76
  br label %sw.epilog, !dbg !11448

sw.epilog:                                        ; preds = %sw.default
  br label %sw.epilog97, !dbg !11449

sw.default96:                                     ; preds = %entry
  br label %sw.epilog97, !dbg !11450

sw.epilog97:                                      ; preds = %sw.default96, %sw.epilog, %if.end75
  store i8 0, i8* %retval, align 1, !dbg !11451
  br label %return, !dbg !11451

return:                                           ; preds = %sw.epilog97, %land.end93, %sw.bb78, %if.then70, %if.then, %cond.end, %land.end33, %land.end, %sw.bb2, %sw.bb1, %sw.bb
  %40 = load i8, i8* %retval, align 1, !dbg !11452
  ret i8 %40, !dbg !11452
}

declare dso_local %union.tree_node* @strip_float_extensions(%union.tree_node*) #2

declare dso_local zeroext i8 @real_isinteger(%struct.real_value*, i32) #2

declare dso_local zeroext i8 @real_isfinite(%struct.real_value*) #2

declare dso_local void @real_to_integer2(i64*, i64*, %struct.real_value*) #2

declare dso_local i32 @fit_double_type(i64, i64, i64*, i64*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local i32 @exact_log2(i64) #2

declare dso_local i32 @floor_log2(i64) #2

declare dso_local zeroext i8 @real_isneg(%struct.real_value*) #2

declare dso_local zeroext i8 @real_isinf(%struct.real_value*) #2

declare dso_local zeroext i8 @real_compare(i32, %struct.real_value*, %struct.real_value*) #2

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @interclass_mathfn_icode(%union.tree_node* %arg, %union.tree_node* %fndecl) #0 !dbg !11453 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %errno_set = alloca i8, align 1
  %builtin_optab = alloca %struct.optab_d*, align 8
  %mode = alloca i32, align 4
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !11456, metadata !DIExpression()), !dbg !11457
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11458, metadata !DIExpression()), !dbg !11459
  call void @llvm.dbg.declare(metadata i8* %errno_set, metadata !11460, metadata !DIExpression()), !dbg !11461
  store i8 0, i8* %errno_set, align 1, !dbg !11461
  call void @llvm.dbg.declare(metadata %struct.optab_d** %builtin_optab, metadata !11462, metadata !DIExpression()), !dbg !11481
  store %struct.optab_d* null, %struct.optab_d** %builtin_optab, align 8, !dbg !11481
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11482, metadata !DIExpression()), !dbg !11483
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11484
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !11484
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !11484
  %bf.load = load i32, i32* %function_code, align 8, !dbg !11484
  %bf.clear = and i32 %bf.load, 2047, !dbg !11484
  switch i32 %bf.clear, label %sw.default [
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 469, label %sw.bb1
    i32 470, label %sw.bb1
    i32 471, label %sw.bb1
    i32 481, label %sw.bb2
    i32 467, label %sw.bb2
    i32 460, label %sw.bb2
    i32 461, label %sw.bb2
    i32 462, label %sw.bb2
    i32 463, label %sw.bb2
    i32 464, label %sw.bb2
    i32 465, label %sw.bb2
    i32 472, label %sw.bb2
    i32 473, label %sw.bb2
    i32 474, label %sw.bb2
  ], !dbg !11485

sw.bb:                                            ; preds = %entry, %entry, %entry
  store i8 1, i8* %errno_set, align 1, !dbg !11486
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 89), %struct.optab_d** %builtin_optab, align 8, !dbg !11488
  br label %sw.epilog, !dbg !11489

sw.bb1:                                           ; preds = %entry, %entry, %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 104), %struct.optab_d** %builtin_optab, align 8, !dbg !11490
  br label %sw.epilog, !dbg !11491

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %sw.epilog, !dbg !11492

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 2278, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !11493
  br label %sw.epilog, !dbg !11494

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* @flag_errno_math, align 4, !dbg !11495
  %tobool = icmp ne i32 %1, 0, !dbg !11495
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11497

land.lhs.true:                                    ; preds = %sw.epilog
  %2 = load i8, i8* %errno_set, align 1, !dbg !11498
  %conv = zext i8 %2 to i32, !dbg !11498
  %tobool3 = icmp ne i32 %conv, 0, !dbg !11498
  br i1 %tobool3, label %if.then, label %if.end, !dbg !11499

if.then:                                          ; preds = %land.lhs.true
  store i32 2956, i32* %retval, align 4, !dbg !11500
  br label %return, !dbg !11500

if.end:                                           ; preds = %land.lhs.true, %sw.epilog
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11501
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !11501
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11501
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11501
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11501
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !11501
  %bf.load4 = load i64, i64* %5, align 8, !dbg !11501
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !11501
  %bf.cast = trunc i64 %bf.clear5 to i32, !dbg !11501
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !11501
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11501

cond.true:                                        ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11501
  %common7 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !11501
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !11501
  %7 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !11501
  %call = call i32 @vector_type_mode(%union.tree_node* %7), !dbg !11501
  br label %cond.end, !dbg !11501

cond.false:                                       ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !11501
  %common9 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !11501
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !11501
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !11501
  %type11 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !11501
  %mode12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !11501
  %bf.load13 = load i32, i32* %mode12, align 4, !dbg !11501
  %bf.lshr = lshr i32 %bf.load13, 16, !dbg !11501
  %bf.clear14 = and i32 %bf.lshr, 255, !dbg !11501
  br label %cond.end, !dbg !11501

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear14, %cond.false ], !dbg !11501
  store i32 %cond, i32* %mode, align 4, !dbg !11502
  %10 = load %struct.optab_d*, %struct.optab_d** %builtin_optab, align 8, !dbg !11503
  %tobool15 = icmp ne %struct.optab_d* %10, null, !dbg !11503
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !11505

if.then16:                                        ; preds = %cond.end
  %11 = load %struct.optab_d*, %struct.optab_d** %builtin_optab, align 8, !dbg !11506
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %11, i32 0, i32 4, !dbg !11506
  %12 = load i32, i32* %mode, align 4, !dbg !11506
  %idxprom = sext i32 %12 to i64, !dbg !11506
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !11506
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !11507
  %13 = load i32, i32* %insn_code, align 4, !dbg !11507
  store i32 %13, i32* %retval, align 4, !dbg !11508
  br label %return, !dbg !11508

if.end17:                                         ; preds = %cond.end
  store i32 2956, i32* %retval, align 4, !dbg !11509
  br label %return, !dbg !11509

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !11510
  ret i32 %14, !dbg !11510
}

declare dso_local void @get_max_float(%struct.real_format*, i8*, i64) #2

declare dso_local i32 @real_from_string(%struct.real_value*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_hypot(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %type) #0 !dbg !11511 {
entry:
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11512, metadata !DIExpression()), !dbg !11513
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11514, metadata !DIExpression()), !dbg !11515
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !11516, metadata !DIExpression()), !dbg !11517
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !11518, metadata !DIExpression()), !dbg !11519
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11520, metadata !DIExpression()), !dbg !11521
  ret %union.tree_node* null, !dbg !11522
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_load_exponent(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %type, i8 zeroext %ldexp) #0 !dbg !11523 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %ldexp.addr = alloca i8, align 1
  %max_exp_adj = alloca i64, align 8
  %req_exp_adj = alloca i64, align 8
  %initial_result = alloca %struct.real_value, align 8
  %trunc_result = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11524, metadata !DIExpression()), !dbg !11525
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !11526, metadata !DIExpression()), !dbg !11527
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !11528, metadata !DIExpression()), !dbg !11529
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11530, metadata !DIExpression()), !dbg !11531
  store i8 %ldexp, i8* %ldexp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ldexp.addr, metadata !11532, metadata !DIExpression()), !dbg !11533
  %0 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11534
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !11536
  %conv = zext i8 %call to i32, !dbg !11536
  %tobool = icmp ne i32 %conv, 0, !dbg !11536
  br i1 %tobool, label %land.lhs.true, label %if.end257, !dbg !11537

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11538
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !11539
  %conv2 = zext i8 %call1 to i32, !dbg !11539
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !11539
  br i1 %tobool3, label %if.then, label %if.end257, !dbg !11540

if.then:                                          ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11541
  %call4 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %2), !dbg !11541
  store %union.tree_node* %call4, %union.tree_node** %arg0.addr, align 8, !dbg !11541
  %3 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11543
  %call5 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %3), !dbg !11543
  store %union.tree_node* %call5, %union.tree_node** %arg1.addr, align 8, !dbg !11543
  %4 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11544
  %call6 = call i32 @real_zerop(%union.tree_node* %4), !dbg !11546
  %tobool7 = icmp ne i32 %call6, 0, !dbg !11546
  br i1 %tobool7, label %if.then15, label %lor.lhs.false, !dbg !11547

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11548
  %call8 = call i32 @integer_zerop(%union.tree_node* %5), !dbg !11549
  %tobool9 = icmp ne i32 %call8, 0, !dbg !11549
  br i1 %tobool9, label %if.then15, label %lor.lhs.false10, !dbg !11550

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11551
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !11551
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !11551
  %bf.load = load i64, i64* %7, align 8, !dbg !11551
  %bf.clear = and i64 %bf.load, 65535, !dbg !11551
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11551
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !11552
  br i1 %cmp, label %land.lhs.true12, label %if.end, !dbg !11553

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %8 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11554
  %real_cst = bitcast %union.tree_node* %8 to %struct.tree_real_cst*, !dbg !11554
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !11554
  %9 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !11554
  %call13 = call zeroext i8 @real_isfinite(%struct.real_value* %9), !dbg !11555
  %tobool14 = icmp ne i8 %call13, 0, !dbg !11555
  br i1 %tobool14, label %if.end, label %if.then15, !dbg !11556

if.then15:                                        ; preds = %land.lhs.true12, %lor.lhs.false, %if.then
  %10 = load i32, i32* %loc.addr, align 4, !dbg !11557
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11558
  %12 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11559
  %13 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11560
  %call16 = call %union.tree_node* @omit_one_operand_loc(i32 %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !11561
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !11562
  br label %return, !dbg !11562

if.end:                                           ; preds = %land.lhs.true12, %lor.lhs.false10
  %14 = load i8, i8* %ldexp.addr, align 1, !dbg !11563
  %conv17 = zext i8 %14 to i32, !dbg !11563
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !11563
  br i1 %tobool18, label %land.lhs.true74, label %lor.lhs.false19, !dbg !11565

lor.lhs.false19:                                  ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %base20 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !11566
  %16 = bitcast %struct.tree_base* %base20 to i64*, !dbg !11566
  %bf.load21 = load i64, i64* %16, align 8, !dbg !11566
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !11566
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !11566
  %cmp24 = icmp eq i32 %bf.cast23, 14, !dbg !11566
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !11566

cond.true:                                        ; preds = %lor.lhs.false19
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %call26 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !11566
  br label %cond.end, !dbg !11566

cond.false:                                       ; preds = %lor.lhs.false19
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %type27 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !11566
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !11566
  %bf.load28 = load i32, i32* %mode, align 4, !dbg !11566
  %bf.lshr = lshr i32 %bf.load28, 16, !dbg !11566
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !11566
  br label %cond.end, !dbg !11566

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call26, %cond.true ], [ %bf.clear29, %cond.false ], !dbg !11566
  %idxprom = zext i32 %cond to i64, !dbg !11566
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !11566
  %19 = load i8, i8* %arrayidx, align 1, !dbg !11566
  %conv30 = zext i8 %19 to i32, !dbg !11566
  %cmp31 = icmp eq i32 %conv30, 9, !dbg !11566
  br i1 %cmp31, label %cond.true33, label %cond.false50, !dbg !11566

cond.true33:                                      ; preds = %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %base34 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !11566
  %21 = bitcast %struct.tree_base* %base34 to i64*, !dbg !11566
  %bf.load35 = load i64, i64* %21, align 8, !dbg !11566
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !11566
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !11566
  %cmp38 = icmp eq i32 %bf.cast37, 14, !dbg !11566
  br i1 %cmp38, label %cond.true40, label %cond.false42, !dbg !11566

cond.true40:                                      ; preds = %cond.true33
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %call41 = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !11566
  br label %cond.end48, !dbg !11566

cond.false42:                                     ; preds = %cond.true33
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %type43 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !11566
  %mode44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 6, !dbg !11566
  %bf.load45 = load i32, i32* %mode44, align 4, !dbg !11566
  %bf.lshr46 = lshr i32 %bf.load45, 16, !dbg !11566
  %bf.clear47 = and i32 %bf.lshr46, 255, !dbg !11566
  br label %cond.end48, !dbg !11566

cond.end48:                                       ; preds = %cond.false42, %cond.true40
  %cond49 = phi i32 [ %call41, %cond.true40 ], [ %bf.clear47, %cond.false42 ], !dbg !11566
  %sub = sub i32 %cond49, 42, !dbg !11566
  %add = add i32 %sub, 4, !dbg !11566
  br label %cond.end68, !dbg !11566

cond.false50:                                     ; preds = %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %base51 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !11566
  %25 = bitcast %struct.tree_base* %base51 to i64*, !dbg !11566
  %bf.load52 = load i64, i64* %25, align 8, !dbg !11566
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !11566
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !11566
  %cmp55 = icmp eq i32 %bf.cast54, 14, !dbg !11566
  br i1 %cmp55, label %cond.true57, label %cond.false59, !dbg !11566

cond.true57:                                      ; preds = %cond.false50
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %call58 = call i32 @vector_type_mode(%union.tree_node* %26), !dbg !11566
  br label %cond.end65, !dbg !11566

cond.false59:                                     ; preds = %cond.false50
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11566
  %type60 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !11566
  %mode61 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type60, i32 0, i32 6, !dbg !11566
  %bf.load62 = load i32, i32* %mode61, align 4, !dbg !11566
  %bf.lshr63 = lshr i32 %bf.load62, 16, !dbg !11566
  %bf.clear64 = and i32 %bf.lshr63, 255, !dbg !11566
  br label %cond.end65, !dbg !11566

cond.end65:                                       ; preds = %cond.false59, %cond.true57
  %cond66 = phi i32 [ %call58, %cond.true57 ], [ %bf.clear64, %cond.false59 ], !dbg !11566
  %sub67 = sub i32 %cond66, 38, !dbg !11566
  br label %cond.end68, !dbg !11566

cond.end68:                                       ; preds = %cond.end65, %cond.end48
  %cond69 = phi i32 [ %add, %cond.end48 ], [ %sub67, %cond.end65 ], !dbg !11566
  %idxprom70 = zext i32 %cond69 to i64, !dbg !11566
  %arrayidx71 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom70, !dbg !11566
  %28 = load %struct.real_format*, %struct.real_format** %arrayidx71, align 8, !dbg !11566
  %b = getelementptr inbounds %struct.real_format, %struct.real_format* %28, i32 0, i32 2, !dbg !11567
  %29 = load i32, i32* %b, align 8, !dbg !11567
  %cmp72 = icmp eq i32 %29, 2, !dbg !11568
  br i1 %cmp72, label %land.lhs.true74, label %if.end256, !dbg !11569

land.lhs.true74:                                  ; preds = %cond.end68, %if.end
  %30 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11570
  %base75 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !11570
  %31 = bitcast %struct.tree_base* %base75 to i64*, !dbg !11570
  %bf.load76 = load i64, i64* %31, align 8, !dbg !11570
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !11570
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !11570
  %cmp79 = icmp eq i32 %bf.cast78, 24, !dbg !11571
  br i1 %cmp79, label %land.lhs.true81, label %if.end256, !dbg !11572

land.lhs.true81:                                  ; preds = %land.lhs.true74
  %32 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11573
  %base82 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !11573
  %33 = bitcast %struct.tree_base* %base82 to i64*, !dbg !11573
  %bf.load83 = load i64, i64* %33, align 8, !dbg !11573
  %bf.lshr84 = lshr i64 %bf.load83, 27, !dbg !11573
  %bf.clear85 = and i64 %bf.lshr84, 1, !dbg !11573
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !11573
  %tobool87 = icmp ne i32 %bf.cast86, 0, !dbg !11573
  br i1 %tobool87, label %if.end256, label %land.lhs.true88, !dbg !11574

land.lhs.true88:                                  ; preds = %land.lhs.true81
  %34 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11575
  %call89 = call i32 @host_integerp(%union.tree_node* %34, i32 0), !dbg !11576
  %tobool90 = icmp ne i32 %call89, 0, !dbg !11576
  br i1 %tobool90, label %if.then91, label %if.end256, !dbg !11577

if.then91:                                        ; preds = %land.lhs.true88
  call void @llvm.dbg.declare(metadata i64* %max_exp_adj, metadata !11578, metadata !DIExpression()), !dbg !11581
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %base92 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !11582
  %36 = bitcast %struct.tree_base* %base92 to i64*, !dbg !11582
  %bf.load93 = load i64, i64* %36, align 8, !dbg !11582
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !11582
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !11582
  %cmp96 = icmp eq i32 %bf.cast95, 14, !dbg !11582
  br i1 %cmp96, label %cond.true98, label %cond.false100, !dbg !11582

cond.true98:                                      ; preds = %if.then91
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %call99 = call i32 @vector_type_mode(%union.tree_node* %37), !dbg !11582
  br label %cond.end106, !dbg !11582

cond.false100:                                    ; preds = %if.then91
  %38 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %type101 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !11582
  %mode102 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type101, i32 0, i32 6, !dbg !11582
  %bf.load103 = load i32, i32* %mode102, align 4, !dbg !11582
  %bf.lshr104 = lshr i32 %bf.load103, 16, !dbg !11582
  %bf.clear105 = and i32 %bf.lshr104, 255, !dbg !11582
  br label %cond.end106, !dbg !11582

cond.end106:                                      ; preds = %cond.false100, %cond.true98
  %cond107 = phi i32 [ %call99, %cond.true98 ], [ %bf.clear105, %cond.false100 ], !dbg !11582
  %idxprom108 = zext i32 %cond107 to i64, !dbg !11582
  %arrayidx109 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom108, !dbg !11582
  %39 = load i8, i8* %arrayidx109, align 1, !dbg !11582
  %conv110 = zext i8 %39 to i32, !dbg !11582
  %cmp111 = icmp eq i32 %conv110, 9, !dbg !11582
  br i1 %cmp111, label %cond.true113, label %cond.false132, !dbg !11582

cond.true113:                                     ; preds = %cond.end106
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %base114 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !11582
  %41 = bitcast %struct.tree_base* %base114 to i64*, !dbg !11582
  %bf.load115 = load i64, i64* %41, align 8, !dbg !11582
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !11582
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !11582
  %cmp118 = icmp eq i32 %bf.cast117, 14, !dbg !11582
  br i1 %cmp118, label %cond.true120, label %cond.false122, !dbg !11582

cond.true120:                                     ; preds = %cond.true113
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %call121 = call i32 @vector_type_mode(%union.tree_node* %42), !dbg !11582
  br label %cond.end128, !dbg !11582

cond.false122:                                    ; preds = %cond.true113
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %type123 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !11582
  %mode124 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 6, !dbg !11582
  %bf.load125 = load i32, i32* %mode124, align 4, !dbg !11582
  %bf.lshr126 = lshr i32 %bf.load125, 16, !dbg !11582
  %bf.clear127 = and i32 %bf.lshr126, 255, !dbg !11582
  br label %cond.end128, !dbg !11582

cond.end128:                                      ; preds = %cond.false122, %cond.true120
  %cond129 = phi i32 [ %call121, %cond.true120 ], [ %bf.clear127, %cond.false122 ], !dbg !11582
  %sub130 = sub i32 %cond129, 42, !dbg !11582
  %add131 = add i32 %sub130, 4, !dbg !11582
  br label %cond.end150, !dbg !11582

cond.false132:                                    ; preds = %cond.end106
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %base133 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !11582
  %45 = bitcast %struct.tree_base* %base133 to i64*, !dbg !11582
  %bf.load134 = load i64, i64* %45, align 8, !dbg !11582
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !11582
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !11582
  %cmp137 = icmp eq i32 %bf.cast136, 14, !dbg !11582
  br i1 %cmp137, label %cond.true139, label %cond.false141, !dbg !11582

cond.true139:                                     ; preds = %cond.false132
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %call140 = call i32 @vector_type_mode(%union.tree_node* %46), !dbg !11582
  br label %cond.end147, !dbg !11582

cond.false141:                                    ; preds = %cond.false132
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11582
  %type142 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !11582
  %mode143 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 6, !dbg !11582
  %bf.load144 = load i32, i32* %mode143, align 4, !dbg !11582
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !11582
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !11582
  br label %cond.end147, !dbg !11582

cond.end147:                                      ; preds = %cond.false141, %cond.true139
  %cond148 = phi i32 [ %call140, %cond.true139 ], [ %bf.clear146, %cond.false141 ], !dbg !11582
  %sub149 = sub i32 %cond148, 38, !dbg !11582
  br label %cond.end150, !dbg !11582

cond.end150:                                      ; preds = %cond.end147, %cond.end128
  %cond151 = phi i32 [ %add131, %cond.end128 ], [ %sub149, %cond.end147 ], !dbg !11582
  %idxprom152 = zext i32 %cond151 to i64, !dbg !11582
  %arrayidx153 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom152, !dbg !11582
  %48 = load %struct.real_format*, %struct.real_format** %arrayidx153, align 8, !dbg !11582
  %emax = getelementptr inbounds %struct.real_format, %struct.real_format* %48, i32 0, i32 6, !dbg !11583
  %49 = load i32, i32* %emax, align 8, !dbg !11583
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %base154 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !11584
  %51 = bitcast %struct.tree_base* %base154 to i64*, !dbg !11584
  %bf.load155 = load i64, i64* %51, align 8, !dbg !11584
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !11584
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !11584
  %cmp158 = icmp eq i32 %bf.cast157, 14, !dbg !11584
  br i1 %cmp158, label %cond.true160, label %cond.false162, !dbg !11584

cond.true160:                                     ; preds = %cond.end150
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %call161 = call i32 @vector_type_mode(%union.tree_node* %52), !dbg !11584
  br label %cond.end168, !dbg !11584

cond.false162:                                    ; preds = %cond.end150
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %type163 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !11584
  %mode164 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type163, i32 0, i32 6, !dbg !11584
  %bf.load165 = load i32, i32* %mode164, align 4, !dbg !11584
  %bf.lshr166 = lshr i32 %bf.load165, 16, !dbg !11584
  %bf.clear167 = and i32 %bf.lshr166, 255, !dbg !11584
  br label %cond.end168, !dbg !11584

cond.end168:                                      ; preds = %cond.false162, %cond.true160
  %cond169 = phi i32 [ %call161, %cond.true160 ], [ %bf.clear167, %cond.false162 ], !dbg !11584
  %idxprom170 = zext i32 %cond169 to i64, !dbg !11584
  %arrayidx171 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom170, !dbg !11584
  %54 = load i8, i8* %arrayidx171, align 1, !dbg !11584
  %conv172 = zext i8 %54 to i32, !dbg !11584
  %cmp173 = icmp eq i32 %conv172, 9, !dbg !11584
  br i1 %cmp173, label %cond.true175, label %cond.false194, !dbg !11584

cond.true175:                                     ; preds = %cond.end168
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %base176 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !11584
  %56 = bitcast %struct.tree_base* %base176 to i64*, !dbg !11584
  %bf.load177 = load i64, i64* %56, align 8, !dbg !11584
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !11584
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !11584
  %cmp180 = icmp eq i32 %bf.cast179, 14, !dbg !11584
  br i1 %cmp180, label %cond.true182, label %cond.false184, !dbg !11584

cond.true182:                                     ; preds = %cond.true175
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %call183 = call i32 @vector_type_mode(%union.tree_node* %57), !dbg !11584
  br label %cond.end190, !dbg !11584

cond.false184:                                    ; preds = %cond.true175
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %type185 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !11584
  %mode186 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 6, !dbg !11584
  %bf.load187 = load i32, i32* %mode186, align 4, !dbg !11584
  %bf.lshr188 = lshr i32 %bf.load187, 16, !dbg !11584
  %bf.clear189 = and i32 %bf.lshr188, 255, !dbg !11584
  br label %cond.end190, !dbg !11584

cond.end190:                                      ; preds = %cond.false184, %cond.true182
  %cond191 = phi i32 [ %call183, %cond.true182 ], [ %bf.clear189, %cond.false184 ], !dbg !11584
  %sub192 = sub i32 %cond191, 42, !dbg !11584
  %add193 = add i32 %sub192, 4, !dbg !11584
  br label %cond.end212, !dbg !11584

cond.false194:                                    ; preds = %cond.end168
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %base195 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !11584
  %60 = bitcast %struct.tree_base* %base195 to i64*, !dbg !11584
  %bf.load196 = load i64, i64* %60, align 8, !dbg !11584
  %bf.clear197 = and i64 %bf.load196, 65535, !dbg !11584
  %bf.cast198 = trunc i64 %bf.clear197 to i32, !dbg !11584
  %cmp199 = icmp eq i32 %bf.cast198, 14, !dbg !11584
  br i1 %cmp199, label %cond.true201, label %cond.false203, !dbg !11584

cond.true201:                                     ; preds = %cond.false194
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %call202 = call i32 @vector_type_mode(%union.tree_node* %61), !dbg !11584
  br label %cond.end209, !dbg !11584

cond.false203:                                    ; preds = %cond.false194
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11584
  %type204 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !11584
  %mode205 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type204, i32 0, i32 6, !dbg !11584
  %bf.load206 = load i32, i32* %mode205, align 4, !dbg !11584
  %bf.lshr207 = lshr i32 %bf.load206, 16, !dbg !11584
  %bf.clear208 = and i32 %bf.lshr207, 255, !dbg !11584
  br label %cond.end209, !dbg !11584

cond.end209:                                      ; preds = %cond.false203, %cond.true201
  %cond210 = phi i32 [ %call202, %cond.true201 ], [ %bf.clear208, %cond.false203 ], !dbg !11584
  %sub211 = sub i32 %cond210, 38, !dbg !11584
  br label %cond.end212, !dbg !11584

cond.end212:                                      ; preds = %cond.end209, %cond.end190
  %cond213 = phi i32 [ %add193, %cond.end190 ], [ %sub211, %cond.end209 ], !dbg !11584
  %idxprom214 = zext i32 %cond213 to i64, !dbg !11584
  %arrayidx215 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom214, !dbg !11584
  %63 = load %struct.real_format*, %struct.real_format** %arrayidx215, align 8, !dbg !11584
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %63, i32 0, i32 5, !dbg !11585
  %64 = load i32, i32* %emin, align 4, !dbg !11585
  %sub216 = sub nsw i32 %49, %64, !dbg !11586
  %conv217 = sext i32 %sub216 to i64, !dbg !11582
  %call218 = call i64 @labs(i64 %conv217) #6, !dbg !11587
  %mul = mul nsw i64 2, %call218, !dbg !11588
  store i64 %mul, i64* %max_exp_adj, align 8, !dbg !11581
  call void @llvm.dbg.declare(metadata i64* %req_exp_adj, metadata !11589, metadata !DIExpression()), !dbg !11590
  %65 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11591
  %call219 = call i64 @tree_low_cst(%union.tree_node* %65, i32 0), !dbg !11592
  store i64 %call219, i64* %req_exp_adj, align 8, !dbg !11590
  %66 = load i64, i64* %max_exp_adj, align 8, !dbg !11593
  %sub220 = sub nsw i64 0, %66, !dbg !11595
  %67 = load i64, i64* %req_exp_adj, align 8, !dbg !11596
  %cmp221 = icmp slt i64 %sub220, %67, !dbg !11597
  br i1 %cmp221, label %land.lhs.true223, label %if.end255, !dbg !11598

land.lhs.true223:                                 ; preds = %cond.end212
  %68 = load i64, i64* %req_exp_adj, align 8, !dbg !11599
  %69 = load i64, i64* %max_exp_adj, align 8, !dbg !11600
  %cmp224 = icmp slt i64 %68, %69, !dbg !11601
  br i1 %cmp224, label %if.then226, label %if.end255, !dbg !11602

if.then226:                                       ; preds = %land.lhs.true223
  call void @llvm.dbg.declare(metadata %struct.real_value* %initial_result, metadata !11603, metadata !DIExpression()), !dbg !11605
  %70 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11606
  %real_cst227 = bitcast %union.tree_node* %70 to %struct.tree_real_cst*, !dbg !11606
  %real_cst_ptr228 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst227, i32 0, i32 1, !dbg !11606
  %71 = load %struct.real_value*, %struct.real_value** %real_cst_ptr228, align 8, !dbg !11606
  %72 = load i64, i64* %req_exp_adj, align 8, !dbg !11607
  %conv229 = trunc i64 %72 to i32, !dbg !11607
  call void @real_ldexp(%struct.real_value* %initial_result, %struct.real_value* %71, i32 %conv229), !dbg !11608
  %call230 = call zeroext i8 @real_isinf(%struct.real_value* %initial_result), !dbg !11609
  %tobool231 = icmp ne i8 %call230, 0, !dbg !11609
  br i1 %tobool231, label %if.end254, label %if.then232, !dbg !11611

if.then232:                                       ; preds = %if.then226
  call void @llvm.dbg.declare(metadata %struct.real_value* %trunc_result, metadata !11612, metadata !DIExpression()), !dbg !11614
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11615
  %base233 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !11615
  %74 = bitcast %struct.tree_base* %base233 to i64*, !dbg !11615
  %bf.load234 = load i64, i64* %74, align 8, !dbg !11615
  %bf.clear235 = and i64 %bf.load234, 65535, !dbg !11615
  %bf.cast236 = trunc i64 %bf.clear235 to i32, !dbg !11615
  %cmp237 = icmp eq i32 %bf.cast236, 14, !dbg !11615
  br i1 %cmp237, label %cond.true239, label %cond.false241, !dbg !11615

cond.true239:                                     ; preds = %if.then232
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11615
  %call240 = call i32 @vector_type_mode(%union.tree_node* %75), !dbg !11615
  br label %cond.end247, !dbg !11615

cond.false241:                                    ; preds = %if.then232
  %76 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11615
  %type242 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !11615
  %mode243 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type242, i32 0, i32 6, !dbg !11615
  %bf.load244 = load i32, i32* %mode243, align 4, !dbg !11615
  %bf.lshr245 = lshr i32 %bf.load244, 16, !dbg !11615
  %bf.clear246 = and i32 %bf.lshr245, 255, !dbg !11615
  br label %cond.end247, !dbg !11615

cond.end247:                                      ; preds = %cond.false241, %cond.true239
  %cond248 = phi i32 [ %call240, %cond.true239 ], [ %bf.clear246, %cond.false241 ], !dbg !11615
  call void @real_value_truncate(%struct.real_value* sret %trunc_result, i32 %cond248, %struct.real_value* byval(%struct.real_value) align 8 %initial_result), !dbg !11616
  %call249 = call zeroext i8 @real_compare(i32 101, %struct.real_value* %initial_result, %struct.real_value* %trunc_result), !dbg !11617
  %tobool250 = icmp ne i8 %call249, 0, !dbg !11617
  br i1 %tobool250, label %if.then251, label %if.end253, !dbg !11619

if.then251:                                       ; preds = %cond.end247
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11620
  %call252 = call %union.tree_node* @build_real(%union.tree_node* %77, %struct.real_value* byval(%struct.real_value) align 8 %trunc_result), !dbg !11621
  store %union.tree_node* %call252, %union.tree_node** %retval, align 8, !dbg !11622
  br label %return, !dbg !11622

if.end253:                                        ; preds = %cond.end247
  br label %if.end254, !dbg !11623

if.end254:                                        ; preds = %if.end253, %if.then226
  br label %if.end255, !dbg !11624

if.end255:                                        ; preds = %if.end254, %land.lhs.true223, %cond.end212
  br label %if.end256, !dbg !11625

if.end256:                                        ; preds = %if.end255, %land.lhs.true88, %land.lhs.true81, %land.lhs.true74, %cond.end68
  br label %if.end257, !dbg !11626

if.end257:                                        ; preds = %if.end256, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11627
  br label %return, !dbg !11627

return:                                           ; preds = %if.end257, %if.then251, %if.then15
  %78 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11628
  ret %union.tree_node* %78, !dbg !11628
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_frexp(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %rettype) #0 !dbg !11629 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %rettype.addr = alloca %union.tree_node*, align 8
  %value = alloca %struct.real_value*, align 8
  %frac = alloca %union.tree_node*, align 8
  %exp = alloca %union.tree_node*, align 8
  %frac_rvt = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11630, metadata !DIExpression()), !dbg !11631
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !11632, metadata !DIExpression()), !dbg !11633
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !11634, metadata !DIExpression()), !dbg !11635
  store %union.tree_node* %rettype, %union.tree_node** %rettype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rettype.addr, metadata !11636, metadata !DIExpression()), !dbg !11637
  %0 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11638
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !11640
  %tobool = icmp ne i8 %call, 0, !dbg !11640
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11641

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11642
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !11643
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11643
  br i1 %tobool2, label %if.end, label %if.then, !dbg !11644

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11645
  br label %return, !dbg !11645

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11646
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %2), !dbg !11646
  store %union.tree_node* %call3, %union.tree_node** %arg0.addr, align 8, !dbg !11646
  %3 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11647
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !11647
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !11647
  %bf.load = load i64, i64* %4, align 8, !dbg !11647
  %bf.clear = and i64 %bf.load, 65535, !dbg !11647
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11647
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !11649
  br i1 %cmp, label %land.lhs.true, label %if.then9, !dbg !11650

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11651
  %base4 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !11651
  %6 = bitcast %struct.tree_base* %base4 to i64*, !dbg !11651
  %bf.load5 = load i64, i64* %6, align 8, !dbg !11651
  %bf.lshr = lshr i64 %bf.load5, 27, !dbg !11651
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !11651
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !11651
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !11651
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !11652

if.then9:                                         ; preds = %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11653
  br label %return, !dbg !11653

if.end10:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* %loc.addr, align 4, !dbg !11654
  %8 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11655
  %call11 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %7, %union.tree_node* %8), !dbg !11656
  store %union.tree_node* %call11, %union.tree_node** %arg1.addr, align 8, !dbg !11657
  %9 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11658
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !11658
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11658
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11658
  %type12 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !11658
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 16, !dbg !11658
  %11 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !11658
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !11660
  %cmp13 = icmp eq %union.tree_node* %11, %12, !dbg !11661
  br i1 %cmp13, label %if.then14, label %if.end31, !dbg !11662

if.then14:                                        ; preds = %if.end10
  call void @llvm.dbg.declare(metadata %struct.real_value** %value, metadata !11663, metadata !DIExpression()), !dbg !11665
  %13 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11666
  %real_cst = bitcast %union.tree_node* %13 to %struct.tree_real_cst*, !dbg !11666
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !11666
  %14 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !11666
  store %struct.real_value* %14, %struct.real_value** %value, align 8, !dbg !11665
  call void @llvm.dbg.declare(metadata %union.tree_node** %frac, metadata !11667, metadata !DIExpression()), !dbg !11668
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !11669, metadata !DIExpression()), !dbg !11670
  %15 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11671
  %16 = bitcast %struct.real_value* %15 to i32*, !dbg !11672
  %bf.load15 = load i32, i32* %16, align 8, !dbg !11672
  %bf.clear16 = and i32 %bf.load15, 3, !dbg !11672
  switch i32 %bf.clear16, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb17
    i32 2, label %sw.bb17
    i32 1, label %sw.bb19
  ], !dbg !11673

sw.bb:                                            ; preds = %if.then14
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11674
  store %union.tree_node* %17, %union.tree_node** %exp, align 8, !dbg !11676
  %18 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11677
  store %union.tree_node* %18, %union.tree_node** %frac, align 8, !dbg !11678
  br label %sw.epilog, !dbg !11679

sw.bb17:                                          ; preds = %if.then14, %if.then14
  %19 = load i32, i32* %loc.addr, align 4, !dbg !11680
  %20 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11681
  %21 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11682
  %22 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11683
  %call18 = call %union.tree_node* @omit_one_operand_loc(i32 %19, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %22), !dbg !11684
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !11685
  br label %return, !dbg !11685

sw.bb19:                                          ; preds = %if.then14
  call void @llvm.dbg.declare(metadata %struct.real_value* %frac_rvt, metadata !11686, metadata !DIExpression()), !dbg !11688
  %23 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11689
  %24 = bitcast %struct.real_value* %frac_rvt to i8*, !dbg !11690
  %25 = bitcast %struct.real_value* %23 to i8*, !dbg !11690
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 32, i1 false), !dbg !11690
  %26 = bitcast %struct.real_value* %frac_rvt to i32*, !dbg !11691
  %bf.load20 = load i32, i32* %26, align 8, !dbg !11691
  %bf.clear21 = and i32 %bf.load20, 63, !dbg !11691
  store i32 %bf.clear21, i32* %26, align 8, !dbg !11691
  %27 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11692
  %call22 = call %union.tree_node* @build_real(%union.tree_node* %27, %struct.real_value* byval(%struct.real_value) align 8 %frac_rvt), !dbg !11693
  store %union.tree_node* %call22, %union.tree_node** %frac, align 8, !dbg !11694
  %28 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11695
  %29 = bitcast %struct.real_value* %28 to i32*, !dbg !11695
  %bf.load23 = load i32, i32* %29, align 8, !dbg !11695
  %bf.lshr24 = lshr i32 %bf.load23, 6, !dbg !11695
  %xor = xor i32 %bf.lshr24, 33554432, !dbg !11695
  %sub = sub nsw i32 %xor, 33554432, !dbg !11695
  %conv = sext i32 %sub to i64, !dbg !11695
  %call25 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !11696
  store %union.tree_node* %call25, %union.tree_node** %exp, align 8, !dbg !11697
  br label %sw.epilog, !dbg !11698

sw.default:                                       ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.724, i64 0, i64 0), i32 9251, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !11699
  br label %sw.epilog, !dbg !11700

sw.epilog:                                        ; preds = %sw.default, %sw.bb19, %sw.bb
  %30 = load i32, i32* %loc.addr, align 4, !dbg !11701
  %31 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11701
  %32 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11701
  %33 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !11701
  %call26 = call %union.tree_node* @fold_build2_stat_loc(i32 %30, i32 53, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !11701
  store %union.tree_node* %call26, %union.tree_node** %arg1.addr, align 8, !dbg !11702
  %34 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11703
  %base27 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !11703
  %35 = bitcast %struct.tree_base* %base27 to i64*, !dbg !11703
  %bf.load28 = load i64, i64* %35, align 8, !dbg !11704
  %bf.clear29 = and i64 %bf.load28, -65537, !dbg !11704
  %bf.set = or i64 %bf.clear29, 65536, !dbg !11704
  store i64 %bf.set, i64* %35, align 8, !dbg !11704
  %36 = load i32, i32* %loc.addr, align 4, !dbg !11705
  %37 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11705
  %38 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11705
  %39 = load %union.tree_node*, %union.tree_node** %frac, align 8, !dbg !11705
  %call30 = call %union.tree_node* @fold_build2_stat_loc(i32 %36, i32 52, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !11705
  store %union.tree_node* %call30, %union.tree_node** %retval, align 8, !dbg !11706
  br label %return, !dbg !11706

if.end31:                                         ; preds = %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11707
  br label %return, !dbg !11707

return:                                           ; preds = %if.end31, %sw.epilog, %sw.bb17, %if.then9, %if.then
  %40 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11708
  ret %union.tree_node* %40, !dbg !11708
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_modf(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %rettype) #0 !dbg !11709 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %rettype.addr = alloca %union.tree_node*, align 8
  %value = alloca %struct.real_value*, align 8
  %trunc = alloca %struct.real_value, align 8
  %frac = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11710, metadata !DIExpression()), !dbg !11711
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !11712, metadata !DIExpression()), !dbg !11713
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !11714, metadata !DIExpression()), !dbg !11715
  store %union.tree_node* %rettype, %union.tree_node** %rettype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rettype.addr, metadata !11716, metadata !DIExpression()), !dbg !11717
  %0 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11718
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !11720
  %tobool = icmp ne i8 %call, 0, !dbg !11720
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11721

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11722
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !11723
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11723
  br i1 %tobool2, label %if.end, label %if.then, !dbg !11724

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11725
  br label %return, !dbg !11725

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11726
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %2), !dbg !11726
  store %union.tree_node* %call3, %union.tree_node** %arg0.addr, align 8, !dbg !11726
  %3 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11727
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !11727
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !11727
  %bf.load = load i64, i64* %4, align 8, !dbg !11727
  %bf.clear = and i64 %bf.load, 65535, !dbg !11727
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11727
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !11729
  br i1 %cmp, label %land.lhs.true, label %if.then9, !dbg !11730

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11731
  %base4 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !11731
  %6 = bitcast %struct.tree_base* %base4 to i64*, !dbg !11731
  %bf.load5 = load i64, i64* %6, align 8, !dbg !11731
  %bf.lshr = lshr i64 %bf.load5, 27, !dbg !11731
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !11731
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !11731
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !11731
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !11732

if.then9:                                         ; preds = %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11733
  br label %return, !dbg !11733

if.end10:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* %loc.addr, align 4, !dbg !11734
  %8 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11735
  %call11 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %7, %union.tree_node* %8), !dbg !11736
  store %union.tree_node* %call11, %union.tree_node** %arg1.addr, align 8, !dbg !11737
  %9 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11738
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !11738
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11738
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11738
  %type12 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !11738
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 16, !dbg !11738
  %11 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !11738
  %12 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11740
  %type13 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !11740
  %main_variant14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 16, !dbg !11740
  %13 = load %union.tree_node*, %union.tree_node** %main_variant14, align 8, !dbg !11740
  %cmp15 = icmp eq %union.tree_node* %11, %13, !dbg !11741
  br i1 %cmp15, label %if.then16, label %if.end53, !dbg !11742

if.then16:                                        ; preds = %if.end10
  call void @llvm.dbg.declare(metadata %struct.real_value** %value, metadata !11743, metadata !DIExpression()), !dbg !11745
  %14 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !11746
  %real_cst = bitcast %union.tree_node* %14 to %struct.tree_real_cst*, !dbg !11746
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !11746
  %15 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !11746
  store %struct.real_value* %15, %struct.real_value** %value, align 8, !dbg !11745
  call void @llvm.dbg.declare(metadata %struct.real_value* %trunc, metadata !11747, metadata !DIExpression()), !dbg !11748
  call void @llvm.dbg.declare(metadata %struct.real_value* %frac, metadata !11749, metadata !DIExpression()), !dbg !11750
  %16 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11751
  %17 = bitcast %struct.real_value* %16 to i32*, !dbg !11752
  %bf.load17 = load i32, i32* %17, align 8, !dbg !11752
  %bf.clear18 = and i32 %bf.load17, 3, !dbg !11752
  switch i32 %bf.clear18, label %sw.epilog [
    i32 3, label %sw.bb
    i32 0, label %sw.bb
    i32 2, label %sw.bb19
    i32 1, label %sw.bb25
  ], !dbg !11753

sw.bb:                                            ; preds = %if.then16, %if.then16
  %18 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11754
  %19 = bitcast %struct.real_value* %frac to i8*, !dbg !11756
  %20 = bitcast %struct.real_value* %18 to i8*, !dbg !11756
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !11756
  %21 = bitcast %struct.real_value* %trunc to i8*, !dbg !11757
  %22 = bitcast %struct.real_value* %frac to i8*, !dbg !11757
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false), !dbg !11757
  br label %sw.epilog, !dbg !11758

sw.bb19:                                          ; preds = %if.then16
  %23 = bitcast %struct.real_value* %frac to i8*, !dbg !11759
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 bitcast (%struct.real_value* @dconst0 to i8*), i64 32, i1 false), !dbg !11759
  %24 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11760
  %25 = bitcast %struct.real_value* %24 to i32*, !dbg !11761
  %bf.load20 = load i32, i32* %25, align 8, !dbg !11761
  %bf.lshr21 = lshr i32 %bf.load20, 3, !dbg !11761
  %bf.clear22 = and i32 %bf.lshr21, 1, !dbg !11761
  %26 = bitcast %struct.real_value* %frac to i32*, !dbg !11762
  %bf.load23 = load i32, i32* %26, align 8, !dbg !11763
  %bf.value = and i32 %bf.clear22, 1, !dbg !11763
  %bf.shl = shl i32 %bf.value, 3, !dbg !11763
  %bf.clear24 = and i32 %bf.load23, -9, !dbg !11763
  %bf.set = or i32 %bf.clear24, %bf.shl, !dbg !11763
  store i32 %bf.set, i32* %26, align 8, !dbg !11763
  %27 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11764
  %28 = bitcast %struct.real_value* %trunc to i8*, !dbg !11765
  %29 = bitcast %struct.real_value* %27 to i8*, !dbg !11765
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 32, i1 false), !dbg !11765
  br label %sw.epilog, !dbg !11766

sw.bb25:                                          ; preds = %if.then16
  %30 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11767
  call void @real_trunc(%struct.real_value* %trunc, i32 0, %struct.real_value* %30), !dbg !11768
  %31 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11769
  %call26 = call zeroext i8 @real_arithmetic(%struct.real_value* %frac, i32 64, %struct.real_value* %31, %struct.real_value* %trunc), !dbg !11770
  %32 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11771
  %33 = bitcast %struct.real_value* %32 to i32*, !dbg !11773
  %bf.load27 = load i32, i32* %33, align 8, !dbg !11773
  %bf.lshr28 = lshr i32 %bf.load27, 3, !dbg !11773
  %bf.clear29 = and i32 %bf.lshr28, 1, !dbg !11773
  %tobool30 = icmp ne i32 %bf.clear29, 0, !dbg !11771
  br i1 %tobool30, label %land.lhs.true31, label %if.end44, !dbg !11774

land.lhs.true31:                                  ; preds = %sw.bb25
  %34 = bitcast %struct.real_value* %frac to i32*, !dbg !11775
  %bf.load32 = load i32, i32* %34, align 8, !dbg !11775
  %bf.clear33 = and i32 %bf.load32, 3, !dbg !11775
  %cmp34 = icmp eq i32 %bf.clear33, 0, !dbg !11776
  br i1 %cmp34, label %if.then35, label %if.end44, !dbg !11777

if.then35:                                        ; preds = %land.lhs.true31
  %35 = load %struct.real_value*, %struct.real_value** %value, align 8, !dbg !11778
  %36 = bitcast %struct.real_value* %35 to i32*, !dbg !11779
  %bf.load36 = load i32, i32* %36, align 8, !dbg !11779
  %bf.lshr37 = lshr i32 %bf.load36, 3, !dbg !11779
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !11779
  %37 = bitcast %struct.real_value* %frac to i32*, !dbg !11780
  %bf.load39 = load i32, i32* %37, align 8, !dbg !11781
  %bf.value40 = and i32 %bf.clear38, 1, !dbg !11781
  %bf.shl41 = shl i32 %bf.value40, 3, !dbg !11781
  %bf.clear42 = and i32 %bf.load39, -9, !dbg !11781
  %bf.set43 = or i32 %bf.clear42, %bf.shl41, !dbg !11781
  store i32 %bf.set43, i32* %37, align 8, !dbg !11781
  br label %if.end44, !dbg !11782

if.end44:                                         ; preds = %if.then35, %land.lhs.true31, %sw.bb25
  br label %sw.epilog, !dbg !11783

sw.epilog:                                        ; preds = %if.then16, %if.end44, %sw.bb19, %sw.bb
  %38 = load i32, i32* %loc.addr, align 4, !dbg !11784
  %39 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11784
  %40 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11784
  %41 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11784
  %call45 = call %union.tree_node* @build_real(%union.tree_node* %41, %struct.real_value* byval(%struct.real_value) align 8 %trunc), !dbg !11784
  %call46 = call %union.tree_node* @fold_build2_stat_loc(i32 %38, i32 53, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %call45), !dbg !11784
  store %union.tree_node* %call46, %union.tree_node** %arg1.addr, align 8, !dbg !11785
  %42 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11786
  %base47 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !11786
  %43 = bitcast %struct.tree_base* %base47 to i64*, !dbg !11786
  %bf.load48 = load i64, i64* %43, align 8, !dbg !11787
  %bf.clear49 = and i64 %bf.load48, -65537, !dbg !11787
  %bf.set50 = or i64 %bf.clear49, 65536, !dbg !11787
  store i64 %bf.set50, i64* %43, align 8, !dbg !11787
  %44 = load i32, i32* %loc.addr, align 4, !dbg !11788
  %45 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11788
  %46 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !11788
  %47 = load %union.tree_node*, %union.tree_node** %rettype.addr, align 8, !dbg !11788
  %call51 = call %union.tree_node* @build_real(%union.tree_node* %47, %struct.real_value* byval(%struct.real_value) align 8 %frac), !dbg !11788
  %call52 = call %union.tree_node* @fold_build2_stat_loc(i32 %44, i32 52, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %call51), !dbg !11788
  store %union.tree_node* %call52, %union.tree_node** %retval, align 8, !dbg !11789
  br label %return, !dbg !11789

if.end53:                                         ; preds = %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11790
  br label %return, !dbg !11790

return:                                           ; preds = %if.end53, %sw.epilog, %if.then9, %if.then
  %48 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11791
  ret %union.tree_node* %48, !dbg !11791
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_bzero(i32 %loc, %union.tree_node* %dest, %union.tree_node* %size, i8 zeroext %ignore) #0 !dbg !11792 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dest.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11793, metadata !DIExpression()), !dbg !11794
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !11795, metadata !DIExpression()), !dbg !11796
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !11797, metadata !DIExpression()), !dbg !11798
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !11799, metadata !DIExpression()), !dbg !11800
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !11801
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !11803
  %tobool = icmp ne i8 %call, 0, !dbg !11803
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11804

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !11805
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !11806
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11806
  br i1 %tobool2, label %if.end, label %if.then, !dbg !11807

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11808
  br label %return, !dbg !11808

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8, i8* %ignore.addr, align 1, !dbg !11809
  %tobool3 = icmp ne i8 %2, 0, !dbg !11809
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !11811

if.then4:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11812
  br label %return, !dbg !11812

if.end5:                                          ; preds = %if.end
  %3 = load i32, i32* %loc.addr, align 4, !dbg !11813
  %4 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !11814
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11815
  %6 = load i32, i32* %loc.addr, align 4, !dbg !11816
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !11817
  %8 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !11818
  %call6 = call %union.tree_node* @fold_convert_loc(i32 %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !11819
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !11820
  %10 = load i8, i8* %ignore.addr, align 1, !dbg !11821
  %call7 = call %union.tree_node* @fold_builtin_memset(i32 %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %call6, %union.tree_node* %9, i8 zeroext %10), !dbg !11822
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !11823
  br label %return, !dbg !11823

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11824
  ret %union.tree_node* %11, !dbg !11824
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strstr(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2, %union.tree_node* %type) #0 !dbg !11825 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %r = alloca i8*, align 8
  %tem = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11826, metadata !DIExpression()), !dbg !11827
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !11828, metadata !DIExpression()), !dbg !11829
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !11830, metadata !DIExpression()), !dbg !11831
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11832, metadata !DIExpression()), !dbg !11833
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11834
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !11836
  %tobool = icmp ne i8 %call, 0, !dbg !11836
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11837

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !11838
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !11839
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11839
  br i1 %tobool2, label %if.else, label %if.then, !dbg !11840

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11841
  br label %return, !dbg !11841

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !11842, metadata !DIExpression()), !dbg !11844
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !11845, metadata !DIExpression()), !dbg !11846
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !11847, metadata !DIExpression()), !dbg !11848
  %2 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !11849
  %call3 = call i8* @c_getstr(%union.tree_node* %2), !dbg !11850
  store i8* %call3, i8** %p2, align 8, !dbg !11851
  %3 = load i8*, i8** %p2, align 8, !dbg !11852
  %cmp = icmp eq i8* %3, null, !dbg !11854
  br i1 %cmp, label %if.then4, label %if.end, !dbg !11855

if.then4:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11856
  br label %return, !dbg !11856

if.end:                                           ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11857
  %call5 = call i8* @c_getstr(%union.tree_node* %4), !dbg !11858
  store i8* %call5, i8** %p1, align 8, !dbg !11859
  %5 = load i8*, i8** %p1, align 8, !dbg !11860
  %cmp6 = icmp ne i8* %5, null, !dbg !11862
  br i1 %cmp6, label %if.then7, label %if.end19, !dbg !11863

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %r, metadata !11864, metadata !DIExpression()), !dbg !11866
  %6 = load i8*, i8** %p1, align 8, !dbg !11867
  %7 = load i8*, i8** %p2, align 8, !dbg !11868
  %call8 = call i8* @strstr(i8* %6, i8* %7), !dbg !11869
  store i8* %call8, i8** %r, align 8, !dbg !11866
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !11870, metadata !DIExpression()), !dbg !11871
  %8 = load i8*, i8** %r, align 8, !dbg !11872
  %cmp9 = icmp eq i8* %8, null, !dbg !11874
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !11875

if.then10:                                        ; preds = %if.then7
  %9 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11876
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !11876
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11876
  %10 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !11876
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 0), !dbg !11877
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !11878
  br label %return, !dbg !11878

if.end13:                                         ; preds = %if.then7
  %11 = load i32, i32* %loc.addr, align 4, !dbg !11879
  %12 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11879
  %common14 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11879
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !11879
  %13 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !11879
  %14 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11879
  %15 = load i8*, i8** %r, align 8, !dbg !11879
  %16 = load i8*, i8** %p1, align 8, !dbg !11879
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64, !dbg !11879
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64, !dbg !11879
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11879
  %call16 = call %union.tree_node* @size_int_kind(i64 %sub.ptr.sub, i32 0), !dbg !11879
  %call17 = call %union.tree_node* @fold_build2_stat_loc(i32 %11, i32 66, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %call16), !dbg !11879
  store %union.tree_node* %call17, %union.tree_node** %tem, align 8, !dbg !11880
  %17 = load i32, i32* %loc.addr, align 4, !dbg !11881
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11882
  %19 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11883
  %call18 = call %union.tree_node* @fold_convert_loc(i32 %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !11884
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !11885
  br label %return, !dbg !11885

if.end19:                                         ; preds = %if.end
  %20 = load i8*, i8** %p2, align 8, !dbg !11886
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0, !dbg !11886
  %21 = load i8, i8* %arrayidx, align 1, !dbg !11886
  %conv = sext i8 %21 to i32, !dbg !11886
  %cmp20 = icmp eq i32 %conv, 0, !dbg !11888
  br i1 %cmp20, label %if.then22, label %if.end24, !dbg !11889

if.then22:                                        ; preds = %if.end19
  %22 = load i32, i32* %loc.addr, align 4, !dbg !11890
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11891
  %24 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11892
  %call23 = call %union.tree_node* @fold_convert_loc(i32 %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !11893
  store %union.tree_node* %call23, %union.tree_node** %retval, align 8, !dbg !11894
  br label %return, !dbg !11894

if.end24:                                         ; preds = %if.end19
  %25 = load i8*, i8** %p2, align 8, !dbg !11895
  %arrayidx25 = getelementptr inbounds i8, i8* %25, i64 1, !dbg !11895
  %26 = load i8, i8* %arrayidx25, align 1, !dbg !11895
  %conv26 = sext i8 %26 to i32, !dbg !11895
  %cmp27 = icmp ne i32 %conv26, 0, !dbg !11897
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !11898

if.then29:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11899
  br label %return, !dbg !11899

if.end30:                                         ; preds = %if.end24
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 339), align 8, !dbg !11900
  store %union.tree_node* %27, %union.tree_node** %fn, align 8, !dbg !11901
  %28 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11902
  %tobool31 = icmp ne %union.tree_node* %28, null, !dbg !11902
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !11904

if.then32:                                        ; preds = %if.end30
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11905
  br label %return, !dbg !11905

if.end33:                                         ; preds = %if.end30
  %29 = load i32, i32* %loc.addr, align 4, !dbg !11906
  %30 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11907
  %31 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !11908
  %32 = load i8*, i8** %p2, align 8, !dbg !11909
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !11909
  %33 = load i8, i8* %arrayidx34, align 1, !dbg !11909
  %conv35 = sext i8 %33 to i64, !dbg !11909
  %call36 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv35), !dbg !11910
  %call37 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %29, %union.tree_node* %30, i32 2, %union.tree_node* %31, %union.tree_node* %call36), !dbg !11911
  store %union.tree_node* %call37, %union.tree_node** %retval, align 8, !dbg !11912
  br label %return, !dbg !11912

return:                                           ; preds = %if.end33, %if.then32, %if.then29, %if.then22, %if.end13, %if.then10, %if.then4, %if.then
  %34 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11913
  ret %union.tree_node* %34, !dbg !11913
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strcat(i32 %loc, %union.tree_node* %dst, %union.tree_node* %src) #0 !dbg !11914 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dst.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  %newdst = alloca %union.tree_node*, align 8
  %call10 = alloca %union.tree_node*, align 8
  %strlen_fn = alloca %union.tree_node*, align 8
  %strcpy_fn = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11915, metadata !DIExpression()), !dbg !11916
  store %union.tree_node* %dst, %union.tree_node** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dst.addr, metadata !11917, metadata !DIExpression()), !dbg !11918
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !11919, metadata !DIExpression()), !dbg !11920
  %0 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11921
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !11923
  %tobool = icmp ne i8 %call, 0, !dbg !11923
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11924

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !11925
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !11926
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11926
  br i1 %tobool2, label %if.else, label %if.then, !dbg !11927

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11928
  br label %return, !dbg !11928

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %p, metadata !11929, metadata !DIExpression()), !dbg !11931
  %2 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !11932
  %call3 = call i8* @c_getstr(%union.tree_node* %2), !dbg !11933
  store i8* %call3, i8** %p, align 8, !dbg !11931
  %3 = load i8*, i8** %p, align 8, !dbg !11934
  %tobool4 = icmp ne i8* %3, null, !dbg !11934
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !11936

land.lhs.true:                                    ; preds = %if.else
  %4 = load i8*, i8** %p, align 8, !dbg !11937
  %5 = load i8, i8* %4, align 1, !dbg !11938
  %conv = sext i8 %5 to i32, !dbg !11938
  %cmp = icmp eq i32 %conv, 0, !dbg !11939
  br i1 %cmp, label %if.then6, label %if.end, !dbg !11940

if.then6:                                         ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11941
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !11942
  br label %return, !dbg !11942

if.end:                                           ; preds = %land.lhs.true, %if.else
  %call7 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !11943
  %tobool8 = icmp ne i8 %call7, 0, !dbg !11943
  br i1 %tobool8, label %if.then9, label %if.end30, !dbg !11945

if.then9:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %newdst, metadata !11946, metadata !DIExpression()), !dbg !11948
  call void @llvm.dbg.declare(metadata %union.tree_node** %call10, metadata !11949, metadata !DIExpression()), !dbg !11950
  call void @llvm.dbg.declare(metadata %union.tree_node** %strlen_fn, metadata !11951, metadata !DIExpression()), !dbg !11952
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 345), align 8, !dbg !11953
  store %union.tree_node* %7, %union.tree_node** %strlen_fn, align 8, !dbg !11952
  call void @llvm.dbg.declare(metadata %union.tree_node** %strcpy_fn, metadata !11954, metadata !DIExpression()), !dbg !11955
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 341), align 8, !dbg !11956
  store %union.tree_node* %8, %union.tree_node** %strcpy_fn, align 8, !dbg !11955
  %9 = load %union.tree_node*, %union.tree_node** %strlen_fn, align 8, !dbg !11957
  %tobool11 = icmp ne %union.tree_node* %9, null, !dbg !11957
  br i1 %tobool11, label %lor.lhs.false12, label %if.then14, !dbg !11959

lor.lhs.false12:                                  ; preds = %if.then9
  %10 = load %union.tree_node*, %union.tree_node** %strcpy_fn, align 8, !dbg !11960
  %tobool13 = icmp ne %union.tree_node* %10, null, !dbg !11960
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !11961

if.then14:                                        ; preds = %lor.lhs.false12, %if.then9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11962
  br label %return, !dbg !11962

if.end15:                                         ; preds = %lor.lhs.false12
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !11963, metadata !DIExpression()), !dbg !11966
  %11 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !11967
  %call16 = call %union.tree_node* @c_strlen(%union.tree_node* %11, i32 1), !dbg !11968
  store %union.tree_node* %call16, %union.tree_node** %len, align 8, !dbg !11966
  %12 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !11969
  %tobool17 = icmp ne %union.tree_node* %12, null, !dbg !11969
  br i1 %tobool17, label %lor.lhs.false18, label %if.then20, !dbg !11971

lor.lhs.false18:                                  ; preds = %if.end15
  %13 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !11972
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !11972
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !11972
  %bf.load = load i64, i64* %14, align 8, !dbg !11972
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !11972
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11972
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11972
  %tobool19 = icmp ne i32 %bf.cast, 0, !dbg !11972
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !11973

if.then20:                                        ; preds = %lor.lhs.false18, %if.end15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11974
  br label %return, !dbg !11974

if.end21:                                         ; preds = %lor.lhs.false18
  %15 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11975
  %call22 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %15), !dbg !11976
  store %union.tree_node* %call22, %union.tree_node** %dst.addr, align 8, !dbg !11977
  %16 = load i32, i32* %loc.addr, align 4, !dbg !11978
  %17 = load %union.tree_node*, %union.tree_node** %strlen_fn, align 8, !dbg !11979
  %18 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11980
  %call23 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %16, %union.tree_node* %17, i32 1, %union.tree_node* %18), !dbg !11981
  store %union.tree_node* %call23, %union.tree_node** %newdst, align 8, !dbg !11982
  %19 = load i32, i32* %loc.addr, align 4, !dbg !11983
  %20 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11983
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !11983
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11983
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11983
  %22 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11983
  %23 = load %union.tree_node*, %union.tree_node** %newdst, align 8, !dbg !11983
  %call24 = call %union.tree_node* @fold_build2_stat_loc(i32 %19, i32 66, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !11983
  store %union.tree_node* %call24, %union.tree_node** %newdst, align 8, !dbg !11984
  %24 = load %union.tree_node*, %union.tree_node** %newdst, align 8, !dbg !11985
  %call25 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %24), !dbg !11986
  store %union.tree_node* %call25, %union.tree_node** %newdst, align 8, !dbg !11987
  %25 = load i32, i32* %loc.addr, align 4, !dbg !11988
  %26 = load %union.tree_node*, %union.tree_node** %strcpy_fn, align 8, !dbg !11989
  %27 = load %union.tree_node*, %union.tree_node** %newdst, align 8, !dbg !11990
  %28 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !11991
  %call26 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %25, %union.tree_node* %26, i32 2, %union.tree_node* %27, %union.tree_node* %28), !dbg !11992
  store %union.tree_node* %call26, %union.tree_node** %call10, align 8, !dbg !11993
  %29 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11994
  %common27 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !11994
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !11994
  %30 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !11994
  %31 = load %union.tree_node*, %union.tree_node** %call10, align 8, !dbg !11994
  %32 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !11994
  %call29 = call %union.tree_node* @build2_stat(i32 52, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !11994
  store %union.tree_node* %call29, %union.tree_node** %retval, align 8, !dbg !11995
  br label %return, !dbg !11995

if.end30:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11996
  br label %return, !dbg !11996

return:                                           ; preds = %if.end30, %if.end21, %if.then20, %if.then14, %if.then6, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11997
  ret %union.tree_node* %33, !dbg !11997
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strspn(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2) #0 !dbg !11998 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %r = alloca i64, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !11999, metadata !DIExpression()), !dbg !12000
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !12001, metadata !DIExpression()), !dbg !12002
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !12003, metadata !DIExpression()), !dbg !12004
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12005
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12007
  %tobool = icmp ne i8 %call, 0, !dbg !12007
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12008

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12009
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12010
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12010
  br i1 %tobool2, label %if.else, label %if.then, !dbg !12011

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12012
  br label %return, !dbg !12012

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12013, metadata !DIExpression()), !dbg !12015
  %2 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12016
  %call3 = call i8* @c_getstr(%union.tree_node* %2), !dbg !12017
  store i8* %call3, i8** %p1, align 8, !dbg !12015
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !12018, metadata !DIExpression()), !dbg !12019
  %3 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12020
  %call4 = call i8* @c_getstr(%union.tree_node* %3), !dbg !12021
  store i8* %call4, i8** %p2, align 8, !dbg !12019
  %4 = load i8*, i8** %p1, align 8, !dbg !12022
  %tobool5 = icmp ne i8* %4, null, !dbg !12022
  br i1 %tobool5, label %land.lhs.true, label %if.end, !dbg !12024

land.lhs.true:                                    ; preds = %if.else
  %5 = load i8*, i8** %p2, align 8, !dbg !12025
  %tobool6 = icmp ne i8* %5, null, !dbg !12025
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !12026

if.then7:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %r, metadata !12027, metadata !DIExpression()), !dbg !12030
  %6 = load i8*, i8** %p1, align 8, !dbg !12031
  %7 = load i8*, i8** %p2, align 8, !dbg !12032
  %call8 = call i64 @strspn(i8* %6, i8* %7), !dbg !12033
  store i64 %call8, i64* %r, align 8, !dbg !12030
  %8 = load i64, i64* %r, align 8, !dbg !12034
  %call9 = call %union.tree_node* @size_int_kind(i64 %8, i32 0), !dbg !12034
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !12035
  br label %return, !dbg !12035

if.end:                                           ; preds = %land.lhs.true, %if.else
  %9 = load i8*, i8** %p1, align 8, !dbg !12036
  %tobool10 = icmp ne i8* %9, null, !dbg !12036
  br i1 %tobool10, label %land.lhs.true11, label %lor.lhs.false13, !dbg !12038

land.lhs.true11:                                  ; preds = %if.end
  %10 = load i8*, i8** %p1, align 8, !dbg !12039
  %11 = load i8, i8* %10, align 1, !dbg !12040
  %conv = sext i8 %11 to i32, !dbg !12040
  %cmp = icmp eq i32 %conv, 0, !dbg !12041
  br i1 %cmp, label %if.then19, label %lor.lhs.false13, !dbg !12042

lor.lhs.false13:                                  ; preds = %land.lhs.true11, %if.end
  %12 = load i8*, i8** %p2, align 8, !dbg !12043
  %tobool14 = icmp ne i8* %12, null, !dbg !12043
  br i1 %tobool14, label %land.lhs.true15, label %if.end21, !dbg !12044

land.lhs.true15:                                  ; preds = %lor.lhs.false13
  %13 = load i8*, i8** %p2, align 8, !dbg !12045
  %14 = load i8, i8* %13, align 1, !dbg !12046
  %conv16 = sext i8 %14 to i32, !dbg !12046
  %cmp17 = icmp eq i32 %conv16, 0, !dbg !12047
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !12048

if.then19:                                        ; preds = %land.lhs.true15, %land.lhs.true11
  %15 = load i32, i32* %loc.addr, align 4, !dbg !12049
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !12050
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !12051
  %18 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12052
  %19 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12053
  %call20 = call %union.tree_node* @omit_two_operands_loc(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !12054
  store %union.tree_node* %call20, %union.tree_node** %retval, align 8, !dbg !12055
  br label %return, !dbg !12055

if.end21:                                         ; preds = %land.lhs.true15, %lor.lhs.false13
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12056
  br label %return, !dbg !12056

return:                                           ; preds = %if.end21, %if.then19, %if.then7, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12057
  ret %union.tree_node* %20, !dbg !12057
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strcspn(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2) #0 !dbg !12058 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %r = alloca i64, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12059, metadata !DIExpression()), !dbg !12060
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !12061, metadata !DIExpression()), !dbg !12062
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !12063, metadata !DIExpression()), !dbg !12064
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12065
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12067
  %tobool = icmp ne i8 %call, 0, !dbg !12067
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12068

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12069
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12070
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12070
  br i1 %tobool2, label %if.else, label %if.then, !dbg !12071

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12072
  br label %return, !dbg !12072

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12073, metadata !DIExpression()), !dbg !12075
  %2 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12076
  %call3 = call i8* @c_getstr(%union.tree_node* %2), !dbg !12077
  store i8* %call3, i8** %p1, align 8, !dbg !12075
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !12078, metadata !DIExpression()), !dbg !12079
  %3 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12080
  %call4 = call i8* @c_getstr(%union.tree_node* %3), !dbg !12081
  store i8* %call4, i8** %p2, align 8, !dbg !12079
  %4 = load i8*, i8** %p1, align 8, !dbg !12082
  %tobool5 = icmp ne i8* %4, null, !dbg !12082
  br i1 %tobool5, label %land.lhs.true, label %if.end, !dbg !12084

land.lhs.true:                                    ; preds = %if.else
  %5 = load i8*, i8** %p2, align 8, !dbg !12085
  %tobool6 = icmp ne i8* %5, null, !dbg !12085
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !12086

if.then7:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %r, metadata !12087, metadata !DIExpression()), !dbg !12089
  %6 = load i8*, i8** %p1, align 8, !dbg !12090
  %7 = load i8*, i8** %p2, align 8, !dbg !12091
  %call8 = call i64 @strcspn(i8* %6, i8* %7), !dbg !12092
  store i64 %call8, i64* %r, align 8, !dbg !12089
  %8 = load i64, i64* %r, align 8, !dbg !12093
  %call9 = call %union.tree_node* @size_int_kind(i64 %8, i32 0), !dbg !12093
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !12094
  br label %return, !dbg !12094

if.end:                                           ; preds = %land.lhs.true, %if.else
  %9 = load i8*, i8** %p1, align 8, !dbg !12095
  %tobool10 = icmp ne i8* %9, null, !dbg !12095
  br i1 %tobool10, label %land.lhs.true11, label %if.end15, !dbg !12097

land.lhs.true11:                                  ; preds = %if.end
  %10 = load i8*, i8** %p1, align 8, !dbg !12098
  %11 = load i8, i8* %10, align 1, !dbg !12099
  %conv = sext i8 %11 to i32, !dbg !12099
  %cmp = icmp eq i32 %conv, 0, !dbg !12100
  br i1 %cmp, label %if.then13, label %if.end15, !dbg !12101

if.then13:                                        ; preds = %land.lhs.true11
  %12 = load i32, i32* %loc.addr, align 4, !dbg !12102
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !12104
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !12105
  %15 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12106
  %call14 = call %union.tree_node* @omit_one_operand_loc(i32 %12, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !12107
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !12108
  br label %return, !dbg !12108

if.end15:                                         ; preds = %land.lhs.true11, %if.end
  %16 = load i8*, i8** %p2, align 8, !dbg !12109
  %tobool16 = icmp ne i8* %16, null, !dbg !12109
  br i1 %tobool16, label %land.lhs.true17, label %if.end26, !dbg !12111

land.lhs.true17:                                  ; preds = %if.end15
  %17 = load i8*, i8** %p2, align 8, !dbg !12112
  %18 = load i8, i8* %17, align 1, !dbg !12113
  %conv18 = sext i8 %18 to i32, !dbg !12113
  %cmp19 = icmp eq i32 %conv18, 0, !dbg !12114
  br i1 %cmp19, label %if.then21, label %if.end26, !dbg !12115

if.then21:                                        ; preds = %land.lhs.true17
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12116, metadata !DIExpression()), !dbg !12118
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 345), align 8, !dbg !12119
  store %union.tree_node* %19, %union.tree_node** %fn, align 8, !dbg !12118
  %20 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12120
  %tobool22 = icmp ne %union.tree_node* %20, null, !dbg !12120
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !12122

if.then23:                                        ; preds = %if.then21
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12123
  br label %return, !dbg !12123

if.end24:                                         ; preds = %if.then21
  %21 = load i32, i32* %loc.addr, align 4, !dbg !12124
  %22 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12125
  %23 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12126
  %call25 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %21, %union.tree_node* %22, i32 1, %union.tree_node* %23), !dbg !12127
  store %union.tree_node* %call25, %union.tree_node** %retval, align 8, !dbg !12128
  br label %return, !dbg !12128

if.end26:                                         ; preds = %land.lhs.true17, %if.end15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12129
  br label %return, !dbg !12129

return:                                           ; preds = %if.end26, %if.end24, %if.then23, %if.then13, %if.then7, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12130
  ret %union.tree_node* %24, !dbg !12130
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strchr(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2, %union.tree_node* %type) #0 !dbg !12131 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %c = alloca i8, align 1
  %r = alloca i8*, align 8
  %tem = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12132, metadata !DIExpression()), !dbg !12133
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !12134, metadata !DIExpression()), !dbg !12135
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !12136, metadata !DIExpression()), !dbg !12137
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12138, metadata !DIExpression()), !dbg !12139
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12140
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12142
  %tobool = icmp ne i8 %call, 0, !dbg !12142
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12143

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12144
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !12145
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12145
  br i1 %tobool2, label %if.else, label %if.then, !dbg !12146

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12147
  br label %return, !dbg !12147

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12148, metadata !DIExpression()), !dbg !12150
  %2 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12151
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12151
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12151
  %bf.load = load i64, i64* %3, align 8, !dbg !12151
  %bf.clear = and i64 %bf.load, 65535, !dbg !12151
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12151
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !12153
  br i1 %cmp, label %if.then3, label %if.end, !dbg !12154

if.then3:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12155
  br label %return, !dbg !12155

if.end:                                           ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12156
  %call4 = call i8* @c_getstr(%union.tree_node* %4), !dbg !12157
  store i8* %call4, i8** %p1, align 8, !dbg !12158
  %5 = load i8*, i8** %p1, align 8, !dbg !12159
  %cmp5 = icmp ne i8* %5, null, !dbg !12161
  br i1 %cmp5, label %if.then6, label %if.end23, !dbg !12162

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %c, metadata !12163, metadata !DIExpression()), !dbg !12165
  call void @llvm.dbg.declare(metadata i8** %r, metadata !12166, metadata !DIExpression()), !dbg !12167
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !12168, metadata !DIExpression()), !dbg !12169
  %6 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12170
  %call7 = call i32 @target_char_cast(%union.tree_node* %6, i8* %c), !dbg !12172
  %tobool8 = icmp ne i32 %call7, 0, !dbg !12172
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !12173

if.then9:                                         ; preds = %if.then6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12174
  br label %return, !dbg !12174

if.end10:                                         ; preds = %if.then6
  %7 = load i8*, i8** %p1, align 8, !dbg !12175
  %8 = load i8, i8* %c, align 1, !dbg !12176
  %conv = sext i8 %8 to i32, !dbg !12176
  %call11 = call i8* @strchr(i8* %7, i32 %conv), !dbg !12177
  store i8* %call11, i8** %r, align 8, !dbg !12178
  %9 = load i8*, i8** %r, align 8, !dbg !12179
  %cmp12 = icmp eq i8* %9, null, !dbg !12181
  br i1 %cmp12, label %if.then14, label %if.end17, !dbg !12182

if.then14:                                        ; preds = %if.end10
  %10 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12183
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !12183
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12183
  %11 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !12183
  %call16 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 0), !dbg !12184
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !12185
  br label %return, !dbg !12185

if.end17:                                         ; preds = %if.end10
  %12 = load i32, i32* %loc.addr, align 4, !dbg !12186
  %13 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12186
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !12186
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !12186
  %14 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !12186
  %15 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12186
  %16 = load i8*, i8** %r, align 8, !dbg !12186
  %17 = load i8*, i8** %p1, align 8, !dbg !12186
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64, !dbg !12186
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64, !dbg !12186
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12186
  %call20 = call %union.tree_node* @size_int_kind(i64 %sub.ptr.sub, i32 0), !dbg !12186
  %call21 = call %union.tree_node* @fold_build2_stat_loc(i32 %12, i32 66, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %call20), !dbg !12186
  store %union.tree_node* %call21, %union.tree_node** %tem, align 8, !dbg !12187
  %18 = load i32, i32* %loc.addr, align 4, !dbg !12188
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12189
  %20 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !12190
  %call22 = call %union.tree_node* @fold_convert_loc(i32 %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !12191
  store %union.tree_node* %call22, %union.tree_node** %retval, align 8, !dbg !12192
  br label %return, !dbg !12192

if.end23:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12193
  br label %return, !dbg !12193

return:                                           ; preds = %if.end23, %if.end17, %if.then14, %if.then9, %if.then3, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12194
  ret %union.tree_node* %21, !dbg !12194
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strrchr(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2, %union.tree_node* %type) #0 !dbg !12195 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %c = alloca i8, align 1
  %r = alloca i8*, align 8
  %tem = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12196, metadata !DIExpression()), !dbg !12197
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !12198, metadata !DIExpression()), !dbg !12199
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !12200, metadata !DIExpression()), !dbg !12201
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12202, metadata !DIExpression()), !dbg !12203
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12204
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12206
  %tobool = icmp ne i8 %call, 0, !dbg !12206
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12207

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12208
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !12209
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12209
  br i1 %tobool2, label %if.else, label %if.then, !dbg !12210

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12211
  br label %return, !dbg !12211

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12212, metadata !DIExpression()), !dbg !12214
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12215, metadata !DIExpression()), !dbg !12216
  %2 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12217
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12217
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12217
  %bf.load = load i64, i64* %3, align 8, !dbg !12217
  %bf.clear = and i64 %bf.load, 65535, !dbg !12217
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12217
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !12219
  br i1 %cmp, label %if.then3, label %if.end, !dbg !12220

if.then3:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12221
  br label %return, !dbg !12221

if.end:                                           ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12222
  %call4 = call i8* @c_getstr(%union.tree_node* %4), !dbg !12223
  store i8* %call4, i8** %p1, align 8, !dbg !12224
  %5 = load i8*, i8** %p1, align 8, !dbg !12225
  %cmp5 = icmp ne i8* %5, null, !dbg !12227
  br i1 %cmp5, label %if.then6, label %if.end23, !dbg !12228

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %c, metadata !12229, metadata !DIExpression()), !dbg !12231
  call void @llvm.dbg.declare(metadata i8** %r, metadata !12232, metadata !DIExpression()), !dbg !12233
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !12234, metadata !DIExpression()), !dbg !12235
  %6 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12236
  %call7 = call i32 @target_char_cast(%union.tree_node* %6, i8* %c), !dbg !12238
  %tobool8 = icmp ne i32 %call7, 0, !dbg !12238
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !12239

if.then9:                                         ; preds = %if.then6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12240
  br label %return, !dbg !12240

if.end10:                                         ; preds = %if.then6
  %7 = load i8*, i8** %p1, align 8, !dbg !12241
  %8 = load i8, i8* %c, align 1, !dbg !12242
  %conv = sext i8 %8 to i32, !dbg !12242
  %call11 = call i8* @strrchr(i8* %7, i32 %conv), !dbg !12243
  store i8* %call11, i8** %r, align 8, !dbg !12244
  %9 = load i8*, i8** %r, align 8, !dbg !12245
  %cmp12 = icmp eq i8* %9, null, !dbg !12247
  br i1 %cmp12, label %if.then14, label %if.end17, !dbg !12248

if.then14:                                        ; preds = %if.end10
  %10 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12249
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !12249
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12249
  %11 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !12249
  %call16 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 0), !dbg !12250
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !12251
  br label %return, !dbg !12251

if.end17:                                         ; preds = %if.end10
  %12 = load i32, i32* %loc.addr, align 4, !dbg !12252
  %13 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12252
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !12252
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !12252
  %14 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !12252
  %15 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12252
  %16 = load i8*, i8** %r, align 8, !dbg !12252
  %17 = load i8*, i8** %p1, align 8, !dbg !12252
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64, !dbg !12252
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64, !dbg !12252
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12252
  %call20 = call %union.tree_node* @size_int_kind(i64 %sub.ptr.sub, i32 0), !dbg !12252
  %call21 = call %union.tree_node* @fold_build2_stat_loc(i32 %12, i32 66, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %call20), !dbg !12252
  store %union.tree_node* %call21, %union.tree_node** %tem, align 8, !dbg !12253
  %18 = load i32, i32* %loc.addr, align 4, !dbg !12254
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12255
  %20 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !12256
  %call22 = call %union.tree_node* @fold_convert_loc(i32 %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !12257
  store %union.tree_node* %call22, %union.tree_node** %retval, align 8, !dbg !12258
  br label %return, !dbg !12258

if.end23:                                         ; preds = %if.end
  %21 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12259
  %call24 = call i32 @integer_zerop(%union.tree_node* %21), !dbg !12261
  %tobool25 = icmp ne i32 %call24, 0, !dbg !12261
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !12262

if.then26:                                        ; preds = %if.end23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12263
  br label %return, !dbg !12263

if.end27:                                         ; preds = %if.end23
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 339), align 8, !dbg !12264
  store %union.tree_node* %22, %union.tree_node** %fn, align 8, !dbg !12265
  %23 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12266
  %tobool28 = icmp ne %union.tree_node* %23, null, !dbg !12266
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !12268

if.then29:                                        ; preds = %if.end27
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12269
  br label %return, !dbg !12269

if.end30:                                         ; preds = %if.end27
  %24 = load i32, i32* %loc.addr, align 4, !dbg !12270
  %25 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12271
  %26 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12272
  %27 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12273
  %call31 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %24, %union.tree_node* %25, i32 2, %union.tree_node* %26, %union.tree_node* %27), !dbg !12274
  store %union.tree_node* %call31, %union.tree_node** %retval, align 8, !dbg !12275
  br label %return, !dbg !12275

return:                                           ; preds = %if.end30, %if.then29, %if.then26, %if.end17, %if.then14, %if.then9, %if.then3, %if.then
  %28 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12276
  ret %union.tree_node* %28, !dbg !12276
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_stpcpy(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src) #0 !dbg !12277 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  %lenp1 = alloca %union.tree_node*, align 8
  %call = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12278, metadata !DIExpression()), !dbg !12279
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !12280, metadata !DIExpression()), !dbg !12281
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !12282, metadata !DIExpression()), !dbg !12283
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !12284, metadata !DIExpression()), !dbg !12285
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12286, metadata !DIExpression()), !dbg !12287
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !12288, metadata !DIExpression()), !dbg !12289
  call void @llvm.dbg.declare(metadata %union.tree_node** %lenp1, metadata !12290, metadata !DIExpression()), !dbg !12291
  call void @llvm.dbg.declare(metadata %union.tree_node** %call, metadata !12292, metadata !DIExpression()), !dbg !12293
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12294, metadata !DIExpression()), !dbg !12295
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12296
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12298
  %tobool = icmp ne i8 %call1, 0, !dbg !12298
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12299

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !12300
  %call2 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12301
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12301
  br i1 %tobool3, label %if.end, label %if.then, !dbg !12302

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12303
  br label %return, !dbg !12303

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !12304
  %call4 = call %union.tree_node* @c_strlen(%union.tree_node* %2, i32 1), !dbg !12305
  store %union.tree_node* %call4, %union.tree_node** %len, align 8, !dbg !12306
  %3 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12307
  %tobool5 = icmp ne %union.tree_node* %3, null, !dbg !12307
  br i1 %tobool5, label %lor.lhs.false6, label %if.then7, !dbg !12309

lor.lhs.false6:                                   ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12310
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12310
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12310
  %bf.load = load i64, i64* %5, align 8, !dbg !12310
  %bf.clear = and i64 %bf.load, 65535, !dbg !12310
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12310
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !12311
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !12312

if.then7:                                         ; preds = %lor.lhs.false6, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12313
  br label %return, !dbg !12313

if.end8:                                          ; preds = %lor.lhs.false6
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12314
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !12314
  %call9 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !12316
  %conv = zext i8 %call9 to i32, !dbg !12316
  %tobool10 = icmp ne i32 %conv, 0, !dbg !12316
  br i1 %tobool10, label %land.lhs.true, label %if.end14, !dbg !12317

land.lhs.true:                                    ; preds = %if.end8
  %7 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12318
  %call11 = call i32 @integer_zerop(%union.tree_node* %7), !dbg !12319
  %tobool12 = icmp ne i32 %call11, 0, !dbg !12319
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !12320

if.then13:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12321
  br label %return, !dbg !12321

if.end14:                                         ; preds = %land.lhs.true, %if.end8
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !12322
  store %union.tree_node* %8, %union.tree_node** %fn, align 8, !dbg !12323
  %9 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12324
  %tobool15 = icmp ne %union.tree_node* %9, null, !dbg !12324
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !12326

if.then16:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12327
  br label %return, !dbg !12327

if.end17:                                         ; preds = %if.end14
  %10 = load i32, i32* %loc.addr, align 4, !dbg !12328
  %11 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12329
  %call18 = call %union.tree_node* @size_int_kind(i64 1, i32 1), !dbg !12330
  %call19 = call %union.tree_node* @size_binop_loc(i32 %10, i32 63, %union.tree_node* %11, %union.tree_node* %call18), !dbg !12331
  store %union.tree_node* %call19, %union.tree_node** %lenp1, align 8, !dbg !12332
  %12 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12333
  %call20 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %12), !dbg !12334
  store %union.tree_node* %call20, %union.tree_node** %dest.addr, align 8, !dbg !12335
  %13 = load i32, i32* %loc.addr, align 4, !dbg !12336
  %14 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12337
  %15 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12338
  %16 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !12339
  %17 = load %union.tree_node*, %union.tree_node** %lenp1, align 8, !dbg !12340
  %call21 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %13, %union.tree_node* %14, i32 3, %union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !12341
  store %union.tree_node* %call21, %union.tree_node** %call, align 8, !dbg !12342
  %18 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !12343
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !12343
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12343
  %19 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !12343
  %common23 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !12343
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !12343
  %20 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !12343
  store %union.tree_node* %20, %union.tree_node** %type, align 8, !dbg !12344
  %21 = load i32, i32* %loc.addr, align 4, !dbg !12345
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !12346
  %23 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12347
  %call25 = call %union.tree_node* @fold_convert_loc(i32 %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !12348
  store %union.tree_node* %call25, %union.tree_node** %len, align 8, !dbg !12349
  %24 = load i32, i32* %loc.addr, align 4, !dbg !12350
  %25 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12350
  %common26 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !12350
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !12350
  %26 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !12350
  %27 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12350
  %28 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !12350
  %call28 = call %union.tree_node* @fold_build2_stat_loc(i32 %24, i32 66, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !12350
  store %union.tree_node* %call28, %union.tree_node** %dest.addr, align 8, !dbg !12351
  %29 = load i32, i32* %loc.addr, align 4, !dbg !12352
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12353
  %31 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12354
  %call29 = call %union.tree_node* @fold_convert_loc(i32 %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !12355
  store %union.tree_node* %call29, %union.tree_node** %dest.addr, align 8, !dbg !12356
  %32 = load i32, i32* %loc.addr, align 4, !dbg !12357
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12358
  %34 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12359
  %35 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !12360
  %call30 = call %union.tree_node* @omit_one_operand_loc(i32 %32, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !12361
  store %union.tree_node* %call30, %union.tree_node** %dest.addr, align 8, !dbg !12362
  %36 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12363
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !12364
  br label %return, !dbg !12364

return:                                           ; preds = %if.end17, %if.then16, %if.then13, %if.then7, %if.then
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12365
  ret %union.tree_node* %37, !dbg !12365
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strcmp(i32 %loc, %union.tree_node* %arg1, %union.tree_node* %arg2) #0 !dbg !12366 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %i = alloca i32, align 4
  %cst_uchar_node = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node = alloca %union.tree_node*, align 8
  %cst_uchar_node35 = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node37 = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12367, metadata !DIExpression()), !dbg !12368
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12369, metadata !DIExpression()), !dbg !12370
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !12371, metadata !DIExpression()), !dbg !12372
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12373, metadata !DIExpression()), !dbg !12374
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !12375, metadata !DIExpression()), !dbg !12376
  %0 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12377
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12379
  %tobool = icmp ne i8 %call, 0, !dbg !12379
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12380

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12381
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12382
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12382
  br i1 %tobool2, label %if.end, label %if.then, !dbg !12383

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12384
  br label %return, !dbg !12384

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12385
  %3 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12387
  %call3 = call i32 @operand_equal_p(%union.tree_node* %2, %union.tree_node* %3, i32 0), !dbg !12388
  %tobool4 = icmp ne i32 %call3, 0, !dbg !12388
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !12389

if.then5:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !12390
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !12391
  br label %return, !dbg !12391

if.end6:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12392
  %call7 = call i8* @c_getstr(%union.tree_node* %5), !dbg !12393
  store i8* %call7, i8** %p1, align 8, !dbg !12394
  %6 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12395
  %call8 = call i8* @c_getstr(%union.tree_node* %6), !dbg !12396
  store i8* %call8, i8** %p2, align 8, !dbg !12397
  %7 = load i8*, i8** %p1, align 8, !dbg !12398
  %tobool9 = icmp ne i8* %7, null, !dbg !12398
  br i1 %tobool9, label %land.lhs.true, label %if.end17, !dbg !12400

land.lhs.true:                                    ; preds = %if.end6
  %8 = load i8*, i8** %p2, align 8, !dbg !12401
  %tobool10 = icmp ne i8* %8, null, !dbg !12401
  br i1 %tobool10, label %if.then11, label %if.end17, !dbg !12402

if.then11:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12403, metadata !DIExpression()), !dbg !12405
  %9 = load i8*, i8** %p1, align 8, !dbg !12406
  %10 = load i8*, i8** %p2, align 8, !dbg !12407
  %call12 = call i32 @strcmp(i8* %9, i8* %10), !dbg !12408
  store i32 %call12, i32* %i, align 4, !dbg !12405
  %11 = load i32, i32* %i, align 4, !dbg !12409
  %cmp = icmp slt i32 %11, 0, !dbg !12411
  br i1 %cmp, label %if.then13, label %if.else, !dbg !12412

if.then13:                                        ; preds = %if.then11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !12413
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !12414
  br label %return, !dbg !12414

if.else:                                          ; preds = %if.then11
  %13 = load i32, i32* %i, align 4, !dbg !12415
  %cmp14 = icmp sgt i32 %13, 0, !dbg !12417
  br i1 %cmp14, label %if.then15, label %if.else16, !dbg !12418

if.then15:                                        ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !12419
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !12420
  br label %return, !dbg !12420

if.else16:                                        ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !12421
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !12422
  br label %return, !dbg !12422

if.end17:                                         ; preds = %land.lhs.true, %if.end6
  %16 = load i8*, i8** %p2, align 8, !dbg !12423
  %tobool18 = icmp ne i8* %16, null, !dbg !12423
  br i1 %tobool18, label %land.lhs.true19, label %if.end28, !dbg !12425

land.lhs.true19:                                  ; preds = %if.end17
  %17 = load i8*, i8** %p2, align 8, !dbg !12426
  %18 = load i8, i8* %17, align 1, !dbg !12427
  %conv = sext i8 %18 to i32, !dbg !12427
  %cmp20 = icmp eq i32 %conv, 0, !dbg !12428
  br i1 %cmp20, label %if.then22, label %if.end28, !dbg !12429

if.then22:                                        ; preds = %land.lhs.true19
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node, metadata !12430, metadata !DIExpression()), !dbg !12432
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !12433
  %call23 = call %union.tree_node* @build_qualified_type(%union.tree_node* %19, i32 1), !dbg !12433
  store %union.tree_node* %call23, %union.tree_node** %cst_uchar_node, align 8, !dbg !12432
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node, metadata !12434, metadata !DIExpression()), !dbg !12435
  %20 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !12436
  %21 = load i32, i32* @ptr_mode, align 4, !dbg !12437
  %call24 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %20, i32 %21, i8 zeroext 1), !dbg !12438
  store %union.tree_node* %call24, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !12435
  %22 = load i32, i32* %loc.addr, align 4, !dbg !12439
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !12440
  %24 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !12441
  %25 = load i32, i32* %loc.addr, align 4, !dbg !12441
  %26 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !12441
  %27 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12441
  %call25 = call %union.tree_node* @fold_convert_loc(i32 %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !12441
  %call26 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %24, %union.tree_node* %call25), !dbg !12441
  %call27 = call %union.tree_node* @fold_convert_loc(i32 %22, %union.tree_node* %23, %union.tree_node* %call26), !dbg !12442
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !12443
  br label %return, !dbg !12443

if.end28:                                         ; preds = %land.lhs.true19, %if.end17
  %28 = load i8*, i8** %p1, align 8, !dbg !12444
  %tobool29 = icmp ne i8* %28, null, !dbg !12444
  br i1 %tobool29, label %land.lhs.true30, label %if.end43, !dbg !12446

land.lhs.true30:                                  ; preds = %if.end28
  %29 = load i8*, i8** %p1, align 8, !dbg !12447
  %30 = load i8, i8* %29, align 1, !dbg !12448
  %conv31 = sext i8 %30 to i32, !dbg !12448
  %cmp32 = icmp eq i32 %conv31, 0, !dbg !12449
  br i1 %cmp32, label %if.then34, label %if.end43, !dbg !12450

if.then34:                                        ; preds = %land.lhs.true30
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node35, metadata !12451, metadata !DIExpression()), !dbg !12453
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !12454
  %call36 = call %union.tree_node* @build_qualified_type(%union.tree_node* %31, i32 1), !dbg !12454
  store %union.tree_node* %call36, %union.tree_node** %cst_uchar_node35, align 8, !dbg !12453
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node37, metadata !12455, metadata !DIExpression()), !dbg !12456
  %32 = load %union.tree_node*, %union.tree_node** %cst_uchar_node35, align 8, !dbg !12457
  %33 = load i32, i32* @ptr_mode, align 4, !dbg !12458
  %call38 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %32, i32 %33, i8 zeroext 1), !dbg !12459
  store %union.tree_node* %call38, %union.tree_node** %cst_uchar_ptr_node37, align 8, !dbg !12456
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !12460, metadata !DIExpression()), !dbg !12461
  %34 = load i32, i32* %loc.addr, align 4, !dbg !12462
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !12463
  %36 = load %union.tree_node*, %union.tree_node** %cst_uchar_node35, align 8, !dbg !12464
  %37 = load i32, i32* %loc.addr, align 4, !dbg !12464
  %38 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node37, align 8, !dbg !12464
  %39 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12464
  %call39 = call %union.tree_node* @fold_convert_loc(i32 %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !12464
  %call40 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %36, %union.tree_node* %call39), !dbg !12464
  %call41 = call %union.tree_node* @fold_convert_loc(i32 %34, %union.tree_node* %35, %union.tree_node* %call40), !dbg !12465
  store %union.tree_node* %call41, %union.tree_node** %temp, align 8, !dbg !12461
  %40 = load i32, i32* %loc.addr, align 4, !dbg !12466
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !12466
  %42 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !12466
  %call42 = call %union.tree_node* @fold_build1_stat_loc(i32 %40, i32 79, %union.tree_node* %41, %union.tree_node* %42), !dbg !12466
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !12467
  br label %return, !dbg !12467

if.end43:                                         ; preds = %land.lhs.true30, %if.end28
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12468
  br label %return, !dbg !12468

return:                                           ; preds = %if.end43, %if.then34, %if.then22, %if.else16, %if.then15, %if.then13, %if.then5, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12469
  ret %union.tree_node* %43, !dbg !12469
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strpbrk(i32 %loc, %union.tree_node* %s1, %union.tree_node* %s2, %union.tree_node* %type) #0 !dbg !12470 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %s1.addr = alloca %union.tree_node*, align 8
  %s2.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %r = alloca i8*, align 8
  %tem = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12471, metadata !DIExpression()), !dbg !12472
  store %union.tree_node* %s1, %union.tree_node** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s1.addr, metadata !12473, metadata !DIExpression()), !dbg !12474
  store %union.tree_node* %s2, %union.tree_node** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2.addr, metadata !12475, metadata !DIExpression()), !dbg !12476
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12477, metadata !DIExpression()), !dbg !12478
  %0 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12479
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12481
  %tobool = icmp ne i8 %call, 0, !dbg !12481
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12482

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12483
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12484
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12484
  br i1 %tobool2, label %if.else, label %if.then, !dbg !12485

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12486
  br label %return, !dbg !12486

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12487, metadata !DIExpression()), !dbg !12489
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !12490, metadata !DIExpression()), !dbg !12491
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !12492, metadata !DIExpression()), !dbg !12493
  %2 = load %union.tree_node*, %union.tree_node** %s2.addr, align 8, !dbg !12494
  %call3 = call i8* @c_getstr(%union.tree_node* %2), !dbg !12495
  store i8* %call3, i8** %p2, align 8, !dbg !12496
  %3 = load i8*, i8** %p2, align 8, !dbg !12497
  %cmp = icmp eq i8* %3, null, !dbg !12499
  br i1 %cmp, label %if.then4, label %if.end, !dbg !12500

if.then4:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12501
  br label %return, !dbg !12501

if.end:                                           ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12502
  %call5 = call i8* @c_getstr(%union.tree_node* %4), !dbg !12503
  store i8* %call5, i8** %p1, align 8, !dbg !12504
  %5 = load i8*, i8** %p1, align 8, !dbg !12505
  %cmp6 = icmp ne i8* %5, null, !dbg !12507
  br i1 %cmp6, label %if.then7, label %if.end19, !dbg !12508

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %r, metadata !12509, metadata !DIExpression()), !dbg !12511
  %6 = load i8*, i8** %p1, align 8, !dbg !12512
  %7 = load i8*, i8** %p2, align 8, !dbg !12513
  %call8 = call i8* @strpbrk(i8* %6, i8* %7), !dbg !12514
  store i8* %call8, i8** %r, align 8, !dbg !12511
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !12515, metadata !DIExpression()), !dbg !12516
  %8 = load i8*, i8** %r, align 8, !dbg !12517
  %cmp9 = icmp eq i8* %8, null, !dbg !12519
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !12520

if.then10:                                        ; preds = %if.then7
  %9 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12521
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !12521
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12521
  %10 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !12521
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 0), !dbg !12522
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !12523
  br label %return, !dbg !12523

if.end13:                                         ; preds = %if.then7
  %11 = load i32, i32* %loc.addr, align 4, !dbg !12524
  %12 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12524
  %common14 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !12524
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !12524
  %13 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !12524
  %14 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12524
  %15 = load i8*, i8** %r, align 8, !dbg !12524
  %16 = load i8*, i8** %p1, align 8, !dbg !12524
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64, !dbg !12524
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64, !dbg !12524
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12524
  %call16 = call %union.tree_node* @size_int_kind(i64 %sub.ptr.sub, i32 0), !dbg !12524
  %call17 = call %union.tree_node* @fold_build2_stat_loc(i32 %11, i32 66, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %call16), !dbg !12524
  store %union.tree_node* %call17, %union.tree_node** %tem, align 8, !dbg !12525
  %17 = load i32, i32* %loc.addr, align 4, !dbg !12526
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12527
  %19 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !12528
  %call18 = call %union.tree_node* @fold_convert_loc(i32 %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !12529
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !12530
  br label %return, !dbg !12530

if.end19:                                         ; preds = %if.end
  %20 = load i8*, i8** %p2, align 8, !dbg !12531
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0, !dbg !12531
  %21 = load i8, i8* %arrayidx, align 1, !dbg !12531
  %conv = sext i8 %21 to i32, !dbg !12531
  %cmp20 = icmp eq i32 %conv, 0, !dbg !12533
  br i1 %cmp20, label %if.then22, label %if.end26, !dbg !12534

if.then22:                                        ; preds = %if.end19
  %22 = load i32, i32* %loc.addr, align 4, !dbg !12535
  %23 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12536
  %common23 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !12536
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !12536
  %24 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !12536
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !12537
  %26 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12538
  %call25 = call %union.tree_node* @omit_one_operand_loc(i32 %22, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !12539
  store %union.tree_node* %call25, %union.tree_node** %retval, align 8, !dbg !12540
  br label %return, !dbg !12540

if.end26:                                         ; preds = %if.end19
  %27 = load i8*, i8** %p2, align 8, !dbg !12541
  %arrayidx27 = getelementptr inbounds i8, i8* %27, i64 1, !dbg !12541
  %28 = load i8, i8* %arrayidx27, align 1, !dbg !12541
  %conv28 = sext i8 %28 to i32, !dbg !12541
  %cmp29 = icmp ne i32 %conv28, 0, !dbg !12543
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !12544

if.then31:                                        ; preds = %if.end26
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12545
  br label %return, !dbg !12545

if.end32:                                         ; preds = %if.end26
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 339), align 8, !dbg !12546
  store %union.tree_node* %29, %union.tree_node** %fn, align 8, !dbg !12547
  %30 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12548
  %tobool33 = icmp ne %union.tree_node* %30, null, !dbg !12548
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !12550

if.then34:                                        ; preds = %if.end32
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12551
  br label %return, !dbg !12551

if.end35:                                         ; preds = %if.end32
  %31 = load i32, i32* %loc.addr, align 4, !dbg !12552
  %32 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12553
  %33 = load %union.tree_node*, %union.tree_node** %s1.addr, align 8, !dbg !12554
  %34 = load i8*, i8** %p2, align 8, !dbg !12555
  %arrayidx36 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !12555
  %35 = load i8, i8* %arrayidx36, align 1, !dbg !12555
  %conv37 = sext i8 %35 to i64, !dbg !12555
  %call38 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv37), !dbg !12556
  %call39 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %31, %union.tree_node* %32, i32 2, %union.tree_node* %33, %union.tree_node* %call38), !dbg !12557
  store %union.tree_node* %call39, %union.tree_node** %retval, align 8, !dbg !12558
  br label %return, !dbg !12558

return:                                           ; preds = %if.end35, %if.then34, %if.then31, %if.then22, %if.end13, %if.then10, %if.then4, %if.then
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12559
  ret %union.tree_node* %36, !dbg !12559
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_expect(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1) #0 !dbg !12560 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %inner = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12561, metadata !DIExpression()), !dbg !12562
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !12563, metadata !DIExpression()), !dbg !12564
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12565, metadata !DIExpression()), !dbg !12566
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !12567, metadata !DIExpression()), !dbg !12568
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !12569, metadata !DIExpression()), !dbg !12570
  call void @llvm.dbg.declare(metadata i32* %code, metadata !12571, metadata !DIExpression()), !dbg !12572
  %0 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12573
  store %union.tree_node* %0, %union.tree_node** %inner, align 8, !dbg !12574
  %1 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12575
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !12575
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !12575
  %bf.load = load i64, i64* %2, align 8, !dbg !12575
  %bf.clear = and i64 %bf.load, 65535, !dbg !12575
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12575
  %idxprom = sext i32 %bf.cast to i64, !dbg !12575
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12575
  %3 = load i32, i32* %arrayidx, align 4, !dbg !12575
  %cmp = icmp eq i32 %3, 5, !dbg !12575
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12577

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12578
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !12578
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12578
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !12578
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !12578
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12578
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !12578
  %bf.load3 = load i64, i64* %6, align 8, !dbg !12578
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !12578
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !12578
  %cmp6 = icmp eq i32 %bf.cast5, 23, !dbg !12579
  br i1 %cmp6, label %if.then, label %if.end, !dbg !12580

if.then:                                          ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12581
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !12581
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !12581
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !12581
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !12581
  store %union.tree_node* %8, %union.tree_node** %inner, align 8, !dbg !12582
  br label %if.end, !dbg !12583

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12584
  %base10 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12584
  %10 = bitcast %struct.tree_base* %base10 to i64*, !dbg !12584
  %bf.load11 = load i64, i64* %10, align 8, !dbg !12584
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !12584
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !12584
  %cmp14 = icmp eq i32 %bf.cast13, 59, !dbg !12586
  br i1 %cmp14, label %land.lhs.true15, label %if.end26, !dbg !12587

land.lhs.true15:                                  ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12588
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %11), !dbg !12589
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !12590
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !12590
  br i1 %tobool, label %land.lhs.true16, label %if.end26, !dbg !12591

land.lhs.true16:                                  ; preds = %land.lhs.true15
  %12 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !12592
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !12592
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !12592
  %bf.load17 = load i32, i32* %built_in_class, align 8, !dbg !12592
  %bf.lshr = lshr i32 %bf.load17, 11, !dbg !12592
  %bf.clear18 = and i32 %bf.lshr, 3, !dbg !12592
  %cmp19 = icmp eq i32 %bf.clear18, 3, !dbg !12593
  br i1 %cmp19, label %land.lhs.true20, label %if.end26, !dbg !12594

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %13 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !12595
  %function_decl21 = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !12595
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl21, i32 0, i32 5, !dbg !12595
  %bf.load22 = load i32, i32* %function_code, align 8, !dbg !12595
  %bf.clear23 = and i32 %bf.load22, 2047, !dbg !12595
  %cmp24 = icmp eq i32 %bf.clear23, 446, !dbg !12596
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !12597

if.then25:                                        ; preds = %land.lhs.true20
  %14 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12598
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !12599
  br label %return, !dbg !12599

if.end26:                                         ; preds = %land.lhs.true20, %land.lhs.true16, %land.lhs.true15, %if.end
  %15 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12600
  store %union.tree_node* %15, %union.tree_node** %inner, align 8, !dbg !12601
  br label %while.cond, !dbg !12602

while.cond:                                       ; preds = %while.body, %if.end26
  %16 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12603
  %base27 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !12603
  %17 = bitcast %struct.tree_base* %base27 to i64*, !dbg !12603
  %bf.load28 = load i64, i64* %17, align 8, !dbg !12603
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !12603
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !12603
  %cmp31 = icmp eq i32 %bf.cast30, 116, !dbg !12604
  br i1 %cmp31, label %land.lhs.true32, label %land.end, !dbg !12605

land.lhs.true32:                                  ; preds = %while.cond
  %18 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12606
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !12606
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12606
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12606
  %base33 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !12606
  %20 = bitcast %struct.tree_base* %base33 to i64*, !dbg !12606
  %bf.load34 = load i64, i64* %20, align 8, !dbg !12606
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !12606
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !12606
  %cmp37 = icmp eq i32 %bf.cast36, 6, !dbg !12606
  br i1 %cmp37, label %land.rhs, label %lor.lhs.false, !dbg !12606

lor.lhs.false:                                    ; preds = %land.lhs.true32
  %21 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12606
  %common38 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !12606
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !12606
  %22 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !12606
  %base40 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !12606
  %23 = bitcast %struct.tree_base* %base40 to i64*, !dbg !12606
  %bf.load41 = load i64, i64* %23, align 8, !dbg !12606
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !12606
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !12606
  %cmp44 = icmp eq i32 %bf.cast43, 7, !dbg !12606
  br i1 %cmp44, label %land.rhs, label %lor.lhs.false45, !dbg !12606

lor.lhs.false45:                                  ; preds = %lor.lhs.false
  %24 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12606
  %common46 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !12606
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !12606
  %25 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !12606
  %base48 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !12606
  %26 = bitcast %struct.tree_base* %base48 to i64*, !dbg !12606
  %bf.load49 = load i64, i64* %26, align 8, !dbg !12606
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !12606
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !12606
  %cmp52 = icmp eq i32 %bf.cast51, 8, !dbg !12606
  br i1 %cmp52, label %land.rhs, label %land.end, !dbg !12607

land.rhs:                                         ; preds = %lor.lhs.false45, %lor.lhs.false, %land.lhs.true32
  %27 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12608
  %exp53 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !12608
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !12608
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 0, !dbg !12608
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !12608
  %common56 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !12608
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !12608
  %29 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !12608
  %base58 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !12608
  %30 = bitcast %struct.tree_base* %base58 to i64*, !dbg !12608
  %bf.load59 = load i64, i64* %30, align 8, !dbg !12608
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !12608
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !12608
  %cmp62 = icmp eq i32 %bf.cast61, 6, !dbg !12608
  br i1 %cmp62, label %lor.end, label %lor.lhs.false63, !dbg !12608

lor.lhs.false63:                                  ; preds = %land.rhs
  %31 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12608
  %exp64 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !12608
  %operands65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp64, i32 0, i32 3, !dbg !12608
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands65, i64 0, i64 0, !dbg !12608
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx66, align 8, !dbg !12608
  %common67 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !12608
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !12608
  %33 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !12608
  %base69 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !12608
  %34 = bitcast %struct.tree_base* %base69 to i64*, !dbg !12608
  %bf.load70 = load i64, i64* %34, align 8, !dbg !12608
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !12608
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !12608
  %cmp73 = icmp eq i32 %bf.cast72, 7, !dbg !12608
  br i1 %cmp73, label %lor.end, label %lor.rhs, !dbg !12608

lor.rhs:                                          ; preds = %lor.lhs.false63
  %35 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12608
  %exp74 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !12608
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !12608
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 0, !dbg !12608
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !12608
  %common77 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !12608
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !12608
  %37 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !12608
  %base79 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !12608
  %38 = bitcast %struct.tree_base* %base79 to i64*, !dbg !12608
  %bf.load80 = load i64, i64* %38, align 8, !dbg !12608
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !12608
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !12608
  %cmp83 = icmp eq i32 %bf.cast82, 8, !dbg !12608
  br label %lor.end, !dbg !12608

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false63, %land.rhs
  %39 = phi i1 [ true, %lor.lhs.false63 ], [ true, %land.rhs ], [ %cmp83, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false45, %while.cond
  %40 = phi i1 [ false, %lor.lhs.false45 ], [ false, %while.cond ], [ %39, %lor.end ], !dbg !12609
  br i1 %40, label %while.body, label %while.end, !dbg !12602

while.body:                                       ; preds = %land.end
  %41 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12610
  %exp84 = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !12610
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 3, !dbg !12610
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i64 0, i64 0, !dbg !12610
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx86, align 8, !dbg !12610
  store %union.tree_node* %42, %union.tree_node** %inner, align 8, !dbg !12611
  br label %while.cond, !dbg !12602, !llvm.loop !12612

while.end:                                        ; preds = %land.end
  %43 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12613
  %base87 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !12613
  %44 = bitcast %struct.tree_base* %base87 to i64*, !dbg !12613
  %bf.load88 = load i64, i64* %44, align 8, !dbg !12613
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !12613
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !12613
  store i32 %bf.cast90, i32* %code, align 4, !dbg !12614
  %45 = load i32, i32* %code, align 4, !dbg !12615
  %cmp91 = icmp eq i32 %45, 91, !dbg !12617
  br i1 %cmp91, label %if.then94, label %lor.lhs.false92, !dbg !12618

lor.lhs.false92:                                  ; preds = %while.end
  %46 = load i32, i32* %code, align 4, !dbg !12619
  %cmp93 = icmp eq i32 %46, 92, !dbg !12620
  br i1 %cmp93, label %if.then94, label %if.end109, !dbg !12621

if.then94:                                        ; preds = %lor.lhs.false92, %while.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !12622, metadata !DIExpression()), !dbg !12624
  %47 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12625
  %exp95 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !12625
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 3, !dbg !12625
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i64 0, i64 0, !dbg !12625
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx97, align 8, !dbg !12625
  store %union.tree_node* %48, %union.tree_node** %op0, align 8, !dbg !12624
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !12626, metadata !DIExpression()), !dbg !12627
  %49 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12628
  %exp98 = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !12628
  %operands99 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp98, i32 0, i32 3, !dbg !12628
  %arrayidx100 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands99, i64 0, i64 1, !dbg !12628
  %50 = load %union.tree_node*, %union.tree_node** %arrayidx100, align 8, !dbg !12628
  store %union.tree_node* %50, %union.tree_node** %op1, align 8, !dbg !12627
  %51 = load i32, i32* %loc.addr, align 4, !dbg !12629
  %52 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !12630
  %53 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12631
  %call101 = call %union.tree_node* @build_builtin_expect_predicate(i32 %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !12632
  store %union.tree_node* %call101, %union.tree_node** %op0, align 8, !dbg !12633
  %54 = load i32, i32* %loc.addr, align 4, !dbg !12634
  %55 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !12635
  %56 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12636
  %call102 = call %union.tree_node* @build_builtin_expect_predicate(i32 %54, %union.tree_node* %55, %union.tree_node* %56), !dbg !12637
  store %union.tree_node* %call102, %union.tree_node** %op1, align 8, !dbg !12638
  %57 = load i32, i32* %code, align 4, !dbg !12639
  %58 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12639
  %common103 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !12639
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !12639
  %59 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !12639
  %60 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !12639
  %61 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !12639
  %call105 = call %union.tree_node* @build2_stat(i32 %57, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %61), !dbg !12639
  store %union.tree_node* %call105, %union.tree_node** %inner, align 8, !dbg !12640
  %62 = load i32, i32* %loc.addr, align 4, !dbg !12641
  %63 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12642
  %common106 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !12642
  %type107 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common106, i32 0, i32 2, !dbg !12642
  %64 = load %union.tree_node*, %union.tree_node** %type107, align 8, !dbg !12642
  %65 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12643
  %call108 = call %union.tree_node* @fold_convert_loc(i32 %62, %union.tree_node* %64, %union.tree_node* %65), !dbg !12644
  store %union.tree_node* %call108, %union.tree_node** %retval, align 8, !dbg !12645
  br label %return, !dbg !12645

if.end109:                                        ; preds = %lor.lhs.false92
  %66 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12646
  %base110 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !12646
  %67 = bitcast %struct.tree_base* %base110 to i64*, !dbg !12646
  %bf.load111 = load i64, i64* %67, align 8, !dbg !12646
  %bf.lshr112 = lshr i64 %bf.load111, 17, !dbg !12646
  %bf.clear113 = and i64 %bf.lshr112, 1, !dbg !12646
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !12646
  %tobool115 = icmp ne i32 %bf.cast114, 0, !dbg !12646
  br i1 %tobool115, label %if.end117, label %if.then116, !dbg !12648

if.then116:                                       ; preds = %if.end109
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12649
  br label %return, !dbg !12649

if.end117:                                        ; preds = %if.end109
  %68 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12650
  store %union.tree_node* %68, %union.tree_node** %inner, align 8, !dbg !12651
  %69 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12652
  %call118 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %69), !dbg !12652
  store %union.tree_node* %call118, %union.tree_node** %inner, align 8, !dbg !12652
  %70 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12653
  %base119 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !12653
  %71 = bitcast %struct.tree_base* %base119 to i64*, !dbg !12653
  %bf.load120 = load i64, i64* %71, align 8, !dbg !12653
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !12653
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !12653
  %cmp123 = icmp eq i32 %bf.cast122, 121, !dbg !12655
  br i1 %cmp123, label %if.then124, label %if.end158, !dbg !12656

if.then124:                                       ; preds = %if.end117
  br label %do.body, !dbg !12657

do.body:                                          ; preds = %lor.end139, %if.then124
  %72 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12659
  %exp125 = bitcast %union.tree_node* %72 to %struct.tree_exp*, !dbg !12659
  %operands126 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp125, i32 0, i32 3, !dbg !12659
  %arrayidx127 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands126, i64 0, i64 0, !dbg !12659
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx127, align 8, !dbg !12659
  store %union.tree_node* %73, %union.tree_node** %inner, align 8, !dbg !12661
  br label %do.cond, !dbg !12662

do.cond:                                          ; preds = %do.body
  %74 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12663
  %base128 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !12663
  %75 = bitcast %struct.tree_base* %base128 to i64*, !dbg !12663
  %bf.load129 = load i64, i64* %75, align 8, !dbg !12663
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !12663
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !12663
  %cmp132 = icmp eq i32 %bf.cast131, 41, !dbg !12664
  br i1 %cmp132, label %lor.end139, label %lor.rhs133, !dbg !12665

lor.rhs133:                                       ; preds = %do.cond
  %76 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12666
  %base134 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !12666
  %77 = bitcast %struct.tree_base* %base134 to i64*, !dbg !12666
  %bf.load135 = load i64, i64* %77, align 8, !dbg !12666
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !12666
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !12666
  %cmp138 = icmp eq i32 %bf.cast137, 45, !dbg !12667
  br label %lor.end139, !dbg !12665

lor.end139:                                       ; preds = %lor.rhs133, %do.cond
  %78 = phi i1 [ true, %do.cond ], [ %cmp138, %lor.rhs133 ]
  br i1 %78, label %do.body, label %do.end, !dbg !12662, !llvm.loop !12668

do.end:                                           ; preds = %lor.end139
  %79 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12670
  %base140 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !12670
  %80 = bitcast %struct.tree_base* %base140 to i64*, !dbg !12670
  %bf.load141 = load i64, i64* %80, align 8, !dbg !12670
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !12670
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !12670
  %cmp144 = icmp eq i32 %bf.cast143, 32, !dbg !12672
  br i1 %cmp144, label %land.lhs.true151, label %lor.lhs.false145, !dbg !12673

lor.lhs.false145:                                 ; preds = %do.end
  %81 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12674
  %base146 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !12674
  %82 = bitcast %struct.tree_base* %base146 to i64*, !dbg !12674
  %bf.load147 = load i64, i64* %82, align 8, !dbg !12674
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !12674
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !12674
  %cmp150 = icmp eq i32 %bf.cast149, 29, !dbg !12675
  br i1 %cmp150, label %land.lhs.true151, label %if.end157, !dbg !12676

land.lhs.true151:                                 ; preds = %lor.lhs.false145, %do.end
  %83 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !12677
  %decl_with_vis = bitcast %union.tree_node* %83 to %struct.tree_decl_with_vis*, !dbg !12677
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !12677
  %84 = bitcast i24* %weak_flag to i32*, !dbg !12677
  %bf.load152 = load i32, i32* %84, align 8, !dbg !12677
  %bf.lshr153 = lshr i32 %bf.load152, 7, !dbg !12677
  %bf.clear154 = and i32 %bf.lshr153, 1, !dbg !12677
  %tobool155 = icmp ne i32 %bf.clear154, 0, !dbg !12677
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !12678

if.then156:                                       ; preds = %land.lhs.true151
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12679
  br label %return, !dbg !12679

if.end157:                                        ; preds = %land.lhs.true151, %lor.lhs.false145
  br label %if.end158, !dbg !12680

if.end158:                                        ; preds = %if.end157, %if.end117
  %85 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12681
  store %union.tree_node* %85, %union.tree_node** %retval, align 8, !dbg !12682
  br label %return, !dbg !12682

return:                                           ; preds = %if.end158, %if.then156, %if.then116, %if.then94, %if.then25
  %86 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12683
  ret %union.tree_node* %86, !dbg !12683
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_pow(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %type) #0 !dbg !12684 {
entry:
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12685, metadata !DIExpression()), !dbg !12686
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !12687, metadata !DIExpression()), !dbg !12688
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !12689, metadata !DIExpression()), !dbg !12690
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12691, metadata !DIExpression()), !dbg !12692
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12693, metadata !DIExpression()), !dbg !12694
  ret %union.tree_node* null, !dbg !12695
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_powi(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %type) #0 !dbg !12696 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %c = alloca i64, align 8
  %x = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12697, metadata !DIExpression()), !dbg !12698
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !12699, metadata !DIExpression()), !dbg !12700
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !12701, metadata !DIExpression()), !dbg !12702
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12703, metadata !DIExpression()), !dbg !12704
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12705, metadata !DIExpression()), !dbg !12706
  %0 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12707
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !12709
  %tobool = icmp ne i8 %call, 0, !dbg !12709
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12710

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12711
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !12712
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12712
  br i1 %tobool2, label %if.end, label %if.then, !dbg !12713

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12714
  br label %return, !dbg !12714

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12715
  %call3 = call i32 @real_onep(%union.tree_node* %2), !dbg !12717
  %tobool4 = icmp ne i32 %call3, 0, !dbg !12717
  br i1 %tobool4, label %if.then5, label %if.end8, !dbg !12718

if.then5:                                         ; preds = %if.end
  %3 = load i32, i32* %loc.addr, align 4, !dbg !12719
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12720
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12721
  %call6 = call %union.tree_node* @build_real(%union.tree_node* %5, %struct.real_value* byval(%struct.real_value) align 8 @dconst1), !dbg !12722
  %6 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12723
  %call7 = call %union.tree_node* @omit_one_operand_loc(i32 %3, %union.tree_node* %4, %union.tree_node* %call6, %union.tree_node* %6), !dbg !12724
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !12725
  br label %return, !dbg !12725

if.end8:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12726
  %call9 = call i32 @host_integerp(%union.tree_node* %7, i32 0), !dbg !12728
  %tobool10 = icmp ne i32 %call9, 0, !dbg !12728
  br i1 %tobool10, label %if.then11, label %if.end45, !dbg !12729

if.then11:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata i64* %c, metadata !12730, metadata !DIExpression()), !dbg !12732
  %8 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12733
  %int_cst = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !12733
  %int_cst12 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !12733
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst12, i32 0, i32 0, !dbg !12733
  %9 = load i64, i64* %low, align 8, !dbg !12733
  store i64 %9, i64* %c, align 8, !dbg !12732
  %10 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12734
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !12734
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !12734
  %bf.load = load i64, i64* %11, align 8, !dbg !12734
  %bf.clear = and i64 %bf.load, 65535, !dbg !12734
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12734
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !12736
  br i1 %cmp, label %land.lhs.true, label %if.end31, !dbg !12737

land.lhs.true:                                    ; preds = %if.then11
  %12 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12738
  %base13 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !12738
  %13 = bitcast %struct.tree_base* %base13 to i64*, !dbg !12738
  %bf.load14 = load i64, i64* %13, align 8, !dbg !12738
  %bf.lshr = lshr i64 %bf.load14, 27, !dbg !12738
  %bf.clear15 = and i64 %bf.lshr, 1, !dbg !12738
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !12738
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !12738
  br i1 %tobool17, label %if.end31, label %if.then18, !dbg !12739

if.then18:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.real_value* %x, metadata !12740, metadata !DIExpression()), !dbg !12742
  %14 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12743
  %real_cst = bitcast %union.tree_node* %14 to %struct.tree_real_cst*, !dbg !12743
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !12743
  %15 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !12743
  %16 = bitcast %struct.real_value* %x to i8*, !dbg !12743
  %17 = bitcast %struct.real_value* %15 to i8*, !dbg !12743
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 32, i1 false), !dbg !12743
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12744
  %base19 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !12744
  %19 = bitcast %struct.tree_base* %base19 to i64*, !dbg !12744
  %bf.load20 = load i64, i64* %19, align 8, !dbg !12744
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !12744
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !12744
  %cmp23 = icmp eq i32 %bf.cast22, 14, !dbg !12744
  br i1 %cmp23, label %cond.true, label %cond.false, !dbg !12744

cond.true:                                        ; preds = %if.then18
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12744
  %call24 = call i32 @vector_type_mode(%union.tree_node* %20), !dbg !12744
  br label %cond.end, !dbg !12744

cond.false:                                       ; preds = %if.then18
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12744
  %type25 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !12744
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 6, !dbg !12744
  %bf.load26 = load i32, i32* %mode, align 4, !dbg !12744
  %bf.lshr27 = lshr i32 %bf.load26, 16, !dbg !12744
  %bf.clear28 = and i32 %bf.lshr27, 255, !dbg !12744
  br label %cond.end, !dbg !12744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call24, %cond.true ], [ %bf.clear28, %cond.false ], !dbg !12744
  %22 = load i64, i64* %c, align 8, !dbg !12745
  %call29 = call zeroext i8 @real_powi(%struct.real_value* %x, i32 %cond, %struct.real_value* %x, i64 %22), !dbg !12746
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12747
  %call30 = call %union.tree_node* @build_real(%union.tree_node* %23, %struct.real_value* byval(%struct.real_value) align 8 %x), !dbg !12748
  store %union.tree_node* %call30, %union.tree_node** %retval, align 8, !dbg !12749
  br label %return, !dbg !12749

if.end31:                                         ; preds = %land.lhs.true, %if.then11
  %24 = load i64, i64* %c, align 8, !dbg !12750
  %cmp32 = icmp eq i64 %24, 0, !dbg !12752
  br i1 %cmp32, label %if.then33, label %if.end36, !dbg !12753

if.then33:                                        ; preds = %if.end31
  %25 = load i32, i32* %loc.addr, align 4, !dbg !12754
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12755
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12756
  %call34 = call %union.tree_node* @build_real(%union.tree_node* %27, %struct.real_value* byval(%struct.real_value) align 8 @dconst1), !dbg !12757
  %28 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12758
  %call35 = call %union.tree_node* @omit_one_operand_loc(i32 %25, %union.tree_node* %26, %union.tree_node* %call34, %union.tree_node* %28), !dbg !12759
  store %union.tree_node* %call35, %union.tree_node** %retval, align 8, !dbg !12760
  br label %return, !dbg !12760

if.end36:                                         ; preds = %if.end31
  %29 = load i64, i64* %c, align 8, !dbg !12761
  %cmp37 = icmp eq i64 %29, 1, !dbg !12763
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !12764

if.then38:                                        ; preds = %if.end36
  %30 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12765
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !12766
  br label %return, !dbg !12766

if.end39:                                         ; preds = %if.end36
  %31 = load i64, i64* %c, align 8, !dbg !12767
  %cmp40 = icmp eq i64 %31, -1, !dbg !12769
  br i1 %cmp40, label %if.then41, label %if.end44, !dbg !12770

if.then41:                                        ; preds = %if.end39
  %32 = load i32, i32* %loc.addr, align 4, !dbg !12771
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12771
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12771
  %call42 = call %union.tree_node* @build_real(%union.tree_node* %34, %struct.real_value* byval(%struct.real_value) align 8 @dconst1), !dbg !12771
  %35 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12771
  %call43 = call %union.tree_node* @fold_build2_stat_loc(i32 %32, i32 75, %union.tree_node* %33, %union.tree_node* %call42, %union.tree_node* %35), !dbg !12771
  store %union.tree_node* %call43, %union.tree_node** %retval, align 8, !dbg !12772
  br label %return, !dbg !12772

if.end44:                                         ; preds = %if.end39
  br label %if.end45, !dbg !12773

if.end45:                                         ; preds = %if.end44, %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12774
  br label %return, !dbg !12774

return:                                           ; preds = %if.end45, %if.then41, %if.then38, %if.then33, %cond.end, %if.then5, %if.then
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12775
  ret %union.tree_node* %36, !dbg !12775
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_copysign(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg1, %union.tree_node* %arg2, %union.tree_node* %type) #0 !dbg !12776 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %c1 = alloca %struct.real_value, align 8
  %c2 = alloca %struct.real_value, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12777, metadata !DIExpression()), !dbg !12778
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !12779, metadata !DIExpression()), !dbg !12780
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12781, metadata !DIExpression()), !dbg !12782
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !12783, metadata !DIExpression()), !dbg !12784
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12785, metadata !DIExpression()), !dbg !12786
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !12787, metadata !DIExpression()), !dbg !12788
  %0 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12789
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 9), !dbg !12791
  %tobool = icmp ne i8 %call, 0, !dbg !12791
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12792

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12793
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 9), !dbg !12794
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12794
  br i1 %tobool2, label %if.end, label %if.then, !dbg !12795

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12796
  br label %return, !dbg !12796

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12797
  %3 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12799
  %call3 = call i32 @operand_equal_p(%union.tree_node* %2, %union.tree_node* %3, i32 0), !dbg !12800
  %tobool4 = icmp ne i32 %call3, 0, !dbg !12800
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !12801

if.then5:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !12802
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12803
  %6 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12804
  %call6 = call %union.tree_node* @fold_convert_loc(i32 %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !12805
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !12806
  br label %return, !dbg !12806

if.end7:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12807
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !12807
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !12807
  %bf.load = load i64, i64* %8, align 8, !dbg !12807
  %bf.clear = and i64 %bf.load, 65535, !dbg !12807
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12807
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !12809
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !12810

land.lhs.true:                                    ; preds = %if.end7
  %9 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12811
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12811
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !12811
  %bf.load9 = load i64, i64* %10, align 8, !dbg !12811
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !12811
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !12811
  %cmp12 = icmp eq i32 %bf.cast11, 24, !dbg !12812
  br i1 %cmp12, label %land.lhs.true13, label %if.end30, !dbg !12813

land.lhs.true13:                                  ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12814
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12814
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !12814
  %bf.load15 = load i64, i64* %12, align 8, !dbg !12814
  %bf.lshr = lshr i64 %bf.load15, 27, !dbg !12814
  %bf.clear16 = and i64 %bf.lshr, 1, !dbg !12814
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !12814
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !12814
  br i1 %tobool18, label %if.end30, label %land.lhs.true19, !dbg !12815

land.lhs.true19:                                  ; preds = %land.lhs.true13
  %13 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12816
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !12816
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !12816
  %bf.load21 = load i64, i64* %14, align 8, !dbg !12816
  %bf.lshr22 = lshr i64 %bf.load21, 27, !dbg !12816
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !12816
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !12816
  %tobool25 = icmp ne i32 %bf.cast24, 0, !dbg !12816
  br i1 %tobool25, label %if.end30, label %if.then26, !dbg !12817

if.then26:                                        ; preds = %land.lhs.true19
  call void @llvm.dbg.declare(metadata %struct.real_value* %c1, metadata !12818, metadata !DIExpression()), !dbg !12820
  call void @llvm.dbg.declare(metadata %struct.real_value* %c2, metadata !12821, metadata !DIExpression()), !dbg !12822
  %15 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12823
  %real_cst = bitcast %union.tree_node* %15 to %struct.tree_real_cst*, !dbg !12823
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !12823
  %16 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !12823
  %17 = bitcast %struct.real_value* %c1 to i8*, !dbg !12823
  %18 = bitcast %struct.real_value* %16 to i8*, !dbg !12823
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 32, i1 false), !dbg !12823
  %19 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12824
  %real_cst27 = bitcast %union.tree_node* %19 to %struct.tree_real_cst*, !dbg !12824
  %real_cst_ptr28 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst27, i32 0, i32 1, !dbg !12824
  %20 = load %struct.real_value*, %struct.real_value** %real_cst_ptr28, align 8, !dbg !12824
  %21 = bitcast %struct.real_value* %c2 to i8*, !dbg !12824
  %22 = bitcast %struct.real_value* %20 to i8*, !dbg !12824
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false), !dbg !12824
  call void @real_copysign(%struct.real_value* %c1, %struct.real_value* %c2), !dbg !12825
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12826
  %call29 = call %union.tree_node* @build_real(%union.tree_node* %23, %struct.real_value* byval(%struct.real_value) align 8 %c1), !dbg !12827
  store %union.tree_node* %call29, %union.tree_node** %retval, align 8, !dbg !12828
  br label %return, !dbg !12828

if.end30:                                         ; preds = %land.lhs.true19, %land.lhs.true13, %land.lhs.true, %if.end7
  %24 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12829
  %call31 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %24), !dbg !12831
  %tobool32 = icmp ne i8 %call31, 0, !dbg !12831
  br i1 %tobool32, label %if.then33, label %if.end36, !dbg !12832

if.then33:                                        ; preds = %if.end30
  %25 = load i32, i32* %loc.addr, align 4, !dbg !12833
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12834
  %27 = load i32, i32* %loc.addr, align 4, !dbg !12835
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12835
  %29 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12835
  %call34 = call %union.tree_node* @fold_build1_stat_loc(i32 %27, i32 82, %union.tree_node* %28, %union.tree_node* %29), !dbg !12835
  %30 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12836
  %call35 = call %union.tree_node* @omit_one_operand_loc(i32 %25, %union.tree_node* %26, %union.tree_node* %call34, %union.tree_node* %30), !dbg !12837
  store %union.tree_node* %call35, %union.tree_node** %retval, align 8, !dbg !12838
  br label %return, !dbg !12838

if.end36:                                         ; preds = %if.end30
  %31 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12839
  %call37 = call %union.tree_node* @fold_strip_sign_ops(%union.tree_node* %31), !dbg !12840
  store %union.tree_node* %call37, %union.tree_node** %tem, align 8, !dbg !12841
  %32 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !12842
  %tobool38 = icmp ne %union.tree_node* %32, null, !dbg !12842
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !12844

if.then39:                                        ; preds = %if.end36
  %33 = load i32, i32* %loc.addr, align 4, !dbg !12845
  %34 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !12846
  %35 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !12847
  %36 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !12848
  %call40 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %33, %union.tree_node* %34, i32 2, %union.tree_node* %35, %union.tree_node* %36), !dbg !12849
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !12850
  br label %return, !dbg !12850

if.end41:                                         ; preds = %if.end36
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12851
  br label %return, !dbg !12851

return:                                           ; preds = %if.end41, %if.then39, %if.then33, %if.then26, %if.then5, %if.then
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12852
  ret %union.tree_node* %37, !dbg !12852
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_fmin_fmax(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %type, i8 zeroext %max) #0 !dbg !12853 {
entry:
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %max.addr = alloca i8, align 1
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12854, metadata !DIExpression()), !dbg !12855
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !12856, metadata !DIExpression()), !dbg !12857
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12858, metadata !DIExpression()), !dbg !12859
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12860, metadata !DIExpression()), !dbg !12861
  store i8 %max, i8* %max.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %max.addr, metadata !12862, metadata !DIExpression()), !dbg !12863
  ret %union.tree_node* null, !dbg !12864
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_unordered_cmp(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %arg0, %union.tree_node* %arg1, i32 %unordered_code, i32 %ordered_code) #0 !dbg !12865 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %unordered_code.addr = alloca i32, align 4
  %ordered_code.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %type0 = alloca %union.tree_node*, align 8
  %type14 = alloca %union.tree_node*, align 8
  %code0 = alloca i32, align 4
  %code1 = alloca i32, align 4
  %cmp_type = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12868, metadata !DIExpression()), !dbg !12869
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !12870, metadata !DIExpression()), !dbg !12871
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !12872, metadata !DIExpression()), !dbg !12873
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !12874, metadata !DIExpression()), !dbg !12875
  store i32 %unordered_code, i32* %unordered_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unordered_code.addr, metadata !12876, metadata !DIExpression()), !dbg !12877
  store i32 %ordered_code, i32* %ordered_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ordered_code.addr, metadata !12878, metadata !DIExpression()), !dbg !12879
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12880, metadata !DIExpression()), !dbg !12881
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !12882
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !12882
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12882
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !12882
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !12882
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !12882
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !12882
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !12881
  call void @llvm.dbg.declare(metadata i32* %code, metadata !12883, metadata !DIExpression()), !dbg !12884
  call void @llvm.dbg.declare(metadata %union.tree_node** %type0, metadata !12885, metadata !DIExpression()), !dbg !12886
  call void @llvm.dbg.declare(metadata %union.tree_node** %type14, metadata !12887, metadata !DIExpression()), !dbg !12888
  call void @llvm.dbg.declare(metadata i32* %code0, metadata !12889, metadata !DIExpression()), !dbg !12890
  call void @llvm.dbg.declare(metadata i32* %code1, metadata !12891, metadata !DIExpression()), !dbg !12892
  call void @llvm.dbg.declare(metadata %union.tree_node** %cmp_type, metadata !12893, metadata !DIExpression()), !dbg !12894
  store %union.tree_node* null, %union.tree_node** %cmp_type, align 8, !dbg !12894
  %3 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12895
  %common5 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !12895
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !12895
  %4 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !12895
  store %union.tree_node* %4, %union.tree_node** %type0, align 8, !dbg !12896
  %5 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12897
  %common7 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !12897
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !12897
  %6 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !12897
  store %union.tree_node* %6, %union.tree_node** %type14, align 8, !dbg !12898
  %7 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !12899
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !12899
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !12899
  %bf.load = load i64, i64* %8, align 8, !dbg !12899
  %bf.clear = and i64 %bf.load, 65535, !dbg !12899
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12899
  store i32 %bf.cast, i32* %code0, align 4, !dbg !12900
  %9 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !12901
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12901
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !12901
  %bf.load10 = load i64, i64* %10, align 8, !dbg !12901
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !12901
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !12901
  store i32 %bf.cast12, i32* %code1, align 4, !dbg !12902
  %11 = load i32, i32* %code0, align 4, !dbg !12903
  %cmp = icmp eq i32 %11, 9, !dbg !12905
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !12906

land.lhs.true:                                    ; preds = %entry
  %12 = load i32, i32* %code1, align 4, !dbg !12907
  %cmp13 = icmp eq i32 %12, 9, !dbg !12908
  br i1 %cmp13, label %if.then, label %if.else, !dbg !12909

if.then:                                          ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !12910
  %type15 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !12910
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6, !dbg !12910
  %bf.load16 = load i32, i32* %precision, align 4, !dbg !12910
  %bf.clear17 = and i32 %bf.load16, 1023, !dbg !12910
  %14 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !12911
  %type18 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !12911
  %precision19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6, !dbg !12911
  %bf.load20 = load i32, i32* %precision19, align 4, !dbg !12911
  %bf.clear21 = and i32 %bf.load20, 1023, !dbg !12911
  %cmp22 = icmp sge i32 %bf.clear17, %bf.clear21, !dbg !12912
  br i1 %cmp22, label %cond.true, label %cond.false, !dbg !12910

cond.true:                                        ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !12913
  br label %cond.end, !dbg !12910

cond.false:                                       ; preds = %if.then
  %16 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !12914
  br label %cond.end, !dbg !12910

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %15, %cond.true ], [ %16, %cond.false ], !dbg !12910
  store %union.tree_node* %cond, %union.tree_node** %cmp_type, align 8, !dbg !12915
  br label %if.end33, !dbg !12916

if.else:                                          ; preds = %land.lhs.true, %entry
  %17 = load i32, i32* %code0, align 4, !dbg !12917
  %cmp23 = icmp eq i32 %17, 9, !dbg !12919
  br i1 %cmp23, label %land.lhs.true24, label %if.else27, !dbg !12920

land.lhs.true24:                                  ; preds = %if.else
  %18 = load i32, i32* %code1, align 4, !dbg !12921
  %cmp25 = icmp eq i32 %18, 8, !dbg !12922
  br i1 %cmp25, label %if.then26, label %if.else27, !dbg !12923

if.then26:                                        ; preds = %land.lhs.true24
  %19 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !12924
  store %union.tree_node* %19, %union.tree_node** %cmp_type, align 8, !dbg !12925
  br label %if.end32, !dbg !12926

if.else27:                                        ; preds = %land.lhs.true24, %if.else
  %20 = load i32, i32* %code0, align 4, !dbg !12927
  %cmp28 = icmp eq i32 %20, 8, !dbg !12929
  br i1 %cmp28, label %land.lhs.true29, label %if.end, !dbg !12930

land.lhs.true29:                                  ; preds = %if.else27
  %21 = load i32, i32* %code1, align 4, !dbg !12931
  %cmp30 = icmp eq i32 %21, 9, !dbg !12932
  br i1 %cmp30, label %if.then31, label %if.end, !dbg !12933

if.then31:                                        ; preds = %land.lhs.true29
  %22 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !12934
  store %union.tree_node* %22, %union.tree_node** %cmp_type, align 8, !dbg !12935
  br label %if.end, !dbg !12936

if.end:                                           ; preds = %if.then31, %land.lhs.true29, %if.else27
  br label %if.end32

if.end32:                                         ; preds = %if.end, %if.then26
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %cond.end
  %23 = load i32, i32* %loc.addr, align 4, !dbg !12937
  %24 = load %union.tree_node*, %union.tree_node** %cmp_type, align 8, !dbg !12938
  %25 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12939
  %call = call %union.tree_node* @fold_convert_loc(i32 %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !12940
  store %union.tree_node* %call, %union.tree_node** %arg0.addr, align 8, !dbg !12941
  %26 = load i32, i32* %loc.addr, align 4, !dbg !12942
  %27 = load %union.tree_node*, %union.tree_node** %cmp_type, align 8, !dbg !12943
  %28 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12944
  %call34 = call %union.tree_node* @fold_convert_loc(i32 %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !12945
  store %union.tree_node* %call34, %union.tree_node** %arg1.addr, align 8, !dbg !12946
  %29 = load i32, i32* %unordered_code.addr, align 4, !dbg !12947
  %cmp35 = icmp eq i32 %29, 103, !dbg !12949
  br i1 %cmp35, label %if.then36, label %if.end479, !dbg !12950

if.then36:                                        ; preds = %if.end33
  %30 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common37 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !12951
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !12951
  %31 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !12951
  %base39 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !12951
  %32 = bitcast %struct.tree_base* %base39 to i64*, !dbg !12951
  %bf.load40 = load i64, i64* %32, align 8, !dbg !12951
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !12951
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !12951
  %cmp43 = icmp eq i32 %bf.cast42, 14, !dbg !12951
  br i1 %cmp43, label %cond.true44, label %cond.false48, !dbg !12951

cond.true44:                                      ; preds = %if.then36
  %33 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common45 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !12951
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !12951
  %34 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !12951
  %call47 = call i32 @vector_type_mode(%union.tree_node* %34), !dbg !12951
  br label %cond.end54, !dbg !12951

cond.false48:                                     ; preds = %if.then36
  %35 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common49 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !12951
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !12951
  %36 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !12951
  %type51 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !12951
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6, !dbg !12951
  %bf.load52 = load i32, i32* %mode, align 4, !dbg !12951
  %bf.lshr = lshr i32 %bf.load52, 16, !dbg !12951
  %bf.clear53 = and i32 %bf.lshr, 255, !dbg !12951
  br label %cond.end54, !dbg !12951

cond.end54:                                       ; preds = %cond.false48, %cond.true44
  %cond55 = phi i32 [ %call47, %cond.true44 ], [ %bf.clear53, %cond.false48 ], !dbg !12951
  %idxprom = zext i32 %cond55 to i64, !dbg !12951
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !12951
  %37 = load i8, i8* %arrayidx, align 1, !dbg !12951
  %conv = zext i8 %37 to i32, !dbg !12951
  %cmp56 = icmp eq i32 %conv, 8, !dbg !12951
  br i1 %cmp56, label %land.lhs.true141, label %lor.lhs.false, !dbg !12951

lor.lhs.false:                                    ; preds = %cond.end54
  %38 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common58 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !12951
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !12951
  %39 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !12951
  %base60 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !12951
  %40 = bitcast %struct.tree_base* %base60 to i64*, !dbg !12951
  %bf.load61 = load i64, i64* %40, align 8, !dbg !12951
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !12951
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !12951
  %cmp64 = icmp eq i32 %bf.cast63, 14, !dbg !12951
  br i1 %cmp64, label %cond.true66, label %cond.false70, !dbg !12951

cond.true66:                                      ; preds = %lor.lhs.false
  %41 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common67 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !12951
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !12951
  %42 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !12951
  %call69 = call i32 @vector_type_mode(%union.tree_node* %42), !dbg !12951
  br label %cond.end78, !dbg !12951

cond.false70:                                     ; preds = %lor.lhs.false
  %43 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common71 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !12951
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !12951
  %44 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !12951
  %type73 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !12951
  %mode74 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type73, i32 0, i32 6, !dbg !12951
  %bf.load75 = load i32, i32* %mode74, align 4, !dbg !12951
  %bf.lshr76 = lshr i32 %bf.load75, 16, !dbg !12951
  %bf.clear77 = and i32 %bf.lshr76, 255, !dbg !12951
  br label %cond.end78, !dbg !12951

cond.end78:                                       ; preds = %cond.false70, %cond.true66
  %cond79 = phi i32 [ %call69, %cond.true66 ], [ %bf.clear77, %cond.false70 ], !dbg !12951
  %idxprom80 = zext i32 %cond79 to i64, !dbg !12951
  %arrayidx81 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom80, !dbg !12951
  %45 = load i8, i8* %arrayidx81, align 1, !dbg !12951
  %conv82 = zext i8 %45 to i32, !dbg !12951
  %cmp83 = icmp eq i32 %conv82, 9, !dbg !12951
  br i1 %cmp83, label %land.lhs.true141, label %lor.lhs.false85, !dbg !12951

lor.lhs.false85:                                  ; preds = %cond.end78
  %46 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common86 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !12951
  %type87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 2, !dbg !12951
  %47 = load %union.tree_node*, %union.tree_node** %type87, align 8, !dbg !12951
  %base88 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !12951
  %48 = bitcast %struct.tree_base* %base88 to i64*, !dbg !12951
  %bf.load89 = load i64, i64* %48, align 8, !dbg !12951
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !12951
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !12951
  %cmp92 = icmp eq i32 %bf.cast91, 14, !dbg !12951
  br i1 %cmp92, label %cond.true94, label %cond.false98, !dbg !12951

cond.true94:                                      ; preds = %lor.lhs.false85
  %49 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common95 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !12951
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !12951
  %50 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !12951
  %call97 = call i32 @vector_type_mode(%union.tree_node* %50), !dbg !12951
  br label %cond.end106, !dbg !12951

cond.false98:                                     ; preds = %lor.lhs.false85
  %51 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common99 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !12951
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !12951
  %52 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !12951
  %type101 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !12951
  %mode102 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type101, i32 0, i32 6, !dbg !12951
  %bf.load103 = load i32, i32* %mode102, align 4, !dbg !12951
  %bf.lshr104 = lshr i32 %bf.load103, 16, !dbg !12951
  %bf.clear105 = and i32 %bf.lshr104, 255, !dbg !12951
  br label %cond.end106, !dbg !12951

cond.end106:                                      ; preds = %cond.false98, %cond.true94
  %cond107 = phi i32 [ %call97, %cond.true94 ], [ %bf.clear105, %cond.false98 ], !dbg !12951
  %idxprom108 = zext i32 %cond107 to i64, !dbg !12951
  %arrayidx109 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom108, !dbg !12951
  %53 = load i8, i8* %arrayidx109, align 1, !dbg !12951
  %conv110 = zext i8 %53 to i32, !dbg !12951
  %cmp111 = icmp eq i32 %conv110, 11, !dbg !12951
  br i1 %cmp111, label %land.lhs.true141, label %lor.lhs.false113, !dbg !12951

lor.lhs.false113:                                 ; preds = %cond.end106
  %54 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common114 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !12951
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !12951
  %55 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !12951
  %base116 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !12951
  %56 = bitcast %struct.tree_base* %base116 to i64*, !dbg !12951
  %bf.load117 = load i64, i64* %56, align 8, !dbg !12951
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !12951
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !12951
  %cmp120 = icmp eq i32 %bf.cast119, 14, !dbg !12951
  br i1 %cmp120, label %cond.true122, label %cond.false126, !dbg !12951

cond.true122:                                     ; preds = %lor.lhs.false113
  %57 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common123 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !12951
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 2, !dbg !12951
  %58 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !12951
  %call125 = call i32 @vector_type_mode(%union.tree_node* %58), !dbg !12951
  br label %cond.end134, !dbg !12951

cond.false126:                                    ; preds = %lor.lhs.false113
  %59 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common127 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !12951
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !12951
  %60 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !12951
  %type129 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !12951
  %mode130 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 6, !dbg !12951
  %bf.load131 = load i32, i32* %mode130, align 4, !dbg !12951
  %bf.lshr132 = lshr i32 %bf.load131, 16, !dbg !12951
  %bf.clear133 = and i32 %bf.lshr132, 255, !dbg !12951
  br label %cond.end134, !dbg !12951

cond.end134:                                      ; preds = %cond.false126, %cond.true122
  %cond135 = phi i32 [ %call125, %cond.true122 ], [ %bf.clear133, %cond.false126 ], !dbg !12951
  %idxprom136 = zext i32 %cond135 to i64, !dbg !12951
  %arrayidx137 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom136, !dbg !12951
  %61 = load i8, i8* %arrayidx137, align 1, !dbg !12951
  %conv138 = zext i8 %61 to i32, !dbg !12951
  %cmp139 = icmp eq i32 %conv138, 17, !dbg !12951
  br i1 %cmp139, label %land.lhs.true141, label %if.then475, !dbg !12951

land.lhs.true141:                                 ; preds = %cond.end134, %cond.end106, %cond.end78, %cond.end54
  %62 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common142 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !12951
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 2, !dbg !12951
  %63 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !12951
  %base144 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !12951
  %64 = bitcast %struct.tree_base* %base144 to i64*, !dbg !12951
  %bf.load145 = load i64, i64* %64, align 8, !dbg !12951
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !12951
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !12951
  %cmp148 = icmp eq i32 %bf.cast147, 14, !dbg !12951
  br i1 %cmp148, label %cond.true150, label %cond.false154, !dbg !12951

cond.true150:                                     ; preds = %land.lhs.true141
  %65 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common151 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !12951
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !12951
  %66 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !12951
  %call153 = call i32 @vector_type_mode(%union.tree_node* %66), !dbg !12951
  br label %cond.end162, !dbg !12951

cond.false154:                                    ; preds = %land.lhs.true141
  %67 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common155 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !12951
  %type156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common155, i32 0, i32 2, !dbg !12951
  %68 = load %union.tree_node*, %union.tree_node** %type156, align 8, !dbg !12951
  %type157 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !12951
  %mode158 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type157, i32 0, i32 6, !dbg !12951
  %bf.load159 = load i32, i32* %mode158, align 4, !dbg !12951
  %bf.lshr160 = lshr i32 %bf.load159, 16, !dbg !12951
  %bf.clear161 = and i32 %bf.lshr160, 255, !dbg !12951
  br label %cond.end162, !dbg !12951

cond.end162:                                      ; preds = %cond.false154, %cond.true150
  %cond163 = phi i32 [ %call153, %cond.true150 ], [ %bf.clear161, %cond.false154 ], !dbg !12951
  %idxprom164 = zext i32 %cond163 to i64, !dbg !12951
  %arrayidx165 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom164, !dbg !12951
  %69 = load i8, i8* %arrayidx165, align 1, !dbg !12951
  %conv166 = zext i8 %69 to i32, !dbg !12951
  %cmp167 = icmp eq i32 %conv166, 8, !dbg !12951
  br i1 %cmp167, label %cond.true197, label %lor.lhs.false169, !dbg !12951

lor.lhs.false169:                                 ; preds = %cond.end162
  %70 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common170 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !12951
  %type171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common170, i32 0, i32 2, !dbg !12951
  %71 = load %union.tree_node*, %union.tree_node** %type171, align 8, !dbg !12951
  %base172 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !12951
  %72 = bitcast %struct.tree_base* %base172 to i64*, !dbg !12951
  %bf.load173 = load i64, i64* %72, align 8, !dbg !12951
  %bf.clear174 = and i64 %bf.load173, 65535, !dbg !12951
  %bf.cast175 = trunc i64 %bf.clear174 to i32, !dbg !12951
  %cmp176 = icmp eq i32 %bf.cast175, 14, !dbg !12951
  br i1 %cmp176, label %cond.true178, label %cond.false182, !dbg !12951

cond.true178:                                     ; preds = %lor.lhs.false169
  %73 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common179 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !12951
  %type180 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common179, i32 0, i32 2, !dbg !12951
  %74 = load %union.tree_node*, %union.tree_node** %type180, align 8, !dbg !12951
  %call181 = call i32 @vector_type_mode(%union.tree_node* %74), !dbg !12951
  br label %cond.end190, !dbg !12951

cond.false182:                                    ; preds = %lor.lhs.false169
  %75 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common183 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !12951
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !12951
  %76 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !12951
  %type185 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !12951
  %mode186 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 6, !dbg !12951
  %bf.load187 = load i32, i32* %mode186, align 4, !dbg !12951
  %bf.lshr188 = lshr i32 %bf.load187, 16, !dbg !12951
  %bf.clear189 = and i32 %bf.lshr188, 255, !dbg !12951
  br label %cond.end190, !dbg !12951

cond.end190:                                      ; preds = %cond.false182, %cond.true178
  %cond191 = phi i32 [ %call181, %cond.true178 ], [ %bf.clear189, %cond.false182 ], !dbg !12951
  %idxprom192 = zext i32 %cond191 to i64, !dbg !12951
  %arrayidx193 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom192, !dbg !12951
  %77 = load i8, i8* %arrayidx193, align 1, !dbg !12951
  %conv194 = zext i8 %77 to i32, !dbg !12951
  %cmp195 = icmp eq i32 %conv194, 9, !dbg !12951
  br i1 %cmp195, label %cond.true197, label %cond.false220, !dbg !12951

cond.true197:                                     ; preds = %cond.end190, %cond.end162
  %78 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common198 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !12951
  %type199 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common198, i32 0, i32 2, !dbg !12951
  %79 = load %union.tree_node*, %union.tree_node** %type199, align 8, !dbg !12951
  %base200 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !12951
  %80 = bitcast %struct.tree_base* %base200 to i64*, !dbg !12951
  %bf.load201 = load i64, i64* %80, align 8, !dbg !12951
  %bf.clear202 = and i64 %bf.load201, 65535, !dbg !12951
  %bf.cast203 = trunc i64 %bf.clear202 to i32, !dbg !12951
  %cmp204 = icmp eq i32 %bf.cast203, 14, !dbg !12951
  br i1 %cmp204, label %cond.true206, label %cond.false210, !dbg !12951

cond.true206:                                     ; preds = %cond.true197
  %81 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common207 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !12951
  %type208 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common207, i32 0, i32 2, !dbg !12951
  %82 = load %union.tree_node*, %union.tree_node** %type208, align 8, !dbg !12951
  %call209 = call i32 @vector_type_mode(%union.tree_node* %82), !dbg !12951
  br label %cond.end218, !dbg !12951

cond.false210:                                    ; preds = %cond.true197
  %83 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common211 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !12951
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !12951
  %84 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !12951
  %type213 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !12951
  %mode214 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type213, i32 0, i32 6, !dbg !12951
  %bf.load215 = load i32, i32* %mode214, align 4, !dbg !12951
  %bf.lshr216 = lshr i32 %bf.load215, 16, !dbg !12951
  %bf.clear217 = and i32 %bf.lshr216, 255, !dbg !12951
  br label %cond.end218, !dbg !12951

cond.end218:                                      ; preds = %cond.false210, %cond.true206
  %cond219 = phi i32 [ %call209, %cond.true206 ], [ %bf.clear217, %cond.false210 ], !dbg !12951
  br label %cond.end246, !dbg !12951

cond.false220:                                    ; preds = %cond.end190
  %85 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common221 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !12951
  %type222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 2, !dbg !12951
  %86 = load %union.tree_node*, %union.tree_node** %type222, align 8, !dbg !12951
  %base223 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !12951
  %87 = bitcast %struct.tree_base* %base223 to i64*, !dbg !12951
  %bf.load224 = load i64, i64* %87, align 8, !dbg !12951
  %bf.clear225 = and i64 %bf.load224, 65535, !dbg !12951
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !12951
  %cmp227 = icmp eq i32 %bf.cast226, 14, !dbg !12951
  br i1 %cmp227, label %cond.true229, label %cond.false233, !dbg !12951

cond.true229:                                     ; preds = %cond.false220
  %88 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common230 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !12951
  %type231 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common230, i32 0, i32 2, !dbg !12951
  %89 = load %union.tree_node*, %union.tree_node** %type231, align 8, !dbg !12951
  %call232 = call i32 @vector_type_mode(%union.tree_node* %89), !dbg !12951
  br label %cond.end241, !dbg !12951

cond.false233:                                    ; preds = %cond.false220
  %90 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common234 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !12951
  %type235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common234, i32 0, i32 2, !dbg !12951
  %91 = load %union.tree_node*, %union.tree_node** %type235, align 8, !dbg !12951
  %type236 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !12951
  %mode237 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type236, i32 0, i32 6, !dbg !12951
  %bf.load238 = load i32, i32* %mode237, align 4, !dbg !12951
  %bf.lshr239 = lshr i32 %bf.load238, 16, !dbg !12951
  %bf.clear240 = and i32 %bf.lshr239, 255, !dbg !12951
  br label %cond.end241, !dbg !12951

cond.end241:                                      ; preds = %cond.false233, %cond.true229
  %cond242 = phi i32 [ %call232, %cond.true229 ], [ %bf.clear240, %cond.false233 ], !dbg !12951
  %idxprom243 = zext i32 %cond242 to i64, !dbg !12951
  %arrayidx244 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom243, !dbg !12951
  %92 = load i8, i8* %arrayidx244, align 1, !dbg !12951
  %conv245 = zext i8 %92 to i32, !dbg !12951
  br label %cond.end246, !dbg !12951

cond.end246:                                      ; preds = %cond.end241, %cond.end218
  %cond247 = phi i32 [ %cond219, %cond.end218 ], [ %conv245, %cond.end241 ], !dbg !12951
  %idxprom248 = zext i32 %cond247 to i64, !dbg !12951
  %arrayidx249 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom248, !dbg !12951
  %93 = load i8, i8* %arrayidx249, align 1, !dbg !12951
  %conv250 = zext i8 %93 to i32, !dbg !12951
  %cmp251 = icmp eq i32 %conv250, 9, !dbg !12951
  br i1 %cmp251, label %cond.true253, label %cond.false360, !dbg !12951

cond.true253:                                     ; preds = %cond.end246
  %94 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common254 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !12951
  %type255 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common254, i32 0, i32 2, !dbg !12951
  %95 = load %union.tree_node*, %union.tree_node** %type255, align 8, !dbg !12951
  %base256 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !12951
  %96 = bitcast %struct.tree_base* %base256 to i64*, !dbg !12951
  %bf.load257 = load i64, i64* %96, align 8, !dbg !12951
  %bf.clear258 = and i64 %bf.load257, 65535, !dbg !12951
  %bf.cast259 = trunc i64 %bf.clear258 to i32, !dbg !12951
  %cmp260 = icmp eq i32 %bf.cast259, 14, !dbg !12951
  br i1 %cmp260, label %cond.true262, label %cond.false266, !dbg !12951

cond.true262:                                     ; preds = %cond.true253
  %97 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common263 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !12951
  %type264 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common263, i32 0, i32 2, !dbg !12951
  %98 = load %union.tree_node*, %union.tree_node** %type264, align 8, !dbg !12951
  %call265 = call i32 @vector_type_mode(%union.tree_node* %98), !dbg !12951
  br label %cond.end274, !dbg !12951

cond.false266:                                    ; preds = %cond.true253
  %99 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common267 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !12951
  %type268 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common267, i32 0, i32 2, !dbg !12951
  %100 = load %union.tree_node*, %union.tree_node** %type268, align 8, !dbg !12951
  %type269 = bitcast %union.tree_node* %100 to %struct.tree_type*, !dbg !12951
  %mode270 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type269, i32 0, i32 6, !dbg !12951
  %bf.load271 = load i32, i32* %mode270, align 4, !dbg !12951
  %bf.lshr272 = lshr i32 %bf.load271, 16, !dbg !12951
  %bf.clear273 = and i32 %bf.lshr272, 255, !dbg !12951
  br label %cond.end274, !dbg !12951

cond.end274:                                      ; preds = %cond.false266, %cond.true262
  %cond275 = phi i32 [ %call265, %cond.true262 ], [ %bf.clear273, %cond.false266 ], !dbg !12951
  %idxprom276 = zext i32 %cond275 to i64, !dbg !12951
  %arrayidx277 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom276, !dbg !12951
  %101 = load i8, i8* %arrayidx277, align 1, !dbg !12951
  %conv278 = zext i8 %101 to i32, !dbg !12951
  %cmp279 = icmp eq i32 %conv278, 8, !dbg !12951
  br i1 %cmp279, label %cond.true309, label %lor.lhs.false281, !dbg !12951

lor.lhs.false281:                                 ; preds = %cond.end274
  %102 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common282 = bitcast %union.tree_node* %102 to %struct.tree_common*, !dbg !12951
  %type283 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common282, i32 0, i32 2, !dbg !12951
  %103 = load %union.tree_node*, %union.tree_node** %type283, align 8, !dbg !12951
  %base284 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !12951
  %104 = bitcast %struct.tree_base* %base284 to i64*, !dbg !12951
  %bf.load285 = load i64, i64* %104, align 8, !dbg !12951
  %bf.clear286 = and i64 %bf.load285, 65535, !dbg !12951
  %bf.cast287 = trunc i64 %bf.clear286 to i32, !dbg !12951
  %cmp288 = icmp eq i32 %bf.cast287, 14, !dbg !12951
  br i1 %cmp288, label %cond.true290, label %cond.false294, !dbg !12951

cond.true290:                                     ; preds = %lor.lhs.false281
  %105 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common291 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !12951
  %type292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common291, i32 0, i32 2, !dbg !12951
  %106 = load %union.tree_node*, %union.tree_node** %type292, align 8, !dbg !12951
  %call293 = call i32 @vector_type_mode(%union.tree_node* %106), !dbg !12951
  br label %cond.end302, !dbg !12951

cond.false294:                                    ; preds = %lor.lhs.false281
  %107 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common295 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !12951
  %type296 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common295, i32 0, i32 2, !dbg !12951
  %108 = load %union.tree_node*, %union.tree_node** %type296, align 8, !dbg !12951
  %type297 = bitcast %union.tree_node* %108 to %struct.tree_type*, !dbg !12951
  %mode298 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type297, i32 0, i32 6, !dbg !12951
  %bf.load299 = load i32, i32* %mode298, align 4, !dbg !12951
  %bf.lshr300 = lshr i32 %bf.load299, 16, !dbg !12951
  %bf.clear301 = and i32 %bf.lshr300, 255, !dbg !12951
  br label %cond.end302, !dbg !12951

cond.end302:                                      ; preds = %cond.false294, %cond.true290
  %cond303 = phi i32 [ %call293, %cond.true290 ], [ %bf.clear301, %cond.false294 ], !dbg !12951
  %idxprom304 = zext i32 %cond303 to i64, !dbg !12951
  %arrayidx305 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom304, !dbg !12951
  %109 = load i8, i8* %arrayidx305, align 1, !dbg !12951
  %conv306 = zext i8 %109 to i32, !dbg !12951
  %cmp307 = icmp eq i32 %conv306, 9, !dbg !12951
  br i1 %cmp307, label %cond.true309, label %cond.false332, !dbg !12951

cond.true309:                                     ; preds = %cond.end302, %cond.end274
  %110 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common310 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !12951
  %type311 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common310, i32 0, i32 2, !dbg !12951
  %111 = load %union.tree_node*, %union.tree_node** %type311, align 8, !dbg !12951
  %base312 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !12951
  %112 = bitcast %struct.tree_base* %base312 to i64*, !dbg !12951
  %bf.load313 = load i64, i64* %112, align 8, !dbg !12951
  %bf.clear314 = and i64 %bf.load313, 65535, !dbg !12951
  %bf.cast315 = trunc i64 %bf.clear314 to i32, !dbg !12951
  %cmp316 = icmp eq i32 %bf.cast315, 14, !dbg !12951
  br i1 %cmp316, label %cond.true318, label %cond.false322, !dbg !12951

cond.true318:                                     ; preds = %cond.true309
  %113 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common319 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !12951
  %type320 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common319, i32 0, i32 2, !dbg !12951
  %114 = load %union.tree_node*, %union.tree_node** %type320, align 8, !dbg !12951
  %call321 = call i32 @vector_type_mode(%union.tree_node* %114), !dbg !12951
  br label %cond.end330, !dbg !12951

cond.false322:                                    ; preds = %cond.true309
  %115 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common323 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !12951
  %type324 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common323, i32 0, i32 2, !dbg !12951
  %116 = load %union.tree_node*, %union.tree_node** %type324, align 8, !dbg !12951
  %type325 = bitcast %union.tree_node* %116 to %struct.tree_type*, !dbg !12951
  %mode326 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type325, i32 0, i32 6, !dbg !12951
  %bf.load327 = load i32, i32* %mode326, align 4, !dbg !12951
  %bf.lshr328 = lshr i32 %bf.load327, 16, !dbg !12951
  %bf.clear329 = and i32 %bf.lshr328, 255, !dbg !12951
  br label %cond.end330, !dbg !12951

cond.end330:                                      ; preds = %cond.false322, %cond.true318
  %cond331 = phi i32 [ %call321, %cond.true318 ], [ %bf.clear329, %cond.false322 ], !dbg !12951
  br label %cond.end358, !dbg !12951

cond.false332:                                    ; preds = %cond.end302
  %117 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common333 = bitcast %union.tree_node* %117 to %struct.tree_common*, !dbg !12951
  %type334 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common333, i32 0, i32 2, !dbg !12951
  %118 = load %union.tree_node*, %union.tree_node** %type334, align 8, !dbg !12951
  %base335 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !12951
  %119 = bitcast %struct.tree_base* %base335 to i64*, !dbg !12951
  %bf.load336 = load i64, i64* %119, align 8, !dbg !12951
  %bf.clear337 = and i64 %bf.load336, 65535, !dbg !12951
  %bf.cast338 = trunc i64 %bf.clear337 to i32, !dbg !12951
  %cmp339 = icmp eq i32 %bf.cast338, 14, !dbg !12951
  br i1 %cmp339, label %cond.true341, label %cond.false345, !dbg !12951

cond.true341:                                     ; preds = %cond.false332
  %120 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common342 = bitcast %union.tree_node* %120 to %struct.tree_common*, !dbg !12951
  %type343 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common342, i32 0, i32 2, !dbg !12951
  %121 = load %union.tree_node*, %union.tree_node** %type343, align 8, !dbg !12951
  %call344 = call i32 @vector_type_mode(%union.tree_node* %121), !dbg !12951
  br label %cond.end353, !dbg !12951

cond.false345:                                    ; preds = %cond.false332
  %122 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common346 = bitcast %union.tree_node* %122 to %struct.tree_common*, !dbg !12951
  %type347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common346, i32 0, i32 2, !dbg !12951
  %123 = load %union.tree_node*, %union.tree_node** %type347, align 8, !dbg !12951
  %type348 = bitcast %union.tree_node* %123 to %struct.tree_type*, !dbg !12951
  %mode349 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type348, i32 0, i32 6, !dbg !12951
  %bf.load350 = load i32, i32* %mode349, align 4, !dbg !12951
  %bf.lshr351 = lshr i32 %bf.load350, 16, !dbg !12951
  %bf.clear352 = and i32 %bf.lshr351, 255, !dbg !12951
  br label %cond.end353, !dbg !12951

cond.end353:                                      ; preds = %cond.false345, %cond.true341
  %cond354 = phi i32 [ %call344, %cond.true341 ], [ %bf.clear352, %cond.false345 ], !dbg !12951
  %idxprom355 = zext i32 %cond354 to i64, !dbg !12951
  %arrayidx356 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom355, !dbg !12951
  %124 = load i8, i8* %arrayidx356, align 1, !dbg !12951
  %conv357 = zext i8 %124 to i32, !dbg !12951
  br label %cond.end358, !dbg !12951

cond.end358:                                      ; preds = %cond.end353, %cond.end330
  %cond359 = phi i32 [ %cond331, %cond.end330 ], [ %conv357, %cond.end353 ], !dbg !12951
  %sub = sub i32 %cond359, 42, !dbg !12951
  %add = add i32 %sub, 4, !dbg !12951
  br label %cond.end468, !dbg !12951

cond.false360:                                    ; preds = %cond.end246
  %125 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common361 = bitcast %union.tree_node* %125 to %struct.tree_common*, !dbg !12951
  %type362 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common361, i32 0, i32 2, !dbg !12951
  %126 = load %union.tree_node*, %union.tree_node** %type362, align 8, !dbg !12951
  %base363 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !12951
  %127 = bitcast %struct.tree_base* %base363 to i64*, !dbg !12951
  %bf.load364 = load i64, i64* %127, align 8, !dbg !12951
  %bf.clear365 = and i64 %bf.load364, 65535, !dbg !12951
  %bf.cast366 = trunc i64 %bf.clear365 to i32, !dbg !12951
  %cmp367 = icmp eq i32 %bf.cast366, 14, !dbg !12951
  br i1 %cmp367, label %cond.true369, label %cond.false373, !dbg !12951

cond.true369:                                     ; preds = %cond.false360
  %128 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common370 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !12951
  %type371 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common370, i32 0, i32 2, !dbg !12951
  %129 = load %union.tree_node*, %union.tree_node** %type371, align 8, !dbg !12951
  %call372 = call i32 @vector_type_mode(%union.tree_node* %129), !dbg !12951
  br label %cond.end381, !dbg !12951

cond.false373:                                    ; preds = %cond.false360
  %130 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common374 = bitcast %union.tree_node* %130 to %struct.tree_common*, !dbg !12951
  %type375 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common374, i32 0, i32 2, !dbg !12951
  %131 = load %union.tree_node*, %union.tree_node** %type375, align 8, !dbg !12951
  %type376 = bitcast %union.tree_node* %131 to %struct.tree_type*, !dbg !12951
  %mode377 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type376, i32 0, i32 6, !dbg !12951
  %bf.load378 = load i32, i32* %mode377, align 4, !dbg !12951
  %bf.lshr379 = lshr i32 %bf.load378, 16, !dbg !12951
  %bf.clear380 = and i32 %bf.lshr379, 255, !dbg !12951
  br label %cond.end381, !dbg !12951

cond.end381:                                      ; preds = %cond.false373, %cond.true369
  %cond382 = phi i32 [ %call372, %cond.true369 ], [ %bf.clear380, %cond.false373 ], !dbg !12951
  %idxprom383 = zext i32 %cond382 to i64, !dbg !12951
  %arrayidx384 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom383, !dbg !12951
  %132 = load i8, i8* %arrayidx384, align 1, !dbg !12951
  %conv385 = zext i8 %132 to i32, !dbg !12951
  %cmp386 = icmp eq i32 %conv385, 8, !dbg !12951
  br i1 %cmp386, label %cond.true416, label %lor.lhs.false388, !dbg !12951

lor.lhs.false388:                                 ; preds = %cond.end381
  %133 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common389 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !12951
  %type390 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common389, i32 0, i32 2, !dbg !12951
  %134 = load %union.tree_node*, %union.tree_node** %type390, align 8, !dbg !12951
  %base391 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !12951
  %135 = bitcast %struct.tree_base* %base391 to i64*, !dbg !12951
  %bf.load392 = load i64, i64* %135, align 8, !dbg !12951
  %bf.clear393 = and i64 %bf.load392, 65535, !dbg !12951
  %bf.cast394 = trunc i64 %bf.clear393 to i32, !dbg !12951
  %cmp395 = icmp eq i32 %bf.cast394, 14, !dbg !12951
  br i1 %cmp395, label %cond.true397, label %cond.false401, !dbg !12951

cond.true397:                                     ; preds = %lor.lhs.false388
  %136 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common398 = bitcast %union.tree_node* %136 to %struct.tree_common*, !dbg !12951
  %type399 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common398, i32 0, i32 2, !dbg !12951
  %137 = load %union.tree_node*, %union.tree_node** %type399, align 8, !dbg !12951
  %call400 = call i32 @vector_type_mode(%union.tree_node* %137), !dbg !12951
  br label %cond.end409, !dbg !12951

cond.false401:                                    ; preds = %lor.lhs.false388
  %138 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common402 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !12951
  %type403 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common402, i32 0, i32 2, !dbg !12951
  %139 = load %union.tree_node*, %union.tree_node** %type403, align 8, !dbg !12951
  %type404 = bitcast %union.tree_node* %139 to %struct.tree_type*, !dbg !12951
  %mode405 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type404, i32 0, i32 6, !dbg !12951
  %bf.load406 = load i32, i32* %mode405, align 4, !dbg !12951
  %bf.lshr407 = lshr i32 %bf.load406, 16, !dbg !12951
  %bf.clear408 = and i32 %bf.lshr407, 255, !dbg !12951
  br label %cond.end409, !dbg !12951

cond.end409:                                      ; preds = %cond.false401, %cond.true397
  %cond410 = phi i32 [ %call400, %cond.true397 ], [ %bf.clear408, %cond.false401 ], !dbg !12951
  %idxprom411 = zext i32 %cond410 to i64, !dbg !12951
  %arrayidx412 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom411, !dbg !12951
  %140 = load i8, i8* %arrayidx412, align 1, !dbg !12951
  %conv413 = zext i8 %140 to i32, !dbg !12951
  %cmp414 = icmp eq i32 %conv413, 9, !dbg !12951
  br i1 %cmp414, label %cond.true416, label %cond.false439, !dbg !12951

cond.true416:                                     ; preds = %cond.end409, %cond.end381
  %141 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common417 = bitcast %union.tree_node* %141 to %struct.tree_common*, !dbg !12951
  %type418 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common417, i32 0, i32 2, !dbg !12951
  %142 = load %union.tree_node*, %union.tree_node** %type418, align 8, !dbg !12951
  %base419 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !12951
  %143 = bitcast %struct.tree_base* %base419 to i64*, !dbg !12951
  %bf.load420 = load i64, i64* %143, align 8, !dbg !12951
  %bf.clear421 = and i64 %bf.load420, 65535, !dbg !12951
  %bf.cast422 = trunc i64 %bf.clear421 to i32, !dbg !12951
  %cmp423 = icmp eq i32 %bf.cast422, 14, !dbg !12951
  br i1 %cmp423, label %cond.true425, label %cond.false429, !dbg !12951

cond.true425:                                     ; preds = %cond.true416
  %144 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common426 = bitcast %union.tree_node* %144 to %struct.tree_common*, !dbg !12951
  %type427 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common426, i32 0, i32 2, !dbg !12951
  %145 = load %union.tree_node*, %union.tree_node** %type427, align 8, !dbg !12951
  %call428 = call i32 @vector_type_mode(%union.tree_node* %145), !dbg !12951
  br label %cond.end437, !dbg !12951

cond.false429:                                    ; preds = %cond.true416
  %146 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common430 = bitcast %union.tree_node* %146 to %struct.tree_common*, !dbg !12951
  %type431 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common430, i32 0, i32 2, !dbg !12951
  %147 = load %union.tree_node*, %union.tree_node** %type431, align 8, !dbg !12951
  %type432 = bitcast %union.tree_node* %147 to %struct.tree_type*, !dbg !12951
  %mode433 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type432, i32 0, i32 6, !dbg !12951
  %bf.load434 = load i32, i32* %mode433, align 4, !dbg !12951
  %bf.lshr435 = lshr i32 %bf.load434, 16, !dbg !12951
  %bf.clear436 = and i32 %bf.lshr435, 255, !dbg !12951
  br label %cond.end437, !dbg !12951

cond.end437:                                      ; preds = %cond.false429, %cond.true425
  %cond438 = phi i32 [ %call428, %cond.true425 ], [ %bf.clear436, %cond.false429 ], !dbg !12951
  br label %cond.end465, !dbg !12951

cond.false439:                                    ; preds = %cond.end409
  %148 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common440 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !12951
  %type441 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common440, i32 0, i32 2, !dbg !12951
  %149 = load %union.tree_node*, %union.tree_node** %type441, align 8, !dbg !12951
  %base442 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !12951
  %150 = bitcast %struct.tree_base* %base442 to i64*, !dbg !12951
  %bf.load443 = load i64, i64* %150, align 8, !dbg !12951
  %bf.clear444 = and i64 %bf.load443, 65535, !dbg !12951
  %bf.cast445 = trunc i64 %bf.clear444 to i32, !dbg !12951
  %cmp446 = icmp eq i32 %bf.cast445, 14, !dbg !12951
  br i1 %cmp446, label %cond.true448, label %cond.false452, !dbg !12951

cond.true448:                                     ; preds = %cond.false439
  %151 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common449 = bitcast %union.tree_node* %151 to %struct.tree_common*, !dbg !12951
  %type450 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common449, i32 0, i32 2, !dbg !12951
  %152 = load %union.tree_node*, %union.tree_node** %type450, align 8, !dbg !12951
  %call451 = call i32 @vector_type_mode(%union.tree_node* %152), !dbg !12951
  br label %cond.end460, !dbg !12951

cond.false452:                                    ; preds = %cond.false439
  %153 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12951
  %common453 = bitcast %union.tree_node* %153 to %struct.tree_common*, !dbg !12951
  %type454 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common453, i32 0, i32 2, !dbg !12951
  %154 = load %union.tree_node*, %union.tree_node** %type454, align 8, !dbg !12951
  %type455 = bitcast %union.tree_node* %154 to %struct.tree_type*, !dbg !12951
  %mode456 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type455, i32 0, i32 6, !dbg !12951
  %bf.load457 = load i32, i32* %mode456, align 4, !dbg !12951
  %bf.lshr458 = lshr i32 %bf.load457, 16, !dbg !12951
  %bf.clear459 = and i32 %bf.lshr458, 255, !dbg !12951
  br label %cond.end460, !dbg !12951

cond.end460:                                      ; preds = %cond.false452, %cond.true448
  %cond461 = phi i32 [ %call451, %cond.true448 ], [ %bf.clear459, %cond.false452 ], !dbg !12951
  %idxprom462 = zext i32 %cond461 to i64, !dbg !12951
  %arrayidx463 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom462, !dbg !12951
  %155 = load i8, i8* %arrayidx463, align 1, !dbg !12951
  %conv464 = zext i8 %155 to i32, !dbg !12951
  br label %cond.end465, !dbg !12951

cond.end465:                                      ; preds = %cond.end460, %cond.end437
  %cond466 = phi i32 [ %cond438, %cond.end437 ], [ %conv464, %cond.end460 ], !dbg !12951
  %sub467 = sub i32 %cond466, 38, !dbg !12951
  br label %cond.end468, !dbg !12951

cond.end468:                                      ; preds = %cond.end465, %cond.end358
  %cond469 = phi i32 [ %add, %cond.end358 ], [ %sub467, %cond.end465 ], !dbg !12951
  %idxprom470 = zext i32 %cond469 to i64, !dbg !12951
  %arrayidx471 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom470, !dbg !12951
  %156 = load %struct.real_format*, %struct.real_format** %arrayidx471, align 8, !dbg !12951
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %156, i32 0, i32 11, !dbg !12951
  %157 = load i8, i8* %has_nans, align 2, !dbg !12951
  %conv472 = zext i8 %157 to i32, !dbg !12951
  %tobool = icmp ne i32 %conv472, 0, !dbg !12951
  br i1 %tobool, label %land.lhs.true473, label %if.then475, !dbg !12951

land.lhs.true473:                                 ; preds = %cond.end468
  %158 = load i32, i32* @flag_finite_math_only, align 4, !dbg !12951
  %tobool474 = icmp ne i32 %158, 0, !dbg !12951
  br i1 %tobool474, label %if.then475, label %if.end477, !dbg !12954

if.then475:                                       ; preds = %land.lhs.true473, %cond.end468, %cond.end134
  %159 = load i32, i32* %loc.addr, align 4, !dbg !12955
  %160 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12956
  %161 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !12957
  %162 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12958
  %163 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12959
  %call476 = call %union.tree_node* @omit_two_operands_loc(i32 %159, %union.tree_node* %160, %union.tree_node* %161, %union.tree_node* %162, %union.tree_node* %163), !dbg !12960
  store %union.tree_node* %call476, %union.tree_node** %retval, align 8, !dbg !12961
  br label %return, !dbg !12961

if.end477:                                        ; preds = %land.lhs.true473
  %164 = load i32, i32* %loc.addr, align 4, !dbg !12962
  %165 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12962
  %166 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12962
  %167 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12962
  %call478 = call %union.tree_node* @fold_build2_stat_loc(i32 %164, i32 103, %union.tree_node* %165, %union.tree_node* %166, %union.tree_node* %167), !dbg !12962
  store %union.tree_node* %call478, %union.tree_node** %retval, align 8, !dbg !12963
  br label %return, !dbg !12963

if.end479:                                        ; preds = %if.end33
  %168 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common480 = bitcast %union.tree_node* %168 to %struct.tree_common*, !dbg !12964
  %type481 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common480, i32 0, i32 2, !dbg !12964
  %169 = load %union.tree_node*, %union.tree_node** %type481, align 8, !dbg !12964
  %base482 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !12964
  %170 = bitcast %struct.tree_base* %base482 to i64*, !dbg !12964
  %bf.load483 = load i64, i64* %170, align 8, !dbg !12964
  %bf.clear484 = and i64 %bf.load483, 65535, !dbg !12964
  %bf.cast485 = trunc i64 %bf.clear484 to i32, !dbg !12964
  %cmp486 = icmp eq i32 %bf.cast485, 14, !dbg !12964
  br i1 %cmp486, label %cond.true488, label %cond.false492, !dbg !12964

cond.true488:                                     ; preds = %if.end479
  %171 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common489 = bitcast %union.tree_node* %171 to %struct.tree_common*, !dbg !12964
  %type490 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common489, i32 0, i32 2, !dbg !12964
  %172 = load %union.tree_node*, %union.tree_node** %type490, align 8, !dbg !12964
  %call491 = call i32 @vector_type_mode(%union.tree_node* %172), !dbg !12964
  br label %cond.end500, !dbg !12964

cond.false492:                                    ; preds = %if.end479
  %173 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common493 = bitcast %union.tree_node* %173 to %struct.tree_common*, !dbg !12964
  %type494 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common493, i32 0, i32 2, !dbg !12964
  %174 = load %union.tree_node*, %union.tree_node** %type494, align 8, !dbg !12964
  %type495 = bitcast %union.tree_node* %174 to %struct.tree_type*, !dbg !12964
  %mode496 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type495, i32 0, i32 6, !dbg !12964
  %bf.load497 = load i32, i32* %mode496, align 4, !dbg !12964
  %bf.lshr498 = lshr i32 %bf.load497, 16, !dbg !12964
  %bf.clear499 = and i32 %bf.lshr498, 255, !dbg !12964
  br label %cond.end500, !dbg !12964

cond.end500:                                      ; preds = %cond.false492, %cond.true488
  %cond501 = phi i32 [ %call491, %cond.true488 ], [ %bf.clear499, %cond.false492 ], !dbg !12964
  %idxprom502 = zext i32 %cond501 to i64, !dbg !12964
  %arrayidx503 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom502, !dbg !12964
  %175 = load i8, i8* %arrayidx503, align 1, !dbg !12964
  %conv504 = zext i8 %175 to i32, !dbg !12964
  %cmp505 = icmp eq i32 %conv504, 8, !dbg !12964
  br i1 %cmp505, label %land.lhs.true591, label %lor.lhs.false507, !dbg !12964

lor.lhs.false507:                                 ; preds = %cond.end500
  %176 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common508 = bitcast %union.tree_node* %176 to %struct.tree_common*, !dbg !12964
  %type509 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common508, i32 0, i32 2, !dbg !12964
  %177 = load %union.tree_node*, %union.tree_node** %type509, align 8, !dbg !12964
  %base510 = bitcast %union.tree_node* %177 to %struct.tree_base*, !dbg !12964
  %178 = bitcast %struct.tree_base* %base510 to i64*, !dbg !12964
  %bf.load511 = load i64, i64* %178, align 8, !dbg !12964
  %bf.clear512 = and i64 %bf.load511, 65535, !dbg !12964
  %bf.cast513 = trunc i64 %bf.clear512 to i32, !dbg !12964
  %cmp514 = icmp eq i32 %bf.cast513, 14, !dbg !12964
  br i1 %cmp514, label %cond.true516, label %cond.false520, !dbg !12964

cond.true516:                                     ; preds = %lor.lhs.false507
  %179 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common517 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !12964
  %type518 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common517, i32 0, i32 2, !dbg !12964
  %180 = load %union.tree_node*, %union.tree_node** %type518, align 8, !dbg !12964
  %call519 = call i32 @vector_type_mode(%union.tree_node* %180), !dbg !12964
  br label %cond.end528, !dbg !12964

cond.false520:                                    ; preds = %lor.lhs.false507
  %181 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common521 = bitcast %union.tree_node* %181 to %struct.tree_common*, !dbg !12964
  %type522 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common521, i32 0, i32 2, !dbg !12964
  %182 = load %union.tree_node*, %union.tree_node** %type522, align 8, !dbg !12964
  %type523 = bitcast %union.tree_node* %182 to %struct.tree_type*, !dbg !12964
  %mode524 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type523, i32 0, i32 6, !dbg !12964
  %bf.load525 = load i32, i32* %mode524, align 4, !dbg !12964
  %bf.lshr526 = lshr i32 %bf.load525, 16, !dbg !12964
  %bf.clear527 = and i32 %bf.lshr526, 255, !dbg !12964
  br label %cond.end528, !dbg !12964

cond.end528:                                      ; preds = %cond.false520, %cond.true516
  %cond529 = phi i32 [ %call519, %cond.true516 ], [ %bf.clear527, %cond.false520 ], !dbg !12964
  %idxprom530 = zext i32 %cond529 to i64, !dbg !12964
  %arrayidx531 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom530, !dbg !12964
  %183 = load i8, i8* %arrayidx531, align 1, !dbg !12964
  %conv532 = zext i8 %183 to i32, !dbg !12964
  %cmp533 = icmp eq i32 %conv532, 9, !dbg !12964
  br i1 %cmp533, label %land.lhs.true591, label %lor.lhs.false535, !dbg !12964

lor.lhs.false535:                                 ; preds = %cond.end528
  %184 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common536 = bitcast %union.tree_node* %184 to %struct.tree_common*, !dbg !12964
  %type537 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common536, i32 0, i32 2, !dbg !12964
  %185 = load %union.tree_node*, %union.tree_node** %type537, align 8, !dbg !12964
  %base538 = bitcast %union.tree_node* %185 to %struct.tree_base*, !dbg !12964
  %186 = bitcast %struct.tree_base* %base538 to i64*, !dbg !12964
  %bf.load539 = load i64, i64* %186, align 8, !dbg !12964
  %bf.clear540 = and i64 %bf.load539, 65535, !dbg !12964
  %bf.cast541 = trunc i64 %bf.clear540 to i32, !dbg !12964
  %cmp542 = icmp eq i32 %bf.cast541, 14, !dbg !12964
  br i1 %cmp542, label %cond.true544, label %cond.false548, !dbg !12964

cond.true544:                                     ; preds = %lor.lhs.false535
  %187 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common545 = bitcast %union.tree_node* %187 to %struct.tree_common*, !dbg !12964
  %type546 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common545, i32 0, i32 2, !dbg !12964
  %188 = load %union.tree_node*, %union.tree_node** %type546, align 8, !dbg !12964
  %call547 = call i32 @vector_type_mode(%union.tree_node* %188), !dbg !12964
  br label %cond.end556, !dbg !12964

cond.false548:                                    ; preds = %lor.lhs.false535
  %189 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common549 = bitcast %union.tree_node* %189 to %struct.tree_common*, !dbg !12964
  %type550 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common549, i32 0, i32 2, !dbg !12964
  %190 = load %union.tree_node*, %union.tree_node** %type550, align 8, !dbg !12964
  %type551 = bitcast %union.tree_node* %190 to %struct.tree_type*, !dbg !12964
  %mode552 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type551, i32 0, i32 6, !dbg !12964
  %bf.load553 = load i32, i32* %mode552, align 4, !dbg !12964
  %bf.lshr554 = lshr i32 %bf.load553, 16, !dbg !12964
  %bf.clear555 = and i32 %bf.lshr554, 255, !dbg !12964
  br label %cond.end556, !dbg !12964

cond.end556:                                      ; preds = %cond.false548, %cond.true544
  %cond557 = phi i32 [ %call547, %cond.true544 ], [ %bf.clear555, %cond.false548 ], !dbg !12964
  %idxprom558 = zext i32 %cond557 to i64, !dbg !12964
  %arrayidx559 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom558, !dbg !12964
  %191 = load i8, i8* %arrayidx559, align 1, !dbg !12964
  %conv560 = zext i8 %191 to i32, !dbg !12964
  %cmp561 = icmp eq i32 %conv560, 11, !dbg !12964
  br i1 %cmp561, label %land.lhs.true591, label %lor.lhs.false563, !dbg !12964

lor.lhs.false563:                                 ; preds = %cond.end556
  %192 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common564 = bitcast %union.tree_node* %192 to %struct.tree_common*, !dbg !12964
  %type565 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common564, i32 0, i32 2, !dbg !12964
  %193 = load %union.tree_node*, %union.tree_node** %type565, align 8, !dbg !12964
  %base566 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !12964
  %194 = bitcast %struct.tree_base* %base566 to i64*, !dbg !12964
  %bf.load567 = load i64, i64* %194, align 8, !dbg !12964
  %bf.clear568 = and i64 %bf.load567, 65535, !dbg !12964
  %bf.cast569 = trunc i64 %bf.clear568 to i32, !dbg !12964
  %cmp570 = icmp eq i32 %bf.cast569, 14, !dbg !12964
  br i1 %cmp570, label %cond.true572, label %cond.false576, !dbg !12964

cond.true572:                                     ; preds = %lor.lhs.false563
  %195 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common573 = bitcast %union.tree_node* %195 to %struct.tree_common*, !dbg !12964
  %type574 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common573, i32 0, i32 2, !dbg !12964
  %196 = load %union.tree_node*, %union.tree_node** %type574, align 8, !dbg !12964
  %call575 = call i32 @vector_type_mode(%union.tree_node* %196), !dbg !12964
  br label %cond.end584, !dbg !12964

cond.false576:                                    ; preds = %lor.lhs.false563
  %197 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common577 = bitcast %union.tree_node* %197 to %struct.tree_common*, !dbg !12964
  %type578 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common577, i32 0, i32 2, !dbg !12964
  %198 = load %union.tree_node*, %union.tree_node** %type578, align 8, !dbg !12964
  %type579 = bitcast %union.tree_node* %198 to %struct.tree_type*, !dbg !12964
  %mode580 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type579, i32 0, i32 6, !dbg !12964
  %bf.load581 = load i32, i32* %mode580, align 4, !dbg !12964
  %bf.lshr582 = lshr i32 %bf.load581, 16, !dbg !12964
  %bf.clear583 = and i32 %bf.lshr582, 255, !dbg !12964
  br label %cond.end584, !dbg !12964

cond.end584:                                      ; preds = %cond.false576, %cond.true572
  %cond585 = phi i32 [ %call575, %cond.true572 ], [ %bf.clear583, %cond.false576 ], !dbg !12964
  %idxprom586 = zext i32 %cond585 to i64, !dbg !12964
  %arrayidx587 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom586, !dbg !12964
  %199 = load i8, i8* %arrayidx587, align 1, !dbg !12964
  %conv588 = zext i8 %199 to i32, !dbg !12964
  %cmp589 = icmp eq i32 %conv588, 17, !dbg !12964
  br i1 %cmp589, label %land.lhs.true591, label %cond.false930, !dbg !12964

land.lhs.true591:                                 ; preds = %cond.end584, %cond.end556, %cond.end528, %cond.end500
  %200 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common592 = bitcast %union.tree_node* %200 to %struct.tree_common*, !dbg !12964
  %type593 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common592, i32 0, i32 2, !dbg !12964
  %201 = load %union.tree_node*, %union.tree_node** %type593, align 8, !dbg !12964
  %base594 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !12964
  %202 = bitcast %struct.tree_base* %base594 to i64*, !dbg !12964
  %bf.load595 = load i64, i64* %202, align 8, !dbg !12964
  %bf.clear596 = and i64 %bf.load595, 65535, !dbg !12964
  %bf.cast597 = trunc i64 %bf.clear596 to i32, !dbg !12964
  %cmp598 = icmp eq i32 %bf.cast597, 14, !dbg !12964
  br i1 %cmp598, label %cond.true600, label %cond.false604, !dbg !12964

cond.true600:                                     ; preds = %land.lhs.true591
  %203 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common601 = bitcast %union.tree_node* %203 to %struct.tree_common*, !dbg !12964
  %type602 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common601, i32 0, i32 2, !dbg !12964
  %204 = load %union.tree_node*, %union.tree_node** %type602, align 8, !dbg !12964
  %call603 = call i32 @vector_type_mode(%union.tree_node* %204), !dbg !12964
  br label %cond.end612, !dbg !12964

cond.false604:                                    ; preds = %land.lhs.true591
  %205 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common605 = bitcast %union.tree_node* %205 to %struct.tree_common*, !dbg !12964
  %type606 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common605, i32 0, i32 2, !dbg !12964
  %206 = load %union.tree_node*, %union.tree_node** %type606, align 8, !dbg !12964
  %type607 = bitcast %union.tree_node* %206 to %struct.tree_type*, !dbg !12964
  %mode608 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type607, i32 0, i32 6, !dbg !12964
  %bf.load609 = load i32, i32* %mode608, align 4, !dbg !12964
  %bf.lshr610 = lshr i32 %bf.load609, 16, !dbg !12964
  %bf.clear611 = and i32 %bf.lshr610, 255, !dbg !12964
  br label %cond.end612, !dbg !12964

cond.end612:                                      ; preds = %cond.false604, %cond.true600
  %cond613 = phi i32 [ %call603, %cond.true600 ], [ %bf.clear611, %cond.false604 ], !dbg !12964
  %idxprom614 = zext i32 %cond613 to i64, !dbg !12964
  %arrayidx615 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom614, !dbg !12964
  %207 = load i8, i8* %arrayidx615, align 1, !dbg !12964
  %conv616 = zext i8 %207 to i32, !dbg !12964
  %cmp617 = icmp eq i32 %conv616, 8, !dbg !12964
  br i1 %cmp617, label %cond.true647, label %lor.lhs.false619, !dbg !12964

lor.lhs.false619:                                 ; preds = %cond.end612
  %208 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common620 = bitcast %union.tree_node* %208 to %struct.tree_common*, !dbg !12964
  %type621 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common620, i32 0, i32 2, !dbg !12964
  %209 = load %union.tree_node*, %union.tree_node** %type621, align 8, !dbg !12964
  %base622 = bitcast %union.tree_node* %209 to %struct.tree_base*, !dbg !12964
  %210 = bitcast %struct.tree_base* %base622 to i64*, !dbg !12964
  %bf.load623 = load i64, i64* %210, align 8, !dbg !12964
  %bf.clear624 = and i64 %bf.load623, 65535, !dbg !12964
  %bf.cast625 = trunc i64 %bf.clear624 to i32, !dbg !12964
  %cmp626 = icmp eq i32 %bf.cast625, 14, !dbg !12964
  br i1 %cmp626, label %cond.true628, label %cond.false632, !dbg !12964

cond.true628:                                     ; preds = %lor.lhs.false619
  %211 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common629 = bitcast %union.tree_node* %211 to %struct.tree_common*, !dbg !12964
  %type630 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common629, i32 0, i32 2, !dbg !12964
  %212 = load %union.tree_node*, %union.tree_node** %type630, align 8, !dbg !12964
  %call631 = call i32 @vector_type_mode(%union.tree_node* %212), !dbg !12964
  br label %cond.end640, !dbg !12964

cond.false632:                                    ; preds = %lor.lhs.false619
  %213 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common633 = bitcast %union.tree_node* %213 to %struct.tree_common*, !dbg !12964
  %type634 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common633, i32 0, i32 2, !dbg !12964
  %214 = load %union.tree_node*, %union.tree_node** %type634, align 8, !dbg !12964
  %type635 = bitcast %union.tree_node* %214 to %struct.tree_type*, !dbg !12964
  %mode636 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type635, i32 0, i32 6, !dbg !12964
  %bf.load637 = load i32, i32* %mode636, align 4, !dbg !12964
  %bf.lshr638 = lshr i32 %bf.load637, 16, !dbg !12964
  %bf.clear639 = and i32 %bf.lshr638, 255, !dbg !12964
  br label %cond.end640, !dbg !12964

cond.end640:                                      ; preds = %cond.false632, %cond.true628
  %cond641 = phi i32 [ %call631, %cond.true628 ], [ %bf.clear639, %cond.false632 ], !dbg !12964
  %idxprom642 = zext i32 %cond641 to i64, !dbg !12964
  %arrayidx643 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom642, !dbg !12964
  %215 = load i8, i8* %arrayidx643, align 1, !dbg !12964
  %conv644 = zext i8 %215 to i32, !dbg !12964
  %cmp645 = icmp eq i32 %conv644, 9, !dbg !12964
  br i1 %cmp645, label %cond.true647, label %cond.false670, !dbg !12964

cond.true647:                                     ; preds = %cond.end640, %cond.end612
  %216 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common648 = bitcast %union.tree_node* %216 to %struct.tree_common*, !dbg !12964
  %type649 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common648, i32 0, i32 2, !dbg !12964
  %217 = load %union.tree_node*, %union.tree_node** %type649, align 8, !dbg !12964
  %base650 = bitcast %union.tree_node* %217 to %struct.tree_base*, !dbg !12964
  %218 = bitcast %struct.tree_base* %base650 to i64*, !dbg !12964
  %bf.load651 = load i64, i64* %218, align 8, !dbg !12964
  %bf.clear652 = and i64 %bf.load651, 65535, !dbg !12964
  %bf.cast653 = trunc i64 %bf.clear652 to i32, !dbg !12964
  %cmp654 = icmp eq i32 %bf.cast653, 14, !dbg !12964
  br i1 %cmp654, label %cond.true656, label %cond.false660, !dbg !12964

cond.true656:                                     ; preds = %cond.true647
  %219 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common657 = bitcast %union.tree_node* %219 to %struct.tree_common*, !dbg !12964
  %type658 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common657, i32 0, i32 2, !dbg !12964
  %220 = load %union.tree_node*, %union.tree_node** %type658, align 8, !dbg !12964
  %call659 = call i32 @vector_type_mode(%union.tree_node* %220), !dbg !12964
  br label %cond.end668, !dbg !12964

cond.false660:                                    ; preds = %cond.true647
  %221 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common661 = bitcast %union.tree_node* %221 to %struct.tree_common*, !dbg !12964
  %type662 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common661, i32 0, i32 2, !dbg !12964
  %222 = load %union.tree_node*, %union.tree_node** %type662, align 8, !dbg !12964
  %type663 = bitcast %union.tree_node* %222 to %struct.tree_type*, !dbg !12964
  %mode664 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type663, i32 0, i32 6, !dbg !12964
  %bf.load665 = load i32, i32* %mode664, align 4, !dbg !12964
  %bf.lshr666 = lshr i32 %bf.load665, 16, !dbg !12964
  %bf.clear667 = and i32 %bf.lshr666, 255, !dbg !12964
  br label %cond.end668, !dbg !12964

cond.end668:                                      ; preds = %cond.false660, %cond.true656
  %cond669 = phi i32 [ %call659, %cond.true656 ], [ %bf.clear667, %cond.false660 ], !dbg !12964
  br label %cond.end696, !dbg !12964

cond.false670:                                    ; preds = %cond.end640
  %223 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common671 = bitcast %union.tree_node* %223 to %struct.tree_common*, !dbg !12964
  %type672 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common671, i32 0, i32 2, !dbg !12964
  %224 = load %union.tree_node*, %union.tree_node** %type672, align 8, !dbg !12964
  %base673 = bitcast %union.tree_node* %224 to %struct.tree_base*, !dbg !12964
  %225 = bitcast %struct.tree_base* %base673 to i64*, !dbg !12964
  %bf.load674 = load i64, i64* %225, align 8, !dbg !12964
  %bf.clear675 = and i64 %bf.load674, 65535, !dbg !12964
  %bf.cast676 = trunc i64 %bf.clear675 to i32, !dbg !12964
  %cmp677 = icmp eq i32 %bf.cast676, 14, !dbg !12964
  br i1 %cmp677, label %cond.true679, label %cond.false683, !dbg !12964

cond.true679:                                     ; preds = %cond.false670
  %226 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common680 = bitcast %union.tree_node* %226 to %struct.tree_common*, !dbg !12964
  %type681 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common680, i32 0, i32 2, !dbg !12964
  %227 = load %union.tree_node*, %union.tree_node** %type681, align 8, !dbg !12964
  %call682 = call i32 @vector_type_mode(%union.tree_node* %227), !dbg !12964
  br label %cond.end691, !dbg !12964

cond.false683:                                    ; preds = %cond.false670
  %228 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common684 = bitcast %union.tree_node* %228 to %struct.tree_common*, !dbg !12964
  %type685 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common684, i32 0, i32 2, !dbg !12964
  %229 = load %union.tree_node*, %union.tree_node** %type685, align 8, !dbg !12964
  %type686 = bitcast %union.tree_node* %229 to %struct.tree_type*, !dbg !12964
  %mode687 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type686, i32 0, i32 6, !dbg !12964
  %bf.load688 = load i32, i32* %mode687, align 4, !dbg !12964
  %bf.lshr689 = lshr i32 %bf.load688, 16, !dbg !12964
  %bf.clear690 = and i32 %bf.lshr689, 255, !dbg !12964
  br label %cond.end691, !dbg !12964

cond.end691:                                      ; preds = %cond.false683, %cond.true679
  %cond692 = phi i32 [ %call682, %cond.true679 ], [ %bf.clear690, %cond.false683 ], !dbg !12964
  %idxprom693 = zext i32 %cond692 to i64, !dbg !12964
  %arrayidx694 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom693, !dbg !12964
  %230 = load i8, i8* %arrayidx694, align 1, !dbg !12964
  %conv695 = zext i8 %230 to i32, !dbg !12964
  br label %cond.end696, !dbg !12964

cond.end696:                                      ; preds = %cond.end691, %cond.end668
  %cond697 = phi i32 [ %cond669, %cond.end668 ], [ %conv695, %cond.end691 ], !dbg !12964
  %idxprom698 = zext i32 %cond697 to i64, !dbg !12964
  %arrayidx699 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom698, !dbg !12964
  %231 = load i8, i8* %arrayidx699, align 1, !dbg !12964
  %conv700 = zext i8 %231 to i32, !dbg !12964
  %cmp701 = icmp eq i32 %conv700, 9, !dbg !12964
  br i1 %cmp701, label %cond.true703, label %cond.false812, !dbg !12964

cond.true703:                                     ; preds = %cond.end696
  %232 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common704 = bitcast %union.tree_node* %232 to %struct.tree_common*, !dbg !12964
  %type705 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common704, i32 0, i32 2, !dbg !12964
  %233 = load %union.tree_node*, %union.tree_node** %type705, align 8, !dbg !12964
  %base706 = bitcast %union.tree_node* %233 to %struct.tree_base*, !dbg !12964
  %234 = bitcast %struct.tree_base* %base706 to i64*, !dbg !12964
  %bf.load707 = load i64, i64* %234, align 8, !dbg !12964
  %bf.clear708 = and i64 %bf.load707, 65535, !dbg !12964
  %bf.cast709 = trunc i64 %bf.clear708 to i32, !dbg !12964
  %cmp710 = icmp eq i32 %bf.cast709, 14, !dbg !12964
  br i1 %cmp710, label %cond.true712, label %cond.false716, !dbg !12964

cond.true712:                                     ; preds = %cond.true703
  %235 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common713 = bitcast %union.tree_node* %235 to %struct.tree_common*, !dbg !12964
  %type714 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common713, i32 0, i32 2, !dbg !12964
  %236 = load %union.tree_node*, %union.tree_node** %type714, align 8, !dbg !12964
  %call715 = call i32 @vector_type_mode(%union.tree_node* %236), !dbg !12964
  br label %cond.end724, !dbg !12964

cond.false716:                                    ; preds = %cond.true703
  %237 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common717 = bitcast %union.tree_node* %237 to %struct.tree_common*, !dbg !12964
  %type718 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common717, i32 0, i32 2, !dbg !12964
  %238 = load %union.tree_node*, %union.tree_node** %type718, align 8, !dbg !12964
  %type719 = bitcast %union.tree_node* %238 to %struct.tree_type*, !dbg !12964
  %mode720 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type719, i32 0, i32 6, !dbg !12964
  %bf.load721 = load i32, i32* %mode720, align 4, !dbg !12964
  %bf.lshr722 = lshr i32 %bf.load721, 16, !dbg !12964
  %bf.clear723 = and i32 %bf.lshr722, 255, !dbg !12964
  br label %cond.end724, !dbg !12964

cond.end724:                                      ; preds = %cond.false716, %cond.true712
  %cond725 = phi i32 [ %call715, %cond.true712 ], [ %bf.clear723, %cond.false716 ], !dbg !12964
  %idxprom726 = zext i32 %cond725 to i64, !dbg !12964
  %arrayidx727 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom726, !dbg !12964
  %239 = load i8, i8* %arrayidx727, align 1, !dbg !12964
  %conv728 = zext i8 %239 to i32, !dbg !12964
  %cmp729 = icmp eq i32 %conv728, 8, !dbg !12964
  br i1 %cmp729, label %cond.true759, label %lor.lhs.false731, !dbg !12964

lor.lhs.false731:                                 ; preds = %cond.end724
  %240 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common732 = bitcast %union.tree_node* %240 to %struct.tree_common*, !dbg !12964
  %type733 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common732, i32 0, i32 2, !dbg !12964
  %241 = load %union.tree_node*, %union.tree_node** %type733, align 8, !dbg !12964
  %base734 = bitcast %union.tree_node* %241 to %struct.tree_base*, !dbg !12964
  %242 = bitcast %struct.tree_base* %base734 to i64*, !dbg !12964
  %bf.load735 = load i64, i64* %242, align 8, !dbg !12964
  %bf.clear736 = and i64 %bf.load735, 65535, !dbg !12964
  %bf.cast737 = trunc i64 %bf.clear736 to i32, !dbg !12964
  %cmp738 = icmp eq i32 %bf.cast737, 14, !dbg !12964
  br i1 %cmp738, label %cond.true740, label %cond.false744, !dbg !12964

cond.true740:                                     ; preds = %lor.lhs.false731
  %243 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common741 = bitcast %union.tree_node* %243 to %struct.tree_common*, !dbg !12964
  %type742 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common741, i32 0, i32 2, !dbg !12964
  %244 = load %union.tree_node*, %union.tree_node** %type742, align 8, !dbg !12964
  %call743 = call i32 @vector_type_mode(%union.tree_node* %244), !dbg !12964
  br label %cond.end752, !dbg !12964

cond.false744:                                    ; preds = %lor.lhs.false731
  %245 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common745 = bitcast %union.tree_node* %245 to %struct.tree_common*, !dbg !12964
  %type746 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common745, i32 0, i32 2, !dbg !12964
  %246 = load %union.tree_node*, %union.tree_node** %type746, align 8, !dbg !12964
  %type747 = bitcast %union.tree_node* %246 to %struct.tree_type*, !dbg !12964
  %mode748 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type747, i32 0, i32 6, !dbg !12964
  %bf.load749 = load i32, i32* %mode748, align 4, !dbg !12964
  %bf.lshr750 = lshr i32 %bf.load749, 16, !dbg !12964
  %bf.clear751 = and i32 %bf.lshr750, 255, !dbg !12964
  br label %cond.end752, !dbg !12964

cond.end752:                                      ; preds = %cond.false744, %cond.true740
  %cond753 = phi i32 [ %call743, %cond.true740 ], [ %bf.clear751, %cond.false744 ], !dbg !12964
  %idxprom754 = zext i32 %cond753 to i64, !dbg !12964
  %arrayidx755 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom754, !dbg !12964
  %247 = load i8, i8* %arrayidx755, align 1, !dbg !12964
  %conv756 = zext i8 %247 to i32, !dbg !12964
  %cmp757 = icmp eq i32 %conv756, 9, !dbg !12964
  br i1 %cmp757, label %cond.true759, label %cond.false782, !dbg !12964

cond.true759:                                     ; preds = %cond.end752, %cond.end724
  %248 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common760 = bitcast %union.tree_node* %248 to %struct.tree_common*, !dbg !12964
  %type761 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common760, i32 0, i32 2, !dbg !12964
  %249 = load %union.tree_node*, %union.tree_node** %type761, align 8, !dbg !12964
  %base762 = bitcast %union.tree_node* %249 to %struct.tree_base*, !dbg !12964
  %250 = bitcast %struct.tree_base* %base762 to i64*, !dbg !12964
  %bf.load763 = load i64, i64* %250, align 8, !dbg !12964
  %bf.clear764 = and i64 %bf.load763, 65535, !dbg !12964
  %bf.cast765 = trunc i64 %bf.clear764 to i32, !dbg !12964
  %cmp766 = icmp eq i32 %bf.cast765, 14, !dbg !12964
  br i1 %cmp766, label %cond.true768, label %cond.false772, !dbg !12964

cond.true768:                                     ; preds = %cond.true759
  %251 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common769 = bitcast %union.tree_node* %251 to %struct.tree_common*, !dbg !12964
  %type770 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common769, i32 0, i32 2, !dbg !12964
  %252 = load %union.tree_node*, %union.tree_node** %type770, align 8, !dbg !12964
  %call771 = call i32 @vector_type_mode(%union.tree_node* %252), !dbg !12964
  br label %cond.end780, !dbg !12964

cond.false772:                                    ; preds = %cond.true759
  %253 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common773 = bitcast %union.tree_node* %253 to %struct.tree_common*, !dbg !12964
  %type774 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common773, i32 0, i32 2, !dbg !12964
  %254 = load %union.tree_node*, %union.tree_node** %type774, align 8, !dbg !12964
  %type775 = bitcast %union.tree_node* %254 to %struct.tree_type*, !dbg !12964
  %mode776 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type775, i32 0, i32 6, !dbg !12964
  %bf.load777 = load i32, i32* %mode776, align 4, !dbg !12964
  %bf.lshr778 = lshr i32 %bf.load777, 16, !dbg !12964
  %bf.clear779 = and i32 %bf.lshr778, 255, !dbg !12964
  br label %cond.end780, !dbg !12964

cond.end780:                                      ; preds = %cond.false772, %cond.true768
  %cond781 = phi i32 [ %call771, %cond.true768 ], [ %bf.clear779, %cond.false772 ], !dbg !12964
  br label %cond.end808, !dbg !12964

cond.false782:                                    ; preds = %cond.end752
  %255 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common783 = bitcast %union.tree_node* %255 to %struct.tree_common*, !dbg !12964
  %type784 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common783, i32 0, i32 2, !dbg !12964
  %256 = load %union.tree_node*, %union.tree_node** %type784, align 8, !dbg !12964
  %base785 = bitcast %union.tree_node* %256 to %struct.tree_base*, !dbg !12964
  %257 = bitcast %struct.tree_base* %base785 to i64*, !dbg !12964
  %bf.load786 = load i64, i64* %257, align 8, !dbg !12964
  %bf.clear787 = and i64 %bf.load786, 65535, !dbg !12964
  %bf.cast788 = trunc i64 %bf.clear787 to i32, !dbg !12964
  %cmp789 = icmp eq i32 %bf.cast788, 14, !dbg !12964
  br i1 %cmp789, label %cond.true791, label %cond.false795, !dbg !12964

cond.true791:                                     ; preds = %cond.false782
  %258 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common792 = bitcast %union.tree_node* %258 to %struct.tree_common*, !dbg !12964
  %type793 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common792, i32 0, i32 2, !dbg !12964
  %259 = load %union.tree_node*, %union.tree_node** %type793, align 8, !dbg !12964
  %call794 = call i32 @vector_type_mode(%union.tree_node* %259), !dbg !12964
  br label %cond.end803, !dbg !12964

cond.false795:                                    ; preds = %cond.false782
  %260 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common796 = bitcast %union.tree_node* %260 to %struct.tree_common*, !dbg !12964
  %type797 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common796, i32 0, i32 2, !dbg !12964
  %261 = load %union.tree_node*, %union.tree_node** %type797, align 8, !dbg !12964
  %type798 = bitcast %union.tree_node* %261 to %struct.tree_type*, !dbg !12964
  %mode799 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type798, i32 0, i32 6, !dbg !12964
  %bf.load800 = load i32, i32* %mode799, align 4, !dbg !12964
  %bf.lshr801 = lshr i32 %bf.load800, 16, !dbg !12964
  %bf.clear802 = and i32 %bf.lshr801, 255, !dbg !12964
  br label %cond.end803, !dbg !12964

cond.end803:                                      ; preds = %cond.false795, %cond.true791
  %cond804 = phi i32 [ %call794, %cond.true791 ], [ %bf.clear802, %cond.false795 ], !dbg !12964
  %idxprom805 = zext i32 %cond804 to i64, !dbg !12964
  %arrayidx806 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom805, !dbg !12964
  %262 = load i8, i8* %arrayidx806, align 1, !dbg !12964
  %conv807 = zext i8 %262 to i32, !dbg !12964
  br label %cond.end808, !dbg !12964

cond.end808:                                      ; preds = %cond.end803, %cond.end780
  %cond809 = phi i32 [ %cond781, %cond.end780 ], [ %conv807, %cond.end803 ], !dbg !12964
  %sub810 = sub i32 %cond809, 42, !dbg !12964
  %add811 = add i32 %sub810, 4, !dbg !12964
  br label %cond.end920, !dbg !12964

cond.false812:                                    ; preds = %cond.end696
  %263 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common813 = bitcast %union.tree_node* %263 to %struct.tree_common*, !dbg !12964
  %type814 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common813, i32 0, i32 2, !dbg !12964
  %264 = load %union.tree_node*, %union.tree_node** %type814, align 8, !dbg !12964
  %base815 = bitcast %union.tree_node* %264 to %struct.tree_base*, !dbg !12964
  %265 = bitcast %struct.tree_base* %base815 to i64*, !dbg !12964
  %bf.load816 = load i64, i64* %265, align 8, !dbg !12964
  %bf.clear817 = and i64 %bf.load816, 65535, !dbg !12964
  %bf.cast818 = trunc i64 %bf.clear817 to i32, !dbg !12964
  %cmp819 = icmp eq i32 %bf.cast818, 14, !dbg !12964
  br i1 %cmp819, label %cond.true821, label %cond.false825, !dbg !12964

cond.true821:                                     ; preds = %cond.false812
  %266 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common822 = bitcast %union.tree_node* %266 to %struct.tree_common*, !dbg !12964
  %type823 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common822, i32 0, i32 2, !dbg !12964
  %267 = load %union.tree_node*, %union.tree_node** %type823, align 8, !dbg !12964
  %call824 = call i32 @vector_type_mode(%union.tree_node* %267), !dbg !12964
  br label %cond.end833, !dbg !12964

cond.false825:                                    ; preds = %cond.false812
  %268 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common826 = bitcast %union.tree_node* %268 to %struct.tree_common*, !dbg !12964
  %type827 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common826, i32 0, i32 2, !dbg !12964
  %269 = load %union.tree_node*, %union.tree_node** %type827, align 8, !dbg !12964
  %type828 = bitcast %union.tree_node* %269 to %struct.tree_type*, !dbg !12964
  %mode829 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type828, i32 0, i32 6, !dbg !12964
  %bf.load830 = load i32, i32* %mode829, align 4, !dbg !12964
  %bf.lshr831 = lshr i32 %bf.load830, 16, !dbg !12964
  %bf.clear832 = and i32 %bf.lshr831, 255, !dbg !12964
  br label %cond.end833, !dbg !12964

cond.end833:                                      ; preds = %cond.false825, %cond.true821
  %cond834 = phi i32 [ %call824, %cond.true821 ], [ %bf.clear832, %cond.false825 ], !dbg !12964
  %idxprom835 = zext i32 %cond834 to i64, !dbg !12964
  %arrayidx836 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom835, !dbg !12964
  %270 = load i8, i8* %arrayidx836, align 1, !dbg !12964
  %conv837 = zext i8 %270 to i32, !dbg !12964
  %cmp838 = icmp eq i32 %conv837, 8, !dbg !12964
  br i1 %cmp838, label %cond.true868, label %lor.lhs.false840, !dbg !12964

lor.lhs.false840:                                 ; preds = %cond.end833
  %271 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common841 = bitcast %union.tree_node* %271 to %struct.tree_common*, !dbg !12964
  %type842 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common841, i32 0, i32 2, !dbg !12964
  %272 = load %union.tree_node*, %union.tree_node** %type842, align 8, !dbg !12964
  %base843 = bitcast %union.tree_node* %272 to %struct.tree_base*, !dbg !12964
  %273 = bitcast %struct.tree_base* %base843 to i64*, !dbg !12964
  %bf.load844 = load i64, i64* %273, align 8, !dbg !12964
  %bf.clear845 = and i64 %bf.load844, 65535, !dbg !12964
  %bf.cast846 = trunc i64 %bf.clear845 to i32, !dbg !12964
  %cmp847 = icmp eq i32 %bf.cast846, 14, !dbg !12964
  br i1 %cmp847, label %cond.true849, label %cond.false853, !dbg !12964

cond.true849:                                     ; preds = %lor.lhs.false840
  %274 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common850 = bitcast %union.tree_node* %274 to %struct.tree_common*, !dbg !12964
  %type851 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common850, i32 0, i32 2, !dbg !12964
  %275 = load %union.tree_node*, %union.tree_node** %type851, align 8, !dbg !12964
  %call852 = call i32 @vector_type_mode(%union.tree_node* %275), !dbg !12964
  br label %cond.end861, !dbg !12964

cond.false853:                                    ; preds = %lor.lhs.false840
  %276 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common854 = bitcast %union.tree_node* %276 to %struct.tree_common*, !dbg !12964
  %type855 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common854, i32 0, i32 2, !dbg !12964
  %277 = load %union.tree_node*, %union.tree_node** %type855, align 8, !dbg !12964
  %type856 = bitcast %union.tree_node* %277 to %struct.tree_type*, !dbg !12964
  %mode857 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type856, i32 0, i32 6, !dbg !12964
  %bf.load858 = load i32, i32* %mode857, align 4, !dbg !12964
  %bf.lshr859 = lshr i32 %bf.load858, 16, !dbg !12964
  %bf.clear860 = and i32 %bf.lshr859, 255, !dbg !12964
  br label %cond.end861, !dbg !12964

cond.end861:                                      ; preds = %cond.false853, %cond.true849
  %cond862 = phi i32 [ %call852, %cond.true849 ], [ %bf.clear860, %cond.false853 ], !dbg !12964
  %idxprom863 = zext i32 %cond862 to i64, !dbg !12964
  %arrayidx864 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom863, !dbg !12964
  %278 = load i8, i8* %arrayidx864, align 1, !dbg !12964
  %conv865 = zext i8 %278 to i32, !dbg !12964
  %cmp866 = icmp eq i32 %conv865, 9, !dbg !12964
  br i1 %cmp866, label %cond.true868, label %cond.false891, !dbg !12964

cond.true868:                                     ; preds = %cond.end861, %cond.end833
  %279 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common869 = bitcast %union.tree_node* %279 to %struct.tree_common*, !dbg !12964
  %type870 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common869, i32 0, i32 2, !dbg !12964
  %280 = load %union.tree_node*, %union.tree_node** %type870, align 8, !dbg !12964
  %base871 = bitcast %union.tree_node* %280 to %struct.tree_base*, !dbg !12964
  %281 = bitcast %struct.tree_base* %base871 to i64*, !dbg !12964
  %bf.load872 = load i64, i64* %281, align 8, !dbg !12964
  %bf.clear873 = and i64 %bf.load872, 65535, !dbg !12964
  %bf.cast874 = trunc i64 %bf.clear873 to i32, !dbg !12964
  %cmp875 = icmp eq i32 %bf.cast874, 14, !dbg !12964
  br i1 %cmp875, label %cond.true877, label %cond.false881, !dbg !12964

cond.true877:                                     ; preds = %cond.true868
  %282 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common878 = bitcast %union.tree_node* %282 to %struct.tree_common*, !dbg !12964
  %type879 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common878, i32 0, i32 2, !dbg !12964
  %283 = load %union.tree_node*, %union.tree_node** %type879, align 8, !dbg !12964
  %call880 = call i32 @vector_type_mode(%union.tree_node* %283), !dbg !12964
  br label %cond.end889, !dbg !12964

cond.false881:                                    ; preds = %cond.true868
  %284 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common882 = bitcast %union.tree_node* %284 to %struct.tree_common*, !dbg !12964
  %type883 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common882, i32 0, i32 2, !dbg !12964
  %285 = load %union.tree_node*, %union.tree_node** %type883, align 8, !dbg !12964
  %type884 = bitcast %union.tree_node* %285 to %struct.tree_type*, !dbg !12964
  %mode885 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type884, i32 0, i32 6, !dbg !12964
  %bf.load886 = load i32, i32* %mode885, align 4, !dbg !12964
  %bf.lshr887 = lshr i32 %bf.load886, 16, !dbg !12964
  %bf.clear888 = and i32 %bf.lshr887, 255, !dbg !12964
  br label %cond.end889, !dbg !12964

cond.end889:                                      ; preds = %cond.false881, %cond.true877
  %cond890 = phi i32 [ %call880, %cond.true877 ], [ %bf.clear888, %cond.false881 ], !dbg !12964
  br label %cond.end917, !dbg !12964

cond.false891:                                    ; preds = %cond.end861
  %286 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common892 = bitcast %union.tree_node* %286 to %struct.tree_common*, !dbg !12964
  %type893 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common892, i32 0, i32 2, !dbg !12964
  %287 = load %union.tree_node*, %union.tree_node** %type893, align 8, !dbg !12964
  %base894 = bitcast %union.tree_node* %287 to %struct.tree_base*, !dbg !12964
  %288 = bitcast %struct.tree_base* %base894 to i64*, !dbg !12964
  %bf.load895 = load i64, i64* %288, align 8, !dbg !12964
  %bf.clear896 = and i64 %bf.load895, 65535, !dbg !12964
  %bf.cast897 = trunc i64 %bf.clear896 to i32, !dbg !12964
  %cmp898 = icmp eq i32 %bf.cast897, 14, !dbg !12964
  br i1 %cmp898, label %cond.true900, label %cond.false904, !dbg !12964

cond.true900:                                     ; preds = %cond.false891
  %289 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common901 = bitcast %union.tree_node* %289 to %struct.tree_common*, !dbg !12964
  %type902 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common901, i32 0, i32 2, !dbg !12964
  %290 = load %union.tree_node*, %union.tree_node** %type902, align 8, !dbg !12964
  %call903 = call i32 @vector_type_mode(%union.tree_node* %290), !dbg !12964
  br label %cond.end912, !dbg !12964

cond.false904:                                    ; preds = %cond.false891
  %291 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12964
  %common905 = bitcast %union.tree_node* %291 to %struct.tree_common*, !dbg !12964
  %type906 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common905, i32 0, i32 2, !dbg !12964
  %292 = load %union.tree_node*, %union.tree_node** %type906, align 8, !dbg !12964
  %type907 = bitcast %union.tree_node* %292 to %struct.tree_type*, !dbg !12964
  %mode908 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type907, i32 0, i32 6, !dbg !12964
  %bf.load909 = load i32, i32* %mode908, align 4, !dbg !12964
  %bf.lshr910 = lshr i32 %bf.load909, 16, !dbg !12964
  %bf.clear911 = and i32 %bf.lshr910, 255, !dbg !12964
  br label %cond.end912, !dbg !12964

cond.end912:                                      ; preds = %cond.false904, %cond.true900
  %cond913 = phi i32 [ %call903, %cond.true900 ], [ %bf.clear911, %cond.false904 ], !dbg !12964
  %idxprom914 = zext i32 %cond913 to i64, !dbg !12964
  %arrayidx915 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom914, !dbg !12964
  %293 = load i8, i8* %arrayidx915, align 1, !dbg !12964
  %conv916 = zext i8 %293 to i32, !dbg !12964
  br label %cond.end917, !dbg !12964

cond.end917:                                      ; preds = %cond.end912, %cond.end889
  %cond918 = phi i32 [ %cond890, %cond.end889 ], [ %conv916, %cond.end912 ], !dbg !12964
  %sub919 = sub i32 %cond918, 38, !dbg !12964
  br label %cond.end920, !dbg !12964

cond.end920:                                      ; preds = %cond.end917, %cond.end808
  %cond921 = phi i32 [ %add811, %cond.end808 ], [ %sub919, %cond.end917 ], !dbg !12964
  %idxprom922 = zext i32 %cond921 to i64, !dbg !12964
  %arrayidx923 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom922, !dbg !12964
  %294 = load %struct.real_format*, %struct.real_format** %arrayidx923, align 8, !dbg !12964
  %has_nans924 = getelementptr inbounds %struct.real_format, %struct.real_format* %294, i32 0, i32 11, !dbg !12964
  %295 = load i8, i8* %has_nans924, align 2, !dbg !12964
  %conv925 = zext i8 %295 to i32, !dbg !12964
  %tobool926 = icmp ne i32 %conv925, 0, !dbg !12964
  br i1 %tobool926, label %land.lhs.true927, label %cond.false930, !dbg !12964

land.lhs.true927:                                 ; preds = %cond.end920
  %296 = load i32, i32* @flag_finite_math_only, align 4, !dbg !12964
  %tobool928 = icmp ne i32 %296, 0, !dbg !12964
  br i1 %tobool928, label %cond.false930, label %cond.true929, !dbg !12964

cond.true929:                                     ; preds = %land.lhs.true927
  %297 = load i32, i32* %unordered_code.addr, align 4, !dbg !12965
  br label %cond.end931, !dbg !12964

cond.false930:                                    ; preds = %land.lhs.true927, %cond.end920, %cond.end584
  %298 = load i32, i32* %ordered_code.addr, align 4, !dbg !12966
  br label %cond.end931, !dbg !12964

cond.end931:                                      ; preds = %cond.false930, %cond.true929
  %cond932 = phi i32 [ %297, %cond.true929 ], [ %298, %cond.false930 ], !dbg !12964
  store i32 %cond932, i32* %code, align 4, !dbg !12967
  %299 = load i32, i32* %loc.addr, align 4, !dbg !12968
  %300 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12968
  %301 = load i32, i32* %loc.addr, align 4, !dbg !12968
  %302 = load i32, i32* %code, align 4, !dbg !12968
  %303 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12968
  %304 = load %union.tree_node*, %union.tree_node** %arg0.addr, align 8, !dbg !12968
  %305 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !12968
  %call933 = call %union.tree_node* @fold_build2_stat_loc(i32 %301, i32 %302, %union.tree_node* %303, %union.tree_node* %304, %union.tree_node* %305), !dbg !12968
  %call934 = call %union.tree_node* @fold_build1_stat_loc(i32 %299, i32 96, %union.tree_node* %300, %union.tree_node* %call933), !dbg !12968
  store %union.tree_node* %call934, %union.tree_node** %retval, align 8, !dbg !12969
  br label %return, !dbg !12969

return:                                           ; preds = %cond.end931, %if.end477, %if.then475
  %306 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12970
  ret %union.tree_node* %306, !dbg !12970
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_sprintf(i32 %loc, %union.tree_node* %dest, %union.tree_node* %fmt, %union.tree_node* %orig, i32 %ignored) #0 !dbg !12971 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dest.addr = alloca %union.tree_node*, align 8
  %fmt.addr = alloca %union.tree_node*, align 8
  %orig.addr = alloca %union.tree_node*, align 8
  %ignored.addr = alloca i32, align 4
  %call = alloca %union.tree_node*, align 8
  %retval1 = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fn39 = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12974, metadata !DIExpression()), !dbg !12975
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !12976, metadata !DIExpression()), !dbg !12977
  store %union.tree_node* %fmt, %union.tree_node** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt.addr, metadata !12978, metadata !DIExpression()), !dbg !12979
  store %union.tree_node* %orig, %union.tree_node** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig.addr, metadata !12980, metadata !DIExpression()), !dbg !12981
  store i32 %ignored, i32* %ignored.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ignored.addr, metadata !12982, metadata !DIExpression()), !dbg !12983
  call void @llvm.dbg.declare(metadata %union.tree_node** %call, metadata !12984, metadata !DIExpression()), !dbg !12985
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval1, metadata !12986, metadata !DIExpression()), !dbg !12987
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !12988, metadata !DIExpression()), !dbg !12989
  store i8* null, i8** %fmt_str, align 8, !dbg !12989
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !12990
  %call2 = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !12992
  %tobool = icmp ne i8 %call2, 0, !dbg !12992
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12993

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !12994
  %call3 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !12995
  %tobool4 = icmp ne i8 %call3, 0, !dbg !12995
  br i1 %tobool4, label %if.end, label %if.then, !dbg !12996

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12997
  br label %return, !dbg !12997

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !12998
  %tobool5 = icmp ne %union.tree_node* %2, null, !dbg !12998
  br i1 %tobool5, label %land.lhs.true, label %if.end9, !dbg !13000

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !13001
  %call6 = call zeroext i8 @validate_arg(%union.tree_node* %3, i32 10), !dbg !13002
  %tobool7 = icmp ne i8 %call6, 0, !dbg !13002
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !13003

if.then8:                                         ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13004
  br label %return, !dbg !13004

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !13005
  %call10 = call i8* @c_getstr(%union.tree_node* %4), !dbg !13006
  store i8* %call10, i8** %fmt_str, align 8, !dbg !13007
  %5 = load i8*, i8** %fmt_str, align 8, !dbg !13008
  %cmp = icmp eq i8* %5, null, !dbg !13010
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !13011

if.then11:                                        ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13012
  br label %return, !dbg !13012

if.end12:                                         ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %call, align 8, !dbg !13013
  store %union.tree_node* null, %union.tree_node** %retval1, align 8, !dbg !13014
  %call13 = call zeroext i8 @init_target_chars(), !dbg !13015
  %tobool14 = icmp ne i8 %call13, 0, !dbg !13015
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !13017

if.then15:                                        ; preds = %if.end12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13018
  br label %return, !dbg !13018

if.end16:                                         ; preds = %if.end12
  %6 = load i8*, i8** %fmt_str, align 8, !dbg !13019
  %7 = load i64, i64* @target_percent, align 8, !dbg !13021
  %conv = trunc i64 %7 to i32, !dbg !13021
  %call17 = call i8* @strchr(i8* %6, i32 %conv), !dbg !13022
  %cmp18 = icmp eq i8* %call17, null, !dbg !13023
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !13024

if.then20:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !13025, metadata !DIExpression()), !dbg !13027
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 341), align 8, !dbg !13028
  store %union.tree_node* %8, %union.tree_node** %fn, align 8, !dbg !13027
  %9 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13029
  %tobool21 = icmp ne %union.tree_node* %9, null, !dbg !13029
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !13031

if.then22:                                        ; preds = %if.then20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13032
  br label %return, !dbg !13032

if.end23:                                         ; preds = %if.then20
  %10 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !13033
  %tobool24 = icmp ne %union.tree_node* %10, null, !dbg !13033
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !13035

if.then25:                                        ; preds = %if.end23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13036
  br label %return, !dbg !13036

if.end26:                                         ; preds = %if.end23
  %11 = load i32, i32* %loc.addr, align 4, !dbg !13037
  %12 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13038
  %13 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13039
  %14 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !13040
  %call27 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %11, %union.tree_node* %12, i32 2, %union.tree_node* %13, %union.tree_node* %14), !dbg !13041
  store %union.tree_node* %call27, %union.tree_node** %call, align 8, !dbg !13042
  %15 = load i32, i32* %ignored.addr, align 4, !dbg !13043
  %tobool28 = icmp ne i32 %15, 0, !dbg !13043
  br i1 %tobool28, label %if.end32, label %if.then29, !dbg !13045

if.then29:                                        ; preds = %if.end26
  %16 = load i8*, i8** %fmt_str, align 8, !dbg !13046
  %call30 = call i64 @strlen(i8* %16), !dbg !13047
  %call31 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %call30), !dbg !13048
  store %union.tree_node* %call31, %union.tree_node** %retval1, align 8, !dbg !13049
  br label %if.end32, !dbg !13050

if.end32:                                         ; preds = %if.then29, %if.end26
  br label %if.end58, !dbg !13051

if.else:                                          ; preds = %if.end16
  %17 = load i8*, i8** %fmt_str, align 8, !dbg !13052
  %tobool33 = icmp ne i8* %17, null, !dbg !13052
  br i1 %tobool33, label %land.lhs.true34, label %if.end57, !dbg !13054

land.lhs.true34:                                  ; preds = %if.else
  %18 = load i8*, i8** %fmt_str, align 8, !dbg !13055
  %call35 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !13056
  %cmp36 = icmp eq i32 %call35, 0, !dbg !13057
  br i1 %cmp36, label %if.then38, label %if.end57, !dbg !13058

if.then38:                                        ; preds = %land.lhs.true34
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn39, metadata !13059, metadata !DIExpression()), !dbg !13061
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 341), align 8, !dbg !13062
  store %union.tree_node* %19, %union.tree_node** %fn39, align 8, !dbg !13063
  %20 = load %union.tree_node*, %union.tree_node** %fn39, align 8, !dbg !13064
  %tobool40 = icmp ne %union.tree_node* %20, null, !dbg !13064
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !13066

if.then41:                                        ; preds = %if.then38
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13067
  br label %return, !dbg !13067

if.end42:                                         ; preds = %if.then38
  %21 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !13068
  %tobool43 = icmp ne %union.tree_node* %21, null, !dbg !13068
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !13070

if.then44:                                        ; preds = %if.end42
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13071
  br label %return, !dbg !13071

if.end45:                                         ; preds = %if.end42
  %22 = load i32, i32* %ignored.addr, align 4, !dbg !13072
  %tobool46 = icmp ne i32 %22, 0, !dbg !13072
  br i1 %tobool46, label %if.end55, label %if.then47, !dbg !13074

if.then47:                                        ; preds = %if.end45
  %23 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !13075
  %call48 = call %union.tree_node* @c_strlen(%union.tree_node* %23, i32 1), !dbg !13077
  store %union.tree_node* %call48, %union.tree_node** %retval1, align 8, !dbg !13078
  %24 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13079
  %tobool49 = icmp ne %union.tree_node* %24, null, !dbg !13079
  br i1 %tobool49, label %lor.lhs.false50, label %if.then53, !dbg !13081

lor.lhs.false50:                                  ; preds = %if.then47
  %25 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13082
  %base = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !13082
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !13082
  %bf.load = load i64, i64* %26, align 8, !dbg !13082
  %bf.clear = and i64 %bf.load, 65535, !dbg !13082
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13082
  %cmp51 = icmp ne i32 %bf.cast, 23, !dbg !13083
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !13084

if.then53:                                        ; preds = %lor.lhs.false50, %if.then47
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13085
  br label %return, !dbg !13085

if.end54:                                         ; preds = %lor.lhs.false50
  br label %if.end55, !dbg !13086

if.end55:                                         ; preds = %if.end54, %if.end45
  %27 = load i32, i32* %loc.addr, align 4, !dbg !13087
  %28 = load %union.tree_node*, %union.tree_node** %fn39, align 8, !dbg !13088
  %29 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13089
  %30 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !13090
  %call56 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %27, %union.tree_node* %28, i32 2, %union.tree_node* %29, %union.tree_node* %30), !dbg !13091
  store %union.tree_node* %call56, %union.tree_node** %call, align 8, !dbg !13092
  br label %if.end57, !dbg !13093

if.end57:                                         ; preds = %if.end55, %land.lhs.true34, %if.else
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.end32
  %31 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !13094
  %tobool59 = icmp ne %union.tree_node* %31, null, !dbg !13094
  br i1 %tobool59, label %land.lhs.true60, label %if.else69, !dbg !13096

land.lhs.true60:                                  ; preds = %if.end58
  %32 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13097
  %tobool61 = icmp ne %union.tree_node* %32, null, !dbg !13097
  br i1 %tobool61, label %if.then62, label %if.else69, !dbg !13098

if.then62:                                        ; preds = %land.lhs.true60
  %33 = load i32, i32* %loc.addr, align 4, !dbg !13099
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 373), align 8, !dbg !13101
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !13101
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13101
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13101
  %common63 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !13101
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !13101
  %36 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !13101
  %37 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13102
  %call65 = call %union.tree_node* @fold_convert_loc(i32 %33, %union.tree_node* %36, %union.tree_node* %37), !dbg !13103
  store %union.tree_node* %call65, %union.tree_node** %retval1, align 8, !dbg !13104
  %38 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13105
  %common66 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !13105
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !13105
  %39 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !13105
  %40 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !13105
  %41 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13105
  %call68 = call %union.tree_node* @build2_stat(i32 52, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41), !dbg !13105
  store %union.tree_node* %call68, %union.tree_node** %retval, align 8, !dbg !13106
  br label %return, !dbg !13106

if.else69:                                        ; preds = %land.lhs.true60, %if.end58
  %42 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !13107
  store %union.tree_node* %42, %union.tree_node** %retval, align 8, !dbg !13108
  br label %return, !dbg !13108

return:                                           ; preds = %if.else69, %if.then62, %if.then53, %if.then44, %if.then41, %if.then25, %if.then22, %if.then15, %if.then11, %if.then8, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13109
  ret %union.tree_node* %43, !dbg !13109
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_object_size(%union.tree_node* %ptr, %union.tree_node* %ost) #0 !dbg !13110 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %union.tree_node*, align 8
  %ost.addr = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %object_size_type = alloca i32, align 4
  %bytes = alloca i64, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  store %union.tree_node* %ptr, %union.tree_node** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr.addr, metadata !13111, metadata !DIExpression()), !dbg !13112
  store %union.tree_node* %ost, %union.tree_node** %ost.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ost.addr, metadata !13113, metadata !DIExpression()), !dbg !13114
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !13115, metadata !DIExpression()), !dbg !13116
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !13116
  call void @llvm.dbg.declare(metadata i32* %object_size_type, metadata !13117, metadata !DIExpression()), !dbg !13118
  %0 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13119
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !13121
  %tobool = icmp ne i8 %call, 0, !dbg !13121
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !13122

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13123
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !13124
  %tobool2 = icmp ne i8 %call1, 0, !dbg !13124
  br i1 %tobool2, label %if.end, label %if.then, !dbg !13125

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13126
  br label %return, !dbg !13126

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13127
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %2), !dbg !13127
  store %union.tree_node* %call3, %union.tree_node** %ost.addr, align 8, !dbg !13127
  %3 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13128
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13128
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !13128
  %bf.load = load i64, i64* %4, align 8, !dbg !13128
  %bf.clear = and i64 %bf.load, 65535, !dbg !13128
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13128
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !13130
  br i1 %cmp, label %if.then10, label %lor.lhs.false4, !dbg !13131

lor.lhs.false4:                                   ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13132
  %call5 = call i32 @tree_int_cst_sgn(%union.tree_node* %5), !dbg !13133
  %cmp6 = icmp slt i32 %call5, 0, !dbg !13134
  br i1 %cmp6, label %if.then10, label %lor.lhs.false7, !dbg !13135

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %6 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13136
  %call8 = call i32 @compare_tree_int(%union.tree_node* %6, i64 3), !dbg !13137
  %cmp9 = icmp sgt i32 %call8, 0, !dbg !13138
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !13139

if.then10:                                        ; preds = %lor.lhs.false7, %lor.lhs.false4, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13140
  br label %return, !dbg !13140

if.end11:                                         ; preds = %lor.lhs.false7
  %7 = load %union.tree_node*, %union.tree_node** %ost.addr, align 8, !dbg !13141
  %call12 = call i64 @tree_low_cst(%union.tree_node* %7, i32 0), !dbg !13142
  %conv = trunc i64 %call12 to i32, !dbg !13142
  store i32 %conv, i32* %object_size_type, align 4, !dbg !13143
  %8 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13144
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !13144
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !13144
  %bf.load14 = load i64, i64* %9, align 8, !dbg !13144
  %bf.lshr = lshr i64 %bf.load14, 16, !dbg !13144
  %bf.clear15 = and i64 %bf.lshr, 1, !dbg !13144
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !13144
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !13144
  br i1 %tobool17, label %if.then18, label %if.end23, !dbg !13146

if.then18:                                        ; preds = %if.end11
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !13147
  %11 = load i32, i32* %object_size_type, align 4, !dbg !13148
  %cmp19 = icmp slt i32 %11, 2, !dbg !13149
  %12 = zext i1 %cmp19 to i64, !dbg !13148
  %cond = select i1 %cmp19, i32 -1, i32 0, !dbg !13148
  %conv21 = sext i32 %cond to i64, !dbg !13148
  %call22 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %10, i64 %conv21), !dbg !13150
  store %union.tree_node* %call22, %union.tree_node** %retval, align 8, !dbg !13151
  br label %return, !dbg !13151

if.end23:                                         ; preds = %if.end11
  %13 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13152
  %base24 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !13152
  %14 = bitcast %struct.tree_base* %base24 to i64*, !dbg !13152
  %bf.load25 = load i64, i64* %14, align 8, !dbg !13152
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !13152
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !13152
  %cmp28 = icmp eq i32 %bf.cast27, 121, !dbg !13154
  br i1 %cmp28, label %if.then30, label %if.else, !dbg !13155

if.then30:                                        ; preds = %if.end23
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !13156
  %16 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13157
  %17 = load i32, i32* %object_size_type, align 4, !dbg !13158
  %call31 = call i64 @compute_builtin_object_size(%union.tree_node* %16, i32 %17), !dbg !13159
  %call32 = call %union.tree_node* @build_int_cstu(%union.tree_node* %15, i64 %call31), !dbg !13160
  store %union.tree_node* %call32, %union.tree_node** %ret, align 8, !dbg !13161
  br label %if.end51, !dbg !13162

if.else:                                          ; preds = %if.end23
  %18 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13163
  %base33 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !13163
  %19 = bitcast %struct.tree_base* %base33 to i64*, !dbg !13163
  %bf.load34 = load i64, i64* %19, align 8, !dbg !13163
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !13163
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !13163
  %cmp37 = icmp eq i32 %bf.cast36, 141, !dbg !13165
  br i1 %cmp37, label %if.then39, label %if.end50, !dbg !13166

if.then39:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !13167, metadata !DIExpression()), !dbg !13169
  %20 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !13170
  %21 = load i32, i32* %object_size_type, align 4, !dbg !13171
  %call40 = call i64 @compute_builtin_object_size(%union.tree_node* %20, i32 %21), !dbg !13172
  store i64 %call40, i64* %bytes, align 8, !dbg !13173
  %22 = load i64, i64* %bytes, align 8, !dbg !13174
  %23 = load i32, i32* %object_size_type, align 4, !dbg !13176
  %cmp41 = icmp slt i32 %23, 2, !dbg !13177
  %24 = zext i1 %cmp41 to i64, !dbg !13176
  %cond43 = select i1 %cmp41, i32 -1, i32 0, !dbg !13176
  %conv44 = sext i32 %cond43 to i64, !dbg !13178
  %cmp45 = icmp ne i64 %22, %conv44, !dbg !13179
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !13180

if.then47:                                        ; preds = %if.then39
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !13181
  %26 = load i64, i64* %bytes, align 8, !dbg !13182
  %call48 = call %union.tree_node* @build_int_cstu(%union.tree_node* %25, i64 %26), !dbg !13183
  store %union.tree_node* %call48, %union.tree_node** %ret, align 8, !dbg !13184
  br label %if.end49, !dbg !13185

if.end49:                                         ; preds = %if.then47, %if.then39
  br label %if.end50, !dbg !13186

if.end50:                                         ; preds = %if.end49, %if.else
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then30
  %27 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13187
  %tobool52 = icmp ne %union.tree_node* %27, null, !dbg !13187
  br i1 %tobool52, label %if.then53, label %if.end63, !dbg !13189

if.then53:                                        ; preds = %if.end51
  call void @llvm.dbg.declare(metadata i64* %low, metadata !13190, metadata !DIExpression()), !dbg !13192
  %28 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13193
  %int_cst = bitcast %union.tree_node* %28 to %struct.tree_int_cst*, !dbg !13193
  %int_cst54 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !13193
  %low55 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst54, i32 0, i32 0, !dbg !13193
  %29 = load i64, i64* %low55, align 8, !dbg !13193
  store i64 %29, i64* %low, align 8, !dbg !13192
  call void @llvm.dbg.declare(metadata i64* %high, metadata !13194, metadata !DIExpression()), !dbg !13195
  %30 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13196
  %int_cst56 = bitcast %union.tree_node* %30 to %struct.tree_int_cst*, !dbg !13196
  %int_cst57 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst56, i32 0, i32 1, !dbg !13196
  %high58 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst57, i32 0, i32 1, !dbg !13196
  %31 = load i64, i64* %high58, align 8, !dbg !13196
  store i64 %31, i64* %high, align 8, !dbg !13195
  %32 = load i64, i64* %low, align 8, !dbg !13197
  %33 = load i64, i64* %high, align 8, !dbg !13199
  %34 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13200
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !13200
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13200
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13200
  %call59 = call i32 @fit_double_type(i64 %32, i64 %33, i64* %low, i64* %high, %union.tree_node* %35), !dbg !13201
  %tobool60 = icmp ne i32 %call59, 0, !dbg !13201
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !13202

if.then61:                                        ; preds = %if.then53
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !13203
  br label %if.end62, !dbg !13204

if.end62:                                         ; preds = %if.then61, %if.then53
  br label %if.end63, !dbg !13205

if.end63:                                         ; preds = %if.end62, %if.end51
  %36 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13206
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !13207
  br label %return, !dbg !13207

return:                                           ; preds = %if.end63, %if.then18, %if.then10, %if.then
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13208
  ret %union.tree_node* %37, !dbg !13208
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_fprintf(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %fp, %union.tree_node* %fmt, %union.tree_node* %arg, i8 zeroext %ignore, i32 %fcode) #0 !dbg !13209 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fp.addr = alloca %union.tree_node*, align 8
  %fmt.addr = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %fcode.addr = alloca i32, align 4
  %fn_fputc = alloca %union.tree_node*, align 8
  %fn_fputs = alloca %union.tree_node*, align 8
  %call = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !13212, metadata !DIExpression()), !dbg !13213
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !13214, metadata !DIExpression()), !dbg !13215
  store %union.tree_node* %fp, %union.tree_node** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp.addr, metadata !13216, metadata !DIExpression()), !dbg !13217
  store %union.tree_node* %fmt, %union.tree_node** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt.addr, metadata !13218, metadata !DIExpression()), !dbg !13219
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !13220, metadata !DIExpression()), !dbg !13221
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !13222, metadata !DIExpression()), !dbg !13223
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !13224, metadata !DIExpression()), !dbg !13225
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_fputc, metadata !13226, metadata !DIExpression()), !dbg !13227
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_fputs, metadata !13228, metadata !DIExpression()), !dbg !13229
  call void @llvm.dbg.declare(metadata %union.tree_node** %call, metadata !13230, metadata !DIExpression()), !dbg !13231
  store %union.tree_node* null, %union.tree_node** %call, align 8, !dbg !13231
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !13232, metadata !DIExpression()), !dbg !13233
  store i8* null, i8** %fmt_str, align 8, !dbg !13233
  %0 = load i8, i8* %ignore.addr, align 1, !dbg !13234
  %tobool = icmp ne i8 %0, 0, !dbg !13234
  br i1 %tobool, label %if.end, label %if.then, !dbg !13236

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13237
  br label %return, !dbg !13237

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fp.addr, align 8, !dbg !13238
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !13240
  %tobool2 = icmp ne i8 %call1, 0, !dbg !13240
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !13241

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13242
  br label %return, !dbg !13242

if.end4:                                          ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !13243
  %call5 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 10), !dbg !13245
  %tobool6 = icmp ne i8 %call5, 0, !dbg !13245
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !13246

if.then7:                                         ; preds = %if.end4
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13247
  br label %return, !dbg !13247

if.end8:                                          ; preds = %if.end4
  %3 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !13248
  %call9 = call i8* @c_getstr(%union.tree_node* %3), !dbg !13249
  store i8* %call9, i8** %fmt_str, align 8, !dbg !13250
  %4 = load i8*, i8** %fmt_str, align 8, !dbg !13251
  %cmp = icmp eq i8* %4, null, !dbg !13253
  br i1 %cmp, label %if.then10, label %if.end11, !dbg !13254

if.then10:                                        ; preds = %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13255
  br label %return, !dbg !13255

if.end11:                                         ; preds = %if.end8
  %5 = load i32, i32* %fcode.addr, align 4, !dbg !13256
  %cmp12 = icmp eq i32 %5, 355, !dbg !13258
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !13259

if.then13:                                        ; preds = %if.end11
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 359), align 8, !dbg !13260
  store %union.tree_node* %6, %union.tree_node** %fn_fputc, align 8, !dbg !13262
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 361), align 8, !dbg !13263
  store %union.tree_node* %7, %union.tree_node** %fn_fputs, align 8, !dbg !13264
  br label %if.end14, !dbg !13265

if.else:                                          ; preds = %if.end11
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 358), align 16, !dbg !13266
  store %union.tree_node* %8, %union.tree_node** %fn_fputc, align 8, !dbg !13268
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 360), align 16, !dbg !13269
  store %union.tree_node* %9, %union.tree_node** %fn_fputs, align 8, !dbg !13270
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then13
  %call15 = call zeroext i8 @init_target_chars(), !dbg !13271
  %tobool16 = icmp ne i8 %call15, 0, !dbg !13271
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !13273

if.then17:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13274
  br label %return, !dbg !13274

if.end18:                                         ; preds = %if.end14
  %10 = load i8*, i8** %fmt_str, align 8, !dbg !13275
  %11 = load i64, i64* @target_percent, align 8, !dbg !13277
  %conv = trunc i64 %11 to i32, !dbg !13277
  %call19 = call i8* @strchr(i8* %10, i32 %conv), !dbg !13278
  %cmp20 = icmp eq i8* %call19, null, !dbg !13279
  br i1 %cmp20, label %if.then22, label %if.else46, !dbg !13280

if.then22:                                        ; preds = %if.end18
  %12 = load i32, i32* %fcode.addr, align 4, !dbg !13281
  %cmp23 = icmp ne i32 %12, 375, !dbg !13284
  br i1 %cmp23, label %land.lhs.true, label %if.end30, !dbg !13285

land.lhs.true:                                    ; preds = %if.then22
  %13 = load i32, i32* %fcode.addr, align 4, !dbg !13286
  %cmp25 = icmp ne i32 %13, 544, !dbg !13287
  br i1 %cmp25, label %land.lhs.true27, label %if.end30, !dbg !13288

land.lhs.true27:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13289
  %tobool28 = icmp ne %union.tree_node* %14, null, !dbg !13289
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !13290

if.then29:                                        ; preds = %land.lhs.true27
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13291
  br label %return, !dbg !13291

if.end30:                                         ; preds = %land.lhs.true27, %land.lhs.true, %if.then22
  %15 = load i8*, i8** %fmt_str, align 8, !dbg !13292
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 0, !dbg !13292
  %16 = load i8, i8* %arrayidx, align 1, !dbg !13292
  %conv31 = sext i8 %16 to i32, !dbg !13292
  %cmp32 = icmp eq i32 %conv31, 0, !dbg !13294
  br i1 %cmp32, label %if.then34, label %if.end41, !dbg !13295

if.then34:                                        ; preds = %if.end30
  %17 = load %union.tree_node*, %union.tree_node** %fp.addr, align 8, !dbg !13296
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !13296
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !13296
  %bf.load = load i64, i64* %18, align 8, !dbg !13296
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !13296
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13296
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13296
  %tobool35 = icmp ne i32 %bf.cast, 0, !dbg !13296
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !13299

if.then36:                                        ; preds = %if.then34
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13300
  br label %return, !dbg !13300

if.end37:                                         ; preds = %if.then34
  %19 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !13301
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !13301
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13301
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13301
  %common38 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !13301
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !13301
  %21 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !13301
  %call40 = call %union.tree_node* @build_int_cst(%union.tree_node* %21, i64 0), !dbg !13302
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !13303
  br label %return, !dbg !13303

if.end41:                                         ; preds = %if.end30
  %22 = load %union.tree_node*, %union.tree_node** %fn_fputs, align 8, !dbg !13304
  %tobool42 = icmp ne %union.tree_node* %22, null, !dbg !13304
  br i1 %tobool42, label %if.then43, label %if.end45, !dbg !13306

if.then43:                                        ; preds = %if.end41
  %23 = load i32, i32* %loc.addr, align 4, !dbg !13307
  %24 = load %union.tree_node*, %union.tree_node** %fn_fputs, align 8, !dbg !13308
  %25 = load %union.tree_node*, %union.tree_node** %fmt.addr, align 8, !dbg !13309
  %26 = load %union.tree_node*, %union.tree_node** %fp.addr, align 8, !dbg !13310
  %call44 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %23, %union.tree_node* %24, i32 2, %union.tree_node* %25, %union.tree_node* %26), !dbg !13311
  store %union.tree_node* %call44, %union.tree_node** %call, align 8, !dbg !13312
  br label %if.end45, !dbg !13313

if.end45:                                         ; preds = %if.then43, %if.end41
  br label %if.end85, !dbg !13314

if.else46:                                        ; preds = %if.end18
  %27 = load i32, i32* %fcode.addr, align 4, !dbg !13315
  %cmp47 = icmp eq i32 %27, 375, !dbg !13317
  br i1 %cmp47, label %if.then51, label %lor.lhs.false, !dbg !13318

lor.lhs.false:                                    ; preds = %if.else46
  %28 = load i32, i32* %fcode.addr, align 4, !dbg !13319
  %cmp49 = icmp eq i32 %28, 544, !dbg !13320
  br i1 %cmp49, label %if.then51, label %if.else52, !dbg !13321

if.then51:                                        ; preds = %lor.lhs.false, %if.else46
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13322
  br label %return, !dbg !13322

if.else52:                                        ; preds = %lor.lhs.false
  %29 = load i8*, i8** %fmt_str, align 8, !dbg !13323
  %call53 = call i32 @strcmp(i8* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !13325
  %cmp54 = icmp eq i32 %call53, 0, !dbg !13326
  br i1 %cmp54, label %if.then56, label %if.else67, !dbg !13327

if.then56:                                        ; preds = %if.else52
  %30 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13328
  %tobool57 = icmp ne %union.tree_node* %30, null, !dbg !13328
  br i1 %tobool57, label %lor.lhs.false58, label %if.then61, !dbg !13331

lor.lhs.false58:                                  ; preds = %if.then56
  %31 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13332
  %call59 = call zeroext i8 @validate_arg(%union.tree_node* %31, i32 10), !dbg !13333
  %tobool60 = icmp ne i8 %call59, 0, !dbg !13333
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !13334

if.then61:                                        ; preds = %lor.lhs.false58, %if.then56
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13335
  br label %return, !dbg !13335

if.end62:                                         ; preds = %lor.lhs.false58
  %32 = load %union.tree_node*, %union.tree_node** %fn_fputs, align 8, !dbg !13336
  %tobool63 = icmp ne %union.tree_node* %32, null, !dbg !13336
  br i1 %tobool63, label %if.then64, label %if.end66, !dbg !13338

if.then64:                                        ; preds = %if.end62
  %33 = load i32, i32* %loc.addr, align 4, !dbg !13339
  %34 = load %union.tree_node*, %union.tree_node** %fn_fputs, align 8, !dbg !13340
  %35 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13341
  %36 = load %union.tree_node*, %union.tree_node** %fp.addr, align 8, !dbg !13342
  %call65 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %33, %union.tree_node* %34, i32 2, %union.tree_node* %35, %union.tree_node* %36), !dbg !13343
  store %union.tree_node* %call65, %union.tree_node** %call, align 8, !dbg !13344
  br label %if.end66, !dbg !13345

if.end66:                                         ; preds = %if.then64, %if.end62
  br label %if.end83, !dbg !13346

if.else67:                                        ; preds = %if.else52
  %37 = load i8*, i8** %fmt_str, align 8, !dbg !13347
  %call68 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_c, i64 0, i64 0)), !dbg !13349
  %cmp69 = icmp eq i32 %call68, 0, !dbg !13350
  br i1 %cmp69, label %if.then71, label %if.end82, !dbg !13351

if.then71:                                        ; preds = %if.else67
  %38 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13352
  %tobool72 = icmp ne %union.tree_node* %38, null, !dbg !13352
  br i1 %tobool72, label %lor.lhs.false73, label %if.then76, !dbg !13355

lor.lhs.false73:                                  ; preds = %if.then71
  %39 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13356
  %call74 = call zeroext i8 @validate_arg(%union.tree_node* %39, i32 8), !dbg !13357
  %tobool75 = icmp ne i8 %call74, 0, !dbg !13357
  br i1 %tobool75, label %if.end77, label %if.then76, !dbg !13358

if.then76:                                        ; preds = %lor.lhs.false73, %if.then71
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13359
  br label %return, !dbg !13359

if.end77:                                         ; preds = %lor.lhs.false73
  %40 = load %union.tree_node*, %union.tree_node** %fn_fputc, align 8, !dbg !13360
  %tobool78 = icmp ne %union.tree_node* %40, null, !dbg !13360
  br i1 %tobool78, label %if.then79, label %if.end81, !dbg !13362

if.then79:                                        ; preds = %if.end77
  %41 = load i32, i32* %loc.addr, align 4, !dbg !13363
  %42 = load %union.tree_node*, %union.tree_node** %fn_fputc, align 8, !dbg !13364
  %43 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !13365
  %44 = load %union.tree_node*, %union.tree_node** %fp.addr, align 8, !dbg !13366
  %call80 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %41, %union.tree_node* %42, i32 2, %union.tree_node* %43, %union.tree_node* %44), !dbg !13367
  store %union.tree_node* %call80, %union.tree_node** %call, align 8, !dbg !13368
  br label %if.end81, !dbg !13369

if.end81:                                         ; preds = %if.then79, %if.end77
  br label %if.end82, !dbg !13370

if.end82:                                         ; preds = %if.end81, %if.else67
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.end66
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end45
  %45 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !13371
  %tobool86 = icmp ne %union.tree_node* %45, null, !dbg !13371
  br i1 %tobool86, label %if.end88, label %if.then87, !dbg !13373

if.then87:                                        ; preds = %if.end85
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13374
  br label %return, !dbg !13374

if.end88:                                         ; preds = %if.end85
  %46 = load i32, i32* %loc.addr, align 4, !dbg !13375
  %47 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !13376
  %common89 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !13376
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !13376
  %48 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !13376
  %common91 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !13376
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !13376
  %49 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !13376
  %50 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !13377
  %call93 = call %union.tree_node* @fold_convert_loc(i32 %46, %union.tree_node* %49, %union.tree_node* %50), !dbg !13378
  store %union.tree_node* %call93, %union.tree_node** %retval, align 8, !dbg !13379
  br label %return, !dbg !13379

return:                                           ; preds = %if.end88, %if.then87, %if.then76, %if.then61, %if.then51, %if.end37, %if.then36, %if.then29, %if.then17, %if.then10, %if.then7, %if.then3, %if.then
  %51 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13380
  ret %union.tree_node* %51, !dbg !13380
}

declare dso_local i32 @real_zerop(%union.tree_node*) #2

; Function Attrs: nounwind readnone
declare dso_local i64 @labs(i64) #5

declare dso_local void @real_ldexp(%struct.real_value*, %struct.real_value*, i32) #2

declare dso_local void @real_value_truncate(%struct.real_value* sret, i32, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local zeroext i8 @real_arithmetic(%struct.real_value*, i32, %struct.real_value*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_memset(i32 %loc, %union.tree_node* %dest, %union.tree_node* %c, %union.tree_node* %len, %union.tree_node* %type, i8 zeroext %ignore) #0 !dbg !13381 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dest.addr = alloca %union.tree_node*, align 8
  %c.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %var = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %etype = alloca %union.tree_node*, align 8
  %length = alloca i64, align 8
  %cval = alloca i64, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !13382, metadata !DIExpression()), !dbg !13383
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !13384, metadata !DIExpression()), !dbg !13385
  store %union.tree_node* %c, %union.tree_node** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c.addr, metadata !13386, metadata !DIExpression()), !dbg !13387
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !13388, metadata !DIExpression()), !dbg !13389
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !13390, metadata !DIExpression()), !dbg !13391
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !13392, metadata !DIExpression()), !dbg !13393
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !13394, metadata !DIExpression()), !dbg !13395
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !13396, metadata !DIExpression()), !dbg !13397
  call void @llvm.dbg.declare(metadata %union.tree_node** %etype, metadata !13398, metadata !DIExpression()), !dbg !13399
  call void @llvm.dbg.declare(metadata i64* %length, metadata !13400, metadata !DIExpression()), !dbg !13401
  call void @llvm.dbg.declare(metadata i64* %cval, metadata !13402, metadata !DIExpression()), !dbg !13403
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13404
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !13406
  %tobool = icmp ne i8 %call, 0, !dbg !13406
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !13407

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !13408
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !13409
  %tobool2 = icmp ne i8 %call1, 0, !dbg !13409
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !13410

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13411
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !13412
  %tobool5 = icmp ne i8 %call4, 0, !dbg !13412
  br i1 %tobool5, label %if.end, label %if.then, !dbg !13413

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13414
  br label %return, !dbg !13414

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13415
  %call6 = call i32 @host_integerp(%union.tree_node* %3, i32 1), !dbg !13417
  %tobool7 = icmp ne i32 %call6, 0, !dbg !13417
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !13418

if.then8:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13419
  br label %return, !dbg !13419

if.end9:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13420
  %call10 = call i32 @integer_zerop(%union.tree_node* %4), !dbg !13422
  %tobool11 = icmp ne i32 %call10, 0, !dbg !13422
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !13423

if.then12:                                        ; preds = %if.end9
  %5 = load i32, i32* %loc.addr, align 4, !dbg !13424
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13425
  %7 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13426
  %8 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !13427
  %call13 = call %union.tree_node* @omit_one_operand_loc(i32 %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !13428
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !13429
  br label %return, !dbg !13429

if.end14:                                         ; preds = %if.end9
  %9 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !13430
  %call15 = call i32 @host_integerp(%union.tree_node* %9, i32 1), !dbg !13432
  %tobool16 = icmp ne i32 %call15, 0, !dbg !13432
  br i1 %tobool16, label %lor.lhs.false17, label %if.then19, !dbg !13433

lor.lhs.false17:                                  ; preds = %if.end14
  %10 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13434
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !13434
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !13434
  %bf.load = load i64, i64* %11, align 8, !dbg !13434
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !13434
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13434
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13434
  %tobool18 = icmp ne i32 %bf.cast, 0, !dbg !13434
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !13435

if.then19:                                        ; preds = %lor.lhs.false17, %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13436
  br label %return, !dbg !13436

if.end20:                                         ; preds = %lor.lhs.false17
  %12 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13437
  store %union.tree_node* %12, %union.tree_node** %var, align 8, !dbg !13438
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13439
  %call21 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %13), !dbg !13439
  store %union.tree_node* %call21, %union.tree_node** %var, align 8, !dbg !13439
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13440
  %base22 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !13440
  %15 = bitcast %struct.tree_base* %base22 to i64*, !dbg !13440
  %bf.load23 = load i64, i64* %15, align 8, !dbg !13440
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !13440
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !13440
  %cmp = icmp ne i32 %bf.cast25, 121, !dbg !13442
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !13443

if.then26:                                        ; preds = %if.end20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13444
  br label %return, !dbg !13444

if.end27:                                         ; preds = %if.end20
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13445
  %exp = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !13445
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13445
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13445
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13445
  store %union.tree_node* %17, %union.tree_node** %var, align 8, !dbg !13446
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13447
  %base28 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !13447
  %19 = bitcast %struct.tree_base* %base28 to i64*, !dbg !13447
  %bf.load29 = load i64, i64* %19, align 8, !dbg !13447
  %bf.lshr30 = lshr i64 %bf.load29, 19, !dbg !13447
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !13447
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !13447
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !13447
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !13449

if.then34:                                        ; preds = %if.end27
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13450
  br label %return, !dbg !13450

if.end35:                                         ; preds = %if.end27
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13451
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !13451
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13451
  %21 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !13451
  store %union.tree_node* %21, %union.tree_node** %etype, align 8, !dbg !13452
  %22 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13453
  %base37 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !13453
  %23 = bitcast %struct.tree_base* %base37 to i64*, !dbg !13453
  %bf.load38 = load i64, i64* %23, align 8, !dbg !13453
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !13453
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !13453
  %cmp41 = icmp eq i32 %bf.cast40, 15, !dbg !13455
  br i1 %cmp41, label %if.then42, label %if.end45, !dbg !13456

if.then42:                                        ; preds = %if.end35
  %24 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13457
  %common43 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !13457
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !13457
  %25 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !13457
  store %union.tree_node* %25, %union.tree_node** %etype, align 8, !dbg !13458
  br label %if.end45, !dbg !13459

if.end45:                                         ; preds = %if.then42, %if.end35
  %26 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13460
  %base46 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !13460
  %27 = bitcast %struct.tree_base* %base46 to i64*, !dbg !13460
  %bf.load47 = load i64, i64* %27, align 8, !dbg !13460
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !13460
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !13460
  %cmp50 = icmp eq i32 %bf.cast49, 6, !dbg !13460
  br i1 %cmp50, label %if.end75, label %lor.lhs.false51, !dbg !13460

lor.lhs.false51:                                  ; preds = %if.end45
  %28 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13460
  %base52 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !13460
  %29 = bitcast %struct.tree_base* %base52 to i64*, !dbg !13460
  %bf.load53 = load i64, i64* %29, align 8, !dbg !13460
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !13460
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !13460
  %cmp56 = icmp eq i32 %bf.cast55, 7, !dbg !13460
  br i1 %cmp56, label %if.end75, label %lor.lhs.false57, !dbg !13460

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %30 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13460
  %base58 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !13460
  %31 = bitcast %struct.tree_base* %base58 to i64*, !dbg !13460
  %bf.load59 = load i64, i64* %31, align 8, !dbg !13460
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !13460
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !13460
  %cmp62 = icmp eq i32 %bf.cast61, 8, !dbg !13460
  br i1 %cmp62, label %if.end75, label %land.lhs.true, !dbg !13462

land.lhs.true:                                    ; preds = %lor.lhs.false57
  %32 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13463
  %base63 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !13463
  %33 = bitcast %struct.tree_base* %base63 to i64*, !dbg !13463
  %bf.load64 = load i64, i64* %33, align 8, !dbg !13463
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !13463
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !13463
  %cmp67 = icmp eq i32 %bf.cast66, 10, !dbg !13463
  br i1 %cmp67, label %if.end75, label %lor.lhs.false68, !dbg !13463

lor.lhs.false68:                                  ; preds = %land.lhs.true
  %34 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13463
  %base69 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !13463
  %35 = bitcast %struct.tree_base* %base69 to i64*, !dbg !13463
  %bf.load70 = load i64, i64* %35, align 8, !dbg !13463
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !13463
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !13463
  %cmp73 = icmp eq i32 %bf.cast72, 12, !dbg !13463
  br i1 %cmp73, label %if.end75, label %if.then74, !dbg !13464

if.then74:                                        ; preds = %lor.lhs.false68
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13465
  br label %return, !dbg !13465

if.end75:                                         ; preds = %lor.lhs.false68, %land.lhs.true, %lor.lhs.false57, %lor.lhs.false51, %if.end45
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13466
  %call76 = call zeroext i8 @var_decl_component_p(%union.tree_node* %36), !dbg !13468
  %tobool77 = icmp ne i8 %call76, 0, !dbg !13468
  br i1 %tobool77, label %if.end79, label %if.then78, !dbg !13469

if.then78:                                        ; preds = %if.end75
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13470
  br label %return, !dbg !13470

if.end79:                                         ; preds = %if.end75
  %37 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13471
  %call80 = call i64 @tree_low_cst(%union.tree_node* %37, i32 1), !dbg !13472
  store i64 %call80, i64* %length, align 8, !dbg !13473
  %38 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13474
  %base81 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !13474
  %39 = bitcast %struct.tree_base* %base81 to i64*, !dbg !13474
  %bf.load82 = load i64, i64* %39, align 8, !dbg !13474
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !13474
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !13474
  %cmp85 = icmp eq i32 %bf.cast84, 14, !dbg !13474
  br i1 %cmp85, label %cond.true, label %cond.false, !dbg !13474

cond.true:                                        ; preds = %if.end79
  %40 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13474
  %call86 = call i32 @vector_type_mode(%union.tree_node* %40), !dbg !13474
  br label %cond.end, !dbg !13474

cond.false:                                       ; preds = %if.end79
  %41 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13474
  %type87 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !13474
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 6, !dbg !13474
  %bf.load88 = load i32, i32* %mode, align 4, !dbg !13474
  %bf.lshr89 = lshr i32 %bf.load88, 16, !dbg !13474
  %bf.clear90 = and i32 %bf.lshr89, 255, !dbg !13474
  br label %cond.end, !dbg !13474

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call86, %cond.true ], [ %bf.clear90, %cond.false ], !dbg !13474
  %idxprom = zext i32 %cond to i64, !dbg !13474
  %arrayidx91 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !13474
  %42 = load i8, i8* %arrayidx91, align 1, !dbg !13474
  %conv = zext i8 %42 to i16, !dbg !13474
  %conv92 = zext i16 %conv to i64, !dbg !13474
  %43 = load i64, i64* %length, align 8, !dbg !13476
  %cmp93 = icmp ne i64 %conv92, %43, !dbg !13477
  br i1 %cmp93, label %if.then103, label %lor.lhs.false95, !dbg !13478

lor.lhs.false95:                                  ; preds = %cond.end
  %44 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13479
  %45 = load i32, i32* @ix86_isa_flags, align 4, !dbg !13480
  %and = and i32 %45, 32, !dbg !13480
  %cmp96 = icmp ne i32 %and, 0, !dbg !13480
  %46 = zext i1 %cmp96 to i64, !dbg !13480
  %cond98 = select i1 %cmp96, i32 256, i32 128, !dbg !13480
  %call99 = call i32 @get_pointer_alignment(%union.tree_node* %44, i32 %cond98), !dbg !13481
  %div = sdiv i32 %call99, 8, !dbg !13482
  %47 = load i64, i64* %length, align 8, !dbg !13483
  %conv100 = trunc i64 %47 to i32, !dbg !13484
  %cmp101 = icmp slt i32 %div, %conv100, !dbg !13485
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !13486

if.then103:                                       ; preds = %lor.lhs.false95, %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13487
  br label %return, !dbg !13487

if.end104:                                        ; preds = %lor.lhs.false95
  %48 = load i64, i64* %length, align 8, !dbg !13488
  %cmp105 = icmp ugt i64 %48, 8, !dbg !13490
  br i1 %cmp105, label %if.then107, label %if.end108, !dbg !13491

if.then107:                                       ; preds = %if.end104
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13492
  br label %return, !dbg !13492

if.end108:                                        ; preds = %if.end104
  %49 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !13493
  %call109 = call i32 @integer_zerop(%union.tree_node* %49), !dbg !13495
  %tobool110 = icmp ne i32 %call109, 0, !dbg !13495
  br i1 %tobool110, label %if.then111, label %if.else, !dbg !13496

if.then111:                                       ; preds = %if.end108
  store i64 0, i64* %cval, align 8, !dbg !13497
  br label %if.end119, !dbg !13498

if.else:                                          ; preds = %if.end108
  %50 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !13499
  %call112 = call i64 @tree_low_cst(%union.tree_node* %50, i32 1), !dbg !13501
  store i64 %call112, i64* %cval, align 8, !dbg !13502
  %51 = load i64, i64* %cval, align 8, !dbg !13503
  %and113 = and i64 %51, 255, !dbg !13503
  store i64 %and113, i64* %cval, align 8, !dbg !13503
  %52 = load i64, i64* %cval, align 8, !dbg !13504
  %shl = shl i64 %52, 8, !dbg !13505
  %53 = load i64, i64* %cval, align 8, !dbg !13506
  %or = or i64 %53, %shl, !dbg !13506
  store i64 %or, i64* %cval, align 8, !dbg !13506
  %54 = load i64, i64* %cval, align 8, !dbg !13507
  %shl114 = shl i64 %54, 16, !dbg !13508
  %55 = load i64, i64* %cval, align 8, !dbg !13509
  %or115 = or i64 %55, %shl114, !dbg !13509
  store i64 %or115, i64* %cval, align 8, !dbg !13509
  %56 = load i64, i64* %cval, align 8, !dbg !13510
  %shl116 = shl i64 %56, 31, !dbg !13511
  %shl117 = shl i64 %shl116, 1, !dbg !13512
  %57 = load i64, i64* %cval, align 8, !dbg !13513
  %or118 = or i64 %57, %shl117, !dbg !13513
  store i64 %or118, i64* %cval, align 8, !dbg !13513
  br label %if.end119

if.end119:                                        ; preds = %if.else, %if.then111
  %58 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13514
  %59 = load i64, i64* %cval, align 8, !dbg !13515
  %call120 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %58, i64 %59), !dbg !13516
  store %union.tree_node* %call120, %union.tree_node** %ret, align 8, !dbg !13517
  %60 = load i32, i32* %loc.addr, align 4, !dbg !13518
  %61 = load i32, i32* %loc.addr, align 4, !dbg !13519
  %62 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13520
  %call121 = call %union.tree_node* @build_pointer_type(%union.tree_node* %62), !dbg !13521
  %63 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13522
  %call122 = call %union.tree_node* @fold_convert_loc(i32 %61, %union.tree_node* %call121, %union.tree_node* %63), !dbg !13523
  %call123 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %60, %union.tree_node* %call122), !dbg !13524
  store %union.tree_node* %call123, %union.tree_node** %var, align 8, !dbg !13525
  %64 = load %union.tree_node*, %union.tree_node** %etype, align 8, !dbg !13526
  %65 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13526
  %66 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13526
  %call124 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !13526
  store %union.tree_node* %call124, %union.tree_node** %ret, align 8, !dbg !13527
  %67 = load i8, i8* %ignore.addr, align 1, !dbg !13528
  %tobool125 = icmp ne i8 %67, 0, !dbg !13528
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !13530

if.then126:                                       ; preds = %if.end119
  %68 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13531
  store %union.tree_node* %68, %union.tree_node** %retval, align 8, !dbg !13532
  br label %return, !dbg !13532

if.end127:                                        ; preds = %if.end119
  %69 = load i32, i32* %loc.addr, align 4, !dbg !13533
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13534
  %71 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13535
  %72 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13536
  %call128 = call %union.tree_node* @omit_one_operand_loc(i32 %69, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !13537
  store %union.tree_node* %call128, %union.tree_node** %retval, align 8, !dbg !13538
  br label %return, !dbg !13538

return:                                           ; preds = %if.end127, %if.then126, %if.then107, %if.then103, %if.then78, %if.then74, %if.then34, %if.then26, %if.then19, %if.then12, %if.then8, %if.then
  %73 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13539
  ret %union.tree_node* %73, !dbg !13539
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @var_decl_component_p(%union.tree_node* %var) #0 !dbg !13540 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %inner = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !13541, metadata !DIExpression()), !dbg !13542
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !13543, metadata !DIExpression()), !dbg !13544
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !13545
  store %union.tree_node* %0, %union.tree_node** %inner, align 8, !dbg !13544
  br label %while.cond, !dbg !13546

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13547
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !13548
  %tobool = icmp ne i8 %call, 0, !dbg !13546
  br i1 %tobool, label %while.body, label %while.end, !dbg !13546

while.body:                                       ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13549
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !13549
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13549
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13549
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13549
  store %union.tree_node* %3, %union.tree_node** %inner, align 8, !dbg !13550
  br label %while.cond, !dbg !13546, !llvm.loop !13551

while.end:                                        ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !13552
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !13552
  %bf.load = load i64, i64* %5, align 8, !dbg !13552
  %bf.clear = and i64 %bf.load, 65535, !dbg !13552
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13552
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !13552
  br i1 %cmp, label %lor.end39, label %lor.lhs.false, !dbg !13552

lor.lhs.false:                                    ; preds = %while.end
  %6 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13552
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13552
  %bf.load2 = load i64, i64* %7, align 8, !dbg !13552
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13552
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13552
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !13552
  br i1 %cmp5, label %lor.end39, label %lor.lhs.false6, !dbg !13552

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !13552
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !13552
  %bf.load8 = load i64, i64* %9, align 8, !dbg !13552
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !13552
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !13552
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !13552
  br i1 %cmp11, label %lor.end39, label %lor.rhs, !dbg !13552

lor.rhs:                                          ; preds = %lor.lhs.false6
  %10 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !13552
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !13552
  %bf.load13 = load i64, i64* %11, align 8, !dbg !13552
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !13552
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !13552
  %cmp16 = icmp eq i32 %bf.cast15, 141, !dbg !13552
  br i1 %cmp16, label %land.rhs, label %land.end, !dbg !13552

land.rhs:                                         ; preds = %lor.rhs
  %12 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !13552
  %var17 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !13552
  %13 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !13552
  %base18 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !13552
  %14 = bitcast %struct.tree_base* %base18 to i64*, !dbg !13552
  %bf.load19 = load i64, i64* %14, align 8, !dbg !13552
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !13552
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !13552
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !13552
  br i1 %cmp22, label %lor.end, label %lor.lhs.false23, !dbg !13552

lor.lhs.false23:                                  ; preds = %land.rhs
  %15 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %ssa_name24 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !13552
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !13552
  %16 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !13552
  %base26 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !13552
  %17 = bitcast %struct.tree_base* %base26 to i64*, !dbg !13552
  %bf.load27 = load i64, i64* %17, align 8, !dbg !13552
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !13552
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !13552
  %cmp30 = icmp eq i32 %bf.cast29, 34, !dbg !13552
  br i1 %cmp30, label %lor.end, label %lor.rhs31, !dbg !13552

lor.rhs31:                                        ; preds = %lor.lhs.false23
  %18 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13552
  %ssa_name32 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !13552
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 1, !dbg !13552
  %19 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !13552
  %base34 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !13552
  %20 = bitcast %struct.tree_base* %base34 to i64*, !dbg !13552
  %bf.load35 = load i64, i64* %20, align 8, !dbg !13552
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !13552
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !13552
  %cmp38 = icmp eq i32 %bf.cast37, 36, !dbg !13552
  br label %lor.end, !dbg !13552

lor.end:                                          ; preds = %lor.rhs31, %lor.lhs.false23, %land.rhs
  %21 = phi i1 [ true, %lor.lhs.false23 ], [ true, %land.rhs ], [ %cmp38, %lor.rhs31 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %22 = phi i1 [ false, %lor.rhs ], [ %21, %lor.end ], !dbg !13553
  br label %lor.end39, !dbg !13552

lor.end39:                                        ; preds = %land.end, %lor.lhs.false6, %lor.lhs.false, %while.end
  %23 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false ], [ true, %while.end ], [ %22, %land.end ]
  %lor.ext = zext i1 %23 to i32, !dbg !13552
  %conv = trunc i32 %lor.ext to i8, !dbg !13552
  ret i8 %conv, !dbg !13554
}

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

declare dso_local i8* @strstr(i8*, i8*) #2

declare dso_local zeroext i8 @optimize_insn_for_speed_p() #2

declare dso_local i64 @strspn(i8*, i8*) #2

declare dso_local %union.tree_node* @omit_two_operands_loc(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i64 @strcspn(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @target_char_cast(%union.tree_node* %cst, i8* %p) #0 !dbg !13555 {
entry:
  %retval = alloca i32, align 4
  %cst.addr = alloca %union.tree_node*, align 8
  %p.addr = alloca i8*, align 8
  %val = alloca i64, align 8
  %hostval = alloca i64, align 8
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !13558, metadata !DIExpression()), !dbg !13559
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !13560, metadata !DIExpression()), !dbg !13561
  call void @llvm.dbg.declare(metadata i64* %val, metadata !13562, metadata !DIExpression()), !dbg !13563
  call void @llvm.dbg.declare(metadata i64* %hostval, metadata !13564, metadata !DIExpression()), !dbg !13565
  %0 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !13566
  %call = call i32 @host_integerp(%union.tree_node* %0, i32 1), !dbg !13568
  %tobool = icmp ne i32 %call, 0, !dbg !13568
  br i1 %tobool, label %if.end, label %if.then, !dbg !13569

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !13570
  br label %return, !dbg !13570

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !13571
  %call1 = call i64 @tree_low_cst(%union.tree_node* %1, i32 1), !dbg !13572
  store i64 %call1, i64* %val, align 8, !dbg !13573
  %2 = load i64, i64* %val, align 8, !dbg !13574
  %and = and i64 %2, 255, !dbg !13574
  store i64 %and, i64* %val, align 8, !dbg !13574
  %3 = load i64, i64* %val, align 8, !dbg !13576
  store i64 %3, i64* %hostval, align 8, !dbg !13577
  %4 = load i64, i64* %hostval, align 8, !dbg !13578
  %and2 = and i64 %4, 255, !dbg !13578
  store i64 %and2, i64* %hostval, align 8, !dbg !13578
  %5 = load i64, i64* %val, align 8, !dbg !13580
  %6 = load i64, i64* %hostval, align 8, !dbg !13582
  %cmp = icmp ne i64 %5, %6, !dbg !13583
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !13584

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !13585
  br label %return, !dbg !13585

if.end4:                                          ; preds = %if.end
  %7 = load i64, i64* %hostval, align 8, !dbg !13586
  %conv = trunc i64 %7 to i8, !dbg !13586
  %8 = load i8*, i8** %p.addr, align 8, !dbg !13587
  store i8 %conv, i8* %8, align 1, !dbg !13588
  store i32 0, i32* %retval, align 4, !dbg !13589
  br label %return, !dbg !13589

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !13590
  ret i32 %9, !dbg !13590
}

declare dso_local i8* @strrchr(i8*, i32) #2

declare dso_local %union.tree_node* @build_pointer_type_for_mode(%union.tree_node*, i32, i8 zeroext) #2

declare dso_local i8* @strpbrk(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_builtin_expect_predicate(i32 %loc, %union.tree_node* %pred, %union.tree_node* %expected) #0 !dbg !13591 {
entry:
  %loc.addr = alloca i32, align 4
  %pred.addr = alloca %union.tree_node*, align 8
  %expected.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %arg_types = alloca %union.tree_node*, align 8
  %pred_type = alloca %union.tree_node*, align 8
  %expected_type = alloca %union.tree_node*, align 8
  %call_expr = alloca %union.tree_node*, align 8
  %ret_type = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !13592, metadata !DIExpression()), !dbg !13593
  store %union.tree_node* %pred, %union.tree_node** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %pred.addr, metadata !13594, metadata !DIExpression()), !dbg !13595
  store %union.tree_node* %expected, %union.tree_node** %expected.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expected.addr, metadata !13596, metadata !DIExpression()), !dbg !13597
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !13598, metadata !DIExpression()), !dbg !13599
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_types, metadata !13600, metadata !DIExpression()), !dbg !13601
  call void @llvm.dbg.declare(metadata %union.tree_node** %pred_type, metadata !13602, metadata !DIExpression()), !dbg !13603
  call void @llvm.dbg.declare(metadata %union.tree_node** %expected_type, metadata !13604, metadata !DIExpression()), !dbg !13605
  call void @llvm.dbg.declare(metadata %union.tree_node** %call_expr, metadata !13606, metadata !DIExpression()), !dbg !13607
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret_type, metadata !13608, metadata !DIExpression()), !dbg !13609
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 446), align 16, !dbg !13610
  store %union.tree_node* %0, %union.tree_node** %fn, align 8, !dbg !13611
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13612
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !13612
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13612
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13612
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !13612
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !13612
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !13612
  store %union.tree_node* %3, %union.tree_node** %arg_types, align 8, !dbg !13613
  %4 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13614
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !13614
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !13614
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !13614
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !13614
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !13614
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !13614
  store %union.tree_node* %6, %union.tree_node** %ret_type, align 8, !dbg !13615
  %7 = load %union.tree_node*, %union.tree_node** %arg_types, align 8, !dbg !13616
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !13616
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !13616
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13616
  store %union.tree_node* %8, %union.tree_node** %pred_type, align 8, !dbg !13617
  %9 = load %union.tree_node*, %union.tree_node** %arg_types, align 8, !dbg !13618
  %common6 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !13618
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1, !dbg !13618
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !13618
  %list7 = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !13618
  %value8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2, !dbg !13618
  %11 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !13618
  store %union.tree_node* %11, %union.tree_node** %expected_type, align 8, !dbg !13619
  %12 = load i32, i32* %loc.addr, align 4, !dbg !13620
  %13 = load %union.tree_node*, %union.tree_node** %pred_type, align 8, !dbg !13621
  %14 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !13622
  %call = call %union.tree_node* @fold_convert_loc(i32 %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !13623
  store %union.tree_node* %call, %union.tree_node** %pred.addr, align 8, !dbg !13624
  %15 = load i32, i32* %loc.addr, align 4, !dbg !13625
  %16 = load %union.tree_node*, %union.tree_node** %expected_type, align 8, !dbg !13626
  %17 = load %union.tree_node*, %union.tree_node** %expected.addr, align 8, !dbg !13627
  %call9 = call %union.tree_node* @fold_convert_loc(i32 %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !13628
  store %union.tree_node* %call9, %union.tree_node** %expected.addr, align 8, !dbg !13629
  %18 = load i32, i32* %loc.addr, align 4, !dbg !13630
  %19 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13631
  %20 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !13632
  %21 = load %union.tree_node*, %union.tree_node** %expected.addr, align 8, !dbg !13633
  %call10 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %18, %union.tree_node* %19, i32 2, %union.tree_node* %20, %union.tree_node* %21), !dbg !13634
  store %union.tree_node* %call10, %union.tree_node** %call_expr, align 8, !dbg !13635
  %22 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !13636
  %common11 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !13636
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !13636
  %23 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !13636
  %24 = load %union.tree_node*, %union.tree_node** %call_expr, align 8, !dbg !13636
  %25 = load %union.tree_node*, %union.tree_node** %ret_type, align 8, !dbg !13636
  %call13 = call %union.tree_node* @build_int_cst(%union.tree_node* %25, i64 0), !dbg !13636
  %call14 = call %union.tree_node* @build2_stat(i32 102, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %call13), !dbg !13636
  ret %union.tree_node* %call14, !dbg !13637
}

declare dso_local i32 @real_onep(%union.tree_node*) #2

declare dso_local zeroext i8 @real_powi(%struct.real_value*, i32, %struct.real_value*, i64) #2

declare dso_local void @real_copysign(%struct.real_value*, %struct.real_value*) #2

declare dso_local %union.tree_node* @fold_strip_sign_ops(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cstu(%union.tree_node*, i64) #2

declare dso_local i64 @compute_builtin_object_size(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_sincos(i32 %loc, %union.tree_node* %arg0, %union.tree_node* %arg1, %union.tree_node* %arg2) #0 !dbg !13638 {
entry:
  %loc.addr = alloca i32, align 4
  %arg0.addr = alloca %union.tree_node*, align 8
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !13639, metadata !DIExpression()), !dbg !13640
  store %union.tree_node* %arg0, %union.tree_node** %arg0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0.addr, metadata !13641, metadata !DIExpression()), !dbg !13642
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !13643, metadata !DIExpression()), !dbg !13644
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !13645, metadata !DIExpression()), !dbg !13646
  ret %union.tree_node* null, !dbg !13647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_memory_op(i32 %loc, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len, %union.tree_node* %type, i8 zeroext %ignore, i32 %endp) #0 !dbg !13648 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %ignore.addr = alloca i8, align 1
  %endp.addr = alloca i32, align 4
  %destvar = alloca %union.tree_node*, align 8
  %srcvar = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %srctype = alloca %union.tree_node*, align 8
  %desttype = alloca %union.tree_node*, align 8
  %src_align = alloca i32, align 4
  %dest_align = alloca i32, align 4
  %fn = alloca %union.tree_node*, align 8
  %src_base = alloca %union.tree_node*, align 8
  %dest_base = alloca %union.tree_node*, align 8
  %fn59 = alloca %union.tree_node*, align 8
  %src_offset = alloca i64, align 8
  %dest_offset = alloca i64, align 8
  %size = alloca i64, align 8
  %maxsize = alloca i64, align 8
  %tem = alloca %union.tree_node*, align 8
  %tem266 = alloca %union.tree_node*, align 8
  %srcptype = alloca %union.tree_node*, align 8
  %destptype = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !13651, metadata !DIExpression()), !dbg !13652
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !13653, metadata !DIExpression()), !dbg !13654
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !13655, metadata !DIExpression()), !dbg !13656
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !13657, metadata !DIExpression()), !dbg !13658
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !13659, metadata !DIExpression()), !dbg !13660
  store i8 %ignore, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !13661, metadata !DIExpression()), !dbg !13662
  store i32 %endp, i32* %endp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %endp.addr, metadata !13663, metadata !DIExpression()), !dbg !13664
  call void @llvm.dbg.declare(metadata %union.tree_node** %destvar, metadata !13665, metadata !DIExpression()), !dbg !13666
  call void @llvm.dbg.declare(metadata %union.tree_node** %srcvar, metadata !13667, metadata !DIExpression()), !dbg !13668
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !13669, metadata !DIExpression()), !dbg !13670
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13671
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !13673
  %tobool = icmp ne i8 %call, 0, !dbg !13673
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !13674

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13675
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !13676
  %tobool2 = icmp ne i8 %call1, 0, !dbg !13676
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !13677

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13678
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !13679
  %tobool5 = icmp ne i8 %call4, 0, !dbg !13679
  br i1 %tobool5, label %if.end, label %if.then, !dbg !13680

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13681
  br label %return, !dbg !13681

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13682
  %call6 = call i32 @integer_zerop(%union.tree_node* %3), !dbg !13684
  %tobool7 = icmp ne i32 %call6, 0, !dbg !13684
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !13685

if.then8:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !13686
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13687
  %6 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13688
  %7 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13689
  %call9 = call %union.tree_node* @omit_one_operand_loc(i32 %4, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %7), !dbg !13690
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !13691
  br label %return, !dbg !13691

if.end10:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13692
  %9 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13694
  %call11 = call i32 @operand_equal_p(%union.tree_node* %8, %union.tree_node* %9, i32 0), !dbg !13695
  %tobool12 = icmp ne i32 %call11, 0, !dbg !13695
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !13696

if.then13:                                        ; preds = %if.end10
  %10 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13697
  store %union.tree_node* %10, %union.tree_node** %expr, align 8, !dbg !13698
  br label %if.end703, !dbg !13699

if.else:                                          ; preds = %if.end10
  call void @llvm.dbg.declare(metadata %union.tree_node** %srctype, metadata !13700, metadata !DIExpression()), !dbg !13702
  call void @llvm.dbg.declare(metadata %union.tree_node** %desttype, metadata !13703, metadata !DIExpression()), !dbg !13704
  call void @llvm.dbg.declare(metadata i32* %src_align, metadata !13705, metadata !DIExpression()), !dbg !13706
  call void @llvm.dbg.declare(metadata i32* %dest_align, metadata !13707, metadata !DIExpression()), !dbg !13708
  %11 = load i32, i32* %endp.addr, align 4, !dbg !13709
  %cmp = icmp eq i32 %11, 3, !dbg !13711
  br i1 %cmp, label %if.then14, label %if.end231, !dbg !13712

if.then14:                                        ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13713
  %13 = load i32, i32* @ix86_isa_flags, align 4, !dbg !13715
  %and = and i32 %13, 32, !dbg !13715
  %cmp15 = icmp ne i32 %and, 0, !dbg !13715
  %14 = zext i1 %cmp15 to i64, !dbg !13715
  %cond = select i1 %cmp15, i32 256, i32 128, !dbg !13715
  %call16 = call i32 @get_pointer_alignment(%union.tree_node* %12, i32 %cond), !dbg !13716
  store i32 %call16, i32* %src_align, align 4, !dbg !13717
  %15 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13718
  %16 = load i32, i32* @ix86_isa_flags, align 4, !dbg !13719
  %and17 = and i32 %16, 32, !dbg !13719
  %cmp18 = icmp ne i32 %and17, 0, !dbg !13719
  %17 = zext i1 %cmp18 to i64, !dbg !13719
  %cond19 = select i1 %cmp18, i32 256, i32 128, !dbg !13719
  %call20 = call i32 @get_pointer_alignment(%union.tree_node* %15, i32 %cond19), !dbg !13720
  store i32 %call20, i32* %dest_align, align 4, !dbg !13721
  %18 = load i32, i32* %dest_align, align 4, !dbg !13722
  %tobool21 = icmp ne i32 %18, 0, !dbg !13722
  br i1 %tobool21, label %lor.lhs.false22, label %if.then24, !dbg !13724

lor.lhs.false22:                                  ; preds = %if.then14
  %19 = load i32, i32* %src_align, align 4, !dbg !13725
  %tobool23 = icmp ne i32 %19, 0, !dbg !13725
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !13726

if.then24:                                        ; preds = %lor.lhs.false22, %if.then14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13727
  br label %return, !dbg !13727

if.end25:                                         ; preds = %lor.lhs.false22
  %20 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13728
  %call26 = call zeroext i8 @readonly_data_expr(%union.tree_node* %20), !dbg !13730
  %conv = zext i8 %call26 to i32, !dbg !13730
  %tobool27 = icmp ne i32 %conv, 0, !dbg !13730
  br i1 %tobool27, label %if.then38, label %lor.lhs.false28, !dbg !13731

lor.lhs.false28:                                  ; preds = %if.end25
  %21 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13732
  %call29 = call i32 @host_integerp(%union.tree_node* %21, i32 1), !dbg !13733
  %tobool30 = icmp ne i32 %call29, 0, !dbg !13733
  br i1 %tobool30, label %land.lhs.true, label %if.end43, !dbg !13734

land.lhs.true:                                    ; preds = %lor.lhs.false28
  %22 = load i32, i32* %src_align, align 4, !dbg !13735
  %23 = load i32, i32* %dest_align, align 4, !dbg !13735
  %cmp31 = icmp slt i32 %22, %23, !dbg !13735
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !13735

cond.true:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %src_align, align 4, !dbg !13735
  br label %cond.end, !dbg !13735

cond.false:                                       ; preds = %land.lhs.true
  %25 = load i32, i32* %dest_align, align 4, !dbg !13735
  br label %cond.end, !dbg !13735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond33 = phi i32 [ %24, %cond.true ], [ %25, %cond.false ], !dbg !13735
  %div = sdiv i32 %cond33, 8, !dbg !13736
  %conv34 = sext i32 %div to i64, !dbg !13735
  %26 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13737
  %call35 = call i64 @tree_low_cst(%union.tree_node* %26, i32 1), !dbg !13738
  %cmp36 = icmp sge i64 %conv34, %call35, !dbg !13739
  br i1 %cmp36, label %if.then38, label %if.end43, !dbg !13740

if.then38:                                        ; preds = %cond.end, %if.end25
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !13741, metadata !DIExpression()), !dbg !13743
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !13744
  store %union.tree_node* %27, %union.tree_node** %fn, align 8, !dbg !13743
  %28 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13745
  %tobool39 = icmp ne %union.tree_node* %28, null, !dbg !13745
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !13747

if.then40:                                        ; preds = %if.then38
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13748
  br label %return, !dbg !13748

if.end41:                                         ; preds = %if.then38
  %29 = load i32, i32* %loc.addr, align 4, !dbg !13749
  %30 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13750
  %31 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13751
  %32 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13752
  %33 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13753
  %call42 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %29, %union.tree_node* %30, i32 3, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !13754
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !13755
  br label %return, !dbg !13755

if.end43:                                         ; preds = %cond.end, %lor.lhs.false28
  %34 = load i32, i32* %loc.addr, align 4, !dbg !13756
  %35 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13757
  %call44 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %34, %union.tree_node* %35), !dbg !13758
  store %union.tree_node* %call44, %union.tree_node** %srcvar, align 8, !dbg !13759
  %36 = load i32, i32* %loc.addr, align 4, !dbg !13760
  %37 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13761
  %call45 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %36, %union.tree_node* %37), !dbg !13762
  store %union.tree_node* %call45, %union.tree_node** %destvar, align 8, !dbg !13763
  %38 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !13764
  %tobool46 = icmp ne %union.tree_node* %38, null, !dbg !13764
  br i1 %tobool46, label %land.lhs.true47, label %if.end230, !dbg !13766

land.lhs.true47:                                  ; preds = %if.end43
  %39 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !13767
  %base = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !13767
  %40 = bitcast %struct.tree_base* %base to i64*, !dbg !13767
  %bf.load = load i64, i64* %40, align 8, !dbg !13767
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !13767
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13767
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13767
  %tobool48 = icmp ne i32 %bf.cast, 0, !dbg !13767
  br i1 %tobool48, label %if.end230, label %land.lhs.true49, !dbg !13768

land.lhs.true49:                                  ; preds = %land.lhs.true47
  %41 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !13769
  %tobool50 = icmp ne %union.tree_node* %41, null, !dbg !13769
  br i1 %tobool50, label %land.lhs.true51, label %if.end230, !dbg !13770

land.lhs.true51:                                  ; preds = %land.lhs.true49
  %42 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !13771
  %base52 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !13771
  %43 = bitcast %struct.tree_base* %base52 to i64*, !dbg !13771
  %bf.load53 = load i64, i64* %43, align 8, !dbg !13771
  %bf.lshr54 = lshr i64 %bf.load53, 19, !dbg !13771
  %bf.clear55 = and i64 %bf.lshr54, 1, !dbg !13771
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !13771
  %tobool57 = icmp ne i32 %bf.cast56, 0, !dbg !13771
  br i1 %tobool57, label %if.end230, label %if.then58, !dbg !13772

if.then58:                                        ; preds = %land.lhs.true51
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_base, metadata !13773, metadata !DIExpression()), !dbg !13775
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest_base, metadata !13776, metadata !DIExpression()), !dbg !13777
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn59, metadata !13778, metadata !DIExpression()), !dbg !13779
  call void @llvm.dbg.declare(metadata i64* %src_offset, metadata !13780, metadata !DIExpression()), !dbg !13781
  store i64 0, i64* %src_offset, align 8, !dbg !13781
  call void @llvm.dbg.declare(metadata i64* %dest_offset, metadata !13782, metadata !DIExpression()), !dbg !13783
  store i64 0, i64* %dest_offset, align 8, !dbg !13783
  call void @llvm.dbg.declare(metadata i64* %size, metadata !13784, metadata !DIExpression()), !dbg !13785
  store i64 -1, i64* %size, align 8, !dbg !13785
  call void @llvm.dbg.declare(metadata i64* %maxsize, metadata !13786, metadata !DIExpression()), !dbg !13787
  store i64 -1, i64* %maxsize, align 8, !dbg !13787
  %44 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !13788
  store %union.tree_node* %44, %union.tree_node** %src_base, align 8, !dbg !13789
  %45 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13790
  %call60 = call zeroext i8 @handled_component_p(%union.tree_node* %45), !dbg !13792
  %tobool61 = icmp ne i8 %call60, 0, !dbg !13792
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !13793

if.then62:                                        ; preds = %if.then58
  %46 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13794
  %call63 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %46, i64* %src_offset, i64* %size, i64* %maxsize), !dbg !13795
  store %union.tree_node* %call63, %union.tree_node** %src_base, align 8, !dbg !13796
  br label %if.end64, !dbg !13797

if.end64:                                         ; preds = %if.then62, %if.then58
  %47 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !13798
  store %union.tree_node* %47, %union.tree_node** %dest_base, align 8, !dbg !13799
  %48 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13800
  %call65 = call zeroext i8 @handled_component_p(%union.tree_node* %48), !dbg !13802
  %tobool66 = icmp ne i8 %call65, 0, !dbg !13802
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !13803

if.then67:                                        ; preds = %if.end64
  %49 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13804
  %call68 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %49, i64* %dest_offset, i64* %size, i64* %maxsize), !dbg !13805
  store %union.tree_node* %call68, %union.tree_node** %dest_base, align 8, !dbg !13806
  br label %if.end69, !dbg !13807

if.end69:                                         ; preds = %if.then67, %if.end64
  %50 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13808
  %call70 = call i32 @host_integerp(%union.tree_node* %50, i32 1), !dbg !13810
  %tobool71 = icmp ne i32 %call70, 0, !dbg !13810
  br i1 %tobool71, label %if.then72, label %if.else79, !dbg !13811

if.then72:                                        ; preds = %if.end69
  %51 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13812
  %call73 = call i64 @tree_low_cst(%union.tree_node* %51, i32 1), !dbg !13814
  store i64 %call73, i64* %maxsize, align 8, !dbg !13815
  %52 = load i64, i64* %maxsize, align 8, !dbg !13816
  %cmp74 = icmp sgt i64 %52, 1152921504606846975, !dbg !13818
  br i1 %cmp74, label %if.then76, label %if.else77, !dbg !13819

if.then76:                                        ; preds = %if.then72
  store i64 -1, i64* %maxsize, align 8, !dbg !13820
  br label %if.end78, !dbg !13821

if.else77:                                        ; preds = %if.then72
  %53 = load i64, i64* %maxsize, align 8, !dbg !13822
  %mul = mul nsw i64 %53, 8, !dbg !13822
  store i64 %mul, i64* %maxsize, align 8, !dbg !13822
  br label %if.end78

if.end78:                                         ; preds = %if.else77, %if.then76
  br label %if.end80, !dbg !13823

if.else79:                                        ; preds = %if.end69
  store i64 -1, i64* %maxsize, align 8, !dbg !13824
  br label %if.end80

if.end80:                                         ; preds = %if.else79, %if.end78
  %54 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %base81 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !13825
  %55 = bitcast %struct.tree_base* %base81 to i64*, !dbg !13825
  %bf.load82 = load i64, i64* %55, align 8, !dbg !13825
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !13825
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !13825
  %cmp85 = icmp eq i32 %bf.cast84, 32, !dbg !13825
  br i1 %cmp85, label %land.lhs.true133, label %lor.lhs.false87, !dbg !13825

lor.lhs.false87:                                  ; preds = %if.end80
  %56 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %base88 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !13825
  %57 = bitcast %struct.tree_base* %base88 to i64*, !dbg !13825
  %bf.load89 = load i64, i64* %57, align 8, !dbg !13825
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !13825
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !13825
  %cmp92 = icmp eq i32 %bf.cast91, 34, !dbg !13825
  br i1 %cmp92, label %land.lhs.true133, label %lor.lhs.false94, !dbg !13825

lor.lhs.false94:                                  ; preds = %lor.lhs.false87
  %58 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %base95 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !13825
  %59 = bitcast %struct.tree_base* %base95 to i64*, !dbg !13825
  %bf.load96 = load i64, i64* %59, align 8, !dbg !13825
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !13825
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !13825
  %cmp99 = icmp eq i32 %bf.cast98, 36, !dbg !13825
  br i1 %cmp99, label %land.lhs.true133, label %lor.lhs.false101, !dbg !13825

lor.lhs.false101:                                 ; preds = %lor.lhs.false94
  %60 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %base102 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !13825
  %61 = bitcast %struct.tree_base* %base102 to i64*, !dbg !13825
  %bf.load103 = load i64, i64* %61, align 8, !dbg !13825
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !13825
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !13825
  %cmp106 = icmp eq i32 %bf.cast105, 141, !dbg !13825
  br i1 %cmp106, label %land.lhs.true108, label %if.else197, !dbg !13825

land.lhs.true108:                                 ; preds = %lor.lhs.false101
  %62 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %ssa_name = bitcast %union.tree_node* %62 to %struct.tree_ssa_name*, !dbg !13825
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !13825
  %63 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13825
  %base109 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !13825
  %64 = bitcast %struct.tree_base* %base109 to i64*, !dbg !13825
  %bf.load110 = load i64, i64* %64, align 8, !dbg !13825
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !13825
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !13825
  %cmp113 = icmp eq i32 %bf.cast112, 32, !dbg !13825
  br i1 %cmp113, label %land.lhs.true133, label %lor.lhs.false115, !dbg !13825

lor.lhs.false115:                                 ; preds = %land.lhs.true108
  %65 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %ssa_name116 = bitcast %union.tree_node* %65 to %struct.tree_ssa_name*, !dbg !13825
  %var117 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name116, i32 0, i32 1, !dbg !13825
  %66 = load %union.tree_node*, %union.tree_node** %var117, align 8, !dbg !13825
  %base118 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !13825
  %67 = bitcast %struct.tree_base* %base118 to i64*, !dbg !13825
  %bf.load119 = load i64, i64* %67, align 8, !dbg !13825
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !13825
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !13825
  %cmp122 = icmp eq i32 %bf.cast121, 34, !dbg !13825
  br i1 %cmp122, label %land.lhs.true133, label %lor.lhs.false124, !dbg !13825

lor.lhs.false124:                                 ; preds = %lor.lhs.false115
  %68 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13825
  %ssa_name125 = bitcast %union.tree_node* %68 to %struct.tree_ssa_name*, !dbg !13825
  %var126 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name125, i32 0, i32 1, !dbg !13825
  %69 = load %union.tree_node*, %union.tree_node** %var126, align 8, !dbg !13825
  %base127 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !13825
  %70 = bitcast %struct.tree_base* %base127 to i64*, !dbg !13825
  %bf.load128 = load i64, i64* %70, align 8, !dbg !13825
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !13825
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !13825
  %cmp131 = icmp eq i32 %bf.cast130, 36, !dbg !13825
  br i1 %cmp131, label %land.lhs.true133, label %if.else197, !dbg !13827

land.lhs.true133:                                 ; preds = %lor.lhs.false124, %lor.lhs.false115, %land.lhs.true108, %lor.lhs.false94, %lor.lhs.false87, %if.end80
  %71 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %base134 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !13828
  %72 = bitcast %struct.tree_base* %base134 to i64*, !dbg !13828
  %bf.load135 = load i64, i64* %72, align 8, !dbg !13828
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !13828
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !13828
  %cmp138 = icmp eq i32 %bf.cast137, 32, !dbg !13828
  br i1 %cmp138, label %if.then188, label %lor.lhs.false140, !dbg !13828

lor.lhs.false140:                                 ; preds = %land.lhs.true133
  %73 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %base141 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !13828
  %74 = bitcast %struct.tree_base* %base141 to i64*, !dbg !13828
  %bf.load142 = load i64, i64* %74, align 8, !dbg !13828
  %bf.clear143 = and i64 %bf.load142, 65535, !dbg !13828
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !13828
  %cmp145 = icmp eq i32 %bf.cast144, 34, !dbg !13828
  br i1 %cmp145, label %if.then188, label %lor.lhs.false147, !dbg !13828

lor.lhs.false147:                                 ; preds = %lor.lhs.false140
  %75 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %base148 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !13828
  %76 = bitcast %struct.tree_base* %base148 to i64*, !dbg !13828
  %bf.load149 = load i64, i64* %76, align 8, !dbg !13828
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !13828
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !13828
  %cmp152 = icmp eq i32 %bf.cast151, 36, !dbg !13828
  br i1 %cmp152, label %if.then188, label %lor.lhs.false154, !dbg !13828

lor.lhs.false154:                                 ; preds = %lor.lhs.false147
  %77 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %base155 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !13828
  %78 = bitcast %struct.tree_base* %base155 to i64*, !dbg !13828
  %bf.load156 = load i64, i64* %78, align 8, !dbg !13828
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !13828
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !13828
  %cmp159 = icmp eq i32 %bf.cast158, 141, !dbg !13828
  br i1 %cmp159, label %land.lhs.true161, label %if.else197, !dbg !13828

land.lhs.true161:                                 ; preds = %lor.lhs.false154
  %79 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %ssa_name162 = bitcast %union.tree_node* %79 to %struct.tree_ssa_name*, !dbg !13828
  %var163 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name162, i32 0, i32 1, !dbg !13828
  %80 = load %union.tree_node*, %union.tree_node** %var163, align 8, !dbg !13828
  %base164 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !13828
  %81 = bitcast %struct.tree_base* %base164 to i64*, !dbg !13828
  %bf.load165 = load i64, i64* %81, align 8, !dbg !13828
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !13828
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !13828
  %cmp168 = icmp eq i32 %bf.cast167, 32, !dbg !13828
  br i1 %cmp168, label %if.then188, label %lor.lhs.false170, !dbg !13828

lor.lhs.false170:                                 ; preds = %land.lhs.true161
  %82 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %ssa_name171 = bitcast %union.tree_node* %82 to %struct.tree_ssa_name*, !dbg !13828
  %var172 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name171, i32 0, i32 1, !dbg !13828
  %83 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !13828
  %base173 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !13828
  %84 = bitcast %struct.tree_base* %base173 to i64*, !dbg !13828
  %bf.load174 = load i64, i64* %84, align 8, !dbg !13828
  %bf.clear175 = and i64 %bf.load174, 65535, !dbg !13828
  %bf.cast176 = trunc i64 %bf.clear175 to i32, !dbg !13828
  %cmp177 = icmp eq i32 %bf.cast176, 34, !dbg !13828
  br i1 %cmp177, label %if.then188, label %lor.lhs.false179, !dbg !13828

lor.lhs.false179:                                 ; preds = %lor.lhs.false170
  %85 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13828
  %ssa_name180 = bitcast %union.tree_node* %85 to %struct.tree_ssa_name*, !dbg !13828
  %var181 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name180, i32 0, i32 1, !dbg !13828
  %86 = load %union.tree_node*, %union.tree_node** %var181, align 8, !dbg !13828
  %base182 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !13828
  %87 = bitcast %struct.tree_base* %base182 to i64*, !dbg !13828
  %bf.load183 = load i64, i64* %87, align 8, !dbg !13828
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !13828
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !13828
  %cmp186 = icmp eq i32 %bf.cast185, 36, !dbg !13828
  br i1 %cmp186, label %if.then188, label %if.else197, !dbg !13829

if.then188:                                       ; preds = %lor.lhs.false179, %lor.lhs.false170, %land.lhs.true161, %lor.lhs.false147, %lor.lhs.false140, %land.lhs.true133
  %88 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13830
  %89 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13833
  %call189 = call i32 @operand_equal_p(%union.tree_node* %88, %union.tree_node* %89, i32 0), !dbg !13834
  %tobool190 = icmp ne i32 %call189, 0, !dbg !13834
  br i1 %tobool190, label %land.lhs.true191, label %if.end196, !dbg !13835

land.lhs.true191:                                 ; preds = %if.then188
  %90 = load i64, i64* %src_offset, align 8, !dbg !13836
  %91 = load i64, i64* %maxsize, align 8, !dbg !13837
  %92 = load i64, i64* %dest_offset, align 8, !dbg !13838
  %93 = load i64, i64* %maxsize, align 8, !dbg !13839
  %call192 = call zeroext i8 @ranges_overlap_p(i64 %90, i64 %91, i64 %92, i64 %93), !dbg !13840
  %conv193 = zext i8 %call192 to i32, !dbg !13840
  %tobool194 = icmp ne i32 %conv193, 0, !dbg !13840
  br i1 %tobool194, label %if.then195, label %if.end196, !dbg !13841

if.then195:                                       ; preds = %land.lhs.true191
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13842
  br label %return, !dbg !13842

if.end196:                                        ; preds = %land.lhs.true191, %if.then188
  br label %if.end225, !dbg !13843

if.else197:                                       ; preds = %lor.lhs.false179, %lor.lhs.false154, %lor.lhs.false124, %lor.lhs.false101
  %94 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13844
  %base198 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !13844
  %95 = bitcast %struct.tree_base* %base198 to i64*, !dbg !13844
  %bf.load199 = load i64, i64* %95, align 8, !dbg !13844
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !13844
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !13844
  %cmp202 = icmp eq i32 %bf.cast201, 47, !dbg !13846
  br i1 %cmp202, label %land.lhs.true204, label %if.else223, !dbg !13847

land.lhs.true204:                                 ; preds = %if.else197
  %96 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13848
  %base205 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !13848
  %97 = bitcast %struct.tree_base* %base205 to i64*, !dbg !13848
  %bf.load206 = load i64, i64* %97, align 8, !dbg !13848
  %bf.clear207 = and i64 %bf.load206, 65535, !dbg !13848
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !13848
  %cmp209 = icmp eq i32 %bf.cast208, 47, !dbg !13849
  br i1 %cmp209, label %if.then211, label %if.else223, !dbg !13850

if.then211:                                       ; preds = %land.lhs.true204
  %98 = load %union.tree_node*, %union.tree_node** %src_base, align 8, !dbg !13851
  %exp = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !13851
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13851
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13851
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13851
  %100 = load %union.tree_node*, %union.tree_node** %dest_base, align 8, !dbg !13854
  %exp212 = bitcast %union.tree_node* %100 to %struct.tree_exp*, !dbg !13854
  %operands213 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp212, i32 0, i32 3, !dbg !13854
  %arrayidx214 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands213, i64 0, i64 0, !dbg !13854
  %101 = load %union.tree_node*, %union.tree_node** %arrayidx214, align 8, !dbg !13854
  %call215 = call i32 @operand_equal_p(%union.tree_node* %99, %union.tree_node* %101, i32 0), !dbg !13855
  %tobool216 = icmp ne i32 %call215, 0, !dbg !13855
  br i1 %tobool216, label %lor.lhs.false217, label %if.then221, !dbg !13856

lor.lhs.false217:                                 ; preds = %if.then211
  %102 = load i64, i64* %src_offset, align 8, !dbg !13857
  %103 = load i64, i64* %maxsize, align 8, !dbg !13858
  %104 = load i64, i64* %dest_offset, align 8, !dbg !13859
  %105 = load i64, i64* %maxsize, align 8, !dbg !13860
  %call218 = call zeroext i8 @ranges_overlap_p(i64 %102, i64 %103, i64 %104, i64 %105), !dbg !13861
  %conv219 = zext i8 %call218 to i32, !dbg !13861
  %tobool220 = icmp ne i32 %conv219, 0, !dbg !13861
  br i1 %tobool220, label %if.then221, label %if.end222, !dbg !13862

if.then221:                                       ; preds = %lor.lhs.false217, %if.then211
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13863
  br label %return, !dbg !13863

if.end222:                                        ; preds = %lor.lhs.false217
  br label %if.end224, !dbg !13864

if.else223:                                       ; preds = %land.lhs.true204, %if.else197
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13865
  br label %return, !dbg !13865

if.end224:                                        ; preds = %if.end222
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.end196
  %106 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !13866
  store %union.tree_node* %106, %union.tree_node** %fn59, align 8, !dbg !13867
  %107 = load %union.tree_node*, %union.tree_node** %fn59, align 8, !dbg !13868
  %tobool226 = icmp ne %union.tree_node* %107, null, !dbg !13868
  br i1 %tobool226, label %if.end228, label %if.then227, !dbg !13870

if.then227:                                       ; preds = %if.end225
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13871
  br label %return, !dbg !13871

if.end228:                                        ; preds = %if.end225
  %108 = load i32, i32* %loc.addr, align 4, !dbg !13872
  %109 = load %union.tree_node*, %union.tree_node** %fn59, align 8, !dbg !13873
  %110 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13874
  %111 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13875
  %112 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13876
  %call229 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %108, %union.tree_node* %109, i32 3, %union.tree_node* %110, %union.tree_node* %111, %union.tree_node* %112), !dbg !13877
  store %union.tree_node* %call229, %union.tree_node** %retval, align 8, !dbg !13878
  br label %return, !dbg !13878

if.end230:                                        ; preds = %land.lhs.true51, %land.lhs.true49, %land.lhs.true47, %if.end43
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13879
  br label %return, !dbg !13879

if.end231:                                        ; preds = %if.else
  %113 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13880
  %call232 = call i32 @host_integerp(%union.tree_node* %113, i32 0), !dbg !13882
  %tobool233 = icmp ne i32 %call232, 0, !dbg !13882
  br i1 %tobool233, label %if.end235, label %if.then234, !dbg !13883

if.then234:                                       ; preds = %if.end231
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13884
  br label %return, !dbg !13884

if.end235:                                        ; preds = %if.end231
  %114 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13885
  %call236 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %114), !dbg !13885
  store %union.tree_node* %call236, %union.tree_node** %src.addr, align 8, !dbg !13885
  %115 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13886
  %call237 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %115), !dbg !13886
  store %union.tree_node* %call237, %union.tree_node** %dest.addr, align 8, !dbg !13886
  %116 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13887
  %base238 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !13887
  %117 = bitcast %struct.tree_base* %base238 to i64*, !dbg !13887
  %bf.load239 = load i64, i64* %117, align 8, !dbg !13887
  %bf.clear240 = and i64 %bf.load239, 65535, !dbg !13887
  %bf.cast241 = trunc i64 %bf.clear240 to i32, !dbg !13887
  %cmp242 = icmp eq i32 %bf.cast241, 66, !dbg !13889
  br i1 %cmp242, label %if.then244, label %if.end258, !dbg !13890

if.then244:                                       ; preds = %if.end235
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !13891, metadata !DIExpression()), !dbg !13893
  %118 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13894
  %exp245 = bitcast %union.tree_node* %118 to %struct.tree_exp*, !dbg !13894
  %operands246 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp245, i32 0, i32 3, !dbg !13894
  %arrayidx247 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands246, i64 0, i64 0, !dbg !13894
  %119 = load %union.tree_node*, %union.tree_node** %arrayidx247, align 8, !dbg !13894
  store %union.tree_node* %119, %union.tree_node** %tem, align 8, !dbg !13893
  %120 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !13895
  %call248 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %120), !dbg !13895
  store %union.tree_node* %call248, %union.tree_node** %tem, align 8, !dbg !13895
  %121 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !13896
  %122 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13898
  %exp249 = bitcast %union.tree_node* %122 to %struct.tree_exp*, !dbg !13898
  %operands250 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp249, i32 0, i32 3, !dbg !13898
  %arrayidx251 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands250, i64 0, i64 0, !dbg !13898
  %123 = load %union.tree_node*, %union.tree_node** %arrayidx251, align 8, !dbg !13898
  %cmp252 = icmp ne %union.tree_node* %121, %123, !dbg !13899
  br i1 %cmp252, label %if.then254, label %if.end257, !dbg !13900

if.then254:                                       ; preds = %if.then244
  %124 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !13901
  %common = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !13901
  %type255 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13901
  %125 = load %union.tree_node*, %union.tree_node** %type255, align 8, !dbg !13901
  %126 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13901
  %call256 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %125, %union.tree_node* %126), !dbg !13901
  store %union.tree_node* %call256, %union.tree_node** %src.addr, align 8, !dbg !13902
  br label %if.end257, !dbg !13903

if.end257:                                        ; preds = %if.then254, %if.then244
  br label %if.end258, !dbg !13904

if.end258:                                        ; preds = %if.end257, %if.end235
  %127 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13905
  %base259 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !13905
  %128 = bitcast %struct.tree_base* %base259 to i64*, !dbg !13905
  %bf.load260 = load i64, i64* %128, align 8, !dbg !13905
  %bf.clear261 = and i64 %bf.load260, 65535, !dbg !13905
  %bf.cast262 = trunc i64 %bf.clear261 to i32, !dbg !13905
  %cmp263 = icmp eq i32 %bf.cast262, 66, !dbg !13907
  br i1 %cmp263, label %if.then265, label %if.end281, !dbg !13908

if.then265:                                       ; preds = %if.end258
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem266, metadata !13909, metadata !DIExpression()), !dbg !13911
  %129 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13912
  %exp267 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !13912
  %operands268 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp267, i32 0, i32 3, !dbg !13912
  %arrayidx269 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands268, i64 0, i64 0, !dbg !13912
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx269, align 8, !dbg !13912
  store %union.tree_node* %130, %union.tree_node** %tem266, align 8, !dbg !13911
  %131 = load %union.tree_node*, %union.tree_node** %tem266, align 8, !dbg !13913
  %call270 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %131), !dbg !13913
  store %union.tree_node* %call270, %union.tree_node** %tem266, align 8, !dbg !13913
  %132 = load %union.tree_node*, %union.tree_node** %tem266, align 8, !dbg !13914
  %133 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13916
  %exp271 = bitcast %union.tree_node* %133 to %struct.tree_exp*, !dbg !13916
  %operands272 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp271, i32 0, i32 3, !dbg !13916
  %arrayidx273 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands272, i64 0, i64 0, !dbg !13916
  %134 = load %union.tree_node*, %union.tree_node** %arrayidx273, align 8, !dbg !13916
  %cmp274 = icmp ne %union.tree_node* %132, %134, !dbg !13917
  br i1 %cmp274, label %if.then276, label %if.end280, !dbg !13918

if.then276:                                       ; preds = %if.then265
  %135 = load %union.tree_node*, %union.tree_node** %tem266, align 8, !dbg !13919
  %common277 = bitcast %union.tree_node* %135 to %struct.tree_common*, !dbg !13919
  %type278 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common277, i32 0, i32 2, !dbg !13919
  %136 = load %union.tree_node*, %union.tree_node** %type278, align 8, !dbg !13919
  %137 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13919
  %call279 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %136, %union.tree_node* %137), !dbg !13919
  store %union.tree_node* %call279, %union.tree_node** %dest.addr, align 8, !dbg !13920
  br label %if.end280, !dbg !13921

if.end280:                                        ; preds = %if.then276, %if.then265
  br label %if.end281, !dbg !13922

if.end281:                                        ; preds = %if.end280, %if.end258
  %138 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13923
  %common282 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !13923
  %type283 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common282, i32 0, i32 2, !dbg !13923
  %139 = load %union.tree_node*, %union.tree_node** %type283, align 8, !dbg !13923
  %common284 = bitcast %union.tree_node* %139 to %struct.tree_common*, !dbg !13923
  %type285 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common284, i32 0, i32 2, !dbg !13923
  %140 = load %union.tree_node*, %union.tree_node** %type285, align 8, !dbg !13923
  store %union.tree_node* %140, %union.tree_node** %srctype, align 8, !dbg !13924
  %141 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13925
  %tobool286 = icmp ne %union.tree_node* %141, null, !dbg !13925
  br i1 %tobool286, label %land.lhs.true287, label %if.end304, !dbg !13927

land.lhs.true287:                                 ; preds = %if.end281
  %142 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13928
  %base288 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !13928
  %143 = bitcast %struct.tree_base* %base288 to i64*, !dbg !13928
  %bf.load289 = load i64, i64* %143, align 8, !dbg !13928
  %bf.clear290 = and i64 %bf.load289, 65535, !dbg !13928
  %bf.cast291 = trunc i64 %bf.clear290 to i32, !dbg !13928
  %cmp292 = icmp eq i32 %bf.cast291, 15, !dbg !13929
  br i1 %cmp292, label %land.lhs.true294, label %if.end304, !dbg !13930

land.lhs.true294:                                 ; preds = %land.lhs.true287
  %144 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13931
  %type295 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !13931
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type295, i32 0, i32 3, !dbg !13931
  %145 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !13931
  %146 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13932
  %call296 = call i32 @tree_int_cst_equal(%union.tree_node* %145, %union.tree_node* %146), !dbg !13933
  %tobool297 = icmp ne i32 %call296, 0, !dbg !13933
  br i1 %tobool297, label %if.end304, label %if.then298, !dbg !13934

if.then298:                                       ; preds = %land.lhs.true294
  %147 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13935
  %common299 = bitcast %union.tree_node* %147 to %struct.tree_common*, !dbg !13935
  %type300 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common299, i32 0, i32 2, !dbg !13935
  %148 = load %union.tree_node*, %union.tree_node** %type300, align 8, !dbg !13935
  store %union.tree_node* %148, %union.tree_node** %srctype, align 8, !dbg !13937
  %149 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13938
  %call301 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %149), !dbg !13938
  store %union.tree_node* %call301, %union.tree_node** %src.addr, align 8, !dbg !13938
  %150 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13939
  %call302 = call %union.tree_node* @build_pointer_type(%union.tree_node* %150), !dbg !13939
  %151 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13939
  %call303 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %call302, %union.tree_node* %151), !dbg !13939
  store %union.tree_node* %call303, %union.tree_node** %src.addr, align 8, !dbg !13940
  br label %if.end304, !dbg !13941

if.end304:                                        ; preds = %if.then298, %land.lhs.true294, %land.lhs.true287, %if.end281
  %152 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13942
  %common305 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !13942
  %type306 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common305, i32 0, i32 2, !dbg !13942
  %153 = load %union.tree_node*, %union.tree_node** %type306, align 8, !dbg !13942
  %common307 = bitcast %union.tree_node* %153 to %struct.tree_common*, !dbg !13942
  %type308 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common307, i32 0, i32 2, !dbg !13942
  %154 = load %union.tree_node*, %union.tree_node** %type308, align 8, !dbg !13942
  store %union.tree_node* %154, %union.tree_node** %desttype, align 8, !dbg !13943
  %155 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13944
  %tobool309 = icmp ne %union.tree_node* %155, null, !dbg !13944
  br i1 %tobool309, label %land.lhs.true310, label %if.end328, !dbg !13946

land.lhs.true310:                                 ; preds = %if.end304
  %156 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13947
  %base311 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !13947
  %157 = bitcast %struct.tree_base* %base311 to i64*, !dbg !13947
  %bf.load312 = load i64, i64* %157, align 8, !dbg !13947
  %bf.clear313 = and i64 %bf.load312, 65535, !dbg !13947
  %bf.cast314 = trunc i64 %bf.clear313 to i32, !dbg !13947
  %cmp315 = icmp eq i32 %bf.cast314, 15, !dbg !13948
  br i1 %cmp315, label %land.lhs.true317, label %if.end328, !dbg !13949

land.lhs.true317:                                 ; preds = %land.lhs.true310
  %158 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13950
  %type318 = bitcast %union.tree_node* %158 to %struct.tree_type*, !dbg !13950
  %size_unit319 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type318, i32 0, i32 3, !dbg !13950
  %159 = load %union.tree_node*, %union.tree_node** %size_unit319, align 8, !dbg !13950
  %160 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !13951
  %call320 = call i32 @tree_int_cst_equal(%union.tree_node* %159, %union.tree_node* %160), !dbg !13952
  %tobool321 = icmp ne i32 %call320, 0, !dbg !13952
  br i1 %tobool321, label %if.end328, label %if.then322, !dbg !13953

if.then322:                                       ; preds = %land.lhs.true317
  %161 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13954
  %common323 = bitcast %union.tree_node* %161 to %struct.tree_common*, !dbg !13954
  %type324 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common323, i32 0, i32 2, !dbg !13954
  %162 = load %union.tree_node*, %union.tree_node** %type324, align 8, !dbg !13954
  store %union.tree_node* %162, %union.tree_node** %desttype, align 8, !dbg !13956
  %163 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13957
  %call325 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %163), !dbg !13957
  store %union.tree_node* %call325, %union.tree_node** %dest.addr, align 8, !dbg !13957
  %164 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13958
  %call326 = call %union.tree_node* @build_pointer_type(%union.tree_node* %164), !dbg !13958
  %165 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13958
  %call327 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %call326, %union.tree_node* %165), !dbg !13958
  store %union.tree_node* %call327, %union.tree_node** %dest.addr, align 8, !dbg !13959
  br label %if.end328, !dbg !13960

if.end328:                                        ; preds = %if.then322, %land.lhs.true317, %land.lhs.true310, %if.end304
  %166 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13961
  %tobool329 = icmp ne %union.tree_node* %166, null, !dbg !13961
  br i1 %tobool329, label %lor.lhs.false330, label %if.then372, !dbg !13963

lor.lhs.false330:                                 ; preds = %if.end328
  %167 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13964
  %tobool331 = icmp ne %union.tree_node* %167, null, !dbg !13964
  br i1 %tobool331, label %lor.lhs.false332, label %if.then372, !dbg !13965

lor.lhs.false332:                                 ; preds = %lor.lhs.false330
  %168 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13966
  %type333 = bitcast %union.tree_node* %168 to %struct.tree_type*, !dbg !13966
  %size_unit334 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type333, i32 0, i32 3, !dbg !13966
  %169 = load %union.tree_node*, %union.tree_node** %size_unit334, align 8, !dbg !13966
  %tobool335 = icmp ne %union.tree_node* %169, null, !dbg !13966
  br i1 %tobool335, label %lor.lhs.false336, label %if.then372, !dbg !13967

lor.lhs.false336:                                 ; preds = %lor.lhs.false332
  %170 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13968
  %type337 = bitcast %union.tree_node* %170 to %struct.tree_type*, !dbg !13968
  %size_unit338 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type337, i32 0, i32 3, !dbg !13968
  %171 = load %union.tree_node*, %union.tree_node** %size_unit338, align 8, !dbg !13968
  %tobool339 = icmp ne %union.tree_node* %171, null, !dbg !13968
  br i1 %tobool339, label %lor.lhs.false340, label %if.then372, !dbg !13969

lor.lhs.false340:                                 ; preds = %lor.lhs.false336
  %172 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13970
  %type341 = bitcast %union.tree_node* %172 to %struct.tree_type*, !dbg !13970
  %size_unit342 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type341, i32 0, i32 3, !dbg !13970
  %173 = load %union.tree_node*, %union.tree_node** %size_unit342, align 8, !dbg !13970
  %base343 = bitcast %union.tree_node* %173 to %struct.tree_base*, !dbg !13970
  %174 = bitcast %struct.tree_base* %base343 to i64*, !dbg !13970
  %bf.load344 = load i64, i64* %174, align 8, !dbg !13970
  %bf.clear345 = and i64 %bf.load344, 65535, !dbg !13970
  %bf.cast346 = trunc i64 %bf.clear345 to i32, !dbg !13970
  %cmp347 = icmp ne i32 %bf.cast346, 23, !dbg !13971
  br i1 %cmp347, label %if.then372, label %lor.lhs.false349, !dbg !13972

lor.lhs.false349:                                 ; preds = %lor.lhs.false340
  %175 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13973
  %type350 = bitcast %union.tree_node* %175 to %struct.tree_type*, !dbg !13973
  %size_unit351 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type350, i32 0, i32 3, !dbg !13973
  %176 = load %union.tree_node*, %union.tree_node** %size_unit351, align 8, !dbg !13973
  %base352 = bitcast %union.tree_node* %176 to %struct.tree_base*, !dbg !13973
  %177 = bitcast %struct.tree_base* %base352 to i64*, !dbg !13973
  %bf.load353 = load i64, i64* %177, align 8, !dbg !13973
  %bf.clear354 = and i64 %bf.load353, 65535, !dbg !13973
  %bf.cast355 = trunc i64 %bf.clear354 to i32, !dbg !13973
  %cmp356 = icmp ne i32 %bf.cast355, 23, !dbg !13974
  br i1 %cmp356, label %if.then372, label %lor.lhs.false358, !dbg !13975

lor.lhs.false358:                                 ; preds = %lor.lhs.false349
  %178 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13976
  %base359 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !13976
  %179 = bitcast %struct.tree_base* %base359 to i64*, !dbg !13976
  %bf.load360 = load i64, i64* %179, align 8, !dbg !13976
  %bf.lshr361 = lshr i64 %bf.load360, 19, !dbg !13976
  %bf.clear362 = and i64 %bf.lshr361, 1, !dbg !13976
  %bf.cast363 = trunc i64 %bf.clear362 to i32, !dbg !13976
  %tobool364 = icmp ne i32 %bf.cast363, 0, !dbg !13976
  br i1 %tobool364, label %if.then372, label %lor.lhs.false365, !dbg !13977

lor.lhs.false365:                                 ; preds = %lor.lhs.false358
  %180 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13978
  %base366 = bitcast %union.tree_node* %180 to %struct.tree_base*, !dbg !13978
  %181 = bitcast %struct.tree_base* %base366 to i64*, !dbg !13978
  %bf.load367 = load i64, i64* %181, align 8, !dbg !13978
  %bf.lshr368 = lshr i64 %bf.load367, 19, !dbg !13978
  %bf.clear369 = and i64 %bf.lshr368, 1, !dbg !13978
  %bf.cast370 = trunc i64 %bf.clear369 to i32, !dbg !13978
  %tobool371 = icmp ne i32 %bf.cast370, 0, !dbg !13978
  br i1 %tobool371, label %if.then372, label %if.end373, !dbg !13979

if.then372:                                       ; preds = %lor.lhs.false365, %lor.lhs.false358, %lor.lhs.false349, %lor.lhs.false340, %lor.lhs.false336, %lor.lhs.false332, %lor.lhs.false330, %if.end328
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13980
  br label %return, !dbg !13980

if.end373:                                        ; preds = %lor.lhs.false365
  %182 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !13981
  %183 = load i32, i32* @ix86_isa_flags, align 4, !dbg !13982
  %and374 = and i32 %183, 32, !dbg !13982
  %cmp375 = icmp ne i32 %and374, 0, !dbg !13982
  %184 = zext i1 %cmp375 to i64, !dbg !13982
  %cond377 = select i1 %cmp375, i32 256, i32 128, !dbg !13982
  %call378 = call i32 @get_pointer_alignment(%union.tree_node* %182, i32 %cond377), !dbg !13983
  store i32 %call378, i32* %src_align, align 4, !dbg !13984
  %185 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !13985
  %186 = load i32, i32* @ix86_isa_flags, align 4, !dbg !13986
  %and379 = and i32 %186, 32, !dbg !13986
  %cmp380 = icmp ne i32 %and379, 0, !dbg !13986
  %187 = zext i1 %cmp380 to i64, !dbg !13986
  %cond382 = select i1 %cmp380, i32 256, i32 128, !dbg !13986
  %call383 = call i32 @get_pointer_alignment(%union.tree_node* %185, i32 %cond382), !dbg !13987
  store i32 %call383, i32* %dest_align, align 4, !dbg !13988
  %188 = load i32, i32* %dest_align, align 4, !dbg !13989
  %189 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !13991
  %type384 = bitcast %union.tree_node* %189 to %struct.tree_type*, !dbg !13991
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type384, i32 0, i32 7, !dbg !13991
  %190 = load i32, i32* %align, align 8, !dbg !13991
  %cmp385 = icmp slt i32 %188, %190, !dbg !13992
  br i1 %cmp385, label %if.then392, label %lor.lhs.false387, !dbg !13993

lor.lhs.false387:                                 ; preds = %if.end373
  %191 = load i32, i32* %src_align, align 4, !dbg !13994
  %192 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !13995
  %type388 = bitcast %union.tree_node* %192 to %struct.tree_type*, !dbg !13995
  %align389 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type388, i32 0, i32 7, !dbg !13995
  %193 = load i32, i32* %align389, align 8, !dbg !13995
  %cmp390 = icmp slt i32 %191, %193, !dbg !13996
  br i1 %cmp390, label %if.then392, label %if.end393, !dbg !13997

if.then392:                                       ; preds = %lor.lhs.false387, %if.end373
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13998
  br label %return, !dbg !13998

if.end393:                                        ; preds = %lor.lhs.false387
  %194 = load i8, i8* %ignore.addr, align 1, !dbg !13999
  %tobool394 = icmp ne i8 %194, 0, !dbg !13999
  br i1 %tobool394, label %if.end397, label %if.then395, !dbg !14001

if.then395:                                       ; preds = %if.end393
  %195 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14002
  %call396 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %195), !dbg !14003
  store %union.tree_node* %call396, %union.tree_node** %dest.addr, align 8, !dbg !14004
  br label %if.end397, !dbg !14005

if.end397:                                        ; preds = %if.then395, %if.end393
  store %union.tree_node* null, %union.tree_node** %srcvar, align 8, !dbg !14006
  %196 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14007
  %type398 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !14007
  %size_unit399 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type398, i32 0, i32 3, !dbg !14007
  %197 = load %union.tree_node*, %union.tree_node** %size_unit399, align 8, !dbg !14007
  %198 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14009
  %call400 = call i32 @tree_int_cst_equal(%union.tree_node* %197, %union.tree_node* %198), !dbg !14010
  %tobool401 = icmp ne i32 %call400, 0, !dbg !14010
  br i1 %tobool401, label %if.then402, label %if.end423, !dbg !14011

if.then402:                                       ; preds = %if.end397
  %199 = load i32, i32* %loc.addr, align 4, !dbg !14012
  %200 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14014
  %call403 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %199, %union.tree_node* %200), !dbg !14015
  store %union.tree_node* %call403, %union.tree_node** %srcvar, align 8, !dbg !14016
  %201 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14017
  %base404 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !14017
  %202 = bitcast %struct.tree_base* %base404 to i64*, !dbg !14017
  %bf.load405 = load i64, i64* %202, align 8, !dbg !14017
  %bf.lshr406 = lshr i64 %bf.load405, 19, !dbg !14017
  %bf.clear407 = and i64 %bf.lshr406, 1, !dbg !14017
  %bf.cast408 = trunc i64 %bf.clear407 to i32, !dbg !14017
  %tobool409 = icmp ne i32 %bf.cast408, 0, !dbg !14017
  br i1 %tobool409, label %if.then410, label %if.else411, !dbg !14019

if.then410:                                       ; preds = %if.then402
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14020
  br label %return, !dbg !14020

if.else411:                                       ; preds = %if.then402
  %203 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14021
  %call412 = call %union.tree_node* @tree_expr_size(%union.tree_node* %203), !dbg !14023
  %204 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14024
  %call413 = call i32 @tree_int_cst_equal(%union.tree_node* %call412, %union.tree_node* %204), !dbg !14025
  %tobool414 = icmp ne i32 %call413, 0, !dbg !14025
  br i1 %tobool414, label %if.else416, label %if.then415, !dbg !14026

if.then415:                                       ; preds = %if.else411
  store %union.tree_node* null, %union.tree_node** %srcvar, align 8, !dbg !14027
  br label %if.end421, !dbg !14028

if.else416:                                       ; preds = %if.else411
  %205 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14029
  %call417 = call zeroext i8 @var_decl_component_p(%union.tree_node* %205), !dbg !14031
  %tobool418 = icmp ne i8 %call417, 0, !dbg !14031
  br i1 %tobool418, label %if.end420, label %if.then419, !dbg !14032

if.then419:                                       ; preds = %if.else416
  store %union.tree_node* null, %union.tree_node** %srcvar, align 8, !dbg !14033
  br label %if.end420, !dbg !14034

if.end420:                                        ; preds = %if.then419, %if.else416
  br label %if.end421

if.end421:                                        ; preds = %if.end420, %if.then415
  br label %if.end422

if.end422:                                        ; preds = %if.end421
  br label %if.end423, !dbg !14035

if.end423:                                        ; preds = %if.end422, %if.end397
  store %union.tree_node* null, %union.tree_node** %destvar, align 8, !dbg !14036
  %206 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14037
  %type424 = bitcast %union.tree_node* %206 to %struct.tree_type*, !dbg !14037
  %size_unit425 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type424, i32 0, i32 3, !dbg !14037
  %207 = load %union.tree_node*, %union.tree_node** %size_unit425, align 8, !dbg !14037
  %208 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14039
  %call426 = call i32 @tree_int_cst_equal(%union.tree_node* %207, %union.tree_node* %208), !dbg !14040
  %tobool427 = icmp ne i32 %call426, 0, !dbg !14040
  br i1 %tobool427, label %if.then428, label %if.end449, !dbg !14041

if.then428:                                       ; preds = %if.end423
  %209 = load i32, i32* %loc.addr, align 4, !dbg !14042
  %210 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14044
  %call429 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %209, %union.tree_node* %210), !dbg !14045
  store %union.tree_node* %call429, %union.tree_node** %destvar, align 8, !dbg !14046
  %211 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14047
  %base430 = bitcast %union.tree_node* %211 to %struct.tree_base*, !dbg !14047
  %212 = bitcast %struct.tree_base* %base430 to i64*, !dbg !14047
  %bf.load431 = load i64, i64* %212, align 8, !dbg !14047
  %bf.lshr432 = lshr i64 %bf.load431, 19, !dbg !14047
  %bf.clear433 = and i64 %bf.lshr432, 1, !dbg !14047
  %bf.cast434 = trunc i64 %bf.clear433 to i32, !dbg !14047
  %tobool435 = icmp ne i32 %bf.cast434, 0, !dbg !14047
  br i1 %tobool435, label %if.then436, label %if.else437, !dbg !14049

if.then436:                                       ; preds = %if.then428
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14050
  br label %return, !dbg !14050

if.else437:                                       ; preds = %if.then428
  %213 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14051
  %call438 = call %union.tree_node* @tree_expr_size(%union.tree_node* %213), !dbg !14053
  %214 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14054
  %call439 = call i32 @tree_int_cst_equal(%union.tree_node* %call438, %union.tree_node* %214), !dbg !14055
  %tobool440 = icmp ne i32 %call439, 0, !dbg !14055
  br i1 %tobool440, label %if.else442, label %if.then441, !dbg !14056

if.then441:                                       ; preds = %if.else437
  store %union.tree_node* null, %union.tree_node** %destvar, align 8, !dbg !14057
  br label %if.end447, !dbg !14058

if.else442:                                       ; preds = %if.else437
  %215 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14059
  %call443 = call zeroext i8 @var_decl_component_p(%union.tree_node* %215), !dbg !14061
  %tobool444 = icmp ne i8 %call443, 0, !dbg !14061
  br i1 %tobool444, label %if.end446, label %if.then445, !dbg !14062

if.then445:                                       ; preds = %if.else442
  store %union.tree_node* null, %union.tree_node** %destvar, align 8, !dbg !14063
  br label %if.end446, !dbg !14064

if.end446:                                        ; preds = %if.then445, %if.else442
  br label %if.end447

if.end447:                                        ; preds = %if.end446, %if.then441
  br label %if.end448

if.end448:                                        ; preds = %if.end447
  br label %if.end449, !dbg !14065

if.end449:                                        ; preds = %if.end448, %if.end423
  %216 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14066
  %cmp450 = icmp eq %union.tree_node* %216, null, !dbg !14068
  br i1 %cmp450, label %land.lhs.true452, label %if.end456, !dbg !14069

land.lhs.true452:                                 ; preds = %if.end449
  %217 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14070
  %cmp453 = icmp eq %union.tree_node* %217, null, !dbg !14071
  br i1 %cmp453, label %if.then455, label %if.end456, !dbg !14072

if.then455:                                       ; preds = %land.lhs.true452
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14073
  br label %return, !dbg !14073

if.end456:                                        ; preds = %land.lhs.true452, %if.end449
  %218 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14074
  %cmp457 = icmp eq %union.tree_node* %218, null, !dbg !14076
  br i1 %cmp457, label %if.then459, label %if.else521, !dbg !14077

if.then459:                                       ; preds = %if.end456
  call void @llvm.dbg.declare(metadata %union.tree_node** %srcptype, metadata !14078, metadata !DIExpression()), !dbg !14080
  %219 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14081
  %common460 = bitcast %union.tree_node* %219 to %struct.tree_common*, !dbg !14081
  %type461 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common460, i32 0, i32 2, !dbg !14081
  %220 = load %union.tree_node*, %union.tree_node** %type461, align 8, !dbg !14081
  %base462 = bitcast %union.tree_node* %220 to %struct.tree_base*, !dbg !14081
  %221 = bitcast %struct.tree_base* %base462 to i64*, !dbg !14081
  %bf.load463 = load i64, i64* %221, align 8, !dbg !14081
  %bf.lshr464 = lshr i64 %bf.load463, 18, !dbg !14081
  %bf.clear465 = and i64 %bf.lshr464, 1, !dbg !14081
  %bf.cast466 = trunc i64 %bf.clear465 to i32, !dbg !14081
  %tobool467 = icmp ne i32 %bf.cast466, 0, !dbg !14081
  br i1 %tobool467, label %if.then468, label %if.end469, !dbg !14083

if.then468:                                       ; preds = %if.then459
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14084
  br label %return, !dbg !14084

if.end469:                                        ; preds = %if.then459
  %222 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14085
  %call470 = call %union.tree_node* @build_qualified_type(%union.tree_node* %222, i32 0), !dbg !14086
  store %union.tree_node* %call470, %union.tree_node** %srctype, align 8, !dbg !14087
  %223 = load i32, i32* %src_align, align 4, !dbg !14088
  %224 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14090
  %type471 = bitcast %union.tree_node* %224 to %struct.tree_type*, !dbg !14090
  %align472 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type471, i32 0, i32 7, !dbg !14090
  %225 = load i32, i32* %align472, align 8, !dbg !14090
  %cmp473 = icmp slt i32 %223, %225, !dbg !14091
  br i1 %cmp473, label %if.then475, label %if.end517, !dbg !14092

if.then475:                                       ; preds = %if.end469
  %226 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14093
  %base476 = bitcast %union.tree_node* %226 to %struct.tree_base*, !dbg !14093
  %227 = bitcast %struct.tree_base* %base476 to i64*, !dbg !14093
  %bf.load477 = load i64, i64* %227, align 8, !dbg !14093
  %bf.clear478 = and i64 %bf.load477, 65535, !dbg !14093
  %bf.cast479 = trunc i64 %bf.clear478 to i32, !dbg !14093
  %cmp480 = icmp eq i32 %bf.cast479, 15, !dbg !14093
  br i1 %cmp480, label %if.then503, label %lor.lhs.false482, !dbg !14093

lor.lhs.false482:                                 ; preds = %if.then475
  %228 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14093
  %base483 = bitcast %union.tree_node* %228 to %struct.tree_base*, !dbg !14093
  %229 = bitcast %struct.tree_base* %base483 to i64*, !dbg !14093
  %bf.load484 = load i64, i64* %229, align 8, !dbg !14093
  %bf.clear485 = and i64 %bf.load484, 65535, !dbg !14093
  %bf.cast486 = trunc i64 %bf.clear485 to i32, !dbg !14093
  %cmp487 = icmp eq i32 %bf.cast486, 16, !dbg !14093
  br i1 %cmp487, label %if.then503, label %lor.lhs.false489, !dbg !14093

lor.lhs.false489:                                 ; preds = %lor.lhs.false482
  %230 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14093
  %base490 = bitcast %union.tree_node* %230 to %struct.tree_base*, !dbg !14093
  %231 = bitcast %struct.tree_base* %base490 to i64*, !dbg !14093
  %bf.load491 = load i64, i64* %231, align 8, !dbg !14093
  %bf.clear492 = and i64 %bf.load491, 65535, !dbg !14093
  %bf.cast493 = trunc i64 %bf.clear492 to i32, !dbg !14093
  %cmp494 = icmp eq i32 %bf.cast493, 17, !dbg !14093
  br i1 %cmp494, label %if.then503, label %lor.lhs.false496, !dbg !14093

lor.lhs.false496:                                 ; preds = %lor.lhs.false489
  %232 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14093
  %base497 = bitcast %union.tree_node* %232 to %struct.tree_base*, !dbg !14093
  %233 = bitcast %struct.tree_base* %base497 to i64*, !dbg !14093
  %bf.load498 = load i64, i64* %233, align 8, !dbg !14093
  %bf.clear499 = and i64 %bf.load498, 65535, !dbg !14093
  %bf.cast500 = trunc i64 %bf.clear499 to i32, !dbg !14093
  %cmp501 = icmp eq i32 %bf.cast500, 18, !dbg !14093
  br i1 %cmp501, label %if.then503, label %if.end504, !dbg !14096

if.then503:                                       ; preds = %lor.lhs.false496, %lor.lhs.false489, %lor.lhs.false482, %if.then475
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14097
  br label %return, !dbg !14097

if.end504:                                        ; preds = %lor.lhs.false496
  %234 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14098
  %call505 = call %union.tree_node* @build_variant_type_copy(%union.tree_node* %234), !dbg !14099
  store %union.tree_node* %call505, %union.tree_node** %srctype, align 8, !dbg !14100
  %235 = load i32, i32* %src_align, align 4, !dbg !14101
  %236 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14102
  %type506 = bitcast %union.tree_node* %236 to %struct.tree_type*, !dbg !14102
  %align507 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type506, i32 0, i32 7, !dbg !14102
  store i32 %235, i32* %align507, align 8, !dbg !14103
  %237 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14104
  %common508 = bitcast %union.tree_node* %237 to %struct.tree_common*, !dbg !14104
  %base509 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common508, i32 0, i32 0, !dbg !14104
  %238 = bitcast %struct.tree_base* %base509 to i64*, !dbg !14104
  %bf.load510 = load i64, i64* %238, align 8, !dbg !14105
  %bf.clear511 = and i64 %bf.load510, -4398046511105, !dbg !14105
  %bf.set = or i64 %bf.clear511, 4398046511104, !dbg !14105
  store i64 %bf.set, i64* %238, align 8, !dbg !14105
  %239 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14106
  %common512 = bitcast %union.tree_node* %239 to %struct.tree_common*, !dbg !14106
  %base513 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common512, i32 0, i32 0, !dbg !14106
  %240 = bitcast %struct.tree_base* %base513 to i64*, !dbg !14106
  %bf.load514 = load i64, i64* %240, align 8, !dbg !14107
  %bf.clear515 = and i64 %bf.load514, -2199023255553, !dbg !14107
  %bf.set516 = or i64 %bf.clear515, 2199023255552, !dbg !14107
  store i64 %bf.set516, i64* %240, align 8, !dbg !14107
  br label %if.end517, !dbg !14108

if.end517:                                        ; preds = %if.end504, %if.end469
  %241 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14109
  %242 = load i32, i32* @ptr_mode, align 4, !dbg !14110
  %call518 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %241, i32 %242, i8 zeroext 1), !dbg !14111
  store %union.tree_node* %call518, %union.tree_node** %srcptype, align 8, !dbg !14112
  %243 = load i32, i32* %loc.addr, align 4, !dbg !14113
  %244 = load %union.tree_node*, %union.tree_node** %srcptype, align 8, !dbg !14114
  %245 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14115
  %call519 = call %union.tree_node* @fold_convert_loc(i32 %243, %union.tree_node* %244, %union.tree_node* %245), !dbg !14116
  store %union.tree_node* %call519, %union.tree_node** %src.addr, align 8, !dbg !14117
  %246 = load i32, i32* %loc.addr, align 4, !dbg !14118
  %247 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14119
  %call520 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %246, %union.tree_node* %247), !dbg !14120
  store %union.tree_node* %call520, %union.tree_node** %srcvar, align 8, !dbg !14121
  br label %if.end588, !dbg !14122

if.else521:                                       ; preds = %if.end456
  %248 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14123
  %cmp522 = icmp eq %union.tree_node* %248, null, !dbg !14125
  br i1 %cmp522, label %if.then524, label %if.end587, !dbg !14126

if.then524:                                       ; preds = %if.else521
  call void @llvm.dbg.declare(metadata %union.tree_node** %destptype, metadata !14127, metadata !DIExpression()), !dbg !14129
  %249 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14130
  %common525 = bitcast %union.tree_node* %249 to %struct.tree_common*, !dbg !14130
  %type526 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common525, i32 0, i32 2, !dbg !14130
  %250 = load %union.tree_node*, %union.tree_node** %type526, align 8, !dbg !14130
  %base527 = bitcast %union.tree_node* %250 to %struct.tree_base*, !dbg !14130
  %251 = bitcast %struct.tree_base* %base527 to i64*, !dbg !14130
  %bf.load528 = load i64, i64* %251, align 8, !dbg !14130
  %bf.lshr529 = lshr i64 %bf.load528, 18, !dbg !14130
  %bf.clear530 = and i64 %bf.lshr529, 1, !dbg !14130
  %bf.cast531 = trunc i64 %bf.clear530 to i32, !dbg !14130
  %tobool532 = icmp ne i32 %bf.cast531, 0, !dbg !14130
  br i1 %tobool532, label %if.then533, label %if.end534, !dbg !14132

if.then533:                                       ; preds = %if.then524
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14133
  br label %return, !dbg !14133

if.end534:                                        ; preds = %if.then524
  %252 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14134
  %call535 = call %union.tree_node* @build_qualified_type(%union.tree_node* %252, i32 0), !dbg !14135
  store %union.tree_node* %call535, %union.tree_node** %desttype, align 8, !dbg !14136
  %253 = load i32, i32* %dest_align, align 4, !dbg !14137
  %254 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14139
  %type536 = bitcast %union.tree_node* %254 to %struct.tree_type*, !dbg !14139
  %align537 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type536, i32 0, i32 7, !dbg !14139
  %255 = load i32, i32* %align537, align 8, !dbg !14139
  %cmp538 = icmp slt i32 %253, %255, !dbg !14140
  br i1 %cmp538, label %if.then540, label %if.end583, !dbg !14141

if.then540:                                       ; preds = %if.end534
  %256 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14142
  %base541 = bitcast %union.tree_node* %256 to %struct.tree_base*, !dbg !14142
  %257 = bitcast %struct.tree_base* %base541 to i64*, !dbg !14142
  %bf.load542 = load i64, i64* %257, align 8, !dbg !14142
  %bf.clear543 = and i64 %bf.load542, 65535, !dbg !14142
  %bf.cast544 = trunc i64 %bf.clear543 to i32, !dbg !14142
  %cmp545 = icmp eq i32 %bf.cast544, 15, !dbg !14142
  br i1 %cmp545, label %if.then568, label %lor.lhs.false547, !dbg !14142

lor.lhs.false547:                                 ; preds = %if.then540
  %258 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14142
  %base548 = bitcast %union.tree_node* %258 to %struct.tree_base*, !dbg !14142
  %259 = bitcast %struct.tree_base* %base548 to i64*, !dbg !14142
  %bf.load549 = load i64, i64* %259, align 8, !dbg !14142
  %bf.clear550 = and i64 %bf.load549, 65535, !dbg !14142
  %bf.cast551 = trunc i64 %bf.clear550 to i32, !dbg !14142
  %cmp552 = icmp eq i32 %bf.cast551, 16, !dbg !14142
  br i1 %cmp552, label %if.then568, label %lor.lhs.false554, !dbg !14142

lor.lhs.false554:                                 ; preds = %lor.lhs.false547
  %260 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14142
  %base555 = bitcast %union.tree_node* %260 to %struct.tree_base*, !dbg !14142
  %261 = bitcast %struct.tree_base* %base555 to i64*, !dbg !14142
  %bf.load556 = load i64, i64* %261, align 8, !dbg !14142
  %bf.clear557 = and i64 %bf.load556, 65535, !dbg !14142
  %bf.cast558 = trunc i64 %bf.clear557 to i32, !dbg !14142
  %cmp559 = icmp eq i32 %bf.cast558, 17, !dbg !14142
  br i1 %cmp559, label %if.then568, label %lor.lhs.false561, !dbg !14142

lor.lhs.false561:                                 ; preds = %lor.lhs.false554
  %262 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14142
  %base562 = bitcast %union.tree_node* %262 to %struct.tree_base*, !dbg !14142
  %263 = bitcast %struct.tree_base* %base562 to i64*, !dbg !14142
  %bf.load563 = load i64, i64* %263, align 8, !dbg !14142
  %bf.clear564 = and i64 %bf.load563, 65535, !dbg !14142
  %bf.cast565 = trunc i64 %bf.clear564 to i32, !dbg !14142
  %cmp566 = icmp eq i32 %bf.cast565, 18, !dbg !14142
  br i1 %cmp566, label %if.then568, label %if.end569, !dbg !14145

if.then568:                                       ; preds = %lor.lhs.false561, %lor.lhs.false554, %lor.lhs.false547, %if.then540
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14146
  br label %return, !dbg !14146

if.end569:                                        ; preds = %lor.lhs.false561
  %264 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14147
  %call570 = call %union.tree_node* @build_variant_type_copy(%union.tree_node* %264), !dbg !14148
  store %union.tree_node* %call570, %union.tree_node** %desttype, align 8, !dbg !14149
  %265 = load i32, i32* %dest_align, align 4, !dbg !14150
  %266 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14151
  %type571 = bitcast %union.tree_node* %266 to %struct.tree_type*, !dbg !14151
  %align572 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type571, i32 0, i32 7, !dbg !14151
  store i32 %265, i32* %align572, align 8, !dbg !14152
  %267 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14153
  %common573 = bitcast %union.tree_node* %267 to %struct.tree_common*, !dbg !14153
  %base574 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common573, i32 0, i32 0, !dbg !14153
  %268 = bitcast %struct.tree_base* %base574 to i64*, !dbg !14153
  %bf.load575 = load i64, i64* %268, align 8, !dbg !14154
  %bf.clear576 = and i64 %bf.load575, -4398046511105, !dbg !14154
  %bf.set577 = or i64 %bf.clear576, 4398046511104, !dbg !14154
  store i64 %bf.set577, i64* %268, align 8, !dbg !14154
  %269 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14155
  %common578 = bitcast %union.tree_node* %269 to %struct.tree_common*, !dbg !14155
  %base579 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common578, i32 0, i32 0, !dbg !14155
  %270 = bitcast %struct.tree_base* %base579 to i64*, !dbg !14155
  %bf.load580 = load i64, i64* %270, align 8, !dbg !14156
  %bf.clear581 = and i64 %bf.load580, -2199023255553, !dbg !14156
  %bf.set582 = or i64 %bf.clear581, 2199023255552, !dbg !14156
  store i64 %bf.set582, i64* %270, align 8, !dbg !14156
  br label %if.end583, !dbg !14157

if.end583:                                        ; preds = %if.end569, %if.end534
  %271 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14158
  %272 = load i32, i32* @ptr_mode, align 4, !dbg !14159
  %call584 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %271, i32 %272, i8 zeroext 1), !dbg !14160
  store %union.tree_node* %call584, %union.tree_node** %destptype, align 8, !dbg !14161
  %273 = load i32, i32* %loc.addr, align 4, !dbg !14162
  %274 = load %union.tree_node*, %union.tree_node** %destptype, align 8, !dbg !14163
  %275 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14164
  %call585 = call %union.tree_node* @fold_convert_loc(i32 %273, %union.tree_node* %274, %union.tree_node* %275), !dbg !14165
  store %union.tree_node* %call585, %union.tree_node** %dest.addr, align 8, !dbg !14166
  %276 = load i32, i32* %loc.addr, align 4, !dbg !14167
  %277 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14168
  %call586 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %276, %union.tree_node* %277), !dbg !14169
  store %union.tree_node* %call586, %union.tree_node** %destvar, align 8, !dbg !14170
  br label %if.end587, !dbg !14171

if.end587:                                        ; preds = %if.end583, %if.else521
  br label %if.end588

if.end588:                                        ; preds = %if.end587, %if.end517
  %278 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14172
  %279 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14174
  %cmp589 = icmp eq %union.tree_node* %278, %279, !dbg !14175
  br i1 %cmp589, label %if.then599, label %lor.lhs.false591, !dbg !14176

lor.lhs.false591:                                 ; preds = %if.end588
  %280 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14177
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %280, i64 0, !dbg !14177
  %call592 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !14178
  %conv593 = zext i8 %call592 to i32, !dbg !14178
  %tobool594 = icmp ne i32 %conv593, 0, !dbg !14178
  br i1 %tobool594, label %land.lhs.true595, label %if.else600, !dbg !14179

land.lhs.true595:                                 ; preds = %lor.lhs.false591
  %281 = load %union.tree_node*, %union.tree_node** %desttype, align 8, !dbg !14180
  %282 = load %union.tree_node*, %union.tree_node** %srctype, align 8, !dbg !14181
  %call596 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %281, %union.tree_node* %282), !dbg !14182
  %conv597 = zext i8 %call596 to i32, !dbg !14182
  %tobool598 = icmp ne i32 %conv597, 0, !dbg !14182
  br i1 %tobool598, label %if.then599, label %if.else600, !dbg !14183

if.then599:                                       ; preds = %land.lhs.true595, %if.end588
  %283 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14184
  store %union.tree_node* %283, %union.tree_node** %expr, align 8, !dbg !14185
  br label %if.end699, !dbg !14186

if.else600:                                       ; preds = %land.lhs.true595, %lor.lhs.false591
  %284 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14187
  %common601 = bitcast %union.tree_node* %284 to %struct.tree_common*, !dbg !14187
  %type602 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common601, i32 0, i32 2, !dbg !14187
  %285 = load %union.tree_node*, %union.tree_node** %type602, align 8, !dbg !14187
  %base603 = bitcast %union.tree_node* %285 to %struct.tree_base*, !dbg !14187
  %286 = bitcast %struct.tree_base* %base603 to i64*, !dbg !14187
  %bf.load604 = load i64, i64* %286, align 8, !dbg !14187
  %bf.clear605 = and i64 %bf.load604, 65535, !dbg !14187
  %bf.cast606 = trunc i64 %bf.clear605 to i32, !dbg !14187
  %cmp607 = icmp eq i32 %bf.cast606, 6, !dbg !14187
  br i1 %cmp607, label %land.lhs.true645, label %lor.lhs.false609, !dbg !14187

lor.lhs.false609:                                 ; preds = %if.else600
  %287 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14187
  %common610 = bitcast %union.tree_node* %287 to %struct.tree_common*, !dbg !14187
  %type611 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common610, i32 0, i32 2, !dbg !14187
  %288 = load %union.tree_node*, %union.tree_node** %type611, align 8, !dbg !14187
  %base612 = bitcast %union.tree_node* %288 to %struct.tree_base*, !dbg !14187
  %289 = bitcast %struct.tree_base* %base612 to i64*, !dbg !14187
  %bf.load613 = load i64, i64* %289, align 8, !dbg !14187
  %bf.clear614 = and i64 %bf.load613, 65535, !dbg !14187
  %bf.cast615 = trunc i64 %bf.clear614 to i32, !dbg !14187
  %cmp616 = icmp eq i32 %bf.cast615, 7, !dbg !14187
  br i1 %cmp616, label %land.lhs.true645, label %lor.lhs.false618, !dbg !14187

lor.lhs.false618:                                 ; preds = %lor.lhs.false609
  %290 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14187
  %common619 = bitcast %union.tree_node* %290 to %struct.tree_common*, !dbg !14187
  %type620 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common619, i32 0, i32 2, !dbg !14187
  %291 = load %union.tree_node*, %union.tree_node** %type620, align 8, !dbg !14187
  %base621 = bitcast %union.tree_node* %291 to %struct.tree_base*, !dbg !14187
  %292 = bitcast %struct.tree_base* %base621 to i64*, !dbg !14187
  %bf.load622 = load i64, i64* %292, align 8, !dbg !14187
  %bf.clear623 = and i64 %bf.load622, 65535, !dbg !14187
  %bf.cast624 = trunc i64 %bf.clear623 to i32, !dbg !14187
  %cmp625 = icmp eq i32 %bf.cast624, 8, !dbg !14187
  br i1 %cmp625, label %land.lhs.true645, label %lor.lhs.false627, !dbg !14189

lor.lhs.false627:                                 ; preds = %lor.lhs.false618
  %293 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14190
  %common628 = bitcast %union.tree_node* %293 to %struct.tree_common*, !dbg !14190
  %type629 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common628, i32 0, i32 2, !dbg !14190
  %294 = load %union.tree_node*, %union.tree_node** %type629, align 8, !dbg !14190
  %base630 = bitcast %union.tree_node* %294 to %struct.tree_base*, !dbg !14190
  %295 = bitcast %struct.tree_base* %base630 to i64*, !dbg !14190
  %bf.load631 = load i64, i64* %295, align 8, !dbg !14190
  %bf.clear632 = and i64 %bf.load631, 65535, !dbg !14190
  %bf.cast633 = trunc i64 %bf.clear632 to i32, !dbg !14190
  %cmp634 = icmp eq i32 %bf.cast633, 10, !dbg !14190
  br i1 %cmp634, label %land.lhs.true645, label %lor.lhs.false636, !dbg !14190

lor.lhs.false636:                                 ; preds = %lor.lhs.false627
  %296 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14190
  %common637 = bitcast %union.tree_node* %296 to %struct.tree_common*, !dbg !14190
  %type638 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common637, i32 0, i32 2, !dbg !14190
  %297 = load %union.tree_node*, %union.tree_node** %type638, align 8, !dbg !14190
  %base639 = bitcast %union.tree_node* %297 to %struct.tree_base*, !dbg !14190
  %298 = bitcast %struct.tree_base* %base639 to i64*, !dbg !14190
  %bf.load640 = load i64, i64* %298, align 8, !dbg !14190
  %bf.clear641 = and i64 %bf.load640, 65535, !dbg !14190
  %bf.cast642 = trunc i64 %bf.clear641 to i32, !dbg !14190
  %cmp643 = icmp eq i32 %bf.cast642, 12, !dbg !14190
  br i1 %cmp643, label %land.lhs.true645, label %if.else694, !dbg !14191

land.lhs.true645:                                 ; preds = %lor.lhs.false636, %lor.lhs.false627, %lor.lhs.false618, %lor.lhs.false609, %if.else600
  %299 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14192
  %common646 = bitcast %union.tree_node* %299 to %struct.tree_common*, !dbg !14192
  %type647 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common646, i32 0, i32 2, !dbg !14192
  %300 = load %union.tree_node*, %union.tree_node** %type647, align 8, !dbg !14192
  %base648 = bitcast %union.tree_node* %300 to %struct.tree_base*, !dbg !14192
  %301 = bitcast %struct.tree_base* %base648 to i64*, !dbg !14192
  %bf.load649 = load i64, i64* %301, align 8, !dbg !14192
  %bf.clear650 = and i64 %bf.load649, 65535, !dbg !14192
  %bf.cast651 = trunc i64 %bf.clear650 to i32, !dbg !14192
  %cmp652 = icmp eq i32 %bf.cast651, 6, !dbg !14192
  br i1 %cmp652, label %if.then690, label %lor.lhs.false654, !dbg !14192

lor.lhs.false654:                                 ; preds = %land.lhs.true645
  %302 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14192
  %common655 = bitcast %union.tree_node* %302 to %struct.tree_common*, !dbg !14192
  %type656 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common655, i32 0, i32 2, !dbg !14192
  %303 = load %union.tree_node*, %union.tree_node** %type656, align 8, !dbg !14192
  %base657 = bitcast %union.tree_node* %303 to %struct.tree_base*, !dbg !14192
  %304 = bitcast %struct.tree_base* %base657 to i64*, !dbg !14192
  %bf.load658 = load i64, i64* %304, align 8, !dbg !14192
  %bf.clear659 = and i64 %bf.load658, 65535, !dbg !14192
  %bf.cast660 = trunc i64 %bf.clear659 to i32, !dbg !14192
  %cmp661 = icmp eq i32 %bf.cast660, 7, !dbg !14192
  br i1 %cmp661, label %if.then690, label %lor.lhs.false663, !dbg !14192

lor.lhs.false663:                                 ; preds = %lor.lhs.false654
  %305 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14192
  %common664 = bitcast %union.tree_node* %305 to %struct.tree_common*, !dbg !14192
  %type665 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common664, i32 0, i32 2, !dbg !14192
  %306 = load %union.tree_node*, %union.tree_node** %type665, align 8, !dbg !14192
  %base666 = bitcast %union.tree_node* %306 to %struct.tree_base*, !dbg !14192
  %307 = bitcast %struct.tree_base* %base666 to i64*, !dbg !14192
  %bf.load667 = load i64, i64* %307, align 8, !dbg !14192
  %bf.clear668 = and i64 %bf.load667, 65535, !dbg !14192
  %bf.cast669 = trunc i64 %bf.clear668 to i32, !dbg !14192
  %cmp670 = icmp eq i32 %bf.cast669, 8, !dbg !14192
  br i1 %cmp670, label %if.then690, label %lor.lhs.false672, !dbg !14193

lor.lhs.false672:                                 ; preds = %lor.lhs.false663
  %308 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14194
  %common673 = bitcast %union.tree_node* %308 to %struct.tree_common*, !dbg !14194
  %type674 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common673, i32 0, i32 2, !dbg !14194
  %309 = load %union.tree_node*, %union.tree_node** %type674, align 8, !dbg !14194
  %base675 = bitcast %union.tree_node* %309 to %struct.tree_base*, !dbg !14194
  %310 = bitcast %struct.tree_base* %base675 to i64*, !dbg !14194
  %bf.load676 = load i64, i64* %310, align 8, !dbg !14194
  %bf.clear677 = and i64 %bf.load676, 65535, !dbg !14194
  %bf.cast678 = trunc i64 %bf.clear677 to i32, !dbg !14194
  %cmp679 = icmp eq i32 %bf.cast678, 10, !dbg !14194
  br i1 %cmp679, label %if.then690, label %lor.lhs.false681, !dbg !14194

lor.lhs.false681:                                 ; preds = %lor.lhs.false672
  %311 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14194
  %common682 = bitcast %union.tree_node* %311 to %struct.tree_common*, !dbg !14194
  %type683 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common682, i32 0, i32 2, !dbg !14194
  %312 = load %union.tree_node*, %union.tree_node** %type683, align 8, !dbg !14194
  %base684 = bitcast %union.tree_node* %312 to %struct.tree_base*, !dbg !14194
  %313 = bitcast %struct.tree_base* %base684 to i64*, !dbg !14194
  %bf.load685 = load i64, i64* %313, align 8, !dbg !14194
  %bf.clear686 = and i64 %bf.load685, 65535, !dbg !14194
  %bf.cast687 = trunc i64 %bf.clear686 to i32, !dbg !14194
  %cmp688 = icmp eq i32 %bf.cast687, 12, !dbg !14194
  br i1 %cmp688, label %if.then690, label %if.else694, !dbg !14195

if.then690:                                       ; preds = %lor.lhs.false681, %lor.lhs.false672, %lor.lhs.false663, %lor.lhs.false654, %land.lhs.true645
  %314 = load i32, i32* %loc.addr, align 4, !dbg !14196
  %315 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14197
  %common691 = bitcast %union.tree_node* %315 to %struct.tree_common*, !dbg !14197
  %type692 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common691, i32 0, i32 2, !dbg !14197
  %316 = load %union.tree_node*, %union.tree_node** %type692, align 8, !dbg !14197
  %317 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14198
  %call693 = call %union.tree_node* @fold_convert_loc(i32 %314, %union.tree_node* %316, %union.tree_node* %317), !dbg !14199
  store %union.tree_node* %call693, %union.tree_node** %expr, align 8, !dbg !14200
  br label %if.end698, !dbg !14201

if.else694:                                       ; preds = %lor.lhs.false681, %lor.lhs.false636
  %318 = load i32, i32* %loc.addr, align 4, !dbg !14202
  %319 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14202
  %common695 = bitcast %union.tree_node* %319 to %struct.tree_common*, !dbg !14202
  %type696 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common695, i32 0, i32 2, !dbg !14202
  %320 = load %union.tree_node*, %union.tree_node** %type696, align 8, !dbg !14202
  %321 = load %union.tree_node*, %union.tree_node** %srcvar, align 8, !dbg !14202
  %call697 = call %union.tree_node* @fold_build1_stat_loc(i32 %318, i32 118, %union.tree_node* %320, %union.tree_node* %321), !dbg !14202
  store %union.tree_node* %call697, %union.tree_node** %expr, align 8, !dbg !14203
  br label %if.end698

if.end698:                                        ; preds = %if.else694, %if.then690
  br label %if.end699

if.end699:                                        ; preds = %if.end698, %if.then599
  %322 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14204
  %common700 = bitcast %union.tree_node* %322 to %struct.tree_common*, !dbg !14204
  %type701 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common700, i32 0, i32 2, !dbg !14204
  %323 = load %union.tree_node*, %union.tree_node** %type701, align 8, !dbg !14204
  %324 = load %union.tree_node*, %union.tree_node** %destvar, align 8, !dbg !14204
  %325 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14204
  %call702 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %323, %union.tree_node* %324, %union.tree_node* %325), !dbg !14204
  store %union.tree_node* %call702, %union.tree_node** %expr, align 8, !dbg !14205
  br label %if.end703

if.end703:                                        ; preds = %if.end699, %if.then13
  %326 = load i8, i8* %ignore.addr, align 1, !dbg !14206
  %tobool704 = icmp ne i8 %326, 0, !dbg !14206
  br i1 %tobool704, label %if.then705, label %if.end706, !dbg !14208

if.then705:                                       ; preds = %if.end703
  %327 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14209
  store %union.tree_node* %327, %union.tree_node** %retval, align 8, !dbg !14210
  br label %return, !dbg !14210

if.end706:                                        ; preds = %if.end703
  %328 = load i32, i32* %endp.addr, align 4, !dbg !14211
  %cmp707 = icmp eq i32 %328, 0, !dbg !14213
  br i1 %cmp707, label %if.then712, label %lor.lhs.false709, !dbg !14214

lor.lhs.false709:                                 ; preds = %if.end706
  %329 = load i32, i32* %endp.addr, align 4, !dbg !14215
  %cmp710 = icmp eq i32 %329, 3, !dbg !14216
  br i1 %cmp710, label %if.then712, label %if.end714, !dbg !14217

if.then712:                                       ; preds = %lor.lhs.false709, %if.end706
  %330 = load i32, i32* %loc.addr, align 4, !dbg !14218
  %331 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !14219
  %332 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14220
  %333 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14221
  %call713 = call %union.tree_node* @omit_one_operand_loc(i32 %330, %union.tree_node* %331, %union.tree_node* %332, %union.tree_node* %333), !dbg !14222
  store %union.tree_node* %call713, %union.tree_node** %retval, align 8, !dbg !14223
  br label %return, !dbg !14223

if.end714:                                        ; preds = %lor.lhs.false709
  %334 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14224
  %335 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14226
  %cmp715 = icmp eq %union.tree_node* %334, %335, !dbg !14227
  br i1 %cmp715, label %if.then717, label %if.end718, !dbg !14228

if.then717:                                       ; preds = %if.end714
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !14229
  br label %if.end718, !dbg !14230

if.end718:                                        ; preds = %if.then717, %if.end714
  %336 = load i32, i32* %endp.addr, align 4, !dbg !14231
  %cmp719 = icmp eq i32 %336, 2, !dbg !14233
  br i1 %cmp719, label %if.then721, label %if.end726, !dbg !14234

if.then721:                                       ; preds = %if.end718
  %337 = load i32, i32* %loc.addr, align 4, !dbg !14235
  %338 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14235
  %common722 = bitcast %union.tree_node* %338 to %struct.tree_common*, !dbg !14235
  %type723 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common722, i32 0, i32 2, !dbg !14235
  %339 = load %union.tree_node*, %union.tree_node** %type723, align 8, !dbg !14235
  %340 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14235
  %call724 = call %union.tree_node* @size_int_kind(i64 1, i32 1), !dbg !14235
  %call725 = call %union.tree_node* @fold_build2_stat_loc(i32 %337, i32 64, %union.tree_node* %339, %union.tree_node* %340, %union.tree_node* %call724), !dbg !14235
  store %union.tree_node* %call725, %union.tree_node** %len.addr, align 8, !dbg !14236
  br label %if.end726, !dbg !14237

if.end726:                                        ; preds = %if.then721, %if.end718
  %341 = load i32, i32* %loc.addr, align 4, !dbg !14238
  %342 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !14239
  %343 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14240
  %call727 = call %union.tree_node* @fold_convert_loc(i32 %341, %union.tree_node* %342, %union.tree_node* %343), !dbg !14241
  store %union.tree_node* %call727, %union.tree_node** %len.addr, align 8, !dbg !14242
  %344 = load i32, i32* %loc.addr, align 4, !dbg !14243
  %345 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14243
  %common728 = bitcast %union.tree_node* %345 to %struct.tree_common*, !dbg !14243
  %type729 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common728, i32 0, i32 2, !dbg !14243
  %346 = load %union.tree_node*, %union.tree_node** %type729, align 8, !dbg !14243
  %347 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14243
  %348 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14243
  %call730 = call %union.tree_node* @fold_build2_stat_loc(i32 %344, i32 66, %union.tree_node* %346, %union.tree_node* %347, %union.tree_node* %348), !dbg !14243
  store %union.tree_node* %call730, %union.tree_node** %dest.addr, align 8, !dbg !14244
  %349 = load i32, i32* %loc.addr, align 4, !dbg !14245
  %350 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !14246
  %351 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14247
  %call731 = call %union.tree_node* @fold_convert_loc(i32 %349, %union.tree_node* %350, %union.tree_node* %351), !dbg !14248
  store %union.tree_node* %call731, %union.tree_node** %dest.addr, align 8, !dbg !14249
  %352 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14250
  %tobool732 = icmp ne %union.tree_node* %352, null, !dbg !14250
  br i1 %tobool732, label %if.then733, label %if.end735, !dbg !14252

if.then733:                                       ; preds = %if.end726
  %353 = load i32, i32* %loc.addr, align 4, !dbg !14253
  %354 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !14254
  %355 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14255
  %356 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14256
  %call734 = call %union.tree_node* @omit_one_operand_loc(i32 %353, %union.tree_node* %354, %union.tree_node* %355, %union.tree_node* %356), !dbg !14257
  store %union.tree_node* %call734, %union.tree_node** %dest.addr, align 8, !dbg !14258
  br label %if.end735, !dbg !14259

if.end735:                                        ; preds = %if.then733, %if.end726
  %357 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14260
  store %union.tree_node* %357, %union.tree_node** %retval, align 8, !dbg !14261
  br label %return, !dbg !14261

return:                                           ; preds = %if.end735, %if.then712, %if.then705, %if.then568, %if.then533, %if.then503, %if.then468, %if.then455, %if.then436, %if.then410, %if.then392, %if.then372, %if.then234, %if.end230, %if.end228, %if.then227, %if.else223, %if.then221, %if.then195, %if.end41, %if.then40, %if.then24, %if.then8, %if.then
  %358 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14262
  ret %union.tree_node* %358, !dbg !14262
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strncat(i32 %loc, %union.tree_node* %dst, %union.tree_node* %src, %union.tree_node* %len) #0 !dbg !14263 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %dst.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  %fn = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14264, metadata !DIExpression()), !dbg !14265
  store %union.tree_node* %dst, %union.tree_node** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dst.addr, metadata !14266, metadata !DIExpression()), !dbg !14267
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !14268, metadata !DIExpression()), !dbg !14269
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !14270, metadata !DIExpression()), !dbg !14271
  %0 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !14272
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14274
  %tobool = icmp ne i8 %call, 0, !dbg !14274
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14275

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14276
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !14277
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14277
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14278

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14279
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14280
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14280
  br i1 %tobool5, label %if.else, label %if.then, !dbg !14281

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14282
  br label %return, !dbg !14282

if.else:                                          ; preds = %lor.lhs.false3
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14283, metadata !DIExpression()), !dbg !14285
  %3 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14286
  %call6 = call i8* @c_getstr(%union.tree_node* %3), !dbg !14287
  store i8* %call6, i8** %p, align 8, !dbg !14285
  %4 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14288
  %call7 = call i32 @integer_zerop(%union.tree_node* %4), !dbg !14290
  %tobool8 = icmp ne i32 %call7, 0, !dbg !14290
  br i1 %tobool8, label %if.then12, label %lor.lhs.false9, !dbg !14291

lor.lhs.false9:                                   ; preds = %if.else
  %5 = load i8*, i8** %p, align 8, !dbg !14292
  %tobool10 = icmp ne i8* %5, null, !dbg !14292
  br i1 %tobool10, label %land.lhs.true, label %if.end, !dbg !14293

land.lhs.true:                                    ; preds = %lor.lhs.false9
  %6 = load i8*, i8** %p, align 8, !dbg !14294
  %7 = load i8, i8* %6, align 1, !dbg !14295
  %conv = sext i8 %7 to i32, !dbg !14295
  %cmp = icmp eq i32 %conv, 0, !dbg !14296
  br i1 %cmp, label %if.then12, label %if.end, !dbg !14297

if.then12:                                        ; preds = %land.lhs.true, %if.else
  %8 = load i32, i32* %loc.addr, align 4, !dbg !14298
  %9 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !14299
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !14299
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14299
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14299
  %11 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !14300
  %12 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14301
  %13 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14302
  %call13 = call %union.tree_node* @omit_two_operands_loc(i32 %8, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !14303
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !14304
  br label %return, !dbg !14304

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false9
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14305
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !14305
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !14305
  %bf.load = load i64, i64* %15, align 8, !dbg !14305
  %bf.clear = and i64 %bf.load, 65535, !dbg !14305
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14305
  %cmp14 = icmp eq i32 %bf.cast, 23, !dbg !14307
  br i1 %cmp14, label %land.lhs.true16, label %if.end28, !dbg !14308

land.lhs.true16:                                  ; preds = %if.end
  %16 = load i8*, i8** %p, align 8, !dbg !14309
  %tobool17 = icmp ne i8* %16, null, !dbg !14309
  br i1 %tobool17, label %land.lhs.true18, label %if.end28, !dbg !14310

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %17 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14311
  %18 = load i8*, i8** %p, align 8, !dbg !14312
  %call19 = call i64 @strlen(i8* %18), !dbg !14313
  %call20 = call i32 @compare_tree_int(%union.tree_node* %17, i64 %call19), !dbg !14314
  %cmp21 = icmp sge i32 %call20, 0, !dbg !14315
  br i1 %cmp21, label %if.then23, label %if.end28, !dbg !14316

if.then23:                                        ; preds = %land.lhs.true18
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !14317, metadata !DIExpression()), !dbg !14319
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 338), align 16, !dbg !14320
  store %union.tree_node* %19, %union.tree_node** %fn, align 8, !dbg !14319
  %20 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14321
  %tobool24 = icmp ne %union.tree_node* %20, null, !dbg !14321
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !14323

if.then25:                                        ; preds = %if.then23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14324
  br label %return, !dbg !14324

if.end26:                                         ; preds = %if.then23
  %21 = load i32, i32* %loc.addr, align 4, !dbg !14325
  %22 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14326
  %23 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !14327
  %24 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14328
  %call27 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %21, %union.tree_node* %22, i32 2, %union.tree_node* %23, %union.tree_node* %24), !dbg !14329
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !14330
  br label %return, !dbg !14330

if.end28:                                         ; preds = %land.lhs.true18, %land.lhs.true16, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14331
  br label %return, !dbg !14331

return:                                           ; preds = %if.end28, %if.end26, %if.then25, %if.then12, %if.then
  %25 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14332
  ret %union.tree_node* %25, !dbg !14332
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strncmp(i32 %loc, %union.tree_node* %arg1, %union.tree_node* %arg2, %union.tree_node* %len) #0 !dbg !14333 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %i = alloca i32, align 4
  %cst_uchar_node = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node = alloca %union.tree_node*, align 8
  %cst_uchar_node66 = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node68 = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %cst_uchar_node82 = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node84 = alloca %union.tree_node*, align 8
  %ind1 = alloca %union.tree_node*, align 8
  %ind2 = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14334, metadata !DIExpression()), !dbg !14335
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !14336, metadata !DIExpression()), !dbg !14337
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !14338, metadata !DIExpression()), !dbg !14339
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !14340, metadata !DIExpression()), !dbg !14341
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !14342, metadata !DIExpression()), !dbg !14343
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !14344, metadata !DIExpression()), !dbg !14345
  %0 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14346
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14348
  %tobool = icmp ne i8 %call, 0, !dbg !14348
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14349

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14350
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !14351
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14351
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14352

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14353
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14354
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14354
  br i1 %tobool5, label %if.end, label %if.then, !dbg !14355

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14356
  br label %return, !dbg !14356

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14357
  %call6 = call i32 @integer_zerop(%union.tree_node* %3), !dbg !14359
  %tobool7 = icmp ne i32 %call6, 0, !dbg !14359
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !14360

if.then8:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !14361
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14362
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14363
  %7 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14364
  %8 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14365
  %call9 = call %union.tree_node* @omit_two_operands_loc(i32 %4, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !14366
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !14367
  br label %return, !dbg !14367

if.end10:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14368
  %10 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14370
  %call11 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %10, i32 0), !dbg !14371
  %tobool12 = icmp ne i32 %call11, 0, !dbg !14371
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !14372

if.then13:                                        ; preds = %if.end10
  %11 = load i32, i32* %loc.addr, align 4, !dbg !14373
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14374
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14375
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14376
  %call14 = call %union.tree_node* @omit_one_operand_loc(i32 %11, %union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !14377
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !14378
  br label %return, !dbg !14378

if.end15:                                         ; preds = %if.end10
  %15 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14379
  %call16 = call i8* @c_getstr(%union.tree_node* %15), !dbg !14380
  store i8* %call16, i8** %p1, align 8, !dbg !14381
  %16 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14382
  %call17 = call i8* @c_getstr(%union.tree_node* %16), !dbg !14383
  store i8* %call17, i8** %p2, align 8, !dbg !14384
  %17 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14385
  %call18 = call i32 @host_integerp(%union.tree_node* %17, i32 1), !dbg !14387
  %tobool19 = icmp ne i32 %call18, 0, !dbg !14387
  br i1 %tobool19, label %land.lhs.true, label %if.end30, !dbg !14388

land.lhs.true:                                    ; preds = %if.end15
  %18 = load i8*, i8** %p1, align 8, !dbg !14389
  %tobool20 = icmp ne i8* %18, null, !dbg !14389
  br i1 %tobool20, label %land.lhs.true21, label %if.end30, !dbg !14390

land.lhs.true21:                                  ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 8, !dbg !14391
  %tobool22 = icmp ne i8* %19, null, !dbg !14391
  br i1 %tobool22, label %if.then23, label %if.end30, !dbg !14392

if.then23:                                        ; preds = %land.lhs.true21
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14393, metadata !DIExpression()), !dbg !14395
  %20 = load i8*, i8** %p1, align 8, !dbg !14396
  %21 = load i8*, i8** %p2, align 8, !dbg !14397
  %22 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14398
  %call24 = call i64 @tree_low_cst(%union.tree_node* %22, i32 1), !dbg !14399
  %call25 = call i32 @strncmp(i8* %20, i8* %21, i64 %call24), !dbg !14400
  store i32 %call25, i32* %i, align 4, !dbg !14395
  %23 = load i32, i32* %i, align 4, !dbg !14401
  %cmp = icmp sgt i32 %23, 0, !dbg !14403
  br i1 %cmp, label %if.then26, label %if.else, !dbg !14404

if.then26:                                        ; preds = %if.then23
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !14405
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !14406
  br label %return, !dbg !14406

if.else:                                          ; preds = %if.then23
  %25 = load i32, i32* %i, align 4, !dbg !14407
  %cmp27 = icmp slt i32 %25, 0, !dbg !14409
  br i1 %cmp27, label %if.then28, label %if.else29, !dbg !14410

if.then28:                                        ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !14411
  store %union.tree_node* %26, %union.tree_node** %retval, align 8, !dbg !14412
  br label %return, !dbg !14412

if.else29:                                        ; preds = %if.else
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14413
  store %union.tree_node* %27, %union.tree_node** %retval, align 8, !dbg !14414
  br label %return, !dbg !14414

if.end30:                                         ; preds = %land.lhs.true21, %land.lhs.true, %if.end15
  %28 = load i8*, i8** %p2, align 8, !dbg !14415
  %tobool31 = icmp ne i8* %28, null, !dbg !14415
  br i1 %tobool31, label %land.lhs.true32, label %if.end48, !dbg !14417

land.lhs.true32:                                  ; preds = %if.end30
  %29 = load i8*, i8** %p2, align 8, !dbg !14418
  %30 = load i8, i8* %29, align 1, !dbg !14419
  %conv = sext i8 %30 to i32, !dbg !14419
  %cmp33 = icmp eq i32 %conv, 0, !dbg !14420
  br i1 %cmp33, label %land.lhs.true35, label %if.end48, !dbg !14421

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %31 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14422
  %base = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !14422
  %32 = bitcast %struct.tree_base* %base to i64*, !dbg !14422
  %bf.load = load i64, i64* %32, align 8, !dbg !14422
  %bf.clear = and i64 %bf.load, 65535, !dbg !14422
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14422
  %cmp36 = icmp eq i32 %bf.cast, 23, !dbg !14423
  br i1 %cmp36, label %land.lhs.true38, label %if.end48, !dbg !14424

land.lhs.true38:                                  ; preds = %land.lhs.true35
  %33 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14425
  %call39 = call i32 @tree_int_cst_sgn(%union.tree_node* %33), !dbg !14426
  %cmp40 = icmp eq i32 %call39, 1, !dbg !14427
  br i1 %cmp40, label %if.then42, label %if.end48, !dbg !14428

if.then42:                                        ; preds = %land.lhs.true38
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node, metadata !14429, metadata !DIExpression()), !dbg !14431
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !14432
  %call43 = call %union.tree_node* @build_qualified_type(%union.tree_node* %34, i32 1), !dbg !14432
  store %union.tree_node* %call43, %union.tree_node** %cst_uchar_node, align 8, !dbg !14431
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node, metadata !14433, metadata !DIExpression()), !dbg !14434
  %35 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !14435
  %36 = load i32, i32* @ptr_mode, align 4, !dbg !14436
  %call44 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %35, i32 %36, i8 zeroext 1), !dbg !14437
  store %union.tree_node* %call44, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !14434
  %37 = load i32, i32* %loc.addr, align 4, !dbg !14438
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14439
  %39 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !14440
  %40 = load i32, i32* %loc.addr, align 4, !dbg !14440
  %41 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !14440
  %42 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14440
  %call45 = call %union.tree_node* @fold_convert_loc(i32 %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !14440
  %call46 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %39, %union.tree_node* %call45), !dbg !14440
  %call47 = call %union.tree_node* @fold_convert_loc(i32 %37, %union.tree_node* %38, %union.tree_node* %call46), !dbg !14441
  store %union.tree_node* %call47, %union.tree_node** %retval, align 8, !dbg !14442
  br label %return, !dbg !14442

if.end48:                                         ; preds = %land.lhs.true38, %land.lhs.true35, %land.lhs.true32, %if.end30
  %43 = load i8*, i8** %p1, align 8, !dbg !14443
  %tobool49 = icmp ne i8* %43, null, !dbg !14443
  br i1 %tobool49, label %land.lhs.true50, label %if.end74, !dbg !14445

land.lhs.true50:                                  ; preds = %if.end48
  %44 = load i8*, i8** %p1, align 8, !dbg !14446
  %45 = load i8, i8* %44, align 1, !dbg !14447
  %conv51 = sext i8 %45 to i32, !dbg !14447
  %cmp52 = icmp eq i32 %conv51, 0, !dbg !14448
  br i1 %cmp52, label %land.lhs.true54, label %if.end74, !dbg !14449

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %46 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14450
  %base55 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !14450
  %47 = bitcast %struct.tree_base* %base55 to i64*, !dbg !14450
  %bf.load56 = load i64, i64* %47, align 8, !dbg !14450
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !14450
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !14450
  %cmp59 = icmp eq i32 %bf.cast58, 23, !dbg !14451
  br i1 %cmp59, label %land.lhs.true61, label %if.end74, !dbg !14452

land.lhs.true61:                                  ; preds = %land.lhs.true54
  %48 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14453
  %call62 = call i32 @tree_int_cst_sgn(%union.tree_node* %48), !dbg !14454
  %cmp63 = icmp eq i32 %call62, 1, !dbg !14455
  br i1 %cmp63, label %if.then65, label %if.end74, !dbg !14456

if.then65:                                        ; preds = %land.lhs.true61
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node66, metadata !14457, metadata !DIExpression()), !dbg !14459
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !14460
  %call67 = call %union.tree_node* @build_qualified_type(%union.tree_node* %49, i32 1), !dbg !14460
  store %union.tree_node* %call67, %union.tree_node** %cst_uchar_node66, align 8, !dbg !14459
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node68, metadata !14461, metadata !DIExpression()), !dbg !14462
  %50 = load %union.tree_node*, %union.tree_node** %cst_uchar_node66, align 8, !dbg !14463
  %51 = load i32, i32* @ptr_mode, align 4, !dbg !14464
  %call69 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %50, i32 %51, i8 zeroext 1), !dbg !14465
  store %union.tree_node* %call69, %union.tree_node** %cst_uchar_ptr_node68, align 8, !dbg !14462
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !14466, metadata !DIExpression()), !dbg !14467
  %52 = load i32, i32* %loc.addr, align 4, !dbg !14468
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14469
  %54 = load %union.tree_node*, %union.tree_node** %cst_uchar_node66, align 8, !dbg !14470
  %55 = load i32, i32* %loc.addr, align 4, !dbg !14470
  %56 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node68, align 8, !dbg !14470
  %57 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14470
  %call70 = call %union.tree_node* @fold_convert_loc(i32 %55, %union.tree_node* %56, %union.tree_node* %57), !dbg !14470
  %call71 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %54, %union.tree_node* %call70), !dbg !14470
  %call72 = call %union.tree_node* @fold_convert_loc(i32 %52, %union.tree_node* %53, %union.tree_node* %call71), !dbg !14471
  store %union.tree_node* %call72, %union.tree_node** %temp, align 8, !dbg !14467
  %58 = load i32, i32* %loc.addr, align 4, !dbg !14472
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14472
  %60 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !14472
  %call73 = call %union.tree_node* @fold_build1_stat_loc(i32 %58, i32 79, %union.tree_node* %59, %union.tree_node* %60), !dbg !14472
  store %union.tree_node* %call73, %union.tree_node** %retval, align 8, !dbg !14473
  br label %return, !dbg !14473

if.end74:                                         ; preds = %land.lhs.true61, %land.lhs.true54, %land.lhs.true50, %if.end48
  %61 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14474
  %call75 = call i32 @host_integerp(%union.tree_node* %61, i32 1), !dbg !14476
  %tobool76 = icmp ne i32 %call75, 0, !dbg !14476
  br i1 %tobool76, label %land.lhs.true77, label %if.end93, !dbg !14477

land.lhs.true77:                                  ; preds = %if.end74
  %62 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14478
  %call78 = call i64 @tree_low_cst(%union.tree_node* %62, i32 1), !dbg !14479
  %cmp79 = icmp eq i64 %call78, 1, !dbg !14480
  br i1 %cmp79, label %if.then81, label %if.end93, !dbg !14481

if.then81:                                        ; preds = %land.lhs.true77
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node82, metadata !14482, metadata !DIExpression()), !dbg !14484
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !14485
  %call83 = call %union.tree_node* @build_qualified_type(%union.tree_node* %63, i32 1), !dbg !14485
  store %union.tree_node* %call83, %union.tree_node** %cst_uchar_node82, align 8, !dbg !14484
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node84, metadata !14486, metadata !DIExpression()), !dbg !14487
  %64 = load %union.tree_node*, %union.tree_node** %cst_uchar_node82, align 8, !dbg !14488
  %65 = load i32, i32* @ptr_mode, align 4, !dbg !14489
  %call85 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %64, i32 %65, i8 zeroext 1), !dbg !14490
  store %union.tree_node* %call85, %union.tree_node** %cst_uchar_ptr_node84, align 8, !dbg !14487
  call void @llvm.dbg.declare(metadata %union.tree_node** %ind1, metadata !14491, metadata !DIExpression()), !dbg !14492
  %66 = load i32, i32* %loc.addr, align 4, !dbg !14493
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14494
  %68 = load %union.tree_node*, %union.tree_node** %cst_uchar_node82, align 8, !dbg !14495
  %69 = load i32, i32* %loc.addr, align 4, !dbg !14495
  %70 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node84, align 8, !dbg !14495
  %71 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14495
  %call86 = call %union.tree_node* @fold_convert_loc(i32 %69, %union.tree_node* %70, %union.tree_node* %71), !dbg !14495
  %call87 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %68, %union.tree_node* %call86), !dbg !14495
  %call88 = call %union.tree_node* @fold_convert_loc(i32 %66, %union.tree_node* %67, %union.tree_node* %call87), !dbg !14496
  store %union.tree_node* %call88, %union.tree_node** %ind1, align 8, !dbg !14492
  call void @llvm.dbg.declare(metadata %union.tree_node** %ind2, metadata !14497, metadata !DIExpression()), !dbg !14498
  %72 = load i32, i32* %loc.addr, align 4, !dbg !14499
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14500
  %74 = load %union.tree_node*, %union.tree_node** %cst_uchar_node82, align 8, !dbg !14501
  %75 = load i32, i32* %loc.addr, align 4, !dbg !14501
  %76 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node84, align 8, !dbg !14501
  %77 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14501
  %call89 = call %union.tree_node* @fold_convert_loc(i32 %75, %union.tree_node* %76, %union.tree_node* %77), !dbg !14501
  %call90 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %74, %union.tree_node* %call89), !dbg !14501
  %call91 = call %union.tree_node* @fold_convert_loc(i32 %72, %union.tree_node* %73, %union.tree_node* %call90), !dbg !14502
  store %union.tree_node* %call91, %union.tree_node** %ind2, align 8, !dbg !14498
  %78 = load i32, i32* %loc.addr, align 4, !dbg !14503
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14503
  %80 = load %union.tree_node*, %union.tree_node** %ind1, align 8, !dbg !14503
  %81 = load %union.tree_node*, %union.tree_node** %ind2, align 8, !dbg !14503
  %call92 = call %union.tree_node* @fold_build2_stat_loc(i32 %78, i32 64, %union.tree_node* %79, %union.tree_node* %80, %union.tree_node* %81), !dbg !14503
  store %union.tree_node* %call92, %union.tree_node** %retval, align 8, !dbg !14504
  br label %return, !dbg !14504

if.end93:                                         ; preds = %land.lhs.true77, %if.end74
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14505
  br label %return, !dbg !14505

return:                                           ; preds = %if.end93, %if.then81, %if.then65, %if.then42, %if.else29, %if.then28, %if.then26, %if.then13, %if.then8, %if.then
  %82 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14506
  ret %union.tree_node* %82, !dbg !14506
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_memchr(i32 %loc, %union.tree_node* %arg1, %union.tree_node* %arg2, %union.tree_node* %len, %union.tree_node* %type) #0 !dbg !14507 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %c = alloca i8, align 1
  %r = alloca i8*, align 8
  %tem = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14508, metadata !DIExpression()), !dbg !14509
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !14510, metadata !DIExpression()), !dbg !14511
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !14512, metadata !DIExpression()), !dbg !14513
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !14514, metadata !DIExpression()), !dbg !14515
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !14516, metadata !DIExpression()), !dbg !14517
  %0 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14518
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14520
  %tobool = icmp ne i8 %call, 0, !dbg !14520
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14521

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14522
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 8), !dbg !14523
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14523
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14524

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14525
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14526
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14526
  br i1 %tobool5, label %if.else, label %if.then, !dbg !14527

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14528
  br label %return, !dbg !14528

if.else:                                          ; preds = %lor.lhs.false3
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !14529, metadata !DIExpression()), !dbg !14531
  %3 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14532
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !14532
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !14532
  %bf.load = load i64, i64* %4, align 8, !dbg !14532
  %bf.clear = and i64 %bf.load, 65535, !dbg !14532
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14532
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !14534
  br i1 %cmp, label %if.then9, label %lor.lhs.false6, !dbg !14535

lor.lhs.false6:                                   ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14536
  %call7 = call i32 @host_integerp(%union.tree_node* %5, i32 1), !dbg !14537
  %tobool8 = icmp ne i32 %call7, 0, !dbg !14537
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !14538

if.then9:                                         ; preds = %lor.lhs.false6, %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14539
  br label %return, !dbg !14539

if.end:                                           ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14540
  %call10 = call i8* @c_getstr(%union.tree_node* %6), !dbg !14541
  store i8* %call10, i8** %p1, align 8, !dbg !14542
  %7 = load i8*, i8** %p1, align 8, !dbg !14543
  %tobool11 = icmp ne i8* %7, null, !dbg !14543
  br i1 %tobool11, label %land.lhs.true, label %if.end33, !dbg !14545

land.lhs.true:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14546
  %9 = load i8*, i8** %p1, align 8, !dbg !14547
  %call12 = call i64 @strlen(i8* %9), !dbg !14548
  %add = add i64 %call12, 1, !dbg !14549
  %call13 = call i32 @compare_tree_int(%union.tree_node* %8, i64 %add), !dbg !14550
  %cmp14 = icmp sle i32 %call13, 0, !dbg !14551
  br i1 %cmp14, label %if.then15, label %if.end33, !dbg !14552

if.then15:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8* %c, metadata !14553, metadata !DIExpression()), !dbg !14555
  call void @llvm.dbg.declare(metadata i8** %r, metadata !14556, metadata !DIExpression()), !dbg !14557
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !14558, metadata !DIExpression()), !dbg !14559
  %10 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14560
  %call16 = call i32 @target_char_cast(%union.tree_node* %10, i8* %c), !dbg !14562
  %tobool17 = icmp ne i32 %call16, 0, !dbg !14562
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !14563

if.then18:                                        ; preds = %if.then15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14564
  br label %return, !dbg !14564

if.end19:                                         ; preds = %if.then15
  %11 = load i8*, i8** %p1, align 8, !dbg !14565
  %12 = load i8, i8* %c, align 1, !dbg !14566
  %conv = sext i8 %12 to i32, !dbg !14566
  %13 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14567
  %call20 = call i64 @tree_low_cst(%union.tree_node* %13, i32 1), !dbg !14568
  %call21 = call i8* @memchr(i8* %11, i32 %conv, i64 %call20), !dbg !14569
  store i8* %call21, i8** %r, align 8, !dbg !14570
  %14 = load i8*, i8** %r, align 8, !dbg !14571
  %cmp22 = icmp eq i8* %14, null, !dbg !14573
  br i1 %cmp22, label %if.then24, label %if.end27, !dbg !14574

if.then24:                                        ; preds = %if.end19
  %15 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14575
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !14575
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14575
  %16 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !14575
  %call26 = call %union.tree_node* @build_int_cst(%union.tree_node* %16, i64 0), !dbg !14576
  store %union.tree_node* %call26, %union.tree_node** %retval, align 8, !dbg !14577
  br label %return, !dbg !14577

if.end27:                                         ; preds = %if.end19
  %17 = load i32, i32* %loc.addr, align 4, !dbg !14578
  %18 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14578
  %common28 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !14578
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !14578
  %19 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !14578
  %20 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14578
  %21 = load i8*, i8** %r, align 8, !dbg !14578
  %22 = load i8*, i8** %p1, align 8, !dbg !14578
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64, !dbg !14578
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64, !dbg !14578
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !14578
  %call30 = call %union.tree_node* @size_int_kind(i64 %sub.ptr.sub, i32 0), !dbg !14578
  %call31 = call %union.tree_node* @fold_build2_stat_loc(i32 %17, i32 66, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %call30), !dbg !14578
  store %union.tree_node* %call31, %union.tree_node** %tem, align 8, !dbg !14579
  %23 = load i32, i32* %loc.addr, align 4, !dbg !14580
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !14581
  %25 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !14582
  %call32 = call %union.tree_node* @fold_convert_loc(i32 %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !14583
  store %union.tree_node* %call32, %union.tree_node** %retval, align 8, !dbg !14584
  br label %return, !dbg !14584

if.end33:                                         ; preds = %land.lhs.true, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14585
  br label %return, !dbg !14585

return:                                           ; preds = %if.end33, %if.end27, %if.then24, %if.then18, %if.then9, %if.then
  %26 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14586
  ret %union.tree_node* %26, !dbg !14586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_memcmp(i32 %loc, %union.tree_node* %arg1, %union.tree_node* %arg2, %union.tree_node* %len) #0 !dbg !14587 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %arg1.addr = alloca %union.tree_node*, align 8
  %arg2.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %r = alloca i32, align 4
  %cst_uchar_node = alloca %union.tree_node*, align 8
  %cst_uchar_ptr_node = alloca %union.tree_node*, align 8
  %ind1 = alloca %union.tree_node*, align 8
  %ind2 = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14588, metadata !DIExpression()), !dbg !14589
  store %union.tree_node* %arg1, %union.tree_node** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1.addr, metadata !14590, metadata !DIExpression()), !dbg !14591
  store %union.tree_node* %arg2, %union.tree_node** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2.addr, metadata !14592, metadata !DIExpression()), !dbg !14593
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !14594, metadata !DIExpression()), !dbg !14595
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !14596, metadata !DIExpression()), !dbg !14597
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !14598, metadata !DIExpression()), !dbg !14599
  %0 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14600
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14602
  %tobool = icmp ne i8 %call, 0, !dbg !14602
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14603

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14604
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !14605
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14605
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14606

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14607
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14608
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14608
  br i1 %tobool5, label %if.end, label %if.then, !dbg !14609

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14610
  br label %return, !dbg !14610

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14611
  %call6 = call i32 @integer_zerop(%union.tree_node* %3), !dbg !14613
  %tobool7 = icmp ne i32 %call6, 0, !dbg !14613
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !14614

if.then8:                                         ; preds = %if.end
  %4 = load i32, i32* %loc.addr, align 4, !dbg !14615
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14616
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14617
  %7 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14618
  %8 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14619
  %call9 = call %union.tree_node* @omit_two_operands_loc(i32 %4, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !14620
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !14621
  br label %return, !dbg !14621

if.end10:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14622
  %10 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14624
  %call11 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %10, i32 0), !dbg !14625
  %tobool12 = icmp ne i32 %call11, 0, !dbg !14625
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !14626

if.then13:                                        ; preds = %if.end10
  %11 = load i32, i32* %loc.addr, align 4, !dbg !14627
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14628
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14629
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14630
  %call14 = call %union.tree_node* @omit_one_operand_loc(i32 %11, %union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !14631
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !14632
  br label %return, !dbg !14632

if.end15:                                         ; preds = %if.end10
  %15 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14633
  %call16 = call i8* @c_getstr(%union.tree_node* %15), !dbg !14634
  store i8* %call16, i8** %p1, align 8, !dbg !14635
  %16 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14636
  %call17 = call i8* @c_getstr(%union.tree_node* %16), !dbg !14637
  store i8* %call17, i8** %p2, align 8, !dbg !14638
  %17 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14639
  %call18 = call i32 @host_integerp(%union.tree_node* %17, i32 1), !dbg !14641
  %tobool19 = icmp ne i32 %call18, 0, !dbg !14641
  br i1 %tobool19, label %land.lhs.true, label %if.end39, !dbg !14642

land.lhs.true:                                    ; preds = %if.end15
  %18 = load i8*, i8** %p1, align 8, !dbg !14643
  %tobool20 = icmp ne i8* %18, null, !dbg !14643
  br i1 %tobool20, label %land.lhs.true21, label %if.end39, !dbg !14644

land.lhs.true21:                                  ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 8, !dbg !14645
  %tobool22 = icmp ne i8* %19, null, !dbg !14645
  br i1 %tobool22, label %land.lhs.true23, label %if.end39, !dbg !14646

land.lhs.true23:                                  ; preds = %land.lhs.true21
  %20 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14647
  %21 = load i8*, i8** %p1, align 8, !dbg !14648
  %call24 = call i64 @strlen(i8* %21), !dbg !14649
  %add = add i64 %call24, 1, !dbg !14650
  %call25 = call i32 @compare_tree_int(%union.tree_node* %20, i64 %add), !dbg !14651
  %cmp = icmp sle i32 %call25, 0, !dbg !14652
  br i1 %cmp, label %land.lhs.true26, label %if.end39, !dbg !14653

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %22 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14654
  %23 = load i8*, i8** %p2, align 8, !dbg !14655
  %call27 = call i64 @strlen(i8* %23), !dbg !14656
  %add28 = add i64 %call27, 1, !dbg !14657
  %call29 = call i32 @compare_tree_int(%union.tree_node* %22, i64 %add28), !dbg !14658
  %cmp30 = icmp sle i32 %call29, 0, !dbg !14659
  br i1 %cmp30, label %if.then31, label %if.end39, !dbg !14660

if.then31:                                        ; preds = %land.lhs.true26
  call void @llvm.dbg.declare(metadata i32* %r, metadata !14661, metadata !DIExpression()), !dbg !14663
  %24 = load i8*, i8** %p1, align 8, !dbg !14664
  %25 = load i8*, i8** %p2, align 8, !dbg !14665
  %26 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14666
  %call32 = call i64 @tree_low_cst(%union.tree_node* %26, i32 1), !dbg !14667
  %call33 = call i32 @memcmp(i8* %24, i8* %25, i64 %call32), !dbg !14668
  store i32 %call33, i32* %r, align 4, !dbg !14663
  %27 = load i32, i32* %r, align 4, !dbg !14669
  %cmp34 = icmp sgt i32 %27, 0, !dbg !14671
  br i1 %cmp34, label %if.then35, label %if.else, !dbg !14672

if.then35:                                        ; preds = %if.then31
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !14673
  store %union.tree_node* %28, %union.tree_node** %retval, align 8, !dbg !14674
  br label %return, !dbg !14674

if.else:                                          ; preds = %if.then31
  %29 = load i32, i32* %r, align 4, !dbg !14675
  %cmp36 = icmp slt i32 %29, 0, !dbg !14677
  br i1 %cmp36, label %if.then37, label %if.else38, !dbg !14678

if.then37:                                        ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !14679
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !14680
  br label %return, !dbg !14680

if.else38:                                        ; preds = %if.else
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14681
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !14682
  br label %return, !dbg !14682

if.end39:                                         ; preds = %land.lhs.true26, %land.lhs.true23, %land.lhs.true21, %land.lhs.true, %if.end15
  %32 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14683
  %call40 = call i32 @host_integerp(%union.tree_node* %32, i32 1), !dbg !14685
  %tobool41 = icmp ne i32 %call40, 0, !dbg !14685
  br i1 %tobool41, label %land.lhs.true42, label %if.end55, !dbg !14686

land.lhs.true42:                                  ; preds = %if.end39
  %33 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14687
  %call43 = call i64 @tree_low_cst(%union.tree_node* %33, i32 1), !dbg !14688
  %cmp44 = icmp eq i64 %call43, 1, !dbg !14689
  br i1 %cmp44, label %if.then45, label %if.end55, !dbg !14690

if.then45:                                        ; preds = %land.lhs.true42
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_node, metadata !14691, metadata !DIExpression()), !dbg !14693
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !14694
  %call46 = call %union.tree_node* @build_qualified_type(%union.tree_node* %34, i32 1), !dbg !14694
  store %union.tree_node* %call46, %union.tree_node** %cst_uchar_node, align 8, !dbg !14693
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst_uchar_ptr_node, metadata !14695, metadata !DIExpression()), !dbg !14696
  %35 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !14697
  %36 = load i32, i32* @ptr_mode, align 4, !dbg !14698
  %call47 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %35, i32 %36, i8 zeroext 1), !dbg !14699
  store %union.tree_node* %call47, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !14696
  call void @llvm.dbg.declare(metadata %union.tree_node** %ind1, metadata !14700, metadata !DIExpression()), !dbg !14701
  %37 = load i32, i32* %loc.addr, align 4, !dbg !14702
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14703
  %39 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !14704
  %40 = load i32, i32* %loc.addr, align 4, !dbg !14704
  %41 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !14704
  %42 = load %union.tree_node*, %union.tree_node** %arg1.addr, align 8, !dbg !14704
  %call48 = call %union.tree_node* @fold_convert_loc(i32 %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !14704
  %call49 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %39, %union.tree_node* %call48), !dbg !14704
  %call50 = call %union.tree_node* @fold_convert_loc(i32 %37, %union.tree_node* %38, %union.tree_node* %call49), !dbg !14705
  store %union.tree_node* %call50, %union.tree_node** %ind1, align 8, !dbg !14701
  call void @llvm.dbg.declare(metadata %union.tree_node** %ind2, metadata !14706, metadata !DIExpression()), !dbg !14707
  %43 = load i32, i32* %loc.addr, align 4, !dbg !14708
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14709
  %45 = load %union.tree_node*, %union.tree_node** %cst_uchar_node, align 8, !dbg !14710
  %46 = load i32, i32* %loc.addr, align 4, !dbg !14710
  %47 = load %union.tree_node*, %union.tree_node** %cst_uchar_ptr_node, align 8, !dbg !14710
  %48 = load %union.tree_node*, %union.tree_node** %arg2.addr, align 8, !dbg !14710
  %call51 = call %union.tree_node* @fold_convert_loc(i32 %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !14710
  %call52 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %45, %union.tree_node* %call51), !dbg !14710
  %call53 = call %union.tree_node* @fold_convert_loc(i32 %43, %union.tree_node* %44, %union.tree_node* %call52), !dbg !14711
  store %union.tree_node* %call53, %union.tree_node** %ind2, align 8, !dbg !14707
  %49 = load i32, i32* %loc.addr, align 4, !dbg !14712
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !14712
  %51 = load %union.tree_node*, %union.tree_node** %ind1, align 8, !dbg !14712
  %52 = load %union.tree_node*, %union.tree_node** %ind2, align 8, !dbg !14712
  %call54 = call %union.tree_node* @fold_build2_stat_loc(i32 %49, i32 64, %union.tree_node* %50, %union.tree_node* %51, %union.tree_node* %52), !dbg !14712
  store %union.tree_node* %call54, %union.tree_node** %retval, align 8, !dbg !14713
  br label %return, !dbg !14713

if.end55:                                         ; preds = %land.lhs.true42, %if.end39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14714
  br label %return, !dbg !14714

return:                                           ; preds = %if.end55, %if.then45, %if.else38, %if.then37, %if.then35, %if.then13, %if.then8, %if.then
  %53 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14715
  ret %union.tree_node* %53, !dbg !14715
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strcat_chk(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %size) #0 !dbg !14716 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14717, metadata !DIExpression()), !dbg !14718
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !14719, metadata !DIExpression()), !dbg !14720
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !14721, metadata !DIExpression()), !dbg !14722
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !14723, metadata !DIExpression()), !dbg !14724
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !14725, metadata !DIExpression()), !dbg !14726
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !14727, metadata !DIExpression()), !dbg !14728
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14729, metadata !DIExpression()), !dbg !14730
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14731
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14733
  %tobool = icmp ne i8 %call, 0, !dbg !14733
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14734

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14735
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !14736
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14736
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14737

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14738
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14739
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14739
  br i1 %tobool5, label %if.end, label %if.then, !dbg !14740

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14741
  br label %return, !dbg !14741

if.end:                                           ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14742
  %call6 = call i8* @c_getstr(%union.tree_node* %3), !dbg !14743
  store i8* %call6, i8** %p, align 8, !dbg !14744
  %4 = load i8*, i8** %p, align 8, !dbg !14745
  %tobool7 = icmp ne i8* %4, null, !dbg !14745
  br i1 %tobool7, label %land.lhs.true, label %if.end13, !dbg !14747

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8*, i8** %p, align 8, !dbg !14748
  %6 = load i8, i8* %5, align 1, !dbg !14749
  %conv = sext i8 %6 to i32, !dbg !14749
  %cmp = icmp eq i32 %conv, 0, !dbg !14750
  br i1 %cmp, label %if.then9, label %if.end13, !dbg !14751

if.then9:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* %loc.addr, align 4, !dbg !14752
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !14753
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !14753
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14753
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14753
  %common10 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !14753
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !14753
  %10 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !14753
  %11 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14754
  %12 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14755
  %call12 = call %union.tree_node* @omit_one_operand_loc(i32 %7, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12), !dbg !14756
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !14757
  br label %return, !dbg !14757

if.end13:                                         ; preds = %land.lhs.true, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14758
  %call14 = call i32 @host_integerp(%union.tree_node* %13, i32 1), !dbg !14760
  %tobool15 = icmp ne i32 %call14, 0, !dbg !14760
  br i1 %tobool15, label %lor.lhs.false16, label %if.then19, !dbg !14761

lor.lhs.false16:                                  ; preds = %if.end13
  %14 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14762
  %call17 = call i32 @integer_all_onesp(%union.tree_node* %14), !dbg !14763
  %tobool18 = icmp ne i32 %call17, 0, !dbg !14763
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !14764

if.then19:                                        ; preds = %lor.lhs.false16, %if.end13
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14765
  br label %return, !dbg !14765

if.end20:                                         ; preds = %lor.lhs.false16
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 338), align 16, !dbg !14766
  store %union.tree_node* %15, %union.tree_node** %fn, align 8, !dbg !14767
  %16 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14768
  %tobool21 = icmp ne %union.tree_node* %16, null, !dbg !14768
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !14770

if.then22:                                        ; preds = %if.end20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14771
  br label %return, !dbg !14771

if.end23:                                         ; preds = %if.end20
  %17 = load i32, i32* %loc.addr, align 4, !dbg !14772
  %18 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14773
  %19 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14774
  %20 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14775
  %call24 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %17, %union.tree_node* %18, i32 2, %union.tree_node* %19, %union.tree_node* %20), !dbg !14776
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !14777
  br label %return, !dbg !14777

return:                                           ; preds = %if.end23, %if.then22, %if.then19, %if.then9, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14778
  ret %union.tree_node* %21, !dbg !14778
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @readonly_data_expr(%union.tree_node* %exp) #0 !dbg !14779 {
entry:
  %retval = alloca i8, align 1
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !14780, metadata !DIExpression()), !dbg !14781
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14782
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %0), !dbg !14782
  store %union.tree_node* %call, %union.tree_node** %exp.addr, align 8, !dbg !14782
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14783
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !14783
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !14783
  %bf.load = load i64, i64* %2, align 8, !dbg !14783
  %bf.clear = and i64 %bf.load, 65535, !dbg !14783
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14783
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !14785
  br i1 %cmp, label %if.then, label %if.end, !dbg !14786

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !14787
  br label %return, !dbg !14787

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14788
  %exp1 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !14788
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !14788
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14788
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14788
  %call2 = call %union.tree_node* @get_base_address(%union.tree_node* %4), !dbg !14789
  store %union.tree_node* %call2, %union.tree_node** %exp.addr, align 8, !dbg !14790
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14791
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !14791
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !14793

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !14794
  br label %return, !dbg !14794

if.end4:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14795
  %base5 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !14795
  %7 = bitcast %struct.tree_base* %base5 to i64*, !dbg !14795
  %bf.load6 = load i64, i64* %7, align 8, !dbg !14795
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !14795
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !14795
  %cmp9 = icmp eq i32 %bf.cast8, 28, !dbg !14797
  br i1 %cmp9, label %if.then26, label %lor.lhs.false, !dbg !14798

lor.lhs.false:                                    ; preds = %if.end4
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14799
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14799
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !14799
  %bf.load11 = load i64, i64* %9, align 8, !dbg !14799
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !14799
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !14799
  %cmp14 = icmp eq i32 %bf.cast13, 51, !dbg !14800
  br i1 %cmp14, label %if.then26, label %lor.lhs.false15, !dbg !14801

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14802
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !14802
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !14802
  %bf.load17 = load i64, i64* %11, align 8, !dbg !14802
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !14802
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !14802
  %cmp20 = icmp eq i32 %bf.cast19, 32, !dbg !14803
  br i1 %cmp20, label %land.lhs.true, label %if.else, !dbg !14804

land.lhs.true:                                    ; preds = %lor.lhs.false15
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14805
  %base21 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !14805
  %13 = bitcast %struct.tree_base* %base21 to i64*, !dbg !14805
  %bf.load22 = load i64, i64* %13, align 8, !dbg !14805
  %bf.lshr = lshr i64 %bf.load22, 26, !dbg !14805
  %bf.clear23 = and i64 %bf.lshr, 1, !dbg !14805
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !14805
  %tobool25 = icmp ne i32 %bf.cast24, 0, !dbg !14805
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !14806

if.then26:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.end4
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14807
  %call27 = call zeroext i8 @decl_readonly_section(%union.tree_node* %14, i32 0), !dbg !14808
  store i8 %call27, i8* %retval, align 1, !dbg !14809
  br label %return, !dbg !14809

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false15
  store i8 0, i8* %retval, align 1, !dbg !14810
  br label %return, !dbg !14810

return:                                           ; preds = %if.else, %if.then26, %if.then3, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !14811
  ret i8 %15, !dbg !14811
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ranges_overlap_p(i64 %pos1, i64 %size1, i64 %pos2, i64 %size2) #0 !dbg !14812 {
entry:
  %retval = alloca i8, align 1
  %pos1.addr = alloca i64, align 8
  %size1.addr = alloca i64, align 8
  %pos2.addr = alloca i64, align 8
  %size2.addr = alloca i64, align 8
  store i64 %pos1, i64* %pos1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos1.addr, metadata !14816, metadata !DIExpression()), !dbg !14817
  store i64 %size1, i64* %size1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size1.addr, metadata !14818, metadata !DIExpression()), !dbg !14819
  store i64 %pos2, i64* %pos2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos2.addr, metadata !14820, metadata !DIExpression()), !dbg !14821
  store i64 %size2, i64* %size2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size2.addr, metadata !14822, metadata !DIExpression()), !dbg !14823
  %0 = load i64, i64* %pos1.addr, align 8, !dbg !14824
  %1 = load i64, i64* %pos2.addr, align 8, !dbg !14826
  %cmp = icmp uge i64 %0, %1, !dbg !14827
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14828

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %size2.addr, align 8, !dbg !14829
  %cmp1 = icmp eq i64 %2, -1, !dbg !14830
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !14831

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i64, i64* %pos1.addr, align 8, !dbg !14832
  %4 = load i64, i64* %pos2.addr, align 8, !dbg !14833
  %5 = load i64, i64* %size2.addr, align 8, !dbg !14834
  %add = add i64 %4, %5, !dbg !14835
  %cmp2 = icmp ult i64 %3, %add, !dbg !14836
  br i1 %cmp2, label %if.then, label %if.end, !dbg !14837

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !14838
  br label %return, !dbg !14838

if.end:                                           ; preds = %lor.lhs.false, %entry
  %6 = load i64, i64* %pos2.addr, align 8, !dbg !14839
  %7 = load i64, i64* %pos1.addr, align 8, !dbg !14841
  %cmp3 = icmp uge i64 %6, %7, !dbg !14842
  br i1 %cmp3, label %land.lhs.true4, label %if.end10, !dbg !14843

land.lhs.true4:                                   ; preds = %if.end
  %8 = load i64, i64* %size1.addr, align 8, !dbg !14844
  %cmp5 = icmp eq i64 %8, -1, !dbg !14845
  br i1 %cmp5, label %if.then9, label %lor.lhs.false6, !dbg !14846

lor.lhs.false6:                                   ; preds = %land.lhs.true4
  %9 = load i64, i64* %pos2.addr, align 8, !dbg !14847
  %10 = load i64, i64* %pos1.addr, align 8, !dbg !14848
  %11 = load i64, i64* %size1.addr, align 8, !dbg !14849
  %add7 = add i64 %10, %11, !dbg !14850
  %cmp8 = icmp ult i64 %9, %add7, !dbg !14851
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !14852

if.then9:                                         ; preds = %lor.lhs.false6, %land.lhs.true4
  store i8 1, i8* %retval, align 1, !dbg !14853
  br label %return, !dbg !14853

if.end10:                                         ; preds = %lor.lhs.false6, %if.end
  store i8 0, i8* %retval, align 1, !dbg !14854
  br label %return, !dbg !14854

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !14855
  ret i8 %12, !dbg !14855
}

declare dso_local %union.tree_node* @tree_expr_size(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !14856 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !14861, metadata !DIExpression()), !dbg !14862
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !14863
  %tobool = icmp ne %struct.function* %0, null, !dbg !14863
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !14864

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !14865
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !14866
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !14866
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !14865
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !14867

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !14868
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !14869
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !14869
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !14870
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !14870
  %bf.clear = and i8 %bf.load, 1, !dbg !14870
  %bf.cast = zext i8 %bf.clear to i32, !dbg !14870
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !14867
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !14871
  %land.ext = zext i1 %5 to i32, !dbg !14867
  %conv = trunc i32 %land.ext to i8, !dbg !14863
  ret i8 %conv, !dbg !14872
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local zeroext i8 @decl_readonly_section(%union.tree_node*, i32) #2

declare dso_local i8* @memchr(i8*, i32, i64) #2

declare dso_local i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_strncat_chk(i32 %loc, %union.tree_node* %fndecl, %union.tree_node* %dest, %union.tree_node* %src, %union.tree_node* %len, %union.tree_node* %size) #0 !dbg !14873 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %len.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  %src_len = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14874, metadata !DIExpression()), !dbg !14875
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !14876, metadata !DIExpression()), !dbg !14877
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !14878, metadata !DIExpression()), !dbg !14879
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !14880, metadata !DIExpression()), !dbg !14881
  store %union.tree_node* %len, %union.tree_node** %len.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %len.addr, metadata !14882, metadata !DIExpression()), !dbg !14883
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !14884, metadata !DIExpression()), !dbg !14885
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !14886, metadata !DIExpression()), !dbg !14887
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14888, metadata !DIExpression()), !dbg !14889
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14890
  %call = call zeroext i8 @validate_arg(%union.tree_node* %0, i32 10), !dbg !14892
  %tobool = icmp ne i8 %call, 0, !dbg !14892
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14893

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14894
  %call1 = call zeroext i8 @validate_arg(%union.tree_node* %1, i32 10), !dbg !14895
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14895
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !14896

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14897
  %call4 = call zeroext i8 @validate_arg(%union.tree_node* %2, i32 8), !dbg !14898
  %tobool5 = icmp ne i8 %call4, 0, !dbg !14898
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !14899

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %3 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14900
  %call7 = call zeroext i8 @validate_arg(%union.tree_node* %3, i32 8), !dbg !14901
  %tobool8 = icmp ne i8 %call7, 0, !dbg !14901
  br i1 %tobool8, label %if.end, label %if.then, !dbg !14902

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14903
  br label %return, !dbg !14903

if.end:                                           ; preds = %lor.lhs.false6
  %4 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14904
  %call9 = call i8* @c_getstr(%union.tree_node* %4), !dbg !14905
  store i8* %call9, i8** %p, align 8, !dbg !14906
  %5 = load i8*, i8** %p, align 8, !dbg !14907
  %tobool10 = icmp ne i8* %5, null, !dbg !14907
  br i1 %tobool10, label %land.lhs.true, label %if.else, !dbg !14909

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %p, align 8, !dbg !14910
  %7 = load i8, i8* %6, align 1, !dbg !14911
  %conv = sext i8 %7 to i32, !dbg !14911
  %cmp = icmp eq i32 %conv, 0, !dbg !14912
  br i1 %cmp, label %if.then12, label %if.else, !dbg !14913

if.then12:                                        ; preds = %land.lhs.true
  %8 = load i32, i32* %loc.addr, align 4, !dbg !14914
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !14915
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !14915
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14915
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14915
  %common13 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !14915
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !14915
  %11 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !14915
  %12 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14916
  %13 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14917
  %call15 = call %union.tree_node* @omit_one_operand_loc(i32 %8, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !14918
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !14919
  br label %return, !dbg !14919

if.else:                                          ; preds = %land.lhs.true, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14920
  %call16 = call i32 @integer_zerop(%union.tree_node* %14), !dbg !14922
  %tobool17 = icmp ne i32 %call16, 0, !dbg !14922
  br i1 %tobool17, label %if.then18, label %if.end24, !dbg !14923

if.then18:                                        ; preds = %if.else
  %15 = load i32, i32* %loc.addr, align 4, !dbg !14924
  %16 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !14925
  %common19 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !14925
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !14925
  %17 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !14925
  %common21 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !14925
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !14925
  %18 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !14925
  %19 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14926
  %20 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14927
  %call23 = call %union.tree_node* @omit_one_operand_loc(i32 %15, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !14928
  store %union.tree_node* %call23, %union.tree_node** %retval, align 8, !dbg !14929
  br label %return, !dbg !14929

if.end24:                                         ; preds = %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24
  %21 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14930
  %call26 = call i32 @host_integerp(%union.tree_node* %21, i32 1), !dbg !14932
  %tobool27 = icmp ne i32 %call26, 0, !dbg !14932
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !14933

if.then28:                                        ; preds = %if.end25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14934
  br label %return, !dbg !14934

if.end29:                                         ; preds = %if.end25
  %22 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14935
  %call30 = call i32 @integer_all_onesp(%union.tree_node* %22), !dbg !14937
  %tobool31 = icmp ne i32 %call30, 0, !dbg !14937
  br i1 %tobool31, label %if.end50, label %if.then32, !dbg !14938

if.then32:                                        ; preds = %if.end29
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_len, metadata !14939, metadata !DIExpression()), !dbg !14941
  %23 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14942
  %call33 = call %union.tree_node* @c_strlen(%union.tree_node* %23, i32 1), !dbg !14943
  store %union.tree_node* %call33, %union.tree_node** %src_len, align 8, !dbg !14941
  %24 = load %union.tree_node*, %union.tree_node** %src_len, align 8, !dbg !14944
  %tobool34 = icmp ne %union.tree_node* %24, null, !dbg !14944
  br i1 %tobool34, label %land.lhs.true35, label %if.end49, !dbg !14946

land.lhs.true35:                                  ; preds = %if.then32
  %25 = load %union.tree_node*, %union.tree_node** %src_len, align 8, !dbg !14947
  %call36 = call i32 @host_integerp(%union.tree_node* %25, i32 1), !dbg !14948
  %tobool37 = icmp ne i32 %call36, 0, !dbg !14948
  br i1 %tobool37, label %land.lhs.true38, label %if.end49, !dbg !14949

land.lhs.true38:                                  ; preds = %land.lhs.true35
  %26 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14950
  %call39 = call i32 @host_integerp(%union.tree_node* %26, i32 1), !dbg !14951
  %tobool40 = icmp ne i32 %call39, 0, !dbg !14951
  br i1 %tobool40, label %land.lhs.true41, label %if.end49, !dbg !14952

land.lhs.true41:                                  ; preds = %land.lhs.true38
  %27 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14953
  %28 = load %union.tree_node*, %union.tree_node** %src_len, align 8, !dbg !14954
  %call42 = call i32 @tree_int_cst_lt(%union.tree_node* %27, %union.tree_node* %28), !dbg !14955
  %tobool43 = icmp ne i32 %call42, 0, !dbg !14955
  br i1 %tobool43, label %if.end49, label %if.then44, !dbg !14956

if.then44:                                        ; preds = %land.lhs.true41
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 534), align 16, !dbg !14957
  store %union.tree_node* %29, %union.tree_node** %fn, align 8, !dbg !14959
  %30 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14960
  %tobool45 = icmp ne %union.tree_node* %30, null, !dbg !14960
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !14962

if.then46:                                        ; preds = %if.then44
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14963
  br label %return, !dbg !14963

if.end47:                                         ; preds = %if.then44
  %31 = load i32, i32* %loc.addr, align 4, !dbg !14964
  %32 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14965
  %33 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14966
  %34 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14967
  %35 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !14968
  %call48 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %31, %union.tree_node* %32, i32 3, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !14969
  store %union.tree_node* %call48, %union.tree_node** %retval, align 8, !dbg !14970
  br label %return, !dbg !14970

if.end49:                                         ; preds = %land.lhs.true41, %land.lhs.true38, %land.lhs.true35, %if.then32
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14971
  br label %return, !dbg !14971

if.end50:                                         ; preds = %if.end29
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 347), align 8, !dbg !14972
  store %union.tree_node* %36, %union.tree_node** %fn, align 8, !dbg !14973
  %37 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14974
  %tobool51 = icmp ne %union.tree_node* %37, null, !dbg !14974
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !14976

if.then52:                                        ; preds = %if.end50
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14977
  br label %return, !dbg !14977

if.end53:                                         ; preds = %if.end50
  %38 = load i32, i32* %loc.addr, align 4, !dbg !14978
  %39 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14979
  %40 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !14980
  %41 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !14981
  %42 = load %union.tree_node*, %union.tree_node** %len.addr, align 8, !dbg !14982
  %call54 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %38, %union.tree_node* %39, i32 3, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !14983
  store %union.tree_node* %call54, %union.tree_node** %retval, align 8, !dbg !14984
  br label %return, !dbg !14984

return:                                           ; preds = %if.end53, %if.then52, %if.end49, %if.end47, %if.then46, %if.then28, %if.then18, %if.then12, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14985
  ret %union.tree_node* %43, !dbg !14985
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_sprintf_chk(i32 %loc, %union.tree_node* %exp, i32 %fcode) #0 !dbg !14986 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %fcode.addr = alloca i32, align 4
  %dest = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fmt = alloca %union.tree_node*, align 8
  %flag = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  %nargs = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14989, metadata !DIExpression()), !dbg !14990
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !14991, metadata !DIExpression()), !dbg !14992
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !14993, metadata !DIExpression()), !dbg !14994
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !14995, metadata !DIExpression()), !dbg !14996
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !14997, metadata !DIExpression()), !dbg !14998
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !14999, metadata !DIExpression()), !dbg !15000
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !15001, metadata !DIExpression()), !dbg !15002
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt, metadata !15003, metadata !DIExpression()), !dbg !15004
  call void @llvm.dbg.declare(metadata %union.tree_node** %flag, metadata !15005, metadata !DIExpression()), !dbg !15006
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !15007, metadata !DIExpression()), !dbg !15008
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !15009, metadata !DIExpression()), !dbg !15010
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15011
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !15011
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !15011
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !15011
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15011
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !15011
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !15011
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !15011
  %2 = load i64, i64* %low, align 8, !dbg !15011
  %conv = trunc i64 %2 to i32, !dbg !15011
  %sub = sub nsw i32 %conv, 3, !dbg !15011
  store i32 %sub, i32* %nargs, align 4, !dbg !15010
  %3 = load i32, i32* %nargs, align 4, !dbg !15012
  %cmp = icmp slt i32 %3, 4, !dbg !15014
  br i1 %cmp, label %if.then, label %if.end, !dbg !15015

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15016
  br label %return, !dbg !15016

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15017
  %exp4 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !15017
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !15017
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 3, !dbg !15017
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !15017
  store %union.tree_node* %5, %union.tree_node** %dest, align 8, !dbg !15018
  %6 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15019
  %call = call zeroext i8 @validate_arg(%union.tree_node* %6, i32 10), !dbg !15021
  %tobool = icmp ne i8 %call, 0, !dbg !15021
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !15022

if.then7:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15023
  br label %return, !dbg !15023

if.end8:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15024
  %exp9 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !15024
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !15024
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 4, !dbg !15024
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !15024
  store %union.tree_node* %8, %union.tree_node** %flag, align 8, !dbg !15025
  %9 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15026
  %call12 = call zeroext i8 @validate_arg(%union.tree_node* %9, i32 8), !dbg !15028
  %tobool13 = icmp ne i8 %call12, 0, !dbg !15028
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !15029

if.then14:                                        ; preds = %if.end8
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15030
  br label %return, !dbg !15030

if.end15:                                         ; preds = %if.end8
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15031
  %exp16 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !15031
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !15031
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 5, !dbg !15031
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !15031
  store %union.tree_node* %11, %union.tree_node** %size, align 8, !dbg !15032
  %12 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15033
  %call19 = call zeroext i8 @validate_arg(%union.tree_node* %12, i32 8), !dbg !15035
  %tobool20 = icmp ne i8 %call19, 0, !dbg !15035
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !15036

if.then21:                                        ; preds = %if.end15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15037
  br label %return, !dbg !15037

if.end22:                                         ; preds = %if.end15
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15038
  %exp23 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !15038
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !15038
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 6, !dbg !15038
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !15038
  store %union.tree_node* %14, %union.tree_node** %fmt, align 8, !dbg !15039
  %15 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15040
  %call26 = call zeroext i8 @validate_arg(%union.tree_node* %15, i32 10), !dbg !15042
  %tobool27 = icmp ne i8 %call26, 0, !dbg !15042
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !15043

if.then28:                                        ; preds = %if.end22
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15044
  br label %return, !dbg !15044

if.end29:                                         ; preds = %if.end22
  %16 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15045
  %call30 = call i32 @host_integerp(%union.tree_node* %16, i32 1), !dbg !15047
  %tobool31 = icmp ne i32 %call30, 0, !dbg !15047
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !15048

if.then32:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15049
  br label %return, !dbg !15049

if.end33:                                         ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %len, align 8, !dbg !15050
  %call34 = call zeroext i8 @init_target_chars(), !dbg !15051
  %tobool35 = icmp ne i8 %call34, 0, !dbg !15051
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !15053

if.then36:                                        ; preds = %if.end33
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15054
  br label %return, !dbg !15054

if.end37:                                         ; preds = %if.end33
  %17 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15055
  %call38 = call i8* @c_getstr(%union.tree_node* %17), !dbg !15056
  store i8* %call38, i8** %fmt_str, align 8, !dbg !15057
  %18 = load i8*, i8** %fmt_str, align 8, !dbg !15058
  %cmp39 = icmp ne i8* %18, null, !dbg !15060
  br i1 %cmp39, label %if.then41, label %if.end81, !dbg !15061

if.then41:                                        ; preds = %if.end37
  %19 = load i8*, i8** %fmt_str, align 8, !dbg !15062
  %20 = load i64, i64* @target_percent, align 8, !dbg !15065
  %conv42 = trunc i64 %20 to i32, !dbg !15065
  %call43 = call i8* @strchr(i8* %19, i32 %conv42), !dbg !15066
  %cmp44 = icmp eq i8* %call43, null, !dbg !15067
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !15068

if.then46:                                        ; preds = %if.then41
  %21 = load i32, i32* %fcode.addr, align 4, !dbg !15069
  %cmp47 = icmp ne i32 %21, 539, !dbg !15072
  br i1 %cmp47, label %if.then51, label %lor.lhs.false, !dbg !15073

lor.lhs.false:                                    ; preds = %if.then46
  %22 = load i32, i32* %nargs, align 4, !dbg !15074
  %cmp49 = icmp eq i32 %22, 4, !dbg !15075
  br i1 %cmp49, label %if.then51, label %if.end54, !dbg !15076

if.then51:                                        ; preds = %lor.lhs.false, %if.then46
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !15077
  %24 = load i8*, i8** %fmt_str, align 8, !dbg !15078
  %call52 = call i64 @strlen(i8* %24), !dbg !15079
  %call53 = call %union.tree_node* @build_int_cstu(%union.tree_node* %23, i64 %call52), !dbg !15080
  store %union.tree_node* %call53, %union.tree_node** %len, align 8, !dbg !15081
  br label %if.end54, !dbg !15082

if.end54:                                         ; preds = %if.then51, %lor.lhs.false
  br label %if.end80, !dbg !15083

if.else:                                          ; preds = %if.then41
  %25 = load i32, i32* %fcode.addr, align 4, !dbg !15084
  %cmp55 = icmp eq i32 %25, 539, !dbg !15086
  br i1 %cmp55, label %land.lhs.true, label %if.end79, !dbg !15087

land.lhs.true:                                    ; preds = %if.else
  %26 = load i8*, i8** %fmt_str, align 8, !dbg !15088
  %call57 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !15089
  %cmp58 = icmp eq i32 %call57, 0, !dbg !15090
  br i1 %cmp58, label %if.then60, label %if.end79, !dbg !15091

if.then60:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !15092, metadata !DIExpression()), !dbg !15094
  %27 = load i32, i32* %nargs, align 4, !dbg !15095
  %cmp61 = icmp eq i32 %27, 5, !dbg !15097
  br i1 %cmp61, label %if.then63, label %if.end78, !dbg !15098

if.then63:                                        ; preds = %if.then60
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15099
  %exp64 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !15099
  %operands65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp64, i32 0, i32 3, !dbg !15099
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands65, i64 0, i64 7, !dbg !15099
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx66, align 8, !dbg !15099
  store %union.tree_node* %29, %union.tree_node** %arg, align 8, !dbg !15101
  %30 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15102
  %call67 = call zeroext i8 @validate_arg(%union.tree_node* %30, i32 10), !dbg !15104
  %tobool68 = icmp ne i8 %call67, 0, !dbg !15104
  br i1 %tobool68, label %if.then69, label %if.end77, !dbg !15105

if.then69:                                        ; preds = %if.then63
  %31 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15106
  %call70 = call %union.tree_node* @c_strlen(%union.tree_node* %31, i32 1), !dbg !15108
  store %union.tree_node* %call70, %union.tree_node** %len, align 8, !dbg !15109
  %32 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15110
  %tobool71 = icmp ne %union.tree_node* %32, null, !dbg !15110
  br i1 %tobool71, label %lor.lhs.false72, label %if.then75, !dbg !15112

lor.lhs.false72:                                  ; preds = %if.then69
  %33 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15113
  %call73 = call i32 @host_integerp(%union.tree_node* %33, i32 1), !dbg !15114
  %tobool74 = icmp ne i32 %call73, 0, !dbg !15114
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !15115

if.then75:                                        ; preds = %lor.lhs.false72, %if.then69
  store %union.tree_node* null, %union.tree_node** %len, align 8, !dbg !15116
  br label %if.end76, !dbg !15117

if.end76:                                         ; preds = %if.then75, %lor.lhs.false72
  br label %if.end77, !dbg !15118

if.end77:                                         ; preds = %if.end76, %if.then63
  br label %if.end78, !dbg !15119

if.end78:                                         ; preds = %if.end77, %if.then60
  br label %if.end79, !dbg !15120

if.end79:                                         ; preds = %if.end78, %land.lhs.true, %if.else
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end54
  br label %if.end81, !dbg !15121

if.end81:                                         ; preds = %if.end80, %if.end37
  %34 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15122
  %call82 = call i32 @integer_all_onesp(%union.tree_node* %34), !dbg !15124
  %tobool83 = icmp ne i32 %call82, 0, !dbg !15124
  br i1 %tobool83, label %if.end91, label %if.then84, !dbg !15125

if.then84:                                        ; preds = %if.end81
  %35 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15126
  %tobool85 = icmp ne %union.tree_node* %35, null, !dbg !15126
  br i1 %tobool85, label %lor.lhs.false86, label %if.then89, !dbg !15129

lor.lhs.false86:                                  ; preds = %if.then84
  %36 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15130
  %37 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15131
  %call87 = call i32 @tree_int_cst_lt(%union.tree_node* %36, %union.tree_node* %37), !dbg !15132
  %tobool88 = icmp ne i32 %call87, 0, !dbg !15132
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !15133

if.then89:                                        ; preds = %lor.lhs.false86, %if.then84
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15134
  br label %return, !dbg !15134

if.end90:                                         ; preds = %lor.lhs.false86
  br label %if.end91, !dbg !15135

if.end91:                                         ; preds = %if.end90, %if.end81
  %38 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15136
  %call92 = call i32 @integer_zerop(%union.tree_node* %38), !dbg !15138
  %tobool93 = icmp ne i32 %call92, 0, !dbg !15138
  br i1 %tobool93, label %if.end108, label %if.then94, !dbg !15139

if.then94:                                        ; preds = %if.end91
  %39 = load i8*, i8** %fmt_str, align 8, !dbg !15140
  %cmp95 = icmp eq i8* %39, null, !dbg !15143
  br i1 %cmp95, label %if.then97, label %if.end98, !dbg !15144

if.then97:                                        ; preds = %if.then94
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15145
  br label %return, !dbg !15145

if.end98:                                         ; preds = %if.then94
  %40 = load i8*, i8** %fmt_str, align 8, !dbg !15146
  %41 = load i64, i64* @target_percent, align 8, !dbg !15148
  %conv99 = trunc i64 %41 to i32, !dbg !15148
  %call100 = call i8* @strchr(i8* %40, i32 %conv99), !dbg !15149
  %cmp101 = icmp ne i8* %call100, null, !dbg !15150
  br i1 %cmp101, label %land.lhs.true103, label %if.end107, !dbg !15151

land.lhs.true103:                                 ; preds = %if.end98
  %42 = load i8*, i8** %fmt_str, align 8, !dbg !15152
  %call104 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !15153
  %tobool105 = icmp ne i32 %call104, 0, !dbg !15153
  br i1 %tobool105, label %if.then106, label %if.end107, !dbg !15154

if.then106:                                       ; preds = %land.lhs.true103
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15155
  br label %return, !dbg !15155

if.end107:                                        ; preds = %land.lhs.true103, %if.end98
  br label %if.end108, !dbg !15156

if.end108:                                        ; preds = %if.end107, %if.end91
  %43 = load i32, i32* %fcode.addr, align 4, !dbg !15157
  %cmp109 = icmp eq i32 %43, 541, !dbg !15158
  %44 = zext i1 %cmp109 to i64, !dbg !15157
  %cond = select i1 %cmp109, i32 380, i32 373, !dbg !15157
  %idxprom = sext i32 %cond to i64, !dbg !15159
  %arrayidx111 = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !15159
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !15159
  store %union.tree_node* %45, %union.tree_node** %fn, align 8, !dbg !15160
  %46 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15161
  %tobool112 = icmp ne %union.tree_node* %46, null, !dbg !15161
  br i1 %tobool112, label %if.end114, label %if.then113, !dbg !15163

if.then113:                                       ; preds = %if.end108
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15164
  br label %return, !dbg !15164

if.end114:                                        ; preds = %if.end108
  %47 = load i32, i32* %loc.addr, align 4, !dbg !15165
  %48 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15166
  %49 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15167
  %50 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15168
  %51 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15169
  %call115 = call %union.tree_node* (i32, %union.tree_node*, i32, %union.tree_node*, i32, ...) @rewrite_call_expr(i32 %47, %union.tree_node* %48, i32 4, %union.tree_node* %49, i32 2, %union.tree_node* %50, %union.tree_node* %51), !dbg !15170
  store %union.tree_node* %call115, %union.tree_node** %retval, align 8, !dbg !15171
  br label %return, !dbg !15171

return:                                           ; preds = %if.end114, %if.then113, %if.then106, %if.then97, %if.then89, %if.then36, %if.then32, %if.then28, %if.then21, %if.then14, %if.then7, %if.then
  %52 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15172
  ret %union.tree_node* %52, !dbg !15172
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_builtin_fpclassify(i32 %loc, %union.tree_node* %exp) #0 !dbg !15173 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %fp_nan = alloca %union.tree_node*, align 8
  %fp_infinite = alloca %union.tree_node*, align 8
  %fp_normal = alloca %union.tree_node*, align 8
  %fp_subnormal = alloca %union.tree_node*, align 8
  %fp_zero = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  %buf = alloca [128 x i8], align 16
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !15174, metadata !DIExpression()), !dbg !15175
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !15176, metadata !DIExpression()), !dbg !15177
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp_nan, metadata !15178, metadata !DIExpression()), !dbg !15179
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp_infinite, metadata !15180, metadata !DIExpression()), !dbg !15181
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp_normal, metadata !15182, metadata !DIExpression()), !dbg !15183
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp_subnormal, metadata !15184, metadata !DIExpression()), !dbg !15185
  call void @llvm.dbg.declare(metadata %union.tree_node** %fp_zero, metadata !15186, metadata !DIExpression()), !dbg !15187
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !15188, metadata !DIExpression()), !dbg !15189
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !15190, metadata !DIExpression()), !dbg !15191
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !15192, metadata !DIExpression()), !dbg !15193
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !15194, metadata !DIExpression()), !dbg !15195
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15196, metadata !DIExpression()), !dbg !15197
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !15198, metadata !DIExpression()), !dbg !15199
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf, metadata !15200, metadata !DIExpression()), !dbg !15201
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15202
  %call = call zeroext i8 (%union.tree_node*, ...) @validate_arglist(%union.tree_node* %0, i32 8, i32 8, i32 8, i32 8, i32 8, i32 9, i32 19), !dbg !15204
  %tobool = icmp ne i8 %call, 0, !dbg !15204
  br i1 %tobool, label %if.end, label %if.then, !dbg !15205

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15206
  br label %return, !dbg !15206

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15207
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !15207
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !15207
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !15207
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15207
  store %union.tree_node* %2, %union.tree_node** %fp_nan, align 8, !dbg !15208
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15209
  %exp2 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !15209
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !15209
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 4, !dbg !15209
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !15209
  store %union.tree_node* %4, %union.tree_node** %fp_infinite, align 8, !dbg !15210
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15211
  %exp5 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !15211
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !15211
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 5, !dbg !15211
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !15211
  store %union.tree_node* %6, %union.tree_node** %fp_normal, align 8, !dbg !15212
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15213
  %exp8 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !15213
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !15213
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 6, !dbg !15213
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !15213
  store %union.tree_node* %8, %union.tree_node** %fp_subnormal, align 8, !dbg !15214
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15215
  %exp11 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !15215
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !15215
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 7, !dbg !15215
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !15215
  store %union.tree_node* %10, %union.tree_node** %fp_zero, align 8, !dbg !15216
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !15217
  %exp14 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !15217
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !15217
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 8, !dbg !15217
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !15217
  store %union.tree_node* %12, %union.tree_node** %arg, align 8, !dbg !15218
  %13 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15219
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !15219
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15219
  %14 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !15219
  store %union.tree_node* %14, %union.tree_node** %type, align 8, !dbg !15220
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15221
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !15221
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !15221
  %bf.load = load i64, i64* %16, align 8, !dbg !15221
  %bf.clear = and i64 %bf.load, 65535, !dbg !15221
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15221
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !15221
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !15221

cond.true:                                        ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15221
  %call18 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !15221
  br label %cond.end, !dbg !15221

cond.false:                                       ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15221
  %type19 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !15221
  %mode20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !15221
  %bf.load21 = load i32, i32* %mode20, align 4, !dbg !15221
  %bf.lshr = lshr i32 %bf.load21, 16, !dbg !15221
  %bf.clear22 = and i32 %bf.lshr, 255, !dbg !15221
  br label %cond.end, !dbg !15221

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call18, %cond.true ], [ %bf.clear22, %cond.false ], !dbg !15221
  store i32 %cond, i32* %mode, align 4, !dbg !15222
  %19 = load i32, i32* %loc.addr, align 4, !dbg !15223
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15223
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15223
  %call23 = call %union.tree_node* @fold_build1_stat_loc(i32 %19, i32 82, %union.tree_node* %20, %union.tree_node* %21), !dbg !15223
  %call24 = call %union.tree_node* @builtin_save_expr(%union.tree_node* %call23), !dbg !15224
  store %union.tree_node* %call24, %union.tree_node** %arg, align 8, !dbg !15225
  %22 = load i32, i32* %loc.addr, align 4, !dbg !15226
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15226
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15226
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15226
  %call25 = call %union.tree_node* @build_real(%union.tree_node* %25, %struct.real_value* byval(%struct.real_value) align 8 @dconst0), !dbg !15226
  %call26 = call %union.tree_node* @fold_build2_stat_loc(i32 %22, i32 101, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %call25), !dbg !15226
  store %union.tree_node* %call26, %union.tree_node** %tmp, align 8, !dbg !15227
  %26 = load i32, i32* %loc.addr, align 4, !dbg !15228
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15228
  %28 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !15228
  %29 = load %union.tree_node*, %union.tree_node** %fp_zero, align 8, !dbg !15228
  %30 = load %union.tree_node*, %union.tree_node** %fp_subnormal, align 8, !dbg !15228
  %call27 = call %union.tree_node* @fold_build3_stat_loc(i32 %26, i32 56, %union.tree_node* %27, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %30), !dbg !15228
  store %union.tree_node* %call27, %union.tree_node** %res, align 8, !dbg !15229
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !15230
  %31 = load i32, i32* %mode, align 4, !dbg !15231
  %idxprom = zext i32 %31 to i64, !dbg !15231
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !15231
  %32 = load i8, i8* %arrayidx28, align 1, !dbg !15231
  %conv = zext i8 %32 to i32, !dbg !15231
  %cmp29 = icmp eq i32 %conv, 9, !dbg !15231
  br i1 %cmp29, label %cond.true31, label %cond.false32, !dbg !15231

cond.true31:                                      ; preds = %cond.end
  %33 = load i32, i32* %mode, align 4, !dbg !15231
  %sub = sub i32 %33, 42, !dbg !15231
  %add = add i32 %sub, 4, !dbg !15231
  br label %cond.end34, !dbg !15231

cond.false32:                                     ; preds = %cond.end
  %34 = load i32, i32* %mode, align 4, !dbg !15231
  %sub33 = sub i32 %34, 38, !dbg !15231
  br label %cond.end34, !dbg !15231

cond.end34:                                       ; preds = %cond.false32, %cond.true31
  %cond35 = phi i32 [ %add, %cond.true31 ], [ %sub33, %cond.false32 ], !dbg !15231
  %idxprom36 = zext i32 %cond35 to i64, !dbg !15231
  %arrayidx37 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom36, !dbg !15231
  %35 = load %struct.real_format*, %struct.real_format** %arrayidx37, align 8, !dbg !15231
  %emin = getelementptr inbounds %struct.real_format, %struct.real_format* %35, i32 0, i32 5, !dbg !15232
  %36 = load i32, i32* %emin, align 4, !dbg !15232
  %sub38 = sub nsw i32 %36, 1, !dbg !15233
  %call39 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.739, i64 0, i64 0), i32 %sub38), !dbg !15234
  %arraydecay40 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !15235
  %call41 = call i32 @real_from_string(%struct.real_value* %r, i8* %arraydecay40), !dbg !15236
  %37 = load i32, i32* %loc.addr, align 4, !dbg !15237
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15237
  %39 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15237
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15237
  %call42 = call %union.tree_node* @build_real(%union.tree_node* %40, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !15237
  %call43 = call %union.tree_node* @fold_build2_stat_loc(i32 %37, i32 100, %union.tree_node* %38, %union.tree_node* %39, %union.tree_node* %call42), !dbg !15237
  store %union.tree_node* %call43, %union.tree_node** %tmp, align 8, !dbg !15238
  %41 = load i32, i32* %loc.addr, align 4, !dbg !15239
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15239
  %43 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !15239
  %44 = load %union.tree_node*, %union.tree_node** %fp_normal, align 8, !dbg !15239
  %45 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !15239
  %call44 = call %union.tree_node* @fold_build3_stat_loc(i32 %41, i32 56, %union.tree_node* %42, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !15239
  store %union.tree_node* %call44, %union.tree_node** %res, align 8, !dbg !15240
  %46 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom45 = zext i32 %46 to i64, !dbg !15241
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !15241
  %47 = load i8, i8* %arrayidx46, align 1, !dbg !15241
  %conv47 = zext i8 %47 to i32, !dbg !15241
  %cmp48 = icmp eq i32 %conv47, 8, !dbg !15241
  br i1 %cmp48, label %land.lhs.true, label %lor.lhs.false, !dbg !15241

lor.lhs.false:                                    ; preds = %cond.end34
  %48 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom50 = zext i32 %48 to i64, !dbg !15241
  %arrayidx51 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom50, !dbg !15241
  %49 = load i8, i8* %arrayidx51, align 1, !dbg !15241
  %conv52 = zext i8 %49 to i32, !dbg !15241
  %cmp53 = icmp eq i32 %conv52, 9, !dbg !15241
  br i1 %cmp53, label %land.lhs.true, label %lor.lhs.false55, !dbg !15241

lor.lhs.false55:                                  ; preds = %lor.lhs.false
  %50 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom56 = zext i32 %50 to i64, !dbg !15241
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom56, !dbg !15241
  %51 = load i8, i8* %arrayidx57, align 1, !dbg !15241
  %conv58 = zext i8 %51 to i32, !dbg !15241
  %cmp59 = icmp eq i32 %conv58, 11, !dbg !15241
  br i1 %cmp59, label %land.lhs.true, label %lor.lhs.false61, !dbg !15241

lor.lhs.false61:                                  ; preds = %lor.lhs.false55
  %52 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom62 = zext i32 %52 to i64, !dbg !15241
  %arrayidx63 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom62, !dbg !15241
  %53 = load i8, i8* %arrayidx63, align 1, !dbg !15241
  %conv64 = zext i8 %53 to i32, !dbg !15241
  %cmp65 = icmp eq i32 %conv64, 17, !dbg !15241
  br i1 %cmp65, label %land.lhs.true, label %if.end143, !dbg !15241

land.lhs.true:                                    ; preds = %lor.lhs.false61, %lor.lhs.false55, %lor.lhs.false, %cond.end34
  %54 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom67 = zext i32 %54 to i64, !dbg !15241
  %arrayidx68 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom67, !dbg !15241
  %55 = load i8, i8* %arrayidx68, align 1, !dbg !15241
  %conv69 = zext i8 %55 to i32, !dbg !15241
  %cmp70 = icmp eq i32 %conv69, 8, !dbg !15241
  br i1 %cmp70, label %cond.true78, label %lor.lhs.false72, !dbg !15241

lor.lhs.false72:                                  ; preds = %land.lhs.true
  %56 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom73 = zext i32 %56 to i64, !dbg !15241
  %arrayidx74 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom73, !dbg !15241
  %57 = load i8, i8* %arrayidx74, align 1, !dbg !15241
  %conv75 = zext i8 %57 to i32, !dbg !15241
  %cmp76 = icmp eq i32 %conv75, 9, !dbg !15241
  br i1 %cmp76, label %cond.true78, label %cond.false79, !dbg !15241

cond.true78:                                      ; preds = %lor.lhs.false72, %land.lhs.true
  %58 = load i32, i32* %mode, align 4, !dbg !15241
  br label %cond.end83, !dbg !15241

cond.false79:                                     ; preds = %lor.lhs.false72
  %59 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom80 = zext i32 %59 to i64, !dbg !15241
  %arrayidx81 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom80, !dbg !15241
  %60 = load i8, i8* %arrayidx81, align 1, !dbg !15241
  %conv82 = zext i8 %60 to i32, !dbg !15241
  br label %cond.end83, !dbg !15241

cond.end83:                                       ; preds = %cond.false79, %cond.true78
  %cond84 = phi i32 [ %58, %cond.true78 ], [ %conv82, %cond.false79 ], !dbg !15241
  %idxprom85 = zext i32 %cond84 to i64, !dbg !15241
  %arrayidx86 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom85, !dbg !15241
  %61 = load i8, i8* %arrayidx86, align 1, !dbg !15241
  %conv87 = zext i8 %61 to i32, !dbg !15241
  %cmp88 = icmp eq i32 %conv87, 9, !dbg !15241
  br i1 %cmp88, label %cond.true90, label %cond.false111, !dbg !15241

cond.true90:                                      ; preds = %cond.end83
  %62 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom91 = zext i32 %62 to i64, !dbg !15241
  %arrayidx92 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom91, !dbg !15241
  %63 = load i8, i8* %arrayidx92, align 1, !dbg !15241
  %conv93 = zext i8 %63 to i32, !dbg !15241
  %cmp94 = icmp eq i32 %conv93, 8, !dbg !15241
  br i1 %cmp94, label %cond.true102, label %lor.lhs.false96, !dbg !15241

lor.lhs.false96:                                  ; preds = %cond.true90
  %64 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom97 = zext i32 %64 to i64, !dbg !15241
  %arrayidx98 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom97, !dbg !15241
  %65 = load i8, i8* %arrayidx98, align 1, !dbg !15241
  %conv99 = zext i8 %65 to i32, !dbg !15241
  %cmp100 = icmp eq i32 %conv99, 9, !dbg !15241
  br i1 %cmp100, label %cond.true102, label %cond.false103, !dbg !15241

cond.true102:                                     ; preds = %lor.lhs.false96, %cond.true90
  %66 = load i32, i32* %mode, align 4, !dbg !15241
  br label %cond.end107, !dbg !15241

cond.false103:                                    ; preds = %lor.lhs.false96
  %67 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom104 = zext i32 %67 to i64, !dbg !15241
  %arrayidx105 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom104, !dbg !15241
  %68 = load i8, i8* %arrayidx105, align 1, !dbg !15241
  %conv106 = zext i8 %68 to i32, !dbg !15241
  br label %cond.end107, !dbg !15241

cond.end107:                                      ; preds = %cond.false103, %cond.true102
  %cond108 = phi i32 [ %66, %cond.true102 ], [ %conv106, %cond.false103 ], !dbg !15241
  %sub109 = sub i32 %cond108, 42, !dbg !15241
  %add110 = add i32 %sub109, 4, !dbg !15241
  br label %cond.end131, !dbg !15241

cond.false111:                                    ; preds = %cond.end83
  %69 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom112 = zext i32 %69 to i64, !dbg !15241
  %arrayidx113 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom112, !dbg !15241
  %70 = load i8, i8* %arrayidx113, align 1, !dbg !15241
  %conv114 = zext i8 %70 to i32, !dbg !15241
  %cmp115 = icmp eq i32 %conv114, 8, !dbg !15241
  br i1 %cmp115, label %cond.true123, label %lor.lhs.false117, !dbg !15241

lor.lhs.false117:                                 ; preds = %cond.false111
  %71 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom118 = zext i32 %71 to i64, !dbg !15241
  %arrayidx119 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom118, !dbg !15241
  %72 = load i8, i8* %arrayidx119, align 1, !dbg !15241
  %conv120 = zext i8 %72 to i32, !dbg !15241
  %cmp121 = icmp eq i32 %conv120, 9, !dbg !15241
  br i1 %cmp121, label %cond.true123, label %cond.false124, !dbg !15241

cond.true123:                                     ; preds = %lor.lhs.false117, %cond.false111
  %73 = load i32, i32* %mode, align 4, !dbg !15241
  br label %cond.end128, !dbg !15241

cond.false124:                                    ; preds = %lor.lhs.false117
  %74 = load i32, i32* %mode, align 4, !dbg !15241
  %idxprom125 = zext i32 %74 to i64, !dbg !15241
  %arrayidx126 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom125, !dbg !15241
  %75 = load i8, i8* %arrayidx126, align 1, !dbg !15241
  %conv127 = zext i8 %75 to i32, !dbg !15241
  br label %cond.end128, !dbg !15241

cond.end128:                                      ; preds = %cond.false124, %cond.true123
  %cond129 = phi i32 [ %73, %cond.true123 ], [ %conv127, %cond.false124 ], !dbg !15241
  %sub130 = sub i32 %cond129, 38, !dbg !15241
  br label %cond.end131, !dbg !15241

cond.end131:                                      ; preds = %cond.end128, %cond.end107
  %cond132 = phi i32 [ %add110, %cond.end107 ], [ %sub130, %cond.end128 ], !dbg !15241
  %idxprom133 = zext i32 %cond132 to i64, !dbg !15241
  %arrayidx134 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom133, !dbg !15241
  %76 = load %struct.real_format*, %struct.real_format** %arrayidx134, align 8, !dbg !15241
  %has_inf = getelementptr inbounds %struct.real_format, %struct.real_format* %76, i32 0, i32 12, !dbg !15241
  %77 = load i8, i8* %has_inf, align 1, !dbg !15241
  %conv135 = zext i8 %77 to i32, !dbg !15241
  %tobool136 = icmp ne i32 %conv135, 0, !dbg !15241
  br i1 %tobool136, label %land.lhs.true137, label %if.end143, !dbg !15241

land.lhs.true137:                                 ; preds = %cond.end131
  %78 = load i32, i32* @flag_finite_math_only, align 4, !dbg !15241
  %tobool138 = icmp ne i32 %78, 0, !dbg !15241
  br i1 %tobool138, label %if.end143, label %if.then139, !dbg !15243

if.then139:                                       ; preds = %land.lhs.true137
  call void @real_inf(%struct.real_value* %r), !dbg !15244
  %79 = load i32, i32* %loc.addr, align 4, !dbg !15246
  %80 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15246
  %81 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15246
  %82 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15246
  %call140 = call %union.tree_node* @build_real(%union.tree_node* %82, %struct.real_value* byval(%struct.real_value) align 8 %r), !dbg !15246
  %call141 = call %union.tree_node* @fold_build2_stat_loc(i32 %79, i32 101, %union.tree_node* %80, %union.tree_node* %81, %union.tree_node* %call140), !dbg !15246
  store %union.tree_node* %call141, %union.tree_node** %tmp, align 8, !dbg !15247
  %83 = load i32, i32* %loc.addr, align 4, !dbg !15248
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15248
  %85 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !15248
  %86 = load %union.tree_node*, %union.tree_node** %fp_infinite, align 8, !dbg !15248
  %87 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !15248
  %call142 = call %union.tree_node* @fold_build3_stat_loc(i32 %83, i32 56, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %87), !dbg !15248
  store %union.tree_node* %call142, %union.tree_node** %res, align 8, !dbg !15249
  br label %if.end143, !dbg !15250

if.end143:                                        ; preds = %if.then139, %land.lhs.true137, %cond.end131, %lor.lhs.false61
  %88 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom144 = zext i32 %88 to i64, !dbg !15251
  %arrayidx145 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom144, !dbg !15251
  %89 = load i8, i8* %arrayidx145, align 1, !dbg !15251
  %conv146 = zext i8 %89 to i32, !dbg !15251
  %cmp147 = icmp eq i32 %conv146, 8, !dbg !15251
  br i1 %cmp147, label %land.lhs.true167, label %lor.lhs.false149, !dbg !15251

lor.lhs.false149:                                 ; preds = %if.end143
  %90 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom150 = zext i32 %90 to i64, !dbg !15251
  %arrayidx151 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom150, !dbg !15251
  %91 = load i8, i8* %arrayidx151, align 1, !dbg !15251
  %conv152 = zext i8 %91 to i32, !dbg !15251
  %cmp153 = icmp eq i32 %conv152, 9, !dbg !15251
  br i1 %cmp153, label %land.lhs.true167, label %lor.lhs.false155, !dbg !15251

lor.lhs.false155:                                 ; preds = %lor.lhs.false149
  %92 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom156 = zext i32 %92 to i64, !dbg !15251
  %arrayidx157 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom156, !dbg !15251
  %93 = load i8, i8* %arrayidx157, align 1, !dbg !15251
  %conv158 = zext i8 %93 to i32, !dbg !15251
  %cmp159 = icmp eq i32 %conv158, 11, !dbg !15251
  br i1 %cmp159, label %land.lhs.true167, label %lor.lhs.false161, !dbg !15251

lor.lhs.false161:                                 ; preds = %lor.lhs.false155
  %94 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom162 = zext i32 %94 to i64, !dbg !15251
  %arrayidx163 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom162, !dbg !15251
  %95 = load i8, i8* %arrayidx163, align 1, !dbg !15251
  %conv164 = zext i8 %95 to i32, !dbg !15251
  %cmp165 = icmp eq i32 %conv164, 17, !dbg !15251
  br i1 %cmp165, label %land.lhs.true167, label %if.end243, !dbg !15251

land.lhs.true167:                                 ; preds = %lor.lhs.false161, %lor.lhs.false155, %lor.lhs.false149, %if.end143
  %96 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom168 = zext i32 %96 to i64, !dbg !15251
  %arrayidx169 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom168, !dbg !15251
  %97 = load i8, i8* %arrayidx169, align 1, !dbg !15251
  %conv170 = zext i8 %97 to i32, !dbg !15251
  %cmp171 = icmp eq i32 %conv170, 8, !dbg !15251
  br i1 %cmp171, label %cond.true179, label %lor.lhs.false173, !dbg !15251

lor.lhs.false173:                                 ; preds = %land.lhs.true167
  %98 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom174 = zext i32 %98 to i64, !dbg !15251
  %arrayidx175 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom174, !dbg !15251
  %99 = load i8, i8* %arrayidx175, align 1, !dbg !15251
  %conv176 = zext i8 %99 to i32, !dbg !15251
  %cmp177 = icmp eq i32 %conv176, 9, !dbg !15251
  br i1 %cmp177, label %cond.true179, label %cond.false180, !dbg !15251

cond.true179:                                     ; preds = %lor.lhs.false173, %land.lhs.true167
  %100 = load i32, i32* %mode, align 4, !dbg !15251
  br label %cond.end184, !dbg !15251

cond.false180:                                    ; preds = %lor.lhs.false173
  %101 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom181 = zext i32 %101 to i64, !dbg !15251
  %arrayidx182 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom181, !dbg !15251
  %102 = load i8, i8* %arrayidx182, align 1, !dbg !15251
  %conv183 = zext i8 %102 to i32, !dbg !15251
  br label %cond.end184, !dbg !15251

cond.end184:                                      ; preds = %cond.false180, %cond.true179
  %cond185 = phi i32 [ %100, %cond.true179 ], [ %conv183, %cond.false180 ], !dbg !15251
  %idxprom186 = zext i32 %cond185 to i64, !dbg !15251
  %arrayidx187 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom186, !dbg !15251
  %103 = load i8, i8* %arrayidx187, align 1, !dbg !15251
  %conv188 = zext i8 %103 to i32, !dbg !15251
  %cmp189 = icmp eq i32 %conv188, 9, !dbg !15251
  br i1 %cmp189, label %cond.true191, label %cond.false212, !dbg !15251

cond.true191:                                     ; preds = %cond.end184
  %104 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom192 = zext i32 %104 to i64, !dbg !15251
  %arrayidx193 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom192, !dbg !15251
  %105 = load i8, i8* %arrayidx193, align 1, !dbg !15251
  %conv194 = zext i8 %105 to i32, !dbg !15251
  %cmp195 = icmp eq i32 %conv194, 8, !dbg !15251
  br i1 %cmp195, label %cond.true203, label %lor.lhs.false197, !dbg !15251

lor.lhs.false197:                                 ; preds = %cond.true191
  %106 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom198 = zext i32 %106 to i64, !dbg !15251
  %arrayidx199 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom198, !dbg !15251
  %107 = load i8, i8* %arrayidx199, align 1, !dbg !15251
  %conv200 = zext i8 %107 to i32, !dbg !15251
  %cmp201 = icmp eq i32 %conv200, 9, !dbg !15251
  br i1 %cmp201, label %cond.true203, label %cond.false204, !dbg !15251

cond.true203:                                     ; preds = %lor.lhs.false197, %cond.true191
  %108 = load i32, i32* %mode, align 4, !dbg !15251
  br label %cond.end208, !dbg !15251

cond.false204:                                    ; preds = %lor.lhs.false197
  %109 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom205 = zext i32 %109 to i64, !dbg !15251
  %arrayidx206 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom205, !dbg !15251
  %110 = load i8, i8* %arrayidx206, align 1, !dbg !15251
  %conv207 = zext i8 %110 to i32, !dbg !15251
  br label %cond.end208, !dbg !15251

cond.end208:                                      ; preds = %cond.false204, %cond.true203
  %cond209 = phi i32 [ %108, %cond.true203 ], [ %conv207, %cond.false204 ], !dbg !15251
  %sub210 = sub i32 %cond209, 42, !dbg !15251
  %add211 = add i32 %sub210, 4, !dbg !15251
  br label %cond.end232, !dbg !15251

cond.false212:                                    ; preds = %cond.end184
  %111 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom213 = zext i32 %111 to i64, !dbg !15251
  %arrayidx214 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom213, !dbg !15251
  %112 = load i8, i8* %arrayidx214, align 1, !dbg !15251
  %conv215 = zext i8 %112 to i32, !dbg !15251
  %cmp216 = icmp eq i32 %conv215, 8, !dbg !15251
  br i1 %cmp216, label %cond.true224, label %lor.lhs.false218, !dbg !15251

lor.lhs.false218:                                 ; preds = %cond.false212
  %113 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom219 = zext i32 %113 to i64, !dbg !15251
  %arrayidx220 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom219, !dbg !15251
  %114 = load i8, i8* %arrayidx220, align 1, !dbg !15251
  %conv221 = zext i8 %114 to i32, !dbg !15251
  %cmp222 = icmp eq i32 %conv221, 9, !dbg !15251
  br i1 %cmp222, label %cond.true224, label %cond.false225, !dbg !15251

cond.true224:                                     ; preds = %lor.lhs.false218, %cond.false212
  %115 = load i32, i32* %mode, align 4, !dbg !15251
  br label %cond.end229, !dbg !15251

cond.false225:                                    ; preds = %lor.lhs.false218
  %116 = load i32, i32* %mode, align 4, !dbg !15251
  %idxprom226 = zext i32 %116 to i64, !dbg !15251
  %arrayidx227 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom226, !dbg !15251
  %117 = load i8, i8* %arrayidx227, align 1, !dbg !15251
  %conv228 = zext i8 %117 to i32, !dbg !15251
  br label %cond.end229, !dbg !15251

cond.end229:                                      ; preds = %cond.false225, %cond.true224
  %cond230 = phi i32 [ %115, %cond.true224 ], [ %conv228, %cond.false225 ], !dbg !15251
  %sub231 = sub i32 %cond230, 38, !dbg !15251
  br label %cond.end232, !dbg !15251

cond.end232:                                      ; preds = %cond.end229, %cond.end208
  %cond233 = phi i32 [ %add211, %cond.end208 ], [ %sub231, %cond.end229 ], !dbg !15251
  %idxprom234 = zext i32 %cond233 to i64, !dbg !15251
  %arrayidx235 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom234, !dbg !15251
  %118 = load %struct.real_format*, %struct.real_format** %arrayidx235, align 8, !dbg !15251
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %118, i32 0, i32 11, !dbg !15251
  %119 = load i8, i8* %has_nans, align 2, !dbg !15251
  %conv236 = zext i8 %119 to i32, !dbg !15251
  %tobool237 = icmp ne i32 %conv236, 0, !dbg !15251
  br i1 %tobool237, label %land.lhs.true238, label %if.end243, !dbg !15251

land.lhs.true238:                                 ; preds = %cond.end232
  %120 = load i32, i32* @flag_finite_math_only, align 4, !dbg !15251
  %tobool239 = icmp ne i32 %120, 0, !dbg !15251
  br i1 %tobool239, label %if.end243, label %if.then240, !dbg !15253

if.then240:                                       ; preds = %land.lhs.true238
  %121 = load i32, i32* %loc.addr, align 4, !dbg !15254
  %122 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15254
  %123 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15254
  %124 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15254
  %call241 = call %union.tree_node* @fold_build2_stat_loc(i32 %121, i32 104, %union.tree_node* %122, %union.tree_node* %123, %union.tree_node* %124), !dbg !15254
  store %union.tree_node* %call241, %union.tree_node** %tmp, align 8, !dbg !15256
  %125 = load i32, i32* %loc.addr, align 4, !dbg !15257
  %126 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !15257
  %127 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !15257
  %128 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !15257
  %129 = load %union.tree_node*, %union.tree_node** %fp_nan, align 8, !dbg !15257
  %call242 = call %union.tree_node* @fold_build3_stat_loc(i32 %125, i32 56, %union.tree_node* %126, %union.tree_node* %127, %union.tree_node* %128, %union.tree_node* %129), !dbg !15257
  store %union.tree_node* %call242, %union.tree_node** %res, align 8, !dbg !15258
  br label %if.end243, !dbg !15259

if.end243:                                        ; preds = %if.then240, %land.lhs.true238, %cond.end232, %lor.lhs.false161
  %130 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !15260
  store %union.tree_node* %130, %union.tree_node** %retval, align 8, !dbg !15261
  br label %return, !dbg !15261

return:                                           ; preds = %if.end243, %if.then
  %131 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15262
  ret %union.tree_node* %131, !dbg !15262
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !15263 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15264, metadata !DIExpression()), !dbg !15265
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15266
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !15267
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !15268
  %1 = load i32, i32* %num_ops, align 4, !dbg !15268
  ret i32 %1, !dbg !15269
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !15270 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15271, metadata !DIExpression()), !dbg !15272
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !15273, metadata !DIExpression()), !dbg !15274
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15275
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !15277
  %tobool = icmp ne i8 %call, 0, !dbg !15277
  br i1 %tobool, label %if.then, label %if.else, !dbg !15278

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15279
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !15281
  %2 = load i32, i32* %i.addr, align 4, !dbg !15282
  %idxprom = zext i32 %2 to i64, !dbg !15281
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !15281
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15281
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !15283
  br label %return, !dbg !15283

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15284
  br label %return, !dbg !15284

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15285
  ret %union.tree_node* %4, !dbg !15285
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !15286 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !15287, metadata !DIExpression()), !dbg !15288
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15289
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !15290
  %cmp = icmp uge i32 %call, 1, !dbg !15291
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !15292

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15293
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !15294
  %cmp2 = icmp ule i32 %call1, 9, !dbg !15295
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !15296
  %land.ext = zext i1 %2 to i32, !dbg !15292
  %conv = trunc i32 %land.ext to i8, !dbg !15290
  ret i8 %conv, !dbg !15297
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !15298 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15301, metadata !DIExpression()), !dbg !15302
  call void @llvm.dbg.declare(metadata i64* %off, metadata !15303, metadata !DIExpression()), !dbg !15304
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15305
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !15306
  %idxprom = zext i32 %call to i64, !dbg !15307
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !15307
  %1 = load i64, i64* %arrayidx, align 8, !dbg !15307
  store i64 %1, i64* %off, align 8, !dbg !15308
  %2 = load i64, i64* %off, align 8, !dbg !15309
  %cmp = icmp ne i64 %2, 0, !dbg !15309
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15309

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.740, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i64 0, i64 0)), !dbg !15309
  br label %cond.end, !dbg !15309

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15309

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15309
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15310
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !15311
  %5 = load i64, i64* %off, align 8, !dbg !15312
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !15313
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !15314
  ret %union.tree_node** %6, !dbg !15315
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !15316 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !15319, metadata !DIExpression()), !dbg !15320
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15321
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !15322
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15323
  %bf.load = load i32, i32* %1, align 8, !dbg !15323
  %bf.clear = and i32 %bf.load, 255, !dbg !15323
  ret i32 %bf.clear, !dbg !15324
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !15325 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15328, metadata !DIExpression()), !dbg !15329
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15330
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !15331
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !15332
  ret i32 %call1, !dbg !15333
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !15334 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15337, metadata !DIExpression()), !dbg !15338
  %0 = load i32, i32* %code.addr, align 4, !dbg !15339
  %idxprom = zext i32 %0 to i64, !dbg !15340
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !15340
  %1 = load i32, i32* %arrayidx, align 4, !dbg !15340
  ret i32 %1, !dbg !15341
}

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !15342 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15343, metadata !DIExpression()), !dbg !15344
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15345
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !15346
  ret %union.tree_node* %call, !dbg !15347
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_fold_builtin_sprintf_chk(%union.gimple_statement_d* %stmt, i32 %fcode) #0 !dbg !15348 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fcode.addr = alloca i32, align 4
  %dest = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  %len = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fmt = alloca %union.tree_node*, align 8
  %flag = alloca %union.tree_node*, align 8
  %fmt_str = alloca i8*, align 8
  %nargs = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15351, metadata !DIExpression()), !dbg !15352
  store i32 %fcode, i32* %fcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcode.addr, metadata !15353, metadata !DIExpression()), !dbg !15354
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !15355, metadata !DIExpression()), !dbg !15356
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !15357, metadata !DIExpression()), !dbg !15358
  call void @llvm.dbg.declare(metadata %union.tree_node** %len, metadata !15359, metadata !DIExpression()), !dbg !15360
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !15361, metadata !DIExpression()), !dbg !15362
  call void @llvm.dbg.declare(metadata %union.tree_node** %fmt, metadata !15363, metadata !DIExpression()), !dbg !15364
  call void @llvm.dbg.declare(metadata %union.tree_node** %flag, metadata !15365, metadata !DIExpression()), !dbg !15366
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !15367, metadata !DIExpression()), !dbg !15368
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !15369, metadata !DIExpression()), !dbg !15370
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15371
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !15372
  store i32 %call, i32* %nargs, align 4, !dbg !15370
  %1 = load i32, i32* %nargs, align 4, !dbg !15373
  %cmp = icmp slt i32 %1, 4, !dbg !15375
  br i1 %cmp, label %if.then, label %if.end, !dbg !15376

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15377
  br label %return, !dbg !15377

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15378
  %call1 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 0), !dbg !15379
  store %union.tree_node* %call1, %union.tree_node** %dest, align 8, !dbg !15380
  %3 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15381
  %call2 = call zeroext i8 @validate_arg(%union.tree_node* %3, i32 10), !dbg !15383
  %tobool = icmp ne i8 %call2, 0, !dbg !15383
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !15384

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15385
  br label %return, !dbg !15385

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15386
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %4, i32 1), !dbg !15387
  store %union.tree_node* %call5, %union.tree_node** %flag, align 8, !dbg !15388
  %5 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15389
  %call6 = call zeroext i8 @validate_arg(%union.tree_node* %5, i32 8), !dbg !15391
  %tobool7 = icmp ne i8 %call6, 0, !dbg !15391
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !15392

if.then8:                                         ; preds = %if.end4
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15393
  br label %return, !dbg !15393

if.end9:                                          ; preds = %if.end4
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15394
  %call10 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %6, i32 2), !dbg !15395
  store %union.tree_node* %call10, %union.tree_node** %size, align 8, !dbg !15396
  %7 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15397
  %call11 = call zeroext i8 @validate_arg(%union.tree_node* %7, i32 8), !dbg !15399
  %tobool12 = icmp ne i8 %call11, 0, !dbg !15399
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !15400

if.then13:                                        ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15401
  br label %return, !dbg !15401

if.end14:                                         ; preds = %if.end9
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15402
  %call15 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %8, i32 3), !dbg !15403
  store %union.tree_node* %call15, %union.tree_node** %fmt, align 8, !dbg !15404
  %9 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15405
  %call16 = call zeroext i8 @validate_arg(%union.tree_node* %9, i32 10), !dbg !15407
  %tobool17 = icmp ne i8 %call16, 0, !dbg !15407
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !15408

if.then18:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15409
  br label %return, !dbg !15409

if.end19:                                         ; preds = %if.end14
  %10 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15410
  %call20 = call i32 @host_integerp(%union.tree_node* %10, i32 1), !dbg !15412
  %tobool21 = icmp ne i32 %call20, 0, !dbg !15412
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !15413

if.then22:                                        ; preds = %if.end19
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15414
  br label %return, !dbg !15414

if.end23:                                         ; preds = %if.end19
  store %union.tree_node* null, %union.tree_node** %len, align 8, !dbg !15415
  %call24 = call zeroext i8 @init_target_chars(), !dbg !15416
  %tobool25 = icmp ne i8 %call24, 0, !dbg !15416
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !15418

if.then26:                                        ; preds = %if.end23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15419
  br label %return, !dbg !15419

if.end27:                                         ; preds = %if.end23
  %11 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15420
  %call28 = call i8* @c_getstr(%union.tree_node* %11), !dbg !15421
  store i8* %call28, i8** %fmt_str, align 8, !dbg !15422
  %12 = load i8*, i8** %fmt_str, align 8, !dbg !15423
  %cmp29 = icmp ne i8* %12, null, !dbg !15425
  br i1 %cmp29, label %if.then30, label %if.end67, !dbg !15426

if.then30:                                        ; preds = %if.end27
  %13 = load i8*, i8** %fmt_str, align 8, !dbg !15427
  %14 = load i64, i64* @target_percent, align 8, !dbg !15430
  %conv = trunc i64 %14 to i32, !dbg !15430
  %call31 = call i8* @strchr(i8* %13, i32 %conv), !dbg !15431
  %cmp32 = icmp eq i8* %call31, null, !dbg !15432
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !15433

if.then34:                                        ; preds = %if.then30
  %15 = load i32, i32* %fcode.addr, align 4, !dbg !15434
  %cmp35 = icmp ne i32 %15, 539, !dbg !15437
  br i1 %cmp35, label %if.then39, label %lor.lhs.false, !dbg !15438

lor.lhs.false:                                    ; preds = %if.then34
  %16 = load i32, i32* %nargs, align 4, !dbg !15439
  %cmp37 = icmp eq i32 %16, 4, !dbg !15440
  br i1 %cmp37, label %if.then39, label %if.end42, !dbg !15441

if.then39:                                        ; preds = %lor.lhs.false, %if.then34
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !15442
  %18 = load i8*, i8** %fmt_str, align 8, !dbg !15443
  %call40 = call i64 @strlen(i8* %18), !dbg !15444
  %call41 = call %union.tree_node* @build_int_cstu(%union.tree_node* %17, i64 %call40), !dbg !15445
  store %union.tree_node* %call41, %union.tree_node** %len, align 8, !dbg !15446
  br label %if.end42, !dbg !15447

if.end42:                                         ; preds = %if.then39, %lor.lhs.false
  br label %if.end66, !dbg !15448

if.else:                                          ; preds = %if.then30
  %19 = load i32, i32* %fcode.addr, align 4, !dbg !15449
  %cmp43 = icmp eq i32 %19, 539, !dbg !15451
  br i1 %cmp43, label %land.lhs.true, label %if.end65, !dbg !15452

land.lhs.true:                                    ; preds = %if.else
  %20 = load i8*, i8** %fmt_str, align 8, !dbg !15453
  %call45 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !15454
  %cmp46 = icmp eq i32 %call45, 0, !dbg !15455
  br i1 %cmp46, label %if.then48, label %if.end65, !dbg !15456

if.then48:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !15457, metadata !DIExpression()), !dbg !15459
  %21 = load i32, i32* %nargs, align 4, !dbg !15460
  %cmp49 = icmp eq i32 %21, 5, !dbg !15462
  br i1 %cmp49, label %if.then51, label %if.end64, !dbg !15463

if.then51:                                        ; preds = %if.then48
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15464
  %call52 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %22, i32 4), !dbg !15466
  store %union.tree_node* %call52, %union.tree_node** %arg, align 8, !dbg !15467
  %23 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15468
  %call53 = call zeroext i8 @validate_arg(%union.tree_node* %23, i32 10), !dbg !15470
  %tobool54 = icmp ne i8 %call53, 0, !dbg !15470
  br i1 %tobool54, label %if.then55, label %if.end63, !dbg !15471

if.then55:                                        ; preds = %if.then51
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15472
  %call56 = call %union.tree_node* @c_strlen(%union.tree_node* %24, i32 1), !dbg !15474
  store %union.tree_node* %call56, %union.tree_node** %len, align 8, !dbg !15475
  %25 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15476
  %tobool57 = icmp ne %union.tree_node* %25, null, !dbg !15476
  br i1 %tobool57, label %lor.lhs.false58, label %if.then61, !dbg !15478

lor.lhs.false58:                                  ; preds = %if.then55
  %26 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15479
  %call59 = call i32 @host_integerp(%union.tree_node* %26, i32 1), !dbg !15480
  %tobool60 = icmp ne i32 %call59, 0, !dbg !15480
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !15481

if.then61:                                        ; preds = %lor.lhs.false58, %if.then55
  store %union.tree_node* null, %union.tree_node** %len, align 8, !dbg !15482
  br label %if.end62, !dbg !15483

if.end62:                                         ; preds = %if.then61, %lor.lhs.false58
  br label %if.end63, !dbg !15484

if.end63:                                         ; preds = %if.end62, %if.then51
  br label %if.end64, !dbg !15485

if.end64:                                         ; preds = %if.end63, %if.then48
  br label %if.end65, !dbg !15486

if.end65:                                         ; preds = %if.end64, %land.lhs.true, %if.else
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end42
  br label %if.end67, !dbg !15487

if.end67:                                         ; preds = %if.end66, %if.end27
  %27 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15488
  %call68 = call i32 @integer_all_onesp(%union.tree_node* %27), !dbg !15490
  %tobool69 = icmp ne i32 %call68, 0, !dbg !15490
  br i1 %tobool69, label %if.end77, label %if.then70, !dbg !15491

if.then70:                                        ; preds = %if.end67
  %28 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15492
  %tobool71 = icmp ne %union.tree_node* %28, null, !dbg !15492
  br i1 %tobool71, label %lor.lhs.false72, label %if.then75, !dbg !15495

lor.lhs.false72:                                  ; preds = %if.then70
  %29 = load %union.tree_node*, %union.tree_node** %len, align 8, !dbg !15496
  %30 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !15497
  %call73 = call i32 @tree_int_cst_lt(%union.tree_node* %29, %union.tree_node* %30), !dbg !15498
  %tobool74 = icmp ne i32 %call73, 0, !dbg !15498
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !15499

if.then75:                                        ; preds = %lor.lhs.false72, %if.then70
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15500
  br label %return, !dbg !15500

if.end76:                                         ; preds = %lor.lhs.false72
  br label %if.end77, !dbg !15501

if.end77:                                         ; preds = %if.end76, %if.end67
  %31 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15502
  %call78 = call i32 @integer_zerop(%union.tree_node* %31), !dbg !15504
  %tobool79 = icmp ne i32 %call78, 0, !dbg !15504
  br i1 %tobool79, label %if.end94, label %if.then80, !dbg !15505

if.then80:                                        ; preds = %if.end77
  %32 = load i8*, i8** %fmt_str, align 8, !dbg !15506
  %cmp81 = icmp eq i8* %32, null, !dbg !15509
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !15510

if.then83:                                        ; preds = %if.then80
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15511
  br label %return, !dbg !15511

if.end84:                                         ; preds = %if.then80
  %33 = load i8*, i8** %fmt_str, align 8, !dbg !15512
  %34 = load i64, i64* @target_percent, align 8, !dbg !15514
  %conv85 = trunc i64 %34 to i32, !dbg !15514
  %call86 = call i8* @strchr(i8* %33, i32 %conv85), !dbg !15515
  %cmp87 = icmp ne i8* %call86, null, !dbg !15516
  br i1 %cmp87, label %land.lhs.true89, label %if.end93, !dbg !15517

land.lhs.true89:                                  ; preds = %if.end84
  %35 = load i8*, i8** %fmt_str, align 8, !dbg !15518
  %call90 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @target_percent_s, i64 0, i64 0)), !dbg !15519
  %tobool91 = icmp ne i32 %call90, 0, !dbg !15519
  br i1 %tobool91, label %if.then92, label %if.end93, !dbg !15520

if.then92:                                        ; preds = %land.lhs.true89
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15521
  br label %return, !dbg !15521

if.end93:                                         ; preds = %land.lhs.true89, %if.end84
  br label %if.end94, !dbg !15522

if.end94:                                         ; preds = %if.end93, %if.end77
  %36 = load i32, i32* %fcode.addr, align 4, !dbg !15523
  %cmp95 = icmp eq i32 %36, 541, !dbg !15524
  %37 = zext i1 %cmp95 to i64, !dbg !15523
  %cond = select i1 %cmp95, i32 380, i32 373, !dbg !15523
  %idxprom = sext i32 %cond to i64, !dbg !15525
  %arrayidx = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !15525
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15525
  store %union.tree_node* %38, %union.tree_node** %fn, align 8, !dbg !15526
  %39 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15527
  %tobool97 = icmp ne %union.tree_node* %39, null, !dbg !15527
  br i1 %tobool97, label %if.end99, label %if.then98, !dbg !15529

if.then98:                                        ; preds = %if.end94
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15530
  br label %return, !dbg !15530

if.end99:                                         ; preds = %if.end94
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15531
  %41 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15532
  %42 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15533
  %43 = load %union.tree_node*, %union.tree_node** %fmt, align 8, !dbg !15534
  %call100 = call %union.tree_node* (%union.gimple_statement_d*, i32, %union.tree_node*, i32, ...) @gimple_rewrite_call_expr(%union.gimple_statement_d* %40, i32 4, %union.tree_node* %41, i32 2, %union.tree_node* %42, %union.tree_node* %43), !dbg !15535
  store %union.tree_node* %call100, %union.tree_node** %retval, align 8, !dbg !15536
  br label %return, !dbg !15536

return:                                           ; preds = %if.end99, %if.then98, %if.then92, %if.then83, %if.then75, %if.then26, %if.then22, %if.then18, %if.then13, %if.then8, %if.then3, %if.then
  %44 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15537
  ret %union.tree_node* %44, !dbg !15537
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4791, !4792, !4793}
!llvm.ident = !{!4794}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "built_in_class_names", scope: !2, file: !3, line: 66, type: !4789, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !3302, globals: !4737, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "builtins.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !390, !403, !410, !553, !559, !573, !1293, !1427, !1436, !1444, !1451, !1465, !1502, !1520, !1542, !1563, !3055, !3218, !3225, !3263, !3289}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !385)
!385 = !{!386, !387, !388, !389}
!386 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!387 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!388 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!389 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402}
!392 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !404)
!404 = !{!405, !406, !407, !408, !409}
!405 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!406 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!407 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!408 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!409 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!410 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !411, line: 45, baseType: !7, size: 32, elements: !412)
!411 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!412 = !{!413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552}
!413 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!414 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!415 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!416 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!417 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!418 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!419 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!420 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!421 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!422 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!423 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!424 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!425 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!426 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!427 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!428 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!429 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!430 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!431 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!432 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!433 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!435 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!436 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!437 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!438 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!439 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!440 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!441 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!442 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!443 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!444 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!445 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!446 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!447 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!448 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!449 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!450 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!451 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!452 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!453 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!454 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!455 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!456 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!457 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!458 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!459 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!460 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!461 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!462 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!463 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!464 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!465 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!466 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!467 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!468 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!469 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!470 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!471 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!472 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!473 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!474 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!475 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!476 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!477 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!478 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!479 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!480 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!481 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!482 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!483 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!484 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!485 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!486 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!487 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!488 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!489 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!490 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!491 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!492 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!493 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!494 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!495 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!496 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!497 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!498 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!499 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!500 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!501 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!502 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!503 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!504 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!505 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!506 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!507 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!508 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!509 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!510 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!511 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!512 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!513 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!514 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!515 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!516 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!517 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!518 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!519 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!520 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!521 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!522 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!523 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!524 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!525 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!526 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!527 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!528 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!529 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!530 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!531 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!532 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!533 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!534 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!535 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!536 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!537 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!538 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!539 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!540 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!541 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!542 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!543 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!544 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!545 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!546 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!547 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!548 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!549 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!550 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!551 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!552 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!553 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "save_level", file: !554, line: 769, baseType: !7, size: 32, elements: !555)
!554 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!555 = !{!556, !557, !558}
!556 = !DIEnumerator(name: "SAVE_BLOCK", value: 0, isUnsigned: true)
!557 = !DIEnumerator(name: "SAVE_FUNCTION", value: 1, isUnsigned: true)
!558 = !DIEnumerator(name: "SAVE_NONLOCAL", value: 2, isUnsigned: true)
!559 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !411, line: 1994, baseType: !7, size: 32, elements: !560)
!560 = !{!561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!561 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!562 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!563 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!564 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!565 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!566 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!567 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!568 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!569 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!570 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!571 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!572 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !574)
!574 = !{!575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292}
!575 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!576 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!577 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!578 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!579 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!580 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!581 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!582 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!583 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!584 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!585 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!586 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!587 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!588 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!589 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!590 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!591 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!592 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!593 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!595 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!596 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!597 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!598 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!599 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1292 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1293 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !1294)
!1294 = !{!1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426}
!1295 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1296 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1297 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1298 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1299 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1300 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1301 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1302 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1303 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1304 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1305 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1306 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1307 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1308 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1309 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1310 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1311 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1312 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1313 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1314 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1315 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1316 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1317 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1318 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1319 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1320 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1321 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1322 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1323 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1324 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1325 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1326 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1327 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1328 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1329 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1330 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1331 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1332 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1333 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1334 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1335 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1336 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1337 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1338 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1339 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1340 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1341 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1342 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1343 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1344 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1345 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1346 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1347 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1348 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1349 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1350 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1351 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1352 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1353 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1354 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1355 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1356 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1357 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1358 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1359 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1360 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1361 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1362 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1363 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1364 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1365 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1366 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1367 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1368 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1369 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1370 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1371 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1372 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1373 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1374 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1375 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1376 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1377 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1378 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1379 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1380 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1381 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1382 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1383 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1384 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1385 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1386 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1387 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1388 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1389 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1390 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1391 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1392 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1393 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1394 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1395 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1396 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1397 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1398 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1399 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1400 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1401 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1402 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1403 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1404 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1405 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1406 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1407 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1408 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1409 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1410 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1411 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1412 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1413 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1414 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1415 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1416 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1417 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1418 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1419 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1420 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1421 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1422 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1423 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1424 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1427 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !554, line: 52, baseType: !7, size: 32, elements: !1428)
!1428 = !{!1429, !1430, !1431, !1432, !1433, !1434, !1435}
!1429 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!1430 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!1431 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!1432 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!1433 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!1434 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!1435 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!1436 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fallback", file: !1437, line: 957, baseType: !7, size: 32, elements: !1438)
!1437 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1438 = !{!1439, !1440, !1441, !1442, !1443}
!1439 = !DIEnumerator(name: "fb_none", value: 0, isUnsigned: true)
!1440 = !DIEnumerator(name: "fb_rvalue", value: 1, isUnsigned: true)
!1441 = !DIEnumerator(name: "fb_lvalue", value: 2, isUnsigned: true)
!1442 = !DIEnumerator(name: "fb_mayfail", value: 4, isUnsigned: true)
!1443 = !DIEnumerator(name: "fb_either", value: 3, isUnsigned: true)
!1444 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimplify_status", file: !1437, line: 973, baseType: !1445, size: 32, elements: !1446)
!1445 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1446 = !{!1447, !1448, !1449, !1450}
!1447 = !DIEnumerator(name: "GS_ERROR", value: -2)
!1448 = !DIEnumerator(name: "GS_UNHANDLED", value: -1)
!1449 = !DIEnumerator(name: "GS_OK", value: 0)
!1450 = !DIEnumerator(name: "GS_ALL_DONE", value: 1)
!1451 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !1452)
!1452 = !{!1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464}
!1453 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1454 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1455 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1456 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1457 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1458 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1459 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1460 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1461 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1462 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1463 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1464 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1465 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !1466)
!1466 = !{!1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501}
!1467 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!1468 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!1469 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!1470 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!1471 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!1472 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!1473 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!1474 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!1475 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!1476 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!1477 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!1478 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!1479 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!1480 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!1481 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!1482 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!1483 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!1484 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!1485 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!1486 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!1487 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!1488 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!1489 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!1490 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!1491 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!1492 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!1493 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!1494 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!1495 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!1496 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!1497 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!1498 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!1499 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!1500 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!1501 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!1502 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "libfunc_index", file: !1503, line: 24, baseType: !7, size: 32, elements: !1504)
!1503 = !DIFile(filename: "./libfuncs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1504 = !{!1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519}
!1505 = !DIEnumerator(name: "LTI_abort", value: 0, isUnsigned: true)
!1506 = !DIEnumerator(name: "LTI_memcpy", value: 1, isUnsigned: true)
!1507 = !DIEnumerator(name: "LTI_memmove", value: 2, isUnsigned: true)
!1508 = !DIEnumerator(name: "LTI_memcmp", value: 3, isUnsigned: true)
!1509 = !DIEnumerator(name: "LTI_memset", value: 4, isUnsigned: true)
!1510 = !DIEnumerator(name: "LTI_setbits", value: 5, isUnsigned: true)
!1511 = !DIEnumerator(name: "LTI_setjmp", value: 6, isUnsigned: true)
!1512 = !DIEnumerator(name: "LTI_longjmp", value: 7, isUnsigned: true)
!1513 = !DIEnumerator(name: "LTI_unwind_sjlj_register", value: 8, isUnsigned: true)
!1514 = !DIEnumerator(name: "LTI_unwind_sjlj_unregister", value: 9, isUnsigned: true)
!1515 = !DIEnumerator(name: "LTI_profile_function_entry", value: 10, isUnsigned: true)
!1516 = !DIEnumerator(name: "LTI_profile_function_exit", value: 11, isUnsigned: true)
!1517 = !DIEnumerator(name: "LTI_synchronize", value: 12, isUnsigned: true)
!1518 = !DIEnumerator(name: "LTI_gcov_flush", value: 13, isUnsigned: true)
!1519 = !DIEnumerator(name: "LTI_MAX", value: 14, isUnsigned: true)
!1520 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !1521, line: 36, baseType: !7, size: 32, elements: !1522)
!1521 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1522 = !{!1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541}
!1523 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!1524 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!1525 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!1526 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!1527 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!1528 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!1529 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!1530 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!1531 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!1532 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!1533 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!1534 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!1535 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!1536 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!1537 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!1538 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!1539 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!1540 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!1541 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!1542 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "type_class", file: !1543, line: 30, baseType: !1445, size: 32, elements: !1544)
!1543 = !DIFile(filename: "./typeclass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1544 = !{!1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562}
!1545 = !DIEnumerator(name: "no_type_class", value: -1)
!1546 = !DIEnumerator(name: "void_type_class", value: 0)
!1547 = !DIEnumerator(name: "integer_type_class", value: 1)
!1548 = !DIEnumerator(name: "char_type_class", value: 2)
!1549 = !DIEnumerator(name: "enumeral_type_class", value: 3)
!1550 = !DIEnumerator(name: "boolean_type_class", value: 4)
!1551 = !DIEnumerator(name: "pointer_type_class", value: 5)
!1552 = !DIEnumerator(name: "reference_type_class", value: 6)
!1553 = !DIEnumerator(name: "offset_type_class", value: 7)
!1554 = !DIEnumerator(name: "real_type_class", value: 8)
!1555 = !DIEnumerator(name: "complex_type_class", value: 9)
!1556 = !DIEnumerator(name: "function_type_class", value: 10)
!1557 = !DIEnumerator(name: "method_type_class", value: 11)
!1558 = !DIEnumerator(name: "record_type_class", value: 12)
!1559 = !DIEnumerator(name: "union_type_class", value: 13)
!1560 = !DIEnumerator(name: "array_type_class", value: 14)
!1561 = !DIEnumerator(name: "string_type_class", value: 15)
!1562 = !DIEnumerator(name: "lang_type_class", value: 16)
!1563 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !1564, line: 7, baseType: !7, size: 32, elements: !1565)
!1564 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1565 = !{!1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054}
!1566 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!1567 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!1568 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!1569 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!1570 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!1571 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!1572 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!1573 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!1574 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!1575 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!1576 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!1577 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!1578 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!1579 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!1580 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!1581 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!1582 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!1583 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!1584 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!1585 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!1586 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!1587 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!1588 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!1589 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!1590 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!1591 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!1592 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!1593 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!1594 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!1595 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!1596 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!1597 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!1598 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!1599 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!1600 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!1601 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!1602 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!1603 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!1604 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!1605 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!1606 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!1607 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!1608 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!1609 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!1610 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!1611 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!1612 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!1613 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!1614 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!1615 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!1616 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!1617 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!1618 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!1619 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!1620 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!1621 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!1622 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!1623 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!1624 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!1625 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!1626 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!1627 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!1628 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!1629 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!1630 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!1631 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!1632 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!1633 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!1634 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!1635 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!1636 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!1637 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!1638 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!1639 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!1640 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!1641 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!1642 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!1643 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!1644 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!1645 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!1646 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!1647 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!1648 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!1649 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!1650 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!1651 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!1652 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!1653 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!1654 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!1655 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!1656 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!1657 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!1658 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!1659 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!1660 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!1661 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!1662 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!1663 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!1664 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!1665 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!1666 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!1667 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!1668 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!1669 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!1670 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!1671 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!1672 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!1673 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!1674 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!1675 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!1676 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!1677 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!1678 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!1679 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!1680 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!1681 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!1682 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!1683 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!1684 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!1685 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!1686 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!1687 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!1688 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!1689 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!1690 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!1691 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!1692 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!1693 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!1694 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!1695 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!1696 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!1697 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!1698 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!1699 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!1700 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!1701 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!1702 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!1703 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!1704 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!1705 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!1706 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!1707 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!1708 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!1709 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!1710 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!1711 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!1712 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!1713 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!1714 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!1715 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!1716 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!1717 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!1718 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!1719 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!1720 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!1721 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!1722 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!1723 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!1724 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!1725 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!1726 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!1727 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!1728 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!1729 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!1730 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!1731 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!1732 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!1733 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!1734 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!1735 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!1736 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!1737 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!1738 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!1739 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!1740 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!1741 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!1742 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!1743 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!1744 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!1745 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!1746 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!1747 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!1748 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!1749 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!1750 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!1751 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!1752 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!1753 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!1754 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!1755 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!1756 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!1757 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!1758 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!1759 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!1760 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!1761 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!1762 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!1763 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!1764 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!1765 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!1766 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!1767 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!1768 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!1769 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!1770 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!1771 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!1772 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!1773 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!1774 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!1775 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!1776 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!1777 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!1778 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!1779 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!1780 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!1781 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!1782 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!1783 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!1784 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!1785 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!1786 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!1787 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!1788 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!1789 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!1790 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!1791 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!1792 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!1793 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!1794 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!1795 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!1796 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!1797 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!1798 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!1799 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!1800 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!1801 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!1802 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!1803 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!1804 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!1805 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!1806 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!1807 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!1808 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!1810 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!1811 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!1812 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!1813 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!1814 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!1815 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!1816 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!1817 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!1818 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!1819 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!1820 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!1821 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!1822 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!1823 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!1824 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!1825 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!1826 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!1827 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!1828 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!1829 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!1830 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!1831 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!1832 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!1833 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!1835 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!1836 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!1837 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!1838 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!1839 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!1840 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!1841 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!1842 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!1843 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!1844 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!1845 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!1846 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!1847 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!1848 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!1849 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!1850 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!1851 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!1852 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!1853 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!1854 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!1855 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!1856 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!1857 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!1858 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!1859 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!1860 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!1861 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!1862 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!1863 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!1864 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!1865 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!1866 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!1867 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!1868 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!1869 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!1870 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!1871 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!1872 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!1873 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!1874 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!1875 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!1876 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!1877 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!1878 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!1879 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!1880 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!1881 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!1882 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!1883 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!1884 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!1885 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!1886 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!1887 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!1888 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!1889 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!1890 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!1891 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!1892 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!1893 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!1894 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!1895 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!1896 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!1897 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!1898 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!1899 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!1900 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!1901 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!1902 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!1903 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!1904 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!1905 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!1906 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!1907 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!1908 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!1909 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!1910 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!1911 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!1912 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!1913 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!1914 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!1915 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!1916 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!1917 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!1918 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!1919 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!1920 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!1921 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!1922 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!1923 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!1924 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!1925 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!1926 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!1927 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!1928 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!1929 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!1930 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!1931 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!1932 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!1933 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!1934 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!1935 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!1936 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!1937 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!1938 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!1939 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!1940 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!2019 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!2020 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!2021 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!2022 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!2023 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!2024 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!2025 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!2026 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!2027 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!2028 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!2029 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!2030 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!2031 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!2032 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!2033 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!2034 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!2035 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!2036 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!2037 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!2038 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!2039 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!2040 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!2041 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!2042 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!2043 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!2044 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!2045 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!2046 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!2047 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!2048 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!2049 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!2050 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!2051 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!2052 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!2053 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!2054 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!2055 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!2056 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!2057 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!2058 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!2059 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!2060 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!2061 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!2062 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!2063 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!2064 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!2065 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!2066 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!2067 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!2068 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!2069 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!2070 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!2071 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!2072 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!2073 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!2074 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!2075 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!2076 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!2077 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!2078 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!2079 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!2080 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!2081 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!2082 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!2083 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!2084 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!2085 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!2086 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!2087 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!2088 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!2089 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!2090 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!2091 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!2092 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!2093 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!2094 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!2095 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!2096 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!2097 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!2098 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!2099 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!2100 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!2101 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!2102 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!2103 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!2104 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!2105 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!2106 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!2107 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!2108 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!2109 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!2110 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!2111 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!2112 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!2113 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!2114 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!2115 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!2116 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!2117 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!2118 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!2119 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!2120 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!2121 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!2122 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!2123 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!2124 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!2125 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!2126 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!2127 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!2128 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!2129 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!2130 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!2131 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!2132 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!2133 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!2134 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!2203 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!2204 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!2205 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!2206 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!2207 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!2208 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!2209 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!2210 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!2211 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!2212 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!2213 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!2214 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!2215 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!2216 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!2217 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!2218 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!2219 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!2220 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!2221 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!2222 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!2223 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!2224 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!2225 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!2226 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!2227 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!2228 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!2229 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!2230 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!2231 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!2232 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!2233 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!2234 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!2235 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!2236 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!2237 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!2238 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!2239 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!2240 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!2241 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!2242 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!2243 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!2244 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!2245 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!2246 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!2247 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!2248 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!2249 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!2250 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!2251 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!2252 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!2253 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!2254 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!2255 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!2256 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!2257 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!2258 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!2259 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!2260 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!2261 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!2262 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!2263 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!2264 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!2265 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!2266 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!2267 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!2268 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!2269 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!2270 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!2271 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!2272 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!2273 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!2274 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!2275 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!2276 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!2277 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!2278 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!2279 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!2280 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!2281 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!2282 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!2283 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!2284 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!2285 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!2286 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!2287 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!2288 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!2289 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!2290 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!2291 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!2292 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!2293 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!2294 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!2295 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!2296 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!2297 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!2298 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!2299 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!2300 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!2301 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!2302 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!2303 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!2304 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!2305 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!2306 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!2307 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!2308 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!2309 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!2310 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!2311 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!2312 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!2313 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!2314 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!2315 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!2316 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!2317 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!2318 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!2319 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!2320 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!2321 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!2322 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!2323 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!2324 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!2325 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!2326 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!2327 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!2328 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!2329 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!2330 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!2331 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!2332 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!2333 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!2334 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!2335 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!2336 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!2337 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!2338 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!2339 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!2340 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!2341 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!2342 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!2343 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!2344 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!2345 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!2346 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!2347 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!2348 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!2349 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!2350 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!2351 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!2352 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!2353 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!2354 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!2355 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!2356 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!2357 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!2358 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!2359 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!2360 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!2361 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!2362 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!2363 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!2364 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!2365 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!2366 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!2367 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!2368 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!2369 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!2370 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!2371 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!2372 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!2373 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!2374 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!2375 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!2376 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!2377 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!2378 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!2379 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!2380 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!2381 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!2382 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!2383 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!2384 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!2385 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!2386 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!2387 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!2388 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!2389 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!2390 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!2391 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!2392 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!2393 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!2394 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!2395 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!2396 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!2397 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!2398 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!2399 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!2400 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!2401 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!2402 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!2403 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!2404 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!2405 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!2406 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!2407 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!2408 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!2409 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!2410 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!2411 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!2412 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!2413 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!2414 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!2415 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!2416 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!2417 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!2418 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!2419 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!2420 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!2421 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!2422 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!2423 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!2424 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!2425 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!2426 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!2427 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!2428 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!2429 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!2430 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!2431 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!2432 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!2433 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!2434 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!2435 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!2436 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!2437 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!2438 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!2439 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!2440 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!2441 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!2442 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!2443 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!2444 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!2445 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!2446 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!2447 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!2448 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!2449 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!2450 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!2451 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!2452 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!2453 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!2454 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!2455 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!2456 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!2457 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!2458 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!2459 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!2460 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!2461 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!2462 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!2463 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!2464 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!2465 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!2466 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!2467 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!2468 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!2469 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!2470 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!2471 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!2472 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!2473 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!2474 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!2475 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!2476 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!2477 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!2478 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!2479 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!2480 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!2481 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!2482 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!2483 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!2484 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!2485 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!2486 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!2487 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!2488 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!2489 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!2490 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!2491 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!2492 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!2493 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!2494 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!2495 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!2496 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!2497 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!2498 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!2499 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!2500 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!2501 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!2502 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!2503 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!2504 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!2505 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!2506 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!2507 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!2508 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!2509 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!2510 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!2511 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!2512 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!2513 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!2514 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!2515 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!2516 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!2517 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!2518 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!2519 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!2520 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!2521 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!2522 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!2523 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!2524 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!2525 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!2526 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!2527 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!2528 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!2529 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!2530 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!2531 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!2532 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!2533 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!2534 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!2535 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!2536 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!2537 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!2538 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!2539 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!2540 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!2541 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!2542 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!2543 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!2544 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!2545 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!2546 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!2547 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!2548 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!2549 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!2550 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!2551 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!2552 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!2553 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!2554 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!2555 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!2556 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!2557 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!2558 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!2559 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!2560 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!2561 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!2562 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!2563 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!2564 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!2565 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!2566 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!2567 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!2568 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!2569 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!2570 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!2571 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!2572 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!2573 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!2574 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!2575 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!2576 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!2577 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!2578 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!2579 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!2580 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!2581 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!2582 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!2583 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!2584 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!2585 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!2586 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!2587 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!2588 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!2589 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!2590 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!2591 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!2592 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!2593 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!2594 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!2595 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!2596 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!2597 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!2598 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!2599 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!2600 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!2601 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!2602 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!2603 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!2604 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!2605 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!2606 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!2607 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!2608 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!2609 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!2610 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!2611 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!2612 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!2613 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!2614 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!2615 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!2616 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!2617 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!2618 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!2619 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!2620 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!2621 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!2622 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!2623 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!2624 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!2625 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!2626 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!2627 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!2628 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!2629 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!2630 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!2631 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!2632 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!2633 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!2634 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!2635 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!2636 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!2637 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!2638 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!2639 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!2640 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!2641 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!2642 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!2643 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!2644 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!2645 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!2646 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!2647 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!2648 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!2649 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!2650 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!2651 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!2652 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!2653 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!2654 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!2655 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!2656 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!2657 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!2658 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!2659 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!2660 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!2661 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!2662 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!2663 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!2664 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!2665 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!2666 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!2667 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!2668 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!2669 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!2670 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!2671 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!2672 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!2673 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!2674 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!2675 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!2676 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!2677 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!2678 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!2679 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!2680 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!2681 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!2682 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!2683 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!2684 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!2685 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!2686 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!2687 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!2688 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!2689 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!2690 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!2691 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!2692 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!2693 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!2694 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!2695 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!2696 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!2697 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!2698 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!2699 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!2700 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!2701 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!2702 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!2703 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!2704 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!2705 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!2706 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!2707 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!2708 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!2709 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!2710 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!2711 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!2712 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!2713 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!2714 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!2715 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!2716 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!2717 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!2718 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!2719 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!2720 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!2721 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!2722 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!2723 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!2724 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!2725 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!2726 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!2727 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!2728 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!2729 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!2730 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!2731 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!2732 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!2733 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!2734 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!2735 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!2736 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!2737 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!2738 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!2739 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!2740 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!2741 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!2742 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!2743 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!2744 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!2745 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!2746 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!2747 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!2748 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!2749 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!2750 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!2751 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!2752 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!2753 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!2754 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!2755 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!2756 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!2757 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!2758 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!2759 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!2760 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!2761 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!2762 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!2763 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!2764 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!2765 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!2766 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!2767 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!2768 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!2769 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!2770 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!2771 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!2772 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!2773 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!2774 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!2775 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!2776 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!2777 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!2778 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!2779 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!2780 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!2781 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!2782 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!2783 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!2784 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!2785 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!2786 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!2787 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!2788 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!2789 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!2790 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!2791 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!2792 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!2793 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!2794 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!2795 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!2796 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!2797 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!2798 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!2799 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!2800 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!2801 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!2802 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!2803 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!2804 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!2805 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!2806 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!2807 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!2808 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!2809 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!2810 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!2811 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!2812 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!2813 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!2814 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!2815 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!2816 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!2817 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!2818 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!2819 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!2820 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!2821 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!2822 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!2823 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!2824 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!2825 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!2826 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!2827 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!2828 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!2829 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!2830 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!2831 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!2832 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!2833 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!2834 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!2835 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!2836 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!2837 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!2838 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!2839 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!2840 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!2841 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!2842 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!2843 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!2844 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!2845 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!2846 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!2847 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!2848 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!2849 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!2850 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!2851 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!2852 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!2853 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!2854 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!2855 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!2856 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!2857 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!2858 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!2859 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!2860 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!2861 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!2862 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!2863 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!2864 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!2865 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!2866 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!2867 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!2868 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!2869 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!2870 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!2871 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!2872 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!2873 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!2874 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!2875 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!2876 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!2877 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!2878 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!2879 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!2880 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!2881 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!2882 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!2883 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!2884 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!2885 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!2886 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!2887 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!2888 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!2889 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!2890 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!2891 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!2892 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!2893 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!2894 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!2895 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!2896 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!2897 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!2898 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!2899 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!2900 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!2901 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!2902 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!2903 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!2904 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!2905 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!2906 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!2907 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!2908 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!2909 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!2910 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!2911 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!2912 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!2913 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!2914 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!2915 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!2916 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!2917 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!2918 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!2919 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!2920 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!2921 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!2922 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!2923 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!2924 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!2925 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!2926 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!2927 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!2928 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!2929 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!2930 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!2931 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!2932 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!2933 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!2934 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!2935 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!2936 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!2937 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!2938 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!2939 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!2940 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!2941 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!2942 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!2943 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!2944 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!2945 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!2946 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!2947 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!2948 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!2949 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!2950 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!2951 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!2952 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!2953 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!2954 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!2955 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!2956 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!2957 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!2958 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!2959 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!2960 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!2961 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!2962 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!2963 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!2964 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!2965 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!2966 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!2967 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!2968 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!2969 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!2970 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!2971 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!2972 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!2973 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!2974 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!2975 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!2976 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!2977 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!2978 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!2979 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!2980 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!2981 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!2982 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!2983 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!2984 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!2985 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!2986 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!2987 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!2988 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!2989 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!2990 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!2991 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!2992 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!2993 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!2994 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!2995 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!2996 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!2997 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!2998 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!2999 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!3000 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!3001 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!3002 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!3003 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!3004 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!3005 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!3006 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!3007 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!3008 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!3009 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!3010 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!3011 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!3012 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!3013 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!3014 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!3015 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!3016 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!3017 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!3018 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!3019 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!3020 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!3021 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!3022 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!3023 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!3024 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!3025 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!3026 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!3027 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!3028 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!3029 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!3030 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!3031 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!3032 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!3033 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!3034 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!3035 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!3036 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!3037 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!3038 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!3039 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!3040 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!3041 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!3042 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!3043 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!3044 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!3045 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!3046 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!3047 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!3048 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!3049 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!3050 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!3051 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!3052 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!3053 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!3054 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!3055 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !3056, line: 76, baseType: !7, size: 32, elements: !3057)
!3056 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3057 = !{!3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217}
!3058 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!3059 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!3060 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!3061 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!3062 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!3063 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!3064 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!3065 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!3066 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!3067 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!3068 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!3069 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!3070 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!3071 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!3072 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!3073 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!3074 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!3075 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!3076 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!3077 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!3078 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!3079 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!3080 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!3081 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!3082 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!3083 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!3084 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!3085 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!3086 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!3087 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!3088 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!3089 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!3090 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!3091 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!3092 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!3093 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!3094 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!3095 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!3096 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!3097 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!3098 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!3099 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!3100 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!3101 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!3102 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!3103 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!3104 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!3105 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!3106 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!3107 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!3108 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!3109 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!3110 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!3111 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!3112 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!3113 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!3114 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!3115 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!3116 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!3117 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!3118 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!3119 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!3120 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!3121 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!3122 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!3123 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!3124 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!3125 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!3126 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!3127 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!3128 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!3129 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!3130 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!3131 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!3132 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!3133 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!3134 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!3135 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!3136 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!3137 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!3138 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!3139 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!3140 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!3141 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!3142 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!3143 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!3144 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!3145 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!3146 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!3147 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!3148 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!3149 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!3150 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!3151 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!3152 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!3153 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!3154 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!3155 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!3156 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!3157 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!3158 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!3159 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!3160 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!3161 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!3162 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!3163 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!3164 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!3165 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!3166 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!3167 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!3168 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!3169 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!3170 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!3171 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!3172 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!3173 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!3174 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!3175 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!3176 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!3177 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!3178 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!3179 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!3180 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!3181 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!3182 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!3183 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!3184 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!3185 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!3186 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!3187 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!3188 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!3189 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!3190 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!3191 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!3192 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!3193 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!3194 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!3195 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!3196 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!3197 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!3198 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!3199 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!3200 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!3201 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!3202 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!3203 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!3204 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!3205 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!3206 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!3207 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!3208 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!3209 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!3210 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!3211 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!3212 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!3213 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!3214 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!3215 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!3216 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!3217 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!3218 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "real_value_class", file: !3219, line: 39, baseType: !7, size: 32, elements: !3220)
!3219 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3220 = !{!3221, !3222, !3223, !3224}
!3221 = !DIEnumerator(name: "rvc_zero", value: 0, isUnsigned: true)
!3222 = !DIEnumerator(name: "rvc_normal", value: 1, isUnsigned: true)
!3223 = !DIEnumerator(name: "rvc_inf", value: 2, isUnsigned: true)
!3224 = !DIEnumerator(name: "rvc_nan", value: 3, isUnsigned: true)
!3225 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1437, line: 51, baseType: !7, size: 32, elements: !3226)
!3226 = !{!3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262}
!3227 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!3228 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!3229 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!3230 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!3231 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!3232 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!3233 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!3234 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!3235 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!3236 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!3237 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!3238 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!3239 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!3240 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!3241 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!3242 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!3243 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!3244 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!3245 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!3246 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!3247 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!3248 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!3249 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!3250 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!3251 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!3252 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!3253 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!3254 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!3255 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!3256 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!3257 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!3258 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!3259 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!3260 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!3261 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!3262 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!3263 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1437, line: 727, baseType: !7, size: 32, elements: !3264)
!3264 = !{!3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288}
!3265 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!3266 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!3267 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!3268 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!3269 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!3270 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!3271 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!3272 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!3273 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!3274 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!3275 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!3276 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!3277 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!3278 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!3279 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!3280 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!3281 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!3282 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!3283 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!3284 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!3285 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!3286 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!3287 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!3288 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!3289 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !1437, line: 100, baseType: !7, size: 32, elements: !3290)
!3290 = !{!3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301}
!3291 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!3292 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!3293 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!3294 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!3295 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!3296 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!3297 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!3298 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!3299 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!3300 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!3301 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!3302 = !{!134, !7, !1445, !3303, !4732, !3431, !3344, !3584, !3504, !3479, !4734, !410, !3357, !3569, !3666, !1520, !3421, !5, !3359, !3632, !4735}
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !3305)
!3305 = !{!3306, !3339, !3347, !3360, !3378, !3389, !3394, !3404, !3410, !3424, !3436, !3474, !3969, !3997, !4014, !4015, !4020, !4029, !4035, !4040, !4044, !4048, !4383, !4430, !4436, !4442, !4449, !4462, !4476, !4493, !4505, !4527, !4542, !4714}
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3304, file: !135, line: 3372, baseType: !3307, size: 64)
!3307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !3308)
!3308 = !{!3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3338}
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3307, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !3307, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !3307, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !3307, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !3307, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !3307, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !3307, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !3307, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !3307, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !3307, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !3307, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !3307, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !3307, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !3307, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !3307, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !3307, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !3307, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !3307, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3307, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3307, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3307, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3307, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3307, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3307, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3307, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3307, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !3307, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !3307, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !3307, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !3307, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3304, file: !135, line: 3373, baseType: !3340, size: 192)
!3340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !3341)
!3341 = !{!3342, !3343, !3346}
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3340, file: !135, line: 403, baseType: !3307, size: 64)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !3340, file: !135, line: 404, baseType: !3344, size: 64, offset: 64)
!3344 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !3345, line: 56, baseType: !3303)
!3345 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3340, file: !135, line: 405, baseType: !3344, size: 64, offset: 128)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3304, file: !135, line: 3374, baseType: !3348, size: 320)
!3348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !3349)
!3349 = !{!3350, !3351}
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3348, file: !135, line: 1385, baseType: !3340, size: 192)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3348, file: !135, line: 1386, baseType: !3352, size: 128, offset: 192)
!3352 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !3353, line: 58, baseType: !3354)
!3353 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3353, line: 54, size: 128, elements: !3355)
!3355 = !{!3356, !3358}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !3354, file: !3353, line: 56, baseType: !3357, size: 64)
!3357 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !3354, file: !3353, line: 57, baseType: !3359, size: 64, offset: 64)
!3359 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !3304, file: !135, line: 3375, baseType: !3361, size: 256)
!3361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !3362)
!3362 = !{!3363, !3364}
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3361, file: !135, line: 1398, baseType: !3340, size: 192)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !3361, file: !135, line: 1399, baseType: !3365, size: 64, offset: 192)
!3365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3366, size: 64)
!3366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !3219, line: 52, size: 256, elements: !3367)
!3367 = !{!3368, !3369, !3370, !3371, !3372, !3373, !3374}
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !3366, file: !3219, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !3366, file: !3219, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !3366, file: !3219, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !3366, file: !3219, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3366, file: !3219, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !3366, file: !3219, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !3366, file: !3219, line: 62, baseType: !3375, size: 192, offset: 64)
!3375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3357, size: 192, elements: !3376)
!3376 = !{!3377}
!3377 = !DISubrange(count: 3)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !3304, file: !135, line: 3376, baseType: !3379, size: 256)
!3379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !3380)
!3380 = !{!3381, !3382}
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3379, file: !135, line: 1409, baseType: !3340, size: 192)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !3379, file: !135, line: 1410, baseType: !3383, size: 64, offset: 192)
!3383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3384, size: 64)
!3384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !3385, line: 27, size: 192, elements: !3386)
!3385 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3386 = !{!3387, !3388}
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3384, file: !3385, line: 29, baseType: !3352, size: 128)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3384, file: !3385, line: 30, baseType: !5, size: 32, offset: 128)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !3304, file: !135, line: 3377, baseType: !3390, size: 256)
!3390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !3391)
!3391 = !{!3392, !3393}
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3390, file: !135, line: 1438, baseType: !3340, size: 192)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3390, file: !135, line: 1439, baseType: !3344, size: 64, offset: 192)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3304, file: !135, line: 3378, baseType: !3395, size: 256)
!3395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !3396)
!3396 = !{!3397, !3398, !3399}
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3395, file: !135, line: 1419, baseType: !3340, size: 192)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3395, file: !135, line: 1420, baseType: !1445, size: 32, offset: 192)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3395, file: !135, line: 1421, baseType: !3400, size: 8, offset: 224)
!3400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3401, size: 8, elements: !3402)
!3401 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!3402 = !{!3403}
!3403 = !DISubrange(count: 1)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !3304, file: !135, line: 3379, baseType: !3405, size: 320)
!3405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !3406)
!3406 = !{!3407, !3408, !3409}
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3405, file: !135, line: 1429, baseType: !3340, size: 192)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !3405, file: !135, line: 1430, baseType: !3344, size: 64, offset: 192)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !3405, file: !135, line: 1431, baseType: !3344, size: 64, offset: 256)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !3304, file: !135, line: 3380, baseType: !3411, size: 320)
!3411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !3412)
!3412 = !{!3413, !3414}
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3411, file: !135, line: 1461, baseType: !3340, size: 192)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3411, file: !135, line: 1462, baseType: !3415, size: 128, offset: 192)
!3415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !3416, line: 31, size: 128, elements: !3417)
!3416 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3417 = !{!3418, !3422, !3423}
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3415, file: !3416, line: 32, baseType: !3419, size: 64)
!3419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3420, size: 64)
!3420 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3421)
!3421 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3415, file: !3416, line: 33, baseType: !7, size: 32, offset: 64)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !3415, file: !3416, line: 34, baseType: !7, size: 32, offset: 96)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !3304, file: !135, line: 3381, baseType: !3425, size: 384)
!3425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !3426)
!3426 = !{!3427, !3428, !3433, !3434, !3435}
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3425, file: !135, line: 2508, baseType: !3340, size: 192)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3425, file: !135, line: 2509, baseType: !3429, size: 32, offset: 192)
!3429 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !3430, line: 58, baseType: !3431)
!3430 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3431 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !3432, line: 44, baseType: !7)
!3432 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3425, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3425, file: !135, line: 2511, baseType: !3344, size: 64, offset: 256)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3425, file: !135, line: 2512, baseType: !3344, size: 64, offset: 320)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !3304, file: !135, line: 3382, baseType: !3437, size: 896)
!3437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !3438)
!3438 = !{!3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471}
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3437, file: !135, line: 2653, baseType: !3425, size: 384)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3437, file: !135, line: 2654, baseType: !3344, size: 64, offset: 384)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3437, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !3437, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !3437, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !3437, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3437, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !3437, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !3437, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !3437, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3437, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3437, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3437, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3437, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3437, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3437, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3437, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !3437, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !3437, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !3437, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !3437, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !3437, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !3437, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !3437, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !3437, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !3437, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !3437, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3437, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3437, file: !135, line: 2705, baseType: !3344, size: 64, offset: 576)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3437, file: !135, line: 2706, baseType: !3344, size: 64, offset: 640)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3437, file: !135, line: 2707, baseType: !3344, size: 64, offset: 704)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3437, file: !135, line: 2708, baseType: !3344, size: 64, offset: 768)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3437, file: !135, line: 2711, baseType: !3472, size: 64, offset: 832)
!3472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3473, size: 64)
!3473 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !3304, file: !135, line: 3383, baseType: !3475, size: 960)
!3475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !3476)
!3476 = !{!3477, !3478}
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3475, file: !135, line: 2757, baseType: !3437, size: 896)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3475, file: !135, line: 2758, baseType: !3479, size: 64, offset: 896)
!3479 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !3345, line: 50, baseType: !3480)
!3480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3481, size: 64)
!3481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !411, line: 240, size: 384, elements: !3482)
!3482 = !{!3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493}
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3481, file: !411, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3481, file: !411, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !3481, file: !411, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !3481, file: !411, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !3481, file: !411, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !3481, file: !411, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !3481, file: !411, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3481, file: !411, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !3481, file: !411, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !3481, file: !411, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3481, file: !411, line: 321, baseType: !3494, size: 320, offset: 64)
!3494 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !411, line: 315, size: 320, elements: !3495)
!3495 = !{!3496, !3902, !3904, !3967, !3968}
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3494, file: !411, line: 316, baseType: !3497, size: 64)
!3497 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3498, size: 64, elements: !3402)
!3498 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !411, line: 183, baseType: !3499)
!3499 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !411, line: 166, size: 64, elements: !3500)
!3500 = !{!3501, !3502, !3503, !3506, !3507, !3515, !3516, !3528, !3531, !3593, !3594, !3879, !3892, !3899}
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !3499, file: !411, line: 168, baseType: !1445, size: 32)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !3499, file: !411, line: 169, baseType: !7, size: 32)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !3499, file: !411, line: 170, baseType: !3504, size: 64)
!3504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3505, size: 64)
!3505 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3401)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !3499, file: !411, line: 171, baseType: !3479, size: 64)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !3499, file: !411, line: 172, baseType: !3508, size: 64)
!3508 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !3345, line: 53, baseType: !3509)
!3509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3510, size: 64)
!3510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !411, line: 359, size: 128, elements: !3511)
!3511 = !{!3512, !3513}
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !3510, file: !411, line: 360, baseType: !1445, size: 32)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !3510, file: !411, line: 361, baseType: !3514, size: 64, offset: 64)
!3514 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3479, size: 64, elements: !3402)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !3499, file: !411, line: 173, baseType: !5, size: 32)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !3499, file: !411, line: 174, baseType: !3517, size: 32)
!3517 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !411, line: 133, baseType: !3518)
!3518 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !411, line: 115, size: 32, elements: !3519)
!3519 = !{!3520, !3521, !3522, !3523, !3524, !3525, !3526, !3527}
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !3518, file: !411, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !3518, file: !411, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !3518, file: !411, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !3518, file: !411, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !3518, file: !411, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !3518, file: !411, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !3518, file: !411, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !3518, file: !411, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !3499, file: !411, line: 175, baseType: !3529, size: 64)
!3529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3530, size: 64)
!3530 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !411, line: 175, flags: DIFlagFwdDecl)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !3499, file: !411, line: 176, baseType: !3532, size: 64)
!3532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3533, size: 64)
!3533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !3534, line: 75, size: 256, elements: !3535)
!3534 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3535 = !{!3536, !3550, !3551, !3552}
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3533, file: !3534, line: 76, baseType: !3537, size: 64)
!3537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3538, size: 64)
!3538 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !3534, line: 68, baseType: !3539)
!3539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !3534, line: 63, size: 320, elements: !3540)
!3540 = !{!3541, !3543, !3544, !3545}
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3539, file: !3534, line: 64, baseType: !3542, size: 64)
!3542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3539, size: 64)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3539, file: !3534, line: 65, baseType: !3542, size: 64, offset: 64)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !3539, file: !3534, line: 66, baseType: !7, size: 32, offset: 128)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3539, file: !3534, line: 67, baseType: !3546, size: 128, offset: 192)
!3546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3547, size: 128, elements: !3548)
!3547 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !3534, line: 29, baseType: !3357)
!3548 = !{!3549}
!3549 = !DISubrange(count: 2)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3533, file: !3534, line: 77, baseType: !3537, size: 64, offset: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !3533, file: !3534, line: 78, baseType: !7, size: 32, offset: 128)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !3533, file: !3534, line: 79, baseType: !3553, size: 64, offset: 192)
!3553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3554, size: 64)
!3554 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !3534, line: 49, baseType: !3555)
!3555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !3534, line: 45, size: 832, elements: !3556)
!3556 = !{!3557, !3558, !3559}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3555, file: !3534, line: 46, baseType: !3542, size: 64)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !3555, file: !3534, line: 47, baseType: !3532, size: 64, offset: 64)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !3555, file: !3534, line: 48, baseType: !3560, size: 704, offset: 128)
!3560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !3561, line: 164, size: 704, elements: !3562)
!3561 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3562 = !{!3563, !3564, !3575, !3576, !3577, !3578, !3579, !3580, !3585, !3589, !3590, !3591, !3592}
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !3560, file: !3561, line: 166, baseType: !3359, size: 64)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !3560, file: !3561, line: 167, baseType: !3565, size: 64, offset: 64)
!3565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3566, size: 64)
!3566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !3561, line: 157, size: 192, elements: !3567)
!3567 = !{!3568, !3570, !3571}
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3566, file: !3561, line: 159, baseType: !3569, size: 64)
!3569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3401, size: 64)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3566, file: !3561, line: 160, baseType: !3565, size: 64, offset: 64)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !3566, file: !3561, line: 161, baseType: !3572, size: 32, offset: 128)
!3572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3401, size: 32, elements: !3573)
!3573 = !{!3574}
!3574 = !DISubrange(count: 4)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !3560, file: !3561, line: 168, baseType: !3569, size: 64, offset: 128)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3560, file: !3561, line: 169, baseType: !3569, size: 64, offset: 192)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !3560, file: !3561, line: 170, baseType: !3569, size: 64, offset: 256)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !3560, file: !3561, line: 171, baseType: !3359, size: 64, offset: 320)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !3560, file: !3561, line: 172, baseType: !1445, size: 32, offset: 384)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !3560, file: !3561, line: 176, baseType: !3581, size: 64, offset: 448)
!3581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3582, size: 64)
!3582 = !DISubroutineType(types: !3583)
!3583 = !{!3565, !3584, !3359}
!3584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !3560, file: !3561, line: 177, baseType: !3586, size: 64, offset: 512)
!3586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3587, size: 64)
!3587 = !DISubroutineType(types: !3588)
!3588 = !{null, !3584, !3565}
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !3560, file: !3561, line: 178, baseType: !3584, size: 64, offset: 576)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !3560, file: !3561, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !3560, file: !3561, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !3560, file: !3561, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !3499, file: !411, line: 177, baseType: !3344, size: 64)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !3499, file: !411, line: 178, baseType: !3595, size: 64)
!3595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3596, size: 64)
!3596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !3597)
!3597 = !{!3598, !3844, !3845, !3846, !3849, !3853, !3854, !3855, !3873, !3874, !3875, !3876, !3877, !3878}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !3596, file: !337, line: 219, baseType: !3599, size: 64)
!3599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3600, size: 64)
!3600 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !3601)
!3601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !3602)
!3602 = !{!3603}
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3601, file: !337, line: 151, baseType: !3604, size: 128)
!3604 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !3605)
!3605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !3606)
!3606 = !{!3607, !3608, !3609}
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3605, file: !337, line: 150, baseType: !7, size: 32)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3605, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3605, file: !337, line: 150, baseType: !3610, size: 64, offset: 64)
!3610 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3611, size: 64, elements: !3402)
!3611 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !3345, line: 108, baseType: !3612)
!3612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3613, size: 64)
!3613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !3614)
!3614 = !{!3615, !3616, !3617, !3836, !3837, !3838, !3839, !3840, !3841, !3842}
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3613, file: !337, line: 124, baseType: !3595, size: 64)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3613, file: !337, line: 125, baseType: !3595, size: 64, offset: 64)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !3613, file: !337, line: 131, baseType: !3618, size: 64, offset: 128)
!3618 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !3619)
!3619 = !{!3620, !3835}
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3618, file: !337, line: 129, baseType: !3621, size: 64)
!3621 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !3345, line: 66, baseType: !3622)
!3622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3623, size: 64)
!3623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1437, line: 143, size: 192, elements: !3624)
!3624 = !{!3625, !3833, !3834}
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3623, file: !1437, line: 145, baseType: !3626, size: 64)
!3626 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !3345, line: 69, baseType: !3627)
!3627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3628, size: 64)
!3628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1437, line: 136, size: 192, elements: !3629)
!3629 = !{!3630, !3831, !3832}
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3628, file: !1437, line: 137, baseType: !3631, size: 64)
!3631 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !3345, line: 58, baseType: !3632)
!3632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3633, size: 64)
!3633 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1437, line: 737, size: 768, elements: !3634)
!3634 = !{!3635, !3652, !3686, !3692, !3697, !3702, !3709, !3715, !3721, !3726, !3740, !3745, !3751, !3756, !3766, !3771, !3789, !3796, !3803, !3809, !3814, !3820, !3826}
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3633, file: !1437, line: 738, baseType: !3636, size: 256)
!3636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1437, line: 271, size: 256, elements: !3637)
!3637 = !{!3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651}
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3636, file: !1437, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !3636, file: !1437, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3636, file: !1437, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !3636, file: !1437, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !3636, file: !1437, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !3636, file: !1437, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !3636, file: !1437, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !3636, file: !1437, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3636, file: !1437, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3636, file: !1437, line: 312, baseType: !7, size: 32, offset: 32)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !3636, file: !1437, line: 316, baseType: !3429, size: 32, offset: 64)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !3636, file: !1437, line: 319, baseType: !7, size: 32, offset: 96)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3636, file: !1437, line: 323, baseType: !3595, size: 64, offset: 128)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3636, file: !1437, line: 327, baseType: !3344, size: 64, offset: 192)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !3633, file: !1437, line: 739, baseType: !3653, size: 448)
!3653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1437, line: 350, size: 448, elements: !3654)
!3654 = !{!3655, !3684}
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3653, file: !1437, line: 353, baseType: !3656, size: 384)
!3656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1437, line: 333, size: 384, elements: !3657)
!3657 = !{!3658, !3659, !3667}
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3656, file: !1437, line: 336, baseType: !3636, size: 256)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !3656, file: !1437, line: 343, baseType: !3660, size: 64, offset: 256)
!3660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3661, size: 64)
!3661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !3662, line: 37, size: 128, elements: !3663)
!3662 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3663 = !{!3664, !3665}
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3661, file: !3662, line: 39, baseType: !3660, size: 64)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !3661, file: !3662, line: 40, baseType: !3666, size: 64, offset: 64)
!3666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3344, size: 64)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !3656, file: !1437, line: 344, baseType: !3668, size: 64, offset: 320)
!3668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3669, size: 64)
!3669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !3662, line: 45, size: 320, elements: !3670)
!3670 = !{!3671, !3672}
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3669, file: !3662, line: 47, baseType: !3668, size: 64)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !3669, file: !3662, line: 48, baseType: !3673, size: 256, offset: 64)
!3673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !3674)
!3674 = !{!3675, !3677, !3678, !3683}
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3673, file: !135, line: 1884, baseType: !3676, size: 64)
!3676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3673, size: 64)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3673, file: !135, line: 1885, baseType: !3676, size: 64, offset: 64)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3673, file: !135, line: 1891, baseType: !3679, size: 64, offset: 128)
!3679 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3673, file: !135, line: 1891, size: 64, elements: !3680)
!3680 = !{!3681, !3682}
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3679, file: !135, line: 1891, baseType: !3631, size: 64)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3679, file: !135, line: 1891, baseType: !3344, size: 64)
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3673, file: !135, line: 1892, baseType: !3666, size: 64, offset: 192)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3653, file: !1437, line: 359, baseType: !3685, size: 64, offset: 384)
!3685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3344, size: 64, elements: !3402)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !3633, file: !1437, line: 740, baseType: !3687, size: 512)
!3687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1437, line: 365, size: 512, elements: !3688)
!3688 = !{!3689, !3690, !3691}
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3687, file: !1437, line: 368, baseType: !3656, size: 384)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !3687, file: !1437, line: 373, baseType: !3344, size: 64, offset: 384)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !3687, file: !1437, line: 374, baseType: !3344, size: 64, offset: 448)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !3633, file: !1437, line: 741, baseType: !3693, size: 576)
!3693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1437, line: 380, size: 576, elements: !3694)
!3694 = !{!3695, !3696}
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3693, file: !1437, line: 383, baseType: !3687, size: 512)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3693, file: !1437, line: 389, baseType: !3685, size: 64, offset: 512)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3633, file: !1437, line: 742, baseType: !3698, size: 320)
!3698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1437, line: 395, size: 320, elements: !3699)
!3699 = !{!3700, !3701}
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3698, file: !1437, line: 397, baseType: !3636, size: 256)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3698, file: !1437, line: 400, baseType: !3621, size: 64, offset: 256)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !3633, file: !1437, line: 743, baseType: !3703, size: 448)
!3703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1437, line: 406, size: 448, elements: !3704)
!3704 = !{!3705, !3706, !3707, !3708}
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3703, file: !1437, line: 408, baseType: !3636, size: 256)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3703, file: !1437, line: 412, baseType: !3344, size: 64, offset: 256)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3703, file: !1437, line: 420, baseType: !3344, size: 64, offset: 320)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3703, file: !1437, line: 423, baseType: !3621, size: 64, offset: 384)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !3633, file: !1437, line: 744, baseType: !3710, size: 384)
!3710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1437, line: 429, size: 384, elements: !3711)
!3711 = !{!3712, !3713, !3714}
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3710, file: !1437, line: 431, baseType: !3636, size: 256)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3710, file: !1437, line: 434, baseType: !3344, size: 64, offset: 256)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !3710, file: !1437, line: 437, baseType: !3621, size: 64, offset: 320)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !3633, file: !1437, line: 745, baseType: !3716, size: 384)
!3716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1437, line: 443, size: 384, elements: !3717)
!3717 = !{!3718, !3719, !3720}
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3716, file: !1437, line: 445, baseType: !3636, size: 256)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3716, file: !1437, line: 449, baseType: !3344, size: 64, offset: 256)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !3716, file: !1437, line: 453, baseType: !3621, size: 64, offset: 320)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !3633, file: !1437, line: 746, baseType: !3722, size: 320)
!3722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1437, line: 459, size: 320, elements: !3723)
!3723 = !{!3724, !3725}
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3722, file: !1437, line: 461, baseType: !3636, size: 256)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !3722, file: !1437, line: 464, baseType: !3344, size: 64, offset: 256)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !3633, file: !1437, line: 747, baseType: !3727, size: 768)
!3727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1437, line: 469, size: 768, elements: !3728)
!3728 = !{!3729, !3730, !3731, !3732, !3733}
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3727, file: !1437, line: 471, baseType: !3636, size: 256)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3727, file: !1437, line: 474, baseType: !7, size: 32, offset: 256)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3727, file: !1437, line: 475, baseType: !7, size: 32, offset: 288)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3727, file: !1437, line: 478, baseType: !3344, size: 64, offset: 320)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3727, file: !1437, line: 481, baseType: !3734, size: 384, offset: 384)
!3734 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3735, size: 384, elements: !3402)
!3735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !3736)
!3736 = !{!3737, !3738, !3739}
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !3735, file: !135, line: 1920, baseType: !3673, size: 256)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3735, file: !135, line: 1921, baseType: !3344, size: 64, offset: 256)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3735, file: !135, line: 1922, baseType: !3429, size: 32, offset: 320)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !3633, file: !1437, line: 748, baseType: !3741, size: 320)
!3741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1437, line: 487, size: 320, elements: !3742)
!3742 = !{!3743, !3744}
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3741, file: !1437, line: 490, baseType: !3636, size: 256)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3741, file: !1437, line: 494, baseType: !1445, size: 32, offset: 256)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !3633, file: !1437, line: 749, baseType: !3746, size: 384)
!3746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1437, line: 500, size: 384, elements: !3747)
!3747 = !{!3748, !3749, !3750}
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3746, file: !1437, line: 502, baseType: !3636, size: 256)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !3746, file: !1437, line: 506, baseType: !3621, size: 64, offset: 256)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3746, file: !1437, line: 510, baseType: !3621, size: 64, offset: 320)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !3633, file: !1437, line: 750, baseType: !3752, size: 320)
!3752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1437, line: 529, size: 320, elements: !3753)
!3753 = !{!3754, !3755}
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3752, file: !1437, line: 531, baseType: !3636, size: 256)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3752, file: !1437, line: 540, baseType: !3621, size: 64, offset: 256)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !3633, file: !1437, line: 751, baseType: !3757, size: 704)
!3757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1437, line: 546, size: 704, elements: !3758)
!3758 = !{!3759, !3760, !3761, !3762, !3763, !3764, !3765}
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3757, file: !1437, line: 549, baseType: !3687, size: 512)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3757, file: !1437, line: 553, baseType: !3504, size: 64, offset: 512)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !3757, file: !1437, line: 557, baseType: !3421, size: 8, offset: 576)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !3757, file: !1437, line: 558, baseType: !3421, size: 8, offset: 584)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !3757, file: !1437, line: 559, baseType: !3421, size: 8, offset: 592)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !3757, file: !1437, line: 560, baseType: !3421, size: 8, offset: 600)
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3757, file: !1437, line: 566, baseType: !3685, size: 64, offset: 640)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !3633, file: !1437, line: 752, baseType: !3767, size: 384)
!3767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1437, line: 571, size: 384, elements: !3768)
!3768 = !{!3769, !3770}
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3767, file: !1437, line: 573, baseType: !3698, size: 320)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3767, file: !1437, line: 577, baseType: !3344, size: 64, offset: 320)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !3633, file: !1437, line: 753, baseType: !3772, size: 576)
!3772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1437, line: 600, size: 576, elements: !3773)
!3773 = !{!3774, !3775, !3776, !3779, !3788}
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3772, file: !1437, line: 602, baseType: !3698, size: 320)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3772, file: !1437, line: 605, baseType: !3344, size: 64, offset: 320)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !3772, file: !1437, line: 609, baseType: !3777, size: 64, offset: 384)
!3777 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3778, line: 46, baseType: !3357)
!3778 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3772, file: !1437, line: 612, baseType: !3780, size: 64, offset: 448)
!3780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3781, size: 64)
!3781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1437, line: 581, size: 320, elements: !3782)
!3782 = !{!3783, !3784, !3785, !3786, !3787}
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3781, file: !1437, line: 583, baseType: !134, size: 32)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3781, file: !1437, line: 586, baseType: !3344, size: 64, offset: 64)
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3781, file: !1437, line: 589, baseType: !3344, size: 64, offset: 128)
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !3781, file: !1437, line: 592, baseType: !3344, size: 64, offset: 192)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !3781, file: !1437, line: 595, baseType: !3344, size: 64, offset: 256)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !3772, file: !1437, line: 616, baseType: !3621, size: 64, offset: 512)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !3633, file: !1437, line: 754, baseType: !3790, size: 512)
!3790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1437, line: 622, size: 512, elements: !3791)
!3791 = !{!3792, !3793, !3794, !3795}
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3790, file: !1437, line: 624, baseType: !3698, size: 320)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3790, file: !1437, line: 628, baseType: !3344, size: 64, offset: 320)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !3790, file: !1437, line: 632, baseType: !3344, size: 64, offset: 384)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !3790, file: !1437, line: 636, baseType: !3344, size: 64, offset: 448)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !3633, file: !1437, line: 755, baseType: !3797, size: 704)
!3797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1437, line: 642, size: 704, elements: !3798)
!3798 = !{!3799, !3800, !3801, !3802}
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !3797, file: !1437, line: 644, baseType: !3790, size: 512)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !3797, file: !1437, line: 648, baseType: !3344, size: 64, offset: 512)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !3797, file: !1437, line: 652, baseType: !3344, size: 64, offset: 576)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !3797, file: !1437, line: 653, baseType: !3344, size: 64, offset: 640)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !3633, file: !1437, line: 756, baseType: !3804, size: 448)
!3804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1437, line: 663, size: 448, elements: !3805)
!3805 = !{!3806, !3807, !3808}
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3804, file: !1437, line: 665, baseType: !3698, size: 320)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3804, file: !1437, line: 668, baseType: !3344, size: 64, offset: 320)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3804, file: !1437, line: 673, baseType: !3344, size: 64, offset: 384)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !3633, file: !1437, line: 757, baseType: !3810, size: 384)
!3810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1437, line: 694, size: 384, elements: !3811)
!3811 = !{!3812, !3813}
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3810, file: !1437, line: 696, baseType: !3698, size: 320)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3810, file: !1437, line: 699, baseType: !3344, size: 64, offset: 320)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !3633, file: !1437, line: 758, baseType: !3815, size: 384)
!3815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1437, line: 681, size: 384, elements: !3816)
!3816 = !{!3817, !3818, !3819}
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3815, file: !1437, line: 683, baseType: !3636, size: 256)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !3815, file: !1437, line: 686, baseType: !3344, size: 64, offset: 256)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !3815, file: !1437, line: 689, baseType: !3344, size: 64, offset: 320)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !3633, file: !1437, line: 759, baseType: !3821, size: 384)
!3821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1437, line: 707, size: 384, elements: !3822)
!3822 = !{!3823, !3824, !3825}
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3821, file: !1437, line: 709, baseType: !3636, size: 256)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3821, file: !1437, line: 712, baseType: !3344, size: 64, offset: 256)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3821, file: !1437, line: 712, baseType: !3344, size: 64, offset: 320)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !3633, file: !1437, line: 760, baseType: !3827, size: 320)
!3827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1437, line: 718, size: 320, elements: !3828)
!3828 = !{!3829, !3830}
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3827, file: !1437, line: 720, baseType: !3636, size: 256)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3827, file: !1437, line: 723, baseType: !3344, size: 64, offset: 256)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3628, file: !1437, line: 138, baseType: !3627, size: 64, offset: 64)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3628, file: !1437, line: 139, baseType: !3627, size: 64, offset: 128)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !3623, file: !1437, line: 146, baseType: !3626, size: 64, offset: 64)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3623, file: !1437, line: 152, baseType: !3621, size: 64, offset: 128)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3618, file: !337, line: 130, baseType: !3479, size: 64)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3613, file: !337, line: 134, baseType: !3584, size: 64, offset: 192)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !3613, file: !337, line: 137, baseType: !3344, size: 64, offset: 256)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !3613, file: !337, line: 138, baseType: !3429, size: 32, offset: 320)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !3613, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3613, file: !337, line: 144, baseType: !1445, size: 32, offset: 384)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !3613, file: !337, line: 145, baseType: !1445, size: 32, offset: 416)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3613, file: !337, line: 146, baseType: !3843, size: 64, offset: 448)
!3843 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !3359)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !3596, file: !337, line: 220, baseType: !3599, size: 64, offset: 64)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3596, file: !337, line: 223, baseType: !3584, size: 64, offset: 128)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !3596, file: !337, line: 226, baseType: !3847, size: 64, offset: 192)
!3847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3848, size: 64)
!3848 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !3596, file: !337, line: 229, baseType: !3850, size: 128, offset: 256)
!3850 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3851, size: 128, elements: !3548)
!3851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3852, size: 64)
!3852 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !3596, file: !337, line: 232, baseType: !3595, size: 64, offset: 384)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !3596, file: !337, line: 233, baseType: !3595, size: 64, offset: 448)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !3596, file: !337, line: 238, baseType: !3856, size: 64, offset: 512)
!3856 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !3857)
!3857 = !{!3858, !3864}
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3856, file: !337, line: 236, baseType: !3859, size: 64)
!3859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3860, size: 64)
!3860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !3861)
!3861 = !{!3862, !3863}
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3860, file: !337, line: 275, baseType: !3621, size: 64)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3860, file: !337, line: 278, baseType: !3621, size: 64, offset: 64)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3856, file: !337, line: 237, baseType: !3865, size: 64)
!3865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3866, size: 64)
!3866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !3867)
!3867 = !{!3868, !3869, !3870, !3871, !3872}
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3866, file: !337, line: 261, baseType: !3479, size: 64)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3866, file: !337, line: 262, baseType: !3479, size: 64, offset: 64)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3866, file: !337, line: 266, baseType: !3479, size: 64, offset: 128)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3866, file: !337, line: 267, baseType: !3479, size: 64, offset: 192)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3866, file: !337, line: 270, baseType: !1445, size: 32, offset: 256)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3596, file: !337, line: 241, baseType: !3843, size: 64, offset: 576)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3596, file: !337, line: 244, baseType: !1445, size: 32, offset: 640)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !3596, file: !337, line: 247, baseType: !1445, size: 32, offset: 672)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3596, file: !337, line: 250, baseType: !1445, size: 32, offset: 704)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !3596, file: !337, line: 253, baseType: !1445, size: 32, offset: 736)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3596, file: !337, line: 256, baseType: !1445, size: 32, offset: 768)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !3499, file: !411, line: 179, baseType: !3880, size: 64)
!3880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3881, size: 64)
!3881 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !411, line: 150, baseType: !3882)
!3882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !411, line: 142, size: 320, elements: !3883)
!3883 = !{!3884, !3885, !3886, !3887, !3890, !3891}
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3882, file: !411, line: 144, baseType: !3344, size: 64)
!3885 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3882, file: !411, line: 145, baseType: !3479, size: 64, offset: 64)
!3886 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3882, file: !411, line: 146, baseType: !3479, size: 64, offset: 128)
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3882, file: !411, line: 147, baseType: !3888, size: 32, offset: 192)
!3888 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3889, line: 31, baseType: !1445)
!3889 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3882, file: !411, line: 148, baseType: !7, size: 32, offset: 224)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3882, file: !411, line: 149, baseType: !3421, size: 8, offset: 256)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !3499, file: !411, line: 180, baseType: !3893, size: 64)
!3893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3894, size: 64)
!3894 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !411, line: 162, baseType: !3895)
!3895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !411, line: 159, size: 128, elements: !3896)
!3896 = !{!3897, !3898}
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3895, file: !411, line: 160, baseType: !3344, size: 64)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3895, file: !411, line: 161, baseType: !3359, size: 64, offset: 64)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !3499, file: !411, line: 181, baseType: !3900, size: 64)
!3900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3901, size: 64)
!3901 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !411, line: 181, flags: DIFlagFwdDecl)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !3494, file: !411, line: 317, baseType: !3903, size: 64)
!3903 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3359, size: 64, elements: !3402)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !3494, file: !411, line: 318, baseType: !3905, size: 320)
!3905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !411, line: 188, size: 320, elements: !3906)
!3906 = !{!3907, !3909, !3966}
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3905, file: !411, line: 190, baseType: !3908, size: 192)
!3908 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3498, size: 192, elements: !3376)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3905, file: !411, line: 193, baseType: !3910, size: 64, offset: 192)
!3910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3911, size: 64)
!3911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !411, line: 206, size: 320, elements: !3912)
!3912 = !{!3913, !3951, !3952, !3953, !3965}
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3911, file: !411, line: 208, baseType: !3914, size: 64)
!3914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3915, size: 64)
!3915 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !3345, line: 62, baseType: !3916)
!3916 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !3917, line: 538, size: 256, elements: !3918)
!3917 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3918 = !{!3919, !3923, !3929, !3942}
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3916, file: !3917, line: 539, baseType: !3920, size: 32)
!3920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !3917, line: 482, size: 32, elements: !3921)
!3921 = !{!3922}
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3920, file: !3917, line: 484, baseType: !7, size: 32)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !3916, file: !3917, line: 540, baseType: !3924, size: 192)
!3924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !3917, line: 488, size: 192, elements: !3925)
!3925 = !{!3926, !3927, !3928}
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3924, file: !3917, line: 489, baseType: !3920, size: 32)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3924, file: !3917, line: 492, baseType: !3504, size: 64, offset: 64)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3924, file: !3917, line: 496, baseType: !3344, size: 64, offset: 128)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !3916, file: !3917, line: 541, baseType: !3930, size: 256)
!3930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !3917, line: 504, size: 256, elements: !3931)
!3931 = !{!3932, !3933, !3940, !3941}
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3930, file: !3917, line: 505, baseType: !3920, size: 32)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3930, file: !3917, line: 509, baseType: !3934, size: 64, offset: 64)
!3934 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !3917, line: 501, baseType: !3935)
!3935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3936, size: 64)
!3936 = !DISubroutineType(types: !3937)
!3937 = !{null, !3938}
!3938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3939, size: 64)
!3939 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3930, file: !3917, line: 510, baseType: !3938, size: 64, offset: 128)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3930, file: !3917, line: 513, baseType: !3914, size: 64, offset: 192)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !3916, file: !3917, line: 542, baseType: !3943, size: 128)
!3943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !3917, line: 530, size: 128, elements: !3944)
!3944 = !{!3945, !3946}
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3943, file: !3917, line: 531, baseType: !3920, size: 32)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3943, file: !3917, line: 534, baseType: !3947, size: 64, offset: 64)
!3947 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !3917, line: 525, baseType: !3948)
!3948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3949, size: 64)
!3949 = !DISubroutineType(types: !3950)
!3950 = !{!3421, !3344, !3504, !3357, !3357}
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3911, file: !411, line: 211, baseType: !7, size: 32, offset: 64)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3911, file: !411, line: 214, baseType: !3359, size: 64, offset: 128)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3911, file: !411, line: 224, baseType: !3954, size: 64, offset: 192)
!3954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3955, size: 64)
!3955 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !411, line: 202, baseType: !3956)
!3956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !411, line: 202, size: 128, elements: !3957)
!3957 = !{!3958}
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3956, file: !411, line: 202, baseType: !3959, size: 128)
!3959 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !411, line: 200, baseType: !3960)
!3960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !411, line: 200, size: 128, elements: !3961)
!3961 = !{!3962, !3963, !3964}
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3960, file: !411, line: 200, baseType: !7, size: 32)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3960, file: !411, line: 200, baseType: !7, size: 32, offset: 32)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3960, file: !411, line: 200, baseType: !3514, size: 64, offset: 64)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3911, file: !411, line: 234, baseType: !3954, size: 64, offset: 256)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3905, file: !411, line: 197, baseType: !3359, size: 64, offset: 256)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !3494, file: !411, line: 319, baseType: !3366, size: 256)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !3494, file: !411, line: 320, baseType: !3384, size: 192)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !3304, file: !135, line: 3384, baseType: !3970, size: 1472)
!3970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !3971)
!3971 = !{!3972, !3993, !3994, !3995, !3996}
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3970, file: !135, line: 3115, baseType: !3973, size: 1216)
!3973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !3974)
!3974 = !{!3975, !3976, !3977, !3978, !3979, !3980, !3981, !3982, !3983, !3984, !3985, !3986, !3987, !3988, !3989, !3990, !3991, !3992}
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3973, file: !135, line: 2985, baseType: !3475, size: 960)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3973, file: !135, line: 2986, baseType: !3344, size: 64, offset: 960)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3973, file: !135, line: 2987, baseType: !3344, size: 64, offset: 1024)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3973, file: !135, line: 2988, baseType: !3344, size: 64, offset: 1088)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3973, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3973, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3973, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3973, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3973, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3973, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3973, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3973, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3973, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3973, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3973, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3973, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3973, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3973, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3970, file: !135, line: 3117, baseType: !3344, size: 64, offset: 1216)
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3970, file: !135, line: 3119, baseType: !3344, size: 64, offset: 1280)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3970, file: !135, line: 3121, baseType: !3344, size: 64, offset: 1344)
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3970, file: !135, line: 3123, baseType: !3344, size: 64, offset: 1408)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !3304, file: !135, line: 3385, baseType: !3998, size: 1088)
!3998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !3999)
!3999 = !{!4000, !4001, !4002}
!4000 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3998, file: !135, line: 2875, baseType: !3475, size: 960)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3998, file: !135, line: 2876, baseType: !3479, size: 64, offset: 960)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3998, file: !135, line: 2877, baseType: !4003, size: 64, offset: 1024)
!4003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4004, size: 64)
!4004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !4005, line: 172, size: 128, elements: !4006)
!4005 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4006 = !{!4007, !4008, !4009, !4010, !4011, !4012, !4013}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !4004, file: !4005, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !4004, file: !4005, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !4004, file: !4005, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !4004, file: !4005, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !4004, file: !4005, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !4004, file: !4005, line: 195, baseType: !7, size: 32, offset: 32)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !4004, file: !4005, line: 199, baseType: !3344, size: 64, offset: 64)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !3304, file: !135, line: 3386, baseType: !3973, size: 1216)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !3304, file: !135, line: 3387, baseType: !4016, size: 1280)
!4016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !4017)
!4017 = !{!4018, !4019}
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4016, file: !135, line: 3094, baseType: !3973, size: 1216)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !4016, file: !135, line: 3095, baseType: !4003, size: 64, offset: 1216)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !3304, file: !135, line: 3388, baseType: !4021, size: 1216)
!4021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !4022)
!4022 = !{!4023, !4024, !4025, !4026, !4027, !4028}
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4021, file: !135, line: 2825, baseType: !3437, size: 896)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4021, file: !135, line: 2827, baseType: !3344, size: 64, offset: 896)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !4021, file: !135, line: 2828, baseType: !3344, size: 64, offset: 960)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !4021, file: !135, line: 2829, baseType: !3344, size: 64, offset: 1024)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !4021, file: !135, line: 2830, baseType: !3344, size: 64, offset: 1088)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !4021, file: !135, line: 2831, baseType: !3344, size: 64, offset: 1152)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !3304, file: !135, line: 3389, baseType: !4030, size: 1024)
!4030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !4031)
!4031 = !{!4032, !4033, !4034}
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4030, file: !135, line: 2851, baseType: !3475, size: 960)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !4030, file: !135, line: 2852, baseType: !1445, size: 32, offset: 960)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !4030, file: !135, line: 2853, baseType: !1445, size: 32, offset: 992)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !3304, file: !135, line: 3390, baseType: !4036, size: 1024)
!4036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !4037)
!4037 = !{!4038, !4039}
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4036, file: !135, line: 2858, baseType: !3475, size: 960)
!4039 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !4036, file: !135, line: 2859, baseType: !4003, size: 64, offset: 960)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !3304, file: !135, line: 3391, baseType: !4041, size: 960)
!4041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !4042)
!4042 = !{!4043}
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4041, file: !135, line: 2863, baseType: !3475, size: 960)
!4044 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !3304, file: !135, line: 3392, baseType: !4045, size: 1472)
!4045 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !4046)
!4046 = !{!4047}
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4045, file: !135, line: 3305, baseType: !3970, size: 1472)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !3304, file: !135, line: 3393, baseType: !4049, size: 1792)
!4049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !4050)
!4050 = !{!4051, !4052, !4362, !4363, !4364, !4365, !4366, !4367, !4368, !4369, !4370, !4371, !4372, !4373, !4374, !4375, !4376, !4377, !4378, !4379, !4380, !4381, !4382}
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4049, file: !135, line: 3249, baseType: !3970, size: 1472)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !4049, file: !135, line: 3251, baseType: !4053, size: 64, offset: 1472)
!4053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4054, size: 64)
!4054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !4055, line: 463, size: 1152, elements: !4056)
!4055 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4056 = !{!4057, !4216, !4247, !4248, !4303, !4306, !4307, !4308, !4309, !4310, !4311, !4335, !4338, !4339, !4340, !4341, !4342, !4343, !4344, !4345, !4346, !4347, !4348, !4349, !4350, !4351, !4352, !4353, !4354, !4355, !4356, !4357, !4358, !4359, !4360, !4361}
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !4054, file: !4055, line: 464, baseType: !4058, size: 64)
!4058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4059, size: 64)
!4059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !4060)
!4060 = !{!4061, !4110, !4123, !4137, !4185, !4197}
!4061 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !4059, file: !330, line: 197, baseType: !4062, size: 64)
!4062 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !4063)
!4063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4064, size: 64)
!4064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !4065)
!4065 = !{!4066, !4067, !4068, !4069, !4070, !4071, !4098, !4107, !4108, !4109}
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !4064, file: !330, line: 119, baseType: !4063, size: 64)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !4064, file: !330, line: 122, baseType: !4063, size: 64, offset: 64)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !4064, file: !330, line: 123, baseType: !4063, size: 64, offset: 128)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4064, file: !330, line: 126, baseType: !1445, size: 32, offset: 192)
!4070 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4064, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!4071 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !4064, file: !330, line: 165, baseType: !4072, size: 192, offset: 256)
!4072 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !4073)
!4073 = !{!4074, !4087, !4093}
!4074 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !4072, file: !330, line: 137, baseType: !4075, size: 128)
!4075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !4076)
!4076 = !{!4077, !4086}
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !4075, file: !330, line: 135, baseType: !4078, size: 64)
!4078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4079, size: 64)
!4079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !4080)
!4080 = !{!4081, !4082, !4083, !4084, !4085}
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !4079, file: !330, line: 96, baseType: !4078, size: 64)
!4082 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !4079, file: !330, line: 97, baseType: !4078, size: 64, offset: 64)
!4083 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !4079, file: !330, line: 101, baseType: !3344, size: 64, offset: 128)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !4079, file: !330, line: 106, baseType: !3344, size: 64, offset: 192)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !4079, file: !330, line: 111, baseType: !3344, size: 64, offset: 256)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !4075, file: !330, line: 136, baseType: !4078, size: 64, offset: 64)
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !4072, file: !330, line: 151, baseType: !4088, size: 192)
!4088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !4089)
!4089 = !{!4090, !4091, !4092}
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !4088, file: !330, line: 141, baseType: !3344, size: 64)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !4088, file: !330, line: 145, baseType: !3344, size: 64, offset: 64)
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !4088, file: !330, line: 150, baseType: !1445, size: 32, offset: 128)
!4093 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !4072, file: !330, line: 164, baseType: !4094, size: 128)
!4094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !4095)
!4095 = !{!4096, !4097}
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !4094, file: !330, line: 161, baseType: !3344, size: 64)
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !4094, file: !330, line: 163, baseType: !3429, size: 32, offset: 64)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !4064, file: !330, line: 168, baseType: !4099, size: 64, offset: 448)
!4099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4100, size: 64)
!4100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !4101)
!4101 = !{!4102, !4103, !4104, !4105, !4106}
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !4100, file: !330, line: 70, baseType: !4099, size: 64)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !4100, file: !330, line: 73, baseType: !4063, size: 64, offset: 64)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !4100, file: !330, line: 78, baseType: !3344, size: 64, offset: 128)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !4100, file: !330, line: 85, baseType: !3479, size: 64, offset: 192)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4100, file: !330, line: 88, baseType: !1445, size: 32, offset: 256)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !4064, file: !330, line: 173, baseType: !3479, size: 64, offset: 512)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !4064, file: !330, line: 173, baseType: !3479, size: 64, offset: 576)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !4064, file: !330, line: 177, baseType: !3421, size: 8, offset: 640)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !4059, file: !330, line: 200, baseType: !4111, size: 64, offset: 64)
!4111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4112, size: 64)
!4112 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !4113)
!4113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !4114)
!4114 = !{!4115}
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4113, file: !330, line: 185, baseType: !4116, size: 128)
!4116 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !4117)
!4117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !4118)
!4118 = !{!4119, !4120, !4121}
!4119 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4117, file: !330, line: 184, baseType: !7, size: 32)
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4117, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4117, file: !330, line: 184, baseType: !4122, size: 64, offset: 64)
!4122 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4062, size: 64, elements: !3402)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !4059, file: !330, line: 203, baseType: !4124, size: 64, offset: 128)
!4124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4125, size: 64)
!4125 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !4126)
!4126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !4127)
!4127 = !{!4128}
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4126, file: !330, line: 189, baseType: !4129, size: 128)
!4129 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !4130)
!4130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !4131)
!4131 = !{!4132, !4133, !4134}
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4130, file: !330, line: 188, baseType: !7, size: 32)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4130, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4130, file: !330, line: 188, baseType: !4135, size: 64, offset: 64)
!4135 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4136, size: 64, elements: !3402)
!4136 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !4099)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !4059, file: !330, line: 207, baseType: !4138, size: 64, offset: 192)
!4138 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !4139, line: 144, baseType: !4140)
!4139 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4141, size: 64)
!4141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !4139, line: 100, size: 896, elements: !4142)
!4142 = !{!4143, !4149, !4154, !4159, !4161, !4162, !4163, !4164, !4165, !4166, !4171, !4173, !4174, !4179, !4184}
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !4141, file: !4139, line: 102, baseType: !4144, size: 64)
!4144 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !4139, line: 52, baseType: !4145)
!4145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4146, size: 64)
!4146 = !DISubroutineType(types: !4147)
!4147 = !{!4148, !3938}
!4148 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !4139, line: 47, baseType: !7)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !4141, file: !4139, line: 105, baseType: !4150, size: 64, offset: 64)
!4150 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !4139, line: 59, baseType: !4151)
!4151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4152, size: 64)
!4152 = !DISubroutineType(types: !4153)
!4153 = !{!1445, !3938, !3938}
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !4141, file: !4139, line: 108, baseType: !4155, size: 64, offset: 128)
!4155 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !4139, line: 63, baseType: !4156)
!4156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4157, size: 64)
!4157 = !DISubroutineType(types: !4158)
!4158 = !{null, !3584}
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !4141, file: !4139, line: 111, baseType: !4160, size: 64, offset: 192)
!4160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3584, size: 64)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4141, file: !4139, line: 114, baseType: !3777, size: 64, offset: 256)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !4141, file: !4139, line: 117, baseType: !3777, size: 64, offset: 320)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !4141, file: !4139, line: 120, baseType: !3777, size: 64, offset: 384)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !4141, file: !4139, line: 124, baseType: !7, size: 32, offset: 448)
!4165 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !4141, file: !4139, line: 128, baseType: !7, size: 32, offset: 480)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !4141, file: !4139, line: 131, baseType: !4167, size: 64, offset: 512)
!4167 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !4139, line: 75, baseType: !4168)
!4168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4169, size: 64)
!4169 = !DISubroutineType(types: !4170)
!4170 = !{!3584, !3777, !3777}
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !4141, file: !4139, line: 132, baseType: !4172, size: 64, offset: 576)
!4172 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !4139, line: 78, baseType: !4156)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !4141, file: !4139, line: 135, baseType: !3584, size: 64, offset: 640)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !4141, file: !4139, line: 136, baseType: !4175, size: 64, offset: 704)
!4175 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !4139, line: 82, baseType: !4176)
!4176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4177, size: 64)
!4177 = !DISubroutineType(types: !4178)
!4178 = !{!3584, !3584, !3777, !3777}
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !4141, file: !4139, line: 137, baseType: !4180, size: 64, offset: 768)
!4180 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !4139, line: 83, baseType: !4181)
!4181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4182, size: 64)
!4182 = !DISubroutineType(types: !4183)
!4183 = !{null, !3584, !3584}
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !4141, file: !4139, line: 141, baseType: !7, size: 32, offset: 832)
!4185 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !4059, file: !330, line: 211, baseType: !4186, size: 64, offset: 256)
!4186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4187, size: 64)
!4187 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !4188)
!4188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !4189)
!4189 = !{!4190}
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4188, file: !135, line: 183, baseType: !4191, size: 128)
!4191 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !4192)
!4192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !4193)
!4193 = !{!4194, !4195, !4196}
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4192, file: !135, line: 182, baseType: !7, size: 32)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4192, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4192, file: !135, line: 182, baseType: !3685, size: 64, offset: 64)
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !4059, file: !330, line: 220, baseType: !4198, size: 64, offset: 320)
!4198 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !4199)
!4199 = !{!4200, !4201}
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !4198, file: !330, line: 218, baseType: !4186, size: 64)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !4198, file: !330, line: 219, baseType: !4202, size: 64)
!4202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4203, size: 64)
!4203 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !4204, line: 29, baseType: !4205)
!4204 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !4204, line: 29, size: 96, elements: !4206)
!4206 = !{!4207}
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4205, file: !4204, line: 29, baseType: !4208, size: 96)
!4208 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !4204, line: 27, baseType: !4209)
!4209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !4204, line: 27, size: 96, elements: !4210)
!4210 = !{!4211, !4212, !4213}
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4209, file: !4204, line: 27, baseType: !7, size: 32)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4209, file: !4204, line: 27, baseType: !7, size: 32, offset: 32)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4209, file: !4204, line: 27, baseType: !4214, size: 8, offset: 64)
!4214 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4215, size: 8, elements: !3402)
!4215 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !4204, line: 26, baseType: !3421)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !4054, file: !4055, line: 467, baseType: !4217, size: 64, offset: 64)
!4217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4218, size: 64)
!4218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !4219)
!4219 = !{!4220, !4222, !4223, !4236, !4237, !4238, !4239, !4240, !4241, !4243, !4245, !4246}
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !4218, file: !337, line: 377, baseType: !4221, size: 64)
!4221 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !3345, line: 111, baseType: !3595)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !4218, file: !337, line: 378, baseType: !4221, size: 64, offset: 64)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !4218, file: !337, line: 381, baseType: !4224, size: 64, offset: 128)
!4224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4225, size: 64)
!4225 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !4226)
!4226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !4227)
!4227 = !{!4228}
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4226, file: !337, line: 282, baseType: !4229, size: 128)
!4229 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !4230)
!4230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !4231)
!4231 = !{!4232, !4233, !4234}
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4230, file: !337, line: 281, baseType: !7, size: 32)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4230, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4230, file: !337, line: 281, baseType: !4235, size: 64, offset: 64)
!4235 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4221, size: 64, elements: !3402)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !4218, file: !337, line: 384, baseType: !1445, size: 32, offset: 192)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !4218, file: !337, line: 387, baseType: !1445, size: 32, offset: 224)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !4218, file: !337, line: 390, baseType: !1445, size: 32, offset: 256)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !4218, file: !337, line: 394, baseType: !4224, size: 64, offset: 320)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !4218, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !4218, file: !337, line: 399, baseType: !4242, size: 64, offset: 416)
!4242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !3548)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !4218, file: !337, line: 402, baseType: !4244, size: 64, offset: 480)
!4244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !3548)
!4245 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !4218, file: !337, line: 406, baseType: !1445, size: 32, offset: 544)
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !4218, file: !337, line: 409, baseType: !1445, size: 32, offset: 576)
!4247 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !4054, file: !4055, line: 470, baseType: !3622, size: 64, offset: 128)
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !4054, file: !4055, line: 473, baseType: !4249, size: 64, offset: 192)
!4249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4250, size: 64)
!4250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !4005, line: 39, size: 1152, elements: !4251)
!4251 = !{!4252, !4253, !4266, !4267, !4268, !4280, !4281, !4285, !4286, !4287, !4288, !4289}
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !4250, file: !4005, line: 41, baseType: !4138, size: 64)
!4253 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !4250, file: !4005, line: 48, baseType: !4254, size: 64, offset: 64)
!4254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4255, size: 64)
!4255 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1437, line: 35, baseType: !4256)
!4256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1437, line: 35, size: 128, elements: !4257)
!4257 = !{!4258}
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4256, file: !1437, line: 35, baseType: !4259, size: 128)
!4259 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1437, line: 33, baseType: !4260)
!4260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1437, line: 33, size: 128, elements: !4261)
!4261 = !{!4262, !4263, !4264}
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4260, file: !1437, line: 33, baseType: !7, size: 32)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4260, file: !1437, line: 33, baseType: !7, size: 32, offset: 32)
!4264 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4260, file: !1437, line: 33, baseType: !4265, size: 64, offset: 64)
!4265 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3631, size: 64, elements: !3402)
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !4250, file: !4005, line: 51, baseType: !4186, size: 64, offset: 128)
!4267 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !4250, file: !4005, line: 54, baseType: !3344, size: 64, offset: 192)
!4268 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !4250, file: !4005, line: 57, baseType: !4269, size: 128, offset: 256)
!4269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !4270, line: 31, size: 128, elements: !4271)
!4270 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4271 = !{!4272, !4273, !4274, !4275, !4276, !4277, !4278}
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !4269, file: !4270, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !4269, file: !4270, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!4274 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !4269, file: !4270, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!4275 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !4269, file: !4270, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!4276 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !4269, file: !4270, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!4277 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !4269, file: !4270, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !4269, file: !4270, line: 56, baseType: !4279, size: 64, offset: 64)
!4279 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !3345, line: 47, baseType: !3532)
!4280 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !4250, file: !4005, line: 60, baseType: !4269, size: 128, offset: 384)
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !4250, file: !4005, line: 64, baseType: !4282, size: 64, offset: 512)
!4282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4283, size: 64)
!4283 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !4284, line: 33, flags: DIFlagFwdDecl)
!4284 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !4250, file: !4005, line: 67, baseType: !3344, size: 64, offset: 576)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !4250, file: !4005, line: 73, baseType: !4138, size: 64, offset: 640)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !4250, file: !4005, line: 77, baseType: !4279, size: 64, offset: 704)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !4250, file: !4005, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !4250, file: !4005, line: 82, baseType: !4290, size: 320, offset: 832)
!4290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !3662, line: 62, size: 320, elements: !4291)
!4291 = !{!4292, !4298, !4299, !4300, !4301, !4302}
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !4290, file: !3662, line: 63, baseType: !4293, size: 64)
!4293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4294, size: 64)
!4294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !3662, line: 56, size: 128, elements: !4295)
!4295 = !{!4296, !4297}
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4294, file: !3662, line: 57, baseType: !4293, size: 64)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !4294, file: !3662, line: 58, baseType: !3400, size: 8, offset: 64)
!4298 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !4290, file: !3662, line: 64, baseType: !7, size: 32, offset: 64)
!4299 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !4290, file: !3662, line: 66, baseType: !7, size: 32, offset: 96)
!4300 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !4290, file: !3662, line: 68, baseType: !3421, size: 8, offset: 128)
!4301 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !4290, file: !3662, line: 70, baseType: !3660, size: 64, offset: 192)
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !4290, file: !3662, line: 71, baseType: !3668, size: 64, offset: 256)
!4303 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !4054, file: !4055, line: 476, baseType: !4304, size: 64, offset: 256)
!4304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4305, size: 64)
!4305 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !4055, line: 476, flags: DIFlagFwdDecl)
!4306 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !4054, file: !4055, line: 479, baseType: !4138, size: 64, offset: 320)
!4307 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4054, file: !4055, line: 484, baseType: !3344, size: 64, offset: 384)
!4308 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !4054, file: !4055, line: 488, baseType: !3344, size: 64, offset: 448)
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !4054, file: !4055, line: 493, baseType: !3344, size: 64, offset: 512)
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !4054, file: !4055, line: 496, baseType: !3344, size: 64, offset: 576)
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !4054, file: !4055, line: 501, baseType: !4312, size: 64, offset: 640)
!4312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4313, size: 64)
!4313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !4314)
!4314 = !{!4315, !4318, !4319, !4320, !4321, !4323, !4324, !4329, !4330, !4331, !4332, !4333, !4334}
!4315 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !4313, file: !348, line: 2356, baseType: !4316, size: 64)
!4316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4317, size: 64)
!4317 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !4313, file: !348, line: 2357, baseType: !3504, size: 64, offset: 64)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !4313, file: !348, line: 2358, baseType: !1445, size: 32, offset: 128)
!4320 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !4313, file: !348, line: 2359, baseType: !1445, size: 32, offset: 160)
!4321 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !4313, file: !348, line: 2360, baseType: !4322, size: 128, offset: 192)
!4322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1445, size: 128, elements: !3573)
!4323 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !4313, file: !348, line: 2364, baseType: !1445, size: 32, offset: 320)
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !4313, file: !348, line: 2367, baseType: !4325, size: 128, offset: 384)
!4325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !4326)
!4326 = !{!4327, !4328}
!4327 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !4325, file: !348, line: 2351, baseType: !3479, size: 64)
!4328 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4325, file: !348, line: 2352, baseType: !3359, size: 64, offset: 64)
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !4313, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !4313, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !4313, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !4313, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !4313, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !4313, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !4054, file: !4055, line: 504, baseType: !4336, size: 64, offset: 704)
!4336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4337, size: 64)
!4337 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !4055, line: 504, flags: DIFlagFwdDecl)
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !4054, file: !4055, line: 507, baseType: !4138, size: 64, offset: 768)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !4054, file: !4055, line: 510, baseType: !1445, size: 32, offset: 832)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !4054, file: !4055, line: 513, baseType: !1445, size: 32, offset: 864)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !4054, file: !4055, line: 516, baseType: !3429, size: 32, offset: 896)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !4054, file: !4055, line: 519, baseType: !3429, size: 32, offset: 928)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !4054, file: !4055, line: 522, baseType: !7, size: 32, offset: 960)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !4054, file: !4055, line: 523, baseType: !7, size: 32, offset: 992)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !4054, file: !4055, line: 528, baseType: !3504, size: 64, offset: 1024)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !4054, file: !4055, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!4347 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !4054, file: !4055, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !4054, file: !4055, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !4054, file: !4055, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !4054, file: !4055, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!4351 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !4054, file: !4055, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!4352 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !4054, file: !4055, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !4054, file: !4055, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !4054, file: !4055, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !4054, file: !4055, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !4054, file: !4055, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !4054, file: !4055, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!4358 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !4054, file: !4055, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !4054, file: !4055, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !4054, file: !4055, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !4054, file: !4055, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!4362 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !4049, file: !135, line: 3254, baseType: !3344, size: 64, offset: 1536)
!4363 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !4049, file: !135, line: 3257, baseType: !3344, size: 64, offset: 1600)
!4364 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !4049, file: !135, line: 3258, baseType: !3344, size: 64, offset: 1664)
!4365 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !4049, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!4366 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !4049, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!4367 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !4049, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!4368 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !4049, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!4369 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !4049, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !4049, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!4371 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !4049, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!4372 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !4049, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!4373 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !4049, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!4374 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !4049, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!4375 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !4049, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !4049, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!4377 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !4049, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!4378 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !4049, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!4379 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !4049, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!4380 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !4049, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!4381 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !4049, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!4382 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !4049, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!4383 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3304, file: !135, line: 3394, baseType: !4384, size: 1344)
!4384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !4385)
!4385 = !{!4386, !4387, !4388, !4389, !4390, !4391, !4392, !4393, !4394, !4395, !4396, !4397, !4398, !4399, !4400, !4401, !4402, !4403, !4404, !4405, !4406, !4407, !4408, !4409, !4410, !4411, !4419, !4420, !4421, !4422, !4423, !4424, !4425, !4426, !4427}
!4386 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4384, file: !135, line: 2280, baseType: !3340, size: 192)
!4387 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !4384, file: !135, line: 2281, baseType: !3344, size: 64, offset: 192)
!4388 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4384, file: !135, line: 2282, baseType: !3344, size: 64, offset: 256)
!4389 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !4384, file: !135, line: 2283, baseType: !3344, size: 64, offset: 320)
!4390 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !4384, file: !135, line: 2284, baseType: !3344, size: 64, offset: 384)
!4391 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !4384, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!4392 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !4384, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!4393 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !4384, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!4394 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !4384, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!4395 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !4384, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!4396 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !4384, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!4397 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !4384, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !4384, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!4399 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !4384, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!4400 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !4384, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!4401 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !4384, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!4402 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !4384, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!4403 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !4384, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!4404 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !4384, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!4405 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !4384, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!4406 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !4384, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!4407 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !4384, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!4408 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !4384, file: !135, line: 2306, baseType: !3888, size: 32, offset: 544)
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !4384, file: !135, line: 2307, baseType: !3344, size: 64, offset: 576)
!4410 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !4384, file: !135, line: 2308, baseType: !3344, size: 64, offset: 640)
!4411 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !4384, file: !135, line: 2314, baseType: !4412, size: 64, offset: 704)
!4412 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !4413)
!4413 = !{!4414, !4415, !4416}
!4414 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !4412, file: !135, line: 2310, baseType: !1445, size: 32)
!4415 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !4412, file: !135, line: 2311, baseType: !3504, size: 64)
!4416 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !4412, file: !135, line: 2312, baseType: !4417, size: 64)
!4417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4418, size: 64)
!4418 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!4419 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4384, file: !135, line: 2315, baseType: !3344, size: 64, offset: 768)
!4420 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !4384, file: !135, line: 2316, baseType: !3344, size: 64, offset: 832)
!4421 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !4384, file: !135, line: 2317, baseType: !3344, size: 64, offset: 896)
!4422 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !4384, file: !135, line: 2318, baseType: !3344, size: 64, offset: 960)
!4423 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !4384, file: !135, line: 2319, baseType: !3344, size: 64, offset: 1024)
!4424 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !4384, file: !135, line: 2320, baseType: !3344, size: 64, offset: 1088)
!4425 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !4384, file: !135, line: 2321, baseType: !3344, size: 64, offset: 1152)
!4426 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !4384, file: !135, line: 2322, baseType: !3344, size: 64, offset: 1216)
!4427 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !4384, file: !135, line: 2324, baseType: !4428, size: 64, offset: 1280)
!4428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4429, size: 64)
!4429 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!4430 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3304, file: !135, line: 3395, baseType: !4431, size: 320)
!4431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !4432)
!4432 = !{!4433, !4434, !4435}
!4433 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4431, file: !135, line: 1470, baseType: !3340, size: 192)
!4434 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !4431, file: !135, line: 1471, baseType: !3344, size: 64, offset: 192)
!4435 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !4431, file: !135, line: 1472, baseType: !3344, size: 64, offset: 256)
!4436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3304, file: !135, line: 3396, baseType: !4437, size: 320)
!4437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !4438)
!4438 = !{!4439, !4440, !4441}
!4439 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4437, file: !135, line: 1483, baseType: !3340, size: 192)
!4440 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !4437, file: !135, line: 1484, baseType: !1445, size: 32, offset: 192)
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4437, file: !135, line: 1485, baseType: !3685, size: 64, offset: 256)
!4442 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !3304, file: !135, line: 3397, baseType: !4443, size: 384)
!4443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !4444)
!4444 = !{!4445, !4446, !4447, !4448}
!4445 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4443, file: !135, line: 1830, baseType: !3340, size: 192)
!4446 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4443, file: !135, line: 1831, baseType: !3429, size: 32, offset: 192)
!4447 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !4443, file: !135, line: 1832, baseType: !3344, size: 64, offset: 256)
!4448 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !4443, file: !135, line: 1835, baseType: !3685, size: 64, offset: 320)
!4449 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3304, file: !135, line: 3398, baseType: !4450, size: 704)
!4450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !4451)
!4451 = !{!4452, !4453, !4454, !4455, !4456, !4461}
!4452 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4450, file: !135, line: 1899, baseType: !3340, size: 192)
!4453 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !4450, file: !135, line: 1902, baseType: !3344, size: 64, offset: 192)
!4454 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !4450, file: !135, line: 1905, baseType: !3631, size: 64, offset: 256)
!4455 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !4450, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!4456 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !4450, file: !135, line: 1911, baseType: !4457, size: 64, offset: 384)
!4457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4458, size: 64)
!4458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !4005, line: 117, size: 128, elements: !4459)
!4459 = !{!4460}
!4460 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !4458, file: !4005, line: 120, baseType: !4269, size: 128)
!4461 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !4450, file: !135, line: 1914, baseType: !3673, size: 256, offset: 448)
!4462 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3304, file: !135, line: 3399, baseType: !4463, size: 704)
!4463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !4464)
!4464 = !{!4465, !4466, !4467, !4468, !4469, !4470, !4471, !4472, !4473, !4474, !4475}
!4465 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4463, file: !135, line: 2009, baseType: !3340, size: 192)
!4466 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !4463, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!4467 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !4463, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!4468 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4463, file: !135, line: 2014, baseType: !3429, size: 32, offset: 224)
!4469 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !4463, file: !135, line: 2016, baseType: !3344, size: 64, offset: 256)
!4470 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !4463, file: !135, line: 2017, baseType: !4186, size: 64, offset: 320)
!4471 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !4463, file: !135, line: 2019, baseType: !3344, size: 64, offset: 384)
!4472 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !4463, file: !135, line: 2020, baseType: !3344, size: 64, offset: 448)
!4473 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !4463, file: !135, line: 2021, baseType: !3344, size: 64, offset: 512)
!4474 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !4463, file: !135, line: 2022, baseType: !3344, size: 64, offset: 576)
!4475 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !4463, file: !135, line: 2023, baseType: !3344, size: 64, offset: 640)
!4476 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3304, file: !135, line: 3400, baseType: !4477, size: 832)
!4477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !4478)
!4478 = !{!4479, !4480, !4481, !4482, !4483, !4484, !4485, !4486, !4487, !4488}
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4477, file: !135, line: 2431, baseType: !3340, size: 192)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4477, file: !135, line: 2433, baseType: !3344, size: 64, offset: 192)
!4481 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !4477, file: !135, line: 2434, baseType: !3344, size: 64, offset: 256)
!4482 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !4477, file: !135, line: 2435, baseType: !3344, size: 64, offset: 320)
!4483 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !4477, file: !135, line: 2436, baseType: !3344, size: 64, offset: 384)
!4484 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !4477, file: !135, line: 2437, baseType: !4186, size: 64, offset: 448)
!4485 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !4477, file: !135, line: 2438, baseType: !3344, size: 64, offset: 512)
!4486 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !4477, file: !135, line: 2440, baseType: !3344, size: 64, offset: 576)
!4487 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !4477, file: !135, line: 2441, baseType: !3344, size: 64, offset: 640)
!4488 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !4477, file: !135, line: 2443, baseType: !4489, size: 128, offset: 704)
!4489 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !4490)
!4490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !4491)
!4491 = !{!4492}
!4492 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4490, file: !135, line: 182, baseType: !4191, size: 128)
!4493 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !3304, file: !135, line: 3401, baseType: !4494, size: 320)
!4494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !4495)
!4495 = !{!4496, !4497, !4504}
!4496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4494, file: !135, line: 3329, baseType: !3340, size: 192)
!4497 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !4494, file: !135, line: 3330, baseType: !4498, size: 64, offset: 192)
!4498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4499, size: 64)
!4499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !4500)
!4500 = !{!4501, !4502, !4503}
!4501 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !4499, file: !135, line: 3322, baseType: !4498, size: 64)
!4502 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4499, file: !135, line: 3323, baseType: !4498, size: 64, offset: 64)
!4503 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !4499, file: !135, line: 3324, baseType: !3344, size: 64, offset: 128)
!4504 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !4494, file: !135, line: 3331, baseType: !4498, size: 64, offset: 256)
!4505 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !3304, file: !135, line: 3402, baseType: !4506, size: 256)
!4506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !4507)
!4507 = !{!4508, !4509}
!4508 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4506, file: !135, line: 1541, baseType: !3340, size: 192)
!4509 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !4506, file: !135, line: 1542, baseType: !4510, size: 64, offset: 192)
!4510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4511, size: 64)
!4511 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !4512)
!4512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !4513)
!4513 = !{!4514}
!4514 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4512, file: !135, line: 1538, baseType: !4515, size: 192)
!4515 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !4516)
!4516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !4517)
!4517 = !{!4518, !4519, !4520}
!4518 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4516, file: !135, line: 1537, baseType: !7, size: 32)
!4519 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4516, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!4520 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4516, file: !135, line: 1537, baseType: !4521, size: 128, offset: 64)
!4521 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4522, size: 128, elements: !3402)
!4522 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !4523)
!4523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !4524)
!4524 = !{!4525, !4526}
!4525 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4523, file: !135, line: 1533, baseType: !3344, size: 64)
!4526 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !4523, file: !135, line: 1534, baseType: !3344, size: 64, offset: 64)
!4527 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !3304, file: !135, line: 3403, baseType: !4528, size: 512)
!4528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !4529)
!4529 = !{!4530, !4531, !4532, !4533, !4539, !4540, !4541}
!4530 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4528, file: !135, line: 1939, baseType: !3340, size: 192)
!4531 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4528, file: !135, line: 1940, baseType: !3429, size: 32, offset: 192)
!4532 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !4528, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!4533 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !4528, file: !135, line: 1946, baseType: !4534, size: 32, offset: 256)
!4534 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !4535)
!4535 = !{!4536, !4537, !4538}
!4536 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !4534, file: !135, line: 1943, baseType: !370, size: 32)
!4537 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !4534, file: !135, line: 1944, baseType: !377, size: 32)
!4538 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !4534, file: !135, line: 1945, baseType: !134, size: 32)
!4539 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !4528, file: !135, line: 1950, baseType: !3621, size: 64, offset: 320)
!4540 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !4528, file: !135, line: 1951, baseType: !3621, size: 64, offset: 384)
!4541 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4528, file: !135, line: 1953, baseType: !3685, size: 64, offset: 448)
!4542 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !3304, file: !135, line: 3404, baseType: !4543, size: 1664)
!4543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !4544)
!4544 = !{!4545, !4546}
!4545 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4543, file: !135, line: 3338, baseType: !3340, size: 192)
!4546 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4543, file: !135, line: 3341, baseType: !4547, size: 1472, offset: 192)
!4547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !4548, line: 410, size: 1472, elements: !4549)
!4548 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4549 = !{!4550, !4551, !4552, !4553, !4554, !4555, !4556, !4557, !4558, !4560, !4561, !4562, !4563, !4564, !4565, !4566, !4567, !4568, !4569, !4570, !4571, !4572, !4573, !4574, !4575, !4576, !4577, !4578, !4579, !4580, !4581, !4582, !4583, !4584, !4585, !4586, !4587, !4588, !4589, !4590, !4591, !4592, !4593, !4594, !4595, !4596, !4597, !4598, !4599, !4600, !4601, !4602, !4603, !4604, !4605, !4606, !4607, !4608, !4609, !4610, !4611, !4612, !4613, !4614, !4615, !4616, !4617, !4618, !4619, !4620, !4621, !4622, !4623, !4624, !4625, !4626, !4627, !4628, !4629, !4630, !4631, !4632, !4633, !4634, !4635, !4636, !4637, !4638, !4639, !4640, !4641, !4642, !4643, !4644, !4645, !4646, !4647, !4648, !4649, !4650, !4651, !4652, !4653, !4654, !4655, !4656, !4657, !4658, !4659, !4660, !4661, !4662, !4663, !4664, !4665, !4666, !4667, !4668, !4669, !4670, !4671, !4672, !4673, !4674, !4675, !4676, !4677, !4678, !4679, !4680, !4681, !4682, !4683, !4684, !4685, !4686, !4687, !4688, !4689, !4690, !4691, !4692, !4693, !4694, !4695, !4696, !4697, !4698, !4699, !4700, !4701, !4702, !4703, !4704, !4705, !4706, !4707, !4708, !4709, !4710, !4711, !4712, !4713}
!4550 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !4547, file: !4548, line: 412, baseType: !1445, size: 32)
!4551 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !4547, file: !4548, line: 413, baseType: !1445, size: 32, offset: 32)
!4552 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !4547, file: !4548, line: 414, baseType: !1445, size: 32, offset: 64)
!4553 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !4547, file: !4548, line: 415, baseType: !1445, size: 32, offset: 96)
!4554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !4547, file: !4548, line: 416, baseType: !1445, size: 32, offset: 128)
!4555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !4547, file: !4548, line: 417, baseType: !1445, size: 32, offset: 160)
!4556 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !4547, file: !4548, line: 418, baseType: !3421, size: 8, offset: 192)
!4557 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !4547, file: !4548, line: 419, baseType: !3421, size: 8, offset: 200)
!4558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !4547, file: !4548, line: 420, baseType: !4559, size: 8, offset: 208)
!4559 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!4560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !4547, file: !4548, line: 421, baseType: !4559, size: 8, offset: 216)
!4561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !4547, file: !4548, line: 422, baseType: !4559, size: 8, offset: 224)
!4562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !4547, file: !4548, line: 423, baseType: !4559, size: 8, offset: 232)
!4563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !4547, file: !4548, line: 424, baseType: !4559, size: 8, offset: 240)
!4564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !4547, file: !4548, line: 425, baseType: !4559, size: 8, offset: 248)
!4565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !4547, file: !4548, line: 426, baseType: !4559, size: 8, offset: 256)
!4566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !4547, file: !4548, line: 427, baseType: !4559, size: 8, offset: 264)
!4567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !4547, file: !4548, line: 428, baseType: !4559, size: 8, offset: 272)
!4568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !4547, file: !4548, line: 429, baseType: !4559, size: 8, offset: 280)
!4569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !4547, file: !4548, line: 430, baseType: !4559, size: 8, offset: 288)
!4570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !4547, file: !4548, line: 431, baseType: !4559, size: 8, offset: 296)
!4571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !4547, file: !4548, line: 432, baseType: !4559, size: 8, offset: 304)
!4572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !4547, file: !4548, line: 433, baseType: !4559, size: 8, offset: 312)
!4573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !4547, file: !4548, line: 434, baseType: !4559, size: 8, offset: 320)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !4547, file: !4548, line: 435, baseType: !4559, size: 8, offset: 328)
!4575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !4547, file: !4548, line: 436, baseType: !4559, size: 8, offset: 336)
!4576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !4547, file: !4548, line: 437, baseType: !4559, size: 8, offset: 344)
!4577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !4547, file: !4548, line: 438, baseType: !4559, size: 8, offset: 352)
!4578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !4547, file: !4548, line: 439, baseType: !4559, size: 8, offset: 360)
!4579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !4547, file: !4548, line: 440, baseType: !4559, size: 8, offset: 368)
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !4547, file: !4548, line: 441, baseType: !4559, size: 8, offset: 376)
!4581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !4547, file: !4548, line: 442, baseType: !4559, size: 8, offset: 384)
!4582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !4547, file: !4548, line: 443, baseType: !4559, size: 8, offset: 392)
!4583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !4547, file: !4548, line: 444, baseType: !4559, size: 8, offset: 400)
!4584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !4547, file: !4548, line: 445, baseType: !4559, size: 8, offset: 408)
!4585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !4547, file: !4548, line: 446, baseType: !4559, size: 8, offset: 416)
!4586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !4547, file: !4548, line: 447, baseType: !4559, size: 8, offset: 424)
!4587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !4547, file: !4548, line: 448, baseType: !4559, size: 8, offset: 432)
!4588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !4547, file: !4548, line: 449, baseType: !4559, size: 8, offset: 440)
!4589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !4547, file: !4548, line: 450, baseType: !4559, size: 8, offset: 448)
!4590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !4547, file: !4548, line: 451, baseType: !4559, size: 8, offset: 456)
!4591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !4547, file: !4548, line: 452, baseType: !4559, size: 8, offset: 464)
!4592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !4547, file: !4548, line: 453, baseType: !4559, size: 8, offset: 472)
!4593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !4547, file: !4548, line: 454, baseType: !4559, size: 8, offset: 480)
!4594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !4547, file: !4548, line: 455, baseType: !4559, size: 8, offset: 488)
!4595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !4547, file: !4548, line: 456, baseType: !4559, size: 8, offset: 496)
!4596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !4547, file: !4548, line: 457, baseType: !4559, size: 8, offset: 504)
!4597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !4547, file: !4548, line: 458, baseType: !4559, size: 8, offset: 512)
!4598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !4547, file: !4548, line: 459, baseType: !4559, size: 8, offset: 520)
!4599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !4547, file: !4548, line: 460, baseType: !4559, size: 8, offset: 528)
!4600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !4547, file: !4548, line: 461, baseType: !4559, size: 8, offset: 536)
!4601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !4547, file: !4548, line: 462, baseType: !4559, size: 8, offset: 544)
!4602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !4547, file: !4548, line: 463, baseType: !4559, size: 8, offset: 552)
!4603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !4547, file: !4548, line: 464, baseType: !4559, size: 8, offset: 560)
!4604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !4547, file: !4548, line: 465, baseType: !4559, size: 8, offset: 568)
!4605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !4547, file: !4548, line: 466, baseType: !4559, size: 8, offset: 576)
!4606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !4547, file: !4548, line: 467, baseType: !4559, size: 8, offset: 584)
!4607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !4547, file: !4548, line: 468, baseType: !4559, size: 8, offset: 592)
!4608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !4547, file: !4548, line: 469, baseType: !4559, size: 8, offset: 600)
!4609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !4547, file: !4548, line: 470, baseType: !4559, size: 8, offset: 608)
!4610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !4547, file: !4548, line: 471, baseType: !4559, size: 8, offset: 616)
!4611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !4547, file: !4548, line: 472, baseType: !4559, size: 8, offset: 624)
!4612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !4547, file: !4548, line: 473, baseType: !4559, size: 8, offset: 632)
!4613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !4547, file: !4548, line: 474, baseType: !4559, size: 8, offset: 640)
!4614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !4547, file: !4548, line: 475, baseType: !4559, size: 8, offset: 648)
!4615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !4547, file: !4548, line: 476, baseType: !4559, size: 8, offset: 656)
!4616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !4547, file: !4548, line: 477, baseType: !4559, size: 8, offset: 664)
!4617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !4547, file: !4548, line: 478, baseType: !4559, size: 8, offset: 672)
!4618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !4547, file: !4548, line: 479, baseType: !4559, size: 8, offset: 680)
!4619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !4547, file: !4548, line: 480, baseType: !4559, size: 8, offset: 688)
!4620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !4547, file: !4548, line: 481, baseType: !4559, size: 8, offset: 696)
!4621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !4547, file: !4548, line: 482, baseType: !4559, size: 8, offset: 704)
!4622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !4547, file: !4548, line: 483, baseType: !4559, size: 8, offset: 712)
!4623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !4547, file: !4548, line: 484, baseType: !4559, size: 8, offset: 720)
!4624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !4547, file: !4548, line: 485, baseType: !4559, size: 8, offset: 728)
!4625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !4547, file: !4548, line: 486, baseType: !4559, size: 8, offset: 736)
!4626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !4547, file: !4548, line: 487, baseType: !4559, size: 8, offset: 744)
!4627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !4547, file: !4548, line: 488, baseType: !4559, size: 8, offset: 752)
!4628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !4547, file: !4548, line: 489, baseType: !4559, size: 8, offset: 760)
!4629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !4547, file: !4548, line: 490, baseType: !4559, size: 8, offset: 768)
!4630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !4547, file: !4548, line: 491, baseType: !4559, size: 8, offset: 776)
!4631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !4547, file: !4548, line: 492, baseType: !4559, size: 8, offset: 784)
!4632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !4547, file: !4548, line: 493, baseType: !4559, size: 8, offset: 792)
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !4547, file: !4548, line: 494, baseType: !4559, size: 8, offset: 800)
!4634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !4547, file: !4548, line: 495, baseType: !4559, size: 8, offset: 808)
!4635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !4547, file: !4548, line: 496, baseType: !4559, size: 8, offset: 816)
!4636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !4547, file: !4548, line: 497, baseType: !4559, size: 8, offset: 824)
!4637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !4547, file: !4548, line: 498, baseType: !4559, size: 8, offset: 832)
!4638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !4547, file: !4548, line: 499, baseType: !4559, size: 8, offset: 840)
!4639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !4547, file: !4548, line: 500, baseType: !4559, size: 8, offset: 848)
!4640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !4547, file: !4548, line: 501, baseType: !4559, size: 8, offset: 856)
!4641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !4547, file: !4548, line: 502, baseType: !4559, size: 8, offset: 864)
!4642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !4547, file: !4548, line: 503, baseType: !4559, size: 8, offset: 872)
!4643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !4547, file: !4548, line: 504, baseType: !4559, size: 8, offset: 880)
!4644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !4547, file: !4548, line: 505, baseType: !4559, size: 8, offset: 888)
!4645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !4547, file: !4548, line: 506, baseType: !4559, size: 8, offset: 896)
!4646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !4547, file: !4548, line: 507, baseType: !4559, size: 8, offset: 904)
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !4547, file: !4548, line: 508, baseType: !4559, size: 8, offset: 912)
!4648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !4547, file: !4548, line: 509, baseType: !4559, size: 8, offset: 920)
!4649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !4547, file: !4548, line: 510, baseType: !4559, size: 8, offset: 928)
!4650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !4547, file: !4548, line: 511, baseType: !4559, size: 8, offset: 936)
!4651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !4547, file: !4548, line: 512, baseType: !4559, size: 8, offset: 944)
!4652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !4547, file: !4548, line: 513, baseType: !4559, size: 8, offset: 952)
!4653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !4547, file: !4548, line: 514, baseType: !4559, size: 8, offset: 960)
!4654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !4547, file: !4548, line: 515, baseType: !4559, size: 8, offset: 968)
!4655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !4547, file: !4548, line: 516, baseType: !4559, size: 8, offset: 976)
!4656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !4547, file: !4548, line: 517, baseType: !4559, size: 8, offset: 984)
!4657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !4547, file: !4548, line: 518, baseType: !4559, size: 8, offset: 992)
!4658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !4547, file: !4548, line: 519, baseType: !4559, size: 8, offset: 1000)
!4659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !4547, file: !4548, line: 520, baseType: !4559, size: 8, offset: 1008)
!4660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !4547, file: !4548, line: 521, baseType: !4559, size: 8, offset: 1016)
!4661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !4547, file: !4548, line: 522, baseType: !4559, size: 8, offset: 1024)
!4662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !4547, file: !4548, line: 523, baseType: !4559, size: 8, offset: 1032)
!4663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !4547, file: !4548, line: 524, baseType: !4559, size: 8, offset: 1040)
!4664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !4547, file: !4548, line: 525, baseType: !4559, size: 8, offset: 1048)
!4665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !4547, file: !4548, line: 526, baseType: !4559, size: 8, offset: 1056)
!4666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !4547, file: !4548, line: 527, baseType: !4559, size: 8, offset: 1064)
!4667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !4547, file: !4548, line: 528, baseType: !4559, size: 8, offset: 1072)
!4668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !4547, file: !4548, line: 529, baseType: !4559, size: 8, offset: 1080)
!4669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !4547, file: !4548, line: 530, baseType: !4559, size: 8, offset: 1088)
!4670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !4547, file: !4548, line: 531, baseType: !4559, size: 8, offset: 1096)
!4671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !4547, file: !4548, line: 532, baseType: !4559, size: 8, offset: 1104)
!4672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !4547, file: !4548, line: 533, baseType: !4559, size: 8, offset: 1112)
!4673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !4547, file: !4548, line: 534, baseType: !4559, size: 8, offset: 1120)
!4674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !4547, file: !4548, line: 535, baseType: !4559, size: 8, offset: 1128)
!4675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !4547, file: !4548, line: 536, baseType: !4559, size: 8, offset: 1136)
!4676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !4547, file: !4548, line: 537, baseType: !4559, size: 8, offset: 1144)
!4677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !4547, file: !4548, line: 538, baseType: !4559, size: 8, offset: 1152)
!4678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !4547, file: !4548, line: 539, baseType: !4559, size: 8, offset: 1160)
!4679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !4547, file: !4548, line: 540, baseType: !4559, size: 8, offset: 1168)
!4680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !4547, file: !4548, line: 541, baseType: !4559, size: 8, offset: 1176)
!4681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !4547, file: !4548, line: 542, baseType: !4559, size: 8, offset: 1184)
!4682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !4547, file: !4548, line: 543, baseType: !4559, size: 8, offset: 1192)
!4683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !4547, file: !4548, line: 544, baseType: !4559, size: 8, offset: 1200)
!4684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !4547, file: !4548, line: 545, baseType: !4559, size: 8, offset: 1208)
!4685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !4547, file: !4548, line: 546, baseType: !4559, size: 8, offset: 1216)
!4686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !4547, file: !4548, line: 547, baseType: !4559, size: 8, offset: 1224)
!4687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !4547, file: !4548, line: 548, baseType: !4559, size: 8, offset: 1232)
!4688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !4547, file: !4548, line: 549, baseType: !4559, size: 8, offset: 1240)
!4689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !4547, file: !4548, line: 550, baseType: !4559, size: 8, offset: 1248)
!4690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !4547, file: !4548, line: 551, baseType: !4559, size: 8, offset: 1256)
!4691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !4547, file: !4548, line: 552, baseType: !4559, size: 8, offset: 1264)
!4692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !4547, file: !4548, line: 553, baseType: !4559, size: 8, offset: 1272)
!4693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !4547, file: !4548, line: 554, baseType: !4559, size: 8, offset: 1280)
!4694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !4547, file: !4548, line: 555, baseType: !4559, size: 8, offset: 1288)
!4695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !4547, file: !4548, line: 556, baseType: !4559, size: 8, offset: 1296)
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !4547, file: !4548, line: 557, baseType: !4559, size: 8, offset: 1304)
!4697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !4547, file: !4548, line: 558, baseType: !4559, size: 8, offset: 1312)
!4698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !4547, file: !4548, line: 559, baseType: !4559, size: 8, offset: 1320)
!4699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !4547, file: !4548, line: 560, baseType: !4559, size: 8, offset: 1328)
!4700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !4547, file: !4548, line: 561, baseType: !4559, size: 8, offset: 1336)
!4701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !4547, file: !4548, line: 562, baseType: !4559, size: 8, offset: 1344)
!4702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !4547, file: !4548, line: 563, baseType: !4559, size: 8, offset: 1352)
!4703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !4547, file: !4548, line: 564, baseType: !4559, size: 8, offset: 1360)
!4704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !4547, file: !4548, line: 565, baseType: !4559, size: 8, offset: 1368)
!4705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !4547, file: !4548, line: 566, baseType: !4559, size: 8, offset: 1376)
!4706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !4547, file: !4548, line: 567, baseType: !4559, size: 8, offset: 1384)
!4707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !4547, file: !4548, line: 568, baseType: !4559, size: 8, offset: 1392)
!4708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !4547, file: !4548, line: 569, baseType: !4559, size: 8, offset: 1400)
!4709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !4547, file: !4548, line: 570, baseType: !4559, size: 8, offset: 1408)
!4710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !4547, file: !4548, line: 571, baseType: !4559, size: 8, offset: 1416)
!4711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !4547, file: !4548, line: 572, baseType: !4559, size: 8, offset: 1424)
!4712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !4547, file: !4548, line: 573, baseType: !4559, size: 8, offset: 1432)
!4713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !4547, file: !4548, line: 574, baseType: !4559, size: 8, offset: 1440)
!4714 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !3304, file: !135, line: 3405, baseType: !4715, size: 384)
!4715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !4716)
!4716 = !{!4717, !4718}
!4717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4715, file: !135, line: 3353, baseType: !3340, size: 192)
!4718 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4715, file: !135, line: 3356, baseType: !4719, size: 192, offset: 192)
!4719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !4548, line: 578, size: 192, elements: !4720)
!4720 = !{!4721, !4722, !4723, !4724, !4725, !4726, !4727, !4728, !4729, !4730, !4731}
!4721 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !4719, file: !4548, line: 580, baseType: !1445, size: 32)
!4722 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !4719, file: !4548, line: 581, baseType: !1445, size: 32, offset: 32)
!4723 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !4719, file: !4548, line: 582, baseType: !1445, size: 32, offset: 64)
!4724 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !4719, file: !4548, line: 583, baseType: !1445, size: 32, offset: 96)
!4725 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !4719, file: !4548, line: 584, baseType: !3421, size: 8, offset: 128)
!4726 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !4719, file: !4548, line: 585, baseType: !3421, size: 8, offset: 136)
!4727 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !4719, file: !4548, line: 586, baseType: !3421, size: 8, offset: 144)
!4728 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !4719, file: !4548, line: 587, baseType: !3421, size: 8, offset: 152)
!4729 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !4719, file: !4548, line: 588, baseType: !3421, size: 8, offset: 160)
!4730 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !4719, file: !4548, line: 589, baseType: !3421, size: 8, offset: 168)
!4731 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !4719, file: !4548, line: 590, baseType: !3421, size: 8, offset: 176)
!4732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4733, size: 64)
!4733 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3304)
!4734 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!4735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4736, size: 64)
!4736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3633)
!4737 = !{!0, !4738, !4743, !4756, !4762, !4765, !4767, !4769, !4772, !4774, !4776, !4778, !4780, !4785, !4787}
!4738 = !DIGlobalVariableExpression(var: !4739, expr: !DIExpression())
!4739 = distinct !DIGlobalVariable(name: "built_in_names", scope: !2, file: !3, line: 70, type: !4740, isLocal: false, isDefinition: true)
!4740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3504, size: 46144, elements: !4741)
!4741 = !{!4742}
!4742 = !DISubrange(count: 721)
!4743 = !DIGlobalVariableExpression(var: !4744, expr: !DIExpression())
!4744 = distinct !DIGlobalVariable(name: "elim_regs", scope: !4745, file: !3, line: 793, type: !4749, isLocal: true, isDefinition: true)
!4745 = distinct !DISubprogram(name: "expand_builtin_setjmp_receiver", scope: !3, file: !3, line: 762, type: !4746, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4746 = !DISubroutineType(types: !4747)
!4747 = !{null, !3479}
!4748 = !{}
!4749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4750, size: 256, elements: !3573)
!4750 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4751)
!4751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elims", scope: !4745, file: !3, line: 793, size: 64, elements: !4752)
!4752 = !{!4753, !4755}
!4753 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !4751, file: !3, line: 793, baseType: !4754, size: 32)
!4754 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1445)
!4755 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !4751, file: !3, line: 793, baseType: !4754, size: 32, offset: 32)
!4756 = !DIGlobalVariableExpression(var: !4757, expr: !DIExpression())
!4757 = distinct !DIGlobalVariable(name: "gave_help", scope: !4758, file: !3, line: 4643, type: !3421, isLocal: true, isDefinition: true)
!4758 = distinct !DISubprogram(name: "gimplify_va_arg_expr", scope: !3, file: !3, line: 4618, type: !4759, scopeLine: 4619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4759 = !DISubroutineType(types: !4760)
!4760 = !{!1444, !3666, !4761, !4761}
!4761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3621, size: 64)
!4762 = !DIGlobalVariableExpression(var: !4763, expr: !DIExpression())
!4763 = distinct !DIGlobalVariable(name: "built_in_decls", scope: !2, file: !3, line: 78, type: !4764, isLocal: false, isDefinition: true)
!4764 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3344, size: 46144, elements: !4741)
!4765 = !DIGlobalVariableExpression(var: !4766, expr: !DIExpression())
!4766 = distinct !DIGlobalVariable(name: "implicit_built_in_decls", scope: !2, file: !3, line: 82, type: !4764, isLocal: false, isDefinition: true)
!4767 = !DIGlobalVariableExpression(var: !4768, expr: !DIExpression())
!4768 = distinct !DIGlobalVariable(name: "target_percent", scope: !2, file: !3, line: 211, type: !3357, isLocal: true, isDefinition: true)
!4769 = !DIGlobalVariableExpression(var: !4770, expr: !DIExpression())
!4770 = distinct !DIGlobalVariable(name: "target_percent_s", scope: !2, file: !3, line: 215, type: !4771, isLocal: true, isDefinition: true)
!4771 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3401, size: 24, elements: !3376)
!4772 = !DIGlobalVariableExpression(var: !4773, expr: !DIExpression())
!4773 = distinct !DIGlobalVariable(name: "setjmp_alias_set", scope: !2, file: !3, line: 704, type: !3888, isLocal: true, isDefinition: true)
!4774 = !DIGlobalVariableExpression(var: !4775, expr: !DIExpression())
!4775 = distinct !DIGlobalVariable(name: "target_newline", scope: !2, file: !3, line: 210, type: !3357, isLocal: true, isDefinition: true)
!4776 = !DIGlobalVariableExpression(var: !4777, expr: !DIExpression())
!4777 = distinct !DIGlobalVariable(name: "target_percent_s_newline", scope: !2, file: !3, line: 216, type: !3572, isLocal: true, isDefinition: true)
!4778 = !DIGlobalVariableExpression(var: !4779, expr: !DIExpression())
!4779 = distinct !DIGlobalVariable(name: "target_percent_c", scope: !2, file: !3, line: 214, type: !4771, isLocal: true, isDefinition: true)
!4780 = !DIGlobalVariableExpression(var: !4781, expr: !DIExpression())
!4781 = distinct !DIGlobalVariable(name: "init", scope: !4782, file: !3, line: 12909, type: !3421, isLocal: true, isDefinition: true)
!4782 = distinct !DISubprogram(name: "init_target_chars", scope: !3, file: !3, line: 12907, type: !4783, scopeLine: 12908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4783 = !DISubroutineType(types: !4784)
!4784 = !{!3421}
!4785 = !DIGlobalVariableExpression(var: !4786, expr: !DIExpression())
!4786 = distinct !DIGlobalVariable(name: "target_c", scope: !2, file: !3, line: 212, type: !3357, isLocal: true, isDefinition: true)
!4787 = !DIGlobalVariableExpression(var: !4788, expr: !DIExpression())
!4788 = distinct !DIGlobalVariable(name: "target_s", scope: !2, file: !3, line: 213, type: !3357, isLocal: true, isDefinition: true)
!4789 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4790, size: 256, elements: !3573)
!4790 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3504)
!4791 = !{i32 7, !"Dwarf Version", i32 4}
!4792 = !{i32 2, !"Debug Info Version", i32 3}
!4793 = !{i32 1, !"wchar_size", i32 4}
!4794 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4795 = distinct !DISubprogram(name: "is_builtin_name", scope: !3, file: !3, line: 235, type: !4796, scopeLine: 236, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4796 = !DISubroutineType(types: !4797)
!4797 = !{!3421, !3504}
!4798 = !DILocalVariable(name: "name", arg: 1, scope: !4795, file: !3, line: 235, type: !3504)
!4799 = !DILocation(line: 235, column: 30, scope: !4795)
!4800 = !DILocation(line: 237, column: 16, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 237, column: 7)
!4802 = !DILocation(line: 237, column: 7, scope: !4801)
!4803 = !DILocation(line: 237, column: 40, scope: !4801)
!4804 = !DILocation(line: 237, column: 7, scope: !4795)
!4805 = !DILocation(line: 238, column: 5, scope: !4801)
!4806 = !DILocation(line: 239, column: 16, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 239, column: 7)
!4808 = !DILocation(line: 239, column: 7, scope: !4807)
!4809 = !DILocation(line: 239, column: 36, scope: !4807)
!4810 = !DILocation(line: 239, column: 7, scope: !4795)
!4811 = !DILocation(line: 240, column: 5, scope: !4807)
!4812 = !DILocation(line: 241, column: 3, scope: !4795)
!4813 = !DILocation(line: 242, column: 1, scope: !4795)
!4814 = distinct !DISubprogram(name: "is_builtin_fn", scope: !3, file: !3, line: 248, type: !4815, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4815 = !DISubroutineType(types: !4816)
!4816 = !{!3421, !3344}
!4817 = !DILocalVariable(name: "decl", arg: 1, scope: !4814, file: !3, line: 248, type: !3344)
!4818 = !DILocation(line: 248, column: 21, scope: !4814)
!4819 = !DILocation(line: 250, column: 10, scope: !4814)
!4820 = !DILocation(line: 250, column: 27, scope: !4814)
!4821 = !DILocation(line: 250, column: 44, scope: !4814)
!4822 = !DILocation(line: 250, column: 47, scope: !4814)
!4823 = !DILocation(line: 0, scope: !4814)
!4824 = !DILocation(line: 250, column: 3, scope: !4814)
!4825 = distinct !DISubprogram(name: "get_object_alignment", scope: !3, file: !3, line: 273, type: !4826, scopeLine: 274, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4826 = !DISubroutineType(types: !4827)
!4827 = !{!1445, !3344, !7, !7}
!4828 = !DILocalVariable(name: "exp", arg: 1, scope: !4825, file: !3, line: 273, type: !3344)
!4829 = !DILocation(line: 273, column: 28, scope: !4825)
!4830 = !DILocalVariable(name: "align", arg: 2, scope: !4825, file: !3, line: 273, type: !7)
!4831 = !DILocation(line: 273, column: 46, scope: !4825)
!4832 = !DILocalVariable(name: "max_align", arg: 3, scope: !4825, file: !3, line: 273, type: !7)
!4833 = !DILocation(line: 273, column: 66, scope: !4825)
!4834 = !DILocalVariable(name: "inner", scope: !4825, file: !3, line: 275, type: !7)
!4835 = !DILocation(line: 275, column: 16, scope: !4825)
!4836 = !DILocation(line: 277, column: 11, scope: !4825)
!4837 = !DILocation(line: 277, column: 9, scope: !4825)
!4838 = !DILocation(line: 278, column: 28, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 278, column: 7)
!4840 = !DILocation(line: 278, column: 7, scope: !4839)
!4841 = !DILocation(line: 278, column: 7, scope: !4825)
!4842 = !DILocalVariable(name: "bitsize", scope: !4843, file: !3, line: 280, type: !3359)
!4843 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 279, column: 4)
!4844 = !DILocation(line: 280, column: 21, scope: !4843)
!4845 = !DILocalVariable(name: "bitpos", scope: !4843, file: !3, line: 280, type: !3359)
!4846 = !DILocation(line: 280, column: 30, scope: !4843)
!4847 = !DILocalVariable(name: "offset", scope: !4843, file: !3, line: 281, type: !3344)
!4848 = !DILocation(line: 281, column: 12, scope: !4843)
!4849 = !DILocalVariable(name: "mode", scope: !4843, file: !3, line: 282, type: !5)
!4850 = !DILocation(line: 282, column: 25, scope: !4843)
!4851 = !DILocalVariable(name: "unsignedp", scope: !4843, file: !3, line: 283, type: !1445)
!4852 = !DILocation(line: 283, column: 11, scope: !4843)
!4853 = !DILocalVariable(name: "volatilep", scope: !4843, file: !3, line: 283, type: !1445)
!4854 = !DILocation(line: 283, column: 22, scope: !4843)
!4855 = !DILocation(line: 285, column: 34, scope: !4843)
!4856 = !DILocation(line: 285, column: 13, scope: !4843)
!4857 = !DILocation(line: 285, column: 11, scope: !4843)
!4858 = !DILocation(line: 287, column: 11, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 287, column: 11)
!4860 = !DILocation(line: 287, column: 11, scope: !4843)
!4861 = !DILocation(line: 288, column: 10, scope: !4859)
!4862 = !DILocation(line: 288, column: 8, scope: !4859)
!4863 = !DILocation(line: 288, column: 2, scope: !4859)
!4864 = !DILocation(line: 289, column: 7, scope: !4843)
!4865 = !DILocation(line: 289, column: 14, scope: !4843)
!4866 = !DILocalVariable(name: "next_offset", scope: !4867, file: !3, line: 291, type: !3344)
!4867 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 290, column: 2)
!4868 = !DILocation(line: 291, column: 9, scope: !4867)
!4869 = !DILocation(line: 293, column: 8, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4867, file: !3, line: 293, column: 8)
!4871 = !DILocation(line: 293, column: 27, scope: !4870)
!4872 = !DILocation(line: 293, column: 8, scope: !4867)
!4873 = !DILocation(line: 295, column: 22, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4870, file: !3, line: 294, column: 6)
!4875 = !DILocation(line: 295, column: 20, scope: !4874)
!4876 = !DILocation(line: 296, column: 17, scope: !4874)
!4877 = !DILocation(line: 296, column: 15, scope: !4874)
!4878 = !DILocation(line: 297, column: 6, scope: !4874)
!4879 = !DILocation(line: 299, column: 18, scope: !4870)
!4880 = !DILocation(line: 300, column: 23, scope: !4881)
!4881 = distinct !DILexicalBlock(scope: !4867, file: !3, line: 300, column: 8)
!4882 = !DILocation(line: 300, column: 8, scope: !4881)
!4883 = !DILocation(line: 300, column: 8, scope: !4867)
!4884 = !DILocalVariable(name: "offset_bits", scope: !4885, file: !3, line: 304, type: !7)
!4885 = distinct !DILexicalBlock(scope: !4881, file: !3, line: 301, column: 6)
!4886 = !DILocation(line: 304, column: 17, scope: !4885)
!4887 = !DILocation(line: 305, column: 31, scope: !4885)
!4888 = !DILocation(line: 305, column: 17, scope: !4885)
!4889 = !DILocation(line: 305, column: 6, scope: !4885)
!4890 = !DILocation(line: 305, column: 42, scope: !4885)
!4891 = !DILocation(line: 307, column: 12, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4885, file: !3, line: 307, column: 12)
!4893 = !DILocation(line: 307, column: 12, scope: !4885)
!4894 = !DILocation(line: 308, column: 11, scope: !4892)
!4895 = !DILocation(line: 308, column: 9, scope: !4892)
!4896 = !DILocation(line: 308, column: 3, scope: !4892)
!4897 = !DILocation(line: 309, column: 6, scope: !4885)
!4898 = !DILocation(line: 310, column: 13, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4881, file: !3, line: 310, column: 13)
!4900 = !DILocation(line: 310, column: 32, scope: !4899)
!4901 = !DILocation(line: 311, column: 6, scope: !4899)
!4902 = !DILocation(line: 311, column: 24, scope: !4899)
!4903 = !DILocation(line: 311, column: 9, scope: !4899)
!4904 = !DILocation(line: 310, column: 13, scope: !4881)
!4905 = !DILocalVariable(name: "offset_factor", scope: !4906, file: !3, line: 315, type: !7)
!4906 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 312, column: 6)
!4907 = !DILocation(line: 315, column: 17, scope: !4906)
!4908 = !DILocation(line: 316, column: 31, scope: !4906)
!4909 = !DILocation(line: 316, column: 17, scope: !4906)
!4910 = !DILocation(line: 316, column: 6, scope: !4906)
!4911 = !DILocation(line: 317, column: 6, scope: !4906)
!4912 = !DILocation(line: 319, column: 12, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 319, column: 12)
!4914 = !DILocation(line: 319, column: 12, scope: !4906)
!4915 = !DILocation(line: 320, column: 11, scope: !4913)
!4916 = !DILocation(line: 320, column: 9, scope: !4913)
!4917 = !DILocation(line: 320, column: 3, scope: !4913)
!4918 = !DILocation(line: 321, column: 6, scope: !4906)
!4919 = !DILocation(line: 324, column: 16, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 323, column: 6)
!4921 = !DILocation(line: 324, column: 14, scope: !4920)
!4922 = !DILocation(line: 325, column: 8, scope: !4920)
!4923 = !DILocation(line: 327, column: 13, scope: !4867)
!4924 = !DILocation(line: 327, column: 11, scope: !4867)
!4925 = distinct !{!4925, !4864, !4926}
!4926 = !DILocation(line: 328, column: 2, scope: !4843)
!4927 = !DILocation(line: 329, column: 5, scope: !4843)
!4928 = !DILocation(line: 330, column: 7, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 330, column: 7)
!4930 = !DILocation(line: 330, column: 23, scope: !4929)
!4931 = !DILocation(line: 330, column: 7, scope: !4825)
!4932 = !DILocation(line: 331, column: 11, scope: !4929)
!4933 = !DILocation(line: 331, column: 9, scope: !4929)
!4934 = !DILocation(line: 331, column: 5, scope: !4929)
!4935 = !DILocation(line: 332, column: 7, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 332, column: 7)
!4937 = !DILocation(line: 333, column: 7, scope: !4936)
!4938 = !DILocation(line: 333, column: 10, scope: !4936)
!4939 = !DILocation(line: 333, column: 26, scope: !4936)
!4940 = !DILocation(line: 332, column: 7, scope: !4825)
!4941 = !DILocation(line: 334, column: 13, scope: !4936)
!4942 = !DILocation(line: 334, column: 11, scope: !4936)
!4943 = !DILocation(line: 334, column: 5, scope: !4936)
!4944 = !DILocation(line: 336, column: 12, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 336, column: 12)
!4946 = !DILocation(line: 336, column: 12, scope: !4936)
!4947 = !DILocation(line: 337, column: 13, scope: !4945)
!4948 = !DILocation(line: 337, column: 11, scope: !4945)
!4949 = !DILocation(line: 337, column: 5, scope: !4945)
!4950 = !DILocation(line: 339, column: 12, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 339, column: 12)
!4952 = !DILocation(line: 339, column: 28, scope: !4951)
!4953 = !DILocation(line: 340, column: 5, scope: !4951)
!4954 = !DILocation(line: 340, column: 8, scope: !4951)
!4955 = !DILocation(line: 340, column: 24, scope: !4951)
!4956 = !DILocation(line: 339, column: 12, scope: !4945)
!4957 = !DILocation(line: 341, column: 13, scope: !4951)
!4958 = !DILocation(line: 341, column: 11, scope: !4951)
!4959 = !DILocation(line: 341, column: 5, scope: !4951)
!4960 = !DILocation(line: 343, column: 13, scope: !4951)
!4961 = !DILocation(line: 343, column: 11, scope: !4951)
!4962 = !DILocation(line: 344, column: 10, scope: !4825)
!4963 = !DILocation(line: 344, column: 3, scope: !4825)
!4964 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !4965, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4965 = !DISubroutineType(types: !4966)
!4966 = !{!3421, !4967}
!4967 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !3345, line: 59, baseType: !4732)
!4968 = !DILocalVariable(name: "t", arg: 1, scope: !4964, file: !135, line: 4551, type: !4967)
!4969 = !DILocation(line: 4551, column: 33, scope: !4964)
!4970 = !DILocation(line: 4553, column: 11, scope: !4964)
!4971 = !DILocation(line: 4553, column: 3, scope: !4964)
!4972 = !DILocation(line: 4562, column: 7, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4964, file: !135, line: 4554, column: 5)
!4974 = !DILocation(line: 4565, column: 7, scope: !4973)
!4975 = !DILocation(line: 4567, column: 1, scope: !4964)
!4976 = distinct !DISubprogram(name: "can_trust_pointer_alignment", scope: !3, file: !3, line: 351, type: !4783, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4977 = !DILocation(line: 354, column: 11, scope: !4976)
!4978 = !DILocation(line: 354, column: 20, scope: !4976)
!4979 = !DILocation(line: 354, column: 23, scope: !4976)
!4980 = !DILocation(line: 0, scope: !4976)
!4981 = !DILocation(line: 354, column: 10, scope: !4976)
!4982 = !DILocation(line: 354, column: 3, scope: !4976)
!4983 = distinct !DISubprogram(name: "get_pointer_alignment", scope: !3, file: !3, line: 366, type: !4984, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!4984 = !DISubroutineType(types: !4985)
!4985 = !{!1445, !3344, !7}
!4986 = !DILocalVariable(name: "exp", arg: 1, scope: !4983, file: !3, line: 366, type: !3344)
!4987 = !DILocation(line: 366, column: 29, scope: !4983)
!4988 = !DILocalVariable(name: "max_align", arg: 2, scope: !4983, file: !3, line: 366, type: !7)
!4989 = !DILocation(line: 366, column: 47, scope: !4983)
!4990 = !DILocalVariable(name: "align", scope: !4983, file: !3, line: 368, type: !7)
!4991 = !DILocation(line: 368, column: 16, scope: !4983)
!4992 = !DILocalVariable(name: "inner", scope: !4983, file: !3, line: 368, type: !7)
!4993 = !DILocation(line: 368, column: 23, scope: !4983)
!4994 = !DILocation(line: 370, column: 8, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 370, column: 7)
!4996 = !DILocation(line: 370, column: 7, scope: !4983)
!4997 = !DILocation(line: 371, column: 5, scope: !4995)
!4998 = !DILocation(line: 373, column: 8, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 373, column: 7)
!5000 = !DILocation(line: 373, column: 7, scope: !4983)
!5001 = !DILocation(line: 374, column: 5, scope: !4999)
!5002 = !DILocation(line: 376, column: 11, scope: !4983)
!5003 = !DILocation(line: 376, column: 9, scope: !4983)
!5004 = !DILocation(line: 377, column: 11, scope: !4983)
!5005 = !DILocation(line: 377, column: 9, scope: !4983)
!5006 = !DILocation(line: 379, column: 3, scope: !4983)
!5007 = !DILocation(line: 381, column: 15, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 380, column: 5)
!5009 = !DILocation(line: 381, column: 7, scope: !5008)
!5010 = !DILocation(line: 384, column: 10, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5008, file: !3, line: 382, column: 2)
!5012 = !DILocation(line: 384, column: 8, scope: !5011)
!5013 = !DILocation(line: 385, column: 10, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 385, column: 8)
!5015 = !DILocation(line: 385, column: 8, scope: !5011)
!5016 = !DILocation(line: 386, column: 13, scope: !5014)
!5017 = !DILocation(line: 386, column: 6, scope: !5014)
!5018 = !DILocation(line: 388, column: 12, scope: !5011)
!5019 = !DILocation(line: 388, column: 10, scope: !5011)
!5020 = !DILocation(line: 389, column: 12, scope: !5011)
!5021 = !DILocation(line: 389, column: 10, scope: !5011)
!5022 = !DILocation(line: 390, column: 4, scope: !5011)
!5023 = !DILocation(line: 396, column: 25, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 396, column: 8)
!5025 = !DILocation(line: 396, column: 10, scope: !5024)
!5026 = !DILocation(line: 396, column: 8, scope: !5011)
!5027 = !DILocation(line: 397, column: 13, scope: !5024)
!5028 = !DILocation(line: 397, column: 6, scope: !5024)
!5029 = !DILocation(line: 399, column: 4, scope: !5011)
!5030 = !DILocation(line: 399, column: 27, scope: !5011)
!5031 = !DILocation(line: 399, column: 13, scope: !5011)
!5032 = !DILocation(line: 400, column: 8, scope: !5011)
!5033 = !DILocation(line: 400, column: 18, scope: !5011)
!5034 = !DILocation(line: 400, column: 34, scope: !5011)
!5035 = !DILocation(line: 400, column: 7, scope: !5011)
!5036 = !DILocation(line: 400, column: 5, scope: !5011)
!5037 = !DILocation(line: 401, column: 4, scope: !5011)
!5038 = !DILocation(line: 402, column: 16, scope: !5011)
!5039 = distinct !{!5039, !5029, !5040}
!5040 = !DILocation(line: 402, column: 20, scope: !5011)
!5041 = !DILocation(line: 404, column: 10, scope: !5011)
!5042 = !DILocation(line: 404, column: 8, scope: !5011)
!5043 = !DILocation(line: 405, column: 4, scope: !5011)
!5044 = !DILocation(line: 409, column: 33, scope: !5011)
!5045 = !DILocation(line: 409, column: 56, scope: !5011)
!5046 = !DILocation(line: 409, column: 63, scope: !5011)
!5047 = !DILocation(line: 409, column: 11, scope: !5011)
!5048 = !DILocation(line: 409, column: 4, scope: !5011)
!5049 = !DILocation(line: 412, column: 11, scope: !5011)
!5050 = !DILocation(line: 412, column: 4, scope: !5011)
!5051 = distinct !{!5051, !5006, !5052}
!5052 = !DILocation(line: 414, column: 5, scope: !4983)
!5053 = !DILocation(line: 415, column: 1, scope: !4983)
!5054 = distinct !DISubprogram(name: "c_strlen", scope: !3, file: !3, line: 434, type: !5055, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5055 = !DISubroutineType(types: !5056)
!5056 = !{!3344, !3344, !1445}
!5057 = !DILocalVariable(name: "src", arg: 1, scope: !5054, file: !3, line: 434, type: !3344)
!5058 = !DILocation(line: 434, column: 16, scope: !5054)
!5059 = !DILocalVariable(name: "only_value", arg: 2, scope: !5054, file: !3, line: 434, type: !1445)
!5060 = !DILocation(line: 434, column: 25, scope: !5054)
!5061 = !DILocalVariable(name: "offset_node", scope: !5054, file: !3, line: 436, type: !3344)
!5062 = !DILocation(line: 436, column: 8, scope: !5054)
!5063 = !DILocalVariable(name: "offset", scope: !5054, file: !3, line: 437, type: !3359)
!5064 = !DILocation(line: 437, column: 17, scope: !5054)
!5065 = !DILocalVariable(name: "max", scope: !5054, file: !3, line: 438, type: !1445)
!5066 = !DILocation(line: 438, column: 7, scope: !5054)
!5067 = !DILocalVariable(name: "ptr", scope: !5054, file: !3, line: 439, type: !3504)
!5068 = !DILocation(line: 439, column: 15, scope: !5054)
!5069 = !DILocalVariable(name: "loc", scope: !5054, file: !3, line: 440, type: !3429)
!5070 = !DILocation(line: 440, column: 14, scope: !5054)
!5071 = !DILocation(line: 442, column: 3, scope: !5054)
!5072 = !DILocation(line: 443, column: 7, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 443, column: 7)
!5074 = !DILocation(line: 443, column: 23, scope: !5073)
!5075 = !DILocation(line: 444, column: 7, scope: !5073)
!5076 = !DILocation(line: 444, column: 11, scope: !5073)
!5077 = !DILocation(line: 444, column: 22, scope: !5073)
!5078 = !DILocation(line: 444, column: 26, scope: !5073)
!5079 = !DILocation(line: 443, column: 7, scope: !5054)
!5080 = !DILocalVariable(name: "len1", scope: !5081, file: !3, line: 446, type: !3344)
!5081 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 445, column: 5)
!5082 = !DILocation(line: 446, column: 12, scope: !5081)
!5083 = !DILocalVariable(name: "len2", scope: !5081, file: !3, line: 446, type: !3344)
!5084 = !DILocation(line: 446, column: 18, scope: !5081)
!5085 = !DILocation(line: 448, column: 24, scope: !5081)
!5086 = !DILocation(line: 448, column: 47, scope: !5081)
!5087 = !DILocation(line: 448, column: 14, scope: !5081)
!5088 = !DILocation(line: 448, column: 12, scope: !5081)
!5089 = !DILocation(line: 449, column: 24, scope: !5081)
!5090 = !DILocation(line: 449, column: 47, scope: !5081)
!5091 = !DILocation(line: 449, column: 14, scope: !5081)
!5092 = !DILocation(line: 449, column: 12, scope: !5081)
!5093 = !DILocation(line: 450, column: 31, scope: !5094)
!5094 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 450, column: 11)
!5095 = !DILocation(line: 450, column: 37, scope: !5094)
!5096 = !DILocation(line: 450, column: 11, scope: !5094)
!5097 = !DILocation(line: 450, column: 11, scope: !5081)
!5098 = !DILocation(line: 451, column: 9, scope: !5094)
!5099 = !DILocation(line: 451, column: 2, scope: !5094)
!5100 = !DILocation(line: 452, column: 5, scope: !5081)
!5101 = !DILocation(line: 454, column: 7, scope: !5102)
!5102 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 454, column: 7)
!5103 = !DILocation(line: 454, column: 23, scope: !5102)
!5104 = !DILocation(line: 455, column: 7, scope: !5102)
!5105 = !DILocation(line: 455, column: 11, scope: !5102)
!5106 = !DILocation(line: 455, column: 22, scope: !5102)
!5107 = !DILocation(line: 455, column: 26, scope: !5102)
!5108 = !DILocation(line: 454, column: 7, scope: !5054)
!5109 = !DILocation(line: 456, column: 22, scope: !5102)
!5110 = !DILocation(line: 456, column: 45, scope: !5102)
!5111 = !DILocation(line: 456, column: 12, scope: !5102)
!5112 = !DILocation(line: 456, column: 5, scope: !5102)
!5113 = !DILocation(line: 458, column: 7, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 458, column: 7)
!5115 = !DILocation(line: 458, column: 7, scope: !5054)
!5116 = !DILocation(line: 459, column: 11, scope: !5114)
!5117 = !DILocation(line: 459, column: 9, scope: !5114)
!5118 = !DILocation(line: 459, column: 5, scope: !5114)
!5119 = !DILocation(line: 461, column: 11, scope: !5114)
!5120 = !DILocation(line: 461, column: 9, scope: !5114)
!5121 = !DILocation(line: 463, column: 26, scope: !5054)
!5122 = !DILocation(line: 463, column: 9, scope: !5054)
!5123 = !DILocation(line: 463, column: 7, scope: !5054)
!5124 = !DILocation(line: 464, column: 7, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 464, column: 7)
!5126 = !DILocation(line: 464, column: 11, scope: !5125)
!5127 = !DILocation(line: 464, column: 7, scope: !5054)
!5128 = !DILocation(line: 465, column: 5, scope: !5125)
!5129 = !DILocation(line: 467, column: 9, scope: !5054)
!5130 = !DILocation(line: 467, column: 34, scope: !5054)
!5131 = !DILocation(line: 467, column: 7, scope: !5054)
!5132 = !DILocation(line: 468, column: 9, scope: !5054)
!5133 = !DILocation(line: 468, column: 7, scope: !5054)
!5134 = !DILocation(line: 470, column: 7, scope: !5135)
!5135 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 470, column: 7)
!5136 = !DILocation(line: 470, column: 19, scope: !5135)
!5137 = !DILocation(line: 470, column: 22, scope: !5135)
!5138 = !DILocation(line: 470, column: 46, scope: !5135)
!5139 = !DILocation(line: 470, column: 7, scope: !5054)
!5140 = !DILocalVariable(name: "i", scope: !5141, file: !3, line: 475, type: !1445)
!5141 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 471, column: 5)
!5142 = !DILocation(line: 475, column: 11, scope: !5141)
!5143 = !DILocation(line: 477, column: 14, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5141, file: !3, line: 477, column: 7)
!5145 = !DILocation(line: 477, column: 12, scope: !5144)
!5146 = !DILocation(line: 477, column: 19, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 477, column: 7)
!5148 = !DILocation(line: 477, column: 23, scope: !5147)
!5149 = !DILocation(line: 477, column: 21, scope: !5147)
!5150 = !DILocation(line: 477, column: 7, scope: !5144)
!5151 = !DILocation(line: 478, column: 6, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5147, file: !3, line: 478, column: 6)
!5153 = !DILocation(line: 478, column: 10, scope: !5152)
!5154 = !DILocation(line: 478, column: 13, scope: !5152)
!5155 = !DILocation(line: 478, column: 6, scope: !5147)
!5156 = !DILocation(line: 479, column: 4, scope: !5152)
!5157 = !DILocation(line: 478, column: 16, scope: !5152)
!5158 = !DILocation(line: 477, column: 29, scope: !5147)
!5159 = !DILocation(line: 477, column: 7, scope: !5147)
!5160 = distinct !{!5160, !5150, !5161}
!5161 = !DILocation(line: 479, column: 11, scope: !5144)
!5162 = !DILocation(line: 488, column: 31, scope: !5141)
!5163 = !DILocation(line: 488, column: 36, scope: !5141)
!5164 = !DILocation(line: 488, column: 52, scope: !5141)
!5165 = !DILocation(line: 488, column: 14, scope: !5141)
!5166 = !DILocation(line: 488, column: 7, scope: !5141)
!5167 = !DILocation(line: 493, column: 7, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 493, column: 7)
!5169 = !DILocation(line: 493, column: 19, scope: !5168)
!5170 = !DILocation(line: 493, column: 7, scope: !5054)
!5171 = !DILocation(line: 494, column: 12, scope: !5168)
!5172 = !DILocation(line: 494, column: 5, scope: !5168)
!5173 = !DILocation(line: 495, column: 29, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 495, column: 12)
!5175 = !DILocation(line: 495, column: 14, scope: !5174)
!5176 = !DILocation(line: 495, column: 12, scope: !5168)
!5177 = !DILocation(line: 496, column: 12, scope: !5174)
!5178 = !DILocation(line: 496, column: 5, scope: !5174)
!5179 = !DILocation(line: 498, column: 28, scope: !5174)
!5180 = !DILocation(line: 498, column: 14, scope: !5174)
!5181 = !DILocation(line: 498, column: 12, scope: !5174)
!5182 = !DILocation(line: 502, column: 7, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 502, column: 7)
!5184 = !DILocation(line: 502, column: 14, scope: !5183)
!5185 = !DILocation(line: 502, column: 18, scope: !5183)
!5186 = !DILocation(line: 502, column: 21, scope: !5183)
!5187 = !DILocation(line: 502, column: 30, scope: !5183)
!5188 = !DILocation(line: 502, column: 28, scope: !5183)
!5189 = !DILocation(line: 502, column: 7, scope: !5054)
!5190 = !DILocation(line: 505, column: 13, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 505, column: 11)
!5192 = distinct !DILexicalBlock(scope: !5183, file: !3, line: 503, column: 5)
!5193 = !DILocation(line: 505, column: 11, scope: !5192)
!5194 = !DILocation(line: 507, column: 23, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 506, column: 9)
!5196 = !DILocation(line: 507, column: 11, scope: !5195)
!5197 = !DILocation(line: 508, column: 11, scope: !5195)
!5198 = !DILocation(line: 508, column: 33, scope: !5195)
!5199 = !DILocation(line: 509, column: 9, scope: !5195)
!5200 = !DILocation(line: 510, column: 7, scope: !5192)
!5201 = !DILocation(line: 519, column: 10, scope: !5054)
!5202 = !DILocation(line: 519, column: 3, scope: !5054)
!5203 = !DILocation(line: 520, column: 1, scope: !5054)
!5204 = distinct !DISubprogram(name: "expand_builtin_setjmp_setup", scope: !3, file: !3, line: 711, type: !5205, scopeLine: 712, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5205 = !DISubroutineType(types: !5206)
!5206 = !{null, !3479, !3479}
!5207 = !DILocalVariable(name: "buf_addr", arg: 1, scope: !5204, file: !3, line: 711, type: !3479)
!5208 = !DILocation(line: 711, column: 34, scope: !5204)
!5209 = !DILocalVariable(name: "receiver_label", arg: 2, scope: !5204, file: !3, line: 711, type: !3479)
!5210 = !DILocation(line: 711, column: 48, scope: !5204)
!5211 = !DILocalVariable(name: "sa_mode", scope: !5204, file: !3, line: 713, type: !5)
!5212 = !DILocation(line: 713, column: 21, scope: !5204)
!5213 = !DILocalVariable(name: "stack_save", scope: !5204, file: !3, line: 714, type: !3479)
!5214 = !DILocation(line: 714, column: 7, scope: !5204)
!5215 = !DILocalVariable(name: "mem", scope: !5204, file: !3, line: 715, type: !3479)
!5216 = !DILocation(line: 715, column: 7, scope: !5204)
!5217 = !DILocation(line: 717, column: 7, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5204, file: !3, line: 717, column: 7)
!5219 = !DILocation(line: 717, column: 24, scope: !5218)
!5220 = !DILocation(line: 717, column: 7, scope: !5204)
!5221 = !DILocation(line: 718, column: 24, scope: !5218)
!5222 = !DILocation(line: 718, column: 22, scope: !5218)
!5223 = !DILocation(line: 718, column: 5, scope: !5218)
!5224 = !DILocation(line: 720, column: 14, scope: !5204)
!5225 = !DILocation(line: 720, column: 12, scope: !5204)
!5226 = !DILocation(line: 722, column: 47, scope: !5204)
!5227 = !DILocation(line: 722, column: 32, scope: !5204)
!5228 = !DILocation(line: 722, column: 14, scope: !5204)
!5229 = !DILocation(line: 722, column: 12, scope: !5204)
!5230 = !DILocation(line: 728, column: 29, scope: !5204)
!5231 = !DILocation(line: 728, column: 9, scope: !5204)
!5232 = !DILocation(line: 728, column: 7, scope: !5204)
!5233 = !DILocation(line: 729, column: 22, scope: !5204)
!5234 = !DILocation(line: 729, column: 27, scope: !5204)
!5235 = !DILocation(line: 729, column: 3, scope: !5204)
!5236 = !DILocation(line: 730, column: 19, scope: !5204)
!5237 = !DILocation(line: 730, column: 32, scope: !5204)
!5238 = !DILocation(line: 730, column: 24, scope: !5204)
!5239 = !DILocation(line: 730, column: 3, scope: !5204)
!5240 = !DILocation(line: 732, column: 44, scope: !5204)
!5241 = !DILocation(line: 732, column: 54, scope: !5204)
!5242 = !DILocation(line: 732, column: 29, scope: !5204)
!5243 = !DILocation(line: 732, column: 9, scope: !5204)
!5244 = !DILocation(line: 732, column: 7, scope: !5204)
!5245 = !DILocation(line: 733, column: 22, scope: !5204)
!5246 = !DILocation(line: 733, column: 27, scope: !5204)
!5247 = !DILocation(line: 733, column: 3, scope: !5204)
!5248 = !DILocation(line: 735, column: 33, scope: !5204)
!5249 = !DILocation(line: 735, column: 19, scope: !5204)
!5250 = !DILocation(line: 736, column: 23, scope: !5204)
!5251 = !DILocation(line: 736, column: 5, scope: !5204)
!5252 = !DILocation(line: 735, column: 3, scope: !5204)
!5253 = !DILocation(line: 738, column: 29, scope: !5204)
!5254 = !DILocation(line: 739, column: 23, scope: !5204)
!5255 = !DILocation(line: 740, column: 13, scope: !5204)
!5256 = !DILocation(line: 740, column: 11, scope: !5204)
!5257 = !DILocation(line: 740, column: 9, scope: !5204)
!5258 = !DILocation(line: 739, column: 8, scope: !5204)
!5259 = !DILocation(line: 738, column: 16, scope: !5204)
!5260 = !DILocation(line: 738, column: 14, scope: !5204)
!5261 = !DILocation(line: 741, column: 22, scope: !5204)
!5262 = !DILocation(line: 741, column: 34, scope: !5204)
!5263 = !DILocation(line: 741, column: 3, scope: !5204)
!5264 = !DILocation(line: 742, column: 3, scope: !5204)
!5265 = !DILocation(line: 752, column: 3, scope: !5204)
!5266 = !DILocation(line: 752, column: 9, scope: !5204)
!5267 = !DILocation(line: 752, column: 22, scope: !5204)
!5268 = !DILocation(line: 755, column: 3, scope: !5204)
!5269 = !DILocation(line: 755, column: 9, scope: !5204)
!5270 = !DILocation(line: 755, column: 28, scope: !5204)
!5271 = !DILocation(line: 756, column: 1, scope: !5204)
!5272 = !DILocalVariable(name: "receiver_label", arg: 1, scope: !4745, file: !3, line: 762, type: !3479)
!5273 = !DILocation(line: 762, column: 37, scope: !4745)
!5274 = !DILocalVariable(name: "chain", scope: !4745, file: !3, line: 764, type: !3479)
!5275 = !DILocation(line: 764, column: 7, scope: !4745)
!5276 = !DILocation(line: 768, column: 13, scope: !4745)
!5277 = !DILocation(line: 768, column: 3, scope: !4745)
!5278 = !DILocation(line: 772, column: 25, scope: !4745)
!5279 = !DILocation(line: 772, column: 39, scope: !4745)
!5280 = !DILocation(line: 772, column: 11, scope: !4745)
!5281 = !DILocation(line: 772, column: 9, scope: !4745)
!5282 = !DILocation(line: 773, column: 7, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 773, column: 7)
!5284 = !DILocation(line: 773, column: 13, scope: !5283)
!5285 = !DILocation(line: 773, column: 16, scope: !5283)
!5286 = !DILocation(line: 773, column: 7, scope: !4745)
!5287 = !DILocation(line: 774, column: 19, scope: !5283)
!5288 = !DILocation(line: 774, column: 5, scope: !5283)
!5289 = !DILocation(line: 782, column: 23, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 781, column: 5)
!5291 = !DILocation(line: 782, column: 47, scope: !5290)
!5292 = !DILocation(line: 782, column: 7, scope: !5290)
!5293 = !DILocation(line: 785, column: 21, scope: !5290)
!5294 = !DILocation(line: 785, column: 7, scope: !5290)
!5295 = !DILocation(line: 789, column: 7, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 789, column: 7)
!5297 = !DILocation(line: 789, column: 7, scope: !4745)
!5298 = !DILocalVariable(name: "i", scope: !5299, file: !3, line: 792, type: !3777)
!5299 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 790, column: 5)
!5300 = !DILocation(line: 792, column: 14, scope: !5299)
!5301 = !DILocation(line: 795, column: 14, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 795, column: 7)
!5303 = !DILocation(line: 795, column: 12, scope: !5302)
!5304 = !DILocation(line: 795, column: 19, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5302, file: !3, line: 795, column: 7)
!5306 = !DILocation(line: 795, column: 21, scope: !5305)
!5307 = !DILocation(line: 795, column: 7, scope: !5302)
!5308 = !DILocation(line: 796, column: 16, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 796, column: 6)
!5310 = !DILocation(line: 796, column: 6, scope: !5309)
!5311 = !DILocation(line: 796, column: 19, scope: !5309)
!5312 = !DILocation(line: 796, column: 24, scope: !5309)
!5313 = !DILocation(line: 797, column: 6, scope: !5309)
!5314 = !DILocation(line: 797, column: 19, scope: !5309)
!5315 = !DILocation(line: 797, column: 9, scope: !5309)
!5316 = !DILocation(line: 797, column: 22, scope: !5309)
!5317 = !DILocation(line: 797, column: 25, scope: !5309)
!5318 = !DILocation(line: 796, column: 6, scope: !5305)
!5319 = !DILocation(line: 798, column: 4, scope: !5309)
!5320 = !DILocation(line: 797, column: 28, scope: !5309)
!5321 = !DILocation(line: 795, column: 48, scope: !5305)
!5322 = !DILocation(line: 795, column: 7, scope: !5305)
!5323 = distinct !{!5323, !5307, !5324}
!5324 = !DILocation(line: 798, column: 4, scope: !5302)
!5325 = !DILocation(line: 800, column: 11, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 800, column: 11)
!5327 = !DILocation(line: 800, column: 13, scope: !5326)
!5328 = !DILocation(line: 800, column: 11, scope: !5299)
!5329 = !DILocation(line: 805, column: 31, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 802, column: 2)
!5331 = !DILocation(line: 806, column: 19, scope: !5330)
!5332 = !DILocation(line: 806, column: 6, scope: !5330)
!5333 = !DILocation(line: 805, column: 4, scope: !5330)
!5334 = !DILocation(line: 807, column: 2, scope: !5330)
!5335 = !DILocation(line: 808, column: 5, scope: !5299)
!5336 = !DILocation(line: 812, column: 7, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 812, column: 7)
!5338 = !DILocation(line: 812, column: 7, scope: !4745)
!5339 = !DILocation(line: 813, column: 45, scope: !5337)
!5340 = !DILocation(line: 813, column: 16, scope: !5337)
!5341 = !DILocation(line: 813, column: 5, scope: !5337)
!5342 = !DILocation(line: 826, column: 14, scope: !4745)
!5343 = !DILocation(line: 826, column: 3, scope: !4745)
!5344 = !DILocation(line: 827, column: 1, scope: !4745)
!5345 = distinct !DISubprogram(name: "mathfn_built_in", scope: !3, file: !3, line: 1871, type: !5346, scopeLine: 1872, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5346 = !DISubroutineType(types: !5347)
!5347 = !{!3344, !3344, !573}
!5348 = !DILocalVariable(name: "type", arg: 1, scope: !5345, file: !3, line: 1871, type: !3344)
!5349 = !DILocation(line: 1871, column: 23, scope: !5345)
!5350 = !DILocalVariable(name: "fn", arg: 2, scope: !5345, file: !3, line: 1871, type: !573)
!5351 = !DILocation(line: 1871, column: 52, scope: !5345)
!5352 = !DILocation(line: 1873, column: 29, scope: !5345)
!5353 = !DILocation(line: 1873, column: 35, scope: !5345)
!5354 = !DILocation(line: 1873, column: 10, scope: !5345)
!5355 = !DILocation(line: 1873, column: 3, scope: !5345)
!5356 = distinct !DISubprogram(name: "mathfn_built_in_1", scope: !3, file: !3, line: 1762, type: !5357, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5357 = !DISubroutineType(types: !5358)
!5358 = !{!3344, !3344, !573, !3421}
!5359 = !DILocalVariable(name: "type", arg: 1, scope: !5356, file: !3, line: 1762, type: !3344)
!5360 = !DILocation(line: 1762, column: 25, scope: !5356)
!5361 = !DILocalVariable(name: "fn", arg: 2, scope: !5356, file: !3, line: 1762, type: !573)
!5362 = !DILocation(line: 1762, column: 54, scope: !5356)
!5363 = !DILocalVariable(name: "implicit", arg: 3, scope: !5356, file: !3, line: 1762, type: !3421)
!5364 = !DILocation(line: 1762, column: 63, scope: !5356)
!5365 = !DILocalVariable(name: "fn_arr", scope: !5356, file: !3, line: 1764, type: !5366)
!5366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5367)
!5367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5368, size: 64)
!5368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3344)
!5369 = !DILocation(line: 1764, column: 21, scope: !5356)
!5370 = !DILocation(line: 1765, column: 7, scope: !5356)
!5371 = !DILocalVariable(name: "fcode", scope: !5356, file: !3, line: 1766, type: !573)
!5372 = !DILocation(line: 1766, column: 26, scope: !5356)
!5373 = !DILocalVariable(name: "fcodef", scope: !5356, file: !3, line: 1766, type: !573)
!5374 = !DILocation(line: 1766, column: 33, scope: !5356)
!5375 = !DILocalVariable(name: "fcodel", scope: !5356, file: !3, line: 1766, type: !573)
!5376 = !DILocation(line: 1766, column: 41, scope: !5356)
!5377 = !DILocation(line: 1768, column: 11, scope: !5356)
!5378 = !DILocation(line: 1768, column: 3, scope: !5356)
!5379 = !DILocation(line: 1770, column: 7, scope: !5380)
!5380 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 1769, column: 5)
!5381 = !DILocation(line: 1771, column: 7, scope: !5380)
!5382 = !DILocation(line: 1772, column: 7, scope: !5380)
!5383 = !DILocation(line: 1773, column: 7, scope: !5380)
!5384 = !DILocation(line: 1774, column: 7, scope: !5380)
!5385 = !DILocation(line: 1775, column: 7, scope: !5380)
!5386 = !DILocation(line: 1776, column: 7, scope: !5380)
!5387 = !DILocation(line: 1777, column: 7, scope: !5380)
!5388 = !DILocation(line: 1778, column: 7, scope: !5380)
!5389 = !DILocation(line: 1779, column: 7, scope: !5380)
!5390 = !DILocation(line: 1780, column: 7, scope: !5380)
!5391 = !DILocation(line: 1781, column: 7, scope: !5380)
!5392 = !DILocation(line: 1782, column: 7, scope: !5380)
!5393 = !DILocation(line: 1783, column: 7, scope: !5380)
!5394 = !DILocation(line: 1784, column: 7, scope: !5380)
!5395 = !DILocation(line: 1785, column: 7, scope: !5380)
!5396 = !DILocation(line: 1786, column: 7, scope: !5380)
!5397 = !DILocation(line: 1787, column: 7, scope: !5380)
!5398 = !DILocation(line: 1788, column: 7, scope: !5380)
!5399 = !DILocation(line: 1789, column: 7, scope: !5380)
!5400 = !DILocation(line: 1790, column: 7, scope: !5380)
!5401 = !DILocation(line: 1791, column: 7, scope: !5380)
!5402 = !DILocation(line: 1792, column: 7, scope: !5380)
!5403 = !DILocation(line: 1793, column: 7, scope: !5380)
!5404 = !DILocation(line: 1794, column: 7, scope: !5380)
!5405 = !DILocation(line: 1795, column: 7, scope: !5380)
!5406 = !DILocation(line: 1796, column: 7, scope: !5380)
!5407 = !DILocation(line: 1797, column: 7, scope: !5380)
!5408 = !DILocation(line: 1798, column: 7, scope: !5380)
!5409 = !DILocation(line: 1799, column: 7, scope: !5380)
!5410 = !DILocation(line: 1800, column: 7, scope: !5380)
!5411 = !DILocation(line: 1801, column: 7, scope: !5380)
!5412 = !DILocation(line: 1802, column: 7, scope: !5380)
!5413 = !DILocation(line: 1803, column: 7, scope: !5380)
!5414 = !DILocation(line: 1804, column: 7, scope: !5380)
!5415 = !DILocation(line: 1805, column: 7, scope: !5380)
!5416 = !DILocation(line: 1806, column: 7, scope: !5380)
!5417 = !DILocation(line: 1807, column: 7, scope: !5380)
!5418 = !DILocation(line: 1808, column: 7, scope: !5380)
!5419 = !DILocation(line: 1809, column: 7, scope: !5380)
!5420 = !DILocation(line: 1810, column: 7, scope: !5380)
!5421 = !DILocation(line: 1811, column: 7, scope: !5380)
!5422 = !DILocation(line: 1812, column: 7, scope: !5380)
!5423 = !DILocation(line: 1813, column: 7, scope: !5380)
!5424 = !DILocation(line: 1814, column: 7, scope: !5380)
!5425 = !DILocation(line: 1815, column: 7, scope: !5380)
!5426 = !DILocation(line: 1816, column: 7, scope: !5380)
!5427 = !DILocation(line: 1817, column: 7, scope: !5380)
!5428 = !DILocation(line: 1818, column: 7, scope: !5380)
!5429 = !DILocation(line: 1819, column: 7, scope: !5380)
!5430 = !DILocation(line: 1820, column: 7, scope: !5380)
!5431 = !DILocation(line: 1821, column: 7, scope: !5380)
!5432 = !DILocation(line: 1822, column: 7, scope: !5380)
!5433 = !DILocation(line: 1823, column: 7, scope: !5380)
!5434 = !DILocation(line: 1824, column: 7, scope: !5380)
!5435 = !DILocation(line: 1825, column: 7, scope: !5380)
!5436 = !DILocation(line: 1826, column: 7, scope: !5380)
!5437 = !DILocation(line: 1827, column: 7, scope: !5380)
!5438 = !DILocation(line: 1828, column: 7, scope: !5380)
!5439 = !DILocation(line: 1829, column: 7, scope: !5380)
!5440 = !DILocation(line: 1830, column: 7, scope: !5380)
!5441 = !DILocation(line: 1831, column: 7, scope: !5380)
!5442 = !DILocation(line: 1832, column: 7, scope: !5380)
!5443 = !DILocation(line: 1833, column: 7, scope: !5380)
!5444 = !DILocation(line: 1834, column: 7, scope: !5380)
!5445 = !DILocation(line: 1835, column: 7, scope: !5380)
!5446 = !DILocation(line: 1836, column: 7, scope: !5380)
!5447 = !DILocation(line: 1837, column: 7, scope: !5380)
!5448 = !DILocation(line: 1838, column: 7, scope: !5380)
!5449 = !DILocation(line: 1839, column: 7, scope: !5380)
!5450 = !DILocation(line: 1840, column: 7, scope: !5380)
!5451 = !DILocation(line: 1841, column: 7, scope: !5380)
!5452 = !DILocation(line: 1842, column: 7, scope: !5380)
!5453 = !DILocation(line: 1843, column: 7, scope: !5380)
!5454 = !DILocation(line: 1844, column: 7, scope: !5380)
!5455 = !DILocation(line: 1845, column: 7, scope: !5380)
!5456 = !DILocation(line: 1846, column: 7, scope: !5380)
!5457 = !DILocation(line: 1847, column: 7, scope: !5380)
!5458 = !DILocation(line: 1848, column: 7, scope: !5380)
!5459 = !DILocation(line: 1849, column: 7, scope: !5380)
!5460 = !DILocation(line: 1850, column: 7, scope: !5380)
!5461 = !DILocation(line: 1851, column: 7, scope: !5380)
!5462 = !DILocation(line: 1852, column: 7, scope: !5380)
!5463 = !DILocation(line: 1855, column: 2, scope: !5380)
!5464 = !DILocation(line: 1858, column: 7, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 1858, column: 7)
!5466 = !DILocation(line: 1858, column: 35, scope: !5465)
!5467 = !DILocation(line: 1858, column: 32, scope: !5465)
!5468 = !DILocation(line: 1858, column: 7, scope: !5356)
!5469 = !DILocation(line: 1859, column: 12, scope: !5465)
!5470 = !DILocation(line: 1859, column: 19, scope: !5465)
!5471 = !DILocation(line: 1859, column: 5, scope: !5465)
!5472 = !DILocation(line: 1860, column: 12, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1860, column: 12)
!5474 = !DILocation(line: 1860, column: 40, scope: !5473)
!5475 = !DILocation(line: 1860, column: 37, scope: !5473)
!5476 = !DILocation(line: 1860, column: 12, scope: !5465)
!5477 = !DILocation(line: 1861, column: 12, scope: !5473)
!5478 = !DILocation(line: 1861, column: 19, scope: !5473)
!5479 = !DILocation(line: 1861, column: 5, scope: !5473)
!5480 = !DILocation(line: 1862, column: 12, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 1862, column: 12)
!5482 = !DILocation(line: 1862, column: 40, scope: !5481)
!5483 = !DILocation(line: 1862, column: 37, scope: !5481)
!5484 = !DILocation(line: 1862, column: 12, scope: !5473)
!5485 = !DILocation(line: 1863, column: 12, scope: !5481)
!5486 = !DILocation(line: 1863, column: 19, scope: !5481)
!5487 = !DILocation(line: 1863, column: 5, scope: !5481)
!5488 = !DILocation(line: 1865, column: 5, scope: !5481)
!5489 = !DILocation(line: 1866, column: 1, scope: !5356)
!5490 = distinct !DISubprogram(name: "builtin_strncpy_read_str", scope: !3, file: !3, line: 3622, type: !5491, scopeLine: 3624, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!3479, !3584, !3359, !5}
!5493 = !DILocalVariable(name: "data", arg: 1, scope: !5490, file: !3, line: 3622, type: !3584)
!5494 = !DILocation(line: 3622, column: 33, scope: !5490)
!5495 = !DILocalVariable(name: "offset", arg: 2, scope: !5490, file: !3, line: 3622, type: !3359)
!5496 = !DILocation(line: 3622, column: 53, scope: !5490)
!5497 = !DILocalVariable(name: "mode", arg: 3, scope: !5490, file: !3, line: 3623, type: !5)
!5498 = !DILocation(line: 3623, column: 24, scope: !5490)
!5499 = !DILocalVariable(name: "str", scope: !5490, file: !3, line: 3625, type: !3504)
!5500 = !DILocation(line: 3625, column: 15, scope: !5490)
!5501 = !DILocation(line: 3625, column: 36, scope: !5490)
!5502 = !DILocation(line: 3627, column: 32, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5490, file: !3, line: 3627, column: 7)
!5504 = !DILocation(line: 3627, column: 49, scope: !5503)
!5505 = !DILocation(line: 3627, column: 41, scope: !5503)
!5506 = !DILocation(line: 3627, column: 39, scope: !5503)
!5507 = !DILocation(line: 3627, column: 7, scope: !5490)
!5508 = !DILocation(line: 3628, column: 12, scope: !5503)
!5509 = !DILocation(line: 3628, column: 5, scope: !5503)
!5510 = !DILocation(line: 3630, column: 21, scope: !5490)
!5511 = !DILocation(line: 3630, column: 27, scope: !5490)
!5512 = !DILocation(line: 3630, column: 25, scope: !5490)
!5513 = !DILocation(line: 3630, column: 35, scope: !5490)
!5514 = !DILocation(line: 3630, column: 10, scope: !5490)
!5515 = !DILocation(line: 3630, column: 3, scope: !5490)
!5516 = !DILocation(line: 3631, column: 1, scope: !5490)
!5517 = distinct !DISubprogram(name: "c_readstr", scope: !3, file: !3, line: 547, type: !5518, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5518 = !DISubroutineType(types: !5519)
!5519 = !{!3479, !3504, !5}
!5520 = !DILocalVariable(name: "str", arg: 1, scope: !5517, file: !3, line: 547, type: !3504)
!5521 = !DILocation(line: 547, column: 24, scope: !5517)
!5522 = !DILocalVariable(name: "mode", arg: 2, scope: !5517, file: !3, line: 547, type: !5)
!5523 = !DILocation(line: 547, column: 47, scope: !5517)
!5524 = !DILocalVariable(name: "c", scope: !5517, file: !3, line: 549, type: !5525)
!5525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3359, size: 128, elements: !3548)
!5526 = !DILocation(line: 549, column: 17, scope: !5517)
!5527 = !DILocalVariable(name: "ch", scope: !5517, file: !3, line: 550, type: !3359)
!5528 = !DILocation(line: 550, column: 17, scope: !5517)
!5529 = !DILocalVariable(name: "i", scope: !5517, file: !3, line: 551, type: !7)
!5530 = !DILocation(line: 551, column: 16, scope: !5517)
!5531 = !DILocalVariable(name: "j", scope: !5517, file: !3, line: 551, type: !7)
!5532 = !DILocation(line: 551, column: 19, scope: !5517)
!5533 = !DILocation(line: 553, column: 3, scope: !5517)
!5534 = !DILocation(line: 555, column: 3, scope: !5517)
!5535 = !DILocation(line: 555, column: 8, scope: !5517)
!5536 = !DILocation(line: 556, column: 3, scope: !5517)
!5537 = !DILocation(line: 556, column: 8, scope: !5517)
!5538 = !DILocation(line: 557, column: 6, scope: !5517)
!5539 = !DILocation(line: 558, column: 10, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 558, column: 3)
!5541 = !DILocation(line: 558, column: 8, scope: !5540)
!5542 = !DILocation(line: 558, column: 15, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5540, file: !3, line: 558, column: 3)
!5544 = !DILocation(line: 558, column: 19, scope: !5543)
!5545 = !DILocation(line: 558, column: 17, scope: !5543)
!5546 = !DILocation(line: 558, column: 3, scope: !5540)
!5547 = !DILocation(line: 560, column: 11, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 559, column: 5)
!5549 = !DILocation(line: 560, column: 9, scope: !5548)
!5550 = !DILocation(line: 566, column: 9, scope: !5548)
!5551 = !DILocation(line: 567, column: 7, scope: !5548)
!5552 = !DILocation(line: 569, column: 11, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 569, column: 11)
!5554 = !DILocation(line: 569, column: 11, scope: !5548)
!5555 = !DILocation(line: 570, column: 23, scope: !5553)
!5556 = !DILocation(line: 570, column: 27, scope: !5553)
!5557 = !DILocation(line: 570, column: 7, scope: !5553)
!5558 = !DILocation(line: 570, column: 5, scope: !5553)
!5559 = !DILocation(line: 570, column: 2, scope: !5553)
!5560 = !DILocation(line: 571, column: 40, scope: !5548)
!5561 = !DILocation(line: 571, column: 47, scope: !5548)
!5562 = !DILocation(line: 571, column: 49, scope: !5548)
!5563 = !DILocation(line: 571, column: 43, scope: !5548)
!5564 = !DILocation(line: 571, column: 9, scope: !5548)
!5565 = !DILocation(line: 571, column: 11, scope: !5548)
!5566 = !DILocation(line: 571, column: 7, scope: !5548)
!5567 = !DILocation(line: 571, column: 37, scope: !5548)
!5568 = !DILocation(line: 572, column: 5, scope: !5548)
!5569 = !DILocation(line: 558, column: 42, scope: !5543)
!5570 = !DILocation(line: 558, column: 3, scope: !5543)
!5571 = distinct !{!5571, !5546, !5572}
!5572 = !DILocation(line: 572, column: 5, scope: !5540)
!5573 = !DILocation(line: 573, column: 30, scope: !5517)
!5574 = !DILocation(line: 573, column: 36, scope: !5517)
!5575 = !DILocation(line: 573, column: 42, scope: !5517)
!5576 = !DILocation(line: 573, column: 10, scope: !5517)
!5577 = !DILocation(line: 573, column: 3, scope: !5517)
!5578 = distinct !DISubprogram(name: "builtin_memset_read_str", scope: !3, file: !3, line: 3689, type: !5491, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5579 = !DILocalVariable(name: "data", arg: 1, scope: !5578, file: !3, line: 3689, type: !3584)
!5580 = !DILocation(line: 3689, column: 32, scope: !5578)
!5581 = !DILocalVariable(name: "offset", arg: 2, scope: !5578, file: !3, line: 3689, type: !3359)
!5582 = !DILocation(line: 3689, column: 52, scope: !5578)
!5583 = !DILocalVariable(name: "mode", arg: 3, scope: !5578, file: !3, line: 3690, type: !5)
!5584 = !DILocation(line: 3690, column: 23, scope: !5578)
!5585 = !DILocalVariable(name: "c", scope: !5578, file: !3, line: 3692, type: !3504)
!5586 = !DILocation(line: 3692, column: 15, scope: !5578)
!5587 = !DILocation(line: 3692, column: 34, scope: !5578)
!5588 = !DILocalVariable(name: "p", scope: !5578, file: !3, line: 3693, type: !3569)
!5589 = !DILocation(line: 3693, column: 9, scope: !5578)
!5590 = !DILocation(line: 3693, column: 13, scope: !5578)
!5591 = !DILocation(line: 3695, column: 11, scope: !5578)
!5592 = !DILocation(line: 3695, column: 15, scope: !5578)
!5593 = !DILocation(line: 3695, column: 14, scope: !5578)
!5594 = !DILocation(line: 3695, column: 3, scope: !5578)
!5595 = !DILocation(line: 3695, column: 18, scope: !5578)
!5596 = !DILocation(line: 3697, column: 21, scope: !5578)
!5597 = !DILocation(line: 3697, column: 24, scope: !5578)
!5598 = !DILocation(line: 3697, column: 10, scope: !5578)
!5599 = !DILocation(line: 3697, column: 3, scope: !5578)
!5600 = distinct !DISubprogram(name: "expand_builtin_saveregs", scope: !3, file: !3, line: 4275, type: !5601, scopeLine: 4276, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5601 = !DISubroutineType(types: !5602)
!5602 = !{!3479}
!5603 = !DILocalVariable(name: "val", scope: !5600, file: !3, line: 4277, type: !3479)
!5604 = !DILocation(line: 4277, column: 7, scope: !5600)
!5605 = !DILocalVariable(name: "seq", scope: !5600, file: !3, line: 4277, type: !3479)
!5606 = !DILocation(line: 4277, column: 12, scope: !5600)
!5607 = !DILocation(line: 4281, column: 7, scope: !5608)
!5608 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 4281, column: 7)
!5609 = !DILocation(line: 4281, column: 22, scope: !5608)
!5610 = !DILocation(line: 4281, column: 7, scope: !5600)
!5611 = !DILocation(line: 4282, column: 12, scope: !5608)
!5612 = !DILocation(line: 4282, column: 5, scope: !5608)
!5613 = !DILocation(line: 4288, column: 3, scope: !5600)
!5614 = !DILocation(line: 4291, column: 23, scope: !5600)
!5615 = !DILocation(line: 4291, column: 9, scope: !5600)
!5616 = !DILocation(line: 4291, column: 7, scope: !5600)
!5617 = !DILocation(line: 4293, column: 9, scope: !5600)
!5618 = !DILocation(line: 4293, column: 7, scope: !5600)
!5619 = !DILocation(line: 4294, column: 3, scope: !5600)
!5620 = !DILocation(line: 4296, column: 20, scope: !5600)
!5621 = !DILocation(line: 4296, column: 18, scope: !5600)
!5622 = !DILocation(line: 4301, column: 3, scope: !5600)
!5623 = !DILocation(line: 4302, column: 20, scope: !5600)
!5624 = !DILocation(line: 4302, column: 25, scope: !5600)
!5625 = !DILocation(line: 4302, column: 3, scope: !5600)
!5626 = !DILocation(line: 4303, column: 3, scope: !5600)
!5627 = !DILocation(line: 4305, column: 10, scope: !5600)
!5628 = !DILocation(line: 4305, column: 3, scope: !5600)
!5629 = !DILocation(line: 4306, column: 1, scope: !5600)
!5630 = distinct !DISubprogram(name: "std_build_builtin_va_list", scope: !3, file: !3, line: 4403, type: !5631, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5631 = !DISubroutineType(types: !5632)
!5632 = !{!3344}
!5633 = !DILocation(line: 4405, column: 10, scope: !5630)
!5634 = !DILocation(line: 4405, column: 3, scope: !5630)
!5635 = distinct !DISubprogram(name: "std_fn_abi_va_list", scope: !3, file: !3, line: 4411, type: !5636, scopeLine: 4412, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5636 = !DISubroutineType(types: !5637)
!5637 = !{!3344, !3344}
!5638 = !DILocalVariable(name: "fndecl", arg: 1, scope: !5635, file: !3, line: 4411, type: !3344)
!5639 = !DILocation(line: 4411, column: 26, scope: !5635)
!5640 = !DILocation(line: 4413, column: 10, scope: !5635)
!5641 = !DILocation(line: 4413, column: 3, scope: !5635)
!5642 = distinct !DISubprogram(name: "std_canonical_va_list_type", scope: !3, file: !3, line: 4419, type: !5636, scopeLine: 4420, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5643 = !DILocalVariable(name: "type", arg: 1, scope: !5642, file: !3, line: 4419, type: !3344)
!5644 = !DILocation(line: 4419, column: 34, scope: !5642)
!5645 = !DILocalVariable(name: "wtype", scope: !5642, file: !3, line: 4421, type: !3344)
!5646 = !DILocation(line: 4421, column: 8, scope: !5642)
!5647 = !DILocalVariable(name: "htype", scope: !5642, file: !3, line: 4421, type: !3344)
!5648 = !DILocation(line: 4421, column: 15, scope: !5642)
!5649 = !DILocation(line: 4423, column: 7, scope: !5650)
!5650 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 4423, column: 7)
!5651 = !DILocation(line: 4423, column: 7, scope: !5642)
!5652 = !DILocation(line: 4424, column: 12, scope: !5650)
!5653 = !DILocation(line: 4424, column: 10, scope: !5650)
!5654 = !DILocation(line: 4424, column: 5, scope: !5650)
!5655 = !DILocation(line: 4425, column: 12, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5650, file: !3, line: 4425, column: 12)
!5657 = !DILocation(line: 4425, column: 34, scope: !5656)
!5658 = !DILocation(line: 4425, column: 37, scope: !5656)
!5659 = !DILocation(line: 4425, column: 12, scope: !5650)
!5660 = !DILocation(line: 4426, column: 12, scope: !5656)
!5661 = !DILocation(line: 4426, column: 10, scope: !5656)
!5662 = !DILocation(line: 4426, column: 5, scope: !5656)
!5663 = !DILocation(line: 4427, column: 11, scope: !5642)
!5664 = !DILocation(line: 4427, column: 9, scope: !5642)
!5665 = !DILocation(line: 4428, column: 11, scope: !5642)
!5666 = !DILocation(line: 4428, column: 9, scope: !5642)
!5667 = !DILocation(line: 4430, column: 7, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 4430, column: 7)
!5669 = !DILocation(line: 4430, column: 25, scope: !5668)
!5670 = !DILocation(line: 4430, column: 40, scope: !5668)
!5671 = !DILocation(line: 4430, column: 43, scope: !5668)
!5672 = !DILocation(line: 4430, column: 7, scope: !5642)
!5673 = !DILocation(line: 4431, column: 13, scope: !5668)
!5674 = !DILocation(line: 4431, column: 11, scope: !5668)
!5675 = !DILocation(line: 4431, column: 5, scope: !5668)
!5676 = !DILocation(line: 4432, column: 12, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5668, file: !3, line: 4432, column: 12)
!5678 = !DILocation(line: 4432, column: 30, scope: !5677)
!5679 = !DILocation(line: 4432, column: 12, scope: !5668)
!5680 = !DILocation(line: 4438, column: 11, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 4438, column: 11)
!5682 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 4433, column: 5)
!5683 = !DILocation(line: 4438, column: 29, scope: !5681)
!5684 = !DILocation(line: 4439, column: 4, scope: !5681)
!5685 = !DILocation(line: 4439, column: 7, scope: !5681)
!5686 = !DILocation(line: 4438, column: 11, scope: !5682)
!5687 = !DILocation(line: 4441, column: 12, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 4440, column: 2)
!5689 = !DILocation(line: 4441, column: 10, scope: !5688)
!5690 = !DILocation(line: 4442, column: 12, scope: !5688)
!5691 = !DILocation(line: 4442, column: 10, scope: !5688)
!5692 = !DILocation(line: 4443, column: 2, scope: !5688)
!5693 = !DILocation(line: 4444, column: 5, scope: !5682)
!5694 = !DILocation(line: 4445, column: 7, scope: !5695)
!5695 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 4445, column: 7)
!5696 = !DILocation(line: 4445, column: 36, scope: !5695)
!5697 = !DILocation(line: 4445, column: 33, scope: !5695)
!5698 = !DILocation(line: 4445, column: 7, scope: !5642)
!5699 = !DILocation(line: 4446, column: 12, scope: !5695)
!5700 = !DILocation(line: 4446, column: 5, scope: !5695)
!5701 = !DILocation(line: 4448, column: 3, scope: !5642)
!5702 = !DILocation(line: 4449, column: 1, scope: !5642)
!5703 = distinct !DISubprogram(name: "std_expand_builtin_va_start", scope: !3, file: !3, line: 4455, type: !5704, scopeLine: 4456, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5704 = !DISubroutineType(types: !5705)
!5705 = !{null, !3344, !3479}
!5706 = !DILocalVariable(name: "valist", arg: 1, scope: !5703, file: !3, line: 4455, type: !3344)
!5707 = !DILocation(line: 4455, column: 35, scope: !5703)
!5708 = !DILocalVariable(name: "nextarg", arg: 2, scope: !5703, file: !3, line: 4455, type: !3479)
!5709 = !DILocation(line: 4455, column: 47, scope: !5703)
!5710 = !DILocalVariable(name: "va_r", scope: !5703, file: !3, line: 4457, type: !3479)
!5711 = !DILocation(line: 4457, column: 7, scope: !5703)
!5712 = !DILocation(line: 4457, column: 27, scope: !5703)
!5713 = !DILocation(line: 4457, column: 14, scope: !5703)
!5714 = !DILocation(line: 4458, column: 17, scope: !5703)
!5715 = !DILocation(line: 4458, column: 23, scope: !5703)
!5716 = !DILocation(line: 4458, column: 3, scope: !5703)
!5717 = !DILocation(line: 4459, column: 1, scope: !5703)
!5718 = distinct !DISubprogram(name: "expand_expr", scope: !554, file: !554, line: 555, type: !5719, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5719 = !DISubroutineType(types: !5720)
!5720 = !{!3479, !3344, !3479, !5, !1427}
!5721 = !DILocalVariable(name: "exp", arg: 1, scope: !5718, file: !554, line: 555, type: !3344)
!5722 = !DILocation(line: 555, column: 19, scope: !5718)
!5723 = !DILocalVariable(name: "target", arg: 2, scope: !5718, file: !554, line: 555, type: !3479)
!5724 = !DILocation(line: 555, column: 28, scope: !5718)
!5725 = !DILocalVariable(name: "mode", arg: 3, scope: !5718, file: !554, line: 555, type: !5)
!5726 = !DILocation(line: 555, column: 54, scope: !5718)
!5727 = !DILocalVariable(name: "modifier", arg: 4, scope: !5718, file: !554, line: 556, type: !1427)
!5728 = !DILocation(line: 556, column: 28, scope: !5718)
!5729 = !DILocation(line: 558, column: 28, scope: !5718)
!5730 = !DILocation(line: 558, column: 33, scope: !5718)
!5731 = !DILocation(line: 558, column: 41, scope: !5718)
!5732 = !DILocation(line: 558, column: 47, scope: !5718)
!5733 = !DILocation(line: 558, column: 10, scope: !5718)
!5734 = !DILocation(line: 558, column: 3, scope: !5718)
!5735 = distinct !DISubprogram(name: "std_gimplify_va_arg_expr", scope: !3, file: !3, line: 4494, type: !5736, scopeLine: 4496, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5736 = !DISubroutineType(types: !5737)
!5737 = !{!3344, !3344, !3344, !4761, !4761}
!5738 = !DILocalVariable(name: "valist", arg: 1, scope: !5735, file: !3, line: 4494, type: !3344)
!5739 = !DILocation(line: 4494, column: 32, scope: !5735)
!5740 = !DILocalVariable(name: "type", arg: 2, scope: !5735, file: !3, line: 4494, type: !3344)
!5741 = !DILocation(line: 4494, column: 45, scope: !5735)
!5742 = !DILocalVariable(name: "pre_p", arg: 3, scope: !5735, file: !3, line: 4494, type: !4761)
!5743 = !DILocation(line: 4494, column: 63, scope: !5735)
!5744 = !DILocalVariable(name: "post_p", arg: 4, scope: !5735, file: !3, line: 4495, type: !4761)
!5745 = !DILocation(line: 4495, column: 18, scope: !5735)
!5746 = !DILocalVariable(name: "addr", scope: !5735, file: !3, line: 4497, type: !3344)
!5747 = !DILocation(line: 4497, column: 8, scope: !5735)
!5748 = !DILocalVariable(name: "t", scope: !5735, file: !3, line: 4497, type: !3344)
!5749 = !DILocation(line: 4497, column: 14, scope: !5735)
!5750 = !DILocalVariable(name: "type_size", scope: !5735, file: !3, line: 4497, type: !3344)
!5751 = !DILocation(line: 4497, column: 17, scope: !5735)
!5752 = !DILocalVariable(name: "rounded_size", scope: !5735, file: !3, line: 4497, type: !3344)
!5753 = !DILocation(line: 4497, column: 28, scope: !5735)
!5754 = !DILocalVariable(name: "valist_tmp", scope: !5735, file: !3, line: 4497, type: !3344)
!5755 = !DILocation(line: 4497, column: 42, scope: !5735)
!5756 = !DILocalVariable(name: "align", scope: !5735, file: !3, line: 4498, type: !3357)
!5757 = !DILocation(line: 4498, column: 26, scope: !5735)
!5758 = !DILocalVariable(name: "boundary", scope: !5735, file: !3, line: 4498, type: !3357)
!5759 = !DILocation(line: 4498, column: 33, scope: !5735)
!5760 = !DILocalVariable(name: "indirect", scope: !5735, file: !3, line: 4499, type: !3421)
!5761 = !DILocation(line: 4499, column: 8, scope: !5735)
!5762 = !DILocation(line: 4508, column: 39, scope: !5735)
!5763 = !DILocation(line: 4508, column: 57, scope: !5735)
!5764 = !DILocation(line: 4508, column: 14, scope: !5735)
!5765 = !DILocation(line: 4508, column: 12, scope: !5735)
!5766 = !DILocation(line: 4509, column: 7, scope: !5767)
!5767 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4509, column: 7)
!5768 = !DILocation(line: 4509, column: 7, scope: !5735)
!5769 = !DILocation(line: 4510, column: 32, scope: !5767)
!5770 = !DILocation(line: 4510, column: 12, scope: !5767)
!5771 = !DILocation(line: 4510, column: 10, scope: !5767)
!5772 = !DILocation(line: 4510, column: 5, scope: !5767)
!5773 = !DILocation(line: 4512, column: 9, scope: !5735)
!5774 = !DILocation(line: 4513, column: 14, scope: !5735)
!5775 = !DILocation(line: 4513, column: 12, scope: !5735)
!5776 = !DILocation(line: 4519, column: 7, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4519, column: 7)
!5778 = !DILocation(line: 4519, column: 16, scope: !5777)
!5779 = !DILocation(line: 4519, column: 7, scope: !5735)
!5780 = !DILocation(line: 4520, column: 14, scope: !5777)
!5781 = !DILocation(line: 4520, column: 5, scope: !5777)
!5782 = !DILocation(line: 4522, column: 12, scope: !5735)
!5783 = !DILocation(line: 4525, column: 41, scope: !5735)
!5784 = !DILocation(line: 4525, column: 49, scope: !5735)
!5785 = !DILocation(line: 4525, column: 16, scope: !5735)
!5786 = !DILocation(line: 4525, column: 14, scope: !5735)
!5787 = !DILocation(line: 4529, column: 7, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4529, column: 7)
!5789 = !DILocation(line: 4529, column: 18, scope: !5788)
!5790 = !DILocation(line: 4529, column: 16, scope: !5788)
!5791 = !DILocation(line: 4530, column: 7, scope: !5788)
!5792 = !DILocation(line: 4530, column: 26, scope: !5788)
!5793 = !DILocation(line: 4530, column: 11, scope: !5788)
!5794 = !DILocation(line: 4529, column: 7, scope: !5735)
!5795 = !DILocation(line: 4532, column: 11, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 4531, column: 5)
!5797 = !DILocation(line: 4532, column: 9, scope: !5796)
!5798 = !DILocation(line: 4536, column: 25, scope: !5796)
!5799 = !DILocation(line: 4536, column: 28, scope: !5796)
!5800 = !DILocation(line: 4536, column: 7, scope: !5796)
!5801 = !DILocation(line: 4538, column: 11, scope: !5796)
!5802 = !DILocation(line: 4538, column: 9, scope: !5796)
!5803 = !DILocation(line: 4539, column: 11, scope: !5796)
!5804 = !DILocation(line: 4539, column: 9, scope: !5796)
!5805 = !DILocation(line: 4543, column: 25, scope: !5796)
!5806 = !DILocation(line: 4543, column: 28, scope: !5796)
!5807 = !DILocation(line: 4543, column: 7, scope: !5796)
!5808 = !DILocation(line: 4544, column: 5, scope: !5796)
!5809 = !DILocation(line: 4546, column: 16, scope: !5788)
!5810 = !DILocation(line: 4546, column: 14, scope: !5788)
!5811 = !DILocation(line: 4551, column: 12, scope: !5735)
!5812 = !DILocation(line: 4552, column: 7, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4552, column: 7)
!5814 = !DILocation(line: 4552, column: 18, scope: !5813)
!5815 = !DILocation(line: 4552, column: 16, scope: !5813)
!5816 = !DILocation(line: 4552, column: 7, scope: !5735)
!5817 = !DILocation(line: 4554, column: 39, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 4553, column: 5)
!5819 = !DILocation(line: 4554, column: 14, scope: !5818)
!5820 = !DILocation(line: 4554, column: 12, scope: !5818)
!5821 = !DILocation(line: 4555, column: 27, scope: !5818)
!5822 = !DILocation(line: 4555, column: 7, scope: !5818)
!5823 = !DILocation(line: 4555, column: 25, scope: !5818)
!5824 = !DILocation(line: 4556, column: 5, scope: !5818)
!5825 = !DILocation(line: 4559, column: 30, scope: !5735)
!5826 = !DILocation(line: 4559, column: 15, scope: !5735)
!5827 = !DILocation(line: 4559, column: 13, scope: !5735)
!5828 = !DILocation(line: 4560, column: 18, scope: !5735)
!5829 = !DILocation(line: 4560, column: 16, scope: !5735)
!5830 = !DILocation(line: 4563, column: 33, scope: !5735)
!5831 = !DILocation(line: 4563, column: 40, scope: !5735)
!5832 = !DILocation(line: 4563, column: 3, scope: !5735)
!5833 = !DILocation(line: 4566, column: 10, scope: !5735)
!5834 = !DILocation(line: 4566, column: 8, scope: !5735)
!5835 = !DILocation(line: 4579, column: 7, scope: !5735)
!5836 = !DILocation(line: 4579, column: 5, scope: !5735)
!5837 = !DILocation(line: 4580, column: 7, scope: !5735)
!5838 = !DILocation(line: 4580, column: 5, scope: !5735)
!5839 = !DILocation(line: 4581, column: 21, scope: !5735)
!5840 = !DILocation(line: 4581, column: 24, scope: !5735)
!5841 = !DILocation(line: 4581, column: 3, scope: !5735)
!5842 = !DILocation(line: 4583, column: 10, scope: !5735)
!5843 = !DILocation(line: 4583, column: 8, scope: !5735)
!5844 = !DILocation(line: 4585, column: 7, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4585, column: 7)
!5846 = !DILocation(line: 4585, column: 7, scope: !5735)
!5847 = !DILocation(line: 4586, column: 39, scope: !5845)
!5848 = !DILocation(line: 4586, column: 12, scope: !5845)
!5849 = !DILocation(line: 4586, column: 10, scope: !5845)
!5850 = !DILocation(line: 4586, column: 5, scope: !5845)
!5851 = !DILocation(line: 4588, column: 37, scope: !5735)
!5852 = !DILocation(line: 4588, column: 10, scope: !5735)
!5853 = !DILocation(line: 4588, column: 3, scope: !5735)
!5854 = distinct !DISubprogram(name: "build_va_arg_indirect_ref", scope: !3, file: !3, line: 4594, type: !5636, scopeLine: 4595, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!5855 = !DILocalVariable(name: "addr", arg: 1, scope: !5854, file: !3, line: 4594, type: !3344)
!5856 = !DILocation(line: 4594, column: 33, scope: !5854)
!5857 = !DILocation(line: 4596, column: 39, scope: !5854)
!5858 = !DILocation(line: 4596, column: 61, scope: !5854)
!5859 = !DILocation(line: 4596, column: 10, scope: !5854)
!5860 = !DILocation(line: 4596, column: 8, scope: !5854)
!5861 = !DILocation(line: 4598, column: 7, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5854, file: !3, line: 4598, column: 7)
!5863 = !DILocation(line: 4598, column: 7, scope: !5854)
!5864 = !DILocation(line: 4599, column: 14, scope: !5862)
!5865 = !DILocation(line: 4599, column: 5, scope: !5862)
!5866 = !DILocation(line: 4601, column: 10, scope: !5854)
!5867 = !DILocation(line: 4601, column: 3, scope: !5854)
!5868 = !DILocalVariable(name: "expr_p", arg: 1, scope: !4758, file: !3, line: 4618, type: !3666)
!5869 = !DILocation(line: 4618, column: 29, scope: !4758)
!5870 = !DILocalVariable(name: "pre_p", arg: 2, scope: !4758, file: !3, line: 4618, type: !4761)
!5871 = !DILocation(line: 4618, column: 49, scope: !4758)
!5872 = !DILocalVariable(name: "post_p", arg: 3, scope: !4758, file: !3, line: 4618, type: !4761)
!5873 = !DILocation(line: 4618, column: 68, scope: !4758)
!5874 = !DILocalVariable(name: "promoted_type", scope: !4758, file: !3, line: 4620, type: !3344)
!5875 = !DILocation(line: 4620, column: 8, scope: !4758)
!5876 = !DILocalVariable(name: "have_va_type", scope: !4758, file: !3, line: 4620, type: !3344)
!5877 = !DILocation(line: 4620, column: 23, scope: !4758)
!5878 = !DILocalVariable(name: "valist", scope: !4758, file: !3, line: 4621, type: !3344)
!5879 = !DILocation(line: 4621, column: 8, scope: !4758)
!5880 = !DILocation(line: 4621, column: 17, scope: !4758)
!5881 = !DILocalVariable(name: "type", scope: !4758, file: !3, line: 4622, type: !3344)
!5882 = !DILocation(line: 4622, column: 8, scope: !4758)
!5883 = !DILocation(line: 4622, column: 15, scope: !4758)
!5884 = !DILocalVariable(name: "t", scope: !4758, file: !3, line: 4623, type: !3344)
!5885 = !DILocation(line: 4623, column: 8, scope: !4758)
!5886 = !DILocalVariable(name: "loc", scope: !4758, file: !3, line: 4624, type: !3429)
!5887 = !DILocation(line: 4624, column: 14, scope: !4758)
!5888 = !DILocation(line: 4624, column: 20, scope: !4758)
!5889 = !DILocation(line: 4627, column: 18, scope: !4758)
!5890 = !DILocation(line: 4627, column: 16, scope: !4758)
!5891 = !DILocation(line: 4628, column: 7, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 4628, column: 7)
!5893 = !DILocation(line: 4628, column: 23, scope: !5892)
!5894 = !DILocation(line: 4628, column: 20, scope: !5892)
!5895 = !DILocation(line: 4628, column: 7, scope: !4758)
!5896 = !DILocation(line: 4629, column: 5, scope: !5892)
!5897 = !DILocation(line: 4630, column: 26, scope: !4758)
!5898 = !DILocation(line: 4630, column: 50, scope: !4758)
!5899 = !DILocation(line: 4630, column: 18, scope: !4758)
!5900 = !DILocation(line: 4630, column: 16, scope: !4758)
!5901 = !DILocation(line: 4632, column: 7, scope: !5902)
!5902 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 4632, column: 7)
!5903 = !DILocation(line: 4632, column: 20, scope: !5902)
!5904 = !DILocation(line: 4632, column: 7, scope: !4758)
!5905 = !DILocation(line: 4634, column: 17, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 4633, column: 5)
!5907 = !DILocation(line: 4634, column: 7, scope: !5906)
!5908 = !DILocation(line: 4635, column: 7, scope: !5906)
!5909 = !DILocation(line: 4640, column: 41, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 4640, column: 7)
!5911 = !DILocation(line: 4640, column: 59, scope: !5910)
!5912 = !DILocation(line: 4640, column: 24, scope: !5910)
!5913 = !DILocation(line: 4640, column: 22, scope: !5910)
!5914 = !DILocation(line: 4641, column: 8, scope: !5910)
!5915 = !DILocation(line: 4641, column: 5, scope: !5910)
!5916 = !DILocation(line: 4640, column: 7, scope: !4758)
!5917 = !DILocalVariable(name: "warned", scope: !5918, file: !3, line: 4644, type: !3421)
!5918 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 4642, column: 5)
!5919 = !DILocation(line: 4644, column: 12, scope: !5918)
!5920 = !DILocation(line: 4649, column: 28, scope: !5918)
!5921 = !DILocation(line: 4651, column: 7, scope: !5918)
!5922 = !DILocation(line: 4651, column: 13, scope: !5918)
!5923 = !DILocation(line: 4649, column: 16, scope: !5918)
!5924 = !DILocation(line: 4649, column: 14, scope: !5918)
!5925 = !DILocation(line: 4652, column: 12, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 4652, column: 11)
!5927 = !DILocation(line: 4652, column: 22, scope: !5926)
!5928 = !DILocation(line: 4652, column: 25, scope: !5926)
!5929 = !DILocation(line: 4652, column: 11, scope: !5918)
!5930 = !DILocation(line: 4654, column: 14, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5926, file: !3, line: 4653, column: 2)
!5932 = !DILocation(line: 4655, column: 12, scope: !5931)
!5933 = !DILocation(line: 4656, column: 5, scope: !5931)
!5934 = !DILocation(line: 4656, column: 20, scope: !5931)
!5935 = !DILocation(line: 4655, column: 4, scope: !5931)
!5936 = !DILocation(line: 4657, column: 2, scope: !5931)
!5937 = !DILocation(line: 4661, column: 11, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 4661, column: 11)
!5939 = !DILocation(line: 4661, column: 11, scope: !5918)
!5940 = !DILocation(line: 4662, column: 10, scope: !5938)
!5941 = !DILocation(line: 4662, column: 2, scope: !5938)
!5942 = !DILocation(line: 4665, column: 25, scope: !5918)
!5943 = !DILocation(line: 4665, column: 33, scope: !5918)
!5944 = !DILocation(line: 4665, column: 7, scope: !5918)
!5945 = !DILocation(line: 4666, column: 32, scope: !5918)
!5946 = !DILocation(line: 4667, column: 11, scope: !5918)
!5947 = !DILocation(line: 4666, column: 11, scope: !5918)
!5948 = !DILocation(line: 4666, column: 9, scope: !5918)
!5949 = !DILocation(line: 4668, column: 25, scope: !5918)
!5950 = !DILocation(line: 4668, column: 28, scope: !5918)
!5951 = !DILocation(line: 4668, column: 7, scope: !5918)
!5952 = !DILocation(line: 4672, column: 31, scope: !5918)
!5953 = !DILocation(line: 4672, column: 17, scope: !5918)
!5954 = !DILocation(line: 4672, column: 8, scope: !5918)
!5955 = !DILocation(line: 4672, column: 15, scope: !5918)
!5956 = !DILocation(line: 4673, column: 7, scope: !5918)
!5957 = !DILocation(line: 4679, column: 11, scope: !5958)
!5958 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 4679, column: 11)
!5959 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 4676, column: 5)
!5960 = !DILocation(line: 4679, column: 36, scope: !5958)
!5961 = !DILocation(line: 4679, column: 11, scope: !5959)
!5962 = !DILocation(line: 4685, column: 8, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5964, file: !3, line: 4685, column: 8)
!5964 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 4680, column: 2)
!5965 = !DILocation(line: 4685, column: 39, scope: !5963)
!5966 = !DILocation(line: 4685, column: 8, scope: !5964)
!5967 = !DILocalVariable(name: "p1", scope: !5968, file: !3, line: 4687, type: !3344)
!5968 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 4686, column: 6)
!5969 = !DILocation(line: 4687, column: 13, scope: !5968)
!5970 = !DILocation(line: 4687, column: 38, scope: !5968)
!5971 = !DILocation(line: 4687, column: 18, scope: !5968)
!5972 = !DILocation(line: 4688, column: 35, scope: !5968)
!5973 = !DILocation(line: 4688, column: 40, scope: !5968)
!5974 = !DILocation(line: 4689, column: 33, scope: !5968)
!5975 = !DILocation(line: 4689, column: 38, scope: !5968)
!5976 = !DILocation(line: 4689, column: 7, scope: !5968)
!5977 = !DILocation(line: 4688, column: 17, scope: !5968)
!5978 = !DILocation(line: 4688, column: 15, scope: !5968)
!5979 = !DILocation(line: 4690, column: 6, scope: !5968)
!5980 = !DILocation(line: 4692, column: 28, scope: !5964)
!5981 = !DILocation(line: 4692, column: 35, scope: !5964)
!5982 = !DILocation(line: 4692, column: 4, scope: !5964)
!5983 = !DILocation(line: 4693, column: 2, scope: !5964)
!5984 = !DILocation(line: 4695, column: 26, scope: !5958)
!5985 = !DILocation(line: 4695, column: 33, scope: !5958)
!5986 = !DILocation(line: 4695, column: 2, scope: !5958)
!5987 = !DILocation(line: 4697, column: 20, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 4697, column: 11)
!5989 = !DILocation(line: 4697, column: 12, scope: !5988)
!5990 = !DILocation(line: 4697, column: 11, scope: !5959)
!5991 = !DILocation(line: 4700, column: 2, scope: !5988)
!5992 = !DILocation(line: 4702, column: 25, scope: !5959)
!5993 = !DILocation(line: 4702, column: 47, scope: !5959)
!5994 = !DILocation(line: 4702, column: 55, scope: !5959)
!5995 = !DILocation(line: 4702, column: 61, scope: !5959)
!5996 = !DILocation(line: 4702, column: 68, scope: !5959)
!5997 = !DILocation(line: 4702, column: 17, scope: !5959)
!5998 = !DILocation(line: 4702, column: 8, scope: !5959)
!5999 = !DILocation(line: 4702, column: 15, scope: !5959)
!6000 = !DILocation(line: 4703, column: 7, scope: !5959)
!6001 = !DILocation(line: 4705, column: 1, scope: !4758)
!6002 = distinct !DISubprogram(name: "build_call_expr_loc", scope: !3, file: !3, line: 10826, type: !6003, scopeLine: 10827, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6003 = !DISubroutineType(types: !6004)
!6004 = !{!3344, !3429, !3344, !1445, null}
!6005 = !DILocalVariable(name: "loc", arg: 1, scope: !6002, file: !3, line: 10826, type: !3429)
!6006 = !DILocation(line: 10826, column: 33, scope: !6002)
!6007 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6002, file: !3, line: 10826, type: !3344)
!6008 = !DILocation(line: 10826, column: 43, scope: !6002)
!6009 = !DILocalVariable(name: "n", arg: 3, scope: !6002, file: !3, line: 10826, type: !1445)
!6010 = !DILocation(line: 10826, column: 55, scope: !6002)
!6011 = !DILocalVariable(name: "ap", scope: !6002, file: !3, line: 10828, type: !6012)
!6012 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6013, line: 52, baseType: !6014)
!6013 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!6014 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6015, line: 32, baseType: !6016)
!6015 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!6016 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 10828, baseType: !6017)
!6017 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6018, size: 192, elements: !3402)
!6018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 10828, size: 192, elements: !6019)
!6019 = !{!6020, !6021, !6022, !6023}
!6020 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6018, file: !3, line: 10828, baseType: !7, size: 32)
!6021 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6018, file: !3, line: 10828, baseType: !7, size: 32, offset: 32)
!6022 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6018, file: !3, line: 10828, baseType: !3584, size: 64, offset: 64)
!6023 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6018, file: !3, line: 10828, baseType: !3584, size: 64, offset: 128)
!6024 = !DILocation(line: 10828, column: 11, scope: !6002)
!6025 = !DILocalVariable(name: "fntype", scope: !6002, file: !3, line: 10829, type: !3344)
!6026 = !DILocation(line: 10829, column: 8, scope: !6002)
!6027 = !DILocation(line: 10829, column: 17, scope: !6002)
!6028 = !DILocalVariable(name: "fn", scope: !6002, file: !3, line: 10830, type: !3344)
!6029 = !DILocation(line: 10830, column: 8, scope: !6002)
!6030 = !DILocation(line: 10830, column: 13, scope: !6002)
!6031 = !DILocalVariable(name: "argarray", scope: !6002, file: !3, line: 10831, type: !3666)
!6032 = !DILocation(line: 10831, column: 9, scope: !6002)
!6033 = !DILocation(line: 10831, column: 29, scope: !6002)
!6034 = !DILocation(line: 10831, column: 20, scope: !6002)
!6035 = !DILocalVariable(name: "i", scope: !6002, file: !3, line: 10832, type: !1445)
!6036 = !DILocation(line: 10832, column: 7, scope: !6002)
!6037 = !DILocation(line: 10834, column: 3, scope: !6002)
!6038 = !DILocation(line: 10835, column: 10, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 10835, column: 3)
!6040 = !DILocation(line: 10835, column: 8, scope: !6039)
!6041 = !DILocation(line: 10835, column: 15, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6039, file: !3, line: 10835, column: 3)
!6043 = !DILocation(line: 10835, column: 19, scope: !6042)
!6044 = !DILocation(line: 10835, column: 17, scope: !6042)
!6045 = !DILocation(line: 10835, column: 3, scope: !6039)
!6046 = !DILocation(line: 10836, column: 19, scope: !6042)
!6047 = !DILocation(line: 10836, column: 5, scope: !6042)
!6048 = !DILocation(line: 10836, column: 14, scope: !6042)
!6049 = !DILocation(line: 10836, column: 17, scope: !6042)
!6050 = !DILocation(line: 10835, column: 23, scope: !6042)
!6051 = !DILocation(line: 10835, column: 3, scope: !6042)
!6052 = distinct !{!6052, !6045, !6053}
!6053 = !DILocation(line: 10836, column: 19, scope: !6039)
!6054 = !DILocation(line: 10837, column: 3, scope: !6002)
!6055 = !DILocation(line: 10838, column: 35, scope: !6002)
!6056 = !DILocation(line: 10838, column: 40, scope: !6002)
!6057 = !DILocation(line: 10838, column: 60, scope: !6002)
!6058 = !DILocation(line: 10838, column: 64, scope: !6002)
!6059 = !DILocation(line: 10838, column: 67, scope: !6002)
!6060 = !DILocation(line: 10838, column: 10, scope: !6002)
!6061 = !DILocation(line: 10838, column: 3, scope: !6002)
!6062 = distinct !DISubprogram(name: "dummy_object", scope: !3, file: !3, line: 4608, type: !5636, scopeLine: 4609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6063 = !DILocalVariable(name: "type", arg: 1, scope: !6062, file: !3, line: 4608, type: !3344)
!6064 = !DILocation(line: 4608, column: 20, scope: !6062)
!6065 = !DILocalVariable(name: "t", scope: !6062, file: !3, line: 4610, type: !3344)
!6066 = !DILocation(line: 4610, column: 8, scope: !6062)
!6067 = !DILocation(line: 4610, column: 47, scope: !6062)
!6068 = !DILocation(line: 4610, column: 27, scope: !6062)
!6069 = !DILocation(line: 4610, column: 12, scope: !6062)
!6070 = !DILocation(line: 4611, column: 10, scope: !6062)
!6071 = !DILocation(line: 4611, column: 3, scope: !6062)
!6072 = distinct !DISubprogram(name: "expand_builtin_trap", scope: !3, file: !3, line: 4919, type: !6073, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6073 = !DISubroutineType(types: !6074)
!6074 = !{null}
!6075 = !DILocation(line: 4923, column: 16, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 4922, column: 7)
!6077 = !DILocation(line: 4923, column: 5, scope: !6076)
!6078 = !DILocation(line: 4927, column: 3, scope: !6072)
!6079 = !DILocation(line: 4928, column: 1, scope: !6072)
!6080 = distinct !DISubprogram(name: "build_string_literal", scope: !3, file: !3, line: 4990, type: !6081, scopeLine: 4991, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6081 = !DISubroutineType(types: !6082)
!6082 = !{!3344, !1445, !3504}
!6083 = !DILocalVariable(name: "len", arg: 1, scope: !6080, file: !3, line: 4990, type: !1445)
!6084 = !DILocation(line: 4990, column: 27, scope: !6080)
!6085 = !DILocalVariable(name: "str", arg: 2, scope: !6080, file: !3, line: 4990, type: !3504)
!6086 = !DILocation(line: 4990, column: 44, scope: !6080)
!6087 = !DILocalVariable(name: "t", scope: !6080, file: !3, line: 4992, type: !3344)
!6088 = !DILocation(line: 4992, column: 8, scope: !6080)
!6089 = !DILocalVariable(name: "elem", scope: !6080, file: !3, line: 4992, type: !3344)
!6090 = !DILocation(line: 4992, column: 11, scope: !6080)
!6091 = !DILocalVariable(name: "index", scope: !6080, file: !3, line: 4992, type: !3344)
!6092 = !DILocation(line: 4992, column: 17, scope: !6080)
!6093 = !DILocalVariable(name: "type", scope: !6080, file: !3, line: 4992, type: !3344)
!6094 = !DILocation(line: 4992, column: 24, scope: !6080)
!6095 = !DILocation(line: 4994, column: 21, scope: !6080)
!6096 = !DILocation(line: 4994, column: 26, scope: !6080)
!6097 = !DILocation(line: 4994, column: 7, scope: !6080)
!6098 = !DILocation(line: 4994, column: 5, scope: !6080)
!6099 = !DILocation(line: 4995, column: 10, scope: !6080)
!6100 = !DILocation(line: 4995, column: 8, scope: !6080)
!6101 = !DILocation(line: 4996, column: 29, scope: !6080)
!6102 = !DILocation(line: 4996, column: 11, scope: !6080)
!6103 = !DILocation(line: 4996, column: 9, scope: !6080)
!6104 = !DILocation(line: 4997, column: 28, scope: !6080)
!6105 = !DILocation(line: 4997, column: 34, scope: !6080)
!6106 = !DILocation(line: 4997, column: 10, scope: !6080)
!6107 = !DILocation(line: 4997, column: 8, scope: !6080)
!6108 = !DILocation(line: 4998, column: 19, scope: !6080)
!6109 = !DILocation(line: 4998, column: 3, scope: !6080)
!6110 = !DILocation(line: 4998, column: 17, scope: !6080)
!6111 = !DILocation(line: 4999, column: 3, scope: !6080)
!6112 = !DILocation(line: 4999, column: 21, scope: !6080)
!6113 = !DILocation(line: 5000, column: 3, scope: !6080)
!6114 = !DILocation(line: 5000, column: 21, scope: !6080)
!6115 = !DILocation(line: 5001, column: 3, scope: !6080)
!6116 = !DILocation(line: 5001, column: 19, scope: !6080)
!6117 = !DILocation(line: 5003, column: 30, scope: !6080)
!6118 = !DILocation(line: 5003, column: 10, scope: !6080)
!6119 = !DILocation(line: 5003, column: 8, scope: !6080)
!6120 = !DILocation(line: 5004, column: 7, scope: !6080)
!6121 = !DILocation(line: 5004, column: 5, scope: !6080)
!6122 = !DILocation(line: 5007, column: 10, scope: !6080)
!6123 = !DILocation(line: 5007, column: 3, scope: !6080)
!6124 = distinct !DISubprogram(name: "expand_builtin", scope: !3, file: !3, line: 5618, type: !6125, scopeLine: 5620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6125 = !DISubroutineType(types: !6126)
!6126 = !{!3479, !3344, !3479, !3479, !5, !1445}
!6127 = !DILocalVariable(name: "exp", arg: 1, scope: !6124, file: !3, line: 5618, type: !3344)
!6128 = !DILocation(line: 5618, column: 22, scope: !6124)
!6129 = !DILocalVariable(name: "target", arg: 2, scope: !6124, file: !3, line: 5618, type: !3479)
!6130 = !DILocation(line: 5618, column: 31, scope: !6124)
!6131 = !DILocalVariable(name: "subtarget", arg: 3, scope: !6124, file: !3, line: 5618, type: !3479)
!6132 = !DILocation(line: 5618, column: 43, scope: !6124)
!6133 = !DILocalVariable(name: "mode", arg: 4, scope: !6124, file: !3, line: 5618, type: !5)
!6134 = !DILocation(line: 5618, column: 72, scope: !6124)
!6135 = !DILocalVariable(name: "ignore", arg: 5, scope: !6124, file: !3, line: 5619, type: !1445)
!6136 = !DILocation(line: 5619, column: 7, scope: !6124)
!6137 = !DILocalVariable(name: "fndecl", scope: !6124, file: !3, line: 5621, type: !3344)
!6138 = !DILocation(line: 5621, column: 8, scope: !6124)
!6139 = !DILocation(line: 5621, column: 36, scope: !6124)
!6140 = !DILocation(line: 5621, column: 17, scope: !6124)
!6141 = !DILocalVariable(name: "fcode", scope: !6124, file: !3, line: 5622, type: !573)
!6142 = !DILocation(line: 5622, column: 26, scope: !6124)
!6143 = !DILocation(line: 5622, column: 34, scope: !6124)
!6144 = !DILocalVariable(name: "target_mode", scope: !6124, file: !3, line: 5623, type: !5)
!6145 = !DILocation(line: 5623, column: 21, scope: !6124)
!6146 = !DILocation(line: 5623, column: 35, scope: !6124)
!6147 = !DILocation(line: 5625, column: 7, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 5625, column: 7)
!6149 = !DILocation(line: 5625, column: 36, scope: !6148)
!6150 = !DILocation(line: 5625, column: 7, scope: !6124)
!6151 = !DILocation(line: 5626, column: 20, scope: !6148)
!6152 = !DILocation(line: 5626, column: 36, scope: !6148)
!6153 = !DILocation(line: 5626, column: 41, scope: !6148)
!6154 = !DILocation(line: 5626, column: 49, scope: !6148)
!6155 = !DILocation(line: 5626, column: 60, scope: !6148)
!6156 = !DILocation(line: 5626, column: 66, scope: !6148)
!6157 = !DILocation(line: 5626, column: 12, scope: !6148)
!6158 = !DILocation(line: 5626, column: 5, scope: !6148)
!6159 = !DILocation(line: 5630, column: 8, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 5630, column: 7)
!6161 = !DILocation(line: 5631, column: 7, scope: !6160)
!6162 = !DILocation(line: 5631, column: 31, scope: !6160)
!6163 = !DILocation(line: 5631, column: 11, scope: !6160)
!6164 = !DILocation(line: 5632, column: 7, scope: !6160)
!6165 = !DILocation(line: 5632, column: 10, scope: !6160)
!6166 = !DILocation(line: 5633, column: 7, scope: !6160)
!6167 = !DILocation(line: 5633, column: 10, scope: !6160)
!6168 = !DILocation(line: 5633, column: 16, scope: !6160)
!6169 = !DILocation(line: 5634, column: 7, scope: !6160)
!6170 = !DILocation(line: 5634, column: 10, scope: !6160)
!6171 = !DILocation(line: 5634, column: 16, scope: !6160)
!6172 = !DILocation(line: 5630, column: 7, scope: !6124)
!6173 = !DILocation(line: 5635, column: 25, scope: !6160)
!6174 = !DILocation(line: 5635, column: 30, scope: !6160)
!6175 = !DILocation(line: 5635, column: 38, scope: !6160)
!6176 = !DILocation(line: 5635, column: 12, scope: !6160)
!6177 = !DILocation(line: 5635, column: 5, scope: !6160)
!6178 = !DILocation(line: 5639, column: 7, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 5639, column: 7)
!6180 = !DILocation(line: 5639, column: 7, scope: !6124)
!6181 = !DILocation(line: 5640, column: 14, scope: !6179)
!6182 = !DILocation(line: 5640, column: 12, scope: !6179)
!6183 = !DILocation(line: 5640, column: 5, scope: !6179)
!6184 = !DILocation(line: 5645, column: 7, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 5645, column: 7)
!6186 = !DILocation(line: 5645, column: 17, scope: !6185)
!6187 = !DILocation(line: 5645, column: 14, scope: !6185)
!6188 = !DILocation(line: 5646, column: 7, scope: !6185)
!6189 = !DILocation(line: 5646, column: 11, scope: !6185)
!6190 = !DILocation(line: 5646, column: 32, scope: !6185)
!6191 = !DILocation(line: 5646, column: 35, scope: !6185)
!6192 = !DILocation(line: 5645, column: 7, scope: !6124)
!6193 = !DILocalVariable(name: "volatilep", scope: !6194, file: !3, line: 5648, type: !3421)
!6194 = distinct !DILexicalBlock(scope: !6185, file: !3, line: 5647, column: 5)
!6195 = !DILocation(line: 5648, column: 12, scope: !6194)
!6196 = !DILocalVariable(name: "arg", scope: !6194, file: !3, line: 5649, type: !3344)
!6197 = !DILocation(line: 5649, column: 12, scope: !6194)
!6198 = !DILocalVariable(name: "iter", scope: !6194, file: !3, line: 5650, type: !6199)
!6199 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_expr_arg_iterator", file: !135, line: 5364, baseType: !6200)
!6200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "call_expr_arg_iterator_d", file: !135, line: 5360, size: 128, elements: !6201)
!6201 = !{!6202, !6203, !6204}
!6202 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !6200, file: !135, line: 5361, baseType: !3344, size: 64)
!6203 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !6200, file: !135, line: 5362, baseType: !1445, size: 32, offset: 64)
!6204 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !6200, file: !135, line: 5363, baseType: !1445, size: 32, offset: 96)
!6205 = !DILocation(line: 5650, column: 30, scope: !6194)
!6206 = !DILocation(line: 5652, column: 7, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 5652, column: 7)
!6208 = !DILocation(line: 5652, column: 7, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6207, file: !3, line: 5652, column: 7)
!6210 = !DILocation(line: 5653, column: 6, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6209, file: !3, line: 5653, column: 6)
!6212 = !DILocation(line: 5653, column: 6, scope: !6209)
!6213 = !DILocation(line: 5655, column: 16, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6211, file: !3, line: 5654, column: 4)
!6215 = !DILocation(line: 5656, column: 6, scope: !6214)
!6216 = distinct !{!6216, !6206, !6217}
!6217 = !DILocation(line: 5657, column: 4, scope: !6207)
!6218 = !DILocation(line: 5659, column: 13, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 5659, column: 11)
!6220 = !DILocation(line: 5659, column: 11, scope: !6194)
!6221 = !DILocation(line: 5661, column: 4, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 5661, column: 4)
!6223 = distinct !DILexicalBlock(scope: !6219, file: !3, line: 5660, column: 2)
!6224 = !DILocation(line: 5661, column: 4, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6222, file: !3, line: 5661, column: 4)
!6226 = !DILocation(line: 5662, column: 19, scope: !6225)
!6227 = !DILocation(line: 5662, column: 24, scope: !6225)
!6228 = !DILocation(line: 5662, column: 6, scope: !6225)
!6229 = distinct !{!6229, !6221, !6230}
!6230 = !DILocation(line: 5662, column: 59, scope: !6222)
!6231 = !DILocation(line: 5663, column: 11, scope: !6223)
!6232 = !DILocation(line: 5663, column: 4, scope: !6223)
!6233 = !DILocation(line: 5665, column: 5, scope: !6194)
!6234 = !DILocation(line: 6425, column: 23, scope: !6124)
!6235 = !DILocation(line: 6425, column: 28, scope: !6124)
!6236 = !DILocation(line: 6425, column: 36, scope: !6124)
!6237 = !DILocation(line: 6425, column: 10, scope: !6124)
!6238 = !DILocation(line: 6425, column: 3, scope: !6124)
!6239 = !DILocation(line: 6426, column: 1, scope: !6124)
!6240 = distinct !DISubprogram(name: "called_as_built_in", scope: !3, file: !3, line: 259, type: !4815, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6241 = !DILocalVariable(name: "node", arg: 1, scope: !6240, file: !3, line: 259, type: !3344)
!6242 = !DILocation(line: 259, column: 26, scope: !6240)
!6243 = !DILocalVariable(name: "name", scope: !6240, file: !3, line: 264, type: !3504)
!6244 = !DILocation(line: 264, column: 15, scope: !6240)
!6245 = !DILocation(line: 264, column: 22, scope: !6240)
!6246 = !DILocation(line: 265, column: 27, scope: !6240)
!6247 = !DILocation(line: 265, column: 10, scope: !6240)
!6248 = !DILocation(line: 265, column: 3, scope: !6240)
!6249 = distinct !DISubprogram(name: "first_call_expr_arg", scope: !135, file: !135, line: 5419, type: !6250, scopeLine: 5420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6250 = !DISubroutineType(types: !6251)
!6251 = !{!3344, !3344, !6252}
!6252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6199, size: 64)
!6253 = !DILocalVariable(name: "exp", arg: 1, scope: !6249, file: !135, line: 5419, type: !3344)
!6254 = !DILocation(line: 5419, column: 27, scope: !6249)
!6255 = !DILocalVariable(name: "iter", arg: 2, scope: !6249, file: !135, line: 5419, type: !6252)
!6256 = !DILocation(line: 5419, column: 56, scope: !6249)
!6257 = !DILocation(line: 5421, column: 32, scope: !6249)
!6258 = !DILocation(line: 5421, column: 37, scope: !6249)
!6259 = !DILocation(line: 5421, column: 3, scope: !6249)
!6260 = !DILocation(line: 5422, column: 30, scope: !6249)
!6261 = !DILocation(line: 5422, column: 10, scope: !6249)
!6262 = !DILocation(line: 5422, column: 3, scope: !6249)
!6263 = distinct !DISubprogram(name: "next_call_expr_arg", scope: !135, file: !135, line: 5393, type: !6264, scopeLine: 5394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6264 = !DISubroutineType(types: !6265)
!6265 = !{!3344, !6252}
!6266 = !DILocalVariable(name: "iter", arg: 1, scope: !6263, file: !135, line: 5393, type: !6252)
!6267 = !DILocation(line: 5393, column: 45, scope: !6263)
!6268 = !DILocalVariable(name: "result", scope: !6263, file: !135, line: 5395, type: !3344)
!6269 = !DILocation(line: 5395, column: 8, scope: !6263)
!6270 = !DILocation(line: 5396, column: 7, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6263, file: !135, line: 5396, column: 7)
!6272 = !DILocation(line: 5396, column: 13, scope: !6271)
!6273 = !DILocation(line: 5396, column: 18, scope: !6271)
!6274 = !DILocation(line: 5396, column: 24, scope: !6271)
!6275 = !DILocation(line: 5396, column: 15, scope: !6271)
!6276 = !DILocation(line: 5396, column: 7, scope: !6263)
!6277 = !DILocation(line: 5397, column: 5, scope: !6271)
!6278 = !DILocation(line: 5398, column: 12, scope: !6263)
!6279 = !DILocation(line: 5398, column: 10, scope: !6263)
!6280 = !DILocation(line: 5399, column: 3, scope: !6263)
!6281 = !DILocation(line: 5399, column: 9, scope: !6263)
!6282 = !DILocation(line: 5399, column: 10, scope: !6263)
!6283 = !DILocation(line: 5400, column: 10, scope: !6263)
!6284 = !DILocation(line: 5400, column: 3, scope: !6263)
!6285 = !DILocation(line: 5401, column: 1, scope: !6263)
!6286 = distinct !DISubprogram(name: "builtin_mathfn_code", scope: !3, file: !3, line: 6435, type: !6287, scopeLine: 6436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6287 = !DISubroutineType(types: !6288)
!6288 = !{!573, !4967}
!6289 = !DILocalVariable(name: "t", arg: 1, scope: !6286, file: !3, line: 6435, type: !4967)
!6290 = !DILocation(line: 6435, column: 33, scope: !6286)
!6291 = !DILocalVariable(name: "fndecl", scope: !6286, file: !3, line: 6437, type: !4967)
!6292 = !DILocation(line: 6437, column: 14, scope: !6286)
!6293 = !DILocalVariable(name: "arg", scope: !6286, file: !3, line: 6437, type: !4967)
!6294 = !DILocation(line: 6437, column: 22, scope: !6286)
!6295 = !DILocalVariable(name: "parmlist", scope: !6286, file: !3, line: 6437, type: !4967)
!6296 = !DILocation(line: 6437, column: 27, scope: !6286)
!6297 = !DILocalVariable(name: "argtype", scope: !6286, file: !3, line: 6438, type: !4967)
!6298 = !DILocation(line: 6438, column: 14, scope: !6286)
!6299 = !DILocalVariable(name: "parmtype", scope: !6286, file: !3, line: 6438, type: !4967)
!6300 = !DILocation(line: 6438, column: 23, scope: !6286)
!6301 = !DILocalVariable(name: "iter", scope: !6286, file: !3, line: 6439, type: !6302)
!6302 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_call_expr_arg_iterator", file: !135, line: 5370, baseType: !6303)
!6303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "const_call_expr_arg_iterator_d", file: !135, line: 5366, size: 128, elements: !6304)
!6304 = !{!6305, !6306, !6307}
!6305 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !6303, file: !135, line: 5367, baseType: !4967, size: 64)
!6306 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !6303, file: !135, line: 5368, baseType: !1445, size: 32, offset: 64)
!6307 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !6303, file: !135, line: 5369, baseType: !1445, size: 32, offset: 96)
!6308 = !DILocation(line: 6439, column: 32, scope: !6286)
!6309 = !DILocation(line: 6441, column: 7, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 6441, column: 7)
!6311 = !DILocation(line: 6441, column: 21, scope: !6310)
!6312 = !DILocation(line: 6442, column: 7, scope: !6310)
!6313 = !DILocation(line: 6442, column: 10, scope: !6310)
!6314 = !DILocation(line: 6442, column: 39, scope: !6310)
!6315 = !DILocation(line: 6441, column: 7, scope: !6286)
!6316 = !DILocation(line: 6443, column: 5, scope: !6310)
!6317 = !DILocation(line: 6445, column: 31, scope: !6286)
!6318 = !DILocation(line: 6445, column: 12, scope: !6286)
!6319 = !DILocation(line: 6445, column: 10, scope: !6286)
!6320 = !DILocation(line: 6446, column: 7, scope: !6321)
!6321 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 6446, column: 7)
!6322 = !DILocation(line: 6446, column: 14, scope: !6321)
!6323 = !DILocation(line: 6447, column: 7, scope: !6321)
!6324 = !DILocation(line: 6447, column: 10, scope: !6321)
!6325 = !DILocation(line: 6447, column: 29, scope: !6321)
!6326 = !DILocation(line: 6448, column: 7, scope: !6321)
!6327 = !DILocation(line: 6448, column: 12, scope: !6321)
!6328 = !DILocation(line: 6449, column: 7, scope: !6321)
!6329 = !DILocation(line: 6449, column: 10, scope: !6321)
!6330 = !DILocation(line: 6449, column: 39, scope: !6321)
!6331 = !DILocation(line: 6446, column: 7, scope: !6286)
!6332 = !DILocation(line: 6450, column: 5, scope: !6321)
!6333 = !DILocation(line: 6452, column: 14, scope: !6286)
!6334 = !DILocation(line: 6452, column: 12, scope: !6286)
!6335 = !DILocation(line: 6453, column: 38, scope: !6286)
!6336 = !DILocation(line: 6453, column: 3, scope: !6286)
!6337 = !DILocation(line: 6454, column: 3, scope: !6286)
!6338 = !DILocation(line: 6454, column: 10, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6340, file: !3, line: 6454, column: 3)
!6340 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 6454, column: 3)
!6341 = !DILocation(line: 6454, column: 3, scope: !6340)
!6342 = !DILocation(line: 6458, column: 18, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 6455, column: 5)
!6344 = !DILocation(line: 6458, column: 16, scope: !6343)
!6345 = !DILocation(line: 6459, column: 11, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 6459, column: 11)
!6347 = !DILocation(line: 6459, column: 11, scope: !6343)
!6348 = !DILocation(line: 6461, column: 8, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 6461, column: 8)
!6350 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 6460, column: 2)
!6351 = !DILocation(line: 6461, column: 8, scope: !6350)
!6352 = !DILocation(line: 6462, column: 6, scope: !6349)
!6353 = !DILocation(line: 6463, column: 11, scope: !6350)
!6354 = !DILocation(line: 6463, column: 4, scope: !6350)
!6355 = !DILocation(line: 6466, column: 13, scope: !6356)
!6356 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 6466, column: 11)
!6357 = !DILocation(line: 6466, column: 11, scope: !6343)
!6358 = !DILocation(line: 6467, column: 2, scope: !6356)
!6359 = !DILocation(line: 6469, column: 13, scope: !6343)
!6360 = !DILocation(line: 6469, column: 11, scope: !6343)
!6361 = !DILocation(line: 6470, column: 17, scope: !6343)
!6362 = !DILocation(line: 6470, column: 15, scope: !6343)
!6363 = !DILocation(line: 6472, column: 11, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 6472, column: 11)
!6365 = !DILocation(line: 6472, column: 11, scope: !6343)
!6366 = !DILocation(line: 6474, column: 10, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 6474, column: 8)
!6368 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 6473, column: 2)
!6369 = !DILocation(line: 6474, column: 8, scope: !6368)
!6370 = !DILocation(line: 6475, column: 6, scope: !6367)
!6371 = !DILocation(line: 6476, column: 2, scope: !6368)
!6372 = !DILocation(line: 6477, column: 16, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 6477, column: 16)
!6374 = !DILocation(line: 6477, column: 16, scope: !6364)
!6375 = !DILocation(line: 6479, column: 10, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6377, file: !3, line: 6479, column: 8)
!6377 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 6478, column: 2)
!6378 = !DILocation(line: 6479, column: 8, scope: !6377)
!6379 = !DILocation(line: 6480, column: 6, scope: !6376)
!6380 = !DILocation(line: 6481, column: 2, scope: !6377)
!6381 = !DILocation(line: 6482, column: 16, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 6482, column: 16)
!6383 = !DILocation(line: 6482, column: 16, scope: !6373)
!6384 = !DILocation(line: 6484, column: 10, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6386, file: !3, line: 6484, column: 8)
!6386 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 6483, column: 2)
!6387 = !DILocation(line: 6484, column: 8, scope: !6386)
!6388 = !DILocation(line: 6485, column: 6, scope: !6385)
!6389 = !DILocation(line: 6486, column: 2, scope: !6386)
!6390 = !DILocation(line: 6487, column: 16, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 6487, column: 16)
!6392 = !DILocation(line: 6487, column: 16, scope: !6382)
!6393 = !DILocation(line: 6489, column: 10, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6395, file: !3, line: 6489, column: 8)
!6395 = distinct !DILexicalBlock(scope: !6391, file: !3, line: 6488, column: 2)
!6396 = !DILocation(line: 6489, column: 8, scope: !6395)
!6397 = !DILocation(line: 6490, column: 6, scope: !6394)
!6398 = !DILocation(line: 6491, column: 2, scope: !6395)
!6399 = !DILocation(line: 6493, column: 2, scope: !6391)
!6400 = !DILocation(line: 6494, column: 5, scope: !6343)
!6401 = !DILocation(line: 6454, column: 31, scope: !6339)
!6402 = !DILocation(line: 6454, column: 29, scope: !6339)
!6403 = !DILocation(line: 6454, column: 3, scope: !6339)
!6404 = distinct !{!6404, !6341, !6405}
!6405 = !DILocation(line: 6494, column: 5, scope: !6340)
!6406 = !DILocation(line: 6497, column: 10, scope: !6286)
!6407 = !DILocation(line: 6497, column: 3, scope: !6286)
!6408 = !DILocation(line: 6498, column: 1, scope: !6286)
!6409 = distinct !DISubprogram(name: "init_const_call_expr_arg_iterator", scope: !135, file: !135, line: 5383, type: !6410, scopeLine: 5384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6410 = !DISubroutineType(types: !6411)
!6411 = !{null, !4967, !6412}
!6412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6302, size: 64)
!6413 = !DILocalVariable(name: "exp", arg: 1, scope: !6409, file: !135, line: 5383, type: !4967)
!6414 = !DILocation(line: 5383, column: 47, scope: !6409)
!6415 = !DILocalVariable(name: "iter", arg: 2, scope: !6409, file: !135, line: 5383, type: !6412)
!6416 = !DILocation(line: 5383, column: 82, scope: !6409)
!6417 = !DILocation(line: 5385, column: 13, scope: !6409)
!6418 = !DILocation(line: 5385, column: 3, scope: !6409)
!6419 = !DILocation(line: 5385, column: 9, scope: !6409)
!6420 = !DILocation(line: 5385, column: 11, scope: !6409)
!6421 = !DILocation(line: 5386, column: 13, scope: !6409)
!6422 = !DILocation(line: 5386, column: 3, scope: !6409)
!6423 = !DILocation(line: 5386, column: 9, scope: !6409)
!6424 = !DILocation(line: 5386, column: 11, scope: !6409)
!6425 = !DILocation(line: 5387, column: 3, scope: !6409)
!6426 = !DILocation(line: 5387, column: 9, scope: !6409)
!6427 = !DILocation(line: 5387, column: 11, scope: !6409)
!6428 = !DILocation(line: 5388, column: 1, scope: !6409)
!6429 = distinct !DISubprogram(name: "more_const_call_expr_args_p", scope: !135, file: !135, line: 5441, type: !6430, scopeLine: 5442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6430 = !DISubroutineType(types: !6431)
!6431 = !{!3421, !6432}
!6432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6433, size: 64)
!6433 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6302)
!6434 = !DILocalVariable(name: "iter", arg: 1, scope: !6429, file: !135, line: 5441, type: !6432)
!6435 = !DILocation(line: 5441, column: 66, scope: !6429)
!6436 = !DILocation(line: 5443, column: 11, scope: !6429)
!6437 = !DILocation(line: 5443, column: 17, scope: !6429)
!6438 = !DILocation(line: 5443, column: 21, scope: !6429)
!6439 = !DILocation(line: 5443, column: 27, scope: !6429)
!6440 = !DILocation(line: 5443, column: 19, scope: !6429)
!6441 = !DILocation(line: 5443, column: 10, scope: !6429)
!6442 = !DILocation(line: 5443, column: 3, scope: !6429)
!6443 = distinct !DISubprogram(name: "next_const_call_expr_arg", scope: !135, file: !135, line: 5404, type: !6444, scopeLine: 5405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6444 = !DISubroutineType(types: !6445)
!6445 = !{!4967, !6412}
!6446 = !DILocalVariable(name: "iter", arg: 1, scope: !6443, file: !135, line: 5404, type: !6412)
!6447 = !DILocation(line: 5404, column: 57, scope: !6443)
!6448 = !DILocalVariable(name: "result", scope: !6443, file: !135, line: 5406, type: !4967)
!6449 = !DILocation(line: 5406, column: 14, scope: !6443)
!6450 = !DILocation(line: 5407, column: 7, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6443, file: !135, line: 5407, column: 7)
!6452 = !DILocation(line: 5407, column: 13, scope: !6451)
!6453 = !DILocation(line: 5407, column: 18, scope: !6451)
!6454 = !DILocation(line: 5407, column: 24, scope: !6451)
!6455 = !DILocation(line: 5407, column: 15, scope: !6451)
!6456 = !DILocation(line: 5407, column: 7, scope: !6443)
!6457 = !DILocation(line: 5408, column: 5, scope: !6451)
!6458 = !DILocation(line: 5409, column: 12, scope: !6443)
!6459 = !DILocation(line: 5409, column: 10, scope: !6443)
!6460 = !DILocation(line: 5410, column: 3, scope: !6443)
!6461 = !DILocation(line: 5410, column: 9, scope: !6443)
!6462 = !DILocation(line: 5410, column: 10, scope: !6443)
!6463 = !DILocation(line: 5411, column: 10, scope: !6443)
!6464 = !DILocation(line: 5411, column: 3, scope: !6443)
!6465 = !DILocation(line: 5412, column: 1, scope: !6443)
!6466 = distinct !DISubprogram(name: "fold_builtin_strcpy", scope: !3, file: !3, line: 8503, type: !6467, scopeLine: 8504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6467 = !DISubroutineType(types: !6468)
!6468 = !{!3344, !3429, !3344, !3344, !3344, !3344}
!6469 = !DILocalVariable(name: "loc", arg: 1, scope: !6466, file: !3, line: 8503, type: !3429)
!6470 = !DILocation(line: 8503, column: 33, scope: !6466)
!6471 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6466, file: !3, line: 8503, type: !3344)
!6472 = !DILocation(line: 8503, column: 43, scope: !6466)
!6473 = !DILocalVariable(name: "dest", arg: 3, scope: !6466, file: !3, line: 8503, type: !3344)
!6474 = !DILocation(line: 8503, column: 56, scope: !6466)
!6475 = !DILocalVariable(name: "src", arg: 4, scope: !6466, file: !3, line: 8503, type: !3344)
!6476 = !DILocation(line: 8503, column: 67, scope: !6466)
!6477 = !DILocalVariable(name: "len", arg: 5, scope: !6466, file: !3, line: 8503, type: !3344)
!6478 = !DILocation(line: 8503, column: 77, scope: !6466)
!6479 = !DILocalVariable(name: "fn", scope: !6466, file: !3, line: 8505, type: !3344)
!6480 = !DILocation(line: 8505, column: 8, scope: !6466)
!6481 = !DILocation(line: 8507, column: 22, scope: !6482)
!6482 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 8507, column: 7)
!6483 = !DILocation(line: 8507, column: 8, scope: !6482)
!6484 = !DILocation(line: 8508, column: 7, scope: !6482)
!6485 = !DILocation(line: 8508, column: 25, scope: !6482)
!6486 = !DILocation(line: 8508, column: 11, scope: !6482)
!6487 = !DILocation(line: 8507, column: 7, scope: !6466)
!6488 = !DILocation(line: 8509, column: 5, scope: !6482)
!6489 = !DILocation(line: 8512, column: 24, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 8512, column: 7)
!6491 = !DILocation(line: 8512, column: 29, scope: !6490)
!6492 = !DILocation(line: 8512, column: 7, scope: !6490)
!6493 = !DILocation(line: 8512, column: 7, scope: !6466)
!6494 = !DILocation(line: 8513, column: 30, scope: !6490)
!6495 = !DILocation(line: 8513, column: 35, scope: !6490)
!6496 = !DILocation(line: 8513, column: 67, scope: !6490)
!6497 = !DILocation(line: 8513, column: 12, scope: !6490)
!6498 = !DILocation(line: 8513, column: 5, scope: !6490)
!6499 = !DILocation(line: 8515, column: 37, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 8515, column: 7)
!6501 = !DILocation(line: 8515, column: 7, scope: !6500)
!6502 = !DILocation(line: 8515, column: 7, scope: !6466)
!6503 = !DILocation(line: 8516, column: 5, scope: !6500)
!6504 = !DILocation(line: 8518, column: 8, scope: !6466)
!6505 = !DILocation(line: 8518, column: 6, scope: !6466)
!6506 = !DILocation(line: 8519, column: 8, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 8519, column: 7)
!6508 = !DILocation(line: 8519, column: 7, scope: !6466)
!6509 = !DILocation(line: 8520, column: 5, scope: !6507)
!6510 = !DILocation(line: 8522, column: 8, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 8522, column: 7)
!6512 = !DILocation(line: 8522, column: 7, scope: !6466)
!6513 = !DILocation(line: 8524, column: 23, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6511, file: !3, line: 8523, column: 5)
!6515 = !DILocation(line: 8524, column: 13, scope: !6514)
!6516 = !DILocation(line: 8524, column: 11, scope: !6514)
!6517 = !DILocation(line: 8525, column: 13, scope: !6518)
!6518 = distinct !DILexicalBlock(scope: !6514, file: !3, line: 8525, column: 11)
!6519 = !DILocation(line: 8525, column: 17, scope: !6518)
!6520 = !DILocation(line: 8525, column: 20, scope: !6518)
!6521 = !DILocation(line: 8525, column: 11, scope: !6514)
!6522 = !DILocation(line: 8526, column: 2, scope: !6518)
!6523 = !DILocation(line: 8527, column: 5, scope: !6514)
!6524 = !DILocation(line: 8529, column: 25, scope: !6466)
!6525 = !DILocation(line: 8529, column: 41, scope: !6466)
!6526 = !DILocation(line: 8529, column: 46, scope: !6466)
!6527 = !DILocation(line: 8529, column: 9, scope: !6466)
!6528 = !DILocation(line: 8529, column: 7, scope: !6466)
!6529 = !DILocation(line: 8530, column: 28, scope: !6466)
!6530 = !DILocation(line: 8530, column: 33, scope: !6466)
!6531 = !DILocation(line: 8531, column: 28, scope: !6466)
!6532 = !DILocation(line: 8531, column: 33, scope: !6466)
!6533 = !DILocation(line: 8531, column: 40, scope: !6466)
!6534 = !DILocation(line: 8531, column: 46, scope: !6466)
!6535 = !DILocation(line: 8531, column: 51, scope: !6466)
!6536 = !DILocation(line: 8531, column: 7, scope: !6466)
!6537 = !DILocation(line: 8530, column: 10, scope: !6466)
!6538 = !DILocation(line: 8530, column: 3, scope: !6466)
!6539 = !DILocation(line: 8532, column: 1, scope: !6466)
!6540 = distinct !DISubprogram(name: "validate_arg", scope: !3, file: !3, line: 10939, type: !6541, scopeLine: 10940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6541 = !DISubroutineType(types: !6542)
!6542 = !{!3421, !4967, !134}
!6543 = !DILocalVariable(name: "arg", arg: 1, scope: !6540, file: !3, line: 10939, type: !4967)
!6544 = !DILocation(line: 10939, column: 26, scope: !6540)
!6545 = !DILocalVariable(name: "code", arg: 2, scope: !6540, file: !3, line: 10939, type: !134)
!6546 = !DILocation(line: 10939, column: 46, scope: !6540)
!6547 = !DILocation(line: 10941, column: 8, scope: !6548)
!6548 = distinct !DILexicalBlock(scope: !6540, file: !3, line: 10941, column: 7)
!6549 = !DILocation(line: 10941, column: 7, scope: !6540)
!6550 = !DILocation(line: 10942, column: 5, scope: !6548)
!6551 = !DILocation(line: 10943, column: 12, scope: !6552)
!6552 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 10943, column: 12)
!6553 = !DILocation(line: 10943, column: 17, scope: !6552)
!6554 = !DILocation(line: 10943, column: 12, scope: !6548)
!6555 = !DILocation(line: 10944, column: 12, scope: !6552)
!6556 = !DILocation(line: 10944, column: 5, scope: !6552)
!6557 = !DILocation(line: 10945, column: 12, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 10945, column: 12)
!6559 = !DILocation(line: 10945, column: 17, scope: !6558)
!6560 = !DILocation(line: 10945, column: 12, scope: !6552)
!6561 = !DILocation(line: 10946, column: 12, scope: !6558)
!6562 = !DILocation(line: 10946, column: 5, scope: !6558)
!6563 = !DILocation(line: 10947, column: 10, scope: !6540)
!6564 = !DILocation(line: 10947, column: 18, scope: !6540)
!6565 = !DILocation(line: 10947, column: 15, scope: !6540)
!6566 = !DILocation(line: 10947, column: 3, scope: !6540)
!6567 = !DILocation(line: 10948, column: 1, scope: !6540)
!6568 = distinct !DISubprogram(name: "fold_builtin_strncpy", scope: !3, file: !3, line: 8579, type: !6569, scopeLine: 8581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6569 = !DISubroutineType(types: !6570)
!6570 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3344}
!6571 = !DILocalVariable(name: "loc", arg: 1, scope: !6568, file: !3, line: 8579, type: !3429)
!6572 = !DILocation(line: 8579, column: 34, scope: !6568)
!6573 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6568, file: !3, line: 8579, type: !3344)
!6574 = !DILocation(line: 8579, column: 44, scope: !6568)
!6575 = !DILocalVariable(name: "dest", arg: 3, scope: !6568, file: !3, line: 8579, type: !3344)
!6576 = !DILocation(line: 8579, column: 57, scope: !6568)
!6577 = !DILocalVariable(name: "src", arg: 4, scope: !6568, file: !3, line: 8580, type: !3344)
!6578 = !DILocation(line: 8580, column: 14, scope: !6568)
!6579 = !DILocalVariable(name: "len", arg: 5, scope: !6568, file: !3, line: 8580, type: !3344)
!6580 = !DILocation(line: 8580, column: 24, scope: !6568)
!6581 = !DILocalVariable(name: "slen", arg: 6, scope: !6568, file: !3, line: 8580, type: !3344)
!6582 = !DILocation(line: 8580, column: 34, scope: !6568)
!6583 = !DILocalVariable(name: "fn", scope: !6568, file: !3, line: 8582, type: !3344)
!6584 = !DILocation(line: 8582, column: 8, scope: !6568)
!6585 = !DILocation(line: 8584, column: 22, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8584, column: 7)
!6587 = !DILocation(line: 8584, column: 8, scope: !6586)
!6588 = !DILocation(line: 8585, column: 7, scope: !6586)
!6589 = !DILocation(line: 8585, column: 25, scope: !6586)
!6590 = !DILocation(line: 8585, column: 11, scope: !6586)
!6591 = !DILocation(line: 8586, column: 7, scope: !6586)
!6592 = !DILocation(line: 8586, column: 25, scope: !6586)
!6593 = !DILocation(line: 8586, column: 11, scope: !6586)
!6594 = !DILocation(line: 8584, column: 7, scope: !6568)
!6595 = !DILocation(line: 8587, column: 5, scope: !6586)
!6596 = !DILocation(line: 8590, column: 22, scope: !6597)
!6597 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8590, column: 7)
!6598 = !DILocation(line: 8590, column: 7, scope: !6597)
!6599 = !DILocation(line: 8590, column: 7, scope: !6568)
!6600 = !DILocation(line: 8591, column: 34, scope: !6597)
!6601 = !DILocation(line: 8591, column: 39, scope: !6597)
!6602 = !DILocation(line: 8591, column: 71, scope: !6597)
!6603 = !DILocation(line: 8591, column: 77, scope: !6597)
!6604 = !DILocation(line: 8591, column: 12, scope: !6597)
!6605 = !DILocation(line: 8591, column: 5, scope: !6597)
!6606 = !DILocation(line: 8595, column: 7, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8595, column: 7)
!6608 = !DILocation(line: 8595, column: 11, scope: !6607)
!6609 = !DILocation(line: 8595, column: 16, scope: !6607)
!6610 = !DILocation(line: 8595, column: 19, scope: !6607)
!6611 = !DILocation(line: 8595, column: 35, scope: !6607)
!6612 = !DILocation(line: 8595, column: 7, scope: !6568)
!6613 = !DILocation(line: 8596, column: 5, scope: !6607)
!6614 = !DILocation(line: 8598, column: 8, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8598, column: 7)
!6616 = !DILocation(line: 8598, column: 7, scope: !6568)
!6617 = !DILocation(line: 8599, column: 22, scope: !6615)
!6618 = !DILocation(line: 8599, column: 12, scope: !6615)
!6619 = !DILocation(line: 8599, column: 10, scope: !6615)
!6620 = !DILocation(line: 8599, column: 5, scope: !6615)
!6621 = !DILocation(line: 8602, column: 7, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8602, column: 7)
!6623 = !DILocation(line: 8602, column: 12, scope: !6622)
!6624 = !DILocation(line: 8602, column: 17, scope: !6622)
!6625 = !DILocation(line: 8602, column: 20, scope: !6622)
!6626 = !DILocation(line: 8602, column: 37, scope: !6622)
!6627 = !DILocation(line: 8602, column: 7, scope: !6568)
!6628 = !DILocation(line: 8603, column: 5, scope: !6622)
!6629 = !DILocation(line: 8605, column: 26, scope: !6568)
!6630 = !DILocation(line: 8605, column: 42, scope: !6568)
!6631 = !DILocation(line: 8605, column: 48, scope: !6568)
!6632 = !DILocation(line: 8605, column: 10, scope: !6568)
!6633 = !DILocation(line: 8605, column: 8, scope: !6568)
!6634 = !DILocation(line: 8610, column: 24, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8610, column: 7)
!6636 = !DILocation(line: 8610, column: 30, scope: !6635)
!6637 = !DILocation(line: 8610, column: 7, scope: !6635)
!6638 = !DILocation(line: 8610, column: 7, scope: !6568)
!6639 = !DILocation(line: 8611, column: 5, scope: !6635)
!6640 = !DILocation(line: 8614, column: 8, scope: !6568)
!6641 = !DILocation(line: 8614, column: 6, scope: !6568)
!6642 = !DILocation(line: 8615, column: 8, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8615, column: 7)
!6644 = !DILocation(line: 8615, column: 7, scope: !6568)
!6645 = !DILocation(line: 8616, column: 5, scope: !6643)
!6646 = !DILocation(line: 8617, column: 28, scope: !6568)
!6647 = !DILocation(line: 8617, column: 33, scope: !6568)
!6648 = !DILocation(line: 8618, column: 28, scope: !6568)
!6649 = !DILocation(line: 8618, column: 33, scope: !6568)
!6650 = !DILocation(line: 8618, column: 40, scope: !6568)
!6651 = !DILocation(line: 8618, column: 46, scope: !6568)
!6652 = !DILocation(line: 8618, column: 51, scope: !6568)
!6653 = !DILocation(line: 8618, column: 7, scope: !6568)
!6654 = !DILocation(line: 8617, column: 10, scope: !6568)
!6655 = !DILocation(line: 8617, column: 3, scope: !6568)
!6656 = !DILocation(line: 8619, column: 1, scope: !6568)
!6657 = distinct !DISubprogram(name: "fold_call_expr", scope: !3, file: !3, line: 10755, type: !6658, scopeLine: 10756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6658 = !DISubroutineType(types: !6659)
!6659 = !{!3344, !3429, !3344, !3421}
!6660 = !DILocalVariable(name: "loc", arg: 1, scope: !6657, file: !3, line: 10755, type: !3429)
!6661 = !DILocation(line: 10755, column: 28, scope: !6657)
!6662 = !DILocalVariable(name: "exp", arg: 2, scope: !6657, file: !3, line: 10755, type: !3344)
!6663 = !DILocation(line: 10755, column: 38, scope: !6657)
!6664 = !DILocalVariable(name: "ignore", arg: 3, scope: !6657, file: !3, line: 10755, type: !3421)
!6665 = !DILocation(line: 10755, column: 48, scope: !6657)
!6666 = !DILocalVariable(name: "ret", scope: !6657, file: !3, line: 10757, type: !3344)
!6667 = !DILocation(line: 10757, column: 8, scope: !6657)
!6668 = !DILocalVariable(name: "fndecl", scope: !6657, file: !3, line: 10758, type: !3344)
!6669 = !DILocation(line: 10758, column: 8, scope: !6657)
!6670 = !DILocation(line: 10758, column: 36, scope: !6657)
!6671 = !DILocation(line: 10758, column: 17, scope: !6657)
!6672 = !DILocation(line: 10759, column: 7, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6657, file: !3, line: 10759, column: 7)
!6674 = !DILocation(line: 10760, column: 7, scope: !6673)
!6675 = !DILocation(line: 10760, column: 10, scope: !6673)
!6676 = !DILocation(line: 10760, column: 29, scope: !6673)
!6677 = !DILocation(line: 10761, column: 7, scope: !6673)
!6678 = !DILocation(line: 10761, column: 10, scope: !6673)
!6679 = !DILocation(line: 10765, column: 7, scope: !6673)
!6680 = !DILocation(line: 10765, column: 11, scope: !6673)
!6681 = !DILocation(line: 10759, column: 7, scope: !6657)
!6682 = !DILocalVariable(name: "nargs", scope: !6683, file: !3, line: 10767, type: !1445)
!6683 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 10766, column: 5)
!6684 = !DILocation(line: 10767, column: 11, scope: !6683)
!6685 = !DILocation(line: 10767, column: 19, scope: !6683)
!6686 = !DILocation(line: 10772, column: 11, scope: !6687)
!6687 = distinct !DILexicalBlock(scope: !6683, file: !3, line: 10772, column: 11)
!6688 = !DILocation(line: 10772, column: 17, scope: !6687)
!6689 = !DILocation(line: 10772, column: 20, scope: !6687)
!6690 = !DILocation(line: 10772, column: 63, scope: !6687)
!6691 = !DILocation(line: 10772, column: 11, scope: !6683)
!6692 = !DILocalVariable(name: "fndecl2", scope: !6693, file: !3, line: 10774, type: !3344)
!6693 = distinct !DILexicalBlock(scope: !6687, file: !3, line: 10773, column: 2)
!6694 = !DILocation(line: 10774, column: 9, scope: !6693)
!6695 = !DILocation(line: 10774, column: 38, scope: !6693)
!6696 = !DILocation(line: 10774, column: 19, scope: !6693)
!6697 = !DILocation(line: 10775, column: 8, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 10775, column: 8)
!6699 = !DILocation(line: 10776, column: 8, scope: !6698)
!6700 = !DILocation(line: 10776, column: 11, scope: !6698)
!6701 = !DILocation(line: 10776, column: 31, scope: !6698)
!6702 = !DILocation(line: 10777, column: 8, scope: !6698)
!6703 = !DILocation(line: 10777, column: 11, scope: !6698)
!6704 = !DILocation(line: 10777, column: 41, scope: !6698)
!6705 = !DILocation(line: 10778, column: 8, scope: !6698)
!6706 = !DILocation(line: 10778, column: 11, scope: !6698)
!6707 = !DILocation(line: 10778, column: 40, scope: !6698)
!6708 = !DILocation(line: 10775, column: 8, scope: !6693)
!6709 = !DILocation(line: 10779, column: 6, scope: !6698)
!6710 = !DILocation(line: 10780, column: 2, scope: !6693)
!6711 = !DILocation(line: 10782, column: 41, scope: !6712)
!6712 = distinct !DILexicalBlock(scope: !6683, file: !3, line: 10782, column: 11)
!6713 = !DILocation(line: 10782, column: 11, scope: !6712)
!6714 = !DILocation(line: 10782, column: 11, scope: !6683)
!6715 = !DILocation(line: 10783, column: 2, scope: !6712)
!6716 = !DILocation(line: 10786, column: 11, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6683, file: !3, line: 10786, column: 11)
!6718 = !DILocation(line: 10786, column: 40, scope: !6717)
!6719 = !DILocation(line: 10786, column: 11, scope: !6683)
!6720 = !DILocation(line: 10787, column: 19, scope: !6717)
!6721 = !DILocation(line: 10787, column: 33, scope: !6717)
!6722 = !DILocation(line: 10787, column: 41, scope: !6717)
!6723 = !DILocation(line: 10787, column: 63, scope: !6717)
!6724 = !DILocation(line: 10787, column: 11, scope: !6717)
!6725 = !DILocation(line: 10787, column: 4, scope: !6717)
!6726 = !DILocation(line: 10790, column: 8, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6728, file: !3, line: 10790, column: 8)
!6728 = distinct !DILexicalBlock(scope: !6717, file: !3, line: 10789, column: 2)
!6729 = !DILocation(line: 10790, column: 14, scope: !6727)
!6730 = !DILocation(line: 10790, column: 8, scope: !6728)
!6731 = !DILocalVariable(name: "args", scope: !6732, file: !3, line: 10792, type: !3666)
!6732 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 10791, column: 6)
!6733 = !DILocation(line: 10792, column: 14, scope: !6732)
!6734 = !DILocation(line: 10792, column: 21, scope: !6732)
!6735 = !DILocation(line: 10793, column: 30, scope: !6732)
!6736 = !DILocation(line: 10793, column: 35, scope: !6732)
!6737 = !DILocation(line: 10793, column: 43, scope: !6732)
!6738 = !DILocation(line: 10793, column: 49, scope: !6732)
!6739 = !DILocation(line: 10793, column: 56, scope: !6732)
!6740 = !DILocation(line: 10793, column: 14, scope: !6732)
!6741 = !DILocation(line: 10793, column: 12, scope: !6732)
!6742 = !DILocation(line: 10794, column: 6, scope: !6732)
!6743 = !DILocation(line: 10795, column: 9, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6728, file: !3, line: 10795, column: 8)
!6745 = !DILocation(line: 10795, column: 8, scope: !6728)
!6746 = !DILocation(line: 10796, column: 34, scope: !6744)
!6747 = !DILocation(line: 10796, column: 39, scope: !6744)
!6748 = !DILocation(line: 10796, column: 47, scope: !6744)
!6749 = !DILocation(line: 10796, column: 52, scope: !6744)
!6750 = !DILocation(line: 10796, column: 12, scope: !6744)
!6751 = !DILocation(line: 10796, column: 10, scope: !6744)
!6752 = !DILocation(line: 10796, column: 6, scope: !6744)
!6753 = !DILocation(line: 10797, column: 8, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6728, file: !3, line: 10797, column: 8)
!6755 = !DILocation(line: 10797, column: 8, scope: !6728)
!6756 = !DILocation(line: 10798, column: 13, scope: !6754)
!6757 = !DILocation(line: 10798, column: 6, scope: !6754)
!6758 = !DILocation(line: 10800, column: 5, scope: !6683)
!6759 = !DILocation(line: 10801, column: 3, scope: !6657)
!6760 = !DILocation(line: 10802, column: 1, scope: !6657)
!6761 = distinct !DISubprogram(name: "avoid_folding_inline_builtin", scope: !3, file: !3, line: 10741, type: !4815, scopeLine: 10742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6762 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6761, file: !3, line: 10741, type: !3344)
!6763 = !DILocation(line: 10741, column: 36, scope: !6761)
!6764 = !DILocation(line: 10743, column: 11, scope: !6761)
!6765 = !DILocation(line: 10744, column: 4, scope: !6761)
!6766 = !DILocation(line: 10744, column: 7, scope: !6761)
!6767 = !DILocation(line: 10745, column: 4, scope: !6761)
!6768 = !DILocation(line: 10745, column: 7, scope: !6761)
!6769 = !DILocation(line: 10746, column: 4, scope: !6761)
!6770 = !DILocation(line: 10746, column: 8, scope: !6761)
!6771 = !DILocation(line: 10746, column: 14, scope: !6761)
!6772 = !DILocation(line: 10747, column: 4, scope: !6761)
!6773 = !DILocation(line: 10747, column: 42, scope: !6761)
!6774 = !DILocation(line: 10747, column: 7, scope: !6761)
!6775 = !DILocation(line: 0, scope: !6761)
!6776 = !DILocation(line: 10743, column: 10, scope: !6761)
!6777 = !DILocation(line: 10743, column: 3, scope: !6761)
!6778 = distinct !DISubprogram(name: "fold_builtin_n", scope: !3, file: !3, line: 10656, type: !6779, scopeLine: 10657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6779 = !DISubroutineType(types: !6780)
!6780 = !{!3344, !3429, !3344, !3666, !1445, !3421}
!6781 = !DILocalVariable(name: "loc", arg: 1, scope: !6778, file: !3, line: 10656, type: !3429)
!6782 = !DILocation(line: 10656, column: 28, scope: !6778)
!6783 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6778, file: !3, line: 10656, type: !3344)
!6784 = !DILocation(line: 10656, column: 38, scope: !6778)
!6785 = !DILocalVariable(name: "args", arg: 3, scope: !6778, file: !3, line: 10656, type: !3666)
!6786 = !DILocation(line: 10656, column: 52, scope: !6778)
!6787 = !DILocalVariable(name: "nargs", arg: 4, scope: !6778, file: !3, line: 10656, type: !1445)
!6788 = !DILocation(line: 10656, column: 62, scope: !6778)
!6789 = !DILocalVariable(name: "ignore", arg: 5, scope: !6778, file: !3, line: 10656, type: !3421)
!6790 = !DILocation(line: 10656, column: 74, scope: !6778)
!6791 = !DILocalVariable(name: "ret", scope: !6778, file: !3, line: 10658, type: !3344)
!6792 = !DILocation(line: 10658, column: 8, scope: !6778)
!6793 = !DILocation(line: 10660, column: 11, scope: !6778)
!6794 = !DILocation(line: 10660, column: 3, scope: !6778)
!6795 = !DILocation(line: 10663, column: 29, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 10661, column: 5)
!6797 = !DILocation(line: 10663, column: 34, scope: !6796)
!6798 = !DILocation(line: 10663, column: 42, scope: !6796)
!6799 = !DILocation(line: 10663, column: 13, scope: !6796)
!6800 = !DILocation(line: 10663, column: 11, scope: !6796)
!6801 = !DILocation(line: 10664, column: 7, scope: !6796)
!6802 = !DILocation(line: 10666, column: 29, scope: !6796)
!6803 = !DILocation(line: 10666, column: 34, scope: !6796)
!6804 = !DILocation(line: 10666, column: 42, scope: !6796)
!6805 = !DILocation(line: 10666, column: 51, scope: !6796)
!6806 = !DILocation(line: 10666, column: 13, scope: !6796)
!6807 = !DILocation(line: 10666, column: 11, scope: !6796)
!6808 = !DILocation(line: 10667, column: 7, scope: !6796)
!6809 = !DILocation(line: 10669, column: 29, scope: !6796)
!6810 = !DILocation(line: 10669, column: 34, scope: !6796)
!6811 = !DILocation(line: 10669, column: 42, scope: !6796)
!6812 = !DILocation(line: 10669, column: 51, scope: !6796)
!6813 = !DILocation(line: 10669, column: 60, scope: !6796)
!6814 = !DILocation(line: 10669, column: 13, scope: !6796)
!6815 = !DILocation(line: 10669, column: 11, scope: !6796)
!6816 = !DILocation(line: 10670, column: 7, scope: !6796)
!6817 = !DILocation(line: 10672, column: 29, scope: !6796)
!6818 = !DILocation(line: 10672, column: 34, scope: !6796)
!6819 = !DILocation(line: 10672, column: 42, scope: !6796)
!6820 = !DILocation(line: 10672, column: 51, scope: !6796)
!6821 = !DILocation(line: 10672, column: 60, scope: !6796)
!6822 = !DILocation(line: 10672, column: 69, scope: !6796)
!6823 = !DILocation(line: 10672, column: 13, scope: !6796)
!6824 = !DILocation(line: 10672, column: 11, scope: !6796)
!6825 = !DILocation(line: 10673, column: 7, scope: !6796)
!6826 = !DILocation(line: 10675, column: 29, scope: !6796)
!6827 = !DILocation(line: 10675, column: 34, scope: !6796)
!6828 = !DILocation(line: 10675, column: 42, scope: !6796)
!6829 = !DILocation(line: 10675, column: 51, scope: !6796)
!6830 = !DILocation(line: 10675, column: 60, scope: !6796)
!6831 = !DILocation(line: 10675, column: 69, scope: !6796)
!6832 = !DILocation(line: 10676, column: 9, scope: !6796)
!6833 = !DILocation(line: 10675, column: 13, scope: !6796)
!6834 = !DILocation(line: 10675, column: 11, scope: !6796)
!6835 = !DILocation(line: 10677, column: 7, scope: !6796)
!6836 = !DILocation(line: 10679, column: 7, scope: !6796)
!6837 = !DILocation(line: 10681, column: 7, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 10681, column: 7)
!6839 = !DILocation(line: 10681, column: 7, scope: !6778)
!6840 = !DILocation(line: 10683, column: 13, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6838, file: !3, line: 10682, column: 5)
!6842 = !DILocation(line: 10683, column: 11, scope: !6841)
!6843 = !DILocation(line: 10684, column: 7, scope: !6841)
!6844 = !DILocation(line: 10685, column: 7, scope: !6841)
!6845 = !DILocation(line: 10685, column: 29, scope: !6841)
!6846 = !DILocation(line: 10686, column: 14, scope: !6841)
!6847 = !DILocation(line: 10686, column: 7, scope: !6841)
!6848 = !DILocation(line: 10688, column: 3, scope: !6778)
!6849 = !DILocation(line: 10689, column: 1, scope: !6778)
!6850 = distinct !DISubprogram(name: "fold_builtin_varargs", scope: !3, file: !3, line: 10699, type: !6851, scopeLine: 10701, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6851 = !DISubroutineType(types: !6852)
!6852 = !{!3344, !3429, !3344, !3344, !3421}
!6853 = !DILocalVariable(name: "loc", arg: 1, scope: !6850, file: !3, line: 10699, type: !3429)
!6854 = !DILocation(line: 10699, column: 34, scope: !6850)
!6855 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6850, file: !3, line: 10699, type: !3344)
!6856 = !DILocation(line: 10699, column: 44, scope: !6850)
!6857 = !DILocalVariable(name: "exp", arg: 3, scope: !6850, file: !3, line: 10699, type: !3344)
!6858 = !DILocation(line: 10699, column: 57, scope: !6850)
!6859 = !DILocalVariable(name: "ignore", arg: 4, scope: !6850, file: !3, line: 10700, type: !3421)
!6860 = !DILocation(line: 10700, column: 14, scope: !6850)
!6861 = !DILocalVariable(name: "fcode", scope: !6850, file: !3, line: 10702, type: !573)
!6862 = !DILocation(line: 10702, column: 26, scope: !6850)
!6863 = !DILocation(line: 10702, column: 34, scope: !6850)
!6864 = !DILocalVariable(name: "ret", scope: !6850, file: !3, line: 10703, type: !3344)
!6865 = !DILocation(line: 10703, column: 8, scope: !6850)
!6866 = !DILocation(line: 10705, column: 11, scope: !6850)
!6867 = !DILocation(line: 10705, column: 3, scope: !6850)
!6868 = !DILocation(line: 10709, column: 39, scope: !6869)
!6869 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 10706, column: 5)
!6870 = !DILocation(line: 10709, column: 44, scope: !6869)
!6871 = !DILocation(line: 10709, column: 49, scope: !6869)
!6872 = !DILocation(line: 10709, column: 13, scope: !6869)
!6873 = !DILocation(line: 10709, column: 11, scope: !6869)
!6874 = !DILocation(line: 10710, column: 7, scope: !6869)
!6875 = !DILocation(line: 10714, column: 40, scope: !6869)
!6876 = !DILocation(line: 10714, column: 45, scope: !6869)
!6877 = !DILocation(line: 10714, column: 61, scope: !6869)
!6878 = !DILocation(line: 10714, column: 13, scope: !6869)
!6879 = !DILocation(line: 10714, column: 11, scope: !6869)
!6880 = !DILocation(line: 10715, column: 7, scope: !6869)
!6881 = !DILocation(line: 10718, column: 38, scope: !6869)
!6882 = !DILocation(line: 10718, column: 43, scope: !6869)
!6883 = !DILocation(line: 10718, column: 13, scope: !6869)
!6884 = !DILocation(line: 10718, column: 11, scope: !6869)
!6885 = !DILocation(line: 10719, column: 7, scope: !6869)
!6886 = !DILocation(line: 10722, column: 7, scope: !6869)
!6887 = !DILocation(line: 10724, column: 7, scope: !6888)
!6888 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 10724, column: 7)
!6889 = !DILocation(line: 10724, column: 7, scope: !6850)
!6890 = !DILocation(line: 10726, column: 13, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 10725, column: 5)
!6892 = !DILocation(line: 10726, column: 11, scope: !6891)
!6893 = !DILocation(line: 10727, column: 7, scope: !6891)
!6894 = !DILocation(line: 10728, column: 7, scope: !6891)
!6895 = !DILocation(line: 10728, column: 29, scope: !6891)
!6896 = !DILocation(line: 10729, column: 14, scope: !6891)
!6897 = !DILocation(line: 10729, column: 7, scope: !6891)
!6898 = !DILocation(line: 10731, column: 3, scope: !6850)
!6899 = !DILocation(line: 10732, column: 1, scope: !6850)
!6900 = distinct !DISubprogram(name: "build_function_call_expr", scope: !3, file: !3, line: 10808, type: !6901, scopeLine: 10809, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6901 = !DISubroutineType(types: !6902)
!6902 = !{!3344, !3429, !3344, !3344}
!6903 = !DILocalVariable(name: "loc", arg: 1, scope: !6900, file: !3, line: 10808, type: !3429)
!6904 = !DILocation(line: 10808, column: 38, scope: !6900)
!6905 = !DILocalVariable(name: "fndecl", arg: 2, scope: !6900, file: !3, line: 10808, type: !3344)
!6906 = !DILocation(line: 10808, column: 48, scope: !6900)
!6907 = !DILocalVariable(name: "arglist", arg: 3, scope: !6900, file: !3, line: 10808, type: !3344)
!6908 = !DILocation(line: 10808, column: 61, scope: !6900)
!6909 = !DILocalVariable(name: "fntype", scope: !6900, file: !3, line: 10810, type: !3344)
!6910 = !DILocation(line: 10810, column: 8, scope: !6900)
!6911 = !DILocation(line: 10810, column: 17, scope: !6900)
!6912 = !DILocalVariable(name: "fn", scope: !6900, file: !3, line: 10811, type: !3344)
!6913 = !DILocation(line: 10811, column: 8, scope: !6900)
!6914 = !DILocation(line: 10811, column: 13, scope: !6900)
!6915 = !DILocalVariable(name: "n", scope: !6900, file: !3, line: 10812, type: !1445)
!6916 = !DILocation(line: 10812, column: 7, scope: !6900)
!6917 = !DILocation(line: 10812, column: 24, scope: !6900)
!6918 = !DILocation(line: 10812, column: 11, scope: !6900)
!6919 = !DILocalVariable(name: "argarray", scope: !6900, file: !3, line: 10813, type: !3666)
!6920 = !DILocation(line: 10813, column: 9, scope: !6900)
!6921 = !DILocation(line: 10813, column: 29, scope: !6900)
!6922 = !DILocation(line: 10813, column: 20, scope: !6900)
!6923 = !DILocalVariable(name: "i", scope: !6900, file: !3, line: 10814, type: !1445)
!6924 = !DILocation(line: 10814, column: 7, scope: !6900)
!6925 = !DILocation(line: 10816, column: 10, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 10816, column: 3)
!6927 = !DILocation(line: 10816, column: 8, scope: !6926)
!6928 = !DILocation(line: 10816, column: 15, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6926, file: !3, line: 10816, column: 3)
!6930 = !DILocation(line: 10816, column: 19, scope: !6929)
!6931 = !DILocation(line: 10816, column: 17, scope: !6929)
!6932 = !DILocation(line: 10816, column: 3, scope: !6926)
!6933 = !DILocation(line: 10817, column: 19, scope: !6929)
!6934 = !DILocation(line: 10817, column: 5, scope: !6929)
!6935 = !DILocation(line: 10817, column: 14, scope: !6929)
!6936 = !DILocation(line: 10817, column: 17, scope: !6929)
!6937 = !DILocation(line: 10816, column: 23, scope: !6929)
!6938 = !DILocation(line: 10816, column: 37, scope: !6929)
!6939 = !DILocation(line: 10816, column: 35, scope: !6929)
!6940 = !DILocation(line: 10816, column: 3, scope: !6929)
!6941 = distinct !{!6941, !6932, !6942}
!6942 = !DILocation(line: 10817, column: 19, scope: !6926)
!6943 = !DILocation(line: 10818, column: 35, scope: !6900)
!6944 = !DILocation(line: 10818, column: 40, scope: !6900)
!6945 = !DILocation(line: 10818, column: 60, scope: !6900)
!6946 = !DILocation(line: 10818, column: 64, scope: !6900)
!6947 = !DILocation(line: 10818, column: 67, scope: !6900)
!6948 = !DILocation(line: 10818, column: 10, scope: !6900)
!6949 = !DILocation(line: 10818, column: 3, scope: !6900)
!6950 = distinct !DISubprogram(name: "fold_builtin_call_array", scope: !3, file: !3, line: 10845, type: !6951, scopeLine: 10849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!6951 = !DISubroutineType(types: !6952)
!6952 = !{!3344, !3429, !3344, !3344, !1445, !3666}
!6953 = !DILocalVariable(name: "loc", arg: 1, scope: !6950, file: !3, line: 10845, type: !3429)
!6954 = !DILocation(line: 10845, column: 37, scope: !6950)
!6955 = !DILocalVariable(name: "type", arg: 2, scope: !6950, file: !3, line: 10845, type: !3344)
!6956 = !DILocation(line: 10845, column: 47, scope: !6950)
!6957 = !DILocalVariable(name: "fn", arg: 3, scope: !6950, file: !3, line: 10846, type: !3344)
!6958 = !DILocation(line: 10846, column: 10, scope: !6950)
!6959 = !DILocalVariable(name: "n", arg: 4, scope: !6950, file: !3, line: 10847, type: !1445)
!6960 = !DILocation(line: 10847, column: 9, scope: !6950)
!6961 = !DILocalVariable(name: "argarray", arg: 5, scope: !6950, file: !3, line: 10848, type: !3666)
!6962 = !DILocation(line: 10848, column: 11, scope: !6950)
!6963 = !DILocalVariable(name: "ret", scope: !6950, file: !3, line: 10850, type: !3344)
!6964 = !DILocation(line: 10850, column: 8, scope: !6950)
!6965 = !DILocalVariable(name: "i", scope: !6950, file: !3, line: 10851, type: !1445)
!6966 = !DILocation(line: 10851, column: 7, scope: !6950)
!6967 = !DILocalVariable(name: "exp", scope: !6950, file: !3, line: 10852, type: !3344)
!6968 = !DILocation(line: 10852, column: 9, scope: !6950)
!6969 = !DILocation(line: 10854, column: 7, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6950, file: !3, line: 10854, column: 7)
!6971 = !DILocation(line: 10854, column: 22, scope: !6970)
!6972 = !DILocation(line: 10854, column: 7, scope: !6950)
!6973 = !DILocalVariable(name: "fndecl", scope: !6974, file: !3, line: 10856, type: !3344)
!6974 = distinct !DILexicalBlock(scope: !6970, file: !3, line: 10855, column: 3)
!6975 = !DILocation(line: 10856, column: 10, scope: !6974)
!6976 = !DILocation(line: 10856, column: 19, scope: !6974)
!6977 = !DILocation(line: 10857, column: 9, scope: !6978)
!6978 = distinct !DILexicalBlock(scope: !6974, file: !3, line: 10857, column: 9)
!6979 = !DILocation(line: 10857, column: 28, scope: !6978)
!6980 = !DILocation(line: 10858, column: 9, scope: !6978)
!6981 = !DILocation(line: 10858, column: 12, scope: !6978)
!6982 = !DILocation(line: 10857, column: 9, scope: !6974)
!6983 = !DILocation(line: 10862, column: 6, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 10862, column: 6)
!6985 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 10859, column: 7)
!6986 = !DILocation(line: 10862, column: 8, scope: !6984)
!6987 = !DILocation(line: 10862, column: 11, scope: !6984)
!6988 = !DILocation(line: 10862, column: 39, scope: !6984)
!6989 = !DILocation(line: 10862, column: 6, scope: !6985)
!6990 = !DILocalVariable(name: "fndecl2", scope: !6991, file: !3, line: 10864, type: !3344)
!6991 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 10863, column: 4)
!6992 = !DILocation(line: 10864, column: 11, scope: !6991)
!6993 = !DILocation(line: 10864, column: 40, scope: !6991)
!6994 = !DILocation(line: 10864, column: 49, scope: !6991)
!6995 = !DILocation(line: 10864, column: 51, scope: !6991)
!6996 = !DILocation(line: 10864, column: 21, scope: !6991)
!6997 = !DILocation(line: 10865, column: 10, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 10865, column: 10)
!6999 = !DILocation(line: 10866, column: 3, scope: !6998)
!7000 = !DILocation(line: 10866, column: 6, scope: !6998)
!7001 = !DILocation(line: 10866, column: 26, scope: !6998)
!7002 = !DILocation(line: 10867, column: 3, scope: !6998)
!7003 = !DILocation(line: 10867, column: 6, scope: !6998)
!7004 = !DILocation(line: 10867, column: 36, scope: !6998)
!7005 = !DILocation(line: 10868, column: 3, scope: !6998)
!7006 = !DILocation(line: 10868, column: 6, scope: !6998)
!7007 = !DILocation(line: 10868, column: 35, scope: !6998)
!7008 = !DILocation(line: 10865, column: 10, scope: !6991)
!7009 = !DILocation(line: 10869, column: 37, scope: !6998)
!7010 = !DILocation(line: 10869, column: 42, scope: !6998)
!7011 = !DILocation(line: 10869, column: 48, scope: !6998)
!7012 = !DILocation(line: 10869, column: 52, scope: !6998)
!7013 = !DILocation(line: 10869, column: 55, scope: !6998)
!7014 = !DILocation(line: 10869, column: 15, scope: !6998)
!7015 = !DILocation(line: 10869, column: 8, scope: !6998)
!7016 = !DILocation(line: 10870, column: 4, scope: !6991)
!7017 = !DILocation(line: 10871, column: 36, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 10871, column: 6)
!7019 = !DILocation(line: 10871, column: 6, scope: !7018)
!7020 = !DILocation(line: 10871, column: 6, scope: !6985)
!7021 = !DILocation(line: 10872, column: 33, scope: !7018)
!7022 = !DILocation(line: 10872, column: 38, scope: !7018)
!7023 = !DILocation(line: 10872, column: 44, scope: !7018)
!7024 = !DILocation(line: 10872, column: 48, scope: !7018)
!7025 = !DILocation(line: 10872, column: 51, scope: !7018)
!7026 = !DILocation(line: 10872, column: 11, scope: !7018)
!7027 = !DILocation(line: 10872, column: 4, scope: !7018)
!7028 = !DILocation(line: 10873, column: 13, scope: !7029)
!7029 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 10873, column: 13)
!7030 = !DILocation(line: 10873, column: 42, scope: !7029)
!7031 = !DILocation(line: 10873, column: 13, scope: !6985)
!7032 = !DILocalVariable(name: "arglist", scope: !7033, file: !3, line: 10875, type: !3344)
!7033 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 10874, column: 11)
!7034 = !DILocation(line: 10875, column: 18, scope: !7033)
!7035 = !DILocation(line: 10876, column: 15, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 10876, column: 6)
!7037 = !DILocation(line: 10876, column: 17, scope: !7036)
!7038 = !DILocation(line: 10876, column: 13, scope: !7036)
!7039 = !DILocation(line: 10876, column: 11, scope: !7036)
!7040 = !DILocation(line: 10876, column: 22, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7036, file: !3, line: 10876, column: 6)
!7042 = !DILocation(line: 10876, column: 24, scope: !7041)
!7043 = !DILocation(line: 10876, column: 6, scope: !7036)
!7044 = !DILocation(line: 10877, column: 18, scope: !7041)
!7045 = !DILocation(line: 10877, column: 16, scope: !7041)
!7046 = !DILocation(line: 10877, column: 8, scope: !7041)
!7047 = !DILocation(line: 10876, column: 31, scope: !7041)
!7048 = !DILocation(line: 10876, column: 6, scope: !7041)
!7049 = distinct !{!7049, !7043, !7050}
!7050 = !DILocation(line: 10877, column: 18, scope: !7036)
!7051 = !DILocation(line: 10878, column: 27, scope: !7033)
!7052 = !DILocation(line: 10878, column: 41, scope: !7033)
!7053 = !DILocation(line: 10878, column: 49, scope: !7033)
!7054 = !DILocation(line: 10878, column: 19, scope: !7033)
!7055 = !DILocation(line: 10878, column: 17, scope: !7033)
!7056 = !DILocation(line: 10879, column: 17, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 10879, column: 17)
!7058 = !DILocation(line: 10879, column: 17, scope: !7033)
!7059 = !DILocation(line: 10880, column: 22, scope: !7057)
!7060 = !DILocation(line: 10880, column: 15, scope: !7057)
!7061 = !DILocation(line: 10881, column: 35, scope: !7033)
!7062 = !DILocation(line: 10881, column: 40, scope: !7033)
!7063 = !DILocation(line: 10881, column: 46, scope: !7033)
!7064 = !DILocation(line: 10881, column: 50, scope: !7033)
!7065 = !DILocation(line: 10881, column: 53, scope: !7033)
!7066 = !DILocation(line: 10881, column: 13, scope: !7033)
!7067 = !DILocation(line: 10881, column: 6, scope: !7033)
!7068 = !DILocation(line: 10883, column: 18, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 10883, column: 18)
!7070 = !DILocation(line: 10883, column: 20, scope: !7069)
!7071 = !DILocation(line: 10883, column: 18, scope: !7029)
!7072 = !DILocation(line: 10887, column: 35, scope: !7073)
!7073 = distinct !DILexicalBlock(scope: !7069, file: !3, line: 10884, column: 11)
!7074 = !DILocation(line: 10887, column: 40, scope: !7073)
!7075 = !DILocation(line: 10887, column: 48, scope: !7073)
!7076 = !DILocation(line: 10887, column: 58, scope: !7073)
!7077 = !DILocation(line: 10887, column: 19, scope: !7073)
!7078 = !DILocation(line: 10887, column: 17, scope: !7073)
!7079 = !DILocation(line: 10888, column: 17, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7073, file: !3, line: 10888, column: 17)
!7081 = !DILocation(line: 10888, column: 17, scope: !7073)
!7082 = !DILocation(line: 10889, column: 22, scope: !7080)
!7083 = !DILocation(line: 10889, column: 15, scope: !7080)
!7084 = !DILocation(line: 10890, column: 11, scope: !7073)
!7085 = !DILocation(line: 10893, column: 37, scope: !6985)
!7086 = !DILocation(line: 10893, column: 42, scope: !6985)
!7087 = !DILocation(line: 10893, column: 48, scope: !6985)
!7088 = !DILocation(line: 10893, column: 52, scope: !6985)
!7089 = !DILocation(line: 10893, column: 55, scope: !6985)
!7090 = !DILocation(line: 10893, column: 15, scope: !6985)
!7091 = !DILocation(line: 10893, column: 13, scope: !6985)
!7092 = !DILocation(line: 10894, column: 37, scope: !6985)
!7093 = !DILocation(line: 10894, column: 42, scope: !6985)
!7094 = !DILocation(line: 10894, column: 50, scope: !6985)
!7095 = !DILocation(line: 10894, column: 15, scope: !6985)
!7096 = !DILocation(line: 10894, column: 13, scope: !6985)
!7097 = !DILocation(line: 10895, column: 16, scope: !6985)
!7098 = !DILocation(line: 10895, column: 22, scope: !6985)
!7099 = !DILocation(line: 10895, column: 28, scope: !6985)
!7100 = !DILocation(line: 10895, column: 9, scope: !6985)
!7101 = !DILocation(line: 10897, column: 3, scope: !6974)
!7102 = !DILocation(line: 10899, column: 32, scope: !6950)
!7103 = !DILocation(line: 10899, column: 37, scope: !6950)
!7104 = !DILocation(line: 10899, column: 43, scope: !6950)
!7105 = !DILocation(line: 10899, column: 47, scope: !6950)
!7106 = !DILocation(line: 10899, column: 50, scope: !6950)
!7107 = !DILocation(line: 10899, column: 10, scope: !6950)
!7108 = !DILocation(line: 10899, column: 3, scope: !6950)
!7109 = !DILocation(line: 10900, column: 1, scope: !6950)
!7110 = distinct !DISubprogram(name: "validate_gimple_arglist", scope: !3, file: !3, line: 10960, type: !7111, scopeLine: 10961, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7111 = !DISubroutineType(types: !7112)
!7112 = !{!3421, !7113, null}
!7113 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !3345, line: 60, baseType: !4735)
!7114 = !DILocalVariable(name: "call", arg: 1, scope: !7110, file: !3, line: 10960, type: !7113)
!7115 = !DILocation(line: 10960, column: 39, scope: !7110)
!7116 = !DILocalVariable(name: "code", scope: !7110, file: !3, line: 10962, type: !134)
!7117 = !DILocation(line: 10962, column: 18, scope: !7110)
!7118 = !DILocalVariable(name: "res", scope: !7110, file: !3, line: 10963, type: !3421)
!7119 = !DILocation(line: 10963, column: 8, scope: !7110)
!7120 = !DILocalVariable(name: "ap", scope: !7110, file: !3, line: 10964, type: !6012)
!7121 = !DILocation(line: 10964, column: 11, scope: !7110)
!7122 = !DILocalVariable(name: "arg", scope: !7110, file: !3, line: 10965, type: !4967)
!7123 = !DILocation(line: 10965, column: 14, scope: !7110)
!7124 = !DILocalVariable(name: "i", scope: !7110, file: !3, line: 10966, type: !3777)
!7125 = !DILocation(line: 10966, column: 10, scope: !7110)
!7126 = !DILocation(line: 10968, column: 3, scope: !7110)
!7127 = !DILocation(line: 10969, column: 5, scope: !7110)
!7128 = !DILocation(line: 10971, column: 3, scope: !7110)
!7129 = !DILocation(line: 10973, column: 31, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 10972, column: 5)
!7131 = !DILocation(line: 10973, column: 12, scope: !7130)
!7132 = !DILocation(line: 10974, column: 15, scope: !7130)
!7133 = !DILocation(line: 10974, column: 7, scope: !7130)
!7134 = !DILocation(line: 10978, column: 8, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7130, file: !3, line: 10975, column: 2)
!7136 = !DILocation(line: 10979, column: 4, scope: !7135)
!7137 = !DILocation(line: 10983, column: 11, scope: !7135)
!7138 = !DILocation(line: 10983, column: 38, scope: !7135)
!7139 = !DILocation(line: 10983, column: 16, scope: !7135)
!7140 = !DILocation(line: 10983, column: 13, scope: !7135)
!7141 = !DILocation(line: 10983, column: 10, scope: !7135)
!7142 = !DILocation(line: 10983, column: 8, scope: !7135)
!7143 = !DILocation(line: 10984, column: 4, scope: !7135)
!7144 = !DILocation(line: 10989, column: 27, scope: !7135)
!7145 = !DILocation(line: 10989, column: 34, scope: !7135)
!7146 = !DILocation(line: 10989, column: 33, scope: !7135)
!7147 = !DILocation(line: 10989, column: 10, scope: !7135)
!7148 = !DILocation(line: 10989, column: 8, scope: !7135)
!7149 = !DILocation(line: 10990, column: 23, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7135, file: !3, line: 10990, column: 8)
!7151 = !DILocation(line: 10990, column: 28, scope: !7150)
!7152 = !DILocation(line: 10990, column: 9, scope: !7150)
!7153 = !DILocation(line: 10990, column: 8, scope: !7135)
!7154 = !DILocation(line: 10991, column: 6, scope: !7150)
!7155 = !DILocation(line: 10992, column: 4, scope: !7135)
!7156 = !DILocation(line: 10994, column: 5, scope: !7130)
!7157 = distinct !{!7157, !7128, !7158}
!7158 = !DILocation(line: 10995, column: 11, scope: !7110)
!7159 = !DILabel(scope: !7110, name: "end", file: !3, line: 10999)
!7160 = !DILocation(line: 10999, column: 2, scope: !7110)
!7161 = !DILocation(line: 11000, column: 3, scope: !7110)
!7162 = !DILocation(line: 11002, column: 10, scope: !7110)
!7163 = !DILocation(line: 11002, column: 3, scope: !7110)
!7164 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !1437, file: !1437, line: 2013, type: !7165, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7165 = !DISubroutineType(types: !7166)
!7166 = !{!7, !7113}
!7167 = !DILocalVariable(name: "gs", arg: 1, scope: !7164, file: !1437, line: 2013, type: !7113)
!7168 = !DILocation(line: 2013, column: 36, scope: !7164)
!7169 = !DILocalVariable(name: "num_ops", scope: !7164, file: !1437, line: 2015, type: !7)
!7170 = !DILocation(line: 2015, column: 12, scope: !7164)
!7171 = !DILocation(line: 2017, column: 29, scope: !7164)
!7172 = !DILocation(line: 2017, column: 13, scope: !7164)
!7173 = !DILocation(line: 2017, column: 11, scope: !7164)
!7174 = !DILocation(line: 2018, column: 10, scope: !7164)
!7175 = !DILocation(line: 2018, column: 18, scope: !7164)
!7176 = !DILocation(line: 2018, column: 3, scope: !7164)
!7177 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1437, file: !1437, line: 2025, type: !7178, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7178 = !DISubroutineType(types: !7179)
!7179 = !{!3344, !7113, !7}
!7180 = !DILocalVariable(name: "gs", arg: 1, scope: !7177, file: !1437, line: 2025, type: !7113)
!7181 = !DILocation(line: 2025, column: 31, scope: !7177)
!7182 = !DILocalVariable(name: "index", arg: 2, scope: !7177, file: !1437, line: 2025, type: !7)
!7183 = !DILocation(line: 2025, column: 44, scope: !7177)
!7184 = !DILocation(line: 2028, column: 21, scope: !7177)
!7185 = !DILocation(line: 2028, column: 25, scope: !7177)
!7186 = !DILocation(line: 2028, column: 31, scope: !7177)
!7187 = !DILocation(line: 2028, column: 10, scope: !7177)
!7188 = !DILocation(line: 2028, column: 3, scope: !7177)
!7189 = distinct !DISubprogram(name: "validate_arglist", scope: !3, file: !3, line: 11011, type: !7190, scopeLine: 11012, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7190 = !DISubroutineType(types: !7191)
!7191 = !{!3421, !4967, null}
!7192 = !DILocalVariable(name: "callexpr", arg: 1, scope: !7189, file: !3, line: 11011, type: !4967)
!7193 = !DILocation(line: 11011, column: 30, scope: !7189)
!7194 = !DILocalVariable(name: "code", scope: !7189, file: !3, line: 11013, type: !134)
!7195 = !DILocation(line: 11013, column: 18, scope: !7189)
!7196 = !DILocalVariable(name: "res", scope: !7189, file: !3, line: 11014, type: !3421)
!7197 = !DILocation(line: 11014, column: 8, scope: !7189)
!7198 = !DILocalVariable(name: "ap", scope: !7189, file: !3, line: 11015, type: !6012)
!7199 = !DILocation(line: 11015, column: 11, scope: !7189)
!7200 = !DILocalVariable(name: "iter", scope: !7189, file: !3, line: 11016, type: !6302)
!7201 = !DILocation(line: 11016, column: 32, scope: !7189)
!7202 = !DILocalVariable(name: "arg", scope: !7189, file: !3, line: 11017, type: !4967)
!7203 = !DILocation(line: 11017, column: 14, scope: !7189)
!7204 = !DILocation(line: 11019, column: 3, scope: !7189)
!7205 = !DILocation(line: 11020, column: 38, scope: !7189)
!7206 = !DILocation(line: 11020, column: 3, scope: !7189)
!7207 = !DILocation(line: 11022, column: 3, scope: !7189)
!7208 = !DILocation(line: 11024, column: 31, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7189, file: !3, line: 11023, column: 5)
!7210 = !DILocation(line: 11024, column: 12, scope: !7209)
!7211 = !DILocation(line: 11025, column: 15, scope: !7209)
!7212 = !DILocation(line: 11025, column: 7, scope: !7209)
!7213 = !DILocation(line: 11029, column: 8, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 11026, column: 2)
!7215 = !DILocation(line: 11030, column: 4, scope: !7214)
!7216 = !DILocation(line: 11034, column: 11, scope: !7214)
!7217 = !DILocation(line: 11034, column: 10, scope: !7214)
!7218 = !DILocation(line: 11034, column: 8, scope: !7214)
!7219 = !DILocation(line: 11035, column: 4, scope: !7214)
!7220 = !DILocation(line: 11040, column: 10, scope: !7214)
!7221 = !DILocation(line: 11040, column: 8, scope: !7214)
!7222 = !DILocation(line: 11041, column: 23, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 11041, column: 8)
!7224 = !DILocation(line: 11041, column: 28, scope: !7223)
!7225 = !DILocation(line: 11041, column: 9, scope: !7223)
!7226 = !DILocation(line: 11041, column: 8, scope: !7214)
!7227 = !DILocation(line: 11042, column: 6, scope: !7223)
!7228 = !DILocation(line: 11043, column: 4, scope: !7214)
!7229 = !DILocation(line: 11045, column: 5, scope: !7209)
!7230 = distinct !{!7230, !7207, !7231}
!7231 = !DILocation(line: 11046, column: 11, scope: !7189)
!7232 = !DILabel(scope: !7189, name: "end", file: !3, line: 11050)
!7233 = !DILocation(line: 11050, column: 2, scope: !7189)
!7234 = !DILocation(line: 11051, column: 3, scope: !7189)
!7235 = !DILocation(line: 11053, column: 10, scope: !7189)
!7236 = !DILocation(line: 11053, column: 3, scope: !7189)
!7237 = distinct !DISubprogram(name: "default_expand_builtin", scope: !3, file: !3, line: 11059, type: !6125, scopeLine: 11064, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7238 = !DILocalVariable(name: "exp", arg: 1, scope: !7237, file: !3, line: 11059, type: !3344)
!7239 = !DILocation(line: 11059, column: 30, scope: !7237)
!7240 = !DILocalVariable(name: "target", arg: 2, scope: !7237, file: !3, line: 11060, type: !3479)
!7241 = !DILocation(line: 11060, column: 8, scope: !7237)
!7242 = !DILocalVariable(name: "subtarget", arg: 3, scope: !7237, file: !3, line: 11061, type: !3479)
!7243 = !DILocation(line: 11061, column: 8, scope: !7237)
!7244 = !DILocalVariable(name: "mode", arg: 4, scope: !7237, file: !3, line: 11062, type: !5)
!7245 = !DILocation(line: 11062, column: 22, scope: !7237)
!7246 = !DILocalVariable(name: "ignore", arg: 5, scope: !7237, file: !3, line: 11063, type: !1445)
!7247 = !DILocation(line: 11063, column: 8, scope: !7237)
!7248 = !DILocation(line: 11065, column: 3, scope: !7237)
!7249 = distinct !DISubprogram(name: "fold_builtin_fputs", scope: !3, file: !3, line: 11583, type: !7250, scopeLine: 11585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7250 = !DISubroutineType(types: !7251)
!7251 = !{!3344, !3429, !3344, !3344, !3421, !3421, !3344}
!7252 = !DILocalVariable(name: "loc", arg: 1, scope: !7249, file: !3, line: 11583, type: !3429)
!7253 = !DILocation(line: 11583, column: 32, scope: !7249)
!7254 = !DILocalVariable(name: "arg0", arg: 2, scope: !7249, file: !3, line: 11583, type: !3344)
!7255 = !DILocation(line: 11583, column: 42, scope: !7249)
!7256 = !DILocalVariable(name: "arg1", arg: 3, scope: !7249, file: !3, line: 11583, type: !3344)
!7257 = !DILocation(line: 11583, column: 53, scope: !7249)
!7258 = !DILocalVariable(name: "ignore", arg: 4, scope: !7249, file: !3, line: 11584, type: !3421)
!7259 = !DILocation(line: 11584, column: 12, scope: !7249)
!7260 = !DILocalVariable(name: "unlocked", arg: 5, scope: !7249, file: !3, line: 11584, type: !3421)
!7261 = !DILocation(line: 11584, column: 25, scope: !7249)
!7262 = !DILocalVariable(name: "len", arg: 6, scope: !7249, file: !3, line: 11584, type: !3344)
!7263 = !DILocation(line: 11584, column: 40, scope: !7249)
!7264 = !DILocalVariable(name: "fn_fputc", scope: !7249, file: !3, line: 11588, type: !5368)
!7265 = !DILocation(line: 11588, column: 14, scope: !7249)
!7266 = !DILocation(line: 11588, column: 25, scope: !7249)
!7267 = !DILocation(line: 11588, column: 36, scope: !7249)
!7268 = !DILocation(line: 11589, column: 7, scope: !7249)
!7269 = !DILocalVariable(name: "fn_fwrite", scope: !7249, file: !3, line: 11590, type: !5368)
!7270 = !DILocation(line: 11590, column: 14, scope: !7249)
!7271 = !DILocation(line: 11590, column: 26, scope: !7249)
!7272 = !DILocation(line: 11590, column: 37, scope: !7249)
!7273 = !DILocation(line: 11591, column: 7, scope: !7249)
!7274 = !DILocation(line: 11594, column: 8, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 11594, column: 7)
!7276 = !DILocation(line: 11594, column: 7, scope: !7249)
!7277 = !DILocation(line: 11595, column: 5, scope: !7275)
!7278 = !DILocation(line: 11598, column: 22, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 11598, column: 7)
!7280 = !DILocation(line: 11598, column: 8, scope: !7279)
!7281 = !DILocation(line: 11599, column: 7, scope: !7279)
!7282 = !DILocation(line: 11599, column: 25, scope: !7279)
!7283 = !DILocation(line: 11599, column: 11, scope: !7279)
!7284 = !DILocation(line: 11598, column: 7, scope: !7249)
!7285 = !DILocation(line: 11600, column: 5, scope: !7279)
!7286 = !DILocation(line: 11602, column: 9, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 11602, column: 7)
!7288 = !DILocation(line: 11602, column: 7, scope: !7249)
!7289 = !DILocation(line: 11603, column: 21, scope: !7287)
!7290 = !DILocation(line: 11603, column: 11, scope: !7287)
!7291 = !DILocation(line: 11603, column: 9, scope: !7287)
!7292 = !DILocation(line: 11603, column: 5, scope: !7287)
!7293 = !DILocation(line: 11607, column: 8, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 11607, column: 7)
!7295 = !DILocation(line: 11608, column: 7, scope: !7294)
!7296 = !DILocation(line: 11608, column: 10, scope: !7294)
!7297 = !DILocation(line: 11608, column: 26, scope: !7294)
!7298 = !DILocation(line: 11607, column: 7, scope: !7249)
!7299 = !DILocation(line: 11609, column: 5, scope: !7294)
!7300 = !DILocation(line: 11611, column: 29, scope: !7249)
!7301 = !DILocation(line: 11611, column: 11, scope: !7249)
!7302 = !DILocation(line: 11611, column: 3, scope: !7249)
!7303 = !DILocation(line: 11614, column: 36, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 11612, column: 5)
!7305 = !DILocation(line: 11614, column: 41, scope: !7304)
!7306 = !DILocation(line: 11615, column: 11, scope: !7304)
!7307 = !DILocation(line: 11615, column: 30, scope: !7304)
!7308 = !DILocation(line: 11614, column: 14, scope: !7304)
!7309 = !DILocation(line: 11614, column: 7, scope: !7304)
!7310 = !DILocalVariable(name: "p", scope: !7311, file: !3, line: 11619, type: !3504)
!7311 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 11618, column: 7)
!7312 = !DILocation(line: 11619, column: 14, scope: !7311)
!7313 = !DILocation(line: 11619, column: 28, scope: !7311)
!7314 = !DILocation(line: 11619, column: 18, scope: !7311)
!7315 = !DILocation(line: 11621, column: 6, scope: !7316)
!7316 = distinct !DILexicalBlock(scope: !7311, file: !3, line: 11621, column: 6)
!7317 = !DILocation(line: 11621, column: 8, scope: !7316)
!7318 = !DILocation(line: 11621, column: 6, scope: !7311)
!7319 = !DILocation(line: 11623, column: 11, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7321, file: !3, line: 11623, column: 11)
!7321 = distinct !DILexicalBlock(scope: !7316, file: !3, line: 11622, column: 4)
!7322 = !DILocation(line: 11623, column: 11, scope: !7321)
!7323 = !DILocation(line: 11624, column: 36, scope: !7320)
!7324 = !DILocation(line: 11624, column: 41, scope: !7320)
!7325 = !DILocation(line: 11625, column: 37, scope: !7320)
!7326 = !DILocation(line: 11625, column: 11, scope: !7320)
!7327 = !DILocation(line: 11625, column: 44, scope: !7320)
!7328 = !DILocation(line: 11624, column: 15, scope: !7320)
!7329 = !DILocation(line: 11624, column: 8, scope: !7320)
!7330 = !DILocation(line: 11627, column: 8, scope: !7320)
!7331 = !DILocation(line: 11629, column: 7, scope: !7311)
!7332 = !DILocation(line: 11634, column: 36, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !7334, file: !3, line: 11634, column: 6)
!7334 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 11632, column: 7)
!7335 = !DILocation(line: 11634, column: 6, scope: !7333)
!7336 = !DILocation(line: 11634, column: 6, scope: !7334)
!7337 = !DILocation(line: 11635, column: 4, scope: !7333)
!7338 = !DILocation(line: 11638, column: 6, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7334, file: !3, line: 11638, column: 6)
!7340 = !DILocation(line: 11638, column: 6, scope: !7334)
!7341 = !DILocation(line: 11639, column: 32, scope: !7339)
!7342 = !DILocation(line: 11639, column: 37, scope: !7339)
!7343 = !DILocation(line: 11639, column: 51, scope: !7339)
!7344 = !DILocation(line: 11640, column: 7, scope: !7339)
!7345 = !DILocation(line: 11640, column: 22, scope: !7339)
!7346 = !DILocation(line: 11640, column: 27, scope: !7339)
!7347 = !DILocation(line: 11639, column: 11, scope: !7339)
!7348 = !DILocation(line: 11639, column: 4, scope: !7339)
!7349 = !DILocation(line: 11642, column: 4, scope: !7339)
!7350 = !DILocation(line: 11645, column: 7, scope: !7304)
!7351 = !DILocation(line: 11646, column: 5, scope: !7304)
!7352 = !DILocation(line: 11647, column: 3, scope: !7249)
!7353 = !DILocation(line: 11648, column: 1, scope: !7249)
!7354 = distinct !DISubprogram(name: "c_getstr", scope: !3, file: !3, line: 526, type: !7355, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7355 = !DISubroutineType(types: !7356)
!7356 = !{!3504, !3344}
!7357 = !DILocalVariable(name: "src", arg: 1, scope: !7354, file: !3, line: 526, type: !3344)
!7358 = !DILocation(line: 526, column: 16, scope: !7354)
!7359 = !DILocalVariable(name: "offset_node", scope: !7354, file: !3, line: 528, type: !3344)
!7360 = !DILocation(line: 528, column: 8, scope: !7354)
!7361 = !DILocation(line: 530, column: 26, scope: !7354)
!7362 = !DILocation(line: 530, column: 9, scope: !7354)
!7363 = !DILocation(line: 530, column: 7, scope: !7354)
!7364 = !DILocation(line: 531, column: 7, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 531, column: 7)
!7366 = !DILocation(line: 531, column: 11, scope: !7365)
!7367 = !DILocation(line: 531, column: 7, scope: !7354)
!7368 = !DILocation(line: 532, column: 5, scope: !7365)
!7369 = !DILocation(line: 534, column: 7, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 534, column: 7)
!7371 = !DILocation(line: 534, column: 19, scope: !7370)
!7372 = !DILocation(line: 534, column: 7, scope: !7354)
!7373 = !DILocation(line: 535, column: 12, scope: !7370)
!7374 = !DILocation(line: 535, column: 5, scope: !7370)
!7375 = !DILocation(line: 536, column: 28, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 536, column: 12)
!7377 = !DILocation(line: 536, column: 13, scope: !7376)
!7378 = !DILocation(line: 537, column: 5, scope: !7376)
!7379 = !DILocation(line: 537, column: 26, scope: !7376)
!7380 = !DILocation(line: 537, column: 39, scope: !7376)
!7381 = !DILocation(line: 537, column: 64, scope: !7376)
!7382 = !DILocation(line: 537, column: 8, scope: !7376)
!7383 = !DILocation(line: 537, column: 69, scope: !7376)
!7384 = !DILocation(line: 536, column: 12, scope: !7370)
!7385 = !DILocation(line: 538, column: 5, scope: !7376)
!7386 = !DILocation(line: 540, column: 10, scope: !7354)
!7387 = !DILocation(line: 540, column: 52, scope: !7354)
!7388 = !DILocation(line: 540, column: 38, scope: !7354)
!7389 = !DILocation(line: 540, column: 36, scope: !7354)
!7390 = !DILocation(line: 540, column: 3, scope: !7354)
!7391 = !DILocation(line: 541, column: 1, scope: !7354)
!7392 = distinct !DISubprogram(name: "fold_builtin_next_arg", scope: !3, file: !3, line: 11655, type: !7393, scopeLine: 11656, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7393 = !DISubroutineType(types: !7394)
!7394 = !{!3421, !3344, !3421}
!7395 = !DILocalVariable(name: "exp", arg: 1, scope: !7392, file: !3, line: 11655, type: !3344)
!7396 = !DILocation(line: 11655, column: 29, scope: !7392)
!7397 = !DILocalVariable(name: "va_start_p", arg: 2, scope: !7392, file: !3, line: 11655, type: !3421)
!7398 = !DILocation(line: 11655, column: 39, scope: !7392)
!7399 = !DILocalVariable(name: "fntype", scope: !7392, file: !3, line: 11657, type: !3344)
!7400 = !DILocation(line: 11657, column: 8, scope: !7392)
!7401 = !DILocation(line: 11657, column: 17, scope: !7392)
!7402 = !DILocalVariable(name: "nargs", scope: !7392, file: !3, line: 11658, type: !1445)
!7403 = !DILocation(line: 11658, column: 7, scope: !7392)
!7404 = !DILocation(line: 11658, column: 15, scope: !7392)
!7405 = !DILocalVariable(name: "arg", scope: !7392, file: !3, line: 11659, type: !3344)
!7406 = !DILocation(line: 11659, column: 8, scope: !7392)
!7407 = !DILocation(line: 11661, column: 7, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 11661, column: 7)
!7409 = !DILocation(line: 11661, column: 31, scope: !7408)
!7410 = !DILocation(line: 11662, column: 7, scope: !7408)
!7411 = !DILocation(line: 11662, column: 11, scope: !7408)
!7412 = !DILocation(line: 11663, column: 7, scope: !7408)
!7413 = !DILocation(line: 11663, column: 4, scope: !7408)
!7414 = !DILocation(line: 11661, column: 7, scope: !7392)
!7415 = !DILocation(line: 11665, column: 7, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 11664, column: 5)
!7417 = !DILocation(line: 11666, column: 7, scope: !7416)
!7418 = !DILocation(line: 11669, column: 7, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 11669, column: 7)
!7420 = !DILocation(line: 11669, column: 7, scope: !7392)
!7421 = !DILocation(line: 11671, column: 11, scope: !7422)
!7422 = distinct !DILexicalBlock(scope: !7423, file: !3, line: 11671, column: 11)
!7423 = distinct !DILexicalBlock(scope: !7419, file: !3, line: 11670, column: 5)
!7424 = !DILocation(line: 11671, column: 22, scope: !7422)
!7425 = !DILocation(line: 11671, column: 26, scope: !7422)
!7426 = !DILocation(line: 11671, column: 32, scope: !7422)
!7427 = !DILocation(line: 11671, column: 11, scope: !7423)
!7428 = !DILocation(line: 11673, column: 4, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 11672, column: 2)
!7430 = !DILocation(line: 11674, column: 4, scope: !7429)
!7431 = !DILocation(line: 11676, column: 13, scope: !7423)
!7432 = !DILocation(line: 11676, column: 11, scope: !7423)
!7433 = !DILocation(line: 11677, column: 5, scope: !7423)
!7434 = !DILocation(line: 11682, column: 11, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 11682, column: 11)
!7436 = distinct !DILexicalBlock(scope: !7419, file: !3, line: 11681, column: 5)
!7437 = !DILocation(line: 11682, column: 17, scope: !7435)
!7438 = !DILocation(line: 11682, column: 11, scope: !7436)
!7439 = !DILocation(line: 11686, column: 4, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 11683, column: 2)
!7441 = !DILocation(line: 11687, column: 4, scope: !7440)
!7442 = !DILocation(line: 11689, column: 16, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 11689, column: 16)
!7444 = !DILocation(line: 11689, column: 22, scope: !7443)
!7445 = !DILocation(line: 11689, column: 16, scope: !7435)
!7446 = !DILocation(line: 11691, column: 4, scope: !7447)
!7447 = distinct !DILexicalBlock(scope: !7443, file: !3, line: 11690, column: 2)
!7448 = !DILocation(line: 11692, column: 4, scope: !7447)
!7449 = !DILocation(line: 11694, column: 13, scope: !7436)
!7450 = !DILocation(line: 11694, column: 11, scope: !7436)
!7451 = !DILocation(line: 11697, column: 7, scope: !7452)
!7452 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 11697, column: 7)
!7453 = !DILocation(line: 11697, column: 23, scope: !7452)
!7454 = !DILocation(line: 11697, column: 7, scope: !7392)
!7455 = !DILocation(line: 11698, column: 11, scope: !7452)
!7456 = !DILocation(line: 11698, column: 9, scope: !7452)
!7457 = !DILocation(line: 11698, column: 5, scope: !7452)
!7458 = !DILocation(line: 11703, column: 23, scope: !7459)
!7459 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 11703, column: 7)
!7460 = !DILocation(line: 11703, column: 8, scope: !7459)
!7461 = !DILocation(line: 11703, column: 7, scope: !7392)
!7462 = !DILocalVariable(name: "last_parm", scope: !7463, file: !3, line: 11705, type: !3344)
!7463 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 11704, column: 5)
!7464 = !DILocation(line: 11705, column: 12, scope: !7463)
!7465 = !DILocation(line: 11705, column: 35, scope: !7463)
!7466 = !DILocation(line: 11705, column: 24, scope: !7463)
!7467 = !DILocation(line: 11711, column: 7, scope: !7463)
!7468 = !DILocation(line: 11711, column: 14, scope: !7463)
!7469 = !DILocation(line: 11712, column: 7, scope: !7463)
!7470 = !DILocation(line: 11712, column: 10, scope: !7463)
!7471 = !DILocation(line: 11712, column: 26, scope: !7463)
!7472 = !DILocation(line: 11713, column: 8, scope: !7463)
!7473 = !DILocation(line: 11713, column: 6, scope: !7463)
!7474 = distinct !{!7474, !7467, !7472}
!7475 = !DILocation(line: 11714, column: 11, scope: !7476)
!7476 = distinct !DILexicalBlock(scope: !7463, file: !3, line: 11714, column: 11)
!7477 = !DILocation(line: 11714, column: 18, scope: !7476)
!7478 = !DILocation(line: 11714, column: 15, scope: !7476)
!7479 = !DILocation(line: 11714, column: 11, scope: !7463)
!7480 = !DILocation(line: 11721, column: 4, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 11715, column: 2)
!7482 = !DILocation(line: 11722, column: 2, scope: !7481)
!7483 = !DILocation(line: 11730, column: 16, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 11730, column: 16)
!7485 = !DILocation(line: 11730, column: 16, scope: !7476)
!7486 = !DILocation(line: 11731, column: 9, scope: !7484)
!7487 = !DILocation(line: 11739, column: 11, scope: !7488)
!7488 = distinct !DILexicalBlock(scope: !7463, file: !3, line: 11739, column: 11)
!7489 = !DILocation(line: 11739, column: 11, scope: !7463)
!7490 = !DILocation(line: 11740, column: 27, scope: !7488)
!7491 = !DILocation(line: 11740, column: 2, scope: !7488)
!7492 = !DILocation(line: 11740, column: 25, scope: !7488)
!7493 = !DILocation(line: 11742, column: 27, scope: !7488)
!7494 = !DILocation(line: 11742, column: 2, scope: !7488)
!7495 = !DILocation(line: 11742, column: 25, scope: !7488)
!7496 = !DILocation(line: 11743, column: 5, scope: !7463)
!7497 = !DILocation(line: 11744, column: 3, scope: !7392)
!7498 = !DILocation(line: 11745, column: 1, scope: !7392)
!7499 = distinct !DISubprogram(name: "fold_builtin_memory_chk", scope: !3, file: !3, line: 12203, type: !7500, scopeLine: 12207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7500 = !DISubroutineType(types: !7501)
!7501 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3344, !3344, !3421, !573}
!7502 = !DILocalVariable(name: "loc", arg: 1, scope: !7499, file: !3, line: 12203, type: !3429)
!7503 = !DILocation(line: 12203, column: 37, scope: !7499)
!7504 = !DILocalVariable(name: "fndecl", arg: 2, scope: !7499, file: !3, line: 12203, type: !3344)
!7505 = !DILocation(line: 12203, column: 47, scope: !7499)
!7506 = !DILocalVariable(name: "dest", arg: 3, scope: !7499, file: !3, line: 12204, type: !3344)
!7507 = !DILocation(line: 12204, column: 10, scope: !7499)
!7508 = !DILocalVariable(name: "src", arg: 4, scope: !7499, file: !3, line: 12204, type: !3344)
!7509 = !DILocation(line: 12204, column: 21, scope: !7499)
!7510 = !DILocalVariable(name: "len", arg: 5, scope: !7499, file: !3, line: 12204, type: !3344)
!7511 = !DILocation(line: 12204, column: 31, scope: !7499)
!7512 = !DILocalVariable(name: "size", arg: 6, scope: !7499, file: !3, line: 12204, type: !3344)
!7513 = !DILocation(line: 12204, column: 41, scope: !7499)
!7514 = !DILocalVariable(name: "maxlen", arg: 7, scope: !7499, file: !3, line: 12205, type: !3344)
!7515 = !DILocation(line: 12205, column: 10, scope: !7499)
!7516 = !DILocalVariable(name: "ignore", arg: 8, scope: !7499, file: !3, line: 12205, type: !3421)
!7517 = !DILocation(line: 12205, column: 23, scope: !7499)
!7518 = !DILocalVariable(name: "fcode", arg: 9, scope: !7499, file: !3, line: 12206, type: !573)
!7519 = !DILocation(line: 12206, column: 28, scope: !7499)
!7520 = !DILocalVariable(name: "fn", scope: !7499, file: !3, line: 12208, type: !3344)
!7521 = !DILocation(line: 12208, column: 8, scope: !7499)
!7522 = !DILocation(line: 12210, column: 22, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12210, column: 7)
!7524 = !DILocation(line: 12210, column: 8, scope: !7523)
!7525 = !DILocation(line: 12211, column: 7, scope: !7523)
!7526 = !DILocation(line: 12211, column: 25, scope: !7523)
!7527 = !DILocation(line: 12212, column: 5, scope: !7523)
!7528 = !DILocation(line: 12212, column: 11, scope: !7523)
!7529 = !DILocation(line: 12211, column: 11, scope: !7523)
!7530 = !DILocation(line: 12214, column: 7, scope: !7523)
!7531 = !DILocation(line: 12214, column: 25, scope: !7523)
!7532 = !DILocation(line: 12214, column: 11, scope: !7523)
!7533 = !DILocation(line: 12215, column: 7, scope: !7523)
!7534 = !DILocation(line: 12215, column: 25, scope: !7523)
!7535 = !DILocation(line: 12215, column: 11, scope: !7523)
!7536 = !DILocation(line: 12210, column: 7, scope: !7499)
!7537 = !DILocation(line: 12216, column: 5, scope: !7523)
!7538 = !DILocation(line: 12220, column: 7, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12220, column: 7)
!7540 = !DILocation(line: 12220, column: 13, scope: !7539)
!7541 = !DILocation(line: 12220, column: 36, scope: !7539)
!7542 = !DILocation(line: 12220, column: 56, scope: !7539)
!7543 = !DILocation(line: 12220, column: 61, scope: !7539)
!7544 = !DILocation(line: 12220, column: 39, scope: !7539)
!7545 = !DILocation(line: 12220, column: 7, scope: !7499)
!7546 = !DILocation(line: 12222, column: 11, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 12222, column: 11)
!7548 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 12221, column: 5)
!7549 = !DILocation(line: 12222, column: 17, scope: !7547)
!7550 = !DILocation(line: 12222, column: 11, scope: !7548)
!7551 = !DILocation(line: 12223, column: 31, scope: !7547)
!7552 = !DILocation(line: 12223, column: 36, scope: !7547)
!7553 = !DILocation(line: 12224, column: 6, scope: !7547)
!7554 = !DILocation(line: 12224, column: 12, scope: !7547)
!7555 = !DILocation(line: 12223, column: 9, scope: !7547)
!7556 = !DILocation(line: 12223, column: 2, scope: !7547)
!7557 = !DILocalVariable(name: "temp", scope: !7558, file: !3, line: 12227, type: !3344)
!7558 = distinct !DILexicalBlock(scope: !7547, file: !3, line: 12226, column: 2)
!7559 = !DILocation(line: 12227, column: 9, scope: !7558)
!7560 = !DILocation(line: 12227, column: 16, scope: !7558)
!7561 = !DILocation(line: 12229, column: 29, scope: !7558)
!7562 = !DILocation(line: 12229, column: 34, scope: !7558)
!7563 = !DILocation(line: 12229, column: 66, scope: !7558)
!7564 = !DILocation(line: 12229, column: 11, scope: !7558)
!7565 = !DILocation(line: 12229, column: 4, scope: !7558)
!7566 = !DILocation(line: 12233, column: 24, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12233, column: 7)
!7568 = !DILocation(line: 12233, column: 9, scope: !7567)
!7569 = !DILocation(line: 12233, column: 7, scope: !7499)
!7570 = !DILocation(line: 12234, column: 5, scope: !7567)
!7571 = !DILocation(line: 12236, column: 28, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12236, column: 7)
!7573 = !DILocation(line: 12236, column: 9, scope: !7572)
!7574 = !DILocation(line: 12236, column: 7, scope: !7499)
!7575 = !DILocation(line: 12238, column: 28, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7577, file: !3, line: 12238, column: 11)
!7577 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 12237, column: 5)
!7578 = !DILocation(line: 12238, column: 13, scope: !7576)
!7579 = !DILocation(line: 12238, column: 11, scope: !7577)
!7580 = !DILocation(line: 12243, column: 8, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 12243, column: 8)
!7582 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 12239, column: 2)
!7583 = !DILocation(line: 12243, column: 15, scope: !7581)
!7584 = !DILocation(line: 12243, column: 28, scope: !7581)
!7585 = !DILocation(line: 12243, column: 48, scope: !7581)
!7586 = !DILocation(line: 12243, column: 33, scope: !7581)
!7587 = !DILocation(line: 12243, column: 8, scope: !7582)
!7588 = !DILocation(line: 12245, column: 12, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 12245, column: 12)
!7590 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 12244, column: 6)
!7591 = !DILocation(line: 12245, column: 18, scope: !7589)
!7592 = !DILocation(line: 12245, column: 42, scope: !7589)
!7593 = !DILocation(line: 12245, column: 45, scope: !7589)
!7594 = !DILocation(line: 12245, column: 12, scope: !7590)
!7595 = !DILocation(line: 12249, column: 10, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 12246, column: 3)
!7597 = !DILocation(line: 12249, column: 8, scope: !7596)
!7598 = !DILocation(line: 12250, column: 10, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 12250, column: 9)
!7600 = !DILocation(line: 12250, column: 9, scope: !7596)
!7601 = !DILocation(line: 12251, column: 7, scope: !7599)
!7602 = !DILocation(line: 12253, column: 33, scope: !7596)
!7603 = !DILocation(line: 12253, column: 38, scope: !7596)
!7604 = !DILocation(line: 12253, column: 45, scope: !7596)
!7605 = !DILocation(line: 12253, column: 51, scope: !7596)
!7606 = !DILocation(line: 12253, column: 56, scope: !7596)
!7607 = !DILocation(line: 12253, column: 61, scope: !7596)
!7608 = !DILocation(line: 12253, column: 12, scope: !7596)
!7609 = !DILocation(line: 12253, column: 5, scope: !7596)
!7610 = !DILocation(line: 12255, column: 8, scope: !7590)
!7611 = !DILocation(line: 12257, column: 2, scope: !7582)
!7612 = !DILocation(line: 12259, column: 11, scope: !7576)
!7613 = !DILocation(line: 12259, column: 9, scope: !7576)
!7614 = !DILocation(line: 12261, column: 28, scope: !7615)
!7615 = distinct !DILexicalBlock(scope: !7577, file: !3, line: 12261, column: 11)
!7616 = !DILocation(line: 12261, column: 34, scope: !7615)
!7617 = !DILocation(line: 12261, column: 11, scope: !7615)
!7618 = !DILocation(line: 12261, column: 11, scope: !7577)
!7619 = !DILocation(line: 12262, column: 2, scope: !7615)
!7620 = !DILocation(line: 12263, column: 5, scope: !7577)
!7621 = !DILocation(line: 12265, column: 6, scope: !7499)
!7622 = !DILocation(line: 12268, column: 11, scope: !7499)
!7623 = !DILocation(line: 12268, column: 3, scope: !7499)
!7624 = !DILocation(line: 12271, column: 12, scope: !7625)
!7625 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12269, column: 5)
!7626 = !DILocation(line: 12271, column: 10, scope: !7625)
!7627 = !DILocation(line: 12272, column: 7, scope: !7625)
!7628 = !DILocation(line: 12274, column: 12, scope: !7625)
!7629 = !DILocation(line: 12274, column: 10, scope: !7625)
!7630 = !DILocation(line: 12275, column: 7, scope: !7625)
!7631 = !DILocation(line: 12277, column: 12, scope: !7625)
!7632 = !DILocation(line: 12277, column: 10, scope: !7625)
!7633 = !DILocation(line: 12278, column: 7, scope: !7625)
!7634 = !DILocation(line: 12280, column: 12, scope: !7625)
!7635 = !DILocation(line: 12280, column: 10, scope: !7625)
!7636 = !DILocation(line: 12281, column: 7, scope: !7625)
!7637 = !DILocation(line: 12283, column: 7, scope: !7625)
!7638 = !DILocation(line: 12286, column: 8, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 12286, column: 7)
!7640 = !DILocation(line: 12286, column: 7, scope: !7499)
!7641 = !DILocation(line: 12287, column: 5, scope: !7639)
!7642 = !DILocation(line: 12289, column: 31, scope: !7499)
!7643 = !DILocation(line: 12289, column: 36, scope: !7499)
!7644 = !DILocation(line: 12289, column: 43, scope: !7499)
!7645 = !DILocation(line: 12289, column: 49, scope: !7499)
!7646 = !DILocation(line: 12289, column: 54, scope: !7499)
!7647 = !DILocation(line: 12289, column: 10, scope: !7499)
!7648 = !DILocation(line: 12289, column: 3, scope: !7499)
!7649 = !DILocation(line: 12290, column: 1, scope: !7499)
!7650 = distinct !DISubprogram(name: "fold_builtin_stxcpy_chk", scope: !3, file: !3, line: 12299, type: !7651, scopeLine: 12303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7651 = !DISubroutineType(types: !7652)
!7652 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3344, !3421, !573}
!7653 = !DILocalVariable(name: "loc", arg: 1, scope: !7650, file: !3, line: 12299, type: !3429)
!7654 = !DILocation(line: 12299, column: 37, scope: !7650)
!7655 = !DILocalVariable(name: "fndecl", arg: 2, scope: !7650, file: !3, line: 12299, type: !3344)
!7656 = !DILocation(line: 12299, column: 47, scope: !7650)
!7657 = !DILocalVariable(name: "dest", arg: 3, scope: !7650, file: !3, line: 12299, type: !3344)
!7658 = !DILocation(line: 12299, column: 60, scope: !7650)
!7659 = !DILocalVariable(name: "src", arg: 4, scope: !7650, file: !3, line: 12300, type: !3344)
!7660 = !DILocation(line: 12300, column: 10, scope: !7650)
!7661 = !DILocalVariable(name: "size", arg: 5, scope: !7650, file: !3, line: 12300, type: !3344)
!7662 = !DILocation(line: 12300, column: 20, scope: !7650)
!7663 = !DILocalVariable(name: "maxlen", arg: 6, scope: !7650, file: !3, line: 12301, type: !3344)
!7664 = !DILocation(line: 12301, column: 10, scope: !7650)
!7665 = !DILocalVariable(name: "ignore", arg: 7, scope: !7650, file: !3, line: 12301, type: !3421)
!7666 = !DILocation(line: 12301, column: 23, scope: !7650)
!7667 = !DILocalVariable(name: "fcode", arg: 8, scope: !7650, file: !3, line: 12302, type: !573)
!7668 = !DILocation(line: 12302, column: 28, scope: !7650)
!7669 = !DILocalVariable(name: "len", scope: !7650, file: !3, line: 12304, type: !3344)
!7670 = !DILocation(line: 12304, column: 8, scope: !7650)
!7671 = !DILocalVariable(name: "fn", scope: !7650, file: !3, line: 12304, type: !3344)
!7672 = !DILocation(line: 12304, column: 13, scope: !7650)
!7673 = !DILocation(line: 12306, column: 22, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 12306, column: 7)
!7675 = !DILocation(line: 12306, column: 8, scope: !7674)
!7676 = !DILocation(line: 12307, column: 7, scope: !7674)
!7677 = !DILocation(line: 12307, column: 25, scope: !7674)
!7678 = !DILocation(line: 12307, column: 11, scope: !7674)
!7679 = !DILocation(line: 12308, column: 7, scope: !7674)
!7680 = !DILocation(line: 12308, column: 25, scope: !7674)
!7681 = !DILocation(line: 12308, column: 11, scope: !7674)
!7682 = !DILocation(line: 12306, column: 7, scope: !7650)
!7683 = !DILocation(line: 12309, column: 5, scope: !7674)
!7684 = !DILocation(line: 12312, column: 7, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 12312, column: 7)
!7686 = !DILocation(line: 12312, column: 13, scope: !7685)
!7687 = !DILocation(line: 12312, column: 36, scope: !7685)
!7688 = !DILocation(line: 12312, column: 56, scope: !7685)
!7689 = !DILocation(line: 12312, column: 61, scope: !7685)
!7690 = !DILocation(line: 12312, column: 39, scope: !7685)
!7691 = !DILocation(line: 12312, column: 7, scope: !7650)
!7692 = !DILocation(line: 12313, column: 30, scope: !7685)
!7693 = !DILocation(line: 12313, column: 35, scope: !7685)
!7694 = !DILocation(line: 12313, column: 67, scope: !7685)
!7695 = !DILocation(line: 12313, column: 12, scope: !7685)
!7696 = !DILocation(line: 12313, column: 5, scope: !7685)
!7697 = !DILocation(line: 12315, column: 24, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 12315, column: 7)
!7699 = !DILocation(line: 12315, column: 9, scope: !7698)
!7700 = !DILocation(line: 12315, column: 7, scope: !7650)
!7701 = !DILocation(line: 12316, column: 5, scope: !7698)
!7702 = !DILocation(line: 12318, column: 28, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 12318, column: 7)
!7704 = !DILocation(line: 12318, column: 9, scope: !7703)
!7705 = !DILocation(line: 12318, column: 7, scope: !7650)
!7706 = !DILocation(line: 12320, column: 23, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7703, file: !3, line: 12319, column: 5)
!7708 = !DILocation(line: 12320, column: 13, scope: !7707)
!7709 = !DILocation(line: 12320, column: 11, scope: !7707)
!7710 = !DILocation(line: 12321, column: 13, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 12321, column: 11)
!7712 = !DILocation(line: 12321, column: 17, scope: !7711)
!7713 = !DILocation(line: 12321, column: 37, scope: !7711)
!7714 = !DILocation(line: 12321, column: 22, scope: !7711)
!7715 = !DILocation(line: 12321, column: 11, scope: !7707)
!7716 = !DILocation(line: 12326, column: 8, scope: !7717)
!7717 = distinct !DILexicalBlock(scope: !7718, file: !3, line: 12326, column: 8)
!7718 = distinct !DILexicalBlock(scope: !7711, file: !3, line: 12322, column: 2)
!7719 = !DILocation(line: 12326, column: 15, scope: !7717)
!7720 = !DILocation(line: 12326, column: 28, scope: !7717)
!7721 = !DILocation(line: 12326, column: 48, scope: !7717)
!7722 = !DILocation(line: 12326, column: 33, scope: !7717)
!7723 = !DILocation(line: 12326, column: 8, scope: !7718)
!7724 = !DILocation(line: 12328, column: 12, scope: !7725)
!7725 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 12328, column: 12)
!7726 = distinct !DILexicalBlock(scope: !7717, file: !3, line: 12327, column: 6)
!7727 = !DILocation(line: 12328, column: 18, scope: !7725)
!7728 = !DILocation(line: 12328, column: 12, scope: !7726)
!7729 = !DILocation(line: 12330, column: 11, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 12330, column: 9)
!7731 = distinct !DILexicalBlock(scope: !7725, file: !3, line: 12329, column: 3)
!7732 = !DILocation(line: 12330, column: 9, scope: !7731)
!7733 = !DILocation(line: 12331, column: 7, scope: !7730)
!7734 = !DILocation(line: 12335, column: 10, scope: !7731)
!7735 = !DILocation(line: 12335, column: 8, scope: !7731)
!7736 = !DILocation(line: 12336, column: 10, scope: !7737)
!7737 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 12336, column: 9)
!7738 = !DILocation(line: 12336, column: 9, scope: !7731)
!7739 = !DILocation(line: 12337, column: 7, scope: !7737)
!7740 = !DILocation(line: 12339, column: 33, scope: !7731)
!7741 = !DILocation(line: 12339, column: 38, scope: !7731)
!7742 = !DILocation(line: 12339, column: 45, scope: !7731)
!7743 = !DILocation(line: 12339, column: 51, scope: !7731)
!7744 = !DILocation(line: 12339, column: 56, scope: !7731)
!7745 = !DILocation(line: 12339, column: 12, scope: !7731)
!7746 = !DILocation(line: 12339, column: 5, scope: !7731)
!7747 = !DILocation(line: 12342, column: 14, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 12342, column: 12)
!7749 = !DILocation(line: 12342, column: 18, scope: !7748)
!7750 = !DILocation(line: 12342, column: 21, scope: !7748)
!7751 = !DILocation(line: 12342, column: 12, scope: !7726)
!7752 = !DILocation(line: 12343, column: 3, scope: !7748)
!7753 = !DILocation(line: 12347, column: 13, scope: !7726)
!7754 = !DILocation(line: 12347, column: 11, scope: !7726)
!7755 = !DILocation(line: 12348, column: 13, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 12348, column: 12)
!7757 = !DILocation(line: 12348, column: 12, scope: !7726)
!7758 = !DILocation(line: 12349, column: 3, scope: !7756)
!7759 = !DILocation(line: 12351, column: 30, scope: !7726)
!7760 = !DILocation(line: 12351, column: 46, scope: !7726)
!7761 = !DILocation(line: 12351, column: 51, scope: !7726)
!7762 = !DILocation(line: 12351, column: 14, scope: !7726)
!7763 = !DILocation(line: 12351, column: 12, scope: !7726)
!7764 = !DILocation(line: 12352, column: 33, scope: !7726)
!7765 = !DILocation(line: 12352, column: 38, scope: !7726)
!7766 = !DILocation(line: 12353, column: 33, scope: !7726)
!7767 = !DILocation(line: 12353, column: 38, scope: !7726)
!7768 = !DILocation(line: 12354, column: 8, scope: !7726)
!7769 = !DILocation(line: 12354, column: 14, scope: !7726)
!7770 = !DILocation(line: 12354, column: 19, scope: !7726)
!7771 = !DILocation(line: 12354, column: 24, scope: !7726)
!7772 = !DILocation(line: 12353, column: 12, scope: !7726)
!7773 = !DILocation(line: 12352, column: 15, scope: !7726)
!7774 = !DILocation(line: 12352, column: 8, scope: !7726)
!7775 = !DILocation(line: 12356, column: 2, scope: !7718)
!7776 = !DILocation(line: 12358, column: 11, scope: !7711)
!7777 = !DILocation(line: 12358, column: 9, scope: !7711)
!7778 = !DILocation(line: 12360, column: 30, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 12360, column: 11)
!7780 = !DILocation(line: 12360, column: 38, scope: !7779)
!7781 = !DILocation(line: 12360, column: 13, scope: !7779)
!7782 = !DILocation(line: 12360, column: 11, scope: !7707)
!7783 = !DILocation(line: 12361, column: 2, scope: !7779)
!7784 = !DILocation(line: 12362, column: 5, scope: !7707)
!7785 = !DILocation(line: 12365, column: 23, scope: !7650)
!7786 = !DILocation(line: 12365, column: 29, scope: !7650)
!7787 = !DILocation(line: 12365, column: 8, scope: !7650)
!7788 = !DILocation(line: 12365, column: 6, scope: !7650)
!7789 = !DILocation(line: 12367, column: 8, scope: !7790)
!7790 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 12367, column: 7)
!7791 = !DILocation(line: 12367, column: 7, scope: !7650)
!7792 = !DILocation(line: 12368, column: 5, scope: !7790)
!7793 = !DILocation(line: 12370, column: 31, scope: !7650)
!7794 = !DILocation(line: 12370, column: 36, scope: !7650)
!7795 = !DILocation(line: 12370, column: 43, scope: !7650)
!7796 = !DILocation(line: 12370, column: 49, scope: !7650)
!7797 = !DILocation(line: 12370, column: 10, scope: !7650)
!7798 = !DILocation(line: 12370, column: 3, scope: !7650)
!7799 = !DILocation(line: 12371, column: 1, scope: !7650)
!7800 = distinct !DISubprogram(name: "fold_builtin_strncpy_chk", scope: !3, file: !3, line: 12378, type: !6569, scopeLine: 12380, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7801 = !DILocalVariable(name: "loc", arg: 1, scope: !7800, file: !3, line: 12378, type: !3429)
!7802 = !DILocation(line: 12378, column: 38, scope: !7800)
!7803 = !DILocalVariable(name: "dest", arg: 2, scope: !7800, file: !3, line: 12378, type: !3344)
!7804 = !DILocation(line: 12378, column: 48, scope: !7800)
!7805 = !DILocalVariable(name: "src", arg: 3, scope: !7800, file: !3, line: 12378, type: !3344)
!7806 = !DILocation(line: 12378, column: 59, scope: !7800)
!7807 = !DILocalVariable(name: "len", arg: 4, scope: !7800, file: !3, line: 12379, type: !3344)
!7808 = !DILocation(line: 12379, column: 11, scope: !7800)
!7809 = !DILocalVariable(name: "size", arg: 5, scope: !7800, file: !3, line: 12379, type: !3344)
!7810 = !DILocation(line: 12379, column: 21, scope: !7800)
!7811 = !DILocalVariable(name: "maxlen", arg: 6, scope: !7800, file: !3, line: 12379, type: !3344)
!7812 = !DILocation(line: 12379, column: 32, scope: !7800)
!7813 = !DILocalVariable(name: "fn", scope: !7800, file: !3, line: 12381, type: !3344)
!7814 = !DILocation(line: 12381, column: 8, scope: !7800)
!7815 = !DILocation(line: 12383, column: 22, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 12383, column: 7)
!7817 = !DILocation(line: 12383, column: 8, scope: !7816)
!7818 = !DILocation(line: 12384, column: 7, scope: !7816)
!7819 = !DILocation(line: 12384, column: 25, scope: !7816)
!7820 = !DILocation(line: 12384, column: 11, scope: !7816)
!7821 = !DILocation(line: 12385, column: 7, scope: !7816)
!7822 = !DILocation(line: 12385, column: 25, scope: !7816)
!7823 = !DILocation(line: 12385, column: 11, scope: !7816)
!7824 = !DILocation(line: 12386, column: 7, scope: !7816)
!7825 = !DILocation(line: 12386, column: 25, scope: !7816)
!7826 = !DILocation(line: 12386, column: 11, scope: !7816)
!7827 = !DILocation(line: 12383, column: 7, scope: !7800)
!7828 = !DILocation(line: 12387, column: 5, scope: !7816)
!7829 = !DILocation(line: 12389, column: 24, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 12389, column: 7)
!7831 = !DILocation(line: 12389, column: 9, scope: !7830)
!7832 = !DILocation(line: 12389, column: 7, scope: !7800)
!7833 = !DILocation(line: 12390, column: 5, scope: !7830)
!7834 = !DILocation(line: 12392, column: 28, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 12392, column: 7)
!7836 = !DILocation(line: 12392, column: 9, scope: !7835)
!7837 = !DILocation(line: 12392, column: 7, scope: !7800)
!7838 = !DILocation(line: 12394, column: 28, scope: !7839)
!7839 = distinct !DILexicalBlock(scope: !7840, file: !3, line: 12394, column: 11)
!7840 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 12393, column: 5)
!7841 = !DILocation(line: 12394, column: 13, scope: !7839)
!7842 = !DILocation(line: 12394, column: 11, scope: !7840)
!7843 = !DILocation(line: 12399, column: 8, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7845, file: !3, line: 12399, column: 8)
!7845 = distinct !DILexicalBlock(scope: !7839, file: !3, line: 12395, column: 2)
!7846 = !DILocation(line: 12399, column: 15, scope: !7844)
!7847 = !DILocation(line: 12399, column: 28, scope: !7844)
!7848 = !DILocation(line: 12399, column: 48, scope: !7844)
!7849 = !DILocation(line: 12399, column: 33, scope: !7844)
!7850 = !DILocation(line: 12399, column: 8, scope: !7845)
!7851 = !DILocation(line: 12400, column: 6, scope: !7844)
!7852 = !DILocation(line: 12401, column: 2, scope: !7845)
!7853 = !DILocation(line: 12403, column: 11, scope: !7839)
!7854 = !DILocation(line: 12403, column: 9, scope: !7839)
!7855 = !DILocation(line: 12405, column: 28, scope: !7856)
!7856 = distinct !DILexicalBlock(scope: !7840, file: !3, line: 12405, column: 11)
!7857 = !DILocation(line: 12405, column: 34, scope: !7856)
!7858 = !DILocation(line: 12405, column: 11, scope: !7856)
!7859 = !DILocation(line: 12405, column: 11, scope: !7840)
!7860 = !DILocation(line: 12406, column: 2, scope: !7856)
!7861 = !DILocation(line: 12407, column: 5, scope: !7840)
!7862 = !DILocation(line: 12410, column: 8, scope: !7800)
!7863 = !DILocation(line: 12410, column: 6, scope: !7800)
!7864 = !DILocation(line: 12411, column: 8, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 12411, column: 7)
!7866 = !DILocation(line: 12411, column: 7, scope: !7800)
!7867 = !DILocation(line: 12412, column: 5, scope: !7865)
!7868 = !DILocation(line: 12414, column: 31, scope: !7800)
!7869 = !DILocation(line: 12414, column: 36, scope: !7800)
!7870 = !DILocation(line: 12414, column: 43, scope: !7800)
!7871 = !DILocation(line: 12414, column: 49, scope: !7800)
!7872 = !DILocation(line: 12414, column: 54, scope: !7800)
!7873 = !DILocation(line: 12414, column: 10, scope: !7800)
!7874 = !DILocation(line: 12414, column: 3, scope: !7800)
!7875 = !DILocation(line: 12415, column: 1, scope: !7800)
!7876 = distinct !DISubprogram(name: "fold_builtin_snprintf_chk", scope: !3, file: !3, line: 12599, type: !7877, scopeLine: 12601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!7877 = !DISubroutineType(types: !7878)
!7878 = !{!3344, !3429, !3344, !3344, !573}
!7879 = !DILocalVariable(name: "loc", arg: 1, scope: !7876, file: !3, line: 12599, type: !3429)
!7880 = !DILocation(line: 12599, column: 39, scope: !7876)
!7881 = !DILocalVariable(name: "exp", arg: 2, scope: !7876, file: !3, line: 12599, type: !3344)
!7882 = !DILocation(line: 12599, column: 49, scope: !7876)
!7883 = !DILocalVariable(name: "maxlen", arg: 3, scope: !7876, file: !3, line: 12599, type: !3344)
!7884 = !DILocation(line: 12599, column: 59, scope: !7876)
!7885 = !DILocalVariable(name: "fcode", arg: 4, scope: !7876, file: !3, line: 12600, type: !573)
!7886 = !DILocation(line: 12600, column: 30, scope: !7876)
!7887 = !DILocalVariable(name: "dest", scope: !7876, file: !3, line: 12602, type: !3344)
!7888 = !DILocation(line: 12602, column: 8, scope: !7876)
!7889 = !DILocalVariable(name: "size", scope: !7876, file: !3, line: 12602, type: !3344)
!7890 = !DILocation(line: 12602, column: 14, scope: !7876)
!7891 = !DILocalVariable(name: "len", scope: !7876, file: !3, line: 12602, type: !3344)
!7892 = !DILocation(line: 12602, column: 20, scope: !7876)
!7893 = !DILocalVariable(name: "fn", scope: !7876, file: !3, line: 12602, type: !3344)
!7894 = !DILocation(line: 12602, column: 25, scope: !7876)
!7895 = !DILocalVariable(name: "fmt", scope: !7876, file: !3, line: 12602, type: !3344)
!7896 = !DILocation(line: 12602, column: 29, scope: !7876)
!7897 = !DILocalVariable(name: "flag", scope: !7876, file: !3, line: 12602, type: !3344)
!7898 = !DILocation(line: 12602, column: 34, scope: !7876)
!7899 = !DILocalVariable(name: "fmt_str", scope: !7876, file: !3, line: 12603, type: !3504)
!7900 = !DILocation(line: 12603, column: 15, scope: !7876)
!7901 = !DILocation(line: 12606, column: 7, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12606, column: 7)
!7903 = !DILocation(line: 12606, column: 29, scope: !7902)
!7904 = !DILocation(line: 12606, column: 7, scope: !7876)
!7905 = !DILocation(line: 12607, column: 5, scope: !7902)
!7906 = !DILocation(line: 12608, column: 10, scope: !7876)
!7907 = !DILocation(line: 12608, column: 8, scope: !7876)
!7908 = !DILocation(line: 12609, column: 22, scope: !7909)
!7909 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12609, column: 7)
!7910 = !DILocation(line: 12609, column: 8, scope: !7909)
!7911 = !DILocation(line: 12609, column: 7, scope: !7876)
!7912 = !DILocation(line: 12610, column: 5, scope: !7909)
!7913 = !DILocation(line: 12611, column: 9, scope: !7876)
!7914 = !DILocation(line: 12611, column: 7, scope: !7876)
!7915 = !DILocation(line: 12612, column: 22, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12612, column: 7)
!7917 = !DILocation(line: 12612, column: 8, scope: !7916)
!7918 = !DILocation(line: 12612, column: 7, scope: !7876)
!7919 = !DILocation(line: 12613, column: 5, scope: !7916)
!7920 = !DILocation(line: 12614, column: 10, scope: !7876)
!7921 = !DILocation(line: 12614, column: 8, scope: !7876)
!7922 = !DILocation(line: 12615, column: 22, scope: !7923)
!7923 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12615, column: 7)
!7924 = !DILocation(line: 12615, column: 8, scope: !7923)
!7925 = !DILocation(line: 12615, column: 7, scope: !7876)
!7926 = !DILocation(line: 12616, column: 5, scope: !7923)
!7927 = !DILocation(line: 12617, column: 10, scope: !7876)
!7928 = !DILocation(line: 12617, column: 8, scope: !7876)
!7929 = !DILocation(line: 12618, column: 22, scope: !7930)
!7930 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12618, column: 7)
!7931 = !DILocation(line: 12618, column: 8, scope: !7930)
!7932 = !DILocation(line: 12618, column: 7, scope: !7876)
!7933 = !DILocation(line: 12619, column: 5, scope: !7930)
!7934 = !DILocation(line: 12620, column: 9, scope: !7876)
!7935 = !DILocation(line: 12620, column: 7, scope: !7876)
!7936 = !DILocation(line: 12621, column: 22, scope: !7937)
!7937 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12621, column: 7)
!7938 = !DILocation(line: 12621, column: 8, scope: !7937)
!7939 = !DILocation(line: 12621, column: 7, scope: !7876)
!7940 = !DILocation(line: 12622, column: 5, scope: !7937)
!7941 = !DILocation(line: 12624, column: 24, scope: !7942)
!7942 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12624, column: 7)
!7943 = !DILocation(line: 12624, column: 9, scope: !7942)
!7944 = !DILocation(line: 12624, column: 7, scope: !7876)
!7945 = !DILocation(line: 12625, column: 5, scope: !7942)
!7946 = !DILocation(line: 12627, column: 28, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12627, column: 7)
!7948 = !DILocation(line: 12627, column: 9, scope: !7947)
!7949 = !DILocation(line: 12627, column: 7, scope: !7876)
!7950 = !DILocation(line: 12629, column: 28, scope: !7951)
!7951 = distinct !DILexicalBlock(scope: !7952, file: !3, line: 12629, column: 11)
!7952 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 12628, column: 5)
!7953 = !DILocation(line: 12629, column: 13, scope: !7951)
!7954 = !DILocation(line: 12629, column: 11, scope: !7952)
!7955 = !DILocation(line: 12634, column: 8, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7957, file: !3, line: 12634, column: 8)
!7957 = distinct !DILexicalBlock(scope: !7951, file: !3, line: 12630, column: 2)
!7958 = !DILocation(line: 12634, column: 15, scope: !7956)
!7959 = !DILocation(line: 12634, column: 28, scope: !7956)
!7960 = !DILocation(line: 12634, column: 48, scope: !7956)
!7961 = !DILocation(line: 12634, column: 33, scope: !7956)
!7962 = !DILocation(line: 12634, column: 8, scope: !7957)
!7963 = !DILocation(line: 12635, column: 6, scope: !7956)
!7964 = !DILocation(line: 12636, column: 2, scope: !7957)
!7965 = !DILocation(line: 12638, column: 11, scope: !7951)
!7966 = !DILocation(line: 12638, column: 9, scope: !7951)
!7967 = !DILocation(line: 12640, column: 28, scope: !7968)
!7968 = distinct !DILexicalBlock(scope: !7952, file: !3, line: 12640, column: 11)
!7969 = !DILocation(line: 12640, column: 34, scope: !7968)
!7970 = !DILocation(line: 12640, column: 11, scope: !7968)
!7971 = !DILocation(line: 12640, column: 11, scope: !7952)
!7972 = !DILocation(line: 12641, column: 2, scope: !7968)
!7973 = !DILocation(line: 12642, column: 5, scope: !7952)
!7974 = !DILocation(line: 12644, column: 8, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12644, column: 7)
!7976 = !DILocation(line: 12644, column: 7, scope: !7876)
!7977 = !DILocation(line: 12645, column: 5, scope: !7975)
!7978 = !DILocation(line: 12649, column: 24, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12649, column: 7)
!7980 = !DILocation(line: 12649, column: 9, scope: !7979)
!7981 = !DILocation(line: 12649, column: 7, scope: !7876)
!7982 = !DILocation(line: 12651, column: 27, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 12650, column: 5)
!7984 = !DILocation(line: 12651, column: 17, scope: !7983)
!7985 = !DILocation(line: 12651, column: 15, scope: !7983)
!7986 = !DILocation(line: 12652, column: 11, scope: !7987)
!7987 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 12652, column: 11)
!7988 = !DILocation(line: 12652, column: 19, scope: !7987)
!7989 = !DILocation(line: 12652, column: 11, scope: !7983)
!7990 = !DILocation(line: 12653, column: 2, scope: !7987)
!7991 = !DILocation(line: 12654, column: 19, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 12654, column: 11)
!7993 = !DILocation(line: 12654, column: 28, scope: !7992)
!7994 = !DILocation(line: 12654, column: 11, scope: !7992)
!7995 = !DILocation(line: 12654, column: 44, scope: !7992)
!7996 = !DILocation(line: 12655, column: 4, scope: !7992)
!7997 = !DILocation(line: 12655, column: 15, scope: !7992)
!7998 = !DILocation(line: 12655, column: 7, scope: !7992)
!7999 = !DILocation(line: 12654, column: 11, scope: !7983)
!8000 = !DILocation(line: 12656, column: 2, scope: !7992)
!8001 = !DILocation(line: 12657, column: 5, scope: !7983)
!8002 = !DILocation(line: 12661, column: 23, scope: !7876)
!8003 = !DILocation(line: 12661, column: 29, scope: !7876)
!8004 = !DILocation(line: 12661, column: 8, scope: !7876)
!8005 = !DILocation(line: 12661, column: 6, scope: !7876)
!8006 = !DILocation(line: 12663, column: 8, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 12663, column: 7)
!8008 = !DILocation(line: 12663, column: 7, scope: !7876)
!8009 = !DILocation(line: 12664, column: 5, scope: !8007)
!8010 = !DILocation(line: 12666, column: 29, scope: !7876)
!8011 = !DILocation(line: 12666, column: 34, scope: !7876)
!8012 = !DILocation(line: 12666, column: 42, scope: !7876)
!8013 = !DILocation(line: 12666, column: 49, scope: !7876)
!8014 = !DILocation(line: 12666, column: 55, scope: !7876)
!8015 = !DILocation(line: 12666, column: 60, scope: !7876)
!8016 = !DILocation(line: 12666, column: 10, scope: !7876)
!8017 = !DILocation(line: 12666, column: 3, scope: !7876)
!8018 = !DILocation(line: 12667, column: 1, scope: !7876)
!8019 = !DILocation(line: 12910, column: 8, scope: !8020)
!8020 = distinct !DILexicalBlock(scope: !4782, file: !3, line: 12910, column: 7)
!8021 = !DILocation(line: 12910, column: 7, scope: !4782)
!8022 = !DILocation(line: 12912, column: 35, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !8020, file: !3, line: 12911, column: 5)
!8024 = !DILocation(line: 12912, column: 24, scope: !8023)
!8025 = !DILocation(line: 12912, column: 22, scope: !8023)
!8026 = !DILocation(line: 12913, column: 35, scope: !8023)
!8027 = !DILocation(line: 12913, column: 24, scope: !8023)
!8028 = !DILocation(line: 12913, column: 22, scope: !8023)
!8029 = !DILocation(line: 12914, column: 29, scope: !8023)
!8030 = !DILocation(line: 12914, column: 18, scope: !8023)
!8031 = !DILocation(line: 12914, column: 16, scope: !8023)
!8032 = !DILocation(line: 12915, column: 29, scope: !8023)
!8033 = !DILocation(line: 12915, column: 18, scope: !8023)
!8034 = !DILocation(line: 12915, column: 16, scope: !8023)
!8035 = !DILocation(line: 12916, column: 11, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 12916, column: 11)
!8037 = !DILocation(line: 12916, column: 26, scope: !8036)
!8038 = !DILocation(line: 12916, column: 31, scope: !8036)
!8039 = !DILocation(line: 12916, column: 34, scope: !8036)
!8040 = !DILocation(line: 12916, column: 49, scope: !8036)
!8041 = !DILocation(line: 12916, column: 54, scope: !8036)
!8042 = !DILocation(line: 12916, column: 57, scope: !8036)
!8043 = !DILocation(line: 12916, column: 66, scope: !8036)
!8044 = !DILocation(line: 12917, column: 4, scope: !8036)
!8045 = !DILocation(line: 12917, column: 7, scope: !8036)
!8046 = !DILocation(line: 12917, column: 16, scope: !8036)
!8047 = !DILocation(line: 12916, column: 11, scope: !8023)
!8048 = !DILocation(line: 12918, column: 2, scope: !8036)
!8049 = !DILocation(line: 12920, column: 29, scope: !8023)
!8050 = !DILocation(line: 12920, column: 27, scope: !8023)
!8051 = !DILocation(line: 12921, column: 29, scope: !8023)
!8052 = !DILocation(line: 12921, column: 27, scope: !8023)
!8053 = !DILocation(line: 12922, column: 27, scope: !8023)
!8054 = !DILocation(line: 12924, column: 29, scope: !8023)
!8055 = !DILocation(line: 12924, column: 27, scope: !8023)
!8056 = !DILocation(line: 12925, column: 29, scope: !8023)
!8057 = !DILocation(line: 12925, column: 27, scope: !8023)
!8058 = !DILocation(line: 12926, column: 27, scope: !8023)
!8059 = !DILocation(line: 12928, column: 37, scope: !8023)
!8060 = !DILocation(line: 12928, column: 35, scope: !8023)
!8061 = !DILocation(line: 12929, column: 37, scope: !8023)
!8062 = !DILocation(line: 12929, column: 35, scope: !8023)
!8063 = !DILocation(line: 12930, column: 37, scope: !8023)
!8064 = !DILocation(line: 12930, column: 35, scope: !8023)
!8065 = !DILocation(line: 12931, column: 35, scope: !8023)
!8066 = !DILocation(line: 12933, column: 12, scope: !8023)
!8067 = !DILocation(line: 12934, column: 5, scope: !8023)
!8068 = !DILocation(line: 12935, column: 3, scope: !4782)
!8069 = !DILocation(line: 12936, column: 1, scope: !4782)
!8070 = distinct !DISubprogram(name: "rewrite_call_expr", scope: !3, file: !3, line: 10908, type: !8071, scopeLine: 10909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8071 = !DISubroutineType(types: !8072)
!8072 = !{!3344, !3429, !3344, !1445, !3344, !1445, null}
!8073 = !DILocalVariable(name: "loc", arg: 1, scope: !8070, file: !3, line: 10908, type: !3429)
!8074 = !DILocation(line: 10908, column: 31, scope: !8070)
!8075 = !DILocalVariable(name: "exp", arg: 2, scope: !8070, file: !3, line: 10908, type: !3344)
!8076 = !DILocation(line: 10908, column: 41, scope: !8070)
!8077 = !DILocalVariable(name: "skip", arg: 3, scope: !8070, file: !3, line: 10908, type: !1445)
!8078 = !DILocation(line: 10908, column: 50, scope: !8070)
!8079 = !DILocalVariable(name: "fndecl", arg: 4, scope: !8070, file: !3, line: 10908, type: !3344)
!8080 = !DILocation(line: 10908, column: 61, scope: !8070)
!8081 = !DILocalVariable(name: "n", arg: 5, scope: !8070, file: !3, line: 10908, type: !1445)
!8082 = !DILocation(line: 10908, column: 73, scope: !8070)
!8083 = !DILocalVariable(name: "oldnargs", scope: !8070, file: !3, line: 10910, type: !1445)
!8084 = !DILocation(line: 10910, column: 7, scope: !8070)
!8085 = !DILocation(line: 10910, column: 18, scope: !8070)
!8086 = !DILocalVariable(name: "nargs", scope: !8070, file: !3, line: 10911, type: !1445)
!8087 = !DILocation(line: 10911, column: 7, scope: !8070)
!8088 = !DILocation(line: 10911, column: 15, scope: !8070)
!8089 = !DILocation(line: 10911, column: 26, scope: !8070)
!8090 = !DILocation(line: 10911, column: 24, scope: !8070)
!8091 = !DILocation(line: 10911, column: 33, scope: !8070)
!8092 = !DILocation(line: 10911, column: 31, scope: !8070)
!8093 = !DILocalVariable(name: "fntype", scope: !8070, file: !3, line: 10912, type: !3344)
!8094 = !DILocation(line: 10912, column: 8, scope: !8070)
!8095 = !DILocation(line: 10912, column: 17, scope: !8070)
!8096 = !DILocalVariable(name: "fn", scope: !8070, file: !3, line: 10913, type: !3344)
!8097 = !DILocation(line: 10913, column: 8, scope: !8070)
!8098 = !DILocation(line: 10913, column: 13, scope: !8070)
!8099 = !DILocalVariable(name: "buffer", scope: !8070, file: !3, line: 10914, type: !3666)
!8100 = !DILocation(line: 10914, column: 9, scope: !8070)
!8101 = !DILocation(line: 10916, column: 7, scope: !8102)
!8102 = distinct !DILexicalBlock(scope: !8070, file: !3, line: 10916, column: 7)
!8103 = !DILocation(line: 10916, column: 9, scope: !8102)
!8104 = !DILocation(line: 10916, column: 7, scope: !8070)
!8105 = !DILocalVariable(name: "i", scope: !8106, file: !3, line: 10918, type: !1445)
!8106 = distinct !DILexicalBlock(scope: !8102, file: !3, line: 10917, column: 5)
!8107 = !DILocation(line: 10918, column: 11, scope: !8106)
!8108 = !DILocalVariable(name: "j", scope: !8106, file: !3, line: 10918, type: !1445)
!8109 = !DILocation(line: 10918, column: 14, scope: !8106)
!8110 = !DILocalVariable(name: "ap", scope: !8106, file: !3, line: 10919, type: !6012)
!8111 = !DILocation(line: 10919, column: 15, scope: !8106)
!8112 = !DILocation(line: 10921, column: 16, scope: !8106)
!8113 = !DILocation(line: 10921, column: 14, scope: !8106)
!8114 = !DILocation(line: 10922, column: 7, scope: !8106)
!8115 = !DILocation(line: 10923, column: 14, scope: !8116)
!8116 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 10923, column: 7)
!8117 = !DILocation(line: 10923, column: 12, scope: !8116)
!8118 = !DILocation(line: 10923, column: 19, scope: !8119)
!8119 = distinct !DILexicalBlock(scope: !8116, file: !3, line: 10923, column: 7)
!8120 = !DILocation(line: 10923, column: 23, scope: !8119)
!8121 = !DILocation(line: 10923, column: 21, scope: !8119)
!8122 = !DILocation(line: 10923, column: 7, scope: !8116)
!8123 = !DILocation(line: 10924, column: 14, scope: !8119)
!8124 = !DILocation(line: 10924, column: 2, scope: !8119)
!8125 = !DILocation(line: 10924, column: 9, scope: !8119)
!8126 = !DILocation(line: 10924, column: 12, scope: !8119)
!8127 = !DILocation(line: 10923, column: 27, scope: !8119)
!8128 = !DILocation(line: 10923, column: 7, scope: !8119)
!8129 = distinct !{!8129, !8122, !8130}
!8130 = !DILocation(line: 10924, column: 14, scope: !8116)
!8131 = !DILocation(line: 10925, column: 7, scope: !8106)
!8132 = !DILocation(line: 10926, column: 16, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 10926, column: 7)
!8134 = !DILocation(line: 10926, column: 14, scope: !8133)
!8135 = !DILocation(line: 10926, column: 12, scope: !8133)
!8136 = !DILocation(line: 10926, column: 22, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8133, file: !3, line: 10926, column: 7)
!8138 = !DILocation(line: 10926, column: 26, scope: !8137)
!8139 = !DILocation(line: 10926, column: 24, scope: !8137)
!8140 = !DILocation(line: 10926, column: 7, scope: !8133)
!8141 = !DILocation(line: 10927, column: 14, scope: !8137)
!8142 = !DILocation(line: 10927, column: 2, scope: !8137)
!8143 = !DILocation(line: 10927, column: 9, scope: !8137)
!8144 = !DILocation(line: 10927, column: 12, scope: !8137)
!8145 = !DILocation(line: 10926, column: 37, scope: !8137)
!8146 = !DILocation(line: 10926, column: 42, scope: !8137)
!8147 = !DILocation(line: 10926, column: 7, scope: !8137)
!8148 = distinct !{!8148, !8140, !8149}
!8149 = !DILocation(line: 10927, column: 14, scope: !8133)
!8150 = !DILocation(line: 10928, column: 5, scope: !8106)
!8151 = !DILocation(line: 10930, column: 14, scope: !8102)
!8152 = !DILocation(line: 10930, column: 37, scope: !8102)
!8153 = !DILocation(line: 10930, column: 35, scope: !8102)
!8154 = !DILocation(line: 10930, column: 12, scope: !8102)
!8155 = !DILocation(line: 10932, column: 38, scope: !8070)
!8156 = !DILocation(line: 10932, column: 43, scope: !8070)
!8157 = !DILocation(line: 10932, column: 60, scope: !8070)
!8158 = !DILocation(line: 10932, column: 64, scope: !8070)
!8159 = !DILocation(line: 10932, column: 71, scope: !8070)
!8160 = !DILocation(line: 10932, column: 16, scope: !8070)
!8161 = !DILocation(line: 10932, column: 10, scope: !8070)
!8162 = !DILocation(line: 10932, column: 3, scope: !8070)
!8163 = distinct !DISubprogram(name: "gimple_fold_builtin_snprintf_chk", scope: !3, file: !3, line: 13689, type: !8164, scopeLine: 13691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8164 = !DISubroutineType(types: !8165)
!8165 = !{!3344, !3631, !3344, !573}
!8166 = !DILocalVariable(name: "stmt", arg: 1, scope: !8163, file: !3, line: 13689, type: !3631)
!8167 = !DILocation(line: 13689, column: 42, scope: !8163)
!8168 = !DILocalVariable(name: "maxlen", arg: 2, scope: !8163, file: !3, line: 13689, type: !3344)
!8169 = !DILocation(line: 13689, column: 53, scope: !8163)
!8170 = !DILocalVariable(name: "fcode", arg: 3, scope: !8163, file: !3, line: 13690, type: !573)
!8171 = !DILocation(line: 13690, column: 58, scope: !8163)
!8172 = !DILocalVariable(name: "dest", scope: !8163, file: !3, line: 13692, type: !3344)
!8173 = !DILocation(line: 13692, column: 8, scope: !8163)
!8174 = !DILocalVariable(name: "size", scope: !8163, file: !3, line: 13692, type: !3344)
!8175 = !DILocation(line: 13692, column: 14, scope: !8163)
!8176 = !DILocalVariable(name: "len", scope: !8163, file: !3, line: 13692, type: !3344)
!8177 = !DILocation(line: 13692, column: 20, scope: !8163)
!8178 = !DILocalVariable(name: "fn", scope: !8163, file: !3, line: 13692, type: !3344)
!8179 = !DILocation(line: 13692, column: 25, scope: !8163)
!8180 = !DILocalVariable(name: "fmt", scope: !8163, file: !3, line: 13692, type: !3344)
!8181 = !DILocation(line: 13692, column: 29, scope: !8163)
!8182 = !DILocalVariable(name: "flag", scope: !8163, file: !3, line: 13692, type: !3344)
!8183 = !DILocation(line: 13692, column: 34, scope: !8163)
!8184 = !DILocalVariable(name: "fmt_str", scope: !8163, file: !3, line: 13693, type: !3504)
!8185 = !DILocation(line: 13693, column: 15, scope: !8163)
!8186 = !DILocation(line: 13696, column: 29, scope: !8187)
!8187 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13696, column: 7)
!8188 = !DILocation(line: 13696, column: 7, scope: !8187)
!8189 = !DILocation(line: 13696, column: 35, scope: !8187)
!8190 = !DILocation(line: 13696, column: 7, scope: !8163)
!8191 = !DILocation(line: 13697, column: 5, scope: !8187)
!8192 = !DILocation(line: 13698, column: 27, scope: !8163)
!8193 = !DILocation(line: 13698, column: 10, scope: !8163)
!8194 = !DILocation(line: 13698, column: 8, scope: !8163)
!8195 = !DILocation(line: 13699, column: 22, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13699, column: 7)
!8197 = !DILocation(line: 13699, column: 8, scope: !8196)
!8198 = !DILocation(line: 13699, column: 7, scope: !8163)
!8199 = !DILocation(line: 13700, column: 5, scope: !8196)
!8200 = !DILocation(line: 13701, column: 26, scope: !8163)
!8201 = !DILocation(line: 13701, column: 9, scope: !8163)
!8202 = !DILocation(line: 13701, column: 7, scope: !8163)
!8203 = !DILocation(line: 13702, column: 22, scope: !8204)
!8204 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13702, column: 7)
!8205 = !DILocation(line: 13702, column: 8, scope: !8204)
!8206 = !DILocation(line: 13702, column: 7, scope: !8163)
!8207 = !DILocation(line: 13703, column: 5, scope: !8204)
!8208 = !DILocation(line: 13704, column: 27, scope: !8163)
!8209 = !DILocation(line: 13704, column: 10, scope: !8163)
!8210 = !DILocation(line: 13704, column: 8, scope: !8163)
!8211 = !DILocation(line: 13705, column: 22, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13705, column: 7)
!8213 = !DILocation(line: 13705, column: 8, scope: !8212)
!8214 = !DILocation(line: 13705, column: 7, scope: !8163)
!8215 = !DILocation(line: 13706, column: 5, scope: !8212)
!8216 = !DILocation(line: 13707, column: 27, scope: !8163)
!8217 = !DILocation(line: 13707, column: 10, scope: !8163)
!8218 = !DILocation(line: 13707, column: 8, scope: !8163)
!8219 = !DILocation(line: 13708, column: 22, scope: !8220)
!8220 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13708, column: 7)
!8221 = !DILocation(line: 13708, column: 8, scope: !8220)
!8222 = !DILocation(line: 13708, column: 7, scope: !8163)
!8223 = !DILocation(line: 13709, column: 5, scope: !8220)
!8224 = !DILocation(line: 13710, column: 26, scope: !8163)
!8225 = !DILocation(line: 13710, column: 9, scope: !8163)
!8226 = !DILocation(line: 13710, column: 7, scope: !8163)
!8227 = !DILocation(line: 13711, column: 22, scope: !8228)
!8228 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13711, column: 7)
!8229 = !DILocation(line: 13711, column: 8, scope: !8228)
!8230 = !DILocation(line: 13711, column: 7, scope: !8163)
!8231 = !DILocation(line: 13712, column: 5, scope: !8228)
!8232 = !DILocation(line: 13714, column: 24, scope: !8233)
!8233 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13714, column: 7)
!8234 = !DILocation(line: 13714, column: 9, scope: !8233)
!8235 = !DILocation(line: 13714, column: 7, scope: !8163)
!8236 = !DILocation(line: 13715, column: 5, scope: !8233)
!8237 = !DILocation(line: 13717, column: 28, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13717, column: 7)
!8239 = !DILocation(line: 13717, column: 9, scope: !8238)
!8240 = !DILocation(line: 13717, column: 7, scope: !8163)
!8241 = !DILocation(line: 13719, column: 28, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 13719, column: 11)
!8243 = distinct !DILexicalBlock(scope: !8238, file: !3, line: 13718, column: 5)
!8244 = !DILocation(line: 13719, column: 13, scope: !8242)
!8245 = !DILocation(line: 13719, column: 11, scope: !8243)
!8246 = !DILocation(line: 13724, column: 8, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 13724, column: 8)
!8248 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 13720, column: 2)
!8249 = !DILocation(line: 13724, column: 15, scope: !8247)
!8250 = !DILocation(line: 13724, column: 28, scope: !8247)
!8251 = !DILocation(line: 13724, column: 48, scope: !8247)
!8252 = !DILocation(line: 13724, column: 33, scope: !8247)
!8253 = !DILocation(line: 13724, column: 8, scope: !8248)
!8254 = !DILocation(line: 13725, column: 6, scope: !8247)
!8255 = !DILocation(line: 13726, column: 2, scope: !8248)
!8256 = !DILocation(line: 13728, column: 11, scope: !8242)
!8257 = !DILocation(line: 13728, column: 9, scope: !8242)
!8258 = !DILocation(line: 13730, column: 28, scope: !8259)
!8259 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 13730, column: 11)
!8260 = !DILocation(line: 13730, column: 34, scope: !8259)
!8261 = !DILocation(line: 13730, column: 11, scope: !8259)
!8262 = !DILocation(line: 13730, column: 11, scope: !8243)
!8263 = !DILocation(line: 13731, column: 2, scope: !8259)
!8264 = !DILocation(line: 13732, column: 5, scope: !8243)
!8265 = !DILocation(line: 13734, column: 8, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13734, column: 7)
!8267 = !DILocation(line: 13734, column: 7, scope: !8163)
!8268 = !DILocation(line: 13735, column: 5, scope: !8266)
!8269 = !DILocation(line: 13739, column: 24, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13739, column: 7)
!8271 = !DILocation(line: 13739, column: 9, scope: !8270)
!8272 = !DILocation(line: 13739, column: 7, scope: !8163)
!8273 = !DILocation(line: 13741, column: 27, scope: !8274)
!8274 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 13740, column: 5)
!8275 = !DILocation(line: 13741, column: 17, scope: !8274)
!8276 = !DILocation(line: 13741, column: 15, scope: !8274)
!8277 = !DILocation(line: 13742, column: 11, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 13742, column: 11)
!8279 = !DILocation(line: 13742, column: 19, scope: !8278)
!8280 = !DILocation(line: 13742, column: 11, scope: !8274)
!8281 = !DILocation(line: 13743, column: 2, scope: !8278)
!8282 = !DILocation(line: 13744, column: 19, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 13744, column: 11)
!8284 = !DILocation(line: 13744, column: 28, scope: !8283)
!8285 = !DILocation(line: 13744, column: 11, scope: !8283)
!8286 = !DILocation(line: 13744, column: 44, scope: !8283)
!8287 = !DILocation(line: 13745, column: 4, scope: !8283)
!8288 = !DILocation(line: 13745, column: 15, scope: !8283)
!8289 = !DILocation(line: 13745, column: 7, scope: !8283)
!8290 = !DILocation(line: 13744, column: 11, scope: !8274)
!8291 = !DILocation(line: 13746, column: 2, scope: !8283)
!8292 = !DILocation(line: 13747, column: 5, scope: !8274)
!8293 = !DILocation(line: 13751, column: 23, scope: !8163)
!8294 = !DILocation(line: 13751, column: 29, scope: !8163)
!8295 = !DILocation(line: 13751, column: 8, scope: !8163)
!8296 = !DILocation(line: 13751, column: 6, scope: !8163)
!8297 = !DILocation(line: 13753, column: 8, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 13753, column: 7)
!8299 = !DILocation(line: 13753, column: 7, scope: !8163)
!8300 = !DILocation(line: 13754, column: 5, scope: !8298)
!8301 = !DILocation(line: 13756, column: 36, scope: !8163)
!8302 = !DILocation(line: 13756, column: 45, scope: !8163)
!8303 = !DILocation(line: 13756, column: 52, scope: !8163)
!8304 = !DILocation(line: 13756, column: 58, scope: !8163)
!8305 = !DILocation(line: 13756, column: 63, scope: !8163)
!8306 = !DILocation(line: 13756, column: 10, scope: !8163)
!8307 = !DILocation(line: 13756, column: 3, scope: !8163)
!8308 = !DILocation(line: 13757, column: 1, scope: !8163)
!8309 = distinct !DISubprogram(name: "gimple_rewrite_call_expr", scope: !3, file: !3, line: 13569, type: !8310, scopeLine: 13570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8310 = !DISubroutineType(types: !8311)
!8311 = !{!3344, !3631, !1445, !3344, !1445, null}
!8312 = !DILocalVariable(name: "stmt", arg: 1, scope: !8309, file: !3, line: 13569, type: !3631)
!8313 = !DILocation(line: 13569, column: 34, scope: !8309)
!8314 = !DILocalVariable(name: "skip", arg: 2, scope: !8309, file: !3, line: 13569, type: !1445)
!8315 = !DILocation(line: 13569, column: 44, scope: !8309)
!8316 = !DILocalVariable(name: "fndecl", arg: 3, scope: !8309, file: !3, line: 13569, type: !3344)
!8317 = !DILocation(line: 13569, column: 55, scope: !8309)
!8318 = !DILocalVariable(name: "n", arg: 4, scope: !8309, file: !3, line: 13569, type: !1445)
!8319 = !DILocation(line: 13569, column: 67, scope: !8309)
!8320 = !DILocalVariable(name: "oldnargs", scope: !8309, file: !3, line: 13571, type: !1445)
!8321 = !DILocation(line: 13571, column: 7, scope: !8309)
!8322 = !DILocation(line: 13571, column: 40, scope: !8309)
!8323 = !DILocation(line: 13571, column: 18, scope: !8309)
!8324 = !DILocalVariable(name: "nargs", scope: !8309, file: !3, line: 13572, type: !1445)
!8325 = !DILocation(line: 13572, column: 7, scope: !8309)
!8326 = !DILocation(line: 13572, column: 15, scope: !8309)
!8327 = !DILocation(line: 13572, column: 26, scope: !8309)
!8328 = !DILocation(line: 13572, column: 24, scope: !8309)
!8329 = !DILocation(line: 13572, column: 33, scope: !8309)
!8330 = !DILocation(line: 13572, column: 31, scope: !8309)
!8331 = !DILocalVariable(name: "fntype", scope: !8309, file: !3, line: 13573, type: !3344)
!8332 = !DILocation(line: 13573, column: 8, scope: !8309)
!8333 = !DILocation(line: 13573, column: 17, scope: !8309)
!8334 = !DILocalVariable(name: "fn", scope: !8309, file: !3, line: 13574, type: !3344)
!8335 = !DILocation(line: 13574, column: 8, scope: !8309)
!8336 = !DILocation(line: 13574, column: 13, scope: !8309)
!8337 = !DILocalVariable(name: "buffer", scope: !8309, file: !3, line: 13575, type: !3666)
!8338 = !DILocation(line: 13575, column: 9, scope: !8309)
!8339 = !DILocalVariable(name: "i", scope: !8309, file: !3, line: 13576, type: !1445)
!8340 = !DILocation(line: 13576, column: 7, scope: !8309)
!8341 = !DILocalVariable(name: "j", scope: !8309, file: !3, line: 13576, type: !1445)
!8342 = !DILocation(line: 13576, column: 10, scope: !8309)
!8343 = !DILocalVariable(name: "ap", scope: !8309, file: !3, line: 13577, type: !6012)
!8344 = !DILocation(line: 13577, column: 11, scope: !8309)
!8345 = !DILocalVariable(name: "loc", scope: !8309, file: !3, line: 13578, type: !3429)
!8346 = !DILocation(line: 13578, column: 14, scope: !8309)
!8347 = !DILocation(line: 13578, column: 37, scope: !8309)
!8348 = !DILocation(line: 13578, column: 20, scope: !8309)
!8349 = !DILocation(line: 13580, column: 12, scope: !8309)
!8350 = !DILocation(line: 13580, column: 10, scope: !8309)
!8351 = !DILocation(line: 13581, column: 3, scope: !8309)
!8352 = !DILocation(line: 13582, column: 10, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8309, file: !3, line: 13582, column: 3)
!8354 = !DILocation(line: 13582, column: 8, scope: !8353)
!8355 = !DILocation(line: 13582, column: 15, scope: !8356)
!8356 = distinct !DILexicalBlock(scope: !8353, file: !3, line: 13582, column: 3)
!8357 = !DILocation(line: 13582, column: 19, scope: !8356)
!8358 = !DILocation(line: 13582, column: 17, scope: !8356)
!8359 = !DILocation(line: 13582, column: 3, scope: !8353)
!8360 = !DILocation(line: 13583, column: 17, scope: !8356)
!8361 = !DILocation(line: 13583, column: 5, scope: !8356)
!8362 = !DILocation(line: 13583, column: 12, scope: !8356)
!8363 = !DILocation(line: 13583, column: 15, scope: !8356)
!8364 = !DILocation(line: 13582, column: 23, scope: !8356)
!8365 = !DILocation(line: 13582, column: 3, scope: !8356)
!8366 = distinct !{!8366, !8359, !8367}
!8367 = !DILocation(line: 13583, column: 17, scope: !8353)
!8368 = !DILocation(line: 13584, column: 3, scope: !8309)
!8369 = !DILocation(line: 13585, column: 12, scope: !8370)
!8370 = distinct !DILexicalBlock(scope: !8309, file: !3, line: 13585, column: 3)
!8371 = !DILocation(line: 13585, column: 10, scope: !8370)
!8372 = !DILocation(line: 13585, column: 8, scope: !8370)
!8373 = !DILocation(line: 13585, column: 18, scope: !8374)
!8374 = distinct !DILexicalBlock(scope: !8370, file: !3, line: 13585, column: 3)
!8375 = !DILocation(line: 13585, column: 22, scope: !8374)
!8376 = !DILocation(line: 13585, column: 20, scope: !8374)
!8377 = !DILocation(line: 13585, column: 3, scope: !8370)
!8378 = !DILocation(line: 13586, column: 34, scope: !8374)
!8379 = !DILocation(line: 13586, column: 40, scope: !8374)
!8380 = !DILocation(line: 13586, column: 17, scope: !8374)
!8381 = !DILocation(line: 13586, column: 5, scope: !8374)
!8382 = !DILocation(line: 13586, column: 12, scope: !8374)
!8383 = !DILocation(line: 13586, column: 15, scope: !8374)
!8384 = !DILocation(line: 13585, column: 33, scope: !8374)
!8385 = !DILocation(line: 13585, column: 38, scope: !8374)
!8386 = !DILocation(line: 13585, column: 3, scope: !8374)
!8387 = distinct !{!8387, !8377, !8388}
!8388 = !DILocation(line: 13586, column: 41, scope: !8370)
!8389 = !DILocation(line: 13588, column: 38, scope: !8309)
!8390 = !DILocation(line: 13588, column: 43, scope: !8309)
!8391 = !DILocation(line: 13588, column: 63, scope: !8309)
!8392 = !DILocation(line: 13588, column: 67, scope: !8309)
!8393 = !DILocation(line: 13588, column: 74, scope: !8309)
!8394 = !DILocation(line: 13588, column: 16, scope: !8309)
!8395 = !DILocation(line: 13588, column: 10, scope: !8309)
!8396 = !DILocation(line: 13588, column: 3, scope: !8309)
!8397 = distinct !DISubprogram(name: "fold_call_stmt", scope: !3, file: !3, line: 13801, type: !8398, scopeLine: 13802, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8398 = !DISubroutineType(types: !8399)
!8399 = !{!3344, !3631, !3421}
!8400 = !DILocalVariable(name: "stmt", arg: 1, scope: !8397, file: !3, line: 13801, type: !3631)
!8401 = !DILocation(line: 13801, column: 24, scope: !8397)
!8402 = !DILocalVariable(name: "ignore", arg: 2, scope: !8397, file: !3, line: 13801, type: !3421)
!8403 = !DILocation(line: 13801, column: 35, scope: !8397)
!8404 = !DILocalVariable(name: "ret", scope: !8397, file: !3, line: 13803, type: !3344)
!8405 = !DILocation(line: 13803, column: 8, scope: !8397)
!8406 = !DILocalVariable(name: "fndecl", scope: !8397, file: !3, line: 13804, type: !3344)
!8407 = !DILocation(line: 13804, column: 8, scope: !8397)
!8408 = !DILocation(line: 13804, column: 37, scope: !8397)
!8409 = !DILocation(line: 13804, column: 17, scope: !8397)
!8410 = !DILocalVariable(name: "loc", scope: !8397, file: !3, line: 13805, type: !3429)
!8411 = !DILocation(line: 13805, column: 14, scope: !8397)
!8412 = !DILocation(line: 13805, column: 37, scope: !8397)
!8413 = !DILocation(line: 13805, column: 20, scope: !8397)
!8414 = !DILocation(line: 13806, column: 7, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 13806, column: 7)
!8416 = !DILocation(line: 13807, column: 7, scope: !8415)
!8417 = !DILocation(line: 13807, column: 10, scope: !8415)
!8418 = !DILocation(line: 13807, column: 29, scope: !8415)
!8419 = !DILocation(line: 13808, column: 7, scope: !8415)
!8420 = !DILocation(line: 13808, column: 10, scope: !8415)
!8421 = !DILocation(line: 13809, column: 7, scope: !8415)
!8422 = !DILocation(line: 13809, column: 38, scope: !8415)
!8423 = !DILocation(line: 13809, column: 11, scope: !8415)
!8424 = !DILocation(line: 13806, column: 7, scope: !8397)
!8425 = !DILocalVariable(name: "nargs", scope: !8426, file: !3, line: 13811, type: !1445)
!8426 = distinct !DILexicalBlock(scope: !8415, file: !3, line: 13810, column: 5)
!8427 = !DILocation(line: 13811, column: 11, scope: !8426)
!8428 = !DILocation(line: 13811, column: 41, scope: !8426)
!8429 = !DILocation(line: 13811, column: 19, scope: !8426)
!8430 = !DILocation(line: 13813, column: 41, scope: !8431)
!8431 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 13813, column: 11)
!8432 = !DILocation(line: 13813, column: 11, scope: !8431)
!8433 = !DILocation(line: 13813, column: 11, scope: !8426)
!8434 = !DILocation(line: 13814, column: 2, scope: !8431)
!8435 = !DILocation(line: 13816, column: 11, scope: !8436)
!8436 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 13816, column: 11)
!8437 = !DILocation(line: 13816, column: 40, scope: !8436)
!8438 = !DILocation(line: 13816, column: 11, scope: !8426)
!8439 = !DILocalVariable(name: "arglist", scope: !8440, file: !3, line: 13818, type: !3344)
!8440 = distinct !DILexicalBlock(scope: !8436, file: !3, line: 13817, column: 9)
!8441 = !DILocation(line: 13818, column: 16, scope: !8440)
!8442 = !DILocalVariable(name: "i", scope: !8440, file: !3, line: 13819, type: !1445)
!8443 = !DILocation(line: 13819, column: 15, scope: !8440)
!8444 = !DILocation(line: 13820, column: 20, scope: !8445)
!8445 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 13820, column: 11)
!8446 = !DILocation(line: 13820, column: 26, scope: !8445)
!8447 = !DILocation(line: 13820, column: 18, scope: !8445)
!8448 = !DILocation(line: 13820, column: 16, scope: !8445)
!8449 = !DILocation(line: 13820, column: 31, scope: !8450)
!8450 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 13820, column: 11)
!8451 = !DILocation(line: 13820, column: 33, scope: !8450)
!8452 = !DILocation(line: 13820, column: 11, scope: !8445)
!8453 = !DILocation(line: 13821, column: 23, scope: !8450)
!8454 = !DILocation(line: 13821, column: 21, scope: !8450)
!8455 = !DILocation(line: 13821, column: 13, scope: !8450)
!8456 = !DILocation(line: 13820, column: 40, scope: !8450)
!8457 = !DILocation(line: 13820, column: 11, scope: !8450)
!8458 = distinct !{!8458, !8452, !8459}
!8459 = !DILocation(line: 13821, column: 23, scope: !8445)
!8460 = !DILocation(line: 13822, column: 19, scope: !8440)
!8461 = !DILocation(line: 13822, column: 33, scope: !8440)
!8462 = !DILocation(line: 13822, column: 41, scope: !8440)
!8463 = !DILocation(line: 13822, column: 50, scope: !8440)
!8464 = !DILocation(line: 13822, column: 11, scope: !8440)
!8465 = !DILocation(line: 13822, column: 4, scope: !8440)
!8466 = !DILocation(line: 13826, column: 8, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8468, file: !3, line: 13826, column: 8)
!8468 = distinct !DILexicalBlock(scope: !8436, file: !3, line: 13825, column: 2)
!8469 = !DILocation(line: 13826, column: 14, scope: !8467)
!8470 = !DILocation(line: 13826, column: 8, scope: !8468)
!8471 = !DILocalVariable(name: "args", scope: !8472, file: !3, line: 13828, type: !8473)
!8472 = distinct !DILexicalBlock(scope: !8467, file: !3, line: 13827, column: 6)
!8473 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3344, size: 256, elements: !3573)
!8474 = !DILocation(line: 13828, column: 20, scope: !8472)
!8475 = !DILocalVariable(name: "i", scope: !8472, file: !3, line: 13829, type: !1445)
!8476 = !DILocation(line: 13829, column: 19, scope: !8472)
!8477 = !DILocation(line: 13830, column: 22, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8472, file: !3, line: 13830, column: 15)
!8479 = !DILocation(line: 13830, column: 20, scope: !8478)
!8480 = !DILocation(line: 13830, column: 27, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 13830, column: 15)
!8482 = !DILocation(line: 13830, column: 31, scope: !8481)
!8483 = !DILocation(line: 13830, column: 29, scope: !8481)
!8484 = !DILocation(line: 13830, column: 15, scope: !8478)
!8485 = !DILocation(line: 13831, column: 44, scope: !8481)
!8486 = !DILocation(line: 13831, column: 50, scope: !8481)
!8487 = !DILocation(line: 13831, column: 27, scope: !8481)
!8488 = !DILocation(line: 13831, column: 22, scope: !8481)
!8489 = !DILocation(line: 13831, column: 17, scope: !8481)
!8490 = !DILocation(line: 13831, column: 25, scope: !8481)
!8491 = !DILocation(line: 13830, column: 39, scope: !8481)
!8492 = !DILocation(line: 13830, column: 15, scope: !8481)
!8493 = distinct !{!8493, !8484, !8494}
!8494 = !DILocation(line: 13831, column: 51, scope: !8478)
!8495 = !DILocation(line: 13832, column: 30, scope: !8472)
!8496 = !DILocation(line: 13832, column: 35, scope: !8472)
!8497 = !DILocation(line: 13832, column: 43, scope: !8472)
!8498 = !DILocation(line: 13832, column: 49, scope: !8472)
!8499 = !DILocation(line: 13832, column: 56, scope: !8472)
!8500 = !DILocation(line: 13832, column: 14, scope: !8472)
!8501 = !DILocation(line: 13832, column: 12, scope: !8472)
!8502 = !DILocation(line: 13833, column: 6, scope: !8472)
!8503 = !DILocation(line: 13834, column: 9, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8468, file: !3, line: 13834, column: 8)
!8505 = !DILocation(line: 13834, column: 8, scope: !8468)
!8506 = !DILocation(line: 13835, column: 41, scope: !8504)
!8507 = !DILocation(line: 13835, column: 49, scope: !8504)
!8508 = !DILocation(line: 13835, column: 55, scope: !8504)
!8509 = !DILocation(line: 13835, column: 12, scope: !8504)
!8510 = !DILocation(line: 13835, column: 10, scope: !8504)
!8511 = !DILocation(line: 13835, column: 6, scope: !8504)
!8512 = !DILocation(line: 13836, column: 8, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8468, file: !3, line: 13836, column: 8)
!8514 = !DILocation(line: 13836, column: 8, scope: !8468)
!8515 = !DILocation(line: 13842, column: 33, scope: !8516)
!8516 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 13842, column: 12)
!8517 = distinct !DILexicalBlock(scope: !8513, file: !3, line: 13837, column: 6)
!8518 = !DILocation(line: 13842, column: 12, scope: !8516)
!8519 = !DILocation(line: 13842, column: 12, scope: !8517)
!8520 = !DILocalVariable(name: "realret", scope: !8521, file: !3, line: 13844, type: !3344)
!8521 = distinct !DILexicalBlock(scope: !8516, file: !3, line: 13843, column: 17)
!8522 = !DILocation(line: 13844, column: 10, scope: !8521)
!8523 = !DILocation(line: 13844, column: 20, scope: !8521)
!8524 = !DILocation(line: 13845, column: 9, scope: !8525)
!8525 = distinct !DILexicalBlock(scope: !8521, file: !3, line: 13845, column: 9)
!8526 = !DILocation(line: 13845, column: 25, scope: !8525)
!8527 = !DILocation(line: 13845, column: 9, scope: !8521)
!8528 = !DILocation(line: 13846, column: 17, scope: !8525)
!8529 = !DILocation(line: 13846, column: 15, scope: !8525)
!8530 = !DILocation(line: 13846, column: 7, scope: !8525)
!8531 = !DILocation(line: 13847, column: 9, scope: !8532)
!8532 = distinct !DILexicalBlock(scope: !8521, file: !3, line: 13847, column: 9)
!8533 = !DILocation(line: 13848, column: 9, scope: !8532)
!8534 = !DILocation(line: 13848, column: 13, scope: !8532)
!8535 = !DILocation(line: 13847, column: 9, scope: !8521)
!8536 = !DILocation(line: 13849, column: 7, scope: !8532)
!8537 = !DILocation(line: 13850, column: 26, scope: !8521)
!8538 = !DILocation(line: 13850, column: 19, scope: !8521)
!8539 = !DILocation(line: 13852, column: 15, scope: !8517)
!8540 = !DILocation(line: 13852, column: 8, scope: !8517)
!8541 = !DILocation(line: 13855, column: 5, scope: !8426)
!8542 = !DILocation(line: 13856, column: 3, scope: !8397)
!8543 = !DILocation(line: 13857, column: 1, scope: !8397)
!8544 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1437, file: !1437, line: 1954, type: !8545, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8545 = !DISubroutineType(types: !8546)
!8546 = !{!3344, !7113}
!8547 = !DILocalVariable(name: "gs", arg: 1, scope: !8544, file: !1437, line: 1954, type: !7113)
!8548 = !DILocation(line: 1954, column: 34, scope: !8544)
!8549 = !DILocalVariable(name: "addr", scope: !8544, file: !1437, line: 1956, type: !3344)
!8550 = !DILocation(line: 1956, column: 8, scope: !8544)
!8551 = !DILocation(line: 1956, column: 31, scope: !8544)
!8552 = !DILocation(line: 1956, column: 15, scope: !8544)
!8553 = !DILocation(line: 1957, column: 7, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8544, file: !1437, line: 1957, column: 7)
!8555 = !DILocation(line: 1957, column: 24, scope: !8554)
!8556 = !DILocation(line: 1957, column: 7, scope: !8544)
!8557 = !DILocation(line: 1958, column: 12, scope: !8554)
!8558 = !DILocation(line: 1958, column: 5, scope: !8554)
!8559 = !DILocation(line: 1959, column: 3, scope: !8544)
!8560 = !DILocation(line: 1960, column: 1, scope: !8544)
!8561 = distinct !DISubprogram(name: "gimple_location", scope: !1437, file: !1437, line: 1139, type: !8562, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8562 = !DISubroutineType(types: !8563)
!8563 = !{!3429, !7113}
!8564 = !DILocalVariable(name: "g", arg: 1, scope: !8561, file: !1437, line: 1139, type: !7113)
!8565 = !DILocation(line: 1139, column: 31, scope: !8561)
!8566 = !DILocation(line: 1141, column: 10, scope: !8561)
!8567 = !DILocation(line: 1141, column: 13, scope: !8561)
!8568 = !DILocation(line: 1141, column: 20, scope: !8561)
!8569 = !DILocation(line: 1141, column: 3, scope: !8561)
!8570 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !1437, file: !1437, line: 2168, type: !8571, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8571 = !DISubroutineType(types: !8572)
!8572 = !{!3421, !3631}
!8573 = !DILocalVariable(name: "s", arg: 1, scope: !8570, file: !1437, line: 2168, type: !3631)
!8574 = !DILocation(line: 2168, column: 35, scope: !8570)
!8575 = !DILocation(line: 2171, column: 11, scope: !8570)
!8576 = !DILocation(line: 2171, column: 14, scope: !8570)
!8577 = !DILocation(line: 2171, column: 21, scope: !8570)
!8578 = !DILocation(line: 2171, column: 29, scope: !8570)
!8579 = !DILocation(line: 2171, column: 52, scope: !8570)
!8580 = !DILocation(line: 2171, column: 10, scope: !8570)
!8581 = !DILocation(line: 2171, column: 3, scope: !8570)
!8582 = distinct !DISubprogram(name: "gimple_fold_builtin_varargs", scope: !3, file: !3, line: 13767, type: !8583, scopeLine: 13769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8583 = !DISubroutineType(types: !8584)
!8584 = !{!3344, !3344, !3631, !3421}
!8585 = !DILocalVariable(name: "fndecl", arg: 1, scope: !8582, file: !3, line: 13767, type: !3344)
!8586 = !DILocation(line: 13767, column: 35, scope: !8582)
!8587 = !DILocalVariable(name: "stmt", arg: 2, scope: !8582, file: !3, line: 13767, type: !3631)
!8588 = !DILocation(line: 13767, column: 50, scope: !8582)
!8589 = !DILocalVariable(name: "ignore", arg: 3, scope: !8582, file: !3, line: 13768, type: !3421)
!8590 = !DILocation(line: 13768, column: 14, scope: !8582)
!8591 = !DILocalVariable(name: "fcode", scope: !8582, file: !3, line: 13770, type: !573)
!8592 = !DILocation(line: 13770, column: 26, scope: !8582)
!8593 = !DILocation(line: 13770, column: 34, scope: !8582)
!8594 = !DILocalVariable(name: "ret", scope: !8582, file: !3, line: 13771, type: !3344)
!8595 = !DILocation(line: 13771, column: 8, scope: !8582)
!8596 = !DILocation(line: 13773, column: 11, scope: !8582)
!8597 = !DILocation(line: 13773, column: 3, scope: !8582)
!8598 = !DILocation(line: 13777, column: 46, scope: !8599)
!8599 = distinct !DILexicalBlock(scope: !8582, file: !3, line: 13774, column: 5)
!8600 = !DILocation(line: 13777, column: 52, scope: !8599)
!8601 = !DILocation(line: 13777, column: 13, scope: !8599)
!8602 = !DILocation(line: 13777, column: 11, scope: !8599)
!8603 = !DILocation(line: 13778, column: 7, scope: !8599)
!8604 = !DILocation(line: 13782, column: 47, scope: !8599)
!8605 = !DILocation(line: 13782, column: 64, scope: !8599)
!8606 = !DILocation(line: 13782, column: 13, scope: !8599)
!8607 = !DILocation(line: 13782, column: 11, scope: !8599)
!8608 = !DILocation(line: 13782, column: 7, scope: !8599)
!8609 = !DILocation(line: 13785, column: 7, scope: !8599)
!8610 = !DILocation(line: 13787, column: 7, scope: !8611)
!8611 = distinct !DILexicalBlock(scope: !8582, file: !3, line: 13787, column: 7)
!8612 = !DILocation(line: 13787, column: 7, scope: !8582)
!8613 = !DILocation(line: 13789, column: 13, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !8611, file: !3, line: 13788, column: 5)
!8615 = !DILocation(line: 13789, column: 11, scope: !8614)
!8616 = !DILocation(line: 13790, column: 7, scope: !8614)
!8617 = !DILocation(line: 13790, column: 29, scope: !8614)
!8618 = !DILocation(line: 13791, column: 14, scope: !8614)
!8619 = !DILocation(line: 13791, column: 7, scope: !8614)
!8620 = !DILocation(line: 13793, column: 3, scope: !8582)
!8621 = !DILocation(line: 13794, column: 1, scope: !8582)
!8622 = distinct !DISubprogram(name: "gimple_has_location", scope: !1437, file: !1437, line: 1165, type: !8623, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8623 = !DISubroutineType(types: !8624)
!8624 = !{!3421, !7113}
!8625 = !DILocalVariable(name: "g", arg: 1, scope: !8622, file: !1437, line: 1165, type: !7113)
!8626 = !DILocation(line: 1165, column: 35, scope: !8622)
!8627 = !DILocation(line: 1167, column: 27, scope: !8622)
!8628 = !DILocation(line: 1167, column: 10, scope: !8622)
!8629 = !DILocation(line: 1167, column: 30, scope: !8622)
!8630 = !DILocation(line: 1167, column: 3, scope: !8622)
!8631 = distinct !DISubprogram(name: "set_builtin_user_assembler_name", scope: !3, file: !3, line: 13864, type: !8632, scopeLine: 13865, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8632 = !DISubroutineType(types: !8633)
!8633 = !{null, !3344, !3504}
!8634 = !DILocalVariable(name: "decl", arg: 1, scope: !8631, file: !3, line: 13864, type: !3344)
!8635 = !DILocation(line: 13864, column: 39, scope: !8631)
!8636 = !DILocalVariable(name: "asmspec", arg: 2, scope: !8631, file: !3, line: 13864, type: !3504)
!8637 = !DILocation(line: 13864, column: 57, scope: !8631)
!8638 = !DILocalVariable(name: "builtin", scope: !8631, file: !3, line: 13866, type: !3344)
!8639 = !DILocation(line: 13866, column: 8, scope: !8631)
!8640 = !DILocation(line: 13867, column: 3, scope: !8631)
!8641 = !DILocation(line: 13871, column: 29, scope: !8631)
!8642 = !DILocation(line: 13871, column: 13, scope: !8631)
!8643 = !DILocation(line: 13871, column: 11, scope: !8631)
!8644 = !DILocation(line: 13872, column: 28, scope: !8631)
!8645 = !DILocation(line: 13872, column: 37, scope: !8631)
!8646 = !DILocation(line: 13872, column: 3, scope: !8631)
!8647 = !DILocation(line: 13873, column: 11, scope: !8631)
!8648 = !DILocation(line: 13873, column: 3, scope: !8631)
!8649 = !DILocation(line: 13876, column: 27, scope: !8650)
!8650 = distinct !DILexicalBlock(scope: !8631, file: !3, line: 13874, column: 5)
!8651 = !DILocation(line: 13876, column: 7, scope: !8650)
!8652 = !DILocation(line: 13877, column: 62, scope: !8650)
!8653 = !DILocation(line: 13877, column: 24, scope: !8650)
!8654 = !DILocation(line: 13877, column: 22, scope: !8650)
!8655 = !DILocation(line: 13878, column: 7, scope: !8650)
!8656 = !DILocation(line: 13880, column: 28, scope: !8650)
!8657 = !DILocation(line: 13880, column: 7, scope: !8650)
!8658 = !DILocation(line: 13881, column: 62, scope: !8650)
!8659 = !DILocation(line: 13881, column: 24, scope: !8650)
!8660 = !DILocation(line: 13881, column: 22, scope: !8650)
!8661 = !DILocation(line: 13882, column: 7, scope: !8650)
!8662 = !DILocation(line: 13884, column: 64, scope: !8650)
!8663 = !DILocation(line: 13884, column: 25, scope: !8650)
!8664 = !DILocation(line: 13884, column: 23, scope: !8650)
!8665 = !DILocation(line: 13885, column: 7, scope: !8650)
!8666 = !DILocation(line: 13887, column: 62, scope: !8650)
!8667 = !DILocation(line: 13887, column: 24, scope: !8650)
!8668 = !DILocation(line: 13887, column: 22, scope: !8650)
!8669 = !DILocation(line: 13888, column: 7, scope: !8650)
!8670 = !DILocation(line: 13890, column: 60, scope: !8650)
!8671 = !DILocation(line: 13890, column: 23, scope: !8650)
!8672 = !DILocation(line: 13890, column: 21, scope: !8650)
!8673 = !DILocation(line: 13891, column: 7, scope: !8650)
!8674 = !DILocation(line: 13899, column: 7, scope: !8650)
!8675 = !DILocation(line: 13901, column: 7, scope: !8650)
!8676 = !DILocation(line: 13903, column: 1, scope: !8631)
!8677 = distinct !DISubprogram(name: "init_call_expr_arg_iterator", scope: !135, file: !135, line: 5375, type: !8678, scopeLine: 5376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8678 = !DISubroutineType(types: !8679)
!8679 = !{null, !3344, !6252}
!8680 = !DILocalVariable(name: "exp", arg: 1, scope: !8677, file: !135, line: 5375, type: !3344)
!8681 = !DILocation(line: 5375, column: 35, scope: !8677)
!8682 = !DILocalVariable(name: "iter", arg: 2, scope: !8677, file: !135, line: 5375, type: !6252)
!8683 = !DILocation(line: 5375, column: 64, scope: !8677)
!8684 = !DILocation(line: 5377, column: 13, scope: !8677)
!8685 = !DILocation(line: 5377, column: 3, scope: !8677)
!8686 = !DILocation(line: 5377, column: 9, scope: !8677)
!8687 = !DILocation(line: 5377, column: 11, scope: !8677)
!8688 = !DILocation(line: 5378, column: 13, scope: !8677)
!8689 = !DILocation(line: 5378, column: 3, scope: !8677)
!8690 = !DILocation(line: 5378, column: 9, scope: !8677)
!8691 = !DILocation(line: 5378, column: 11, scope: !8677)
!8692 = !DILocation(line: 5379, column: 3, scope: !8677)
!8693 = !DILocation(line: 5379, column: 9, scope: !8677)
!8694 = !DILocation(line: 5379, column: 11, scope: !8677)
!8695 = !DILocation(line: 5380, column: 1, scope: !8677)
!8696 = distinct !DISubprogram(name: "fold_builtin_0", scope: !3, file: !3, line: 9689, type: !6658, scopeLine: 9690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8697 = !DILocalVariable(name: "loc", arg: 1, scope: !8696, file: !3, line: 9689, type: !3429)
!8698 = !DILocation(line: 9689, column: 28, scope: !8696)
!8699 = !DILocalVariable(name: "fndecl", arg: 2, scope: !8696, file: !3, line: 9689, type: !3344)
!8700 = !DILocation(line: 9689, column: 38, scope: !8696)
!8701 = !DILocalVariable(name: "ignore", arg: 3, scope: !8696, file: !3, line: 9689, type: !3421)
!8702 = !DILocation(line: 9689, column: 51, scope: !8696)
!8703 = !DILocalVariable(name: "type", scope: !8696, file: !3, line: 9691, type: !3344)
!8704 = !DILocation(line: 9691, column: 8, scope: !8696)
!8705 = !DILocation(line: 9691, column: 15, scope: !8696)
!8706 = !DILocalVariable(name: "fcode", scope: !8696, file: !3, line: 9692, type: !573)
!8707 = !DILocation(line: 9692, column: 26, scope: !8696)
!8708 = !DILocation(line: 9692, column: 34, scope: !8696)
!8709 = !DILocation(line: 9693, column: 11, scope: !8696)
!8710 = !DILocation(line: 9693, column: 3, scope: !8696)
!8711 = !DILocation(line: 9699, column: 32, scope: !8712)
!8712 = distinct !DILexicalBlock(scope: !8696, file: !3, line: 9694, column: 5)
!8713 = !DILocation(line: 9699, column: 37, scope: !8712)
!8714 = !DILocation(line: 9699, column: 14, scope: !8712)
!8715 = !DILocation(line: 9699, column: 7, scope: !8712)
!8716 = !DILocation(line: 9702, column: 32, scope: !8712)
!8717 = !DILocation(line: 9702, column: 37, scope: !8712)
!8718 = !DILocation(line: 9702, column: 14, scope: !8712)
!8719 = !DILocation(line: 9702, column: 7, scope: !8712)
!8720 = !DILocation(line: 9705, column: 14, scope: !8712)
!8721 = !DILocation(line: 9705, column: 7, scope: !8712)
!8722 = !DILocation(line: 9708, column: 7, scope: !8712)
!8723 = !DILocation(line: 9710, column: 3, scope: !8696)
!8724 = !DILocation(line: 9711, column: 1, scope: !8696)
!8725 = distinct !DISubprogram(name: "fold_builtin_1", scope: !3, file: !3, line: 9718, type: !6851, scopeLine: 9719, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!8726 = !DILocalVariable(name: "loc", arg: 1, scope: !8725, file: !3, line: 9718, type: !3429)
!8727 = !DILocation(line: 9718, column: 28, scope: !8725)
!8728 = !DILocalVariable(name: "fndecl", arg: 2, scope: !8725, file: !3, line: 9718, type: !3344)
!8729 = !DILocation(line: 9718, column: 38, scope: !8725)
!8730 = !DILocalVariable(name: "arg0", arg: 3, scope: !8725, file: !3, line: 9718, type: !3344)
!8731 = !DILocation(line: 9718, column: 51, scope: !8725)
!8732 = !DILocalVariable(name: "ignore", arg: 4, scope: !8725, file: !3, line: 9718, type: !3421)
!8733 = !DILocation(line: 9718, column: 62, scope: !8725)
!8734 = !DILocalVariable(name: "type", scope: !8725, file: !3, line: 9720, type: !3344)
!8735 = !DILocation(line: 9720, column: 8, scope: !8725)
!8736 = !DILocation(line: 9720, column: 15, scope: !8725)
!8737 = !DILocalVariable(name: "fcode", scope: !8725, file: !3, line: 9721, type: !573)
!8738 = !DILocation(line: 9721, column: 26, scope: !8725)
!8739 = !DILocation(line: 9721, column: 34, scope: !8725)
!8740 = !DILocation(line: 9722, column: 11, scope: !8725)
!8741 = !DILocation(line: 9722, column: 3, scope: !8725)
!8742 = !DILocalVariable(name: "val", scope: !8743, file: !3, line: 9727, type: !3344)
!8743 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 9726, column: 7)
!8744 = distinct !DILexicalBlock(scope: !8725, file: !3, line: 9723, column: 5)
!8745 = !DILocation(line: 9727, column: 7, scope: !8743)
!8746 = !DILocation(line: 9727, column: 38, scope: !8743)
!8747 = !DILocation(line: 9727, column: 13, scope: !8743)
!8748 = !DILocation(line: 9732, column: 7, scope: !8749)
!8749 = distinct !DILexicalBlock(scope: !8743, file: !3, line: 9732, column: 6)
!8750 = !DILocation(line: 9732, column: 11, scope: !8749)
!8751 = !DILocation(line: 9732, column: 15, scope: !8749)
!8752 = !DILocation(line: 9732, column: 6, scope: !8743)
!8753 = !DILocation(line: 9733, column: 10, scope: !8749)
!8754 = !DILocation(line: 9733, column: 8, scope: !8749)
!8755 = !DILocation(line: 9733, column: 4, scope: !8749)
!8756 = !DILocation(line: 9735, column: 9, scope: !8743)
!8757 = !DILocation(line: 9735, column: 2, scope: !8743)
!8758 = !DILocation(line: 9739, column: 42, scope: !8744)
!8759 = !DILocation(line: 9739, column: 14, scope: !8744)
!8760 = !DILocation(line: 9739, column: 7, scope: !8744)
!8761 = !DILocation(line: 9742, column: 35, scope: !8744)
!8762 = !DILocation(line: 9742, column: 40, scope: !8744)
!8763 = !DILocation(line: 9742, column: 46, scope: !8744)
!8764 = !DILocation(line: 9742, column: 14, scope: !8744)
!8765 = !DILocation(line: 9742, column: 7, scope: !8744)
!8766 = !DILocation(line: 9745, column: 33, scope: !8744)
!8767 = !DILocation(line: 9745, column: 38, scope: !8744)
!8768 = !DILocation(line: 9745, column: 44, scope: !8744)
!8769 = !DILocation(line: 9745, column: 14, scope: !8744)
!8770 = !DILocation(line: 9745, column: 7, scope: !8744)
!8771 = !DILocation(line: 9751, column: 32, scope: !8744)
!8772 = !DILocation(line: 9751, column: 37, scope: !8744)
!8773 = !DILocation(line: 9751, column: 43, scope: !8744)
!8774 = !DILocation(line: 9751, column: 14, scope: !8744)
!8775 = !DILocation(line: 9751, column: 7, scope: !8744)
!8776 = !DILocation(line: 9754, column: 25, scope: !8777)
!8777 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 9754, column: 11)
!8778 = !DILocation(line: 9754, column: 11, scope: !8777)
!8779 = !DILocation(line: 9755, column: 2, scope: !8777)
!8780 = !DILocation(line: 9755, column: 5, scope: !8777)
!8781 = !DILocation(line: 9755, column: 46, scope: !8777)
!8782 = !DILocation(line: 9754, column: 11, scope: !8744)
!8783 = !DILocation(line: 9756, column: 9, scope: !8777)
!8784 = !DILocation(line: 9756, column: 2, scope: !8777)
!8785 = !DILocation(line: 9757, column: 5, scope: !8744)
!8786 = !DILocation(line: 9760, column: 25, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 9760, column: 11)
!8788 = !DILocation(line: 9760, column: 11, scope: !8787)
!8789 = !DILocation(line: 9761, column: 2, scope: !8787)
!8790 = !DILocation(line: 9761, column: 5, scope: !8787)
!8791 = !DILocation(line: 9761, column: 46, scope: !8787)
!8792 = !DILocation(line: 9760, column: 11, scope: !8744)
!8793 = !DILocation(line: 9762, column: 25, scope: !8787)
!8794 = !DILocation(line: 9762, column: 30, scope: !8787)
!8795 = !DILocation(line: 9762, column: 9, scope: !8787)
!8796 = !DILocation(line: 9762, column: 2, scope: !8787)
!8797 = !DILocation(line: 9763, column: 5, scope: !8744)
!8798 = !DILocation(line: 9766, column: 25, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 9766, column: 11)
!8800 = !DILocation(line: 9766, column: 11, scope: !8799)
!8801 = !DILocation(line: 9767, column: 4, scope: !8799)
!8802 = !DILocation(line: 9767, column: 7, scope: !8799)
!8803 = !DILocation(line: 9767, column: 48, scope: !8799)
!8804 = !DILocation(line: 9766, column: 11, scope: !8744)
!8805 = !DILocation(line: 9768, column: 25, scope: !8799)
!8806 = !DILocation(line: 9768, column: 30, scope: !8799)
!8807 = !DILocation(line: 9768, column: 9, scope: !8799)
!8808 = !DILocation(line: 9768, column: 2, scope: !8799)
!8809 = !DILocation(line: 9769, column: 5, scope: !8744)
!8810 = !DILocation(line: 9772, column: 32, scope: !8744)
!8811 = !DILocation(line: 9772, column: 37, scope: !8744)
!8812 = !DILocation(line: 9772, column: 43, scope: !8744)
!8813 = !DILocation(line: 9772, column: 49, scope: !8744)
!8814 = !DILocation(line: 9772, column: 14, scope: !8744)
!8815 = !DILocation(line: 9772, column: 7, scope: !8744)
!8816 = !DILocation(line: 9775, column: 32, scope: !8744)
!8817 = !DILocation(line: 9775, column: 37, scope: !8744)
!8818 = !DILocation(line: 9775, column: 43, scope: !8744)
!8819 = !DILocation(line: 9775, column: 49, scope: !8744)
!8820 = !DILocation(line: 9775, column: 14, scope: !8744)
!8821 = !DILocation(line: 9775, column: 7, scope: !8744)
!8822 = !DILocation(line: 9779, column: 7, scope: !8744)
!8823 = !DILocation(line: 9789, column: 7, scope: !8744)
!8824 = !DILocation(line: 9799, column: 7, scope: !8744)
!8825 = !DILocation(line: 9809, column: 7, scope: !8744)
!8826 = !DILocation(line: 9819, column: 7, scope: !8744)
!8827 = !DILocation(line: 9829, column: 7, scope: !8744)
!8828 = !DILocation(line: 9839, column: 7, scope: !8744)
!8829 = !DILocation(line: 9849, column: 7, scope: !8744)
!8830 = !DILocation(line: 9859, column: 7, scope: !8744)
!8831 = !DILocation(line: 9869, column: 7, scope: !8744)
!8832 = !DILocation(line: 9879, column: 7, scope: !8744)
!8833 = !DILocation(line: 9889, column: 7, scope: !8744)
!8834 = !DILocation(line: 9898, column: 33, scope: !8744)
!8835 = !DILocation(line: 9898, column: 38, scope: !8744)
!8836 = !DILocation(line: 9898, column: 44, scope: !8744)
!8837 = !DILocation(line: 9898, column: 50, scope: !8744)
!8838 = !DILocation(line: 9898, column: 14, scope: !8744)
!8839 = !DILocation(line: 9898, column: 7, scope: !8744)
!8840 = !DILocation(line: 9901, column: 33, scope: !8744)
!8841 = !DILocation(line: 9901, column: 38, scope: !8744)
!8842 = !DILocation(line: 9901, column: 44, scope: !8744)
!8843 = !DILocation(line: 9901, column: 14, scope: !8744)
!8844 = !DILocation(line: 9901, column: 7, scope: !8744)
!8845 = !DILocation(line: 9904, column: 33, scope: !8744)
!8846 = !DILocation(line: 9904, column: 38, scope: !8744)
!8847 = !DILocation(line: 9904, column: 44, scope: !8744)
!8848 = !DILocation(line: 9904, column: 14, scope: !8744)
!8849 = !DILocation(line: 9904, column: 7, scope: !8744)
!8850 = !DILocation(line: 9907, column: 33, scope: !8744)
!8851 = !DILocation(line: 9907, column: 38, scope: !8744)
!8852 = !DILocation(line: 9907, column: 44, scope: !8744)
!8853 = !DILocation(line: 9907, column: 14, scope: !8744)
!8854 = !DILocation(line: 9907, column: 7, scope: !8744)
!8855 = !DILocation(line: 9911, column: 7, scope: !8744)
!8856 = !DILocation(line: 9921, column: 7, scope: !8744)
!8857 = !DILocation(line: 9931, column: 7, scope: !8744)
!8858 = !DILocation(line: 9940, column: 7, scope: !8744)
!8859 = !DILocation(line: 9949, column: 7, scope: !8744)
!8860 = !DILocation(line: 9959, column: 7, scope: !8744)
!8861 = !DILocation(line: 9969, column: 7, scope: !8744)
!8862 = !DILocation(line: 9977, column: 32, scope: !8744)
!8863 = !DILocation(line: 9977, column: 37, scope: !8744)
!8864 = !DILocation(line: 9977, column: 43, scope: !8744)
!8865 = !DILocation(line: 9977, column: 49, scope: !8744)
!8866 = !DILocation(line: 9977, column: 14, scope: !8744)
!8867 = !DILocation(line: 9977, column: 7, scope: !8744)
!8868 = !DILocation(line: 9980, column: 32, scope: !8744)
!8869 = !DILocation(line: 9980, column: 38, scope: !8744)
!8870 = !DILocation(line: 9980, column: 14, scope: !8744)
!8871 = !DILocation(line: 9980, column: 7, scope: !8744)
!8872 = !DILocation(line: 9983, column: 33, scope: !8744)
!8873 = !DILocation(line: 9983, column: 38, scope: !8744)
!8874 = !DILocation(line: 9983, column: 44, scope: !8744)
!8875 = !DILocation(line: 9983, column: 14, scope: !8744)
!8876 = !DILocation(line: 9983, column: 7, scope: !8744)
!8877 = !DILocation(line: 9987, column: 7, scope: !8744)
!8878 = !DILocation(line: 9996, column: 7, scope: !8744)
!8879 = !DILocation(line: 10004, column: 33, scope: !8744)
!8880 = !DILocation(line: 10004, column: 38, scope: !8744)
!8881 = !DILocation(line: 10004, column: 44, scope: !8744)
!8882 = !DILocation(line: 10004, column: 50, scope: !8744)
!8883 = !DILocation(line: 10004, column: 14, scope: !8744)
!8884 = !DILocation(line: 10004, column: 7, scope: !8744)
!8885 = !DILocation(line: 10008, column: 7, scope: !8744)
!8886 = !DILocation(line: 10017, column: 7, scope: !8744)
!8887 = !DILocation(line: 10026, column: 7, scope: !8744)
!8888 = !DILocation(line: 10035, column: 7, scope: !8744)
!8889 = !DILocation(line: 10044, column: 7, scope: !8744)
!8890 = !DILocation(line: 10051, column: 7, scope: !8744)
!8891 = !DILocation(line: 10059, column: 7, scope: !8744)
!8892 = !DILocation(line: 10066, column: 7, scope: !8744)
!8893 = !DILocation(line: 10075, column: 7, scope: !8744)
!8894 = !DILocation(line: 10082, column: 7, scope: !8744)
!8895 = !DILocation(line: 10089, column: 7, scope: !8744)
!8896 = !DILocation(line: 10096, column: 7, scope: !8744)
!8897 = !DILocation(line: 10106, column: 7, scope: !8744)
!8898 = !DILocation(line: 10116, column: 7, scope: !8744)
!8899 = !DILocation(line: 10126, column: 7, scope: !8744)
!8900 = !DILocation(line: 10136, column: 7, scope: !8744)
!8901 = !DILocation(line: 10148, column: 32, scope: !8744)
!8902 = !DILocation(line: 10148, column: 38, scope: !8744)
!8903 = !DILocation(line: 10148, column: 14, scope: !8744)
!8904 = !DILocation(line: 10148, column: 7, scope: !8744)
!8905 = !DILocation(line: 10151, column: 32, scope: !8744)
!8906 = !DILocation(line: 10151, column: 38, scope: !8744)
!8907 = !DILocation(line: 10151, column: 14, scope: !8744)
!8908 = !DILocation(line: 10151, column: 7, scope: !8744)
!8909 = !DILocation(line: 10154, column: 34, scope: !8744)
!8910 = !DILocation(line: 10154, column: 39, scope: !8744)
!8911 = !DILocation(line: 10154, column: 47, scope: !8744)
!8912 = !DILocation(line: 10154, column: 14, scope: !8744)
!8913 = !DILocation(line: 10154, column: 7, scope: !8744)
!8914 = !DILocation(line: 10157, column: 33, scope: !8744)
!8915 = !DILocation(line: 10157, column: 38, scope: !8744)
!8916 = !DILocation(line: 10157, column: 46, scope: !8744)
!8917 = !DILocation(line: 10157, column: 14, scope: !8744)
!8918 = !DILocation(line: 10157, column: 7, scope: !8744)
!8919 = !DILocation(line: 10160, column: 34, scope: !8744)
!8920 = !DILocation(line: 10160, column: 39, scope: !8744)
!8921 = !DILocation(line: 10160, column: 47, scope: !8744)
!8922 = !DILocation(line: 10160, column: 14, scope: !8744)
!8923 = !DILocation(line: 10160, column: 7, scope: !8744)
!8924 = !DILocation(line: 10163, column: 34, scope: !8744)
!8925 = !DILocation(line: 10163, column: 39, scope: !8744)
!8926 = !DILocation(line: 10163, column: 47, scope: !8744)
!8927 = !DILocation(line: 10163, column: 14, scope: !8744)
!8928 = !DILocation(line: 10163, column: 7, scope: !8744)
!8929 = !DILocation(line: 10167, column: 45, scope: !8744)
!8930 = !DILocation(line: 10167, column: 50, scope: !8744)
!8931 = !DILocation(line: 10167, column: 58, scope: !8744)
!8932 = !DILocation(line: 10167, column: 14, scope: !8744)
!8933 = !DILocation(line: 10167, column: 7, scope: !8744)
!8934 = !DILocation(line: 10175, column: 43, scope: !8744)
!8935 = !DILocation(line: 10175, column: 48, scope: !8744)
!8936 = !DILocation(line: 10175, column: 56, scope: !8744)
!8937 = !DILocation(line: 10175, column: 14, scope: !8744)
!8938 = !DILocation(line: 10175, column: 7, scope: !8744)
!8939 = !DILocation(line: 10179, column: 33, scope: !8744)
!8940 = !DILocation(line: 10179, column: 38, scope: !8744)
!8941 = !DILocation(line: 10179, column: 46, scope: !8744)
!8942 = !DILocation(line: 10179, column: 14, scope: !8744)
!8943 = !DILocation(line: 10179, column: 7, scope: !8744)
!8944 = !DILocation(line: 10183, column: 34, scope: !8744)
!8945 = !DILocation(line: 10183, column: 42, scope: !8744)
!8946 = !DILocation(line: 10183, column: 14, scope: !8744)
!8947 = !DILocation(line: 10183, column: 7, scope: !8744)
!8948 = !DILocation(line: 10190, column: 34, scope: !8744)
!8949 = !DILocation(line: 10190, column: 42, scope: !8744)
!8950 = !DILocation(line: 10190, column: 14, scope: !8744)
!8951 = !DILocation(line: 10190, column: 7, scope: !8744)
!8952 = !DILocation(line: 10193, column: 36, scope: !8744)
!8953 = !DILocation(line: 10193, column: 41, scope: !8744)
!8954 = !DILocation(line: 10193, column: 47, scope: !8744)
!8955 = !DILocation(line: 10193, column: 14, scope: !8744)
!8956 = !DILocation(line: 10193, column: 7, scope: !8744)
!8957 = !DILocation(line: 10196, column: 40, scope: !8744)
!8958 = !DILocation(line: 10196, column: 45, scope: !8744)
!8959 = !DILocation(line: 10196, column: 51, scope: !8744)
!8960 = !DILocation(line: 10196, column: 14, scope: !8744)
!8961 = !DILocation(line: 10196, column: 7, scope: !8744)
!8962 = !DILocation(line: 10200, column: 33, scope: !8744)
!8963 = !DILocation(line: 10200, column: 38, scope: !8744)
!8964 = !DILocation(line: 10200, column: 44, scope: !8744)
!8965 = !DILocation(line: 10200, column: 14, scope: !8744)
!8966 = !DILocation(line: 10200, column: 7, scope: !8744)
!8967 = !DILocation(line: 10203, column: 36, scope: !8744)
!8968 = !DILocation(line: 10203, column: 41, scope: !8744)
!8969 = !DILocation(line: 10203, column: 14, scope: !8744)
!8970 = !DILocation(line: 10203, column: 7, scope: !8744)
!8971 = !DILocation(line: 10206, column: 36, scope: !8744)
!8972 = !DILocation(line: 10206, column: 41, scope: !8744)
!8973 = !DILocation(line: 10206, column: 14, scope: !8744)
!8974 = !DILocation(line: 10206, column: 7, scope: !8744)
!8975 = !DILocation(line: 10209, column: 36, scope: !8744)
!8976 = !DILocation(line: 10209, column: 41, scope: !8744)
!8977 = !DILocation(line: 10209, column: 14, scope: !8744)
!8978 = !DILocation(line: 10209, column: 7, scope: !8744)
!8979 = !DILocalVariable(name: "ret", scope: !8980, file: !3, line: 10217, type: !3344)
!8980 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 10216, column: 7)
!8981 = !DILocation(line: 10217, column: 7, scope: !8980)
!8982 = !DILocation(line: 10217, column: 36, scope: !8980)
!8983 = !DILocation(line: 10217, column: 41, scope: !8980)
!8984 = !DILocation(line: 10217, column: 49, scope: !8980)
!8985 = !DILocation(line: 10217, column: 13, scope: !8980)
!8986 = !DILocation(line: 10218, column: 6, scope: !8987)
!8987 = distinct !DILexicalBlock(scope: !8980, file: !3, line: 10218, column: 6)
!8988 = !DILocation(line: 10218, column: 6, scope: !8980)
!8989 = !DILocation(line: 10219, column: 11, scope: !8987)
!8990 = !DILocation(line: 10219, column: 4, scope: !8987)
!8991 = !DILocation(line: 10220, column: 41, scope: !8980)
!8992 = !DILocation(line: 10220, column: 46, scope: !8980)
!8993 = !DILocation(line: 10220, column: 54, scope: !8980)
!8994 = !DILocation(line: 10220, column: 9, scope: !8980)
!8995 = !DILocation(line: 10220, column: 2, scope: !8980)
!8996 = !DILocalVariable(name: "ret", scope: !8997, file: !3, line: 10228, type: !3344)
!8997 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 10227, column: 7)
!8998 = !DILocation(line: 10228, column: 7, scope: !8997)
!8999 = !DILocation(line: 10228, column: 36, scope: !8997)
!9000 = !DILocation(line: 10228, column: 41, scope: !8997)
!9001 = !DILocation(line: 10228, column: 49, scope: !8997)
!9002 = !DILocation(line: 10228, column: 13, scope: !8997)
!9003 = !DILocation(line: 10229, column: 6, scope: !9004)
!9004 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 10229, column: 6)
!9005 = !DILocation(line: 10229, column: 6, scope: !8997)
!9006 = !DILocation(line: 10230, column: 11, scope: !9004)
!9007 = !DILocation(line: 10230, column: 4, scope: !9004)
!9008 = !DILocation(line: 10231, column: 41, scope: !8997)
!9009 = !DILocation(line: 10231, column: 46, scope: !8997)
!9010 = !DILocation(line: 10231, column: 54, scope: !8997)
!9011 = !DILocation(line: 10231, column: 9, scope: !8997)
!9012 = !DILocation(line: 10231, column: 2, scope: !8997)
!9013 = !DILocation(line: 10235, column: 46, scope: !8744)
!9014 = !DILocation(line: 10235, column: 51, scope: !8744)
!9015 = !DILocation(line: 10235, column: 59, scope: !8744)
!9016 = !DILocation(line: 10235, column: 14, scope: !8744)
!9017 = !DILocation(line: 10235, column: 7, scope: !8744)
!9018 = !DILocation(line: 10238, column: 37, scope: !8744)
!9019 = !DILocation(line: 10238, column: 42, scope: !8744)
!9020 = !DILocation(line: 10238, column: 50, scope: !8744)
!9021 = !DILocation(line: 10238, column: 14, scope: !8744)
!9022 = !DILocation(line: 10238, column: 7, scope: !8744)
!9023 = !DILocation(line: 10244, column: 37, scope: !8744)
!9024 = !DILocation(line: 10244, column: 42, scope: !8744)
!9025 = !DILocation(line: 10244, column: 50, scope: !8744)
!9026 = !DILocation(line: 10244, column: 14, scope: !8744)
!9027 = !DILocation(line: 10244, column: 7, scope: !8744)
!9028 = !DILocation(line: 10249, column: 35, scope: !8744)
!9029 = !DILocation(line: 10249, column: 40, scope: !8744)
!9030 = !DILocation(line: 10249, column: 48, scope: !8744)
!9031 = !DILocation(line: 10249, column: 65, scope: !8744)
!9032 = !DILocation(line: 10249, column: 73, scope: !8744)
!9033 = !DILocation(line: 10249, column: 14, scope: !8744)
!9034 = !DILocation(line: 10249, column: 7, scope: !8744)
!9035 = !DILocation(line: 10252, column: 7, scope: !8744)
!9036 = !DILocation(line: 10255, column: 3, scope: !8725)
!9037 = !DILocation(line: 10257, column: 1, scope: !8725)
!9038 = distinct !DISubprogram(name: "fold_builtin_2", scope: !3, file: !3, line: 10264, type: !9039, scopeLine: 10265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9039 = !DISubroutineType(types: !9040)
!9040 = !{!3344, !3429, !3344, !3344, !3344, !3421}
!9041 = !DILocalVariable(name: "loc", arg: 1, scope: !9038, file: !3, line: 10264, type: !3429)
!9042 = !DILocation(line: 10264, column: 28, scope: !9038)
!9043 = !DILocalVariable(name: "fndecl", arg: 2, scope: !9038, file: !3, line: 10264, type: !3344)
!9044 = !DILocation(line: 10264, column: 38, scope: !9038)
!9045 = !DILocalVariable(name: "arg0", arg: 3, scope: !9038, file: !3, line: 10264, type: !3344)
!9046 = !DILocation(line: 10264, column: 51, scope: !9038)
!9047 = !DILocalVariable(name: "arg1", arg: 4, scope: !9038, file: !3, line: 10264, type: !3344)
!9048 = !DILocation(line: 10264, column: 62, scope: !9038)
!9049 = !DILocalVariable(name: "ignore", arg: 5, scope: !9038, file: !3, line: 10264, type: !3421)
!9050 = !DILocation(line: 10264, column: 73, scope: !9038)
!9051 = !DILocalVariable(name: "type", scope: !9038, file: !3, line: 10266, type: !3344)
!9052 = !DILocation(line: 10266, column: 8, scope: !9038)
!9053 = !DILocation(line: 10266, column: 15, scope: !9038)
!9054 = !DILocalVariable(name: "fcode", scope: !9038, file: !3, line: 10267, type: !573)
!9055 = !DILocation(line: 10267, column: 26, scope: !9038)
!9056 = !DILocation(line: 10267, column: 34, scope: !9038)
!9057 = !DILocation(line: 10269, column: 11, scope: !9038)
!9058 = !DILocation(line: 10269, column: 3, scope: !9038)
!9059 = !DILocation(line: 10273, column: 7, scope: !9060)
!9060 = distinct !DILexicalBlock(scope: !9038, file: !3, line: 10270, column: 5)
!9061 = !DILocation(line: 10283, column: 7, scope: !9060)
!9062 = !DILocation(line: 10295, column: 7, scope: !9060)
!9063 = !DILocation(line: 10306, column: 7, scope: !9060)
!9064 = !DILocation(line: 10316, column: 7, scope: !9060)
!9065 = !DILocation(line: 10326, column: 7, scope: !9060)
!9066 = !DILocation(line: 10335, column: 34, scope: !9060)
!9067 = !DILocation(line: 10335, column: 39, scope: !9060)
!9068 = !DILocation(line: 10335, column: 47, scope: !9060)
!9069 = !DILocation(line: 10335, column: 53, scope: !9060)
!9070 = !DILocation(line: 10335, column: 59, scope: !9060)
!9071 = !DILocation(line: 10335, column: 14, scope: !9060)
!9072 = !DILocation(line: 10335, column: 7, scope: !9060)
!9073 = !DILocation(line: 10339, column: 7, scope: !9060)
!9074 = !DILocation(line: 10350, column: 42, scope: !9060)
!9075 = !DILocation(line: 10350, column: 47, scope: !9060)
!9076 = !DILocation(line: 10350, column: 53, scope: !9060)
!9077 = !DILocation(line: 10350, column: 59, scope: !9060)
!9078 = !DILocation(line: 10350, column: 14, scope: !9060)
!9079 = !DILocation(line: 10350, column: 7, scope: !9060)
!9080 = !DILocation(line: 10353, column: 42, scope: !9060)
!9081 = !DILocation(line: 10353, column: 47, scope: !9060)
!9082 = !DILocation(line: 10353, column: 53, scope: !9060)
!9083 = !DILocation(line: 10354, column: 7, scope: !9060)
!9084 = !DILocation(line: 10353, column: 14, scope: !9060)
!9085 = !DILocation(line: 10353, column: 7, scope: !9060)
!9086 = !DILocation(line: 10357, column: 34, scope: !9060)
!9087 = !DILocation(line: 10357, column: 39, scope: !9060)
!9088 = !DILocation(line: 10357, column: 45, scope: !9060)
!9089 = !DILocation(line: 10357, column: 51, scope: !9060)
!9090 = !DILocation(line: 10357, column: 14, scope: !9060)
!9091 = !DILocation(line: 10357, column: 7, scope: !9060)
!9092 = !DILocation(line: 10360, column: 33, scope: !9060)
!9093 = !DILocation(line: 10360, column: 38, scope: !9060)
!9094 = !DILocation(line: 10360, column: 44, scope: !9060)
!9095 = !DILocation(line: 10360, column: 50, scope: !9060)
!9096 = !DILocation(line: 10360, column: 14, scope: !9060)
!9097 = !DILocation(line: 10360, column: 7, scope: !9060)
!9098 = !DILocation(line: 10363, column: 34, scope: !9060)
!9099 = !DILocation(line: 10363, column: 39, scope: !9060)
!9100 = !DILocation(line: 10363, column: 45, scope: !9060)
!9101 = !DILocation(line: 10363, column: 51, scope: !9060)
!9102 = !DILocation(line: 10363, column: 14, scope: !9060)
!9103 = !DILocation(line: 10363, column: 7, scope: !9060)
!9104 = !DILocation(line: 10366, column: 34, scope: !9060)
!9105 = !DILocation(line: 10366, column: 39, scope: !9060)
!9106 = !DILocation(line: 10366, column: 45, scope: !9060)
!9107 = !DILocation(line: 10366, column: 51, scope: !9060)
!9108 = !DILocation(line: 10366, column: 14, scope: !9060)
!9109 = !DILocation(line: 10366, column: 7, scope: !9060)
!9110 = !DILocation(line: 10369, column: 34, scope: !9060)
!9111 = !DILocation(line: 10369, column: 39, scope: !9060)
!9112 = !DILocation(line: 10369, column: 45, scope: !9060)
!9113 = !DILocation(line: 10369, column: 51, scope: !9060)
!9114 = !DILocation(line: 10369, column: 14, scope: !9060)
!9115 = !DILocation(line: 10369, column: 7, scope: !9060)
!9116 = !DILocation(line: 10372, column: 35, scope: !9060)
!9117 = !DILocation(line: 10372, column: 40, scope: !9060)
!9118 = !DILocation(line: 10372, column: 46, scope: !9060)
!9119 = !DILocation(line: 10372, column: 52, scope: !9060)
!9120 = !DILocation(line: 10372, column: 14, scope: !9060)
!9121 = !DILocation(line: 10372, column: 7, scope: !9060)
!9122 = !DILocation(line: 10375, column: 35, scope: !9060)
!9123 = !DILocation(line: 10375, column: 40, scope: !9060)
!9124 = !DILocation(line: 10375, column: 46, scope: !9060)
!9125 = !DILocation(line: 10375, column: 14, scope: !9060)
!9126 = !DILocation(line: 10375, column: 7, scope: !9060)
!9127 = !DILocation(line: 10378, column: 35, scope: !9060)
!9128 = !DILocation(line: 10378, column: 40, scope: !9060)
!9129 = !DILocation(line: 10378, column: 46, scope: !9060)
!9130 = !DILocation(line: 10378, column: 14, scope: !9060)
!9131 = !DILocation(line: 10378, column: 7, scope: !9060)
!9132 = !DILocation(line: 10381, column: 36, scope: !9060)
!9133 = !DILocation(line: 10381, column: 41, scope: !9060)
!9134 = !DILocation(line: 10381, column: 47, scope: !9060)
!9135 = !DILocation(line: 10381, column: 14, scope: !9060)
!9136 = !DILocation(line: 10381, column: 7, scope: !9060)
!9137 = !DILocation(line: 10385, column: 35, scope: !9060)
!9138 = !DILocation(line: 10385, column: 40, scope: !9060)
!9139 = !DILocation(line: 10385, column: 46, scope: !9060)
!9140 = !DILocation(line: 10385, column: 52, scope: !9060)
!9141 = !DILocation(line: 10385, column: 14, scope: !9060)
!9142 = !DILocation(line: 10385, column: 7, scope: !9060)
!9143 = !DILocation(line: 10389, column: 36, scope: !9060)
!9144 = !DILocation(line: 10389, column: 41, scope: !9060)
!9145 = !DILocation(line: 10389, column: 47, scope: !9060)
!9146 = !DILocation(line: 10389, column: 53, scope: !9060)
!9147 = !DILocation(line: 10389, column: 14, scope: !9060)
!9148 = !DILocation(line: 10389, column: 7, scope: !9060)
!9149 = !DILocation(line: 10392, column: 35, scope: !9060)
!9150 = !DILocation(line: 10392, column: 40, scope: !9060)
!9151 = !DILocation(line: 10392, column: 48, scope: !9060)
!9152 = !DILocation(line: 10392, column: 54, scope: !9060)
!9153 = !DILocation(line: 10392, column: 14, scope: !9060)
!9154 = !DILocation(line: 10392, column: 7, scope: !9060)
!9155 = !DILocation(line: 10395, column: 11, scope: !9156)
!9156 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 10395, column: 11)
!9157 = !DILocation(line: 10395, column: 11, scope: !9060)
!9158 = !DILocalVariable(name: "fn", scope: !9159, file: !3, line: 10397, type: !3344)
!9159 = distinct !DILexicalBlock(scope: !9156, file: !3, line: 10396, column: 2)
!9160 = !DILocation(line: 10397, column: 9, scope: !9159)
!9161 = !DILocation(line: 10397, column: 14, scope: !9159)
!9162 = !DILocation(line: 10398, column: 9, scope: !9163)
!9163 = distinct !DILexicalBlock(scope: !9159, file: !3, line: 10398, column: 8)
!9164 = !DILocation(line: 10398, column: 8, scope: !9159)
!9165 = !DILocation(line: 10399, column: 6, scope: !9163)
!9166 = !DILocation(line: 10401, column: 32, scope: !9159)
!9167 = !DILocation(line: 10401, column: 37, scope: !9159)
!9168 = !DILocation(line: 10401, column: 44, scope: !9159)
!9169 = !DILocation(line: 10401, column: 50, scope: !9159)
!9170 = !DILocation(line: 10401, column: 11, scope: !9159)
!9171 = !DILocation(line: 10401, column: 4, scope: !9159)
!9172 = !DILocation(line: 10404, column: 30, scope: !9156)
!9173 = !DILocation(line: 10404, column: 35, scope: !9156)
!9174 = !DILocation(line: 10404, column: 43, scope: !9156)
!9175 = !DILocation(line: 10404, column: 49, scope: !9156)
!9176 = !DILocation(line: 10404, column: 9, scope: !9156)
!9177 = !DILocation(line: 10404, column: 2, scope: !9156)
!9178 = !DILocation(line: 10408, column: 35, scope: !9060)
!9179 = !DILocation(line: 10408, column: 40, scope: !9060)
!9180 = !DILocation(line: 10408, column: 46, scope: !9060)
!9181 = !DILocation(line: 10408, column: 14, scope: !9060)
!9182 = !DILocation(line: 10408, column: 7, scope: !9060)
!9183 = !DILocation(line: 10411, column: 36, scope: !9060)
!9184 = !DILocation(line: 10411, column: 41, scope: !9060)
!9185 = !DILocation(line: 10411, column: 47, scope: !9060)
!9186 = !DILocation(line: 10411, column: 53, scope: !9060)
!9187 = !DILocation(line: 10411, column: 14, scope: !9060)
!9188 = !DILocation(line: 10411, column: 7, scope: !9060)
!9189 = !DILocation(line: 10414, column: 35, scope: !9060)
!9190 = !DILocation(line: 10414, column: 40, scope: !9060)
!9191 = !DILocation(line: 10414, column: 46, scope: !9060)
!9192 = !DILocation(line: 10414, column: 14, scope: !9060)
!9193 = !DILocation(line: 10414, column: 7, scope: !9060)
!9194 = !DILocation(line: 10417, column: 32, scope: !9060)
!9195 = !DILocation(line: 10417, column: 37, scope: !9060)
!9196 = !DILocation(line: 10417, column: 45, scope: !9060)
!9197 = !DILocation(line: 10417, column: 51, scope: !9060)
!9198 = !DILocation(line: 10417, column: 57, scope: !9060)
!9199 = !DILocation(line: 10417, column: 14, scope: !9060)
!9200 = !DILocation(line: 10417, column: 7, scope: !9060)
!9201 = !DILocation(line: 10420, column: 33, scope: !9060)
!9202 = !DILocation(line: 10420, column: 38, scope: !9060)
!9203 = !DILocation(line: 10420, column: 46, scope: !9060)
!9204 = !DILocation(line: 10420, column: 52, scope: !9060)
!9205 = !DILocation(line: 10420, column: 58, scope: !9060)
!9206 = !DILocation(line: 10420, column: 14, scope: !9060)
!9207 = !DILocation(line: 10420, column: 7, scope: !9060)
!9208 = !DILocation(line: 10423, column: 37, scope: !9060)
!9209 = !DILocation(line: 10423, column: 42, scope: !9060)
!9210 = !DILocation(line: 10423, column: 50, scope: !9060)
!9211 = !DILocation(line: 10423, column: 56, scope: !9060)
!9212 = !DILocation(line: 10423, column: 62, scope: !9060)
!9213 = !DILocation(line: 10423, column: 14, scope: !9060)
!9214 = !DILocation(line: 10423, column: 7, scope: !9060)
!9215 = !DILocation(line: 10426, column: 38, scope: !9060)
!9216 = !DILocation(line: 10426, column: 43, scope: !9060)
!9217 = !DILocation(line: 10426, column: 49, scope: !9060)
!9218 = !DILocation(line: 10426, column: 55, scope: !9060)
!9219 = !DILocation(line: 10426, column: 14, scope: !9060)
!9220 = !DILocation(line: 10426, column: 7, scope: !9060)
!9221 = !DILocation(line: 10429, column: 38, scope: !9060)
!9222 = !DILocation(line: 10429, column: 43, scope: !9060)
!9223 = !DILocation(line: 10429, column: 49, scope: !9060)
!9224 = !DILocation(line: 10429, column: 55, scope: !9060)
!9225 = !DILocation(line: 10429, column: 14, scope: !9060)
!9226 = !DILocation(line: 10429, column: 7, scope: !9060)
!9227 = !DILocation(line: 10432, column: 42, scope: !9060)
!9228 = !DILocation(line: 10432, column: 47, scope: !9060)
!9229 = !DILocation(line: 10433, column: 7, scope: !9060)
!9230 = !DILocation(line: 10433, column: 13, scope: !9060)
!9231 = !DILocation(line: 10432, column: 14, scope: !9060)
!9232 = !DILocation(line: 10432, column: 7, scope: !9060)
!9233 = !DILocation(line: 10435, column: 42, scope: !9060)
!9234 = !DILocation(line: 10435, column: 47, scope: !9060)
!9235 = !DILocation(line: 10436, column: 7, scope: !9060)
!9236 = !DILocation(line: 10436, column: 13, scope: !9060)
!9237 = !DILocation(line: 10435, column: 14, scope: !9060)
!9238 = !DILocation(line: 10435, column: 7, scope: !9060)
!9239 = !DILocation(line: 10438, column: 42, scope: !9060)
!9240 = !DILocation(line: 10438, column: 47, scope: !9060)
!9241 = !DILocation(line: 10439, column: 7, scope: !9060)
!9242 = !DILocation(line: 10439, column: 13, scope: !9060)
!9243 = !DILocation(line: 10438, column: 14, scope: !9060)
!9244 = !DILocation(line: 10438, column: 7, scope: !9060)
!9245 = !DILocation(line: 10441, column: 42, scope: !9060)
!9246 = !DILocation(line: 10441, column: 47, scope: !9060)
!9247 = !DILocation(line: 10442, column: 7, scope: !9060)
!9248 = !DILocation(line: 10442, column: 13, scope: !9060)
!9249 = !DILocation(line: 10441, column: 14, scope: !9060)
!9250 = !DILocation(line: 10441, column: 7, scope: !9060)
!9251 = !DILocation(line: 10444, column: 42, scope: !9060)
!9252 = !DILocation(line: 10444, column: 47, scope: !9060)
!9253 = !DILocation(line: 10445, column: 7, scope: !9060)
!9254 = !DILocation(line: 10445, column: 13, scope: !9060)
!9255 = !DILocation(line: 10444, column: 14, scope: !9060)
!9256 = !DILocation(line: 10444, column: 7, scope: !9060)
!9257 = !DILocation(line: 10447, column: 42, scope: !9060)
!9258 = !DILocation(line: 10447, column: 47, scope: !9060)
!9259 = !DILocation(line: 10448, column: 7, scope: !9060)
!9260 = !DILocation(line: 10448, column: 13, scope: !9060)
!9261 = !DILocation(line: 10447, column: 14, scope: !9060)
!9262 = !DILocation(line: 10447, column: 7, scope: !9060)
!9263 = !DILocation(line: 10453, column: 7, scope: !9060)
!9264 = !DILocation(line: 10456, column: 36, scope: !9060)
!9265 = !DILocation(line: 10456, column: 41, scope: !9060)
!9266 = !DILocation(line: 10456, column: 47, scope: !9060)
!9267 = !DILocation(line: 10456, column: 64, scope: !9060)
!9268 = !DILocation(line: 10456, column: 14, scope: !9060)
!9269 = !DILocation(line: 10456, column: 7, scope: !9060)
!9270 = !DILocation(line: 10459, column: 40, scope: !9060)
!9271 = !DILocation(line: 10459, column: 46, scope: !9060)
!9272 = !DILocation(line: 10459, column: 14, scope: !9060)
!9273 = !DILocation(line: 10459, column: 7, scope: !9060)
!9274 = !DILocation(line: 10464, column: 35, scope: !9060)
!9275 = !DILocation(line: 10464, column: 40, scope: !9060)
!9276 = !DILocation(line: 10464, column: 48, scope: !9060)
!9277 = !DILocation(line: 10464, column: 54, scope: !9060)
!9278 = !DILocation(line: 10464, column: 60, scope: !9060)
!9279 = !DILocation(line: 10464, column: 68, scope: !9060)
!9280 = !DILocation(line: 10464, column: 14, scope: !9060)
!9281 = !DILocation(line: 10464, column: 7, scope: !9060)
!9282 = !DILocation(line: 10468, column: 26, scope: !9283)
!9283 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 10468, column: 11)
!9284 = !DILocation(line: 10468, column: 12, scope: !9283)
!9285 = !DILocation(line: 10469, column: 4, scope: !9283)
!9286 = !DILocation(line: 10469, column: 7, scope: !9283)
!9287 = !DILocation(line: 10468, column: 11, scope: !9060)
!9288 = !DILocation(line: 10470, column: 2, scope: !9283)
!9289 = !DILocation(line: 10472, column: 30, scope: !9283)
!9290 = !DILocation(line: 10472, column: 35, scope: !9283)
!9291 = !DILocation(line: 10473, column: 9, scope: !9283)
!9292 = !DILocation(line: 10473, column: 26, scope: !9283)
!9293 = !DILocation(line: 10473, column: 34, scope: !9283)
!9294 = !DILocation(line: 10472, column: 9, scope: !9283)
!9295 = !DILocation(line: 10472, column: 2, scope: !9283)
!9296 = !DILocation(line: 10479, column: 36, scope: !9060)
!9297 = !DILocation(line: 10479, column: 41, scope: !9060)
!9298 = !DILocation(line: 10479, column: 49, scope: !9060)
!9299 = !DILocation(line: 10479, column: 55, scope: !9060)
!9300 = !DILocation(line: 10480, column: 8, scope: !9060)
!9301 = !DILocation(line: 10480, column: 16, scope: !9060)
!9302 = !DILocation(line: 10479, column: 14, scope: !9060)
!9303 = !DILocation(line: 10479, column: 7, scope: !9060)
!9304 = !DILocation(line: 10483, column: 7, scope: !9060)
!9305 = !DILocation(line: 10485, column: 3, scope: !9038)
!9306 = !DILocation(line: 10486, column: 1, scope: !9038)
!9307 = distinct !DISubprogram(name: "fold_builtin_3", scope: !3, file: !3, line: 10493, type: !9308, scopeLine: 10495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9308 = !DISubroutineType(types: !9309)
!9309 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3421}
!9310 = !DILocalVariable(name: "loc", arg: 1, scope: !9307, file: !3, line: 10493, type: !3429)
!9311 = !DILocation(line: 10493, column: 28, scope: !9307)
!9312 = !DILocalVariable(name: "fndecl", arg: 2, scope: !9307, file: !3, line: 10493, type: !3344)
!9313 = !DILocation(line: 10493, column: 38, scope: !9307)
!9314 = !DILocalVariable(name: "arg0", arg: 3, scope: !9307, file: !3, line: 10494, type: !3344)
!9315 = !DILocation(line: 10494, column: 8, scope: !9307)
!9316 = !DILocalVariable(name: "arg1", arg: 4, scope: !9307, file: !3, line: 10494, type: !3344)
!9317 = !DILocation(line: 10494, column: 19, scope: !9307)
!9318 = !DILocalVariable(name: "arg2", arg: 5, scope: !9307, file: !3, line: 10494, type: !3344)
!9319 = !DILocation(line: 10494, column: 30, scope: !9307)
!9320 = !DILocalVariable(name: "ignore", arg: 6, scope: !9307, file: !3, line: 10494, type: !3421)
!9321 = !DILocation(line: 10494, column: 41, scope: !9307)
!9322 = !DILocalVariable(name: "type", scope: !9307, file: !3, line: 10496, type: !3344)
!9323 = !DILocation(line: 10496, column: 8, scope: !9307)
!9324 = !DILocation(line: 10496, column: 15, scope: !9307)
!9325 = !DILocalVariable(name: "fcode", scope: !9307, file: !3, line: 10497, type: !573)
!9326 = !DILocation(line: 10497, column: 26, scope: !9307)
!9327 = !DILocation(line: 10497, column: 34, scope: !9307)
!9328 = !DILocation(line: 10498, column: 11, scope: !9307)
!9329 = !DILocation(line: 10498, column: 3, scope: !9307)
!9330 = !DILocation(line: 10502, column: 35, scope: !9331)
!9331 = distinct !DILexicalBlock(scope: !9307, file: !3, line: 10499, column: 5)
!9332 = !DILocation(line: 10502, column: 40, scope: !9331)
!9333 = !DILocation(line: 10502, column: 46, scope: !9331)
!9334 = !DILocation(line: 10502, column: 52, scope: !9331)
!9335 = !DILocation(line: 10502, column: 14, scope: !9331)
!9336 = !DILocation(line: 10502, column: 7, scope: !9331)
!9337 = !DILocation(line: 10506, column: 7, scope: !9331)
!9338 = !DILocation(line: 10517, column: 7, scope: !9331)
!9339 = !DILocation(line: 10527, column: 35, scope: !9331)
!9340 = !DILocation(line: 10527, column: 40, scope: !9331)
!9341 = !DILocation(line: 10527, column: 46, scope: !9331)
!9342 = !DILocation(line: 10527, column: 52, scope: !9331)
!9343 = !DILocation(line: 10527, column: 58, scope: !9331)
!9344 = !DILocation(line: 10527, column: 64, scope: !9331)
!9345 = !DILocation(line: 10527, column: 14, scope: !9331)
!9346 = !DILocation(line: 10527, column: 7, scope: !9331)
!9347 = !DILocation(line: 10530, column: 38, scope: !9331)
!9348 = !DILocation(line: 10530, column: 43, scope: !9331)
!9349 = !DILocation(line: 10530, column: 49, scope: !9331)
!9350 = !DILocation(line: 10530, column: 55, scope: !9331)
!9351 = !DILocation(line: 10531, column: 10, scope: !9331)
!9352 = !DILocation(line: 10530, column: 14, scope: !9331)
!9353 = !DILocation(line: 10530, column: 7, scope: !9331)
!9354 = !DILocation(line: 10534, column: 38, scope: !9331)
!9355 = !DILocation(line: 10534, column: 43, scope: !9331)
!9356 = !DILocation(line: 10534, column: 49, scope: !9331)
!9357 = !DILocation(line: 10534, column: 55, scope: !9331)
!9358 = !DILocation(line: 10535, column: 10, scope: !9331)
!9359 = !DILocation(line: 10535, column: 16, scope: !9331)
!9360 = !DILocation(line: 10534, column: 14, scope: !9331)
!9361 = !DILocation(line: 10534, column: 7, scope: !9331)
!9362 = !DILocation(line: 10538, column: 38, scope: !9331)
!9363 = !DILocation(line: 10538, column: 43, scope: !9331)
!9364 = !DILocation(line: 10538, column: 49, scope: !9331)
!9365 = !DILocation(line: 10538, column: 55, scope: !9331)
!9366 = !DILocation(line: 10539, column: 10, scope: !9331)
!9367 = !DILocation(line: 10539, column: 16, scope: !9331)
!9368 = !DILocation(line: 10538, column: 14, scope: !9331)
!9369 = !DILocation(line: 10538, column: 7, scope: !9331)
!9370 = !DILocation(line: 10542, column: 38, scope: !9331)
!9371 = !DILocation(line: 10542, column: 43, scope: !9331)
!9372 = !DILocation(line: 10542, column: 49, scope: !9331)
!9373 = !DILocation(line: 10542, column: 55, scope: !9331)
!9374 = !DILocation(line: 10543, column: 10, scope: !9331)
!9375 = !DILocation(line: 10543, column: 16, scope: !9331)
!9376 = !DILocation(line: 10542, column: 14, scope: !9331)
!9377 = !DILocation(line: 10542, column: 7, scope: !9331)
!9378 = !DILocation(line: 10546, column: 36, scope: !9331)
!9379 = !DILocation(line: 10546, column: 41, scope: !9331)
!9380 = !DILocation(line: 10546, column: 47, scope: !9331)
!9381 = !DILocation(line: 10546, column: 53, scope: !9331)
!9382 = !DILocation(line: 10546, column: 14, scope: !9331)
!9383 = !DILocation(line: 10546, column: 7, scope: !9331)
!9384 = !DILocation(line: 10549, column: 36, scope: !9331)
!9385 = !DILocation(line: 10549, column: 41, scope: !9331)
!9386 = !DILocation(line: 10549, column: 49, scope: !9331)
!9387 = !DILocation(line: 10549, column: 55, scope: !9331)
!9388 = !DILocation(line: 10549, column: 61, scope: !9331)
!9389 = !DILocation(line: 10549, column: 14, scope: !9331)
!9390 = !DILocation(line: 10549, column: 7, scope: !9331)
!9391 = !DILocation(line: 10552, column: 36, scope: !9331)
!9392 = !DILocation(line: 10552, column: 41, scope: !9331)
!9393 = !DILocation(line: 10552, column: 47, scope: !9331)
!9394 = !DILocation(line: 10552, column: 53, scope: !9331)
!9395 = !DILocation(line: 10552, column: 14, scope: !9331)
!9396 = !DILocation(line: 10552, column: 7, scope: !9331)
!9397 = !DILocation(line: 10555, column: 35, scope: !9331)
!9398 = !DILocation(line: 10555, column: 40, scope: !9331)
!9399 = !DILocation(line: 10555, column: 46, scope: !9331)
!9400 = !DILocation(line: 10555, column: 52, scope: !9331)
!9401 = !DILocation(line: 10555, column: 58, scope: !9331)
!9402 = !DILocation(line: 10555, column: 14, scope: !9331)
!9403 = !DILocation(line: 10555, column: 7, scope: !9331)
!9404 = !DILocation(line: 10559, column: 35, scope: !9331)
!9405 = !DILocation(line: 10559, column: 40, scope: !9331)
!9406 = !DILocation(line: 10559, column: 46, scope: !9331)
!9407 = !DILocation(line: 10559, column: 52, scope: !9331)
!9408 = !DILocation(line: 10559, column: 14, scope: !9331)
!9409 = !DILocation(line: 10559, column: 7, scope: !9331)
!9410 = !DILocation(line: 10562, column: 36, scope: !9331)
!9411 = !DILocation(line: 10562, column: 41, scope: !9331)
!9412 = !DILocation(line: 10562, column: 47, scope: !9331)
!9413 = !DILocation(line: 10562, column: 53, scope: !9331)
!9414 = !DILocation(line: 10562, column: 59, scope: !9331)
!9415 = !DILocation(line: 10562, column: 14, scope: !9331)
!9416 = !DILocation(line: 10562, column: 7, scope: !9331)
!9417 = !DILocation(line: 10566, column: 39, scope: !9331)
!9418 = !DILocation(line: 10566, column: 44, scope: !9331)
!9419 = !DILocation(line: 10566, column: 52, scope: !9331)
!9420 = !DILocation(line: 10566, column: 58, scope: !9331)
!9421 = !DILocation(line: 10566, column: 64, scope: !9331)
!9422 = !DILocation(line: 10567, column: 11, scope: !9331)
!9423 = !DILocation(line: 10567, column: 19, scope: !9331)
!9424 = !DILocation(line: 10566, column: 14, scope: !9331)
!9425 = !DILocation(line: 10566, column: 7, scope: !9331)
!9426 = !DILocation(line: 10570, column: 39, scope: !9331)
!9427 = !DILocation(line: 10570, column: 44, scope: !9331)
!9428 = !DILocation(line: 10570, column: 52, scope: !9331)
!9429 = !DILocation(line: 10570, column: 58, scope: !9331)
!9430 = !DILocation(line: 10570, column: 64, scope: !9331)
!9431 = !DILocation(line: 10570, column: 14, scope: !9331)
!9432 = !DILocation(line: 10570, column: 7, scope: !9331)
!9433 = !DILocation(line: 10574, column: 26, scope: !9434)
!9434 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 10574, column: 11)
!9435 = !DILocation(line: 10574, column: 12, scope: !9434)
!9436 = !DILocation(line: 10575, column: 4, scope: !9434)
!9437 = !DILocation(line: 10575, column: 7, scope: !9434)
!9438 = !DILocation(line: 10574, column: 11, scope: !9331)
!9439 = !DILocation(line: 10576, column: 2, scope: !9434)
!9440 = !DILocation(line: 10578, column: 30, scope: !9434)
!9441 = !DILocation(line: 10578, column: 35, scope: !9434)
!9442 = !DILocation(line: 10578, column: 43, scope: !9434)
!9443 = !DILocation(line: 10578, column: 49, scope: !9434)
!9444 = !DILocation(line: 10578, column: 55, scope: !9434)
!9445 = !DILocation(line: 10578, column: 63, scope: !9434)
!9446 = !DILocation(line: 10578, column: 9, scope: !9434)
!9447 = !DILocation(line: 10578, column: 2, scope: !9434)
!9448 = !DILocation(line: 10584, column: 36, scope: !9331)
!9449 = !DILocation(line: 10584, column: 41, scope: !9331)
!9450 = !DILocation(line: 10584, column: 49, scope: !9331)
!9451 = !DILocation(line: 10584, column: 55, scope: !9331)
!9452 = !DILocation(line: 10584, column: 61, scope: !9331)
!9453 = !DILocation(line: 10585, column: 8, scope: !9331)
!9454 = !DILocation(line: 10585, column: 16, scope: !9331)
!9455 = !DILocation(line: 10584, column: 14, scope: !9331)
!9456 = !DILocation(line: 10584, column: 7, scope: !9331)
!9457 = !DILocation(line: 10589, column: 26, scope: !9458)
!9458 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 10589, column: 11)
!9459 = !DILocation(line: 10589, column: 12, scope: !9458)
!9460 = !DILocation(line: 10590, column: 4, scope: !9458)
!9461 = !DILocation(line: 10590, column: 7, scope: !9458)
!9462 = !DILocation(line: 10589, column: 11, scope: !9331)
!9463 = !DILocation(line: 10591, column: 2, scope: !9458)
!9464 = !DILocation(line: 10593, column: 31, scope: !9458)
!9465 = !DILocation(line: 10593, column: 36, scope: !9458)
!9466 = !DILocation(line: 10593, column: 44, scope: !9458)
!9467 = !DILocation(line: 10593, column: 50, scope: !9458)
!9468 = !DILocation(line: 10594, column: 10, scope: !9458)
!9469 = !DILocation(line: 10594, column: 18, scope: !9458)
!9470 = !DILocation(line: 10593, column: 9, scope: !9458)
!9471 = !DILocation(line: 10593, column: 2, scope: !9458)
!9472 = !DILocation(line: 10597, column: 7, scope: !9331)
!9473 = !DILocation(line: 10599, column: 3, scope: !9307)
!9474 = !DILocation(line: 10600, column: 1, scope: !9307)
!9475 = distinct !DISubprogram(name: "fold_builtin_4", scope: !3, file: !3, line: 10608, type: !9476, scopeLine: 10610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9476 = !DISubroutineType(types: !9477)
!9477 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3344, !3421}
!9478 = !DILocalVariable(name: "loc", arg: 1, scope: !9475, file: !3, line: 10608, type: !3429)
!9479 = !DILocation(line: 10608, column: 28, scope: !9475)
!9480 = !DILocalVariable(name: "fndecl", arg: 2, scope: !9475, file: !3, line: 10608, type: !3344)
!9481 = !DILocation(line: 10608, column: 38, scope: !9475)
!9482 = !DILocalVariable(name: "arg0", arg: 3, scope: !9475, file: !3, line: 10609, type: !3344)
!9483 = !DILocation(line: 10609, column: 8, scope: !9475)
!9484 = !DILocalVariable(name: "arg1", arg: 4, scope: !9475, file: !3, line: 10609, type: !3344)
!9485 = !DILocation(line: 10609, column: 19, scope: !9475)
!9486 = !DILocalVariable(name: "arg2", arg: 5, scope: !9475, file: !3, line: 10609, type: !3344)
!9487 = !DILocation(line: 10609, column: 30, scope: !9475)
!9488 = !DILocalVariable(name: "arg3", arg: 6, scope: !9475, file: !3, line: 10609, type: !3344)
!9489 = !DILocation(line: 10609, column: 41, scope: !9475)
!9490 = !DILocalVariable(name: "ignore", arg: 7, scope: !9475, file: !3, line: 10609, type: !3421)
!9491 = !DILocation(line: 10609, column: 52, scope: !9475)
!9492 = !DILocalVariable(name: "fcode", scope: !9475, file: !3, line: 10611, type: !573)
!9493 = !DILocation(line: 10611, column: 26, scope: !9475)
!9494 = !DILocation(line: 10611, column: 34, scope: !9475)
!9495 = !DILocation(line: 10613, column: 11, scope: !9475)
!9496 = !DILocation(line: 10613, column: 3, scope: !9475)
!9497 = !DILocation(line: 10619, column: 39, scope: !9498)
!9498 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 10614, column: 5)
!9499 = !DILocation(line: 10619, column: 44, scope: !9498)
!9500 = !DILocation(line: 10619, column: 52, scope: !9498)
!9501 = !DILocation(line: 10619, column: 58, scope: !9498)
!9502 = !DILocation(line: 10619, column: 64, scope: !9498)
!9503 = !DILocation(line: 10619, column: 70, scope: !9498)
!9504 = !DILocation(line: 10620, column: 22, scope: !9498)
!9505 = !DILocation(line: 10621, column: 11, scope: !9498)
!9506 = !DILocation(line: 10619, column: 14, scope: !9498)
!9507 = !DILocation(line: 10619, column: 7, scope: !9498)
!9508 = !DILocation(line: 10624, column: 40, scope: !9498)
!9509 = !DILocation(line: 10624, column: 45, scope: !9498)
!9510 = !DILocation(line: 10624, column: 51, scope: !9498)
!9511 = !DILocation(line: 10624, column: 57, scope: !9498)
!9512 = !DILocation(line: 10624, column: 63, scope: !9498)
!9513 = !DILocation(line: 10624, column: 14, scope: !9498)
!9514 = !DILocation(line: 10624, column: 7, scope: !9498)
!9515 = !DILocation(line: 10627, column: 40, scope: !9498)
!9516 = !DILocation(line: 10627, column: 45, scope: !9498)
!9517 = !DILocation(line: 10627, column: 53, scope: !9498)
!9518 = !DILocation(line: 10627, column: 59, scope: !9498)
!9519 = !DILocation(line: 10627, column: 65, scope: !9498)
!9520 = !DILocation(line: 10627, column: 71, scope: !9498)
!9521 = !DILocation(line: 10627, column: 14, scope: !9498)
!9522 = !DILocation(line: 10627, column: 7, scope: !9498)
!9523 = !DILocation(line: 10631, column: 26, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9498, file: !3, line: 10631, column: 11)
!9525 = !DILocation(line: 10631, column: 12, scope: !9524)
!9526 = !DILocation(line: 10632, column: 4, scope: !9524)
!9527 = !DILocation(line: 10632, column: 7, scope: !9524)
!9528 = !DILocation(line: 10631, column: 11, scope: !9498)
!9529 = !DILocation(line: 10633, column: 2, scope: !9524)
!9530 = !DILocation(line: 10635, column: 31, scope: !9524)
!9531 = !DILocation(line: 10635, column: 36, scope: !9524)
!9532 = !DILocation(line: 10635, column: 44, scope: !9524)
!9533 = !DILocation(line: 10635, column: 50, scope: !9524)
!9534 = !DILocation(line: 10635, column: 56, scope: !9524)
!9535 = !DILocation(line: 10636, column: 10, scope: !9524)
!9536 = !DILocation(line: 10636, column: 18, scope: !9524)
!9537 = !DILocation(line: 10635, column: 9, scope: !9524)
!9538 = !DILocation(line: 10635, column: 2, scope: !9524)
!9539 = !DILocation(line: 10640, column: 7, scope: !9498)
!9540 = !DILocation(line: 10642, column: 3, scope: !9475)
!9541 = !DILocation(line: 10643, column: 1, scope: !9475)
!9542 = distinct !DISubprogram(name: "fold_builtin_inf", scope: !3, file: !3, line: 6668, type: !9543, scopeLine: 6669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9543 = !DISubroutineType(types: !9544)
!9544 = !{!3344, !3429, !3344, !1445}
!9545 = !DILocalVariable(name: "loc", arg: 1, scope: !9542, file: !3, line: 6668, type: !3429)
!9546 = !DILocation(line: 6668, column: 30, scope: !9542)
!9547 = !DILocalVariable(name: "type", arg: 2, scope: !9542, file: !3, line: 6668, type: !3344)
!9548 = !DILocation(line: 6668, column: 40, scope: !9542)
!9549 = !DILocalVariable(name: "warn", arg: 3, scope: !9542, file: !3, line: 6668, type: !1445)
!9550 = !DILocation(line: 6668, column: 50, scope: !9542)
!9551 = !DILocalVariable(name: "real", scope: !9542, file: !3, line: 6670, type: !3366)
!9552 = !DILocation(line: 6670, column: 19, scope: !9542)
!9553 = !DILocation(line: 6679, column: 8, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9542, file: !3, line: 6679, column: 7)
!9555 = !DILocation(line: 6679, column: 47, scope: !9554)
!9556 = !DILocation(line: 6679, column: 50, scope: !9554)
!9557 = !DILocation(line: 6679, column: 7, scope: !9542)
!9558 = !DILocation(line: 6680, column: 14, scope: !9554)
!9559 = !DILocation(line: 6680, column: 5, scope: !9554)
!9560 = !DILocation(line: 6682, column: 3, scope: !9542)
!9561 = !DILocation(line: 6683, column: 22, scope: !9542)
!9562 = !DILocation(line: 6683, column: 10, scope: !9542)
!9563 = !DILocation(line: 6683, column: 3, scope: !9542)
!9564 = distinct !DISubprogram(name: "fold_builtin_classify_type", scope: !3, file: !3, line: 6639, type: !5636, scopeLine: 6640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9565 = !DILocalVariable(name: "arg", arg: 1, scope: !9564, file: !3, line: 6639, type: !3344)
!9566 = !DILocation(line: 6639, column: 34, scope: !9564)
!9567 = !DILocation(line: 6641, column: 7, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 6641, column: 7)
!9569 = !DILocation(line: 6641, column: 11, scope: !9568)
!9570 = !DILocation(line: 6641, column: 7, scope: !9564)
!9571 = !DILocation(line: 6642, column: 12, scope: !9568)
!9572 = !DILocation(line: 6642, column: 5, scope: !9568)
!9573 = !DILocation(line: 6644, column: 51, scope: !9564)
!9574 = !DILocation(line: 6644, column: 36, scope: !9564)
!9575 = !DILocation(line: 6644, column: 10, scope: !9564)
!9576 = !DILocation(line: 6644, column: 3, scope: !9564)
!9577 = !DILocation(line: 6645, column: 1, scope: !9564)
!9578 = distinct !DISubprogram(name: "type_to_class", scope: !3, file: !3, line: 1707, type: !9579, scopeLine: 1708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9579 = !DISubroutineType(types: !9580)
!9580 = !{!1542, !3344}
!9581 = !DILocalVariable(name: "type", arg: 1, scope: !9578, file: !3, line: 1707, type: !3344)
!9582 = !DILocation(line: 1707, column: 21, scope: !9578)
!9583 = !DILocation(line: 1709, column: 11, scope: !9578)
!9584 = !DILocation(line: 1709, column: 3, scope: !9578)
!9585 = !DILocation(line: 1711, column: 24, scope: !9586)
!9586 = distinct !DILexicalBlock(scope: !9578, file: !3, line: 1710, column: 5)
!9587 = !DILocation(line: 1712, column: 27, scope: !9586)
!9588 = !DILocation(line: 1713, column: 28, scope: !9586)
!9589 = !DILocation(line: 1714, column: 27, scope: !9586)
!9590 = !DILocation(line: 1715, column: 27, scope: !9586)
!9591 = !DILocation(line: 1716, column: 28, scope: !9586)
!9592 = !DILocation(line: 1717, column: 26, scope: !9586)
!9593 = !DILocation(line: 1718, column: 24, scope: !9586)
!9594 = !DILocation(line: 1719, column: 27, scope: !9586)
!9595 = !DILocation(line: 1720, column: 28, scope: !9586)
!9596 = !DILocation(line: 1721, column: 26, scope: !9586)
!9597 = !DILocation(line: 1722, column: 26, scope: !9586)
!9598 = !DILocation(line: 1724, column: 28, scope: !9586)
!9599 = !DILocation(line: 1725, column: 33, scope: !9586)
!9600 = !DILocation(line: 1725, column: 25, scope: !9586)
!9601 = !DILocation(line: 1727, column: 24, scope: !9586)
!9602 = !DILocation(line: 1728, column: 18, scope: !9586)
!9603 = !DILocation(line: 1730, column: 1, scope: !9578)
!9604 = distinct !DISubprogram(name: "fold_builtin_constant_p", scope: !3, file: !3, line: 6504, type: !5636, scopeLine: 6505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9605 = !DILocalVariable(name: "arg", arg: 1, scope: !9604, file: !3, line: 6504, type: !3344)
!9606 = !DILocation(line: 6504, column: 31, scope: !9604)
!9607 = !DILocation(line: 6509, column: 3, scope: !9604)
!9608 = !DILocation(line: 6512, column: 7, scope: !9609)
!9609 = distinct !DILexicalBlock(scope: !9604, file: !3, line: 6512, column: 7)
!9610 = !DILocation(line: 6513, column: 7, scope: !9609)
!9611 = !DILocation(line: 6513, column: 11, scope: !9609)
!9612 = !DILocation(line: 6513, column: 27, scope: !9609)
!9613 = !DILocation(line: 6514, column: 4, scope: !9609)
!9614 = !DILocation(line: 6514, column: 7, scope: !9609)
!9615 = !DILocation(line: 6512, column: 7, scope: !9604)
!9616 = !DILocation(line: 6515, column: 12, scope: !9609)
!9617 = !DILocation(line: 6515, column: 5, scope: !9609)
!9618 = !DILocation(line: 6516, column: 7, scope: !9619)
!9619 = distinct !DILexicalBlock(scope: !9604, file: !3, line: 6516, column: 7)
!9620 = !DILocation(line: 6516, column: 23, scope: !9619)
!9621 = !DILocation(line: 6516, column: 7, scope: !9604)
!9622 = !DILocalVariable(name: "op", scope: !9623, file: !3, line: 6518, type: !3344)
!9623 = distinct !DILexicalBlock(scope: !9619, file: !3, line: 6517, column: 5)
!9624 = !DILocation(line: 6518, column: 13, scope: !9623)
!9625 = !DILocation(line: 6518, column: 18, scope: !9623)
!9626 = !DILocation(line: 6519, column: 12, scope: !9627)
!9627 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 6519, column: 12)
!9628 = !DILocation(line: 6519, column: 27, scope: !9627)
!9629 = !DILocation(line: 6520, column: 5, scope: !9627)
!9630 = !DILocation(line: 6520, column: 9, scope: !9627)
!9631 = !DILocation(line: 6520, column: 24, scope: !9627)
!9632 = !DILocation(line: 6521, column: 9, scope: !9627)
!9633 = !DILocation(line: 6521, column: 27, scope: !9627)
!9634 = !DILocation(line: 6521, column: 12, scope: !9627)
!9635 = !DILocation(line: 6522, column: 9, scope: !9627)
!9636 = !DILocation(line: 6522, column: 12, scope: !9627)
!9637 = !DILocation(line: 6522, column: 45, scope: !9627)
!9638 = !DILocation(line: 6519, column: 12, scope: !9623)
!9639 = !DILocation(line: 6523, column: 10, scope: !9627)
!9640 = !DILocation(line: 6523, column: 3, scope: !9627)
!9641 = !DILocation(line: 6524, column: 5, scope: !9623)
!9642 = !DILocation(line: 6533, column: 7, scope: !9643)
!9643 = distinct !DILexicalBlock(scope: !9604, file: !3, line: 6533, column: 7)
!9644 = !DILocation(line: 6534, column: 7, scope: !9643)
!9645 = !DILocation(line: 6534, column: 10, scope: !9643)
!9646 = !DILocation(line: 6535, column: 7, scope: !9643)
!9647 = !DILocation(line: 6535, column: 10, scope: !9643)
!9648 = !DILocation(line: 6536, column: 7, scope: !9643)
!9649 = !DILocation(line: 6536, column: 10, scope: !9643)
!9650 = !DILocation(line: 6536, column: 15, scope: !9643)
!9651 = !DILocation(line: 6537, column: 7, scope: !9643)
!9652 = !DILocation(line: 6537, column: 10, scope: !9643)
!9653 = !DILocation(line: 6533, column: 7, scope: !9604)
!9654 = !DILocation(line: 6538, column: 12, scope: !9643)
!9655 = !DILocation(line: 6538, column: 5, scope: !9643)
!9656 = !DILocation(line: 6540, column: 3, scope: !9604)
!9657 = !DILocation(line: 6541, column: 1, scope: !9604)
!9658 = distinct !DISubprogram(name: "fold_builtin_strlen", scope: !3, file: !3, line: 6650, type: !6901, scopeLine: 6651, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9659 = !DILocalVariable(name: "loc", arg: 1, scope: !9658, file: !3, line: 6650, type: !3429)
!9660 = !DILocation(line: 6650, column: 33, scope: !9658)
!9661 = !DILocalVariable(name: "type", arg: 2, scope: !9658, file: !3, line: 6650, type: !3344)
!9662 = !DILocation(line: 6650, column: 43, scope: !9658)
!9663 = !DILocalVariable(name: "arg", arg: 3, scope: !9658, file: !3, line: 6650, type: !3344)
!9664 = !DILocation(line: 6650, column: 54, scope: !9658)
!9665 = !DILocation(line: 6652, column: 22, scope: !9666)
!9666 = distinct !DILexicalBlock(scope: !9658, file: !3, line: 6652, column: 7)
!9667 = !DILocation(line: 6652, column: 8, scope: !9666)
!9668 = !DILocation(line: 6652, column: 7, scope: !9658)
!9669 = !DILocation(line: 6653, column: 5, scope: !9666)
!9670 = !DILocalVariable(name: "len", scope: !9671, file: !3, line: 6656, type: !3344)
!9671 = distinct !DILexicalBlock(scope: !9666, file: !3, line: 6655, column: 5)
!9672 = !DILocation(line: 6656, column: 12, scope: !9671)
!9673 = !DILocation(line: 6656, column: 28, scope: !9671)
!9674 = !DILocation(line: 6656, column: 18, scope: !9671)
!9675 = !DILocation(line: 6658, column: 11, scope: !9676)
!9676 = distinct !DILexicalBlock(scope: !9671, file: !3, line: 6658, column: 11)
!9677 = !DILocation(line: 6658, column: 11, scope: !9671)
!9678 = !DILocation(line: 6659, column: 27, scope: !9676)
!9679 = !DILocation(line: 6659, column: 32, scope: !9676)
!9680 = !DILocation(line: 6659, column: 38, scope: !9676)
!9681 = !DILocation(line: 6659, column: 9, scope: !9676)
!9682 = !DILocation(line: 6659, column: 2, scope: !9676)
!9683 = !DILocation(line: 6661, column: 7, scope: !9671)
!9684 = !DILocation(line: 6663, column: 1, scope: !9658)
!9685 = distinct !DISubprogram(name: "fold_builtin_fabs", scope: !3, file: !3, line: 9030, type: !6901, scopeLine: 9031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9686 = !DILocalVariable(name: "loc", arg: 1, scope: !9685, file: !3, line: 9030, type: !3429)
!9687 = !DILocation(line: 9030, column: 31, scope: !9685)
!9688 = !DILocalVariable(name: "arg", arg: 2, scope: !9685, file: !3, line: 9030, type: !3344)
!9689 = !DILocation(line: 9030, column: 41, scope: !9685)
!9690 = !DILocalVariable(name: "type", arg: 3, scope: !9685, file: !3, line: 9030, type: !3344)
!9691 = !DILocation(line: 9030, column: 51, scope: !9685)
!9692 = !DILocation(line: 9032, column: 22, scope: !9693)
!9693 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 9032, column: 7)
!9694 = !DILocation(line: 9032, column: 8, scope: !9693)
!9695 = !DILocation(line: 9032, column: 7, scope: !9685)
!9696 = !DILocation(line: 9033, column: 5, scope: !9693)
!9697 = !DILocation(line: 9035, column: 27, scope: !9685)
!9698 = !DILocation(line: 9035, column: 32, scope: !9685)
!9699 = !DILocation(line: 9035, column: 38, scope: !9685)
!9700 = !DILocation(line: 9035, column: 9, scope: !9685)
!9701 = !DILocation(line: 9035, column: 7, scope: !9685)
!9702 = !DILocation(line: 9036, column: 7, scope: !9703)
!9703 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 9036, column: 7)
!9704 = !DILocation(line: 9036, column: 23, scope: !9703)
!9705 = !DILocation(line: 9036, column: 7, scope: !9685)
!9706 = !DILocation(line: 9037, column: 28, scope: !9703)
!9707 = !DILocation(line: 9037, column: 33, scope: !9703)
!9708 = !DILocation(line: 9037, column: 12, scope: !9703)
!9709 = !DILocation(line: 9037, column: 5, scope: !9703)
!9710 = !DILocation(line: 9038, column: 10, scope: !9685)
!9711 = !DILocation(line: 9038, column: 3, scope: !9685)
!9712 = !DILocation(line: 9039, column: 1, scope: !9685)
!9713 = distinct !DISubprogram(name: "fold_builtin_abs", scope: !3, file: !3, line: 9044, type: !6901, scopeLine: 9045, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9714 = !DILocalVariable(name: "loc", arg: 1, scope: !9713, file: !3, line: 9044, type: !3429)
!9715 = !DILocation(line: 9044, column: 30, scope: !9713)
!9716 = !DILocalVariable(name: "arg", arg: 2, scope: !9713, file: !3, line: 9044, type: !3344)
!9717 = !DILocation(line: 9044, column: 40, scope: !9713)
!9718 = !DILocalVariable(name: "type", arg: 3, scope: !9713, file: !3, line: 9044, type: !3344)
!9719 = !DILocation(line: 9044, column: 50, scope: !9713)
!9720 = !DILocation(line: 9046, column: 22, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9713, file: !3, line: 9046, column: 7)
!9722 = !DILocation(line: 9046, column: 8, scope: !9721)
!9723 = !DILocation(line: 9046, column: 7, scope: !9713)
!9724 = !DILocation(line: 9047, column: 5, scope: !9721)
!9725 = !DILocation(line: 9049, column: 27, scope: !9713)
!9726 = !DILocation(line: 9049, column: 32, scope: !9713)
!9727 = !DILocation(line: 9049, column: 38, scope: !9713)
!9728 = !DILocation(line: 9049, column: 9, scope: !9713)
!9729 = !DILocation(line: 9049, column: 7, scope: !9713)
!9730 = !DILocation(line: 9050, column: 7, scope: !9731)
!9731 = distinct !DILexicalBlock(scope: !9713, file: !3, line: 9050, column: 7)
!9732 = !DILocation(line: 9050, column: 23, scope: !9731)
!9733 = !DILocation(line: 9050, column: 7, scope: !9713)
!9734 = !DILocation(line: 9051, column: 28, scope: !9731)
!9735 = !DILocation(line: 9051, column: 33, scope: !9731)
!9736 = !DILocation(line: 9051, column: 12, scope: !9731)
!9737 = !DILocation(line: 9051, column: 5, scope: !9731)
!9738 = !DILocation(line: 9052, column: 10, scope: !9713)
!9739 = !DILocation(line: 9052, column: 3, scope: !9713)
!9740 = !DILocation(line: 9053, column: 1, scope: !9713)
!9741 = distinct !DISubprogram(name: "fold_builtin_ccos", scope: !3, file: !3, line: 7201, type: !9039, scopeLine: 7203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9742 = !DILocalVariable(name: "loc", arg: 1, scope: !9741, file: !3, line: 7201, type: !3429)
!9743 = !DILocation(line: 7201, column: 31, scope: !9741)
!9744 = !DILocalVariable(name: "arg", arg: 2, scope: !9741, file: !3, line: 7201, type: !3344)
!9745 = !DILocation(line: 7201, column: 41, scope: !9741)
!9746 = !DILocalVariable(name: "type", arg: 3, scope: !9741, file: !3, line: 7201, type: !3344)
!9747 = !DILocation(line: 7201, column: 51, scope: !9741)
!9748 = !DILocalVariable(name: "fndecl", arg: 4, scope: !9741, file: !3, line: 7201, type: !3344)
!9749 = !DILocation(line: 7201, column: 62, scope: !9741)
!9750 = !DILocalVariable(name: "hyper", arg: 5, scope: !9741, file: !3, line: 7202, type: !3421)
!9751 = !DILocation(line: 7202, column: 11, scope: !9741)
!9752 = !DILocation(line: 7205, column: 7, scope: !9741)
!9753 = distinct !DISubprogram(name: "fold_builtin_cabs", scope: !3, file: !3, line: 6891, type: !9754, scopeLine: 6892, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9754 = !DISubroutineType(types: !9755)
!9755 = !{!3344, !3429, !3344, !3344, !3344}
!9756 = !DILocalVariable(name: "loc", arg: 1, scope: !9753, file: !3, line: 6891, type: !3429)
!9757 = !DILocation(line: 6891, column: 31, scope: !9753)
!9758 = !DILocalVariable(name: "arg", arg: 2, scope: !9753, file: !3, line: 6891, type: !3344)
!9759 = !DILocation(line: 6891, column: 41, scope: !9753)
!9760 = !DILocalVariable(name: "type", arg: 3, scope: !9753, file: !3, line: 6891, type: !3344)
!9761 = !DILocation(line: 6891, column: 51, scope: !9753)
!9762 = !DILocalVariable(name: "fndecl", arg: 4, scope: !9753, file: !3, line: 6891, type: !3344)
!9763 = !DILocation(line: 6891, column: 62, scope: !9753)
!9764 = !DILocation(line: 6894, column: 7, scope: !9753)
!9765 = distinct !DISubprogram(name: "fold_builtin_carg", scope: !3, file: !3, line: 9107, type: !6901, scopeLine: 9108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9766 = !DILocalVariable(name: "loc", arg: 1, scope: !9765, file: !3, line: 9107, type: !3429)
!9767 = !DILocation(line: 9107, column: 31, scope: !9765)
!9768 = !DILocalVariable(name: "arg", arg: 2, scope: !9765, file: !3, line: 9107, type: !3344)
!9769 = !DILocation(line: 9107, column: 41, scope: !9765)
!9770 = !DILocalVariable(name: "type", arg: 3, scope: !9765, file: !3, line: 9107, type: !3344)
!9771 = !DILocation(line: 9107, column: 51, scope: !9765)
!9772 = !DILocation(line: 9109, column: 21, scope: !9773)
!9773 = distinct !DILexicalBlock(scope: !9765, file: !3, line: 9109, column: 7)
!9774 = !DILocation(line: 9109, column: 7, scope: !9773)
!9775 = !DILocation(line: 9110, column: 7, scope: !9773)
!9776 = !DILocation(line: 9110, column: 10, scope: !9773)
!9777 = !DILocation(line: 9110, column: 50, scope: !9773)
!9778 = !DILocation(line: 9109, column: 7, scope: !9765)
!9779 = !DILocalVariable(name: "atan2_fn", scope: !9780, file: !3, line: 9112, type: !3344)
!9780 = distinct !DILexicalBlock(scope: !9773, file: !3, line: 9111, column: 5)
!9781 = !DILocation(line: 9112, column: 12, scope: !9780)
!9782 = !DILocation(line: 9112, column: 40, scope: !9780)
!9783 = !DILocation(line: 9112, column: 23, scope: !9780)
!9784 = !DILocation(line: 9114, column: 11, scope: !9785)
!9785 = distinct !DILexicalBlock(scope: !9780, file: !3, line: 9114, column: 11)
!9786 = !DILocation(line: 9114, column: 11, scope: !9780)
!9787 = !DILocalVariable(name: "new_arg", scope: !9788, file: !3, line: 9116, type: !3344)
!9788 = distinct !DILexicalBlock(scope: !9785, file: !3, line: 9115, column: 9)
!9789 = !DILocation(line: 9116, column: 11, scope: !9788)
!9790 = !DILocation(line: 9116, column: 40, scope: !9788)
!9791 = !DILocation(line: 9116, column: 21, scope: !9788)
!9792 = !DILocalVariable(name: "r_arg", scope: !9788, file: !3, line: 9117, type: !3344)
!9793 = !DILocation(line: 9117, column: 9, scope: !9788)
!9794 = !DILocation(line: 9117, column: 17, scope: !9788)
!9795 = !DILocalVariable(name: "i_arg", scope: !9788, file: !3, line: 9118, type: !3344)
!9796 = !DILocation(line: 9118, column: 9, scope: !9788)
!9797 = !DILocation(line: 9118, column: 17, scope: !9788)
!9798 = !DILocation(line: 9119, column: 32, scope: !9788)
!9799 = !DILocation(line: 9119, column: 37, scope: !9788)
!9800 = !DILocation(line: 9119, column: 50, scope: !9788)
!9801 = !DILocation(line: 9119, column: 57, scope: !9788)
!9802 = !DILocation(line: 9119, column: 11, scope: !9788)
!9803 = !DILocation(line: 9119, column: 4, scope: !9788)
!9804 = !DILocation(line: 9121, column: 5, scope: !9780)
!9805 = !DILocation(line: 9123, column: 3, scope: !9765)
!9806 = !DILocation(line: 9124, column: 1, scope: !9765)
!9807 = distinct !DISubprogram(name: "fold_builtin_sqrt", scope: !3, file: !3, line: 6973, type: !6901, scopeLine: 6974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9808 = !DILocalVariable(name: "loc", arg: 1, scope: !9807, file: !3, line: 6973, type: !3429)
!9809 = !DILocation(line: 6973, column: 31, scope: !9807)
!9810 = !DILocalVariable(name: "arg", arg: 2, scope: !9807, file: !3, line: 6973, type: !3344)
!9811 = !DILocation(line: 6973, column: 41, scope: !9807)
!9812 = !DILocalVariable(name: "type", arg: 3, scope: !9807, file: !3, line: 6973, type: !3344)
!9813 = !DILocation(line: 6973, column: 51, scope: !9807)
!9814 = !DILocation(line: 6977, column: 7, scope: !9807)
!9815 = distinct !DISubprogram(name: "fold_builtin_cbrt", scope: !3, file: !3, line: 7051, type: !6901, scopeLine: 7052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9816 = !DILocalVariable(name: "loc", arg: 1, scope: !9815, file: !3, line: 7051, type: !3429)
!9817 = !DILocation(line: 7051, column: 31, scope: !9815)
!9818 = !DILocalVariable(name: "arg", arg: 2, scope: !9815, file: !3, line: 7051, type: !3344)
!9819 = !DILocation(line: 7051, column: 41, scope: !9815)
!9820 = !DILocalVariable(name: "type", arg: 3, scope: !9815, file: !3, line: 7051, type: !3344)
!9821 = !DILocation(line: 7051, column: 51, scope: !9815)
!9822 = !DILocation(line: 7054, column: 7, scope: !9815)
!9823 = distinct !DISubprogram(name: "fold_builtin_cos", scope: !3, file: !3, line: 7147, type: !9754, scopeLine: 7149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9824 = !DILocalVariable(name: "loc", arg: 1, scope: !9823, file: !3, line: 7147, type: !3429)
!9825 = !DILocation(line: 7147, column: 30, scope: !9823)
!9826 = !DILocalVariable(name: "arg", arg: 2, scope: !9823, file: !3, line: 7148, type: !3344)
!9827 = !DILocation(line: 7148, column: 10, scope: !9823)
!9828 = !DILocalVariable(name: "type", arg: 3, scope: !9823, file: !3, line: 7148, type: !3344)
!9829 = !DILocation(line: 7148, column: 20, scope: !9823)
!9830 = !DILocalVariable(name: "fndecl", arg: 4, scope: !9823, file: !3, line: 7148, type: !3344)
!9831 = !DILocation(line: 7148, column: 31, scope: !9823)
!9832 = !DILocation(line: 7151, column: 7, scope: !9823)
!9833 = distinct !DISubprogram(name: "fold_builtin_tan", scope: !3, file: !3, line: 7229, type: !9834, scopeLine: 7230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9834 = !DISubroutineType(types: !9835)
!9835 = !{!3344, !3344, !3344}
!9836 = !DILocalVariable(name: "arg", arg: 1, scope: !9833, file: !3, line: 7229, type: !3344)
!9837 = !DILocation(line: 7229, column: 24, scope: !9833)
!9838 = !DILocalVariable(name: "type", arg: 2, scope: !9833, file: !3, line: 7229, type: !3344)
!9839 = !DILocation(line: 7229, column: 34, scope: !9833)
!9840 = !DILocation(line: 7232, column: 7, scope: !9833)
!9841 = distinct !DISubprogram(name: "fold_builtin_cexp", scope: !3, file: !3, line: 7304, type: !6901, scopeLine: 7305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9842 = !DILocalVariable(name: "loc", arg: 1, scope: !9841, file: !3, line: 7304, type: !3429)
!9843 = !DILocation(line: 7304, column: 31, scope: !9841)
!9844 = !DILocalVariable(name: "arg0", arg: 2, scope: !9841, file: !3, line: 7304, type: !3344)
!9845 = !DILocation(line: 7304, column: 41, scope: !9841)
!9846 = !DILocalVariable(name: "type", arg: 3, scope: !9841, file: !3, line: 7304, type: !3344)
!9847 = !DILocation(line: 7304, column: 52, scope: !9841)
!9848 = !DILocation(line: 7307, column: 7, scope: !9841)
!9849 = distinct !DISubprogram(name: "fold_builtin_cosh", scope: !3, file: !3, line: 7174, type: !9754, scopeLine: 7175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9850 = !DILocalVariable(name: "loc", arg: 1, scope: !9849, file: !3, line: 7174, type: !3429)
!9851 = !DILocation(line: 7174, column: 31, scope: !9849)
!9852 = !DILocalVariable(name: "arg", arg: 2, scope: !9849, file: !3, line: 7174, type: !3344)
!9853 = !DILocation(line: 7174, column: 41, scope: !9849)
!9854 = !DILocalVariable(name: "type", arg: 3, scope: !9849, file: !3, line: 7174, type: !3344)
!9855 = !DILocation(line: 7174, column: 51, scope: !9849)
!9856 = !DILocalVariable(name: "fndecl", arg: 4, scope: !9849, file: !3, line: 7174, type: !3344)
!9857 = !DILocation(line: 7174, column: 62, scope: !9849)
!9858 = !DILocation(line: 7177, column: 7, scope: !9849)
!9859 = distinct !DISubprogram(name: "fold_builtin_nan", scope: !3, file: !3, line: 6689, type: !9860, scopeLine: 6690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9860 = !DISubroutineType(types: !9861)
!9861 = !{!3344, !3344, !3344, !1445}
!9862 = !DILocalVariable(name: "arg", arg: 1, scope: !9859, file: !3, line: 6689, type: !3344)
!9863 = !DILocation(line: 6689, column: 24, scope: !9859)
!9864 = !DILocalVariable(name: "type", arg: 2, scope: !9859, file: !3, line: 6689, type: !3344)
!9865 = !DILocation(line: 6689, column: 34, scope: !9859)
!9866 = !DILocalVariable(name: "quiet", arg: 3, scope: !9859, file: !3, line: 6689, type: !1445)
!9867 = !DILocation(line: 6689, column: 44, scope: !9859)
!9868 = !DILocalVariable(name: "real", scope: !9859, file: !3, line: 6691, type: !3366)
!9869 = !DILocation(line: 6691, column: 19, scope: !9859)
!9870 = !DILocalVariable(name: "str", scope: !9859, file: !3, line: 6692, type: !3504)
!9871 = !DILocation(line: 6692, column: 15, scope: !9859)
!9872 = !DILocation(line: 6694, column: 22, scope: !9873)
!9873 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 6694, column: 7)
!9874 = !DILocation(line: 6694, column: 8, scope: !9873)
!9875 = !DILocation(line: 6694, column: 7, scope: !9859)
!9876 = !DILocation(line: 6695, column: 5, scope: !9873)
!9877 = !DILocation(line: 6696, column: 19, scope: !9859)
!9878 = !DILocation(line: 6696, column: 9, scope: !9859)
!9879 = !DILocation(line: 6696, column: 7, scope: !9859)
!9880 = !DILocation(line: 6697, column: 8, scope: !9881)
!9881 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 6697, column: 7)
!9882 = !DILocation(line: 6697, column: 7, scope: !9859)
!9883 = !DILocation(line: 6698, column: 5, scope: !9881)
!9884 = !DILocation(line: 6700, column: 25, scope: !9885)
!9885 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 6700, column: 7)
!9886 = !DILocation(line: 6700, column: 30, scope: !9885)
!9887 = !DILocation(line: 6700, column: 37, scope: !9885)
!9888 = !DILocation(line: 6700, column: 8, scope: !9885)
!9889 = !DILocation(line: 6700, column: 7, scope: !9859)
!9890 = !DILocation(line: 6701, column: 5, scope: !9885)
!9891 = !DILocation(line: 6703, column: 22, scope: !9859)
!9892 = !DILocation(line: 6703, column: 10, scope: !9859)
!9893 = !DILocation(line: 6703, column: 3, scope: !9859)
!9894 = !DILocation(line: 6704, column: 1, scope: !9859)
!9895 = distinct !DISubprogram(name: "fold_builtin_floor", scope: !3, file: !3, line: 7399, type: !6901, scopeLine: 7400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9896 = !DILocalVariable(name: "loc", arg: 1, scope: !9895, file: !3, line: 7399, type: !3429)
!9897 = !DILocation(line: 7399, column: 32, scope: !9895)
!9898 = !DILocalVariable(name: "fndecl", arg: 2, scope: !9895, file: !3, line: 7399, type: !3344)
!9899 = !DILocation(line: 7399, column: 42, scope: !9895)
!9900 = !DILocalVariable(name: "arg", arg: 3, scope: !9895, file: !3, line: 7399, type: !3344)
!9901 = !DILocation(line: 7399, column: 55, scope: !9895)
!9902 = !DILocation(line: 7401, column: 22, scope: !9903)
!9903 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 7401, column: 7)
!9904 = !DILocation(line: 7401, column: 8, scope: !9903)
!9905 = !DILocation(line: 7401, column: 7, scope: !9895)
!9906 = !DILocation(line: 7402, column: 5, scope: !9903)
!9907 = !DILocation(line: 7405, column: 7, scope: !9908)
!9908 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 7405, column: 7)
!9909 = !DILocation(line: 7405, column: 23, scope: !9908)
!9910 = !DILocation(line: 7405, column: 35, scope: !9908)
!9911 = !DILocation(line: 7405, column: 39, scope: !9908)
!9912 = !DILocation(line: 7405, column: 7, scope: !9895)
!9913 = !DILocalVariable(name: "x", scope: !9914, file: !3, line: 7407, type: !3366)
!9914 = distinct !DILexicalBlock(scope: !9908, file: !3, line: 7406, column: 5)
!9915 = !DILocation(line: 7407, column: 23, scope: !9914)
!9916 = !DILocation(line: 7409, column: 11, scope: !9914)
!9917 = !DILocation(line: 7410, column: 13, scope: !9918)
!9918 = distinct !DILexicalBlock(scope: !9914, file: !3, line: 7410, column: 11)
!9919 = !DILocation(line: 7410, column: 34, scope: !9918)
!9920 = !DILocation(line: 7410, column: 39, scope: !9918)
!9921 = !DILocation(line: 7410, column: 11, scope: !9914)
!9922 = !DILocalVariable(name: "type", scope: !9923, file: !3, line: 7412, type: !3344)
!9923 = distinct !DILexicalBlock(scope: !9918, file: !3, line: 7411, column: 2)
!9924 = !DILocation(line: 7412, column: 9, scope: !9923)
!9925 = !DILocation(line: 7412, column: 16, scope: !9923)
!9926 = !DILocalVariable(name: "r", scope: !9923, file: !3, line: 7413, type: !3366)
!9927 = !DILocation(line: 7413, column: 20, scope: !9923)
!9928 = !DILocation(line: 7415, column: 20, scope: !9923)
!9929 = !DILocation(line: 7415, column: 4, scope: !9923)
!9930 = !DILocation(line: 7416, column: 23, scope: !9923)
!9931 = !DILocation(line: 7416, column: 11, scope: !9923)
!9932 = !DILocation(line: 7416, column: 4, scope: !9923)
!9933 = !DILocation(line: 7418, column: 5, scope: !9914)
!9934 = !DILocation(line: 7421, column: 32, scope: !9935)
!9935 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 7421, column: 7)
!9936 = !DILocation(line: 7421, column: 7, scope: !9935)
!9937 = !DILocation(line: 7421, column: 7, scope: !9895)
!9938 = !DILocalVariable(name: "truncfn", scope: !9939, file: !3, line: 7423, type: !3344)
!9939 = distinct !DILexicalBlock(scope: !9935, file: !3, line: 7422, column: 5)
!9940 = !DILocation(line: 7423, column: 12, scope: !9939)
!9941 = !DILocation(line: 7423, column: 39, scope: !9939)
!9942 = !DILocation(line: 7423, column: 22, scope: !9939)
!9943 = !DILocation(line: 7424, column: 11, scope: !9944)
!9944 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 7424, column: 11)
!9945 = !DILocation(line: 7424, column: 11, scope: !9939)
!9946 = !DILocation(line: 7425, column: 30, scope: !9944)
!9947 = !DILocation(line: 7425, column: 35, scope: !9944)
!9948 = !DILocation(line: 7425, column: 47, scope: !9944)
!9949 = !DILocation(line: 7425, column: 9, scope: !9944)
!9950 = !DILocation(line: 7425, column: 2, scope: !9944)
!9951 = !DILocation(line: 7426, column: 5, scope: !9939)
!9952 = !DILocation(line: 7428, column: 41, scope: !9895)
!9953 = !DILocation(line: 7428, column: 46, scope: !9895)
!9954 = !DILocation(line: 7428, column: 54, scope: !9895)
!9955 = !DILocation(line: 7428, column: 10, scope: !9895)
!9956 = !DILocation(line: 7428, column: 3, scope: !9895)
!9957 = !DILocation(line: 7429, column: 1, scope: !9895)
!9958 = distinct !DISubprogram(name: "fold_builtin_ceil", scope: !3, file: !3, line: 7435, type: !6901, scopeLine: 7436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!9959 = !DILocalVariable(name: "loc", arg: 1, scope: !9958, file: !3, line: 7435, type: !3429)
!9960 = !DILocation(line: 7435, column: 31, scope: !9958)
!9961 = !DILocalVariable(name: "fndecl", arg: 2, scope: !9958, file: !3, line: 7435, type: !3344)
!9962 = !DILocation(line: 7435, column: 41, scope: !9958)
!9963 = !DILocalVariable(name: "arg", arg: 3, scope: !9958, file: !3, line: 7435, type: !3344)
!9964 = !DILocation(line: 7435, column: 54, scope: !9958)
!9965 = !DILocation(line: 7437, column: 22, scope: !9966)
!9966 = distinct !DILexicalBlock(scope: !9958, file: !3, line: 7437, column: 7)
!9967 = !DILocation(line: 7437, column: 8, scope: !9966)
!9968 = !DILocation(line: 7437, column: 7, scope: !9958)
!9969 = !DILocation(line: 7438, column: 5, scope: !9966)
!9970 = !DILocation(line: 7441, column: 7, scope: !9971)
!9971 = distinct !DILexicalBlock(scope: !9958, file: !3, line: 7441, column: 7)
!9972 = !DILocation(line: 7441, column: 23, scope: !9971)
!9973 = !DILocation(line: 7441, column: 35, scope: !9971)
!9974 = !DILocation(line: 7441, column: 39, scope: !9971)
!9975 = !DILocation(line: 7441, column: 7, scope: !9958)
!9976 = !DILocalVariable(name: "x", scope: !9977, file: !3, line: 7443, type: !3366)
!9977 = distinct !DILexicalBlock(scope: !9971, file: !3, line: 7442, column: 5)
!9978 = !DILocation(line: 7443, column: 23, scope: !9977)
!9979 = !DILocation(line: 7445, column: 11, scope: !9977)
!9980 = !DILocation(line: 7446, column: 13, scope: !9981)
!9981 = distinct !DILexicalBlock(scope: !9977, file: !3, line: 7446, column: 11)
!9982 = !DILocation(line: 7446, column: 34, scope: !9981)
!9983 = !DILocation(line: 7446, column: 39, scope: !9981)
!9984 = !DILocation(line: 7446, column: 11, scope: !9977)
!9985 = !DILocalVariable(name: "type", scope: !9986, file: !3, line: 7448, type: !3344)
!9986 = distinct !DILexicalBlock(scope: !9981, file: !3, line: 7447, column: 2)
!9987 = !DILocation(line: 7448, column: 9, scope: !9986)
!9988 = !DILocation(line: 7448, column: 16, scope: !9986)
!9989 = !DILocalVariable(name: "r", scope: !9986, file: !3, line: 7449, type: !3366)
!9990 = !DILocation(line: 7449, column: 20, scope: !9986)
!9991 = !DILocation(line: 7451, column: 19, scope: !9986)
!9992 = !DILocation(line: 7451, column: 4, scope: !9986)
!9993 = !DILocation(line: 7452, column: 23, scope: !9986)
!9994 = !DILocation(line: 7452, column: 11, scope: !9986)
!9995 = !DILocation(line: 7452, column: 4, scope: !9986)
!9996 = !DILocation(line: 7454, column: 5, scope: !9977)
!9997 = !DILocation(line: 7456, column: 41, scope: !9958)
!9998 = !DILocation(line: 7456, column: 46, scope: !9958)
!9999 = !DILocation(line: 7456, column: 54, scope: !9958)
!10000 = !DILocation(line: 7456, column: 10, scope: !9958)
!10001 = !DILocation(line: 7456, column: 3, scope: !9958)
!10002 = !DILocation(line: 7457, column: 1, scope: !9958)
!10003 = distinct !DISubprogram(name: "fold_builtin_trunc", scope: !3, file: !3, line: 7376, type: !6901, scopeLine: 7377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10004 = !DILocalVariable(name: "loc", arg: 1, scope: !10003, file: !3, line: 7376, type: !3429)
!10005 = !DILocation(line: 7376, column: 32, scope: !10003)
!10006 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10003, file: !3, line: 7376, type: !3344)
!10007 = !DILocation(line: 7376, column: 42, scope: !10003)
!10008 = !DILocalVariable(name: "arg", arg: 3, scope: !10003, file: !3, line: 7376, type: !3344)
!10009 = !DILocation(line: 7376, column: 55, scope: !10003)
!10010 = !DILocation(line: 7378, column: 22, scope: !10011)
!10011 = distinct !DILexicalBlock(scope: !10003, file: !3, line: 7378, column: 7)
!10012 = !DILocation(line: 7378, column: 8, scope: !10011)
!10013 = !DILocation(line: 7378, column: 7, scope: !10003)
!10014 = !DILocation(line: 7379, column: 5, scope: !10011)
!10015 = !DILocation(line: 7382, column: 7, scope: !10016)
!10016 = distinct !DILexicalBlock(scope: !10003, file: !3, line: 7382, column: 7)
!10017 = !DILocation(line: 7382, column: 23, scope: !10016)
!10018 = !DILocation(line: 7382, column: 35, scope: !10016)
!10019 = !DILocation(line: 7382, column: 39, scope: !10016)
!10020 = !DILocation(line: 7382, column: 7, scope: !10003)
!10021 = !DILocalVariable(name: "r", scope: !10022, file: !3, line: 7384, type: !3366)
!10022 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 7383, column: 5)
!10023 = !DILocation(line: 7384, column: 23, scope: !10022)
!10024 = !DILocalVariable(name: "x", scope: !10022, file: !3, line: 7384, type: !3366)
!10025 = !DILocation(line: 7384, column: 26, scope: !10022)
!10026 = !DILocalVariable(name: "type", scope: !10022, file: !3, line: 7385, type: !3344)
!10027 = !DILocation(line: 7385, column: 12, scope: !10022)
!10028 = !DILocation(line: 7385, column: 19, scope: !10022)
!10029 = !DILocation(line: 7387, column: 11, scope: !10022)
!10030 = !DILocation(line: 7388, column: 23, scope: !10022)
!10031 = !DILocation(line: 7388, column: 7, scope: !10022)
!10032 = !DILocation(line: 7389, column: 26, scope: !10022)
!10033 = !DILocation(line: 7389, column: 14, scope: !10022)
!10034 = !DILocation(line: 7389, column: 7, scope: !10022)
!10035 = !DILocation(line: 7392, column: 41, scope: !10003)
!10036 = !DILocation(line: 7392, column: 46, scope: !10003)
!10037 = !DILocation(line: 7392, column: 54, scope: !10003)
!10038 = !DILocation(line: 7392, column: 10, scope: !10003)
!10039 = !DILocation(line: 7392, column: 3, scope: !10003)
!10040 = !DILocation(line: 7393, column: 1, scope: !10003)
!10041 = distinct !DISubprogram(name: "fold_builtin_round", scope: !3, file: !3, line: 7463, type: !6901, scopeLine: 7464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10042 = !DILocalVariable(name: "loc", arg: 1, scope: !10041, file: !3, line: 7463, type: !3429)
!10043 = !DILocation(line: 7463, column: 32, scope: !10041)
!10044 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10041, file: !3, line: 7463, type: !3344)
!10045 = !DILocation(line: 7463, column: 42, scope: !10041)
!10046 = !DILocalVariable(name: "arg", arg: 3, scope: !10041, file: !3, line: 7463, type: !3344)
!10047 = !DILocation(line: 7463, column: 55, scope: !10041)
!10048 = !DILocation(line: 7465, column: 22, scope: !10049)
!10049 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 7465, column: 7)
!10050 = !DILocation(line: 7465, column: 8, scope: !10049)
!10051 = !DILocation(line: 7465, column: 7, scope: !10041)
!10052 = !DILocation(line: 7466, column: 5, scope: !10049)
!10053 = !DILocation(line: 7469, column: 7, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 7469, column: 7)
!10055 = !DILocation(line: 7469, column: 23, scope: !10054)
!10056 = !DILocation(line: 7469, column: 35, scope: !10054)
!10057 = !DILocation(line: 7469, column: 39, scope: !10054)
!10058 = !DILocation(line: 7469, column: 7, scope: !10041)
!10059 = !DILocalVariable(name: "x", scope: !10060, file: !3, line: 7471, type: !3366)
!10060 = distinct !DILexicalBlock(scope: !10054, file: !3, line: 7470, column: 5)
!10061 = !DILocation(line: 7471, column: 23, scope: !10060)
!10062 = !DILocation(line: 7473, column: 11, scope: !10060)
!10063 = !DILocation(line: 7474, column: 13, scope: !10064)
!10064 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 7474, column: 11)
!10065 = !DILocation(line: 7474, column: 34, scope: !10064)
!10066 = !DILocation(line: 7474, column: 39, scope: !10064)
!10067 = !DILocation(line: 7474, column: 11, scope: !10060)
!10068 = !DILocalVariable(name: "type", scope: !10069, file: !3, line: 7476, type: !3344)
!10069 = distinct !DILexicalBlock(scope: !10064, file: !3, line: 7475, column: 2)
!10070 = !DILocation(line: 7476, column: 9, scope: !10069)
!10071 = !DILocation(line: 7476, column: 16, scope: !10069)
!10072 = !DILocalVariable(name: "r", scope: !10069, file: !3, line: 7477, type: !3366)
!10073 = !DILocation(line: 7477, column: 20, scope: !10069)
!10074 = !DILocation(line: 7479, column: 20, scope: !10069)
!10075 = !DILocation(line: 7479, column: 4, scope: !10069)
!10076 = !DILocation(line: 7480, column: 23, scope: !10069)
!10077 = !DILocation(line: 7480, column: 11, scope: !10069)
!10078 = !DILocation(line: 7480, column: 4, scope: !10069)
!10079 = !DILocation(line: 7482, column: 5, scope: !10060)
!10080 = !DILocation(line: 7484, column: 41, scope: !10041)
!10081 = !DILocation(line: 7484, column: 46, scope: !10041)
!10082 = !DILocation(line: 7484, column: 54, scope: !10041)
!10083 = !DILocation(line: 7484, column: 10, scope: !10041)
!10084 = !DILocation(line: 7484, column: 3, scope: !10041)
!10085 = !DILocation(line: 7485, column: 1, scope: !10041)
!10086 = distinct !DISubprogram(name: "fold_trunc_transparent_mathfn", scope: !3, file: !3, line: 6783, type: !6901, scopeLine: 6784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10087 = !DILocalVariable(name: "loc", arg: 1, scope: !10086, file: !3, line: 6783, type: !3429)
!10088 = !DILocation(line: 6783, column: 43, scope: !10086)
!10089 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10086, file: !3, line: 6783, type: !3344)
!10090 = !DILocation(line: 6783, column: 53, scope: !10086)
!10091 = !DILocalVariable(name: "arg", arg: 3, scope: !10086, file: !3, line: 6783, type: !3344)
!10092 = !DILocation(line: 6783, column: 66, scope: !10086)
!10093 = !DILocalVariable(name: "fcode", scope: !10086, file: !3, line: 6785, type: !573)
!10094 = !DILocation(line: 6785, column: 26, scope: !10086)
!10095 = !DILocation(line: 6785, column: 34, scope: !10086)
!10096 = !DILocation(line: 6787, column: 22, scope: !10097)
!10097 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 6787, column: 7)
!10098 = !DILocation(line: 6787, column: 8, scope: !10097)
!10099 = !DILocation(line: 6787, column: 7, scope: !10086)
!10100 = !DILocation(line: 6788, column: 5, scope: !10097)
!10101 = !DILocation(line: 6791, column: 7, scope: !10102)
!10102 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 6791, column: 7)
!10103 = !DILocation(line: 6791, column: 37, scope: !10102)
!10104 = !DILocation(line: 6791, column: 16, scope: !10102)
!10105 = !DILocation(line: 6791, column: 13, scope: !10102)
!10106 = !DILocation(line: 6791, column: 7, scope: !10086)
!10107 = !DILocation(line: 6792, column: 12, scope: !10102)
!10108 = !DILocation(line: 6792, column: 5, scope: !10102)
!10109 = !DILocation(line: 6796, column: 9, scope: !10110)
!10110 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 6796, column: 7)
!10111 = !DILocation(line: 6796, column: 25, scope: !10110)
!10112 = !DILocation(line: 6796, column: 51, scope: !10110)
!10113 = !DILocation(line: 6796, column: 28, scope: !10110)
!10114 = !DILocation(line: 6796, column: 7, scope: !10086)
!10115 = !DILocation(line: 6797, column: 12, scope: !10110)
!10116 = !DILocation(line: 6797, column: 5, scope: !10110)
!10117 = !DILocation(line: 6799, column: 7, scope: !10118)
!10118 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 6799, column: 7)
!10119 = !DILocation(line: 6799, column: 7, scope: !10086)
!10120 = !DILocalVariable(name: "arg0", scope: !10121, file: !3, line: 6801, type: !3344)
!10121 = distinct !DILexicalBlock(scope: !10118, file: !3, line: 6800, column: 5)
!10122 = !DILocation(line: 6801, column: 12, scope: !10121)
!10123 = !DILocation(line: 6801, column: 43, scope: !10121)
!10124 = !DILocation(line: 6801, column: 19, scope: !10121)
!10125 = !DILocalVariable(name: "ftype", scope: !10121, file: !3, line: 6802, type: !3344)
!10126 = !DILocation(line: 6802, column: 12, scope: !10121)
!10127 = !DILocation(line: 6802, column: 20, scope: !10121)
!10128 = !DILocalVariable(name: "newtype", scope: !10121, file: !3, line: 6803, type: !3344)
!10129 = !DILocation(line: 6803, column: 12, scope: !10121)
!10130 = !DILocation(line: 6803, column: 22, scope: !10121)
!10131 = !DILocalVariable(name: "decl", scope: !10121, file: !3, line: 6804, type: !3344)
!10132 = !DILocation(line: 6804, column: 12, scope: !10121)
!10133 = !DILocation(line: 6806, column: 11, scope: !10134)
!10134 = distinct !DILexicalBlock(scope: !10121, file: !3, line: 6806, column: 11)
!10135 = !DILocation(line: 6806, column: 38, scope: !10134)
!10136 = !DILocation(line: 6806, column: 36, scope: !10134)
!10137 = !DILocation(line: 6807, column: 4, scope: !10134)
!10138 = !DILocation(line: 6807, column: 32, scope: !10134)
!10139 = !DILocation(line: 6807, column: 41, scope: !10134)
!10140 = !DILocation(line: 6807, column: 15, scope: !10134)
!10141 = !DILocation(line: 6807, column: 13, scope: !10134)
!10142 = !DILocation(line: 6806, column: 11, scope: !10121)
!10143 = !DILocation(line: 6808, column: 27, scope: !10134)
!10144 = !DILocation(line: 6808, column: 32, scope: !10134)
!10145 = !DILocation(line: 6809, column: 27, scope: !10134)
!10146 = !DILocation(line: 6809, column: 32, scope: !10134)
!10147 = !DILocation(line: 6810, column: 27, scope: !10134)
!10148 = !DILocation(line: 6811, column: 13, scope: !10134)
!10149 = !DILocation(line: 6812, column: 13, scope: !10134)
!10150 = !DILocation(line: 6810, column: 9, scope: !10134)
!10151 = !DILocation(line: 6809, column: 6, scope: !10134)
!10152 = !DILocation(line: 6808, column: 9, scope: !10134)
!10153 = !DILocation(line: 6808, column: 2, scope: !10134)
!10154 = !DILocation(line: 6813, column: 5, scope: !10121)
!10155 = !DILocation(line: 6814, column: 3, scope: !10086)
!10156 = !DILocation(line: 6815, column: 1, scope: !10086)
!10157 = distinct !DISubprogram(name: "fold_builtin_int_roundingfn", scope: !3, file: !3, line: 7493, type: !6901, scopeLine: 7494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10158 = !DILocalVariable(name: "loc", arg: 1, scope: !10157, file: !3, line: 7493, type: !3429)
!10159 = !DILocation(line: 7493, column: 41, scope: !10157)
!10160 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10157, file: !3, line: 7493, type: !3344)
!10161 = !DILocation(line: 7493, column: 51, scope: !10157)
!10162 = !DILocalVariable(name: "arg", arg: 3, scope: !10157, file: !3, line: 7493, type: !3344)
!10163 = !DILocation(line: 7493, column: 64, scope: !10157)
!10164 = !DILocation(line: 7495, column: 22, scope: !10165)
!10165 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 7495, column: 7)
!10166 = !DILocation(line: 7495, column: 8, scope: !10165)
!10167 = !DILocation(line: 7495, column: 7, scope: !10157)
!10168 = !DILocation(line: 7496, column: 5, scope: !10165)
!10169 = !DILocation(line: 7499, column: 7, scope: !10170)
!10170 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 7499, column: 7)
!10171 = !DILocation(line: 7499, column: 23, scope: !10170)
!10172 = !DILocation(line: 7499, column: 35, scope: !10170)
!10173 = !DILocation(line: 7499, column: 39, scope: !10170)
!10174 = !DILocation(line: 7499, column: 7, scope: !10157)
!10175 = !DILocalVariable(name: "x", scope: !10176, file: !3, line: 7501, type: !10177)
!10176 = distinct !DILexicalBlock(scope: !10170, file: !3, line: 7500, column: 5)
!10177 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3366)
!10178 = !DILocation(line: 7501, column: 29, scope: !10176)
!10179 = !DILocation(line: 7501, column: 33, scope: !10176)
!10180 = !DILocation(line: 7503, column: 11, scope: !10181)
!10181 = distinct !DILexicalBlock(scope: !10176, file: !3, line: 7503, column: 11)
!10182 = !DILocation(line: 7503, column: 11, scope: !10176)
!10183 = !DILocalVariable(name: "itype", scope: !10184, file: !3, line: 7505, type: !3344)
!10184 = distinct !DILexicalBlock(scope: !10181, file: !3, line: 7504, column: 2)
!10185 = !DILocation(line: 7505, column: 9, scope: !10184)
!10186 = !DILocation(line: 7505, column: 17, scope: !10184)
!10187 = !DILocalVariable(name: "ftype", scope: !10184, file: !3, line: 7506, type: !3344)
!10188 = !DILocation(line: 7506, column: 9, scope: !10184)
!10189 = !DILocation(line: 7506, column: 17, scope: !10184)
!10190 = !DILocalVariable(name: "lo2", scope: !10184, file: !3, line: 7507, type: !3357)
!10191 = !DILocation(line: 7507, column: 27, scope: !10184)
!10192 = !DILocalVariable(name: "hi", scope: !10184, file: !3, line: 7508, type: !3359)
!10193 = !DILocation(line: 7508, column: 18, scope: !10184)
!10194 = !DILocalVariable(name: "lo", scope: !10184, file: !3, line: 7508, type: !3359)
!10195 = !DILocation(line: 7508, column: 22, scope: !10184)
!10196 = !DILocalVariable(name: "r", scope: !10184, file: !3, line: 7509, type: !3366)
!10197 = !DILocation(line: 7509, column: 20, scope: !10184)
!10198 = !DILocation(line: 7511, column: 12, scope: !10184)
!10199 = !DILocation(line: 7511, column: 4, scope: !10184)
!10200 = !DILocation(line: 7515, column: 24, scope: !10201)
!10201 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 7512, column: 6)
!10202 = !DILocation(line: 7515, column: 8, scope: !10201)
!10203 = !DILocation(line: 7516, column: 8, scope: !10201)
!10204 = !DILocation(line: 7520, column: 23, scope: !10201)
!10205 = !DILocation(line: 7520, column: 8, scope: !10201)
!10206 = !DILocation(line: 7521, column: 8, scope: !10201)
!10207 = !DILocation(line: 7525, column: 24, scope: !10201)
!10208 = !DILocation(line: 7525, column: 8, scope: !10201)
!10209 = !DILocation(line: 7526, column: 8, scope: !10201)
!10210 = !DILocation(line: 7529, column: 8, scope: !10201)
!10211 = !DILocation(line: 7530, column: 6, scope: !10201)
!10212 = !DILocation(line: 7532, column: 4, scope: !10184)
!10213 = !DILocation(line: 7533, column: 26, scope: !10214)
!10214 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 7533, column: 8)
!10215 = !DILocation(line: 7533, column: 30, scope: !10214)
!10216 = !DILocation(line: 7533, column: 45, scope: !10214)
!10217 = !DILocation(line: 7533, column: 9, scope: !10214)
!10218 = !DILocation(line: 7533, column: 8, scope: !10184)
!10219 = !DILocation(line: 7534, column: 33, scope: !10214)
!10220 = !DILocation(line: 7534, column: 40, scope: !10214)
!10221 = !DILocation(line: 7534, column: 45, scope: !10214)
!10222 = !DILocation(line: 7534, column: 13, scope: !10214)
!10223 = !DILocation(line: 7534, column: 6, scope: !10214)
!10224 = !DILocation(line: 7535, column: 2, scope: !10184)
!10225 = !DILocation(line: 7536, column: 5, scope: !10176)
!10226 = !DILocation(line: 7538, column: 11, scope: !10157)
!10227 = !DILocation(line: 7538, column: 3, scope: !10157)
!10228 = !DILocation(line: 7543, column: 36, scope: !10229)
!10229 = distinct !DILexicalBlock(scope: !10230, file: !3, line: 7543, column: 11)
!10230 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 7539, column: 5)
!10231 = !DILocation(line: 7543, column: 11, scope: !10229)
!10232 = !DILocation(line: 7543, column: 11, scope: !10230)
!10233 = !DILocation(line: 7544, column: 9, scope: !10229)
!10234 = !DILocation(line: 7544, column: 2, scope: !10229)
!10235 = !DILocation(line: 7546, column: 7, scope: !10230)
!10236 = !DILocation(line: 7548, column: 5, scope: !10230)
!10237 = !DILocation(line: 7550, column: 29, scope: !10157)
!10238 = !DILocation(line: 7550, column: 34, scope: !10157)
!10239 = !DILocation(line: 7550, column: 42, scope: !10157)
!10240 = !DILocation(line: 7550, column: 10, scope: !10157)
!10241 = !DILocation(line: 7550, column: 3, scope: !10157)
!10242 = !DILocation(line: 7551, column: 1, scope: !10157)
!10243 = distinct !DISubprogram(name: "fold_fixed_mathfn", scope: !3, file: !3, line: 6822, type: !6901, scopeLine: 6823, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10244 = !DILocalVariable(name: "loc", arg: 1, scope: !10243, file: !3, line: 6822, type: !3429)
!10245 = !DILocation(line: 6822, column: 31, scope: !10243)
!10246 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10243, file: !3, line: 6822, type: !3344)
!10247 = !DILocation(line: 6822, column: 41, scope: !10243)
!10248 = !DILocalVariable(name: "arg", arg: 3, scope: !10243, file: !3, line: 6822, type: !3344)
!10249 = !DILocation(line: 6822, column: 54, scope: !10243)
!10250 = !DILocalVariable(name: "fcode", scope: !10243, file: !3, line: 6824, type: !573)
!10251 = !DILocation(line: 6824, column: 26, scope: !10243)
!10252 = !DILocation(line: 6824, column: 34, scope: !10243)
!10253 = !DILocation(line: 6826, column: 22, scope: !10254)
!10254 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 6826, column: 7)
!10255 = !DILocation(line: 6826, column: 8, scope: !10254)
!10256 = !DILocation(line: 6826, column: 7, scope: !10243)
!10257 = !DILocation(line: 6827, column: 5, scope: !10254)
!10258 = !DILocation(line: 6831, column: 9, scope: !10259)
!10259 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 6831, column: 7)
!10260 = !DILocation(line: 6831, column: 25, scope: !10259)
!10261 = !DILocation(line: 6831, column: 51, scope: !10259)
!10262 = !DILocation(line: 6831, column: 28, scope: !10259)
!10263 = !DILocation(line: 6831, column: 7, scope: !10243)
!10264 = !DILocation(line: 6832, column: 12, scope: !10259)
!10265 = !DILocation(line: 6832, column: 5, scope: !10259)
!10266 = !DILocation(line: 6835, column: 7, scope: !10267)
!10267 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 6835, column: 7)
!10268 = !DILocation(line: 6835, column: 7, scope: !10243)
!10269 = !DILocalVariable(name: "ftype", scope: !10270, file: !3, line: 6837, type: !3344)
!10270 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 6836, column: 5)
!10271 = !DILocation(line: 6837, column: 12, scope: !10270)
!10272 = !DILocation(line: 6837, column: 20, scope: !10270)
!10273 = !DILocalVariable(name: "arg0", scope: !10270, file: !3, line: 6838, type: !3344)
!10274 = !DILocation(line: 6838, column: 12, scope: !10270)
!10275 = !DILocation(line: 6838, column: 43, scope: !10270)
!10276 = !DILocation(line: 6838, column: 19, scope: !10270)
!10277 = !DILocalVariable(name: "newtype", scope: !10270, file: !3, line: 6839, type: !3344)
!10278 = !DILocation(line: 6839, column: 12, scope: !10270)
!10279 = !DILocation(line: 6839, column: 22, scope: !10270)
!10280 = !DILocalVariable(name: "decl", scope: !10270, file: !3, line: 6840, type: !3344)
!10281 = !DILocation(line: 6840, column: 12, scope: !10270)
!10282 = !DILocation(line: 6842, column: 11, scope: !10283)
!10283 = distinct !DILexicalBlock(scope: !10270, file: !3, line: 6842, column: 11)
!10284 = !DILocation(line: 6842, column: 38, scope: !10283)
!10285 = !DILocation(line: 6842, column: 36, scope: !10283)
!10286 = !DILocation(line: 6843, column: 4, scope: !10283)
!10287 = !DILocation(line: 6843, column: 32, scope: !10283)
!10288 = !DILocation(line: 6843, column: 41, scope: !10283)
!10289 = !DILocation(line: 6843, column: 15, scope: !10283)
!10290 = !DILocation(line: 6843, column: 13, scope: !10283)
!10291 = !DILocation(line: 6842, column: 11, scope: !10270)
!10292 = !DILocation(line: 6844, column: 30, scope: !10283)
!10293 = !DILocation(line: 6844, column: 35, scope: !10283)
!10294 = !DILocation(line: 6845, column: 23, scope: !10283)
!10295 = !DILocation(line: 6845, column: 28, scope: !10283)
!10296 = !DILocation(line: 6845, column: 37, scope: !10283)
!10297 = !DILocation(line: 6845, column: 5, scope: !10283)
!10298 = !DILocation(line: 6844, column: 9, scope: !10283)
!10299 = !DILocation(line: 6844, column: 2, scope: !10283)
!10300 = !DILocation(line: 6846, column: 5, scope: !10270)
!10301 = !DILocation(line: 6850, column: 7, scope: !10302)
!10302 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 6850, column: 7)
!10303 = !DILocation(line: 6851, column: 10, scope: !10302)
!10304 = !DILocation(line: 6851, column: 7, scope: !10302)
!10305 = !DILocation(line: 6850, column: 7, scope: !10243)
!10306 = !DILocalVariable(name: "newfn", scope: !10307, file: !3, line: 6853, type: !3344)
!10307 = distinct !DILexicalBlock(scope: !10302, file: !3, line: 6852, column: 5)
!10308 = !DILocation(line: 6853, column: 12, scope: !10307)
!10309 = !DILocation(line: 6854, column: 15, scope: !10307)
!10310 = !DILocation(line: 6854, column: 7, scope: !10307)
!10311 = !DILocation(line: 6857, column: 29, scope: !10312)
!10312 = distinct !DILexicalBlock(scope: !10307, file: !3, line: 6855, column: 2)
!10313 = !DILocation(line: 6857, column: 12, scope: !10312)
!10314 = !DILocation(line: 6857, column: 10, scope: !10312)
!10315 = !DILocation(line: 6858, column: 4, scope: !10312)
!10316 = !DILocation(line: 6861, column: 29, scope: !10312)
!10317 = !DILocation(line: 6861, column: 12, scope: !10312)
!10318 = !DILocation(line: 6861, column: 10, scope: !10312)
!10319 = !DILocation(line: 6862, column: 4, scope: !10312)
!10320 = !DILocation(line: 6865, column: 29, scope: !10312)
!10321 = !DILocation(line: 6865, column: 12, scope: !10312)
!10322 = !DILocation(line: 6865, column: 10, scope: !10312)
!10323 = !DILocation(line: 6866, column: 4, scope: !10312)
!10324 = !DILocation(line: 6869, column: 29, scope: !10312)
!10325 = !DILocation(line: 6869, column: 12, scope: !10312)
!10326 = !DILocation(line: 6869, column: 10, scope: !10312)
!10327 = !DILocation(line: 6870, column: 4, scope: !10312)
!10328 = !DILocation(line: 6873, column: 4, scope: !10312)
!10329 = !DILocation(line: 6876, column: 11, scope: !10330)
!10330 = distinct !DILexicalBlock(scope: !10307, file: !3, line: 6876, column: 11)
!10331 = !DILocation(line: 6876, column: 11, scope: !10307)
!10332 = !DILocalVariable(name: "newcall", scope: !10333, file: !3, line: 6878, type: !3344)
!10333 = distinct !DILexicalBlock(scope: !10330, file: !3, line: 6877, column: 2)
!10334 = !DILocation(line: 6878, column: 9, scope: !10333)
!10335 = !DILocation(line: 6878, column: 40, scope: !10333)
!10336 = !DILocation(line: 6878, column: 45, scope: !10333)
!10337 = !DILocation(line: 6878, column: 55, scope: !10333)
!10338 = !DILocation(line: 6878, column: 19, scope: !10333)
!10339 = !DILocation(line: 6879, column: 29, scope: !10333)
!10340 = !DILocation(line: 6880, column: 8, scope: !10333)
!10341 = !DILocation(line: 6880, column: 40, scope: !10333)
!10342 = !DILocation(line: 6879, column: 11, scope: !10333)
!10343 = !DILocation(line: 6879, column: 4, scope: !10333)
!10344 = !DILocation(line: 6882, column: 5, scope: !10307)
!10345 = !DILocation(line: 6884, column: 3, scope: !10243)
!10346 = !DILocation(line: 6885, column: 1, scope: !10243)
!10347 = distinct !DISubprogram(name: "fold_builtin_bswap", scope: !3, file: !3, line: 7648, type: !9834, scopeLine: 7649, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10348 = !DILocalVariable(name: "fndecl", arg: 1, scope: !10347, file: !3, line: 7648, type: !3344)
!10349 = !DILocation(line: 7648, column: 26, scope: !10347)
!10350 = !DILocalVariable(name: "arg", arg: 2, scope: !10347, file: !3, line: 7648, type: !3344)
!10351 = !DILocation(line: 7648, column: 39, scope: !10347)
!10352 = !DILocation(line: 7650, column: 23, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10347, file: !3, line: 7650, column: 7)
!10354 = !DILocation(line: 7650, column: 9, scope: !10353)
!10355 = !DILocation(line: 7650, column: 7, scope: !10347)
!10356 = !DILocation(line: 7651, column: 5, scope: !10353)
!10357 = !DILocation(line: 7654, column: 7, scope: !10358)
!10358 = distinct !DILexicalBlock(scope: !10347, file: !3, line: 7654, column: 7)
!10359 = !DILocation(line: 7654, column: 23, scope: !10358)
!10360 = !DILocation(line: 7654, column: 38, scope: !10358)
!10361 = !DILocation(line: 7654, column: 42, scope: !10358)
!10362 = !DILocation(line: 7654, column: 7, scope: !10347)
!10363 = !DILocalVariable(name: "hi", scope: !10364, file: !3, line: 7656, type: !3359)
!10364 = distinct !DILexicalBlock(scope: !10358, file: !3, line: 7655, column: 5)
!10365 = !DILocation(line: 7656, column: 21, scope: !10364)
!10366 = !DILocalVariable(name: "width", scope: !10364, file: !3, line: 7656, type: !3359)
!10367 = !DILocation(line: 7656, column: 25, scope: !10364)
!10368 = !DILocalVariable(name: "r_hi", scope: !10364, file: !3, line: 7656, type: !3359)
!10369 = !DILocation(line: 7656, column: 32, scope: !10364)
!10370 = !DILocalVariable(name: "lo", scope: !10364, file: !3, line: 7657, type: !3357)
!10371 = !DILocation(line: 7657, column: 30, scope: !10364)
!10372 = !DILocalVariable(name: "r_lo", scope: !10364, file: !3, line: 7657, type: !3357)
!10373 = !DILocation(line: 7657, column: 34, scope: !10364)
!10374 = !DILocalVariable(name: "type", scope: !10364, file: !3, line: 7658, type: !3344)
!10375 = !DILocation(line: 7658, column: 12, scope: !10364)
!10376 = !DILocation(line: 7660, column: 14, scope: !10364)
!10377 = !DILocation(line: 7660, column: 12, scope: !10364)
!10378 = !DILocation(line: 7661, column: 15, scope: !10364)
!10379 = !DILocation(line: 7661, column: 13, scope: !10364)
!10380 = !DILocation(line: 7662, column: 12, scope: !10364)
!10381 = !DILocation(line: 7662, column: 10, scope: !10364)
!10382 = !DILocation(line: 7663, column: 12, scope: !10364)
!10383 = !DILocation(line: 7663, column: 10, scope: !10364)
!10384 = !DILocation(line: 7665, column: 15, scope: !10364)
!10385 = !DILocation(line: 7665, column: 7, scope: !10364)
!10386 = !DILocalVariable(name: "s", scope: !10387, file: !3, line: 7670, type: !1445)
!10387 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 7669, column: 6)
!10388 = distinct !DILexicalBlock(scope: !10364, file: !3, line: 7666, column: 2)
!10389 = !DILocation(line: 7670, column: 12, scope: !10387)
!10390 = !DILocation(line: 7672, column: 15, scope: !10391)
!10391 = distinct !DILexicalBlock(scope: !10387, file: !3, line: 7672, column: 8)
!10392 = !DILocation(line: 7672, column: 13, scope: !10391)
!10393 = !DILocation(line: 7672, column: 20, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10391, file: !3, line: 7672, column: 8)
!10395 = !DILocation(line: 7672, column: 24, scope: !10394)
!10396 = !DILocation(line: 7672, column: 22, scope: !10394)
!10397 = !DILocation(line: 7672, column: 8, scope: !10391)
!10398 = !DILocalVariable(name: "d", scope: !10399, file: !3, line: 7674, type: !1445)
!10399 = distinct !DILexicalBlock(scope: !10394, file: !3, line: 7673, column: 3)
!10400 = !DILocation(line: 7674, column: 9, scope: !10399)
!10401 = !DILocation(line: 7674, column: 13, scope: !10399)
!10402 = !DILocation(line: 7674, column: 21, scope: !10399)
!10403 = !DILocation(line: 7674, column: 19, scope: !10399)
!10404 = !DILocation(line: 7674, column: 23, scope: !10399)
!10405 = !DILocalVariable(name: "byte", scope: !10399, file: !3, line: 7675, type: !3357)
!10406 = !DILocation(line: 7675, column: 28, scope: !10399)
!10407 = !DILocation(line: 7677, column: 9, scope: !10408)
!10408 = distinct !DILexicalBlock(scope: !10399, file: !3, line: 7677, column: 9)
!10409 = !DILocation(line: 7677, column: 11, scope: !10408)
!10410 = !DILocation(line: 7677, column: 9, scope: !10399)
!10411 = !DILocation(line: 7678, column: 15, scope: !10408)
!10412 = !DILocation(line: 7678, column: 21, scope: !10408)
!10413 = !DILocation(line: 7678, column: 18, scope: !10408)
!10414 = !DILocation(line: 7678, column: 24, scope: !10408)
!10415 = !DILocation(line: 7678, column: 12, scope: !10408)
!10416 = !DILocation(line: 7678, column: 7, scope: !10408)
!10417 = !DILocation(line: 7680, column: 15, scope: !10408)
!10418 = !DILocation(line: 7680, column: 22, scope: !10408)
!10419 = !DILocation(line: 7680, column: 24, scope: !10408)
!10420 = !DILocation(line: 7680, column: 18, scope: !10408)
!10421 = !DILocation(line: 7680, column: 51, scope: !10408)
!10422 = !DILocation(line: 7680, column: 12, scope: !10408)
!10423 = !DILocation(line: 7682, column: 9, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !10399, file: !3, line: 7682, column: 9)
!10425 = !DILocation(line: 7682, column: 11, scope: !10424)
!10426 = !DILocation(line: 7682, column: 9, scope: !10399)
!10427 = !DILocation(line: 7683, column: 15, scope: !10424)
!10428 = !DILocation(line: 7683, column: 23, scope: !10424)
!10429 = !DILocation(line: 7683, column: 20, scope: !10424)
!10430 = !DILocation(line: 7683, column: 12, scope: !10424)
!10431 = !DILocation(line: 7683, column: 7, scope: !10424)
!10432 = !DILocation(line: 7685, column: 15, scope: !10424)
!10433 = !DILocation(line: 7685, column: 24, scope: !10424)
!10434 = !DILocation(line: 7685, column: 26, scope: !10424)
!10435 = !DILocation(line: 7685, column: 20, scope: !10424)
!10436 = !DILocation(line: 7685, column: 12, scope: !10424)
!10437 = !DILocation(line: 7686, column: 3, scope: !10399)
!10438 = !DILocation(line: 7672, column: 33, scope: !10394)
!10439 = !DILocation(line: 7672, column: 8, scope: !10394)
!10440 = distinct !{!10440, !10397, !10441}
!10441 = !DILocation(line: 7686, column: 3, scope: !10391)
!10442 = !DILocation(line: 7689, column: 6, scope: !10388)
!10443 = !DILocation(line: 7692, column: 4, scope: !10388)
!10444 = !DILocation(line: 7693, column: 2, scope: !10388)
!10445 = !DILocation(line: 7695, column: 11, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10364, file: !3, line: 7695, column: 11)
!10447 = !DILocation(line: 7695, column: 17, scope: !10446)
!10448 = !DILocation(line: 7695, column: 11, scope: !10364)
!10449 = !DILocation(line: 7696, column: 24, scope: !10446)
!10450 = !DILocation(line: 7696, column: 56, scope: !10446)
!10451 = !DILocation(line: 7696, column: 9, scope: !10446)
!10452 = !DILocation(line: 7696, column: 2, scope: !10446)
!10453 = !DILocation(line: 7698, column: 29, scope: !10446)
!10454 = !DILocation(line: 7698, column: 61, scope: !10446)
!10455 = !DILocation(line: 7698, column: 67, scope: !10446)
!10456 = !DILocation(line: 7698, column: 9, scope: !10446)
!10457 = !DILocation(line: 7698, column: 2, scope: !10446)
!10458 = !DILocation(line: 7701, column: 3, scope: !10347)
!10459 = !DILocation(line: 7702, column: 1, scope: !10347)
!10460 = distinct !DISubprogram(name: "fold_builtin_bitop", scope: !3, file: !3, line: 7559, type: !9834, scopeLine: 7560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10461 = !DILocalVariable(name: "fndecl", arg: 1, scope: !10460, file: !3, line: 7559, type: !3344)
!10462 = !DILocation(line: 7559, column: 26, scope: !10460)
!10463 = !DILocalVariable(name: "arg", arg: 2, scope: !10460, file: !3, line: 7559, type: !3344)
!10464 = !DILocation(line: 7559, column: 39, scope: !10460)
!10465 = !DILocation(line: 7561, column: 22, scope: !10466)
!10466 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 7561, column: 7)
!10467 = !DILocation(line: 7561, column: 8, scope: !10466)
!10468 = !DILocation(line: 7561, column: 7, scope: !10460)
!10469 = !DILocation(line: 7562, column: 5, scope: !10466)
!10470 = !DILocation(line: 7565, column: 7, scope: !10471)
!10471 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 7565, column: 7)
!10472 = !DILocation(line: 7565, column: 23, scope: !10471)
!10473 = !DILocation(line: 7565, column: 38, scope: !10471)
!10474 = !DILocation(line: 7565, column: 42, scope: !10471)
!10475 = !DILocation(line: 7565, column: 7, scope: !10460)
!10476 = !DILocalVariable(name: "hi", scope: !10477, file: !3, line: 7567, type: !3359)
!10477 = distinct !DILexicalBlock(scope: !10471, file: !3, line: 7566, column: 5)
!10478 = !DILocation(line: 7567, column: 21, scope: !10477)
!10479 = !DILocalVariable(name: "width", scope: !10477, file: !3, line: 7567, type: !3359)
!10480 = !DILocation(line: 7567, column: 25, scope: !10477)
!10481 = !DILocalVariable(name: "result", scope: !10477, file: !3, line: 7567, type: !3359)
!10482 = !DILocation(line: 7567, column: 32, scope: !10477)
!10483 = !DILocalVariable(name: "lo", scope: !10477, file: !3, line: 7568, type: !3357)
!10484 = !DILocation(line: 7568, column: 30, scope: !10477)
!10485 = !DILocalVariable(name: "type", scope: !10477, file: !3, line: 7569, type: !3344)
!10486 = !DILocation(line: 7569, column: 12, scope: !10477)
!10487 = !DILocation(line: 7571, column: 14, scope: !10477)
!10488 = !DILocation(line: 7571, column: 12, scope: !10477)
!10489 = !DILocation(line: 7572, column: 15, scope: !10477)
!10490 = !DILocation(line: 7572, column: 13, scope: !10477)
!10491 = !DILocation(line: 7573, column: 12, scope: !10477)
!10492 = !DILocation(line: 7573, column: 10, scope: !10477)
!10493 = !DILocation(line: 7576, column: 11, scope: !10494)
!10494 = distinct !DILexicalBlock(scope: !10477, file: !3, line: 7576, column: 11)
!10495 = !DILocation(line: 7576, column: 17, scope: !10494)
!10496 = !DILocation(line: 7576, column: 11, scope: !10477)
!10497 = !DILocation(line: 7578, column: 9, scope: !10498)
!10498 = distinct !DILexicalBlock(scope: !10494, file: !3, line: 7577, column: 2)
!10499 = !DILocation(line: 7578, column: 7, scope: !10498)
!10500 = !DILocation(line: 7579, column: 8, scope: !10501)
!10501 = distinct !DILexicalBlock(scope: !10498, file: !3, line: 7579, column: 8)
!10502 = !DILocation(line: 7579, column: 14, scope: !10501)
!10503 = !DILocation(line: 7579, column: 8, scope: !10498)
!10504 = !DILocation(line: 7580, column: 39, scope: !10501)
!10505 = !DILocation(line: 7580, column: 45, scope: !10501)
!10506 = !DILocation(line: 7580, column: 35, scope: !10501)
!10507 = !DILocation(line: 7580, column: 12, scope: !10501)
!10508 = !DILocation(line: 7580, column: 9, scope: !10501)
!10509 = !DILocation(line: 7580, column: 6, scope: !10501)
!10510 = !DILocation(line: 7581, column: 2, scope: !10498)
!10511 = !DILocation(line: 7584, column: 7, scope: !10512)
!10512 = distinct !DILexicalBlock(scope: !10494, file: !3, line: 7583, column: 2)
!10513 = !DILocation(line: 7585, column: 8, scope: !10514)
!10514 = distinct !DILexicalBlock(scope: !10512, file: !3, line: 7585, column: 8)
!10515 = !DILocation(line: 7585, column: 14, scope: !10514)
!10516 = !DILocation(line: 7585, column: 8, scope: !10512)
!10517 = !DILocation(line: 7586, column: 47, scope: !10514)
!10518 = !DILocation(line: 7586, column: 44, scope: !10514)
!10519 = !DILocation(line: 7586, column: 12, scope: !10514)
!10520 = !DILocation(line: 7586, column: 9, scope: !10514)
!10521 = !DILocation(line: 7586, column: 6, scope: !10514)
!10522 = !DILocation(line: 7589, column: 15, scope: !10477)
!10523 = !DILocation(line: 7589, column: 7, scope: !10477)
!10524 = !DILocation(line: 7592, column: 8, scope: !10525)
!10525 = distinct !DILexicalBlock(scope: !10526, file: !3, line: 7592, column: 8)
!10526 = distinct !DILexicalBlock(scope: !10477, file: !3, line: 7590, column: 2)
!10527 = !DILocation(line: 7592, column: 11, scope: !10525)
!10528 = !DILocation(line: 7592, column: 8, scope: !10526)
!10529 = !DILocation(line: 7593, column: 27, scope: !10525)
!10530 = !DILocation(line: 7593, column: 33, scope: !10525)
!10531 = !DILocation(line: 7593, column: 32, scope: !10525)
!10532 = !DILocation(line: 7593, column: 30, scope: !10525)
!10533 = !DILocation(line: 7593, column: 15, scope: !10525)
!10534 = !DILocation(line: 7593, column: 37, scope: !10525)
!10535 = !DILocation(line: 7593, column: 13, scope: !10525)
!10536 = !DILocation(line: 7593, column: 6, scope: !10525)
!10537 = !DILocation(line: 7594, column: 13, scope: !10538)
!10538 = distinct !DILexicalBlock(scope: !10525, file: !3, line: 7594, column: 13)
!10539 = !DILocation(line: 7594, column: 16, scope: !10538)
!10540 = !DILocation(line: 7594, column: 13, scope: !10525)
!10541 = !DILocation(line: 7595, column: 52, scope: !10538)
!10542 = !DILocation(line: 7595, column: 58, scope: !10538)
!10543 = !DILocation(line: 7595, column: 57, scope: !10538)
!10544 = !DILocation(line: 7595, column: 55, scope: !10538)
!10545 = !DILocation(line: 7595, column: 40, scope: !10538)
!10546 = !DILocation(line: 7595, column: 38, scope: !10538)
!10547 = !DILocation(line: 7595, column: 62, scope: !10538)
!10548 = !DILocation(line: 7595, column: 15, scope: !10538)
!10549 = !DILocation(line: 7595, column: 13, scope: !10538)
!10550 = !DILocation(line: 7595, column: 6, scope: !10538)
!10551 = !DILocation(line: 7597, column: 13, scope: !10538)
!10552 = !DILocation(line: 7598, column: 4, scope: !10526)
!10553 = !DILocation(line: 7601, column: 8, scope: !10554)
!10554 = distinct !DILexicalBlock(scope: !10526, file: !3, line: 7601, column: 8)
!10555 = !DILocation(line: 7601, column: 11, scope: !10554)
!10556 = !DILocation(line: 7601, column: 8, scope: !10526)
!10557 = !DILocation(line: 7602, column: 15, scope: !10554)
!10558 = !DILocation(line: 7602, column: 35, scope: !10554)
!10559 = !DILocation(line: 7602, column: 23, scope: !10554)
!10560 = !DILocation(line: 7602, column: 21, scope: !10554)
!10561 = !DILocation(line: 7602, column: 39, scope: !10554)
!10562 = !DILocation(line: 7602, column: 43, scope: !10554)
!10563 = !DILocation(line: 7602, column: 13, scope: !10554)
!10564 = !DILocation(line: 7602, column: 6, scope: !10554)
!10565 = !DILocation(line: 7603, column: 13, scope: !10566)
!10566 = distinct !DILexicalBlock(scope: !10554, file: !3, line: 7603, column: 13)
!10567 = !DILocation(line: 7603, column: 16, scope: !10566)
!10568 = !DILocation(line: 7603, column: 13, scope: !10554)
!10569 = !DILocation(line: 7604, column: 15, scope: !10566)
!10570 = !DILocation(line: 7604, column: 35, scope: !10566)
!10571 = !DILocation(line: 7604, column: 23, scope: !10566)
!10572 = !DILocation(line: 7604, column: 21, scope: !10566)
!10573 = !DILocation(line: 7604, column: 39, scope: !10566)
!10574 = !DILocation(line: 7604, column: 13, scope: !10566)
!10575 = !DILocation(line: 7604, column: 6, scope: !10566)
!10576 = !DILocation(line: 7606, column: 15, scope: !10577)
!10577 = distinct !DILexicalBlock(scope: !10566, file: !3, line: 7605, column: 13)
!10578 = !DILocation(line: 7606, column: 13, scope: !10577)
!10579 = !DILocation(line: 7607, column: 4, scope: !10526)
!10580 = !DILocation(line: 7610, column: 8, scope: !10581)
!10581 = distinct !DILexicalBlock(scope: !10526, file: !3, line: 7610, column: 8)
!10582 = !DILocation(line: 7610, column: 11, scope: !10581)
!10583 = !DILocation(line: 7610, column: 8, scope: !10526)
!10584 = !DILocation(line: 7611, column: 27, scope: !10581)
!10585 = !DILocation(line: 7611, column: 33, scope: !10581)
!10586 = !DILocation(line: 7611, column: 32, scope: !10581)
!10587 = !DILocation(line: 7611, column: 30, scope: !10581)
!10588 = !DILocation(line: 7611, column: 15, scope: !10581)
!10589 = !DILocation(line: 7611, column: 13, scope: !10581)
!10590 = !DILocation(line: 7611, column: 6, scope: !10581)
!10591 = !DILocation(line: 7612, column: 13, scope: !10592)
!10592 = distinct !DILexicalBlock(scope: !10581, file: !3, line: 7612, column: 13)
!10593 = !DILocation(line: 7612, column: 16, scope: !10592)
!10594 = !DILocation(line: 7612, column: 13, scope: !10581)
!10595 = !DILocation(line: 7613, column: 52, scope: !10592)
!10596 = !DILocation(line: 7613, column: 58, scope: !10592)
!10597 = !DILocation(line: 7613, column: 57, scope: !10592)
!10598 = !DILocation(line: 7613, column: 55, scope: !10592)
!10599 = !DILocation(line: 7613, column: 40, scope: !10592)
!10600 = !DILocation(line: 7613, column: 38, scope: !10592)
!10601 = !DILocation(line: 7613, column: 15, scope: !10592)
!10602 = !DILocation(line: 7613, column: 13, scope: !10592)
!10603 = !DILocation(line: 7613, column: 6, scope: !10592)
!10604 = !DILocation(line: 7615, column: 15, scope: !10605)
!10605 = distinct !DILexicalBlock(scope: !10592, file: !3, line: 7614, column: 13)
!10606 = !DILocation(line: 7615, column: 13, scope: !10605)
!10607 = !DILocation(line: 7616, column: 4, scope: !10526)
!10608 = !DILocation(line: 7619, column: 11, scope: !10526)
!10609 = !DILocation(line: 7620, column: 4, scope: !10526)
!10610 = !DILocation(line: 7620, column: 11, scope: !10526)
!10611 = !DILocation(line: 7621, column: 12, scope: !10526)
!10612 = !DILocation(line: 7621, column: 22, scope: !10526)
!10613 = !DILocation(line: 7621, column: 25, scope: !10526)
!10614 = !DILocation(line: 7621, column: 19, scope: !10526)
!10615 = distinct !{!10615, !10609, !10616}
!10616 = !DILocation(line: 7621, column: 27, scope: !10526)
!10617 = !DILocation(line: 7622, column: 4, scope: !10526)
!10618 = !DILocation(line: 7622, column: 11, scope: !10526)
!10619 = !DILocation(line: 7623, column: 12, scope: !10526)
!10620 = !DILocation(line: 7623, column: 22, scope: !10526)
!10621 = !DILocation(line: 7623, column: 25, scope: !10526)
!10622 = !DILocation(line: 7623, column: 19, scope: !10526)
!10623 = distinct !{!10623, !10617, !10624}
!10624 = !DILocation(line: 7623, column: 27, scope: !10526)
!10625 = !DILocation(line: 7624, column: 4, scope: !10526)
!10626 = !DILocation(line: 7627, column: 11, scope: !10526)
!10627 = !DILocation(line: 7628, column: 4, scope: !10526)
!10628 = !DILocation(line: 7628, column: 11, scope: !10526)
!10629 = !DILocation(line: 7629, column: 12, scope: !10526)
!10630 = !DILocation(line: 7629, column: 22, scope: !10526)
!10631 = !DILocation(line: 7629, column: 25, scope: !10526)
!10632 = !DILocation(line: 7629, column: 19, scope: !10526)
!10633 = distinct !{!10633, !10627, !10634}
!10634 = !DILocation(line: 7629, column: 27, scope: !10526)
!10635 = !DILocation(line: 7630, column: 4, scope: !10526)
!10636 = !DILocation(line: 7630, column: 11, scope: !10526)
!10637 = !DILocation(line: 7631, column: 12, scope: !10526)
!10638 = !DILocation(line: 7631, column: 22, scope: !10526)
!10639 = !DILocation(line: 7631, column: 25, scope: !10526)
!10640 = !DILocation(line: 7631, column: 19, scope: !10526)
!10641 = distinct !{!10641, !10635, !10642}
!10642 = !DILocation(line: 7631, column: 27, scope: !10526)
!10643 = !DILocation(line: 7632, column: 11, scope: !10526)
!10644 = !DILocation(line: 7633, column: 4, scope: !10526)
!10645 = !DILocation(line: 7636, column: 4, scope: !10526)
!10646 = !DILocation(line: 7637, column: 2, scope: !10526)
!10647 = !DILocation(line: 7639, column: 29, scope: !10477)
!10648 = !DILocation(line: 7639, column: 61, scope: !10477)
!10649 = !DILocation(line: 7639, column: 14, scope: !10477)
!10650 = !DILocation(line: 7639, column: 7, scope: !10477)
!10651 = !DILocation(line: 7642, column: 3, scope: !10460)
!10652 = !DILocation(line: 7643, column: 1, scope: !10460)
!10653 = distinct !DISubprogram(name: "fold_builtin_signbit", scope: !3, file: !3, line: 8892, type: !6901, scopeLine: 8893, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10654 = !DILocalVariable(name: "loc", arg: 1, scope: !10653, file: !3, line: 8892, type: !3429)
!10655 = !DILocation(line: 8892, column: 34, scope: !10653)
!10656 = !DILocalVariable(name: "arg", arg: 2, scope: !10653, file: !3, line: 8892, type: !3344)
!10657 = !DILocation(line: 8892, column: 44, scope: !10653)
!10658 = !DILocalVariable(name: "type", arg: 3, scope: !10653, file: !3, line: 8892, type: !3344)
!10659 = !DILocation(line: 8892, column: 54, scope: !10653)
!10660 = !DILocalVariable(name: "temp", scope: !10653, file: !3, line: 8894, type: !3344)
!10661 = !DILocation(line: 8894, column: 8, scope: !10653)
!10662 = !DILocation(line: 8896, column: 22, scope: !10663)
!10663 = distinct !DILexicalBlock(scope: !10653, file: !3, line: 8896, column: 7)
!10664 = !DILocation(line: 8896, column: 8, scope: !10663)
!10665 = !DILocation(line: 8896, column: 7, scope: !10653)
!10666 = !DILocation(line: 8897, column: 5, scope: !10663)
!10667 = !DILocation(line: 8900, column: 7, scope: !10668)
!10668 = distinct !DILexicalBlock(scope: !10653, file: !3, line: 8900, column: 7)
!10669 = !DILocation(line: 8900, column: 23, scope: !10668)
!10670 = !DILocation(line: 8901, column: 7, scope: !10668)
!10671 = !DILocation(line: 8901, column: 11, scope: !10668)
!10672 = !DILocation(line: 8900, column: 7, scope: !10653)
!10673 = !DILocalVariable(name: "c", scope: !10674, file: !3, line: 8903, type: !3366)
!10674 = distinct !DILexicalBlock(scope: !10668, file: !3, line: 8902, column: 5)
!10675 = !DILocation(line: 8903, column: 23, scope: !10674)
!10676 = !DILocation(line: 8905, column: 11, scope: !10674)
!10677 = !DILocation(line: 8906, column: 14, scope: !10674)
!10678 = !DILocation(line: 8906, column: 40, scope: !10674)
!10679 = !DILocation(line: 8906, column: 59, scope: !10674)
!10680 = !DILocation(line: 8906, column: 12, scope: !10674)
!10681 = !DILocation(line: 8907, column: 32, scope: !10674)
!10682 = !DILocation(line: 8907, column: 37, scope: !10674)
!10683 = !DILocation(line: 8907, column: 43, scope: !10674)
!10684 = !DILocation(line: 8907, column: 14, scope: !10674)
!10685 = !DILocation(line: 8907, column: 7, scope: !10674)
!10686 = !DILocation(line: 8911, column: 32, scope: !10687)
!10687 = distinct !DILexicalBlock(scope: !10653, file: !3, line: 8911, column: 7)
!10688 = !DILocation(line: 8911, column: 7, scope: !10687)
!10689 = !DILocation(line: 8911, column: 7, scope: !10653)
!10690 = !DILocation(line: 8912, column: 34, scope: !10687)
!10691 = !DILocation(line: 8912, column: 39, scope: !10687)
!10692 = !DILocation(line: 8912, column: 45, scope: !10687)
!10693 = !DILocation(line: 8912, column: 64, scope: !10687)
!10694 = !DILocation(line: 8912, column: 12, scope: !10687)
!10695 = !DILocation(line: 8912, column: 5, scope: !10687)
!10696 = !DILocation(line: 8915, column: 8, scope: !10697)
!10697 = distinct !DILexicalBlock(scope: !10653, file: !3, line: 8915, column: 7)
!10698 = !DILocation(line: 8915, column: 7, scope: !10653)
!10699 = !DILocation(line: 8916, column: 12, scope: !10697)
!10700 = !DILocation(line: 8916, column: 5, scope: !10697)
!10701 = !DILocation(line: 8919, column: 3, scope: !10653)
!10702 = !DILocation(line: 8920, column: 1, scope: !10653)
!10703 = distinct !DISubprogram(name: "fold_builtin_significand", scope: !3, file: !3, line: 9171, type: !6901, scopeLine: 9172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10704 = !DILocalVariable(name: "loc", arg: 1, scope: !10703, file: !3, line: 9171, type: !3429)
!10705 = !DILocation(line: 9171, column: 38, scope: !10703)
!10706 = !DILocalVariable(name: "arg", arg: 2, scope: !10703, file: !3, line: 9171, type: !3344)
!10707 = !DILocation(line: 9171, column: 48, scope: !10703)
!10708 = !DILocalVariable(name: "rettype", arg: 3, scope: !10703, file: !3, line: 9171, type: !3344)
!10709 = !DILocation(line: 9171, column: 58, scope: !10703)
!10710 = !DILocation(line: 9173, column: 23, scope: !10711)
!10711 = distinct !DILexicalBlock(scope: !10703, file: !3, line: 9173, column: 7)
!10712 = !DILocation(line: 9173, column: 9, scope: !10711)
!10713 = !DILocation(line: 9173, column: 7, scope: !10703)
!10714 = !DILocation(line: 9174, column: 5, scope: !10711)
!10715 = !DILocation(line: 9176, column: 3, scope: !10703)
!10716 = !DILocation(line: 9178, column: 7, scope: !10717)
!10717 = distinct !DILexicalBlock(scope: !10703, file: !3, line: 9178, column: 7)
!10718 = !DILocation(line: 9178, column: 23, scope: !10717)
!10719 = !DILocation(line: 9178, column: 35, scope: !10717)
!10720 = !DILocation(line: 9178, column: 40, scope: !10717)
!10721 = !DILocation(line: 9178, column: 7, scope: !10703)
!10722 = !DILocalVariable(name: "value", scope: !10723, file: !3, line: 9180, type: !10724)
!10723 = distinct !DILexicalBlock(scope: !10717, file: !3, line: 9179, column: 5)
!10724 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10725)
!10725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10177, size: 64)
!10726 = !DILocation(line: 9180, column: 36, scope: !10723)
!10727 = !DILocation(line: 9180, column: 44, scope: !10723)
!10728 = !DILocation(line: 9182, column: 15, scope: !10723)
!10729 = !DILocation(line: 9182, column: 22, scope: !10723)
!10730 = !DILocation(line: 9182, column: 7, scope: !10723)
!10731 = !DILocation(line: 9188, column: 27, scope: !10732)
!10732 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 9183, column: 7)
!10733 = !DILocation(line: 9188, column: 32, scope: !10732)
!10734 = !DILocation(line: 9188, column: 41, scope: !10732)
!10735 = !DILocation(line: 9188, column: 9, scope: !10732)
!10736 = !DILocation(line: 9188, column: 2, scope: !10732)
!10737 = !DILocation(line: 9191, column: 6, scope: !10738)
!10738 = distinct !DILexicalBlock(scope: !10732, file: !3, line: 9191, column: 6)
!10739 = !DILocation(line: 9191, column: 54, scope: !10738)
!10740 = !DILocation(line: 9191, column: 56, scope: !10738)
!10741 = !DILocation(line: 9191, column: 6, scope: !10732)
!10742 = !DILocalVariable(name: "result", scope: !10743, file: !3, line: 9193, type: !3366)
!10743 = distinct !DILexicalBlock(scope: !10738, file: !3, line: 9192, column: 4)
!10744 = !DILocation(line: 9193, column: 22, scope: !10743)
!10745 = !DILocation(line: 9193, column: 32, scope: !10743)
!10746 = !DILocation(line: 9193, column: 31, scope: !10743)
!10747 = !DILocation(line: 9197, column: 6, scope: !10743)
!10748 = !DILocation(line: 9198, column: 25, scope: !10743)
!10749 = !DILocation(line: 9198, column: 13, scope: !10743)
!10750 = !DILocation(line: 9198, column: 6, scope: !10743)
!10751 = !DILocation(line: 9200, column: 2, scope: !10732)
!10752 = !DILocation(line: 9202, column: 5, scope: !10723)
!10753 = !DILocation(line: 9204, column: 3, scope: !10703)
!10754 = !DILocation(line: 9205, column: 1, scope: !10703)
!10755 = distinct !DISubprogram(name: "fold_builtin_logb", scope: !3, file: !3, line: 9129, type: !6901, scopeLine: 9130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10756 = !DILocalVariable(name: "loc", arg: 1, scope: !10755, file: !3, line: 9129, type: !3429)
!10757 = !DILocation(line: 9129, column: 31, scope: !10755)
!10758 = !DILocalVariable(name: "arg", arg: 2, scope: !10755, file: !3, line: 9129, type: !3344)
!10759 = !DILocation(line: 9129, column: 41, scope: !10755)
!10760 = !DILocalVariable(name: "rettype", arg: 3, scope: !10755, file: !3, line: 9129, type: !3344)
!10761 = !DILocation(line: 9129, column: 51, scope: !10755)
!10762 = !DILocation(line: 9131, column: 23, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10755, file: !3, line: 9131, column: 7)
!10764 = !DILocation(line: 9131, column: 9, scope: !10763)
!10765 = !DILocation(line: 9131, column: 7, scope: !10755)
!10766 = !DILocation(line: 9132, column: 5, scope: !10763)
!10767 = !DILocation(line: 9134, column: 3, scope: !10755)
!10768 = !DILocation(line: 9136, column: 7, scope: !10769)
!10769 = distinct !DILexicalBlock(scope: !10755, file: !3, line: 9136, column: 7)
!10770 = !DILocation(line: 9136, column: 23, scope: !10769)
!10771 = !DILocation(line: 9136, column: 35, scope: !10769)
!10772 = !DILocation(line: 9136, column: 40, scope: !10769)
!10773 = !DILocation(line: 9136, column: 7, scope: !10755)
!10774 = !DILocalVariable(name: "value", scope: !10775, file: !3, line: 9138, type: !10724)
!10775 = distinct !DILexicalBlock(scope: !10769, file: !3, line: 9137, column: 5)
!10776 = !DILocation(line: 9138, column: 36, scope: !10775)
!10777 = !DILocation(line: 9138, column: 44, scope: !10775)
!10778 = !DILocation(line: 9140, column: 15, scope: !10775)
!10779 = !DILocation(line: 9140, column: 22, scope: !10775)
!10780 = !DILocation(line: 9140, column: 7, scope: !10775)
!10781 = !DILocation(line: 9145, column: 6, scope: !10782)
!10782 = distinct !DILexicalBlock(scope: !10783, file: !3, line: 9145, column: 6)
!10783 = distinct !DILexicalBlock(scope: !10775, file: !3, line: 9141, column: 7)
!10784 = !DILocation(line: 9145, column: 26, scope: !10782)
!10785 = !DILocation(line: 9145, column: 6, scope: !10783)
!10786 = !DILocation(line: 9146, column: 29, scope: !10782)
!10787 = !DILocation(line: 9146, column: 34, scope: !10782)
!10788 = !DILocation(line: 9146, column: 43, scope: !10782)
!10789 = !DILocation(line: 9146, column: 11, scope: !10782)
!10790 = !DILocation(line: 9146, column: 4, scope: !10782)
!10791 = !DILocation(line: 9145, column: 29, scope: !10782)
!10792 = !DILocation(line: 9151, column: 2, scope: !10783)
!10793 = !DILocation(line: 9157, column: 6, scope: !10794)
!10794 = distinct !DILexicalBlock(scope: !10783, file: !3, line: 9157, column: 6)
!10795 = !DILocation(line: 9157, column: 54, scope: !10794)
!10796 = !DILocation(line: 9157, column: 56, scope: !10794)
!10797 = !DILocation(line: 9157, column: 6, scope: !10783)
!10798 = !DILocation(line: 9158, column: 29, scope: !10794)
!10799 = !DILocation(line: 9158, column: 34, scope: !10794)
!10800 = !DILocation(line: 9160, column: 9, scope: !10794)
!10801 = !DILocation(line: 9160, column: 25, scope: !10794)
!10802 = !DILocation(line: 9159, column: 8, scope: !10794)
!10803 = !DILocation(line: 9158, column: 11, scope: !10794)
!10804 = !DILocation(line: 9158, column: 4, scope: !10794)
!10805 = !DILocation(line: 9161, column: 2, scope: !10783)
!10806 = !DILocation(line: 9163, column: 5, scope: !10775)
!10807 = !DILocation(line: 9165, column: 3, scope: !10755)
!10808 = !DILocation(line: 9166, column: 1, scope: !10755)
!10809 = distinct !DISubprogram(name: "fold_builtin_isascii", scope: !3, file: !3, line: 8973, type: !10810, scopeLine: 8974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10810 = !DISubroutineType(types: !10811)
!10811 = !{!3344, !3429, !3344}
!10812 = !DILocalVariable(name: "loc", arg: 1, scope: !10809, file: !3, line: 8973, type: !3429)
!10813 = !DILocation(line: 8973, column: 34, scope: !10809)
!10814 = !DILocalVariable(name: "arg", arg: 2, scope: !10809, file: !3, line: 8973, type: !3344)
!10815 = !DILocation(line: 8973, column: 44, scope: !10809)
!10816 = !DILocation(line: 8975, column: 22, scope: !10817)
!10817 = distinct !DILexicalBlock(scope: !10809, file: !3, line: 8975, column: 7)
!10818 = !DILocation(line: 8975, column: 8, scope: !10817)
!10819 = !DILocation(line: 8975, column: 7, scope: !10809)
!10820 = !DILocation(line: 8976, column: 5, scope: !10817)
!10821 = !DILocation(line: 8980, column: 13, scope: !10822)
!10822 = distinct !DILexicalBlock(scope: !10817, file: !3, line: 8978, column: 5)
!10823 = !DILocation(line: 8980, column: 11, scope: !10822)
!10824 = !DILocation(line: 8983, column: 14, scope: !10822)
!10825 = !DILocation(line: 8983, column: 7, scope: !10822)
!10826 = !DILocation(line: 8986, column: 1, scope: !10809)
!10827 = distinct !DISubprogram(name: "fold_builtin_toascii", scope: !3, file: !3, line: 8991, type: !10810, scopeLine: 8992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10828 = !DILocalVariable(name: "loc", arg: 1, scope: !10827, file: !3, line: 8991, type: !3429)
!10829 = !DILocation(line: 8991, column: 34, scope: !10827)
!10830 = !DILocalVariable(name: "arg", arg: 2, scope: !10827, file: !3, line: 8991, type: !3344)
!10831 = !DILocation(line: 8991, column: 44, scope: !10827)
!10832 = !DILocation(line: 8993, column: 22, scope: !10833)
!10833 = distinct !DILexicalBlock(scope: !10827, file: !3, line: 8993, column: 7)
!10834 = !DILocation(line: 8993, column: 8, scope: !10833)
!10835 = !DILocation(line: 8993, column: 7, scope: !10827)
!10836 = !DILocation(line: 8994, column: 5, scope: !10833)
!10837 = !DILocation(line: 8997, column: 10, scope: !10827)
!10838 = !DILocation(line: 8997, column: 3, scope: !10827)
!10839 = !DILocation(line: 8999, column: 1, scope: !10827)
!10840 = distinct !DISubprogram(name: "fold_builtin_isdigit", scope: !3, file: !3, line: 9004, type: !10810, scopeLine: 9005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10841 = !DILocalVariable(name: "loc", arg: 1, scope: !10840, file: !3, line: 9004, type: !3429)
!10842 = !DILocation(line: 9004, column: 34, scope: !10840)
!10843 = !DILocalVariable(name: "arg", arg: 2, scope: !10840, file: !3, line: 9004, type: !3344)
!10844 = !DILocation(line: 9004, column: 44, scope: !10840)
!10845 = !DILocation(line: 9006, column: 22, scope: !10846)
!10846 = distinct !DILexicalBlock(scope: !10840, file: !3, line: 9006, column: 7)
!10847 = !DILocation(line: 9006, column: 8, scope: !10846)
!10848 = !DILocation(line: 9006, column: 7, scope: !10840)
!10849 = !DILocation(line: 9007, column: 5, scope: !10846)
!10850 = !DILocalVariable(name: "target_digit0", scope: !10851, file: !3, line: 9013, type: !3357)
!10851 = distinct !DILexicalBlock(scope: !10846, file: !3, line: 9009, column: 5)
!10852 = !DILocation(line: 9013, column: 30, scope: !10851)
!10853 = !DILocation(line: 9014, column: 15, scope: !10851)
!10854 = !DILocation(line: 9014, column: 4, scope: !10851)
!10855 = !DILocation(line: 9016, column: 11, scope: !10856)
!10856 = distinct !DILexicalBlock(scope: !10851, file: !3, line: 9016, column: 11)
!10857 = !DILocation(line: 9016, column: 25, scope: !10856)
!10858 = !DILocation(line: 9016, column: 11, scope: !10851)
!10859 = !DILocation(line: 9017, column: 2, scope: !10856)
!10860 = !DILocation(line: 9019, column: 31, scope: !10851)
!10861 = !DILocation(line: 9019, column: 36, scope: !10851)
!10862 = !DILocation(line: 9019, column: 56, scope: !10851)
!10863 = !DILocation(line: 9019, column: 13, scope: !10851)
!10864 = !DILocation(line: 9019, column: 11, scope: !10851)
!10865 = !DILocation(line: 9020, column: 13, scope: !10851)
!10866 = !DILocation(line: 9020, column: 11, scope: !10851)
!10867 = !DILocation(line: 9022, column: 14, scope: !10851)
!10868 = !DILocation(line: 9022, column: 7, scope: !10851)
!10869 = !DILocation(line: 9025, column: 1, scope: !10840)
!10870 = distinct !DISubprogram(name: "fold_builtin_classify", scope: !3, file: !3, line: 9474, type: !10871, scopeLine: 9475, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!10871 = !DISubroutineType(types: !10872)
!10872 = !{!3344, !3429, !3344, !3344, !1445}
!10873 = !DILocalVariable(name: "loc", arg: 1, scope: !10870, file: !3, line: 9474, type: !3429)
!10874 = !DILocation(line: 9474, column: 35, scope: !10870)
!10875 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10870, file: !3, line: 9474, type: !3344)
!10876 = !DILocation(line: 9474, column: 45, scope: !10870)
!10877 = !DILocalVariable(name: "arg", arg: 3, scope: !10870, file: !3, line: 9474, type: !3344)
!10878 = !DILocation(line: 9474, column: 58, scope: !10870)
!10879 = !DILocalVariable(name: "builtin_index", arg: 4, scope: !10870, file: !3, line: 9474, type: !1445)
!10880 = !DILocation(line: 9474, column: 67, scope: !10870)
!10881 = !DILocalVariable(name: "type", scope: !10870, file: !3, line: 9476, type: !3344)
!10882 = !DILocation(line: 9476, column: 8, scope: !10870)
!10883 = !DILocation(line: 9476, column: 15, scope: !10870)
!10884 = !DILocalVariable(name: "r", scope: !10870, file: !3, line: 9477, type: !3366)
!10885 = !DILocation(line: 9477, column: 19, scope: !10870)
!10886 = !DILocation(line: 9479, column: 22, scope: !10887)
!10887 = distinct !DILexicalBlock(scope: !10870, file: !3, line: 9479, column: 7)
!10888 = !DILocation(line: 9479, column: 8, scope: !10887)
!10889 = !DILocation(line: 9479, column: 7, scope: !10870)
!10890 = !DILocation(line: 9480, column: 5, scope: !10887)
!10891 = !DILocation(line: 9482, column: 11, scope: !10870)
!10892 = !DILocation(line: 9482, column: 3, scope: !10870)
!10893 = !DILocation(line: 9485, column: 12, scope: !10894)
!10894 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9485, column: 11)
!10895 = distinct !DILexicalBlock(scope: !10870, file: !3, line: 9483, column: 5)
!10896 = !DILocation(line: 9485, column: 11, scope: !10895)
!10897 = !DILocation(line: 9486, column: 31, scope: !10894)
!10898 = !DILocation(line: 9486, column: 36, scope: !10894)
!10899 = !DILocation(line: 9486, column: 42, scope: !10894)
!10900 = !DILocation(line: 9486, column: 61, scope: !10894)
!10901 = !DILocation(line: 9486, column: 9, scope: !10894)
!10902 = !DILocation(line: 9486, column: 2, scope: !10894)
!10903 = !DILocation(line: 9488, column: 11, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9488, column: 11)
!10905 = !DILocation(line: 9488, column: 27, scope: !10904)
!10906 = !DILocation(line: 9488, column: 11, scope: !10895)
!10907 = !DILocation(line: 9490, column: 8, scope: !10908)
!10908 = distinct !DILexicalBlock(scope: !10904, file: !3, line: 9489, column: 2)
!10909 = !DILocation(line: 9491, column: 8, scope: !10910)
!10910 = distinct !DILexicalBlock(scope: !10908, file: !3, line: 9491, column: 8)
!10911 = !DILocation(line: 9491, column: 8, scope: !10908)
!10912 = !DILocation(line: 9492, column: 13, scope: !10910)
!10913 = !DILocation(line: 9493, column: 8, scope: !10910)
!10914 = !DILocation(line: 9493, column: 27, scope: !10910)
!10915 = !DILocation(line: 9492, column: 6, scope: !10910)
!10916 = !DILocation(line: 9495, column: 13, scope: !10910)
!10917 = !DILocation(line: 9495, column: 6, scope: !10910)
!10918 = !DILocation(line: 9498, column: 7, scope: !10895)
!10919 = !DILocalVariable(name: "signbit_fn", scope: !10920, file: !3, line: 9506, type: !3344)
!10920 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9501, column: 7)
!10921 = !DILocation(line: 9506, column: 7, scope: !10920)
!10922 = !DILocation(line: 9506, column: 39, scope: !10920)
!10923 = !DILocation(line: 9506, column: 20, scope: !10920)
!10924 = !DILocalVariable(name: "isinf_fn", scope: !10920, file: !3, line: 9507, type: !3344)
!10925 = !DILocation(line: 9507, column: 7, scope: !10920)
!10926 = !DILocation(line: 9507, column: 18, scope: !10920)
!10927 = !DILocalVariable(name: "tmp", scope: !10920, file: !3, line: 9508, type: !3344)
!10928 = !DILocation(line: 9508, column: 7, scope: !10920)
!10929 = !DILocation(line: 9510, column: 27, scope: !10920)
!10930 = !DILocation(line: 9510, column: 8, scope: !10920)
!10931 = !DILocation(line: 9510, column: 6, scope: !10920)
!10932 = !DILocation(line: 9512, column: 6, scope: !10933)
!10933 = distinct !DILexicalBlock(scope: !10920, file: !3, line: 9512, column: 6)
!10934 = !DILocation(line: 9512, column: 17, scope: !10933)
!10935 = !DILocation(line: 9512, column: 20, scope: !10933)
!10936 = !DILocation(line: 9512, column: 6, scope: !10920)
!10937 = !DILocalVariable(name: "signbit_call", scope: !10938, file: !3, line: 9514, type: !3344)
!10938 = distinct !DILexicalBlock(scope: !10933, file: !3, line: 9513, column: 4)
!10939 = !DILocation(line: 9514, column: 11, scope: !10938)
!10940 = !DILocation(line: 9514, column: 47, scope: !10938)
!10941 = !DILocation(line: 9514, column: 52, scope: !10938)
!10942 = !DILocation(line: 9514, column: 67, scope: !10938)
!10943 = !DILocation(line: 9514, column: 26, scope: !10938)
!10944 = !DILocalVariable(name: "isinf_call", scope: !10938, file: !3, line: 9515, type: !3344)
!10945 = !DILocation(line: 9515, column: 11, scope: !10938)
!10946 = !DILocation(line: 9515, column: 45, scope: !10938)
!10947 = !DILocation(line: 9515, column: 50, scope: !10938)
!10948 = !DILocation(line: 9515, column: 63, scope: !10938)
!10949 = !DILocation(line: 9515, column: 24, scope: !10938)
!10950 = !DILocation(line: 9517, column: 21, scope: !10938)
!10951 = !DILocation(line: 9517, column: 19, scope: !10938)
!10952 = !DILocation(line: 9519, column: 19, scope: !10938)
!10953 = !DILocation(line: 9519, column: 17, scope: !10938)
!10954 = !DILocation(line: 9522, column: 12, scope: !10938)
!10955 = !DILocation(line: 9522, column: 10, scope: !10938)
!10956 = !DILocation(line: 9524, column: 12, scope: !10938)
!10957 = !DILocation(line: 9524, column: 10, scope: !10938)
!10958 = !DILocation(line: 9527, column: 4, scope: !10938)
!10959 = !DILocation(line: 9529, column: 9, scope: !10920)
!10960 = !DILocation(line: 9529, column: 2, scope: !10920)
!10961 = !DILocation(line: 9533, column: 12, scope: !10962)
!10962 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9533, column: 11)
!10963 = !DILocation(line: 9534, column: 4, scope: !10962)
!10964 = !DILocation(line: 9534, column: 8, scope: !10962)
!10965 = !DILocation(line: 9533, column: 11, scope: !10895)
!10966 = !DILocation(line: 9535, column: 31, scope: !10962)
!10967 = !DILocation(line: 9535, column: 36, scope: !10962)
!10968 = !DILocation(line: 9535, column: 42, scope: !10962)
!10969 = !DILocation(line: 9535, column: 60, scope: !10962)
!10970 = !DILocation(line: 9535, column: 9, scope: !10962)
!10971 = !DILocation(line: 9535, column: 2, scope: !10962)
!10972 = !DILocation(line: 9537, column: 11, scope: !10973)
!10973 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9537, column: 11)
!10974 = !DILocation(line: 9537, column: 27, scope: !10973)
!10975 = !DILocation(line: 9537, column: 11, scope: !10895)
!10976 = !DILocation(line: 9539, column: 8, scope: !10977)
!10977 = distinct !DILexicalBlock(scope: !10973, file: !3, line: 9538, column: 2)
!10978 = !DILocation(line: 9540, column: 11, scope: !10977)
!10979 = !DILocation(line: 9540, column: 32, scope: !10977)
!10980 = !DILocation(line: 9540, column: 51, scope: !10977)
!10981 = !DILocation(line: 9540, column: 4, scope: !10977)
!10982 = !DILocation(line: 9543, column: 7, scope: !10895)
!10983 = !DILocation(line: 9546, column: 12, scope: !10984)
!10984 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9546, column: 11)
!10985 = !DILocation(line: 9546, column: 11, scope: !10895)
!10986 = !DILocation(line: 9547, column: 31, scope: !10984)
!10987 = !DILocation(line: 9547, column: 36, scope: !10984)
!10988 = !DILocation(line: 9547, column: 42, scope: !10984)
!10989 = !DILocation(line: 9547, column: 61, scope: !10984)
!10990 = !DILocation(line: 9547, column: 9, scope: !10984)
!10991 = !DILocation(line: 9547, column: 2, scope: !10984)
!10992 = !DILocation(line: 9549, column: 11, scope: !10993)
!10993 = distinct !DILexicalBlock(scope: !10895, file: !3, line: 9549, column: 11)
!10994 = !DILocation(line: 9549, column: 27, scope: !10993)
!10995 = !DILocation(line: 9549, column: 11, scope: !10895)
!10996 = !DILocation(line: 9551, column: 8, scope: !10997)
!10997 = distinct !DILexicalBlock(scope: !10993, file: !3, line: 9550, column: 2)
!10998 = !DILocation(line: 9552, column: 11, scope: !10997)
!10999 = !DILocation(line: 9552, column: 29, scope: !10997)
!11000 = !DILocation(line: 9552, column: 48, scope: !10997)
!11001 = !DILocation(line: 9552, column: 4, scope: !10997)
!11002 = !DILocation(line: 9555, column: 32, scope: !10895)
!11003 = !DILocation(line: 9555, column: 13, scope: !10895)
!11004 = !DILocation(line: 9555, column: 11, scope: !10895)
!11005 = !DILocation(line: 9556, column: 14, scope: !10895)
!11006 = !DILocation(line: 9556, column: 7, scope: !10895)
!11007 = !DILocation(line: 9559, column: 7, scope: !10895)
!11008 = !DILocation(line: 9560, column: 5, scope: !10895)
!11009 = !DILocation(line: 9562, column: 5, scope: !10870)
!11010 = !DILocation(line: 9564, column: 1, scope: !10870)
!11011 = distinct !DISubprogram(name: "fold_builtin_interclass_mathfn", scope: !3, file: !3, line: 9386, type: !6901, scopeLine: 9387, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11012 = !DILocalVariable(name: "loc", arg: 1, scope: !11011, file: !3, line: 9386, type: !3429)
!11013 = !DILocation(line: 9386, column: 44, scope: !11011)
!11014 = !DILocalVariable(name: "fndecl", arg: 2, scope: !11011, file: !3, line: 9386, type: !3344)
!11015 = !DILocation(line: 9386, column: 54, scope: !11011)
!11016 = !DILocalVariable(name: "arg", arg: 3, scope: !11011, file: !3, line: 9386, type: !3344)
!11017 = !DILocation(line: 9386, column: 67, scope: !11011)
!11018 = !DILocalVariable(name: "mode", scope: !11011, file: !3, line: 9388, type: !5)
!11019 = !DILocation(line: 9388, column: 21, scope: !11011)
!11020 = !DILocation(line: 9390, column: 22, scope: !11021)
!11021 = distinct !DILexicalBlock(scope: !11011, file: !3, line: 9390, column: 7)
!11022 = !DILocation(line: 9390, column: 8, scope: !11021)
!11023 = !DILocation(line: 9390, column: 7, scope: !11011)
!11024 = !DILocation(line: 9391, column: 5, scope: !11021)
!11025 = !DILocation(line: 9393, column: 32, scope: !11026)
!11026 = distinct !DILexicalBlock(scope: !11011, file: !3, line: 9393, column: 7)
!11027 = !DILocation(line: 9393, column: 37, scope: !11026)
!11028 = !DILocation(line: 9393, column: 7, scope: !11026)
!11029 = !DILocation(line: 9393, column: 45, scope: !11026)
!11030 = !DILocation(line: 9393, column: 7, scope: !11011)
!11031 = !DILocation(line: 9394, column: 5, scope: !11026)
!11032 = !DILocation(line: 9396, column: 10, scope: !11011)
!11033 = !DILocation(line: 9396, column: 8, scope: !11011)
!11034 = !DILocation(line: 9399, column: 11, scope: !11011)
!11035 = !DILocation(line: 9399, column: 3, scope: !11011)
!11036 = !DILocalVariable(name: "isgr_fn", scope: !11037, file: !3, line: 9406, type: !5368)
!11037 = distinct !DILexicalBlock(scope: !11038, file: !3, line: 9404, column: 7)
!11038 = distinct !DILexicalBlock(scope: !11011, file: !3, line: 9400, column: 5)
!11039 = !DILocation(line: 9406, column: 13, scope: !11037)
!11040 = !DILocation(line: 9406, column: 23, scope: !11037)
!11041 = !DILocalVariable(name: "type", scope: !11037, file: !3, line: 9407, type: !5368)
!11042 = !DILocation(line: 9407, column: 13, scope: !11037)
!11043 = !DILocation(line: 9407, column: 20, scope: !11037)
!11044 = !DILocalVariable(name: "r", scope: !11037, file: !3, line: 9408, type: !3366)
!11045 = !DILocation(line: 9408, column: 18, scope: !11037)
!11046 = !DILocalVariable(name: "buf", scope: !11037, file: !3, line: 9409, type: !11047)
!11047 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3401, size: 1024, elements: !11048)
!11048 = !{!11049}
!11049 = !DISubrange(count: 128)
!11050 = !DILocation(line: 9409, column: 7, scope: !11037)
!11051 = !DILocation(line: 9411, column: 17, scope: !11037)
!11052 = !DILocation(line: 9411, column: 42, scope: !11037)
!11053 = !DILocation(line: 9411, column: 2, scope: !11037)
!11054 = !DILocation(line: 9412, column: 24, scope: !11037)
!11055 = !DILocation(line: 9412, column: 2, scope: !11037)
!11056 = !DILocation(line: 9413, column: 11, scope: !11037)
!11057 = !DILocation(line: 9413, column: 9, scope: !11037)
!11058 = !DILocation(line: 9416, column: 9, scope: !11037)
!11059 = !DILocation(line: 9416, column: 2, scope: !11037)
!11060 = !DILocalVariable(name: "isle_fn", scope: !11061, file: !3, line: 9422, type: !5368)
!11061 = distinct !DILexicalBlock(scope: !11038, file: !3, line: 9420, column: 7)
!11062 = !DILocation(line: 9422, column: 13, scope: !11061)
!11063 = !DILocation(line: 9422, column: 23, scope: !11061)
!11064 = !DILocalVariable(name: "type", scope: !11061, file: !3, line: 9423, type: !5368)
!11065 = !DILocation(line: 9423, column: 13, scope: !11061)
!11066 = !DILocation(line: 9423, column: 20, scope: !11061)
!11067 = !DILocalVariable(name: "r", scope: !11061, file: !3, line: 9424, type: !3366)
!11068 = !DILocation(line: 9424, column: 18, scope: !11061)
!11069 = !DILocalVariable(name: "buf", scope: !11061, file: !3, line: 9425, type: !11047)
!11070 = !DILocation(line: 9425, column: 7, scope: !11061)
!11071 = !DILocation(line: 9427, column: 17, scope: !11061)
!11072 = !DILocation(line: 9427, column: 42, scope: !11061)
!11073 = !DILocation(line: 9427, column: 2, scope: !11061)
!11074 = !DILocation(line: 9428, column: 24, scope: !11061)
!11075 = !DILocation(line: 9428, column: 2, scope: !11061)
!11076 = !DILocation(line: 9429, column: 11, scope: !11061)
!11077 = !DILocation(line: 9429, column: 9, scope: !11061)
!11078 = !DILocation(line: 9439, column: 9, scope: !11061)
!11079 = !DILocation(line: 9439, column: 2, scope: !11061)
!11080 = !DILocalVariable(name: "isle_fn", scope: !11081, file: !3, line: 9445, type: !5368)
!11081 = distinct !DILexicalBlock(scope: !11038, file: !3, line: 9442, column: 7)
!11082 = !DILocation(line: 9445, column: 13, scope: !11081)
!11083 = !DILocation(line: 9445, column: 23, scope: !11081)
!11084 = !DILocalVariable(name: "isge_fn", scope: !11081, file: !3, line: 9446, type: !5368)
!11085 = !DILocation(line: 9446, column: 13, scope: !11081)
!11086 = !DILocation(line: 9446, column: 23, scope: !11081)
!11087 = !DILocalVariable(name: "type", scope: !11081, file: !3, line: 9447, type: !5368)
!11088 = !DILocation(line: 9447, column: 13, scope: !11081)
!11089 = !DILocation(line: 9447, column: 20, scope: !11081)
!11090 = !DILocalVariable(name: "rmax", scope: !11081, file: !3, line: 9448, type: !3366)
!11091 = !DILocation(line: 9448, column: 18, scope: !11081)
!11092 = !DILocalVariable(name: "rmin", scope: !11081, file: !3, line: 9448, type: !3366)
!11093 = !DILocation(line: 9448, column: 24, scope: !11081)
!11094 = !DILocalVariable(name: "buf", scope: !11081, file: !3, line: 9449, type: !11047)
!11095 = !DILocation(line: 9449, column: 7, scope: !11081)
!11096 = !DILocation(line: 9451, column: 17, scope: !11081)
!11097 = !DILocation(line: 9451, column: 42, scope: !11081)
!11098 = !DILocation(line: 9451, column: 2, scope: !11081)
!11099 = !DILocation(line: 9452, column: 27, scope: !11081)
!11100 = !DILocation(line: 9452, column: 2, scope: !11081)
!11101 = !DILocation(line: 9453, column: 11, scope: !11081)
!11102 = !DILocation(line: 9453, column: 26, scope: !11081)
!11103 = !DILocation(line: 9453, column: 51, scope: !11081)
!11104 = !DILocation(line: 9453, column: 56, scope: !11081)
!11105 = !DILocation(line: 9453, column: 2, scope: !11081)
!11106 = !DILocation(line: 9454, column: 27, scope: !11081)
!11107 = !DILocation(line: 9454, column: 2, scope: !11081)
!11108 = !DILocation(line: 9455, column: 27, scope: !11081)
!11109 = !DILocation(line: 9455, column: 8, scope: !11081)
!11110 = !DILocation(line: 9455, column: 6, scope: !11081)
!11111 = !DILocation(line: 9456, column: 11, scope: !11081)
!11112 = !DILocation(line: 9456, column: 9, scope: !11081)
!11113 = !DILocation(line: 9458, column: 11, scope: !11081)
!11114 = !DILocation(line: 9458, column: 9, scope: !11081)
!11115 = !DILocation(line: 9461, column: 9, scope: !11081)
!11116 = !DILocation(line: 9461, column: 2, scope: !11081)
!11117 = !DILocation(line: 9464, column: 7, scope: !11038)
!11118 = !DILocation(line: 9467, column: 3, scope: !11011)
!11119 = !DILocation(line: 9468, column: 1, scope: !11011)
!11120 = distinct !DISubprogram(name: "fold_builtin_printf", scope: !3, file: !3, line: 12678, type: !11121, scopeLine: 12681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11121 = !DISubroutineType(types: !11122)
!11122 = !{!3344, !3429, !3344, !3344, !3344, !3421, !573}
!11123 = !DILocalVariable(name: "loc", arg: 1, scope: !11120, file: !3, line: 12678, type: !3429)
!11124 = !DILocation(line: 12678, column: 33, scope: !11120)
!11125 = !DILocalVariable(name: "fndecl", arg: 2, scope: !11120, file: !3, line: 12678, type: !3344)
!11126 = !DILocation(line: 12678, column: 43, scope: !11120)
!11127 = !DILocalVariable(name: "fmt", arg: 3, scope: !11120, file: !3, line: 12678, type: !3344)
!11128 = !DILocation(line: 12678, column: 56, scope: !11120)
!11129 = !DILocalVariable(name: "arg", arg: 4, scope: !11120, file: !3, line: 12679, type: !3344)
!11130 = !DILocation(line: 12679, column: 13, scope: !11120)
!11131 = !DILocalVariable(name: "ignore", arg: 5, scope: !11120, file: !3, line: 12679, type: !3421)
!11132 = !DILocation(line: 12679, column: 23, scope: !11120)
!11133 = !DILocalVariable(name: "fcode", arg: 6, scope: !11120, file: !3, line: 12680, type: !573)
!11134 = !DILocation(line: 12680, column: 31, scope: !11120)
!11135 = !DILocalVariable(name: "fn_putchar", scope: !11120, file: !3, line: 12682, type: !3344)
!11136 = !DILocation(line: 12682, column: 8, scope: !11120)
!11137 = !DILocalVariable(name: "fn_puts", scope: !11120, file: !3, line: 12682, type: !3344)
!11138 = !DILocation(line: 12682, column: 20, scope: !11120)
!11139 = !DILocalVariable(name: "newarg", scope: !11120, file: !3, line: 12682, type: !3344)
!11140 = !DILocation(line: 12682, column: 29, scope: !11120)
!11141 = !DILocalVariable(name: "call", scope: !11120, file: !3, line: 12682, type: !3344)
!11142 = !DILocation(line: 12682, column: 37, scope: !11120)
!11143 = !DILocalVariable(name: "fmt_str", scope: !11120, file: !3, line: 12683, type: !3504)
!11144 = !DILocation(line: 12683, column: 15, scope: !11120)
!11145 = !DILocation(line: 12686, column: 9, scope: !11146)
!11146 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12686, column: 7)
!11147 = !DILocation(line: 12686, column: 7, scope: !11120)
!11148 = !DILocation(line: 12687, column: 5, scope: !11146)
!11149 = !DILocation(line: 12690, column: 22, scope: !11150)
!11150 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12690, column: 7)
!11151 = !DILocation(line: 12690, column: 8, scope: !11150)
!11152 = !DILocation(line: 12690, column: 7, scope: !11120)
!11153 = !DILocation(line: 12691, column: 5, scope: !11150)
!11154 = !DILocation(line: 12694, column: 23, scope: !11120)
!11155 = !DILocation(line: 12694, column: 13, scope: !11120)
!11156 = !DILocation(line: 12694, column: 11, scope: !11120)
!11157 = !DILocation(line: 12695, column: 7, scope: !11158)
!11158 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12695, column: 7)
!11159 = !DILocation(line: 12695, column: 15, scope: !11158)
!11160 = !DILocation(line: 12695, column: 7, scope: !11120)
!11161 = !DILocation(line: 12696, column: 5, scope: !11158)
!11162 = !DILocation(line: 12698, column: 7, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12698, column: 7)
!11164 = !DILocation(line: 12698, column: 13, scope: !11163)
!11165 = !DILocation(line: 12698, column: 7, scope: !11120)
!11166 = !DILocation(line: 12702, column: 20, scope: !11167)
!11167 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 12699, column: 5)
!11168 = !DILocation(line: 12702, column: 18, scope: !11167)
!11169 = !DILocation(line: 12703, column: 17, scope: !11167)
!11170 = !DILocation(line: 12703, column: 15, scope: !11167)
!11171 = !DILocation(line: 12704, column: 5, scope: !11167)
!11172 = !DILocation(line: 12707, column: 20, scope: !11173)
!11173 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 12706, column: 5)
!11174 = !DILocation(line: 12707, column: 18, scope: !11173)
!11175 = !DILocation(line: 12708, column: 17, scope: !11173)
!11176 = !DILocation(line: 12708, column: 15, scope: !11173)
!11177 = !DILocation(line: 12711, column: 8, scope: !11178)
!11178 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12711, column: 7)
!11179 = !DILocation(line: 12711, column: 7, scope: !11120)
!11180 = !DILocation(line: 12712, column: 5, scope: !11178)
!11181 = !DILocation(line: 12714, column: 15, scope: !11182)
!11182 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12714, column: 7)
!11183 = !DILocation(line: 12714, column: 7, scope: !11182)
!11184 = !DILocation(line: 12714, column: 42, scope: !11182)
!11185 = !DILocation(line: 12715, column: 7, scope: !11182)
!11186 = !DILocation(line: 12715, column: 18, scope: !11182)
!11187 = !DILocation(line: 12715, column: 27, scope: !11182)
!11188 = !DILocation(line: 12715, column: 10, scope: !11182)
!11189 = !DILocation(line: 12715, column: 43, scope: !11182)
!11190 = !DILocation(line: 12714, column: 7, scope: !11120)
!11191 = !DILocalVariable(name: "str", scope: !11192, file: !3, line: 12717, type: !3504)
!11192 = distinct !DILexicalBlock(scope: !11182, file: !3, line: 12716, column: 5)
!11193 = !DILocation(line: 12717, column: 19, scope: !11192)
!11194 = !DILocation(line: 12719, column: 19, scope: !11195)
!11195 = distinct !DILexicalBlock(scope: !11192, file: !3, line: 12719, column: 11)
!11196 = !DILocation(line: 12719, column: 11, scope: !11195)
!11197 = !DILocation(line: 12719, column: 46, scope: !11195)
!11198 = !DILocation(line: 12719, column: 11, scope: !11192)
!11199 = !DILocation(line: 12721, column: 8, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11201, file: !3, line: 12721, column: 8)
!11201 = distinct !DILexicalBlock(scope: !11195, file: !3, line: 12720, column: 2)
!11202 = !DILocation(line: 12721, column: 14, scope: !11200)
!11203 = !DILocation(line: 12721, column: 34, scope: !11200)
!11204 = !DILocation(line: 12721, column: 37, scope: !11200)
!11205 = !DILocation(line: 12721, column: 43, scope: !11200)
!11206 = !DILocation(line: 12721, column: 8, scope: !11201)
!11207 = !DILocation(line: 12722, column: 6, scope: !11200)
!11208 = !DILocation(line: 12724, column: 9, scope: !11209)
!11209 = distinct !DILexicalBlock(scope: !11201, file: !3, line: 12724, column: 8)
!11210 = !DILocation(line: 12724, column: 13, scope: !11209)
!11211 = !DILocation(line: 12724, column: 31, scope: !11209)
!11212 = !DILocation(line: 12724, column: 17, scope: !11209)
!11213 = !DILocation(line: 12724, column: 8, scope: !11201)
!11214 = !DILocation(line: 12725, column: 6, scope: !11209)
!11215 = !DILocation(line: 12727, column: 20, scope: !11201)
!11216 = !DILocation(line: 12727, column: 10, scope: !11201)
!11217 = !DILocation(line: 12727, column: 8, scope: !11201)
!11218 = !DILocation(line: 12728, column: 8, scope: !11219)
!11219 = distinct !DILexicalBlock(scope: !11201, file: !3, line: 12728, column: 8)
!11220 = !DILocation(line: 12728, column: 12, scope: !11219)
!11221 = !DILocation(line: 12728, column: 8, scope: !11201)
!11222 = !DILocation(line: 12729, column: 6, scope: !11219)
!11223 = !DILocation(line: 12730, column: 2, scope: !11201)
!11224 = !DILocation(line: 12734, column: 8, scope: !11225)
!11225 = distinct !DILexicalBlock(scope: !11226, file: !3, line: 12734, column: 8)
!11226 = distinct !DILexicalBlock(scope: !11195, file: !3, line: 12732, column: 2)
!11227 = !DILocation(line: 12734, column: 14, scope: !11225)
!11228 = !DILocation(line: 12734, column: 34, scope: !11225)
!11229 = !DILocation(line: 12734, column: 37, scope: !11225)
!11230 = !DILocation(line: 12734, column: 43, scope: !11225)
!11231 = !DILocation(line: 12735, column: 8, scope: !11225)
!11232 = !DILocation(line: 12735, column: 11, scope: !11225)
!11233 = !DILocation(line: 12734, column: 8, scope: !11226)
!11234 = !DILocation(line: 12736, column: 6, scope: !11225)
!11235 = !DILocation(line: 12737, column: 10, scope: !11226)
!11236 = !DILocation(line: 12737, column: 8, scope: !11226)
!11237 = !DILocation(line: 12741, column: 11, scope: !11238)
!11238 = distinct !DILexicalBlock(scope: !11192, file: !3, line: 12741, column: 11)
!11239 = !DILocation(line: 12741, column: 18, scope: !11238)
!11240 = !DILocation(line: 12741, column: 11, scope: !11192)
!11241 = !DILocation(line: 12742, column: 24, scope: !11238)
!11242 = !DILocation(line: 12742, column: 9, scope: !11238)
!11243 = !DILocation(line: 12742, column: 2, scope: !11238)
!11244 = !DILocation(line: 12745, column: 11, scope: !11245)
!11245 = distinct !DILexicalBlock(scope: !11192, file: !3, line: 12745, column: 11)
!11246 = !DILocation(line: 12745, column: 18, scope: !11245)
!11247 = !DILocation(line: 12745, column: 11, scope: !11192)
!11248 = !DILocation(line: 12750, column: 39, scope: !11249)
!11249 = distinct !DILexicalBlock(scope: !11245, file: !3, line: 12746, column: 2)
!11250 = !DILocation(line: 12750, column: 13, scope: !11249)
!11251 = !DILocation(line: 12750, column: 11, scope: !11249)
!11252 = !DILocation(line: 12751, column: 8, scope: !11253)
!11253 = distinct !DILexicalBlock(scope: !11249, file: !3, line: 12751, column: 8)
!11254 = !DILocation(line: 12751, column: 8, scope: !11249)
!11255 = !DILocation(line: 12752, column: 34, scope: !11253)
!11256 = !DILocation(line: 12752, column: 39, scope: !11253)
!11257 = !DILocation(line: 12752, column: 54, scope: !11253)
!11258 = !DILocation(line: 12752, column: 13, scope: !11253)
!11259 = !DILocation(line: 12752, column: 11, scope: !11253)
!11260 = !DILocation(line: 12752, column: 6, scope: !11253)
!11261 = !DILocation(line: 12753, column: 2, scope: !11249)
!11262 = !DILocalVariable(name: "len", scope: !11263, file: !3, line: 12757, type: !3777)
!11263 = distinct !DILexicalBlock(scope: !11245, file: !3, line: 12755, column: 2)
!11264 = !DILocation(line: 12757, column: 11, scope: !11263)
!11265 = !DILocation(line: 12757, column: 25, scope: !11263)
!11266 = !DILocation(line: 12757, column: 17, scope: !11263)
!11267 = !DILocation(line: 12758, column: 23, scope: !11268)
!11268 = distinct !DILexicalBlock(scope: !11263, file: !3, line: 12758, column: 8)
!11269 = !DILocation(line: 12758, column: 27, scope: !11268)
!11270 = !DILocation(line: 12758, column: 31, scope: !11268)
!11271 = !DILocation(line: 12758, column: 8, scope: !11268)
!11272 = !DILocation(line: 12758, column: 39, scope: !11268)
!11273 = !DILocation(line: 12758, column: 36, scope: !11268)
!11274 = !DILocation(line: 12758, column: 8, scope: !11263)
!11275 = !DILocalVariable(name: "newstr", scope: !11276, file: !3, line: 12762, type: !3569)
!11276 = distinct !DILexicalBlock(scope: !11268, file: !3, line: 12759, column: 6)
!11277 = !DILocation(line: 12762, column: 14, scope: !11276)
!11278 = !DILocation(line: 12762, column: 23, scope: !11276)
!11279 = !DILocation(line: 12763, column: 16, scope: !11276)
!11280 = !DILocation(line: 12763, column: 24, scope: !11276)
!11281 = !DILocation(line: 12763, column: 29, scope: !11276)
!11282 = !DILocation(line: 12763, column: 33, scope: !11276)
!11283 = !DILocation(line: 12763, column: 8, scope: !11276)
!11284 = !DILocation(line: 12764, column: 8, scope: !11276)
!11285 = !DILocation(line: 12764, column: 15, scope: !11276)
!11286 = !DILocation(line: 12764, column: 19, scope: !11276)
!11287 = !DILocation(line: 12764, column: 24, scope: !11276)
!11288 = !DILocation(line: 12766, column: 39, scope: !11276)
!11289 = !DILocation(line: 12766, column: 44, scope: !11276)
!11290 = !DILocation(line: 12766, column: 17, scope: !11276)
!11291 = !DILocation(line: 12766, column: 15, scope: !11276)
!11292 = !DILocation(line: 12767, column: 12, scope: !11293)
!11293 = distinct !DILexicalBlock(scope: !11276, file: !3, line: 12767, column: 12)
!11294 = !DILocation(line: 12767, column: 12, scope: !11276)
!11295 = !DILocation(line: 12768, column: 31, scope: !11293)
!11296 = !DILocation(line: 12768, column: 36, scope: !11293)
!11297 = !DILocation(line: 12768, column: 48, scope: !11293)
!11298 = !DILocation(line: 12768, column: 10, scope: !11293)
!11299 = !DILocation(line: 12768, column: 8, scope: !11293)
!11300 = !DILocation(line: 12768, column: 3, scope: !11293)
!11301 = !DILocation(line: 12769, column: 6, scope: !11276)
!11302 = !DILocation(line: 12773, column: 6, scope: !11268)
!11303 = !DILocation(line: 12775, column: 5, scope: !11192)
!11304 = !DILocation(line: 12778, column: 12, scope: !11305)
!11305 = distinct !DILexicalBlock(scope: !11182, file: !3, line: 12778, column: 12)
!11306 = !DILocation(line: 12778, column: 18, scope: !11305)
!11307 = !DILocation(line: 12778, column: 38, scope: !11305)
!11308 = !DILocation(line: 12778, column: 41, scope: !11305)
!11309 = !DILocation(line: 12778, column: 47, scope: !11305)
!11310 = !DILocation(line: 12778, column: 12, scope: !11182)
!11311 = !DILocation(line: 12779, column: 5, scope: !11305)
!11312 = !DILocation(line: 12782, column: 20, scope: !11313)
!11313 = distinct !DILexicalBlock(scope: !11305, file: !3, line: 12782, column: 12)
!11314 = !DILocation(line: 12782, column: 12, scope: !11313)
!11315 = !DILocation(line: 12782, column: 55, scope: !11313)
!11316 = !DILocation(line: 12782, column: 12, scope: !11305)
!11317 = !DILocation(line: 12784, column: 12, scope: !11318)
!11318 = distinct !DILexicalBlock(scope: !11319, file: !3, line: 12784, column: 11)
!11319 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 12783, column: 5)
!11320 = !DILocation(line: 12784, column: 16, scope: !11318)
!11321 = !DILocation(line: 12784, column: 34, scope: !11318)
!11322 = !DILocation(line: 12784, column: 20, scope: !11318)
!11323 = !DILocation(line: 12784, column: 11, scope: !11319)
!11324 = !DILocation(line: 12785, column: 2, scope: !11318)
!11325 = !DILocation(line: 12786, column: 11, scope: !11326)
!11326 = distinct !DILexicalBlock(scope: !11319, file: !3, line: 12786, column: 11)
!11327 = !DILocation(line: 12786, column: 11, scope: !11319)
!11328 = !DILocation(line: 12787, column: 30, scope: !11326)
!11329 = !DILocation(line: 12787, column: 35, scope: !11326)
!11330 = !DILocation(line: 12787, column: 47, scope: !11326)
!11331 = !DILocation(line: 12787, column: 9, scope: !11326)
!11332 = !DILocation(line: 12787, column: 7, scope: !11326)
!11333 = !DILocation(line: 12787, column: 2, scope: !11326)
!11334 = !DILocation(line: 12788, column: 5, scope: !11319)
!11335 = !DILocation(line: 12791, column: 20, scope: !11336)
!11336 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 12791, column: 12)
!11337 = !DILocation(line: 12791, column: 12, scope: !11336)
!11338 = !DILocation(line: 12791, column: 47, scope: !11336)
!11339 = !DILocation(line: 12791, column: 12, scope: !11313)
!11340 = !DILocation(line: 12793, column: 12, scope: !11341)
!11341 = distinct !DILexicalBlock(scope: !11342, file: !3, line: 12793, column: 11)
!11342 = distinct !DILexicalBlock(scope: !11336, file: !3, line: 12792, column: 5)
!11343 = !DILocation(line: 12793, column: 16, scope: !11341)
!11344 = !DILocation(line: 12793, column: 34, scope: !11341)
!11345 = !DILocation(line: 12793, column: 20, scope: !11341)
!11346 = !DILocation(line: 12793, column: 11, scope: !11342)
!11347 = !DILocation(line: 12794, column: 2, scope: !11341)
!11348 = !DILocation(line: 12795, column: 11, scope: !11349)
!11349 = distinct !DILexicalBlock(scope: !11342, file: !3, line: 12795, column: 11)
!11350 = !DILocation(line: 12795, column: 11, scope: !11342)
!11351 = !DILocation(line: 12796, column: 30, scope: !11349)
!11352 = !DILocation(line: 12796, column: 35, scope: !11349)
!11353 = !DILocation(line: 12796, column: 50, scope: !11349)
!11354 = !DILocation(line: 12796, column: 9, scope: !11349)
!11355 = !DILocation(line: 12796, column: 7, scope: !11349)
!11356 = !DILocation(line: 12796, column: 2, scope: !11349)
!11357 = !DILocation(line: 12797, column: 5, scope: !11342)
!11358 = !DILocation(line: 12799, column: 8, scope: !11359)
!11359 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 12799, column: 7)
!11360 = !DILocation(line: 12799, column: 7, scope: !11120)
!11361 = !DILocation(line: 12800, column: 5, scope: !11359)
!11362 = !DILocation(line: 12802, column: 28, scope: !11120)
!11363 = !DILocation(line: 12802, column: 33, scope: !11120)
!11364 = !DILocation(line: 12802, column: 65, scope: !11120)
!11365 = !DILocation(line: 12802, column: 10, scope: !11120)
!11366 = !DILocation(line: 12802, column: 3, scope: !11120)
!11367 = !DILocation(line: 12803, column: 1, scope: !11120)
!11368 = distinct !DISubprogram(name: "builtin_save_expr", scope: !3, file: !3, line: 609, type: !5636, scopeLine: 610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11369 = !DILocalVariable(name: "exp", arg: 1, scope: !11368, file: !3, line: 609, type: !3344)
!11370 = !DILocation(line: 609, column: 25, scope: !11368)
!11371 = !DILocation(line: 611, column: 7, scope: !11372)
!11372 = distinct !DILexicalBlock(scope: !11368, file: !3, line: 611, column: 7)
!11373 = !DILocation(line: 611, column: 30, scope: !11372)
!11374 = !DILocation(line: 612, column: 7, scope: !11372)
!11375 = !DILocation(line: 612, column: 11, scope: !11372)
!11376 = !DILocation(line: 612, column: 27, scope: !11372)
!11377 = !DILocation(line: 613, column: 4, scope: !11372)
!11378 = !DILocation(line: 613, column: 8, scope: !11372)
!11379 = !DILocation(line: 613, column: 24, scope: !11372)
!11380 = !DILocation(line: 613, column: 36, scope: !11372)
!11381 = !DILocation(line: 613, column: 40, scope: !11372)
!11382 = !DILocation(line: 611, column: 7, scope: !11368)
!11383 = !DILocation(line: 614, column: 12, scope: !11372)
!11384 = !DILocation(line: 614, column: 5, scope: !11372)
!11385 = !DILocation(line: 616, column: 21, scope: !11368)
!11386 = !DILocation(line: 616, column: 10, scope: !11368)
!11387 = !DILocation(line: 616, column: 3, scope: !11368)
!11388 = !DILocation(line: 617, column: 1, scope: !11368)
!11389 = distinct !DISubprogram(name: "integer_valued_real_p", scope: !3, file: !3, line: 6710, type: !4815, scopeLine: 6711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11390 = !DILocalVariable(name: "t", arg: 1, scope: !11389, file: !3, line: 6710, type: !3344)
!11391 = !DILocation(line: 6710, column: 29, scope: !11389)
!11392 = !DILocation(line: 6712, column: 11, scope: !11389)
!11393 = !DILocation(line: 6712, column: 3, scope: !11389)
!11394 = !DILocation(line: 6715, column: 7, scope: !11395)
!11395 = distinct !DILexicalBlock(scope: !11389, file: !3, line: 6713, column: 5)
!11396 = !DILocation(line: 6719, column: 37, scope: !11395)
!11397 = !DILocation(line: 6719, column: 14, scope: !11395)
!11398 = !DILocation(line: 6719, column: 7, scope: !11395)
!11399 = !DILocation(line: 6724, column: 37, scope: !11395)
!11400 = !DILocation(line: 6724, column: 14, scope: !11395)
!11401 = !DILocation(line: 6724, column: 7, scope: !11395)
!11402 = !DILocation(line: 6731, column: 37, scope: !11395)
!11403 = !DILocation(line: 6731, column: 14, scope: !11395)
!11404 = !DILocation(line: 6732, column: 7, scope: !11395)
!11405 = !DILocation(line: 6732, column: 33, scope: !11395)
!11406 = !DILocation(line: 6732, column: 10, scope: !11395)
!11407 = !DILocation(line: 0, scope: !11395)
!11408 = !DILocation(line: 6731, column: 7, scope: !11395)
!11409 = !DILocation(line: 6735, column: 37, scope: !11395)
!11410 = !DILocation(line: 6735, column: 14, scope: !11395)
!11411 = !DILocation(line: 6736, column: 7, scope: !11395)
!11412 = !DILocation(line: 6736, column: 33, scope: !11395)
!11413 = !DILocation(line: 6736, column: 10, scope: !11395)
!11414 = !DILocation(line: 6735, column: 7, scope: !11395)
!11415 = !DILocation(line: 6739, column: 30, scope: !11395)
!11416 = !DILocation(line: 6739, column: 53, scope: !11395)
!11417 = !DILocation(line: 6739, column: 14, scope: !11395)
!11418 = !DILocation(line: 6739, column: 7, scope: !11395)
!11419 = !DILocalVariable(name: "type", scope: !11420, file: !3, line: 6743, type: !3344)
!11420 = distinct !DILexicalBlock(scope: !11395, file: !3, line: 6742, column: 7)
!11421 = !DILocation(line: 6743, column: 7, scope: !11420)
!11422 = !DILocation(line: 6743, column: 14, scope: !11420)
!11423 = !DILocation(line: 6744, column: 6, scope: !11424)
!11424 = distinct !DILexicalBlock(scope: !11420, file: !3, line: 6744, column: 6)
!11425 = !DILocation(line: 6744, column: 23, scope: !11424)
!11426 = !DILocation(line: 6744, column: 6, scope: !11420)
!11427 = !DILocation(line: 6745, column: 4, scope: !11424)
!11428 = !DILocation(line: 6746, column: 6, scope: !11429)
!11429 = distinct !DILexicalBlock(scope: !11420, file: !3, line: 6746, column: 6)
!11430 = !DILocation(line: 6746, column: 23, scope: !11429)
!11431 = !DILocation(line: 6746, column: 6, scope: !11420)
!11432 = !DILocation(line: 6747, column: 34, scope: !11429)
!11433 = !DILocation(line: 6747, column: 11, scope: !11429)
!11434 = !DILocation(line: 6747, column: 4, scope: !11429)
!11435 = !DILocation(line: 6748, column: 2, scope: !11420)
!11436 = !DILocation(line: 6752, column: 36, scope: !11395)
!11437 = !DILocation(line: 6752, column: 15, scope: !11395)
!11438 = !DILocation(line: 6752, column: 7, scope: !11395)
!11439 = !DILocation(line: 6760, column: 4, scope: !11440)
!11440 = distinct !DILexicalBlock(scope: !11395, file: !3, line: 6753, column: 2)
!11441 = !DILocation(line: 6764, column: 34, scope: !11440)
!11442 = !DILocation(line: 6764, column: 11, scope: !11440)
!11443 = !DILocation(line: 6765, column: 7, scope: !11440)
!11444 = !DILocation(line: 6765, column: 33, scope: !11440)
!11445 = !DILocation(line: 6765, column: 10, scope: !11440)
!11446 = !DILocation(line: 0, scope: !11440)
!11447 = !DILocation(line: 6764, column: 4, scope: !11440)
!11448 = !DILocation(line: 6768, column: 4, scope: !11440)
!11449 = !DILocation(line: 6770, column: 7, scope: !11395)
!11450 = !DILocation(line: 6773, column: 7, scope: !11395)
!11451 = !DILocation(line: 6775, column: 3, scope: !11389)
!11452 = !DILocation(line: 6776, column: 1, scope: !11389)
!11453 = distinct !DISubprogram(name: "interclass_mathfn_icode", scope: !3, file: !3, line: 2254, type: !11454, scopeLine: 2255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11454 = !DISubroutineType(types: !11455)
!11455 = !{!1563, !3344, !3344}
!11456 = !DILocalVariable(name: "arg", arg: 1, scope: !11453, file: !3, line: 2254, type: !3344)
!11457 = !DILocation(line: 2254, column: 31, scope: !11453)
!11458 = !DILocalVariable(name: "fndecl", arg: 2, scope: !11453, file: !3, line: 2254, type: !3344)
!11459 = !DILocation(line: 2254, column: 41, scope: !11453)
!11460 = !DILocalVariable(name: "errno_set", scope: !11453, file: !3, line: 2256, type: !3421)
!11461 = !DILocation(line: 2256, column: 8, scope: !11453)
!11462 = !DILocalVariable(name: "builtin_optab", scope: !11453, file: !3, line: 2257, type: !11463)
!11463 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !3056, line: 55, baseType: !11464)
!11464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11465, size: 64)
!11465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !3056, line: 46, size: 3072, elements: !11466)
!11466 = !{!11467, !11468, !11469, !11470, !11474}
!11467 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !11465, file: !3056, line: 48, baseType: !410, size: 32)
!11468 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !11465, file: !3056, line: 49, baseType: !3504, size: 64, offset: 64)
!11469 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !11465, file: !3056, line: 50, baseType: !3401, size: 8, offset: 128)
!11470 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !11465, file: !3056, line: 51, baseType: !11471, size: 64, offset: 192)
!11471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11472, size: 64)
!11472 = !DISubroutineType(types: !11473)
!11473 = !{null, !11464, !3504, !3401, !5}
!11474 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !11465, file: !3056, line: 53, baseType: !11475, size: 2784, offset: 256)
!11475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11476, size: 2784, elements: !11479)
!11476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !3056, line: 41, size: 32, elements: !11477)
!11477 = !{!11478}
!11478 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !11476, file: !3056, line: 43, baseType: !1563, size: 32)
!11479 = !{!11480}
!11480 = !DISubrange(count: 87)
!11481 = !DILocation(line: 2257, column: 9, scope: !11453)
!11482 = !DILocalVariable(name: "mode", scope: !11453, file: !3, line: 2258, type: !5)
!11483 = !DILocation(line: 2258, column: 21, scope: !11453)
!11484 = !DILocation(line: 2260, column: 11, scope: !11453)
!11485 = !DILocation(line: 2260, column: 3, scope: !11453)
!11486 = !DILocation(line: 2263, column: 17, scope: !11487)
!11487 = distinct !DILexicalBlock(scope: !11453, file: !3, line: 2261, column: 5)
!11488 = !DILocation(line: 2263, column: 39, scope: !11487)
!11489 = !DILocation(line: 2263, column: 54, scope: !11487)
!11490 = !DILocation(line: 2265, column: 21, scope: !11487)
!11491 = !DILocation(line: 2265, column: 36, scope: !11487)
!11492 = !DILocation(line: 2276, column: 7, scope: !11487)
!11493 = !DILocation(line: 2278, column: 7, scope: !11487)
!11494 = !DILocation(line: 2279, column: 5, scope: !11487)
!11495 = !DILocation(line: 2282, column: 7, scope: !11496)
!11496 = distinct !DILexicalBlock(scope: !11453, file: !3, line: 2282, column: 7)
!11497 = !DILocation(line: 2282, column: 23, scope: !11496)
!11498 = !DILocation(line: 2282, column: 26, scope: !11496)
!11499 = !DILocation(line: 2282, column: 7, scope: !11453)
!11500 = !DILocation(line: 2283, column: 5, scope: !11496)
!11501 = !DILocation(line: 2286, column: 10, scope: !11453)
!11502 = !DILocation(line: 2286, column: 8, scope: !11453)
!11503 = !DILocation(line: 2288, column: 7, scope: !11504)
!11504 = distinct !DILexicalBlock(scope: !11453, file: !3, line: 2288, column: 7)
!11505 = !DILocation(line: 2288, column: 7, scope: !11453)
!11506 = !DILocation(line: 2289, column: 12, scope: !11504)
!11507 = !DILocation(line: 2289, column: 49, scope: !11504)
!11508 = !DILocation(line: 2289, column: 5, scope: !11504)
!11509 = !DILocation(line: 2290, column: 3, scope: !11453)
!11510 = !DILocation(line: 2291, column: 1, scope: !11453)
!11511 = distinct !DISubprogram(name: "fold_builtin_hypot", scope: !3, file: !3, line: 7803, type: !6467, scopeLine: 7805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11512 = !DILocalVariable(name: "loc", arg: 1, scope: !11511, file: !3, line: 7803, type: !3429)
!11513 = !DILocation(line: 7803, column: 32, scope: !11511)
!11514 = !DILocalVariable(name: "fndecl", arg: 2, scope: !11511, file: !3, line: 7803, type: !3344)
!11515 = !DILocation(line: 7803, column: 42, scope: !11511)
!11516 = !DILocalVariable(name: "arg0", arg: 3, scope: !11511, file: !3, line: 7804, type: !3344)
!11517 = !DILocation(line: 7804, column: 12, scope: !11511)
!11518 = !DILocalVariable(name: "arg1", arg: 4, scope: !11511, file: !3, line: 7804, type: !3344)
!11519 = !DILocation(line: 7804, column: 23, scope: !11511)
!11520 = !DILocalVariable(name: "type", arg: 5, scope: !11511, file: !3, line: 7804, type: !3344)
!11521 = !DILocation(line: 7804, column: 34, scope: !11511)
!11522 = !DILocation(line: 7807, column: 7, scope: !11511)
!11523 = distinct !DISubprogram(name: "fold_builtin_load_exponent", scope: !3, file: !3, line: 9268, type: !9039, scopeLine: 9270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11524 = !DILocalVariable(name: "loc", arg: 1, scope: !11523, file: !3, line: 9268, type: !3429)
!11525 = !DILocation(line: 9268, column: 40, scope: !11523)
!11526 = !DILocalVariable(name: "arg0", arg: 2, scope: !11523, file: !3, line: 9268, type: !3344)
!11527 = !DILocation(line: 9268, column: 50, scope: !11523)
!11528 = !DILocalVariable(name: "arg1", arg: 3, scope: !11523, file: !3, line: 9268, type: !3344)
!11529 = !DILocation(line: 9268, column: 61, scope: !11523)
!11530 = !DILocalVariable(name: "type", arg: 4, scope: !11523, file: !3, line: 9269, type: !3344)
!11531 = !DILocation(line: 9269, column: 13, scope: !11523)
!11532 = !DILocalVariable(name: "ldexp", arg: 5, scope: !11523, file: !3, line: 9269, type: !3421)
!11533 = !DILocation(line: 9269, column: 24, scope: !11523)
!11534 = !DILocation(line: 9271, column: 21, scope: !11535)
!11535 = distinct !DILexicalBlock(scope: !11523, file: !3, line: 9271, column: 7)
!11536 = !DILocation(line: 9271, column: 7, scope: !11535)
!11537 = !DILocation(line: 9271, column: 38, scope: !11535)
!11538 = !DILocation(line: 9271, column: 55, scope: !11535)
!11539 = !DILocation(line: 9271, column: 41, scope: !11535)
!11540 = !DILocation(line: 9271, column: 7, scope: !11523)
!11541 = !DILocation(line: 9273, column: 7, scope: !11542)
!11542 = distinct !DILexicalBlock(scope: !11535, file: !3, line: 9272, column: 5)
!11543 = !DILocation(line: 9274, column: 7, scope: !11542)
!11544 = !DILocation(line: 9277, column: 23, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 9277, column: 11)
!11546 = !DILocation(line: 9277, column: 11, scope: !11545)
!11547 = !DILocation(line: 9277, column: 29, scope: !11545)
!11548 = !DILocation(line: 9277, column: 47, scope: !11545)
!11549 = !DILocation(line: 9277, column: 32, scope: !11545)
!11550 = !DILocation(line: 9278, column: 4, scope: !11545)
!11551 = !DILocation(line: 9278, column: 8, scope: !11545)
!11552 = !DILocation(line: 9278, column: 25, scope: !11545)
!11553 = !DILocation(line: 9279, column: 8, scope: !11545)
!11554 = !DILocation(line: 9279, column: 28, scope: !11545)
!11555 = !DILocation(line: 9279, column: 12, scope: !11545)
!11556 = !DILocation(line: 9277, column: 11, scope: !11542)
!11557 = !DILocation(line: 9280, column: 31, scope: !11545)
!11558 = !DILocation(line: 9280, column: 36, scope: !11545)
!11559 = !DILocation(line: 9280, column: 42, scope: !11545)
!11560 = !DILocation(line: 9280, column: 48, scope: !11545)
!11561 = !DILocation(line: 9280, column: 9, scope: !11545)
!11562 = !DILocation(line: 9280, column: 2, scope: !11545)
!11563 = !DILocation(line: 9283, column: 12, scope: !11564)
!11564 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 9283, column: 11)
!11565 = !DILocation(line: 9283, column: 18, scope: !11564)
!11566 = !DILocation(line: 9283, column: 21, scope: !11564)
!11567 = !DILocation(line: 9283, column: 58, scope: !11564)
!11568 = !DILocation(line: 9283, column: 60, scope: !11564)
!11569 = !DILocation(line: 9284, column: 4, scope: !11564)
!11570 = !DILocation(line: 9284, column: 7, scope: !11564)
!11571 = !DILocation(line: 9284, column: 24, scope: !11564)
!11572 = !DILocation(line: 9284, column: 36, scope: !11564)
!11573 = !DILocation(line: 9284, column: 40, scope: !11564)
!11574 = !DILocation(line: 9285, column: 4, scope: !11564)
!11575 = !DILocation(line: 9285, column: 22, scope: !11564)
!11576 = !DILocation(line: 9285, column: 7, scope: !11564)
!11577 = !DILocation(line: 9283, column: 11, scope: !11542)
!11578 = !DILocalVariable(name: "max_exp_adj", scope: !11579, file: !3, line: 9290, type: !11580)
!11579 = distinct !DILexicalBlock(scope: !11564, file: !3, line: 9286, column: 9)
!11580 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3359)
!11581 = !DILocation(line: 9290, column: 15, scope: !11579)
!11582 = !DILocation(line: 9291, column: 12, scope: !11579)
!11583 = !DILocation(line: 9291, column: 49, scope: !11579)
!11584 = !DILocation(line: 9292, column: 6, scope: !11579)
!11585 = !DILocation(line: 9292, column: 43, scope: !11579)
!11586 = !DILocation(line: 9292, column: 4, scope: !11579)
!11587 = !DILocation(line: 9291, column: 6, scope: !11579)
!11588 = !DILocation(line: 9290, column: 31, scope: !11579)
!11589 = !DILocalVariable(name: "req_exp_adj", scope: !11579, file: !3, line: 9295, type: !11580)
!11590 = !DILocation(line: 9295, column: 24, scope: !11579)
!11591 = !DILocation(line: 9295, column: 52, scope: !11579)
!11592 = !DILocation(line: 9295, column: 38, scope: !11579)
!11593 = !DILocation(line: 9300, column: 9, scope: !11594)
!11594 = distinct !DILexicalBlock(scope: !11579, file: !3, line: 9300, column: 8)
!11595 = !DILocation(line: 9300, column: 8, scope: !11594)
!11596 = !DILocation(line: 9300, column: 23, scope: !11594)
!11597 = !DILocation(line: 9300, column: 21, scope: !11594)
!11598 = !DILocation(line: 9300, column: 35, scope: !11594)
!11599 = !DILocation(line: 9300, column: 38, scope: !11594)
!11600 = !DILocation(line: 9300, column: 52, scope: !11594)
!11601 = !DILocation(line: 9300, column: 50, scope: !11594)
!11602 = !DILocation(line: 9300, column: 8, scope: !11579)
!11603 = !DILocalVariable(name: "initial_result", scope: !11604, file: !3, line: 9302, type: !3366)
!11604 = distinct !DILexicalBlock(scope: !11594, file: !3, line: 9301, column: 6)
!11605 = !DILocation(line: 9302, column: 24, scope: !11604)
!11606 = !DILocation(line: 9304, column: 38, scope: !11604)
!11607 = !DILocation(line: 9304, column: 60, scope: !11604)
!11608 = !DILocation(line: 9304, column: 8, scope: !11604)
!11609 = !DILocation(line: 9307, column: 14, scope: !11610)
!11610 = distinct !DILexicalBlock(scope: !11604, file: !3, line: 9307, column: 12)
!11611 = !DILocation(line: 9307, column: 12, scope: !11604)
!11612 = !DILocalVariable(name: "trunc_result", scope: !11613, file: !3, line: 9309, type: !10177)
!11613 = distinct !DILexicalBlock(scope: !11610, file: !3, line: 9308, column: 10)
!11614 = !DILocation(line: 9309, column: 27, scope: !11613)
!11615 = !DILocation(line: 9310, column: 30, scope: !11613)
!11616 = !DILocation(line: 9310, column: 9, scope: !11613)
!11617 = !DILocation(line: 9314, column: 9, scope: !11618)
!11618 = distinct !DILexicalBlock(scope: !11613, file: !3, line: 9314, column: 9)
!11619 = !DILocation(line: 9314, column: 9, scope: !11613)
!11620 = !DILocation(line: 9315, column: 26, scope: !11618)
!11621 = !DILocation(line: 9315, column: 14, scope: !11618)
!11622 = !DILocation(line: 9315, column: 7, scope: !11618)
!11623 = !DILocation(line: 9316, column: 3, scope: !11613)
!11624 = !DILocation(line: 9317, column: 6, scope: !11604)
!11625 = !DILocation(line: 9318, column: 2, scope: !11579)
!11626 = !DILocation(line: 9319, column: 5, scope: !11542)
!11627 = !DILocation(line: 9321, column: 3, scope: !11523)
!11628 = !DILocation(line: 9322, column: 1, scope: !11523)
!11629 = distinct !DISubprogram(name: "fold_builtin_frexp", scope: !3, file: !3, line: 9210, type: !9754, scopeLine: 9211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11630 = !DILocalVariable(name: "loc", arg: 1, scope: !11629, file: !3, line: 9210, type: !3429)
!11631 = !DILocation(line: 9210, column: 32, scope: !11629)
!11632 = !DILocalVariable(name: "arg0", arg: 2, scope: !11629, file: !3, line: 9210, type: !3344)
!11633 = !DILocation(line: 9210, column: 42, scope: !11629)
!11634 = !DILocalVariable(name: "arg1", arg: 3, scope: !11629, file: !3, line: 9210, type: !3344)
!11635 = !DILocation(line: 9210, column: 53, scope: !11629)
!11636 = !DILocalVariable(name: "rettype", arg: 4, scope: !11629, file: !3, line: 9210, type: !3344)
!11637 = !DILocation(line: 9210, column: 64, scope: !11629)
!11638 = !DILocation(line: 9212, column: 23, scope: !11639)
!11639 = distinct !DILexicalBlock(scope: !11629, file: !3, line: 9212, column: 7)
!11640 = !DILocation(line: 9212, column: 9, scope: !11639)
!11641 = !DILocation(line: 9212, column: 40, scope: !11639)
!11642 = !DILocation(line: 9212, column: 59, scope: !11639)
!11643 = !DILocation(line: 9212, column: 45, scope: !11639)
!11644 = !DILocation(line: 9212, column: 7, scope: !11629)
!11645 = !DILocation(line: 9213, column: 5, scope: !11639)
!11646 = !DILocation(line: 9215, column: 3, scope: !11629)
!11647 = !DILocation(line: 9217, column: 9, scope: !11648)
!11648 = distinct !DILexicalBlock(scope: !11629, file: !3, line: 9217, column: 7)
!11649 = !DILocation(line: 9217, column: 26, scope: !11648)
!11650 = !DILocation(line: 9217, column: 38, scope: !11648)
!11651 = !DILocation(line: 9217, column: 43, scope: !11648)
!11652 = !DILocation(line: 9217, column: 7, scope: !11629)
!11653 = !DILocation(line: 9218, column: 5, scope: !11648)
!11654 = !DILocation(line: 9220, column: 39, scope: !11629)
!11655 = !DILocation(line: 9220, column: 44, scope: !11629)
!11656 = !DILocation(line: 9220, column: 10, scope: !11629)
!11657 = !DILocation(line: 9220, column: 8, scope: !11629)
!11658 = !DILocation(line: 9223, column: 7, scope: !11659)
!11659 = distinct !DILexicalBlock(scope: !11629, file: !3, line: 9223, column: 7)
!11660 = !DILocation(line: 9223, column: 47, scope: !11659)
!11661 = !DILocation(line: 9223, column: 44, scope: !11659)
!11662 = !DILocation(line: 9223, column: 7, scope: !11629)
!11663 = !DILocalVariable(name: "value", scope: !11664, file: !3, line: 9225, type: !10724)
!11664 = distinct !DILexicalBlock(scope: !11659, file: !3, line: 9224, column: 5)
!11665 = !DILocation(line: 9225, column: 36, scope: !11664)
!11666 = !DILocation(line: 9225, column: 44, scope: !11664)
!11667 = !DILocalVariable(name: "frac", scope: !11664, file: !3, line: 9226, type: !3344)
!11668 = !DILocation(line: 9226, column: 12, scope: !11664)
!11669 = !DILocalVariable(name: "exp", scope: !11664, file: !3, line: 9226, type: !3344)
!11670 = !DILocation(line: 9226, column: 18, scope: !11664)
!11671 = !DILocation(line: 9228, column: 15, scope: !11664)
!11672 = !DILocation(line: 9228, column: 22, scope: !11664)
!11673 = !DILocation(line: 9228, column: 7, scope: !11664)
!11674 = !DILocation(line: 9232, column: 8, scope: !11675)
!11675 = distinct !DILexicalBlock(scope: !11664, file: !3, line: 9229, column: 7)
!11676 = !DILocation(line: 9232, column: 6, scope: !11675)
!11677 = !DILocation(line: 9233, column: 9, scope: !11675)
!11678 = !DILocation(line: 9233, column: 7, scope: !11675)
!11679 = !DILocation(line: 9234, column: 2, scope: !11675)
!11680 = !DILocation(line: 9238, column: 31, scope: !11675)
!11681 = !DILocation(line: 9238, column: 36, scope: !11675)
!11682 = !DILocation(line: 9238, column: 45, scope: !11675)
!11683 = !DILocation(line: 9238, column: 51, scope: !11675)
!11684 = !DILocation(line: 9238, column: 9, scope: !11675)
!11685 = !DILocation(line: 9238, column: 2, scope: !11675)
!11686 = !DILocalVariable(name: "frac_rvt", scope: !11687, file: !3, line: 9244, type: !3366)
!11687 = distinct !DILexicalBlock(scope: !11675, file: !3, line: 9240, column: 2)
!11688 = !DILocation(line: 9244, column: 20, scope: !11687)
!11689 = !DILocation(line: 9244, column: 32, scope: !11687)
!11690 = !DILocation(line: 9244, column: 31, scope: !11687)
!11691 = !DILocation(line: 9245, column: 4, scope: !11687)
!11692 = !DILocation(line: 9246, column: 23, scope: !11687)
!11693 = !DILocation(line: 9246, column: 11, scope: !11687)
!11694 = !DILocation(line: 9246, column: 9, scope: !11687)
!11695 = !DILocation(line: 9247, column: 36, scope: !11687)
!11696 = !DILocation(line: 9247, column: 10, scope: !11687)
!11697 = !DILocation(line: 9247, column: 8, scope: !11687)
!11698 = !DILocation(line: 9249, column: 2, scope: !11675)
!11699 = !DILocation(line: 9251, column: 2, scope: !11675)
!11700 = !DILocation(line: 9252, column: 7, scope: !11675)
!11701 = !DILocation(line: 9255, column: 14, scope: !11664)
!11702 = !DILocation(line: 9255, column: 12, scope: !11664)
!11703 = !DILocation(line: 9256, column: 7, scope: !11664)
!11704 = !DILocation(line: 9256, column: 32, scope: !11664)
!11705 = !DILocation(line: 9257, column: 14, scope: !11664)
!11706 = !DILocation(line: 9257, column: 7, scope: !11664)
!11707 = !DILocation(line: 9260, column: 3, scope: !11629)
!11708 = !DILocation(line: 9261, column: 1, scope: !11629)
!11709 = distinct !DISubprogram(name: "fold_builtin_modf", scope: !3, file: !3, line: 9327, type: !9754, scopeLine: 9328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11710 = !DILocalVariable(name: "loc", arg: 1, scope: !11709, file: !3, line: 9327, type: !3429)
!11711 = !DILocation(line: 9327, column: 31, scope: !11709)
!11712 = !DILocalVariable(name: "arg0", arg: 2, scope: !11709, file: !3, line: 9327, type: !3344)
!11713 = !DILocation(line: 9327, column: 41, scope: !11709)
!11714 = !DILocalVariable(name: "arg1", arg: 3, scope: !11709, file: !3, line: 9327, type: !3344)
!11715 = !DILocation(line: 9327, column: 52, scope: !11709)
!11716 = !DILocalVariable(name: "rettype", arg: 4, scope: !11709, file: !3, line: 9327, type: !3344)
!11717 = !DILocation(line: 9327, column: 63, scope: !11709)
!11718 = !DILocation(line: 9329, column: 23, scope: !11719)
!11719 = distinct !DILexicalBlock(scope: !11709, file: !3, line: 9329, column: 7)
!11720 = !DILocation(line: 9329, column: 9, scope: !11719)
!11721 = !DILocation(line: 9329, column: 40, scope: !11719)
!11722 = !DILocation(line: 9329, column: 59, scope: !11719)
!11723 = !DILocation(line: 9329, column: 45, scope: !11719)
!11724 = !DILocation(line: 9329, column: 7, scope: !11709)
!11725 = !DILocation(line: 9330, column: 5, scope: !11719)
!11726 = !DILocation(line: 9332, column: 3, scope: !11709)
!11727 = !DILocation(line: 9334, column: 9, scope: !11728)
!11728 = distinct !DILexicalBlock(scope: !11709, file: !3, line: 9334, column: 7)
!11729 = !DILocation(line: 9334, column: 26, scope: !11728)
!11730 = !DILocation(line: 9334, column: 38, scope: !11728)
!11731 = !DILocation(line: 9334, column: 43, scope: !11728)
!11732 = !DILocation(line: 9334, column: 7, scope: !11709)
!11733 = !DILocation(line: 9335, column: 5, scope: !11728)
!11734 = !DILocation(line: 9337, column: 39, scope: !11709)
!11735 = !DILocation(line: 9337, column: 44, scope: !11709)
!11736 = !DILocation(line: 9337, column: 10, scope: !11709)
!11737 = !DILocation(line: 9337, column: 8, scope: !11709)
!11738 = !DILocation(line: 9340, column: 7, scope: !11739)
!11739 = distinct !DILexicalBlock(scope: !11709, file: !3, line: 9340, column: 7)
!11740 = !DILocation(line: 9340, column: 47, scope: !11739)
!11741 = !DILocation(line: 9340, column: 44, scope: !11739)
!11742 = !DILocation(line: 9340, column: 7, scope: !11709)
!11743 = !DILocalVariable(name: "value", scope: !11744, file: !3, line: 9342, type: !10724)
!11744 = distinct !DILexicalBlock(scope: !11739, file: !3, line: 9341, column: 5)
!11745 = !DILocation(line: 9342, column: 36, scope: !11744)
!11746 = !DILocation(line: 9342, column: 44, scope: !11744)
!11747 = !DILocalVariable(name: "trunc", scope: !11744, file: !3, line: 9343, type: !3366)
!11748 = !DILocation(line: 9343, column: 23, scope: !11744)
!11749 = !DILocalVariable(name: "frac", scope: !11744, file: !3, line: 9343, type: !3366)
!11750 = !DILocation(line: 9343, column: 30, scope: !11744)
!11751 = !DILocation(line: 9345, column: 15, scope: !11744)
!11752 = !DILocation(line: 9345, column: 22, scope: !11744)
!11753 = !DILocation(line: 9345, column: 7, scope: !11744)
!11754 = !DILocation(line: 9350, column: 18, scope: !11755)
!11755 = distinct !DILexicalBlock(scope: !11744, file: !3, line: 9346, column: 7)
!11756 = !DILocation(line: 9350, column: 17, scope: !11755)
!11757 = !DILocation(line: 9350, column: 15, scope: !11755)
!11758 = !DILocation(line: 9351, column: 2, scope: !11755)
!11759 = !DILocation(line: 9354, column: 9, scope: !11755)
!11760 = !DILocation(line: 9355, column: 14, scope: !11755)
!11761 = !DILocation(line: 9355, column: 21, scope: !11755)
!11762 = !DILocation(line: 9355, column: 7, scope: !11755)
!11763 = !DILocation(line: 9355, column: 12, scope: !11755)
!11764 = !DILocation(line: 9356, column: 11, scope: !11755)
!11765 = !DILocation(line: 9356, column: 10, scope: !11755)
!11766 = !DILocation(line: 9357, column: 2, scope: !11755)
!11767 = !DILocation(line: 9360, column: 32, scope: !11755)
!11768 = !DILocation(line: 9360, column: 2, scope: !11755)
!11769 = !DILocation(line: 9361, column: 38, scope: !11755)
!11770 = !DILocation(line: 9361, column: 2, scope: !11755)
!11771 = !DILocation(line: 9364, column: 6, scope: !11772)
!11772 = distinct !DILexicalBlock(scope: !11755, file: !3, line: 9364, column: 6)
!11773 = !DILocation(line: 9364, column: 13, scope: !11772)
!11774 = !DILocation(line: 9364, column: 18, scope: !11772)
!11775 = !DILocation(line: 9364, column: 26, scope: !11772)
!11776 = !DILocation(line: 9364, column: 29, scope: !11772)
!11777 = !DILocation(line: 9364, column: 6, scope: !11755)
!11778 = !DILocation(line: 9365, column: 16, scope: !11772)
!11779 = !DILocation(line: 9365, column: 23, scope: !11772)
!11780 = !DILocation(line: 9365, column: 9, scope: !11772)
!11781 = !DILocation(line: 9365, column: 14, scope: !11772)
!11782 = !DILocation(line: 9365, column: 4, scope: !11772)
!11783 = !DILocation(line: 9366, column: 2, scope: !11755)
!11784 = !DILocation(line: 9370, column: 14, scope: !11744)
!11785 = !DILocation(line: 9370, column: 12, scope: !11744)
!11786 = !DILocation(line: 9372, column: 7, scope: !11744)
!11787 = !DILocation(line: 9372, column: 32, scope: !11744)
!11788 = !DILocation(line: 9373, column: 14, scope: !11744)
!11789 = !DILocation(line: 9373, column: 7, scope: !11744)
!11790 = !DILocation(line: 9377, column: 3, scope: !11709)
!11791 = !DILocation(line: 9378, column: 1, scope: !11709)
!11792 = distinct !DISubprogram(name: "fold_builtin_bzero", scope: !3, file: !3, line: 8191, type: !6851, scopeLine: 8192, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11793 = !DILocalVariable(name: "loc", arg: 1, scope: !11792, file: !3, line: 8191, type: !3429)
!11794 = !DILocation(line: 8191, column: 32, scope: !11792)
!11795 = !DILocalVariable(name: "dest", arg: 2, scope: !11792, file: !3, line: 8191, type: !3344)
!11796 = !DILocation(line: 8191, column: 42, scope: !11792)
!11797 = !DILocalVariable(name: "size", arg: 3, scope: !11792, file: !3, line: 8191, type: !3344)
!11798 = !DILocation(line: 8191, column: 53, scope: !11792)
!11799 = !DILocalVariable(name: "ignore", arg: 4, scope: !11792, file: !3, line: 8191, type: !3421)
!11800 = !DILocation(line: 8191, column: 64, scope: !11792)
!11801 = !DILocation(line: 8193, column: 23, scope: !11802)
!11802 = distinct !DILexicalBlock(scope: !11792, file: !3, line: 8193, column: 7)
!11803 = !DILocation(line: 8193, column: 9, scope: !11802)
!11804 = !DILocation(line: 8194, column: 7, scope: !11802)
!11805 = !DILocation(line: 8194, column: 26, scope: !11802)
!11806 = !DILocation(line: 8194, column: 12, scope: !11802)
!11807 = !DILocation(line: 8193, column: 7, scope: !11792)
!11808 = !DILocation(line: 8195, column: 5, scope: !11802)
!11809 = !DILocation(line: 8197, column: 8, scope: !11810)
!11810 = distinct !DILexicalBlock(scope: !11792, file: !3, line: 8197, column: 7)
!11811 = !DILocation(line: 8197, column: 7, scope: !11792)
!11812 = !DILocation(line: 8198, column: 5, scope: !11810)
!11813 = !DILocation(line: 8205, column: 31, scope: !11792)
!11814 = !DILocation(line: 8205, column: 36, scope: !11792)
!11815 = !DILocation(line: 8205, column: 42, scope: !11792)
!11816 = !DILocation(line: 8206, column: 28, scope: !11792)
!11817 = !DILocation(line: 8206, column: 33, scope: !11792)
!11818 = !DILocation(line: 8206, column: 43, scope: !11792)
!11819 = !DILocation(line: 8206, column: 10, scope: !11792)
!11820 = !DILocation(line: 8207, column: 10, scope: !11792)
!11821 = !DILocation(line: 8207, column: 26, scope: !11792)
!11822 = !DILocation(line: 8205, column: 10, scope: !11792)
!11823 = !DILocation(line: 8205, column: 3, scope: !11792)
!11824 = !DILocation(line: 8208, column: 1, scope: !11792)
!11825 = distinct !DISubprogram(name: "fold_builtin_strstr", scope: !3, file: !3, line: 11113, type: !9754, scopeLine: 11114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11826 = !DILocalVariable(name: "loc", arg: 1, scope: !11825, file: !3, line: 11113, type: !3429)
!11827 = !DILocation(line: 11113, column: 33, scope: !11825)
!11828 = !DILocalVariable(name: "s1", arg: 2, scope: !11825, file: !3, line: 11113, type: !3344)
!11829 = !DILocation(line: 11113, column: 43, scope: !11825)
!11830 = !DILocalVariable(name: "s2", arg: 3, scope: !11825, file: !3, line: 11113, type: !3344)
!11831 = !DILocation(line: 11113, column: 52, scope: !11825)
!11832 = !DILocalVariable(name: "type", arg: 4, scope: !11825, file: !3, line: 11113, type: !3344)
!11833 = !DILocation(line: 11113, column: 61, scope: !11825)
!11834 = !DILocation(line: 11115, column: 22, scope: !11835)
!11835 = distinct !DILexicalBlock(scope: !11825, file: !3, line: 11115, column: 7)
!11836 = !DILocation(line: 11115, column: 8, scope: !11835)
!11837 = !DILocation(line: 11116, column: 7, scope: !11835)
!11838 = !DILocation(line: 11116, column: 25, scope: !11835)
!11839 = !DILocation(line: 11116, column: 11, scope: !11835)
!11840 = !DILocation(line: 11115, column: 7, scope: !11825)
!11841 = !DILocation(line: 11117, column: 5, scope: !11835)
!11842 = !DILocalVariable(name: "fn", scope: !11843, file: !3, line: 11120, type: !3344)
!11843 = distinct !DILexicalBlock(scope: !11835, file: !3, line: 11119, column: 5)
!11844 = !DILocation(line: 11120, column: 12, scope: !11843)
!11845 = !DILocalVariable(name: "p1", scope: !11843, file: !3, line: 11121, type: !3504)
!11846 = !DILocation(line: 11121, column: 19, scope: !11843)
!11847 = !DILocalVariable(name: "p2", scope: !11843, file: !3, line: 11121, type: !3504)
!11848 = !DILocation(line: 11121, column: 24, scope: !11843)
!11849 = !DILocation(line: 11123, column: 22, scope: !11843)
!11850 = !DILocation(line: 11123, column: 12, scope: !11843)
!11851 = !DILocation(line: 11123, column: 10, scope: !11843)
!11852 = !DILocation(line: 11124, column: 11, scope: !11853)
!11853 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 11124, column: 11)
!11854 = !DILocation(line: 11124, column: 14, scope: !11853)
!11855 = !DILocation(line: 11124, column: 11, scope: !11843)
!11856 = !DILocation(line: 11125, column: 2, scope: !11853)
!11857 = !DILocation(line: 11127, column: 22, scope: !11843)
!11858 = !DILocation(line: 11127, column: 12, scope: !11843)
!11859 = !DILocation(line: 11127, column: 10, scope: !11843)
!11860 = !DILocation(line: 11128, column: 11, scope: !11861)
!11861 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 11128, column: 11)
!11862 = !DILocation(line: 11128, column: 14, scope: !11861)
!11863 = !DILocation(line: 11128, column: 11, scope: !11843)
!11864 = !DILocalVariable(name: "r", scope: !11865, file: !3, line: 11130, type: !3504)
!11865 = distinct !DILexicalBlock(scope: !11861, file: !3, line: 11129, column: 2)
!11866 = !DILocation(line: 11130, column: 16, scope: !11865)
!11867 = !DILocation(line: 11130, column: 28, scope: !11865)
!11868 = !DILocation(line: 11130, column: 32, scope: !11865)
!11869 = !DILocation(line: 11130, column: 20, scope: !11865)
!11870 = !DILocalVariable(name: "tem", scope: !11865, file: !3, line: 11131, type: !3344)
!11871 = !DILocation(line: 11131, column: 9, scope: !11865)
!11872 = !DILocation(line: 11133, column: 8, scope: !11873)
!11873 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 11133, column: 8)
!11874 = !DILocation(line: 11133, column: 10, scope: !11873)
!11875 = !DILocation(line: 11133, column: 8, scope: !11865)
!11876 = !DILocation(line: 11134, column: 28, scope: !11873)
!11877 = !DILocation(line: 11134, column: 13, scope: !11873)
!11878 = !DILocation(line: 11134, column: 6, scope: !11873)
!11879 = !DILocation(line: 11137, column: 10, scope: !11865)
!11880 = !DILocation(line: 11137, column: 8, scope: !11865)
!11881 = !DILocation(line: 11139, column: 29, scope: !11865)
!11882 = !DILocation(line: 11139, column: 34, scope: !11865)
!11883 = !DILocation(line: 11139, column: 40, scope: !11865)
!11884 = !DILocation(line: 11139, column: 11, scope: !11865)
!11885 = !DILocation(line: 11139, column: 4, scope: !11865)
!11886 = !DILocation(line: 11144, column: 11, scope: !11887)
!11887 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 11144, column: 11)
!11888 = !DILocation(line: 11144, column: 17, scope: !11887)
!11889 = !DILocation(line: 11144, column: 11, scope: !11843)
!11890 = !DILocation(line: 11145, column: 27, scope: !11887)
!11891 = !DILocation(line: 11145, column: 32, scope: !11887)
!11892 = !DILocation(line: 11145, column: 38, scope: !11887)
!11893 = !DILocation(line: 11145, column: 9, scope: !11887)
!11894 = !DILocation(line: 11145, column: 2, scope: !11887)
!11895 = !DILocation(line: 11147, column: 11, scope: !11896)
!11896 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 11147, column: 11)
!11897 = !DILocation(line: 11147, column: 17, scope: !11896)
!11898 = !DILocation(line: 11147, column: 11, scope: !11843)
!11899 = !DILocation(line: 11148, column: 2, scope: !11896)
!11900 = !DILocation(line: 11150, column: 12, scope: !11843)
!11901 = !DILocation(line: 11150, column: 10, scope: !11843)
!11902 = !DILocation(line: 11151, column: 12, scope: !11903)
!11903 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 11151, column: 11)
!11904 = !DILocation(line: 11151, column: 11, scope: !11843)
!11905 = !DILocation(line: 11152, column: 2, scope: !11903)
!11906 = !DILocation(line: 11156, column: 35, scope: !11843)
!11907 = !DILocation(line: 11156, column: 40, scope: !11843)
!11908 = !DILocation(line: 11156, column: 47, scope: !11843)
!11909 = !DILocation(line: 11156, column: 77, scope: !11843)
!11910 = !DILocation(line: 11156, column: 51, scope: !11843)
!11911 = !DILocation(line: 11156, column: 14, scope: !11843)
!11912 = !DILocation(line: 11156, column: 7, scope: !11843)
!11913 = !DILocation(line: 11158, column: 1, scope: !11825)
!11914 = distinct !DISubprogram(name: "fold_builtin_strcat", scope: !3, file: !3, line: 11365, type: !6901, scopeLine: 11366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11915 = !DILocalVariable(name: "loc", arg: 1, scope: !11914, file: !3, line: 11365, type: !3429)
!11916 = !DILocation(line: 11365, column: 33, scope: !11914)
!11917 = !DILocalVariable(name: "dst", arg: 2, scope: !11914, file: !3, line: 11365, type: !3344)
!11918 = !DILocation(line: 11365, column: 60, scope: !11914)
!11919 = !DILocalVariable(name: "src", arg: 3, scope: !11914, file: !3, line: 11365, type: !3344)
!11920 = !DILocation(line: 11365, column: 70, scope: !11914)
!11921 = !DILocation(line: 11367, column: 22, scope: !11922)
!11922 = distinct !DILexicalBlock(scope: !11914, file: !3, line: 11367, column: 7)
!11923 = !DILocation(line: 11367, column: 8, scope: !11922)
!11924 = !DILocation(line: 11368, column: 7, scope: !11922)
!11925 = !DILocation(line: 11368, column: 25, scope: !11922)
!11926 = !DILocation(line: 11368, column: 11, scope: !11922)
!11927 = !DILocation(line: 11367, column: 7, scope: !11914)
!11928 = !DILocation(line: 11369, column: 5, scope: !11922)
!11929 = !DILocalVariable(name: "p", scope: !11930, file: !3, line: 11372, type: !3504)
!11930 = distinct !DILexicalBlock(scope: !11922, file: !3, line: 11371, column: 5)
!11931 = !DILocation(line: 11372, column: 19, scope: !11930)
!11932 = !DILocation(line: 11372, column: 33, scope: !11930)
!11933 = !DILocation(line: 11372, column: 23, scope: !11930)
!11934 = !DILocation(line: 11375, column: 11, scope: !11935)
!11935 = distinct !DILexicalBlock(scope: !11930, file: !3, line: 11375, column: 11)
!11936 = !DILocation(line: 11375, column: 13, scope: !11935)
!11937 = !DILocation(line: 11375, column: 17, scope: !11935)
!11938 = !DILocation(line: 11375, column: 16, scope: !11935)
!11939 = !DILocation(line: 11375, column: 19, scope: !11935)
!11940 = !DILocation(line: 11375, column: 11, scope: !11930)
!11941 = !DILocation(line: 11376, column: 9, scope: !11935)
!11942 = !DILocation(line: 11376, column: 2, scope: !11935)
!11943 = !DILocation(line: 11378, column: 11, scope: !11944)
!11944 = distinct !DILexicalBlock(scope: !11930, file: !3, line: 11378, column: 11)
!11945 = !DILocation(line: 11378, column: 11, scope: !11930)
!11946 = !DILocalVariable(name: "newdst", scope: !11947, file: !3, line: 11381, type: !3344)
!11947 = distinct !DILexicalBlock(scope: !11944, file: !3, line: 11379, column: 2)
!11948 = !DILocation(line: 11381, column: 9, scope: !11947)
!11949 = !DILocalVariable(name: "call", scope: !11947, file: !3, line: 11381, type: !3344)
!11950 = !DILocation(line: 11381, column: 17, scope: !11947)
!11951 = !DILocalVariable(name: "strlen_fn", scope: !11947, file: !3, line: 11382, type: !3344)
!11952 = !DILocation(line: 11382, column: 9, scope: !11947)
!11953 = !DILocation(line: 11382, column: 21, scope: !11947)
!11954 = !DILocalVariable(name: "strcpy_fn", scope: !11947, file: !3, line: 11383, type: !3344)
!11955 = !DILocation(line: 11383, column: 9, scope: !11947)
!11956 = !DILocation(line: 11383, column: 21, scope: !11947)
!11957 = !DILocation(line: 11385, column: 9, scope: !11958)
!11958 = distinct !DILexicalBlock(scope: !11947, file: !3, line: 11385, column: 8)
!11959 = !DILocation(line: 11385, column: 19, scope: !11958)
!11960 = !DILocation(line: 11385, column: 23, scope: !11958)
!11961 = !DILocation(line: 11385, column: 8, scope: !11947)
!11962 = !DILocation(line: 11386, column: 6, scope: !11958)
!11963 = !DILocalVariable(name: "len", scope: !11964, file: !3, line: 11395, type: !3344)
!11964 = distinct !DILexicalBlock(scope: !11965, file: !3, line: 11394, column: 6)
!11965 = distinct !DILexicalBlock(scope: !11947, file: !3, line: 11393, column: 8)
!11966 = !DILocation(line: 11395, column: 13, scope: !11964)
!11967 = !DILocation(line: 11395, column: 29, scope: !11964)
!11968 = !DILocation(line: 11395, column: 19, scope: !11964)
!11969 = !DILocation(line: 11396, column: 14, scope: !11970)
!11970 = distinct !DILexicalBlock(scope: !11964, file: !3, line: 11396, column: 12)
!11971 = !DILocation(line: 11396, column: 18, scope: !11970)
!11972 = !DILocation(line: 11396, column: 21, scope: !11970)
!11973 = !DILocation(line: 11396, column: 12, scope: !11964)
!11974 = !DILocation(line: 11397, column: 3, scope: !11970)
!11975 = !DILocation(line: 11401, column: 29, scope: !11947)
!11976 = !DILocation(line: 11401, column: 10, scope: !11947)
!11977 = !DILocation(line: 11401, column: 8, scope: !11947)
!11978 = !DILocation(line: 11404, column: 34, scope: !11947)
!11979 = !DILocation(line: 11404, column: 39, scope: !11947)
!11980 = !DILocation(line: 11404, column: 53, scope: !11947)
!11981 = !DILocation(line: 11404, column: 13, scope: !11947)
!11982 = !DILocation(line: 11404, column: 11, scope: !11947)
!11983 = !DILocation(line: 11407, column: 13, scope: !11947)
!11984 = !DILocation(line: 11407, column: 11, scope: !11947)
!11985 = !DILocation(line: 11409, column: 32, scope: !11947)
!11986 = !DILocation(line: 11409, column: 13, scope: !11947)
!11987 = !DILocation(line: 11409, column: 11, scope: !11947)
!11988 = !DILocation(line: 11411, column: 32, scope: !11947)
!11989 = !DILocation(line: 11411, column: 37, scope: !11947)
!11990 = !DILocation(line: 11411, column: 51, scope: !11947)
!11991 = !DILocation(line: 11411, column: 59, scope: !11947)
!11992 = !DILocation(line: 11411, column: 11, scope: !11947)
!11993 = !DILocation(line: 11411, column: 9, scope: !11947)
!11994 = !DILocation(line: 11412, column: 11, scope: !11947)
!11995 = !DILocation(line: 11412, column: 4, scope: !11947)
!11996 = !DILocation(line: 11414, column: 7, scope: !11930)
!11997 = !DILocation(line: 11416, column: 1, scope: !11914)
!11998 = distinct !DISubprogram(name: "fold_builtin_strspn", scope: !3, file: !3, line: 11489, type: !6901, scopeLine: 11490, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!11999 = !DILocalVariable(name: "loc", arg: 1, scope: !11998, file: !3, line: 11489, type: !3429)
!12000 = !DILocation(line: 11489, column: 33, scope: !11998)
!12001 = !DILocalVariable(name: "s1", arg: 2, scope: !11998, file: !3, line: 11489, type: !3344)
!12002 = !DILocation(line: 11489, column: 43, scope: !11998)
!12003 = !DILocalVariable(name: "s2", arg: 3, scope: !11998, file: !3, line: 11489, type: !3344)
!12004 = !DILocation(line: 11489, column: 52, scope: !11998)
!12005 = !DILocation(line: 11491, column: 22, scope: !12006)
!12006 = distinct !DILexicalBlock(scope: !11998, file: !3, line: 11491, column: 7)
!12007 = !DILocation(line: 11491, column: 8, scope: !12006)
!12008 = !DILocation(line: 11492, column: 7, scope: !12006)
!12009 = !DILocation(line: 11492, column: 25, scope: !12006)
!12010 = !DILocation(line: 11492, column: 11, scope: !12006)
!12011 = !DILocation(line: 11491, column: 7, scope: !11998)
!12012 = !DILocation(line: 11493, column: 5, scope: !12006)
!12013 = !DILocalVariable(name: "p1", scope: !12014, file: !3, line: 11496, type: !3504)
!12014 = distinct !DILexicalBlock(scope: !12006, file: !3, line: 11495, column: 5)
!12015 = !DILocation(line: 11496, column: 19, scope: !12014)
!12016 = !DILocation(line: 11496, column: 34, scope: !12014)
!12017 = !DILocation(line: 11496, column: 24, scope: !12014)
!12018 = !DILocalVariable(name: "p2", scope: !12014, file: !3, line: 11496, type: !3504)
!12019 = !DILocation(line: 11496, column: 40, scope: !12014)
!12020 = !DILocation(line: 11496, column: 55, scope: !12014)
!12021 = !DILocation(line: 11496, column: 45, scope: !12014)
!12022 = !DILocation(line: 11499, column: 11, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 11499, column: 11)
!12024 = !DILocation(line: 11499, column: 14, scope: !12023)
!12025 = !DILocation(line: 11499, column: 17, scope: !12023)
!12026 = !DILocation(line: 11499, column: 11, scope: !12014)
!12027 = !DILocalVariable(name: "r", scope: !12028, file: !3, line: 11501, type: !12029)
!12028 = distinct !DILexicalBlock(scope: !12023, file: !3, line: 11500, column: 2)
!12029 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3777)
!12030 = !DILocation(line: 11501, column: 17, scope: !12028)
!12031 = !DILocation(line: 11501, column: 29, scope: !12028)
!12032 = !DILocation(line: 11501, column: 33, scope: !12028)
!12033 = !DILocation(line: 11501, column: 21, scope: !12028)
!12034 = !DILocation(line: 11502, column: 11, scope: !12028)
!12035 = !DILocation(line: 11502, column: 4, scope: !12028)
!12036 = !DILocation(line: 11506, column: 12, scope: !12037)
!12037 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 11506, column: 11)
!12038 = !DILocation(line: 11506, column: 15, scope: !12037)
!12039 = !DILocation(line: 11506, column: 19, scope: !12037)
!12040 = !DILocation(line: 11506, column: 18, scope: !12037)
!12041 = !DILocation(line: 11506, column: 22, scope: !12037)
!12042 = !DILocation(line: 11506, column: 31, scope: !12037)
!12043 = !DILocation(line: 11506, column: 35, scope: !12037)
!12044 = !DILocation(line: 11506, column: 38, scope: !12037)
!12045 = !DILocation(line: 11506, column: 42, scope: !12037)
!12046 = !DILocation(line: 11506, column: 41, scope: !12037)
!12047 = !DILocation(line: 11506, column: 45, scope: !12037)
!12048 = !DILocation(line: 11506, column: 11, scope: !12014)
!12049 = !DILocation(line: 11509, column: 32, scope: !12037)
!12050 = !DILocation(line: 11509, column: 37, scope: !12037)
!12051 = !DILocation(line: 11509, column: 53, scope: !12037)
!12052 = !DILocation(line: 11510, column: 7, scope: !12037)
!12053 = !DILocation(line: 11510, column: 11, scope: !12037)
!12054 = !DILocation(line: 11509, column: 9, scope: !12037)
!12055 = !DILocation(line: 11509, column: 2, scope: !12037)
!12056 = !DILocation(line: 11511, column: 7, scope: !12014)
!12057 = !DILocation(line: 11513, column: 1, scope: !11998)
!12058 = distinct !DISubprogram(name: "fold_builtin_strcspn", scope: !3, file: !3, line: 11534, type: !6901, scopeLine: 11535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12059 = !DILocalVariable(name: "loc", arg: 1, scope: !12058, file: !3, line: 11534, type: !3429)
!12060 = !DILocation(line: 11534, column: 34, scope: !12058)
!12061 = !DILocalVariable(name: "s1", arg: 2, scope: !12058, file: !3, line: 11534, type: !3344)
!12062 = !DILocation(line: 11534, column: 44, scope: !12058)
!12063 = !DILocalVariable(name: "s2", arg: 3, scope: !12058, file: !3, line: 11534, type: !3344)
!12064 = !DILocation(line: 11534, column: 53, scope: !12058)
!12065 = !DILocation(line: 11536, column: 22, scope: !12066)
!12066 = distinct !DILexicalBlock(scope: !12058, file: !3, line: 11536, column: 7)
!12067 = !DILocation(line: 11536, column: 8, scope: !12066)
!12068 = !DILocation(line: 11537, column: 7, scope: !12066)
!12069 = !DILocation(line: 11537, column: 25, scope: !12066)
!12070 = !DILocation(line: 11537, column: 11, scope: !12066)
!12071 = !DILocation(line: 11536, column: 7, scope: !12058)
!12072 = !DILocation(line: 11538, column: 5, scope: !12066)
!12073 = !DILocalVariable(name: "p1", scope: !12074, file: !3, line: 11541, type: !3504)
!12074 = distinct !DILexicalBlock(scope: !12066, file: !3, line: 11540, column: 5)
!12075 = !DILocation(line: 11541, column: 19, scope: !12074)
!12076 = !DILocation(line: 11541, column: 34, scope: !12074)
!12077 = !DILocation(line: 11541, column: 24, scope: !12074)
!12078 = !DILocalVariable(name: "p2", scope: !12074, file: !3, line: 11541, type: !3504)
!12079 = !DILocation(line: 11541, column: 40, scope: !12074)
!12080 = !DILocation(line: 11541, column: 55, scope: !12074)
!12081 = !DILocation(line: 11541, column: 45, scope: !12074)
!12082 = !DILocation(line: 11544, column: 11, scope: !12083)
!12083 = distinct !DILexicalBlock(scope: !12074, file: !3, line: 11544, column: 11)
!12084 = !DILocation(line: 11544, column: 14, scope: !12083)
!12085 = !DILocation(line: 11544, column: 17, scope: !12083)
!12086 = !DILocation(line: 11544, column: 11, scope: !12074)
!12087 = !DILocalVariable(name: "r", scope: !12088, file: !3, line: 11546, type: !12029)
!12088 = distinct !DILexicalBlock(scope: !12083, file: !3, line: 11545, column: 2)
!12089 = !DILocation(line: 11546, column: 17, scope: !12088)
!12090 = !DILocation(line: 11546, column: 30, scope: !12088)
!12091 = !DILocation(line: 11546, column: 34, scope: !12088)
!12092 = !DILocation(line: 11546, column: 21, scope: !12088)
!12093 = !DILocation(line: 11547, column: 11, scope: !12088)
!12094 = !DILocation(line: 11547, column: 4, scope: !12088)
!12095 = !DILocation(line: 11551, column: 11, scope: !12096)
!12096 = distinct !DILexicalBlock(scope: !12074, file: !3, line: 11551, column: 11)
!12097 = !DILocation(line: 11551, column: 14, scope: !12096)
!12098 = !DILocation(line: 11551, column: 18, scope: !12096)
!12099 = !DILocation(line: 11551, column: 17, scope: !12096)
!12100 = !DILocation(line: 11551, column: 21, scope: !12096)
!12101 = !DILocation(line: 11551, column: 11, scope: !12074)
!12102 = !DILocation(line: 11555, column: 33, scope: !12103)
!12103 = distinct !DILexicalBlock(scope: !12096, file: !3, line: 11552, column: 2)
!12104 = !DILocation(line: 11555, column: 38, scope: !12103)
!12105 = !DILocation(line: 11556, column: 8, scope: !12103)
!12106 = !DILocation(line: 11556, column: 24, scope: !12103)
!12107 = !DILocation(line: 11555, column: 11, scope: !12103)
!12108 = !DILocation(line: 11555, column: 4, scope: !12103)
!12109 = !DILocation(line: 11560, column: 11, scope: !12110)
!12110 = distinct !DILexicalBlock(scope: !12074, file: !3, line: 11560, column: 11)
!12111 = !DILocation(line: 11560, column: 14, scope: !12110)
!12112 = !DILocation(line: 11560, column: 18, scope: !12110)
!12113 = !DILocation(line: 11560, column: 17, scope: !12110)
!12114 = !DILocation(line: 11560, column: 21, scope: !12110)
!12115 = !DILocation(line: 11560, column: 11, scope: !12074)
!12116 = !DILocalVariable(name: "fn", scope: !12117, file: !3, line: 11562, type: !3344)
!12117 = distinct !DILexicalBlock(scope: !12110, file: !3, line: 11561, column: 2)
!12118 = !DILocation(line: 11562, column: 9, scope: !12117)
!12119 = !DILocation(line: 11562, column: 14, scope: !12117)
!12120 = !DILocation(line: 11566, column: 9, scope: !12121)
!12121 = distinct !DILexicalBlock(scope: !12117, file: !3, line: 11566, column: 8)
!12122 = !DILocation(line: 11566, column: 8, scope: !12117)
!12123 = !DILocation(line: 11567, column: 6, scope: !12121)
!12124 = !DILocation(line: 11569, column: 32, scope: !12117)
!12125 = !DILocation(line: 11569, column: 37, scope: !12117)
!12126 = !DILocation(line: 11569, column: 44, scope: !12117)
!12127 = !DILocation(line: 11569, column: 11, scope: !12117)
!12128 = !DILocation(line: 11569, column: 4, scope: !12117)
!12129 = !DILocation(line: 11571, column: 7, scope: !12074)
!12130 = !DILocation(line: 11573, column: 1, scope: !12058)
!12131 = distinct !DISubprogram(name: "fold_builtin_strchr", scope: !3, file: !3, line: 11179, type: !9754, scopeLine: 11180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12132 = !DILocalVariable(name: "loc", arg: 1, scope: !12131, file: !3, line: 11179, type: !3429)
!12133 = !DILocation(line: 11179, column: 33, scope: !12131)
!12134 = !DILocalVariable(name: "s1", arg: 2, scope: !12131, file: !3, line: 11179, type: !3344)
!12135 = !DILocation(line: 11179, column: 43, scope: !12131)
!12136 = !DILocalVariable(name: "s2", arg: 3, scope: !12131, file: !3, line: 11179, type: !3344)
!12137 = !DILocation(line: 11179, column: 52, scope: !12131)
!12138 = !DILocalVariable(name: "type", arg: 4, scope: !12131, file: !3, line: 11179, type: !3344)
!12139 = !DILocation(line: 11179, column: 61, scope: !12131)
!12140 = !DILocation(line: 11181, column: 22, scope: !12141)
!12141 = distinct !DILexicalBlock(scope: !12131, file: !3, line: 11181, column: 7)
!12142 = !DILocation(line: 11181, column: 8, scope: !12141)
!12143 = !DILocation(line: 11182, column: 7, scope: !12141)
!12144 = !DILocation(line: 11182, column: 25, scope: !12141)
!12145 = !DILocation(line: 11182, column: 11, scope: !12141)
!12146 = !DILocation(line: 11181, column: 7, scope: !12131)
!12147 = !DILocation(line: 11183, column: 5, scope: !12141)
!12148 = !DILocalVariable(name: "p1", scope: !12149, file: !3, line: 11186, type: !3504)
!12149 = distinct !DILexicalBlock(scope: !12141, file: !3, line: 11185, column: 5)
!12150 = !DILocation(line: 11186, column: 19, scope: !12149)
!12151 = !DILocation(line: 11188, column: 11, scope: !12152)
!12152 = distinct !DILexicalBlock(scope: !12149, file: !3, line: 11188, column: 11)
!12153 = !DILocation(line: 11188, column: 26, scope: !12152)
!12154 = !DILocation(line: 11188, column: 11, scope: !12149)
!12155 = !DILocation(line: 11189, column: 2, scope: !12152)
!12156 = !DILocation(line: 11191, column: 22, scope: !12149)
!12157 = !DILocation(line: 11191, column: 12, scope: !12149)
!12158 = !DILocation(line: 11191, column: 10, scope: !12149)
!12159 = !DILocation(line: 11192, column: 11, scope: !12160)
!12160 = distinct !DILexicalBlock(scope: !12149, file: !3, line: 11192, column: 11)
!12161 = !DILocation(line: 11192, column: 14, scope: !12160)
!12162 = !DILocation(line: 11192, column: 11, scope: !12149)
!12163 = !DILocalVariable(name: "c", scope: !12164, file: !3, line: 11194, type: !3401)
!12164 = distinct !DILexicalBlock(scope: !12160, file: !3, line: 11193, column: 2)
!12165 = !DILocation(line: 11194, column: 9, scope: !12164)
!12166 = !DILocalVariable(name: "r", scope: !12164, file: !3, line: 11195, type: !3504)
!12167 = !DILocation(line: 11195, column: 16, scope: !12164)
!12168 = !DILocalVariable(name: "tem", scope: !12164, file: !3, line: 11196, type: !3344)
!12169 = !DILocation(line: 11196, column: 9, scope: !12164)
!12170 = !DILocation(line: 11198, column: 26, scope: !12171)
!12171 = distinct !DILexicalBlock(scope: !12164, file: !3, line: 11198, column: 8)
!12172 = !DILocation(line: 11198, column: 8, scope: !12171)
!12173 = !DILocation(line: 11198, column: 8, scope: !12164)
!12174 = !DILocation(line: 11199, column: 6, scope: !12171)
!12175 = !DILocation(line: 11201, column: 16, scope: !12164)
!12176 = !DILocation(line: 11201, column: 20, scope: !12164)
!12177 = !DILocation(line: 11201, column: 8, scope: !12164)
!12178 = !DILocation(line: 11201, column: 6, scope: !12164)
!12179 = !DILocation(line: 11203, column: 8, scope: !12180)
!12180 = distinct !DILexicalBlock(scope: !12164, file: !3, line: 11203, column: 8)
!12181 = !DILocation(line: 11203, column: 10, scope: !12180)
!12182 = !DILocation(line: 11203, column: 8, scope: !12164)
!12183 = !DILocation(line: 11204, column: 28, scope: !12180)
!12184 = !DILocation(line: 11204, column: 13, scope: !12180)
!12185 = !DILocation(line: 11204, column: 6, scope: !12180)
!12186 = !DILocation(line: 11207, column: 10, scope: !12164)
!12187 = !DILocation(line: 11207, column: 8, scope: !12164)
!12188 = !DILocation(line: 11209, column: 29, scope: !12164)
!12189 = !DILocation(line: 11209, column: 34, scope: !12164)
!12190 = !DILocation(line: 11209, column: 40, scope: !12164)
!12191 = !DILocation(line: 11209, column: 11, scope: !12164)
!12192 = !DILocation(line: 11209, column: 4, scope: !12164)
!12193 = !DILocation(line: 11211, column: 7, scope: !12149)
!12194 = !DILocation(line: 11213, column: 1, scope: !12131)
!12195 = distinct !DISubprogram(name: "fold_builtin_strrchr", scope: !3, file: !3, line: 11234, type: !9754, scopeLine: 11235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12196 = !DILocalVariable(name: "loc", arg: 1, scope: !12195, file: !3, line: 11234, type: !3429)
!12197 = !DILocation(line: 11234, column: 34, scope: !12195)
!12198 = !DILocalVariable(name: "s1", arg: 2, scope: !12195, file: !3, line: 11234, type: !3344)
!12199 = !DILocation(line: 11234, column: 44, scope: !12195)
!12200 = !DILocalVariable(name: "s2", arg: 3, scope: !12195, file: !3, line: 11234, type: !3344)
!12201 = !DILocation(line: 11234, column: 53, scope: !12195)
!12202 = !DILocalVariable(name: "type", arg: 4, scope: !12195, file: !3, line: 11234, type: !3344)
!12203 = !DILocation(line: 11234, column: 62, scope: !12195)
!12204 = !DILocation(line: 11236, column: 22, scope: !12205)
!12205 = distinct !DILexicalBlock(scope: !12195, file: !3, line: 11236, column: 7)
!12206 = !DILocation(line: 11236, column: 8, scope: !12205)
!12207 = !DILocation(line: 11237, column: 7, scope: !12205)
!12208 = !DILocation(line: 11237, column: 25, scope: !12205)
!12209 = !DILocation(line: 11237, column: 11, scope: !12205)
!12210 = !DILocation(line: 11236, column: 7, scope: !12195)
!12211 = !DILocation(line: 11238, column: 5, scope: !12205)
!12212 = !DILocalVariable(name: "fn", scope: !12213, file: !3, line: 11241, type: !3344)
!12213 = distinct !DILexicalBlock(scope: !12205, file: !3, line: 11240, column: 5)
!12214 = !DILocation(line: 11241, column: 12, scope: !12213)
!12215 = !DILocalVariable(name: "p1", scope: !12213, file: !3, line: 11242, type: !3504)
!12216 = !DILocation(line: 11242, column: 19, scope: !12213)
!12217 = !DILocation(line: 11244, column: 11, scope: !12218)
!12218 = distinct !DILexicalBlock(scope: !12213, file: !3, line: 11244, column: 11)
!12219 = !DILocation(line: 11244, column: 26, scope: !12218)
!12220 = !DILocation(line: 11244, column: 11, scope: !12213)
!12221 = !DILocation(line: 11245, column: 2, scope: !12218)
!12222 = !DILocation(line: 11247, column: 22, scope: !12213)
!12223 = !DILocation(line: 11247, column: 12, scope: !12213)
!12224 = !DILocation(line: 11247, column: 10, scope: !12213)
!12225 = !DILocation(line: 11248, column: 11, scope: !12226)
!12226 = distinct !DILexicalBlock(scope: !12213, file: !3, line: 11248, column: 11)
!12227 = !DILocation(line: 11248, column: 14, scope: !12226)
!12228 = !DILocation(line: 11248, column: 11, scope: !12213)
!12229 = !DILocalVariable(name: "c", scope: !12230, file: !3, line: 11250, type: !3401)
!12230 = distinct !DILexicalBlock(scope: !12226, file: !3, line: 11249, column: 2)
!12231 = !DILocation(line: 11250, column: 9, scope: !12230)
!12232 = !DILocalVariable(name: "r", scope: !12230, file: !3, line: 11251, type: !3504)
!12233 = !DILocation(line: 11251, column: 16, scope: !12230)
!12234 = !DILocalVariable(name: "tem", scope: !12230, file: !3, line: 11252, type: !3344)
!12235 = !DILocation(line: 11252, column: 9, scope: !12230)
!12236 = !DILocation(line: 11254, column: 26, scope: !12237)
!12237 = distinct !DILexicalBlock(scope: !12230, file: !3, line: 11254, column: 8)
!12238 = !DILocation(line: 11254, column: 8, scope: !12237)
!12239 = !DILocation(line: 11254, column: 8, scope: !12230)
!12240 = !DILocation(line: 11255, column: 6, scope: !12237)
!12241 = !DILocation(line: 11257, column: 17, scope: !12230)
!12242 = !DILocation(line: 11257, column: 21, scope: !12230)
!12243 = !DILocation(line: 11257, column: 8, scope: !12230)
!12244 = !DILocation(line: 11257, column: 6, scope: !12230)
!12245 = !DILocation(line: 11259, column: 8, scope: !12246)
!12246 = distinct !DILexicalBlock(scope: !12230, file: !3, line: 11259, column: 8)
!12247 = !DILocation(line: 11259, column: 10, scope: !12246)
!12248 = !DILocation(line: 11259, column: 8, scope: !12230)
!12249 = !DILocation(line: 11260, column: 28, scope: !12246)
!12250 = !DILocation(line: 11260, column: 13, scope: !12246)
!12251 = !DILocation(line: 11260, column: 6, scope: !12246)
!12252 = !DILocation(line: 11263, column: 10, scope: !12230)
!12253 = !DILocation(line: 11263, column: 8, scope: !12230)
!12254 = !DILocation(line: 11265, column: 29, scope: !12230)
!12255 = !DILocation(line: 11265, column: 34, scope: !12230)
!12256 = !DILocation(line: 11265, column: 40, scope: !12230)
!12257 = !DILocation(line: 11265, column: 11, scope: !12230)
!12258 = !DILocation(line: 11265, column: 4, scope: !12230)
!12259 = !DILocation(line: 11268, column: 28, scope: !12260)
!12260 = distinct !DILexicalBlock(scope: !12213, file: !3, line: 11268, column: 11)
!12261 = !DILocation(line: 11268, column: 13, scope: !12260)
!12262 = !DILocation(line: 11268, column: 11, scope: !12213)
!12263 = !DILocation(line: 11269, column: 2, scope: !12260)
!12264 = !DILocation(line: 11271, column: 12, scope: !12213)
!12265 = !DILocation(line: 11271, column: 10, scope: !12213)
!12266 = !DILocation(line: 11272, column: 12, scope: !12267)
!12267 = distinct !DILexicalBlock(scope: !12213, file: !3, line: 11272, column: 11)
!12268 = !DILocation(line: 11272, column: 11, scope: !12213)
!12269 = !DILocation(line: 11273, column: 2, scope: !12267)
!12270 = !DILocation(line: 11276, column: 35, scope: !12213)
!12271 = !DILocation(line: 11276, column: 40, scope: !12213)
!12272 = !DILocation(line: 11276, column: 47, scope: !12213)
!12273 = !DILocation(line: 11276, column: 51, scope: !12213)
!12274 = !DILocation(line: 11276, column: 14, scope: !12213)
!12275 = !DILocation(line: 11276, column: 7, scope: !12213)
!12276 = !DILocation(line: 11278, column: 1, scope: !12195)
!12277 = distinct !DISubprogram(name: "fold_builtin_stpcpy", scope: !3, file: !3, line: 8538, type: !9754, scopeLine: 8539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12278 = !DILocalVariable(name: "loc", arg: 1, scope: !12277, file: !3, line: 8538, type: !3429)
!12279 = !DILocation(line: 8538, column: 33, scope: !12277)
!12280 = !DILocalVariable(name: "fndecl", arg: 2, scope: !12277, file: !3, line: 8538, type: !3344)
!12281 = !DILocation(line: 8538, column: 43, scope: !12277)
!12282 = !DILocalVariable(name: "dest", arg: 3, scope: !12277, file: !3, line: 8538, type: !3344)
!12283 = !DILocation(line: 8538, column: 56, scope: !12277)
!12284 = !DILocalVariable(name: "src", arg: 4, scope: !12277, file: !3, line: 8538, type: !3344)
!12285 = !DILocation(line: 8538, column: 67, scope: !12277)
!12286 = !DILocalVariable(name: "fn", scope: !12277, file: !3, line: 8540, type: !3344)
!12287 = !DILocation(line: 8540, column: 8, scope: !12277)
!12288 = !DILocalVariable(name: "len", scope: !12277, file: !3, line: 8540, type: !3344)
!12289 = !DILocation(line: 8540, column: 12, scope: !12277)
!12290 = !DILocalVariable(name: "lenp1", scope: !12277, file: !3, line: 8540, type: !3344)
!12291 = !DILocation(line: 8540, column: 17, scope: !12277)
!12292 = !DILocalVariable(name: "call", scope: !12277, file: !3, line: 8540, type: !3344)
!12293 = !DILocation(line: 8540, column: 24, scope: !12277)
!12294 = !DILocalVariable(name: "type", scope: !12277, file: !3, line: 8540, type: !3344)
!12295 = !DILocation(line: 8540, column: 30, scope: !12277)
!12296 = !DILocation(line: 8542, column: 22, scope: !12297)
!12297 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 8542, column: 7)
!12298 = !DILocation(line: 8542, column: 8, scope: !12297)
!12299 = !DILocation(line: 8543, column: 7, scope: !12297)
!12300 = !DILocation(line: 8543, column: 25, scope: !12297)
!12301 = !DILocation(line: 8543, column: 11, scope: !12297)
!12302 = !DILocation(line: 8542, column: 7, scope: !12277)
!12303 = !DILocation(line: 8544, column: 5, scope: !12297)
!12304 = !DILocation(line: 8546, column: 19, scope: !12277)
!12305 = !DILocation(line: 8546, column: 9, scope: !12277)
!12306 = !DILocation(line: 8546, column: 7, scope: !12277)
!12307 = !DILocation(line: 8547, column: 8, scope: !12308)
!12308 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 8547, column: 7)
!12309 = !DILocation(line: 8548, column: 7, scope: !12308)
!12310 = !DILocation(line: 8548, column: 10, scope: !12308)
!12311 = !DILocation(line: 8548, column: 26, scope: !12308)
!12312 = !DILocation(line: 8547, column: 7, scope: !12277)
!12313 = !DILocation(line: 8549, column: 5, scope: !12308)
!12314 = !DILocation(line: 8551, column: 37, scope: !12315)
!12315 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 8551, column: 7)
!12316 = !DILocation(line: 8551, column: 7, scope: !12315)
!12317 = !DILocation(line: 8553, column: 7, scope: !12315)
!12318 = !DILocation(line: 8553, column: 26, scope: !12315)
!12319 = !DILocation(line: 8553, column: 11, scope: !12315)
!12320 = !DILocation(line: 8551, column: 7, scope: !12277)
!12321 = !DILocation(line: 8554, column: 5, scope: !12315)
!12322 = !DILocation(line: 8556, column: 8, scope: !12277)
!12323 = !DILocation(line: 8556, column: 6, scope: !12277)
!12324 = !DILocation(line: 8557, column: 8, scope: !12325)
!12325 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 8557, column: 7)
!12326 = !DILocation(line: 8557, column: 7, scope: !12277)
!12327 = !DILocation(line: 8558, column: 5, scope: !12325)
!12328 = !DILocation(line: 8560, column: 27, scope: !12277)
!12329 = !DILocation(line: 8560, column: 43, scope: !12277)
!12330 = !DILocation(line: 8560, column: 48, scope: !12277)
!12331 = !DILocation(line: 8560, column: 11, scope: !12277)
!12332 = !DILocation(line: 8560, column: 9, scope: !12277)
!12333 = !DILocation(line: 8563, column: 29, scope: !12277)
!12334 = !DILocation(line: 8563, column: 10, scope: !12277)
!12335 = !DILocation(line: 8563, column: 8, scope: !12277)
!12336 = !DILocation(line: 8564, column: 31, scope: !12277)
!12337 = !DILocation(line: 8564, column: 36, scope: !12277)
!12338 = !DILocation(line: 8564, column: 43, scope: !12277)
!12339 = !DILocation(line: 8564, column: 49, scope: !12277)
!12340 = !DILocation(line: 8564, column: 54, scope: !12277)
!12341 = !DILocation(line: 8564, column: 10, scope: !12277)
!12342 = !DILocation(line: 8564, column: 8, scope: !12277)
!12343 = !DILocation(line: 8566, column: 10, scope: !12277)
!12344 = !DILocation(line: 8566, column: 8, scope: !12277)
!12345 = !DILocation(line: 8567, column: 27, scope: !12277)
!12346 = !DILocation(line: 8567, column: 32, scope: !12277)
!12347 = !DILocation(line: 8567, column: 42, scope: !12277)
!12348 = !DILocation(line: 8567, column: 9, scope: !12277)
!12349 = !DILocation(line: 8567, column: 7, scope: !12277)
!12350 = !DILocation(line: 8568, column: 10, scope: !12277)
!12351 = !DILocation(line: 8568, column: 8, scope: !12277)
!12352 = !DILocation(line: 8569, column: 28, scope: !12277)
!12353 = !DILocation(line: 8569, column: 33, scope: !12277)
!12354 = !DILocation(line: 8569, column: 39, scope: !12277)
!12355 = !DILocation(line: 8569, column: 10, scope: !12277)
!12356 = !DILocation(line: 8569, column: 8, scope: !12277)
!12357 = !DILocation(line: 8570, column: 32, scope: !12277)
!12358 = !DILocation(line: 8570, column: 37, scope: !12277)
!12359 = !DILocation(line: 8570, column: 43, scope: !12277)
!12360 = !DILocation(line: 8570, column: 49, scope: !12277)
!12361 = !DILocation(line: 8570, column: 10, scope: !12277)
!12362 = !DILocation(line: 8570, column: 8, scope: !12277)
!12363 = !DILocation(line: 8571, column: 10, scope: !12277)
!12364 = !DILocation(line: 8571, column: 3, scope: !12277)
!12365 = !DILocation(line: 8572, column: 1, scope: !12277)
!12366 = distinct !DISubprogram(name: "fold_builtin_strcmp", scope: !3, file: !3, line: 8734, type: !6901, scopeLine: 8735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12367 = !DILocalVariable(name: "loc", arg: 1, scope: !12366, file: !3, line: 8734, type: !3429)
!12368 = !DILocation(line: 8734, column: 33, scope: !12366)
!12369 = !DILocalVariable(name: "arg1", arg: 2, scope: !12366, file: !3, line: 8734, type: !3344)
!12370 = !DILocation(line: 8734, column: 43, scope: !12366)
!12371 = !DILocalVariable(name: "arg2", arg: 3, scope: !12366, file: !3, line: 8734, type: !3344)
!12372 = !DILocation(line: 8734, column: 54, scope: !12366)
!12373 = !DILocalVariable(name: "p1", scope: !12366, file: !3, line: 8736, type: !3504)
!12374 = !DILocation(line: 8736, column: 15, scope: !12366)
!12375 = !DILocalVariable(name: "p2", scope: !12366, file: !3, line: 8736, type: !3504)
!12376 = !DILocation(line: 8736, column: 20, scope: !12366)
!12377 = !DILocation(line: 8738, column: 22, scope: !12378)
!12378 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 8738, column: 7)
!12379 = !DILocation(line: 8738, column: 8, scope: !12378)
!12380 = !DILocation(line: 8739, column: 7, scope: !12378)
!12381 = !DILocation(line: 8739, column: 25, scope: !12378)
!12382 = !DILocation(line: 8739, column: 11, scope: !12378)
!12383 = !DILocation(line: 8738, column: 7, scope: !12366)
!12384 = !DILocation(line: 8740, column: 5, scope: !12378)
!12385 = !DILocation(line: 8743, column: 24, scope: !12386)
!12386 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 8743, column: 7)
!12387 = !DILocation(line: 8743, column: 30, scope: !12386)
!12388 = !DILocation(line: 8743, column: 7, scope: !12386)
!12389 = !DILocation(line: 8743, column: 7, scope: !12366)
!12390 = !DILocation(line: 8744, column: 12, scope: !12386)
!12391 = !DILocation(line: 8744, column: 5, scope: !12386)
!12392 = !DILocation(line: 8746, column: 18, scope: !12366)
!12393 = !DILocation(line: 8746, column: 8, scope: !12366)
!12394 = !DILocation(line: 8746, column: 6, scope: !12366)
!12395 = !DILocation(line: 8747, column: 18, scope: !12366)
!12396 = !DILocation(line: 8747, column: 8, scope: !12366)
!12397 = !DILocation(line: 8747, column: 6, scope: !12366)
!12398 = !DILocation(line: 8749, column: 7, scope: !12399)
!12399 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 8749, column: 7)
!12400 = !DILocation(line: 8749, column: 10, scope: !12399)
!12401 = !DILocation(line: 8749, column: 13, scope: !12399)
!12402 = !DILocation(line: 8749, column: 7, scope: !12366)
!12403 = !DILocalVariable(name: "i", scope: !12404, file: !3, line: 8751, type: !4754)
!12404 = distinct !DILexicalBlock(scope: !12399, file: !3, line: 8750, column: 5)
!12405 = !DILocation(line: 8751, column: 17, scope: !12404)
!12406 = !DILocation(line: 8751, column: 29, scope: !12404)
!12407 = !DILocation(line: 8751, column: 33, scope: !12404)
!12408 = !DILocation(line: 8751, column: 21, scope: !12404)
!12409 = !DILocation(line: 8752, column: 11, scope: !12410)
!12410 = distinct !DILexicalBlock(scope: !12404, file: !3, line: 8752, column: 11)
!12411 = !DILocation(line: 8752, column: 13, scope: !12410)
!12412 = !DILocation(line: 8752, column: 11, scope: !12404)
!12413 = !DILocation(line: 8753, column: 9, scope: !12410)
!12414 = !DILocation(line: 8753, column: 2, scope: !12410)
!12415 = !DILocation(line: 8754, column: 16, scope: !12416)
!12416 = distinct !DILexicalBlock(scope: !12410, file: !3, line: 8754, column: 16)
!12417 = !DILocation(line: 8754, column: 18, scope: !12416)
!12418 = !DILocation(line: 8754, column: 16, scope: !12410)
!12419 = !DILocation(line: 8755, column: 9, scope: !12416)
!12420 = !DILocation(line: 8755, column: 2, scope: !12416)
!12421 = !DILocation(line: 8757, column: 9, scope: !12416)
!12422 = !DILocation(line: 8757, column: 2, scope: !12416)
!12423 = !DILocation(line: 8761, column: 7, scope: !12424)
!12424 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 8761, column: 7)
!12425 = !DILocation(line: 8761, column: 10, scope: !12424)
!12426 = !DILocation(line: 8761, column: 14, scope: !12424)
!12427 = !DILocation(line: 8761, column: 13, scope: !12424)
!12428 = !DILocation(line: 8761, column: 17, scope: !12424)
!12429 = !DILocation(line: 8761, column: 7, scope: !12366)
!12430 = !DILocalVariable(name: "cst_uchar_node", scope: !12431, file: !3, line: 8763, type: !3344)
!12431 = distinct !DILexicalBlock(scope: !12424, file: !3, line: 8762, column: 5)
!12432 = !DILocation(line: 8763, column: 12, scope: !12431)
!12433 = !DILocation(line: 8763, column: 29, scope: !12431)
!12434 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !12431, file: !3, line: 8764, type: !3344)
!12435 = !DILocation(line: 8764, column: 12, scope: !12431)
!12436 = !DILocation(line: 8765, column: 33, scope: !12431)
!12437 = !DILocation(line: 8765, column: 49, scope: !12431)
!12438 = !DILocation(line: 8765, column: 4, scope: !12431)
!12439 = !DILocation(line: 8767, column: 32, scope: !12431)
!12440 = !DILocation(line: 8767, column: 37, scope: !12431)
!12441 = !DILocation(line: 8768, column: 11, scope: !12431)
!12442 = !DILocation(line: 8767, column: 14, scope: !12431)
!12443 = !DILocation(line: 8767, column: 7, scope: !12431)
!12444 = !DILocation(line: 8775, column: 7, scope: !12445)
!12445 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 8775, column: 7)
!12446 = !DILocation(line: 8775, column: 10, scope: !12445)
!12447 = !DILocation(line: 8775, column: 14, scope: !12445)
!12448 = !DILocation(line: 8775, column: 13, scope: !12445)
!12449 = !DILocation(line: 8775, column: 17, scope: !12445)
!12450 = !DILocation(line: 8775, column: 7, scope: !12366)
!12451 = !DILocalVariable(name: "cst_uchar_node", scope: !12452, file: !3, line: 8777, type: !3344)
!12452 = distinct !DILexicalBlock(scope: !12445, file: !3, line: 8776, column: 5)
!12453 = !DILocation(line: 8777, column: 12, scope: !12452)
!12454 = !DILocation(line: 8777, column: 29, scope: !12452)
!12455 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !12452, file: !3, line: 8778, type: !3344)
!12456 = !DILocation(line: 8778, column: 12, scope: !12452)
!12457 = !DILocation(line: 8779, column: 33, scope: !12452)
!12458 = !DILocation(line: 8779, column: 49, scope: !12452)
!12459 = !DILocation(line: 8779, column: 4, scope: !12452)
!12460 = !DILocalVariable(name: "temp", scope: !12452, file: !3, line: 8781, type: !3344)
!12461 = !DILocation(line: 8781, column: 12, scope: !12452)
!12462 = !DILocation(line: 8782, column: 22, scope: !12452)
!12463 = !DILocation(line: 8782, column: 27, scope: !12452)
!12464 = !DILocation(line: 8783, column: 8, scope: !12452)
!12465 = !DILocation(line: 8782, column: 4, scope: !12452)
!12466 = !DILocation(line: 8787, column: 14, scope: !12452)
!12467 = !DILocation(line: 8787, column: 7, scope: !12452)
!12468 = !DILocation(line: 8790, column: 3, scope: !12366)
!12469 = !DILocation(line: 8791, column: 1, scope: !12366)
!12470 = distinct !DISubprogram(name: "fold_builtin_strpbrk", scope: !3, file: !3, line: 11299, type: !9754, scopeLine: 11300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12471 = !DILocalVariable(name: "loc", arg: 1, scope: !12470, file: !3, line: 11299, type: !3429)
!12472 = !DILocation(line: 11299, column: 34, scope: !12470)
!12473 = !DILocalVariable(name: "s1", arg: 2, scope: !12470, file: !3, line: 11299, type: !3344)
!12474 = !DILocation(line: 11299, column: 44, scope: !12470)
!12475 = !DILocalVariable(name: "s2", arg: 3, scope: !12470, file: !3, line: 11299, type: !3344)
!12476 = !DILocation(line: 11299, column: 53, scope: !12470)
!12477 = !DILocalVariable(name: "type", arg: 4, scope: !12470, file: !3, line: 11299, type: !3344)
!12478 = !DILocation(line: 11299, column: 62, scope: !12470)
!12479 = !DILocation(line: 11301, column: 22, scope: !12480)
!12480 = distinct !DILexicalBlock(scope: !12470, file: !3, line: 11301, column: 7)
!12481 = !DILocation(line: 11301, column: 8, scope: !12480)
!12482 = !DILocation(line: 11302, column: 7, scope: !12480)
!12483 = !DILocation(line: 11302, column: 25, scope: !12480)
!12484 = !DILocation(line: 11302, column: 11, scope: !12480)
!12485 = !DILocation(line: 11301, column: 7, scope: !12470)
!12486 = !DILocation(line: 11303, column: 5, scope: !12480)
!12487 = !DILocalVariable(name: "fn", scope: !12488, file: !3, line: 11306, type: !3344)
!12488 = distinct !DILexicalBlock(scope: !12480, file: !3, line: 11305, column: 5)
!12489 = !DILocation(line: 11306, column: 12, scope: !12488)
!12490 = !DILocalVariable(name: "p1", scope: !12488, file: !3, line: 11307, type: !3504)
!12491 = !DILocation(line: 11307, column: 19, scope: !12488)
!12492 = !DILocalVariable(name: "p2", scope: !12488, file: !3, line: 11307, type: !3504)
!12493 = !DILocation(line: 11307, column: 24, scope: !12488)
!12494 = !DILocation(line: 11309, column: 22, scope: !12488)
!12495 = !DILocation(line: 11309, column: 12, scope: !12488)
!12496 = !DILocation(line: 11309, column: 10, scope: !12488)
!12497 = !DILocation(line: 11310, column: 11, scope: !12498)
!12498 = distinct !DILexicalBlock(scope: !12488, file: !3, line: 11310, column: 11)
!12499 = !DILocation(line: 11310, column: 14, scope: !12498)
!12500 = !DILocation(line: 11310, column: 11, scope: !12488)
!12501 = !DILocation(line: 11311, column: 2, scope: !12498)
!12502 = !DILocation(line: 11313, column: 22, scope: !12488)
!12503 = !DILocation(line: 11313, column: 12, scope: !12488)
!12504 = !DILocation(line: 11313, column: 10, scope: !12488)
!12505 = !DILocation(line: 11314, column: 11, scope: !12506)
!12506 = distinct !DILexicalBlock(scope: !12488, file: !3, line: 11314, column: 11)
!12507 = !DILocation(line: 11314, column: 14, scope: !12506)
!12508 = !DILocation(line: 11314, column: 11, scope: !12488)
!12509 = !DILocalVariable(name: "r", scope: !12510, file: !3, line: 11316, type: !3504)
!12510 = distinct !DILexicalBlock(scope: !12506, file: !3, line: 11315, column: 2)
!12511 = !DILocation(line: 11316, column: 16, scope: !12510)
!12512 = !DILocation(line: 11316, column: 29, scope: !12510)
!12513 = !DILocation(line: 11316, column: 33, scope: !12510)
!12514 = !DILocation(line: 11316, column: 20, scope: !12510)
!12515 = !DILocalVariable(name: "tem", scope: !12510, file: !3, line: 11317, type: !3344)
!12516 = !DILocation(line: 11317, column: 9, scope: !12510)
!12517 = !DILocation(line: 11319, column: 8, scope: !12518)
!12518 = distinct !DILexicalBlock(scope: !12510, file: !3, line: 11319, column: 8)
!12519 = !DILocation(line: 11319, column: 10, scope: !12518)
!12520 = !DILocation(line: 11319, column: 8, scope: !12510)
!12521 = !DILocation(line: 11320, column: 28, scope: !12518)
!12522 = !DILocation(line: 11320, column: 13, scope: !12518)
!12523 = !DILocation(line: 11320, column: 6, scope: !12518)
!12524 = !DILocation(line: 11323, column: 10, scope: !12510)
!12525 = !DILocation(line: 11323, column: 8, scope: !12510)
!12526 = !DILocation(line: 11325, column: 29, scope: !12510)
!12527 = !DILocation(line: 11325, column: 34, scope: !12510)
!12528 = !DILocation(line: 11325, column: 40, scope: !12510)
!12529 = !DILocation(line: 11325, column: 11, scope: !12510)
!12530 = !DILocation(line: 11325, column: 4, scope: !12510)
!12531 = !DILocation(line: 11328, column: 11, scope: !12532)
!12532 = distinct !DILexicalBlock(scope: !12488, file: !3, line: 11328, column: 11)
!12533 = !DILocation(line: 11328, column: 17, scope: !12532)
!12534 = !DILocation(line: 11328, column: 11, scope: !12488)
!12535 = !DILocation(line: 11331, column: 31, scope: !12532)
!12536 = !DILocation(line: 11331, column: 36, scope: !12532)
!12537 = !DILocation(line: 11331, column: 52, scope: !12532)
!12538 = !DILocation(line: 11331, column: 71, scope: !12532)
!12539 = !DILocation(line: 11331, column: 9, scope: !12532)
!12540 = !DILocation(line: 11331, column: 2, scope: !12532)
!12541 = !DILocation(line: 11333, column: 11, scope: !12542)
!12542 = distinct !DILexicalBlock(scope: !12488, file: !3, line: 11333, column: 11)
!12543 = !DILocation(line: 11333, column: 17, scope: !12542)
!12544 = !DILocation(line: 11333, column: 11, scope: !12488)
!12545 = !DILocation(line: 11334, column: 2, scope: !12542)
!12546 = !DILocation(line: 11336, column: 12, scope: !12488)
!12547 = !DILocation(line: 11336, column: 10, scope: !12488)
!12548 = !DILocation(line: 11337, column: 12, scope: !12549)
!12549 = distinct !DILexicalBlock(scope: !12488, file: !3, line: 11337, column: 11)
!12550 = !DILocation(line: 11337, column: 11, scope: !12488)
!12551 = !DILocation(line: 11338, column: 2, scope: !12549)
!12552 = !DILocation(line: 11342, column: 35, scope: !12488)
!12553 = !DILocation(line: 11342, column: 40, scope: !12488)
!12554 = !DILocation(line: 11342, column: 47, scope: !12488)
!12555 = !DILocation(line: 11342, column: 77, scope: !12488)
!12556 = !DILocation(line: 11342, column: 51, scope: !12488)
!12557 = !DILocation(line: 11342, column: 14, scope: !12488)
!12558 = !DILocation(line: 11342, column: 7, scope: !12488)
!12559 = !DILocation(line: 11344, column: 1, scope: !12470)
!12560 = distinct !DISubprogram(name: "fold_builtin_expect", scope: !3, file: !3, line: 6569, type: !6901, scopeLine: 6570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12561 = !DILocalVariable(name: "loc", arg: 1, scope: !12560, file: !3, line: 6569, type: !3429)
!12562 = !DILocation(line: 6569, column: 33, scope: !12560)
!12563 = !DILocalVariable(name: "arg0", arg: 2, scope: !12560, file: !3, line: 6569, type: !3344)
!12564 = !DILocation(line: 6569, column: 43, scope: !12560)
!12565 = !DILocalVariable(name: "arg1", arg: 3, scope: !12560, file: !3, line: 6569, type: !3344)
!12566 = !DILocation(line: 6569, column: 54, scope: !12560)
!12567 = !DILocalVariable(name: "inner", scope: !12560, file: !3, line: 6571, type: !3344)
!12568 = !DILocation(line: 6571, column: 8, scope: !12560)
!12569 = !DILocalVariable(name: "fndecl", scope: !12560, file: !3, line: 6571, type: !3344)
!12570 = !DILocation(line: 6571, column: 15, scope: !12560)
!12571 = !DILocalVariable(name: "code", scope: !12560, file: !3, line: 6572, type: !134)
!12572 = !DILocation(line: 6572, column: 18, scope: !12560)
!12573 = !DILocation(line: 6577, column: 11, scope: !12560)
!12574 = !DILocation(line: 6577, column: 9, scope: !12560)
!12575 = !DILocation(line: 6578, column: 7, scope: !12576)
!12576 = distinct !DILexicalBlock(scope: !12560, file: !3, line: 6578, column: 7)
!12577 = !DILocation(line: 6579, column: 7, scope: !12576)
!12578 = !DILocation(line: 6579, column: 10, scope: !12576)
!12579 = !DILocation(line: 6579, column: 46, scope: !12576)
!12580 = !DILocation(line: 6578, column: 7, scope: !12560)
!12581 = !DILocation(line: 6580, column: 13, scope: !12576)
!12582 = !DILocation(line: 6580, column: 11, scope: !12576)
!12583 = !DILocation(line: 6580, column: 5, scope: !12576)
!12584 = !DILocation(line: 6582, column: 7, scope: !12585)
!12585 = distinct !DILexicalBlock(scope: !12560, file: !3, line: 6582, column: 7)
!12586 = !DILocation(line: 6582, column: 25, scope: !12585)
!12587 = !DILocation(line: 6583, column: 7, scope: !12585)
!12588 = !DILocation(line: 6583, column: 39, scope: !12585)
!12589 = !DILocation(line: 6583, column: 20, scope: !12585)
!12590 = !DILocation(line: 6583, column: 18, scope: !12585)
!12591 = !DILocation(line: 6584, column: 7, scope: !12585)
!12592 = !DILocation(line: 6584, column: 10, scope: !12585)
!12593 = !DILocation(line: 6584, column: 39, scope: !12585)
!12594 = !DILocation(line: 6585, column: 7, scope: !12585)
!12595 = !DILocation(line: 6585, column: 10, scope: !12585)
!12596 = !DILocation(line: 6585, column: 38, scope: !12585)
!12597 = !DILocation(line: 6582, column: 7, scope: !12560)
!12598 = !DILocation(line: 6586, column: 12, scope: !12585)
!12599 = !DILocation(line: 6586, column: 5, scope: !12585)
!12600 = !DILocation(line: 6590, column: 11, scope: !12560)
!12601 = !DILocation(line: 6590, column: 9, scope: !12560)
!12602 = !DILocation(line: 6591, column: 3, scope: !12560)
!12603 = !DILocation(line: 6591, column: 10, scope: !12560)
!12604 = !DILocation(line: 6591, column: 28, scope: !12560)
!12605 = !DILocation(line: 6592, column: 3, scope: !12560)
!12606 = !DILocation(line: 6592, column: 6, scope: !12560)
!12607 = !DILocation(line: 6593, column: 3, scope: !12560)
!12608 = !DILocation(line: 6593, column: 6, scope: !12560)
!12609 = !DILocation(line: 0, scope: !12560)
!12610 = !DILocation(line: 6594, column: 13, scope: !12560)
!12611 = !DILocation(line: 6594, column: 11, scope: !12560)
!12612 = distinct !{!12612, !12602, !12610}
!12613 = !DILocation(line: 6596, column: 10, scope: !12560)
!12614 = !DILocation(line: 6596, column: 8, scope: !12560)
!12615 = !DILocation(line: 6597, column: 7, scope: !12616)
!12616 = distinct !DILexicalBlock(scope: !12560, file: !3, line: 6597, column: 7)
!12617 = !DILocation(line: 6597, column: 12, scope: !12616)
!12618 = !DILocation(line: 6597, column: 32, scope: !12616)
!12619 = !DILocation(line: 6597, column: 35, scope: !12616)
!12620 = !DILocation(line: 6597, column: 40, scope: !12616)
!12621 = !DILocation(line: 6597, column: 7, scope: !12560)
!12622 = !DILocalVariable(name: "op0", scope: !12623, file: !3, line: 6599, type: !3344)
!12623 = distinct !DILexicalBlock(scope: !12616, file: !3, line: 6598, column: 5)
!12624 = !DILocation(line: 6599, column: 12, scope: !12623)
!12625 = !DILocation(line: 6599, column: 18, scope: !12623)
!12626 = !DILocalVariable(name: "op1", scope: !12623, file: !3, line: 6600, type: !3344)
!12627 = !DILocation(line: 6600, column: 12, scope: !12623)
!12628 = !DILocation(line: 6600, column: 18, scope: !12623)
!12629 = !DILocation(line: 6602, column: 45, scope: !12623)
!12630 = !DILocation(line: 6602, column: 50, scope: !12623)
!12631 = !DILocation(line: 6602, column: 55, scope: !12623)
!12632 = !DILocation(line: 6602, column: 13, scope: !12623)
!12633 = !DILocation(line: 6602, column: 11, scope: !12623)
!12634 = !DILocation(line: 6603, column: 45, scope: !12623)
!12635 = !DILocation(line: 6603, column: 50, scope: !12623)
!12636 = !DILocation(line: 6603, column: 55, scope: !12623)
!12637 = !DILocation(line: 6603, column: 13, scope: !12623)
!12638 = !DILocation(line: 6603, column: 11, scope: !12623)
!12639 = !DILocation(line: 6604, column: 15, scope: !12623)
!12640 = !DILocation(line: 6604, column: 13, scope: !12623)
!12641 = !DILocation(line: 6606, column: 32, scope: !12623)
!12642 = !DILocation(line: 6606, column: 37, scope: !12623)
!12643 = !DILocation(line: 6606, column: 55, scope: !12623)
!12644 = !DILocation(line: 6606, column: 14, scope: !12623)
!12645 = !DILocation(line: 6606, column: 7, scope: !12623)
!12646 = !DILocation(line: 6610, column: 8, scope: !12647)
!12647 = distinct !DILexicalBlock(scope: !12560, file: !3, line: 6610, column: 7)
!12648 = !DILocation(line: 6610, column: 7, scope: !12560)
!12649 = !DILocation(line: 6611, column: 5, scope: !12647)
!12650 = !DILocation(line: 6616, column: 11, scope: !12560)
!12651 = !DILocation(line: 6616, column: 9, scope: !12560)
!12652 = !DILocation(line: 6617, column: 3, scope: !12560)
!12653 = !DILocation(line: 6618, column: 7, scope: !12654)
!12654 = distinct !DILexicalBlock(scope: !12560, file: !3, line: 6618, column: 7)
!12655 = !DILocation(line: 6618, column: 25, scope: !12654)
!12656 = !DILocation(line: 6618, column: 7, scope: !12560)
!12657 = !DILocation(line: 6620, column: 7, scope: !12658)
!12658 = distinct !DILexicalBlock(scope: !12654, file: !3, line: 6619, column: 5)
!12659 = !DILocation(line: 6622, column: 12, scope: !12660)
!12660 = distinct !DILexicalBlock(scope: !12658, file: !3, line: 6621, column: 2)
!12661 = !DILocation(line: 6622, column: 10, scope: !12660)
!12662 = !DILocation(line: 6623, column: 2, scope: !12660)
!12663 = !DILocation(line: 6624, column: 14, scope: !12658)
!12664 = !DILocation(line: 6624, column: 32, scope: !12658)
!12665 = !DILocation(line: 6625, column: 7, scope: !12658)
!12666 = !DILocation(line: 6625, column: 10, scope: !12658)
!12667 = !DILocation(line: 6625, column: 28, scope: !12658)
!12668 = distinct !{!12668, !12657, !12669}
!12669 = !DILocation(line: 6625, column: 40, scope: !12658)
!12670 = !DILocation(line: 6626, column: 12, scope: !12671)
!12671 = distinct !DILexicalBlock(scope: !12658, file: !3, line: 6626, column: 11)
!12672 = !DILocation(line: 6626, column: 30, scope: !12671)
!12673 = !DILocation(line: 6627, column: 12, scope: !12671)
!12674 = !DILocation(line: 6627, column: 15, scope: !12671)
!12675 = !DILocation(line: 6627, column: 33, scope: !12671)
!12676 = !DILocation(line: 6628, column: 4, scope: !12671)
!12677 = !DILocation(line: 6628, column: 7, scope: !12671)
!12678 = !DILocation(line: 6626, column: 11, scope: !12658)
!12679 = !DILocation(line: 6629, column: 2, scope: !12671)
!12680 = !DILocation(line: 6630, column: 5, scope: !12658)
!12681 = !DILocation(line: 6633, column: 10, scope: !12560)
!12682 = !DILocation(line: 6633, column: 3, scope: !12560)
!12683 = !DILocation(line: 6634, column: 1, scope: !12560)
!12684 = distinct !DISubprogram(name: "fold_builtin_pow", scope: !3, file: !3, line: 7854, type: !6467, scopeLine: 7855, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12685 = !DILocalVariable(name: "loc", arg: 1, scope: !12684, file: !3, line: 7854, type: !3429)
!12686 = !DILocation(line: 7854, column: 30, scope: !12684)
!12687 = !DILocalVariable(name: "fndecl", arg: 2, scope: !12684, file: !3, line: 7854, type: !3344)
!12688 = !DILocation(line: 7854, column: 40, scope: !12684)
!12689 = !DILocalVariable(name: "arg0", arg: 3, scope: !12684, file: !3, line: 7854, type: !3344)
!12690 = !DILocation(line: 7854, column: 53, scope: !12684)
!12691 = !DILocalVariable(name: "arg1", arg: 4, scope: !12684, file: !3, line: 7854, type: !3344)
!12692 = !DILocation(line: 7854, column: 64, scope: !12684)
!12693 = !DILocalVariable(name: "type", arg: 5, scope: !12684, file: !3, line: 7854, type: !3344)
!12694 = !DILocation(line: 7854, column: 75, scope: !12684)
!12695 = !DILocation(line: 7857, column: 7, scope: !12684)
!12696 = distinct !DISubprogram(name: "fold_builtin_powi", scope: !3, file: !3, line: 8010, type: !6467, scopeLine: 8012, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12697 = !DILocalVariable(name: "loc", arg: 1, scope: !12696, file: !3, line: 8010, type: !3429)
!12698 = !DILocation(line: 8010, column: 31, scope: !12696)
!12699 = !DILocalVariable(name: "fndecl", arg: 2, scope: !12696, file: !3, line: 8010, type: !3344)
!12700 = !DILocation(line: 8010, column: 41, scope: !12696)
!12701 = !DILocalVariable(name: "arg0", arg: 3, scope: !12696, file: !3, line: 8011, type: !3344)
!12702 = !DILocation(line: 8011, column: 11, scope: !12696)
!12703 = !DILocalVariable(name: "arg1", arg: 4, scope: !12696, file: !3, line: 8011, type: !3344)
!12704 = !DILocation(line: 8011, column: 22, scope: !12696)
!12705 = !DILocalVariable(name: "type", arg: 5, scope: !12696, file: !3, line: 8011, type: !3344)
!12706 = !DILocation(line: 8011, column: 33, scope: !12696)
!12707 = !DILocation(line: 8013, column: 22, scope: !12708)
!12708 = distinct !DILexicalBlock(scope: !12696, file: !3, line: 8013, column: 7)
!12709 = !DILocation(line: 8013, column: 8, scope: !12708)
!12710 = !DILocation(line: 8014, column: 7, scope: !12708)
!12711 = !DILocation(line: 8014, column: 25, scope: !12708)
!12712 = !DILocation(line: 8014, column: 11, scope: !12708)
!12713 = !DILocation(line: 8013, column: 7, scope: !12696)
!12714 = !DILocation(line: 8015, column: 5, scope: !12708)
!12715 = !DILocation(line: 8018, column: 18, scope: !12716)
!12716 = distinct !DILexicalBlock(scope: !12696, file: !3, line: 8018, column: 7)
!12717 = !DILocation(line: 8018, column: 7, scope: !12716)
!12718 = !DILocation(line: 8018, column: 7, scope: !12696)
!12719 = !DILocation(line: 8019, column: 34, scope: !12716)
!12720 = !DILocation(line: 8019, column: 39, scope: !12716)
!12721 = !DILocation(line: 8019, column: 57, scope: !12716)
!12722 = !DILocation(line: 8019, column: 45, scope: !12716)
!12723 = !DILocation(line: 8019, column: 73, scope: !12716)
!12724 = !DILocation(line: 8019, column: 12, scope: !12716)
!12725 = !DILocation(line: 8019, column: 5, scope: !12716)
!12726 = !DILocation(line: 8021, column: 22, scope: !12727)
!12727 = distinct !DILexicalBlock(scope: !12696, file: !3, line: 8021, column: 7)
!12728 = !DILocation(line: 8021, column: 7, scope: !12727)
!12729 = !DILocation(line: 8021, column: 7, scope: !12696)
!12730 = !DILocalVariable(name: "c", scope: !12731, file: !3, line: 8023, type: !3359)
!12731 = distinct !DILexicalBlock(scope: !12727, file: !3, line: 8022, column: 5)
!12732 = !DILocation(line: 8023, column: 21, scope: !12731)
!12733 = !DILocation(line: 8023, column: 25, scope: !12731)
!12734 = !DILocation(line: 8026, column: 11, scope: !12735)
!12735 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 8026, column: 11)
!12736 = !DILocation(line: 8026, column: 28, scope: !12735)
!12737 = !DILocation(line: 8027, column: 4, scope: !12735)
!12738 = !DILocation(line: 8027, column: 8, scope: !12735)
!12739 = !DILocation(line: 8026, column: 11, scope: !12731)
!12740 = !DILocalVariable(name: "x", scope: !12741, file: !3, line: 8029, type: !3366)
!12741 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 8028, column: 2)
!12742 = !DILocation(line: 8029, column: 20, scope: !12741)
!12743 = !DILocation(line: 8030, column: 8, scope: !12741)
!12744 = !DILocation(line: 8031, column: 19, scope: !12741)
!12745 = !DILocation(line: 8031, column: 41, scope: !12741)
!12746 = !DILocation(line: 8031, column: 4, scope: !12741)
!12747 = !DILocation(line: 8032, column: 23, scope: !12741)
!12748 = !DILocation(line: 8032, column: 11, scope: !12741)
!12749 = !DILocation(line: 8032, column: 4, scope: !12741)
!12750 = !DILocation(line: 8036, column: 11, scope: !12751)
!12751 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 8036, column: 11)
!12752 = !DILocation(line: 8036, column: 13, scope: !12751)
!12753 = !DILocation(line: 8036, column: 11, scope: !12731)
!12754 = !DILocation(line: 8037, column: 31, scope: !12751)
!12755 = !DILocation(line: 8037, column: 36, scope: !12751)
!12756 = !DILocation(line: 8037, column: 54, scope: !12751)
!12757 = !DILocation(line: 8037, column: 42, scope: !12751)
!12758 = !DILocation(line: 8038, column: 6, scope: !12751)
!12759 = !DILocation(line: 8037, column: 9, scope: !12751)
!12760 = !DILocation(line: 8037, column: 2, scope: !12751)
!12761 = !DILocation(line: 8041, column: 11, scope: !12762)
!12762 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 8041, column: 11)
!12763 = !DILocation(line: 8041, column: 13, scope: !12762)
!12764 = !DILocation(line: 8041, column: 11, scope: !12731)
!12765 = !DILocation(line: 8042, column: 9, scope: !12762)
!12766 = !DILocation(line: 8042, column: 2, scope: !12762)
!12767 = !DILocation(line: 8045, column: 11, scope: !12768)
!12768 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 8045, column: 11)
!12769 = !DILocation(line: 8045, column: 13, scope: !12768)
!12770 = !DILocation(line: 8045, column: 11, scope: !12731)
!12771 = !DILocation(line: 8046, column: 9, scope: !12768)
!12772 = !DILocation(line: 8046, column: 2, scope: !12768)
!12773 = !DILocation(line: 8048, column: 5, scope: !12731)
!12774 = !DILocation(line: 8050, column: 3, scope: !12696)
!12775 = !DILocation(line: 8051, column: 1, scope: !12696)
!12776 = distinct !DISubprogram(name: "fold_builtin_copysign", scope: !3, file: !3, line: 8927, type: !6467, scopeLine: 8929, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12777 = !DILocalVariable(name: "loc", arg: 1, scope: !12776, file: !3, line: 8927, type: !3429)
!12778 = !DILocation(line: 8927, column: 35, scope: !12776)
!12779 = !DILocalVariable(name: "fndecl", arg: 2, scope: !12776, file: !3, line: 8927, type: !3344)
!12780 = !DILocation(line: 8927, column: 45, scope: !12776)
!12781 = !DILocalVariable(name: "arg1", arg: 3, scope: !12776, file: !3, line: 8928, type: !3344)
!12782 = !DILocation(line: 8928, column: 15, scope: !12776)
!12783 = !DILocalVariable(name: "arg2", arg: 4, scope: !12776, file: !3, line: 8928, type: !3344)
!12784 = !DILocation(line: 8928, column: 26, scope: !12776)
!12785 = !DILocalVariable(name: "type", arg: 5, scope: !12776, file: !3, line: 8928, type: !3344)
!12786 = !DILocation(line: 8928, column: 37, scope: !12776)
!12787 = !DILocalVariable(name: "tem", scope: !12776, file: !3, line: 8930, type: !3344)
!12788 = !DILocation(line: 8930, column: 8, scope: !12776)
!12789 = !DILocation(line: 8932, column: 22, scope: !12790)
!12790 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 8932, column: 7)
!12791 = !DILocation(line: 8932, column: 8, scope: !12790)
!12792 = !DILocation(line: 8933, column: 7, scope: !12790)
!12793 = !DILocation(line: 8933, column: 25, scope: !12790)
!12794 = !DILocation(line: 8933, column: 11, scope: !12790)
!12795 = !DILocation(line: 8932, column: 7, scope: !12776)
!12796 = !DILocation(line: 8934, column: 5, scope: !12790)
!12797 = !DILocation(line: 8937, column: 24, scope: !12798)
!12798 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 8937, column: 7)
!12799 = !DILocation(line: 8937, column: 30, scope: !12798)
!12800 = !DILocation(line: 8937, column: 7, scope: !12798)
!12801 = !DILocation(line: 8937, column: 7, scope: !12776)
!12802 = !DILocation(line: 8938, column: 30, scope: !12798)
!12803 = !DILocation(line: 8938, column: 35, scope: !12798)
!12804 = !DILocation(line: 8938, column: 41, scope: !12798)
!12805 = !DILocation(line: 8938, column: 12, scope: !12798)
!12806 = !DILocation(line: 8938, column: 5, scope: !12798)
!12807 = !DILocation(line: 8941, column: 7, scope: !12808)
!12808 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 8941, column: 7)
!12809 = !DILocation(line: 8941, column: 24, scope: !12808)
!12810 = !DILocation(line: 8942, column: 7, scope: !12808)
!12811 = !DILocation(line: 8942, column: 10, scope: !12808)
!12812 = !DILocation(line: 8942, column: 27, scope: !12808)
!12813 = !DILocation(line: 8943, column: 7, scope: !12808)
!12814 = !DILocation(line: 8943, column: 11, scope: !12808)
!12815 = !DILocation(line: 8944, column: 7, scope: !12808)
!12816 = !DILocation(line: 8944, column: 11, scope: !12808)
!12817 = !DILocation(line: 8941, column: 7, scope: !12776)
!12818 = !DILocalVariable(name: "c1", scope: !12819, file: !3, line: 8946, type: !3366)
!12819 = distinct !DILexicalBlock(scope: !12808, file: !3, line: 8945, column: 5)
!12820 = !DILocation(line: 8946, column: 23, scope: !12819)
!12821 = !DILocalVariable(name: "c2", scope: !12819, file: !3, line: 8946, type: !3366)
!12822 = !DILocation(line: 8946, column: 27, scope: !12819)
!12823 = !DILocation(line: 8948, column: 12, scope: !12819)
!12824 = !DILocation(line: 8949, column: 12, scope: !12819)
!12825 = !DILocation(line: 8951, column: 7, scope: !12819)
!12826 = !DILocation(line: 8952, column: 26, scope: !12819)
!12827 = !DILocation(line: 8952, column: 14, scope: !12819)
!12828 = !DILocation(line: 8952, column: 7, scope: !12819)
!12829 = !DILocation(line: 8957, column: 32, scope: !12830)
!12830 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 8957, column: 7)
!12831 = !DILocation(line: 8957, column: 7, scope: !12830)
!12832 = !DILocation(line: 8957, column: 7, scope: !12776)
!12833 = !DILocation(line: 8958, column: 34, scope: !12830)
!12834 = !DILocation(line: 8958, column: 39, scope: !12830)
!12835 = !DILocation(line: 8959, column: 9, scope: !12830)
!12836 = !DILocation(line: 8960, column: 9, scope: !12830)
!12837 = !DILocation(line: 8958, column: 12, scope: !12830)
!12838 = !DILocation(line: 8958, column: 5, scope: !12830)
!12839 = !DILocation(line: 8963, column: 30, scope: !12776)
!12840 = !DILocation(line: 8963, column: 9, scope: !12776)
!12841 = !DILocation(line: 8963, column: 7, scope: !12776)
!12842 = !DILocation(line: 8964, column: 7, scope: !12843)
!12843 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 8964, column: 7)
!12844 = !DILocation(line: 8964, column: 7, scope: !12776)
!12845 = !DILocation(line: 8965, column: 33, scope: !12843)
!12846 = !DILocation(line: 8965, column: 38, scope: !12843)
!12847 = !DILocation(line: 8965, column: 49, scope: !12843)
!12848 = !DILocation(line: 8965, column: 54, scope: !12843)
!12849 = !DILocation(line: 8965, column: 12, scope: !12843)
!12850 = !DILocation(line: 8965, column: 5, scope: !12843)
!12851 = !DILocation(line: 8967, column: 3, scope: !12776)
!12852 = !DILocation(line: 8968, column: 1, scope: !12776)
!12853 = distinct !DISubprogram(name: "fold_builtin_fmin_fmax", scope: !3, file: !3, line: 9058, type: !9039, scopeLine: 9060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12854 = !DILocalVariable(name: "loc", arg: 1, scope: !12853, file: !3, line: 9058, type: !3429)
!12855 = !DILocation(line: 9058, column: 36, scope: !12853)
!12856 = !DILocalVariable(name: "arg0", arg: 2, scope: !12853, file: !3, line: 9058, type: !3344)
!12857 = !DILocation(line: 9058, column: 46, scope: !12853)
!12858 = !DILocalVariable(name: "arg1", arg: 3, scope: !12853, file: !3, line: 9058, type: !3344)
!12859 = !DILocation(line: 9058, column: 57, scope: !12853)
!12860 = !DILocalVariable(name: "type", arg: 4, scope: !12853, file: !3, line: 9059, type: !3344)
!12861 = !DILocation(line: 9059, column: 9, scope: !12853)
!12862 = !DILocalVariable(name: "max", arg: 5, scope: !12853, file: !3, line: 9059, type: !3421)
!12863 = !DILocation(line: 9059, column: 20, scope: !12853)
!12864 = !DILocation(line: 9062, column: 7, scope: !12853)
!12865 = distinct !DISubprogram(name: "fold_builtin_unordered_cmp", scope: !3, file: !3, line: 9643, type: !12866, scopeLine: 9646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12866 = !DISubroutineType(types: !12867)
!12867 = !{!3344, !3429, !3344, !3344, !3344, !134, !134}
!12868 = !DILocalVariable(name: "loc", arg: 1, scope: !12865, file: !3, line: 9643, type: !3429)
!12869 = !DILocation(line: 9643, column: 40, scope: !12865)
!12870 = !DILocalVariable(name: "fndecl", arg: 2, scope: !12865, file: !3, line: 9643, type: !3344)
!12871 = !DILocation(line: 9643, column: 50, scope: !12865)
!12872 = !DILocalVariable(name: "arg0", arg: 3, scope: !12865, file: !3, line: 9643, type: !3344)
!12873 = !DILocation(line: 9643, column: 63, scope: !12865)
!12874 = !DILocalVariable(name: "arg1", arg: 4, scope: !12865, file: !3, line: 9643, type: !3344)
!12875 = !DILocation(line: 9643, column: 74, scope: !12865)
!12876 = !DILocalVariable(name: "unordered_code", arg: 5, scope: !12865, file: !3, line: 9644, type: !134)
!12877 = !DILocation(line: 9644, column: 23, scope: !12865)
!12878 = !DILocalVariable(name: "ordered_code", arg: 6, scope: !12865, file: !3, line: 9645, type: !134)
!12879 = !DILocation(line: 9645, column: 23, scope: !12865)
!12880 = !DILocalVariable(name: "type", scope: !12865, file: !3, line: 9647, type: !3344)
!12881 = !DILocation(line: 9647, column: 8, scope: !12865)
!12882 = !DILocation(line: 9647, column: 15, scope: !12865)
!12883 = !DILocalVariable(name: "code", scope: !12865, file: !3, line: 9648, type: !134)
!12884 = !DILocation(line: 9648, column: 18, scope: !12865)
!12885 = !DILocalVariable(name: "type0", scope: !12865, file: !3, line: 9649, type: !3344)
!12886 = !DILocation(line: 9649, column: 8, scope: !12865)
!12887 = !DILocalVariable(name: "type1", scope: !12865, file: !3, line: 9649, type: !3344)
!12888 = !DILocation(line: 9649, column: 15, scope: !12865)
!12889 = !DILocalVariable(name: "code0", scope: !12865, file: !3, line: 9650, type: !134)
!12890 = !DILocation(line: 9650, column: 18, scope: !12865)
!12891 = !DILocalVariable(name: "code1", scope: !12865, file: !3, line: 9650, type: !134)
!12892 = !DILocation(line: 9650, column: 25, scope: !12865)
!12893 = !DILocalVariable(name: "cmp_type", scope: !12865, file: !3, line: 9651, type: !3344)
!12894 = !DILocation(line: 9651, column: 8, scope: !12865)
!12895 = !DILocation(line: 9653, column: 11, scope: !12865)
!12896 = !DILocation(line: 9653, column: 9, scope: !12865)
!12897 = !DILocation(line: 9654, column: 11, scope: !12865)
!12898 = !DILocation(line: 9654, column: 9, scope: !12865)
!12899 = !DILocation(line: 9656, column: 11, scope: !12865)
!12900 = !DILocation(line: 9656, column: 9, scope: !12865)
!12901 = !DILocation(line: 9657, column: 11, scope: !12865)
!12902 = !DILocation(line: 9657, column: 9, scope: !12865)
!12903 = !DILocation(line: 9659, column: 7, scope: !12904)
!12904 = distinct !DILexicalBlock(scope: !12865, file: !3, line: 9659, column: 7)
!12905 = !DILocation(line: 9659, column: 13, scope: !12904)
!12906 = !DILocation(line: 9659, column: 26, scope: !12904)
!12907 = !DILocation(line: 9659, column: 29, scope: !12904)
!12908 = !DILocation(line: 9659, column: 35, scope: !12904)
!12909 = !DILocation(line: 9659, column: 7, scope: !12865)
!12910 = !DILocation(line: 9661, column: 16, scope: !12904)
!12911 = !DILocation(line: 9661, column: 42, scope: !12904)
!12912 = !DILocation(line: 9661, column: 39, scope: !12904)
!12913 = !DILocation(line: 9662, column: 9, scope: !12904)
!12914 = !DILocation(line: 9662, column: 17, scope: !12904)
!12915 = !DILocation(line: 9661, column: 14, scope: !12904)
!12916 = !DILocation(line: 9661, column: 5, scope: !12904)
!12917 = !DILocation(line: 9663, column: 12, scope: !12918)
!12918 = distinct !DILexicalBlock(scope: !12904, file: !3, line: 9663, column: 12)
!12919 = !DILocation(line: 9663, column: 18, scope: !12918)
!12920 = !DILocation(line: 9663, column: 31, scope: !12918)
!12921 = !DILocation(line: 9663, column: 34, scope: !12918)
!12922 = !DILocation(line: 9663, column: 40, scope: !12918)
!12923 = !DILocation(line: 9663, column: 12, scope: !12904)
!12924 = !DILocation(line: 9664, column: 16, scope: !12918)
!12925 = !DILocation(line: 9664, column: 14, scope: !12918)
!12926 = !DILocation(line: 9664, column: 5, scope: !12918)
!12927 = !DILocation(line: 9665, column: 12, scope: !12928)
!12928 = distinct !DILexicalBlock(scope: !12918, file: !3, line: 9665, column: 12)
!12929 = !DILocation(line: 9665, column: 18, scope: !12928)
!12930 = !DILocation(line: 9665, column: 34, scope: !12928)
!12931 = !DILocation(line: 9665, column: 37, scope: !12928)
!12932 = !DILocation(line: 9665, column: 43, scope: !12928)
!12933 = !DILocation(line: 9665, column: 12, scope: !12918)
!12934 = !DILocation(line: 9666, column: 16, scope: !12928)
!12935 = !DILocation(line: 9666, column: 14, scope: !12928)
!12936 = !DILocation(line: 9666, column: 5, scope: !12928)
!12937 = !DILocation(line: 9668, column: 28, scope: !12865)
!12938 = !DILocation(line: 9668, column: 33, scope: !12865)
!12939 = !DILocation(line: 9668, column: 43, scope: !12865)
!12940 = !DILocation(line: 9668, column: 10, scope: !12865)
!12941 = !DILocation(line: 9668, column: 8, scope: !12865)
!12942 = !DILocation(line: 9669, column: 28, scope: !12865)
!12943 = !DILocation(line: 9669, column: 33, scope: !12865)
!12944 = !DILocation(line: 9669, column: 43, scope: !12865)
!12945 = !DILocation(line: 9669, column: 10, scope: !12865)
!12946 = !DILocation(line: 9669, column: 8, scope: !12865)
!12947 = !DILocation(line: 9671, column: 7, scope: !12948)
!12948 = distinct !DILexicalBlock(scope: !12865, file: !3, line: 9671, column: 7)
!12949 = !DILocation(line: 9671, column: 22, scope: !12948)
!12950 = !DILocation(line: 9671, column: 7, scope: !12865)
!12951 = !DILocation(line: 9673, column: 12, scope: !12952)
!12952 = distinct !DILexicalBlock(scope: !12953, file: !3, line: 9673, column: 11)
!12953 = distinct !DILexicalBlock(scope: !12948, file: !3, line: 9672, column: 5)
!12954 = !DILocation(line: 9673, column: 11, scope: !12953)
!12955 = !DILocation(line: 9674, column: 32, scope: !12952)
!12956 = !DILocation(line: 9674, column: 37, scope: !12952)
!12957 = !DILocation(line: 9674, column: 43, scope: !12952)
!12958 = !DILocation(line: 9674, column: 62, scope: !12952)
!12959 = !DILocation(line: 9674, column: 68, scope: !12952)
!12960 = !DILocation(line: 9674, column: 9, scope: !12952)
!12961 = !DILocation(line: 9674, column: 2, scope: !12952)
!12962 = !DILocation(line: 9675, column: 14, scope: !12953)
!12963 = !DILocation(line: 9675, column: 7, scope: !12953)
!12964 = !DILocation(line: 9678, column: 10, scope: !12865)
!12965 = !DILocation(line: 9678, column: 54, scope: !12865)
!12966 = !DILocation(line: 9679, column: 12, scope: !12865)
!12967 = !DILocation(line: 9678, column: 8, scope: !12865)
!12968 = !DILocation(line: 9680, column: 10, scope: !12865)
!12969 = !DILocation(line: 9680, column: 3, scope: !12865)
!12970 = !DILocation(line: 9682, column: 1, scope: !12865)
!12971 = distinct !DISubprogram(name: "fold_builtin_sprintf", scope: !3, file: !3, line: 11757, type: !12972, scopeLine: 11759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!12972 = !DISubroutineType(types: !12973)
!12973 = !{!3344, !3429, !3344, !3344, !3344, !1445}
!12974 = !DILocalVariable(name: "loc", arg: 1, scope: !12971, file: !3, line: 11757, type: !3429)
!12975 = !DILocation(line: 11757, column: 34, scope: !12971)
!12976 = !DILocalVariable(name: "dest", arg: 2, scope: !12971, file: !3, line: 11757, type: !3344)
!12977 = !DILocation(line: 11757, column: 44, scope: !12971)
!12978 = !DILocalVariable(name: "fmt", arg: 3, scope: !12971, file: !3, line: 11757, type: !3344)
!12979 = !DILocation(line: 11757, column: 55, scope: !12971)
!12980 = !DILocalVariable(name: "orig", arg: 4, scope: !12971, file: !3, line: 11758, type: !3344)
!12981 = !DILocation(line: 11758, column: 14, scope: !12971)
!12982 = !DILocalVariable(name: "ignored", arg: 5, scope: !12971, file: !3, line: 11758, type: !1445)
!12983 = !DILocation(line: 11758, column: 24, scope: !12971)
!12984 = !DILocalVariable(name: "call", scope: !12971, file: !3, line: 11760, type: !3344)
!12985 = !DILocation(line: 11760, column: 8, scope: !12971)
!12986 = !DILocalVariable(name: "retval", scope: !12971, file: !3, line: 11760, type: !3344)
!12987 = !DILocation(line: 11760, column: 14, scope: !12971)
!12988 = !DILocalVariable(name: "fmt_str", scope: !12971, file: !3, line: 11761, type: !3504)
!12989 = !DILocation(line: 11761, column: 15, scope: !12971)
!12990 = !DILocation(line: 11766, column: 22, scope: !12991)
!12991 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11766, column: 7)
!12992 = !DILocation(line: 11766, column: 8, scope: !12991)
!12993 = !DILocation(line: 11767, column: 7, scope: !12991)
!12994 = !DILocation(line: 11767, column: 25, scope: !12991)
!12995 = !DILocation(line: 11767, column: 11, scope: !12991)
!12996 = !DILocation(line: 11766, column: 7, scope: !12971)
!12997 = !DILocation(line: 11768, column: 5, scope: !12991)
!12998 = !DILocation(line: 11769, column: 7, scope: !12999)
!12999 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11769, column: 7)
!13000 = !DILocation(line: 11769, column: 12, scope: !12999)
!13001 = !DILocation(line: 11769, column: 30, scope: !12999)
!13002 = !DILocation(line: 11769, column: 16, scope: !12999)
!13003 = !DILocation(line: 11769, column: 7, scope: !12971)
!13004 = !DILocation(line: 11770, column: 5, scope: !12999)
!13005 = !DILocation(line: 11773, column: 23, scope: !12971)
!13006 = !DILocation(line: 11773, column: 13, scope: !12971)
!13007 = !DILocation(line: 11773, column: 11, scope: !12971)
!13008 = !DILocation(line: 11774, column: 7, scope: !13009)
!13009 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11774, column: 7)
!13010 = !DILocation(line: 11774, column: 15, scope: !13009)
!13011 = !DILocation(line: 11774, column: 7, scope: !12971)
!13012 = !DILocation(line: 11775, column: 5, scope: !13009)
!13013 = !DILocation(line: 11777, column: 8, scope: !12971)
!13014 = !DILocation(line: 11778, column: 10, scope: !12971)
!13015 = !DILocation(line: 11780, column: 8, scope: !13016)
!13016 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11780, column: 7)
!13017 = !DILocation(line: 11780, column: 7, scope: !12971)
!13018 = !DILocation(line: 11781, column: 5, scope: !13016)
!13019 = !DILocation(line: 11784, column: 15, scope: !13020)
!13020 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11784, column: 7)
!13021 = !DILocation(line: 11784, column: 24, scope: !13020)
!13022 = !DILocation(line: 11784, column: 7, scope: !13020)
!13023 = !DILocation(line: 11784, column: 40, scope: !13020)
!13024 = !DILocation(line: 11784, column: 7, scope: !12971)
!13025 = !DILocalVariable(name: "fn", scope: !13026, file: !3, line: 11786, type: !3344)
!13026 = distinct !DILexicalBlock(scope: !13020, file: !3, line: 11785, column: 5)
!13027 = !DILocation(line: 11786, column: 12, scope: !13026)
!13028 = !DILocation(line: 11786, column: 17, scope: !13026)
!13029 = !DILocation(line: 11788, column: 12, scope: !13030)
!13030 = distinct !DILexicalBlock(scope: !13026, file: !3, line: 11788, column: 11)
!13031 = !DILocation(line: 11788, column: 11, scope: !13026)
!13032 = !DILocation(line: 11789, column: 2, scope: !13030)
!13033 = !DILocation(line: 11792, column: 11, scope: !13034)
!13034 = distinct !DILexicalBlock(scope: !13026, file: !3, line: 11792, column: 11)
!13035 = !DILocation(line: 11792, column: 11, scope: !13026)
!13036 = !DILocation(line: 11793, column: 2, scope: !13034)
!13037 = !DILocation(line: 11797, column: 35, scope: !13026)
!13038 = !DILocation(line: 11797, column: 40, scope: !13026)
!13039 = !DILocation(line: 11797, column: 47, scope: !13026)
!13040 = !DILocation(line: 11797, column: 53, scope: !13026)
!13041 = !DILocation(line: 11797, column: 14, scope: !13026)
!13042 = !DILocation(line: 11797, column: 12, scope: !13026)
!13043 = !DILocation(line: 11798, column: 12, scope: !13044)
!13044 = distinct !DILexicalBlock(scope: !13026, file: !3, line: 11798, column: 11)
!13045 = !DILocation(line: 11798, column: 11, scope: !13026)
!13046 = !DILocation(line: 11799, column: 45, scope: !13044)
!13047 = !DILocation(line: 11799, column: 37, scope: !13044)
!13048 = !DILocation(line: 11799, column: 11, scope: !13044)
!13049 = !DILocation(line: 11799, column: 9, scope: !13044)
!13050 = !DILocation(line: 11799, column: 2, scope: !13044)
!13051 = !DILocation(line: 11800, column: 5, scope: !13026)
!13052 = !DILocation(line: 11803, column: 12, scope: !13053)
!13053 = distinct !DILexicalBlock(scope: !13020, file: !3, line: 11803, column: 12)
!13054 = !DILocation(line: 11803, column: 20, scope: !13053)
!13055 = !DILocation(line: 11803, column: 31, scope: !13053)
!13056 = !DILocation(line: 11803, column: 23, scope: !13053)
!13057 = !DILocation(line: 11803, column: 58, scope: !13053)
!13058 = !DILocation(line: 11803, column: 12, scope: !13020)
!13059 = !DILocalVariable(name: "fn", scope: !13060, file: !3, line: 11805, type: !3344)
!13060 = distinct !DILexicalBlock(scope: !13053, file: !3, line: 11804, column: 5)
!13061 = !DILocation(line: 11805, column: 12, scope: !13060)
!13062 = !DILocation(line: 11806, column: 12, scope: !13060)
!13063 = !DILocation(line: 11806, column: 10, scope: !13060)
!13064 = !DILocation(line: 11808, column: 12, scope: !13065)
!13065 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 11808, column: 11)
!13066 = !DILocation(line: 11808, column: 11, scope: !13060)
!13067 = !DILocation(line: 11809, column: 2, scope: !13065)
!13068 = !DILocation(line: 11812, column: 12, scope: !13069)
!13069 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 11812, column: 11)
!13070 = !DILocation(line: 11812, column: 11, scope: !13060)
!13071 = !DILocation(line: 11813, column: 2, scope: !13069)
!13072 = !DILocation(line: 11816, column: 12, scope: !13073)
!13073 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 11816, column: 11)
!13074 = !DILocation(line: 11816, column: 11, scope: !13060)
!13075 = !DILocation(line: 11818, column: 23, scope: !13076)
!13076 = distinct !DILexicalBlock(scope: !13073, file: !3, line: 11817, column: 2)
!13077 = !DILocation(line: 11818, column: 13, scope: !13076)
!13078 = !DILocation(line: 11818, column: 11, scope: !13076)
!13079 = !DILocation(line: 11819, column: 9, scope: !13080)
!13080 = distinct !DILexicalBlock(scope: !13076, file: !3, line: 11819, column: 8)
!13081 = !DILocation(line: 11819, column: 16, scope: !13080)
!13082 = !DILocation(line: 11819, column: 19, scope: !13080)
!13083 = !DILocation(line: 11819, column: 38, scope: !13080)
!13084 = !DILocation(line: 11819, column: 8, scope: !13076)
!13085 = !DILocation(line: 11820, column: 6, scope: !13080)
!13086 = !DILocation(line: 11821, column: 2, scope: !13076)
!13087 = !DILocation(line: 11822, column: 35, scope: !13060)
!13088 = !DILocation(line: 11822, column: 40, scope: !13060)
!13089 = !DILocation(line: 11822, column: 47, scope: !13060)
!13090 = !DILocation(line: 11822, column: 53, scope: !13060)
!13091 = !DILocation(line: 11822, column: 14, scope: !13060)
!13092 = !DILocation(line: 11822, column: 12, scope: !13060)
!13093 = !DILocation(line: 11823, column: 5, scope: !13060)
!13094 = !DILocation(line: 11825, column: 7, scope: !13095)
!13095 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 11825, column: 7)
!13096 = !DILocation(line: 11825, column: 12, scope: !13095)
!13097 = !DILocation(line: 11825, column: 15, scope: !13095)
!13098 = !DILocation(line: 11825, column: 7, scope: !12971)
!13099 = !DILocation(line: 11828, column: 3, scope: !13100)
!13100 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 11826, column: 5)
!13101 = !DILocation(line: 11828, column: 8, scope: !13100)
!13102 = !DILocation(line: 11829, column: 3, scope: !13100)
!13103 = !DILocation(line: 11827, column: 16, scope: !13100)
!13104 = !DILocation(line: 11827, column: 14, scope: !13100)
!13105 = !DILocation(line: 11830, column: 14, scope: !13100)
!13106 = !DILocation(line: 11830, column: 7, scope: !13100)
!13107 = !DILocation(line: 11833, column: 12, scope: !13095)
!13108 = !DILocation(line: 11833, column: 5, scope: !13095)
!13109 = !DILocation(line: 11834, column: 1, scope: !12971)
!13110 = distinct !DISubprogram(name: "fold_builtin_object_size", scope: !3, file: !3, line: 12144, type: !9834, scopeLine: 12145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13111 = !DILocalVariable(name: "ptr", arg: 1, scope: !13110, file: !3, line: 12144, type: !3344)
!13112 = !DILocation(line: 12144, column: 32, scope: !13110)
!13113 = !DILocalVariable(name: "ost", arg: 2, scope: !13110, file: !3, line: 12144, type: !3344)
!13114 = !DILocation(line: 12144, column: 42, scope: !13110)
!13115 = !DILocalVariable(name: "ret", scope: !13110, file: !3, line: 12146, type: !3344)
!13116 = !DILocation(line: 12146, column: 8, scope: !13110)
!13117 = !DILocalVariable(name: "object_size_type", scope: !13110, file: !3, line: 12147, type: !1445)
!13118 = !DILocation(line: 12147, column: 7, scope: !13110)
!13119 = !DILocation(line: 12149, column: 22, scope: !13120)
!13120 = distinct !DILexicalBlock(scope: !13110, file: !3, line: 12149, column: 7)
!13121 = !DILocation(line: 12149, column: 8, scope: !13120)
!13122 = !DILocation(line: 12150, column: 7, scope: !13120)
!13123 = !DILocation(line: 12150, column: 25, scope: !13120)
!13124 = !DILocation(line: 12150, column: 11, scope: !13120)
!13125 = !DILocation(line: 12149, column: 7, scope: !13110)
!13126 = !DILocation(line: 12151, column: 5, scope: !13120)
!13127 = !DILocation(line: 12153, column: 3, scope: !13110)
!13128 = !DILocation(line: 12155, column: 7, scope: !13129)
!13129 = distinct !DILexicalBlock(scope: !13110, file: !3, line: 12155, column: 7)
!13130 = !DILocation(line: 12155, column: 23, scope: !13129)
!13131 = !DILocation(line: 12156, column: 7, scope: !13129)
!13132 = !DILocation(line: 12156, column: 28, scope: !13129)
!13133 = !DILocation(line: 12156, column: 10, scope: !13129)
!13134 = !DILocation(line: 12156, column: 33, scope: !13129)
!13135 = !DILocation(line: 12157, column: 7, scope: !13129)
!13136 = !DILocation(line: 12157, column: 28, scope: !13129)
!13137 = !DILocation(line: 12157, column: 10, scope: !13129)
!13138 = !DILocation(line: 12157, column: 36, scope: !13129)
!13139 = !DILocation(line: 12155, column: 7, scope: !13110)
!13140 = !DILocation(line: 12158, column: 5, scope: !13129)
!13141 = !DILocation(line: 12160, column: 36, scope: !13110)
!13142 = !DILocation(line: 12160, column: 22, scope: !13110)
!13143 = !DILocation(line: 12160, column: 20, scope: !13110)
!13144 = !DILocation(line: 12165, column: 7, scope: !13145)
!13145 = distinct !DILexicalBlock(scope: !13110, file: !3, line: 12165, column: 7)
!13146 = !DILocation(line: 12165, column: 7, scope: !13110)
!13147 = !DILocation(line: 12166, column: 32, scope: !13145)
!13148 = !DILocation(line: 12166, column: 48, scope: !13145)
!13149 = !DILocation(line: 12166, column: 65, scope: !13145)
!13150 = !DILocation(line: 12166, column: 12, scope: !13145)
!13151 = !DILocation(line: 12166, column: 5, scope: !13145)
!13152 = !DILocation(line: 12168, column: 7, scope: !13153)
!13153 = distinct !DILexicalBlock(scope: !13110, file: !3, line: 12168, column: 7)
!13154 = !DILocation(line: 12168, column: 23, scope: !13153)
!13155 = !DILocation(line: 12168, column: 7, scope: !13110)
!13156 = !DILocation(line: 12169, column: 27, scope: !13153)
!13157 = !DILocation(line: 12170, column: 35, scope: !13153)
!13158 = !DILocation(line: 12170, column: 40, scope: !13153)
!13159 = !DILocation(line: 12170, column: 6, scope: !13153)
!13160 = !DILocation(line: 12169, column: 11, scope: !13153)
!13161 = !DILocation(line: 12169, column: 9, scope: !13153)
!13162 = !DILocation(line: 12169, column: 5, scope: !13153)
!13163 = !DILocation(line: 12172, column: 12, scope: !13164)
!13164 = distinct !DILexicalBlock(scope: !13153, file: !3, line: 12172, column: 12)
!13165 = !DILocation(line: 12172, column: 28, scope: !13164)
!13166 = !DILocation(line: 12172, column: 12, scope: !13153)
!13167 = !DILocalVariable(name: "bytes", scope: !13168, file: !3, line: 12174, type: !3357)
!13168 = distinct !DILexicalBlock(scope: !13164, file: !3, line: 12173, column: 5)
!13169 = !DILocation(line: 12174, column: 30, scope: !13168)
!13170 = !DILocation(line: 12179, column: 44, scope: !13168)
!13171 = !DILocation(line: 12179, column: 49, scope: !13168)
!13172 = !DILocation(line: 12179, column: 15, scope: !13168)
!13173 = !DILocation(line: 12179, column: 13, scope: !13168)
!13174 = !DILocation(line: 12180, column: 11, scope: !13175)
!13175 = distinct !DILexicalBlock(scope: !13168, file: !3, line: 12180, column: 11)
!13176 = !DILocation(line: 12180, column: 46, scope: !13175)
!13177 = !DILocation(line: 12180, column: 63, scope: !13175)
!13178 = !DILocation(line: 12180, column: 20, scope: !13175)
!13179 = !DILocation(line: 12180, column: 17, scope: !13175)
!13180 = !DILocation(line: 12180, column: 11, scope: !13168)
!13181 = !DILocation(line: 12182, column: 24, scope: !13175)
!13182 = !DILocation(line: 12182, column: 40, scope: !13175)
!13183 = !DILocation(line: 12182, column: 8, scope: !13175)
!13184 = !DILocation(line: 12182, column: 6, scope: !13175)
!13185 = !DILocation(line: 12182, column: 2, scope: !13175)
!13186 = !DILocation(line: 12183, column: 5, scope: !13168)
!13187 = !DILocation(line: 12185, column: 7, scope: !13188)
!13188 = distinct !DILexicalBlock(scope: !13110, file: !3, line: 12185, column: 7)
!13189 = !DILocation(line: 12185, column: 7, scope: !13110)
!13190 = !DILocalVariable(name: "low", scope: !13191, file: !3, line: 12187, type: !3357)
!13191 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 12186, column: 5)
!13192 = !DILocation(line: 12187, column: 30, scope: !13191)
!13193 = !DILocation(line: 12187, column: 36, scope: !13191)
!13194 = !DILocalVariable(name: "high", scope: !13191, file: !3, line: 12188, type: !3359)
!13195 = !DILocation(line: 12188, column: 21, scope: !13191)
!13196 = !DILocation(line: 12188, column: 28, scope: !13191)
!13197 = !DILocation(line: 12189, column: 28, scope: !13198)
!13198 = distinct !DILexicalBlock(scope: !13191, file: !3, line: 12189, column: 11)
!13199 = !DILocation(line: 12189, column: 33, scope: !13198)
!13200 = !DILocation(line: 12189, column: 52, scope: !13198)
!13201 = !DILocation(line: 12189, column: 11, scope: !13198)
!13202 = !DILocation(line: 12189, column: 11, scope: !13191)
!13203 = !DILocation(line: 12190, column: 6, scope: !13198)
!13204 = !DILocation(line: 12190, column: 2, scope: !13198)
!13205 = !DILocation(line: 12191, column: 5, scope: !13191)
!13206 = !DILocation(line: 12193, column: 10, scope: !13110)
!13207 = !DILocation(line: 12193, column: 3, scope: !13110)
!13208 = !DILocation(line: 12194, column: 1, scope: !13110)
!13209 = distinct !DISubprogram(name: "fold_builtin_fprintf", scope: !3, file: !3, line: 12814, type: !13210, scopeLine: 12817, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13210 = !DISubroutineType(types: !13211)
!13211 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3421, !573}
!13212 = !DILocalVariable(name: "loc", arg: 1, scope: !13209, file: !3, line: 12814, type: !3429)
!13213 = !DILocation(line: 12814, column: 34, scope: !13209)
!13214 = !DILocalVariable(name: "fndecl", arg: 2, scope: !13209, file: !3, line: 12814, type: !3344)
!13215 = !DILocation(line: 12814, column: 44, scope: !13209)
!13216 = !DILocalVariable(name: "fp", arg: 3, scope: !13209, file: !3, line: 12814, type: !3344)
!13217 = !DILocation(line: 12814, column: 57, scope: !13209)
!13218 = !DILocalVariable(name: "fmt", arg: 4, scope: !13209, file: !3, line: 12815, type: !3344)
!13219 = !DILocation(line: 12815, column: 14, scope: !13209)
!13220 = !DILocalVariable(name: "arg", arg: 5, scope: !13209, file: !3, line: 12815, type: !3344)
!13221 = !DILocation(line: 12815, column: 24, scope: !13209)
!13222 = !DILocalVariable(name: "ignore", arg: 6, scope: !13209, file: !3, line: 12815, type: !3421)
!13223 = !DILocation(line: 12815, column: 34, scope: !13209)
!13224 = !DILocalVariable(name: "fcode", arg: 7, scope: !13209, file: !3, line: 12816, type: !573)
!13225 = !DILocation(line: 12816, column: 32, scope: !13209)
!13226 = !DILocalVariable(name: "fn_fputc", scope: !13209, file: !3, line: 12818, type: !3344)
!13227 = !DILocation(line: 12818, column: 8, scope: !13209)
!13228 = !DILocalVariable(name: "fn_fputs", scope: !13209, file: !3, line: 12818, type: !3344)
!13229 = !DILocation(line: 12818, column: 18, scope: !13209)
!13230 = !DILocalVariable(name: "call", scope: !13209, file: !3, line: 12818, type: !3344)
!13231 = !DILocation(line: 12818, column: 28, scope: !13209)
!13232 = !DILocalVariable(name: "fmt_str", scope: !13209, file: !3, line: 12819, type: !3504)
!13233 = !DILocation(line: 12819, column: 15, scope: !13209)
!13234 = !DILocation(line: 12822, column: 9, scope: !13235)
!13235 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12822, column: 7)
!13236 = !DILocation(line: 12822, column: 7, scope: !13209)
!13237 = !DILocation(line: 12823, column: 5, scope: !13235)
!13238 = !DILocation(line: 12826, column: 22, scope: !13239)
!13239 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12826, column: 7)
!13240 = !DILocation(line: 12826, column: 8, scope: !13239)
!13241 = !DILocation(line: 12826, column: 7, scope: !13209)
!13242 = !DILocation(line: 12827, column: 5, scope: !13239)
!13243 = !DILocation(line: 12828, column: 22, scope: !13244)
!13244 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12828, column: 7)
!13245 = !DILocation(line: 12828, column: 8, scope: !13244)
!13246 = !DILocation(line: 12828, column: 7, scope: !13209)
!13247 = !DILocation(line: 12829, column: 5, scope: !13244)
!13248 = !DILocation(line: 12832, column: 23, scope: !13209)
!13249 = !DILocation(line: 12832, column: 13, scope: !13209)
!13250 = !DILocation(line: 12832, column: 11, scope: !13209)
!13251 = !DILocation(line: 12833, column: 7, scope: !13252)
!13252 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12833, column: 7)
!13253 = !DILocation(line: 12833, column: 15, scope: !13252)
!13254 = !DILocation(line: 12833, column: 7, scope: !13209)
!13255 = !DILocation(line: 12834, column: 5, scope: !13252)
!13256 = !DILocation(line: 12836, column: 7, scope: !13257)
!13257 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12836, column: 7)
!13258 = !DILocation(line: 12836, column: 13, scope: !13257)
!13259 = !DILocation(line: 12836, column: 7, scope: !13209)
!13260 = !DILocation(line: 12840, column: 18, scope: !13261)
!13261 = distinct !DILexicalBlock(scope: !13257, file: !3, line: 12837, column: 5)
!13262 = !DILocation(line: 12840, column: 16, scope: !13261)
!13263 = !DILocation(line: 12841, column: 18, scope: !13261)
!13264 = !DILocation(line: 12841, column: 16, scope: !13261)
!13265 = !DILocation(line: 12842, column: 5, scope: !13261)
!13266 = !DILocation(line: 12845, column: 18, scope: !13267)
!13267 = distinct !DILexicalBlock(scope: !13257, file: !3, line: 12844, column: 5)
!13268 = !DILocation(line: 12845, column: 16, scope: !13267)
!13269 = !DILocation(line: 12846, column: 18, scope: !13267)
!13270 = !DILocation(line: 12846, column: 16, scope: !13267)
!13271 = !DILocation(line: 12849, column: 8, scope: !13272)
!13272 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12849, column: 7)
!13273 = !DILocation(line: 12849, column: 7, scope: !13209)
!13274 = !DILocation(line: 12850, column: 5, scope: !13272)
!13275 = !DILocation(line: 12853, column: 15, scope: !13276)
!13276 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12853, column: 7)
!13277 = !DILocation(line: 12853, column: 24, scope: !13276)
!13278 = !DILocation(line: 12853, column: 7, scope: !13276)
!13279 = !DILocation(line: 12853, column: 40, scope: !13276)
!13280 = !DILocation(line: 12853, column: 7, scope: !13209)
!13281 = !DILocation(line: 12855, column: 11, scope: !13282)
!13282 = distinct !DILexicalBlock(scope: !13283, file: !3, line: 12855, column: 11)
!13283 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 12854, column: 5)
!13284 = !DILocation(line: 12855, column: 17, scope: !13282)
!13285 = !DILocation(line: 12855, column: 38, scope: !13282)
!13286 = !DILocation(line: 12855, column: 41, scope: !13282)
!13287 = !DILocation(line: 12855, column: 47, scope: !13282)
!13288 = !DILocation(line: 12856, column: 4, scope: !13282)
!13289 = !DILocation(line: 12856, column: 7, scope: !13282)
!13290 = !DILocation(line: 12855, column: 11, scope: !13283)
!13291 = !DILocation(line: 12857, column: 2, scope: !13282)
!13292 = !DILocation(line: 12860, column: 11, scope: !13293)
!13293 = distinct !DILexicalBlock(scope: !13283, file: !3, line: 12860, column: 11)
!13294 = !DILocation(line: 12860, column: 22, scope: !13293)
!13295 = !DILocation(line: 12860, column: 11, scope: !13283)
!13296 = !DILocation(line: 12864, column: 8, scope: !13297)
!13297 = distinct !DILexicalBlock(scope: !13298, file: !3, line: 12864, column: 8)
!13298 = distinct !DILexicalBlock(scope: !13293, file: !3, line: 12861, column: 2)
!13299 = !DILocation(line: 12864, column: 8, scope: !13298)
!13300 = !DILocation(line: 12865, column: 6, scope: !13297)
!13301 = !DILocation(line: 12867, column: 26, scope: !13298)
!13302 = !DILocation(line: 12867, column: 11, scope: !13298)
!13303 = !DILocation(line: 12867, column: 4, scope: !13298)
!13304 = !DILocation(line: 12873, column: 11, scope: !13305)
!13305 = distinct !DILexicalBlock(scope: !13283, file: !3, line: 12873, column: 11)
!13306 = !DILocation(line: 12873, column: 11, scope: !13283)
!13307 = !DILocation(line: 12874, column: 30, scope: !13305)
!13308 = !DILocation(line: 12874, column: 35, scope: !13305)
!13309 = !DILocation(line: 12874, column: 48, scope: !13305)
!13310 = !DILocation(line: 12874, column: 53, scope: !13305)
!13311 = !DILocation(line: 12874, column: 9, scope: !13305)
!13312 = !DILocation(line: 12874, column: 7, scope: !13305)
!13313 = !DILocation(line: 12874, column: 2, scope: !13305)
!13314 = !DILocation(line: 12875, column: 5, scope: !13283)
!13315 = !DILocation(line: 12878, column: 12, scope: !13316)
!13316 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 12878, column: 12)
!13317 = !DILocation(line: 12878, column: 18, scope: !13316)
!13318 = !DILocation(line: 12878, column: 39, scope: !13316)
!13319 = !DILocation(line: 12878, column: 42, scope: !13316)
!13320 = !DILocation(line: 12878, column: 48, scope: !13316)
!13321 = !DILocation(line: 12878, column: 12, scope: !13276)
!13322 = !DILocation(line: 12879, column: 5, scope: !13316)
!13323 = !DILocation(line: 12882, column: 20, scope: !13324)
!13324 = distinct !DILexicalBlock(scope: !13316, file: !3, line: 12882, column: 12)
!13325 = !DILocation(line: 12882, column: 12, scope: !13324)
!13326 = !DILocation(line: 12882, column: 47, scope: !13324)
!13327 = !DILocation(line: 12882, column: 12, scope: !13316)
!13328 = !DILocation(line: 12884, column: 12, scope: !13329)
!13329 = distinct !DILexicalBlock(scope: !13330, file: !3, line: 12884, column: 11)
!13330 = distinct !DILexicalBlock(scope: !13324, file: !3, line: 12883, column: 5)
!13331 = !DILocation(line: 12884, column: 16, scope: !13329)
!13332 = !DILocation(line: 12884, column: 34, scope: !13329)
!13333 = !DILocation(line: 12884, column: 20, scope: !13329)
!13334 = !DILocation(line: 12884, column: 11, scope: !13330)
!13335 = !DILocation(line: 12885, column: 2, scope: !13329)
!13336 = !DILocation(line: 12886, column: 11, scope: !13337)
!13337 = distinct !DILexicalBlock(scope: !13330, file: !3, line: 12886, column: 11)
!13338 = !DILocation(line: 12886, column: 11, scope: !13330)
!13339 = !DILocation(line: 12887, column: 30, scope: !13337)
!13340 = !DILocation(line: 12887, column: 35, scope: !13337)
!13341 = !DILocation(line: 12887, column: 48, scope: !13337)
!13342 = !DILocation(line: 12887, column: 53, scope: !13337)
!13343 = !DILocation(line: 12887, column: 9, scope: !13337)
!13344 = !DILocation(line: 12887, column: 7, scope: !13337)
!13345 = !DILocation(line: 12887, column: 2, scope: !13337)
!13346 = !DILocation(line: 12888, column: 5, scope: !13330)
!13347 = !DILocation(line: 12891, column: 20, scope: !13348)
!13348 = distinct !DILexicalBlock(scope: !13324, file: !3, line: 12891, column: 12)
!13349 = !DILocation(line: 12891, column: 12, scope: !13348)
!13350 = !DILocation(line: 12891, column: 47, scope: !13348)
!13351 = !DILocation(line: 12891, column: 12, scope: !13324)
!13352 = !DILocation(line: 12893, column: 12, scope: !13353)
!13353 = distinct !DILexicalBlock(scope: !13354, file: !3, line: 12893, column: 11)
!13354 = distinct !DILexicalBlock(scope: !13348, file: !3, line: 12892, column: 5)
!13355 = !DILocation(line: 12893, column: 16, scope: !13353)
!13356 = !DILocation(line: 12893, column: 34, scope: !13353)
!13357 = !DILocation(line: 12893, column: 20, scope: !13353)
!13358 = !DILocation(line: 12893, column: 11, scope: !13354)
!13359 = !DILocation(line: 12894, column: 2, scope: !13353)
!13360 = !DILocation(line: 12895, column: 11, scope: !13361)
!13361 = distinct !DILexicalBlock(scope: !13354, file: !3, line: 12895, column: 11)
!13362 = !DILocation(line: 12895, column: 11, scope: !13354)
!13363 = !DILocation(line: 12896, column: 30, scope: !13361)
!13364 = !DILocation(line: 12896, column: 35, scope: !13361)
!13365 = !DILocation(line: 12896, column: 48, scope: !13361)
!13366 = !DILocation(line: 12896, column: 53, scope: !13361)
!13367 = !DILocation(line: 12896, column: 9, scope: !13361)
!13368 = !DILocation(line: 12896, column: 7, scope: !13361)
!13369 = !DILocation(line: 12896, column: 2, scope: !13361)
!13370 = !DILocation(line: 12897, column: 5, scope: !13354)
!13371 = !DILocation(line: 12899, column: 8, scope: !13372)
!13372 = distinct !DILexicalBlock(scope: !13209, file: !3, line: 12899, column: 7)
!13373 = !DILocation(line: 12899, column: 7, scope: !13209)
!13374 = !DILocation(line: 12900, column: 5, scope: !13372)
!13375 = !DILocation(line: 12901, column: 28, scope: !13209)
!13376 = !DILocation(line: 12901, column: 33, scope: !13209)
!13377 = !DILocation(line: 12901, column: 65, scope: !13209)
!13378 = !DILocation(line: 12901, column: 10, scope: !13209)
!13379 = !DILocation(line: 12901, column: 3, scope: !13209)
!13380 = !DILocation(line: 12902, column: 1, scope: !13209)
!13381 = distinct !DISubprogram(name: "fold_builtin_memset", scope: !3, file: !3, line: 8111, type: !9308, scopeLine: 8113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13382 = !DILocalVariable(name: "loc", arg: 1, scope: !13381, file: !3, line: 8111, type: !3429)
!13383 = !DILocation(line: 8111, column: 33, scope: !13381)
!13384 = !DILocalVariable(name: "dest", arg: 2, scope: !13381, file: !3, line: 8111, type: !3344)
!13385 = !DILocation(line: 8111, column: 43, scope: !13381)
!13386 = !DILocalVariable(name: "c", arg: 3, scope: !13381, file: !3, line: 8111, type: !3344)
!13387 = !DILocation(line: 8111, column: 54, scope: !13381)
!13388 = !DILocalVariable(name: "len", arg: 4, scope: !13381, file: !3, line: 8111, type: !3344)
!13389 = !DILocation(line: 8111, column: 62, scope: !13381)
!13390 = !DILocalVariable(name: "type", arg: 5, scope: !13381, file: !3, line: 8112, type: !3344)
!13391 = !DILocation(line: 8112, column: 13, scope: !13381)
!13392 = !DILocalVariable(name: "ignore", arg: 6, scope: !13381, file: !3, line: 8112, type: !3421)
!13393 = !DILocation(line: 8112, column: 24, scope: !13381)
!13394 = !DILocalVariable(name: "var", scope: !13381, file: !3, line: 8114, type: !3344)
!13395 = !DILocation(line: 8114, column: 8, scope: !13381)
!13396 = !DILocalVariable(name: "ret", scope: !13381, file: !3, line: 8114, type: !3344)
!13397 = !DILocation(line: 8114, column: 13, scope: !13381)
!13398 = !DILocalVariable(name: "etype", scope: !13381, file: !3, line: 8114, type: !3344)
!13399 = !DILocation(line: 8114, column: 18, scope: !13381)
!13400 = !DILocalVariable(name: "length", scope: !13381, file: !3, line: 8115, type: !3357)
!13401 = !DILocation(line: 8115, column: 26, scope: !13381)
!13402 = !DILocalVariable(name: "cval", scope: !13381, file: !3, line: 8115, type: !3357)
!13403 = !DILocation(line: 8115, column: 34, scope: !13381)
!13404 = !DILocation(line: 8117, column: 23, scope: !13405)
!13405 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8117, column: 7)
!13406 = !DILocation(line: 8117, column: 9, scope: !13405)
!13407 = !DILocation(line: 8118, column: 7, scope: !13405)
!13408 = !DILocation(line: 8118, column: 26, scope: !13405)
!13409 = !DILocation(line: 8118, column: 12, scope: !13405)
!13410 = !DILocation(line: 8119, column: 7, scope: !13405)
!13411 = !DILocation(line: 8119, column: 26, scope: !13405)
!13412 = !DILocation(line: 8119, column: 12, scope: !13405)
!13413 = !DILocation(line: 8117, column: 7, scope: !13381)
!13414 = !DILocation(line: 8120, column: 5, scope: !13405)
!13415 = !DILocation(line: 8122, column: 24, scope: !13416)
!13416 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8122, column: 7)
!13417 = !DILocation(line: 8122, column: 9, scope: !13416)
!13418 = !DILocation(line: 8122, column: 7, scope: !13381)
!13419 = !DILocation(line: 8123, column: 5, scope: !13416)
!13420 = !DILocation(line: 8126, column: 22, scope: !13421)
!13421 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8126, column: 7)
!13422 = !DILocation(line: 8126, column: 7, scope: !13421)
!13423 = !DILocation(line: 8126, column: 7, scope: !13381)
!13424 = !DILocation(line: 8127, column: 34, scope: !13421)
!13425 = !DILocation(line: 8127, column: 39, scope: !13421)
!13426 = !DILocation(line: 8127, column: 45, scope: !13421)
!13427 = !DILocation(line: 8127, column: 51, scope: !13421)
!13428 = !DILocation(line: 8127, column: 12, scope: !13421)
!13429 = !DILocation(line: 8127, column: 5, scope: !13421)
!13430 = !DILocation(line: 8129, column: 24, scope: !13431)
!13431 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8129, column: 7)
!13432 = !DILocation(line: 8129, column: 9, scope: !13431)
!13433 = !DILocation(line: 8129, column: 30, scope: !13431)
!13434 = !DILocation(line: 8129, column: 33, scope: !13431)
!13435 = !DILocation(line: 8129, column: 7, scope: !13381)
!13436 = !DILocation(line: 8130, column: 5, scope: !13431)
!13437 = !DILocation(line: 8132, column: 9, scope: !13381)
!13438 = !DILocation(line: 8132, column: 7, scope: !13381)
!13439 = !DILocation(line: 8133, column: 3, scope: !13381)
!13440 = !DILocation(line: 8134, column: 7, scope: !13441)
!13441 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8134, column: 7)
!13442 = !DILocation(line: 8134, column: 23, scope: !13441)
!13443 = !DILocation(line: 8134, column: 7, scope: !13381)
!13444 = !DILocation(line: 8135, column: 5, scope: !13441)
!13445 = !DILocation(line: 8137, column: 9, scope: !13381)
!13446 = !DILocation(line: 8137, column: 7, scope: !13381)
!13447 = !DILocation(line: 8138, column: 7, scope: !13448)
!13448 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8138, column: 7)
!13449 = !DILocation(line: 8138, column: 7, scope: !13381)
!13450 = !DILocation(line: 8139, column: 5, scope: !13448)
!13451 = !DILocation(line: 8141, column: 11, scope: !13381)
!13452 = !DILocation(line: 8141, column: 9, scope: !13381)
!13453 = !DILocation(line: 8142, column: 7, scope: !13454)
!13454 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8142, column: 7)
!13455 = !DILocation(line: 8142, column: 25, scope: !13454)
!13456 = !DILocation(line: 8142, column: 7, scope: !13381)
!13457 = !DILocation(line: 8143, column: 13, scope: !13454)
!13458 = !DILocation(line: 8143, column: 11, scope: !13454)
!13459 = !DILocation(line: 8143, column: 5, scope: !13454)
!13460 = !DILocation(line: 8145, column: 8, scope: !13461)
!13461 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8145, column: 7)
!13462 = !DILocation(line: 8146, column: 7, scope: !13461)
!13463 = !DILocation(line: 8146, column: 11, scope: !13461)
!13464 = !DILocation(line: 8145, column: 7, scope: !13381)
!13465 = !DILocation(line: 8147, column: 5, scope: !13461)
!13466 = !DILocation(line: 8149, column: 31, scope: !13467)
!13467 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8149, column: 7)
!13468 = !DILocation(line: 8149, column: 9, scope: !13467)
!13469 = !DILocation(line: 8149, column: 7, scope: !13381)
!13470 = !DILocation(line: 8150, column: 5, scope: !13467)
!13471 = !DILocation(line: 8152, column: 26, scope: !13381)
!13472 = !DILocation(line: 8152, column: 12, scope: !13381)
!13473 = !DILocation(line: 8152, column: 10, scope: !13381)
!13474 = !DILocation(line: 8153, column: 7, scope: !13475)
!13475 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8153, column: 7)
!13476 = !DILocation(line: 8153, column: 44, scope: !13475)
!13477 = !DILocation(line: 8153, column: 41, scope: !13475)
!13478 = !DILocation(line: 8154, column: 7, scope: !13475)
!13479 = !DILocation(line: 8154, column: 33, scope: !13475)
!13480 = !DILocation(line: 8154, column: 39, scope: !13475)
!13481 = !DILocation(line: 8154, column: 10, scope: !13475)
!13482 = !DILocation(line: 8154, column: 58, scope: !13475)
!13483 = !DILocation(line: 8155, column: 11, scope: !13475)
!13484 = !DILocation(line: 8155, column: 5, scope: !13475)
!13485 = !DILocation(line: 8155, column: 3, scope: !13475)
!13486 = !DILocation(line: 8153, column: 7, scope: !13381)
!13487 = !DILocation(line: 8156, column: 5, scope: !13475)
!13488 = !DILocation(line: 8158, column: 7, scope: !13489)
!13489 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8158, column: 7)
!13490 = !DILocation(line: 8158, column: 14, scope: !13489)
!13491 = !DILocation(line: 8158, column: 7, scope: !13381)
!13492 = !DILocation(line: 8159, column: 5, scope: !13489)
!13493 = !DILocation(line: 8161, column: 22, scope: !13494)
!13494 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8161, column: 7)
!13495 = !DILocation(line: 8161, column: 7, scope: !13494)
!13496 = !DILocation(line: 8161, column: 7, scope: !13381)
!13497 = !DILocation(line: 8162, column: 10, scope: !13494)
!13498 = !DILocation(line: 8162, column: 5, scope: !13494)
!13499 = !DILocation(line: 8168, column: 28, scope: !13500)
!13500 = distinct !DILexicalBlock(scope: !13494, file: !3, line: 8164, column: 5)
!13501 = !DILocation(line: 8168, column: 14, scope: !13500)
!13502 = !DILocation(line: 8168, column: 12, scope: !13500)
!13503 = !DILocation(line: 8169, column: 12, scope: !13500)
!13504 = !DILocation(line: 8170, column: 15, scope: !13500)
!13505 = !DILocation(line: 8170, column: 20, scope: !13500)
!13506 = !DILocation(line: 8170, column: 12, scope: !13500)
!13507 = !DILocation(line: 8171, column: 15, scope: !13500)
!13508 = !DILocation(line: 8171, column: 20, scope: !13500)
!13509 = !DILocation(line: 8171, column: 12, scope: !13500)
!13510 = !DILocation(line: 8172, column: 16, scope: !13500)
!13511 = !DILocation(line: 8172, column: 21, scope: !13500)
!13512 = !DILocation(line: 8172, column: 28, scope: !13500)
!13513 = !DILocation(line: 8172, column: 12, scope: !13500)
!13514 = !DILocation(line: 8175, column: 29, scope: !13381)
!13515 = !DILocation(line: 8175, column: 36, scope: !13381)
!13516 = !DILocation(line: 8175, column: 9, scope: !13381)
!13517 = !DILocation(line: 8175, column: 7, scope: !13381)
!13518 = !DILocation(line: 8176, column: 38, scope: !13381)
!13519 = !DILocation(line: 8177, column: 24, scope: !13381)
!13520 = !DILocation(line: 8178, column: 30, scope: !13381)
!13521 = !DILocation(line: 8178, column: 10, scope: !13381)
!13522 = !DILocation(line: 8179, column: 10, scope: !13381)
!13523 = !DILocation(line: 8177, column: 6, scope: !13381)
!13524 = !DILocation(line: 8176, column: 9, scope: !13381)
!13525 = !DILocation(line: 8176, column: 7, scope: !13381)
!13526 = !DILocation(line: 8180, column: 9, scope: !13381)
!13527 = !DILocation(line: 8180, column: 7, scope: !13381)
!13528 = !DILocation(line: 8181, column: 7, scope: !13529)
!13529 = distinct !DILexicalBlock(scope: !13381, file: !3, line: 8181, column: 7)
!13530 = !DILocation(line: 8181, column: 7, scope: !13381)
!13531 = !DILocation(line: 8182, column: 12, scope: !13529)
!13532 = !DILocation(line: 8182, column: 5, scope: !13529)
!13533 = !DILocation(line: 8184, column: 32, scope: !13381)
!13534 = !DILocation(line: 8184, column: 37, scope: !13381)
!13535 = !DILocation(line: 8184, column: 43, scope: !13381)
!13536 = !DILocation(line: 8184, column: 49, scope: !13381)
!13537 = !DILocation(line: 8184, column: 10, scope: !13381)
!13538 = !DILocation(line: 8184, column: 3, scope: !13381)
!13539 = !DILocation(line: 8185, column: 1, scope: !13381)
!13540 = distinct !DISubprogram(name: "var_decl_component_p", scope: !3, file: !3, line: 8099, type: !4815, scopeLine: 8100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13541 = !DILocalVariable(name: "var", arg: 1, scope: !13540, file: !3, line: 8099, type: !3344)
!13542 = !DILocation(line: 8099, column: 28, scope: !13540)
!13543 = !DILocalVariable(name: "inner", scope: !13540, file: !3, line: 8101, type: !3344)
!13544 = !DILocation(line: 8101, column: 8, scope: !13540)
!13545 = !DILocation(line: 8101, column: 16, scope: !13540)
!13546 = !DILocation(line: 8102, column: 3, scope: !13540)
!13547 = !DILocation(line: 8102, column: 31, scope: !13540)
!13548 = !DILocation(line: 8102, column: 10, scope: !13540)
!13549 = !DILocation(line: 8103, column: 13, scope: !13540)
!13550 = !DILocation(line: 8103, column: 11, scope: !13540)
!13551 = distinct !{!13551, !13546, !13549}
!13552 = !DILocation(line: 8104, column: 10, scope: !13540)
!13553 = !DILocation(line: 0, scope: !13540)
!13554 = !DILocation(line: 8104, column: 3, scope: !13540)
!13555 = distinct !DISubprogram(name: "target_char_cast", scope: !3, file: !3, line: 581, type: !13556, scopeLine: 582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13556 = !DISubroutineType(types: !13557)
!13557 = !{!1445, !3344, !3569}
!13558 = !DILocalVariable(name: "cst", arg: 1, scope: !13555, file: !3, line: 581, type: !3344)
!13559 = !DILocation(line: 581, column: 24, scope: !13555)
!13560 = !DILocalVariable(name: "p", arg: 2, scope: !13555, file: !3, line: 581, type: !3569)
!13561 = !DILocation(line: 581, column: 35, scope: !13555)
!13562 = !DILocalVariable(name: "val", scope: !13555, file: !3, line: 583, type: !3357)
!13563 = !DILocation(line: 583, column: 26, scope: !13555)
!13564 = !DILocalVariable(name: "hostval", scope: !13555, file: !3, line: 583, type: !3357)
!13565 = !DILocation(line: 583, column: 31, scope: !13555)
!13566 = !DILocation(line: 585, column: 23, scope: !13567)
!13567 = distinct !DILexicalBlock(scope: !13555, file: !3, line: 585, column: 7)
!13568 = !DILocation(line: 585, column: 8, scope: !13567)
!13569 = !DILocation(line: 585, column: 7, scope: !13555)
!13570 = !DILocation(line: 587, column: 5, scope: !13567)
!13571 = !DILocation(line: 589, column: 23, scope: !13555)
!13572 = !DILocation(line: 589, column: 9, scope: !13555)
!13573 = !DILocation(line: 589, column: 7, scope: !13555)
!13574 = !DILocation(line: 591, column: 9, scope: !13575)
!13575 = distinct !DILexicalBlock(scope: !13555, file: !3, line: 590, column: 7)
!13576 = !DILocation(line: 593, column: 13, scope: !13555)
!13577 = !DILocation(line: 593, column: 11, scope: !13555)
!13578 = !DILocation(line: 595, column: 13, scope: !13579)
!13579 = distinct !DILexicalBlock(scope: !13555, file: !3, line: 594, column: 7)
!13580 = !DILocation(line: 597, column: 7, scope: !13581)
!13581 = distinct !DILexicalBlock(scope: !13555, file: !3, line: 597, column: 7)
!13582 = !DILocation(line: 597, column: 14, scope: !13581)
!13583 = !DILocation(line: 597, column: 11, scope: !13581)
!13584 = !DILocation(line: 597, column: 7, scope: !13555)
!13585 = !DILocation(line: 598, column: 5, scope: !13581)
!13586 = !DILocation(line: 600, column: 8, scope: !13555)
!13587 = !DILocation(line: 600, column: 4, scope: !13555)
!13588 = !DILocation(line: 600, column: 6, scope: !13555)
!13589 = !DILocation(line: 601, column: 3, scope: !13555)
!13590 = !DILocation(line: 602, column: 1, scope: !13555)
!13591 = distinct !DISubprogram(name: "build_builtin_expect_predicate", scope: !3, file: !3, line: 6547, type: !6901, scopeLine: 6548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13592 = !DILocalVariable(name: "loc", arg: 1, scope: !13591, file: !3, line: 6547, type: !3429)
!13593 = !DILocation(line: 6547, column: 44, scope: !13591)
!13594 = !DILocalVariable(name: "pred", arg: 2, scope: !13591, file: !3, line: 6547, type: !3344)
!13595 = !DILocation(line: 6547, column: 54, scope: !13591)
!13596 = !DILocalVariable(name: "expected", arg: 3, scope: !13591, file: !3, line: 6547, type: !3344)
!13597 = !DILocation(line: 6547, column: 65, scope: !13591)
!13598 = !DILocalVariable(name: "fn", scope: !13591, file: !3, line: 6549, type: !3344)
!13599 = !DILocation(line: 6549, column: 8, scope: !13591)
!13600 = !DILocalVariable(name: "arg_types", scope: !13591, file: !3, line: 6549, type: !3344)
!13601 = !DILocation(line: 6549, column: 12, scope: !13591)
!13602 = !DILocalVariable(name: "pred_type", scope: !13591, file: !3, line: 6549, type: !3344)
!13603 = !DILocation(line: 6549, column: 23, scope: !13591)
!13604 = !DILocalVariable(name: "expected_type", scope: !13591, file: !3, line: 6549, type: !3344)
!13605 = !DILocation(line: 6549, column: 34, scope: !13591)
!13606 = !DILocalVariable(name: "call_expr", scope: !13591, file: !3, line: 6549, type: !3344)
!13607 = !DILocation(line: 6549, column: 49, scope: !13591)
!13608 = !DILocalVariable(name: "ret_type", scope: !13591, file: !3, line: 6549, type: !3344)
!13609 = !DILocation(line: 6549, column: 60, scope: !13591)
!13610 = !DILocation(line: 6551, column: 8, scope: !13591)
!13611 = !DILocation(line: 6551, column: 6, scope: !13591)
!13612 = !DILocation(line: 6552, column: 15, scope: !13591)
!13613 = !DILocation(line: 6552, column: 13, scope: !13591)
!13614 = !DILocation(line: 6553, column: 14, scope: !13591)
!13615 = !DILocation(line: 6553, column: 12, scope: !13591)
!13616 = !DILocation(line: 6554, column: 15, scope: !13591)
!13617 = !DILocation(line: 6554, column: 13, scope: !13591)
!13618 = !DILocation(line: 6555, column: 19, scope: !13591)
!13619 = !DILocation(line: 6555, column: 17, scope: !13591)
!13620 = !DILocation(line: 6557, column: 28, scope: !13591)
!13621 = !DILocation(line: 6557, column: 33, scope: !13591)
!13622 = !DILocation(line: 6557, column: 44, scope: !13591)
!13623 = !DILocation(line: 6557, column: 10, scope: !13591)
!13624 = !DILocation(line: 6557, column: 8, scope: !13591)
!13625 = !DILocation(line: 6558, column: 32, scope: !13591)
!13626 = !DILocation(line: 6558, column: 37, scope: !13591)
!13627 = !DILocation(line: 6558, column: 52, scope: !13591)
!13628 = !DILocation(line: 6558, column: 14, scope: !13591)
!13629 = !DILocation(line: 6558, column: 12, scope: !13591)
!13630 = !DILocation(line: 6559, column: 36, scope: !13591)
!13631 = !DILocation(line: 6559, column: 41, scope: !13591)
!13632 = !DILocation(line: 6559, column: 48, scope: !13591)
!13633 = !DILocation(line: 6559, column: 54, scope: !13591)
!13634 = !DILocation(line: 6559, column: 15, scope: !13591)
!13635 = !DILocation(line: 6559, column: 13, scope: !13591)
!13636 = !DILocation(line: 6561, column: 10, scope: !13591)
!13637 = !DILocation(line: 6561, column: 3, scope: !13591)
!13638 = distinct !DISubprogram(name: "fold_builtin_sincos", scope: !3, file: !3, line: 7260, type: !9754, scopeLine: 7262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13639 = !DILocalVariable(name: "loc", arg: 1, scope: !13638, file: !3, line: 7260, type: !3429)
!13640 = !DILocation(line: 7260, column: 33, scope: !13638)
!13641 = !DILocalVariable(name: "arg0", arg: 2, scope: !13638, file: !3, line: 7261, type: !3344)
!13642 = !DILocation(line: 7261, column: 13, scope: !13638)
!13643 = !DILocalVariable(name: "arg1", arg: 3, scope: !13638, file: !3, line: 7261, type: !3344)
!13644 = !DILocation(line: 7261, column: 24, scope: !13638)
!13645 = !DILocalVariable(name: "arg2", arg: 4, scope: !13638, file: !3, line: 7261, type: !3344)
!13646 = !DILocation(line: 7261, column: 35, scope: !13638)
!13647 = !DILocation(line: 7264, column: 2, scope: !13638)
!13648 = distinct !DISubprogram(name: "fold_builtin_memory_op", scope: !3, file: !3, line: 8219, type: !13649, scopeLine: 8221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!13649 = !DISubroutineType(types: !13650)
!13650 = !{!3344, !3429, !3344, !3344, !3344, !3344, !3421, !1445}
!13651 = !DILocalVariable(name: "loc", arg: 1, scope: !13648, file: !3, line: 8219, type: !3429)
!13652 = !DILocation(line: 8219, column: 36, scope: !13648)
!13653 = !DILocalVariable(name: "dest", arg: 2, scope: !13648, file: !3, line: 8219, type: !3344)
!13654 = !DILocation(line: 8219, column: 46, scope: !13648)
!13655 = !DILocalVariable(name: "src", arg: 3, scope: !13648, file: !3, line: 8219, type: !3344)
!13656 = !DILocation(line: 8219, column: 57, scope: !13648)
!13657 = !DILocalVariable(name: "len", arg: 4, scope: !13648, file: !3, line: 8220, type: !3344)
!13658 = !DILocation(line: 8220, column: 9, scope: !13648)
!13659 = !DILocalVariable(name: "type", arg: 5, scope: !13648, file: !3, line: 8220, type: !3344)
!13660 = !DILocation(line: 8220, column: 19, scope: !13648)
!13661 = !DILocalVariable(name: "ignore", arg: 6, scope: !13648, file: !3, line: 8220, type: !3421)
!13662 = !DILocation(line: 8220, column: 30, scope: !13648)
!13663 = !DILocalVariable(name: "endp", arg: 7, scope: !13648, file: !3, line: 8220, type: !1445)
!13664 = !DILocation(line: 8220, column: 42, scope: !13648)
!13665 = !DILocalVariable(name: "destvar", scope: !13648, file: !3, line: 8222, type: !3344)
!13666 = !DILocation(line: 8222, column: 8, scope: !13648)
!13667 = !DILocalVariable(name: "srcvar", scope: !13648, file: !3, line: 8222, type: !3344)
!13668 = !DILocation(line: 8222, column: 17, scope: !13648)
!13669 = !DILocalVariable(name: "expr", scope: !13648, file: !3, line: 8222, type: !3344)
!13670 = !DILocation(line: 8222, column: 25, scope: !13648)
!13671 = !DILocation(line: 8224, column: 23, scope: !13672)
!13672 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8224, column: 7)
!13673 = !DILocation(line: 8224, column: 9, scope: !13672)
!13674 = !DILocation(line: 8225, column: 7, scope: !13672)
!13675 = !DILocation(line: 8225, column: 26, scope: !13672)
!13676 = !DILocation(line: 8225, column: 12, scope: !13672)
!13677 = !DILocation(line: 8226, column: 7, scope: !13672)
!13678 = !DILocation(line: 8226, column: 26, scope: !13672)
!13679 = !DILocation(line: 8226, column: 12, scope: !13672)
!13680 = !DILocation(line: 8224, column: 7, scope: !13648)
!13681 = !DILocation(line: 8227, column: 5, scope: !13672)
!13682 = !DILocation(line: 8230, column: 22, scope: !13683)
!13683 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8230, column: 7)
!13684 = !DILocation(line: 8230, column: 7, scope: !13683)
!13685 = !DILocation(line: 8230, column: 7, scope: !13648)
!13686 = !DILocation(line: 8231, column: 34, scope: !13683)
!13687 = !DILocation(line: 8231, column: 39, scope: !13683)
!13688 = !DILocation(line: 8231, column: 45, scope: !13683)
!13689 = !DILocation(line: 8231, column: 51, scope: !13683)
!13690 = !DILocation(line: 8231, column: 12, scope: !13683)
!13691 = !DILocation(line: 8231, column: 5, scope: !13683)
!13692 = !DILocation(line: 8235, column: 24, scope: !13693)
!13693 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8235, column: 7)
!13694 = !DILocation(line: 8235, column: 29, scope: !13693)
!13695 = !DILocation(line: 8235, column: 7, scope: !13693)
!13696 = !DILocation(line: 8235, column: 7, scope: !13648)
!13697 = !DILocation(line: 8236, column: 12, scope: !13693)
!13698 = !DILocation(line: 8236, column: 10, scope: !13693)
!13699 = !DILocation(line: 8236, column: 5, scope: !13693)
!13700 = !DILocalVariable(name: "srctype", scope: !13701, file: !3, line: 8239, type: !3344)
!13701 = distinct !DILexicalBlock(scope: !13693, file: !3, line: 8238, column: 5)
!13702 = !DILocation(line: 8239, column: 12, scope: !13701)
!13703 = !DILocalVariable(name: "desttype", scope: !13701, file: !3, line: 8239, type: !3344)
!13704 = !DILocation(line: 8239, column: 21, scope: !13701)
!13705 = !DILocalVariable(name: "src_align", scope: !13701, file: !3, line: 8240, type: !1445)
!13706 = !DILocation(line: 8240, column: 11, scope: !13701)
!13707 = !DILocalVariable(name: "dest_align", scope: !13701, file: !3, line: 8240, type: !1445)
!13708 = !DILocation(line: 8240, column: 22, scope: !13701)
!13709 = !DILocation(line: 8242, column: 11, scope: !13710)
!13710 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8242, column: 11)
!13711 = !DILocation(line: 8242, column: 16, scope: !13710)
!13712 = !DILocation(line: 8242, column: 11, scope: !13701)
!13713 = !DILocation(line: 8244, column: 39, scope: !13714)
!13714 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 8243, column: 2)
!13715 = !DILocation(line: 8244, column: 44, scope: !13714)
!13716 = !DILocation(line: 8244, column: 16, scope: !13714)
!13717 = !DILocation(line: 8244, column: 14, scope: !13714)
!13718 = !DILocation(line: 8245, column: 40, scope: !13714)
!13719 = !DILocation(line: 8245, column: 46, scope: !13714)
!13720 = !DILocation(line: 8245, column: 17, scope: !13714)
!13721 = !DILocation(line: 8245, column: 15, scope: !13714)
!13722 = !DILocation(line: 8252, column: 9, scope: !13723)
!13723 = distinct !DILexicalBlock(scope: !13714, file: !3, line: 8252, column: 8)
!13724 = !DILocation(line: 8252, column: 20, scope: !13723)
!13725 = !DILocation(line: 8252, column: 24, scope: !13723)
!13726 = !DILocation(line: 8252, column: 8, scope: !13714)
!13727 = !DILocation(line: 8253, column: 6, scope: !13723)
!13728 = !DILocation(line: 8254, column: 28, scope: !13729)
!13729 = distinct !DILexicalBlock(scope: !13714, file: !3, line: 8254, column: 8)
!13730 = !DILocation(line: 8254, column: 8, scope: !13729)
!13731 = !DILocation(line: 8255, column: 8, scope: !13729)
!13732 = !DILocation(line: 8255, column: 27, scope: !13729)
!13733 = !DILocation(line: 8255, column: 12, scope: !13729)
!13734 = !DILocation(line: 8256, column: 5, scope: !13729)
!13735 = !DILocation(line: 8256, column: 9, scope: !13729)
!13736 = !DILocation(line: 8256, column: 37, scope: !13729)
!13737 = !DILocation(line: 8257, column: 26, scope: !13729)
!13738 = !DILocation(line: 8257, column: 12, scope: !13729)
!13739 = !DILocation(line: 8257, column: 9, scope: !13729)
!13740 = !DILocation(line: 8254, column: 8, scope: !13714)
!13741 = !DILocalVariable(name: "fn", scope: !13742, file: !3, line: 8259, type: !3344)
!13742 = distinct !DILexicalBlock(scope: !13729, file: !3, line: 8258, column: 6)
!13743 = !DILocation(line: 8259, column: 13, scope: !13742)
!13744 = !DILocation(line: 8259, column: 18, scope: !13742)
!13745 = !DILocation(line: 8260, column: 13, scope: !13746)
!13746 = distinct !DILexicalBlock(scope: !13742, file: !3, line: 8260, column: 12)
!13747 = !DILocation(line: 8260, column: 12, scope: !13742)
!13748 = !DILocation(line: 8261, column: 3, scope: !13746)
!13749 = !DILocation(line: 8262, column: 43, scope: !13742)
!13750 = !DILocation(line: 8262, column: 48, scope: !13742)
!13751 = !DILocation(line: 8262, column: 55, scope: !13742)
!13752 = !DILocation(line: 8262, column: 61, scope: !13742)
!13753 = !DILocation(line: 8262, column: 66, scope: !13742)
!13754 = !DILocation(line: 8262, column: 22, scope: !13742)
!13755 = !DILocation(line: 8262, column: 15, scope: !13742)
!13756 = !DILocation(line: 8266, column: 42, scope: !13714)
!13757 = !DILocation(line: 8266, column: 47, scope: !13714)
!13758 = !DILocation(line: 8266, column: 13, scope: !13714)
!13759 = !DILocation(line: 8266, column: 11, scope: !13714)
!13760 = !DILocation(line: 8267, column: 43, scope: !13714)
!13761 = !DILocation(line: 8267, column: 48, scope: !13714)
!13762 = !DILocation(line: 8267, column: 14, scope: !13714)
!13763 = !DILocation(line: 8267, column: 12, scope: !13714)
!13764 = !DILocation(line: 8268, column: 8, scope: !13765)
!13765 = distinct !DILexicalBlock(scope: !13714, file: !3, line: 8268, column: 8)
!13766 = !DILocation(line: 8269, column: 8, scope: !13765)
!13767 = !DILocation(line: 8269, column: 12, scope: !13765)
!13768 = !DILocation(line: 8270, column: 8, scope: !13765)
!13769 = !DILocation(line: 8270, column: 11, scope: !13765)
!13770 = !DILocation(line: 8271, column: 8, scope: !13765)
!13771 = !DILocation(line: 8271, column: 12, scope: !13765)
!13772 = !DILocation(line: 8268, column: 8, scope: !13714)
!13773 = !DILocalVariable(name: "src_base", scope: !13774, file: !3, line: 8273, type: !3344)
!13774 = distinct !DILexicalBlock(scope: !13765, file: !3, line: 8272, column: 6)
!13775 = !DILocation(line: 8273, column: 13, scope: !13774)
!13776 = !DILocalVariable(name: "dest_base", scope: !13774, file: !3, line: 8273, type: !3344)
!13777 = !DILocation(line: 8273, column: 23, scope: !13774)
!13778 = !DILocalVariable(name: "fn", scope: !13774, file: !3, line: 8273, type: !3344)
!13779 = !DILocation(line: 8273, column: 34, scope: !13774)
!13780 = !DILocalVariable(name: "src_offset", scope: !13774, file: !3, line: 8274, type: !3359)
!13781 = !DILocation(line: 8274, column: 22, scope: !13774)
!13782 = !DILocalVariable(name: "dest_offset", scope: !13774, file: !3, line: 8274, type: !3359)
!13783 = !DILocation(line: 8274, column: 38, scope: !13774)
!13784 = !DILocalVariable(name: "size", scope: !13774, file: !3, line: 8275, type: !3359)
!13785 = !DILocation(line: 8275, column: 22, scope: !13774)
!13786 = !DILocalVariable(name: "maxsize", scope: !13774, file: !3, line: 8276, type: !3359)
!13787 = !DILocation(line: 8276, column: 22, scope: !13774)
!13788 = !DILocation(line: 8278, column: 19, scope: !13774)
!13789 = !DILocation(line: 8278, column: 17, scope: !13774)
!13790 = !DILocation(line: 8279, column: 33, scope: !13791)
!13791 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 8279, column: 12)
!13792 = !DILocation(line: 8279, column: 12, scope: !13791)
!13793 = !DILocation(line: 8279, column: 12, scope: !13774)
!13794 = !DILocation(line: 8280, column: 39, scope: !13791)
!13795 = !DILocation(line: 8280, column: 14, scope: !13791)
!13796 = !DILocation(line: 8280, column: 12, scope: !13791)
!13797 = !DILocation(line: 8280, column: 3, scope: !13791)
!13798 = !DILocation(line: 8282, column: 20, scope: !13774)
!13799 = !DILocation(line: 8282, column: 18, scope: !13774)
!13800 = !DILocation(line: 8283, column: 33, scope: !13801)
!13801 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 8283, column: 12)
!13802 = !DILocation(line: 8283, column: 12, scope: !13801)
!13803 = !DILocation(line: 8283, column: 12, scope: !13774)
!13804 = !DILocation(line: 8284, column: 40, scope: !13801)
!13805 = !DILocation(line: 8284, column: 15, scope: !13801)
!13806 = !DILocation(line: 8284, column: 13, scope: !13801)
!13807 = !DILocation(line: 8284, column: 3, scope: !13801)
!13808 = !DILocation(line: 8286, column: 27, scope: !13809)
!13809 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 8286, column: 12)
!13810 = !DILocation(line: 8286, column: 12, scope: !13809)
!13811 = !DILocation(line: 8286, column: 12, scope: !13774)
!13812 = !DILocation(line: 8288, column: 29, scope: !13813)
!13813 = distinct !DILexicalBlock(scope: !13809, file: !3, line: 8287, column: 3)
!13814 = !DILocation(line: 8288, column: 15, scope: !13813)
!13815 = !DILocation(line: 8288, column: 13, scope: !13813)
!13816 = !DILocation(line: 8289, column: 9, scope: !13817)
!13817 = distinct !DILexicalBlock(scope: !13813, file: !3, line: 8289, column: 9)
!13818 = !DILocation(line: 8290, column: 9, scope: !13817)
!13819 = !DILocation(line: 8289, column: 9, scope: !13813)
!13820 = !DILocation(line: 8291, column: 15, scope: !13817)
!13821 = !DILocation(line: 8291, column: 7, scope: !13817)
!13822 = !DILocation(line: 8293, column: 15, scope: !13817)
!13823 = !DILocation(line: 8294, column: 3, scope: !13813)
!13824 = !DILocation(line: 8296, column: 11, scope: !13809)
!13825 = !DILocation(line: 8297, column: 12, scope: !13826)
!13826 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 8297, column: 12)
!13827 = !DILocation(line: 8298, column: 5, scope: !13826)
!13828 = !DILocation(line: 8298, column: 8, scope: !13826)
!13829 = !DILocation(line: 8297, column: 12, scope: !13774)
!13830 = !DILocation(line: 8300, column: 26, scope: !13831)
!13831 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 8300, column: 9)
!13832 = distinct !DILexicalBlock(scope: !13826, file: !3, line: 8299, column: 3)
!13833 = !DILocation(line: 8300, column: 36, scope: !13831)
!13834 = !DILocation(line: 8300, column: 9, scope: !13831)
!13835 = !DILocation(line: 8301, column: 9, scope: !13831)
!13836 = !DILocation(line: 8301, column: 30, scope: !13831)
!13837 = !DILocation(line: 8301, column: 42, scope: !13831)
!13838 = !DILocation(line: 8302, column: 9, scope: !13831)
!13839 = !DILocation(line: 8302, column: 22, scope: !13831)
!13840 = !DILocation(line: 8301, column: 12, scope: !13831)
!13841 = !DILocation(line: 8300, column: 9, scope: !13832)
!13842 = !DILocation(line: 8303, column: 7, scope: !13831)
!13843 = !DILocation(line: 8304, column: 3, scope: !13832)
!13844 = !DILocation(line: 8305, column: 17, scope: !13845)
!13845 = distinct !DILexicalBlock(scope: !13826, file: !3, line: 8305, column: 17)
!13846 = !DILocation(line: 8305, column: 38, scope: !13845)
!13847 = !DILocation(line: 8306, column: 10, scope: !13845)
!13848 = !DILocation(line: 8306, column: 13, scope: !13845)
!13849 = !DILocation(line: 8306, column: 35, scope: !13845)
!13850 = !DILocation(line: 8305, column: 17, scope: !13826)
!13851 = !DILocation(line: 8308, column: 28, scope: !13852)
!13852 = distinct !DILexicalBlock(scope: !13853, file: !3, line: 8308, column: 9)
!13853 = distinct !DILexicalBlock(scope: !13845, file: !3, line: 8307, column: 3)
!13854 = !DILocation(line: 8309, column: 7, scope: !13852)
!13855 = !DILocation(line: 8308, column: 11, scope: !13852)
!13856 = !DILocation(line: 8310, column: 9, scope: !13852)
!13857 = !DILocation(line: 8310, column: 30, scope: !13852)
!13858 = !DILocation(line: 8310, column: 42, scope: !13852)
!13859 = !DILocation(line: 8311, column: 9, scope: !13852)
!13860 = !DILocation(line: 8311, column: 22, scope: !13852)
!13861 = !DILocation(line: 8310, column: 12, scope: !13852)
!13862 = !DILocation(line: 8308, column: 9, scope: !13853)
!13863 = !DILocation(line: 8312, column: 7, scope: !13852)
!13864 = !DILocation(line: 8313, column: 3, scope: !13853)
!13865 = !DILocation(line: 8315, column: 3, scope: !13845)
!13866 = !DILocation(line: 8317, column: 13, scope: !13774)
!13867 = !DILocation(line: 8317, column: 11, scope: !13774)
!13868 = !DILocation(line: 8318, column: 13, scope: !13869)
!13869 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 8318, column: 12)
!13870 = !DILocation(line: 8318, column: 12, scope: !13774)
!13871 = !DILocation(line: 8319, column: 3, scope: !13869)
!13872 = !DILocation(line: 8320, column: 36, scope: !13774)
!13873 = !DILocation(line: 8320, column: 41, scope: !13774)
!13874 = !DILocation(line: 8320, column: 48, scope: !13774)
!13875 = !DILocation(line: 8320, column: 54, scope: !13774)
!13876 = !DILocation(line: 8320, column: 59, scope: !13774)
!13877 = !DILocation(line: 8320, column: 15, scope: !13774)
!13878 = !DILocation(line: 8320, column: 8, scope: !13774)
!13879 = !DILocation(line: 8322, column: 4, scope: !13714)
!13880 = !DILocation(line: 8325, column: 27, scope: !13881)
!13881 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8325, column: 11)
!13882 = !DILocation(line: 8325, column: 12, scope: !13881)
!13883 = !DILocation(line: 8325, column: 11, scope: !13701)
!13884 = !DILocation(line: 8326, column: 2, scope: !13881)
!13885 = !DILocation(line: 8331, column: 7, scope: !13701)
!13886 = !DILocation(line: 8332, column: 7, scope: !13701)
!13887 = !DILocation(line: 8334, column: 11, scope: !13888)
!13888 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8334, column: 11)
!13889 = !DILocation(line: 8334, column: 27, scope: !13888)
!13890 = !DILocation(line: 8334, column: 11, scope: !13701)
!13891 = !DILocalVariable(name: "tem", scope: !13892, file: !3, line: 8336, type: !3344)
!13892 = distinct !DILexicalBlock(scope: !13888, file: !3, line: 8335, column: 2)
!13893 = !DILocation(line: 8336, column: 9, scope: !13892)
!13894 = !DILocation(line: 8336, column: 15, scope: !13892)
!13895 = !DILocation(line: 8337, column: 4, scope: !13892)
!13896 = !DILocation(line: 8338, column: 8, scope: !13897)
!13897 = distinct !DILexicalBlock(scope: !13892, file: !3, line: 8338, column: 8)
!13898 = !DILocation(line: 8338, column: 15, scope: !13897)
!13899 = !DILocation(line: 8338, column: 12, scope: !13897)
!13900 = !DILocation(line: 8338, column: 8, scope: !13892)
!13901 = !DILocation(line: 8339, column: 12, scope: !13897)
!13902 = !DILocation(line: 8339, column: 10, scope: !13897)
!13903 = !DILocation(line: 8339, column: 6, scope: !13897)
!13904 = !DILocation(line: 8340, column: 2, scope: !13892)
!13905 = !DILocation(line: 8341, column: 11, scope: !13906)
!13906 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8341, column: 11)
!13907 = !DILocation(line: 8341, column: 28, scope: !13906)
!13908 = !DILocation(line: 8341, column: 11, scope: !13701)
!13909 = !DILocalVariable(name: "tem", scope: !13910, file: !3, line: 8343, type: !3344)
!13910 = distinct !DILexicalBlock(scope: !13906, file: !3, line: 8342, column: 2)
!13911 = !DILocation(line: 8343, column: 9, scope: !13910)
!13912 = !DILocation(line: 8343, column: 15, scope: !13910)
!13913 = !DILocation(line: 8344, column: 4, scope: !13910)
!13914 = !DILocation(line: 8345, column: 8, scope: !13915)
!13915 = distinct !DILexicalBlock(scope: !13910, file: !3, line: 8345, column: 8)
!13916 = !DILocation(line: 8345, column: 15, scope: !13915)
!13917 = !DILocation(line: 8345, column: 12, scope: !13915)
!13918 = !DILocation(line: 8345, column: 8, scope: !13910)
!13919 = !DILocation(line: 8346, column: 13, scope: !13915)
!13920 = !DILocation(line: 8346, column: 11, scope: !13915)
!13921 = !DILocation(line: 8346, column: 6, scope: !13915)
!13922 = !DILocation(line: 8347, column: 2, scope: !13910)
!13923 = !DILocation(line: 8348, column: 17, scope: !13701)
!13924 = !DILocation(line: 8348, column: 15, scope: !13701)
!13925 = !DILocation(line: 8349, column: 11, scope: !13926)
!13926 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8349, column: 11)
!13927 = !DILocation(line: 8350, column: 4, scope: !13926)
!13928 = !DILocation(line: 8350, column: 7, scope: !13926)
!13929 = !DILocation(line: 8350, column: 27, scope: !13926)
!13930 = !DILocation(line: 8351, column: 4, scope: !13926)
!13931 = !DILocation(line: 8351, column: 28, scope: !13926)
!13932 = !DILocation(line: 8351, column: 54, scope: !13926)
!13933 = !DILocation(line: 8351, column: 8, scope: !13926)
!13934 = !DILocation(line: 8349, column: 11, scope: !13701)
!13935 = !DILocation(line: 8353, column: 14, scope: !13936)
!13936 = distinct !DILexicalBlock(scope: !13926, file: !3, line: 8352, column: 2)
!13937 = !DILocation(line: 8353, column: 12, scope: !13936)
!13938 = !DILocation(line: 8354, column: 4, scope: !13936)
!13939 = !DILocation(line: 8355, column: 10, scope: !13936)
!13940 = !DILocation(line: 8355, column: 8, scope: !13936)
!13941 = !DILocation(line: 8356, column: 2, scope: !13936)
!13942 = !DILocation(line: 8357, column: 18, scope: !13701)
!13943 = !DILocation(line: 8357, column: 16, scope: !13701)
!13944 = !DILocation(line: 8358, column: 11, scope: !13945)
!13945 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8358, column: 11)
!13946 = !DILocation(line: 8359, column: 4, scope: !13945)
!13947 = !DILocation(line: 8359, column: 7, scope: !13945)
!13948 = !DILocation(line: 8359, column: 28, scope: !13945)
!13949 = !DILocation(line: 8360, column: 4, scope: !13945)
!13950 = !DILocation(line: 8360, column: 28, scope: !13945)
!13951 = !DILocation(line: 8360, column: 55, scope: !13945)
!13952 = !DILocation(line: 8360, column: 8, scope: !13945)
!13953 = !DILocation(line: 8358, column: 11, scope: !13701)
!13954 = !DILocation(line: 8362, column: 15, scope: !13955)
!13955 = distinct !DILexicalBlock(scope: !13945, file: !3, line: 8361, column: 2)
!13956 = !DILocation(line: 8362, column: 13, scope: !13955)
!13957 = !DILocation(line: 8363, column: 4, scope: !13955)
!13958 = !DILocation(line: 8364, column: 11, scope: !13955)
!13959 = !DILocation(line: 8364, column: 9, scope: !13955)
!13960 = !DILocation(line: 8365, column: 2, scope: !13955)
!13961 = !DILocation(line: 8366, column: 12, scope: !13962)
!13962 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8366, column: 11)
!13963 = !DILocation(line: 8366, column: 20, scope: !13962)
!13964 = !DILocation(line: 8366, column: 24, scope: !13962)
!13965 = !DILocation(line: 8367, column: 4, scope: !13962)
!13966 = !DILocation(line: 8367, column: 8, scope: !13962)
!13967 = !DILocation(line: 8368, column: 4, scope: !13962)
!13968 = !DILocation(line: 8368, column: 8, scope: !13962)
!13969 = !DILocation(line: 8369, column: 4, scope: !13962)
!13970 = !DILocation(line: 8369, column: 7, scope: !13962)
!13971 = !DILocation(line: 8369, column: 44, scope: !13962)
!13972 = !DILocation(line: 8370, column: 4, scope: !13962)
!13973 = !DILocation(line: 8370, column: 7, scope: !13962)
!13974 = !DILocation(line: 8370, column: 45, scope: !13962)
!13975 = !DILocation(line: 8371, column: 4, scope: !13962)
!13976 = !DILocation(line: 8371, column: 7, scope: !13962)
!13977 = !DILocation(line: 8372, column: 4, scope: !13962)
!13978 = !DILocation(line: 8372, column: 7, scope: !13962)
!13979 = !DILocation(line: 8366, column: 11, scope: !13701)
!13980 = !DILocation(line: 8373, column: 2, scope: !13962)
!13981 = !DILocation(line: 8375, column: 42, scope: !13701)
!13982 = !DILocation(line: 8375, column: 47, scope: !13701)
!13983 = !DILocation(line: 8375, column: 19, scope: !13701)
!13984 = !DILocation(line: 8375, column: 17, scope: !13701)
!13985 = !DILocation(line: 8376, column: 43, scope: !13701)
!13986 = !DILocation(line: 8376, column: 49, scope: !13701)
!13987 = !DILocation(line: 8376, column: 20, scope: !13701)
!13988 = !DILocation(line: 8376, column: 18, scope: !13701)
!13989 = !DILocation(line: 8377, column: 11, scope: !13990)
!13990 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8377, column: 11)
!13991 = !DILocation(line: 8377, column: 30, scope: !13990)
!13992 = !DILocation(line: 8377, column: 22, scope: !13990)
!13993 = !DILocation(line: 8378, column: 4, scope: !13990)
!13994 = !DILocation(line: 8378, column: 7, scope: !13990)
!13995 = !DILocation(line: 8378, column: 25, scope: !13990)
!13996 = !DILocation(line: 8378, column: 17, scope: !13990)
!13997 = !DILocation(line: 8377, column: 11, scope: !13701)
!13998 = !DILocation(line: 8379, column: 2, scope: !13990)
!13999 = !DILocation(line: 8381, column: 12, scope: !14000)
!14000 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8381, column: 11)
!14001 = !DILocation(line: 8381, column: 11, scope: !13701)
!14002 = !DILocation(line: 8382, column: 35, scope: !14000)
!14003 = !DILocation(line: 8382, column: 16, scope: !14000)
!14004 = !DILocation(line: 8382, column: 14, scope: !14000)
!14005 = !DILocation(line: 8382, column: 9, scope: !14000)
!14006 = !DILocation(line: 8384, column: 14, scope: !13701)
!14007 = !DILocation(line: 8385, column: 31, scope: !14008)
!14008 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8385, column: 11)
!14009 = !DILocation(line: 8385, column: 57, scope: !14008)
!14010 = !DILocation(line: 8385, column: 11, scope: !14008)
!14011 = !DILocation(line: 8385, column: 11, scope: !13701)
!14012 = !DILocation(line: 8387, column: 42, scope: !14013)
!14013 = distinct !DILexicalBlock(scope: !14008, file: !3, line: 8386, column: 2)
!14014 = !DILocation(line: 8387, column: 47, scope: !14013)
!14015 = !DILocation(line: 8387, column: 13, scope: !14013)
!14016 = !DILocation(line: 8387, column: 11, scope: !14013)
!14017 = !DILocation(line: 8388, column: 8, scope: !14018)
!14018 = distinct !DILexicalBlock(scope: !14013, file: !3, line: 8388, column: 8)
!14019 = !DILocation(line: 8388, column: 8, scope: !14013)
!14020 = !DILocation(line: 8389, column: 6, scope: !14018)
!14021 = !DILocation(line: 8390, column: 50, scope: !14022)
!14022 = distinct !DILexicalBlock(scope: !14018, file: !3, line: 8390, column: 13)
!14023 = !DILocation(line: 8390, column: 34, scope: !14022)
!14024 = !DILocation(line: 8390, column: 59, scope: !14022)
!14025 = !DILocation(line: 8390, column: 14, scope: !14022)
!14026 = !DILocation(line: 8390, column: 13, scope: !14018)
!14027 = !DILocation(line: 8391, column: 13, scope: !14022)
!14028 = !DILocation(line: 8391, column: 6, scope: !14022)
!14029 = !DILocation(line: 8398, column: 36, scope: !14030)
!14030 = distinct !DILexicalBlock(scope: !14022, file: !3, line: 8398, column: 13)
!14031 = !DILocation(line: 8398, column: 14, scope: !14030)
!14032 = !DILocation(line: 8398, column: 13, scope: !14022)
!14033 = !DILocation(line: 8399, column: 13, scope: !14030)
!14034 = !DILocation(line: 8399, column: 6, scope: !14030)
!14035 = !DILocation(line: 8400, column: 2, scope: !14013)
!14036 = !DILocation(line: 8402, column: 15, scope: !13701)
!14037 = !DILocation(line: 8403, column: 31, scope: !14038)
!14038 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8403, column: 11)
!14039 = !DILocation(line: 8403, column: 58, scope: !14038)
!14040 = !DILocation(line: 8403, column: 11, scope: !14038)
!14041 = !DILocation(line: 8403, column: 11, scope: !13701)
!14042 = !DILocation(line: 8405, column: 43, scope: !14043)
!14043 = distinct !DILexicalBlock(scope: !14038, file: !3, line: 8404, column: 2)
!14044 = !DILocation(line: 8405, column: 48, scope: !14043)
!14045 = !DILocation(line: 8405, column: 14, scope: !14043)
!14046 = !DILocation(line: 8405, column: 12, scope: !14043)
!14047 = !DILocation(line: 8406, column: 8, scope: !14048)
!14048 = distinct !DILexicalBlock(scope: !14043, file: !3, line: 8406, column: 8)
!14049 = !DILocation(line: 8406, column: 8, scope: !14043)
!14050 = !DILocation(line: 8407, column: 6, scope: !14048)
!14051 = !DILocation(line: 8408, column: 50, scope: !14052)
!14052 = distinct !DILexicalBlock(scope: !14048, file: !3, line: 8408, column: 13)
!14053 = !DILocation(line: 8408, column: 34, scope: !14052)
!14054 = !DILocation(line: 8408, column: 60, scope: !14052)
!14055 = !DILocation(line: 8408, column: 14, scope: !14052)
!14056 = !DILocation(line: 8408, column: 13, scope: !14048)
!14057 = !DILocation(line: 8409, column: 14, scope: !14052)
!14058 = !DILocation(line: 8409, column: 6, scope: !14052)
!14059 = !DILocation(line: 8410, column: 36, scope: !14060)
!14060 = distinct !DILexicalBlock(scope: !14052, file: !3, line: 8410, column: 13)
!14061 = !DILocation(line: 8410, column: 14, scope: !14060)
!14062 = !DILocation(line: 8410, column: 13, scope: !14052)
!14063 = !DILocation(line: 8411, column: 14, scope: !14060)
!14064 = !DILocation(line: 8411, column: 6, scope: !14060)
!14065 = !DILocation(line: 8412, column: 2, scope: !14043)
!14066 = !DILocation(line: 8414, column: 11, scope: !14067)
!14067 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8414, column: 11)
!14068 = !DILocation(line: 8414, column: 18, scope: !14067)
!14069 = !DILocation(line: 8414, column: 31, scope: !14067)
!14070 = !DILocation(line: 8414, column: 34, scope: !14067)
!14071 = !DILocation(line: 8414, column: 42, scope: !14067)
!14072 = !DILocation(line: 8414, column: 11, scope: !13701)
!14073 = !DILocation(line: 8415, column: 2, scope: !14067)
!14074 = !DILocation(line: 8417, column: 11, scope: !14075)
!14075 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8417, column: 11)
!14076 = !DILocation(line: 8417, column: 18, scope: !14075)
!14077 = !DILocation(line: 8417, column: 11, scope: !13701)
!14078 = !DILocalVariable(name: "srcptype", scope: !14079, file: !3, line: 8419, type: !3344)
!14079 = distinct !DILexicalBlock(scope: !14075, file: !3, line: 8418, column: 2)
!14080 = !DILocation(line: 8419, column: 9, scope: !14079)
!14081 = !DILocation(line: 8420, column: 8, scope: !14082)
!14082 = distinct !DILexicalBlock(scope: !14079, file: !3, line: 8420, column: 8)
!14083 = !DILocation(line: 8420, column: 8, scope: !14079)
!14084 = !DILocation(line: 8421, column: 6, scope: !14082)
!14085 = !DILocation(line: 8423, column: 36, scope: !14079)
!14086 = !DILocation(line: 8423, column: 14, scope: !14079)
!14087 = !DILocation(line: 8423, column: 12, scope: !14079)
!14088 = !DILocation(line: 8424, column: 8, scope: !14089)
!14089 = distinct !DILexicalBlock(scope: !14079, file: !3, line: 8424, column: 8)
!14090 = !DILocation(line: 8424, column: 26, scope: !14089)
!14091 = !DILocation(line: 8424, column: 18, scope: !14089)
!14092 = !DILocation(line: 8424, column: 8, scope: !14079)
!14093 = !DILocation(line: 8426, column: 12, scope: !14094)
!14094 = distinct !DILexicalBlock(scope: !14095, file: !3, line: 8426, column: 12)
!14095 = distinct !DILexicalBlock(scope: !14089, file: !3, line: 8425, column: 6)
!14096 = !DILocation(line: 8426, column: 12, scope: !14095)
!14097 = !DILocation(line: 8428, column: 3, scope: !14094)
!14098 = !DILocation(line: 8430, column: 43, scope: !14095)
!14099 = !DILocation(line: 8430, column: 18, scope: !14095)
!14100 = !DILocation(line: 8430, column: 16, scope: !14095)
!14101 = !DILocation(line: 8431, column: 31, scope: !14095)
!14102 = !DILocation(line: 8431, column: 8, scope: !14095)
!14103 = !DILocation(line: 8431, column: 29, scope: !14095)
!14104 = !DILocation(line: 8432, column: 8, scope: !14095)
!14105 = !DILocation(line: 8432, column: 34, scope: !14095)
!14106 = !DILocation(line: 8433, column: 8, scope: !14095)
!14107 = !DILocation(line: 8433, column: 30, scope: !14095)
!14108 = !DILocation(line: 8434, column: 6, scope: !14095)
!14109 = !DILocation(line: 8435, column: 44, scope: !14079)
!14110 = !DILocation(line: 8435, column: 53, scope: !14079)
!14111 = !DILocation(line: 8435, column: 15, scope: !14079)
!14112 = !DILocation(line: 8435, column: 13, scope: !14079)
!14113 = !DILocation(line: 8436, column: 28, scope: !14079)
!14114 = !DILocation(line: 8436, column: 33, scope: !14079)
!14115 = !DILocation(line: 8436, column: 43, scope: !14079)
!14116 = !DILocation(line: 8436, column: 10, scope: !14079)
!14117 = !DILocation(line: 8436, column: 8, scope: !14079)
!14118 = !DILocation(line: 8437, column: 42, scope: !14079)
!14119 = !DILocation(line: 8437, column: 47, scope: !14079)
!14120 = !DILocation(line: 8437, column: 13, scope: !14079)
!14121 = !DILocation(line: 8437, column: 11, scope: !14079)
!14122 = !DILocation(line: 8438, column: 2, scope: !14079)
!14123 = !DILocation(line: 8439, column: 16, scope: !14124)
!14124 = distinct !DILexicalBlock(scope: !14075, file: !3, line: 8439, column: 16)
!14125 = !DILocation(line: 8439, column: 24, scope: !14124)
!14126 = !DILocation(line: 8439, column: 16, scope: !14075)
!14127 = !DILocalVariable(name: "destptype", scope: !14128, file: !3, line: 8441, type: !3344)
!14128 = distinct !DILexicalBlock(scope: !14124, file: !3, line: 8440, column: 2)
!14129 = !DILocation(line: 8441, column: 9, scope: !14128)
!14130 = !DILocation(line: 8442, column: 8, scope: !14131)
!14131 = distinct !DILexicalBlock(scope: !14128, file: !3, line: 8442, column: 8)
!14132 = !DILocation(line: 8442, column: 8, scope: !14128)
!14133 = !DILocation(line: 8443, column: 6, scope: !14131)
!14134 = !DILocation(line: 8445, column: 37, scope: !14128)
!14135 = !DILocation(line: 8445, column: 15, scope: !14128)
!14136 = !DILocation(line: 8445, column: 13, scope: !14128)
!14137 = !DILocation(line: 8446, column: 8, scope: !14138)
!14138 = distinct !DILexicalBlock(scope: !14128, file: !3, line: 8446, column: 8)
!14139 = !DILocation(line: 8446, column: 27, scope: !14138)
!14140 = !DILocation(line: 8446, column: 19, scope: !14138)
!14141 = !DILocation(line: 8446, column: 8, scope: !14128)
!14142 = !DILocation(line: 8448, column: 12, scope: !14143)
!14143 = distinct !DILexicalBlock(scope: !14144, file: !3, line: 8448, column: 12)
!14144 = distinct !DILexicalBlock(scope: !14138, file: !3, line: 8447, column: 6)
!14145 = !DILocation(line: 8448, column: 12, scope: !14144)
!14146 = !DILocation(line: 8450, column: 3, scope: !14143)
!14147 = !DILocation(line: 8452, column: 44, scope: !14144)
!14148 = !DILocation(line: 8452, column: 19, scope: !14144)
!14149 = !DILocation(line: 8452, column: 17, scope: !14144)
!14150 = !DILocation(line: 8453, column: 32, scope: !14144)
!14151 = !DILocation(line: 8453, column: 8, scope: !14144)
!14152 = !DILocation(line: 8453, column: 30, scope: !14144)
!14153 = !DILocation(line: 8454, column: 8, scope: !14144)
!14154 = !DILocation(line: 8454, column: 35, scope: !14144)
!14155 = !DILocation(line: 8455, column: 8, scope: !14144)
!14156 = !DILocation(line: 8455, column: 31, scope: !14144)
!14157 = !DILocation(line: 8456, column: 6, scope: !14144)
!14158 = !DILocation(line: 8457, column: 45, scope: !14128)
!14159 = !DILocation(line: 8457, column: 55, scope: !14128)
!14160 = !DILocation(line: 8457, column: 16, scope: !14128)
!14161 = !DILocation(line: 8457, column: 14, scope: !14128)
!14162 = !DILocation(line: 8458, column: 29, scope: !14128)
!14163 = !DILocation(line: 8458, column: 34, scope: !14128)
!14164 = !DILocation(line: 8458, column: 45, scope: !14128)
!14165 = !DILocation(line: 8458, column: 11, scope: !14128)
!14166 = !DILocation(line: 8458, column: 9, scope: !14128)
!14167 = !DILocation(line: 8459, column: 43, scope: !14128)
!14168 = !DILocation(line: 8459, column: 48, scope: !14128)
!14169 = !DILocation(line: 8459, column: 14, scope: !14128)
!14170 = !DILocation(line: 8459, column: 12, scope: !14128)
!14171 = !DILocation(line: 8460, column: 2, scope: !14128)
!14172 = !DILocation(line: 8462, column: 11, scope: !14173)
!14173 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 8462, column: 11)
!14174 = !DILocation(line: 8462, column: 22, scope: !14173)
!14175 = !DILocation(line: 8462, column: 19, scope: !14173)
!14176 = !DILocation(line: 8463, column: 4, scope: !14173)
!14177 = !DILocation(line: 8463, column: 25, scope: !14173)
!14178 = !DILocation(line: 8463, column: 8, scope: !14173)
!14179 = !DILocation(line: 8464, column: 8, scope: !14173)
!14180 = !DILocation(line: 8464, column: 38, scope: !14173)
!14181 = !DILocation(line: 8464, column: 48, scope: !14173)
!14182 = !DILocation(line: 8464, column: 11, scope: !14173)
!14183 = !DILocation(line: 8462, column: 11, scope: !13701)
!14184 = !DILocation(line: 8465, column: 9, scope: !14173)
!14185 = !DILocation(line: 8465, column: 7, scope: !14173)
!14186 = !DILocation(line: 8465, column: 2, scope: !14173)
!14187 = !DILocation(line: 8466, column: 17, scope: !14188)
!14188 = distinct !DILexicalBlock(scope: !14173, file: !3, line: 8466, column: 16)
!14189 = !DILocation(line: 8467, column: 5, scope: !14188)
!14190 = !DILocation(line: 8467, column: 8, scope: !14188)
!14191 = !DILocation(line: 8468, column: 4, scope: !14188)
!14192 = !DILocation(line: 8468, column: 8, scope: !14188)
!14193 = !DILocation(line: 8469, column: 8, scope: !14188)
!14194 = !DILocation(line: 8469, column: 11, scope: !14188)
!14195 = !DILocation(line: 8466, column: 16, scope: !14173)
!14196 = !DILocation(line: 8470, column: 27, scope: !14188)
!14197 = !DILocation(line: 8470, column: 32, scope: !14188)
!14198 = !DILocation(line: 8470, column: 53, scope: !14188)
!14199 = !DILocation(line: 8470, column: 9, scope: !14188)
!14200 = !DILocation(line: 8470, column: 7, scope: !14188)
!14201 = !DILocation(line: 8470, column: 2, scope: !14188)
!14202 = !DILocation(line: 8472, column: 9, scope: !14188)
!14203 = !DILocation(line: 8472, column: 7, scope: !14188)
!14204 = !DILocation(line: 8474, column: 14, scope: !13701)
!14205 = !DILocation(line: 8474, column: 12, scope: !13701)
!14206 = !DILocation(line: 8477, column: 7, scope: !14207)
!14207 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8477, column: 7)
!14208 = !DILocation(line: 8477, column: 7, scope: !13648)
!14209 = !DILocation(line: 8478, column: 12, scope: !14207)
!14210 = !DILocation(line: 8478, column: 5, scope: !14207)
!14211 = !DILocation(line: 8480, column: 7, scope: !14212)
!14212 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8480, column: 7)
!14213 = !DILocation(line: 8480, column: 12, scope: !14212)
!14214 = !DILocation(line: 8480, column: 17, scope: !14212)
!14215 = !DILocation(line: 8480, column: 20, scope: !14212)
!14216 = !DILocation(line: 8480, column: 25, scope: !14212)
!14217 = !DILocation(line: 8480, column: 7, scope: !13648)
!14218 = !DILocation(line: 8481, column: 34, scope: !14212)
!14219 = !DILocation(line: 8481, column: 39, scope: !14212)
!14220 = !DILocation(line: 8481, column: 45, scope: !14212)
!14221 = !DILocation(line: 8481, column: 51, scope: !14212)
!14222 = !DILocation(line: 8481, column: 12, scope: !14212)
!14223 = !DILocation(line: 8481, column: 5, scope: !14212)
!14224 = !DILocation(line: 8483, column: 7, scope: !14225)
!14225 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8483, column: 7)
!14226 = !DILocation(line: 8483, column: 15, scope: !14225)
!14227 = !DILocation(line: 8483, column: 12, scope: !14225)
!14228 = !DILocation(line: 8483, column: 7, scope: !13648)
!14229 = !DILocation(line: 8484, column: 10, scope: !14225)
!14230 = !DILocation(line: 8484, column: 5, scope: !14225)
!14231 = !DILocation(line: 8486, column: 7, scope: !14232)
!14232 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8486, column: 7)
!14233 = !DILocation(line: 8486, column: 12, scope: !14232)
!14234 = !DILocation(line: 8486, column: 7, scope: !13648)
!14235 = !DILocation(line: 8487, column: 11, scope: !14232)
!14236 = !DILocation(line: 8487, column: 9, scope: !14232)
!14237 = !DILocation(line: 8487, column: 5, scope: !14232)
!14238 = !DILocation(line: 8490, column: 27, scope: !13648)
!14239 = !DILocation(line: 8490, column: 32, scope: !13648)
!14240 = !DILocation(line: 8490, column: 42, scope: !13648)
!14241 = !DILocation(line: 8490, column: 9, scope: !13648)
!14242 = !DILocation(line: 8490, column: 7, scope: !13648)
!14243 = !DILocation(line: 8491, column: 10, scope: !13648)
!14244 = !DILocation(line: 8491, column: 8, scope: !13648)
!14245 = !DILocation(line: 8492, column: 28, scope: !13648)
!14246 = !DILocation(line: 8492, column: 33, scope: !13648)
!14247 = !DILocation(line: 8492, column: 39, scope: !13648)
!14248 = !DILocation(line: 8492, column: 10, scope: !13648)
!14249 = !DILocation(line: 8492, column: 8, scope: !13648)
!14250 = !DILocation(line: 8493, column: 7, scope: !14251)
!14251 = distinct !DILexicalBlock(scope: !13648, file: !3, line: 8493, column: 7)
!14252 = !DILocation(line: 8493, column: 7, scope: !13648)
!14253 = !DILocation(line: 8494, column: 34, scope: !14251)
!14254 = !DILocation(line: 8494, column: 39, scope: !14251)
!14255 = !DILocation(line: 8494, column: 45, scope: !14251)
!14256 = !DILocation(line: 8494, column: 51, scope: !14251)
!14257 = !DILocation(line: 8494, column: 12, scope: !14251)
!14258 = !DILocation(line: 8494, column: 10, scope: !14251)
!14259 = !DILocation(line: 8494, column: 5, scope: !14251)
!14260 = !DILocation(line: 8495, column: 10, scope: !13648)
!14261 = !DILocation(line: 8495, column: 3, scope: !13648)
!14262 = !DILocation(line: 8496, column: 1, scope: !13648)
!14263 = distinct !DISubprogram(name: "fold_builtin_strncat", scope: !3, file: !3, line: 11437, type: !9754, scopeLine: 11438, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14264 = !DILocalVariable(name: "loc", arg: 1, scope: !14263, file: !3, line: 11437, type: !3429)
!14265 = !DILocation(line: 11437, column: 34, scope: !14263)
!14266 = !DILocalVariable(name: "dst", arg: 2, scope: !14263, file: !3, line: 11437, type: !3344)
!14267 = !DILocation(line: 11437, column: 44, scope: !14263)
!14268 = !DILocalVariable(name: "src", arg: 3, scope: !14263, file: !3, line: 11437, type: !3344)
!14269 = !DILocation(line: 11437, column: 54, scope: !14263)
!14270 = !DILocalVariable(name: "len", arg: 4, scope: !14263, file: !3, line: 11437, type: !3344)
!14271 = !DILocation(line: 11437, column: 64, scope: !14263)
!14272 = !DILocation(line: 11439, column: 22, scope: !14273)
!14273 = distinct !DILexicalBlock(scope: !14263, file: !3, line: 11439, column: 7)
!14274 = !DILocation(line: 11439, column: 8, scope: !14273)
!14275 = !DILocation(line: 11440, column: 7, scope: !14273)
!14276 = !DILocation(line: 11440, column: 25, scope: !14273)
!14277 = !DILocation(line: 11440, column: 11, scope: !14273)
!14278 = !DILocation(line: 11441, column: 7, scope: !14273)
!14279 = !DILocation(line: 11441, column: 25, scope: !14273)
!14280 = !DILocation(line: 11441, column: 11, scope: !14273)
!14281 = !DILocation(line: 11439, column: 7, scope: !14263)
!14282 = !DILocation(line: 11442, column: 5, scope: !14273)
!14283 = !DILocalVariable(name: "p", scope: !14284, file: !3, line: 11445, type: !3504)
!14284 = distinct !DILexicalBlock(scope: !14273, file: !3, line: 11444, column: 5)
!14285 = !DILocation(line: 11445, column: 19, scope: !14284)
!14286 = !DILocation(line: 11445, column: 33, scope: !14284)
!14287 = !DILocation(line: 11445, column: 23, scope: !14284)
!14288 = !DILocation(line: 11449, column: 26, scope: !14289)
!14289 = distinct !DILexicalBlock(scope: !14284, file: !3, line: 11449, column: 11)
!14290 = !DILocation(line: 11449, column: 11, scope: !14289)
!14291 = !DILocation(line: 11449, column: 31, scope: !14289)
!14292 = !DILocation(line: 11449, column: 35, scope: !14289)
!14293 = !DILocation(line: 11449, column: 37, scope: !14289)
!14294 = !DILocation(line: 11449, column: 41, scope: !14289)
!14295 = !DILocation(line: 11449, column: 40, scope: !14289)
!14296 = !DILocation(line: 11449, column: 43, scope: !14289)
!14297 = !DILocation(line: 11449, column: 11, scope: !14284)
!14298 = !DILocation(line: 11450, column: 32, scope: !14289)
!14299 = !DILocation(line: 11450, column: 37, scope: !14289)
!14300 = !DILocation(line: 11450, column: 54, scope: !14289)
!14301 = !DILocation(line: 11450, column: 59, scope: !14289)
!14302 = !DILocation(line: 11450, column: 64, scope: !14289)
!14303 = !DILocation(line: 11450, column: 9, scope: !14289)
!14304 = !DILocation(line: 11450, column: 2, scope: !14289)
!14305 = !DILocation(line: 11454, column: 11, scope: !14306)
!14306 = distinct !DILexicalBlock(scope: !14284, file: !3, line: 11454, column: 11)
!14307 = !DILocation(line: 11454, column: 27, scope: !14306)
!14308 = !DILocation(line: 11454, column: 42, scope: !14306)
!14309 = !DILocation(line: 11454, column: 45, scope: !14306)
!14310 = !DILocation(line: 11455, column: 4, scope: !14306)
!14311 = !DILocation(line: 11455, column: 25, scope: !14306)
!14312 = !DILocation(line: 11455, column: 38, scope: !14306)
!14313 = !DILocation(line: 11455, column: 30, scope: !14306)
!14314 = !DILocation(line: 11455, column: 7, scope: !14306)
!14315 = !DILocation(line: 11455, column: 42, scope: !14306)
!14316 = !DILocation(line: 11454, column: 11, scope: !14284)
!14317 = !DILocalVariable(name: "fn", scope: !14318, file: !3, line: 11457, type: !3344)
!14318 = distinct !DILexicalBlock(scope: !14306, file: !3, line: 11456, column: 2)
!14319 = !DILocation(line: 11457, column: 9, scope: !14318)
!14320 = !DILocation(line: 11457, column: 14, scope: !14318)
!14321 = !DILocation(line: 11461, column: 9, scope: !14322)
!14322 = distinct !DILexicalBlock(scope: !14318, file: !3, line: 11461, column: 8)
!14323 = !DILocation(line: 11461, column: 8, scope: !14318)
!14324 = !DILocation(line: 11462, column: 6, scope: !14322)
!14325 = !DILocation(line: 11464, column: 32, scope: !14318)
!14326 = !DILocation(line: 11464, column: 37, scope: !14318)
!14327 = !DILocation(line: 11464, column: 44, scope: !14318)
!14328 = !DILocation(line: 11464, column: 49, scope: !14318)
!14329 = !DILocation(line: 11464, column: 11, scope: !14318)
!14330 = !DILocation(line: 11464, column: 4, scope: !14318)
!14331 = !DILocation(line: 11466, column: 7, scope: !14284)
!14332 = !DILocation(line: 11468, column: 1, scope: !14263)
!14333 = distinct !DISubprogram(name: "fold_builtin_strncmp", scope: !3, file: !3, line: 8797, type: !9754, scopeLine: 8798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14334 = !DILocalVariable(name: "loc", arg: 1, scope: !14333, file: !3, line: 8797, type: !3429)
!14335 = !DILocation(line: 8797, column: 34, scope: !14333)
!14336 = !DILocalVariable(name: "arg1", arg: 2, scope: !14333, file: !3, line: 8797, type: !3344)
!14337 = !DILocation(line: 8797, column: 44, scope: !14333)
!14338 = !DILocalVariable(name: "arg2", arg: 3, scope: !14333, file: !3, line: 8797, type: !3344)
!14339 = !DILocation(line: 8797, column: 55, scope: !14333)
!14340 = !DILocalVariable(name: "len", arg: 4, scope: !14333, file: !3, line: 8797, type: !3344)
!14341 = !DILocation(line: 8797, column: 66, scope: !14333)
!14342 = !DILocalVariable(name: "p1", scope: !14333, file: !3, line: 8799, type: !3504)
!14343 = !DILocation(line: 8799, column: 15, scope: !14333)
!14344 = !DILocalVariable(name: "p2", scope: !14333, file: !3, line: 8799, type: !3504)
!14345 = !DILocation(line: 8799, column: 20, scope: !14333)
!14346 = !DILocation(line: 8801, column: 22, scope: !14347)
!14347 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8801, column: 7)
!14348 = !DILocation(line: 8801, column: 8, scope: !14347)
!14349 = !DILocation(line: 8802, column: 7, scope: !14347)
!14350 = !DILocation(line: 8802, column: 25, scope: !14347)
!14351 = !DILocation(line: 8802, column: 11, scope: !14347)
!14352 = !DILocation(line: 8803, column: 7, scope: !14347)
!14353 = !DILocation(line: 8803, column: 25, scope: !14347)
!14354 = !DILocation(line: 8803, column: 11, scope: !14347)
!14355 = !DILocation(line: 8801, column: 7, scope: !14333)
!14356 = !DILocation(line: 8804, column: 5, scope: !14347)
!14357 = !DILocation(line: 8807, column: 22, scope: !14358)
!14358 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8807, column: 7)
!14359 = !DILocation(line: 8807, column: 7, scope: !14358)
!14360 = !DILocation(line: 8807, column: 7, scope: !14333)
!14361 = !DILocation(line: 8808, column: 35, scope: !14358)
!14362 = !DILocation(line: 8808, column: 40, scope: !14358)
!14363 = !DILocation(line: 8808, column: 59, scope: !14358)
!14364 = !DILocation(line: 8809, column: 10, scope: !14358)
!14365 = !DILocation(line: 8809, column: 16, scope: !14358)
!14366 = !DILocation(line: 8808, column: 12, scope: !14358)
!14367 = !DILocation(line: 8808, column: 5, scope: !14358)
!14368 = !DILocation(line: 8812, column: 24, scope: !14369)
!14369 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8812, column: 7)
!14370 = !DILocation(line: 8812, column: 30, scope: !14369)
!14371 = !DILocation(line: 8812, column: 7, scope: !14369)
!14372 = !DILocation(line: 8812, column: 7, scope: !14333)
!14373 = !DILocation(line: 8813, column: 34, scope: !14369)
!14374 = !DILocation(line: 8813, column: 39, scope: !14369)
!14375 = !DILocation(line: 8813, column: 58, scope: !14369)
!14376 = !DILocation(line: 8813, column: 77, scope: !14369)
!14377 = !DILocation(line: 8813, column: 12, scope: !14369)
!14378 = !DILocation(line: 8813, column: 5, scope: !14369)
!14379 = !DILocation(line: 8815, column: 18, scope: !14333)
!14380 = !DILocation(line: 8815, column: 8, scope: !14333)
!14381 = !DILocation(line: 8815, column: 6, scope: !14333)
!14382 = !DILocation(line: 8816, column: 18, scope: !14333)
!14383 = !DILocation(line: 8816, column: 8, scope: !14333)
!14384 = !DILocation(line: 8816, column: 6, scope: !14333)
!14385 = !DILocation(line: 8818, column: 22, scope: !14386)
!14386 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8818, column: 7)
!14387 = !DILocation(line: 8818, column: 7, scope: !14386)
!14388 = !DILocation(line: 8818, column: 30, scope: !14386)
!14389 = !DILocation(line: 8818, column: 33, scope: !14386)
!14390 = !DILocation(line: 8818, column: 36, scope: !14386)
!14391 = !DILocation(line: 8818, column: 39, scope: !14386)
!14392 = !DILocation(line: 8818, column: 7, scope: !14333)
!14393 = !DILocalVariable(name: "i", scope: !14394, file: !3, line: 8820, type: !4754)
!14394 = distinct !DILexicalBlock(scope: !14386, file: !3, line: 8819, column: 5)
!14395 = !DILocation(line: 8820, column: 17, scope: !14394)
!14396 = !DILocation(line: 8820, column: 30, scope: !14394)
!14397 = !DILocation(line: 8820, column: 34, scope: !14394)
!14398 = !DILocation(line: 8820, column: 52, scope: !14394)
!14399 = !DILocation(line: 8820, column: 38, scope: !14394)
!14400 = !DILocation(line: 8820, column: 21, scope: !14394)
!14401 = !DILocation(line: 8821, column: 11, scope: !14402)
!14402 = distinct !DILexicalBlock(scope: !14394, file: !3, line: 8821, column: 11)
!14403 = !DILocation(line: 8821, column: 13, scope: !14402)
!14404 = !DILocation(line: 8821, column: 11, scope: !14394)
!14405 = !DILocation(line: 8822, column: 9, scope: !14402)
!14406 = !DILocation(line: 8822, column: 2, scope: !14402)
!14407 = !DILocation(line: 8823, column: 16, scope: !14408)
!14408 = distinct !DILexicalBlock(scope: !14402, file: !3, line: 8823, column: 16)
!14409 = !DILocation(line: 8823, column: 18, scope: !14408)
!14410 = !DILocation(line: 8823, column: 16, scope: !14402)
!14411 = !DILocation(line: 8824, column: 9, scope: !14408)
!14412 = !DILocation(line: 8824, column: 2, scope: !14408)
!14413 = !DILocation(line: 8826, column: 9, scope: !14408)
!14414 = !DILocation(line: 8826, column: 2, scope: !14408)
!14415 = !DILocation(line: 8831, column: 7, scope: !14416)
!14416 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8831, column: 7)
!14417 = !DILocation(line: 8831, column: 10, scope: !14416)
!14418 = !DILocation(line: 8831, column: 14, scope: !14416)
!14419 = !DILocation(line: 8831, column: 13, scope: !14416)
!14420 = !DILocation(line: 8831, column: 17, scope: !14416)
!14421 = !DILocation(line: 8832, column: 7, scope: !14416)
!14422 = !DILocation(line: 8832, column: 10, scope: !14416)
!14423 = !DILocation(line: 8832, column: 26, scope: !14416)
!14424 = !DILocation(line: 8833, column: 7, scope: !14416)
!14425 = !DILocation(line: 8833, column: 28, scope: !14416)
!14426 = !DILocation(line: 8833, column: 10, scope: !14416)
!14427 = !DILocation(line: 8833, column: 33, scope: !14416)
!14428 = !DILocation(line: 8831, column: 7, scope: !14333)
!14429 = !DILocalVariable(name: "cst_uchar_node", scope: !14430, file: !3, line: 8835, type: !3344)
!14430 = distinct !DILexicalBlock(scope: !14416, file: !3, line: 8834, column: 5)
!14431 = !DILocation(line: 8835, column: 12, scope: !14430)
!14432 = !DILocation(line: 8835, column: 29, scope: !14430)
!14433 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !14430, file: !3, line: 8836, type: !3344)
!14434 = !DILocation(line: 8836, column: 12, scope: !14430)
!14435 = !DILocation(line: 8837, column: 33, scope: !14430)
!14436 = !DILocation(line: 8837, column: 49, scope: !14430)
!14437 = !DILocation(line: 8837, column: 4, scope: !14430)
!14438 = !DILocation(line: 8839, column: 32, scope: !14430)
!14439 = !DILocation(line: 8839, column: 37, scope: !14430)
!14440 = !DILocation(line: 8840, column: 11, scope: !14430)
!14441 = !DILocation(line: 8839, column: 14, scope: !14430)
!14442 = !DILocation(line: 8839, column: 7, scope: !14430)
!14443 = !DILocation(line: 8848, column: 7, scope: !14444)
!14444 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8848, column: 7)
!14445 = !DILocation(line: 8848, column: 10, scope: !14444)
!14446 = !DILocation(line: 8848, column: 14, scope: !14444)
!14447 = !DILocation(line: 8848, column: 13, scope: !14444)
!14448 = !DILocation(line: 8848, column: 17, scope: !14444)
!14449 = !DILocation(line: 8849, column: 7, scope: !14444)
!14450 = !DILocation(line: 8849, column: 10, scope: !14444)
!14451 = !DILocation(line: 8849, column: 26, scope: !14444)
!14452 = !DILocation(line: 8850, column: 7, scope: !14444)
!14453 = !DILocation(line: 8850, column: 28, scope: !14444)
!14454 = !DILocation(line: 8850, column: 10, scope: !14444)
!14455 = !DILocation(line: 8850, column: 33, scope: !14444)
!14456 = !DILocation(line: 8848, column: 7, scope: !14333)
!14457 = !DILocalVariable(name: "cst_uchar_node", scope: !14458, file: !3, line: 8852, type: !3344)
!14458 = distinct !DILexicalBlock(scope: !14444, file: !3, line: 8851, column: 5)
!14459 = !DILocation(line: 8852, column: 12, scope: !14458)
!14460 = !DILocation(line: 8852, column: 29, scope: !14458)
!14461 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !14458, file: !3, line: 8853, type: !3344)
!14462 = !DILocation(line: 8853, column: 12, scope: !14458)
!14463 = !DILocation(line: 8854, column: 33, scope: !14458)
!14464 = !DILocation(line: 8854, column: 49, scope: !14458)
!14465 = !DILocation(line: 8854, column: 4, scope: !14458)
!14466 = !DILocalVariable(name: "temp", scope: !14458, file: !3, line: 8856, type: !3344)
!14467 = !DILocation(line: 8856, column: 12, scope: !14458)
!14468 = !DILocation(line: 8856, column: 37, scope: !14458)
!14469 = !DILocation(line: 8856, column: 42, scope: !14458)
!14470 = !DILocation(line: 8857, column: 9, scope: !14458)
!14471 = !DILocation(line: 8856, column: 19, scope: !14458)
!14472 = !DILocation(line: 8861, column: 14, scope: !14458)
!14473 = !DILocation(line: 8861, column: 7, scope: !14458)
!14474 = !DILocation(line: 8866, column: 22, scope: !14475)
!14475 = distinct !DILexicalBlock(scope: !14333, file: !3, line: 8866, column: 7)
!14476 = !DILocation(line: 8866, column: 7, scope: !14475)
!14477 = !DILocation(line: 8866, column: 30, scope: !14475)
!14478 = !DILocation(line: 8866, column: 47, scope: !14475)
!14479 = !DILocation(line: 8866, column: 33, scope: !14475)
!14480 = !DILocation(line: 8866, column: 55, scope: !14475)
!14481 = !DILocation(line: 8866, column: 7, scope: !14333)
!14482 = !DILocalVariable(name: "cst_uchar_node", scope: !14483, file: !3, line: 8868, type: !3344)
!14483 = distinct !DILexicalBlock(scope: !14475, file: !3, line: 8867, column: 5)
!14484 = !DILocation(line: 8868, column: 12, scope: !14483)
!14485 = !DILocation(line: 8868, column: 29, scope: !14483)
!14486 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !14483, file: !3, line: 8869, type: !3344)
!14487 = !DILocation(line: 8869, column: 12, scope: !14483)
!14488 = !DILocation(line: 8870, column: 33, scope: !14483)
!14489 = !DILocation(line: 8870, column: 49, scope: !14483)
!14490 = !DILocation(line: 8870, column: 4, scope: !14483)
!14491 = !DILocalVariable(name: "ind1", scope: !14483, file: !3, line: 8872, type: !3344)
!14492 = !DILocation(line: 8872, column: 12, scope: !14483)
!14493 = !DILocation(line: 8872, column: 37, scope: !14483)
!14494 = !DILocation(line: 8872, column: 42, scope: !14483)
!14495 = !DILocation(line: 8873, column: 9, scope: !14483)
!14496 = !DILocation(line: 8872, column: 19, scope: !14483)
!14497 = !DILocalVariable(name: "ind2", scope: !14483, file: !3, line: 8877, type: !3344)
!14498 = !DILocation(line: 8877, column: 12, scope: !14483)
!14499 = !DILocation(line: 8877, column: 37, scope: !14483)
!14500 = !DILocation(line: 8877, column: 42, scope: !14483)
!14501 = !DILocation(line: 8878, column: 9, scope: !14483)
!14502 = !DILocation(line: 8877, column: 19, scope: !14483)
!14503 = !DILocation(line: 8882, column: 14, scope: !14483)
!14504 = !DILocation(line: 8882, column: 7, scope: !14483)
!14505 = !DILocation(line: 8885, column: 3, scope: !14333)
!14506 = !DILocation(line: 8886, column: 1, scope: !14333)
!14507 = distinct !DISubprogram(name: "fold_builtin_memchr", scope: !3, file: !3, line: 8626, type: !6467, scopeLine: 8627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14508 = !DILocalVariable(name: "loc", arg: 1, scope: !14507, file: !3, line: 8626, type: !3429)
!14509 = !DILocation(line: 8626, column: 33, scope: !14507)
!14510 = !DILocalVariable(name: "arg1", arg: 2, scope: !14507, file: !3, line: 8626, type: !3344)
!14511 = !DILocation(line: 8626, column: 43, scope: !14507)
!14512 = !DILocalVariable(name: "arg2", arg: 3, scope: !14507, file: !3, line: 8626, type: !3344)
!14513 = !DILocation(line: 8626, column: 54, scope: !14507)
!14514 = !DILocalVariable(name: "len", arg: 4, scope: !14507, file: !3, line: 8626, type: !3344)
!14515 = !DILocation(line: 8626, column: 65, scope: !14507)
!14516 = !DILocalVariable(name: "type", arg: 5, scope: !14507, file: !3, line: 8626, type: !3344)
!14517 = !DILocation(line: 8626, column: 75, scope: !14507)
!14518 = !DILocation(line: 8628, column: 22, scope: !14519)
!14519 = distinct !DILexicalBlock(scope: !14507, file: !3, line: 8628, column: 7)
!14520 = !DILocation(line: 8628, column: 8, scope: !14519)
!14521 = !DILocation(line: 8629, column: 7, scope: !14519)
!14522 = !DILocation(line: 8629, column: 25, scope: !14519)
!14523 = !DILocation(line: 8629, column: 11, scope: !14519)
!14524 = !DILocation(line: 8630, column: 7, scope: !14519)
!14525 = !DILocation(line: 8630, column: 25, scope: !14519)
!14526 = !DILocation(line: 8630, column: 11, scope: !14519)
!14527 = !DILocation(line: 8628, column: 7, scope: !14507)
!14528 = !DILocation(line: 8631, column: 5, scope: !14519)
!14529 = !DILocalVariable(name: "p1", scope: !14530, file: !3, line: 8634, type: !3504)
!14530 = distinct !DILexicalBlock(scope: !14519, file: !3, line: 8633, column: 5)
!14531 = !DILocation(line: 8634, column: 19, scope: !14530)
!14532 = !DILocation(line: 8636, column: 11, scope: !14533)
!14533 = distinct !DILexicalBlock(scope: !14530, file: !3, line: 8636, column: 11)
!14534 = !DILocation(line: 8636, column: 28, scope: !14533)
!14535 = !DILocation(line: 8637, column: 4, scope: !14533)
!14536 = !DILocation(line: 8637, column: 23, scope: !14533)
!14537 = !DILocation(line: 8637, column: 8, scope: !14533)
!14538 = !DILocation(line: 8636, column: 11, scope: !14530)
!14539 = !DILocation(line: 8638, column: 2, scope: !14533)
!14540 = !DILocation(line: 8640, column: 22, scope: !14530)
!14541 = !DILocation(line: 8640, column: 12, scope: !14530)
!14542 = !DILocation(line: 8640, column: 10, scope: !14530)
!14543 = !DILocation(line: 8641, column: 11, scope: !14544)
!14544 = distinct !DILexicalBlock(scope: !14530, file: !3, line: 8641, column: 11)
!14545 = !DILocation(line: 8641, column: 14, scope: !14544)
!14546 = !DILocation(line: 8641, column: 35, scope: !14544)
!14547 = !DILocation(line: 8641, column: 48, scope: !14544)
!14548 = !DILocation(line: 8641, column: 40, scope: !14544)
!14549 = !DILocation(line: 8641, column: 52, scope: !14544)
!14550 = !DILocation(line: 8641, column: 17, scope: !14544)
!14551 = !DILocation(line: 8641, column: 57, scope: !14544)
!14552 = !DILocation(line: 8641, column: 11, scope: !14530)
!14553 = !DILocalVariable(name: "c", scope: !14554, file: !3, line: 8643, type: !3401)
!14554 = distinct !DILexicalBlock(scope: !14544, file: !3, line: 8642, column: 2)
!14555 = !DILocation(line: 8643, column: 9, scope: !14554)
!14556 = !DILocalVariable(name: "r", scope: !14554, file: !3, line: 8644, type: !3504)
!14557 = !DILocation(line: 8644, column: 16, scope: !14554)
!14558 = !DILocalVariable(name: "tem", scope: !14554, file: !3, line: 8645, type: !3344)
!14559 = !DILocation(line: 8645, column: 9, scope: !14554)
!14560 = !DILocation(line: 8647, column: 26, scope: !14561)
!14561 = distinct !DILexicalBlock(scope: !14554, file: !3, line: 8647, column: 8)
!14562 = !DILocation(line: 8647, column: 8, scope: !14561)
!14563 = !DILocation(line: 8647, column: 8, scope: !14554)
!14564 = !DILocation(line: 8648, column: 6, scope: !14561)
!14565 = !DILocation(line: 8650, column: 25, scope: !14554)
!14566 = !DILocation(line: 8650, column: 29, scope: !14554)
!14567 = !DILocation(line: 8650, column: 46, scope: !14554)
!14568 = !DILocation(line: 8650, column: 32, scope: !14554)
!14569 = !DILocation(line: 8650, column: 17, scope: !14554)
!14570 = !DILocation(line: 8650, column: 6, scope: !14554)
!14571 = !DILocation(line: 8652, column: 8, scope: !14572)
!14572 = distinct !DILexicalBlock(scope: !14554, file: !3, line: 8652, column: 8)
!14573 = !DILocation(line: 8652, column: 10, scope: !14572)
!14574 = !DILocation(line: 8652, column: 8, scope: !14554)
!14575 = !DILocation(line: 8653, column: 28, scope: !14572)
!14576 = !DILocation(line: 8653, column: 13, scope: !14572)
!14577 = !DILocation(line: 8653, column: 6, scope: !14572)
!14578 = !DILocation(line: 8655, column: 10, scope: !14554)
!14579 = !DILocation(line: 8655, column: 8, scope: !14554)
!14580 = !DILocation(line: 8657, column: 29, scope: !14554)
!14581 = !DILocation(line: 8657, column: 34, scope: !14554)
!14582 = !DILocation(line: 8657, column: 40, scope: !14554)
!14583 = !DILocation(line: 8657, column: 11, scope: !14554)
!14584 = !DILocation(line: 8657, column: 4, scope: !14554)
!14585 = !DILocation(line: 8659, column: 7, scope: !14530)
!14586 = !DILocation(line: 8661, column: 1, scope: !14507)
!14587 = distinct !DISubprogram(name: "fold_builtin_memcmp", scope: !3, file: !3, line: 8667, type: !9754, scopeLine: 8668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14588 = !DILocalVariable(name: "loc", arg: 1, scope: !14587, file: !3, line: 8667, type: !3429)
!14589 = !DILocation(line: 8667, column: 33, scope: !14587)
!14590 = !DILocalVariable(name: "arg1", arg: 2, scope: !14587, file: !3, line: 8667, type: !3344)
!14591 = !DILocation(line: 8667, column: 43, scope: !14587)
!14592 = !DILocalVariable(name: "arg2", arg: 3, scope: !14587, file: !3, line: 8667, type: !3344)
!14593 = !DILocation(line: 8667, column: 54, scope: !14587)
!14594 = !DILocalVariable(name: "len", arg: 4, scope: !14587, file: !3, line: 8667, type: !3344)
!14595 = !DILocation(line: 8667, column: 65, scope: !14587)
!14596 = !DILocalVariable(name: "p1", scope: !14587, file: !3, line: 8669, type: !3504)
!14597 = !DILocation(line: 8669, column: 15, scope: !14587)
!14598 = !DILocalVariable(name: "p2", scope: !14587, file: !3, line: 8669, type: !3504)
!14599 = !DILocation(line: 8669, column: 20, scope: !14587)
!14600 = !DILocation(line: 8671, column: 22, scope: !14601)
!14601 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 8671, column: 7)
!14602 = !DILocation(line: 8671, column: 8, scope: !14601)
!14603 = !DILocation(line: 8672, column: 7, scope: !14601)
!14604 = !DILocation(line: 8672, column: 25, scope: !14601)
!14605 = !DILocation(line: 8672, column: 11, scope: !14601)
!14606 = !DILocation(line: 8673, column: 7, scope: !14601)
!14607 = !DILocation(line: 8673, column: 25, scope: !14601)
!14608 = !DILocation(line: 8673, column: 11, scope: !14601)
!14609 = !DILocation(line: 8671, column: 7, scope: !14587)
!14610 = !DILocation(line: 8674, column: 5, scope: !14601)
!14611 = !DILocation(line: 8677, column: 22, scope: !14612)
!14612 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 8677, column: 7)
!14613 = !DILocation(line: 8677, column: 7, scope: !14612)
!14614 = !DILocation(line: 8677, column: 7, scope: !14587)
!14615 = !DILocation(line: 8678, column: 35, scope: !14612)
!14616 = !DILocation(line: 8678, column: 40, scope: !14612)
!14617 = !DILocation(line: 8678, column: 59, scope: !14612)
!14618 = !DILocation(line: 8679, column: 10, scope: !14612)
!14619 = !DILocation(line: 8679, column: 16, scope: !14612)
!14620 = !DILocation(line: 8678, column: 12, scope: !14612)
!14621 = !DILocation(line: 8678, column: 5, scope: !14612)
!14622 = !DILocation(line: 8682, column: 24, scope: !14623)
!14623 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 8682, column: 7)
!14624 = !DILocation(line: 8682, column: 30, scope: !14623)
!14625 = !DILocation(line: 8682, column: 7, scope: !14623)
!14626 = !DILocation(line: 8682, column: 7, scope: !14587)
!14627 = !DILocation(line: 8683, column: 34, scope: !14623)
!14628 = !DILocation(line: 8683, column: 39, scope: !14623)
!14629 = !DILocation(line: 8683, column: 58, scope: !14623)
!14630 = !DILocation(line: 8683, column: 77, scope: !14623)
!14631 = !DILocation(line: 8683, column: 12, scope: !14623)
!14632 = !DILocation(line: 8683, column: 5, scope: !14623)
!14633 = !DILocation(line: 8685, column: 18, scope: !14587)
!14634 = !DILocation(line: 8685, column: 8, scope: !14587)
!14635 = !DILocation(line: 8685, column: 6, scope: !14587)
!14636 = !DILocation(line: 8686, column: 18, scope: !14587)
!14637 = !DILocation(line: 8686, column: 8, scope: !14587)
!14638 = !DILocation(line: 8686, column: 6, scope: !14587)
!14639 = !DILocation(line: 8690, column: 22, scope: !14640)
!14640 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 8690, column: 7)
!14641 = !DILocation(line: 8690, column: 7, scope: !14640)
!14642 = !DILocation(line: 8690, column: 30, scope: !14640)
!14643 = !DILocation(line: 8690, column: 33, scope: !14640)
!14644 = !DILocation(line: 8690, column: 36, scope: !14640)
!14645 = !DILocation(line: 8690, column: 39, scope: !14640)
!14646 = !DILocation(line: 8691, column: 7, scope: !14640)
!14647 = !DILocation(line: 8691, column: 28, scope: !14640)
!14648 = !DILocation(line: 8691, column: 41, scope: !14640)
!14649 = !DILocation(line: 8691, column: 33, scope: !14640)
!14650 = !DILocation(line: 8691, column: 45, scope: !14640)
!14651 = !DILocation(line: 8691, column: 10, scope: !14640)
!14652 = !DILocation(line: 8691, column: 50, scope: !14640)
!14653 = !DILocation(line: 8692, column: 7, scope: !14640)
!14654 = !DILocation(line: 8692, column: 28, scope: !14640)
!14655 = !DILocation(line: 8692, column: 41, scope: !14640)
!14656 = !DILocation(line: 8692, column: 33, scope: !14640)
!14657 = !DILocation(line: 8692, column: 45, scope: !14640)
!14658 = !DILocation(line: 8692, column: 10, scope: !14640)
!14659 = !DILocation(line: 8692, column: 50, scope: !14640)
!14660 = !DILocation(line: 8690, column: 7, scope: !14587)
!14661 = !DILocalVariable(name: "r", scope: !14662, file: !3, line: 8694, type: !4754)
!14662 = distinct !DILexicalBlock(scope: !14640, file: !3, line: 8693, column: 5)
!14663 = !DILocation(line: 8694, column: 17, scope: !14662)
!14664 = !DILocation(line: 8694, column: 29, scope: !14662)
!14665 = !DILocation(line: 8694, column: 33, scope: !14662)
!14666 = !DILocation(line: 8694, column: 51, scope: !14662)
!14667 = !DILocation(line: 8694, column: 37, scope: !14662)
!14668 = !DILocation(line: 8694, column: 21, scope: !14662)
!14669 = !DILocation(line: 8696, column: 11, scope: !14670)
!14670 = distinct !DILexicalBlock(scope: !14662, file: !3, line: 8696, column: 11)
!14671 = !DILocation(line: 8696, column: 13, scope: !14670)
!14672 = !DILocation(line: 8696, column: 11, scope: !14662)
!14673 = !DILocation(line: 8697, column: 9, scope: !14670)
!14674 = !DILocation(line: 8697, column: 2, scope: !14670)
!14675 = !DILocation(line: 8698, column: 16, scope: !14676)
!14676 = distinct !DILexicalBlock(scope: !14670, file: !3, line: 8698, column: 16)
!14677 = !DILocation(line: 8698, column: 18, scope: !14676)
!14678 = !DILocation(line: 8698, column: 16, scope: !14670)
!14679 = !DILocation(line: 8699, column: 9, scope: !14676)
!14680 = !DILocation(line: 8699, column: 2, scope: !14676)
!14681 = !DILocation(line: 8701, column: 9, scope: !14676)
!14682 = !DILocation(line: 8701, column: 2, scope: !14676)
!14683 = !DILocation(line: 8706, column: 22, scope: !14684)
!14684 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 8706, column: 7)
!14685 = !DILocation(line: 8706, column: 7, scope: !14684)
!14686 = !DILocation(line: 8706, column: 30, scope: !14684)
!14687 = !DILocation(line: 8706, column: 47, scope: !14684)
!14688 = !DILocation(line: 8706, column: 33, scope: !14684)
!14689 = !DILocation(line: 8706, column: 55, scope: !14684)
!14690 = !DILocation(line: 8706, column: 7, scope: !14587)
!14691 = !DILocalVariable(name: "cst_uchar_node", scope: !14692, file: !3, line: 8708, type: !3344)
!14692 = distinct !DILexicalBlock(scope: !14684, file: !3, line: 8707, column: 5)
!14693 = !DILocation(line: 8708, column: 12, scope: !14692)
!14694 = !DILocation(line: 8708, column: 29, scope: !14692)
!14695 = !DILocalVariable(name: "cst_uchar_ptr_node", scope: !14692, file: !3, line: 8709, type: !3344)
!14696 = !DILocation(line: 8709, column: 12, scope: !14692)
!14697 = !DILocation(line: 8710, column: 33, scope: !14692)
!14698 = !DILocation(line: 8710, column: 49, scope: !14692)
!14699 = !DILocation(line: 8710, column: 4, scope: !14692)
!14700 = !DILocalVariable(name: "ind1", scope: !14692, file: !3, line: 8712, type: !3344)
!14701 = !DILocation(line: 8712, column: 12, scope: !14692)
!14702 = !DILocation(line: 8713, column: 22, scope: !14692)
!14703 = !DILocation(line: 8713, column: 27, scope: !14692)
!14704 = !DILocation(line: 8714, column: 8, scope: !14692)
!14705 = !DILocation(line: 8713, column: 4, scope: !14692)
!14706 = !DILocalVariable(name: "ind2", scope: !14692, file: !3, line: 8718, type: !3344)
!14707 = !DILocation(line: 8718, column: 12, scope: !14692)
!14708 = !DILocation(line: 8719, column: 22, scope: !14692)
!14709 = !DILocation(line: 8719, column: 27, scope: !14692)
!14710 = !DILocation(line: 8720, column: 8, scope: !14692)
!14711 = !DILocation(line: 8719, column: 4, scope: !14692)
!14712 = !DILocation(line: 8724, column: 14, scope: !14692)
!14713 = !DILocation(line: 8724, column: 7, scope: !14692)
!14714 = !DILocation(line: 8727, column: 3, scope: !14587)
!14715 = !DILocation(line: 8728, column: 1, scope: !14587)
!14716 = distinct !DISubprogram(name: "fold_builtin_strcat_chk", scope: !3, file: !3, line: 12421, type: !6467, scopeLine: 12423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14717 = !DILocalVariable(name: "loc", arg: 1, scope: !14716, file: !3, line: 12421, type: !3429)
!14718 = !DILocation(line: 12421, column: 37, scope: !14716)
!14719 = !DILocalVariable(name: "fndecl", arg: 2, scope: !14716, file: !3, line: 12421, type: !3344)
!14720 = !DILocation(line: 12421, column: 47, scope: !14716)
!14721 = !DILocalVariable(name: "dest", arg: 3, scope: !14716, file: !3, line: 12421, type: !3344)
!14722 = !DILocation(line: 12421, column: 60, scope: !14716)
!14723 = !DILocalVariable(name: "src", arg: 4, scope: !14716, file: !3, line: 12422, type: !3344)
!14724 = !DILocation(line: 12422, column: 10, scope: !14716)
!14725 = !DILocalVariable(name: "size", arg: 5, scope: !14716, file: !3, line: 12422, type: !3344)
!14726 = !DILocation(line: 12422, column: 20, scope: !14716)
!14727 = !DILocalVariable(name: "fn", scope: !14716, file: !3, line: 12424, type: !3344)
!14728 = !DILocation(line: 12424, column: 8, scope: !14716)
!14729 = !DILocalVariable(name: "p", scope: !14716, file: !3, line: 12425, type: !3504)
!14730 = !DILocation(line: 12425, column: 15, scope: !14716)
!14731 = !DILocation(line: 12427, column: 22, scope: !14732)
!14732 = distinct !DILexicalBlock(scope: !14716, file: !3, line: 12427, column: 7)
!14733 = !DILocation(line: 12427, column: 8, scope: !14732)
!14734 = !DILocation(line: 12428, column: 7, scope: !14732)
!14735 = !DILocation(line: 12428, column: 25, scope: !14732)
!14736 = !DILocation(line: 12428, column: 11, scope: !14732)
!14737 = !DILocation(line: 12429, column: 7, scope: !14732)
!14738 = !DILocation(line: 12429, column: 25, scope: !14732)
!14739 = !DILocation(line: 12429, column: 11, scope: !14732)
!14740 = !DILocation(line: 12427, column: 7, scope: !14716)
!14741 = !DILocation(line: 12430, column: 5, scope: !14732)
!14742 = !DILocation(line: 12432, column: 17, scope: !14716)
!14743 = !DILocation(line: 12432, column: 7, scope: !14716)
!14744 = !DILocation(line: 12432, column: 5, scope: !14716)
!14745 = !DILocation(line: 12434, column: 7, scope: !14746)
!14746 = distinct !DILexicalBlock(scope: !14716, file: !3, line: 12434, column: 7)
!14747 = !DILocation(line: 12434, column: 9, scope: !14746)
!14748 = !DILocation(line: 12434, column: 13, scope: !14746)
!14749 = !DILocation(line: 12434, column: 12, scope: !14746)
!14750 = !DILocation(line: 12434, column: 15, scope: !14746)
!14751 = !DILocation(line: 12434, column: 7, scope: !14716)
!14752 = !DILocation(line: 12435, column: 34, scope: !14746)
!14753 = !DILocation(line: 12435, column: 39, scope: !14746)
!14754 = !DILocation(line: 12435, column: 71, scope: !14746)
!14755 = !DILocation(line: 12435, column: 77, scope: !14746)
!14756 = !DILocation(line: 12435, column: 12, scope: !14746)
!14757 = !DILocation(line: 12435, column: 5, scope: !14746)
!14758 = !DILocation(line: 12437, column: 24, scope: !14759)
!14759 = distinct !DILexicalBlock(scope: !14716, file: !3, line: 12437, column: 7)
!14760 = !DILocation(line: 12437, column: 9, scope: !14759)
!14761 = !DILocation(line: 12437, column: 33, scope: !14759)
!14762 = !DILocation(line: 12437, column: 57, scope: !14759)
!14763 = !DILocation(line: 12437, column: 38, scope: !14759)
!14764 = !DILocation(line: 12437, column: 7, scope: !14716)
!14765 = !DILocation(line: 12438, column: 5, scope: !14759)
!14766 = !DILocation(line: 12441, column: 8, scope: !14716)
!14767 = !DILocation(line: 12441, column: 6, scope: !14716)
!14768 = !DILocation(line: 12442, column: 8, scope: !14769)
!14769 = distinct !DILexicalBlock(scope: !14716, file: !3, line: 12442, column: 7)
!14770 = !DILocation(line: 12442, column: 7, scope: !14716)
!14771 = !DILocation(line: 12443, column: 5, scope: !14769)
!14772 = !DILocation(line: 12445, column: 31, scope: !14716)
!14773 = !DILocation(line: 12445, column: 36, scope: !14716)
!14774 = !DILocation(line: 12445, column: 43, scope: !14716)
!14775 = !DILocation(line: 12445, column: 49, scope: !14716)
!14776 = !DILocation(line: 12445, column: 10, scope: !14716)
!14777 = !DILocation(line: 12445, column: 3, scope: !14716)
!14778 = !DILocation(line: 12446, column: 1, scope: !14716)
!14779 = distinct !DISubprogram(name: "readonly_data_expr", scope: !3, file: !3, line: 11072, type: !4815, scopeLine: 11073, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14780 = !DILocalVariable(name: "exp", arg: 1, scope: !14779, file: !3, line: 11072, type: !3344)
!14781 = !DILocation(line: 11072, column: 26, scope: !14779)
!14782 = !DILocation(line: 11074, column: 3, scope: !14779)
!14783 = !DILocation(line: 11076, column: 7, scope: !14784)
!14784 = distinct !DILexicalBlock(scope: !14779, file: !3, line: 11076, column: 7)
!14785 = !DILocation(line: 11076, column: 23, scope: !14784)
!14786 = !DILocation(line: 11076, column: 7, scope: !14779)
!14787 = !DILocation(line: 11077, column: 5, scope: !14784)
!14788 = !DILocation(line: 11079, column: 27, scope: !14779)
!14789 = !DILocation(line: 11079, column: 9, scope: !14779)
!14790 = !DILocation(line: 11079, column: 7, scope: !14779)
!14791 = !DILocation(line: 11080, column: 8, scope: !14792)
!14792 = distinct !DILexicalBlock(scope: !14779, file: !3, line: 11080, column: 7)
!14793 = !DILocation(line: 11080, column: 7, scope: !14779)
!14794 = !DILocation(line: 11081, column: 5, scope: !14792)
!14795 = !DILocation(line: 11086, column: 7, scope: !14796)
!14796 = distinct !DILexicalBlock(scope: !14779, file: !3, line: 11086, column: 7)
!14797 = !DILocation(line: 11086, column: 23, scope: !14796)
!14798 = !DILocation(line: 11087, column: 7, scope: !14796)
!14799 = !DILocation(line: 11087, column: 10, scope: !14796)
!14800 = !DILocation(line: 11087, column: 26, scope: !14796)
!14801 = !DILocation(line: 11088, column: 7, scope: !14796)
!14802 = !DILocation(line: 11088, column: 11, scope: !14796)
!14803 = !DILocation(line: 11088, column: 27, scope: !14796)
!14804 = !DILocation(line: 11088, column: 39, scope: !14796)
!14805 = !DILocation(line: 11088, column: 42, scope: !14796)
!14806 = !DILocation(line: 11086, column: 7, scope: !14779)
!14807 = !DILocation(line: 11089, column: 35, scope: !14796)
!14808 = !DILocation(line: 11089, column: 12, scope: !14796)
!14809 = !DILocation(line: 11089, column: 5, scope: !14796)
!14810 = !DILocation(line: 11091, column: 5, scope: !14796)
!14811 = !DILocation(line: 11092, column: 1, scope: !14779)
!14812 = distinct !DISubprogram(name: "ranges_overlap_p", scope: !14813, file: !14813, line: 1192, type: !14814, scopeLine: 1196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14813 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!14814 = !DISubroutineType(types: !14815)
!14815 = !{!3421, !3357, !3357, !3357, !3357}
!14816 = !DILocalVariable(name: "pos1", arg: 1, scope: !14812, file: !14813, line: 1192, type: !3357)
!14817 = !DILocation(line: 1192, column: 42, scope: !14812)
!14818 = !DILocalVariable(name: "size1", arg: 2, scope: !14812, file: !14813, line: 1193, type: !3357)
!14819 = !DILocation(line: 1193, column: 28, scope: !14812)
!14820 = !DILocalVariable(name: "pos2", arg: 3, scope: !14812, file: !14813, line: 1194, type: !3357)
!14821 = !DILocation(line: 1194, column: 28, scope: !14812)
!14822 = !DILocalVariable(name: "size2", arg: 4, scope: !14812, file: !14813, line: 1195, type: !3357)
!14823 = !DILocation(line: 1195, column: 28, scope: !14812)
!14824 = !DILocation(line: 1197, column: 7, scope: !14825)
!14825 = distinct !DILexicalBlock(scope: !14812, file: !14813, line: 1197, column: 7)
!14826 = !DILocation(line: 1197, column: 15, scope: !14825)
!14827 = !DILocation(line: 1197, column: 12, scope: !14825)
!14828 = !DILocation(line: 1198, column: 7, scope: !14825)
!14829 = !DILocation(line: 1198, column: 11, scope: !14825)
!14830 = !DILocation(line: 1198, column: 17, scope: !14825)
!14831 = !DILocation(line: 1199, column: 4, scope: !14825)
!14832 = !DILocation(line: 1199, column: 7, scope: !14825)
!14833 = !DILocation(line: 1199, column: 15, scope: !14825)
!14834 = !DILocation(line: 1199, column: 22, scope: !14825)
!14835 = !DILocation(line: 1199, column: 20, scope: !14825)
!14836 = !DILocation(line: 1199, column: 12, scope: !14825)
!14837 = !DILocation(line: 1197, column: 7, scope: !14812)
!14838 = !DILocation(line: 1200, column: 5, scope: !14825)
!14839 = !DILocation(line: 1201, column: 7, scope: !14840)
!14840 = distinct !DILexicalBlock(scope: !14812, file: !14813, line: 1201, column: 7)
!14841 = !DILocation(line: 1201, column: 15, scope: !14840)
!14842 = !DILocation(line: 1201, column: 12, scope: !14840)
!14843 = !DILocation(line: 1202, column: 7, scope: !14840)
!14844 = !DILocation(line: 1202, column: 11, scope: !14840)
!14845 = !DILocation(line: 1202, column: 17, scope: !14840)
!14846 = !DILocation(line: 1203, column: 4, scope: !14840)
!14847 = !DILocation(line: 1203, column: 7, scope: !14840)
!14848 = !DILocation(line: 1203, column: 15, scope: !14840)
!14849 = !DILocation(line: 1203, column: 22, scope: !14840)
!14850 = !DILocation(line: 1203, column: 20, scope: !14840)
!14851 = !DILocation(line: 1203, column: 12, scope: !14840)
!14852 = !DILocation(line: 1201, column: 7, scope: !14812)
!14853 = !DILocation(line: 1204, column: 5, scope: !14840)
!14854 = !DILocation(line: 1206, column: 3, scope: !14812)
!14855 = !DILocation(line: 1207, column: 1, scope: !14812)
!14856 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !14813, file: !14813, line: 33, type: !14857, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14857 = !DISubroutineType(types: !14858)
!14858 = !{!3421, !14859}
!14859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14860, size: 64)
!14860 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4054)
!14861 = !DILocalVariable(name: "fun", arg: 1, scope: !14856, file: !14813, line: 33, type: !14859)
!14862 = !DILocation(line: 33, column: 41, scope: !14856)
!14863 = !DILocation(line: 35, column: 10, scope: !14856)
!14864 = !DILocation(line: 35, column: 14, scope: !14856)
!14865 = !DILocation(line: 35, column: 17, scope: !14856)
!14866 = !DILocation(line: 35, column: 22, scope: !14856)
!14867 = !DILocation(line: 35, column: 32, scope: !14856)
!14868 = !DILocation(line: 35, column: 35, scope: !14856)
!14869 = !DILocation(line: 35, column: 40, scope: !14856)
!14870 = !DILocation(line: 35, column: 51, scope: !14856)
!14871 = !DILocation(line: 0, scope: !14856)
!14872 = !DILocation(line: 35, column: 3, scope: !14856)
!14873 = distinct !DISubprogram(name: "fold_builtin_strncat_chk", scope: !3, file: !3, line: 12452, type: !6569, scopeLine: 12454, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14874 = !DILocalVariable(name: "loc", arg: 1, scope: !14873, file: !3, line: 12452, type: !3429)
!14875 = !DILocation(line: 12452, column: 38, scope: !14873)
!14876 = !DILocalVariable(name: "fndecl", arg: 2, scope: !14873, file: !3, line: 12452, type: !3344)
!14877 = !DILocation(line: 12452, column: 48, scope: !14873)
!14878 = !DILocalVariable(name: "dest", arg: 3, scope: !14873, file: !3, line: 12453, type: !3344)
!14879 = !DILocation(line: 12453, column: 11, scope: !14873)
!14880 = !DILocalVariable(name: "src", arg: 4, scope: !14873, file: !3, line: 12453, type: !3344)
!14881 = !DILocation(line: 12453, column: 22, scope: !14873)
!14882 = !DILocalVariable(name: "len", arg: 5, scope: !14873, file: !3, line: 12453, type: !3344)
!14883 = !DILocation(line: 12453, column: 32, scope: !14873)
!14884 = !DILocalVariable(name: "size", arg: 6, scope: !14873, file: !3, line: 12453, type: !3344)
!14885 = !DILocation(line: 12453, column: 42, scope: !14873)
!14886 = !DILocalVariable(name: "fn", scope: !14873, file: !3, line: 12455, type: !3344)
!14887 = !DILocation(line: 12455, column: 8, scope: !14873)
!14888 = !DILocalVariable(name: "p", scope: !14873, file: !3, line: 12456, type: !3504)
!14889 = !DILocation(line: 12456, column: 15, scope: !14873)
!14890 = !DILocation(line: 12458, column: 22, scope: !14891)
!14891 = distinct !DILexicalBlock(scope: !14873, file: !3, line: 12458, column: 7)
!14892 = !DILocation(line: 12458, column: 8, scope: !14891)
!14893 = !DILocation(line: 12459, column: 7, scope: !14891)
!14894 = !DILocation(line: 12459, column: 25, scope: !14891)
!14895 = !DILocation(line: 12459, column: 11, scope: !14891)
!14896 = !DILocation(line: 12460, column: 7, scope: !14891)
!14897 = !DILocation(line: 12460, column: 25, scope: !14891)
!14898 = !DILocation(line: 12460, column: 11, scope: !14891)
!14899 = !DILocation(line: 12461, column: 7, scope: !14891)
!14900 = !DILocation(line: 12461, column: 25, scope: !14891)
!14901 = !DILocation(line: 12461, column: 11, scope: !14891)
!14902 = !DILocation(line: 12458, column: 7, scope: !14873)
!14903 = !DILocation(line: 12462, column: 5, scope: !14891)
!14904 = !DILocation(line: 12464, column: 17, scope: !14873)
!14905 = !DILocation(line: 12464, column: 7, scope: !14873)
!14906 = !DILocation(line: 12464, column: 5, scope: !14873)
!14907 = !DILocation(line: 12466, column: 7, scope: !14908)
!14908 = distinct !DILexicalBlock(scope: !14873, file: !3, line: 12466, column: 7)
!14909 = !DILocation(line: 12466, column: 9, scope: !14908)
!14910 = !DILocation(line: 12466, column: 13, scope: !14908)
!14911 = !DILocation(line: 12466, column: 12, scope: !14908)
!14912 = !DILocation(line: 12466, column: 15, scope: !14908)
!14913 = !DILocation(line: 12466, column: 7, scope: !14873)
!14914 = !DILocation(line: 12467, column: 34, scope: !14908)
!14915 = !DILocation(line: 12467, column: 39, scope: !14908)
!14916 = !DILocation(line: 12467, column: 71, scope: !14908)
!14917 = !DILocation(line: 12467, column: 77, scope: !14908)
!14918 = !DILocation(line: 12467, column: 12, scope: !14908)
!14919 = !DILocation(line: 12467, column: 5, scope: !14908)
!14920 = !DILocation(line: 12468, column: 27, scope: !14921)
!14921 = distinct !DILexicalBlock(scope: !14908, file: !3, line: 12468, column: 12)
!14922 = !DILocation(line: 12468, column: 12, scope: !14921)
!14923 = !DILocation(line: 12468, column: 12, scope: !14908)
!14924 = !DILocation(line: 12469, column: 34, scope: !14921)
!14925 = !DILocation(line: 12469, column: 39, scope: !14921)
!14926 = !DILocation(line: 12469, column: 71, scope: !14921)
!14927 = !DILocation(line: 12469, column: 77, scope: !14921)
!14928 = !DILocation(line: 12469, column: 12, scope: !14921)
!14929 = !DILocation(line: 12469, column: 5, scope: !14921)
!14930 = !DILocation(line: 12471, column: 24, scope: !14931)
!14931 = distinct !DILexicalBlock(scope: !14873, file: !3, line: 12471, column: 7)
!14932 = !DILocation(line: 12471, column: 9, scope: !14931)
!14933 = !DILocation(line: 12471, column: 7, scope: !14873)
!14934 = !DILocation(line: 12472, column: 5, scope: !14931)
!14935 = !DILocation(line: 12474, column: 28, scope: !14936)
!14936 = distinct !DILexicalBlock(scope: !14873, file: !3, line: 12474, column: 7)
!14937 = !DILocation(line: 12474, column: 9, scope: !14936)
!14938 = !DILocation(line: 12474, column: 7, scope: !14873)
!14939 = !DILocalVariable(name: "src_len", scope: !14940, file: !3, line: 12476, type: !3344)
!14940 = distinct !DILexicalBlock(scope: !14936, file: !3, line: 12475, column: 5)
!14941 = !DILocation(line: 12476, column: 12, scope: !14940)
!14942 = !DILocation(line: 12476, column: 32, scope: !14940)
!14943 = !DILocation(line: 12476, column: 22, scope: !14940)
!14944 = !DILocation(line: 12477, column: 11, scope: !14945)
!14945 = distinct !DILexicalBlock(scope: !14940, file: !3, line: 12477, column: 11)
!14946 = !DILocation(line: 12478, column: 4, scope: !14945)
!14947 = !DILocation(line: 12478, column: 22, scope: !14945)
!14948 = !DILocation(line: 12478, column: 7, scope: !14945)
!14949 = !DILocation(line: 12479, column: 4, scope: !14945)
!14950 = !DILocation(line: 12479, column: 22, scope: !14945)
!14951 = !DILocation(line: 12479, column: 7, scope: !14945)
!14952 = !DILocation(line: 12480, column: 4, scope: !14945)
!14953 = !DILocation(line: 12480, column: 26, scope: !14945)
!14954 = !DILocation(line: 12480, column: 31, scope: !14945)
!14955 = !DILocation(line: 12480, column: 9, scope: !14945)
!14956 = !DILocation(line: 12477, column: 11, scope: !14940)
!14957 = !DILocation(line: 12483, column: 9, scope: !14958)
!14958 = distinct !DILexicalBlock(scope: !14945, file: !3, line: 12481, column: 2)
!14959 = !DILocation(line: 12483, column: 7, scope: !14958)
!14960 = !DILocation(line: 12484, column: 9, scope: !14961)
!14961 = distinct !DILexicalBlock(scope: !14958, file: !3, line: 12484, column: 8)
!14962 = !DILocation(line: 12484, column: 8, scope: !14958)
!14963 = !DILocation(line: 12485, column: 6, scope: !14961)
!14964 = !DILocation(line: 12487, column: 32, scope: !14958)
!14965 = !DILocation(line: 12487, column: 37, scope: !14958)
!14966 = !DILocation(line: 12487, column: 44, scope: !14958)
!14967 = !DILocation(line: 12487, column: 50, scope: !14958)
!14968 = !DILocation(line: 12487, column: 55, scope: !14958)
!14969 = !DILocation(line: 12487, column: 11, scope: !14958)
!14970 = !DILocation(line: 12487, column: 4, scope: !14958)
!14971 = !DILocation(line: 12489, column: 7, scope: !14940)
!14972 = !DILocation(line: 12493, column: 8, scope: !14873)
!14973 = !DILocation(line: 12493, column: 6, scope: !14873)
!14974 = !DILocation(line: 12494, column: 8, scope: !14975)
!14975 = distinct !DILexicalBlock(scope: !14873, file: !3, line: 12494, column: 7)
!14976 = !DILocation(line: 12494, column: 7, scope: !14873)
!14977 = !DILocation(line: 12495, column: 5, scope: !14975)
!14978 = !DILocation(line: 12497, column: 31, scope: !14873)
!14979 = !DILocation(line: 12497, column: 36, scope: !14873)
!14980 = !DILocation(line: 12497, column: 43, scope: !14873)
!14981 = !DILocation(line: 12497, column: 49, scope: !14873)
!14982 = !DILocation(line: 12497, column: 54, scope: !14873)
!14983 = !DILocation(line: 12497, column: 10, scope: !14873)
!14984 = !DILocation(line: 12497, column: 3, scope: !14873)
!14985 = !DILocation(line: 12498, column: 1, scope: !14873)
!14986 = distinct !DISubprogram(name: "fold_builtin_sprintf_chk", scope: !3, file: !3, line: 12505, type: !14987, scopeLine: 12507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!14987 = !DISubroutineType(types: !14988)
!14988 = !{!3344, !3429, !3344, !573}
!14989 = !DILocalVariable(name: "loc", arg: 1, scope: !14986, file: !3, line: 12505, type: !3429)
!14990 = !DILocation(line: 12505, column: 38, scope: !14986)
!14991 = !DILocalVariable(name: "exp", arg: 2, scope: !14986, file: !3, line: 12505, type: !3344)
!14992 = !DILocation(line: 12505, column: 48, scope: !14986)
!14993 = !DILocalVariable(name: "fcode", arg: 3, scope: !14986, file: !3, line: 12506, type: !573)
!14994 = !DILocation(line: 12506, column: 29, scope: !14986)
!14995 = !DILocalVariable(name: "dest", scope: !14986, file: !3, line: 12508, type: !3344)
!14996 = !DILocation(line: 12508, column: 8, scope: !14986)
!14997 = !DILocalVariable(name: "size", scope: !14986, file: !3, line: 12508, type: !3344)
!14998 = !DILocation(line: 12508, column: 14, scope: !14986)
!14999 = !DILocalVariable(name: "len", scope: !14986, file: !3, line: 12508, type: !3344)
!15000 = !DILocation(line: 12508, column: 20, scope: !14986)
!15001 = !DILocalVariable(name: "fn", scope: !14986, file: !3, line: 12508, type: !3344)
!15002 = !DILocation(line: 12508, column: 25, scope: !14986)
!15003 = !DILocalVariable(name: "fmt", scope: !14986, file: !3, line: 12508, type: !3344)
!15004 = !DILocation(line: 12508, column: 29, scope: !14986)
!15005 = !DILocalVariable(name: "flag", scope: !14986, file: !3, line: 12508, type: !3344)
!15006 = !DILocation(line: 12508, column: 34, scope: !14986)
!15007 = !DILocalVariable(name: "fmt_str", scope: !14986, file: !3, line: 12509, type: !3504)
!15008 = !DILocation(line: 12509, column: 15, scope: !14986)
!15009 = !DILocalVariable(name: "nargs", scope: !14986, file: !3, line: 12510, type: !1445)
!15010 = !DILocation(line: 12510, column: 7, scope: !14986)
!15011 = !DILocation(line: 12510, column: 15, scope: !14986)
!15012 = !DILocation(line: 12513, column: 7, scope: !15013)
!15013 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12513, column: 7)
!15014 = !DILocation(line: 12513, column: 13, scope: !15013)
!15015 = !DILocation(line: 12513, column: 7, scope: !14986)
!15016 = !DILocation(line: 12514, column: 5, scope: !15013)
!15017 = !DILocation(line: 12515, column: 10, scope: !14986)
!15018 = !DILocation(line: 12515, column: 8, scope: !14986)
!15019 = !DILocation(line: 12516, column: 22, scope: !15020)
!15020 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12516, column: 7)
!15021 = !DILocation(line: 12516, column: 8, scope: !15020)
!15022 = !DILocation(line: 12516, column: 7, scope: !14986)
!15023 = !DILocation(line: 12517, column: 5, scope: !15020)
!15024 = !DILocation(line: 12518, column: 10, scope: !14986)
!15025 = !DILocation(line: 12518, column: 8, scope: !14986)
!15026 = !DILocation(line: 12519, column: 22, scope: !15027)
!15027 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12519, column: 7)
!15028 = !DILocation(line: 12519, column: 8, scope: !15027)
!15029 = !DILocation(line: 12519, column: 7, scope: !14986)
!15030 = !DILocation(line: 12520, column: 5, scope: !15027)
!15031 = !DILocation(line: 12521, column: 10, scope: !14986)
!15032 = !DILocation(line: 12521, column: 8, scope: !14986)
!15033 = !DILocation(line: 12522, column: 22, scope: !15034)
!15034 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12522, column: 7)
!15035 = !DILocation(line: 12522, column: 8, scope: !15034)
!15036 = !DILocation(line: 12522, column: 7, scope: !14986)
!15037 = !DILocation(line: 12523, column: 5, scope: !15034)
!15038 = !DILocation(line: 12524, column: 9, scope: !14986)
!15039 = !DILocation(line: 12524, column: 7, scope: !14986)
!15040 = !DILocation(line: 12525, column: 22, scope: !15041)
!15041 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12525, column: 7)
!15042 = !DILocation(line: 12525, column: 8, scope: !15041)
!15043 = !DILocation(line: 12525, column: 7, scope: !14986)
!15044 = !DILocation(line: 12526, column: 5, scope: !15041)
!15045 = !DILocation(line: 12528, column: 24, scope: !15046)
!15046 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12528, column: 7)
!15047 = !DILocation(line: 12528, column: 9, scope: !15046)
!15048 = !DILocation(line: 12528, column: 7, scope: !14986)
!15049 = !DILocation(line: 12529, column: 5, scope: !15046)
!15050 = !DILocation(line: 12531, column: 7, scope: !14986)
!15051 = !DILocation(line: 12533, column: 8, scope: !15052)
!15052 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12533, column: 7)
!15053 = !DILocation(line: 12533, column: 7, scope: !14986)
!15054 = !DILocation(line: 12534, column: 5, scope: !15052)
!15055 = !DILocation(line: 12537, column: 23, scope: !14986)
!15056 = !DILocation(line: 12537, column: 13, scope: !14986)
!15057 = !DILocation(line: 12537, column: 11, scope: !14986)
!15058 = !DILocation(line: 12538, column: 7, scope: !15059)
!15059 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12538, column: 7)
!15060 = !DILocation(line: 12538, column: 15, scope: !15059)
!15061 = !DILocation(line: 12538, column: 7, scope: !14986)
!15062 = !DILocation(line: 12541, column: 19, scope: !15063)
!15063 = distinct !DILexicalBlock(scope: !15064, file: !3, line: 12541, column: 11)
!15064 = distinct !DILexicalBlock(scope: !15059, file: !3, line: 12539, column: 5)
!15065 = !DILocation(line: 12541, column: 28, scope: !15063)
!15066 = !DILocation(line: 12541, column: 11, scope: !15063)
!15067 = !DILocation(line: 12541, column: 44, scope: !15063)
!15068 = !DILocation(line: 12541, column: 11, scope: !15064)
!15069 = !DILocation(line: 12543, column: 8, scope: !15070)
!15070 = distinct !DILexicalBlock(scope: !15071, file: !3, line: 12543, column: 8)
!15071 = distinct !DILexicalBlock(scope: !15063, file: !3, line: 12542, column: 2)
!15072 = !DILocation(line: 12543, column: 14, scope: !15070)
!15073 = !DILocation(line: 12543, column: 38, scope: !15070)
!15074 = !DILocation(line: 12543, column: 41, scope: !15070)
!15075 = !DILocation(line: 12543, column: 47, scope: !15070)
!15076 = !DILocation(line: 12543, column: 8, scope: !15071)
!15077 = !DILocation(line: 12544, column: 28, scope: !15070)
!15078 = !DILocation(line: 12544, column: 52, scope: !15070)
!15079 = !DILocation(line: 12544, column: 44, scope: !15070)
!15080 = !DILocation(line: 12544, column: 12, scope: !15070)
!15081 = !DILocation(line: 12544, column: 10, scope: !15070)
!15082 = !DILocation(line: 12544, column: 6, scope: !15070)
!15083 = !DILocation(line: 12545, column: 2, scope: !15071)
!15084 = !DILocation(line: 12548, column: 16, scope: !15085)
!15085 = distinct !DILexicalBlock(scope: !15063, file: !3, line: 12548, column: 16)
!15086 = !DILocation(line: 12548, column: 22, scope: !15085)
!15087 = !DILocation(line: 12549, column: 9, scope: !15085)
!15088 = !DILocation(line: 12549, column: 20, scope: !15085)
!15089 = !DILocation(line: 12549, column: 12, scope: !15085)
!15090 = !DILocation(line: 12549, column: 47, scope: !15085)
!15091 = !DILocation(line: 12548, column: 16, scope: !15063)
!15092 = !DILocalVariable(name: "arg", scope: !15093, file: !3, line: 12551, type: !3344)
!15093 = distinct !DILexicalBlock(scope: !15085, file: !3, line: 12550, column: 2)
!15094 = !DILocation(line: 12551, column: 9, scope: !15093)
!15095 = !DILocation(line: 12553, column: 8, scope: !15096)
!15096 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 12553, column: 8)
!15097 = !DILocation(line: 12553, column: 14, scope: !15096)
!15098 = !DILocation(line: 12553, column: 8, scope: !15093)
!15099 = !DILocation(line: 12555, column: 14, scope: !15100)
!15100 = distinct !DILexicalBlock(scope: !15096, file: !3, line: 12554, column: 6)
!15101 = !DILocation(line: 12555, column: 12, scope: !15100)
!15102 = !DILocation(line: 12556, column: 26, scope: !15103)
!15103 = distinct !DILexicalBlock(scope: !15100, file: !3, line: 12556, column: 12)
!15104 = !DILocation(line: 12556, column: 12, scope: !15103)
!15105 = !DILocation(line: 12556, column: 12, scope: !15100)
!15106 = !DILocation(line: 12558, column: 21, scope: !15107)
!15107 = distinct !DILexicalBlock(scope: !15103, file: !3, line: 12557, column: 3)
!15108 = !DILocation(line: 12558, column: 11, scope: !15107)
!15109 = !DILocation(line: 12558, column: 9, scope: !15107)
!15110 = !DILocation(line: 12559, column: 11, scope: !15111)
!15111 = distinct !DILexicalBlock(scope: !15107, file: !3, line: 12559, column: 9)
!15112 = !DILocation(line: 12559, column: 15, scope: !15111)
!15113 = !DILocation(line: 12559, column: 35, scope: !15111)
!15114 = !DILocation(line: 12559, column: 20, scope: !15111)
!15115 = !DILocation(line: 12559, column: 9, scope: !15107)
!15116 = !DILocation(line: 12560, column: 11, scope: !15111)
!15117 = !DILocation(line: 12560, column: 7, scope: !15111)
!15118 = !DILocation(line: 12561, column: 3, scope: !15107)
!15119 = !DILocation(line: 12562, column: 6, scope: !15100)
!15120 = !DILocation(line: 12563, column: 2, scope: !15093)
!15121 = !DILocation(line: 12564, column: 5, scope: !15064)
!15122 = !DILocation(line: 12566, column: 28, scope: !15123)
!15123 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12566, column: 7)
!15124 = !DILocation(line: 12566, column: 9, scope: !15123)
!15125 = !DILocation(line: 12566, column: 7, scope: !14986)
!15126 = !DILocation(line: 12568, column: 13, scope: !15127)
!15127 = distinct !DILexicalBlock(scope: !15128, file: !3, line: 12568, column: 11)
!15128 = distinct !DILexicalBlock(scope: !15123, file: !3, line: 12567, column: 5)
!15129 = !DILocation(line: 12568, column: 17, scope: !15127)
!15130 = !DILocation(line: 12568, column: 39, scope: !15127)
!15131 = !DILocation(line: 12568, column: 44, scope: !15127)
!15132 = !DILocation(line: 12568, column: 22, scope: !15127)
!15133 = !DILocation(line: 12568, column: 11, scope: !15128)
!15134 = !DILocation(line: 12569, column: 2, scope: !15127)
!15135 = !DILocation(line: 12570, column: 5, scope: !15128)
!15136 = !DILocation(line: 12574, column: 24, scope: !15137)
!15137 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12574, column: 7)
!15138 = !DILocation(line: 12574, column: 9, scope: !15137)
!15139 = !DILocation(line: 12574, column: 7, scope: !14986)
!15140 = !DILocation(line: 12576, column: 11, scope: !15141)
!15141 = distinct !DILexicalBlock(scope: !15142, file: !3, line: 12576, column: 11)
!15142 = distinct !DILexicalBlock(scope: !15137, file: !3, line: 12575, column: 5)
!15143 = !DILocation(line: 12576, column: 19, scope: !15141)
!15144 = !DILocation(line: 12576, column: 11, scope: !15142)
!15145 = !DILocation(line: 12577, column: 2, scope: !15141)
!15146 = !DILocation(line: 12578, column: 19, scope: !15147)
!15147 = distinct !DILexicalBlock(scope: !15142, file: !3, line: 12578, column: 11)
!15148 = !DILocation(line: 12578, column: 28, scope: !15147)
!15149 = !DILocation(line: 12578, column: 11, scope: !15147)
!15150 = !DILocation(line: 12578, column: 44, scope: !15147)
!15151 = !DILocation(line: 12579, column: 4, scope: !15147)
!15152 = !DILocation(line: 12579, column: 15, scope: !15147)
!15153 = !DILocation(line: 12579, column: 7, scope: !15147)
!15154 = !DILocation(line: 12578, column: 11, scope: !15142)
!15155 = !DILocation(line: 12580, column: 2, scope: !15147)
!15156 = !DILocation(line: 12581, column: 5, scope: !15142)
!15157 = !DILocation(line: 12584, column: 23, scope: !14986)
!15158 = !DILocation(line: 12584, column: 29, scope: !14986)
!15159 = !DILocation(line: 12584, column: 8, scope: !14986)
!15160 = !DILocation(line: 12584, column: 6, scope: !14986)
!15161 = !DILocation(line: 12586, column: 8, scope: !15162)
!15162 = distinct !DILexicalBlock(scope: !14986, file: !3, line: 12586, column: 7)
!15163 = !DILocation(line: 12586, column: 7, scope: !14986)
!15164 = !DILocation(line: 12587, column: 5, scope: !15162)
!15165 = !DILocation(line: 12589, column: 29, scope: !14986)
!15166 = !DILocation(line: 12589, column: 34, scope: !14986)
!15167 = !DILocation(line: 12589, column: 42, scope: !14986)
!15168 = !DILocation(line: 12589, column: 49, scope: !14986)
!15169 = !DILocation(line: 12589, column: 55, scope: !14986)
!15170 = !DILocation(line: 12589, column: 10, scope: !14986)
!15171 = !DILocation(line: 12589, column: 3, scope: !14986)
!15172 = !DILocation(line: 12590, column: 1, scope: !14986)
!15173 = distinct !DISubprogram(name: "fold_builtin_fpclassify", scope: !3, file: !3, line: 9575, type: !10810, scopeLine: 9576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15174 = !DILocalVariable(name: "loc", arg: 1, scope: !15173, file: !3, line: 9575, type: !3429)
!15175 = !DILocation(line: 9575, column: 37, scope: !15173)
!15176 = !DILocalVariable(name: "exp", arg: 2, scope: !15173, file: !3, line: 9575, type: !3344)
!15177 = !DILocation(line: 9575, column: 47, scope: !15173)
!15178 = !DILocalVariable(name: "fp_nan", scope: !15173, file: !3, line: 9577, type: !3344)
!15179 = !DILocation(line: 9577, column: 8, scope: !15173)
!15180 = !DILocalVariable(name: "fp_infinite", scope: !15173, file: !3, line: 9577, type: !3344)
!15181 = !DILocation(line: 9577, column: 16, scope: !15173)
!15182 = !DILocalVariable(name: "fp_normal", scope: !15173, file: !3, line: 9577, type: !3344)
!15183 = !DILocation(line: 9577, column: 29, scope: !15173)
!15184 = !DILocalVariable(name: "fp_subnormal", scope: !15173, file: !3, line: 9577, type: !3344)
!15185 = !DILocation(line: 9577, column: 40, scope: !15173)
!15186 = !DILocalVariable(name: "fp_zero", scope: !15173, file: !3, line: 9577, type: !3344)
!15187 = !DILocation(line: 9577, column: 54, scope: !15173)
!15188 = !DILocalVariable(name: "arg", scope: !15173, file: !3, line: 9578, type: !3344)
!15189 = !DILocation(line: 9578, column: 5, scope: !15173)
!15190 = !DILocalVariable(name: "type", scope: !15173, file: !3, line: 9578, type: !3344)
!15191 = !DILocation(line: 9578, column: 10, scope: !15173)
!15192 = !DILocalVariable(name: "res", scope: !15173, file: !3, line: 9578, type: !3344)
!15193 = !DILocation(line: 9578, column: 16, scope: !15173)
!15194 = !DILocalVariable(name: "tmp", scope: !15173, file: !3, line: 9578, type: !3344)
!15195 = !DILocation(line: 9578, column: 21, scope: !15173)
!15196 = !DILocalVariable(name: "mode", scope: !15173, file: !3, line: 9579, type: !5)
!15197 = !DILocation(line: 9579, column: 21, scope: !15173)
!15198 = !DILocalVariable(name: "r", scope: !15173, file: !3, line: 9580, type: !3366)
!15199 = !DILocation(line: 9580, column: 19, scope: !15173)
!15200 = !DILocalVariable(name: "buf", scope: !15173, file: !3, line: 9581, type: !11047)
!15201 = !DILocation(line: 9581, column: 8, scope: !15173)
!15202 = !DILocation(line: 9584, column: 26, scope: !15203)
!15203 = distinct !DILexicalBlock(scope: !15173, file: !3, line: 9584, column: 7)
!15204 = !DILocation(line: 9584, column: 8, scope: !15203)
!15205 = !DILocation(line: 9584, column: 7, scope: !15173)
!15206 = !DILocation(line: 9587, column: 5, scope: !15203)
!15207 = !DILocation(line: 9589, column: 12, scope: !15173)
!15208 = !DILocation(line: 9589, column: 10, scope: !15173)
!15209 = !DILocation(line: 9590, column: 17, scope: !15173)
!15210 = !DILocation(line: 9590, column: 15, scope: !15173)
!15211 = !DILocation(line: 9591, column: 15, scope: !15173)
!15212 = !DILocation(line: 9591, column: 13, scope: !15173)
!15213 = !DILocation(line: 9592, column: 18, scope: !15173)
!15214 = !DILocation(line: 9592, column: 16, scope: !15173)
!15215 = !DILocation(line: 9593, column: 13, scope: !15173)
!15216 = !DILocation(line: 9593, column: 11, scope: !15173)
!15217 = !DILocation(line: 9594, column: 9, scope: !15173)
!15218 = !DILocation(line: 9594, column: 7, scope: !15173)
!15219 = !DILocation(line: 9595, column: 10, scope: !15173)
!15220 = !DILocation(line: 9595, column: 8, scope: !15173)
!15221 = !DILocation(line: 9596, column: 10, scope: !15173)
!15222 = !DILocation(line: 9596, column: 8, scope: !15173)
!15223 = !DILocation(line: 9597, column: 28, scope: !15173)
!15224 = !DILocation(line: 9597, column: 9, scope: !15173)
!15225 = !DILocation(line: 9597, column: 7, scope: !15173)
!15226 = !DILocation(line: 9605, column: 9, scope: !15173)
!15227 = !DILocation(line: 9605, column: 7, scope: !15173)
!15228 = !DILocation(line: 9607, column: 9, scope: !15173)
!15229 = !DILocation(line: 9607, column: 7, scope: !15173)
!15230 = !DILocation(line: 9610, column: 12, scope: !15173)
!15231 = !DILocation(line: 9610, column: 27, scope: !15173)
!15232 = !DILocation(line: 9610, column: 52, scope: !15173)
!15233 = !DILocation(line: 9610, column: 57, scope: !15173)
!15234 = !DILocation(line: 9610, column: 3, scope: !15173)
!15235 = !DILocation(line: 9611, column: 25, scope: !15173)
!15236 = !DILocation(line: 9611, column: 3, scope: !15173)
!15237 = !DILocation(line: 9612, column: 9, scope: !15173)
!15238 = !DILocation(line: 9612, column: 7, scope: !15173)
!15239 = !DILocation(line: 9614, column: 9, scope: !15173)
!15240 = !DILocation(line: 9614, column: 7, scope: !15173)
!15241 = !DILocation(line: 9616, column: 7, scope: !15242)
!15242 = distinct !DILexicalBlock(scope: !15173, file: !3, line: 9616, column: 7)
!15243 = !DILocation(line: 9616, column: 7, scope: !15173)
!15244 = !DILocation(line: 9618, column: 7, scope: !15245)
!15245 = distinct !DILexicalBlock(scope: !15242, file: !3, line: 9617, column: 5)
!15246 = !DILocation(line: 9619, column: 13, scope: !15245)
!15247 = !DILocation(line: 9619, column: 11, scope: !15245)
!15248 = !DILocation(line: 9621, column: 13, scope: !15245)
!15249 = !DILocation(line: 9621, column: 11, scope: !15245)
!15250 = !DILocation(line: 9623, column: 5, scope: !15245)
!15251 = !DILocation(line: 9625, column: 7, scope: !15252)
!15252 = distinct !DILexicalBlock(scope: !15173, file: !3, line: 9625, column: 7)
!15253 = !DILocation(line: 9625, column: 7, scope: !15173)
!15254 = !DILocation(line: 9627, column: 13, scope: !15255)
!15255 = distinct !DILexicalBlock(scope: !15252, file: !3, line: 9626, column: 5)
!15256 = !DILocation(line: 9627, column: 11, scope: !15255)
!15257 = !DILocation(line: 9628, column: 13, scope: !15255)
!15258 = !DILocation(line: 9628, column: 11, scope: !15255)
!15259 = !DILocation(line: 9629, column: 5, scope: !15255)
!15260 = !DILocation(line: 9631, column: 10, scope: !15173)
!15261 = !DILocation(line: 9631, column: 3, scope: !15173)
!15262 = !DILocation(line: 9632, column: 1, scope: !15173)
!15263 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1437, file: !1437, line: 1596, type: !7165, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15264 = !DILocalVariable(name: "gs", arg: 1, scope: !15263, file: !1437, line: 1596, type: !7113)
!15265 = !DILocation(line: 1596, column: 30, scope: !15263)
!15266 = !DILocation(line: 1598, column: 10, scope: !15263)
!15267 = !DILocation(line: 1598, column: 14, scope: !15263)
!15268 = !DILocation(line: 1598, column: 21, scope: !15263)
!15269 = !DILocation(line: 1598, column: 3, scope: !15263)
!15270 = distinct !DISubprogram(name: "gimple_op", scope: !1437, file: !1437, line: 1631, type: !7178, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15271 = !DILocalVariable(name: "gs", arg: 1, scope: !15270, file: !1437, line: 1631, type: !7113)
!15272 = !DILocation(line: 1631, column: 25, scope: !15270)
!15273 = !DILocalVariable(name: "i", arg: 2, scope: !15270, file: !1437, line: 1631, type: !7)
!15274 = !DILocation(line: 1631, column: 38, scope: !15270)
!15275 = !DILocation(line: 1633, column: 23, scope: !15276)
!15276 = distinct !DILexicalBlock(scope: !15270, file: !1437, line: 1633, column: 7)
!15277 = !DILocation(line: 1633, column: 7, scope: !15276)
!15278 = !DILocation(line: 1633, column: 7, scope: !15270)
!15279 = !DILocation(line: 1638, column: 26, scope: !15280)
!15280 = distinct !DILexicalBlock(scope: !15276, file: !1437, line: 1634, column: 5)
!15281 = !DILocation(line: 1638, column: 14, scope: !15280)
!15282 = !DILocation(line: 1638, column: 50, scope: !15280)
!15283 = !DILocation(line: 1638, column: 7, scope: !15280)
!15284 = !DILocation(line: 1641, column: 5, scope: !15276)
!15285 = !DILocation(line: 1642, column: 1, scope: !15270)
!15286 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1437, file: !1437, line: 1274, type: !8623, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15287 = !DILocalVariable(name: "g", arg: 1, scope: !15286, file: !1437, line: 1274, type: !7113)
!15288 = !DILocation(line: 1274, column: 30, scope: !15286)
!15289 = !DILocation(line: 1276, column: 23, scope: !15286)
!15290 = !DILocation(line: 1276, column: 10, scope: !15286)
!15291 = !DILocation(line: 1276, column: 26, scope: !15286)
!15292 = !DILocation(line: 1276, column: 41, scope: !15286)
!15293 = !DILocation(line: 1276, column: 57, scope: !15286)
!15294 = !DILocation(line: 1276, column: 44, scope: !15286)
!15295 = !DILocation(line: 1276, column: 60, scope: !15286)
!15296 = !DILocation(line: 0, scope: !15286)
!15297 = !DILocation(line: 1276, column: 3, scope: !15286)
!15298 = distinct !DISubprogram(name: "gimple_ops", scope: !1437, file: !1437, line: 1614, type: !15299, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15299 = !DISubroutineType(types: !15300)
!15300 = !{!3666, !3631}
!15301 = !DILocalVariable(name: "gs", arg: 1, scope: !15298, file: !1437, line: 1614, type: !3631)
!15302 = !DILocation(line: 1614, column: 20, scope: !15298)
!15303 = !DILocalVariable(name: "off", scope: !15298, file: !1437, line: 1616, type: !3777)
!15304 = !DILocation(line: 1616, column: 10, scope: !15298)
!15305 = !DILocation(line: 1621, column: 56, scope: !15298)
!15306 = !DILocation(line: 1621, column: 28, scope: !15298)
!15307 = !DILocation(line: 1621, column: 9, scope: !15298)
!15308 = !DILocation(line: 1621, column: 7, scope: !15298)
!15309 = !DILocation(line: 1622, column: 3, scope: !15298)
!15310 = !DILocation(line: 1624, column: 29, scope: !15298)
!15311 = !DILocation(line: 1624, column: 20, scope: !15298)
!15312 = !DILocation(line: 1624, column: 34, scope: !15298)
!15313 = !DILocation(line: 1624, column: 32, scope: !15298)
!15314 = !DILocation(line: 1624, column: 10, scope: !15298)
!15315 = !DILocation(line: 1624, column: 3, scope: !15298)
!15316 = distinct !DISubprogram(name: "gimple_code", scope: !1437, file: !1437, line: 1052, type: !15317, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15317 = !DISubroutineType(types: !15318)
!15318 = !{!3225, !7113}
!15319 = !DILocalVariable(name: "g", arg: 1, scope: !15316, file: !1437, line: 1052, type: !7113)
!15320 = !DILocation(line: 1052, column: 27, scope: !15316)
!15321 = !DILocation(line: 1054, column: 10, scope: !15316)
!15322 = !DILocation(line: 1054, column: 13, scope: !15316)
!15323 = !DILocation(line: 1054, column: 20, scope: !15316)
!15324 = !DILocation(line: 1054, column: 3, scope: !15316)
!15325 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1437, file: !1437, line: 1073, type: !15326, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15326 = !DISubroutineType(types: !15327)
!15327 = !{!3263, !3631}
!15328 = !DILocalVariable(name: "gs", arg: 1, scope: !15325, file: !1437, line: 1073, type: !3631)
!15329 = !DILocation(line: 1073, column: 36, scope: !15325)
!15330 = !DILocation(line: 1075, column: 37, scope: !15325)
!15331 = !DILocation(line: 1075, column: 24, scope: !15325)
!15332 = !DILocation(line: 1075, column: 10, scope: !15325)
!15333 = !DILocation(line: 1075, column: 3, scope: !15325)
!15334 = distinct !DISubprogram(name: "gss_for_code", scope: !1437, file: !1437, line: 1061, type: !15335, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15335 = !DISubroutineType(types: !15336)
!15336 = !{!3263, !3225}
!15337 = !DILocalVariable(name: "code", arg: 1, scope: !15334, file: !1437, line: 1061, type: !3225)
!15338 = !DILocation(line: 1061, column: 32, scope: !15334)
!15339 = !DILocation(line: 1066, column: 24, scope: !15334)
!15340 = !DILocation(line: 1066, column: 10, scope: !15334)
!15341 = !DILocation(line: 1066, column: 3, scope: !15334)
!15342 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1437, file: !1437, line: 1911, type: !8545, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15343 = !DILocalVariable(name: "gs", arg: 1, scope: !15342, file: !1437, line: 1911, type: !7113)
!15344 = !DILocation(line: 1911, column: 30, scope: !15342)
!15345 = !DILocation(line: 1914, column: 21, scope: !15342)
!15346 = !DILocation(line: 1914, column: 10, scope: !15342)
!15347 = !DILocation(line: 1914, column: 3, scope: !15342)
!15348 = distinct !DISubprogram(name: "gimple_fold_builtin_sprintf_chk", scope: !3, file: !3, line: 13596, type: !15349, scopeLine: 13597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4748)
!15349 = !DISubroutineType(types: !15350)
!15350 = !{!3344, !3631, !573}
!15351 = !DILocalVariable(name: "stmt", arg: 1, scope: !15348, file: !3, line: 13596, type: !3631)
!15352 = !DILocation(line: 13596, column: 41, scope: !15348)
!15353 = !DILocalVariable(name: "fcode", arg: 2, scope: !15348, file: !3, line: 13596, type: !573)
!15354 = !DILocation(line: 13596, column: 70, scope: !15348)
!15355 = !DILocalVariable(name: "dest", scope: !15348, file: !3, line: 13598, type: !3344)
!15356 = !DILocation(line: 13598, column: 8, scope: !15348)
!15357 = !DILocalVariable(name: "size", scope: !15348, file: !3, line: 13598, type: !3344)
!15358 = !DILocation(line: 13598, column: 14, scope: !15348)
!15359 = !DILocalVariable(name: "len", scope: !15348, file: !3, line: 13598, type: !3344)
!15360 = !DILocation(line: 13598, column: 20, scope: !15348)
!15361 = !DILocalVariable(name: "fn", scope: !15348, file: !3, line: 13598, type: !3344)
!15362 = !DILocation(line: 13598, column: 25, scope: !15348)
!15363 = !DILocalVariable(name: "fmt", scope: !15348, file: !3, line: 13598, type: !3344)
!15364 = !DILocation(line: 13598, column: 29, scope: !15348)
!15365 = !DILocalVariable(name: "flag", scope: !15348, file: !3, line: 13598, type: !3344)
!15366 = !DILocation(line: 13598, column: 34, scope: !15348)
!15367 = !DILocalVariable(name: "fmt_str", scope: !15348, file: !3, line: 13599, type: !3504)
!15368 = !DILocation(line: 13599, column: 15, scope: !15348)
!15369 = !DILocalVariable(name: "nargs", scope: !15348, file: !3, line: 13600, type: !1445)
!15370 = !DILocation(line: 13600, column: 7, scope: !15348)
!15371 = !DILocation(line: 13600, column: 37, scope: !15348)
!15372 = !DILocation(line: 13600, column: 15, scope: !15348)
!15373 = !DILocation(line: 13603, column: 7, scope: !15374)
!15374 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13603, column: 7)
!15375 = !DILocation(line: 13603, column: 13, scope: !15374)
!15376 = !DILocation(line: 13603, column: 7, scope: !15348)
!15377 = !DILocation(line: 13604, column: 5, scope: !15374)
!15378 = !DILocation(line: 13605, column: 27, scope: !15348)
!15379 = !DILocation(line: 13605, column: 10, scope: !15348)
!15380 = !DILocation(line: 13605, column: 8, scope: !15348)
!15381 = !DILocation(line: 13606, column: 22, scope: !15382)
!15382 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13606, column: 7)
!15383 = !DILocation(line: 13606, column: 8, scope: !15382)
!15384 = !DILocation(line: 13606, column: 7, scope: !15348)
!15385 = !DILocation(line: 13607, column: 5, scope: !15382)
!15386 = !DILocation(line: 13608, column: 27, scope: !15348)
!15387 = !DILocation(line: 13608, column: 10, scope: !15348)
!15388 = !DILocation(line: 13608, column: 8, scope: !15348)
!15389 = !DILocation(line: 13609, column: 22, scope: !15390)
!15390 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13609, column: 7)
!15391 = !DILocation(line: 13609, column: 8, scope: !15390)
!15392 = !DILocation(line: 13609, column: 7, scope: !15348)
!15393 = !DILocation(line: 13610, column: 5, scope: !15390)
!15394 = !DILocation(line: 13611, column: 27, scope: !15348)
!15395 = !DILocation(line: 13611, column: 10, scope: !15348)
!15396 = !DILocation(line: 13611, column: 8, scope: !15348)
!15397 = !DILocation(line: 13612, column: 22, scope: !15398)
!15398 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13612, column: 7)
!15399 = !DILocation(line: 13612, column: 8, scope: !15398)
!15400 = !DILocation(line: 13612, column: 7, scope: !15348)
!15401 = !DILocation(line: 13613, column: 5, scope: !15398)
!15402 = !DILocation(line: 13614, column: 26, scope: !15348)
!15403 = !DILocation(line: 13614, column: 9, scope: !15348)
!15404 = !DILocation(line: 13614, column: 7, scope: !15348)
!15405 = !DILocation(line: 13615, column: 22, scope: !15406)
!15406 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13615, column: 7)
!15407 = !DILocation(line: 13615, column: 8, scope: !15406)
!15408 = !DILocation(line: 13615, column: 7, scope: !15348)
!15409 = !DILocation(line: 13616, column: 5, scope: !15406)
!15410 = !DILocation(line: 13618, column: 24, scope: !15411)
!15411 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13618, column: 7)
!15412 = !DILocation(line: 13618, column: 9, scope: !15411)
!15413 = !DILocation(line: 13618, column: 7, scope: !15348)
!15414 = !DILocation(line: 13619, column: 5, scope: !15411)
!15415 = !DILocation(line: 13621, column: 7, scope: !15348)
!15416 = !DILocation(line: 13623, column: 8, scope: !15417)
!15417 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13623, column: 7)
!15418 = !DILocation(line: 13623, column: 7, scope: !15348)
!15419 = !DILocation(line: 13624, column: 5, scope: !15417)
!15420 = !DILocation(line: 13627, column: 23, scope: !15348)
!15421 = !DILocation(line: 13627, column: 13, scope: !15348)
!15422 = !DILocation(line: 13627, column: 11, scope: !15348)
!15423 = !DILocation(line: 13628, column: 7, scope: !15424)
!15424 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13628, column: 7)
!15425 = !DILocation(line: 13628, column: 15, scope: !15424)
!15426 = !DILocation(line: 13628, column: 7, scope: !15348)
!15427 = !DILocation(line: 13631, column: 19, scope: !15428)
!15428 = distinct !DILexicalBlock(scope: !15429, file: !3, line: 13631, column: 11)
!15429 = distinct !DILexicalBlock(scope: !15424, file: !3, line: 13629, column: 5)
!15430 = !DILocation(line: 13631, column: 28, scope: !15428)
!15431 = !DILocation(line: 13631, column: 11, scope: !15428)
!15432 = !DILocation(line: 13631, column: 44, scope: !15428)
!15433 = !DILocation(line: 13631, column: 11, scope: !15429)
!15434 = !DILocation(line: 13633, column: 8, scope: !15435)
!15435 = distinct !DILexicalBlock(scope: !15436, file: !3, line: 13633, column: 8)
!15436 = distinct !DILexicalBlock(scope: !15428, file: !3, line: 13632, column: 2)
!15437 = !DILocation(line: 13633, column: 14, scope: !15435)
!15438 = !DILocation(line: 13633, column: 38, scope: !15435)
!15439 = !DILocation(line: 13633, column: 41, scope: !15435)
!15440 = !DILocation(line: 13633, column: 47, scope: !15435)
!15441 = !DILocation(line: 13633, column: 8, scope: !15436)
!15442 = !DILocation(line: 13634, column: 28, scope: !15435)
!15443 = !DILocation(line: 13634, column: 52, scope: !15435)
!15444 = !DILocation(line: 13634, column: 44, scope: !15435)
!15445 = !DILocation(line: 13634, column: 12, scope: !15435)
!15446 = !DILocation(line: 13634, column: 10, scope: !15435)
!15447 = !DILocation(line: 13634, column: 6, scope: !15435)
!15448 = !DILocation(line: 13635, column: 2, scope: !15436)
!15449 = !DILocation(line: 13638, column: 16, scope: !15450)
!15450 = distinct !DILexicalBlock(scope: !15428, file: !3, line: 13638, column: 16)
!15451 = !DILocation(line: 13638, column: 22, scope: !15450)
!15452 = !DILocation(line: 13639, column: 9, scope: !15450)
!15453 = !DILocation(line: 13639, column: 20, scope: !15450)
!15454 = !DILocation(line: 13639, column: 12, scope: !15450)
!15455 = !DILocation(line: 13639, column: 47, scope: !15450)
!15456 = !DILocation(line: 13638, column: 16, scope: !15428)
!15457 = !DILocalVariable(name: "arg", scope: !15458, file: !3, line: 13641, type: !3344)
!15458 = distinct !DILexicalBlock(scope: !15450, file: !3, line: 13640, column: 2)
!15459 = !DILocation(line: 13641, column: 9, scope: !15458)
!15460 = !DILocation(line: 13643, column: 8, scope: !15461)
!15461 = distinct !DILexicalBlock(scope: !15458, file: !3, line: 13643, column: 8)
!15462 = !DILocation(line: 13643, column: 14, scope: !15461)
!15463 = !DILocation(line: 13643, column: 8, scope: !15458)
!15464 = !DILocation(line: 13645, column: 31, scope: !15465)
!15465 = distinct !DILexicalBlock(scope: !15461, file: !3, line: 13644, column: 6)
!15466 = !DILocation(line: 13645, column: 14, scope: !15465)
!15467 = !DILocation(line: 13645, column: 12, scope: !15465)
!15468 = !DILocation(line: 13646, column: 26, scope: !15469)
!15469 = distinct !DILexicalBlock(scope: !15465, file: !3, line: 13646, column: 12)
!15470 = !DILocation(line: 13646, column: 12, scope: !15469)
!15471 = !DILocation(line: 13646, column: 12, scope: !15465)
!15472 = !DILocation(line: 13648, column: 21, scope: !15473)
!15473 = distinct !DILexicalBlock(scope: !15469, file: !3, line: 13647, column: 3)
!15474 = !DILocation(line: 13648, column: 11, scope: !15473)
!15475 = !DILocation(line: 13648, column: 9, scope: !15473)
!15476 = !DILocation(line: 13649, column: 11, scope: !15477)
!15477 = distinct !DILexicalBlock(scope: !15473, file: !3, line: 13649, column: 9)
!15478 = !DILocation(line: 13649, column: 15, scope: !15477)
!15479 = !DILocation(line: 13649, column: 35, scope: !15477)
!15480 = !DILocation(line: 13649, column: 20, scope: !15477)
!15481 = !DILocation(line: 13649, column: 9, scope: !15473)
!15482 = !DILocation(line: 13650, column: 11, scope: !15477)
!15483 = !DILocation(line: 13650, column: 7, scope: !15477)
!15484 = !DILocation(line: 13651, column: 3, scope: !15473)
!15485 = !DILocation(line: 13652, column: 6, scope: !15465)
!15486 = !DILocation(line: 13653, column: 2, scope: !15458)
!15487 = !DILocation(line: 13654, column: 5, scope: !15429)
!15488 = !DILocation(line: 13656, column: 28, scope: !15489)
!15489 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13656, column: 7)
!15490 = !DILocation(line: 13656, column: 9, scope: !15489)
!15491 = !DILocation(line: 13656, column: 7, scope: !15348)
!15492 = !DILocation(line: 13658, column: 13, scope: !15493)
!15493 = distinct !DILexicalBlock(scope: !15494, file: !3, line: 13658, column: 11)
!15494 = distinct !DILexicalBlock(scope: !15489, file: !3, line: 13657, column: 5)
!15495 = !DILocation(line: 13658, column: 17, scope: !15493)
!15496 = !DILocation(line: 13658, column: 39, scope: !15493)
!15497 = !DILocation(line: 13658, column: 44, scope: !15493)
!15498 = !DILocation(line: 13658, column: 22, scope: !15493)
!15499 = !DILocation(line: 13658, column: 11, scope: !15494)
!15500 = !DILocation(line: 13659, column: 2, scope: !15493)
!15501 = !DILocation(line: 13660, column: 5, scope: !15494)
!15502 = !DILocation(line: 13664, column: 24, scope: !15503)
!15503 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13664, column: 7)
!15504 = !DILocation(line: 13664, column: 9, scope: !15503)
!15505 = !DILocation(line: 13664, column: 7, scope: !15348)
!15506 = !DILocation(line: 13666, column: 11, scope: !15507)
!15507 = distinct !DILexicalBlock(scope: !15508, file: !3, line: 13666, column: 11)
!15508 = distinct !DILexicalBlock(scope: !15503, file: !3, line: 13665, column: 5)
!15509 = !DILocation(line: 13666, column: 19, scope: !15507)
!15510 = !DILocation(line: 13666, column: 11, scope: !15508)
!15511 = !DILocation(line: 13667, column: 2, scope: !15507)
!15512 = !DILocation(line: 13668, column: 19, scope: !15513)
!15513 = distinct !DILexicalBlock(scope: !15508, file: !3, line: 13668, column: 11)
!15514 = !DILocation(line: 13668, column: 28, scope: !15513)
!15515 = !DILocation(line: 13668, column: 11, scope: !15513)
!15516 = !DILocation(line: 13668, column: 44, scope: !15513)
!15517 = !DILocation(line: 13669, column: 4, scope: !15513)
!15518 = !DILocation(line: 13669, column: 15, scope: !15513)
!15519 = !DILocation(line: 13669, column: 7, scope: !15513)
!15520 = !DILocation(line: 13668, column: 11, scope: !15508)
!15521 = !DILocation(line: 13670, column: 2, scope: !15513)
!15522 = !DILocation(line: 13671, column: 5, scope: !15508)
!15523 = !DILocation(line: 13674, column: 23, scope: !15348)
!15524 = !DILocation(line: 13674, column: 29, scope: !15348)
!15525 = !DILocation(line: 13674, column: 8, scope: !15348)
!15526 = !DILocation(line: 13674, column: 6, scope: !15348)
!15527 = !DILocation(line: 13676, column: 8, scope: !15528)
!15528 = distinct !DILexicalBlock(scope: !15348, file: !3, line: 13676, column: 7)
!15529 = !DILocation(line: 13676, column: 7, scope: !15348)
!15530 = !DILocation(line: 13677, column: 5, scope: !15528)
!15531 = !DILocation(line: 13679, column: 36, scope: !15348)
!15532 = !DILocation(line: 13679, column: 45, scope: !15348)
!15533 = !DILocation(line: 13679, column: 52, scope: !15348)
!15534 = !DILocation(line: 13679, column: 58, scope: !15348)
!15535 = !DILocation(line: 13679, column: 10, scope: !15348)
!15536 = !DILocation(line: 13679, column: 3, scope: !15348)
!15537 = !DILocation(line: 13680, column: 1, scope: !15348)
