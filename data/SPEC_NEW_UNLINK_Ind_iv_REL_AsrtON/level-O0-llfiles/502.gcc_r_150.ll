; ModuleID = 'emit-rtl.c'
source_filename = "emit-rtl.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.real_value = type { i32, [3 x i64] }
%struct.fixed_value = type { %struct.double_int, i32 }
%struct.double_int = type { i64, i64 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.ggc_cache_tab = type { %struct.htab**, i64, i64, void (i8*)*, void (i8*)*, i32 (i8*)* }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.reg_attrs = type { %union.tree_node*, i64 }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.var_ann_d = type opaque
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }

@split_branch_probability = dso_local global i32 -1, align 4, !dbg !0
@const_int_rtx = common dso_local global [129 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2480
@const_int_htab = internal global %struct.htab* null, align 8, !dbg !2485
@mode_class = external dso_local constant [87 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"emit-rtl.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@mode_size = external dso_local global [87 x i8], align 16
@reload_in_progress = external dso_local global i32, align 4
@reload_completed = external dso_local global i32, align 4
@x_rtl = common dso_local global %struct.rtl_data zeroinitializer, align 8, !dbg !2267
@global_rtl = common dso_local global [11 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2439
@flag_pic = external dso_local global i32, align 4
@pic_offset_table_rtx = common dso_local global %struct.rtx_def* null, align 8, !dbg !2476
@fixed_regs = external dso_local global [53 x i8], align 16
@cfun = external dso_local global %struct.function*, align 8
@word_mode = common dso_local global i32 0, align 4, !dbg !2261
@mode_inner = external dso_local constant [87 x i8], align 16
@regclass_map = external dso_local constant [53 x i32], align 16
@generating_concat_p = external dso_local global i32, align 4
@regno_reg_rtx = common dso_local global %struct.rtx_def** null, align 8, !dbg !2437
@label_num = internal global i32 1, align 4, !dbg !2520
@tree_code_type = external dso_local constant [0 x i32], align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@flag_argument_noalias = external dso_local global i32, align 4
@ix86_isa_flags = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@spill_slot_decl = internal global %union.tree_node* null, align 8, !dbg !2495
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"%sfp\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"unshare\00", align 1
@pass_unshare_all_rtl = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8 ()* null, i32 ()* @unshare_all_rtl, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1025 } }, align 8, !dbg !2191
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@flag_enable_icf_debug = external dso_local global i32, align 4
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@optimize = external dso_local global i32, align 4
@free_sequence_stack = internal global %struct.sequence_stack* null, align 8, !dbg !2497
@copy_insn_n_scratches = internal global i32 0, align 4, !dbg !2506
@copy_insn_scratch_in = internal global [30 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2499
@copy_insn_scratch_out = internal global [30 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2504
@orig_asm_constraints_vector = internal global %struct.rtvec_def* null, align 8, !dbg !2512
@copy_asm_constraints_vector = internal global %struct.rtvec_def* null, align 8, !dbg !2514
@orig_asm_operands_vector = internal global %struct.rtvec_def* null, align 8, !dbg !2508
@copy_asm_operands_vector = internal global %struct.rtvec_def* null, align 8, !dbg !2510
@static_regno_reg_rtx = internal global [53 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2444
@mode_nunits = external dso_local constant [87 x i8], align 16
@const_tiny_rtx = common dso_local global [3 x [87 x %struct.rtx_def*]] zeroinitializer, align 16, !dbg !2449
@reg_attrs_htab = internal global %struct.htab* null, align 8, !dbg !2489
@reg_raw_mode = external dso_local global [53 x i32], align 16
@const_double_htab = internal global %struct.htab* null, align 8, !dbg !2491
@const_fixed_htab = internal global %struct.htab* null, align 8, !dbg !2493
@mem_attrs_htab = internal global %struct.htab* null, align 8, !dbg !2487
@byte_mode = common dso_local global i32 0, align 4, !dbg !2259
@class_narrowest_mode = external dso_local constant [18 x i8], align 16
@mode_wider = external dso_local constant [87 x i8], align 16
@ptr_mode = common dso_local global i32 0, align 4, !dbg !2265
@const_true_rtx = common dso_local global %struct.rtx_def* null, align 8, !dbg !2454
@dconst0 = common dso_local global %struct.real_value zeroinitializer, align 8, !dbg !2456
@dconst1 = common dso_local global %struct.real_value zeroinitializer, align 8, !dbg !2458
@dconst2 = common dso_local global %struct.real_value zeroinitializer, align 8, !dbg !2460
@dconstm1 = common dso_local global %struct.real_value zeroinitializer, align 8, !dbg !2462
@dconsthalf = common dso_local global %struct.real_value zeroinitializer, align 8, !dbg !2464
@fconst0 = common dso_local global [18 x %struct.fixed_value] zeroinitializer, align 16, !dbg !2466
@fconst1 = common dso_local global [8 x %struct.fixed_value] zeroinitializer, align 16, !dbg !2471
@mode_fbit = external dso_local constant [87 x i8], align 16
@hard_reg_clobbers = internal global [87 x [53 x %struct.rtx_def*]] zeroinitializer, align 16, !dbg !2516
@gt_ggc_r_gt_emit_rtl_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%union.tree_node** @spill_slot_decl to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast ([53 x %struct.rtx_def*]* @static_regno_reg_rtx to i8*), i64 53, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2219
@gt_ggc_rd_gt_emit_rtl_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast ([87 x [53 x %struct.rtx_def*]]* @hard_reg_clobbers to i8*), i64 1, i64 36888, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (%struct.sequence_stack** @free_sequence_stack to i8*), i64 1, i64 8, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2233
@gt_ggc_rc_gt_emit_rtl_h = dso_local constant [6 x %struct.ggc_cache_tab] [%struct.ggc_cache_tab { %struct.htab** @const_fixed_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab { %struct.htab** @const_double_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab { %struct.htab** @reg_attrs_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_reg_attrs, void (i8*)* @gt_pch_nx_reg_attrs, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab { %struct.htab** @mem_attrs_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_mem_attrs, void (i8*)* @gt_pch_nx_mem_attrs, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab { %struct.htab** @const_int_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab zeroinitializer], align 16, !dbg !2235
@gt_pch_rc_gt_emit_rtl_h = dso_local constant [6 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @const_fixed_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7rtx_def4htab, void (i8*)* @gt_pch_n_P7rtx_def4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @const_double_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7rtx_def4htab, void (i8*)* @gt_pch_n_P7rtx_def4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @reg_attrs_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P9reg_attrs4htab, void (i8*)* @gt_pch_n_P9reg_attrs4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @mem_attrs_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P9mem_attrs4htab, void (i8*)* @gt_pch_n_P9mem_attrs4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @const_int_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7rtx_def4htab, void (i8*)* @gt_pch_n_P7rtx_def4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2253
@gt_pch_rs_gt_emit_rtl_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @label_num to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2256
@double_mode = common dso_local global i32 0, align 4, !dbg !2263
@return_address_pointer_rtx = common dso_local global %struct.rtx_def* null, align 8, !dbg !2478

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_raw_REG(i32 %mode, i32 %regno) #0 !dbg !2526 {
entry:
  %mode.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2530, metadata !DIExpression()), !dbg !2531
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !2532, metadata !DIExpression()), !dbg !2533
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !2534, metadata !DIExpression()), !dbg !2535
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2536
  %1 = load i32, i32* %regno.addr, align 4, !dbg !2536
  %call = call %struct.rtx_def* @gen_rtx_fmt_i00_stat(i32 37, i32 %0, i32 %1), !dbg !2536
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8, !dbg !2535
  %2 = load i32, i32* %regno.addr, align 4, !dbg !2537
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !2538
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !2538
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2538
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2538
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2538
  store i32 %2, i32* %rt_uint, align 8, !dbg !2539
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !2540
  ret %struct.rtx_def* %4, !dbg !2541
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.rtx_def* @gen_rtx_fmt_i00_stat(i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32 %mode, i64 %arg) #0 !dbg !2542 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %arg.addr = alloca i64, align 8
  %slot = alloca i8**, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2545, metadata !DIExpression()), !dbg !2546
  store i64 %arg, i64* %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %arg.addr, metadata !2547, metadata !DIExpression()), !dbg !2548
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2549, metadata !DIExpression()), !dbg !2550
  %0 = load i64, i64* %arg.addr, align 8, !dbg !2551
  %cmp = icmp sge i64 %0, -64, !dbg !2553
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2554

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %arg.addr, align 8, !dbg !2555
  %cmp1 = icmp sle i64 %1, 64, !dbg !2556
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2557

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %arg.addr, align 8, !dbg !2558
  %add = add nsw i64 %2, 64, !dbg !2559
  %arrayidx = getelementptr inbounds [129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %add, !dbg !2560
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !2560
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !2561
  br label %return, !dbg !2561

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.htab*, %struct.htab** @const_int_htab, align 8, !dbg !2562
  %5 = bitcast i64* %arg.addr to i8*, !dbg !2563
  %6 = load i64, i64* %arg.addr, align 8, !dbg !2564
  %conv = trunc i64 %6 to i32, !dbg !2565
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %4, i8* %5, i32 %conv, i32 1), !dbg !2566
  store i8** %call, i8*** %slot, align 8, !dbg !2567
  %7 = load i8**, i8*** %slot, align 8, !dbg !2568
  %8 = load i8*, i8** %7, align 8, !dbg !2570
  %cmp2 = icmp eq i8* %8, null, !dbg !2571
  br i1 %cmp2, label %if.then4, label %if.end6, !dbg !2572

if.then4:                                         ; preds = %if.end
  %9 = load i64, i64* %arg.addr, align 8, !dbg !2573
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_w_stat(i32 30, i32 0, i64 %9), !dbg !2573
  %10 = bitcast %struct.rtx_def* %call5 to i8*, !dbg !2573
  %11 = load i8**, i8*** %slot, align 8, !dbg !2574
  store i8* %10, i8** %11, align 8, !dbg !2575
  br label %if.end6, !dbg !2576

if.end6:                                          ; preds = %if.then4, %if.end
  %12 = load i8**, i8*** %slot, align 8, !dbg !2577
  %13 = load i8*, i8** %12, align 8, !dbg !2578
  %14 = bitcast i8* %13 to %struct.rtx_def*, !dbg !2579
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !2580
  br label %return, !dbg !2580

return:                                           ; preds = %if.end6, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !2581
  ret %struct.rtx_def* %15, !dbg !2581
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_w_stat(i32, i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_int_mode(i64 %c, i32 %mode) #0 !dbg !2582 {
entry:
  %c.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  store i64 %c, i64* %c.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %c.addr, metadata !2585, metadata !DIExpression()), !dbg !2586
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2587, metadata !DIExpression()), !dbg !2588
  %0 = load i64, i64* %c.addr, align 8, !dbg !2589
  %1 = load i32, i32* %mode.addr, align 4, !dbg !2589
  %call = call i64 @trunc_int_for_mode(i64 %0, i32 %1), !dbg !2589
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call), !dbg !2589
  ret %struct.rtx_def* %call1, !dbg !2590
}

declare dso_local i64 @trunc_int_for_mode(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %value, i32 %mode) #0 !dbg !2591 {
entry:
  %mode.addr = alloca i32, align 4
  %real = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.real_value* %value, metadata !2594, metadata !DIExpression()), !dbg !2595
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2596, metadata !DIExpression()), !dbg !2597
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real, metadata !2598, metadata !DIExpression()), !dbg !2599
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 32), !dbg !2600
  store %struct.rtx_def* %call, %struct.rtx_def** %real, align 8, !dbg !2599
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2601
  %1 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !2601
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !2601
  %bf.load = load i32, i32* %2, align 8, !dbg !2601
  %bf.value = and i32 %0, 255, !dbg !2601
  %bf.shl = shl i32 %bf.value, 16, !dbg !2601
  %bf.clear = and i32 %bf.load, -16711681, !dbg !2601
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2601
  store i32 %bf.set, i32* %2, align 8, !dbg !2601
  %3 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !2602
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !2603
  %rv = bitcast %union.u* %u to %struct.real_value*, !dbg !2604
  %4 = bitcast %struct.real_value* %rv to i8*, !dbg !2605
  %5 = bitcast %struct.real_value* %value to i8*, !dbg !2605
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 32, i1 false), !dbg !2605
  %6 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !2606
  %call1 = call %struct.rtx_def* @lookup_const_double(%struct.rtx_def* %6), !dbg !2607
  ret %struct.rtx_def* %call1, !dbg !2608
}

declare dso_local %struct.rtx_def* @rtx_alloc_stat(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @lookup_const_double(%struct.rtx_def* %real) #0 !dbg !2609 {
entry:
  %real.addr = alloca %struct.rtx_def*, align 8
  %slot = alloca i8**, align 8
  store %struct.rtx_def* %real, %struct.rtx_def** %real.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real.addr, metadata !2612, metadata !DIExpression()), !dbg !2613
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2614, metadata !DIExpression()), !dbg !2615
  %0 = load %struct.htab*, %struct.htab** @const_double_htab, align 8, !dbg !2616
  %1 = load %struct.rtx_def*, %struct.rtx_def** %real.addr, align 8, !dbg !2617
  %2 = bitcast %struct.rtx_def* %1 to i8*, !dbg !2617
  %call = call i8** @htab_find_slot(%struct.htab* %0, i8* %2, i32 1), !dbg !2618
  store i8** %call, i8*** %slot, align 8, !dbg !2615
  %3 = load i8**, i8*** %slot, align 8, !dbg !2619
  %4 = load i8*, i8** %3, align 8, !dbg !2621
  %cmp = icmp eq i8* %4, null, !dbg !2622
  br i1 %cmp, label %if.then, label %if.end, !dbg !2623

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %real.addr, align 8, !dbg !2624
  %6 = bitcast %struct.rtx_def* %5 to i8*, !dbg !2624
  %7 = load i8**, i8*** %slot, align 8, !dbg !2625
  store i8* %6, i8** %7, align 8, !dbg !2626
  br label %if.end, !dbg !2627

if.end:                                           ; preds = %if.then, %entry
  %8 = load i8**, i8*** %slot, align 8, !dbg !2628
  %9 = load i8*, i8** %8, align 8, !dbg !2629
  %10 = bitcast i8* %9 to %struct.rtx_def*, !dbg !2630
  ret %struct.rtx_def* %10, !dbg !2631
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %value, i32 %mode) #0 !dbg !2632 {
entry:
  %mode.addr = alloca i32, align 4
  %fixed = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.fixed_value* %value, metadata !2635, metadata !DIExpression()), !dbg !2636
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2637, metadata !DIExpression()), !dbg !2638
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fixed, metadata !2639, metadata !DIExpression()), !dbg !2640
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 31), !dbg !2641
  store %struct.rtx_def* %call, %struct.rtx_def** %fixed, align 8, !dbg !2640
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2642
  %1 = load %struct.rtx_def*, %struct.rtx_def** %fixed, align 8, !dbg !2642
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !2642
  %bf.load = load i32, i32* %2, align 8, !dbg !2642
  %bf.value = and i32 %0, 255, !dbg !2642
  %bf.shl = shl i32 %bf.value, 16, !dbg !2642
  %bf.clear = and i32 %bf.load, -16711681, !dbg !2642
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2642
  store i32 %bf.set, i32* %2, align 8, !dbg !2642
  %3 = load %struct.rtx_def*, %struct.rtx_def** %fixed, align 8, !dbg !2643
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !2644
  %fv = bitcast %union.u* %u to %struct.fixed_value*, !dbg !2645
  %4 = bitcast %struct.fixed_value* %fv to i8*, !dbg !2646
  %5 = bitcast %struct.fixed_value* %value to i8*, !dbg !2646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !2646
  %6 = load %struct.rtx_def*, %struct.rtx_def** %fixed, align 8, !dbg !2647
  %call1 = call %struct.rtx_def* @lookup_const_fixed(%struct.rtx_def* %6), !dbg !2648
  ret %struct.rtx_def* %call1, !dbg !2649
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @lookup_const_fixed(%struct.rtx_def* %fixed) #0 !dbg !2650 {
entry:
  %fixed.addr = alloca %struct.rtx_def*, align 8
  %slot = alloca i8**, align 8
  store %struct.rtx_def* %fixed, %struct.rtx_def** %fixed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fixed.addr, metadata !2651, metadata !DIExpression()), !dbg !2652
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2653, metadata !DIExpression()), !dbg !2654
  %0 = load %struct.htab*, %struct.htab** @const_fixed_htab, align 8, !dbg !2655
  %1 = load %struct.rtx_def*, %struct.rtx_def** %fixed.addr, align 8, !dbg !2656
  %2 = bitcast %struct.rtx_def* %1 to i8*, !dbg !2656
  %call = call i8** @htab_find_slot(%struct.htab* %0, i8* %2, i32 1), !dbg !2657
  store i8** %call, i8*** %slot, align 8, !dbg !2654
  %3 = load i8**, i8*** %slot, align 8, !dbg !2658
  %4 = load i8*, i8** %3, align 8, !dbg !2660
  %cmp = icmp eq i8* %4, null, !dbg !2661
  br i1 %cmp, label %if.then, label %if.end, !dbg !2662

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %fixed.addr, align 8, !dbg !2663
  %6 = bitcast %struct.rtx_def* %5 to i8*, !dbg !2663
  %7 = load i8**, i8*** %slot, align 8, !dbg !2664
  store i8* %6, i8** %7, align 8, !dbg !2665
  br label %if.end, !dbg !2666

if.end:                                           ; preds = %if.then, %entry
  %8 = load i8**, i8*** %slot, align 8, !dbg !2667
  %9 = load i8*, i8** %8, align 8, !dbg !2668
  %10 = bitcast i8* %9 to %struct.rtx_def*, !dbg !2669
  ret %struct.rtx_def* %10, !dbg !2670
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @immed_double_const(i64 %i0, i64 %i1, i32 %mode) #0 !dbg !2671 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %i0.addr = alloca i64, align 8
  %i1.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store i64 %i0, i64* %i0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i0.addr, metadata !2674, metadata !DIExpression()), !dbg !2675
  store i64 %i1, i64* %i1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i1.addr, metadata !2676, metadata !DIExpression()), !dbg !2677
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2678, metadata !DIExpression()), !dbg !2679
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !2680, metadata !DIExpression()), !dbg !2681
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2682, metadata !DIExpression()), !dbg !2683
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2684
  %cmp = icmp ne i32 %0, 0, !dbg !2686
  br i1 %cmp, label %if.then, label %if.end42, !dbg !2687

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !2688
  %idxprom = zext i32 %1 to i64, !dbg !2688
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !2688
  %2 = load i8, i8* %arrayidx, align 1, !dbg !2688
  %conv = zext i8 %2 to i32, !dbg !2688
  %cmp1 = icmp eq i32 %conv, 2, !dbg !2688
  br i1 %cmp1, label %cond.false, label %lor.lhs.false, !dbg !2688

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %mode.addr, align 4, !dbg !2688
  %idxprom3 = zext i32 %3 to i64, !dbg !2688
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !2688
  %4 = load i8, i8* %arrayidx4, align 1, !dbg !2688
  %conv5 = zext i8 %4 to i32, !dbg !2688
  %cmp6 = icmp eq i32 %conv5, 3, !dbg !2688
  br i1 %cmp6, label %cond.false, label %lor.lhs.false8, !dbg !2688

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %5 = load i32, i32* %mode.addr, align 4, !dbg !2688
  %idxprom9 = zext i32 %5 to i64, !dbg !2688
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom9, !dbg !2688
  %6 = load i8, i8* %arrayidx10, align 1, !dbg !2688
  %conv11 = zext i8 %6 to i32, !dbg !2688
  %cmp12 = icmp eq i32 %conv11, 12, !dbg !2688
  br i1 %cmp12, label %cond.false, label %lor.lhs.false14, !dbg !2688

lor.lhs.false14:                                  ; preds = %lor.lhs.false8
  %7 = load i32, i32* %mode.addr, align 4, !dbg !2688
  %idxprom15 = zext i32 %7 to i64, !dbg !2688
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom15, !dbg !2688
  %8 = load i8, i8* %arrayidx16, align 1, !dbg !2688
  %conv17 = zext i8 %8 to i32, !dbg !2688
  %cmp18 = icmp eq i32 %conv17, 17, !dbg !2688
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !2688

cond.true:                                        ; preds = %lor.lhs.false14
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 547, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2688
  br label %cond.end, !dbg !2688

cond.false:                                       ; preds = %lor.lhs.false14, %lor.lhs.false8, %lor.lhs.false, %if.then
  br label %cond.end, !dbg !2688

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2688
  %9 = load i32, i32* %mode.addr, align 4, !dbg !2690
  %idxprom20 = zext i32 %9 to i64, !dbg !2690
  %arrayidx21 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom20, !dbg !2690
  %10 = load i8, i8* %arrayidx21, align 1, !dbg !2690
  %conv22 = zext i8 %10 to i16, !dbg !2690
  %conv23 = zext i16 %conv22 to i32, !dbg !2690
  %mul = mul nsw i32 %conv23, 8, !dbg !2690
  %conv24 = trunc i32 %mul to i16, !dbg !2690
  %conv25 = zext i16 %conv24 to i32, !dbg !2690
  %cmp26 = icmp sle i32 %conv25, 64, !dbg !2692
  br i1 %cmp26, label %if.then28, label %if.end, !dbg !2693

if.then28:                                        ; preds = %cond.end
  %11 = load i64, i64* %i0.addr, align 8, !dbg !2694
  %12 = load i32, i32* %mode.addr, align 4, !dbg !2695
  %call = call %struct.rtx_def* @gen_int_mode(i64 %11, i32 %12), !dbg !2696
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !2697
  br label %return, !dbg !2697

if.end:                                           ; preds = %cond.end
  %13 = load i32, i32* %mode.addr, align 4, !dbg !2698
  %idxprom29 = zext i32 %13 to i64, !dbg !2698
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom29, !dbg !2698
  %14 = load i8, i8* %arrayidx30, align 1, !dbg !2698
  %conv31 = zext i8 %14 to i16, !dbg !2698
  %conv32 = zext i16 %conv31 to i32, !dbg !2698
  %mul33 = mul nsw i32 %conv32, 8, !dbg !2698
  %conv34 = trunc i32 %mul33 to i16, !dbg !2698
  %conv35 = zext i16 %conv34 to i32, !dbg !2698
  %cmp36 = icmp eq i32 %conv35, 128, !dbg !2698
  br i1 %cmp36, label %cond.false39, label %cond.true38, !dbg !2698

cond.true38:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2698
  br label %cond.end40, !dbg !2698

cond.false39:                                     ; preds = %if.end
  br label %cond.end40, !dbg !2698

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !2698
  br label %if.end42, !dbg !2699

if.end42:                                         ; preds = %cond.end40, %entry
  %15 = load i64, i64* %i1.addr, align 8, !dbg !2700
  %cmp43 = icmp eq i64 %15, 0, !dbg !2702
  br i1 %cmp43, label %land.lhs.true, label %lor.lhs.false47, !dbg !2703

land.lhs.true:                                    ; preds = %if.end42
  %16 = load i64, i64* %i0.addr, align 8, !dbg !2704
  %cmp45 = icmp sge i64 %16, 0, !dbg !2705
  br i1 %cmp45, label %if.then53, label %lor.lhs.false47, !dbg !2706

lor.lhs.false47:                                  ; preds = %land.lhs.true, %if.end42
  %17 = load i64, i64* %i1.addr, align 8, !dbg !2707
  %cmp48 = icmp eq i64 %17, -1, !dbg !2708
  br i1 %cmp48, label %land.lhs.true50, label %if.end55, !dbg !2709

land.lhs.true50:                                  ; preds = %lor.lhs.false47
  %18 = load i64, i64* %i0.addr, align 8, !dbg !2710
  %cmp51 = icmp slt i64 %18, 0, !dbg !2711
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !2712

if.then53:                                        ; preds = %land.lhs.true50, %land.lhs.true
  %19 = load i64, i64* %i0.addr, align 8, !dbg !2713
  %call54 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %19), !dbg !2713
  store %struct.rtx_def* %call54, %struct.rtx_def** %retval, align 8, !dbg !2714
  br label %return, !dbg !2714

if.end55:                                         ; preds = %land.lhs.true50, %lor.lhs.false47
  %call56 = call %struct.rtx_def* @rtx_alloc_stat(i32 32), !dbg !2715
  store %struct.rtx_def* %call56, %struct.rtx_def** %value, align 8, !dbg !2716
  %20 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !2717
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !2717
  %bf.load = load i32, i32* %21, align 8, !dbg !2717
  %bf.clear = and i32 %bf.load, -16711681, !dbg !2717
  store i32 %bf.clear, i32* %21, align 8, !dbg !2717
  %22 = load i64, i64* %i0.addr, align 8, !dbg !2718
  %23 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !2719
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2719
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !2719
  %arrayidx57 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !2719
  store i64 %22, i64* %arrayidx57, align 8, !dbg !2720
  %24 = load i64, i64* %i1.addr, align 8, !dbg !2721
  %25 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !2722
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !2722
  %hwint59 = bitcast %union.u* %u58 to [1 x i64]*, !dbg !2722
  %arrayidx60 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint59, i64 0, i64 1, !dbg !2722
  store i64 %24, i64* %arrayidx60, align 8, !dbg !2723
  store i32 2, i32* %i, align 4, !dbg !2724
  br label %for.cond, !dbg !2726

for.cond:                                         ; preds = %for.inc, %if.end55
  %26 = load i32, i32* %i, align 4, !dbg !2727
  %conv61 = zext i32 %26 to i64, !dbg !2727
  %cmp62 = icmp ult i64 %conv61, 4, !dbg !2729
  br i1 %cmp62, label %for.body, label %for.end, !dbg !2730

for.body:                                         ; preds = %for.cond
  %27 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !2731
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !2731
  %hwint65 = bitcast %union.u* %u64 to [1 x i64]*, !dbg !2731
  %28 = load i32, i32* %i, align 4, !dbg !2731
  %idxprom66 = zext i32 %28 to i64, !dbg !2731
  %arrayidx67 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint65, i64 0, i64 %idxprom66, !dbg !2731
  store i64 0, i64* %arrayidx67, align 8, !dbg !2732
  br label %for.inc, !dbg !2731

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !2733
  %inc = add i32 %29, 1, !dbg !2733
  store i32 %inc, i32* %i, align 4, !dbg !2733
  br label %for.cond, !dbg !2734, !llvm.loop !2735

for.end:                                          ; preds = %for.cond
  %30 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !2737
  %call68 = call %struct.rtx_def* @lookup_const_double(%struct.rtx_def* %30), !dbg !2738
  store %struct.rtx_def* %call68, %struct.rtx_def** %retval, align 8, !dbg !2739
  br label %return, !dbg !2739

return:                                           ; preds = %for.end, %if.then53, %if.then28
  %31 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !2740
  ret %struct.rtx_def* %31, !dbg !2740
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_REG(i32 %mode, i32 %regno) #0 !dbg !2741 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2744, metadata !DIExpression()), !dbg !2745
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !2746, metadata !DIExpression()), !dbg !2747
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2748
  %cmp = icmp eq i32 %0, 16, !dbg !2750
  br i1 %cmp, label %land.lhs.true, label %if.end47, !dbg !2751

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @reload_in_progress, align 4, !dbg !2752
  %tobool = icmp ne i32 %1, 0, !dbg !2752
  br i1 %tobool, label %if.end47, label %if.then, !dbg !2753

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %regno.addr, align 4, !dbg !2754
  %cmp1 = icmp eq i32 %2, 20, !dbg !2757
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !2758

land.lhs.true2:                                   ; preds = %if.then
  %3 = load i32, i32* @reload_completed, align 4, !dbg !2759
  %tobool3 = icmp ne i32 %3, 0, !dbg !2759
  br i1 %tobool3, label %lor.lhs.false, label %if.then5, !dbg !2760

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %4 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !2761
  %conv = zext i8 %4 to i32, !dbg !2761
  %tobool4 = icmp ne i32 %conv, 0, !dbg !2761
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !2762

if.then5:                                         ; preds = %lor.lhs.false, %land.lhs.true2
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !2763
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !2764
  br label %return, !dbg !2764

if.end:                                           ; preds = %lor.lhs.false, %if.then
  %6 = load i32, i32* %regno.addr, align 4, !dbg !2765
  %cmp6 = icmp eq i32 %6, 6, !dbg !2767
  br i1 %cmp6, label %land.lhs.true8, label %if.end14, !dbg !2768

land.lhs.true8:                                   ; preds = %if.end
  %7 = load i32, i32* @reload_completed, align 4, !dbg !2769
  %tobool9 = icmp ne i32 %7, 0, !dbg !2769
  br i1 %tobool9, label %lor.lhs.false10, label %if.then13, !dbg !2770

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %8 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !2771
  %conv11 = zext i8 %8 to i32, !dbg !2771
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !2771
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !2772

if.then13:                                        ; preds = %lor.lhs.false10, %land.lhs.true8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !2773
  store %struct.rtx_def* %9, %struct.rtx_def** %retval, align 8, !dbg !2774
  br label %return, !dbg !2774

if.end14:                                         ; preds = %lor.lhs.false10, %if.end
  %10 = load i32, i32* %regno.addr, align 4, !dbg !2775
  %cmp15 = icmp eq i32 %10, 16, !dbg !2777
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !2778

if.then17:                                        ; preds = %if.end14
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !2779
  store %struct.rtx_def* %11, %struct.rtx_def** %retval, align 8, !dbg !2780
  br label %return, !dbg !2780

if.end18:                                         ; preds = %if.end14
  %12 = load i32, i32* %regno.addr, align 4, !dbg !2781
  %13 = load i32, i32* @flag_pic, align 4, !dbg !2783
  %tobool19 = icmp ne i32 %13, 0, !dbg !2783
  br i1 %tobool19, label %cond.false, label %cond.true, !dbg !2783

cond.true:                                        ; preds = %if.end18
  br label %cond.end23, !dbg !2783

cond.false:                                       ; preds = %if.end18
  %14 = load i32, i32* @reload_completed, align 4, !dbg !2783
  %tobool20 = icmp ne i32 %14, 0, !dbg !2783
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !2783

cond.true21:                                      ; preds = %cond.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !2783
  %call = call i32 @rhs_regno(%struct.rtx_def* %15), !dbg !2783
  br label %cond.end, !dbg !2783

cond.false22:                                     ; preds = %cond.false
  br label %cond.end, !dbg !2783

cond.end:                                         ; preds = %cond.false22, %cond.true21
  %cond = phi i32 [ %call, %cond.true21 ], [ 3, %cond.false22 ], !dbg !2783
  br label %cond.end23, !dbg !2783

cond.end23:                                       ; preds = %cond.end, %cond.true
  %cond24 = phi i32 [ -1, %cond.true ], [ %cond, %cond.end ], !dbg !2783
  %cmp25 = icmp eq i32 %12, %cond24, !dbg !2784
  br i1 %cmp25, label %land.lhs.true27, label %if.end42, !dbg !2785

land.lhs.true27:                                  ; preds = %cond.end23
  %16 = load i32, i32* @flag_pic, align 4, !dbg !2786
  %tobool28 = icmp ne i32 %16, 0, !dbg !2786
  br i1 %tobool28, label %cond.false30, label %cond.true29, !dbg !2786

cond.true29:                                      ; preds = %land.lhs.true27
  br label %cond.end37, !dbg !2786

cond.false30:                                     ; preds = %land.lhs.true27
  %17 = load i32, i32* @reload_completed, align 4, !dbg !2786
  %tobool31 = icmp ne i32 %17, 0, !dbg !2786
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !2786

cond.true32:                                      ; preds = %cond.false30
  %18 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !2786
  %call33 = call i32 @rhs_regno(%struct.rtx_def* %18), !dbg !2786
  br label %cond.end35, !dbg !2786

cond.false34:                                     ; preds = %cond.false30
  br label %cond.end35, !dbg !2786

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi i32 [ %call33, %cond.true32 ], [ 3, %cond.false34 ], !dbg !2786
  br label %cond.end37, !dbg !2786

cond.end37:                                       ; preds = %cond.end35, %cond.true29
  %cond38 = phi i32 [ -1, %cond.true29 ], [ %cond36, %cond.end35 ], !dbg !2786
  %idxprom = zext i32 %cond38 to i64, !dbg !2787
  %arrayidx = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom, !dbg !2787
  %19 = load i8, i8* %arrayidx, align 1, !dbg !2787
  %conv39 = sext i8 %19 to i32, !dbg !2787
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !2787
  br i1 %tobool40, label %if.then41, label %if.end42, !dbg !2788

if.then41:                                        ; preds = %cond.end37
  %20 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !2789
  store %struct.rtx_def* %20, %struct.rtx_def** %retval, align 8, !dbg !2790
  br label %return, !dbg !2790

if.end42:                                         ; preds = %cond.end37, %cond.end23
  %21 = load i32, i32* %regno.addr, align 4, !dbg !2791
  %cmp43 = icmp eq i32 %21, 7, !dbg !2793
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !2794

if.then45:                                        ; preds = %if.end42
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !2795
  store %struct.rtx_def* %22, %struct.rtx_def** %retval, align 8, !dbg !2796
  br label %return, !dbg !2796

if.end46:                                         ; preds = %if.end42
  br label %if.end47, !dbg !2797

if.end47:                                         ; preds = %if.end46, %land.lhs.true, %entry
  %23 = load i32, i32* %mode.addr, align 4, !dbg !2798
  %24 = load i32, i32* %regno.addr, align 4, !dbg !2799
  %call48 = call %struct.rtx_def* @gen_raw_REG(i32 %23, i32 %24), !dbg !2800
  store %struct.rtx_def* %call48, %struct.rtx_def** %retval, align 8, !dbg !2801
  br label %return, !dbg !2801

return:                                           ; preds = %if.end47, %if.then45, %if.then41, %if.then17, %if.then13, %if.then5
  %25 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !2802
  ret %struct.rtx_def* %25, !dbg !2802
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !2803 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !2806, metadata !DIExpression()), !dbg !2807
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2808
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2808
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2808
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2808
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2808
  %1 = load i32, i32* %rt_uint, align 8, !dbg !2808
  ret i32 %1, !dbg !2809
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_MEM(i32 %mode, %struct.rtx_def* %addr) #0 !dbg !2810 {
entry:
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %rt = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2813, metadata !DIExpression()), !dbg !2814
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !2815, metadata !DIExpression()), !dbg !2816
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rt, metadata !2817, metadata !DIExpression()), !dbg !2818
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2819
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !2819
  %call = call %struct.rtx_def* @gen_rtx_fmt_e0_stat(i32 43, i32 %0, %struct.rtx_def* %1), !dbg !2819
  store %struct.rtx_def* %call, %struct.rtx_def** %rt, align 8, !dbg !2818
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt, align 8, !dbg !2820
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !2820
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2820
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2820
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !2820
  store %struct.mem_attrs* null, %struct.mem_attrs** %rt_mem, align 8, !dbg !2821
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt, align 8, !dbg !2822
  ret %struct.rtx_def* %3, !dbg !2823
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e0_stat(i32, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_const_mem(i32 %mode, %struct.rtx_def* %addr) #0 !dbg !2824 {
entry:
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2825, metadata !DIExpression()), !dbg !2826
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !2827, metadata !DIExpression()), !dbg !2828
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !2829, metadata !DIExpression()), !dbg !2830
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2831
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !2832
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 %0, %struct.rtx_def* %1), !dbg !2833
  store %struct.rtx_def* %call, %struct.rtx_def** %mem, align 8, !dbg !2830
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2834
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2834
  %bf.load = load i32, i32* %3, align 8, !dbg !2835
  %bf.clear = and i32 %bf.load, -67108865, !dbg !2835
  %bf.set = or i32 %bf.clear, 67108864, !dbg !2835
  store i32 %bf.set, i32* %3, align 8, !dbg !2835
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2836
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !2836
  %bf.load1 = load i32, i32* %5, align 8, !dbg !2837
  %bf.clear2 = and i32 %bf.load1, -33554433, !dbg !2837
  %bf.set3 = or i32 %bf.clear2, 33554432, !dbg !2837
  store i32 %bf.set3, i32* %5, align 8, !dbg !2837
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2838
  ret %struct.rtx_def* %6, !dbg !2839
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_frame_mem(i32 %mode, %struct.rtx_def* %addr) #0 !dbg !2840 {
entry:
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2841, metadata !DIExpression()), !dbg !2842
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !2843, metadata !DIExpression()), !dbg !2844
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !2845, metadata !DIExpression()), !dbg !2846
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2847
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !2848
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 %0, %struct.rtx_def* %1), !dbg !2849
  store %struct.rtx_def* %call, %struct.rtx_def** %mem, align 8, !dbg !2846
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2850
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2850
  %bf.load = load i32, i32* %3, align 8, !dbg !2851
  %bf.clear = and i32 %bf.load, -33554433, !dbg !2851
  %bf.set = or i32 %bf.clear, 33554432, !dbg !2851
  store i32 %bf.set, i32* %3, align 8, !dbg !2851
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2852
  %call1 = call i32 @get_frame_alias_set(), !dbg !2853
  call void @set_mem_alias_set(%struct.rtx_def* %4, i32 %call1), !dbg !2854
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2855
  ret %struct.rtx_def* %5, !dbg !2856
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_alias_set(%struct.rtx_def* %mem, i32 %set) #0 !dbg !2857 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %set.addr = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !2860, metadata !DIExpression()), !dbg !2861
  store i32 %set, i32* %set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set.addr, metadata !2862, metadata !DIExpression()), !dbg !2863
  %0 = load i32, i32* %set.addr, align 4, !dbg !2864
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2865
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !2865
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2865
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2865
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !2865
  %2 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !2865
  %cmp = icmp eq %struct.mem_attrs* %2, null, !dbg !2865
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2865

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !2865

cond.false:                                       ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2865
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !2865
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !2865
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !2865
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !2865
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !2865
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %4, i32 0, i32 0, !dbg !2865
  %5 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !2865
  br label %cond.end, !dbg !2865

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %5, %cond.false ], !dbg !2865
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2866
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !2866
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !2866
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !2866
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !2866
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !2866
  %cmp9 = icmp eq %struct.mem_attrs* %7, null, !dbg !2866
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !2866

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !2866

cond.false11:                                     ; preds = %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2866
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !2866
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !2866
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !2866
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !2866
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !2866
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %9, i32 0, i32 1, !dbg !2866
  %10 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !2866
  br label %cond.end16, !dbg !2866

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %struct.rtx_def* [ null, %cond.true10 ], [ %10, %cond.false11 ], !dbg !2866
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2867
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !2867
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !2867
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !2867
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !2867
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !2867
  %cmp22 = icmp ne %struct.mem_attrs* %12, null, !dbg !2867
  br i1 %cmp22, label %cond.true23, label %cond.false28, !dbg !2867

cond.true23:                                      ; preds = %cond.end16
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2867
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !2867
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !2867
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !2867
  %rt_mem27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.mem_attrs**, !dbg !2867
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem27, align 8, !dbg !2867
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 2, !dbg !2867
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !2867
  br label %cond.end39, !dbg !2867

cond.false28:                                     ; preds = %cond.end16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2867
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !2867
  %bf.load = load i32, i32* %17, align 8, !dbg !2867
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2867
  %bf.clear = and i32 %bf.lshr, 255, !dbg !2867
  %cmp29 = icmp ne i32 %bf.clear, 1, !dbg !2867
  br i1 %cmp29, label %cond.true30, label %cond.false36, !dbg !2867

cond.true30:                                      ; preds = %cond.false28
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2867
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !2867
  %bf.load31 = load i32, i32* %19, align 8, !dbg !2867
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !2867
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !2867
  %idxprom = zext i32 %bf.clear33 to i64, !dbg !2867
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !2867
  %20 = load i8, i8* %arrayidx34, align 1, !dbg !2867
  %conv = zext i8 %20 to i16, !dbg !2867
  %conv35 = zext i16 %conv to i64, !dbg !2867
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv35), !dbg !2867
  br label %cond.end37, !dbg !2867

cond.false36:                                     ; preds = %cond.false28
  br label %cond.end37, !dbg !2867

cond.end37:                                       ; preds = %cond.false36, %cond.true30
  %cond38 = phi %struct.rtx_def* [ %call, %cond.true30 ], [ null, %cond.false36 ], !dbg !2867
  br label %cond.end39, !dbg !2867

cond.end39:                                       ; preds = %cond.end37, %cond.true23
  %cond40 = phi %struct.rtx_def* [ %15, %cond.true23 ], [ %cond38, %cond.end37 ], !dbg !2867
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2868
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !2868
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !2868
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !2868
  %rt_mem44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.mem_attrs**, !dbg !2868
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem44, align 8, !dbg !2868
  %cmp45 = icmp ne %struct.mem_attrs* %22, null, !dbg !2868
  br i1 %cmp45, label %cond.true47, label %cond.false52, !dbg !2868

cond.true47:                                      ; preds = %cond.end39
  %23 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2868
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2868
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !2868
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !2868
  %rt_mem51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.mem_attrs**, !dbg !2868
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem51, align 8, !dbg !2868
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %24, i32 0, i32 4, !dbg !2868
  %25 = load i32, i32* %align, align 4, !dbg !2868
  br label %cond.end53, !dbg !2868

cond.false52:                                     ; preds = %cond.end39
  br label %cond.end53, !dbg !2868

cond.end53:                                       ; preds = %cond.false52, %cond.true47
  %cond54 = phi i32 [ %25, %cond.true47 ], [ 8, %cond.false52 ], !dbg !2868
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2869
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !2869
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !2869
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !2869
  %rt_mem58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.mem_attrs**, !dbg !2869
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem58, align 8, !dbg !2869
  %cmp59 = icmp eq %struct.mem_attrs* %27, null, !dbg !2869
  br i1 %cmp59, label %cond.true61, label %cond.false62, !dbg !2869

cond.true61:                                      ; preds = %cond.end53
  br label %cond.end68, !dbg !2869

cond.false62:                                     ; preds = %cond.end53
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2869
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !2869
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !2869
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 1, !dbg !2869
  %rt_mem66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.mem_attrs**, !dbg !2869
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem66, align 8, !dbg !2869
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !2869
  %30 = load i8, i8* %addrspace, align 8, !dbg !2869
  %conv67 = zext i8 %30 to i32, !dbg !2869
  br label %cond.end68, !dbg !2869

cond.end68:                                       ; preds = %cond.false62, %cond.true61
  %cond69 = phi i32 [ 0, %cond.true61 ], [ %conv67, %cond.false62 ], !dbg !2869
  %conv70 = trunc i32 %cond69 to i8, !dbg !2869
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2870
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !2870
  %bf.load71 = load i32, i32* %32, align 8, !dbg !2870
  %bf.lshr72 = lshr i32 %bf.load71, 16, !dbg !2870
  %bf.clear73 = and i32 %bf.lshr72, 255, !dbg !2870
  %call74 = call %struct.mem_attrs* @get_mem_attrs(i32 %0, %union.tree_node* %cond, %struct.rtx_def* %cond17, %struct.rtx_def* %cond40, i32 %cond54, i8 zeroext %conv70, i32 %bf.clear73), !dbg !2871
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !2872
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !2872
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !2872
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !2872
  %rt_mem78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.mem_attrs**, !dbg !2872
  store %struct.mem_attrs* %call74, %struct.mem_attrs** %rt_mem78, align 8, !dbg !2873
  ret void, !dbg !2874
}

declare dso_local i32 @get_frame_alias_set() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_tmp_stack_mem(i32 %mode, %struct.rtx_def* %addr) #0 !dbg !2875 {
entry:
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !2878, metadata !DIExpression()), !dbg !2879
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !2880, metadata !DIExpression()), !dbg !2881
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2882
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !2883
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 %0, %struct.rtx_def* %1), !dbg !2884
  store %struct.rtx_def* %call, %struct.rtx_def** %mem, align 8, !dbg !2881
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2885
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2885
  %bf.load = load i32, i32* %3, align 8, !dbg !2886
  %bf.clear = and i32 %bf.load, -33554433, !dbg !2886
  %bf.set = or i32 %bf.clear, 33554432, !dbg !2886
  store i32 %bf.set, i32* %3, align 8, !dbg !2886
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2887
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !2887
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !2889
  %bf.load1 = load i32, i32* %calls_alloca, align 8, !dbg !2889
  %bf.lshr = lshr i32 %bf.load1, 19, !dbg !2889
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !2889
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !2887
  br i1 %tobool, label %if.end, label %if.then, !dbg !2890

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2891
  %call3 = call i32 @get_frame_alias_set(), !dbg !2892
  call void @set_mem_alias_set(%struct.rtx_def* %5, i32 %call3), !dbg !2893
  br label %if.end, !dbg !2893

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !2894
  ret %struct.rtx_def* %6, !dbg !2895
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @validate_subreg(i32 %omode, i32 %imode, %struct.rtx_def* %reg, i32 %offset) #0 !dbg !2896 {
entry:
  %retval = alloca i8, align 1
  %omode.addr = alloca i32, align 4
  %imode.addr = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  %isize = alloca i32, align 4
  %osize = alloca i32, align 4
  %regno = alloca i32, align 4
  %wmode = alloca i32, align 4
  %low_off = alloca i32, align 4
  store i32 %omode, i32* %omode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %omode.addr, metadata !2899, metadata !DIExpression()), !dbg !2900
  store i32 %imode, i32* %imode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %imode.addr, metadata !2901, metadata !DIExpression()), !dbg !2902
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !2903, metadata !DIExpression()), !dbg !2904
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !2905, metadata !DIExpression()), !dbg !2906
  call void @llvm.dbg.declare(metadata i32* %isize, metadata !2907, metadata !DIExpression()), !dbg !2908
  %0 = load i32, i32* %imode.addr, align 4, !dbg !2909
  %idxprom = zext i32 %0 to i64, !dbg !2909
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !2909
  %1 = load i8, i8* %arrayidx, align 1, !dbg !2909
  %conv = zext i8 %1 to i16, !dbg !2909
  %conv1 = zext i16 %conv to i32, !dbg !2909
  store i32 %conv1, i32* %isize, align 4, !dbg !2908
  call void @llvm.dbg.declare(metadata i32* %osize, metadata !2910, metadata !DIExpression()), !dbg !2911
  %2 = load i32, i32* %omode.addr, align 4, !dbg !2912
  %idxprom2 = zext i32 %2 to i64, !dbg !2912
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !2912
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !2912
  %conv4 = zext i8 %3 to i16, !dbg !2912
  %conv5 = zext i16 %conv4 to i32, !dbg !2912
  store i32 %conv5, i32* %osize, align 4, !dbg !2911
  %4 = load i32, i32* %offset.addr, align 4, !dbg !2913
  %5 = load i32, i32* %osize, align 4, !dbg !2915
  %rem = urem i32 %4, %5, !dbg !2916
  %cmp = icmp ne i32 %rem, 0, !dbg !2917
  br i1 %cmp, label %if.then, label %if.end, !dbg !2918

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2919
  br label %return, !dbg !2919

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %offset.addr, align 4, !dbg !2920
  %7 = load i32, i32* %isize, align 4, !dbg !2922
  %cmp7 = icmp uge i32 %6, %7, !dbg !2923
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !2924

if.then9:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2925
  br label %return, !dbg !2925

if.end10:                                         ; preds = %if.end
  %8 = load i32, i32* %omode.addr, align 4, !dbg !2926
  %9 = load i32, i32* @word_mode, align 4, !dbg !2928
  %cmp11 = icmp eq i32 %8, %9, !dbg !2929
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !2930

if.then13:                                        ; preds = %if.end10
  br label %if.end173, !dbg !2930

if.else:                                          ; preds = %if.end10
  %10 = load i32, i32* %osize, align 4, !dbg !2931
  %cmp14 = icmp uge i32 %10, 4, !dbg !2933
  br i1 %cmp14, label %land.lhs.true, label %if.else19, !dbg !2934

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* %isize, align 4, !dbg !2935
  %12 = load i32, i32* %osize, align 4, !dbg !2936
  %cmp16 = icmp uge i32 %11, %12, !dbg !2937
  br i1 %cmp16, label %if.then18, label %if.else19, !dbg !2938

if.then18:                                        ; preds = %land.lhs.true
  br label %if.end172, !dbg !2938

if.else19:                                        ; preds = %land.lhs.true, %if.else
  %13 = load i32, i32* %imode.addr, align 4, !dbg !2939
  %idxprom20 = zext i32 %13 to i64, !dbg !2939
  %arrayidx21 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom20, !dbg !2939
  %14 = load i8, i8* %arrayidx21, align 1, !dbg !2939
  %conv22 = zext i8 %14 to i32, !dbg !2939
  %cmp23 = icmp eq i32 %conv22, 10, !dbg !2939
  br i1 %cmp23, label %land.lhs.true66, label %lor.lhs.false, !dbg !2939

lor.lhs.false:                                    ; preds = %if.else19
  %15 = load i32, i32* %imode.addr, align 4, !dbg !2939
  %idxprom25 = zext i32 %15 to i64, !dbg !2939
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !2939
  %16 = load i8, i8* %arrayidx26, align 1, !dbg !2939
  %conv27 = zext i8 %16 to i32, !dbg !2939
  %cmp28 = icmp eq i32 %conv27, 11, !dbg !2939
  br i1 %cmp28, label %land.lhs.true66, label %lor.lhs.false30, !dbg !2941

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %17 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom31 = zext i32 %17 to i64, !dbg !2942
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !2942
  %18 = load i8, i8* %arrayidx32, align 1, !dbg !2942
  %conv33 = zext i8 %18 to i32, !dbg !2942
  %cmp34 = icmp eq i32 %conv33, 12, !dbg !2942
  br i1 %cmp34, label %land.lhs.true66, label %lor.lhs.false36, !dbg !2942

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %19 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom37 = zext i32 %19 to i64, !dbg !2942
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom37, !dbg !2942
  %20 = load i8, i8* %arrayidx38, align 1, !dbg !2942
  %conv39 = zext i8 %20 to i32, !dbg !2942
  %cmp40 = icmp eq i32 %conv39, 17, !dbg !2942
  br i1 %cmp40, label %land.lhs.true66, label %lor.lhs.false42, !dbg !2942

lor.lhs.false42:                                  ; preds = %lor.lhs.false36
  %21 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom43 = zext i32 %21 to i64, !dbg !2942
  %arrayidx44 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom43, !dbg !2942
  %22 = load i8, i8* %arrayidx44, align 1, !dbg !2942
  %conv45 = zext i8 %22 to i32, !dbg !2942
  %cmp46 = icmp eq i32 %conv45, 13, !dbg !2942
  br i1 %cmp46, label %land.lhs.true66, label %lor.lhs.false48, !dbg !2942

lor.lhs.false48:                                  ; preds = %lor.lhs.false42
  %23 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom49 = zext i32 %23 to i64, !dbg !2942
  %arrayidx50 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom49, !dbg !2942
  %24 = load i8, i8* %arrayidx50, align 1, !dbg !2942
  %conv51 = zext i8 %24 to i32, !dbg !2942
  %cmp52 = icmp eq i32 %conv51, 14, !dbg !2942
  br i1 %cmp52, label %land.lhs.true66, label %lor.lhs.false54, !dbg !2942

lor.lhs.false54:                                  ; preds = %lor.lhs.false48
  %25 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom55 = zext i32 %25 to i64, !dbg !2942
  %arrayidx56 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom55, !dbg !2942
  %26 = load i8, i8* %arrayidx56, align 1, !dbg !2942
  %conv57 = zext i8 %26 to i32, !dbg !2942
  %cmp58 = icmp eq i32 %conv57, 15, !dbg !2942
  br i1 %cmp58, label %land.lhs.true66, label %lor.lhs.false60, !dbg !2942

lor.lhs.false60:                                  ; preds = %lor.lhs.false54
  %27 = load i32, i32* %imode.addr, align 4, !dbg !2942
  %idxprom61 = zext i32 %27 to i64, !dbg !2942
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom61, !dbg !2942
  %28 = load i8, i8* %arrayidx62, align 1, !dbg !2942
  %conv63 = zext i8 %28 to i32, !dbg !2942
  %cmp64 = icmp eq i32 %conv63, 16, !dbg !2942
  br i1 %cmp64, label %land.lhs.true66, label %if.else73, !dbg !2943

land.lhs.true66:                                  ; preds = %lor.lhs.false60, %lor.lhs.false54, %lor.lhs.false48, %lor.lhs.false42, %lor.lhs.false36, %lor.lhs.false30, %lor.lhs.false, %if.else19
  %29 = load i32, i32* %imode.addr, align 4, !dbg !2944
  %idxprom67 = zext i32 %29 to i64, !dbg !2944
  %arrayidx68 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom67, !dbg !2944
  %30 = load i8, i8* %arrayidx68, align 1, !dbg !2944
  %conv69 = zext i8 %30 to i32, !dbg !2944
  %31 = load i32, i32* %omode.addr, align 4, !dbg !2945
  %cmp70 = icmp eq i32 %conv69, %31, !dbg !2946
  br i1 %cmp70, label %if.then72, label %if.else73, !dbg !2947

if.then72:                                        ; preds = %land.lhs.true66
  br label %if.end171, !dbg !2947

if.else73:                                        ; preds = %land.lhs.true66, %lor.lhs.false60
  %32 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom74 = zext i32 %32 to i64, !dbg !2948
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom74, !dbg !2948
  %33 = load i8, i8* %arrayidx75, align 1, !dbg !2948
  %conv76 = zext i8 %33 to i32, !dbg !2948
  %cmp77 = icmp eq i32 %conv76, 12, !dbg !2948
  br i1 %cmp77, label %land.lhs.true109, label %lor.lhs.false79, !dbg !2948

lor.lhs.false79:                                  ; preds = %if.else73
  %34 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom80 = zext i32 %34 to i64, !dbg !2948
  %arrayidx81 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom80, !dbg !2948
  %35 = load i8, i8* %arrayidx81, align 1, !dbg !2948
  %conv82 = zext i8 %35 to i32, !dbg !2948
  %cmp83 = icmp eq i32 %conv82, 17, !dbg !2948
  br i1 %cmp83, label %land.lhs.true109, label %lor.lhs.false85, !dbg !2948

lor.lhs.false85:                                  ; preds = %lor.lhs.false79
  %36 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom86 = zext i32 %36 to i64, !dbg !2948
  %arrayidx87 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom86, !dbg !2948
  %37 = load i8, i8* %arrayidx87, align 1, !dbg !2948
  %conv88 = zext i8 %37 to i32, !dbg !2948
  %cmp89 = icmp eq i32 %conv88, 13, !dbg !2948
  br i1 %cmp89, label %land.lhs.true109, label %lor.lhs.false91, !dbg !2948

lor.lhs.false91:                                  ; preds = %lor.lhs.false85
  %38 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom92 = zext i32 %38 to i64, !dbg !2948
  %arrayidx93 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom92, !dbg !2948
  %39 = load i8, i8* %arrayidx93, align 1, !dbg !2948
  %conv94 = zext i8 %39 to i32, !dbg !2948
  %cmp95 = icmp eq i32 %conv94, 14, !dbg !2948
  br i1 %cmp95, label %land.lhs.true109, label %lor.lhs.false97, !dbg !2948

lor.lhs.false97:                                  ; preds = %lor.lhs.false91
  %40 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom98 = zext i32 %40 to i64, !dbg !2948
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom98, !dbg !2948
  %41 = load i8, i8* %arrayidx99, align 1, !dbg !2948
  %conv100 = zext i8 %41 to i32, !dbg !2948
  %cmp101 = icmp eq i32 %conv100, 15, !dbg !2948
  br i1 %cmp101, label %land.lhs.true109, label %lor.lhs.false103, !dbg !2948

lor.lhs.false103:                                 ; preds = %lor.lhs.false97
  %42 = load i32, i32* %omode.addr, align 4, !dbg !2948
  %idxprom104 = zext i32 %42 to i64, !dbg !2948
  %arrayidx105 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom104, !dbg !2948
  %43 = load i8, i8* %arrayidx105, align 1, !dbg !2948
  %conv106 = zext i8 %43 to i32, !dbg !2948
  %cmp107 = icmp eq i32 %conv106, 16, !dbg !2948
  br i1 %cmp107, label %land.lhs.true109, label %if.else116, !dbg !2950

land.lhs.true109:                                 ; preds = %lor.lhs.false103, %lor.lhs.false97, %lor.lhs.false91, %lor.lhs.false85, %lor.lhs.false79, %if.else73
  %44 = load i32, i32* %omode.addr, align 4, !dbg !2951
  %idxprom110 = zext i32 %44 to i64, !dbg !2951
  %arrayidx111 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom110, !dbg !2951
  %45 = load i8, i8* %arrayidx111, align 1, !dbg !2951
  %conv112 = zext i8 %45 to i32, !dbg !2951
  %46 = load i32, i32* %imode.addr, align 4, !dbg !2952
  %cmp113 = icmp eq i32 %conv112, %46, !dbg !2953
  br i1 %cmp113, label %if.then115, label %if.else116, !dbg !2954

if.then115:                                       ; preds = %land.lhs.true109
  br label %if.end170, !dbg !2954

if.else116:                                       ; preds = %land.lhs.true109, %lor.lhs.false103
  %47 = load i32, i32* %imode.addr, align 4, !dbg !2955
  %idxprom117 = zext i32 %47 to i64, !dbg !2955
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom117, !dbg !2955
  %48 = load i8, i8* %arrayidx118, align 1, !dbg !2955
  %conv119 = zext i8 %48 to i32, !dbg !2955
  %cmp120 = icmp eq i32 %conv119, 8, !dbg !2955
  br i1 %cmp120, label %if.then164, label %lor.lhs.false122, !dbg !2955

lor.lhs.false122:                                 ; preds = %if.else116
  %49 = load i32, i32* %imode.addr, align 4, !dbg !2955
  %idxprom123 = zext i32 %49 to i64, !dbg !2955
  %arrayidx124 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom123, !dbg !2955
  %50 = load i8, i8* %arrayidx124, align 1, !dbg !2955
  %conv125 = zext i8 %50 to i32, !dbg !2955
  %cmp126 = icmp eq i32 %conv125, 9, !dbg !2955
  br i1 %cmp126, label %if.then164, label %lor.lhs.false128, !dbg !2955

lor.lhs.false128:                                 ; preds = %lor.lhs.false122
  %51 = load i32, i32* %imode.addr, align 4, !dbg !2955
  %idxprom129 = zext i32 %51 to i64, !dbg !2955
  %arrayidx130 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom129, !dbg !2955
  %52 = load i8, i8* %arrayidx130, align 1, !dbg !2955
  %conv131 = zext i8 %52 to i32, !dbg !2955
  %cmp132 = icmp eq i32 %conv131, 11, !dbg !2955
  br i1 %cmp132, label %if.then164, label %lor.lhs.false134, !dbg !2955

lor.lhs.false134:                                 ; preds = %lor.lhs.false128
  %53 = load i32, i32* %imode.addr, align 4, !dbg !2955
  %idxprom135 = zext i32 %53 to i64, !dbg !2955
  %arrayidx136 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom135, !dbg !2955
  %54 = load i8, i8* %arrayidx136, align 1, !dbg !2955
  %conv137 = zext i8 %54 to i32, !dbg !2955
  %cmp138 = icmp eq i32 %conv137, 17, !dbg !2955
  br i1 %cmp138, label %if.then164, label %lor.lhs.false140, !dbg !2957

lor.lhs.false140:                                 ; preds = %lor.lhs.false134
  %55 = load i32, i32* %omode.addr, align 4, !dbg !2958
  %idxprom141 = zext i32 %55 to i64, !dbg !2958
  %arrayidx142 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom141, !dbg !2958
  %56 = load i8, i8* %arrayidx142, align 1, !dbg !2958
  %conv143 = zext i8 %56 to i32, !dbg !2958
  %cmp144 = icmp eq i32 %conv143, 8, !dbg !2958
  br i1 %cmp144, label %if.then164, label %lor.lhs.false146, !dbg !2958

lor.lhs.false146:                                 ; preds = %lor.lhs.false140
  %57 = load i32, i32* %omode.addr, align 4, !dbg !2958
  %idxprom147 = zext i32 %57 to i64, !dbg !2958
  %arrayidx148 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom147, !dbg !2958
  %58 = load i8, i8* %arrayidx148, align 1, !dbg !2958
  %conv149 = zext i8 %58 to i32, !dbg !2958
  %cmp150 = icmp eq i32 %conv149, 9, !dbg !2958
  br i1 %cmp150, label %if.then164, label %lor.lhs.false152, !dbg !2958

lor.lhs.false152:                                 ; preds = %lor.lhs.false146
  %59 = load i32, i32* %omode.addr, align 4, !dbg !2958
  %idxprom153 = zext i32 %59 to i64, !dbg !2958
  %arrayidx154 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom153, !dbg !2958
  %60 = load i8, i8* %arrayidx154, align 1, !dbg !2958
  %conv155 = zext i8 %60 to i32, !dbg !2958
  %cmp156 = icmp eq i32 %conv155, 11, !dbg !2958
  br i1 %cmp156, label %if.then164, label %lor.lhs.false158, !dbg !2958

lor.lhs.false158:                                 ; preds = %lor.lhs.false152
  %61 = load i32, i32* %omode.addr, align 4, !dbg !2958
  %idxprom159 = zext i32 %61 to i64, !dbg !2958
  %arrayidx160 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom159, !dbg !2958
  %62 = load i8, i8* %arrayidx160, align 1, !dbg !2958
  %conv161 = zext i8 %62 to i32, !dbg !2958
  %cmp162 = icmp eq i32 %conv161, 17, !dbg !2958
  br i1 %cmp162, label %if.then164, label %if.end169, !dbg !2959

if.then164:                                       ; preds = %lor.lhs.false158, %lor.lhs.false152, %lor.lhs.false146, %lor.lhs.false140, %lor.lhs.false134, %lor.lhs.false128, %lor.lhs.false122, %if.else116
  %63 = load i32, i32* %isize, align 4, !dbg !2960
  %64 = load i32, i32* %osize, align 4, !dbg !2963
  %cmp165 = icmp ne i32 %63, %64, !dbg !2964
  br i1 %cmp165, label %if.then167, label %if.end168, !dbg !2965

if.then167:                                       ; preds = %if.then164
  store i8 0, i8* %retval, align 1, !dbg !2966
  br label %return, !dbg !2966

if.end168:                                        ; preds = %if.then164
  br label %if.end169, !dbg !2967

if.end169:                                        ; preds = %if.end168, %lor.lhs.false158
  br label %if.end170

if.end170:                                        ; preds = %if.end169, %if.then115
  br label %if.end171

if.end171:                                        ; preds = %if.end170, %if.then72
  br label %if.end172

if.end172:                                        ; preds = %if.end171, %if.then18
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.then13
  %65 = load i32, i32* %osize, align 4, !dbg !2968
  %66 = load i32, i32* %isize, align 4, !dbg !2970
  %cmp174 = icmp ugt i32 %65, %66, !dbg !2971
  br i1 %cmp174, label %if.then176, label %if.end180, !dbg !2972

if.then176:                                       ; preds = %if.end173
  %67 = load i32, i32* %offset.addr, align 4, !dbg !2973
  %cmp177 = icmp eq i32 %67, 0, !dbg !2974
  %conv178 = zext i1 %cmp177 to i32, !dbg !2974
  %conv179 = trunc i32 %conv178 to i8, !dbg !2973
  store i8 %conv179, i8* %retval, align 1, !dbg !2975
  br label %return, !dbg !2975

if.end180:                                        ; preds = %if.end173
  %68 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !2976
  %tobool = icmp ne %struct.rtx_def* %68, null, !dbg !2976
  br i1 %tobool, label %land.lhs.true181, label %if.end252, !dbg !2978

land.lhs.true181:                                 ; preds = %if.end180
  %69 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !2979
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !2979
  %bf.load = load i32, i32* %70, align 8, !dbg !2979
  %bf.clear = and i32 %bf.load, 65535, !dbg !2979
  %cmp182 = icmp eq i32 %bf.clear, 37, !dbg !2979
  br i1 %cmp182, label %land.lhs.true184, label %if.end252, !dbg !2980

land.lhs.true184:                                 ; preds = %land.lhs.true181
  %71 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !2981
  %call = call i32 @rhs_regno(%struct.rtx_def* %71), !dbg !2981
  %cmp185 = icmp ult i32 %call, 53, !dbg !2981
  br i1 %cmp185, label %if.then187, label %if.end252, !dbg !2982

if.then187:                                       ; preds = %land.lhs.true184
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !2983, metadata !DIExpression()), !dbg !2985
  %72 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !2986
  %call188 = call i32 @rhs_regno(%struct.rtx_def* %72), !dbg !2986
  store i32 %call188, i32* %regno, align 4, !dbg !2985
  %73 = load i32, i32* %imode.addr, align 4, !dbg !2987
  %idxprom189 = zext i32 %73 to i64, !dbg !2987
  %arrayidx190 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom189, !dbg !2987
  %74 = load i8, i8* %arrayidx190, align 1, !dbg !2987
  %conv191 = zext i8 %74 to i32, !dbg !2987
  %cmp192 = icmp eq i32 %conv191, 10, !dbg !2987
  br i1 %cmp192, label %land.lhs.true236, label %lor.lhs.false194, !dbg !2987

lor.lhs.false194:                                 ; preds = %if.then187
  %75 = load i32, i32* %imode.addr, align 4, !dbg !2987
  %idxprom195 = zext i32 %75 to i64, !dbg !2987
  %arrayidx196 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom195, !dbg !2987
  %76 = load i8, i8* %arrayidx196, align 1, !dbg !2987
  %conv197 = zext i8 %76 to i32, !dbg !2987
  %cmp198 = icmp eq i32 %conv197, 11, !dbg !2987
  br i1 %cmp198, label %land.lhs.true236, label %lor.lhs.false200, !dbg !2989

lor.lhs.false200:                                 ; preds = %lor.lhs.false194
  %77 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom201 = zext i32 %77 to i64, !dbg !2990
  %arrayidx202 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom201, !dbg !2990
  %78 = load i8, i8* %arrayidx202, align 1, !dbg !2990
  %conv203 = zext i8 %78 to i32, !dbg !2990
  %cmp204 = icmp eq i32 %conv203, 12, !dbg !2990
  br i1 %cmp204, label %land.lhs.true236, label %lor.lhs.false206, !dbg !2990

lor.lhs.false206:                                 ; preds = %lor.lhs.false200
  %79 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom207 = zext i32 %79 to i64, !dbg !2990
  %arrayidx208 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom207, !dbg !2990
  %80 = load i8, i8* %arrayidx208, align 1, !dbg !2990
  %conv209 = zext i8 %80 to i32, !dbg !2990
  %cmp210 = icmp eq i32 %conv209, 17, !dbg !2990
  br i1 %cmp210, label %land.lhs.true236, label %lor.lhs.false212, !dbg !2990

lor.lhs.false212:                                 ; preds = %lor.lhs.false206
  %81 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom213 = zext i32 %81 to i64, !dbg !2990
  %arrayidx214 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom213, !dbg !2990
  %82 = load i8, i8* %arrayidx214, align 1, !dbg !2990
  %conv215 = zext i8 %82 to i32, !dbg !2990
  %cmp216 = icmp eq i32 %conv215, 13, !dbg !2990
  br i1 %cmp216, label %land.lhs.true236, label %lor.lhs.false218, !dbg !2990

lor.lhs.false218:                                 ; preds = %lor.lhs.false212
  %83 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom219 = zext i32 %83 to i64, !dbg !2990
  %arrayidx220 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom219, !dbg !2990
  %84 = load i8, i8* %arrayidx220, align 1, !dbg !2990
  %conv221 = zext i8 %84 to i32, !dbg !2990
  %cmp222 = icmp eq i32 %conv221, 14, !dbg !2990
  br i1 %cmp222, label %land.lhs.true236, label %lor.lhs.false224, !dbg !2990

lor.lhs.false224:                                 ; preds = %lor.lhs.false218
  %85 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom225 = zext i32 %85 to i64, !dbg !2990
  %arrayidx226 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom225, !dbg !2990
  %86 = load i8, i8* %arrayidx226, align 1, !dbg !2990
  %conv227 = zext i8 %86 to i32, !dbg !2990
  %cmp228 = icmp eq i32 %conv227, 15, !dbg !2990
  br i1 %cmp228, label %land.lhs.true236, label %lor.lhs.false230, !dbg !2990

lor.lhs.false230:                                 ; preds = %lor.lhs.false224
  %87 = load i32, i32* %imode.addr, align 4, !dbg !2990
  %idxprom231 = zext i32 %87 to i64, !dbg !2990
  %arrayidx232 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom231, !dbg !2990
  %88 = load i8, i8* %arrayidx232, align 1, !dbg !2990
  %conv233 = zext i8 %88 to i32, !dbg !2990
  %cmp234 = icmp eq i32 %conv233, 16, !dbg !2990
  br i1 %cmp234, label %land.lhs.true236, label %if.else243, !dbg !2991

land.lhs.true236:                                 ; preds = %lor.lhs.false230, %lor.lhs.false224, %lor.lhs.false218, %lor.lhs.false212, %lor.lhs.false206, %lor.lhs.false200, %lor.lhs.false194, %if.then187
  %89 = load i32, i32* %imode.addr, align 4, !dbg !2992
  %idxprom237 = zext i32 %89 to i64, !dbg !2992
  %arrayidx238 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom237, !dbg !2992
  %90 = load i8, i8* %arrayidx238, align 1, !dbg !2992
  %conv239 = zext i8 %90 to i32, !dbg !2992
  %91 = load i32, i32* %omode.addr, align 4, !dbg !2993
  %cmp240 = icmp eq i32 %conv239, %91, !dbg !2994
  br i1 %cmp240, label %if.then242, label %if.else243, !dbg !2995

if.then242:                                       ; preds = %land.lhs.true236
  br label %if.end250, !dbg !2995

if.else243:                                       ; preds = %land.lhs.true236, %lor.lhs.false230
  %92 = load i32, i32* %imode.addr, align 4, !dbg !2996
  %93 = load i32, i32* %omode.addr, align 4, !dbg !2996
  %94 = load i32, i32* %regno, align 4, !dbg !2996
  %idxprom244 = zext i32 %94 to i64, !dbg !2996
  %arrayidx245 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom244, !dbg !2996
  %95 = load i32, i32* %arrayidx245, align 4, !dbg !2996
  %call246 = call zeroext i8 @ix86_cannot_change_mode_class(i32 %92, i32 %93, i32 %95), !dbg !2996
  %tobool247 = icmp ne i8 %call246, 0, !dbg !2996
  br i1 %tobool247, label %if.then248, label %if.end249, !dbg !2998

if.then248:                                       ; preds = %if.else243
  store i8 0, i8* %retval, align 1, !dbg !2999
  br label %return, !dbg !2999

if.end249:                                        ; preds = %if.else243
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %if.then242
  %96 = load i32, i32* %regno, align 4, !dbg !3000
  %97 = load i32, i32* %imode.addr, align 4, !dbg !3001
  %98 = load i32, i32* %offset.addr, align 4, !dbg !3002
  %99 = load i32, i32* %omode.addr, align 4, !dbg !3003
  %call251 = call zeroext i8 @subreg_offset_representable_p(i32 %96, i32 %97, i32 %98, i32 %99), !dbg !3004
  store i8 %call251, i8* %retval, align 1, !dbg !3005
  br label %return, !dbg !3005

if.end252:                                        ; preds = %land.lhs.true184, %land.lhs.true181, %if.end180
  %100 = load i32, i32* %osize, align 4, !dbg !3006
  %cmp253 = icmp ult i32 %100, 4, !dbg !3008
  br i1 %cmp253, label %if.then255, label %if.end264, !dbg !3009

if.then255:                                       ; preds = %if.end252
  call void @llvm.dbg.declare(metadata i32* %wmode, metadata !3010, metadata !DIExpression()), !dbg !3012
  %101 = load i32, i32* %isize, align 4, !dbg !3013
  %cmp256 = icmp ugt i32 %101, 4, !dbg !3014
  br i1 %cmp256, label %cond.true, label %cond.false, !dbg !3013

cond.true:                                        ; preds = %if.then255
  %102 = load i32, i32* @word_mode, align 4, !dbg !3015
  br label %cond.end, !dbg !3013

cond.false:                                       ; preds = %if.then255
  %103 = load i32, i32* %imode.addr, align 4, !dbg !3016
  br label %cond.end, !dbg !3013

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %102, %cond.true ], [ %103, %cond.false ], !dbg !3013
  store i32 %cond, i32* %wmode, align 4, !dbg !3012
  call void @llvm.dbg.declare(metadata i32* %low_off, metadata !3017, metadata !DIExpression()), !dbg !3018
  %104 = load i32, i32* %omode.addr, align 4, !dbg !3019
  %105 = load i32, i32* %wmode, align 4, !dbg !3020
  %call258 = call i32 @subreg_lowpart_offset(i32 %104, i32 %105), !dbg !3021
  store i32 %call258, i32* %low_off, align 4, !dbg !3018
  %106 = load i32, i32* %offset.addr, align 4, !dbg !3022
  %rem259 = urem i32 %106, 4, !dbg !3024
  %107 = load i32, i32* %low_off, align 4, !dbg !3025
  %cmp260 = icmp ne i32 %rem259, %107, !dbg !3026
  br i1 %cmp260, label %if.then262, label %if.end263, !dbg !3027

if.then262:                                       ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !3028
  br label %return, !dbg !3028

if.end263:                                        ; preds = %cond.end
  br label %if.end264, !dbg !3029

if.end264:                                        ; preds = %if.end263, %if.end252
  store i8 1, i8* %retval, align 1, !dbg !3030
  br label %return, !dbg !3030

return:                                           ; preds = %if.end264, %if.then262, %if.end250, %if.then248, %if.then176, %if.then167, %if.then9, %if.then
  %108 = load i8, i8* %retval, align 1, !dbg !3031
  ret i8 %108, !dbg !3031
}

declare dso_local zeroext i8 @ix86_cannot_change_mode_class(i32, i32, i32) #2

declare dso_local zeroext i8 @subreg_offset_representable_p(i32, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @subreg_lowpart_offset(i32 %outermode, i32 %innermode) #0 !dbg !3032 {
entry:
  %outermode.addr = alloca i32, align 4
  %innermode.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %difference = alloca i32, align 4
  store i32 %outermode, i32* %outermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outermode.addr, metadata !3035, metadata !DIExpression()), !dbg !3036
  store i32 %innermode, i32* %innermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %innermode.addr, metadata !3037, metadata !DIExpression()), !dbg !3038
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3039, metadata !DIExpression()), !dbg !3040
  store i32 0, i32* %offset, align 4, !dbg !3040
  call void @llvm.dbg.declare(metadata i32* %difference, metadata !3041, metadata !DIExpression()), !dbg !3042
  %0 = load i32, i32* %innermode.addr, align 4, !dbg !3043
  %idxprom = zext i32 %0 to i64, !dbg !3043
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3043
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3043
  %conv = zext i8 %1 to i16, !dbg !3043
  %conv1 = zext i16 %conv to i32, !dbg !3043
  %2 = load i32, i32* %outermode.addr, align 4, !dbg !3044
  %idxprom2 = zext i32 %2 to i64, !dbg !3044
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !3044
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !3044
  %conv4 = zext i8 %3 to i16, !dbg !3044
  %conv5 = zext i16 %conv4 to i32, !dbg !3044
  %sub = sub nsw i32 %conv1, %conv5, !dbg !3045
  store i32 %sub, i32* %difference, align 4, !dbg !3042
  %4 = load i32, i32* %difference, align 4, !dbg !3046
  %cmp = icmp sgt i32 %4, 0, !dbg !3048
  br i1 %cmp, label %if.then, label %if.end, !dbg !3049

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !3050

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %offset, align 4, !dbg !3052
  ret i32 %5, !dbg !3053
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_SUBREG(i32 %mode, %struct.rtx_def* %reg, i32 %offset) #0 !dbg !3054 {
entry:
  %mode.addr = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3057, metadata !DIExpression()), !dbg !3058
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3059, metadata !DIExpression()), !dbg !3060
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3061, metadata !DIExpression()), !dbg !3062
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3063
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3063
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3063
  %bf.load = load i32, i32* %2, align 8, !dbg !3063
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3063
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3063
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3063
  %4 = load i32, i32* %offset.addr, align 4, !dbg !3063
  %call = call zeroext i8 @validate_subreg(i32 %0, i32 %bf.clear, %struct.rtx_def* %3, i32 %4), !dbg !3063
  %tobool = icmp ne i8 %call, 0, !dbg !3063
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3063

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 776, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3063
  br label %cond.end, !dbg !3063

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3063
  %5 = load i32, i32* %mode.addr, align 4, !dbg !3064
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3064
  %7 = load i32, i32* %offset.addr, align 4, !dbg !3064
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ei_stat(i32 39, i32 %5, %struct.rtx_def* %6, i32 %7), !dbg !3064
  ret %struct.rtx_def* %call1, !dbg !3065
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ei_stat(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_lowpart_SUBREG(i32 %mode, %struct.rtx_def* %reg) #0 !dbg !3066 {
entry:
  %mode.addr = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %inmode = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3067, metadata !DIExpression()), !dbg !3068
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3069, metadata !DIExpression()), !dbg !3070
  call void @llvm.dbg.declare(metadata i32* %inmode, metadata !3071, metadata !DIExpression()), !dbg !3072
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3073
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3073
  %bf.load = load i32, i32* %1, align 8, !dbg !3073
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3073
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3073
  store i32 %bf.clear, i32* %inmode, align 4, !dbg !3074
  %2 = load i32, i32* %inmode, align 4, !dbg !3075
  %cmp = icmp eq i32 %2, 0, !dbg !3077
  br i1 %cmp, label %if.then, label %if.end, !dbg !3078

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !3079
  store i32 %3, i32* %inmode, align 4, !dbg !3080
  br label %if.end, !dbg !3081

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !3082
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3083
  %6 = load i32, i32* %mode.addr, align 4, !dbg !3084
  %7 = load i32, i32* %inmode, align 4, !dbg !3085
  %call = call i32 @subreg_lowpart_offset(i32 %6, i32 %7), !dbg !3086
  %call1 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %4, %struct.rtx_def* %5, i32 %call), !dbg !3087
  ret %struct.rtx_def* %call1, !dbg !3088
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtvec_def* @gen_rtvec(i32 %n, ...) #0 !dbg !3089 {
entry:
  %retval = alloca %struct.rtvec_def*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %rt_val = alloca %struct.rtvec_def*, align 8
  %p = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3092, metadata !DIExpression()), !dbg !3093
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3094, metadata !DIExpression()), !dbg !3095
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %rt_val, metadata !3096, metadata !DIExpression()), !dbg !3097
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %p, metadata !3098, metadata !DIExpression()), !dbg !3111
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !3112
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !3112
  call void @llvm.va_start(i8* %arraydecay1), !dbg !3112
  %0 = load i32, i32* %n.addr, align 4, !dbg !3113
  %cmp = icmp eq i32 %0, 0, !dbg !3115
  br i1 %cmp, label %if.then, label %if.end, !dbg !3116

if.then:                                          ; preds = %entry
  store %struct.rtvec_def* null, %struct.rtvec_def** %retval, align 8, !dbg !3117
  br label %return, !dbg !3117

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !3118
  %call = call %struct.rtvec_def* @rtvec_alloc(i32 %1), !dbg !3119
  store %struct.rtvec_def* %call, %struct.rtvec_def** %rt_val, align 8, !dbg !3120
  store i32 0, i32* %i, align 4, !dbg !3121
  br label %for.cond, !dbg !3123

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !3124
  %3 = load i32, i32* %n.addr, align 4, !dbg !3126
  %cmp2 = icmp slt i32 %2, %3, !dbg !3127
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3128

for.body:                                         ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !3129
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 0, !dbg !3129
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !3129
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !3129
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !3129

vaarg.in_reg:                                     ; preds = %for.body
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 3, !dbg !3129
  %reg_save_area = load i8*, i8** %4, align 16, !dbg !3129
  %5 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !3129
  %6 = bitcast i8* %5 to %struct.rtx_def**, !dbg !3129
  %7 = add i32 %gp_offset, 8, !dbg !3129
  store i32 %7, i32* %gp_offset_p, align 16, !dbg !3129
  br label %vaarg.end, !dbg !3129

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 2, !dbg !3129
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !3129
  %8 = bitcast i8* %overflow_arg_area to %struct.rtx_def**, !dbg !3129
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !3129
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !3129
  br label %vaarg.end, !dbg !3129

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct.rtx_def** [ %6, %vaarg.in_reg ], [ %8, %vaarg.in_mem ], !dbg !3129
  %9 = load %struct.rtx_def*, %struct.rtx_def** %vaarg.addr, align 8, !dbg !3129
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_val, align 8, !dbg !3130
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 1, !dbg !3131
  %11 = load i32, i32* %i, align 4, !dbg !3132
  %idxprom = sext i32 %11 to i64, !dbg !3130
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !3130
  store %struct.rtx_def* %9, %struct.rtx_def** %arrayidx, align 8, !dbg !3133
  br label %for.inc, !dbg !3130

for.inc:                                          ; preds = %vaarg.end
  %12 = load i32, i32* %i, align 4, !dbg !3134
  %inc = add nsw i32 %12, 1, !dbg !3134
  store i32 %inc, i32* %i, align 4, !dbg !3134
  br label %for.cond, !dbg !3135, !llvm.loop !3136

for.end:                                          ; preds = %for.cond
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !3138
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*, !dbg !3138
  call void @llvm.va_end(i8* %arraydecay45), !dbg !3138
  %13 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_val, align 8, !dbg !3139
  store %struct.rtvec_def* %13, %struct.rtvec_def** %retval, align 8, !dbg !3140
  br label %return, !dbg !3140

return:                                           ; preds = %for.end, %if.then
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %retval, align 8, !dbg !3141
  ret %struct.rtvec_def* %14, !dbg !3141
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

declare dso_local %struct.rtvec_def* @rtvec_alloc(i32) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtvec_def* @gen_rtvec_v(i32 %n, %struct.rtx_def** %argp) #0 !dbg !3142 {
entry:
  %retval = alloca %struct.rtvec_def*, align 8
  %n.addr = alloca i32, align 4
  %argp.addr = alloca %struct.rtx_def**, align 8
  %i = alloca i32, align 4
  %rt_val = alloca %struct.rtvec_def*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3145, metadata !DIExpression()), !dbg !3146
  store %struct.rtx_def** %argp, %struct.rtx_def*** %argp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %argp.addr, metadata !3147, metadata !DIExpression()), !dbg !3148
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3149, metadata !DIExpression()), !dbg !3150
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %rt_val, metadata !3151, metadata !DIExpression()), !dbg !3152
  %0 = load i32, i32* %n.addr, align 4, !dbg !3153
  %cmp = icmp eq i32 %0, 0, !dbg !3155
  br i1 %cmp, label %if.then, label %if.end, !dbg !3156

if.then:                                          ; preds = %entry
  store %struct.rtvec_def* null, %struct.rtvec_def** %retval, align 8, !dbg !3157
  br label %return, !dbg !3157

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !3158
  %call = call %struct.rtvec_def* @rtvec_alloc(i32 %1), !dbg !3159
  store %struct.rtvec_def* %call, %struct.rtvec_def** %rt_val, align 8, !dbg !3160
  store i32 0, i32* %i, align 4, !dbg !3161
  br label %for.cond, !dbg !3163

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !3164
  %3 = load i32, i32* %n.addr, align 4, !dbg !3166
  %cmp1 = icmp slt i32 %2, %3, !dbg !3167
  br i1 %cmp1, label %for.body, label %for.end, !dbg !3168

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %argp.addr, align 8, !dbg !3169
  %incdec.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i32 1, !dbg !3169
  store %struct.rtx_def** %incdec.ptr, %struct.rtx_def*** %argp.addr, align 8, !dbg !3169
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8, !dbg !3170
  %6 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_val, align 8, !dbg !3171
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %6, i32 0, i32 1, !dbg !3172
  %7 = load i32, i32* %i, align 4, !dbg !3173
  %idxprom = sext i32 %7 to i64, !dbg !3171
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !3171
  store %struct.rtx_def* %5, %struct.rtx_def** %arrayidx, align 8, !dbg !3174
  br label %for.inc, !dbg !3171

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !3175
  %inc = add nsw i32 %8, 1, !dbg !3175
  store i32 %inc, i32* %i, align 4, !dbg !3175
  br label %for.cond, !dbg !3176, !llvm.loop !3177

for.end:                                          ; preds = %for.cond
  %9 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_val, align 8, !dbg !3179
  store %struct.rtvec_def* %9, %struct.rtvec_def** %retval, align 8, !dbg !3180
  br label %return, !dbg !3180

return:                                           ; preds = %for.end, %if.then
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %retval, align 8, !dbg !3181
  ret %struct.rtvec_def* %10, !dbg !3181
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @byte_lowpart_offset(i32 %outer_mode, i32 %inner_mode) #0 !dbg !3182 {
entry:
  %retval = alloca i32, align 4
  %outer_mode.addr = alloca i32, align 4
  %inner_mode.addr = alloca i32, align 4
  store i32 %outer_mode, i32* %outer_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outer_mode.addr, metadata !3185, metadata !DIExpression()), !dbg !3186
  store i32 %inner_mode, i32* %inner_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %inner_mode.addr, metadata !3187, metadata !DIExpression()), !dbg !3188
  %0 = load i32, i32* %outer_mode.addr, align 4, !dbg !3189
  %idxprom = zext i32 %0 to i64, !dbg !3189
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3189
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3189
  %conv = zext i8 %1 to i16, !dbg !3189
  %conv1 = zext i16 %conv to i32, !dbg !3189
  %2 = load i32, i32* %inner_mode.addr, align 4, !dbg !3191
  %idxprom2 = zext i32 %2 to i64, !dbg !3191
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !3191
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !3191
  %conv4 = zext i8 %3 to i16, !dbg !3191
  %conv5 = zext i16 %conv4 to i32, !dbg !3191
  %cmp = icmp slt i32 %conv1, %conv5, !dbg !3192
  br i1 %cmp, label %if.then, label %if.else, !dbg !3193

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %outer_mode.addr, align 4, !dbg !3194
  %5 = load i32, i32* %inner_mode.addr, align 4, !dbg !3195
  %call = call i32 @subreg_lowpart_offset(i32 %4, i32 %5), !dbg !3196
  store i32 %call, i32* %retval, align 4, !dbg !3197
  br label %return, !dbg !3197

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %inner_mode.addr, align 4, !dbg !3198
  %7 = load i32, i32* %outer_mode.addr, align 4, !dbg !3199
  %call7 = call i32 @subreg_lowpart_offset(i32 %6, i32 %7), !dbg !3200
  %sub = sub i32 0, %call7, !dbg !3201
  store i32 %sub, i32* %retval, align 4, !dbg !3202
  br label %return, !dbg !3202

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3203
  ret i32 %8, !dbg !3203
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_reg_rtx(i32 %mode) #0 !dbg !3204 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %val = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %min_align = alloca i32, align 4
  %realpart = alloca %struct.rtx_def*, align 8
  %imagpart = alloca %struct.rtx_def*, align 8
  %partmode = alloca i32, align 4
  %old_size = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %new1 = alloca %struct.rtx_def**, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3207, metadata !DIExpression()), !dbg !3208
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !3209, metadata !DIExpression()), !dbg !3210
  call void @llvm.dbg.declare(metadata i32* %align, metadata !3211, metadata !DIExpression()), !dbg !3212
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3213
  %call = call i32 @get_mode_alignment(i32 %0), !dbg !3213
  store i32 %call, i32* %align, align 4, !dbg !3212
  %1 = load i32, i32* @reload_in_progress, align 4, !dbg !3214
  %tobool = icmp ne i32 %1, 0, !dbg !3214
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !3214

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @reload_completed, align 4, !dbg !3214
  %tobool1 = icmp ne i32 %2, 0, !dbg !3214
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3214

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 863, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3214
  br label %cond.end, !dbg !3214

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3214
  %3 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !3215
  %4 = load i32, i32* %align, align 4, !dbg !3217
  %cmp = icmp ult i32 %3, %4, !dbg !3218
  br i1 %cmp, label %land.lhs.true2, label %if.end7, !dbg !3219

land.lhs.true2:                                   ; preds = %cond.end
  %5 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !3220
  %tobool3 = icmp ne i8 %5, 0, !dbg !3221
  br i1 %tobool3, label %if.end7, label %if.then, !dbg !3222

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i32* %min_align, metadata !3223, metadata !DIExpression()), !dbg !3225
  %6 = load i32, i32* %mode.addr, align 4, !dbg !3226
  %7 = load i32, i32* %align, align 4, !dbg !3226
  %call4 = call i32 @ix86_minimum_alignment(%union.tree_node* null, i32 %6, i32 %7), !dbg !3226
  store i32 %call4, i32* %min_align, align 4, !dbg !3225
  %8 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !3227
  %9 = load i32, i32* %min_align, align 4, !dbg !3229
  %cmp5 = icmp ult i32 %8, %9, !dbg !3230
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !3231

if.then6:                                         ; preds = %if.then
  %10 = load i32, i32* %min_align, align 4, !dbg !3232
  store i32 %10, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !3233
  br label %if.end, !dbg !3234

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end7, !dbg !3235

if.end7:                                          ; preds = %if.end, %land.lhs.true2, %cond.end
  %11 = load i32, i32* @generating_concat_p, align 4, !dbg !3236
  %tobool8 = icmp ne i32 %11, 0, !dbg !3236
  br i1 %tobool8, label %land.lhs.true9, label %if.end24, !dbg !3238

land.lhs.true9:                                   ; preds = %if.end7
  %12 = load i32, i32* %mode.addr, align 4, !dbg !3239
  %idxprom = zext i32 %12 to i64, !dbg !3239
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3239
  %13 = load i8, i8* %arrayidx, align 1, !dbg !3239
  %conv = zext i8 %13 to i32, !dbg !3239
  %cmp10 = icmp eq i32 %conv, 11, !dbg !3240
  br i1 %cmp10, label %if.then17, label %lor.lhs.false, !dbg !3241

lor.lhs.false:                                    ; preds = %land.lhs.true9
  %14 = load i32, i32* %mode.addr, align 4, !dbg !3242
  %idxprom12 = zext i32 %14 to i64, !dbg !3242
  %arrayidx13 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom12, !dbg !3242
  %15 = load i8, i8* %arrayidx13, align 1, !dbg !3242
  %conv14 = zext i8 %15 to i32, !dbg !3242
  %cmp15 = icmp eq i32 %conv14, 10, !dbg !3243
  br i1 %cmp15, label %if.then17, label %if.end24, !dbg !3244

if.then17:                                        ; preds = %lor.lhs.false, %land.lhs.true9
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %realpart, metadata !3245, metadata !DIExpression()), !dbg !3247
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %imagpart, metadata !3248, metadata !DIExpression()), !dbg !3249
  call void @llvm.dbg.declare(metadata i32* %partmode, metadata !3250, metadata !DIExpression()), !dbg !3251
  %16 = load i32, i32* %mode.addr, align 4, !dbg !3252
  %idxprom18 = zext i32 %16 to i64, !dbg !3252
  %arrayidx19 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom18, !dbg !3252
  %17 = load i8, i8* %arrayidx19, align 1, !dbg !3252
  %conv20 = zext i8 %17 to i32, !dbg !3252
  store i32 %conv20, i32* %partmode, align 4, !dbg !3251
  %18 = load i32, i32* %partmode, align 4, !dbg !3253
  %call21 = call %struct.rtx_def* @gen_reg_rtx(i32 %18), !dbg !3254
  store %struct.rtx_def* %call21, %struct.rtx_def** %realpart, align 8, !dbg !3255
  %19 = load i32, i32* %partmode, align 4, !dbg !3256
  %call22 = call %struct.rtx_def* @gen_reg_rtx(i32 %19), !dbg !3257
  store %struct.rtx_def* %call22, %struct.rtx_def** %imagpart, align 8, !dbg !3258
  %20 = load i32, i32* %mode.addr, align 4, !dbg !3259
  %21 = load %struct.rtx_def*, %struct.rtx_def** %realpart, align 8, !dbg !3259
  %22 = load %struct.rtx_def*, %struct.rtx_def** %imagpart, align 8, !dbg !3259
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %20, %struct.rtx_def* %21, %struct.rtx_def* %22), !dbg !3259
  store %struct.rtx_def* %call23, %struct.rtx_def** %retval, align 8, !dbg !3260
  br label %return, !dbg !3260

if.end24:                                         ; preds = %lor.lhs.false, %if.end7
  %23 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !3261
  %24 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !3263
  %cmp25 = icmp eq i32 %23, %24, !dbg !3264
  br i1 %cmp25, label %if.then27, label %if.end41, !dbg !3265

if.then27:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata i32* %old_size, metadata !3266, metadata !DIExpression()), !dbg !3268
  %25 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !3269
  store i32 %25, i32* %old_size, align 4, !dbg !3268
  call void @llvm.dbg.declare(metadata i8** %tmp, metadata !3270, metadata !DIExpression()), !dbg !3271
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %new1, metadata !3272, metadata !DIExpression()), !dbg !3273
  %26 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3274
  %27 = load i32, i32* %old_size, align 4, !dbg !3274
  %mul = mul nsw i32 %27, 2, !dbg !3274
  %conv28 = sext i32 %mul to i64, !dbg !3274
  %mul29 = mul i64 1, %conv28, !dbg !3274
  %call30 = call i8* @xrealloc(i8* %26, i64 %mul29), !dbg !3274
  store i8* %call30, i8** %tmp, align 8, !dbg !3275
  %28 = load i8*, i8** %tmp, align 8, !dbg !3276
  %29 = load i32, i32* %old_size, align 4, !dbg !3277
  %idx.ext = sext i32 %29 to i64, !dbg !3278
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext, !dbg !3278
  %30 = load i32, i32* %old_size, align 4, !dbg !3279
  %conv31 = sext i32 %30 to i64, !dbg !3279
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 0, i64 %conv31, i1 false), !dbg !3280
  %31 = load i8*, i8** %tmp, align 8, !dbg !3281
  store i8* %31, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3282
  %32 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3283
  %33 = bitcast %struct.rtx_def** %32 to i8*, !dbg !3283
  %34 = load i32, i32* %old_size, align 4, !dbg !3283
  %mul32 = mul nsw i32 %34, 2, !dbg !3283
  %conv33 = sext i32 %mul32 to i64, !dbg !3283
  %mul34 = mul i64 %conv33, 8, !dbg !3283
  %call35 = call i8* @ggc_realloc_stat(i8* %33, i64 %mul34), !dbg !3283
  %35 = bitcast i8* %call35 to %struct.rtx_def**, !dbg !3283
  store %struct.rtx_def** %35, %struct.rtx_def*** %new1, align 8, !dbg !3284
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %new1, align 8, !dbg !3285
  %37 = load i32, i32* %old_size, align 4, !dbg !3286
  %idx.ext36 = sext i32 %37 to i64, !dbg !3287
  %add.ptr37 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 %idx.ext36, !dbg !3287
  %38 = bitcast %struct.rtx_def** %add.ptr37 to i8*, !dbg !3288
  %39 = load i32, i32* %old_size, align 4, !dbg !3289
  %conv38 = sext i32 %39 to i64, !dbg !3289
  %mul39 = mul i64 %conv38, 8, !dbg !3290
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 %mul39, i1 false), !dbg !3288
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %new1, align 8, !dbg !3291
  store %struct.rtx_def** %40, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3292
  %41 = load i32, i32* %old_size, align 4, !dbg !3293
  %mul40 = mul nsw i32 %41, 2, !dbg !3294
  store i32 %mul40, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !3295
  br label %if.end41, !dbg !3296

if.end41:                                         ; preds = %if.then27, %if.end24
  %42 = load i32, i32* %mode.addr, align 4, !dbg !3297
  %43 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !3298
  %call42 = call %struct.rtx_def* @gen_raw_REG(i32 %42, i32 %43), !dbg !3299
  store %struct.rtx_def* %call42, %struct.rtx_def** %val, align 8, !dbg !3300
  %44 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !3301
  %45 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3302
  %46 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !3303
  %inc = add nsw i32 %46, 1, !dbg !3303
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !3303
  %idxprom43 = sext i32 %46 to i64, !dbg !3302
  %arrayidx44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 %idxprom43, !dbg !3302
  store %struct.rtx_def* %44, %struct.rtx_def** %arrayidx44, align 8, !dbg !3304
  %47 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !3305
  store %struct.rtx_def* %47, %struct.rtx_def** %retval, align 8, !dbg !3306
  br label %return, !dbg !3306

return:                                           ; preds = %if.end41, %if.then17
  %48 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3307
  ret %struct.rtx_def* %48, !dbg !3307
}

declare dso_local i32 @get_mode_alignment(i32) #2

declare dso_local i32 @ix86_minimum_alignment(%union.tree_node*, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i8* @ggc_realloc_stat(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_REG_offset(%struct.rtx_def* %reg, i32 %mode, i32 %regno, i32 %offset) #0 !dbg !3308 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3311, metadata !DIExpression()), !dbg !3312
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3313, metadata !DIExpression()), !dbg !3314
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3315, metadata !DIExpression()), !dbg !3316
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3317, metadata !DIExpression()), !dbg !3318
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !3319, metadata !DIExpression()), !dbg !3320
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3321
  %1 = load i32, i32* %regno.addr, align 4, !dbg !3322
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %0, i32 %1), !dbg !3323
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !3320
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3324
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3325
  %4 = load i32, i32* %offset.addr, align 4, !dbg !3326
  call void @update_reg_offset(%struct.rtx_def* %2, %struct.rtx_def* %3, i32 %4), !dbg !3327
  %5 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3328
  ret %struct.rtx_def* %5, !dbg !3329
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_reg_offset(%struct.rtx_def* %new_rtx, %struct.rtx_def* %reg, i32 %offset) #0 !dbg !3330 {
entry:
  %new_rtx.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.rtx_def* %new_rtx, %struct.rtx_def** %new_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx.addr, metadata !3333, metadata !DIExpression()), !dbg !3334
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3335, metadata !DIExpression()), !dbg !3336
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3337, metadata !DIExpression()), !dbg !3338
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3339
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3339
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3339
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3339
  %rt_reg = bitcast %union.rtunion_def* %arrayidx to %struct.reg_attrs**, !dbg !3339
  %1 = load %struct.reg_attrs*, %struct.reg_attrs** %rt_reg, align 8, !dbg !3339
  %cmp = icmp eq %struct.reg_attrs* %1, null, !dbg !3339
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3339

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !3339

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3339
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3339
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3339
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !3339
  %rt_reg4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.reg_attrs**, !dbg !3339
  %3 = load %struct.reg_attrs*, %struct.reg_attrs** %rt_reg4, align 8, !dbg !3339
  %decl = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %3, i32 0, i32 0, !dbg !3339
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3339
  br label %cond.end, !dbg !3339

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %4, %cond.false ], !dbg !3339
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3340
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3340
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !3340
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 2, !dbg !3340
  %rt_reg8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.reg_attrs**, !dbg !3340
  %6 = load %struct.reg_attrs*, %struct.reg_attrs** %rt_reg8, align 8, !dbg !3340
  %cmp9 = icmp eq %struct.reg_attrs* %6, null, !dbg !3340
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !3340

cond.true10:                                      ; preds = %cond.end
  br label %cond.end17, !dbg !3340

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3340
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3340
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !3340
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 2, !dbg !3340
  %rt_reg15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.reg_attrs**, !dbg !3340
  %8 = load %struct.reg_attrs*, %struct.reg_attrs** %rt_reg15, align 8, !dbg !3340
  %offset16 = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %8, i32 0, i32 1, !dbg !3340
  %9 = load i64, i64* %offset16, align 8, !dbg !3340
  br label %cond.end17, !dbg !3340

cond.end17:                                       ; preds = %cond.false11, %cond.true10
  %cond18 = phi i64 [ 0, %cond.true10 ], [ %9, %cond.false11 ], !dbg !3340
  %10 = load i32, i32* %offset.addr, align 4, !dbg !3341
  %conv = sext i32 %10 to i64, !dbg !3341
  %add = add nsw i64 %cond18, %conv, !dbg !3342
  %conv19 = trunc i64 %add to i32, !dbg !3340
  %call = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %cond, i32 %conv19), !dbg !3343
  %11 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !3344
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3344
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3344
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 2, !dbg !3344
  %rt_reg23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.reg_attrs**, !dbg !3344
  store %struct.reg_attrs* %call, %struct.reg_attrs** %rt_reg23, align 8, !dbg !3345
  ret void, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_reg_rtx_offset(%struct.rtx_def* %reg, i32 %mode, i32 %offset) #0 !dbg !3347 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3352, metadata !DIExpression()), !dbg !3353
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3354, metadata !DIExpression()), !dbg !3355
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !3356, metadata !DIExpression()), !dbg !3357
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3358
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %0), !dbg !3359
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !3357
  %1 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3360
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3361
  %3 = load i32, i32* %offset.addr, align 4, !dbg !3362
  call void @update_reg_offset(%struct.rtx_def* %1, %struct.rtx_def* %2, i32 %3), !dbg !3363
  %4 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3364
  ret %struct.rtx_def* %4, !dbg !3365
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @adjust_reg_mode(%struct.rtx_def* %reg, i32 %mode) #0 !dbg !3366 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3371, metadata !DIExpression()), !dbg !3372
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3373
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3374
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3375
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3376
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3376
  %bf.load = load i32, i32* %4, align 8, !dbg !3376
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3376
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3376
  %call = call i32 @byte_lowpart_offset(i32 %2, i32 %bf.clear), !dbg !3377
  call void @update_reg_offset(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 %call), !dbg !3378
  %5 = load i32, i32* %mode.addr, align 4, !dbg !3379
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3379
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !3379
  %bf.load1 = load i32, i32* %7, align 8, !dbg !3379
  %bf.value = and i32 %5, 255, !dbg !3379
  %bf.shl = shl i32 %bf.value, 16, !dbg !3379
  %bf.clear2 = and i32 %bf.load1, -16711681, !dbg !3379
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !3379
  store i32 %bf.set, i32* %7, align 8, !dbg !3379
  ret void, !dbg !3380
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_reg_attrs_from_value(%struct.rtx_def* %reg, %struct.rtx_def* %x) #0 !dbg !3381 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %offset = alloca i32, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3386, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3388, metadata !DIExpression()), !dbg !3389
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3390
  %call = call i32 @rhs_regno(%struct.rtx_def* %0), !dbg !3390
  %cmp = icmp ult i32 %call, 53, !dbg !3390
  br i1 %cmp, label %if.then, label %if.end, !dbg !3392

if.then:                                          ; preds = %entry
  br label %if.end94, !dbg !3393

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3394
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3394
  %bf.load = load i32, i32* %2, align 8, !dbg !3394
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3394
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3394
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3395
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3395
  %bf.load1 = load i32, i32* %4, align 8, !dbg !3395
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !3395
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !3395
  %call4 = call i32 @byte_lowpart_offset(i32 %bf.clear, i32 %bf.clear3), !dbg !3396
  store i32 %call4, i32* %offset, align 4, !dbg !3397
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3398
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3398
  %bf.load5 = load i32, i32* %6, align 8, !dbg !3398
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !3398
  %cmp7 = icmp eq i32 %bf.clear6, 43, !dbg !3398
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !3400

if.then8:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3401
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3401
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3401
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3401
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !3401
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !3401
  %cmp9 = icmp eq %struct.mem_attrs* %8, null, !dbg !3401
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !3404

cond.true:                                        ; preds = %if.then8
  br i1 false, label %land.lhs.true, label %if.end65, !dbg !3401

cond.false:                                       ; preds = %if.then8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3401
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !3401
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !3401
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !3401
  %rt_mem13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.mem_attrs**, !dbg !3401
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem13, align 8, !dbg !3401
  %offset14 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %10, i32 0, i32 1, !dbg !3401
  %11 = load %struct.rtx_def*, %struct.rtx_def** %offset14, align 8, !dbg !3401
  %tobool = icmp ne %struct.rtx_def* %11, null, !dbg !3401
  br i1 %tobool, label %land.lhs.true, label %if.end65, !dbg !3404

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3405
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3405
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !3405
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !3405
  %rt_mem18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.mem_attrs**, !dbg !3405
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem18, align 8, !dbg !3405
  %cmp19 = icmp eq %struct.mem_attrs* %13, null, !dbg !3405
  br i1 %cmp19, label %cond.true20, label %cond.false21, !dbg !3405

cond.true20:                                      ; preds = %land.lhs.true
  br label %cond.end, !dbg !3405

cond.false21:                                     ; preds = %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3405
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !3405
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !3405
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !3405
  %rt_mem25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.mem_attrs**, !dbg !3405
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem25, align 8, !dbg !3405
  %offset26 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %15, i32 0, i32 1, !dbg !3405
  %16 = load %struct.rtx_def*, %struct.rtx_def** %offset26, align 8, !dbg !3405
  br label %cond.end, !dbg !3405

cond.end:                                         ; preds = %cond.false21, %cond.true20
  %cond = phi %struct.rtx_def* [ null, %cond.true20 ], [ %16, %cond.false21 ], !dbg !3405
  %17 = bitcast %struct.rtx_def* %cond to i32*, !dbg !3405
  %bf.load27 = load i32, i32* %17, align 8, !dbg !3405
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !3405
  %cmp29 = icmp eq i32 %bf.clear28, 30, !dbg !3405
  br i1 %cmp29, label %if.then30, label %if.end65, !dbg !3406

if.then30:                                        ; preds = %cond.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3407
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !3407
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !3407
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !3407
  %rt_mem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**, !dbg !3407
  %19 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem34, align 8, !dbg !3407
  %cmp35 = icmp eq %struct.mem_attrs* %19, null, !dbg !3407
  br i1 %cmp35, label %cond.true36, label %cond.false37, !dbg !3407

cond.true36:                                      ; preds = %if.then30
  br label %cond.end42, !dbg !3407

cond.false37:                                     ; preds = %if.then30
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3407
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3407
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !3407
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 1, !dbg !3407
  %rt_mem41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.mem_attrs**, !dbg !3407
  %21 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem41, align 8, !dbg !3407
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %21, i32 0, i32 0, !dbg !3407
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3407
  br label %cond.end42, !dbg !3407

cond.end42:                                       ; preds = %cond.false37, %cond.true36
  %cond43 = phi %union.tree_node* [ null, %cond.true36 ], [ %22, %cond.false37 ], !dbg !3407
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3408
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !3408
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !3408
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !3408
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !3408
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !3408
  %cmp48 = icmp eq %struct.mem_attrs* %24, null, !dbg !3408
  br i1 %cmp48, label %cond.true49, label %cond.false50, !dbg !3408

cond.true49:                                      ; preds = %cond.end42
  br label %cond.end56, !dbg !3408

cond.false50:                                     ; preds = %cond.end42
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3408
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !3408
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !3408
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 1, !dbg !3408
  %rt_mem54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.mem_attrs**, !dbg !3408
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem54, align 8, !dbg !3408
  %offset55 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %26, i32 0, i32 1, !dbg !3408
  %27 = load %struct.rtx_def*, %struct.rtx_def** %offset55, align 8, !dbg !3408
  br label %cond.end56, !dbg !3408

cond.end56:                                       ; preds = %cond.false50, %cond.true49
  %cond57 = phi %struct.rtx_def* [ null, %cond.true49 ], [ %27, %cond.false50 ], !dbg !3408
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond57, i32 0, i32 1, !dbg !3408
  %hwint = bitcast %union.u* %u58 to [1 x i64]*, !dbg !3408
  %arrayidx59 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3408
  %28 = load i64, i64* %arrayidx59, align 8, !dbg !3408
  %29 = load i32, i32* %offset, align 4, !dbg !3409
  %conv = sext i32 %29 to i64, !dbg !3409
  %add = add nsw i64 %28, %conv, !dbg !3410
  %conv60 = trunc i64 %add to i32, !dbg !3408
  %call61 = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %cond43, i32 %conv60), !dbg !3411
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3412
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !3412
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !3412
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 2, !dbg !3412
  %rt_reg = bitcast %union.rtunion_def* %arrayidx64 to %struct.reg_attrs**, !dbg !3412
  store %struct.reg_attrs* %call61, %struct.reg_attrs** %rt_reg, align 8, !dbg !3413
  br label %if.end65, !dbg !3412

if.end65:                                         ; preds = %cond.end56, %cond.end, %cond.false, %cond.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3414
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !3414
  %bf.load66 = load i32, i32* %32, align 8, !dbg !3414
  %bf.lshr67 = lshr i32 %bf.load66, 30, !dbg !3414
  %bf.clear68 = and i32 %bf.lshr67, 1, !dbg !3414
  %tobool69 = icmp ne i32 %bf.clear68, 0, !dbg !3414
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !3416

if.then70:                                        ; preds = %if.end65
  %33 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3417
  call void @mark_reg_pointer(%struct.rtx_def* %33, i32 0), !dbg !3418
  br label %if.end71, !dbg !3418

if.end71:                                         ; preds = %if.then70, %if.end65
  br label %if.end94, !dbg !3419

if.else:                                          ; preds = %if.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3420
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3420
  %bf.load72 = load i32, i32* %35, align 8, !dbg !3420
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !3420
  %cmp74 = icmp eq i32 %bf.clear73, 37, !dbg !3420
  br i1 %cmp74, label %if.then76, label %if.end93, !dbg !3422

if.then76:                                        ; preds = %if.else
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3423
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !3423
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !3423
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 2, !dbg !3423
  %rt_reg80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.reg_attrs**, !dbg !3423
  %37 = load %struct.reg_attrs*, %struct.reg_attrs** %rt_reg80, align 8, !dbg !3423
  %tobool81 = icmp ne %struct.reg_attrs* %37, null, !dbg !3423
  br i1 %tobool81, label %if.then82, label %if.end83, !dbg !3426

if.then82:                                        ; preds = %if.then76
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3427
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3428
  %40 = load i32, i32* %offset, align 4, !dbg !3429
  call void @update_reg_offset(%struct.rtx_def* %38, %struct.rtx_def* %39, i32 %40), !dbg !3430
  br label %if.end83, !dbg !3430

if.end83:                                         ; preds = %if.then82, %if.then76
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3431
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !3431
  %bf.load84 = load i32, i32* %42, align 8, !dbg !3431
  %bf.lshr85 = lshr i32 %bf.load84, 30, !dbg !3431
  %bf.clear86 = and i32 %bf.lshr85, 1, !dbg !3431
  %tobool87 = icmp ne i32 %bf.clear86, 0, !dbg !3431
  br i1 %tobool87, label %if.then88, label %if.end92, !dbg !3433

if.then88:                                        ; preds = %if.end83
  %43 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3434
  %44 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3435
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3435
  %call89 = call i32 @rhs_regno(%struct.rtx_def* %45), !dbg !3435
  %idxprom = zext i32 %call89 to i64, !dbg !3435
  %arrayidx90 = getelementptr inbounds i8, i8* %44, i64 %idxprom, !dbg !3435
  %46 = load i8, i8* %arrayidx90, align 1, !dbg !3435
  %conv91 = zext i8 %46 to i32, !dbg !3435
  call void @mark_reg_pointer(%struct.rtx_def* %43, i32 %conv91), !dbg !3436
  br label %if.end92, !dbg !3436

if.end92:                                         ; preds = %if.then88, %if.end83
  br label %if.end93, !dbg !3437

if.end93:                                         ; preds = %if.end92, %if.else
  br label %if.end94

if.end94:                                         ; preds = %if.then, %if.end93, %if.end71
  ret void, !dbg !3438
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %decl, i32 %offset) #0 !dbg !3439 {
entry:
  %retval = alloca %struct.reg_attrs*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i32, align 4
  %attrs = alloca %struct.reg_attrs, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3442, metadata !DIExpression()), !dbg !3443
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3444, metadata !DIExpression()), !dbg !3445
  call void @llvm.dbg.declare(metadata %struct.reg_attrs* %attrs, metadata !3446, metadata !DIExpression()), !dbg !3447
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3448, metadata !DIExpression()), !dbg !3449
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3450
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !3452
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3453

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %offset.addr, align 4, !dbg !3454
  %cmp1 = icmp eq i32 %1, 0, !dbg !3455
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3456

if.then:                                          ; preds = %land.lhs.true
  store %struct.reg_attrs* null, %struct.reg_attrs** %retval, align 8, !dbg !3457
  br label %return, !dbg !3457

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3458
  %decl2 = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %attrs, i32 0, i32 0, !dbg !3459
  store %union.tree_node* %2, %union.tree_node** %decl2, align 8, !dbg !3460
  %3 = load i32, i32* %offset.addr, align 4, !dbg !3461
  %conv = sext i32 %3 to i64, !dbg !3461
  %offset3 = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %attrs, i32 0, i32 1, !dbg !3462
  store i64 %conv, i64* %offset3, align 8, !dbg !3463
  %4 = load %struct.htab*, %struct.htab** @reg_attrs_htab, align 8, !dbg !3464
  %5 = bitcast %struct.reg_attrs* %attrs to i8*, !dbg !3465
  %call = call i8** @htab_find_slot(%struct.htab* %4, i8* %5, i32 1), !dbg !3466
  store i8** %call, i8*** %slot, align 8, !dbg !3467
  %6 = load i8**, i8*** %slot, align 8, !dbg !3468
  %7 = load i8*, i8** %6, align 8, !dbg !3470
  %cmp4 = icmp eq i8* %7, null, !dbg !3471
  br i1 %cmp4, label %if.then6, label %if.end8, !dbg !3472

if.then6:                                         ; preds = %if.end
  %call7 = call i8* @ggc_alloc_stat(i64 16), !dbg !3473
  %8 = load i8**, i8*** %slot, align 8, !dbg !3475
  store i8* %call7, i8** %8, align 8, !dbg !3476
  %9 = load i8**, i8*** %slot, align 8, !dbg !3477
  %10 = load i8*, i8** %9, align 8, !dbg !3478
  %11 = bitcast %struct.reg_attrs* %attrs to i8*, !dbg !3479
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 8 %11, i64 16, i1 false), !dbg !3479
  br label %if.end8, !dbg !3480

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i8**, i8*** %slot, align 8, !dbg !3481
  %13 = load i8*, i8** %12, align 8, !dbg !3482
  %14 = bitcast i8* %13 to %struct.reg_attrs*, !dbg !3483
  store %struct.reg_attrs* %14, %struct.reg_attrs** %retval, align 8, !dbg !3484
  br label %return, !dbg !3484

return:                                           ; preds = %if.end8, %if.then
  %15 = load %struct.reg_attrs*, %struct.reg_attrs** %retval, align 8, !dbg !3485
  ret %struct.reg_attrs* %15, !dbg !3485
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_reg_pointer(%struct.rtx_def* %reg, i32 %align) #0 !dbg !3486 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3489, metadata !DIExpression()), !dbg !3490
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !3491, metadata !DIExpression()), !dbg !3492
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3493
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3493
  %bf.load = load i32, i32* %1, align 8, !dbg !3493
  %bf.lshr = lshr i32 %bf.load, 30, !dbg !3493
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3493
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !3493
  br i1 %tobool, label %if.else, label %if.then, !dbg !3495

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3496
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3496
  %bf.load1 = load i32, i32* %3, align 8, !dbg !3498
  %bf.clear2 = and i32 %bf.load1, -1073741825, !dbg !3498
  %bf.set = or i32 %bf.clear2, 1073741824, !dbg !3498
  store i32 %bf.set, i32* %3, align 8, !dbg !3498
  %4 = load i32, i32* %align.addr, align 4, !dbg !3499
  %tobool3 = icmp ne i32 %4, 0, !dbg !3499
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !3501

if.then4:                                         ; preds = %if.then
  %5 = load i32, i32* %align.addr, align 4, !dbg !3502
  %conv = trunc i32 %5 to i8, !dbg !3502
  %6 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3503
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3503
  %call = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !3503
  %idxprom = zext i32 %call to i64, !dbg !3503
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !3503
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3504
  br label %if.end, !dbg !3503

if.end:                                           ; preds = %if.then4, %if.then
  br label %if.end17, !dbg !3505

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %align.addr, align 4, !dbg !3506
  %tobool5 = icmp ne i32 %8, 0, !dbg !3506
  br i1 %tobool5, label %land.lhs.true, label %if.end16, !dbg !3508

land.lhs.true:                                    ; preds = %if.else
  %9 = load i32, i32* %align.addr, align 4, !dbg !3509
  %10 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3510
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3510
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !3510
  %idxprom7 = zext i32 %call6 to i64, !dbg !3510
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i64 %idxprom7, !dbg !3510
  %12 = load i8, i8* %arrayidx8, align 1, !dbg !3510
  %conv9 = zext i8 %12 to i32, !dbg !3510
  %cmp = icmp slt i32 %9, %conv9, !dbg !3511
  br i1 %cmp, label %if.then11, label %if.end16, !dbg !3512

if.then11:                                        ; preds = %land.lhs.true
  %13 = load i32, i32* %align.addr, align 4, !dbg !3513
  %conv12 = trunc i32 %13 to i8, !dbg !3513
  %14 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !3514
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3514
  %call13 = call i32 @rhs_regno(%struct.rtx_def* %15), !dbg !3514
  %idxprom14 = zext i32 %call13 to i64, !dbg !3514
  %arrayidx15 = getelementptr inbounds i8, i8* %14, i64 %idxprom14, !dbg !3514
  store i8 %conv12, i8* %arrayidx15, align 1, !dbg !3515
  br label %if.end16, !dbg !3514

if.end16:                                         ; preds = %if.then11, %land.lhs.true, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  ret void, !dbg !3516
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def* %x) #0 !dbg !3517 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3518, metadata !DIExpression()), !dbg !3519
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !3520, metadata !DIExpression()), !dbg !3521
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3522
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3522
  %bf.load = load i32, i32* %1, align 8, !dbg !3522
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3522
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3522
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear), !dbg !3523
  store %struct.rtx_def* %call, %struct.rtx_def** %reg, align 8, !dbg !3521
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3524
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3525
  call void @set_reg_attrs_from_value(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !3526
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3527
  ret %struct.rtx_def* %4, !dbg !3528
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_reg_attrs_for_parm(%struct.rtx_def* %parm_rtx, %struct.rtx_def* %mem) #0 !dbg !3529 {
entry:
  %parm_rtx.addr = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %parm_rtx, %struct.rtx_def** %parm_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %parm_rtx.addr, metadata !3530, metadata !DIExpression()), !dbg !3531
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !3532, metadata !DIExpression()), !dbg !3533
  %0 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3534
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3534
  %bf.load = load i32, i32* %1, align 8, !dbg !3534
  %bf.clear = and i32 %bf.load, 65535, !dbg !3534
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !3534
  br i1 %cmp, label %if.then, label %if.else, !dbg !3536

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3537
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !3538
  call void @set_reg_attrs_from_value(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !3539
  br label %if.end51, !dbg !3539

if.else:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3540
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3540
  %bf.load1 = load i32, i32* %5, align 8, !dbg !3540
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3540
  %cmp3 = icmp eq i32 %bf.clear2, 15, !dbg !3542
  br i1 %cmp3, label %if.then4, label %if.end50, !dbg !3543

if.then4:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3544, metadata !DIExpression()), !dbg !3546
  %6 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3547
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3547
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3547
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !3547
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3547
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %7, i32 0, i32 1, !dbg !3547
  %arrayidx5 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !3547
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8, !dbg !3547
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3547
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 0, !dbg !3547
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !3547
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3547
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !3547
  %10 = zext i1 %tobool to i64, !dbg !3547
  %cond = select i1 %tobool, i32 0, i32 1, !dbg !3547
  store i32 %cond, i32* %i, align 4, !dbg !3546
  br label %for.cond, !dbg !3548

for.cond:                                         ; preds = %for.inc, %if.then4
  %11 = load i32, i32* %i, align 4, !dbg !3549
  %12 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3552
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3552
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !3552
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !3552
  %rt_rtvec12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtvec_def**, !dbg !3552
  %13 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec12, align 8, !dbg !3552
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %13, i32 0, i32 0, !dbg !3552
  %14 = load i32, i32* %num_elem, align 8, !dbg !3552
  %cmp13 = icmp slt i32 %11, %14, !dbg !3553
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3554

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !3555, metadata !DIExpression()), !dbg !3557
  %15 = load %struct.rtx_def*, %struct.rtx_def** %parm_rtx.addr, align 8, !dbg !3558
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3558
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !3558
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !3558
  %rt_rtvec17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**, !dbg !3558
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec17, align 8, !dbg !3558
  %elem18 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1, !dbg !3558
  %17 = load i32, i32* %i, align 4, !dbg !3558
  %idxprom = sext i32 %17 to i64, !dbg !3558
  %arrayidx19 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem18, i64 0, i64 %idxprom, !dbg !3558
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8, !dbg !3558
  store %struct.rtx_def* %18, %struct.rtx_def** %x, align 8, !dbg !3557
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !3559
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3559
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3559
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !3559
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !3559
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !3559
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3559
  %bf.load24 = load i32, i32* %21, align 8, !dbg !3559
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !3559
  %cmp26 = icmp eq i32 %bf.clear25, 37, !dbg !3559
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !3561

if.then27:                                        ; preds = %for.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !3562
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3562
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !3562
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !3562
  %rt_mem = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !3562
  %23 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !3562
  %cmp31 = icmp eq %struct.mem_attrs* %23, null, !dbg !3562
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !3562

cond.true:                                        ; preds = %if.then27
  br label %cond.end, !dbg !3562

cond.false:                                       ; preds = %if.then27
  %24 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !3562
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !3562
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !3562
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !3562
  %rt_mem35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.mem_attrs**, !dbg !3562
  %25 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem35, align 8, !dbg !3562
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %25, i32 0, i32 0, !dbg !3562
  %26 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3562
  br label %cond.end, !dbg !3562

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond36 = phi %union.tree_node* [ null, %cond.true ], [ %26, %cond.false ], !dbg !3562
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !3563
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !3563
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !3563
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !3563
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !3563
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !3563
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !3563
  %hwint = bitcast %union.u* %u41 to [1 x i64]*, !dbg !3563
  %arrayidx42 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3563
  %29 = load i64, i64* %arrayidx42, align 8, !dbg !3563
  %conv = trunc i64 %29 to i32, !dbg !3563
  %call = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %cond36, i32 %conv), !dbg !3564
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !3565
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !3565
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !3565
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !3565
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !3565
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !3565
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !3565
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !3565
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 2, !dbg !3565
  %rt_reg = bitcast %union.rtunion_def* %arrayidx49 to %struct.reg_attrs**, !dbg !3565
  store %struct.reg_attrs* %call, %struct.reg_attrs** %rt_reg, align 8, !dbg !3566
  br label %if.end, !dbg !3565

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !3567

for.inc:                                          ; preds = %if.end
  %32 = load i32, i32* %i, align 4, !dbg !3568
  %inc = add nsw i32 %32, 1, !dbg !3568
  store i32 %inc, i32* %i, align 4, !dbg !3568
  br label %for.cond, !dbg !3569, !llvm.loop !3570

for.end:                                          ; preds = %for.cond
  br label %if.end50, !dbg !3572

if.end50:                                         ; preds = %for.end, %if.else
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void, !dbg !3573
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_reg_attrs_for_decl_rtl(%union.tree_node* %t, %struct.rtx_def* %x) #0 !dbg !3574 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %y = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3577, metadata !DIExpression()), !dbg !3578
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3579, metadata !DIExpression()), !dbg !3580
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3581
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3581
  %bf.load = load i32, i32* %1, align 8, !dbg !3581
  %bf.clear = and i32 %bf.load, 65535, !dbg !3581
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !3583
  br i1 %cmp, label %if.then, label %if.end, !dbg !3584

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3585
  %call = call i32 @subreg_lowpart_p(%struct.rtx_def* %2), !dbg !3585
  %tobool = icmp ne i32 %call, 0, !dbg !3585
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3585

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1039, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3585
  br label %cond.end, !dbg !3585

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3585

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3585
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3587
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !3587
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3587
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3587
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3587
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3587
  store %struct.rtx_def* %4, %struct.rtx_def** %x.addr, align 8, !dbg !3588
  br label %if.end, !dbg !3589

if.end:                                           ; preds = %cond.end, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3590
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3590
  %bf.load1 = load i32, i32* %6, align 8, !dbg !3590
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3590
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !3590
  br i1 %cmp3, label %if.then4, label %if.end14, !dbg !3592

if.then4:                                         ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3593
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3594
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !3594
  %bf.load5 = load i32, i32* %9, align 8, !dbg !3594
  %bf.lshr = lshr i32 %bf.load5, 16, !dbg !3594
  %bf.clear6 = and i32 %bf.lshr, 255, !dbg !3594
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3595
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3595
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3595
  %11 = bitcast i40* %mode to i64*, !dbg !3595
  %bf.load7 = load i64, i64* %11, align 8, !dbg !3595
  %bf.clear8 = and i64 %bf.load7, 255, !dbg !3595
  %bf.cast = trunc i64 %bf.clear8 to i32, !dbg !3595
  %call9 = call i32 @byte_lowpart_offset(i32 %bf.clear6, i32 %bf.cast), !dbg !3596
  %call10 = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %7, i32 %call9), !dbg !3597
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3598
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3598
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !3598
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !3598
  %rt_reg = bitcast %union.rtunion_def* %arrayidx13 to %struct.reg_attrs**, !dbg !3598
  store %struct.reg_attrs* %call10, %struct.reg_attrs** %rt_reg, align 8, !dbg !3599
  br label %if.end14, !dbg !3598

if.end14:                                         ; preds = %if.then4, %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3600
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !3600
  %bf.load15 = load i32, i32* %14, align 8, !dbg !3600
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !3600
  %cmp17 = icmp eq i32 %bf.clear16, 41, !dbg !3602
  br i1 %cmp17, label %if.then18, label %if.end94, !dbg !3603

if.then18:                                        ; preds = %if.end14
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3604
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3604
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !3604
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !3604
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !3604
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !3604
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !3604
  %bf.load23 = load i32, i32* %17, align 8, !dbg !3604
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !3604
  %cmp25 = icmp eq i32 %bf.clear24, 37, !dbg !3604
  br i1 %cmp25, label %if.then26, label %if.end36, !dbg !3607

if.then26:                                        ; preds = %if.then18
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3608
  %call27 = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %18, i32 0), !dbg !3609
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3610
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3610
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !3610
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !3610
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !3610
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !3610
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3610
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !3610
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 2, !dbg !3610
  %rt_reg35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.reg_attrs**, !dbg !3610
  store %struct.reg_attrs* %call27, %struct.reg_attrs** %rt_reg35, align 8, !dbg !3611
  br label %if.end36, !dbg !3610

if.end36:                                         ; preds = %if.then26, %if.then18
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3612
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !3612
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !3612
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !3612
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !3612
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !3612
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3612
  %bf.load41 = load i32, i32* %23, align 8, !dbg !3612
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !3612
  %cmp43 = icmp eq i32 %bf.clear42, 37, !dbg !3612
  br i1 %cmp43, label %if.then44, label %if.end93, !dbg !3614

if.then44:                                        ; preds = %if.end36
  %24 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3615
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3616
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !3616
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !3616
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !3616
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !3616
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !3616
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !3616
  %bf.load49 = load i32, i32* %27, align 8, !dbg !3616
  %bf.lshr50 = lshr i32 %bf.load49, 16, !dbg !3616
  %bf.clear51 = and i32 %bf.lshr50, 255, !dbg !3616
  %idxprom = zext i32 %bf.clear51 to i64, !dbg !3616
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom, !dbg !3616
  %28 = load i8, i8* %arrayidx52, align 1, !dbg !3616
  %conv = zext i8 %28 to i32, !dbg !3616
  %cmp53 = icmp eq i32 %conv, 0, !dbg !3616
  br i1 %cmp53, label %cond.true55, label %cond.false67, !dbg !3616

cond.true55:                                      ; preds = %if.then44
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3616
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !3616
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !3616
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 0, !dbg !3616
  %rt_rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !3616
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx59, align 8, !dbg !3616
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !3616
  %bf.load60 = load i32, i32* %31, align 8, !dbg !3616
  %bf.lshr61 = lshr i32 %bf.load60, 16, !dbg !3616
  %bf.clear62 = and i32 %bf.lshr61, 255, !dbg !3616
  %idxprom63 = zext i32 %bf.clear62 to i64, !dbg !3616
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom63, !dbg !3616
  %32 = load i8, i8* %arrayidx64, align 1, !dbg !3616
  %conv65 = zext i8 %32 to i16, !dbg !3616
  %conv66 = zext i16 %conv65 to i32, !dbg !3616
  br label %cond.end82, !dbg !3616

cond.false67:                                     ; preds = %if.then44
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3616
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3616
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !3616
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !3616
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !3616
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !3616
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3616
  %bf.load72 = load i32, i32* %35, align 8, !dbg !3616
  %bf.lshr73 = lshr i32 %bf.load72, 16, !dbg !3616
  %bf.clear74 = and i32 %bf.lshr73, 255, !dbg !3616
  %idxprom75 = zext i32 %bf.clear74 to i64, !dbg !3616
  %arrayidx76 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom75, !dbg !3616
  %36 = load i8, i8* %arrayidx76, align 1, !dbg !3616
  %conv77 = zext i8 %36 to i32, !dbg !3616
  %idxprom78 = zext i32 %conv77 to i64, !dbg !3616
  %arrayidx79 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom78, !dbg !3616
  %37 = load i8, i8* %arrayidx79, align 1, !dbg !3616
  %conv80 = zext i8 %37 to i16, !dbg !3616
  %conv81 = zext i16 %conv80 to i32, !dbg !3616
  br label %cond.end82, !dbg !3616

cond.end82:                                       ; preds = %cond.false67, %cond.true55
  %cond83 = phi i32 [ %conv66, %cond.true55 ], [ %conv81, %cond.false67 ], !dbg !3616
  %call84 = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %24, i32 %cond83), !dbg !3617
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3618
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !3618
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !3618
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 1, !dbg !3618
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !3618
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !3618
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !3618
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !3618
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 2, !dbg !3618
  %rt_reg92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.reg_attrs**, !dbg !3618
  store %struct.reg_attrs* %call84, %struct.reg_attrs** %rt_reg92, align 8, !dbg !3619
  br label %if.end93, !dbg !3618

if.end93:                                         ; preds = %cond.end82, %if.end36
  br label %if.end94, !dbg !3620

if.end94:                                         ; preds = %if.end93, %if.end14
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3621
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !3621
  %bf.load95 = load i32, i32* %41, align 8, !dbg !3621
  %bf.clear96 = and i32 %bf.load95, 65535, !dbg !3621
  %cmp97 = icmp eq i32 %bf.clear96, 15, !dbg !3623
  br i1 %cmp97, label %if.then99, label %if.end150, !dbg !3624

if.then99:                                        ; preds = %if.end94
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3625, metadata !DIExpression()), !dbg !3627
  call void @llvm.dbg.declare(metadata i32* %start, metadata !3628, metadata !DIExpression()), !dbg !3629
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3630
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !3630
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !3630
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 0, !dbg !3630
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtvec_def**, !dbg !3630
  %43 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3630
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %43, i32 0, i32 1, !dbg !3630
  %arrayidx103 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !3630
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx103, align 8, !dbg !3630
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !3630
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !3630
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 0, !dbg !3630
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !3630
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !3630
  %tobool108 = icmp ne %struct.rtx_def* %45, null, !dbg !3630
  br i1 %tobool108, label %if.then109, label %if.else, !dbg !3632

if.then109:                                       ; preds = %if.then99
  store i32 0, i32* %start, align 4, !dbg !3633
  br label %if.end110, !dbg !3634

if.else:                                          ; preds = %if.then99
  store i32 1, i32* %start, align 4, !dbg !3635
  br label %if.end110

if.end110:                                        ; preds = %if.else, %if.then109
  %46 = load i32, i32* %start, align 4, !dbg !3636
  store i32 %46, i32* %i, align 4, !dbg !3638
  br label %for.cond, !dbg !3639

for.cond:                                         ; preds = %for.inc, %if.end110
  %47 = load i32, i32* %i, align 4, !dbg !3640
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3642
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !3642
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !3642
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 0, !dbg !3642
  %rt_rtvec114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtvec_def**, !dbg !3642
  %49 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec114, align 8, !dbg !3642
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %49, i32 0, i32 0, !dbg !3642
  %50 = load i32, i32* %num_elem, align 8, !dbg !3642
  %cmp115 = icmp slt i32 %47, %50, !dbg !3643
  br i1 %cmp115, label %for.body, label %for.end, !dbg !3644

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y, metadata !3645, metadata !DIExpression()), !dbg !3647
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3648
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !3648
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !3648
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 0, !dbg !3648
  %rt_rtvec120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtvec_def**, !dbg !3648
  %52 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec120, align 8, !dbg !3648
  %elem121 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %52, i32 0, i32 1, !dbg !3648
  %53 = load i32, i32* %i, align 4, !dbg !3648
  %idxprom122 = sext i32 %53 to i64, !dbg !3648
  %arrayidx123 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem121, i64 0, i64 %idxprom122, !dbg !3648
  %54 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx123, align 8, !dbg !3648
  store %struct.rtx_def* %54, %struct.rtx_def** %y, align 8, !dbg !3647
  %55 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !3649
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !3649
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !3649
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 0, !dbg !3649
  %rt_rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**, !dbg !3649
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx127, align 8, !dbg !3649
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !3649
  %bf.load128 = load i32, i32* %57, align 8, !dbg !3649
  %bf.clear129 = and i32 %bf.load128, 65535, !dbg !3649
  %cmp130 = icmp eq i32 %bf.clear129, 37, !dbg !3649
  br i1 %cmp130, label %if.then132, label %if.end149, !dbg !3651

if.then132:                                       ; preds = %for.body
  %58 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3652
  %59 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !3653
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !3653
  %fld134 = bitcast %union.u* %u133 to [1 x %union.rtunion_def]*, !dbg !3653
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i64 0, i64 1, !dbg !3653
  %rt_rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**, !dbg !3653
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx136, align 8, !dbg !3653
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !3653
  %hwint = bitcast %union.u* %u137 to [1 x i64]*, !dbg !3653
  %arrayidx138 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3653
  %61 = load i64, i64* %arrayidx138, align 8, !dbg !3653
  %conv139 = trunc i64 %61 to i32, !dbg !3653
  %call140 = call %struct.reg_attrs* @get_reg_attrs(%union.tree_node* %58, i32 %conv139), !dbg !3654
  %62 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !3655
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !3655
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !3655
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 0, !dbg !3655
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !3655
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx144, align 8, !dbg !3655
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !3655
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !3655
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 2, !dbg !3655
  %rt_reg148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.reg_attrs**, !dbg !3655
  store %struct.reg_attrs* %call140, %struct.reg_attrs** %rt_reg148, align 8, !dbg !3656
  br label %if.end149, !dbg !3655

if.end149:                                        ; preds = %if.then132, %for.body
  br label %for.inc, !dbg !3657

for.inc:                                          ; preds = %if.end149
  %64 = load i32, i32* %i, align 4, !dbg !3658
  %inc = add nsw i32 %64, 1, !dbg !3658
  store i32 %inc, i32* %i, align 4, !dbg !3658
  br label %for.cond, !dbg !3659, !llvm.loop !3660

for.end:                                          ; preds = %for.cond
  br label %if.end150, !dbg !3662

if.end150:                                        ; preds = %for.end, %if.end94
  ret void, !dbg !3663
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @subreg_lowpart_p(%struct.rtx_def* %x) #0 !dbg !3664 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3667, metadata !DIExpression()), !dbg !3668
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3669
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3669
  %bf.load = load i32, i32* %1, align 8, !dbg !3669
  %bf.clear = and i32 %bf.load, 65535, !dbg !3669
  %cmp = icmp ne i32 %bf.clear, 39, !dbg !3671
  br i1 %cmp, label %if.then, label %if.else, !dbg !3672

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3673
  br label %return, !dbg !3673

if.else:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3674
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3674
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3674
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3674
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3674
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3674
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3674
  %bf.load1 = load i32, i32* %4, align 8, !dbg !3674
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !3674
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !3674
  %cmp3 = icmp eq i32 %bf.clear2, 0, !dbg !3676
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !3677

if.then4:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !3678
  br label %return, !dbg !3678

if.end:                                           ; preds = %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3679
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3679
  %bf.load6 = load i32, i32* %6, align 8, !dbg !3679
  %bf.lshr7 = lshr i32 %bf.load6, 16, !dbg !3679
  %bf.clear8 = and i32 %bf.lshr7, 255, !dbg !3679
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3680
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3680
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !3680
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !3680
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !3680
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !3680
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !3680
  %bf.load13 = load i32, i32* %9, align 8, !dbg !3680
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !3680
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !3680
  %call = call i32 @subreg_lowpart_offset(i32 %bf.clear8, i32 %bf.clear15), !dbg !3681
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3682
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !3682
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !3682
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 1, !dbg !3682
  %rt_uint = bitcast %union.rtunion_def* %arrayidx18 to i32*, !dbg !3682
  %11 = load i32, i32* %rt_uint, align 8, !dbg !3682
  %cmp19 = icmp eq i32 %call, %11, !dbg !3683
  %conv = zext i1 %cmp19 to i32, !dbg !3683
  store i32 %conv, i32* %retval, align 4, !dbg !3684
  br label %return, !dbg !3684

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !3685
  ret i32 %12, !dbg !3685
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_decl_rtl(%union.tree_node* %t, %struct.rtx_def* %x) #0 !dbg !3686 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3687, metadata !DIExpression()), !dbg !3688
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3689, metadata !DIExpression()), !dbg !3690
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3691
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3692
  %decl_with_rtl = bitcast %union.tree_node* %1 to %struct.tree_decl_with_rtl*, !dbg !3693
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !3694
  store %struct.rtx_def* %0, %struct.rtx_def** %rtl, align 8, !dbg !3695
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3696
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !3696
  br i1 %tobool, label %if.then, label %if.end, !dbg !3698

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3699
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3700
  call void @set_reg_attrs_for_decl_rtl(%union.tree_node* %3, %struct.rtx_def* %4), !dbg !3701
  br label %if.end, !dbg !3701

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3702
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_decl_incoming_rtl(%union.tree_node* %t, %struct.rtx_def* %x, i8 zeroext %by_reference_p) #0 !dbg !3703 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %by_reference_p.addr = alloca i8, align 1
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3706, metadata !DIExpression()), !dbg !3707
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  store i8 %by_reference_p, i8* %by_reference_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %by_reference_p.addr, metadata !3710, metadata !DIExpression()), !dbg !3711
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3712
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3713
  %parm_decl = bitcast %union.tree_node* %1 to %struct.tree_parm_decl*, !dbg !3713
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !3713
  store %struct.rtx_def* %0, %struct.rtx_def** %incoming_rtl, align 8, !dbg !3714
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3715
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !3715
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3717

land.lhs.true:                                    ; preds = %entry
  %3 = load i8, i8* %by_reference_p.addr, align 1, !dbg !3718
  %tobool1 = icmp ne i8 %3, 0, !dbg !3718
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3719

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3720
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3721
  call void @set_reg_attrs_for_decl_rtl(%union.tree_node* %4, %struct.rtx_def* %5), !dbg !3722
  br label %if.end, !dbg !3722

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !3723
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_user_reg(%struct.rtx_def* %reg) #0 !dbg !3724 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3727, metadata !DIExpression()), !dbg !3728
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3729
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3729
  %bf.load = load i32, i32* %1, align 8, !dbg !3729
  %bf.clear = and i32 %bf.load, 65535, !dbg !3729
  %cmp = icmp eq i32 %bf.clear, 41, !dbg !3731
  br i1 %cmp, label %if.then, label %if.else, !dbg !3732

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3733
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3733
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3733
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3733
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3733
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3733
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3733
  %bf.load1 = load i32, i32* %4, align 8, !dbg !3735
  %bf.clear2 = and i32 %bf.load1, -134217729, !dbg !3735
  %bf.set = or i32 %bf.clear2, 134217728, !dbg !3735
  store i32 %bf.set, i32* %4, align 8, !dbg !3735
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3736
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3736
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !3736
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 1, !dbg !3736
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !3736
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !3736
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !3736
  %bf.load7 = load i32, i32* %7, align 8, !dbg !3737
  %bf.clear8 = and i32 %bf.load7, -134217729, !dbg !3737
  %bf.set9 = or i32 %bf.clear8, 134217728, !dbg !3737
  store i32 %bf.set9, i32* %7, align 8, !dbg !3737
  br label %if.end, !dbg !3738

if.else:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3739
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !3739
  %bf.load10 = load i32, i32* %9, align 8, !dbg !3739
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !3739
  %cmp12 = icmp eq i32 %bf.clear11, 37, !dbg !3739
  br i1 %cmp12, label %cond.false, label %cond.true, !dbg !3739

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3739
  br label %cond.end, !dbg !3739

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !3739

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3739
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3741
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3741
  %bf.load13 = load i32, i32* %11, align 8, !dbg !3742
  %bf.clear14 = and i32 %bf.load13, -134217729, !dbg !3742
  %bf.set15 = or i32 %bf.clear14, 134217728, !dbg !3742
  store i32 %bf.set15, i32* %11, align 8, !dbg !3742
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !3743
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @max_reg_num() #0 !dbg !3744 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !3747
  ret i32 %0, !dbg !3748
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @max_label_num() #0 !dbg !3749 {
entry:
  %0 = load i32, i32* @label_num, align 4, !dbg !3750
  ret i32 %0, !dbg !3751
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_first_label_num() #0 !dbg !3752 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 1), align 4, !dbg !3753
  ret i32 %0, !dbg !3754
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @maybe_set_first_label_num(%struct.rtx_def* %x) #0 !dbg !3755 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3756, metadata !DIExpression()), !dbg !3757
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3758
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3758
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3758
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !3758
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3758
  %1 = load i32, i32* %rt_int, align 8, !dbg !3758
  %2 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 1), align 4, !dbg !3760
  %cmp = icmp slt i32 %1, %2, !dbg !3761
  br i1 %cmp, label %if.then, label %if.end, !dbg !3762

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3763
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !3763
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3763
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 6, !dbg !3763
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !3763
  %4 = load i32, i32* %rt_int4, align 8, !dbg !3763
  store i32 %4, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 1), align 4, !dbg !3764
  br label %if.end, !dbg !3765

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3766
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %x) #0 !dbg !3767 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %msize = alloca i32, align 4
  %xsize = alloca i32, align 4
  %offset = alloca i32, align 4
  %innermode = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3768, metadata !DIExpression()), !dbg !3769
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3770, metadata !DIExpression()), !dbg !3771
  call void @llvm.dbg.declare(metadata i32* %msize, metadata !3772, metadata !DIExpression()), !dbg !3773
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3774
  %idxprom = zext i32 %0 to i64, !dbg !3774
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3774
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3774
  %conv = zext i8 %1 to i16, !dbg !3774
  %conv1 = zext i16 %conv to i32, !dbg !3774
  store i32 %conv1, i32* %msize, align 4, !dbg !3773
  call void @llvm.dbg.declare(metadata i32* %xsize, metadata !3775, metadata !DIExpression()), !dbg !3776
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3777, metadata !DIExpression()), !dbg !3778
  store i32 0, i32* %offset, align 4, !dbg !3778
  call void @llvm.dbg.declare(metadata i32* %innermode, metadata !3779, metadata !DIExpression()), !dbg !3780
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3781
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3781
  %bf.load = load i32, i32* %3, align 8, !dbg !3781
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3781
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3781
  store i32 %bf.clear, i32* %innermode, align 4, !dbg !3782
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3783
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3783
  %bf.load2 = load i32, i32* %5, align 8, !dbg !3783
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !3783
  %cmp = icmp eq i32 %bf.clear3, 30, !dbg !3783
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !3785

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %msize, align 4, !dbg !3786
  %mul = mul nsw i32 %6, 8, !dbg !3787
  %cmp5 = icmp sle i32 %mul, 64, !dbg !3788
  br i1 %cmp5, label %if.then, label %if.else, !dbg !3789

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 @mode_for_size(i32 64, i32 2, i32 0), !dbg !3790
  store i32 %call, i32* %innermode, align 4, !dbg !3791
  br label %if.end11, !dbg !3792

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load i32, i32* %innermode, align 4, !dbg !3793
  %cmp7 = icmp eq i32 %7, 0, !dbg !3795
  br i1 %cmp7, label %if.then9, label %if.end, !dbg !3796

if.then9:                                         ; preds = %if.else
  %call10 = call i32 @mode_for_size(i32 128, i32 2, i32 0), !dbg !3797
  store i32 %call10, i32* %innermode, align 4, !dbg !3798
  br label %if.end, !dbg !3799

if.end:                                           ; preds = %if.then9, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then
  %8 = load i32, i32* %innermode, align 4, !dbg !3800
  %idxprom12 = zext i32 %8 to i64, !dbg !3800
  %arrayidx13 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom12, !dbg !3800
  %9 = load i8, i8* %arrayidx13, align 1, !dbg !3800
  %conv14 = zext i8 %9 to i16, !dbg !3800
  %conv15 = zext i16 %conv14 to i32, !dbg !3800
  store i32 %conv15, i32* %xsize, align 4, !dbg !3801
  %10 = load i32, i32* %innermode, align 4, !dbg !3802
  %cmp16 = icmp ne i32 %10, 0, !dbg !3802
  br i1 %cmp16, label %land.lhs.true18, label %cond.true, !dbg !3802

land.lhs.true18:                                  ; preds = %if.end11
  %11 = load i32, i32* %innermode, align 4, !dbg !3802
  %cmp19 = icmp ne i32 %11, 1, !dbg !3802
  br i1 %cmp19, label %cond.false, label %cond.true, !dbg !3802

cond.true:                                        ; preds = %land.lhs.true18, %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1195, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3802
  br label %cond.end, !dbg !3802

cond.false:                                       ; preds = %land.lhs.true18
  br label %cond.end, !dbg !3802

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3802
  %12 = load i32, i32* %innermode, align 4, !dbg !3803
  %13 = load i32, i32* %mode.addr, align 4, !dbg !3805
  %cmp21 = icmp eq i32 %12, %13, !dbg !3806
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !3807

if.then23:                                        ; preds = %cond.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3808
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !3809
  br label %return, !dbg !3809

if.end24:                                         ; preds = %cond.end
  %15 = load i32, i32* %msize, align 4, !dbg !3810
  %add = add nsw i32 %15, 3, !dbg !3812
  %div = sdiv i32 %add, 4, !dbg !3813
  %16 = load i32, i32* %xsize, align 4, !dbg !3814
  %add25 = add nsw i32 %16, 3, !dbg !3815
  %div26 = sdiv i32 %add25, 4, !dbg !3816
  %cmp27 = icmp sgt i32 %div, %div26, !dbg !3817
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !3818

if.then29:                                        ; preds = %if.end24
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3819
  br label %return, !dbg !3819

if.end30:                                         ; preds = %if.end24
  %17 = load i32, i32* %mode.addr, align 4, !dbg !3820
  %idxprom31 = zext i32 %17 to i64, !dbg !3820
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !3820
  %18 = load i8, i8* %arrayidx32, align 1, !dbg !3820
  %conv33 = zext i8 %18 to i32, !dbg !3820
  %cmp34 = icmp eq i32 %conv33, 8, !dbg !3820
  br i1 %cmp34, label %land.lhs.true41, label %lor.lhs.false, !dbg !3820

lor.lhs.false:                                    ; preds = %if.end30
  %19 = load i32, i32* %mode.addr, align 4, !dbg !3820
  %idxprom36 = zext i32 %19 to i64, !dbg !3820
  %arrayidx37 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom36, !dbg !3820
  %20 = load i8, i8* %arrayidx37, align 1, !dbg !3820
  %conv38 = zext i8 %20 to i32, !dbg !3820
  %cmp39 = icmp eq i32 %conv38, 9, !dbg !3820
  br i1 %cmp39, label %land.lhs.true41, label %if.end45, !dbg !3822

land.lhs.true41:                                  ; preds = %lor.lhs.false, %if.end30
  %21 = load i32, i32* %msize, align 4, !dbg !3823
  %22 = load i32, i32* %xsize, align 4, !dbg !3824
  %cmp42 = icmp sgt i32 %21, %22, !dbg !3825
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !3826

if.then44:                                        ; preds = %land.lhs.true41
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3827
  br label %return, !dbg !3827

if.end45:                                         ; preds = %land.lhs.true41, %lor.lhs.false
  %23 = load i32, i32* %mode.addr, align 4, !dbg !3828
  %24 = load i32, i32* %innermode, align 4, !dbg !3829
  %call46 = call i32 @subreg_lowpart_offset(i32 %23, i32 %24), !dbg !3830
  store i32 %call46, i32* %offset, align 4, !dbg !3831
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3832
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !3832
  %bf.load47 = load i32, i32* %26, align 8, !dbg !3832
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !3832
  %cmp49 = icmp eq i32 %bf.clear48, 99, !dbg !3834
  br i1 %cmp49, label %land.lhs.true56, label %lor.lhs.false51, !dbg !3835

lor.lhs.false51:                                  ; preds = %if.end45
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3836
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !3836
  %bf.load52 = load i32, i32* %28, align 8, !dbg !3836
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !3836
  %cmp54 = icmp eq i32 %bf.clear53, 98, !dbg !3837
  br i1 %cmp54, label %land.lhs.true56, label %if.else114, !dbg !3838

land.lhs.true56:                                  ; preds = %lor.lhs.false51, %if.end45
  %29 = load i32, i32* %mode.addr, align 4, !dbg !3839
  %idxprom57 = zext i32 %29 to i64, !dbg !3839
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom57, !dbg !3839
  %30 = load i8, i8* %arrayidx58, align 1, !dbg !3839
  %conv59 = zext i8 %30 to i32, !dbg !3839
  %cmp60 = icmp eq i32 %conv59, 2, !dbg !3840
  br i1 %cmp60, label %if.then68, label %lor.lhs.false62, !dbg !3841

lor.lhs.false62:                                  ; preds = %land.lhs.true56
  %31 = load i32, i32* %mode.addr, align 4, !dbg !3842
  %idxprom63 = zext i32 %31 to i64, !dbg !3842
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom63, !dbg !3842
  %32 = load i8, i8* %arrayidx64, align 1, !dbg !3842
  %conv65 = zext i8 %32 to i32, !dbg !3842
  %cmp66 = icmp eq i32 %conv65, 3, !dbg !3843
  br i1 %cmp66, label %if.then68, label %if.else114, !dbg !3844

if.then68:                                        ; preds = %lor.lhs.false62, %land.lhs.true56
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3845
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3845
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3845
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3845
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !3845
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3845
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3845
  %bf.load70 = load i32, i32* %35, align 8, !dbg !3845
  %bf.lshr71 = lshr i32 %bf.load70, 16, !dbg !3845
  %bf.clear72 = and i32 %bf.lshr71, 255, !dbg !3845
  %36 = load i32, i32* %mode.addr, align 4, !dbg !3848
  %cmp73 = icmp eq i32 %bf.clear72, %36, !dbg !3849
  br i1 %cmp73, label %if.then75, label %if.else80, !dbg !3850

if.then75:                                        ; preds = %if.then68
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3851
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !3851
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !3851
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !3851
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !3851
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !3851
  store %struct.rtx_def* %38, %struct.rtx_def** %retval, align 8, !dbg !3852
  br label %return, !dbg !3852

if.else80:                                        ; preds = %if.then68
  %39 = load i32, i32* %msize, align 4, !dbg !3853
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3855
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !3855
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !3855
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 0, !dbg !3855
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !3855
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !3855
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !3855
  %bf.load85 = load i32, i32* %42, align 8, !dbg !3855
  %bf.lshr86 = lshr i32 %bf.load85, 16, !dbg !3855
  %bf.clear87 = and i32 %bf.lshr86, 255, !dbg !3855
  %idxprom88 = zext i32 %bf.clear87 to i64, !dbg !3855
  %arrayidx89 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom88, !dbg !3855
  %43 = load i8, i8* %arrayidx89, align 1, !dbg !3855
  %conv90 = zext i8 %43 to i16, !dbg !3855
  %conv91 = zext i16 %conv90 to i32, !dbg !3855
  %cmp92 = icmp slt i32 %39, %conv91, !dbg !3856
  br i1 %cmp92, label %if.then94, label %if.else100, !dbg !3857

if.then94:                                        ; preds = %if.else80
  %44 = load i32, i32* %mode.addr, align 4, !dbg !3858
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3859
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !3859
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !3859
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 0, !dbg !3859
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !3859
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !3859
  %call99 = call %struct.rtx_def* @gen_lowpart_common(i32 %44, %struct.rtx_def* %46), !dbg !3860
  store %struct.rtx_def* %call99, %struct.rtx_def** %retval, align 8, !dbg !3861
  br label %return, !dbg !3861

if.else100:                                       ; preds = %if.else80
  %47 = load i32, i32* %msize, align 4, !dbg !3862
  %48 = load i32, i32* %xsize, align 4, !dbg !3864
  %cmp101 = icmp slt i32 %47, %48, !dbg !3865
  br i1 %cmp101, label %if.then103, label %if.end111, !dbg !3866

if.then103:                                       ; preds = %if.else100
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3867
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !3867
  %bf.load104 = load i32, i32* %50, align 8, !dbg !3867
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !3867
  %51 = load i32, i32* %mode.addr, align 4, !dbg !3867
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3867
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !3867
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !3867
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 0, !dbg !3867
  %rt_rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !3867
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx109, align 8, !dbg !3867
  %call110 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %bf.clear105, i32 %51, %struct.rtx_def* %53), !dbg !3867
  store %struct.rtx_def* %call110, %struct.rtx_def** %retval, align 8, !dbg !3868
  br label %return, !dbg !3868

if.end111:                                        ; preds = %if.else100
  br label %if.end112

if.end112:                                        ; preds = %if.end111
  br label %if.end113

if.end113:                                        ; preds = %if.end112
  br label %if.end147, !dbg !3869

if.else114:                                       ; preds = %lor.lhs.false62, %lor.lhs.false51
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3870
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !3870
  %bf.load115 = load i32, i32* %55, align 8, !dbg !3870
  %bf.clear116 = and i32 %bf.load115, 65535, !dbg !3870
  %cmp117 = icmp eq i32 %bf.clear116, 39, !dbg !3872
  br i1 %cmp117, label %if.then144, label %lor.lhs.false119, !dbg !3873

lor.lhs.false119:                                 ; preds = %if.else114
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3874
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !3874
  %bf.load120 = load i32, i32* %57, align 8, !dbg !3874
  %bf.clear121 = and i32 %bf.load120, 65535, !dbg !3874
  %cmp122 = icmp eq i32 %bf.clear121, 37, !dbg !3874
  br i1 %cmp122, label %if.then144, label %lor.lhs.false124, !dbg !3875

lor.lhs.false124:                                 ; preds = %lor.lhs.false119
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3876
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !3876
  %bf.load125 = load i32, i32* %59, align 8, !dbg !3876
  %bf.clear126 = and i32 %bf.load125, 65535, !dbg !3876
  %cmp127 = icmp eq i32 %bf.clear126, 41, !dbg !3877
  br i1 %cmp127, label %if.then144, label %lor.lhs.false129, !dbg !3878

lor.lhs.false129:                                 ; preds = %lor.lhs.false124
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3879
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !3879
  %bf.load130 = load i32, i32* %61, align 8, !dbg !3879
  %bf.clear131 = and i32 %bf.load130, 65535, !dbg !3879
  %cmp132 = icmp eq i32 %bf.clear131, 33, !dbg !3880
  br i1 %cmp132, label %if.then144, label %lor.lhs.false134, !dbg !3881

lor.lhs.false134:                                 ; preds = %lor.lhs.false129
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3882
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !3882
  %bf.load135 = load i32, i32* %63, align 8, !dbg !3882
  %bf.clear136 = and i32 %bf.load135, 65535, !dbg !3882
  %cmp137 = icmp eq i32 %bf.clear136, 32, !dbg !3883
  br i1 %cmp137, label %if.then144, label %lor.lhs.false139, !dbg !3884

lor.lhs.false139:                                 ; preds = %lor.lhs.false134
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3885
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !3885
  %bf.load140 = load i32, i32* %65, align 8, !dbg !3885
  %bf.clear141 = and i32 %bf.load140, 65535, !dbg !3885
  %cmp142 = icmp eq i32 %bf.clear141, 30, !dbg !3885
  br i1 %cmp142, label %if.then144, label %if.end146, !dbg !3886

if.then144:                                       ; preds = %lor.lhs.false139, %lor.lhs.false134, %lor.lhs.false129, %lor.lhs.false124, %lor.lhs.false119, %if.else114
  %66 = load i32, i32* %mode.addr, align 4, !dbg !3887
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3888
  %68 = load i32, i32* %innermode, align 4, !dbg !3889
  %69 = load i32, i32* %offset, align 4, !dbg !3890
  %call145 = call %struct.rtx_def* @simplify_gen_subreg(i32 %66, %struct.rtx_def* %67, i32 %68, i32 %69), !dbg !3891
  store %struct.rtx_def* %call145, %struct.rtx_def** %retval, align 8, !dbg !3892
  br label %return, !dbg !3892

if.end146:                                        ; preds = %lor.lhs.false139
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end113
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3893
  br label %return, !dbg !3893

return:                                           ; preds = %if.end147, %if.then144, %if.then103, %if.then94, %if.then75, %if.then44, %if.then29, %if.then23
  %70 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3894
  ret %struct.rtx_def* %70, !dbg !3894
}

declare dso_local i32 @mode_for_size(i32, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_highpart(i32 %mode, %struct.rtx_def* %x) #0 !dbg !3895 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %msize = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3896, metadata !DIExpression()), !dbg !3897
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3898, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.declare(metadata i32* %msize, metadata !3900, metadata !DIExpression()), !dbg !3901
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3902
  %idxprom = zext i32 %0 to i64, !dbg !3902
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3902
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3902
  %conv = zext i8 %1 to i16, !dbg !3902
  %conv1 = zext i16 %conv to i32, !dbg !3902
  store i32 %conv1, i32* %msize, align 4, !dbg !3901
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !3903, metadata !DIExpression()), !dbg !3904
  %2 = load i32, i32* %msize, align 4, !dbg !3905
  %cmp = icmp ule i32 %2, 4, !dbg !3905
  br i1 %cmp, label %cond.false28, label %lor.lhs.false, !dbg !3905

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %msize, align 4, !dbg !3905
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3905
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3905
  %bf.load = load i32, i32* %5, align 8, !dbg !3905
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3905
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3905
  %idxprom3 = zext i32 %bf.clear to i64, !dbg !3905
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom3, !dbg !3905
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !3905
  %conv5 = zext i8 %6 to i32, !dbg !3905
  %cmp6 = icmp eq i32 %conv5, 0, !dbg !3905
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !3905

cond.true:                                        ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3905
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3905
  %bf.load8 = load i32, i32* %8, align 8, !dbg !3905
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !3905
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !3905
  %idxprom11 = zext i32 %bf.clear10 to i64, !dbg !3905
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom11, !dbg !3905
  %9 = load i8, i8* %arrayidx12, align 1, !dbg !3905
  %conv13 = zext i8 %9 to i16, !dbg !3905
  %conv14 = zext i16 %conv13 to i32, !dbg !3905
  br label %cond.end, !dbg !3905

cond.false:                                       ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3905
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3905
  %bf.load15 = load i32, i32* %11, align 8, !dbg !3905
  %bf.lshr16 = lshr i32 %bf.load15, 16, !dbg !3905
  %bf.clear17 = and i32 %bf.lshr16, 255, !dbg !3905
  %idxprom18 = zext i32 %bf.clear17 to i64, !dbg !3905
  %arrayidx19 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom18, !dbg !3905
  %12 = load i8, i8* %arrayidx19, align 1, !dbg !3905
  %conv20 = zext i8 %12 to i32, !dbg !3905
  %idxprom21 = zext i32 %conv20 to i64, !dbg !3905
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom21, !dbg !3905
  %13 = load i8, i8* %arrayidx22, align 1, !dbg !3905
  %conv23 = zext i8 %13 to i16, !dbg !3905
  %conv24 = zext i16 %conv23 to i32, !dbg !3905
  br label %cond.end, !dbg !3905

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv14, %cond.true ], [ %conv24, %cond.false ], !dbg !3905
  %cmp25 = icmp eq i32 %3, %cond, !dbg !3905
  br i1 %cmp25, label %cond.false28, label %cond.true27, !dbg !3905

cond.true27:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3905
  br label %cond.end29, !dbg !3905

cond.false28:                                     ; preds = %cond.end, %entry
  br label %cond.end29, !dbg !3905

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !3905
  %14 = load i32, i32* %mode.addr, align 4, !dbg !3906
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3907
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3908
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !3908
  %bf.load31 = load i32, i32* %17, align 8, !dbg !3908
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !3908
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !3908
  %18 = load i32, i32* %mode.addr, align 4, !dbg !3909
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3910
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !3910
  %bf.load34 = load i32, i32* %20, align 8, !dbg !3910
  %bf.lshr35 = lshr i32 %bf.load34, 16, !dbg !3910
  %bf.clear36 = and i32 %bf.lshr35, 255, !dbg !3910
  %call = call i32 @subreg_highpart_offset(i32 %18, i32 %bf.clear36), !dbg !3911
  %call37 = call %struct.rtx_def* @simplify_gen_subreg(i32 %14, %struct.rtx_def* %15, i32 %bf.clear33, i32 %call), !dbg !3912
  store %struct.rtx_def* %call37, %struct.rtx_def** %result, align 8, !dbg !3913
  %21 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3914
  %tobool = icmp ne %struct.rtx_def* %21, null, !dbg !3914
  br i1 %tobool, label %cond.false39, label %cond.true38, !dbg !3914

cond.true38:                                      ; preds = %cond.end29
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1252, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3914
  br label %cond.end40, !dbg !3914

cond.false39:                                     ; preds = %cond.end29
  br label %cond.end40, !dbg !3914

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !3914
  %22 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3915
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3915
  %bf.load42 = load i32, i32* %23, align 8, !dbg !3915
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !3915
  %cmp44 = icmp eq i32 %bf.clear43, 43, !dbg !3915
  br i1 %cmp44, label %if.then, label %if.end, !dbg !3917

if.then:                                          ; preds = %cond.end40
  %24 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3918
  %call46 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %24), !dbg !3920
  store %struct.rtx_def* %call46, %struct.rtx_def** %result, align 8, !dbg !3921
  %25 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3922
  %tobool47 = icmp ne %struct.rtx_def* %25, null, !dbg !3922
  br i1 %tobool47, label %cond.false49, label %cond.true48, !dbg !3922

cond.true48:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1260, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3922
  br label %cond.end50, !dbg !3922

cond.false49:                                     ; preds = %if.then
  br label %cond.end50, !dbg !3922

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !3922
  br label %if.end, !dbg !3923

if.end:                                           ; preds = %cond.end50, %cond.end40
  %26 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3924
  ret %struct.rtx_def* %26, !dbg !3925
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @subreg_highpart_offset(i32 %outermode, i32 %innermode) #0 !dbg !3926 {
entry:
  %outermode.addr = alloca i32, align 4
  %innermode.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %difference = alloca i32, align 4
  store i32 %outermode, i32* %outermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outermode.addr, metadata !3927, metadata !DIExpression()), !dbg !3928
  store i32 %innermode, i32* %innermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %innermode.addr, metadata !3929, metadata !DIExpression()), !dbg !3930
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3931, metadata !DIExpression()), !dbg !3932
  store i32 0, i32* %offset, align 4, !dbg !3932
  call void @llvm.dbg.declare(metadata i32* %difference, metadata !3933, metadata !DIExpression()), !dbg !3934
  %0 = load i32, i32* %innermode.addr, align 4, !dbg !3935
  %idxprom = zext i32 %0 to i64, !dbg !3935
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3935
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3935
  %conv = zext i8 %1 to i16, !dbg !3935
  %conv1 = zext i16 %conv to i32, !dbg !3935
  %2 = load i32, i32* %outermode.addr, align 4, !dbg !3936
  %idxprom2 = zext i32 %2 to i64, !dbg !3936
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !3936
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !3936
  %conv4 = zext i8 %3 to i16, !dbg !3936
  %conv5 = zext i16 %conv4 to i32, !dbg !3936
  %sub = sub nsw i32 %conv1, %conv5, !dbg !3937
  store i32 %sub, i32* %difference, align 4, !dbg !3934
  %4 = load i32, i32* %innermode.addr, align 4, !dbg !3938
  %idxprom6 = zext i32 %4 to i64, !dbg !3938
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom6, !dbg !3938
  %5 = load i8, i8* %arrayidx7, align 1, !dbg !3938
  %conv8 = zext i8 %5 to i16, !dbg !3938
  %conv9 = zext i16 %conv8 to i32, !dbg !3938
  %6 = load i32, i32* %outermode.addr, align 4, !dbg !3938
  %idxprom10 = zext i32 %6 to i64, !dbg !3938
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom10, !dbg !3938
  %7 = load i8, i8* %arrayidx11, align 1, !dbg !3938
  %conv12 = zext i8 %7 to i16, !dbg !3938
  %conv13 = zext i16 %conv12 to i32, !dbg !3938
  %cmp = icmp sge i32 %conv9, %conv13, !dbg !3938
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3938

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1307, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3938
  br label %cond.end, !dbg !3938

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3938

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3938
  %8 = load i32, i32* %difference, align 4, !dbg !3939
  %cmp15 = icmp sgt i32 %8, 0, !dbg !3941
  br i1 %cmp15, label %if.then, label %if.end, !dbg !3942

if.then:                                          ; preds = %cond.end
  %9 = load i32, i32* %difference, align 4, !dbg !3943
  %div = sdiv i32 %9, 4, !dbg !3946
  %mul = mul nsw i32 %div, 4, !dbg !3947
  %10 = load i32, i32* %offset, align 4, !dbg !3948
  %add = add i32 %10, %mul, !dbg !3948
  store i32 %add, i32* %offset, align 4, !dbg !3948
  %11 = load i32, i32* %difference, align 4, !dbg !3949
  %rem = srem i32 %11, 4, !dbg !3951
  %12 = load i32, i32* %offset, align 4, !dbg !3952
  %add17 = add i32 %12, %rem, !dbg !3952
  store i32 %add17, i32* %offset, align 4, !dbg !3952
  br label %if.end, !dbg !3953

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load i32, i32* %offset, align 4, !dbg !3954
  ret i32 %13, !dbg !3955
}

declare dso_local %struct.rtx_def* @validize_mem(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_highpart_mode(i32 %outermode, i32 %innermode, %struct.rtx_def* %exp) #0 !dbg !3956 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %outermode.addr = alloca i32, align 4
  %innermode.addr = alloca i32, align 4
  %exp.addr = alloca %struct.rtx_def*, align 8
  store i32 %outermode, i32* %outermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outermode.addr, metadata !3959, metadata !DIExpression()), !dbg !3960
  store i32 %innermode, i32* %innermode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %innermode.addr, metadata !3961, metadata !DIExpression()), !dbg !3962
  store %struct.rtx_def* %exp, %struct.rtx_def** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %exp.addr, metadata !3963, metadata !DIExpression()), !dbg !3964
  %0 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !3965
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3965
  %bf.load = load i32, i32* %1, align 8, !dbg !3965
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3965
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3965
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !3967
  br i1 %cmp, label %if.then, label %if.end, !dbg !3968

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !3969
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3969
  %bf.load1 = load i32, i32* %3, align 8, !dbg !3969
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !3969
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !3969
  %4 = load i32, i32* %innermode.addr, align 4, !dbg !3969
  %cmp4 = icmp eq i32 %bf.clear3, %4, !dbg !3969
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !3969

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1273, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3969
  br label %cond.end, !dbg !3969

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3969

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3969
  %5 = load i32, i32* %outermode.addr, align 4, !dbg !3971
  %6 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !3972
  %call = call %struct.rtx_def* @gen_highpart(i32 %5, %struct.rtx_def* %6), !dbg !3973
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !3974
  br label %return, !dbg !3974

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %outermode.addr, align 4, !dbg !3975
  %8 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !3976
  %9 = load i32, i32* %innermode.addr, align 4, !dbg !3977
  %10 = load i32, i32* %outermode.addr, align 4, !dbg !3978
  %11 = load i32, i32* %innermode.addr, align 4, !dbg !3979
  %call5 = call i32 @subreg_highpart_offset(i32 %10, i32 %11), !dbg !3980
  %call6 = call %struct.rtx_def* @simplify_gen_subreg(i32 %7, %struct.rtx_def* %8, i32 %9, i32 %call5), !dbg !3981
  store %struct.rtx_def* %call6, %struct.rtx_def** %retval, align 8, !dbg !3982
  br label %return, !dbg !3982

return:                                           ; preds = %if.end, %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3983
  ret %struct.rtx_def* %12, !dbg !3983
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @operand_subword(%struct.rtx_def* %op, i32 %offset, i32 %validate_address, i32 %mode) #0 !dbg !3984 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  %validate_address.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !3987, metadata !DIExpression()), !dbg !3988
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !3989, metadata !DIExpression()), !dbg !3990
  store i32 %validate_address, i32* %validate_address.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validate_address.addr, metadata !3991, metadata !DIExpression()), !dbg !3992
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3993, metadata !DIExpression()), !dbg !3994
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3995
  %cmp = icmp eq i32 %0, 0, !dbg !3997
  br i1 %cmp, label %if.then, label %if.end, !dbg !3998

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !3999
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3999
  %bf.load = load i32, i32* %2, align 8, !dbg !3999
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3999
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3999
  store i32 %bf.clear, i32* %mode.addr, align 4, !dbg !4000
  br label %if.end, !dbg !4001

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4002
  %cmp1 = icmp ne i32 %3, 0, !dbg !4002
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !4002

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1367, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4002
  br label %cond.end, !dbg !4002

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4002
  %4 = load i32, i32* %mode.addr, align 4, !dbg !4003
  %cmp2 = icmp ne i32 %4, 1, !dbg !4005
  br i1 %cmp2, label %land.lhs.true, label %if.end7, !dbg !4006

land.lhs.true:                                    ; preds = %cond.end
  %5 = load i32, i32* %mode.addr, align 4, !dbg !4007
  %idxprom = zext i32 %5 to i64, !dbg !4007
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4007
  %6 = load i8, i8* %arrayidx, align 1, !dbg !4007
  %conv = zext i8 %6 to i16, !dbg !4007
  %conv3 = zext i16 %conv to i32, !dbg !4007
  %cmp4 = icmp slt i32 %conv3, 4, !dbg !4008
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !4009

if.then6:                                         ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4010
  br label %return, !dbg !4010

if.end7:                                          ; preds = %land.lhs.true, %cond.end
  %7 = load i32, i32* %mode.addr, align 4, !dbg !4011
  %cmp8 = icmp ne i32 %7, 1, !dbg !4013
  br i1 %cmp8, label %land.lhs.true10, label %if.end18, !dbg !4014

land.lhs.true10:                                  ; preds = %if.end7
  %8 = load i32, i32* %offset.addr, align 4, !dbg !4015
  %add = add i32 %8, 1, !dbg !4016
  %mul = mul i32 %add, 4, !dbg !4017
  %9 = load i32, i32* %mode.addr, align 4, !dbg !4018
  %idxprom11 = zext i32 %9 to i64, !dbg !4018
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom11, !dbg !4018
  %10 = load i8, i8* %arrayidx12, align 1, !dbg !4018
  %conv13 = zext i8 %10 to i16, !dbg !4018
  %conv14 = zext i16 %conv13 to i32, !dbg !4018
  %cmp15 = icmp ugt i32 %mul, %conv14, !dbg !4019
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !4020

if.then17:                                        ; preds = %land.lhs.true10
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4021
  store %struct.rtx_def* %11, %struct.rtx_def** %retval, align 8, !dbg !4022
  br label %return, !dbg !4022

if.end18:                                         ; preds = %land.lhs.true10, %if.end7
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4023
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4023
  %bf.load19 = load i32, i32* %13, align 8, !dbg !4023
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !4023
  %cmp21 = icmp eq i32 %bf.clear20, 43, !dbg !4023
  br i1 %cmp21, label %if.then23, label %if.end57, !dbg !4025

if.then23:                                        ; preds = %if.end18
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !4026, metadata !DIExpression()), !dbg !4028
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4029
  %15 = load i32, i32* @word_mode, align 4, !dbg !4029
  %16 = load i32, i32* %offset.addr, align 4, !dbg !4029
  %mul24 = mul i32 %16, 4, !dbg !4029
  %conv25 = zext i32 %mul24 to i64, !dbg !4029
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %14, i32 %15, i64 %conv25, i32 0, i32 1), !dbg !4029
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !4028
  %17 = load i32, i32* %validate_address.addr, align 4, !dbg !4030
  %tobool = icmp ne i32 %17, 0, !dbg !4030
  br i1 %tobool, label %if.else, label %if.then26, !dbg !4032

if.then26:                                        ; preds = %if.then23
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4033
  store %struct.rtx_def* %18, %struct.rtx_def** %retval, align 8, !dbg !4034
  br label %return, !dbg !4034

if.else:                                          ; preds = %if.then23
  %19 = load i32, i32* @reload_completed, align 4, !dbg !4035
  %tobool27 = icmp ne i32 %19, 0, !dbg !4035
  br i1 %tobool27, label %if.then28, label %if.else49, !dbg !4037

if.then28:                                        ; preds = %if.else
  %20 = load i32, i32* @word_mode, align 4, !dbg !4038
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4041
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4041
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4041
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4041
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4041
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4041
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4042
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4042
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !4042
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 1, !dbg !4042
  %rt_mem = bitcast %union.rtunion_def* %arrayidx32 to %struct.mem_attrs**, !dbg !4042
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4042
  %cmp33 = icmp eq %struct.mem_attrs* %24, null, !dbg !4042
  br i1 %cmp33, label %cond.true35, label %cond.false36, !dbg !4042

cond.true35:                                      ; preds = %if.then28
  br label %cond.end42, !dbg !4042

cond.false36:                                     ; preds = %if.then28
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4042
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4042
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !4042
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !4042
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !4042
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !4042
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %26, i32 0, i32 5, !dbg !4042
  %27 = load i8, i8* %addrspace, align 8, !dbg !4042
  %conv41 = zext i8 %27 to i32, !dbg !4042
  br label %cond.end42, !dbg !4042

cond.end42:                                       ; preds = %cond.false36, %cond.true35
  %cond43 = phi i32 [ 0, %cond.true35 ], [ %conv41, %cond.false36 ], !dbg !4042
  %conv44 = trunc i32 %cond43 to i8, !dbg !4042
  %call45 = call i32 @strict_memory_address_addr_space_p(i32 %20, %struct.rtx_def* %22, i8 zeroext %conv44), !dbg !4043
  %tobool46 = icmp ne i32 %call45, 0, !dbg !4043
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !4044

if.then47:                                        ; preds = %cond.end42
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4045
  br label %return, !dbg !4045

if.end48:                                         ; preds = %cond.end42
  br label %if.end55, !dbg !4046

if.else49:                                        ; preds = %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4047
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4048
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4048
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !4048
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !4048
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !4048
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !4048
  %call54 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %28, %struct.rtx_def* %30), !dbg !4049
  store %struct.rtx_def* %call54, %struct.rtx_def** %retval, align 8, !dbg !4050
  br label %return, !dbg !4050

if.end55:                                         ; preds = %if.end48
  br label %if.end56

if.end56:                                         ; preds = %if.end55
  br label %if.end57, !dbg !4051

if.end57:                                         ; preds = %if.end56, %if.end18
  %31 = load i32, i32* @word_mode, align 4, !dbg !4052
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4053
  %33 = load i32, i32* %mode.addr, align 4, !dbg !4054
  %34 = load i32, i32* %offset.addr, align 4, !dbg !4055
  %mul58 = mul i32 %34, 4, !dbg !4056
  %call59 = call %struct.rtx_def* @simplify_gen_subreg(i32 %31, %struct.rtx_def* %32, i32 %33, i32 %mul58), !dbg !4057
  store %struct.rtx_def* %call59, %struct.rtx_def** %retval, align 8, !dbg !4058
  br label %return, !dbg !4058

return:                                           ; preds = %if.end57, %if.else49, %if.then47, %if.then26, %if.then17, %if.then6
  %35 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4059
  ret %struct.rtx_def* %35, !dbg !4059
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %memref, i32 %mode, i64 %offset, i32 %validate, i32 %adjust) #0 !dbg !4060 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %validate.addr = alloca i32, align 4
  %adjust.addr = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %memoffset = alloca %struct.rtx_def*, align 8
  %size = alloca %struct.rtx_def*, align 8
  %memalign = alloca i32, align 4
  %as = alloca i8, align 1
  %address_mode = alloca i32, align 4
  %pbits = alloca i32, align 4
  %shift = alloca i32, align 4
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !4063, metadata !DIExpression()), !dbg !4064
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4065, metadata !DIExpression()), !dbg !4066
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !4067, metadata !DIExpression()), !dbg !4068
  store i32 %validate, i32* %validate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validate.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  store i32 %adjust, i32* %adjust.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %adjust.addr, metadata !4071, metadata !DIExpression()), !dbg !4072
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !4073, metadata !DIExpression()), !dbg !4074
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4075
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4075
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4075
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4075
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4075
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4075
  store %struct.rtx_def* %1, %struct.rtx_def** %addr, align 8, !dbg !4074
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !4076, metadata !DIExpression()), !dbg !4077
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memoffset, metadata !4078, metadata !DIExpression()), !dbg !4079
  %2 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4080
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4080
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4080
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !4080
  %rt_mem = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !4080
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4080
  %cmp = icmp eq %struct.mem_attrs* %3, null, !dbg !4080
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4080

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !4080

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4080
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4080
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !4080
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 1, !dbg !4080
  %rt_mem7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.mem_attrs**, !dbg !4080
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem7, align 8, !dbg !4080
  %offset8 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %5, i32 0, i32 1, !dbg !4080
  %6 = load %struct.rtx_def*, %struct.rtx_def** %offset8, align 8, !dbg !4080
  br label %cond.end, !dbg !4080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %6, %cond.false ], !dbg !4080
  store %struct.rtx_def* %cond, %struct.rtx_def** %memoffset, align 8, !dbg !4079
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size, metadata !4081, metadata !DIExpression()), !dbg !4082
  store %struct.rtx_def* null, %struct.rtx_def** %size, align 8, !dbg !4082
  call void @llvm.dbg.declare(metadata i32* %memalign, metadata !4083, metadata !DIExpression()), !dbg !4084
  %7 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4085
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !4085
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !4085
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 1, !dbg !4085
  %rt_mem12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.mem_attrs**, !dbg !4085
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem12, align 8, !dbg !4085
  %cmp13 = icmp ne %struct.mem_attrs* %8, null, !dbg !4085
  br i1 %cmp13, label %cond.true14, label %cond.false19, !dbg !4085

cond.true14:                                      ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4085
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4085
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !4085
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !4085
  %rt_mem18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.mem_attrs**, !dbg !4085
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem18, align 8, !dbg !4085
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %10, i32 0, i32 4, !dbg !4085
  %11 = load i32, i32* %align, align 4, !dbg !4085
  br label %cond.end20, !dbg !4085

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !4085

cond.end20:                                       ; preds = %cond.false19, %cond.true14
  %cond21 = phi i32 [ %11, %cond.true14 ], [ 8, %cond.false19 ], !dbg !4085
  store i32 %cond21, i32* %memalign, align 4, !dbg !4084
  call void @llvm.dbg.declare(metadata i8* %as, metadata !4086, metadata !DIExpression()), !dbg !4088
  %12 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4089
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4089
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !4089
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !4089
  %rt_mem25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.mem_attrs**, !dbg !4089
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem25, align 8, !dbg !4089
  %cmp26 = icmp eq %struct.mem_attrs* %13, null, !dbg !4089
  br i1 %cmp26, label %cond.true27, label %cond.false28, !dbg !4089

cond.true27:                                      ; preds = %cond.end20
  br label %cond.end33, !dbg !4089

cond.false28:                                     ; preds = %cond.end20
  %14 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4089
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4089
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !4089
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !4089
  %rt_mem32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.mem_attrs**, !dbg !4089
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem32, align 8, !dbg !4089
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %15, i32 0, i32 5, !dbg !4089
  %16 = load i8, i8* %addrspace, align 8, !dbg !4089
  %conv = zext i8 %16 to i32, !dbg !4089
  br label %cond.end33, !dbg !4089

cond.end33:                                       ; preds = %cond.false28, %cond.true27
  %cond34 = phi i32 [ 0, %cond.true27 ], [ %conv, %cond.false28 ], !dbg !4089
  %conv35 = trunc i32 %cond34 to i8, !dbg !4089
  store i8 %conv35, i8* %as, align 1, !dbg !4088
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !4090, metadata !DIExpression()), !dbg !4091
  %17 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !4092
  %18 = load i8, i8* %as, align 1, !dbg !4093
  %call = call i32 %17(i8 zeroext %18), !dbg !4094
  store i32 %call, i32* %address_mode, align 4, !dbg !4091
  call void @llvm.dbg.declare(metadata i32* %pbits, metadata !4095, metadata !DIExpression()), !dbg !4096
  %19 = load i32, i32* %mode.addr, align 4, !dbg !4097
  %20 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4099
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4099
  %bf.load = load i32, i32* %21, align 8, !dbg !4099
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4099
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4099
  %cmp36 = icmp eq i32 %19, %bf.clear, !dbg !4100
  br i1 %cmp36, label %land.lhs.true, label %if.end, !dbg !4101

land.lhs.true:                                    ; preds = %cond.end33
  %22 = load i64, i64* %offset.addr, align 8, !dbg !4102
  %tobool = icmp ne i64 %22, 0, !dbg !4102
  br i1 %tobool, label %if.end, label %land.lhs.true38, !dbg !4103

land.lhs.true38:                                  ; preds = %land.lhs.true
  %23 = load i32, i32* %validate.addr, align 4, !dbg !4104
  %tobool39 = icmp ne i32 %23, 0, !dbg !4104
  br i1 %tobool39, label %lor.lhs.false, label %if.then, !dbg !4105

lor.lhs.false:                                    ; preds = %land.lhs.true38
  %24 = load i32, i32* %mode.addr, align 4, !dbg !4106
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4107
  %26 = load i8, i8* %as, align 1, !dbg !4108
  %call40 = call i32 @memory_address_addr_space_p(i32 %24, %struct.rtx_def* %25, i8 zeroext %26), !dbg !4109
  %tobool41 = icmp ne i32 %call40, 0, !dbg !4109
  br i1 %tobool41, label %if.then, label %if.end, !dbg !4110

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true38
  %27 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4111
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !4112
  br label %return, !dbg !4112

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true, %cond.end33
  %28 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4113
  %call42 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %28), !dbg !4114
  store %struct.rtx_def* %call42, %struct.rtx_def** %addr, align 8, !dbg !4115
  %29 = load i32, i32* %address_mode, align 4, !dbg !4116
  %idxprom = zext i32 %29 to i64, !dbg !4116
  %arrayidx43 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4116
  %30 = load i8, i8* %arrayidx43, align 1, !dbg !4116
  %conv44 = zext i8 %30 to i16, !dbg !4116
  %conv45 = zext i16 %conv44 to i32, !dbg !4116
  %mul = mul nsw i32 %conv45, 8, !dbg !4116
  %conv46 = trunc i32 %mul to i16, !dbg !4116
  %conv47 = zext i16 %conv46 to i32, !dbg !4116
  store i32 %conv47, i32* %pbits, align 4, !dbg !4117
  %31 = load i32, i32* %pbits, align 4, !dbg !4118
  %cmp48 = icmp sgt i32 64, %31, !dbg !4120
  br i1 %cmp48, label %if.then50, label %if.end52, !dbg !4121

if.then50:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !4122, metadata !DIExpression()), !dbg !4124
  %32 = load i32, i32* %pbits, align 4, !dbg !4125
  %sub = sub nsw i32 64, %32, !dbg !4126
  store i32 %sub, i32* %shift, align 4, !dbg !4124
  %33 = load i64, i64* %offset.addr, align 8, !dbg !4127
  %34 = load i32, i32* %shift, align 4, !dbg !4128
  %sh_prom = zext i32 %34 to i64, !dbg !4129
  %shl = shl i64 %33, %sh_prom, !dbg !4129
  %35 = load i32, i32* %shift, align 4, !dbg !4130
  %sh_prom51 = zext i32 %35 to i64, !dbg !4131
  %shr = ashr i64 %shl, %sh_prom51, !dbg !4131
  store i64 %shr, i64* %offset.addr, align 8, !dbg !4132
  br label %if.end52, !dbg !4133

if.end52:                                         ; preds = %if.then50, %if.end
  %36 = load i32, i32* %adjust.addr, align 4, !dbg !4134
  %tobool53 = icmp ne i32 %36, 0, !dbg !4134
  br i1 %tobool53, label %if.then54, label %if.end89, !dbg !4136

if.then54:                                        ; preds = %if.end52
  %37 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4137
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4137
  %bf.load55 = load i32, i32* %38, align 8, !dbg !4137
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !4137
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !4137
  %cmp58 = icmp ne i32 %bf.clear57, 1, !dbg !4140
  br i1 %cmp58, label %land.lhs.true60, label %if.else, !dbg !4141

land.lhs.true60:                                  ; preds = %if.then54
  %39 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4142
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !4142
  %bf.load61 = load i32, i32* %40, align 8, !dbg !4142
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !4142
  %cmp63 = icmp eq i32 %bf.clear62, 122, !dbg !4143
  br i1 %cmp63, label %land.lhs.true65, label %if.else, !dbg !4144

land.lhs.true65:                                  ; preds = %land.lhs.true60
  %41 = load i64, i64* %offset.addr, align 8, !dbg !4145
  %cmp66 = icmp sge i64 %41, 0, !dbg !4146
  br i1 %cmp66, label %land.lhs.true68, label %if.else, !dbg !4147

land.lhs.true68:                                  ; preds = %land.lhs.true65
  %42 = load i64, i64* %offset.addr, align 8, !dbg !4148
  %43 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4149
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !4149
  %bf.load69 = load i32, i32* %44, align 8, !dbg !4149
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !4149
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !4149
  %call72 = call i32 @get_mode_alignment(i32 %bf.clear71), !dbg !4149
  %div = udiv i32 %call72, 8, !dbg !4150
  %conv73 = zext i32 %div to i64, !dbg !4149
  %cmp74 = icmp ult i64 %42, %conv73, !dbg !4151
  br i1 %cmp74, label %if.then76, label %if.else, !dbg !4152

if.then76:                                        ; preds = %land.lhs.true68
  %45 = load i32, i32* %address_mode, align 4, !dbg !4153
  %46 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4153
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !4153
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !4153
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 0, !dbg !4153
  %rt_rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**, !dbg !4153
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx80, align 8, !dbg !4153
  %48 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4153
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !4153
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !4153
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 1, !dbg !4153
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !4153
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !4153
  %50 = load i64, i64* %offset.addr, align 8, !dbg !4153
  %call85 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %49, i64 %50), !dbg !4153
  %call86 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 122, i32 %45, %struct.rtx_def* %47, %struct.rtx_def* %call85), !dbg !4153
  store %struct.rtx_def* %call86, %struct.rtx_def** %addr, align 8, !dbg !4154
  br label %if.end88, !dbg !4155

if.else:                                          ; preds = %land.lhs.true68, %land.lhs.true65, %land.lhs.true60, %if.then54
  %51 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4156
  %52 = load i64, i64* %offset.addr, align 8, !dbg !4157
  %call87 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %51, i64 %52), !dbg !4158
  store %struct.rtx_def* %call87, %struct.rtx_def** %addr, align 8, !dbg !4159
  br label %if.end88

if.end88:                                         ; preds = %if.else, %if.then76
  br label %if.end89, !dbg !4160

if.end89:                                         ; preds = %if.end88, %if.end52
  %53 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4161
  %54 = load i32, i32* %mode.addr, align 4, !dbg !4162
  %55 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4163
  %56 = load i32, i32* %validate.addr, align 4, !dbg !4164
  %call90 = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %53, i32 %54, %struct.rtx_def* %55, i32 %56), !dbg !4165
  store %struct.rtx_def* %call90, %struct.rtx_def** %new_rtx, align 8, !dbg !4166
  %57 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4167
  %58 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4169
  %cmp91 = icmp eq %struct.rtx_def* %57, %58, !dbg !4170
  br i1 %cmp91, label %land.lhs.true93, label %if.end98, !dbg !4171

land.lhs.true93:                                  ; preds = %if.end89
  %59 = load i64, i64* %offset.addr, align 8, !dbg !4172
  %cmp94 = icmp ne i64 %59, 0, !dbg !4173
  br i1 %cmp94, label %if.then96, label %if.end98, !dbg !4174

if.then96:                                        ; preds = %land.lhs.true93
  %60 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4175
  %call97 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %60), !dbg !4176
  store %struct.rtx_def* %call97, %struct.rtx_def** %new_rtx, align 8, !dbg !4177
  br label %if.end98, !dbg !4178

if.end98:                                         ; preds = %if.then96, %land.lhs.true93, %if.end89
  %61 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !4179
  %tobool99 = icmp ne %struct.rtx_def* %61, null, !dbg !4179
  br i1 %tobool99, label %if.then100, label %if.end104, !dbg !4181

if.then100:                                       ; preds = %if.end98
  %62 = load i64, i64* %offset.addr, align 8, !dbg !4182
  %63 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !4182
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4182
  %hwint = bitcast %union.u* %u101 to [1 x i64]*, !dbg !4182
  %arrayidx102 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4182
  %64 = load i64, i64* %arrayidx102, align 8, !dbg !4182
  %add = add nsw i64 %62, %64, !dbg !4182
  %call103 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add), !dbg !4182
  store %struct.rtx_def* %call103, %struct.rtx_def** %memoffset, align 8, !dbg !4183
  br label %if.end104, !dbg !4184

if.end104:                                        ; preds = %if.then100, %if.end98
  %65 = load i64, i64* %offset.addr, align 8, !dbg !4185
  %cmp105 = icmp ne i64 %65, 0, !dbg !4187
  br i1 %cmp105, label %if.then107, label %if.end122, !dbg !4188

if.then107:                                       ; preds = %if.end104
  %66 = load i32, i32* %memalign, align 4, !dbg !4189
  %conv108 = zext i32 %66 to i64, !dbg !4189
  %67 = load i64, i64* %offset.addr, align 8, !dbg !4189
  %68 = load i64, i64* %offset.addr, align 8, !dbg !4189
  %sub109 = sub nsw i64 0, %68, !dbg !4189
  %and = and i64 %67, %sub109, !dbg !4189
  %mul110 = mul i64 %and, 8, !dbg !4189
  %cmp111 = icmp ult i64 %conv108, %mul110, !dbg !4189
  br i1 %cmp111, label %cond.true113, label %cond.false115, !dbg !4189

cond.true113:                                     ; preds = %if.then107
  %69 = load i32, i32* %memalign, align 4, !dbg !4189
  %conv114 = zext i32 %69 to i64, !dbg !4189
  br label %cond.end119, !dbg !4189

cond.false115:                                    ; preds = %if.then107
  %70 = load i64, i64* %offset.addr, align 8, !dbg !4189
  %71 = load i64, i64* %offset.addr, align 8, !dbg !4189
  %sub116 = sub nsw i64 0, %71, !dbg !4189
  %and117 = and i64 %70, %sub116, !dbg !4189
  %mul118 = mul i64 %and117, 8, !dbg !4189
  br label %cond.end119, !dbg !4189

cond.end119:                                      ; preds = %cond.false115, %cond.true113
  %cond120 = phi i64 [ %conv114, %cond.true113 ], [ %mul118, %cond.false115 ], !dbg !4189
  %conv121 = trunc i64 %cond120 to i32, !dbg !4189
  store i32 %conv121, i32* %memalign, align 4, !dbg !4190
  br label %if.end122, !dbg !4191

if.end122:                                        ; preds = %cond.end119, %if.end104
  %72 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4192
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !4192
  %bf.load123 = load i32, i32* %73, align 8, !dbg !4192
  %bf.lshr124 = lshr i32 %bf.load123, 16, !dbg !4192
  %bf.clear125 = and i32 %bf.lshr124, 255, !dbg !4192
  %cmp126 = icmp ne i32 %bf.clear125, 1, !dbg !4194
  br i1 %cmp126, label %if.then128, label %if.else137, !dbg !4195

if.then128:                                       ; preds = %if.end122
  %74 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4196
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !4196
  %bf.load129 = load i32, i32* %75, align 8, !dbg !4196
  %bf.lshr130 = lshr i32 %bf.load129, 16, !dbg !4196
  %bf.clear131 = and i32 %bf.lshr130, 255, !dbg !4196
  %idxprom132 = zext i32 %bf.clear131 to i64, !dbg !4196
  %arrayidx133 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom132, !dbg !4196
  %76 = load i8, i8* %arrayidx133, align 1, !dbg !4196
  %conv134 = zext i8 %76 to i16, !dbg !4196
  %conv135 = zext i16 %conv134 to i64, !dbg !4196
  %call136 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv135), !dbg !4196
  store %struct.rtx_def* %call136, %struct.rtx_def** %size, align 8, !dbg !4197
  br label %if.end204, !dbg !4198

if.else137:                                       ; preds = %if.end122
  %77 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4199
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !4199
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !4199
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 1, !dbg !4199
  %rt_mem141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.mem_attrs**, !dbg !4199
  %78 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem141, align 8, !dbg !4199
  %cmp142 = icmp ne %struct.mem_attrs* %78, null, !dbg !4199
  br i1 %cmp142, label %cond.true144, label %cond.false151, !dbg !4201

cond.true144:                                     ; preds = %if.else137
  %79 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4199
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !4199
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !4199
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 1, !dbg !4199
  %rt_mem148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.mem_attrs**, !dbg !4199
  %80 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem148, align 8, !dbg !4199
  %size149 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %80, i32 0, i32 2, !dbg !4199
  %81 = load %struct.rtx_def*, %struct.rtx_def** %size149, align 8, !dbg !4199
  %tobool150 = icmp ne %struct.rtx_def* %81, null, !dbg !4199
  br i1 %tobool150, label %if.then168, label %if.end203, !dbg !4199

cond.false151:                                    ; preds = %if.else137
  %82 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4199
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !4199
  %bf.load152 = load i32, i32* %83, align 8, !dbg !4199
  %bf.lshr153 = lshr i32 %bf.load152, 16, !dbg !4199
  %bf.clear154 = and i32 %bf.lshr153, 255, !dbg !4199
  %cmp155 = icmp ne i32 %bf.clear154, 1, !dbg !4199
  br i1 %cmp155, label %cond.true157, label %cond.false167, !dbg !4201

cond.true157:                                     ; preds = %cond.false151
  %84 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4199
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !4199
  %bf.load158 = load i32, i32* %85, align 8, !dbg !4199
  %bf.lshr159 = lshr i32 %bf.load158, 16, !dbg !4199
  %bf.clear160 = and i32 %bf.lshr159, 255, !dbg !4199
  %idxprom161 = zext i32 %bf.clear160 to i64, !dbg !4199
  %arrayidx162 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom161, !dbg !4199
  %86 = load i8, i8* %arrayidx162, align 1, !dbg !4199
  %conv163 = zext i8 %86 to i16, !dbg !4199
  %conv164 = zext i16 %conv163 to i64, !dbg !4199
  %call165 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv164), !dbg !4199
  %tobool166 = icmp ne %struct.rtx_def* %call165, null, !dbg !4199
  br i1 %tobool166, label %if.then168, label %if.end203, !dbg !4199

cond.false167:                                    ; preds = %cond.false151
  br i1 false, label %if.then168, label %if.end203, !dbg !4201

if.then168:                                       ; preds = %cond.false167, %cond.true157, %cond.true144
  %87 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4202
  %u169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !4202
  %fld170 = bitcast %union.u* %u169 to [1 x %union.rtunion_def]*, !dbg !4202
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i64 0, i64 1, !dbg !4202
  %rt_mem172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.mem_attrs**, !dbg !4202
  %88 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem172, align 8, !dbg !4202
  %cmp173 = icmp ne %struct.mem_attrs* %88, null, !dbg !4202
  br i1 %cmp173, label %cond.true175, label %cond.false181, !dbg !4202

cond.true175:                                     ; preds = %if.then168
  %89 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4202
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !4202
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !4202
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 1, !dbg !4202
  %rt_mem179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.mem_attrs**, !dbg !4202
  %90 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem179, align 8, !dbg !4202
  %size180 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %90, i32 0, i32 2, !dbg !4202
  %91 = load %struct.rtx_def*, %struct.rtx_def** %size180, align 8, !dbg !4202
  br label %cond.end199, !dbg !4202

cond.false181:                                    ; preds = %if.then168
  %92 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4202
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !4202
  %bf.load182 = load i32, i32* %93, align 8, !dbg !4202
  %bf.lshr183 = lshr i32 %bf.load182, 16, !dbg !4202
  %bf.clear184 = and i32 %bf.lshr183, 255, !dbg !4202
  %cmp185 = icmp ne i32 %bf.clear184, 1, !dbg !4202
  br i1 %cmp185, label %cond.true187, label %cond.false196, !dbg !4202

cond.true187:                                     ; preds = %cond.false181
  %94 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4202
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !4202
  %bf.load188 = load i32, i32* %95, align 8, !dbg !4202
  %bf.lshr189 = lshr i32 %bf.load188, 16, !dbg !4202
  %bf.clear190 = and i32 %bf.lshr189, 255, !dbg !4202
  %idxprom191 = zext i32 %bf.clear190 to i64, !dbg !4202
  %arrayidx192 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom191, !dbg !4202
  %96 = load i8, i8* %arrayidx192, align 1, !dbg !4202
  %conv193 = zext i8 %96 to i16, !dbg !4202
  %conv194 = zext i16 %conv193 to i64, !dbg !4202
  %call195 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv194), !dbg !4202
  br label %cond.end197, !dbg !4202

cond.false196:                                    ; preds = %cond.false181
  br label %cond.end197, !dbg !4202

cond.end197:                                      ; preds = %cond.false196, %cond.true187
  %cond198 = phi %struct.rtx_def* [ %call195, %cond.true187 ], [ null, %cond.false196 ], !dbg !4202
  br label %cond.end199, !dbg !4202

cond.end199:                                      ; preds = %cond.end197, %cond.true175
  %cond200 = phi %struct.rtx_def* [ %91, %cond.true175 ], [ %cond198, %cond.end197 ], !dbg !4202
  %97 = load i64, i64* %offset.addr, align 8, !dbg !4203
  %sub201 = sub nsw i64 0, %97, !dbg !4204
  %call202 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %cond200, i64 %sub201), !dbg !4205
  store %struct.rtx_def* %call202, %struct.rtx_def** %size, align 8, !dbg !4206
  br label %if.end203, !dbg !4207

if.end203:                                        ; preds = %cond.end199, %cond.false167, %cond.true157, %cond.true144
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.then128
  %98 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4208
  %u205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !4208
  %fld206 = bitcast %union.u* %u205 to [1 x %union.rtunion_def]*, !dbg !4208
  %arrayidx207 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld206, i64 0, i64 1, !dbg !4208
  %rt_mem208 = bitcast %union.rtunion_def* %arrayidx207 to %struct.mem_attrs**, !dbg !4208
  %99 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem208, align 8, !dbg !4208
  %cmp209 = icmp eq %struct.mem_attrs* %99, null, !dbg !4208
  br i1 %cmp209, label %cond.true211, label %cond.false212, !dbg !4208

cond.true211:                                     ; preds = %if.end204
  br label %cond.end217, !dbg !4208

cond.false212:                                    ; preds = %if.end204
  %100 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4208
  %u213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1, !dbg !4208
  %fld214 = bitcast %union.u* %u213 to [1 x %union.rtunion_def]*, !dbg !4208
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i64 0, i64 1, !dbg !4208
  %rt_mem216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.mem_attrs**, !dbg !4208
  %101 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem216, align 8, !dbg !4208
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %101, i32 0, i32 3, !dbg !4208
  %102 = load i32, i32* %alias, align 8, !dbg !4208
  br label %cond.end217, !dbg !4208

cond.end217:                                      ; preds = %cond.false212, %cond.true211
  %cond218 = phi i32 [ 0, %cond.true211 ], [ %102, %cond.false212 ], !dbg !4208
  %103 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4209
  %u219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !4209
  %fld220 = bitcast %union.u* %u219 to [1 x %union.rtunion_def]*, !dbg !4209
  %arrayidx221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld220, i64 0, i64 1, !dbg !4209
  %rt_mem222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.mem_attrs**, !dbg !4209
  %104 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem222, align 8, !dbg !4209
  %cmp223 = icmp eq %struct.mem_attrs* %104, null, !dbg !4209
  br i1 %cmp223, label %cond.true225, label %cond.false226, !dbg !4209

cond.true225:                                     ; preds = %cond.end217
  br label %cond.end231, !dbg !4209

cond.false226:                                    ; preds = %cond.end217
  %105 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4209
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !4209
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !4209
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 1, !dbg !4209
  %rt_mem230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.mem_attrs**, !dbg !4209
  %106 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem230, align 8, !dbg !4209
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %106, i32 0, i32 0, !dbg !4209
  %107 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4209
  br label %cond.end231, !dbg !4209

cond.end231:                                      ; preds = %cond.false226, %cond.true225
  %cond232 = phi %union.tree_node* [ null, %cond.true225 ], [ %107, %cond.false226 ], !dbg !4209
  %108 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !4210
  %109 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !4211
  %110 = load i32, i32* %memalign, align 4, !dbg !4212
  %111 = load i8, i8* %as, align 1, !dbg !4213
  %112 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4214
  %113 = bitcast %struct.rtx_def* %112 to i32*, !dbg !4214
  %bf.load233 = load i32, i32* %113, align 8, !dbg !4214
  %bf.lshr234 = lshr i32 %bf.load233, 16, !dbg !4214
  %bf.clear235 = and i32 %bf.lshr234, 255, !dbg !4214
  %call236 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond218, %union.tree_node* %cond232, %struct.rtx_def* %108, %struct.rtx_def* %109, i32 %110, i8 zeroext %111, i32 %bf.clear235), !dbg !4215
  %114 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4216
  %u237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !4216
  %fld238 = bitcast %union.u* %u237 to [1 x %union.rtunion_def]*, !dbg !4216
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i64 0, i64 1, !dbg !4216
  %rt_mem240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.mem_attrs**, !dbg !4216
  store %struct.mem_attrs* %call236, %struct.mem_attrs** %rt_mem240, align 8, !dbg !4217
  %115 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !4218
  store %struct.rtx_def* %115, %struct.rtx_def** %retval, align 8, !dbg !4219
  br label %return, !dbg !4219

return:                                           ; preds = %cond.end231, %if.then
  %116 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4220
  ret %struct.rtx_def* %116, !dbg !4220
}

declare dso_local i32 @strict_memory_address_addr_space_p(i32, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %memref, %struct.rtx_def* %addr) #0 !dbg !4221 {
entry:
  %memref.addr = alloca %struct.rtx_def*, align 8
  %addr.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !4224, metadata !DIExpression()), !dbg !4225
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !4226, metadata !DIExpression()), !dbg !4227
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4228
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4228
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4228
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4228
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4228
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4228
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !4229
  call void @update_temp_slot_address(%struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !4230
  %3 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !4231
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !4232
  %call = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %3, i32 0, %struct.rtx_def* %4, i32 1), !dbg !4233
  ret %struct.rtx_def* %call, !dbg !4234
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op, i32 %offset, i32 %mode) #0 !dbg !4235 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !4238, metadata !DIExpression()), !dbg !4239
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !4240, metadata !DIExpression()), !dbg !4241
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4242, metadata !DIExpression()), !dbg !4243
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !4244, metadata !DIExpression()), !dbg !4245
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4246
  %1 = load i32, i32* %offset.addr, align 4, !dbg !4247
  %2 = load i32, i32* %mode.addr, align 4, !dbg !4248
  %call = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %0, i32 %1, i32 1, i32 %2), !dbg !4249
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8, !dbg !4245
  %3 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !4250
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !4250
  br i1 %tobool, label %if.then, label %if.end, !dbg !4252

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !4253
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !4254
  br label %return, !dbg !4254

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %mode.addr, align 4, !dbg !4255
  %cmp = icmp ne i32 %5, 1, !dbg !4257
  br i1 %cmp, label %land.lhs.true, label %if.end8, !dbg !4258

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* %mode.addr, align 4, !dbg !4259
  %cmp1 = icmp ne i32 %6, 0, !dbg !4260
  br i1 %cmp1, label %if.then2, label %if.end8, !dbg !4261

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4262
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4262
  %bf.load = load i32, i32* %8, align 8, !dbg !4262
  %bf.clear = and i32 %bf.load, 65535, !dbg !4262
  %cmp3 = icmp eq i32 %bf.clear, 37, !dbg !4262
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !4265

if.then4:                                         ; preds = %if.then2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4266
  %call5 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %9), !dbg !4267
  store %struct.rtx_def* %call5, %struct.rtx_def** %op.addr, align 8, !dbg !4268
  br label %if.end7, !dbg !4269

if.else:                                          ; preds = %if.then2
  %10 = load i32, i32* %mode.addr, align 4, !dbg !4270
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4271
  %call6 = call %struct.rtx_def* @force_reg(i32 %10, %struct.rtx_def* %11), !dbg !4272
  store %struct.rtx_def* %call6, %struct.rtx_def** %op.addr, align 8, !dbg !4273
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then4
  br label %if.end8, !dbg !4274

if.end8:                                          ; preds = %if.end7, %land.lhs.true, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !4275
  %13 = load i32, i32* %offset.addr, align 4, !dbg !4276
  %14 = load i32, i32* %mode.addr, align 4, !dbg !4277
  %call9 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %12, i32 %13, i32 1, i32 %14), !dbg !4278
  store %struct.rtx_def* %call9, %struct.rtx_def** %result, align 8, !dbg !4279
  %15 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !4280
  %tobool10 = icmp ne %struct.rtx_def* %15, null, !dbg !4280
  br i1 %tobool10, label %cond.false, label %cond.true, !dbg !4280

cond.true:                                        ; preds = %if.end8
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1428, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4280
  br label %cond.end, !dbg !4280

cond.false:                                       ; preds = %if.end8
  br label %cond.end, !dbg !4280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4280
  %16 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !4281
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !4282
  br label %return, !dbg !4282

return:                                           ; preds = %cond.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4283
  ret %struct.rtx_def* %17, !dbg !4283
}

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mem_expr_equal_p(%union.tree_node* %expr1, %union.tree_node* %expr2) #0 !dbg !4284 {
entry:
  %retval = alloca i32, align 4
  %expr1.addr = alloca %union.tree_node*, align 8
  %expr2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr1, %union.tree_node** %expr1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr1.addr, metadata !4290, metadata !DIExpression()), !dbg !4291
  store %union.tree_node* %expr2, %union.tree_node** %expr2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr2.addr, metadata !4292, metadata !DIExpression()), !dbg !4293
  %0 = load %union.tree_node*, %union.tree_node** %expr1.addr, align 8, !dbg !4294
  %1 = load %union.tree_node*, %union.tree_node** %expr2.addr, align 8, !dbg !4296
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !4297
  br i1 %cmp, label %if.then, label %if.end, !dbg !4298

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !4299
  br label %return, !dbg !4299

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr1.addr, align 8, !dbg !4300
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4300
  br i1 %tobool, label %lor.lhs.false, label %if.then2, !dbg !4302

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %expr2.addr, align 8, !dbg !4303
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !4303
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !4304

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !4305
  br label %return, !dbg !4305

if.end3:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %expr1.addr, align 8, !dbg !4306
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4306
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4306
  %bf.load = load i64, i64* %5, align 8, !dbg !4306
  %bf.clear = and i64 %bf.load, 65535, !dbg !4306
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4306
  %6 = load %union.tree_node*, %union.tree_node** %expr2.addr, align 8, !dbg !4308
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4308
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4308
  %bf.load5 = load i64, i64* %7, align 8, !dbg !4308
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !4308
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4308
  %cmp8 = icmp ne i32 %bf.cast, %bf.cast7, !dbg !4309
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !4310

if.then9:                                         ; preds = %if.end3
  store i32 0, i32* %retval, align 4, !dbg !4311
  br label %return, !dbg !4311

if.end10:                                         ; preds = %if.end3
  %8 = load %union.tree_node*, %union.tree_node** %expr1.addr, align 8, !dbg !4312
  %9 = load %union.tree_node*, %union.tree_node** %expr2.addr, align 8, !dbg !4313
  %call = call i32 @operand_equal_p(%union.tree_node* %8, %union.tree_node* %9, i32 0), !dbg !4314
  store i32 %call, i32* %retval, align 4, !dbg !4315
  br label %return, !dbg !4315

return:                                           ; preds = %if.end10, %if.then9, %if.then2, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !4316
  ret i32 %10, !dbg !4316
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_mem_align_offset(%struct.rtx_def* %mem, i32 %align) #0 !dbg !4317 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  %expr = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %inner = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %byte_offset = alloca %union.tree_node*, align 8
  %bit_offset = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !4320, metadata !DIExpression()), !dbg !4321
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !4322, metadata !DIExpression()), !dbg !4323
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !4324, metadata !DIExpression()), !dbg !4325
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4326, metadata !DIExpression()), !dbg !4327
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4328
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4328
  %bf.load = load i32, i32* %1, align 8, !dbg !4328
  %bf.clear = and i32 %bf.load, 65535, !dbg !4328
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !4328
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4328

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1476, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4328
  br label %cond.end, !dbg !4328

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4328
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4329
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4329
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4329
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4329
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !4329
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4329
  %cmp1 = icmp eq %struct.mem_attrs* %3, null, !dbg !4329
  br i1 %cmp1, label %cond.true2, label %cond.false3, !dbg !4329

cond.true2:                                       ; preds = %cond.end
  br label %cond.end9, !dbg !4329

cond.false3:                                      ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4329
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4329
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !4329
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 1, !dbg !4329
  %rt_mem7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.mem_attrs**, !dbg !4329
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem7, align 8, !dbg !4329
  %expr8 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %5, i32 0, i32 0, !dbg !4329
  %6 = load %union.tree_node*, %union.tree_node** %expr8, align 8, !dbg !4329
  br label %cond.end9, !dbg !4329

cond.end9:                                        ; preds = %cond.false3, %cond.true2
  %cond10 = phi %union.tree_node* [ null, %cond.true2 ], [ %6, %cond.false3 ], !dbg !4329
  store %union.tree_node* %cond10, %union.tree_node** %expr, align 8, !dbg !4330
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4331
  %cmp11 = icmp eq %union.tree_node* %7, null, !dbg !4333
  br i1 %cmp11, label %if.then, label %lor.lhs.false, !dbg !4334

lor.lhs.false:                                    ; preds = %cond.end9
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4335
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4335
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !4335
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !4335
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !4335
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !4335
  %cmp16 = icmp eq %struct.mem_attrs* %9, null, !dbg !4335
  br i1 %cmp16, label %cond.true17, label %cond.false18, !dbg !4335

cond.true17:                                      ; preds = %lor.lhs.false
  br label %cond.end24, !dbg !4335

cond.false18:                                     ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4335
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4335
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4335
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !4335
  %rt_mem22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.mem_attrs**, !dbg !4335
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem22, align 8, !dbg !4335
  %offset23 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %11, i32 0, i32 1, !dbg !4335
  %12 = load %struct.rtx_def*, %struct.rtx_def** %offset23, align 8, !dbg !4335
  br label %cond.end24, !dbg !4335

cond.end24:                                       ; preds = %cond.false18, %cond.true17
  %cond25 = phi %struct.rtx_def* [ null, %cond.true17 ], [ %12, %cond.false18 ], !dbg !4335
  %cmp26 = icmp eq %struct.rtx_def* %cond25, null, !dbg !4336
  br i1 %cmp26, label %if.then, label %lor.lhs.false27, !dbg !4337

lor.lhs.false27:                                  ; preds = %cond.end24
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4338
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4338
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4338
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !4338
  %rt_mem31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !4338
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem31, align 8, !dbg !4338
  %cmp32 = icmp eq %struct.mem_attrs* %14, null, !dbg !4338
  br i1 %cmp32, label %cond.true33, label %cond.false34, !dbg !4338

cond.true33:                                      ; preds = %lor.lhs.false27
  br label %cond.end40, !dbg !4338

cond.false34:                                     ; preds = %lor.lhs.false27
  %15 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4338
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4338
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !4338
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !4338
  %rt_mem38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.mem_attrs**, !dbg !4338
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem38, align 8, !dbg !4338
  %offset39 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %16, i32 0, i32 1, !dbg !4338
  %17 = load %struct.rtx_def*, %struct.rtx_def** %offset39, align 8, !dbg !4338
  br label %cond.end40, !dbg !4338

cond.end40:                                       ; preds = %cond.false34, %cond.true33
  %cond41 = phi %struct.rtx_def* [ null, %cond.true33 ], [ %17, %cond.false34 ], !dbg !4338
  %18 = bitcast %struct.rtx_def* %cond41 to i32*, !dbg !4338
  %bf.load42 = load i32, i32* %18, align 8, !dbg !4338
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !4338
  %cmp44 = icmp eq i32 %bf.clear43, 30, !dbg !4338
  br i1 %cmp44, label %if.end, label %if.then, !dbg !4339

if.then:                                          ; preds = %cond.end40, %cond.end24, %cond.end9
  store i32 -1, i32* %retval, align 4, !dbg !4340
  br label %return, !dbg !4340

if.end:                                           ; preds = %cond.end40
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4341
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4341
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !4341
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 1, !dbg !4341
  %rt_mem48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.mem_attrs**, !dbg !4341
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem48, align 8, !dbg !4341
  %cmp49 = icmp eq %struct.mem_attrs* %20, null, !dbg !4341
  br i1 %cmp49, label %cond.true50, label %cond.false51, !dbg !4341

cond.true50:                                      ; preds = %if.end
  br label %cond.end57, !dbg !4341

cond.false51:                                     ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4341
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4341
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !4341
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 1, !dbg !4341
  %rt_mem55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.mem_attrs**, !dbg !4341
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem55, align 8, !dbg !4341
  %offset56 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 1, !dbg !4341
  %23 = load %struct.rtx_def*, %struct.rtx_def** %offset56, align 8, !dbg !4341
  br label %cond.end57, !dbg !4341

cond.end57:                                       ; preds = %cond.false51, %cond.true50
  %cond58 = phi %struct.rtx_def* [ null, %cond.true50 ], [ %23, %cond.false51 ], !dbg !4341
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond58, i32 0, i32 1, !dbg !4341
  %hwint = bitcast %union.u* %u59 to [1 x i64]*, !dbg !4341
  %arrayidx60 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4341
  %24 = load i64, i64* %arrayidx60, align 8, !dbg !4341
  store i64 %24, i64* %offset, align 8, !dbg !4342
  %25 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4343
  %base = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4343
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !4343
  %bf.load61 = load i64, i64* %26, align 8, !dbg !4343
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !4343
  %bf.cast = trunc i64 %bf.clear62 to i32, !dbg !4343
  %idxprom = sext i32 %bf.cast to i64, !dbg !4343
  %arrayidx63 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4343
  %27 = load i32, i32* %arrayidx63, align 4, !dbg !4343
  %cmp64 = icmp eq i32 %27, 3, !dbg !4343
  br i1 %cmp64, label %if.then65, label %if.else, !dbg !4345

if.then65:                                        ; preds = %cond.end57
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4346
  %decl_common = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !4346
  %align66 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !4346
  %29 = load i32, i32* %align66, align 8, !dbg !4346
  %30 = load i32, i32* %align.addr, align 4, !dbg !4349
  %cmp67 = icmp ult i32 %29, %30, !dbg !4350
  br i1 %cmp67, label %if.then68, label %if.end69, !dbg !4351

if.then68:                                        ; preds = %if.then65
  store i32 -1, i32* %retval, align 4, !dbg !4352
  br label %return, !dbg !4352

if.end69:                                         ; preds = %if.then65
  br label %if.end150, !dbg !4353

if.else:                                          ; preds = %cond.end57
  %31 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4354
  %base70 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4354
  %32 = bitcast %struct.tree_base* %base70 to i64*, !dbg !4354
  %bf.load71 = load i64, i64* %32, align 8, !dbg !4354
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !4354
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !4354
  %cmp74 = icmp eq i32 %bf.cast73, 47, !dbg !4354
  br i1 %cmp74, label %if.then87, label %lor.lhs.false75, !dbg !4354

lor.lhs.false75:                                  ; preds = %if.else
  %33 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4354
  %base76 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !4354
  %34 = bitcast %struct.tree_base* %base76 to i64*, !dbg !4354
  %bf.load77 = load i64, i64* %34, align 8, !dbg !4354
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !4354
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !4354
  %cmp80 = icmp eq i32 %bf.cast79, 48, !dbg !4354
  br i1 %cmp80, label %if.then87, label %lor.lhs.false81, !dbg !4354

lor.lhs.false81:                                  ; preds = %lor.lhs.false75
  %35 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4354
  %base82 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4354
  %36 = bitcast %struct.tree_base* %base82 to i64*, !dbg !4354
  %bf.load83 = load i64, i64* %36, align 8, !dbg !4354
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !4354
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4354
  %cmp86 = icmp eq i32 %bf.cast85, 49, !dbg !4354
  br i1 %cmp86, label %if.then87, label %if.else93, !dbg !4356

if.then87:                                        ; preds = %lor.lhs.false81, %lor.lhs.false75, %if.else
  %37 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4357
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !4357
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4357
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4357
  %type88 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !4357
  %align89 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type88, i32 0, i32 7, !dbg !4357
  %39 = load i32, i32* %align89, align 8, !dbg !4357
  %40 = load i32, i32* %align.addr, align 4, !dbg !4360
  %cmp90 = icmp ult i32 %39, %40, !dbg !4361
  br i1 %cmp90, label %if.then91, label %if.end92, !dbg !4362

if.then91:                                        ; preds = %if.then87
  store i32 -1, i32* %retval, align 4, !dbg !4363
  br label %return, !dbg !4363

if.end92:                                         ; preds = %if.then87
  br label %if.end149, !dbg !4364

if.else93:                                        ; preds = %lor.lhs.false81
  %41 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4365
  %base94 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !4365
  %42 = bitcast %struct.tree_base* %base94 to i64*, !dbg !4365
  %bf.load95 = load i64, i64* %42, align 8, !dbg !4365
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !4365
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !4365
  %cmp98 = icmp eq i32 %bf.cast97, 41, !dbg !4367
  br i1 %cmp98, label %if.then99, label %if.else147, !dbg !4368

if.then99:                                        ; preds = %if.else93
  br label %while.body, !dbg !4369

while.body:                                       ; preds = %if.then99, %if.end146
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !4371, metadata !DIExpression()), !dbg !4373
  %43 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4374
  %exp = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !4374
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4374
  %arrayidx100 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4374
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx100, align 8, !dbg !4374
  store %union.tree_node* %44, %union.tree_node** %inner, align 8, !dbg !4373
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4375, metadata !DIExpression()), !dbg !4376
  %45 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4377
  %exp101 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !4377
  %operands102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp101, i32 0, i32 3, !dbg !4377
  %arrayidx103 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands102, i64 0, i64 1, !dbg !4377
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx103, align 8, !dbg !4377
  store %union.tree_node* %46, %union.tree_node** %field, align 8, !dbg !4376
  call void @llvm.dbg.declare(metadata %union.tree_node** %byte_offset, metadata !4378, metadata !DIExpression()), !dbg !4379
  %47 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4380
  %call = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %47), !dbg !4381
  store %union.tree_node* %call, %union.tree_node** %byte_offset, align 8, !dbg !4379
  call void @llvm.dbg.declare(metadata %union.tree_node** %bit_offset, metadata !4382, metadata !DIExpression()), !dbg !4383
  %48 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4384
  %field_decl = bitcast %union.tree_node* %48 to %struct.tree_field_decl*, !dbg !4384
  %bit_offset104 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 4, !dbg !4384
  %49 = load %union.tree_node*, %union.tree_node** %bit_offset104, align 8, !dbg !4384
  store %union.tree_node* %49, %union.tree_node** %bit_offset, align 8, !dbg !4383
  %50 = load %union.tree_node*, %union.tree_node** %byte_offset, align 8, !dbg !4385
  %tobool = icmp ne %union.tree_node* %50, null, !dbg !4385
  br i1 %tobool, label %lor.lhs.false105, label %if.then111, !dbg !4387

lor.lhs.false105:                                 ; preds = %while.body
  %51 = load %union.tree_node*, %union.tree_node** %byte_offset, align 8, !dbg !4388
  %call106 = call i32 @host_integerp(%union.tree_node* %51, i32 1), !dbg !4389
  %tobool107 = icmp ne i32 %call106, 0, !dbg !4389
  br i1 %tobool107, label %lor.lhs.false108, label %if.then111, !dbg !4390

lor.lhs.false108:                                 ; preds = %lor.lhs.false105
  %52 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !4391
  %call109 = call i32 @host_integerp(%union.tree_node* %52, i32 1), !dbg !4392
  %tobool110 = icmp ne i32 %call109, 0, !dbg !4392
  br i1 %tobool110, label %if.end112, label %if.then111, !dbg !4393

if.then111:                                       ; preds = %lor.lhs.false108, %lor.lhs.false105, %while.body
  store i32 -1, i32* %retval, align 4, !dbg !4394
  br label %return, !dbg !4394

if.end112:                                        ; preds = %lor.lhs.false108
  %53 = load %union.tree_node*, %union.tree_node** %byte_offset, align 8, !dbg !4395
  %call113 = call i64 @tree_low_cst(%union.tree_node* %53, i32 1), !dbg !4396
  %54 = load i64, i64* %offset, align 8, !dbg !4397
  %add = add i64 %54, %call113, !dbg !4397
  store i64 %add, i64* %offset, align 8, !dbg !4397
  %55 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !4398
  %call114 = call i64 @tree_low_cst(%union.tree_node* %55, i32 1), !dbg !4399
  %div = sdiv i64 %call114, 8, !dbg !4400
  %56 = load i64, i64* %offset, align 8, !dbg !4401
  %add115 = add i64 %56, %div, !dbg !4401
  store i64 %add115, i64* %offset, align 8, !dbg !4401
  %57 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !4402
  %cmp116 = icmp eq %union.tree_node* %57, null, !dbg !4404
  br i1 %cmp116, label %if.then117, label %if.else123, !dbg !4405

if.then117:                                       ; preds = %if.end112
  %58 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4406
  %decl_minimal = bitcast %union.tree_node* %58 to %struct.tree_decl_minimal*, !dbg !4406
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4406
  %59 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4406
  %type118 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !4406
  %align119 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type118, i32 0, i32 7, !dbg !4406
  %60 = load i32, i32* %align119, align 8, !dbg !4406
  %61 = load i32, i32* %align.addr, align 4, !dbg !4409
  %cmp120 = icmp ult i32 %60, %61, !dbg !4410
  br i1 %cmp120, label %if.then121, label %if.end122, !dbg !4411

if.then121:                                       ; preds = %if.then117
  store i32 -1, i32* %retval, align 4, !dbg !4412
  br label %return, !dbg !4412

if.end122:                                        ; preds = %if.then117
  br label %while.end, !dbg !4413

if.else123:                                       ; preds = %if.end112
  %62 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !4414
  %base124 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !4414
  %63 = bitcast %struct.tree_base* %base124 to i64*, !dbg !4414
  %bf.load125 = load i64, i64* %63, align 8, !dbg !4414
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !4414
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !4414
  %idxprom128 = sext i32 %bf.cast127 to i64, !dbg !4414
  %arrayidx129 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom128, !dbg !4414
  %64 = load i32, i32* %arrayidx129, align 4, !dbg !4414
  %cmp130 = icmp eq i32 %64, 3, !dbg !4414
  br i1 %cmp130, label %if.then131, label %if.else137, !dbg !4416

if.then131:                                       ; preds = %if.else123
  %65 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !4417
  %decl_common132 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !4417
  %align133 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common132, i32 0, i32 3, !dbg !4417
  %66 = load i32, i32* %align133, align 8, !dbg !4417
  %67 = load i32, i32* %align.addr, align 4, !dbg !4420
  %cmp134 = icmp ult i32 %66, %67, !dbg !4421
  br i1 %cmp134, label %if.then135, label %if.end136, !dbg !4422

if.then135:                                       ; preds = %if.then131
  store i32 -1, i32* %retval, align 4, !dbg !4423
  br label %return, !dbg !4423

if.end136:                                        ; preds = %if.then131
  br label %while.end, !dbg !4424

if.else137:                                       ; preds = %if.else123
  %68 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !4425
  %base138 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4425
  %69 = bitcast %struct.tree_base* %base138 to i64*, !dbg !4425
  %bf.load139 = load i64, i64* %69, align 8, !dbg !4425
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !4425
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !4425
  %cmp142 = icmp ne i32 %bf.cast141, 41, !dbg !4427
  br i1 %cmp142, label %if.then143, label %if.end144, !dbg !4428

if.then143:                                       ; preds = %if.else137
  store i32 -1, i32* %retval, align 4, !dbg !4429
  br label %return, !dbg !4429

if.end144:                                        ; preds = %if.else137
  br label %if.end145

if.end145:                                        ; preds = %if.end144
  br label %if.end146

if.end146:                                        ; preds = %if.end145
  %70 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !4430
  store %union.tree_node* %70, %union.tree_node** %expr, align 8, !dbg !4431
  br label %while.body, !dbg !4369, !llvm.loop !4432

while.end:                                        ; preds = %if.end136, %if.end122
  br label %if.end148, !dbg !4434

if.else147:                                       ; preds = %if.else93
  store i32 -1, i32* %retval, align 4, !dbg !4435
  br label %return, !dbg !4435

if.end148:                                        ; preds = %while.end
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %if.end92
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.end69
  %71 = load i64, i64* %offset, align 8, !dbg !4436
  %72 = load i32, i32* %align.addr, align 4, !dbg !4437
  %div151 = udiv i32 %72, 8, !dbg !4438
  %sub = sub i32 %div151, 1, !dbg !4439
  %conv = zext i32 %sub to i64, !dbg !4440
  %and = and i64 %71, %conv, !dbg !4441
  %conv152 = trunc i64 %and to i32, !dbg !4436
  store i32 %conv152, i32* %retval, align 4, !dbg !4442
  br label %return, !dbg !4442

return:                                           ; preds = %if.end150, %if.else147, %if.then143, %if.then135, %if.then121, %if.then111, %if.then91, %if.then68, %if.then
  %73 = load i32, i32* %retval, align 4, !dbg !4443
  ret i32 %73, !dbg !4443
}

declare dso_local %union.tree_node* @component_ref_field_offset(%union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_attributes_minus_bitpos(%struct.rtx_def* %ref, %union.tree_node* %t, i32 %objectp, i64 %bitpos) #0 !dbg !4444 {
entry:
  %ref.addr = alloca %struct.rtx_def*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %objectp.addr = alloca i32, align 4
  %bitpos.addr = alloca i64, align 8
  %alias = alloca i32, align 4
  %expr = alloca %union.tree_node*, align 8
  %offset = alloca %struct.rtx_def*, align 8
  %size = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %apply_bitpos = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %base323 = alloca %union.tree_node*, align 8
  %align_computed = alloca i8, align 1
  %base_type = alloca %union.tree_node*, align 8
  %off_tree = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %low_bound = alloca %union.tree_node*, align 8
  %unit_size = alloca %union.tree_node*, align 8
  %ioff = alloca i64, align 8
  %aoff = alloca i64, align 8
  %obj_align = alloca i32, align 4
  store %struct.rtx_def* %ref, %struct.rtx_def** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ref.addr, metadata !4447, metadata !DIExpression()), !dbg !4448
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4449, metadata !DIExpression()), !dbg !4450
  store i32 %objectp, i32* %objectp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %objectp.addr, metadata !4451, metadata !DIExpression()), !dbg !4452
  store i64 %bitpos, i64* %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitpos.addr, metadata !4453, metadata !DIExpression()), !dbg !4454
  call void @llvm.dbg.declare(metadata i32* %alias, metadata !4455, metadata !DIExpression()), !dbg !4456
  %0 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4457
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4457
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4457
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4457
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !4457
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4457
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !4457
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4457

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !4457

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4457
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4457
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4457
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !4457
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !4457
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !4457
  %alias5 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !4457
  %4 = load i32, i32* %alias5, align 8, !dbg !4457
  br label %cond.end, !dbg !4457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !4457
  store i32 %cond, i32* %alias, align 4, !dbg !4456
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !4458, metadata !DIExpression()), !dbg !4459
  %5 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4460
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4460
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !4460
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !4460
  %rt_mem9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.mem_attrs**, !dbg !4460
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem9, align 8, !dbg !4460
  %cmp10 = icmp eq %struct.mem_attrs* %6, null, !dbg !4460
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !4460

cond.true11:                                      ; preds = %cond.end
  br label %cond.end18, !dbg !4460

cond.false12:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4460
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !4460
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4460
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !4460
  %rt_mem16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**, !dbg !4460
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem16, align 8, !dbg !4460
  %expr17 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !4460
  %9 = load %union.tree_node*, %union.tree_node** %expr17, align 8, !dbg !4460
  br label %cond.end18, !dbg !4460

cond.end18:                                       ; preds = %cond.false12, %cond.true11
  %cond19 = phi %union.tree_node* [ null, %cond.true11 ], [ %9, %cond.false12 ], !dbg !4460
  store %union.tree_node* %cond19, %union.tree_node** %expr, align 8, !dbg !4459
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset, metadata !4461, metadata !DIExpression()), !dbg !4462
  %10 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4463
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4463
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4463
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !4463
  %rt_mem23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.mem_attrs**, !dbg !4463
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem23, align 8, !dbg !4463
  %cmp24 = icmp eq %struct.mem_attrs* %11, null, !dbg !4463
  br i1 %cmp24, label %cond.true25, label %cond.false26, !dbg !4463

cond.true25:                                      ; preds = %cond.end18
  br label %cond.end32, !dbg !4463

cond.false26:                                     ; preds = %cond.end18
  %12 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4463
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4463
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4463
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 1, !dbg !4463
  %rt_mem30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.mem_attrs**, !dbg !4463
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem30, align 8, !dbg !4463
  %offset31 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 1, !dbg !4463
  %14 = load %struct.rtx_def*, %struct.rtx_def** %offset31, align 8, !dbg !4463
  br label %cond.end32, !dbg !4463

cond.end32:                                       ; preds = %cond.false26, %cond.true25
  %cond33 = phi %struct.rtx_def* [ null, %cond.true25 ], [ %14, %cond.false26 ], !dbg !4463
  store %struct.rtx_def* %cond33, %struct.rtx_def** %offset, align 8, !dbg !4462
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size, metadata !4464, metadata !DIExpression()), !dbg !4465
  %15 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4466
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4466
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !4466
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !4466
  %rt_mem37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.mem_attrs**, !dbg !4466
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem37, align 8, !dbg !4466
  %cmp38 = icmp ne %struct.mem_attrs* %16, null, !dbg !4466
  br i1 %cmp38, label %cond.true39, label %cond.false45, !dbg !4466

cond.true39:                                      ; preds = %cond.end32
  %17 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4466
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4466
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4466
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !4466
  %rt_mem43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.mem_attrs**, !dbg !4466
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem43, align 8, !dbg !4466
  %size44 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 2, !dbg !4466
  %19 = load %struct.rtx_def*, %struct.rtx_def** %size44, align 8, !dbg !4466
  br label %cond.end56, !dbg !4466

cond.false45:                                     ; preds = %cond.end32
  %20 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4466
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4466
  %bf.load = load i32, i32* %21, align 8, !dbg !4466
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4466
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4466
  %cmp46 = icmp ne i32 %bf.clear, 1, !dbg !4466
  br i1 %cmp46, label %cond.true47, label %cond.false53, !dbg !4466

cond.true47:                                      ; preds = %cond.false45
  %22 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4466
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !4466
  %bf.load48 = load i32, i32* %23, align 8, !dbg !4466
  %bf.lshr49 = lshr i32 %bf.load48, 16, !dbg !4466
  %bf.clear50 = and i32 %bf.lshr49, 255, !dbg !4466
  %idxprom = zext i32 %bf.clear50 to i64, !dbg !4466
  %arrayidx51 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4466
  %24 = load i8, i8* %arrayidx51, align 1, !dbg !4466
  %conv = zext i8 %24 to i16, !dbg !4466
  %conv52 = zext i16 %conv to i64, !dbg !4466
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv52), !dbg !4466
  br label %cond.end54, !dbg !4466

cond.false53:                                     ; preds = %cond.false45
  br label %cond.end54, !dbg !4466

cond.end54:                                       ; preds = %cond.false53, %cond.true47
  %cond55 = phi %struct.rtx_def* [ %call, %cond.true47 ], [ null, %cond.false53 ], !dbg !4466
  br label %cond.end56, !dbg !4466

cond.end56:                                       ; preds = %cond.end54, %cond.true39
  %cond57 = phi %struct.rtx_def* [ %19, %cond.true39 ], [ %cond55, %cond.end54 ], !dbg !4466
  store %struct.rtx_def* %cond57, %struct.rtx_def** %size, align 8, !dbg !4465
  call void @llvm.dbg.declare(metadata i32* %align, metadata !4467, metadata !DIExpression()), !dbg !4468
  %25 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4469
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4469
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !4469
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !4469
  %rt_mem61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.mem_attrs**, !dbg !4469
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem61, align 8, !dbg !4469
  %cmp62 = icmp ne %struct.mem_attrs* %26, null, !dbg !4469
  br i1 %cmp62, label %cond.true64, label %cond.false70, !dbg !4469

cond.true64:                                      ; preds = %cond.end56
  %27 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4469
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4469
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !4469
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 1, !dbg !4469
  %rt_mem68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.mem_attrs**, !dbg !4469
  %28 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem68, align 8, !dbg !4469
  %align69 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %28, i32 0, i32 4, !dbg !4469
  %29 = load i32, i32* %align69, align 4, !dbg !4469
  br label %cond.end71, !dbg !4469

cond.false70:                                     ; preds = %cond.end56
  br label %cond.end71, !dbg !4469

cond.end71:                                       ; preds = %cond.false70, %cond.true64
  %cond72 = phi i32 [ %29, %cond.true64 ], [ 8, %cond.false70 ], !dbg !4469
  store i32 %cond72, i32* %align, align 4, !dbg !4468
  call void @llvm.dbg.declare(metadata i64* %apply_bitpos, metadata !4470, metadata !DIExpression()), !dbg !4471
  store i64 0, i64* %apply_bitpos, align 8, !dbg !4471
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4472, metadata !DIExpression()), !dbg !4473
  %30 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4474
  %cmp73 = icmp eq %union.tree_node* %30, null, !dbg !4476
  br i1 %cmp73, label %if.then, label %if.end, !dbg !4477

if.then:                                          ; preds = %cond.end71
  br label %if.end826, !dbg !4478

if.end:                                           ; preds = %cond.end71
  %31 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4479
  %base = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4479
  %32 = bitcast %struct.tree_base* %base to i64*, !dbg !4479
  %bf.load75 = load i64, i64* %32, align 8, !dbg !4479
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !4479
  %bf.cast = trunc i64 %bf.clear76 to i32, !dbg !4479
  %idxprom77 = sext i32 %bf.cast to i64, !dbg !4479
  %arrayidx78 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom77, !dbg !4479
  %33 = load i32, i32* %arrayidx78, align 4, !dbg !4479
  %cmp79 = icmp eq i32 %33, 2, !dbg !4479
  br i1 %cmp79, label %cond.true81, label %cond.false82, !dbg !4479

cond.true81:                                      ; preds = %if.end
  %34 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4480
  br label %cond.end84, !dbg !4479

cond.false82:                                     ; preds = %if.end
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4481
  %common = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !4481
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4481
  %36 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !4481
  br label %cond.end84, !dbg !4479

cond.end84:                                       ; preds = %cond.false82, %cond.true81
  %cond85 = phi %union.tree_node* [ %34, %cond.true81 ], [ %36, %cond.false82 ], !dbg !4479
  store %union.tree_node* %cond85, %union.tree_node** %type, align 8, !dbg !4482
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4483
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4485
  %cmp86 = icmp eq %union.tree_node* %37, %38, !dbg !4486
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !4487

if.then88:                                        ; preds = %cond.end84
  br label %if.end826, !dbg !4488

if.end89:                                         ; preds = %cond.end84
  %39 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %base90 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4489
  %40 = bitcast %struct.tree_base* %base90 to i64*, !dbg !4489
  %bf.load91 = load i64, i64* %40, align 8, !dbg !4489
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !4489
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !4489
  %idxprom94 = sext i32 %bf.cast93 to i64, !dbg !4489
  %arrayidx95 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom94, !dbg !4489
  %41 = load i32, i32* %arrayidx95, align 4, !dbg !4489
  %cmp96 = icmp eq i32 %41, 3, !dbg !4489
  br i1 %cmp96, label %lor.lhs.false, label %cond.false126, !dbg !4489

lor.lhs.false:                                    ; preds = %if.end89
  %42 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4489
  %43 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %base98 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4489
  %44 = bitcast %struct.tree_base* %base98 to i64*, !dbg !4489
  %bf.load99 = load i64, i64* %44, align 8, !dbg !4489
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !4489
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !4489
  %idxprom102 = zext i32 %bf.cast101 to i64, !dbg !4489
  %arrayidx103 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom102, !dbg !4489
  %arrayidx104 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx103, i64 0, i64 11, !dbg !4489
  %45 = load i8, i8* %arrayidx104, align 1, !dbg !4489
  %conv105 = zext i8 %45 to i32, !dbg !4489
  %tobool = icmp ne i32 %conv105, 0, !dbg !4489
  br i1 %tobool, label %land.lhs.true, label %cond.false120, !dbg !4489

land.lhs.true:                                    ; preds = %lor.lhs.false
  %46 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %decl_with_rtl = bitcast %union.tree_node* %46 to %struct.tree_decl_with_rtl*, !dbg !4489
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4489
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4489
  %cmp106 = icmp ne %struct.rtx_def* %47, null, !dbg !4489
  br i1 %cmp106, label %cond.true108, label %cond.false120, !dbg !4489

cond.true108:                                     ; preds = %land.lhs.true
  %48 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %decl_with_rtl109 = bitcast %union.tree_node* %48 to %struct.tree_decl_with_rtl*, !dbg !4489
  %rtl110 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl109, i32 0, i32 1, !dbg !4489
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtl110, align 8, !dbg !4489
  %tobool111 = icmp ne %struct.rtx_def* %49, null, !dbg !4489
  br i1 %tobool111, label %cond.true112, label %cond.false115, !dbg !4489

cond.true112:                                     ; preds = %cond.true108
  %50 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %decl_with_rtl113 = bitcast %union.tree_node* %50 to %struct.tree_decl_with_rtl*, !dbg !4489
  %rtl114 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl113, i32 0, i32 1, !dbg !4489
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtl114, align 8, !dbg !4489
  br label %cond.end118, !dbg !4489

cond.false115:                                    ; preds = %cond.true108
  %52 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  call void @make_decl_rtl(%union.tree_node* %52), !dbg !4489
  %53 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4489
  %decl_with_rtl116 = bitcast %union.tree_node* %53 to %struct.tree_decl_with_rtl*, !dbg !4489
  %rtl117 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl116, i32 0, i32 1, !dbg !4489
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtl117, align 8, !dbg !4489
  br label %cond.end118, !dbg !4489

cond.end118:                                      ; preds = %cond.false115, %cond.true112
  %cond119 = phi %struct.rtx_def* [ %51, %cond.true112 ], [ %54, %cond.false115 ], !dbg !4489
  br label %cond.end121, !dbg !4489

cond.false120:                                    ; preds = %land.lhs.true, %lor.lhs.false
  br label %cond.end121, !dbg !4489

cond.end121:                                      ; preds = %cond.false120, %cond.end118
  %cond122 = phi %struct.rtx_def* [ %cond119, %cond.end118 ], [ null, %cond.false120 ], !dbg !4489
  %cmp123 = icmp ne %struct.rtx_def* %42, %cond122, !dbg !4489
  br i1 %cmp123, label %cond.false126, label %cond.true125, !dbg !4489

cond.true125:                                     ; preds = %cond.end121
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4489
  br label %cond.end127, !dbg !4489

cond.false126:                                    ; preds = %cond.end121, %if.end89
  br label %cond.end127, !dbg !4489

cond.end127:                                      ; preds = %cond.false126, %cond.true125
  %cond128 = phi i32 [ 0, %cond.true125 ], [ 0, %cond.false126 ], !dbg !4489
  %55 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4490
  %call129 = call i32 @get_alias_set(%union.tree_node* %55), !dbg !4491
  store i32 %call129, i32* %alias, align 4, !dbg !4492
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4493
  %base130 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !4493
  %57 = bitcast %struct.tree_base* %base130 to i64*, !dbg !4493
  %bf.load131 = load i64, i64* %57, align 8, !dbg !4493
  %bf.lshr132 = lshr i64 %bf.load131, 19, !dbg !4493
  %bf.clear133 = and i64 %bf.lshr132, 1, !dbg !4493
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !4493
  %58 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4494
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4494
  %bf.load135 = load i32, i32* %59, align 8, !dbg !4495
  %bf.lshr136 = lshr i32 %bf.load135, 27, !dbg !4495
  %bf.clear137 = and i32 %bf.lshr136, 1, !dbg !4495
  %or = or i32 %bf.clear137, %bf.cast134, !dbg !4495
  %bf.load138 = load i32, i32* %59, align 8, !dbg !4495
  %bf.value = and i32 %or, 1, !dbg !4495
  %bf.shl = shl i32 %bf.value, 27, !dbg !4495
  %bf.clear139 = and i32 %bf.load138, -134217729, !dbg !4495
  %bf.set = or i32 %bf.clear139, %bf.shl, !dbg !4495
  store i32 %bf.set, i32* %59, align 8, !dbg !4495
  %60 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4496
  %base140 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4496
  %61 = bitcast %struct.tree_base* %base140 to i64*, !dbg !4496
  %bf.load141 = load i64, i64* %61, align 8, !dbg !4496
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !4496
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !4496
  %cmp144 = icmp eq i32 %bf.cast143, 15, !dbg !4496
  br i1 %cmp144, label %lor.end, label %lor.lhs.false146, !dbg !4496

lor.lhs.false146:                                 ; preds = %cond.end127
  %62 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4496
  %base147 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !4496
  %63 = bitcast %struct.tree_base* %base147 to i64*, !dbg !4496
  %bf.load148 = load i64, i64* %63, align 8, !dbg !4496
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !4496
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !4496
  %cmp151 = icmp eq i32 %bf.cast150, 16, !dbg !4496
  br i1 %cmp151, label %lor.end, label %lor.lhs.false153, !dbg !4496

lor.lhs.false153:                                 ; preds = %lor.lhs.false146
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4496
  %base154 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4496
  %65 = bitcast %struct.tree_base* %base154 to i64*, !dbg !4496
  %bf.load155 = load i64, i64* %65, align 8, !dbg !4496
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !4496
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !4496
  %cmp158 = icmp eq i32 %bf.cast157, 17, !dbg !4496
  br i1 %cmp158, label %lor.end, label %lor.lhs.false160, !dbg !4496

lor.lhs.false160:                                 ; preds = %lor.lhs.false153
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4496
  %base161 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !4496
  %67 = bitcast %struct.tree_base* %base161 to i64*, !dbg !4496
  %bf.load162 = load i64, i64* %67, align 8, !dbg !4496
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !4496
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !4496
  %cmp165 = icmp eq i32 %bf.cast164, 18, !dbg !4496
  br i1 %cmp165, label %lor.end, label %lor.rhs, !dbg !4497

lor.rhs:                                          ; preds = %lor.lhs.false160
  %68 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4498
  %base167 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4498
  %69 = bitcast %struct.tree_base* %base167 to i64*, !dbg !4498
  %bf.load168 = load i64, i64* %69, align 8, !dbg !4498
  %bf.clear169 = and i64 %bf.load168, 65535, !dbg !4498
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !4498
  %cmp171 = icmp eq i32 %bf.cast170, 13, !dbg !4499
  br label %lor.end, !dbg !4497

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false160, %lor.lhs.false153, %lor.lhs.false146, %cond.end127
  %70 = phi i1 [ true, %lor.lhs.false160 ], [ true, %lor.lhs.false153 ], [ true, %lor.lhs.false146 ], [ true, %cond.end127 ], [ %cmp171, %lor.rhs ]
  %lor.ext = zext i1 %70 to i32, !dbg !4497
  %71 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4500
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !4500
  %bf.load173 = load i32, i32* %72, align 8, !dbg !4501
  %bf.value174 = and i32 %lor.ext, 1, !dbg !4501
  %bf.shl175 = shl i32 %bf.value174, 28, !dbg !4501
  %bf.clear176 = and i32 %bf.load173, -268435457, !dbg !4501
  %bf.set177 = or i32 %bf.clear176, %bf.shl175, !dbg !4501
  store i32 %bf.set177, i32* %72, align 8, !dbg !4501
  %73 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4502
  %base178 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !4502
  %74 = bitcast %struct.tree_base* %base178 to i64*, !dbg !4502
  %bf.load179 = load i64, i64* %74, align 8, !dbg !4502
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !4502
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !4502
  %cmp182 = icmp eq i32 %bf.cast181, 10, !dbg !4502
  br i1 %cmp182, label %lor.end191, label %lor.rhs184, !dbg !4502

lor.rhs184:                                       ; preds = %lor.end
  %75 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4502
  %base185 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !4502
  %76 = bitcast %struct.tree_base* %base185 to i64*, !dbg !4502
  %bf.load186 = load i64, i64* %76, align 8, !dbg !4502
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !4502
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !4502
  %cmp189 = icmp eq i32 %bf.cast188, 12, !dbg !4502
  br label %lor.end191, !dbg !4502

lor.end191:                                       ; preds = %lor.rhs184, %lor.end
  %77 = phi i1 [ true, %lor.end ], [ %cmp189, %lor.rhs184 ]
  %lor.ext192 = zext i1 %77 to i32, !dbg !4502
  %78 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4503
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !4503
  %bf.load193 = load i32, i32* %79, align 8, !dbg !4504
  %bf.value194 = and i32 %lor.ext192, 1, !dbg !4504
  %bf.shl195 = shl i32 %bf.value194, 30, !dbg !4504
  %bf.clear196 = and i32 %bf.load193, -1073741825, !dbg !4504
  %bf.set197 = or i32 %bf.clear196, %bf.shl195, !dbg !4504
  store i32 %bf.set197, i32* %79, align 8, !dbg !4504
  %80 = load i32, i32* %objectp.addr, align 4, !dbg !4505
  %tobool198 = icmp ne i32 %80, 0, !dbg !4505
  br i1 %tobool198, label %land.lhs.true208, label %lor.lhs.false199, !dbg !4507

lor.lhs.false199:                                 ; preds = %lor.end191
  %81 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4508
  %base200 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !4508
  %82 = bitcast %struct.tree_base* %base200 to i64*, !dbg !4508
  %bf.load201 = load i64, i64* %82, align 8, !dbg !4508
  %bf.clear202 = and i64 %bf.load201, 65535, !dbg !4508
  %bf.cast203 = trunc i64 %bf.clear202 to i32, !dbg !4508
  %idxprom204 = sext i32 %bf.cast203 to i64, !dbg !4508
  %arrayidx205 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom204, !dbg !4508
  %83 = load i32, i32* %arrayidx205, align 4, !dbg !4508
  %cmp206 = icmp eq i32 %83, 3, !dbg !4508
  br i1 %cmp206, label %land.lhs.true208, label %if.end247, !dbg !4509

land.lhs.true208:                                 ; preds = %lor.lhs.false199, %lor.end191
  %84 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4510
  %base209 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !4510
  %85 = bitcast %struct.tree_base* %base209 to i64*, !dbg !4510
  %bf.load210 = load i64, i64* %85, align 8, !dbg !4510
  %bf.clear211 = and i64 %bf.load210, 65535, !dbg !4510
  %bf.cast212 = trunc i64 %bf.clear211 to i32, !dbg !4510
  %cmp213 = icmp eq i32 %bf.cast212, 15, !dbg !4510
  br i1 %cmp213, label %if.end247, label %lor.lhs.false215, !dbg !4510

lor.lhs.false215:                                 ; preds = %land.lhs.true208
  %86 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4510
  %base216 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !4510
  %87 = bitcast %struct.tree_base* %base216 to i64*, !dbg !4510
  %bf.load217 = load i64, i64* %87, align 8, !dbg !4510
  %bf.clear218 = and i64 %bf.load217, 65535, !dbg !4510
  %bf.cast219 = trunc i64 %bf.clear218 to i32, !dbg !4510
  %cmp220 = icmp eq i32 %bf.cast219, 16, !dbg !4510
  br i1 %cmp220, label %if.end247, label %lor.lhs.false222, !dbg !4510

lor.lhs.false222:                                 ; preds = %lor.lhs.false215
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4510
  %base223 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !4510
  %89 = bitcast %struct.tree_base* %base223 to i64*, !dbg !4510
  %bf.load224 = load i64, i64* %89, align 8, !dbg !4510
  %bf.clear225 = and i64 %bf.load224, 65535, !dbg !4510
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !4510
  %cmp227 = icmp eq i32 %bf.cast226, 17, !dbg !4510
  br i1 %cmp227, label %if.end247, label %lor.lhs.false229, !dbg !4510

lor.lhs.false229:                                 ; preds = %lor.lhs.false222
  %90 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4510
  %base230 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !4510
  %91 = bitcast %struct.tree_base* %base230 to i64*, !dbg !4510
  %bf.load231 = load i64, i64* %91, align 8, !dbg !4510
  %bf.clear232 = and i64 %bf.load231, 65535, !dbg !4510
  %bf.cast233 = trunc i64 %bf.clear232 to i32, !dbg !4510
  %cmp234 = icmp eq i32 %bf.cast233, 18, !dbg !4510
  br i1 %cmp234, label %if.end247, label %land.lhs.true236, !dbg !4511

land.lhs.true236:                                 ; preds = %lor.lhs.false229
  %92 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4512
  %base237 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !4512
  %93 = bitcast %struct.tree_base* %base237 to i64*, !dbg !4512
  %bf.load238 = load i64, i64* %93, align 8, !dbg !4512
  %bf.clear239 = and i64 %bf.load238, 65535, !dbg !4512
  %bf.cast240 = trunc i64 %bf.clear239 to i32, !dbg !4512
  %cmp241 = icmp ne i32 %bf.cast240, 13, !dbg !4513
  br i1 %cmp241, label %if.then243, label %if.end247, !dbg !4514

if.then243:                                       ; preds = %land.lhs.true236
  %94 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4515
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !4515
  %bf.load244 = load i32, i32* %95, align 8, !dbg !4516
  %bf.clear245 = and i32 %bf.load244, 2147483647, !dbg !4516
  %bf.set246 = or i32 %bf.clear245, -2147483648, !dbg !4516
  store i32 %bf.set246, i32* %95, align 8, !dbg !4516
  br label %if.end247, !dbg !4515

if.end247:                                        ; preds = %if.then243, %land.lhs.true236, %lor.lhs.false229, %lor.lhs.false222, %lor.lhs.false215, %land.lhs.true208, %lor.lhs.false199
  %96 = load i32, i32* %objectp.addr, align 4, !dbg !4517
  %tobool248 = icmp ne i32 %96, 0, !dbg !4517
  br i1 %tobool248, label %if.then270, label %lor.lhs.false249, !dbg !4519

lor.lhs.false249:                                 ; preds = %if.end247
  %97 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4520
  %base250 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !4520
  %98 = bitcast %struct.tree_base* %base250 to i64*, !dbg !4520
  %bf.load251 = load i64, i64* %98, align 8, !dbg !4520
  %bf.clear252 = and i64 %bf.load251, 65535, !dbg !4520
  %bf.cast253 = trunc i64 %bf.clear252 to i32, !dbg !4520
  %cmp254 = icmp eq i32 %bf.cast253, 47, !dbg !4521
  br i1 %cmp254, label %if.then270, label %lor.lhs.false256, !dbg !4522

lor.lhs.false256:                                 ; preds = %lor.lhs.false249
  %99 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4523
  %base257 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !4523
  %100 = bitcast %struct.tree_base* %base257 to i64*, !dbg !4523
  %bf.load258 = load i64, i64* %100, align 8, !dbg !4523
  %bf.clear259 = and i64 %bf.load258, 65535, !dbg !4523
  %bf.cast260 = trunc i64 %bf.clear259 to i32, !dbg !4523
  %cmp261 = icmp eq i32 %bf.cast260, 48, !dbg !4524
  br i1 %cmp261, label %if.then270, label %lor.lhs.false263, !dbg !4525

lor.lhs.false263:                                 ; preds = %lor.lhs.false256
  %101 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4526
  %base264 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !4526
  %102 = bitcast %struct.tree_base* %base264 to i64*, !dbg !4526
  %bf.load265 = load i64, i64* %102, align 8, !dbg !4526
  %bf.lshr266 = lshr i64 %bf.load265, 25, !dbg !4526
  %bf.clear267 = and i64 %bf.lshr266, 1, !dbg !4526
  %bf.cast268 = trunc i64 %bf.clear267 to i32, !dbg !4526
  %tobool269 = icmp ne i32 %bf.cast268, 0, !dbg !4526
  br i1 %tobool269, label %if.then270, label %if.else, !dbg !4527

if.then270:                                       ; preds = %lor.lhs.false263, %lor.lhs.false256, %lor.lhs.false249, %if.end247
  %103 = load i32, i32* %align, align 4, !dbg !4528
  %104 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4528
  %type271 = bitcast %union.tree_node* %104 to %struct.tree_type*, !dbg !4528
  %align272 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type271, i32 0, i32 7, !dbg !4528
  %105 = load i32, i32* %align272, align 8, !dbg !4528
  %cmp273 = icmp ugt i32 %103, %105, !dbg !4528
  br i1 %cmp273, label %cond.true275, label %cond.false276, !dbg !4528

cond.true275:                                     ; preds = %if.then270
  %106 = load i32, i32* %align, align 4, !dbg !4528
  br label %cond.end279, !dbg !4528

cond.false276:                                    ; preds = %if.then270
  %107 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4528
  %type277 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !4528
  %align278 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type277, i32 0, i32 7, !dbg !4528
  %108 = load i32, i32* %align278, align 8, !dbg !4528
  br label %cond.end279, !dbg !4528

cond.end279:                                      ; preds = %cond.false276, %cond.true275
  %cond280 = phi i32 [ %106, %cond.true275 ], [ %108, %cond.false276 ], !dbg !4528
  store i32 %cond280, i32* %align, align 4, !dbg !4529
  br label %if.end300, !dbg !4530

if.else:                                          ; preds = %lor.lhs.false263
  %109 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4531
  %base281 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !4531
  %110 = bitcast %struct.tree_base* %base281 to i64*, !dbg !4531
  %bf.load282 = load i64, i64* %110, align 8, !dbg !4531
  %bf.clear283 = and i64 %bf.load282, 65535, !dbg !4531
  %bf.cast284 = trunc i64 %bf.clear283 to i32, !dbg !4531
  %cmp285 = icmp eq i32 %bf.cast284, 49, !dbg !4533
  br i1 %cmp285, label %if.then287, label %if.end299, !dbg !4534

if.then287:                                       ; preds = %if.else
  %111 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4535
  %exp = bitcast %union.tree_node* %111 to %struct.tree_exp*, !dbg !4535
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4535
  %arrayidx288 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4535
  %112 = load %union.tree_node*, %union.tree_node** %arrayidx288, align 8, !dbg !4535
  %call289 = call i32 @integer_zerop(%union.tree_node* %112), !dbg !4538
  %tobool290 = icmp ne i32 %call289, 0, !dbg !4538
  br i1 %tobool290, label %if.then291, label %if.else292, !dbg !4539

if.then291:                                       ; preds = %if.then287
  store i32 8, i32* %align, align 4, !dbg !4540
  br label %if.end298, !dbg !4541

if.else292:                                       ; preds = %if.then287
  %113 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4542
  %exp293 = bitcast %union.tree_node* %113 to %struct.tree_exp*, !dbg !4542
  %operands294 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp293, i32 0, i32 3, !dbg !4542
  %arrayidx295 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands294, i64 0, i64 1, !dbg !4542
  %114 = load %union.tree_node*, %union.tree_node** %arrayidx295, align 8, !dbg !4542
  %call296 = call i64 @tree_low_cst(%union.tree_node* %114, i32 1), !dbg !4543
  %conv297 = trunc i64 %call296 to i32, !dbg !4543
  store i32 %conv297, i32* %align, align 4, !dbg !4544
  br label %if.end298

if.end298:                                        ; preds = %if.else292, %if.then291
  br label %if.end299, !dbg !4545

if.end299:                                        ; preds = %if.end298, %if.else
  br label %if.end300

if.end300:                                        ; preds = %if.end299, %cond.end279
  %115 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4546
  %type301 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !4546
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type301, i32 0, i32 3, !dbg !4546
  %116 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4546
  %tobool302 = icmp ne %union.tree_node* %116, null, !dbg !4546
  br i1 %tobool302, label %land.lhs.true303, label %if.end313, !dbg !4548

land.lhs.true303:                                 ; preds = %if.end300
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4549
  %type304 = bitcast %union.tree_node* %117 to %struct.tree_type*, !dbg !4549
  %size_unit305 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type304, i32 0, i32 3, !dbg !4549
  %118 = load %union.tree_node*, %union.tree_node** %size_unit305, align 8, !dbg !4549
  %call306 = call i32 @host_integerp(%union.tree_node* %118, i32 1), !dbg !4550
  %tobool307 = icmp ne i32 %call306, 0, !dbg !4550
  br i1 %tobool307, label %if.then308, label %if.end313, !dbg !4551

if.then308:                                       ; preds = %land.lhs.true303
  %119 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4552
  %type309 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !4552
  %size_unit310 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type309, i32 0, i32 3, !dbg !4552
  %120 = load %union.tree_node*, %union.tree_node** %size_unit310, align 8, !dbg !4552
  %call311 = call i64 @tree_low_cst(%union.tree_node* %120, i32 1), !dbg !4552
  %call312 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call311), !dbg !4552
  store %struct.rtx_def* %call312, %struct.rtx_def** %size, align 8, !dbg !4553
  br label %if.end313, !dbg !4554

if.end313:                                        ; preds = %if.then308, %land.lhs.true303, %if.end300
  %121 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4555
  %base314 = bitcast %union.tree_node* %121 to %struct.tree_base*, !dbg !4555
  %122 = bitcast %struct.tree_base* %base314 to i64*, !dbg !4555
  %bf.load315 = load i64, i64* %122, align 8, !dbg !4555
  %bf.clear316 = and i64 %bf.load315, 65535, !dbg !4555
  %bf.cast317 = trunc i64 %bf.clear316 to i32, !dbg !4555
  %idxprom318 = sext i32 %bf.cast317 to i64, !dbg !4555
  %arrayidx319 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom318, !dbg !4555
  %123 = load i32, i32* %arrayidx319, align 4, !dbg !4555
  %cmp320 = icmp eq i32 %123, 2, !dbg !4555
  br i1 %cmp320, label %if.end752, label %if.then322, !dbg !4557

if.then322:                                       ; preds = %if.end313
  call void @llvm.dbg.declare(metadata %union.tree_node** %base323, metadata !4558, metadata !DIExpression()), !dbg !4560
  call void @llvm.dbg.declare(metadata i8* %align_computed, metadata !4561, metadata !DIExpression()), !dbg !4562
  store i8 0, i8* %align_computed, align 1, !dbg !4562
  %124 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4563
  %base324 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !4563
  %125 = bitcast %struct.tree_base* %base324 to i64*, !dbg !4563
  %bf.load325 = load i64, i64* %125, align 8, !dbg !4563
  %bf.lshr326 = lshr i64 %bf.load325, 19, !dbg !4563
  %bf.clear327 = and i64 %bf.lshr326, 1, !dbg !4563
  %bf.cast328 = trunc i64 %bf.clear327 to i32, !dbg !4563
  %tobool329 = icmp ne i32 %bf.cast328, 0, !dbg !4563
  br i1 %tobool329, label %if.then330, label %if.end334, !dbg !4565

if.then330:                                       ; preds = %if.then322
  %126 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4566
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !4566
  %bf.load331 = load i32, i32* %127, align 8, !dbg !4567
  %bf.clear332 = and i32 %bf.load331, -134217729, !dbg !4567
  %bf.set333 = or i32 %bf.clear332, 134217728, !dbg !4567
  store i32 %bf.set333, i32* %127, align 8, !dbg !4567
  br label %if.end334, !dbg !4566

if.end334:                                        ; preds = %if.then330, %if.then322
  br label %while.cond, !dbg !4568

while.cond:                                       ; preds = %while.body, %if.end334
  %128 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4569
  %base335 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !4569
  %129 = bitcast %struct.tree_base* %base335 to i64*, !dbg !4569
  %bf.load336 = load i64, i64* %129, align 8, !dbg !4569
  %bf.clear337 = and i64 %bf.load336, 65535, !dbg !4569
  %bf.cast338 = trunc i64 %bf.clear337 to i32, !dbg !4569
  %cmp339 = icmp eq i32 %bf.cast338, 116, !dbg !4569
  br i1 %cmp339, label %lor.end362, label %lor.lhs.false341, !dbg !4569

lor.lhs.false341:                                 ; preds = %while.cond
  %130 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4569
  %base342 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !4569
  %131 = bitcast %struct.tree_base* %base342 to i64*, !dbg !4569
  %bf.load343 = load i64, i64* %131, align 8, !dbg !4569
  %bf.clear344 = and i64 %bf.load343, 65535, !dbg !4569
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !4569
  %cmp346 = icmp eq i32 %bf.cast345, 113, !dbg !4569
  br i1 %cmp346, label %lor.end362, label %lor.lhs.false348, !dbg !4570

lor.lhs.false348:                                 ; preds = %lor.lhs.false341
  %132 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4571
  %base349 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !4571
  %133 = bitcast %struct.tree_base* %base349 to i64*, !dbg !4571
  %bf.load350 = load i64, i64* %133, align 8, !dbg !4571
  %bf.clear351 = and i64 %bf.load350, 65535, !dbg !4571
  %bf.cast352 = trunc i64 %bf.clear351 to i32, !dbg !4571
  %cmp353 = icmp eq i32 %bf.cast352, 118, !dbg !4572
  br i1 %cmp353, label %lor.end362, label %lor.rhs355, !dbg !4573

lor.rhs355:                                       ; preds = %lor.lhs.false348
  %134 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4574
  %base356 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !4574
  %135 = bitcast %struct.tree_base* %base356 to i64*, !dbg !4574
  %bf.load357 = load i64, i64* %135, align 8, !dbg !4574
  %bf.clear358 = and i64 %bf.load357, 65535, !dbg !4574
  %bf.cast359 = trunc i64 %bf.clear358 to i32, !dbg !4574
  %cmp360 = icmp eq i32 %bf.cast359, 120, !dbg !4575
  br label %lor.end362, !dbg !4573

lor.end362:                                       ; preds = %lor.rhs355, %lor.lhs.false348, %lor.lhs.false341, %while.cond
  %136 = phi i1 [ true, %lor.lhs.false348 ], [ true, %lor.lhs.false341 ], [ true, %while.cond ], [ %cmp360, %lor.rhs355 ]
  br i1 %136, label %while.body, label %while.end, !dbg !4568

while.body:                                       ; preds = %lor.end362
  %137 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4576
  %exp364 = bitcast %union.tree_node* %137 to %struct.tree_exp*, !dbg !4576
  %operands365 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp364, i32 0, i32 3, !dbg !4576
  %arrayidx366 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands365, i64 0, i64 0, !dbg !4576
  %138 = load %union.tree_node*, %union.tree_node** %arrayidx366, align 8, !dbg !4576
  store %union.tree_node* %138, %union.tree_node** %t.addr, align 8, !dbg !4577
  br label %while.cond, !dbg !4568, !llvm.loop !4578

while.end:                                        ; preds = %lor.end362
  %139 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4579
  store %union.tree_node* %139, %union.tree_node** %base323, align 8, !dbg !4580
  br label %while.cond367, !dbg !4581

while.cond367:                                    ; preds = %while.body397, %while.end
  %140 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4582
  %base368 = bitcast %union.tree_node* %140 to %struct.tree_base*, !dbg !4582
  %141 = bitcast %struct.tree_base* %base368 to i64*, !dbg !4582
  %bf.load369 = load i64, i64* %141, align 8, !dbg !4582
  %bf.clear370 = and i64 %bf.load369, 65535, !dbg !4582
  %bf.cast371 = trunc i64 %bf.clear370 to i32, !dbg !4582
  %cmp372 = icmp eq i32 %bf.cast371, 41, !dbg !4583
  br i1 %cmp372, label %lor.end395, label %lor.lhs.false374, !dbg !4584

lor.lhs.false374:                                 ; preds = %while.cond367
  %142 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4585
  %base375 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !4585
  %143 = bitcast %struct.tree_base* %base375 to i64*, !dbg !4585
  %bf.load376 = load i64, i64* %143, align 8, !dbg !4585
  %bf.clear377 = and i64 %bf.load376, 65535, !dbg !4585
  %bf.cast378 = trunc i64 %bf.clear377 to i32, !dbg !4585
  %cmp379 = icmp eq i32 %bf.cast378, 43, !dbg !4586
  br i1 %cmp379, label %lor.end395, label %lor.lhs.false381, !dbg !4587

lor.lhs.false381:                                 ; preds = %lor.lhs.false374
  %144 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4588
  %base382 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !4588
  %145 = bitcast %struct.tree_base* %base382 to i64*, !dbg !4588
  %bf.load383 = load i64, i64* %145, align 8, !dbg !4588
  %bf.clear384 = and i64 %bf.load383, 65535, !dbg !4588
  %bf.cast385 = trunc i64 %bf.clear384 to i32, !dbg !4588
  %cmp386 = icmp eq i32 %bf.cast385, 44, !dbg !4589
  br i1 %cmp386, label %lor.end395, label %lor.rhs388, !dbg !4590

lor.rhs388:                                       ; preds = %lor.lhs.false381
  %146 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4591
  %base389 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !4591
  %147 = bitcast %struct.tree_base* %base389 to i64*, !dbg !4591
  %bf.load390 = load i64, i64* %147, align 8, !dbg !4591
  %bf.clear391 = and i64 %bf.load390, 65535, !dbg !4591
  %bf.cast392 = trunc i64 %bf.clear391 to i32, !dbg !4591
  %cmp393 = icmp eq i32 %bf.cast392, 42, !dbg !4592
  br label %lor.end395, !dbg !4590

lor.end395:                                       ; preds = %lor.rhs388, %lor.lhs.false381, %lor.lhs.false374, %while.cond367
  %148 = phi i1 [ true, %lor.lhs.false381 ], [ true, %lor.lhs.false374 ], [ true, %while.cond367 ], [ %cmp393, %lor.rhs388 ]
  br i1 %148, label %while.body397, label %while.end401, !dbg !4581

while.body397:                                    ; preds = %lor.end395
  %149 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4593
  %exp398 = bitcast %union.tree_node* %149 to %struct.tree_exp*, !dbg !4593
  %operands399 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp398, i32 0, i32 3, !dbg !4593
  %arrayidx400 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands399, i64 0, i64 0, !dbg !4593
  %150 = load %union.tree_node*, %union.tree_node** %arrayidx400, align 8, !dbg !4593
  store %union.tree_node* %150, %union.tree_node** %base323, align 8, !dbg !4594
  br label %while.cond367, !dbg !4581, !llvm.loop !4595

while.end401:                                     ; preds = %lor.end395
  %151 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4596
  %base402 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !4596
  %152 = bitcast %struct.tree_base* %base402 to i64*, !dbg !4596
  %bf.load403 = load i64, i64* %152, align 8, !dbg !4596
  %bf.clear404 = and i64 %bf.load403, 65535, !dbg !4596
  %bf.cast405 = trunc i64 %bf.clear404 to i32, !dbg !4596
  %idxprom406 = sext i32 %bf.cast405 to i64, !dbg !4596
  %arrayidx407 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom406, !dbg !4596
  %153 = load i32, i32* %arrayidx407, align 4, !dbg !4596
  %cmp408 = icmp eq i32 %153, 3, !dbg !4596
  br i1 %cmp408, label %if.then410, label %if.else434, !dbg !4598

if.then410:                                       ; preds = %while.end401
  %154 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4599
  %base411 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !4599
  %155 = bitcast %struct.tree_base* %base411 to i64*, !dbg !4599
  %bf.load412 = load i64, i64* %155, align 8, !dbg !4599
  %bf.clear413 = and i64 %bf.load412, 65535, !dbg !4599
  %bf.cast414 = trunc i64 %bf.clear413 to i32, !dbg !4599
  %idxprom415 = zext i32 %bf.cast414 to i64, !dbg !4599
  %arrayidx416 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom415, !dbg !4599
  %arrayidx417 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx416, i64 0, i64 13, !dbg !4599
  %156 = load i8, i8* %arrayidx417, align 1, !dbg !4599
  %tobool418 = icmp ne i8 %156, 0, !dbg !4599
  br i1 %tobool418, label %if.then419, label %if.else429, !dbg !4602

if.then419:                                       ; preds = %if.then410
  %157 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4603
  %decl_with_vis = bitcast %union.tree_node* %157 to %struct.tree_decl_with_vis*, !dbg !4603
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4603
  %158 = bitcast i24* %weak_flag to i32*, !dbg !4603
  %bf.load420 = load i32, i32* %158, align 8, !dbg !4603
  %bf.lshr421 = lshr i32 %bf.load420, 7, !dbg !4603
  %bf.clear422 = and i32 %bf.lshr421, 1, !dbg !4603
  %tobool423 = icmp ne i32 %bf.clear422, 0, !dbg !4604
  %lnot = xor i1 %tobool423, true, !dbg !4604
  %lnot.ext = zext i1 %lnot to i32, !dbg !4604
  %159 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4605
  %160 = bitcast %struct.rtx_def* %159 to i32*, !dbg !4605
  %bf.load424 = load i32, i32* %160, align 8, !dbg !4606
  %bf.value425 = and i32 %lnot.ext, 1, !dbg !4606
  %bf.shl426 = shl i32 %bf.value425, 25, !dbg !4606
  %bf.clear427 = and i32 %bf.load424, -33554433, !dbg !4606
  %bf.set428 = or i32 %bf.clear427, %bf.shl426, !dbg !4606
  store i32 %bf.set428, i32* %160, align 8, !dbg !4606
  br label %if.end433, !dbg !4605

if.else429:                                       ; preds = %if.then410
  %161 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4607
  %162 = bitcast %struct.rtx_def* %161 to i32*, !dbg !4607
  %bf.load430 = load i32, i32* %162, align 8, !dbg !4608
  %bf.clear431 = and i32 %bf.load430, -33554433, !dbg !4608
  %bf.set432 = or i32 %bf.clear431, 33554432, !dbg !4608
  store i32 %bf.set432, i32* %162, align 8, !dbg !4608
  br label %if.end433

if.end433:                                        ; preds = %if.else429, %if.then419
  br label %if.end445, !dbg !4609

if.else434:                                       ; preds = %while.end401
  %163 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4610
  %base435 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !4610
  %164 = bitcast %struct.tree_base* %base435 to i64*, !dbg !4610
  %bf.load436 = load i64, i64* %164, align 8, !dbg !4610
  %bf.lshr437 = lshr i64 %bf.load436, 25, !dbg !4610
  %bf.clear438 = and i64 %bf.lshr437, 1, !dbg !4610
  %bf.cast439 = trunc i64 %bf.clear438 to i32, !dbg !4610
  %165 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4611
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !4611
  %bf.load440 = load i32, i32* %166, align 8, !dbg !4612
  %bf.value441 = and i32 %bf.cast439, 1, !dbg !4612
  %bf.shl442 = shl i32 %bf.value441, 25, !dbg !4612
  %bf.clear443 = and i32 %bf.load440, -33554433, !dbg !4612
  %bf.set444 = or i32 %bf.clear443, %bf.shl442, !dbg !4612
  store i32 %bf.set444, i32* %166, align 8, !dbg !4612
  br label %if.end445

if.end445:                                        ; preds = %if.else434, %if.end433
  %167 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4613
  %call446 = call %union.tree_node* @get_base_address(%union.tree_node* %167), !dbg !4614
  store %union.tree_node* %call446, %union.tree_node** %base323, align 8, !dbg !4615
  %168 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4616
  %tobool447 = icmp ne %union.tree_node* %168, null, !dbg !4616
  br i1 %tobool447, label %land.lhs.true448, label %if.end501, !dbg !4618

land.lhs.true448:                                 ; preds = %if.end445
  %169 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4619
  %base449 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !4619
  %170 = bitcast %struct.tree_base* %base449 to i64*, !dbg !4619
  %bf.load450 = load i64, i64* %170, align 8, !dbg !4619
  %bf.clear451 = and i64 %bf.load450, 65535, !dbg !4619
  %bf.cast452 = trunc i64 %bf.clear451 to i32, !dbg !4619
  %idxprom453 = sext i32 %bf.cast452 to i64, !dbg !4619
  %arrayidx454 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom453, !dbg !4619
  %171 = load i32, i32* %arrayidx454, align 4, !dbg !4619
  %cmp455 = icmp eq i32 %171, 3, !dbg !4619
  br i1 %cmp455, label %land.lhs.true457, label %if.end501, !dbg !4620

land.lhs.true457:                                 ; preds = %land.lhs.true448
  %172 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4621
  %base458 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !4621
  %173 = bitcast %struct.tree_base* %base458 to i64*, !dbg !4621
  %bf.load459 = load i64, i64* %173, align 8, !dbg !4621
  %bf.lshr460 = lshr i64 %bf.load459, 20, !dbg !4621
  %bf.clear461 = and i64 %bf.lshr460, 1, !dbg !4621
  %bf.cast462 = trunc i64 %bf.clear461 to i32, !dbg !4621
  %tobool463 = icmp ne i32 %bf.cast462, 0, !dbg !4621
  br i1 %tobool463, label %land.lhs.true464, label %if.end501, !dbg !4622

land.lhs.true464:                                 ; preds = %land.lhs.true457
  %174 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4623
  %base465 = bitcast %union.tree_node* %174 to %struct.tree_base*, !dbg !4623
  %175 = bitcast %struct.tree_base* %base465 to i64*, !dbg !4623
  %bf.load466 = load i64, i64* %175, align 8, !dbg !4623
  %bf.lshr467 = lshr i64 %bf.load466, 26, !dbg !4623
  %bf.clear468 = and i64 %bf.lshr467, 1, !dbg !4623
  %bf.cast469 = trunc i64 %bf.clear468 to i32, !dbg !4623
  %tobool470 = icmp ne i32 %bf.cast469, 0, !dbg !4623
  br i1 %tobool470, label %if.then477, label %lor.lhs.false471, !dbg !4624

lor.lhs.false471:                                 ; preds = %land.lhs.true464
  %176 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4625
  %decl_common = bitcast %union.tree_node* %176 to %struct.tree_decl_common*, !dbg !4625
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4625
  %177 = bitcast i40* %decl_flag_1 to i64*, !dbg !4625
  %bf.load472 = load i64, i64* %177, align 8, !dbg !4625
  %bf.lshr473 = lshr i64 %bf.load472, 25, !dbg !4625
  %bf.clear474 = and i64 %bf.lshr473, 1, !dbg !4625
  %bf.cast475 = trunc i64 %bf.clear474 to i32, !dbg !4625
  %tobool476 = icmp ne i32 %bf.cast475, 0, !dbg !4625
  br i1 %tobool476, label %if.then477, label %if.end501, !dbg !4626

if.then477:                                       ; preds = %lor.lhs.false471, %land.lhs.true464
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_type, metadata !4627, metadata !DIExpression()), !dbg !4629
  %178 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4630
  %common478 = bitcast %union.tree_node* %178 to %struct.tree_common*, !dbg !4630
  %type479 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common478, i32 0, i32 2, !dbg !4630
  %179 = load %union.tree_node*, %union.tree_node** %type479, align 8, !dbg !4630
  store %union.tree_node* %179, %union.tree_node** %base_type, align 8, !dbg !4629
  %180 = load %union.tree_node*, %union.tree_node** %base_type, align 8, !dbg !4631
  %tobool480 = icmp ne %union.tree_node* %180, null, !dbg !4631
  br i1 %tobool480, label %land.lhs.true481, label %cond.false495, !dbg !4631

land.lhs.true481:                                 ; preds = %if.then477
  %181 = load %union.tree_node*, %union.tree_node** %base_type, align 8, !dbg !4631
  %type482 = bitcast %union.tree_node* %181 to %struct.tree_type*, !dbg !4631
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type482, i32 0, i32 6, !dbg !4631
  %bf.load483 = load i32, i32* %needs_constructing_flag, align 4, !dbg !4631
  %bf.lshr484 = lshr i32 %bf.load483, 11, !dbg !4631
  %bf.clear485 = and i32 %bf.lshr484, 1, !dbg !4631
  %tobool486 = icmp ne i32 %bf.clear485, 0, !dbg !4631
  br i1 %tobool486, label %lor.lhs.false487, label %cond.false495, !dbg !4631

lor.lhs.false487:                                 ; preds = %land.lhs.true481
  %182 = load %union.tree_node*, %union.tree_node** %base323, align 8, !dbg !4631
  %decl_common488 = bitcast %union.tree_node* %182 to %struct.tree_decl_common*, !dbg !4631
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common488, i32 0, i32 2, !dbg !4631
  %183 = bitcast i40* %artificial_flag to i64*, !dbg !4631
  %bf.load489 = load i64, i64* %183, align 8, !dbg !4631
  %bf.lshr490 = lshr i64 %bf.load489, 12, !dbg !4631
  %bf.clear491 = and i64 %bf.lshr490, 1, !dbg !4631
  %bf.cast492 = trunc i64 %bf.clear491 to i32, !dbg !4631
  %tobool493 = icmp ne i32 %bf.cast492, 0, !dbg !4631
  br i1 %tobool493, label %cond.false495, label %cond.true494, !dbg !4631

cond.true494:                                     ; preds = %lor.lhs.false487
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1647, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4631
  br label %cond.end496, !dbg !4631

cond.false495:                                    ; preds = %lor.lhs.false487, %land.lhs.true481, %if.then477
  br label %cond.end496, !dbg !4631

cond.end496:                                      ; preds = %cond.false495, %cond.true494
  %cond497 = phi i32 [ 0, %cond.true494 ], [ 0, %cond.false495 ], !dbg !4631
  %184 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4632
  %185 = bitcast %struct.rtx_def* %184 to i32*, !dbg !4632
  %bf.load498 = load i32, i32* %185, align 8, !dbg !4633
  %bf.clear499 = and i32 %bf.load498, -67108865, !dbg !4633
  %bf.set500 = or i32 %bf.clear499, 67108864, !dbg !4633
  store i32 %bf.set500, i32* %185, align 8, !dbg !4633
  br label %if.end501, !dbg !4634

if.end501:                                        ; preds = %cond.end496, %lor.lhs.false471, %land.lhs.true457, %land.lhs.true448, %if.end445
  %186 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4635
  %call502 = call zeroext i8 @component_uses_parent_alias_set(%union.tree_node* %186), !dbg !4637
  %tobool503 = icmp ne i8 %call502, 0, !dbg !4637
  br i1 %tobool503, label %if.then504, label %if.end508, !dbg !4638

if.then504:                                       ; preds = %if.end501
  %187 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4639
  %188 = bitcast %struct.rtx_def* %187 to i32*, !dbg !4639
  %bf.load505 = load i32, i32* %188, align 8, !dbg !4640
  %bf.clear506 = and i32 %bf.load505, -16777217, !dbg !4640
  %bf.set507 = or i32 %bf.clear506, 16777216, !dbg !4640
  store i32 %bf.set507, i32* %188, align 8, !dbg !4640
  br label %if.end508, !dbg !4639

if.end508:                                        ; preds = %if.then504, %if.end501
  %189 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4641
  %base509 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !4641
  %190 = bitcast %struct.tree_base* %base509 to i64*, !dbg !4641
  %bf.load510 = load i64, i64* %190, align 8, !dbg !4641
  %bf.clear511 = and i64 %bf.load510, 65535, !dbg !4641
  %bf.cast512 = trunc i64 %bf.clear511 to i32, !dbg !4641
  %idxprom513 = sext i32 %bf.cast512 to i64, !dbg !4641
  %arrayidx514 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom513, !dbg !4641
  %191 = load i32, i32* %arrayidx514, align 4, !dbg !4641
  %cmp515 = icmp eq i32 %191, 3, !dbg !4641
  br i1 %cmp515, label %if.then517, label %if.else536, !dbg !4643

if.then517:                                       ; preds = %if.end508
  %192 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4644
  store %union.tree_node* %192, %union.tree_node** %expr, align 8, !dbg !4646
  %193 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4647
  store %struct.rtx_def* %193, %struct.rtx_def** %offset, align 8, !dbg !4648
  %194 = load i64, i64* %bitpos.addr, align 8, !dbg !4649
  store i64 %194, i64* %apply_bitpos, align 8, !dbg !4650
  %195 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4651
  %decl_common518 = bitcast %union.tree_node* %195 to %struct.tree_decl_common*, !dbg !4651
  %size_unit519 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common518, i32 0, i32 4, !dbg !4651
  %196 = load %union.tree_node*, %union.tree_node** %size_unit519, align 8, !dbg !4651
  %tobool520 = icmp ne %union.tree_node* %196, null, !dbg !4651
  br i1 %tobool520, label %land.lhs.true521, label %cond.false531, !dbg !4652

land.lhs.true521:                                 ; preds = %if.then517
  %197 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4653
  %decl_common522 = bitcast %union.tree_node* %197 to %struct.tree_decl_common*, !dbg !4653
  %size_unit523 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common522, i32 0, i32 4, !dbg !4653
  %198 = load %union.tree_node*, %union.tree_node** %size_unit523, align 8, !dbg !4653
  %call524 = call i32 @host_integerp(%union.tree_node* %198, i32 1), !dbg !4654
  %tobool525 = icmp ne i32 %call524, 0, !dbg !4654
  br i1 %tobool525, label %cond.true526, label %cond.false531, !dbg !4651

cond.true526:                                     ; preds = %land.lhs.true521
  %199 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4655
  %decl_common527 = bitcast %union.tree_node* %199 to %struct.tree_decl_common*, !dbg !4655
  %size_unit528 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common527, i32 0, i32 4, !dbg !4655
  %200 = load %union.tree_node*, %union.tree_node** %size_unit528, align 8, !dbg !4655
  %call529 = call i64 @tree_low_cst(%union.tree_node* %200, i32 1), !dbg !4655
  %call530 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call529), !dbg !4655
  br label %cond.end532, !dbg !4651

cond.false531:                                    ; preds = %land.lhs.true521, %if.then517
  br label %cond.end532, !dbg !4651

cond.end532:                                      ; preds = %cond.false531, %cond.true526
  %cond533 = phi %struct.rtx_def* [ %call530, %cond.true526 ], [ null, %cond.false531 ], !dbg !4651
  store %struct.rtx_def* %cond533, %struct.rtx_def** %size, align 8, !dbg !4656
  %201 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4657
  %decl_common534 = bitcast %union.tree_node* %201 to %struct.tree_decl_common*, !dbg !4657
  %align535 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common534, i32 0, i32 3, !dbg !4657
  %202 = load i32, i32* %align535, align 8, !dbg !4657
  store i32 %202, i32* %align, align 4, !dbg !4658
  store i8 1, i8* %align_computed, align 1, !dbg !4659
  br label %if.end716, !dbg !4660

if.else536:                                       ; preds = %if.end508
  %203 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4661
  %base537 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !4661
  %204 = bitcast %struct.tree_base* %base537 to i64*, !dbg !4661
  %bf.load538 = load i64, i64* %204, align 8, !dbg !4661
  %bf.clear539 = and i64 %bf.load538, 65535, !dbg !4661
  %bf.cast540 = trunc i64 %bf.clear539 to i32, !dbg !4661
  %idxprom541 = sext i32 %bf.cast540 to i64, !dbg !4661
  %arrayidx542 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom541, !dbg !4661
  %205 = load i32, i32* %arrayidx542, align 4, !dbg !4661
  %cmp543 = icmp eq i32 %205, 1, !dbg !4661
  br i1 %cmp543, label %if.then545, label %if.else549, !dbg !4663

if.then545:                                       ; preds = %if.else536
  %206 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4664
  %type546 = bitcast %union.tree_node* %206 to %struct.tree_type*, !dbg !4664
  %align547 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type546, i32 0, i32 7, !dbg !4664
  %207 = load i32, i32* %align547, align 8, !dbg !4664
  store i32 %207, i32* %align, align 4, !dbg !4666
  %208 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4667
  %209 = load i32, i32* %align, align 4, !dbg !4667
  %call548 = call i32 @ix86_constant_alignment(%union.tree_node* %208, i32 %209), !dbg !4667
  store i32 %call548, i32* %align, align 4, !dbg !4668
  store i8 1, i8* %align_computed, align 1, !dbg !4669
  br label %if.end715, !dbg !4670

if.else549:                                       ; preds = %if.else536
  %210 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4671
  %base550 = bitcast %union.tree_node* %210 to %struct.tree_base*, !dbg !4671
  %211 = bitcast %struct.tree_base* %base550 to i64*, !dbg !4671
  %bf.load551 = load i64, i64* %211, align 8, !dbg !4671
  %bf.clear552 = and i64 %bf.load551, 65535, !dbg !4671
  %bf.cast553 = trunc i64 %bf.clear552 to i32, !dbg !4671
  %cmp554 = icmp eq i32 %bf.cast553, 41, !dbg !4673
  br i1 %cmp554, label %land.lhs.true556, label %if.else568, !dbg !4674

land.lhs.true556:                                 ; preds = %if.else549
  %212 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4675
  %exp557 = bitcast %union.tree_node* %212 to %struct.tree_exp*, !dbg !4675
  %operands558 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp557, i32 0, i32 3, !dbg !4675
  %arrayidx559 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands558, i64 0, i64 1, !dbg !4675
  %213 = load %union.tree_node*, %union.tree_node** %arrayidx559, align 8, !dbg !4675
  %decl_common560 = bitcast %union.tree_node* %213 to %struct.tree_decl_common*, !dbg !4675
  %decl_flag_1561 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common560, i32 0, i32 2, !dbg !4675
  %214 = bitcast i40* %decl_flag_1561 to i64*, !dbg !4675
  %bf.load562 = load i64, i64* %214, align 8, !dbg !4675
  %bf.lshr563 = lshr i64 %bf.load562, 25, !dbg !4675
  %bf.clear564 = and i64 %bf.lshr563, 1, !dbg !4675
  %bf.cast565 = trunc i64 %bf.clear564 to i32, !dbg !4675
  %tobool566 = icmp ne i32 %bf.cast565, 0, !dbg !4675
  br i1 %tobool566, label %if.else568, label %if.then567, !dbg !4676

if.then567:                                       ; preds = %land.lhs.true556
  %215 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4677
  store %union.tree_node* %215, %union.tree_node** %expr, align 8, !dbg !4679
  %216 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4680
  store %struct.rtx_def* %216, %struct.rtx_def** %offset, align 8, !dbg !4681
  %217 = load i64, i64* %bitpos.addr, align 8, !dbg !4682
  store i64 %217, i64* %apply_bitpos, align 8, !dbg !4683
  br label %if.end714, !dbg !4684

if.else568:                                       ; preds = %land.lhs.true556, %if.else549
  %218 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4685
  %base569 = bitcast %union.tree_node* %218 to %struct.tree_base*, !dbg !4685
  %219 = bitcast %struct.tree_base* %base569 to i64*, !dbg !4685
  %bf.load570 = load i64, i64* %219, align 8, !dbg !4685
  %bf.clear571 = and i64 %bf.load570, 65535, !dbg !4685
  %bf.cast572 = trunc i64 %bf.clear571 to i32, !dbg !4685
  %cmp573 = icmp eq i32 %bf.cast572, 45, !dbg !4687
  br i1 %cmp573, label %if.then575, label %if.else677, !dbg !4688

if.then575:                                       ; preds = %if.else568
  call void @llvm.dbg.declare(metadata %union.tree_node** %off_tree, metadata !4689, metadata !DIExpression()), !dbg !4691
  %220 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !4692
  store %union.tree_node* %220, %union.tree_node** %off_tree, align 8, !dbg !4691
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !4693, metadata !DIExpression()), !dbg !4694
  %221 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4695
  store %union.tree_node* %221, %union.tree_node** %t2, align 8, !dbg !4694
  br label %do.body, !dbg !4696

do.body:                                          ; preds = %do.cond, %if.then575
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !4697, metadata !DIExpression()), !dbg !4699
  %222 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4700
  %exp576 = bitcast %union.tree_node* %222 to %struct.tree_exp*, !dbg !4700
  %operands577 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp576, i32 0, i32 3, !dbg !4700
  %arrayidx578 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands577, i64 0, i64 1, !dbg !4700
  %223 = load %union.tree_node*, %union.tree_node** %arrayidx578, align 8, !dbg !4700
  store %union.tree_node* %223, %union.tree_node** %index, align 8, !dbg !4699
  call void @llvm.dbg.declare(metadata %union.tree_node** %low_bound, metadata !4701, metadata !DIExpression()), !dbg !4702
  %224 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4703
  %call579 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %224), !dbg !4704
  store %union.tree_node* %call579, %union.tree_node** %low_bound, align 8, !dbg !4702
  call void @llvm.dbg.declare(metadata %union.tree_node** %unit_size, metadata !4705, metadata !DIExpression()), !dbg !4706
  %225 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4707
  %call580 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %225), !dbg !4708
  store %union.tree_node* %call580, %union.tree_node** %unit_size, align 8, !dbg !4706
  %226 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !4709
  %call581 = call i32 @integer_zerop(%union.tree_node* %226), !dbg !4711
  %tobool582 = icmp ne i32 %call581, 0, !dbg !4711
  br i1 %tobool582, label %if.end587, label %if.then583, !dbg !4712

if.then583:                                       ; preds = %do.body
  %227 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !4713
  %common584 = bitcast %union.tree_node* %227 to %struct.tree_common*, !dbg !4713
  %type585 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common584, i32 0, i32 2, !dbg !4713
  %228 = load %union.tree_node*, %union.tree_node** %type585, align 8, !dbg !4713
  %229 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !4713
  %230 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !4713
  %call586 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %228, %union.tree_node* %229, %union.tree_node* %230), !dbg !4713
  store %union.tree_node* %call586, %union.tree_node** %index, align 8, !dbg !4714
  br label %if.end587, !dbg !4715

if.end587:                                        ; preds = %if.then583, %do.body
  %231 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4716
  %232 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !4716
  %call588 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %231, %union.tree_node* %232), !dbg !4716
  %233 = load %union.tree_node*, %union.tree_node** %unit_size, align 8, !dbg !4716
  %call589 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %call588, %union.tree_node* %233), !dbg !4716
  %234 = load %union.tree_node*, %union.tree_node** %off_tree, align 8, !dbg !4716
  %call590 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call589, %union.tree_node* %234), !dbg !4716
  store %union.tree_node* %call590, %union.tree_node** %off_tree, align 8, !dbg !4717
  %235 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4718
  %exp591 = bitcast %union.tree_node* %235 to %struct.tree_exp*, !dbg !4718
  %operands592 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp591, i32 0, i32 3, !dbg !4718
  %arrayidx593 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands592, i64 0, i64 0, !dbg !4718
  %236 = load %union.tree_node*, %union.tree_node** %arrayidx593, align 8, !dbg !4718
  store %union.tree_node* %236, %union.tree_node** %t2, align 8, !dbg !4719
  br label %do.cond, !dbg !4720

do.cond:                                          ; preds = %if.end587
  %237 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4721
  %base594 = bitcast %union.tree_node* %237 to %struct.tree_base*, !dbg !4721
  %238 = bitcast %struct.tree_base* %base594 to i64*, !dbg !4721
  %bf.load595 = load i64, i64* %238, align 8, !dbg !4721
  %bf.clear596 = and i64 %bf.load595, 65535, !dbg !4721
  %bf.cast597 = trunc i64 %bf.clear596 to i32, !dbg !4721
  %cmp598 = icmp eq i32 %bf.cast597, 45, !dbg !4722
  br i1 %cmp598, label %do.body, label %do.end, !dbg !4720, !llvm.loop !4723

do.end:                                           ; preds = %do.cond
  %239 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4725
  %base600 = bitcast %union.tree_node* %239 to %struct.tree_base*, !dbg !4725
  %240 = bitcast %struct.tree_base* %base600 to i64*, !dbg !4725
  %bf.load601 = load i64, i64* %240, align 8, !dbg !4725
  %bf.clear602 = and i64 %bf.load601, 65535, !dbg !4725
  %bf.cast603 = trunc i64 %bf.clear602 to i32, !dbg !4725
  %idxprom604 = sext i32 %bf.cast603 to i64, !dbg !4725
  %arrayidx605 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom604, !dbg !4725
  %241 = load i32, i32* %arrayidx605, align 4, !dbg !4725
  %cmp606 = icmp eq i32 %241, 3, !dbg !4725
  br i1 %cmp606, label %if.then608, label %if.else625, !dbg !4727

if.then608:                                       ; preds = %do.end
  %242 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4728
  store %union.tree_node* %242, %union.tree_node** %expr, align 8, !dbg !4730
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8, !dbg !4731
  %243 = load %union.tree_node*, %union.tree_node** %off_tree, align 8, !dbg !4732
  %call609 = call i32 @host_integerp(%union.tree_node* %243, i32 1), !dbg !4734
  %tobool610 = icmp ne i32 %call609, 0, !dbg !4734
  br i1 %tobool610, label %if.then611, label %if.end624, !dbg !4735

if.then611:                                       ; preds = %if.then608
  call void @llvm.dbg.declare(metadata i64* %ioff, metadata !4736, metadata !DIExpression()), !dbg !4738
  %244 = load %union.tree_node*, %union.tree_node** %off_tree, align 8, !dbg !4739
  %call612 = call i64 @tree_low_cst(%union.tree_node* %244, i32 1), !dbg !4740
  store i64 %call612, i64* %ioff, align 8, !dbg !4738
  call void @llvm.dbg.declare(metadata i64* %aoff, metadata !4741, metadata !DIExpression()), !dbg !4742
  %245 = load i64, i64* %ioff, align 8, !dbg !4743
  %246 = load i64, i64* %ioff, align 8, !dbg !4744
  %sub = sub nsw i64 0, %246, !dbg !4745
  %and = and i64 %245, %sub, !dbg !4746
  %mul = mul nsw i64 %and, 8, !dbg !4747
  store i64 %mul, i64* %aoff, align 8, !dbg !4742
  %247 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4748
  %decl_common613 = bitcast %union.tree_node* %247 to %struct.tree_decl_common*, !dbg !4748
  %align614 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common613, i32 0, i32 3, !dbg !4748
  %248 = load i32, i32* %align614, align 8, !dbg !4748
  store i32 %248, i32* %align, align 4, !dbg !4749
  %249 = load i64, i64* %aoff, align 8, !dbg !4750
  %tobool615 = icmp ne i64 %249, 0, !dbg !4750
  br i1 %tobool615, label %land.lhs.true616, label %if.end622, !dbg !4752

land.lhs.true616:                                 ; preds = %if.then611
  %250 = load i64, i64* %aoff, align 8, !dbg !4753
  %251 = load i32, i32* %align, align 4, !dbg !4754
  %conv617 = zext i32 %251 to i64, !dbg !4754
  %cmp618 = icmp ult i64 %250, %conv617, !dbg !4755
  br i1 %cmp618, label %if.then620, label %if.end622, !dbg !4756

if.then620:                                       ; preds = %land.lhs.true616
  %252 = load i64, i64* %aoff, align 8, !dbg !4757
  %conv621 = trunc i64 %252 to i32, !dbg !4757
  store i32 %conv621, i32* %align, align 4, !dbg !4758
  br label %if.end622, !dbg !4759

if.end622:                                        ; preds = %if.then620, %land.lhs.true616, %if.then611
  store i8 1, i8* %align_computed, align 1, !dbg !4760
  %253 = load i64, i64* %ioff, align 8, !dbg !4761
  %call623 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %253), !dbg !4761
  store %struct.rtx_def* %call623, %struct.rtx_def** %offset, align 8, !dbg !4762
  %254 = load i64, i64* %bitpos.addr, align 8, !dbg !4763
  store i64 %254, i64* %apply_bitpos, align 8, !dbg !4764
  br label %if.end624, !dbg !4765

if.end624:                                        ; preds = %if.end622, %if.then608
  br label %if.end676, !dbg !4766

if.else625:                                       ; preds = %do.end
  %255 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4767
  %base626 = bitcast %union.tree_node* %255 to %struct.tree_base*, !dbg !4767
  %256 = bitcast %struct.tree_base* %base626 to i64*, !dbg !4767
  %bf.load627 = load i64, i64* %256, align 8, !dbg !4767
  %bf.clear628 = and i64 %bf.load627, 65535, !dbg !4767
  %bf.cast629 = trunc i64 %bf.clear628 to i32, !dbg !4767
  %cmp630 = icmp eq i32 %bf.cast629, 41, !dbg !4769
  br i1 %cmp630, label %if.then632, label %if.else639, !dbg !4770

if.then632:                                       ; preds = %if.else625
  %257 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4771
  store %union.tree_node* %257, %union.tree_node** %expr, align 8, !dbg !4773
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8, !dbg !4774
  %258 = load %union.tree_node*, %union.tree_node** %off_tree, align 8, !dbg !4775
  %call633 = call i32 @host_integerp(%union.tree_node* %258, i32 1), !dbg !4777
  %tobool634 = icmp ne i32 %call633, 0, !dbg !4777
  br i1 %tobool634, label %if.then635, label %if.end638, !dbg !4778

if.then635:                                       ; preds = %if.then632
  %259 = load %union.tree_node*, %union.tree_node** %off_tree, align 8, !dbg !4779
  %call636 = call i64 @tree_low_cst(%union.tree_node* %259, i32 1), !dbg !4779
  %call637 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call636), !dbg !4779
  store %struct.rtx_def* %call637, %struct.rtx_def** %offset, align 8, !dbg !4781
  %260 = load i64, i64* %bitpos.addr, align 8, !dbg !4782
  store i64 %260, i64* %apply_bitpos, align 8, !dbg !4783
  br label %if.end638, !dbg !4784

if.end638:                                        ; preds = %if.then635, %if.then632
  br label %if.end675, !dbg !4785

if.else639:                                       ; preds = %if.else625
  %261 = load i32, i32* @flag_argument_noalias, align 4, !dbg !4786
  %cmp640 = icmp sgt i32 %261, 1, !dbg !4788
  br i1 %cmp640, label %land.lhs.true642, label %if.end674, !dbg !4789

land.lhs.true642:                                 ; preds = %if.else639
  %262 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4790
  %base643 = bitcast %union.tree_node* %262 to %struct.tree_base*, !dbg !4790
  %263 = bitcast %struct.tree_base* %base643 to i64*, !dbg !4790
  %bf.load644 = load i64, i64* %263, align 8, !dbg !4790
  %bf.clear645 = and i64 %bf.load644, 65535, !dbg !4790
  %bf.cast646 = trunc i64 %bf.clear645 to i32, !dbg !4790
  %cmp647 = icmp eq i32 %bf.cast646, 47, !dbg !4790
  br i1 %cmp647, label %land.lhs.true663, label %lor.lhs.false649, !dbg !4790

lor.lhs.false649:                                 ; preds = %land.lhs.true642
  %264 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4790
  %base650 = bitcast %union.tree_node* %264 to %struct.tree_base*, !dbg !4790
  %265 = bitcast %struct.tree_base* %base650 to i64*, !dbg !4790
  %bf.load651 = load i64, i64* %265, align 8, !dbg !4790
  %bf.clear652 = and i64 %bf.load651, 65535, !dbg !4790
  %bf.cast653 = trunc i64 %bf.clear652 to i32, !dbg !4790
  %cmp654 = icmp eq i32 %bf.cast653, 48, !dbg !4790
  br i1 %cmp654, label %land.lhs.true663, label %lor.lhs.false656, !dbg !4790

lor.lhs.false656:                                 ; preds = %lor.lhs.false649
  %266 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4790
  %base657 = bitcast %union.tree_node* %266 to %struct.tree_base*, !dbg !4790
  %267 = bitcast %struct.tree_base* %base657 to i64*, !dbg !4790
  %bf.load658 = load i64, i64* %267, align 8, !dbg !4790
  %bf.clear659 = and i64 %bf.load658, 65535, !dbg !4790
  %bf.cast660 = trunc i64 %bf.clear659 to i32, !dbg !4790
  %cmp661 = icmp eq i32 %bf.cast660, 49, !dbg !4790
  br i1 %cmp661, label %land.lhs.true663, label %if.end674, !dbg !4791

land.lhs.true663:                                 ; preds = %lor.lhs.false656, %lor.lhs.false649, %land.lhs.true642
  %268 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4792
  %exp664 = bitcast %union.tree_node* %268 to %struct.tree_exp*, !dbg !4792
  %operands665 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp664, i32 0, i32 3, !dbg !4792
  %arrayidx666 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands665, i64 0, i64 0, !dbg !4792
  %269 = load %union.tree_node*, %union.tree_node** %arrayidx666, align 8, !dbg !4792
  %base667 = bitcast %union.tree_node* %269 to %struct.tree_base*, !dbg !4792
  %270 = bitcast %struct.tree_base* %base667 to i64*, !dbg !4792
  %bf.load668 = load i64, i64* %270, align 8, !dbg !4792
  %bf.clear669 = and i64 %bf.load668, 65535, !dbg !4792
  %bf.cast670 = trunc i64 %bf.clear669 to i32, !dbg !4792
  %cmp671 = icmp eq i32 %bf.cast670, 34, !dbg !4793
  br i1 %cmp671, label %if.then673, label %if.end674, !dbg !4794

if.then673:                                       ; preds = %land.lhs.true663
  %271 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4795
  store %union.tree_node* %271, %union.tree_node** %expr, align 8, !dbg !4797
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8, !dbg !4798
  br label %if.end674, !dbg !4799

if.end674:                                        ; preds = %if.then673, %land.lhs.true663, %lor.lhs.false656, %if.else639
  br label %if.end675

if.end675:                                        ; preds = %if.end674, %if.end638
  br label %if.end676

if.end676:                                        ; preds = %if.end675, %if.end624
  br label %if.end713, !dbg !4800

if.else677:                                       ; preds = %if.else568
  %272 = load i32, i32* @flag_argument_noalias, align 4, !dbg !4801
  %cmp678 = icmp sgt i32 %272, 1, !dbg !4803
  br i1 %cmp678, label %land.lhs.true680, label %if.end712, !dbg !4804

land.lhs.true680:                                 ; preds = %if.else677
  %273 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4805
  %base681 = bitcast %union.tree_node* %273 to %struct.tree_base*, !dbg !4805
  %274 = bitcast %struct.tree_base* %base681 to i64*, !dbg !4805
  %bf.load682 = load i64, i64* %274, align 8, !dbg !4805
  %bf.clear683 = and i64 %bf.load682, 65535, !dbg !4805
  %bf.cast684 = trunc i64 %bf.clear683 to i32, !dbg !4805
  %cmp685 = icmp eq i32 %bf.cast684, 47, !dbg !4805
  br i1 %cmp685, label %land.lhs.true701, label %lor.lhs.false687, !dbg !4805

lor.lhs.false687:                                 ; preds = %land.lhs.true680
  %275 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4805
  %base688 = bitcast %union.tree_node* %275 to %struct.tree_base*, !dbg !4805
  %276 = bitcast %struct.tree_base* %base688 to i64*, !dbg !4805
  %bf.load689 = load i64, i64* %276, align 8, !dbg !4805
  %bf.clear690 = and i64 %bf.load689, 65535, !dbg !4805
  %bf.cast691 = trunc i64 %bf.clear690 to i32, !dbg !4805
  %cmp692 = icmp eq i32 %bf.cast691, 48, !dbg !4805
  br i1 %cmp692, label %land.lhs.true701, label %lor.lhs.false694, !dbg !4805

lor.lhs.false694:                                 ; preds = %lor.lhs.false687
  %277 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4805
  %base695 = bitcast %union.tree_node* %277 to %struct.tree_base*, !dbg !4805
  %278 = bitcast %struct.tree_base* %base695 to i64*, !dbg !4805
  %bf.load696 = load i64, i64* %278, align 8, !dbg !4805
  %bf.clear697 = and i64 %bf.load696, 65535, !dbg !4805
  %bf.cast698 = trunc i64 %bf.clear697 to i32, !dbg !4805
  %cmp699 = icmp eq i32 %bf.cast698, 49, !dbg !4805
  br i1 %cmp699, label %land.lhs.true701, label %if.end712, !dbg !4806

land.lhs.true701:                                 ; preds = %lor.lhs.false694, %lor.lhs.false687, %land.lhs.true680
  %279 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4807
  %exp702 = bitcast %union.tree_node* %279 to %struct.tree_exp*, !dbg !4807
  %operands703 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp702, i32 0, i32 3, !dbg !4807
  %arrayidx704 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands703, i64 0, i64 0, !dbg !4807
  %280 = load %union.tree_node*, %union.tree_node** %arrayidx704, align 8, !dbg !4807
  %base705 = bitcast %union.tree_node* %280 to %struct.tree_base*, !dbg !4807
  %281 = bitcast %struct.tree_base* %base705 to i64*, !dbg !4807
  %bf.load706 = load i64, i64* %281, align 8, !dbg !4807
  %bf.clear707 = and i64 %bf.load706, 65535, !dbg !4807
  %bf.cast708 = trunc i64 %bf.clear707 to i32, !dbg !4807
  %cmp709 = icmp eq i32 %bf.cast708, 34, !dbg !4808
  br i1 %cmp709, label %if.then711, label %if.end712, !dbg !4809

if.then711:                                       ; preds = %land.lhs.true701
  %282 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4810
  store %union.tree_node* %282, %union.tree_node** %expr, align 8, !dbg !4812
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8, !dbg !4813
  br label %if.end712, !dbg !4814

if.end712:                                        ; preds = %if.then711, %land.lhs.true701, %lor.lhs.false694, %if.else677
  br label %if.end713

if.end713:                                        ; preds = %if.end712, %if.end676
  br label %if.end714

if.end714:                                        ; preds = %if.end713, %if.then567
  br label %if.end715

if.end715:                                        ; preds = %if.end714, %if.then545
  br label %if.end716

if.end716:                                        ; preds = %if.end715, %cond.end532
  %283 = load i8, i8* %align_computed, align 1, !dbg !4815
  %tobool717 = icmp ne i8 %283, 0, !dbg !4815
  br i1 %tobool717, label %if.end751, label %land.lhs.true718, !dbg !4817

land.lhs.true718:                                 ; preds = %if.end716
  %284 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4818
  %base719 = bitcast %union.tree_node* %284 to %struct.tree_base*, !dbg !4818
  %285 = bitcast %struct.tree_base* %base719 to i64*, !dbg !4818
  %bf.load720 = load i64, i64* %285, align 8, !dbg !4818
  %bf.clear721 = and i64 %bf.load720, 65535, !dbg !4818
  %bf.cast722 = trunc i64 %bf.clear721 to i32, !dbg !4818
  %cmp723 = icmp eq i32 %bf.cast722, 47, !dbg !4818
  br i1 %cmp723, label %if.end751, label %lor.lhs.false725, !dbg !4818

lor.lhs.false725:                                 ; preds = %land.lhs.true718
  %286 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4818
  %base726 = bitcast %union.tree_node* %286 to %struct.tree_base*, !dbg !4818
  %287 = bitcast %struct.tree_base* %base726 to i64*, !dbg !4818
  %bf.load727 = load i64, i64* %287, align 8, !dbg !4818
  %bf.clear728 = and i64 %bf.load727, 65535, !dbg !4818
  %bf.cast729 = trunc i64 %bf.clear728 to i32, !dbg !4818
  %cmp730 = icmp eq i32 %bf.cast729, 48, !dbg !4818
  br i1 %cmp730, label %if.end751, label %lor.lhs.false732, !dbg !4818

lor.lhs.false732:                                 ; preds = %lor.lhs.false725
  %288 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4818
  %base733 = bitcast %union.tree_node* %288 to %struct.tree_base*, !dbg !4818
  %289 = bitcast %struct.tree_base* %base733 to i64*, !dbg !4818
  %bf.load734 = load i64, i64* %289, align 8, !dbg !4818
  %bf.clear735 = and i64 %bf.load734, 65535, !dbg !4818
  %bf.cast736 = trunc i64 %bf.clear735 to i32, !dbg !4818
  %cmp737 = icmp eq i32 %bf.cast736, 49, !dbg !4818
  br i1 %cmp737, label %if.end751, label %if.then739, !dbg !4819

if.then739:                                       ; preds = %lor.lhs.false732
  call void @llvm.dbg.declare(metadata i32* %obj_align, metadata !4820, metadata !DIExpression()), !dbg !4822
  %290 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4823
  %291 = load i32, i32* %align, align 4, !dbg !4824
  %292 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4825
  %and740 = and i32 %292, 32, !dbg !4825
  %cmp741 = icmp ne i32 %and740, 0, !dbg !4825
  %293 = zext i1 %cmp741 to i64, !dbg !4825
  %cond743 = select i1 %cmp741, i32 256, i32 128, !dbg !4825
  %call744 = call i32 @get_object_alignment(%union.tree_node* %290, i32 %291, i32 %cond743), !dbg !4826
  store i32 %call744, i32* %obj_align, align 4, !dbg !4822
  %294 = load i32, i32* %align, align 4, !dbg !4827
  %295 = load i32, i32* %obj_align, align 4, !dbg !4827
  %cmp745 = icmp ugt i32 %294, %295, !dbg !4827
  br i1 %cmp745, label %cond.true747, label %cond.false748, !dbg !4827

cond.true747:                                     ; preds = %if.then739
  %296 = load i32, i32* %align, align 4, !dbg !4827
  br label %cond.end749, !dbg !4827

cond.false748:                                    ; preds = %if.then739
  %297 = load i32, i32* %obj_align, align 4, !dbg !4827
  br label %cond.end749, !dbg !4827

cond.end749:                                      ; preds = %cond.false748, %cond.true747
  %cond750 = phi i32 [ %296, %cond.true747 ], [ %297, %cond.false748 ], !dbg !4827
  store i32 %cond750, i32* %align, align 4, !dbg !4828
  br label %if.end751, !dbg !4829

if.end751:                                        ; preds = %cond.end749, %lor.lhs.false732, %lor.lhs.false725, %land.lhs.true718, %if.end716
  br label %if.end752, !dbg !4830

if.end752:                                        ; preds = %if.end751, %if.end313
  %298 = load i64, i64* %apply_bitpos, align 8, !dbg !4831
  %tobool753 = icmp ne i64 %298, 0, !dbg !4831
  br i1 %tobool753, label %if.then754, label %if.end762, !dbg !4833

if.then754:                                       ; preds = %if.end752
  %299 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !4834
  %300 = load i64, i64* %apply_bitpos, align 8, !dbg !4836
  %div = sdiv i64 %300, 8, !dbg !4837
  %sub755 = sub nsw i64 0, %div, !dbg !4838
  %call756 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %299, i64 %sub755), !dbg !4839
  store %struct.rtx_def* %call756, %struct.rtx_def** %offset, align 8, !dbg !4840
  %301 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !4841
  %tobool757 = icmp ne %struct.rtx_def* %301, null, !dbg !4841
  br i1 %tobool757, label %if.then758, label %if.end761, !dbg !4843

if.then758:                                       ; preds = %if.then754
  %302 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !4844
  %303 = load i64, i64* %apply_bitpos, align 8, !dbg !4845
  %div759 = sdiv i64 %303, 8, !dbg !4846
  %call760 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %302, i64 %div759), !dbg !4847
  store %struct.rtx_def* %call760, %struct.rtx_def** %size, align 8, !dbg !4848
  br label %if.end761, !dbg !4849

if.end761:                                        ; preds = %if.then758, %if.then754
  br label %if.end762, !dbg !4850

if.end762:                                        ; preds = %if.end761, %if.end752
  %304 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4851
  %base763 = bitcast %union.tree_node* %304 to %struct.tree_base*, !dbg !4851
  %305 = bitcast %struct.tree_base* %base763 to i64*, !dbg !4851
  %bf.load764 = load i64, i64* %305, align 8, !dbg !4851
  %bf.clear765 = and i64 %bf.load764, 65535, !dbg !4851
  %bf.cast766 = trunc i64 %bf.clear765 to i32, !dbg !4851
  %cmp767 = icmp eq i32 %bf.cast766, 48, !dbg !4853
  br i1 %cmp767, label %if.then769, label %if.end770, !dbg !4854

if.then769:                                       ; preds = %if.end762
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8, !dbg !4855
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !4857
  br label %if.end770, !dbg !4858

if.end770:                                        ; preds = %if.then769, %if.end762
  %306 = load i32, i32* %alias, align 4, !dbg !4859
  %307 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4860
  %308 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !4861
  %309 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !4862
  %310 = load i32, i32* %align, align 4, !dbg !4863
  %311 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4864
  %base771 = bitcast %union.tree_node* %311 to %struct.tree_base*, !dbg !4864
  %312 = bitcast %struct.tree_base* %base771 to i64*, !dbg !4864
  %bf.load772 = load i64, i64* %312, align 8, !dbg !4864
  %bf.lshr773 = lshr i64 %bf.load772, 56, !dbg !4864
  %bf.cast774 = trunc i64 %bf.lshr773 to i32, !dbg !4864
  %conv775 = trunc i32 %bf.cast774 to i8, !dbg !4864
  %313 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4865
  %314 = bitcast %struct.rtx_def* %313 to i32*, !dbg !4865
  %bf.load776 = load i32, i32* %314, align 8, !dbg !4865
  %bf.lshr777 = lshr i32 %bf.load776, 16, !dbg !4865
  %bf.clear778 = and i32 %bf.lshr777, 255, !dbg !4865
  %call779 = call %struct.mem_attrs* @get_mem_attrs(i32 %306, %union.tree_node* %307, %struct.rtx_def* %308, %struct.rtx_def* %309, i32 %310, i8 zeroext %conv775, i32 %bf.clear778), !dbg !4866
  %315 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4867
  %u780 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %315, i32 0, i32 1, !dbg !4867
  %fld781 = bitcast %union.u* %u780 to [1 x %union.rtunion_def]*, !dbg !4867
  %arrayidx782 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld781, i64 0, i64 1, !dbg !4867
  %rt_mem783 = bitcast %union.rtunion_def* %arrayidx782 to %struct.mem_attrs**, !dbg !4867
  store %struct.mem_attrs* %call779, %struct.mem_attrs** %rt_mem783, align 8, !dbg !4868
  %316 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4869
  %317 = bitcast %struct.rtx_def* %316 to i32*, !dbg !4869
  %bf.load784 = load i32, i32* %317, align 8, !dbg !4869
  %bf.lshr785 = lshr i32 %bf.load784, 28, !dbg !4869
  %bf.clear786 = and i32 %bf.lshr785, 1, !dbg !4869
  %tobool787 = icmp ne i32 %bf.clear786, 0, !dbg !4869
  br i1 %tobool787, label %if.then792, label %lor.lhs.false788, !dbg !4871

lor.lhs.false788:                                 ; preds = %if.end770
  %318 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4872
  %319 = bitcast %struct.rtx_def* %318 to i32*, !dbg !4872
  %bf.load789 = load i32, i32* %319, align 8, !dbg !4872
  %bf.lshr790 = lshr i32 %bf.load789, 31, !dbg !4872
  %tobool791 = icmp ne i32 %bf.lshr790, 0, !dbg !4872
  br i1 %tobool791, label %if.then792, label %if.else793, !dbg !4873

if.then792:                                       ; preds = %lor.lhs.false788, %if.end770
  br label %if.end826, !dbg !4874

if.else793:                                       ; preds = %lor.lhs.false788
  %320 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4875
  %base794 = bitcast %union.tree_node* %320 to %struct.tree_base*, !dbg !4875
  %321 = bitcast %struct.tree_base* %base794 to i64*, !dbg !4875
  %bf.load795 = load i64, i64* %321, align 8, !dbg !4875
  %bf.clear796 = and i64 %bf.load795, 65535, !dbg !4875
  %bf.cast797 = trunc i64 %bf.clear796 to i32, !dbg !4875
  %cmp798 = icmp eq i32 %bf.cast797, 41, !dbg !4877
  br i1 %cmp798, label %if.then821, label %lor.lhs.false800, !dbg !4878

lor.lhs.false800:                                 ; preds = %if.else793
  %322 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4879
  %base801 = bitcast %union.tree_node* %322 to %struct.tree_base*, !dbg !4879
  %323 = bitcast %struct.tree_base* %base801 to i64*, !dbg !4879
  %bf.load802 = load i64, i64* %323, align 8, !dbg !4879
  %bf.clear803 = and i64 %bf.load802, 65535, !dbg !4879
  %bf.cast804 = trunc i64 %bf.clear803 to i32, !dbg !4879
  %cmp805 = icmp eq i32 %bf.cast804, 45, !dbg !4880
  br i1 %cmp805, label %if.then821, label %lor.lhs.false807, !dbg !4881

lor.lhs.false807:                                 ; preds = %lor.lhs.false800
  %324 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4882
  %base808 = bitcast %union.tree_node* %324 to %struct.tree_base*, !dbg !4882
  %325 = bitcast %struct.tree_base* %base808 to i64*, !dbg !4882
  %bf.load809 = load i64, i64* %325, align 8, !dbg !4882
  %bf.clear810 = and i64 %bf.load809, 65535, !dbg !4882
  %bf.cast811 = trunc i64 %bf.clear810 to i32, !dbg !4882
  %cmp812 = icmp eq i32 %bf.cast811, 46, !dbg !4883
  br i1 %cmp812, label %if.then821, label %lor.lhs.false814, !dbg !4884

lor.lhs.false814:                                 ; preds = %lor.lhs.false807
  %326 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4885
  %base815 = bitcast %union.tree_node* %326 to %struct.tree_base*, !dbg !4885
  %327 = bitcast %struct.tree_base* %base815 to i64*, !dbg !4885
  %bf.load816 = load i64, i64* %327, align 8, !dbg !4885
  %bf.clear817 = and i64 %bf.load816, 65535, !dbg !4885
  %bf.cast818 = trunc i64 %bf.clear817 to i32, !dbg !4885
  %cmp819 = icmp eq i32 %bf.cast818, 42, !dbg !4886
  br i1 %cmp819, label %if.then821, label %if.end825, !dbg !4887

if.then821:                                       ; preds = %lor.lhs.false814, %lor.lhs.false807, %lor.lhs.false800, %if.else793
  %328 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4888
  %329 = bitcast %struct.rtx_def* %328 to i32*, !dbg !4888
  %bf.load822 = load i32, i32* %329, align 8, !dbg !4889
  %bf.clear823 = and i32 %bf.load822, -268435457, !dbg !4889
  %bf.set824 = or i32 %bf.clear823, 268435456, !dbg !4889
  store i32 %bf.set824, i32* %329, align 8, !dbg !4889
  br label %if.end825, !dbg !4888

if.end825:                                        ; preds = %if.then821, %lor.lhs.false814
  br label %if.end826

if.end826:                                        ; preds = %if.then, %if.then88, %if.then792, %if.end825
  ret void, !dbg !4890
}

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

declare dso_local i32 @get_alias_set(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local zeroext i8 @component_uses_parent_alias_set(%union.tree_node*) #2

declare dso_local i32 @ix86_constant_alignment(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_element_size(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @get_object_alignment(%union.tree_node*, i32, i32) #2

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_attrs* @get_mem_attrs(i32 %alias, %union.tree_node* %expr, %struct.rtx_def* %offset, %struct.rtx_def* %size, i32 %align, i8 zeroext %addrspace, i32 %mode) #0 !dbg !4891 {
entry:
  %retval = alloca %struct.mem_attrs*, align 8
  %alias.addr = alloca i32, align 4
  %expr.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  %addrspace.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %attrs = alloca %struct.mem_attrs, align 8
  %slot = alloca i8**, align 8
  store i32 %alias, i32* %alias.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alias.addr, metadata !4894, metadata !DIExpression()), !dbg !4895
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4896, metadata !DIExpression()), !dbg !4897
  store %struct.rtx_def* %offset, %struct.rtx_def** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset.addr, metadata !4898, metadata !DIExpression()), !dbg !4899
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size.addr, metadata !4900, metadata !DIExpression()), !dbg !4901
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !4902, metadata !DIExpression()), !dbg !4903
  store i8 %addrspace, i8* %addrspace.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %addrspace.addr, metadata !4904, metadata !DIExpression()), !dbg !4905
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4906, metadata !DIExpression()), !dbg !4907
  call void @llvm.dbg.declare(metadata %struct.mem_attrs* %attrs, metadata !4908, metadata !DIExpression()), !dbg !4909
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4910, metadata !DIExpression()), !dbg !4911
  %0 = load i32, i32* %alias.addr, align 4, !dbg !4912
  %cmp = icmp eq i32 %0, 0, !dbg !4914
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4915

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4916
  %cmp1 = icmp eq %union.tree_node* %1, null, !dbg !4917
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !4918

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !4919
  %cmp3 = icmp eq %struct.rtx_def* %2, null, !dbg !4920
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4921

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %3 = load i8, i8* %addrspace.addr, align 1, !dbg !4922
  %conv = zext i8 %3 to i32, !dbg !4922
  %cmp5 = icmp eq i32 %conv, 0, !dbg !4923
  br i1 %cmp5, label %land.lhs.true7, label %if.end, !dbg !4924

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !4925
  %cmp8 = icmp eq %struct.rtx_def* %4, null, !dbg !4926
  br i1 %cmp8, label %land.lhs.true18, label %lor.lhs.false, !dbg !4927

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %5 = load i32, i32* %mode.addr, align 4, !dbg !4928
  %cmp10 = icmp ne i32 %5, 1, !dbg !4929
  br i1 %cmp10, label %land.lhs.true12, label %if.end, !dbg !4930

land.lhs.true12:                                  ; preds = %lor.lhs.false
  %6 = load i32, i32* %mode.addr, align 4, !dbg !4931
  %idxprom = zext i32 %6 to i64, !dbg !4931
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4931
  %7 = load i8, i8* %arrayidx, align 1, !dbg !4931
  %conv13 = zext i8 %7 to i16, !dbg !4931
  %conv14 = zext i16 %conv13 to i64, !dbg !4931
  %8 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !4932
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4932
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !4932
  %arrayidx15 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4932
  %9 = load i64, i64* %arrayidx15, align 8, !dbg !4932
  %cmp16 = icmp eq i64 %conv14, %9, !dbg !4933
  br i1 %cmp16, label %land.lhs.true18, label %if.end, !dbg !4934

land.lhs.true18:                                  ; preds = %land.lhs.true12, %land.lhs.true7
  br i1 false, label %land.lhs.true19, label %cond.false, !dbg !4935

land.lhs.true19:                                  ; preds = %land.lhs.true18
  %10 = load i32, i32* %mode.addr, align 4, !dbg !4936
  %cmp20 = icmp ne i32 %10, 1, !dbg !4937
  br i1 %cmp20, label %cond.true, label %cond.false, !dbg !4938

cond.true:                                        ; preds = %land.lhs.true19
  %11 = load i32, i32* %align.addr, align 4, !dbg !4939
  %12 = load i32, i32* %mode.addr, align 4, !dbg !4940
  %call = call i32 @get_mode_alignment(i32 %12), !dbg !4940
  %cmp22 = icmp eq i32 %11, %call, !dbg !4941
  br i1 %cmp22, label %if.then, label %if.end, !dbg !4942

cond.false:                                       ; preds = %land.lhs.true19, %land.lhs.true18
  %13 = load i32, i32* %align.addr, align 4, !dbg !4943
  %cmp24 = icmp eq i32 %13, 8, !dbg !4944
  br i1 %cmp24, label %if.then, label %if.end, !dbg !4938

if.then:                                          ; preds = %cond.false, %cond.true
  store %struct.mem_attrs* null, %struct.mem_attrs** %retval, align 8, !dbg !4945
  br label %return, !dbg !4945

if.end:                                           ; preds = %cond.false, %cond.true, %land.lhs.true12, %lor.lhs.false, %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  %14 = load i32, i32* %alias.addr, align 4, !dbg !4946
  %alias26 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 3, !dbg !4947
  store i32 %14, i32* %alias26, align 8, !dbg !4948
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4949
  %expr27 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 0, !dbg !4950
  store %union.tree_node* %15, %union.tree_node** %expr27, align 8, !dbg !4951
  %16 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !4952
  %offset28 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 1, !dbg !4953
  store %struct.rtx_def* %16, %struct.rtx_def** %offset28, align 8, !dbg !4954
  %17 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !4955
  %size29 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 2, !dbg !4956
  store %struct.rtx_def* %17, %struct.rtx_def** %size29, align 8, !dbg !4957
  %18 = load i32, i32* %align.addr, align 4, !dbg !4958
  %align30 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 4, !dbg !4959
  store i32 %18, i32* %align30, align 4, !dbg !4960
  %19 = load i8, i8* %addrspace.addr, align 1, !dbg !4961
  %addrspace31 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %attrs, i32 0, i32 5, !dbg !4962
  store i8 %19, i8* %addrspace31, align 8, !dbg !4963
  %20 = load %struct.htab*, %struct.htab** @mem_attrs_htab, align 8, !dbg !4964
  %21 = bitcast %struct.mem_attrs* %attrs to i8*, !dbg !4965
  %call32 = call i8** @htab_find_slot(%struct.htab* %20, i8* %21, i32 1), !dbg !4966
  store i8** %call32, i8*** %slot, align 8, !dbg !4967
  %22 = load i8**, i8*** %slot, align 8, !dbg !4968
  %23 = load i8*, i8** %22, align 8, !dbg !4970
  %cmp33 = icmp eq i8* %23, null, !dbg !4971
  br i1 %cmp33, label %if.then35, label %if.end37, !dbg !4972

if.then35:                                        ; preds = %if.end
  %call36 = call i8* @ggc_alloc_stat(i64 40), !dbg !4973
  %24 = load i8**, i8*** %slot, align 8, !dbg !4975
  store i8* %call36, i8** %24, align 8, !dbg !4976
  %25 = load i8**, i8*** %slot, align 8, !dbg !4977
  %26 = load i8*, i8** %25, align 8, !dbg !4978
  %27 = bitcast %struct.mem_attrs* %attrs to i8*, !dbg !4979
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 8 %27, i64 40, i1 false), !dbg !4979
  br label %if.end37, !dbg !4980

if.end37:                                         ; preds = %if.then35, %if.end
  %28 = load i8**, i8*** %slot, align 8, !dbg !4981
  %29 = load i8*, i8** %28, align 8, !dbg !4982
  %30 = bitcast i8* %29 to %struct.mem_attrs*, !dbg !4983
  store %struct.mem_attrs* %30, %struct.mem_attrs** %retval, align 8, !dbg !4984
  br label %return, !dbg !4984

return:                                           ; preds = %if.end37, %if.then
  %31 = load %struct.mem_attrs*, %struct.mem_attrs** %retval, align 8, !dbg !4985
  ret %struct.mem_attrs* %31, !dbg !4985
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_attributes(%struct.rtx_def* %ref, %union.tree_node* %t, i32 %objectp) #0 !dbg !4986 {
entry:
  %ref.addr = alloca %struct.rtx_def*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %objectp.addr = alloca i32, align 4
  store %struct.rtx_def* %ref, %struct.rtx_def** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ref.addr, metadata !4989, metadata !DIExpression()), !dbg !4990
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4991, metadata !DIExpression()), !dbg !4992
  store i32 %objectp, i32* %objectp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %objectp.addr, metadata !4993, metadata !DIExpression()), !dbg !4994
  %0 = load %struct.rtx_def*, %struct.rtx_def** %ref.addr, align 8, !dbg !4995
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4996
  %2 = load i32, i32* %objectp.addr, align 4, !dbg !4997
  call void @set_mem_attributes_minus_bitpos(%struct.rtx_def* %0, %union.tree_node* %1, i32 %2, i64 0), !dbg !4998
  ret void, !dbg !4999
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_addr_space(%struct.rtx_def* %mem, i8 zeroext %addrspace) #0 !dbg !5000 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %addrspace.addr = alloca i8, align 1
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5003, metadata !DIExpression()), !dbg !5004
  store i8 %addrspace, i8* %addrspace.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %addrspace.addr, metadata !5005, metadata !DIExpression()), !dbg !5006
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5007
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5007
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5007
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5007
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5007
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5007
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !5007
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5007

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5007

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5007
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5007
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5007
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5007
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5007
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5007
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !5007
  %4 = load i32, i32* %alias, align 8, !dbg !5007
  br label %cond.end, !dbg !5007

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !5007
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5008
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5008
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5008
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5008
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !5008
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !5008
  %cmp9 = icmp eq %struct.mem_attrs* %6, null, !dbg !5008
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !5008

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !5008

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5008
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5008
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5008
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !5008
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !5008
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !5008
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !5008
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5008
  br label %cond.end16, !dbg !5008

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %union.tree_node* [ null, %cond.true10 ], [ %9, %cond.false11 ], !dbg !5008
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5009
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5009
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5009
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5009
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5009
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5009
  %cmp22 = icmp eq %struct.mem_attrs* %11, null, !dbg !5009
  br i1 %cmp22, label %cond.true23, label %cond.false24, !dbg !5009

cond.true23:                                      ; preds = %cond.end16
  br label %cond.end29, !dbg !5009

cond.false24:                                     ; preds = %cond.end16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5009
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5009
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5009
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !5009
  %rt_mem28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**, !dbg !5009
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem28, align 8, !dbg !5009
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 1, !dbg !5009
  %14 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5009
  br label %cond.end29, !dbg !5009

cond.end29:                                       ; preds = %cond.false24, %cond.true23
  %cond30 = phi %struct.rtx_def* [ null, %cond.true23 ], [ %14, %cond.false24 ], !dbg !5009
  %15 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5010
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5010
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5010
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !5010
  %rt_mem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**, !dbg !5010
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem34, align 8, !dbg !5010
  %cmp35 = icmp ne %struct.mem_attrs* %16, null, !dbg !5010
  br i1 %cmp35, label %cond.true36, label %cond.false41, !dbg !5010

cond.true36:                                      ; preds = %cond.end29
  %17 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5010
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5010
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5010
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !5010
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !5010
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !5010
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 2, !dbg !5010
  %19 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5010
  br label %cond.end52, !dbg !5010

cond.false41:                                     ; preds = %cond.end29
  %20 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5010
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5010
  %bf.load = load i32, i32* %21, align 8, !dbg !5010
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5010
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5010
  %cmp42 = icmp ne i32 %bf.clear, 1, !dbg !5010
  br i1 %cmp42, label %cond.true43, label %cond.false49, !dbg !5010

cond.true43:                                      ; preds = %cond.false41
  %22 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5010
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5010
  %bf.load44 = load i32, i32* %23, align 8, !dbg !5010
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !5010
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !5010
  %idxprom = zext i32 %bf.clear46 to i64, !dbg !5010
  %arrayidx47 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5010
  %24 = load i8, i8* %arrayidx47, align 1, !dbg !5010
  %conv = zext i8 %24 to i16, !dbg !5010
  %conv48 = zext i16 %conv to i64, !dbg !5010
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv48), !dbg !5010
  br label %cond.end50, !dbg !5010

cond.false49:                                     ; preds = %cond.false41
  br label %cond.end50, !dbg !5010

cond.end50:                                       ; preds = %cond.false49, %cond.true43
  %cond51 = phi %struct.rtx_def* [ %call, %cond.true43 ], [ null, %cond.false49 ], !dbg !5010
  br label %cond.end52, !dbg !5010

cond.end52:                                       ; preds = %cond.end50, %cond.true36
  %cond53 = phi %struct.rtx_def* [ %19, %cond.true36 ], [ %cond51, %cond.end50 ], !dbg !5010
  %25 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5011
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5011
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5011
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 1, !dbg !5011
  %rt_mem57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.mem_attrs**, !dbg !5011
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem57, align 8, !dbg !5011
  %cmp58 = icmp ne %struct.mem_attrs* %26, null, !dbg !5011
  br i1 %cmp58, label %cond.true60, label %cond.false65, !dbg !5011

cond.true60:                                      ; preds = %cond.end52
  %27 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5011
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5011
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !5011
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !5011
  %rt_mem64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.mem_attrs**, !dbg !5011
  %28 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem64, align 8, !dbg !5011
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %28, i32 0, i32 4, !dbg !5011
  %29 = load i32, i32* %align, align 4, !dbg !5011
  br label %cond.end66, !dbg !5011

cond.false65:                                     ; preds = %cond.end52
  br label %cond.end66, !dbg !5011

cond.end66:                                       ; preds = %cond.false65, %cond.true60
  %cond67 = phi i32 [ %29, %cond.true60 ], [ 8, %cond.false65 ], !dbg !5011
  %30 = load i8, i8* %addrspace.addr, align 1, !dbg !5012
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5013
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5013
  %bf.load68 = load i32, i32* %32, align 8, !dbg !5013
  %bf.lshr69 = lshr i32 %bf.load68, 16, !dbg !5013
  %bf.clear70 = and i32 %bf.lshr69, 255, !dbg !5013
  %call71 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond, %union.tree_node* %cond17, %struct.rtx_def* %cond30, %struct.rtx_def* %cond53, i32 %cond67, i8 zeroext %30, i32 %bf.clear70), !dbg !5014
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5015
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5015
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !5015
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 1, !dbg !5015
  %rt_mem75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.mem_attrs**, !dbg !5015
  store %struct.mem_attrs* %call71, %struct.mem_attrs** %rt_mem75, align 8, !dbg !5016
  ret void, !dbg !5017
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_align(%struct.rtx_def* %mem, i32 %align) #0 !dbg !5018 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5021, metadata !DIExpression()), !dbg !5022
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5025
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5025
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5025
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5025
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5025
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5025
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !5025
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5025

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5025

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5025
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5025
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5025
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5025
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5025
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5025
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !5025
  %4 = load i32, i32* %alias, align 8, !dbg !5025
  br label %cond.end, !dbg !5025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !5025
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5026
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5026
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5026
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5026
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !5026
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !5026
  %cmp9 = icmp eq %struct.mem_attrs* %6, null, !dbg !5026
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !5026

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !5026

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5026
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5026
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5026
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !5026
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !5026
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !5026
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !5026
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5026
  br label %cond.end16, !dbg !5026

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %union.tree_node* [ null, %cond.true10 ], [ %9, %cond.false11 ], !dbg !5026
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5027
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5027
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5027
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5027
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5027
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5027
  %cmp22 = icmp eq %struct.mem_attrs* %11, null, !dbg !5027
  br i1 %cmp22, label %cond.true23, label %cond.false24, !dbg !5027

cond.true23:                                      ; preds = %cond.end16
  br label %cond.end29, !dbg !5027

cond.false24:                                     ; preds = %cond.end16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5027
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5027
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5027
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !5027
  %rt_mem28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**, !dbg !5027
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem28, align 8, !dbg !5027
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 1, !dbg !5027
  %14 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5027
  br label %cond.end29, !dbg !5027

cond.end29:                                       ; preds = %cond.false24, %cond.true23
  %cond30 = phi %struct.rtx_def* [ null, %cond.true23 ], [ %14, %cond.false24 ], !dbg !5027
  %15 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5028
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5028
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5028
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !5028
  %rt_mem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**, !dbg !5028
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem34, align 8, !dbg !5028
  %cmp35 = icmp ne %struct.mem_attrs* %16, null, !dbg !5028
  br i1 %cmp35, label %cond.true36, label %cond.false41, !dbg !5028

cond.true36:                                      ; preds = %cond.end29
  %17 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5028
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5028
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5028
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !5028
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !5028
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !5028
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 2, !dbg !5028
  %19 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5028
  br label %cond.end52, !dbg !5028

cond.false41:                                     ; preds = %cond.end29
  %20 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5028
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5028
  %bf.load = load i32, i32* %21, align 8, !dbg !5028
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5028
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5028
  %cmp42 = icmp ne i32 %bf.clear, 1, !dbg !5028
  br i1 %cmp42, label %cond.true43, label %cond.false49, !dbg !5028

cond.true43:                                      ; preds = %cond.false41
  %22 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5028
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5028
  %bf.load44 = load i32, i32* %23, align 8, !dbg !5028
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !5028
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !5028
  %idxprom = zext i32 %bf.clear46 to i64, !dbg !5028
  %arrayidx47 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5028
  %24 = load i8, i8* %arrayidx47, align 1, !dbg !5028
  %conv = zext i8 %24 to i16, !dbg !5028
  %conv48 = zext i16 %conv to i64, !dbg !5028
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv48), !dbg !5028
  br label %cond.end50, !dbg !5028

cond.false49:                                     ; preds = %cond.false41
  br label %cond.end50, !dbg !5028

cond.end50:                                       ; preds = %cond.false49, %cond.true43
  %cond51 = phi %struct.rtx_def* [ %call, %cond.true43 ], [ null, %cond.false49 ], !dbg !5028
  br label %cond.end52, !dbg !5028

cond.end52:                                       ; preds = %cond.end50, %cond.true36
  %cond53 = phi %struct.rtx_def* [ %19, %cond.true36 ], [ %cond51, %cond.end50 ], !dbg !5028
  %25 = load i32, i32* %align.addr, align 4, !dbg !5029
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5030
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5030
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5030
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 1, !dbg !5030
  %rt_mem57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.mem_attrs**, !dbg !5030
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem57, align 8, !dbg !5030
  %cmp58 = icmp eq %struct.mem_attrs* %27, null, !dbg !5030
  br i1 %cmp58, label %cond.true60, label %cond.false61, !dbg !5030

cond.true60:                                      ; preds = %cond.end52
  br label %cond.end67, !dbg !5030

cond.false61:                                     ; preds = %cond.end52
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5030
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5030
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !5030
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 1, !dbg !5030
  %rt_mem65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.mem_attrs**, !dbg !5030
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem65, align 8, !dbg !5030
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !5030
  %30 = load i8, i8* %addrspace, align 8, !dbg !5030
  %conv66 = zext i8 %30 to i32, !dbg !5030
  br label %cond.end67, !dbg !5030

cond.end67:                                       ; preds = %cond.false61, %cond.true60
  %cond68 = phi i32 [ 0, %cond.true60 ], [ %conv66, %cond.false61 ], !dbg !5030
  %conv69 = trunc i32 %cond68 to i8, !dbg !5030
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5031
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5031
  %bf.load70 = load i32, i32* %32, align 8, !dbg !5031
  %bf.lshr71 = lshr i32 %bf.load70, 16, !dbg !5031
  %bf.clear72 = and i32 %bf.lshr71, 255, !dbg !5031
  %call73 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond, %union.tree_node* %cond17, %struct.rtx_def* %cond30, %struct.rtx_def* %cond53, i32 %25, i8 zeroext %conv69, i32 %bf.clear72), !dbg !5032
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5033
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5033
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !5033
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 1, !dbg !5033
  %rt_mem77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.mem_attrs**, !dbg !5033
  store %struct.mem_attrs* %call73, %struct.mem_attrs** %rt_mem77, align 8, !dbg !5034
  ret void, !dbg !5035
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_expr(%struct.rtx_def* %mem, %union.tree_node* %expr) #0 !dbg !5036 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5039, metadata !DIExpression()), !dbg !5040
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5041, metadata !DIExpression()), !dbg !5042
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5043
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5043
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5043
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5043
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5043
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5043
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !5043
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5043

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5043

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5043
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5043
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5043
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5043
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5043
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5043
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !5043
  %4 = load i32, i32* %alias, align 8, !dbg !5043
  br label %cond.end, !dbg !5043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !5043
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5044
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5045
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5045
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5045
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5045
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !5045
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !5045
  %cmp9 = icmp eq %struct.mem_attrs* %7, null, !dbg !5045
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !5045

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !5045

cond.false11:                                     ; preds = %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5045
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5045
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5045
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !5045
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !5045
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !5045
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %9, i32 0, i32 1, !dbg !5045
  %10 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5045
  br label %cond.end16, !dbg !5045

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %struct.rtx_def* [ null, %cond.true10 ], [ %10, %cond.false11 ], !dbg !5045
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5046
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5046
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5046
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5046
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5046
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5046
  %cmp22 = icmp ne %struct.mem_attrs* %12, null, !dbg !5046
  br i1 %cmp22, label %cond.true23, label %cond.false28, !dbg !5046

cond.true23:                                      ; preds = %cond.end16
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5046
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5046
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !5046
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !5046
  %rt_mem27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.mem_attrs**, !dbg !5046
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem27, align 8, !dbg !5046
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 2, !dbg !5046
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5046
  br label %cond.end39, !dbg !5046

cond.false28:                                     ; preds = %cond.end16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5046
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5046
  %bf.load = load i32, i32* %17, align 8, !dbg !5046
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5046
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5046
  %cmp29 = icmp ne i32 %bf.clear, 1, !dbg !5046
  br i1 %cmp29, label %cond.true30, label %cond.false36, !dbg !5046

cond.true30:                                      ; preds = %cond.false28
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5046
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5046
  %bf.load31 = load i32, i32* %19, align 8, !dbg !5046
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !5046
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !5046
  %idxprom = zext i32 %bf.clear33 to i64, !dbg !5046
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5046
  %20 = load i8, i8* %arrayidx34, align 1, !dbg !5046
  %conv = zext i8 %20 to i16, !dbg !5046
  %conv35 = zext i16 %conv to i64, !dbg !5046
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv35), !dbg !5046
  br label %cond.end37, !dbg !5046

cond.false36:                                     ; preds = %cond.false28
  br label %cond.end37, !dbg !5046

cond.end37:                                       ; preds = %cond.false36, %cond.true30
  %cond38 = phi %struct.rtx_def* [ %call, %cond.true30 ], [ null, %cond.false36 ], !dbg !5046
  br label %cond.end39, !dbg !5046

cond.end39:                                       ; preds = %cond.end37, %cond.true23
  %cond40 = phi %struct.rtx_def* [ %15, %cond.true23 ], [ %cond38, %cond.end37 ], !dbg !5046
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5047
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5047
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !5047
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !5047
  %rt_mem44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.mem_attrs**, !dbg !5047
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem44, align 8, !dbg !5047
  %cmp45 = icmp ne %struct.mem_attrs* %22, null, !dbg !5047
  br i1 %cmp45, label %cond.true47, label %cond.false52, !dbg !5047

cond.true47:                                      ; preds = %cond.end39
  %23 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5047
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !5047
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !5047
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !5047
  %rt_mem51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.mem_attrs**, !dbg !5047
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem51, align 8, !dbg !5047
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %24, i32 0, i32 4, !dbg !5047
  %25 = load i32, i32* %align, align 4, !dbg !5047
  br label %cond.end53, !dbg !5047

cond.false52:                                     ; preds = %cond.end39
  br label %cond.end53, !dbg !5047

cond.end53:                                       ; preds = %cond.false52, %cond.true47
  %cond54 = phi i32 [ %25, %cond.true47 ], [ 8, %cond.false52 ], !dbg !5047
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5048
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5048
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !5048
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !5048
  %rt_mem58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.mem_attrs**, !dbg !5048
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem58, align 8, !dbg !5048
  %cmp59 = icmp eq %struct.mem_attrs* %27, null, !dbg !5048
  br i1 %cmp59, label %cond.true61, label %cond.false62, !dbg !5048

cond.true61:                                      ; preds = %cond.end53
  br label %cond.end68, !dbg !5048

cond.false62:                                     ; preds = %cond.end53
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5048
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5048
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !5048
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 1, !dbg !5048
  %rt_mem66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.mem_attrs**, !dbg !5048
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem66, align 8, !dbg !5048
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !5048
  %30 = load i8, i8* %addrspace, align 8, !dbg !5048
  %conv67 = zext i8 %30 to i32, !dbg !5048
  br label %cond.end68, !dbg !5048

cond.end68:                                       ; preds = %cond.false62, %cond.true61
  %cond69 = phi i32 [ 0, %cond.true61 ], [ %conv67, %cond.false62 ], !dbg !5048
  %conv70 = trunc i32 %cond69 to i8, !dbg !5048
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5049
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5049
  %bf.load71 = load i32, i32* %32, align 8, !dbg !5049
  %bf.lshr72 = lshr i32 %bf.load71, 16, !dbg !5049
  %bf.clear73 = and i32 %bf.lshr72, 255, !dbg !5049
  %call74 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond, %union.tree_node* %5, %struct.rtx_def* %cond17, %struct.rtx_def* %cond40, i32 %cond54, i8 zeroext %conv70, i32 %bf.clear73), !dbg !5050
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5051
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5051
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !5051
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !5051
  %rt_mem78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.mem_attrs**, !dbg !5051
  store %struct.mem_attrs* %call74, %struct.mem_attrs** %rt_mem78, align 8, !dbg !5052
  ret void, !dbg !5053
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_offset(%struct.rtx_def* %mem, %struct.rtx_def* %offset) #0 !dbg !5054 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5055, metadata !DIExpression()), !dbg !5056
  store %struct.rtx_def* %offset, %struct.rtx_def** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset.addr, metadata !5057, metadata !DIExpression()), !dbg !5058
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5059
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5059
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5059
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5059
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5059
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5059
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !5059
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5059

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5059

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5059
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5059
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5059
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5059
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5059
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5059
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !5059
  %4 = load i32, i32* %alias, align 8, !dbg !5059
  br label %cond.end, !dbg !5059

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !5059
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5060
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5060
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5060
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5060
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !5060
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !5060
  %cmp9 = icmp eq %struct.mem_attrs* %6, null, !dbg !5060
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !5060

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !5060

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5060
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5060
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5060
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !5060
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !5060
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !5060
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !5060
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5060
  br label %cond.end16, !dbg !5060

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %union.tree_node* [ null, %cond.true10 ], [ %9, %cond.false11 ], !dbg !5060
  %10 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !5061
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5062
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5062
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5062
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5062
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5062
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5062
  %cmp22 = icmp ne %struct.mem_attrs* %12, null, !dbg !5062
  br i1 %cmp22, label %cond.true23, label %cond.false28, !dbg !5062

cond.true23:                                      ; preds = %cond.end16
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5062
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5062
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !5062
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !5062
  %rt_mem27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.mem_attrs**, !dbg !5062
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem27, align 8, !dbg !5062
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 2, !dbg !5062
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5062
  br label %cond.end39, !dbg !5062

cond.false28:                                     ; preds = %cond.end16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5062
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5062
  %bf.load = load i32, i32* %17, align 8, !dbg !5062
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5062
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5062
  %cmp29 = icmp ne i32 %bf.clear, 1, !dbg !5062
  br i1 %cmp29, label %cond.true30, label %cond.false36, !dbg !5062

cond.true30:                                      ; preds = %cond.false28
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5062
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5062
  %bf.load31 = load i32, i32* %19, align 8, !dbg !5062
  %bf.lshr32 = lshr i32 %bf.load31, 16, !dbg !5062
  %bf.clear33 = and i32 %bf.lshr32, 255, !dbg !5062
  %idxprom = zext i32 %bf.clear33 to i64, !dbg !5062
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5062
  %20 = load i8, i8* %arrayidx34, align 1, !dbg !5062
  %conv = zext i8 %20 to i16, !dbg !5062
  %conv35 = zext i16 %conv to i64, !dbg !5062
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv35), !dbg !5062
  br label %cond.end37, !dbg !5062

cond.false36:                                     ; preds = %cond.false28
  br label %cond.end37, !dbg !5062

cond.end37:                                       ; preds = %cond.false36, %cond.true30
  %cond38 = phi %struct.rtx_def* [ %call, %cond.true30 ], [ null, %cond.false36 ], !dbg !5062
  br label %cond.end39, !dbg !5062

cond.end39:                                       ; preds = %cond.end37, %cond.true23
  %cond40 = phi %struct.rtx_def* [ %15, %cond.true23 ], [ %cond38, %cond.end37 ], !dbg !5062
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5063
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5063
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !5063
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !5063
  %rt_mem44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.mem_attrs**, !dbg !5063
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem44, align 8, !dbg !5063
  %cmp45 = icmp ne %struct.mem_attrs* %22, null, !dbg !5063
  br i1 %cmp45, label %cond.true47, label %cond.false52, !dbg !5063

cond.true47:                                      ; preds = %cond.end39
  %23 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5063
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !5063
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !5063
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !5063
  %rt_mem51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.mem_attrs**, !dbg !5063
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem51, align 8, !dbg !5063
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %24, i32 0, i32 4, !dbg !5063
  %25 = load i32, i32* %align, align 4, !dbg !5063
  br label %cond.end53, !dbg !5063

cond.false52:                                     ; preds = %cond.end39
  br label %cond.end53, !dbg !5063

cond.end53:                                       ; preds = %cond.false52, %cond.true47
  %cond54 = phi i32 [ %25, %cond.true47 ], [ 8, %cond.false52 ], !dbg !5063
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5064
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5064
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !5064
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !5064
  %rt_mem58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.mem_attrs**, !dbg !5064
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem58, align 8, !dbg !5064
  %cmp59 = icmp eq %struct.mem_attrs* %27, null, !dbg !5064
  br i1 %cmp59, label %cond.true61, label %cond.false62, !dbg !5064

cond.true61:                                      ; preds = %cond.end53
  br label %cond.end68, !dbg !5064

cond.false62:                                     ; preds = %cond.end53
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5064
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5064
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !5064
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 1, !dbg !5064
  %rt_mem66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.mem_attrs**, !dbg !5064
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem66, align 8, !dbg !5064
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !5064
  %30 = load i8, i8* %addrspace, align 8, !dbg !5064
  %conv67 = zext i8 %30 to i32, !dbg !5064
  br label %cond.end68, !dbg !5064

cond.end68:                                       ; preds = %cond.false62, %cond.true61
  %cond69 = phi i32 [ 0, %cond.true61 ], [ %conv67, %cond.false62 ], !dbg !5064
  %conv70 = trunc i32 %cond69 to i8, !dbg !5064
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5065
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5065
  %bf.load71 = load i32, i32* %32, align 8, !dbg !5065
  %bf.lshr72 = lshr i32 %bf.load71, 16, !dbg !5065
  %bf.clear73 = and i32 %bf.lshr72, 255, !dbg !5065
  %call74 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond, %union.tree_node* %cond17, %struct.rtx_def* %10, %struct.rtx_def* %cond40, i32 %cond54, i8 zeroext %conv70, i32 %bf.clear73), !dbg !5066
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5067
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5067
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !5067
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !5067
  %rt_mem78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.mem_attrs**, !dbg !5067
  store %struct.mem_attrs* %call74, %struct.mem_attrs** %rt_mem78, align 8, !dbg !5068
  ret void, !dbg !5069
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_size(%struct.rtx_def* %mem, %struct.rtx_def* %size) #0 !dbg !5070 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5071, metadata !DIExpression()), !dbg !5072
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size.addr, metadata !5073, metadata !DIExpression()), !dbg !5074
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5075
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5075
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5075
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5075
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5075
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5075
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !5075
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5075

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5075

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5075
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5075
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5075
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5075
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5075
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5075
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 3, !dbg !5075
  %4 = load i32, i32* %alias, align 8, !dbg !5075
  br label %cond.end, !dbg !5075

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !5075
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5076
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5076
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5076
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5076
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !5076
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !5076
  %cmp9 = icmp eq %struct.mem_attrs* %6, null, !dbg !5076
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !5076

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16, !dbg !5076

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5076
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5076
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5076
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !5076
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !5076
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !5076
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !5076
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5076
  br label %cond.end16, !dbg !5076

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi %union.tree_node* [ null, %cond.true10 ], [ %9, %cond.false11 ], !dbg !5076
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5077
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5077
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5077
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5077
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5077
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5077
  %cmp22 = icmp eq %struct.mem_attrs* %11, null, !dbg !5077
  br i1 %cmp22, label %cond.true23, label %cond.false24, !dbg !5077

cond.true23:                                      ; preds = %cond.end16
  br label %cond.end29, !dbg !5077

cond.false24:                                     ; preds = %cond.end16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5077
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5077
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5077
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !5077
  %rt_mem28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**, !dbg !5077
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem28, align 8, !dbg !5077
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 1, !dbg !5077
  %14 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5077
  br label %cond.end29, !dbg !5077

cond.end29:                                       ; preds = %cond.false24, %cond.true23
  %cond30 = phi %struct.rtx_def* [ null, %cond.true23 ], [ %14, %cond.false24 ], !dbg !5077
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !5078
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5079
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5079
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5079
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !5079
  %rt_mem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**, !dbg !5079
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem34, align 8, !dbg !5079
  %cmp35 = icmp ne %struct.mem_attrs* %17, null, !dbg !5079
  br i1 %cmp35, label %cond.true36, label %cond.false41, !dbg !5079

cond.true36:                                      ; preds = %cond.end29
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5079
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5079
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5079
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !5079
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !5079
  %19 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !5079
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %19, i32 0, i32 4, !dbg !5079
  %20 = load i32, i32* %align, align 4, !dbg !5079
  br label %cond.end42, !dbg !5079

cond.false41:                                     ; preds = %cond.end29
  br label %cond.end42, !dbg !5079

cond.end42:                                       ; preds = %cond.false41, %cond.true36
  %cond43 = phi i32 [ %20, %cond.true36 ], [ 8, %cond.false41 ], !dbg !5079
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5080
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5080
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5080
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !5080
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !5080
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !5080
  %cmp48 = icmp eq %struct.mem_attrs* %22, null, !dbg !5080
  br i1 %cmp48, label %cond.true49, label %cond.false50, !dbg !5080

cond.true49:                                      ; preds = %cond.end42
  br label %cond.end55, !dbg !5080

cond.false50:                                     ; preds = %cond.end42
  %23 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5080
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !5080
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !5080
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 1, !dbg !5080
  %rt_mem54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.mem_attrs**, !dbg !5080
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem54, align 8, !dbg !5080
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %24, i32 0, i32 5, !dbg !5080
  %25 = load i8, i8* %addrspace, align 8, !dbg !5080
  %conv = zext i8 %25 to i32, !dbg !5080
  br label %cond.end55, !dbg !5080

cond.end55:                                       ; preds = %cond.false50, %cond.true49
  %cond56 = phi i32 [ 0, %cond.true49 ], [ %conv, %cond.false50 ], !dbg !5080
  %conv57 = trunc i32 %cond56 to i8, !dbg !5080
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5081
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !5081
  %bf.load = load i32, i32* %27, align 8, !dbg !5081
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5081
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5081
  %call = call %struct.mem_attrs* @get_mem_attrs(i32 %cond, %union.tree_node* %cond17, %struct.rtx_def* %cond30, %struct.rtx_def* %15, i32 %cond43, i8 zeroext %conv57, i32 %bf.clear), !dbg !5082
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5083
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5083
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5083
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !5083
  %rt_mem61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.mem_attrs**, !dbg !5083
  store %struct.mem_attrs* %call, %struct.mem_attrs** %rt_mem61, align 8, !dbg !5084
  ret void, !dbg !5085
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @change_address(%struct.rtx_def* %memref, i32 %mode, %struct.rtx_def* %addr) #0 !dbg !5086 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %size = alloca %struct.rtx_def*, align 8
  %mmode = alloca i32, align 4
  %align = alloca i32, align 4
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5089, metadata !DIExpression()), !dbg !5090
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5091, metadata !DIExpression()), !dbg !5092
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !5093, metadata !DIExpression()), !dbg !5094
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !5095, metadata !DIExpression()), !dbg !5096
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5097
  %1 = load i32, i32* %mode.addr, align 4, !dbg !5098
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5099
  %call = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %0, i32 %1, %struct.rtx_def* %2, i32 1), !dbg !5100
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !5096
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size, metadata !5101, metadata !DIExpression()), !dbg !5102
  call void @llvm.dbg.declare(metadata i32* %mmode, metadata !5103, metadata !DIExpression()), !dbg !5104
  %3 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5105
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5105
  %bf.load = load i32, i32* %4, align 8, !dbg !5105
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5105
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5105
  store i32 %bf.clear, i32* %mmode, align 4, !dbg !5104
  call void @llvm.dbg.declare(metadata i32* %align, metadata !5106, metadata !DIExpression()), !dbg !5107
  %5 = load i32, i32* %mmode, align 4, !dbg !5108
  %cmp = icmp eq i32 %5, 1, !dbg !5109
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5108

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5108

cond.false:                                       ; preds = %entry
  %6 = load i32, i32* %mmode, align 4, !dbg !5110
  %idxprom = zext i32 %6 to i64, !dbg !5110
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5110
  %7 = load i8, i8* %arrayidx, align 1, !dbg !5110
  %conv = zext i8 %7 to i16, !dbg !5110
  %conv1 = zext i16 %conv to i64, !dbg !5110
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv1), !dbg !5110
  br label %cond.end, !dbg !5108

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %call2, %cond.false ], !dbg !5108
  store %struct.rtx_def* %cond, %struct.rtx_def** %size, align 8, !dbg !5111
  %8 = load i32, i32* %mmode, align 4, !dbg !5112
  %cmp3 = icmp eq i32 %8, 1, !dbg !5113
  br i1 %cmp3, label %cond.true5, label %cond.false6, !dbg !5112

cond.true5:                                       ; preds = %cond.end
  br label %cond.end8, !dbg !5112

cond.false6:                                      ; preds = %cond.end
  %9 = load i32, i32* %mmode, align 4, !dbg !5114
  %call7 = call i32 @get_mode_alignment(i32 %9), !dbg !5114
  br label %cond.end8, !dbg !5112

cond.end8:                                        ; preds = %cond.false6, %cond.true5
  %cond9 = phi i32 [ 8, %cond.true5 ], [ %call7, %cond.false6 ], !dbg !5112
  store i32 %cond9, i32* %align, align 4, !dbg !5115
  %10 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5116
  %11 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5118
  %cmp10 = icmp eq %struct.rtx_def* %10, %11, !dbg !5119
  br i1 %cmp10, label %if.then, label %if.end165, !dbg !5120

if.then:                                          ; preds = %cond.end8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5121
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5121
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5121
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5121
  %rt_mem = bitcast %union.rtunion_def* %arrayidx12 to %struct.mem_attrs**, !dbg !5121
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5121
  %cmp13 = icmp eq %struct.mem_attrs* %13, null, !dbg !5124
  br i1 %cmp13, label %if.then100, label %lor.lhs.false, !dbg !5125

lor.lhs.false:                                    ; preds = %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5126
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5126
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !5126
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !5126
  %rt_mem18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.mem_attrs**, !dbg !5126
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem18, align 8, !dbg !5126
  %cmp19 = icmp eq %struct.mem_attrs* %15, null, !dbg !5126
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !5126

cond.true21:                                      ; preds = %lor.lhs.false
  br label %cond.end27, !dbg !5126

cond.false22:                                     ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5126
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5126
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !5126
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 1, !dbg !5126
  %rt_mem26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.mem_attrs**, !dbg !5126
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem26, align 8, !dbg !5126
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %17, i32 0, i32 0, !dbg !5126
  %18 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5126
  br label %cond.end27, !dbg !5126

cond.end27:                                       ; preds = %cond.false22, %cond.true21
  %cond28 = phi %union.tree_node* [ null, %cond.true21 ], [ %18, %cond.false22 ], !dbg !5126
  %cmp29 = icmp eq %union.tree_node* %cond28, null, !dbg !5127
  br i1 %cmp29, label %land.lhs.true, label %if.end, !dbg !5128

land.lhs.true:                                    ; preds = %cond.end27
  %19 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5129
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5129
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5129
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !5129
  %rt_mem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**, !dbg !5129
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem34, align 8, !dbg !5129
  %cmp35 = icmp eq %struct.mem_attrs* %20, null, !dbg !5129
  br i1 %cmp35, label %cond.true37, label %cond.false38, !dbg !5129

cond.true37:                                      ; preds = %land.lhs.true
  br label %cond.end43, !dbg !5129

cond.false38:                                     ; preds = %land.lhs.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5129
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5129
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !5129
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 1, !dbg !5129
  %rt_mem42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.mem_attrs**, !dbg !5129
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem42, align 8, !dbg !5129
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 1, !dbg !5129
  %23 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5129
  br label %cond.end43, !dbg !5129

cond.end43:                                       ; preds = %cond.false38, %cond.true37
  %cond44 = phi %struct.rtx_def* [ null, %cond.true37 ], [ %23, %cond.false38 ], !dbg !5129
  %cmp45 = icmp eq %struct.rtx_def* %cond44, null, !dbg !5130
  br i1 %cmp45, label %land.lhs.true47, label %if.end, !dbg !5131

land.lhs.true47:                                  ; preds = %cond.end43
  %24 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5132
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5132
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !5132
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !5132
  %rt_mem51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.mem_attrs**, !dbg !5132
  %25 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem51, align 8, !dbg !5132
  %cmp52 = icmp ne %struct.mem_attrs* %25, null, !dbg !5132
  br i1 %cmp52, label %cond.true54, label %cond.false60, !dbg !5132

cond.true54:                                      ; preds = %land.lhs.true47
  %26 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5132
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5132
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !5132
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !5132
  %rt_mem58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.mem_attrs**, !dbg !5132
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem58, align 8, !dbg !5132
  %size59 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %27, i32 0, i32 2, !dbg !5132
  %28 = load %struct.rtx_def*, %struct.rtx_def** %size59, align 8, !dbg !5132
  br label %cond.end78, !dbg !5132

cond.false60:                                     ; preds = %land.lhs.true47
  %29 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5132
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !5132
  %bf.load61 = load i32, i32* %30, align 8, !dbg !5132
  %bf.lshr62 = lshr i32 %bf.load61, 16, !dbg !5132
  %bf.clear63 = and i32 %bf.lshr62, 255, !dbg !5132
  %cmp64 = icmp ne i32 %bf.clear63, 1, !dbg !5132
  br i1 %cmp64, label %cond.true66, label %cond.false75, !dbg !5132

cond.true66:                                      ; preds = %cond.false60
  %31 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5132
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5132
  %bf.load67 = load i32, i32* %32, align 8, !dbg !5132
  %bf.lshr68 = lshr i32 %bf.load67, 16, !dbg !5132
  %bf.clear69 = and i32 %bf.lshr68, 255, !dbg !5132
  %idxprom70 = zext i32 %bf.clear69 to i64, !dbg !5132
  %arrayidx71 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom70, !dbg !5132
  %33 = load i8, i8* %arrayidx71, align 1, !dbg !5132
  %conv72 = zext i8 %33 to i16, !dbg !5132
  %conv73 = zext i16 %conv72 to i64, !dbg !5132
  %call74 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv73), !dbg !5132
  br label %cond.end76, !dbg !5132

cond.false75:                                     ; preds = %cond.false60
  br label %cond.end76, !dbg !5132

cond.end76:                                       ; preds = %cond.false75, %cond.true66
  %cond77 = phi %struct.rtx_def* [ %call74, %cond.true66 ], [ null, %cond.false75 ], !dbg !5132
  br label %cond.end78, !dbg !5132

cond.end78:                                       ; preds = %cond.end76, %cond.true54
  %cond79 = phi %struct.rtx_def* [ %28, %cond.true54 ], [ %cond77, %cond.end76 ], !dbg !5132
  %34 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5133
  %cmp80 = icmp eq %struct.rtx_def* %cond79, %34, !dbg !5134
  br i1 %cmp80, label %land.lhs.true82, label %if.end, !dbg !5135

land.lhs.true82:                                  ; preds = %cond.end78
  %35 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5136
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5136
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !5136
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 1, !dbg !5136
  %rt_mem86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.mem_attrs**, !dbg !5136
  %36 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem86, align 8, !dbg !5136
  %cmp87 = icmp ne %struct.mem_attrs* %36, null, !dbg !5136
  br i1 %cmp87, label %cond.true89, label %cond.false95, !dbg !5136

cond.true89:                                      ; preds = %land.lhs.true82
  %37 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5136
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5136
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !5136
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 1, !dbg !5136
  %rt_mem93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.mem_attrs**, !dbg !5136
  %38 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem93, align 8, !dbg !5136
  %align94 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %38, i32 0, i32 4, !dbg !5136
  %39 = load i32, i32* %align94, align 4, !dbg !5136
  br label %cond.end96, !dbg !5136

cond.false95:                                     ; preds = %land.lhs.true82
  br label %cond.end96, !dbg !5136

cond.end96:                                       ; preds = %cond.false95, %cond.true89
  %cond97 = phi i32 [ %39, %cond.true89 ], [ 8, %cond.false95 ], !dbg !5136
  %40 = load i32, i32* %align, align 4, !dbg !5137
  %cmp98 = icmp eq i32 %cond97, %40, !dbg !5138
  br i1 %cmp98, label %if.then100, label %if.end, !dbg !5139

if.then100:                                       ; preds = %cond.end96, %if.then
  %41 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5140
  store %struct.rtx_def* %41, %struct.rtx_def** %retval, align 8, !dbg !5141
  br label %return, !dbg !5141

if.end:                                           ; preds = %cond.end96, %cond.end78, %cond.end43, %cond.end27
  %42 = load i32, i32* %mmode, align 4, !dbg !5142
  %43 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5143
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !5143
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !5143
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 0, !dbg !5143
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !5143
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5143
  %call104 = call %struct.rtx_def* @gen_rtx_MEM(i32 %42, %struct.rtx_def* %44), !dbg !5144
  store %struct.rtx_def* %call104, %struct.rtx_def** %new_rtx, align 8, !dbg !5145
  %45 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5146
  %bf.load105 = load i32, i32* %46, align 8, !dbg !5146
  %bf.lshr106 = lshr i32 %bf.load105, 27, !dbg !5146
  %bf.clear107 = and i32 %bf.lshr106, 1, !dbg !5146
  %47 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5146
  %bf.load108 = load i32, i32* %48, align 8, !dbg !5146
  %bf.value = and i32 %bf.clear107, 1, !dbg !5146
  %bf.shl = shl i32 %bf.value, 27, !dbg !5146
  %bf.clear109 = and i32 %bf.load108, -134217729, !dbg !5146
  %bf.set = or i32 %bf.clear109, %bf.shl, !dbg !5146
  store i32 %bf.set, i32* %48, align 8, !dbg !5146
  %49 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !5146
  %bf.load110 = load i32, i32* %50, align 8, !dbg !5146
  %bf.lshr111 = lshr i32 %bf.load110, 28, !dbg !5146
  %bf.clear112 = and i32 %bf.lshr111, 1, !dbg !5146
  %51 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !5146
  %bf.load113 = load i32, i32* %52, align 8, !dbg !5146
  %bf.value114 = and i32 %bf.clear112, 1, !dbg !5146
  %bf.shl115 = shl i32 %bf.value114, 28, !dbg !5146
  %bf.clear116 = and i32 %bf.load113, -268435457, !dbg !5146
  %bf.set117 = or i32 %bf.clear116, %bf.shl115, !dbg !5146
  store i32 %bf.set117, i32* %52, align 8, !dbg !5146
  %53 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !5146
  %bf.load118 = load i32, i32* %54, align 8, !dbg !5146
  %bf.lshr119 = lshr i32 %bf.load118, 31, !dbg !5146
  %55 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !5146
  %bf.load120 = load i32, i32* %56, align 8, !dbg !5146
  %bf.value121 = and i32 %bf.lshr119, 1, !dbg !5146
  %bf.shl122 = shl i32 %bf.value121, 31, !dbg !5146
  %bf.clear123 = and i32 %bf.load120, 2147483647, !dbg !5146
  %bf.set124 = or i32 %bf.clear123, %bf.shl122, !dbg !5146
  store i32 %bf.set124, i32* %56, align 8, !dbg !5146
  %57 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !5146
  %bf.load125 = load i32, i32* %58, align 8, !dbg !5146
  %bf.lshr126 = lshr i32 %bf.load125, 25, !dbg !5146
  %bf.clear127 = and i32 %bf.lshr126, 1, !dbg !5146
  %59 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !5146
  %bf.load128 = load i32, i32* %60, align 8, !dbg !5146
  %bf.value129 = and i32 %bf.clear127, 1, !dbg !5146
  %bf.shl130 = shl i32 %bf.value129, 25, !dbg !5146
  %bf.clear131 = and i32 %bf.load128, -33554433, !dbg !5146
  %bf.set132 = or i32 %bf.clear131, %bf.shl130, !dbg !5146
  store i32 %bf.set132, i32* %60, align 8, !dbg !5146
  %61 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !5146
  %bf.load133 = load i32, i32* %62, align 8, !dbg !5146
  %bf.lshr134 = lshr i32 %bf.load133, 26, !dbg !5146
  %bf.clear135 = and i32 %bf.lshr134, 1, !dbg !5146
  %63 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !5146
  %bf.load136 = load i32, i32* %64, align 8, !dbg !5146
  %bf.value137 = and i32 %bf.clear135, 1, !dbg !5146
  %bf.shl138 = shl i32 %bf.value137, 26, !dbg !5146
  %bf.clear139 = and i32 %bf.load136, -67108865, !dbg !5146
  %bf.set140 = or i32 %bf.clear139, %bf.shl138, !dbg !5146
  store i32 %bf.set140, i32* %64, align 8, !dbg !5146
  %65 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !5146
  %bf.load141 = load i32, i32* %66, align 8, !dbg !5146
  %bf.lshr142 = lshr i32 %bf.load141, 24, !dbg !5146
  %bf.clear143 = and i32 %bf.lshr142, 1, !dbg !5146
  %67 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !5146
  %bf.load144 = load i32, i32* %68, align 8, !dbg !5146
  %bf.value145 = and i32 %bf.clear143, 1, !dbg !5146
  %bf.shl146 = shl i32 %bf.value145, 24, !dbg !5146
  %bf.clear147 = and i32 %bf.load144, -16777217, !dbg !5146
  %bf.set148 = or i32 %bf.clear147, %bf.shl146, !dbg !5146
  store i32 %bf.set148, i32* %68, align 8, !dbg !5146
  %69 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !5146
  %bf.load149 = load i32, i32* %70, align 8, !dbg !5146
  %bf.lshr150 = lshr i32 %bf.load149, 30, !dbg !5146
  %bf.clear151 = and i32 %bf.lshr150, 1, !dbg !5146
  %71 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !5146
  %bf.load152 = load i32, i32* %72, align 8, !dbg !5146
  %bf.value153 = and i32 %bf.clear151, 1, !dbg !5146
  %bf.shl154 = shl i32 %bf.value153, 30, !dbg !5146
  %bf.clear155 = and i32 %bf.load152, -1073741825, !dbg !5146
  %bf.set156 = or i32 %bf.clear155, %bf.shl154, !dbg !5146
  store i32 %bf.set156, i32* %72, align 8, !dbg !5146
  %73 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5146
  %u157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !5146
  %fld158 = bitcast %union.u* %u157 to [1 x %union.rtunion_def]*, !dbg !5146
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i64 0, i64 1, !dbg !5146
  %rt_mem160 = bitcast %union.rtunion_def* %arrayidx159 to %struct.mem_attrs**, !dbg !5146
  %74 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem160, align 8, !dbg !5146
  %75 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5146
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !5146
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !5146
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 1, !dbg !5146
  %rt_mem164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.mem_attrs**, !dbg !5146
  store %struct.mem_attrs* %74, %struct.mem_attrs** %rt_mem164, align 8, !dbg !5146
  br label %if.end165, !dbg !5147

if.end165:                                        ; preds = %if.end, %cond.end8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5148
  %u166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !5148
  %fld167 = bitcast %union.u* %u166 to [1 x %union.rtunion_def]*, !dbg !5148
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i64 0, i64 1, !dbg !5148
  %rt_mem169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.mem_attrs**, !dbg !5148
  %77 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem169, align 8, !dbg !5148
  %cmp170 = icmp eq %struct.mem_attrs* %77, null, !dbg !5148
  br i1 %cmp170, label %cond.true172, label %cond.false173, !dbg !5148

cond.true172:                                     ; preds = %if.end165
  br label %cond.end178, !dbg !5148

cond.false173:                                    ; preds = %if.end165
  %78 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5148
  %u174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !5148
  %fld175 = bitcast %union.u* %u174 to [1 x %union.rtunion_def]*, !dbg !5148
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i64 0, i64 1, !dbg !5148
  %rt_mem177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.mem_attrs**, !dbg !5148
  %79 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem177, align 8, !dbg !5148
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %79, i32 0, i32 3, !dbg !5148
  %80 = load i32, i32* %alias, align 8, !dbg !5148
  br label %cond.end178, !dbg !5148

cond.end178:                                      ; preds = %cond.false173, %cond.true172
  %cond179 = phi i32 [ 0, %cond.true172 ], [ %80, %cond.false173 ], !dbg !5148
  %81 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5149
  %82 = load i32, i32* %align, align 4, !dbg !5150
  %83 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5151
  %u180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !5151
  %fld181 = bitcast %union.u* %u180 to [1 x %union.rtunion_def]*, !dbg !5151
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i64 0, i64 1, !dbg !5151
  %rt_mem183 = bitcast %union.rtunion_def* %arrayidx182 to %struct.mem_attrs**, !dbg !5151
  %84 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem183, align 8, !dbg !5151
  %cmp184 = icmp eq %struct.mem_attrs* %84, null, !dbg !5151
  br i1 %cmp184, label %cond.true186, label %cond.false187, !dbg !5151

cond.true186:                                     ; preds = %cond.end178
  br label %cond.end193, !dbg !5151

cond.false187:                                    ; preds = %cond.end178
  %85 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5151
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !5151
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !5151
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 1, !dbg !5151
  %rt_mem191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.mem_attrs**, !dbg !5151
  %86 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem191, align 8, !dbg !5151
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %86, i32 0, i32 5, !dbg !5151
  %87 = load i8, i8* %addrspace, align 8, !dbg !5151
  %conv192 = zext i8 %87 to i32, !dbg !5151
  br label %cond.end193, !dbg !5151

cond.end193:                                      ; preds = %cond.false187, %cond.true186
  %cond194 = phi i32 [ 0, %cond.true186 ], [ %conv192, %cond.false187 ], !dbg !5151
  %conv195 = trunc i32 %cond194 to i8, !dbg !5151
  %88 = load i32, i32* %mmode, align 4, !dbg !5152
  %call196 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond179, %union.tree_node* null, %struct.rtx_def* null, %struct.rtx_def* %81, i32 %82, i8 zeroext %conv195, i32 %88), !dbg !5153
  %89 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5154
  %u197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !5154
  %fld198 = bitcast %union.u* %u197 to [1 x %union.rtunion_def]*, !dbg !5154
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i64 0, i64 1, !dbg !5154
  %rt_mem200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.mem_attrs**, !dbg !5154
  store %struct.mem_attrs* %call196, %struct.mem_attrs** %rt_mem200, align 8, !dbg !5155
  %90 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5156
  store %struct.rtx_def* %90, %struct.rtx_def** %retval, align 8, !dbg !5157
  br label %return, !dbg !5157

return:                                           ; preds = %cond.end193, %if.then100
  %91 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5158
  ret %struct.rtx_def* %91, !dbg !5158
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 %mode, %struct.rtx_def* %addr, i32 %validate) #0 !dbg !5159 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %validate.addr = alloca i32, align 4
  %as = alloca i8, align 1
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5162, metadata !DIExpression()), !dbg !5163
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5164, metadata !DIExpression()), !dbg !5165
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !5166, metadata !DIExpression()), !dbg !5167
  store i32 %validate, i32* %validate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validate.addr, metadata !5168, metadata !DIExpression()), !dbg !5169
  call void @llvm.dbg.declare(metadata i8* %as, metadata !5170, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !5172, metadata !DIExpression()), !dbg !5173
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5174
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5174
  %bf.load = load i32, i32* %1, align 8, !dbg !5174
  %bf.clear = and i32 %bf.load, 65535, !dbg !5174
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !5174
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5174

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1899, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5174
  br label %cond.end, !dbg !5174

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5174
  %2 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5175
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5175
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5175
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5175
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5175
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5175
  %cmp1 = icmp eq %struct.mem_attrs* %3, null, !dbg !5175
  br i1 %cmp1, label %cond.true2, label %cond.false3, !dbg !5175

cond.true2:                                       ; preds = %cond.end
  br label %cond.end8, !dbg !5175

cond.false3:                                      ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5175
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5175
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !5175
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 1, !dbg !5175
  %rt_mem7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.mem_attrs**, !dbg !5175
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem7, align 8, !dbg !5175
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %5, i32 0, i32 5, !dbg !5175
  %6 = load i8, i8* %addrspace, align 8, !dbg !5175
  %conv = zext i8 %6 to i32, !dbg !5175
  br label %cond.end8, !dbg !5175

cond.end8:                                        ; preds = %cond.false3, %cond.true2
  %cond9 = phi i32 [ 0, %cond.true2 ], [ %conv, %cond.false3 ], !dbg !5175
  %conv10 = trunc i32 %cond9 to i8, !dbg !5175
  store i8 %conv10, i8* %as, align 1, !dbg !5176
  %7 = load i32, i32* %mode.addr, align 4, !dbg !5177
  %cmp11 = icmp eq i32 %7, 0, !dbg !5179
  br i1 %cmp11, label %if.then, label %if.end, !dbg !5180

if.then:                                          ; preds = %cond.end8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5181
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5181
  %bf.load13 = load i32, i32* %9, align 8, !dbg !5181
  %bf.lshr = lshr i32 %bf.load13, 16, !dbg !5181
  %bf.clear14 = and i32 %bf.lshr, 255, !dbg !5181
  store i32 %bf.clear14, i32* %mode.addr, align 4, !dbg !5182
  br label %if.end, !dbg !5183

if.end:                                           ; preds = %if.then, %cond.end8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5184
  %cmp15 = icmp eq %struct.rtx_def* %10, null, !dbg !5186
  br i1 %cmp15, label %if.then17, label %if.end21, !dbg !5187

if.then17:                                        ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5188
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5188
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5188
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !5188
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !5188
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5188
  store %struct.rtx_def* %12, %struct.rtx_def** %addr.addr, align 8, !dbg !5189
  br label %if.end21, !dbg !5190

if.end21:                                         ; preds = %if.then17, %if.end
  %13 = load i32, i32* %mode.addr, align 4, !dbg !5191
  %14 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5193
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5193
  %bf.load22 = load i32, i32* %15, align 8, !dbg !5193
  %bf.lshr23 = lshr i32 %bf.load22, 16, !dbg !5193
  %bf.clear24 = and i32 %bf.lshr23, 255, !dbg !5193
  %cmp25 = icmp eq i32 %13, %bf.clear24, !dbg !5194
  br i1 %cmp25, label %land.lhs.true, label %if.end36, !dbg !5195

land.lhs.true:                                    ; preds = %if.end21
  %16 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5196
  %17 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5197
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5197
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5197
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !5197
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5197
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !5197
  %cmp31 = icmp eq %struct.rtx_def* %16, %18, !dbg !5198
  br i1 %cmp31, label %land.lhs.true33, label %if.end36, !dbg !5199

land.lhs.true33:                                  ; preds = %land.lhs.true
  %19 = load i32, i32* %validate.addr, align 4, !dbg !5200
  %tobool = icmp ne i32 %19, 0, !dbg !5200
  br i1 %tobool, label %lor.lhs.false, label %if.then35, !dbg !5201

lor.lhs.false:                                    ; preds = %land.lhs.true33
  %20 = load i32, i32* %mode.addr, align 4, !dbg !5202
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5203
  %22 = load i8, i8* %as, align 1, !dbg !5204
  %call = call i32 @memory_address_addr_space_p(i32 %20, %struct.rtx_def* %21, i8 zeroext %22), !dbg !5205
  %tobool34 = icmp ne i32 %call, 0, !dbg !5205
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !5206

if.then35:                                        ; preds = %lor.lhs.false, %land.lhs.true33
  %23 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5207
  store %struct.rtx_def* %23, %struct.rtx_def** %retval, align 8, !dbg !5208
  br label %return, !dbg !5208

if.end36:                                         ; preds = %lor.lhs.false, %land.lhs.true, %if.end21
  %24 = load i32, i32* %validate.addr, align 4, !dbg !5209
  %tobool37 = icmp ne i32 %24, 0, !dbg !5209
  br i1 %tobool37, label %if.then38, label %if.end51, !dbg !5211

if.then38:                                        ; preds = %if.end36
  %25 = load i32, i32* @reload_in_progress, align 4, !dbg !5212
  %tobool39 = icmp ne i32 %25, 0, !dbg !5212
  br i1 %tobool39, label %if.then42, label %lor.lhs.false40, !dbg !5215

lor.lhs.false40:                                  ; preds = %if.then38
  %26 = load i32, i32* @reload_completed, align 4, !dbg !5216
  %tobool41 = icmp ne i32 %26, 0, !dbg !5216
  br i1 %tobool41, label %if.then42, label %if.else, !dbg !5217

if.then42:                                        ; preds = %lor.lhs.false40, %if.then38
  %27 = load i32, i32* %mode.addr, align 4, !dbg !5218
  %28 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5218
  %29 = load i8, i8* %as, align 1, !dbg !5218
  %call43 = call i32 @memory_address_addr_space_p(i32 %27, %struct.rtx_def* %28, i8 zeroext %29), !dbg !5218
  %tobool44 = icmp ne i32 %call43, 0, !dbg !5218
  br i1 %tobool44, label %cond.false46, label %cond.true45, !dbg !5218

cond.true45:                                      ; preds = %if.then42
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1912, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5218
  br label %cond.end47, !dbg !5218

cond.false46:                                     ; preds = %if.then42
  br label %cond.end47, !dbg !5218

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !5218
  br label %if.end50, !dbg !5218

if.else:                                          ; preds = %lor.lhs.false40
  %30 = load i32, i32* %mode.addr, align 4, !dbg !5219
  %31 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5220
  %32 = load i8, i8* %as, align 1, !dbg !5221
  %call49 = call %struct.rtx_def* @memory_address_addr_space(i32 %30, %struct.rtx_def* %31, i8 zeroext %32), !dbg !5222
  store %struct.rtx_def* %call49, %struct.rtx_def** %addr.addr, align 8, !dbg !5223
  br label %if.end50

if.end50:                                         ; preds = %if.else, %cond.end47
  br label %if.end51, !dbg !5224

if.end51:                                         ; preds = %if.end50, %if.end36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5225
  %34 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5227
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5227
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !5227
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !5227
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !5227
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !5227
  %call56 = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %35), !dbg !5228
  %tobool57 = icmp ne i32 %call56, 0, !dbg !5228
  br i1 %tobool57, label %land.lhs.true58, label %if.end65, !dbg !5229

land.lhs.true58:                                  ; preds = %if.end51
  %36 = load i32, i32* %mode.addr, align 4, !dbg !5230
  %37 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5231
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !5231
  %bf.load59 = load i32, i32* %38, align 8, !dbg !5231
  %bf.lshr60 = lshr i32 %bf.load59, 16, !dbg !5231
  %bf.clear61 = and i32 %bf.lshr60, 255, !dbg !5231
  %cmp62 = icmp eq i32 %36, %bf.clear61, !dbg !5232
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !5233

if.then64:                                        ; preds = %land.lhs.true58
  %39 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5234
  store %struct.rtx_def* %39, %struct.rtx_def** %retval, align 8, !dbg !5235
  br label %return, !dbg !5235

if.end65:                                         ; preds = %land.lhs.true58, %if.end51
  %40 = load i32, i32* %mode.addr, align 4, !dbg !5236
  %41 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5237
  %call66 = call %struct.rtx_def* @gen_rtx_MEM(i32 %40, %struct.rtx_def* %41), !dbg !5238
  store %struct.rtx_def* %call66, %struct.rtx_def** %new_rtx, align 8, !dbg !5239
  %42 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !5240
  %bf.load67 = load i32, i32* %43, align 8, !dbg !5240
  %bf.lshr68 = lshr i32 %bf.load67, 27, !dbg !5240
  %bf.clear69 = and i32 %bf.lshr68, 1, !dbg !5240
  %44 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !5240
  %bf.load70 = load i32, i32* %45, align 8, !dbg !5240
  %bf.value = and i32 %bf.clear69, 1, !dbg !5240
  %bf.shl = shl i32 %bf.value, 27, !dbg !5240
  %bf.clear71 = and i32 %bf.load70, -134217729, !dbg !5240
  %bf.set = or i32 %bf.clear71, %bf.shl, !dbg !5240
  store i32 %bf.set, i32* %45, align 8, !dbg !5240
  %46 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5240
  %bf.load72 = load i32, i32* %47, align 8, !dbg !5240
  %bf.lshr73 = lshr i32 %bf.load72, 28, !dbg !5240
  %bf.clear74 = and i32 %bf.lshr73, 1, !dbg !5240
  %48 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5240
  %bf.load75 = load i32, i32* %49, align 8, !dbg !5240
  %bf.value76 = and i32 %bf.clear74, 1, !dbg !5240
  %bf.shl77 = shl i32 %bf.value76, 28, !dbg !5240
  %bf.clear78 = and i32 %bf.load75, -268435457, !dbg !5240
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !5240
  store i32 %bf.set79, i32* %49, align 8, !dbg !5240
  %50 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !5240
  %bf.load80 = load i32, i32* %51, align 8, !dbg !5240
  %bf.lshr81 = lshr i32 %bf.load80, 31, !dbg !5240
  %52 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !5240
  %bf.load82 = load i32, i32* %53, align 8, !dbg !5240
  %bf.value83 = and i32 %bf.lshr81, 1, !dbg !5240
  %bf.shl84 = shl i32 %bf.value83, 31, !dbg !5240
  %bf.clear85 = and i32 %bf.load82, 2147483647, !dbg !5240
  %bf.set86 = or i32 %bf.clear85, %bf.shl84, !dbg !5240
  store i32 %bf.set86, i32* %53, align 8, !dbg !5240
  %54 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !5240
  %bf.load87 = load i32, i32* %55, align 8, !dbg !5240
  %bf.lshr88 = lshr i32 %bf.load87, 25, !dbg !5240
  %bf.clear89 = and i32 %bf.lshr88, 1, !dbg !5240
  %56 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !5240
  %bf.load90 = load i32, i32* %57, align 8, !dbg !5240
  %bf.value91 = and i32 %bf.clear89, 1, !dbg !5240
  %bf.shl92 = shl i32 %bf.value91, 25, !dbg !5240
  %bf.clear93 = and i32 %bf.load90, -33554433, !dbg !5240
  %bf.set94 = or i32 %bf.clear93, %bf.shl92, !dbg !5240
  store i32 %bf.set94, i32* %57, align 8, !dbg !5240
  %58 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !5240
  %bf.load95 = load i32, i32* %59, align 8, !dbg !5240
  %bf.lshr96 = lshr i32 %bf.load95, 26, !dbg !5240
  %bf.clear97 = and i32 %bf.lshr96, 1, !dbg !5240
  %60 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !5240
  %bf.load98 = load i32, i32* %61, align 8, !dbg !5240
  %bf.value99 = and i32 %bf.clear97, 1, !dbg !5240
  %bf.shl100 = shl i32 %bf.value99, 26, !dbg !5240
  %bf.clear101 = and i32 %bf.load98, -67108865, !dbg !5240
  %bf.set102 = or i32 %bf.clear101, %bf.shl100, !dbg !5240
  store i32 %bf.set102, i32* %61, align 8, !dbg !5240
  %62 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !5240
  %bf.load103 = load i32, i32* %63, align 8, !dbg !5240
  %bf.lshr104 = lshr i32 %bf.load103, 24, !dbg !5240
  %bf.clear105 = and i32 %bf.lshr104, 1, !dbg !5240
  %64 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !5240
  %bf.load106 = load i32, i32* %65, align 8, !dbg !5240
  %bf.value107 = and i32 %bf.clear105, 1, !dbg !5240
  %bf.shl108 = shl i32 %bf.value107, 24, !dbg !5240
  %bf.clear109 = and i32 %bf.load106, -16777217, !dbg !5240
  %bf.set110 = or i32 %bf.clear109, %bf.shl108, !dbg !5240
  store i32 %bf.set110, i32* %65, align 8, !dbg !5240
  %66 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !5240
  %bf.load111 = load i32, i32* %67, align 8, !dbg !5240
  %bf.lshr112 = lshr i32 %bf.load111, 30, !dbg !5240
  %bf.clear113 = and i32 %bf.lshr112, 1, !dbg !5240
  %68 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !5240
  %bf.load114 = load i32, i32* %69, align 8, !dbg !5240
  %bf.value115 = and i32 %bf.clear113, 1, !dbg !5240
  %bf.shl116 = shl i32 %bf.value115, 30, !dbg !5240
  %bf.clear117 = and i32 %bf.load114, -1073741825, !dbg !5240
  %bf.set118 = or i32 %bf.clear117, %bf.shl116, !dbg !5240
  store i32 %bf.set118, i32* %69, align 8, !dbg !5240
  %70 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5240
  %u119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !5240
  %fld120 = bitcast %union.u* %u119 to [1 x %union.rtunion_def]*, !dbg !5240
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i64 0, i64 1, !dbg !5240
  %rt_mem122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.mem_attrs**, !dbg !5240
  %71 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem122, align 8, !dbg !5240
  %72 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5240
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !5240
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !5240
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 1, !dbg !5240
  %rt_mem126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.mem_attrs**, !dbg !5240
  store %struct.mem_attrs* %71, %struct.mem_attrs** %rt_mem126, align 8, !dbg !5240
  %73 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5241
  store %struct.rtx_def* %73, %struct.rtx_def** %retval, align 8, !dbg !5242
  br label %return, !dbg !5242

return:                                           ; preds = %if.end65, %if.then64, %if.then35
  %74 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5243
  ret %struct.rtx_def* %74, !dbg !5243
}

declare dso_local i32 @memory_address_addr_space_p(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def* %memref, i32 %mode, %struct.rtx_def* %addr, i64 %offset, i32 %validate) #0 !dbg !5244 {
entry:
  %memref.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i64, align 8
  %validate.addr = alloca i32, align 4
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5247, metadata !DIExpression()), !dbg !5248
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5249, metadata !DIExpression()), !dbg !5250
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !5251, metadata !DIExpression()), !dbg !5252
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5253, metadata !DIExpression()), !dbg !5254
  store i32 %validate, i32* %validate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validate.addr, metadata !5255, metadata !DIExpression()), !dbg !5256
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5257
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5258
  %2 = load i32, i32* %validate.addr, align 4, !dbg !5259
  %call = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %0, i32 0, %struct.rtx_def* %1, i32 %2), !dbg !5260
  store %struct.rtx_def* %call, %struct.rtx_def** %memref.addr, align 8, !dbg !5261
  %3 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5262
  %4 = load i32, i32* %mode.addr, align 4, !dbg !5263
  %5 = load i64, i64* %offset.addr, align 8, !dbg !5264
  %6 = load i32, i32* %validate.addr, align 4, !dbg !5265
  %call1 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %3, i32 %4, i64 %5, i32 %6, i32 0), !dbg !5266
  ret %struct.rtx_def* %call1, !dbg !5267
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @offset_address(%struct.rtx_def* %memref, %struct.rtx_def* %offset, i64 %pow2) #0 !dbg !5268 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca %struct.rtx_def*, align 8
  %pow2.addr = alloca i64, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %as = alloca i8, align 1
  %address_mode = alloca i32, align 4
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5271, metadata !DIExpression()), !dbg !5272
  store %struct.rtx_def* %offset, %struct.rtx_def** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset.addr, metadata !5273, metadata !DIExpression()), !dbg !5274
  store i64 %pow2, i64* %pow2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pow2.addr, metadata !5275, metadata !DIExpression()), !dbg !5276
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !5277, metadata !DIExpression()), !dbg !5278
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5281
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5281
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5281
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5281
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5281
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5281
  store %struct.rtx_def* %1, %struct.rtx_def** %addr, align 8, !dbg !5280
  call void @llvm.dbg.declare(metadata i8* %as, metadata !5282, metadata !DIExpression()), !dbg !5283
  %2 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5284
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5284
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5284
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5284
  %rt_mem = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5284
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5284
  %cmp = icmp eq %struct.mem_attrs* %3, null, !dbg !5284
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5284

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5284

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5284
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5284
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !5284
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 1, !dbg !5284
  %rt_mem7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.mem_attrs**, !dbg !5284
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem7, align 8, !dbg !5284
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %5, i32 0, i32 5, !dbg !5284
  %6 = load i8, i8* %addrspace, align 8, !dbg !5284
  %conv = zext i8 %6 to i32, !dbg !5284
  br label %cond.end, !dbg !5284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv, %cond.false ], !dbg !5284
  %conv8 = trunc i32 %cond to i8, !dbg !5284
  store i8 %conv8, i8* %as, align 1, !dbg !5283
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !5285, metadata !DIExpression()), !dbg !5286
  %7 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !5287
  %8 = load i8, i8* %as, align 1, !dbg !5288
  %call = call i32 %7(i8 zeroext %8), !dbg !5289
  store i32 %call, i32* %address_mode, align 4, !dbg !5286
  %9 = load i32, i32* %address_mode, align 4, !dbg !5290
  %10 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5291
  %11 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !5292
  %call9 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %9, %struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !5293
  store %struct.rtx_def* %call9, %struct.rtx_def** %new_rtx, align 8, !dbg !5294
  %12 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5295
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5295
  %bf.load = load i32, i32* %13, align 8, !dbg !5295
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5295
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5295
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5297
  %15 = load i8, i8* %as, align 1, !dbg !5298
  %call10 = call i32 @memory_address_addr_space_p(i32 %bf.clear, %struct.rtx_def* %14, i8 zeroext %15), !dbg !5299
  %tobool = icmp ne i32 %call10, 0, !dbg !5299
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5300

land.lhs.true:                                    ; preds = %cond.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5301
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5301
  %bf.load11 = load i32, i32* %17, align 8, !dbg !5301
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !5301
  %cmp13 = icmp eq i32 %bf.clear12, 49, !dbg !5302
  br i1 %cmp13, label %land.lhs.true15, label %if.end, !dbg !5303

land.lhs.true15:                                  ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5304
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5304
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5304
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !5304
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !5304
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !5304
  %20 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !5305
  %cmp20 = icmp eq %struct.rtx_def* %19, %20, !dbg !5306
  br i1 %cmp20, label %if.then, label %if.end, !dbg !5307

if.then:                                          ; preds = %land.lhs.true15
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5308
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !5308
  %bf.load22 = load i32, i32* %22, align 8, !dbg !5308
  %bf.lshr23 = lshr i32 %bf.load22, 16, !dbg !5308
  %bf.clear24 = and i32 %bf.lshr23, 255, !dbg !5308
  %23 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5310
  %call25 = call %struct.rtx_def* @force_reg(i32 %bf.clear24, %struct.rtx_def* %23), !dbg !5311
  store %struct.rtx_def* %call25, %struct.rtx_def** %addr, align 8, !dbg !5312
  %24 = load i32, i32* %address_mode, align 4, !dbg !5313
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5314
  %26 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !5315
  %call26 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %24, %struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !5316
  store %struct.rtx_def* %call26, %struct.rtx_def** %new_rtx, align 8, !dbg !5317
  br label %if.end, !dbg !5318

if.end:                                           ; preds = %if.then, %land.lhs.true15, %land.lhs.true, %cond.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5319
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5319
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5319
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !5319
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5319
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !5319
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5320
  call void @update_temp_slot_address(%struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !5321
  %30 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5322
  %31 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5323
  %call31 = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %30, i32 0, %struct.rtx_def* %31, i32 1), !dbg !5324
  store %struct.rtx_def* %call31, %struct.rtx_def** %new_rtx, align 8, !dbg !5325
  %32 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5326
  %33 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5328
  %cmp32 = icmp eq %struct.rtx_def* %32, %33, !dbg !5329
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !5330

if.then34:                                        ; preds = %if.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5331
  store %struct.rtx_def* %34, %struct.rtx_def** %retval, align 8, !dbg !5332
  br label %return, !dbg !5332

if.end35:                                         ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5333
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5333
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !5333
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !5333
  %rt_mem39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.mem_attrs**, !dbg !5333
  %36 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem39, align 8, !dbg !5333
  %cmp40 = icmp eq %struct.mem_attrs* %36, null, !dbg !5333
  br i1 %cmp40, label %cond.true42, label %cond.false43, !dbg !5333

cond.true42:                                      ; preds = %if.end35
  br label %cond.end48, !dbg !5333

cond.false43:                                     ; preds = %if.end35
  %37 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5333
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5333
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5333
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !5333
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !5333
  %38 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !5333
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %38, i32 0, i32 3, !dbg !5333
  %39 = load i32, i32* %alias, align 8, !dbg !5333
  br label %cond.end48, !dbg !5333

cond.end48:                                       ; preds = %cond.false43, %cond.true42
  %cond49 = phi i32 [ 0, %cond.true42 ], [ %39, %cond.false43 ], !dbg !5333
  %40 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5334
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !5334
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !5334
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 1, !dbg !5334
  %rt_mem53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.mem_attrs**, !dbg !5334
  %41 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem53, align 8, !dbg !5334
  %cmp54 = icmp eq %struct.mem_attrs* %41, null, !dbg !5334
  br i1 %cmp54, label %cond.true56, label %cond.false57, !dbg !5334

cond.true56:                                      ; preds = %cond.end48
  br label %cond.end62, !dbg !5334

cond.false57:                                     ; preds = %cond.end48
  %42 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5334
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5334
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5334
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !5334
  %rt_mem61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.mem_attrs**, !dbg !5334
  %43 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem61, align 8, !dbg !5334
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %43, i32 0, i32 0, !dbg !5334
  %44 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5334
  br label %cond.end62, !dbg !5334

cond.end62:                                       ; preds = %cond.false57, %cond.true56
  %cond63 = phi %union.tree_node* [ null, %cond.true56 ], [ %44, %cond.false57 ], !dbg !5334
  %45 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5335
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !5335
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5335
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 1, !dbg !5335
  %rt_mem67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.mem_attrs**, !dbg !5335
  %46 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem67, align 8, !dbg !5335
  %cmp68 = icmp ne %struct.mem_attrs* %46, null, !dbg !5335
  br i1 %cmp68, label %cond.true70, label %cond.false75, !dbg !5335

cond.true70:                                      ; preds = %cond.end62
  %47 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5335
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !5335
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !5335
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !5335
  %rt_mem74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.mem_attrs**, !dbg !5335
  %48 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem74, align 8, !dbg !5335
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %48, i32 0, i32 4, !dbg !5335
  %49 = load i32, i32* %align, align 4, !dbg !5335
  br label %cond.end76, !dbg !5335

cond.false75:                                     ; preds = %cond.end62
  br label %cond.end76, !dbg !5335

cond.end76:                                       ; preds = %cond.false75, %cond.true70
  %cond77 = phi i32 [ %49, %cond.true70 ], [ 8, %cond.false75 ], !dbg !5335
  %conv78 = zext i32 %cond77 to i64, !dbg !5335
  %50 = load i64, i64* %pow2.addr, align 8, !dbg !5335
  %mul = mul i64 %50, 8, !dbg !5335
  %cmp79 = icmp ult i64 %conv78, %mul, !dbg !5335
  br i1 %cmp79, label %cond.true81, label %cond.false98, !dbg !5335

cond.true81:                                      ; preds = %cond.end76
  %51 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5335
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5335
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !5335
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 1, !dbg !5335
  %rt_mem85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.mem_attrs**, !dbg !5335
  %52 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem85, align 8, !dbg !5335
  %cmp86 = icmp ne %struct.mem_attrs* %52, null, !dbg !5335
  br i1 %cmp86, label %cond.true88, label %cond.false94, !dbg !5335

cond.true88:                                      ; preds = %cond.true81
  %53 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5335
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5335
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !5335
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 1, !dbg !5335
  %rt_mem92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.mem_attrs**, !dbg !5335
  %54 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem92, align 8, !dbg !5335
  %align93 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %54, i32 0, i32 4, !dbg !5335
  %55 = load i32, i32* %align93, align 4, !dbg !5335
  br label %cond.end95, !dbg !5335

cond.false94:                                     ; preds = %cond.true81
  br label %cond.end95, !dbg !5335

cond.end95:                                       ; preds = %cond.false94, %cond.true88
  %cond96 = phi i32 [ %55, %cond.true88 ], [ 8, %cond.false94 ], !dbg !5335
  %conv97 = zext i32 %cond96 to i64, !dbg !5335
  br label %cond.end100, !dbg !5335

cond.false98:                                     ; preds = %cond.end76
  %56 = load i64, i64* %pow2.addr, align 8, !dbg !5335
  %mul99 = mul i64 %56, 8, !dbg !5335
  br label %cond.end100, !dbg !5335

cond.end100:                                      ; preds = %cond.false98, %cond.end95
  %cond101 = phi i64 [ %conv97, %cond.end95 ], [ %mul99, %cond.false98 ], !dbg !5335
  %conv102 = trunc i64 %cond101 to i32, !dbg !5335
  %57 = load i8, i8* %as, align 1, !dbg !5336
  %58 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5337
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !5337
  %bf.load103 = load i32, i32* %59, align 8, !dbg !5337
  %bf.lshr104 = lshr i32 %bf.load103, 16, !dbg !5337
  %bf.clear105 = and i32 %bf.lshr104, 255, !dbg !5337
  %call106 = call %struct.mem_attrs* @get_mem_attrs(i32 %cond49, %union.tree_node* %cond63, %struct.rtx_def* null, %struct.rtx_def* null, i32 %conv102, i8 zeroext %57, i32 %bf.clear105), !dbg !5338
  %60 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5339
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !5339
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !5339
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 1, !dbg !5339
  %rt_mem110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.mem_attrs**, !dbg !5339
  store %struct.mem_attrs* %call106, %struct.mem_attrs** %rt_mem110, align 8, !dbg !5340
  %61 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5341
  store %struct.rtx_def* %61, %struct.rtx_def** %retval, align 8, !dbg !5342
  br label %return, !dbg !5342

return:                                           ; preds = %cond.end100, %if.then34
  %62 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5343
  ret %struct.rtx_def* %62, !dbg !5343
}

declare dso_local %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @update_temp_slot_address(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %memref, %struct.rtx_def* %addr) #0 !dbg !5344 {
entry:
  %memref.addr = alloca %struct.rtx_def*, align 8
  %addr.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5345, metadata !DIExpression()), !dbg !5346
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !5347, metadata !DIExpression()), !dbg !5348
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5349
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !5350
  %call = call %struct.rtx_def* @change_address_1(%struct.rtx_def* %0, i32 0, %struct.rtx_def* %1, i32 0), !dbg !5351
  ret %struct.rtx_def* %call, !dbg !5352
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @widen_memory_access(%struct.rtx_def* %memref, i32 %mode, i64 %offset) #0 !dbg !5353 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %expr = alloca %union.tree_node*, align 8
  %memoffset = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  %field = alloca %union.tree_node*, align 8
  %offset31 = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !5356, metadata !DIExpression()), !dbg !5357
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5358, metadata !DIExpression()), !dbg !5359
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5360, metadata !DIExpression()), !dbg !5361
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !5362, metadata !DIExpression()), !dbg !5363
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5364
  %1 = load i32, i32* %mode.addr, align 4, !dbg !5365
  %2 = load i64, i64* %offset.addr, align 8, !dbg !5366
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %0, i32 %1, i64 %2, i32 1, i32 1), !dbg !5367
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !5363
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !5368, metadata !DIExpression()), !dbg !5369
  %3 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5370
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5370
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5370
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5370
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5370
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5370
  %cmp = icmp eq %struct.mem_attrs* %4, null, !dbg !5370
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5370

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5370

cond.false:                                       ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5370
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5370
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5370
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5370
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5370
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5370
  %expr5 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %6, i32 0, i32 0, !dbg !5370
  %7 = load %union.tree_node*, %union.tree_node** %expr5, align 8, !dbg !5370
  br label %cond.end, !dbg !5370

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %7, %cond.false ], !dbg !5370
  store %union.tree_node* %cond, %union.tree_node** %expr, align 8, !dbg !5369
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memoffset, metadata !5371, metadata !DIExpression()), !dbg !5372
  %8 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5373
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5373
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !5373
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !5373
  %rt_mem9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.mem_attrs**, !dbg !5373
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem9, align 8, !dbg !5373
  %cmp10 = icmp eq %struct.mem_attrs* %9, null, !dbg !5373
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !5373

cond.true11:                                      ; preds = %cond.end
  br label %cond.end18, !dbg !5373

cond.false12:                                     ; preds = %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5373
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5373
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !5373
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !5373
  %rt_mem16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**, !dbg !5373
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem16, align 8, !dbg !5373
  %offset17 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %11, i32 0, i32 1, !dbg !5373
  %12 = load %struct.rtx_def*, %struct.rtx_def** %offset17, align 8, !dbg !5373
  br label %cond.end18, !dbg !5373

cond.end18:                                       ; preds = %cond.false12, %cond.true11
  %cond19 = phi %struct.rtx_def* [ null, %cond.true11 ], [ %12, %cond.false12 ], !dbg !5373
  store %struct.rtx_def* %cond19, %struct.rtx_def** %memoffset, align 8, !dbg !5372
  call void @llvm.dbg.declare(metadata i32* %size, metadata !5374, metadata !DIExpression()), !dbg !5375
  %13 = load i32, i32* %mode.addr, align 4, !dbg !5376
  %idxprom = zext i32 %13 to i64, !dbg !5376
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5376
  %14 = load i8, i8* %arrayidx20, align 1, !dbg !5376
  %conv = zext i8 %14 to i16, !dbg !5376
  %conv21 = zext i16 %conv to i32, !dbg !5376
  store i32 %conv21, i32* %size, align 4, !dbg !5375
  %15 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5377
  %16 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !5379
  %cmp22 = icmp eq %struct.rtx_def* %15, %16, !dbg !5380
  br i1 %cmp22, label %if.then, label %if.end, !dbg !5381

if.then:                                          ; preds = %cond.end18
  %17 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5382
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !5383
  br label %return, !dbg !5383

if.end:                                           ; preds = %cond.end18
  %18 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5384
  %tobool = icmp ne %struct.rtx_def* %18, null, !dbg !5384
  br i1 %tobool, label %if.end25, label %if.then24, !dbg !5386

if.then24:                                        ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !5387
  br label %if.end25, !dbg !5388

if.end25:                                         ; preds = %if.then24, %if.end
  br label %while.cond, !dbg !5389

while.cond:                                       ; preds = %if.end108, %if.end25
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5390
  %tobool26 = icmp ne %union.tree_node* %19, null, !dbg !5389
  br i1 %tobool26, label %while.body, label %while.end, !dbg !5389

while.body:                                       ; preds = %while.cond
  %20 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5391
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5391
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !5391
  %bf.load = load i64, i64* %21, align 8, !dbg !5391
  %bf.clear = and i64 %bf.load, 65535, !dbg !5391
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5391
  %cmp27 = icmp eq i32 %bf.cast, 41, !dbg !5394
  br i1 %cmp27, label %if.then29, label %if.else, !dbg !5395

if.then29:                                        ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5396, metadata !DIExpression()), !dbg !5398
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5399
  %exp = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !5399
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5399
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !5399
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !5399
  store %union.tree_node* %23, %union.tree_node** %field, align 8, !dbg !5398
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset31, metadata !5400, metadata !DIExpression()), !dbg !5401
  %24 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5402
  %call32 = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %24), !dbg !5403
  store %union.tree_node* %call32, %union.tree_node** %offset31, align 8, !dbg !5401
  %25 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5404
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !5404
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !5404
  %26 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5404
  %tobool33 = icmp ne %union.tree_node* %26, null, !dbg !5404
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !5406

if.then34:                                        ; preds = %if.then29
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !5407
  br label %while.end, !dbg !5409

if.end35:                                         ; preds = %if.then29
  %27 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5410
  %decl_common36 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !5410
  %size_unit37 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common36, i32 0, i32 4, !dbg !5410
  %28 = load %union.tree_node*, %union.tree_node** %size_unit37, align 8, !dbg !5410
  %base38 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5410
  %29 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5410
  %bf.load39 = load i64, i64* %29, align 8, !dbg !5410
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !5410
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !5410
  %cmp42 = icmp eq i32 %bf.cast41, 23, !dbg !5412
  br i1 %cmp42, label %land.lhs.true, label %if.end56, !dbg !5413

land.lhs.true:                                    ; preds = %if.end35
  %30 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5414
  %decl_common44 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !5414
  %size_unit45 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common44, i32 0, i32 4, !dbg !5414
  %31 = load %union.tree_node*, %union.tree_node** %size_unit45, align 8, !dbg !5414
  %32 = load i32, i32* %size, align 4, !dbg !5415
  %conv46 = zext i32 %32 to i64, !dbg !5415
  %call47 = call i32 @compare_tree_int(%union.tree_node* %31, i64 %conv46), !dbg !5416
  %cmp48 = icmp sge i32 %call47, 0, !dbg !5417
  br i1 %cmp48, label %land.lhs.true50, label %if.end56, !dbg !5418

land.lhs.true50:                                  ; preds = %land.lhs.true
  %33 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5419
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5419
  %hwint = bitcast %union.u* %u51 to [1 x i64]*, !dbg !5419
  %arrayidx52 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !5419
  %34 = load i64, i64* %arrayidx52, align 8, !dbg !5419
  %cmp53 = icmp sge i64 %34, 0, !dbg !5420
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !5421

if.then55:                                        ; preds = %land.lhs.true50
  br label %while.end, !dbg !5422

if.end56:                                         ; preds = %land.lhs.true50, %land.lhs.true, %if.end35
  %35 = load %union.tree_node*, %union.tree_node** %offset31, align 8, !dbg !5423
  %call57 = call i32 @host_integerp(%union.tree_node* %35, i32 1), !dbg !5425
  %tobool58 = icmp ne i32 %call57, 0, !dbg !5425
  br i1 %tobool58, label %if.end60, label %if.then59, !dbg !5426

if.then59:                                        ; preds = %if.end56
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !5427
  br label %while.end, !dbg !5429

if.end60:                                         ; preds = %if.end56
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5430
  %exp61 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !5430
  %operands62 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp61, i32 0, i32 3, !dbg !5430
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands62, i64 0, i64 0, !dbg !5430
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8, !dbg !5430
  store %union.tree_node* %37, %union.tree_node** %expr, align 8, !dbg !5431
  %38 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5432
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5432
  %hwint65 = bitcast %union.u* %u64 to [1 x i64]*, !dbg !5432
  %arrayidx66 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint65, i64 0, i64 0, !dbg !5432
  %39 = load i64, i64* %arrayidx66, align 8, !dbg !5432
  %40 = load %union.tree_node*, %union.tree_node** %offset31, align 8, !dbg !5432
  %call67 = call i64 @tree_low_cst(%union.tree_node* %40, i32 1), !dbg !5432
  %add = add nsw i64 %39, %call67, !dbg !5432
  %41 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5432
  %field_decl = bitcast %union.tree_node* %41 to %struct.tree_field_decl*, !dbg !5432
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 4, !dbg !5432
  %42 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !5432
  %call68 = call i64 @tree_low_cst(%union.tree_node* %42, i32 1), !dbg !5432
  %div = sdiv i64 %call68, 8, !dbg !5432
  %add69 = add nsw i64 %add, %div, !dbg !5432
  %call70 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add69), !dbg !5432
  store %struct.rtx_def* %call70, %struct.rtx_def** %memoffset, align 8, !dbg !5433
  br label %if.end108, !dbg !5434

if.else:                                          ; preds = %while.body
  %43 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5435
  %base71 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !5435
  %44 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5435
  %bf.load72 = load i64, i64* %44, align 8, !dbg !5435
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5435
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5435
  %idxprom75 = sext i32 %bf.cast74 to i64, !dbg !5435
  %arrayidx76 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom75, !dbg !5435
  %45 = load i32, i32* %arrayidx76, align 4, !dbg !5435
  %cmp77 = icmp eq i32 %45, 3, !dbg !5435
  br i1 %cmp77, label %land.lhs.true79, label %if.else107, !dbg !5437

land.lhs.true79:                                  ; preds = %if.else
  %46 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5438
  %decl_common80 = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !5438
  %size_unit81 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common80, i32 0, i32 4, !dbg !5438
  %47 = load %union.tree_node*, %union.tree_node** %size_unit81, align 8, !dbg !5438
  %tobool82 = icmp ne %union.tree_node* %47, null, !dbg !5438
  br i1 %tobool82, label %land.lhs.true83, label %if.else107, !dbg !5439

land.lhs.true83:                                  ; preds = %land.lhs.true79
  %48 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5440
  %decl_common84 = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !5440
  %size_unit85 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common84, i32 0, i32 4, !dbg !5440
  %49 = load %union.tree_node*, %union.tree_node** %size_unit85, align 8, !dbg !5440
  %base86 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5440
  %50 = bitcast %struct.tree_base* %base86 to i64*, !dbg !5440
  %bf.load87 = load i64, i64* %50, align 8, !dbg !5440
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !5440
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !5440
  %cmp90 = icmp eq i32 %bf.cast89, 23, !dbg !5441
  br i1 %cmp90, label %land.lhs.true92, label %if.else107, !dbg !5442

land.lhs.true92:                                  ; preds = %land.lhs.true83
  %51 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5443
  %decl_common93 = bitcast %union.tree_node* %51 to %struct.tree_decl_common*, !dbg !5443
  %size_unit94 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common93, i32 0, i32 4, !dbg !5443
  %52 = load %union.tree_node*, %union.tree_node** %size_unit94, align 8, !dbg !5443
  %53 = load i32, i32* %size, align 4, !dbg !5444
  %conv95 = zext i32 %53 to i64, !dbg !5444
  %call96 = call i32 @compare_tree_int(%union.tree_node* %52, i64 %conv95), !dbg !5445
  %cmp97 = icmp sge i32 %call96, 0, !dbg !5446
  br i1 %cmp97, label %land.lhs.true99, label %if.else107, !dbg !5447

land.lhs.true99:                                  ; preds = %land.lhs.true92
  %54 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5448
  %tobool100 = icmp ne %struct.rtx_def* %54, null, !dbg !5448
  br i1 %tobool100, label %lor.lhs.false, label %if.then106, !dbg !5449

lor.lhs.false:                                    ; preds = %land.lhs.true99
  %55 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5450
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !5450
  %hwint102 = bitcast %union.u* %u101 to [1 x i64]*, !dbg !5450
  %arrayidx103 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint102, i64 0, i64 0, !dbg !5450
  %56 = load i64, i64* %arrayidx103, align 8, !dbg !5450
  %cmp104 = icmp sge i64 %56, 0, !dbg !5451
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !5452

if.then106:                                       ; preds = %lor.lhs.false, %land.lhs.true99
  br label %while.end, !dbg !5453

if.else107:                                       ; preds = %lor.lhs.false, %land.lhs.true92, %land.lhs.true83, %land.lhs.true79, %if.else
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !5454
  br label %while.end, !dbg !5456

if.end108:                                        ; preds = %if.end60
  br label %while.cond, !dbg !5389, !llvm.loop !5457

while.end:                                        ; preds = %if.else107, %if.then106, %if.then59, %if.then55, %if.then34, %while.cond
  %57 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5459
  %tobool109 = icmp ne %union.tree_node* %57, null, !dbg !5459
  br i1 %tobool109, label %if.end111, label %if.then110, !dbg !5461

if.then110:                                       ; preds = %while.end
  store %struct.rtx_def* null, %struct.rtx_def** %memoffset, align 8, !dbg !5462
  br label %if.end111, !dbg !5463

if.end111:                                        ; preds = %if.then110, %while.end
  %58 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5464
  %59 = load %struct.rtx_def*, %struct.rtx_def** %memoffset, align 8, !dbg !5465
  %60 = load i32, i32* %size, align 4, !dbg !5466
  %conv112 = zext i32 %60 to i64, !dbg !5466
  %call113 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv112), !dbg !5466
  %61 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5467
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !5467
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !5467
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 1, !dbg !5467
  %rt_mem117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.mem_attrs**, !dbg !5467
  %62 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem117, align 8, !dbg !5467
  %cmp118 = icmp ne %struct.mem_attrs* %62, null, !dbg !5467
  br i1 %cmp118, label %cond.true120, label %cond.false125, !dbg !5467

cond.true120:                                     ; preds = %if.end111
  %63 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5467
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5467
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !5467
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !5467
  %rt_mem124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.mem_attrs**, !dbg !5467
  %64 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem124, align 8, !dbg !5467
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %64, i32 0, i32 4, !dbg !5467
  %65 = load i32, i32* %align, align 4, !dbg !5467
  br label %cond.end126, !dbg !5467

cond.false125:                                    ; preds = %if.end111
  br label %cond.end126, !dbg !5467

cond.end126:                                      ; preds = %cond.false125, %cond.true120
  %cond127 = phi i32 [ %65, %cond.true120 ], [ 8, %cond.false125 ], !dbg !5467
  %66 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5468
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !5468
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !5468
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 1, !dbg !5468
  %rt_mem131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.mem_attrs**, !dbg !5468
  %67 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem131, align 8, !dbg !5468
  %cmp132 = icmp eq %struct.mem_attrs* %67, null, !dbg !5468
  br i1 %cmp132, label %cond.true134, label %cond.false135, !dbg !5468

cond.true134:                                     ; preds = %cond.end126
  br label %cond.end141, !dbg !5468

cond.false135:                                    ; preds = %cond.end126
  %68 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5468
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5468
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !5468
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 1, !dbg !5468
  %rt_mem139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.mem_attrs**, !dbg !5468
  %69 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem139, align 8, !dbg !5468
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %69, i32 0, i32 5, !dbg !5468
  %70 = load i8, i8* %addrspace, align 8, !dbg !5468
  %conv140 = zext i8 %70 to i32, !dbg !5468
  br label %cond.end141, !dbg !5468

cond.end141:                                      ; preds = %cond.false135, %cond.true134
  %cond142 = phi i32 [ 0, %cond.true134 ], [ %conv140, %cond.false135 ], !dbg !5468
  %conv143 = trunc i32 %cond142 to i8, !dbg !5468
  %71 = load i32, i32* %mode.addr, align 4, !dbg !5469
  %call144 = call %struct.mem_attrs* @get_mem_attrs(i32 0, %union.tree_node* %58, %struct.rtx_def* %59, %struct.rtx_def* %call113, i32 %cond127, i8 zeroext %conv143, i32 %71), !dbg !5470
  %72 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5471
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !5471
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !5471
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 1, !dbg !5471
  %rt_mem148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.mem_attrs**, !dbg !5471
  store %struct.mem_attrs* %call144, %struct.mem_attrs** %rt_mem148, align 8, !dbg !5472
  %73 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5473
  store %struct.rtx_def* %73, %struct.rtx_def** %retval, align 8, !dbg !5474
  br label %return, !dbg !5474

return:                                           ; preds = %cond.end141, %if.then
  %74 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5475
  ret %struct.rtx_def* %74, !dbg !5475
}

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_spill_slot_decl(i8 zeroext %force_build_p) #0 !dbg !5476 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %force_build_p.addr = alloca i8, align 1
  %d = alloca %union.tree_node*, align 8
  %rd = alloca %struct.rtx_def*, align 8
  store i8 %force_build_p, i8* %force_build_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_build_p.addr, metadata !5479, metadata !DIExpression()), !dbg !5480
  call void @llvm.dbg.declare(metadata %union.tree_node** %d, metadata !5481, metadata !DIExpression()), !dbg !5482
  %0 = load %union.tree_node*, %union.tree_node** @spill_slot_decl, align 8, !dbg !5483
  store %union.tree_node* %0, %union.tree_node** %d, align 8, !dbg !5482
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rd, metadata !5484, metadata !DIExpression()), !dbg !5485
  %1 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5486
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5486
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5488

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %force_build_p.addr, align 1, !dbg !5489
  %tobool1 = icmp ne i8 %2, 0, !dbg !5489
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5490

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5491
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5492
  br label %return, !dbg !5492

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5493
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !5493
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !5493
  %5 = load i32, i32* %locus, align 8, !dbg !5493
  %call = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)), !dbg !5493
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5493
  %call2 = call %union.tree_node* @build_decl_stat(i32 %5, i32 32, %union.tree_node* %call, %union.tree_node* %6), !dbg !5493
  store %union.tree_node* %call2, %union.tree_node** %d, align 8, !dbg !5494
  %7 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5495
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !5495
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5495
  %8 = bitcast i40* %artificial_flag to i64*, !dbg !5495
  %bf.load = load i64, i64* %8, align 8, !dbg !5496
  %bf.clear = and i64 %bf.load, -4097, !dbg !5496
  %bf.set = or i64 %bf.clear, 4096, !dbg !5496
  store i64 %bf.set, i64* %8, align 8, !dbg !5496
  %9 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5497
  %decl_common3 = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !5497
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common3, i32 0, i32 2, !dbg !5497
  %10 = bitcast i40* %ignored_flag to i64*, !dbg !5497
  %bf.load4 = load i64, i64* %10, align 8, !dbg !5498
  %bf.clear5 = and i64 %bf.load4, -1025, !dbg !5498
  %bf.set6 = or i64 %bf.clear5, 1024, !dbg !5498
  store i64 %bf.set6, i64* %10, align 8, !dbg !5498
  %11 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5499
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5499
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !5499
  %bf.load7 = load i64, i64* %12, align 8, !dbg !5500
  %bf.clear8 = and i64 %bf.load7, -16777217, !dbg !5500
  %bf.set9 = or i64 %bf.clear8, 16777216, !dbg !5500
  store i64 %bf.set9, i64* %12, align 8, !dbg !5500
  %13 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5501
  %base10 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5501
  %14 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5501
  %bf.load11 = load i64, i64* %14, align 8, !dbg !5502
  %bf.clear12 = and i64 %bf.load11, -33554433, !dbg !5502
  %bf.set13 = or i64 %bf.clear12, 33554432, !dbg !5502
  store i64 %bf.set13, i64* %14, align 8, !dbg !5502
  %15 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5503
  store %union.tree_node* %15, %union.tree_node** @spill_slot_decl, align 8, !dbg !5504
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !5505
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 1, %struct.rtx_def* %16), !dbg !5506
  store %struct.rtx_def* %call14, %struct.rtx_def** %rd, align 8, !dbg !5507
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rd, align 8, !dbg !5508
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !5508
  %bf.load15 = load i32, i32* %18, align 8, !dbg !5509
  %bf.clear16 = and i32 %bf.load15, -33554433, !dbg !5509
  %bf.set17 = or i32 %bf.clear16, 33554432, !dbg !5509
  store i32 %bf.set17, i32* %18, align 8, !dbg !5509
  %call18 = call i32 @new_alias_set(), !dbg !5510
  %19 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5511
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5512
  %call19 = call %struct.mem_attrs* @get_mem_attrs(i32 %call18, %union.tree_node* %19, %struct.rtx_def* %20, %struct.rtx_def* null, i32 0, i8 zeroext 0, i32 1), !dbg !5513
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rd, align 8, !dbg !5514
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5514
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5514
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5514
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5514
  store %struct.mem_attrs* %call19, %struct.mem_attrs** %rt_mem, align 8, !dbg !5515
  %22 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5516
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rd, align 8, !dbg !5516
  call void @set_decl_rtl(%union.tree_node* %22, %struct.rtx_def* %23), !dbg !5516
  %24 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5517
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !5518
  br label %return, !dbg !5518

return:                                           ; preds = %if.end, %if.then
  %25 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5519
  ret %union.tree_node* %25, !dbg !5519
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local i32 @new_alias_set() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_mem_attrs_for_spill(%struct.rtx_def* %mem) #0 !dbg !5520 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %alias = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %offset = alloca %struct.rtx_def*, align 8
  %expr = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5521, metadata !DIExpression()), !dbg !5522
  call void @llvm.dbg.declare(metadata i32* %alias, metadata !5523, metadata !DIExpression()), !dbg !5524
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !5525, metadata !DIExpression()), !dbg !5526
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset, metadata !5527, metadata !DIExpression()), !dbg !5528
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !5529, metadata !DIExpression()), !dbg !5530
  %call = call %union.tree_node* @get_spill_slot_decl(i8 zeroext 1), !dbg !5531
  store %union.tree_node* %call, %union.tree_node** %expr, align 8, !dbg !5532
  %0 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl = bitcast %union.tree_node* %0 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5533
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5533
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !5533
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5533

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl1 = bitcast %union.tree_node* %2 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl2 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl1, i32 0, i32 1, !dbg !5533
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl2, align 8, !dbg !5533
  br label %cond.end, !dbg !5533

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  call void @make_decl_rtl(%union.tree_node* %4), !dbg !5533
  %5 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl3 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl4 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl3, i32 0, i32 1, !dbg !5533
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl4, align 8, !dbg !5533
  br label %cond.end, !dbg !5533

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !5533
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1, !dbg !5533
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5533
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5533
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5533
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5533
  %cmp = icmp eq %struct.mem_attrs* %7, null, !dbg !5533
  br i1 %cmp, label %cond.true5, label %cond.false6, !dbg !5533

cond.true5:                                       ; preds = %cond.end
  br label %cond.end23, !dbg !5533

cond.false6:                                      ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl7 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !5533
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !5533
  %tobool9 = icmp ne %struct.rtx_def* %9, null, !dbg !5533
  br i1 %tobool9, label %cond.true10, label %cond.false13, !dbg !5533

cond.true10:                                      ; preds = %cond.false6
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl11 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl12 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl11, i32 0, i32 1, !dbg !5533
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8, !dbg !5533
  br label %cond.end16, !dbg !5533

cond.false13:                                     ; preds = %cond.false6
  %12 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !5533
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5533
  %decl_with_rtl14 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !5533
  %rtl15 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl14, i32 0, i32 1, !dbg !5533
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl15, align 8, !dbg !5533
  br label %cond.end16, !dbg !5533

cond.end16:                                       ; preds = %cond.false13, %cond.true10
  %cond17 = phi %struct.rtx_def* [ %11, %cond.true10 ], [ %14, %cond.false13 ], !dbg !5533
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond17, i32 0, i32 1, !dbg !5533
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5533
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5533
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5533
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5533
  %alias22 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %15, i32 0, i32 3, !dbg !5533
  %16 = load i32, i32* %alias22, align 8, !dbg !5533
  br label %cond.end23, !dbg !5533

cond.end23:                                       ; preds = %cond.end16, %cond.true5
  %cond24 = phi i32 [ 0, %cond.true5 ], [ %16, %cond.end16 ], !dbg !5533
  store i32 %cond24, i32* %alias, align 4, !dbg !5534
  %17 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5535
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5535
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5535
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !5535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !5535
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5535
  store %struct.rtx_def* %18, %struct.rtx_def** %addr, align 8, !dbg !5536
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5537
  store %struct.rtx_def* %19, %struct.rtx_def** %offset, align 8, !dbg !5538
  %20 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5539
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5539
  %bf.load = load i32, i32* %21, align 8, !dbg !5539
  %bf.clear = and i32 %bf.load, 65535, !dbg !5539
  %cmp28 = icmp eq i32 %bf.clear, 49, !dbg !5541
  br i1 %cmp28, label %land.lhs.true, label %if.end, !dbg !5542

land.lhs.true:                                    ; preds = %cond.end23
  %22 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5543
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5543
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !5543
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !5543
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !5543
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !5543
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5543
  %bf.load33 = load i32, i32* %24, align 8, !dbg !5543
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !5543
  %cmp35 = icmp eq i32 %bf.clear34, 30, !dbg !5543
  br i1 %cmp35, label %if.then, label %if.end, !dbg !5544

if.then:                                          ; preds = %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5545
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5545
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !5545
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !5545
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !5545
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !5545
  store %struct.rtx_def* %26, %struct.rtx_def** %offset, align 8, !dbg !5546
  br label %if.end, !dbg !5547

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end23
  %27 = load i32, i32* %alias, align 4, !dbg !5548
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5549
  %29 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !5550
  %30 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5551
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5551
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5551
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !5551
  %rt_mem43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.mem_attrs**, !dbg !5551
  %31 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem43, align 8, !dbg !5551
  %cmp44 = icmp ne %struct.mem_attrs* %31, null, !dbg !5551
  br i1 %cmp44, label %cond.true45, label %cond.false50, !dbg !5551

cond.true45:                                      ; preds = %if.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5551
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5551
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !5551
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !5551
  %rt_mem49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.mem_attrs**, !dbg !5551
  %33 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem49, align 8, !dbg !5551
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %33, i32 0, i32 2, !dbg !5551
  %34 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !5551
  br label %cond.end64, !dbg !5551

cond.false50:                                     ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5551
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !5551
  %bf.load51 = load i32, i32* %36, align 8, !dbg !5551
  %bf.lshr = lshr i32 %bf.load51, 16, !dbg !5551
  %bf.clear52 = and i32 %bf.lshr, 255, !dbg !5551
  %cmp53 = icmp ne i32 %bf.clear52, 1, !dbg !5551
  br i1 %cmp53, label %cond.true54, label %cond.false61, !dbg !5551

cond.true54:                                      ; preds = %cond.false50
  %37 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5551
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !5551
  %bf.load55 = load i32, i32* %38, align 8, !dbg !5551
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !5551
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !5551
  %idxprom = zext i32 %bf.clear57 to i64, !dbg !5551
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5551
  %39 = load i8, i8* %arrayidx58, align 1, !dbg !5551
  %conv = zext i8 %39 to i16, !dbg !5551
  %conv59 = zext i16 %conv to i64, !dbg !5551
  %call60 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv59), !dbg !5551
  br label %cond.end62, !dbg !5551

cond.false61:                                     ; preds = %cond.false50
  br label %cond.end62, !dbg !5551

cond.end62:                                       ; preds = %cond.false61, %cond.true54
  %cond63 = phi %struct.rtx_def* [ %call60, %cond.true54 ], [ null, %cond.false61 ], !dbg !5551
  br label %cond.end64, !dbg !5551

cond.end64:                                       ; preds = %cond.end62, %cond.true45
  %cond65 = phi %struct.rtx_def* [ %34, %cond.true45 ], [ %cond63, %cond.end62 ], !dbg !5551
  %40 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5552
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !5552
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !5552
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 1, !dbg !5552
  %rt_mem69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.mem_attrs**, !dbg !5552
  %41 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem69, align 8, !dbg !5552
  %cmp70 = icmp ne %struct.mem_attrs* %41, null, !dbg !5552
  br i1 %cmp70, label %cond.true72, label %cond.false77, !dbg !5552

cond.true72:                                      ; preds = %cond.end64
  %42 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5552
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5552
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !5552
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !5552
  %rt_mem76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.mem_attrs**, !dbg !5552
  %43 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem76, align 8, !dbg !5552
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %43, i32 0, i32 4, !dbg !5552
  %44 = load i32, i32* %align, align 4, !dbg !5552
  br label %cond.end78, !dbg !5552

cond.false77:                                     ; preds = %cond.end64
  br label %cond.end78, !dbg !5552

cond.end78:                                       ; preds = %cond.false77, %cond.true72
  %cond79 = phi i32 [ %44, %cond.true72 ], [ 8, %cond.false77 ], !dbg !5552
  %45 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5553
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5553
  %bf.load80 = load i32, i32* %46, align 8, !dbg !5553
  %bf.lshr81 = lshr i32 %bf.load80, 16, !dbg !5553
  %bf.clear82 = and i32 %bf.lshr81, 255, !dbg !5553
  %call83 = call %struct.mem_attrs* @get_mem_attrs(i32 %27, %union.tree_node* %28, %struct.rtx_def* %29, %struct.rtx_def* %cond65, i32 %cond79, i8 zeroext 0, i32 %bf.clear82), !dbg !5554
  %47 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5555
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !5555
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !5555
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !5555
  %rt_mem87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.mem_attrs**, !dbg !5555
  store %struct.mem_attrs* %call83, %struct.mem_attrs** %rt_mem87, align 8, !dbg !5556
  %48 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5557
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5557
  %bf.load88 = load i32, i32* %49, align 8, !dbg !5558
  %bf.clear89 = and i32 %bf.load88, -33554433, !dbg !5558
  %bf.set = or i32 %bf.clear89, 33554432, !dbg !5558
  store i32 %bf.set, i32* %49, align 8, !dbg !5558
  ret void, !dbg !5559
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_label_rtx() #0 !dbg !5560 {
entry:
  %0 = load i32, i32* @label_num, align 4, !dbg !5563
  %inc = add nsw i32 %0, 1, !dbg !5563
  store i32 %inc, i32* @label_num, align 4, !dbg !5563
  %call = call %struct.rtx_def* @gen_rtx_fmt_iuuB00is_stat(i32 12, i32 0, i32 0, %struct.rtx_def* null, %struct.rtx_def* null, %struct.basic_block_def* null, i32 %0, i8* null), !dbg !5563
  ret %struct.rtx_def* %call, !dbg !5564
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_iuuB00is_stat(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_new_first_and_last_insn(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 !dbg !5565 {
entry:
  %first.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %debug_count = alloca i32, align 4
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !5566, metadata !DIExpression()), !dbg !5567
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !5568, metadata !DIExpression()), !dbg !5569
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5570, metadata !DIExpression()), !dbg !5571
  %0 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !5572
  store %struct.rtx_def* %0, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !5573
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !5574
  store %struct.rtx_def* %1, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !5575
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5576
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5577
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 117, !dbg !5577
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5577
  %3 = load i32, i32* %value, align 8, !dbg !5577
  %tobool = icmp ne i32 %3, 0, !dbg !5577
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5579

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5580
  %tobool1 = icmp ne i32 %4, 0, !dbg !5580
  br i1 %tobool1, label %if.then, label %if.else44, !dbg !5581

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %debug_count, metadata !5582, metadata !DIExpression()), !dbg !5584
  store i32 0, i32* %debug_count, align 4, !dbg !5584
  %5 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5585
  %arrayidx2 = getelementptr inbounds %struct.param_info, %struct.param_info* %5, i64 117, !dbg !5585
  %value3 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx2, i32 0, i32 1, !dbg !5585
  %6 = load i32, i32* %value3, align 8, !dbg !5585
  %sub = sub nsw i32 %6, 1, !dbg !5586
  store i32 %sub, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5587
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5588
  %7 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !5589
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !5591
  br label %for.cond, !dbg !5592

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5593
  %tobool4 = icmp ne %struct.rtx_def* %8, null, !dbg !5595
  br i1 %tobool4, label %for.body, label %for.end, !dbg !5595

for.body:                                         ; preds = %for.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5596
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !5596
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5596
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5596
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !5596
  %10 = load i32, i32* %rt_int, align 8, !dbg !5596
  %11 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5598
  %arrayidx6 = getelementptr inbounds %struct.param_info, %struct.param_info* %11, i64 117, !dbg !5598
  %value7 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx6, i32 0, i32 1, !dbg !5598
  %12 = load i32, i32* %value7, align 8, !dbg !5598
  %cmp = icmp slt i32 %10, %12, !dbg !5599
  br i1 %cmp, label %if.then8, label %if.else, !dbg !5600

if.then8:                                         ; preds = %for.body
  %13 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5601
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5601
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5601
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !5601
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !5601
  %rt_int12 = bitcast %union.rtunion_def* %arrayidx11 to i32*, !dbg !5601
  %15 = load i32, i32* %rt_int12, align 8, !dbg !5601
  %cmp13 = icmp sgt i32 %13, %15, !dbg !5601
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !5601

cond.true:                                        ; preds = %if.then8
  %16 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5601
  br label %cond.end, !dbg !5601

cond.false:                                       ; preds = %if.then8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5601
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5601
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !5601
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !5601
  %rt_int17 = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !5601
  %18 = load i32, i32* %rt_int17, align 8, !dbg !5601
  br label %cond.end, !dbg !5601

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ %18, %cond.false ], !dbg !5601
  store i32 %cond, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5602
  br label %if.end33, !dbg !5603

if.else:                                          ; preds = %for.body
  %19 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5604
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5604
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5604
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5604
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !5604
  %rt_int21 = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !5604
  %21 = load i32, i32* %rt_int21, align 8, !dbg !5604
  %cmp22 = icmp sgt i32 %19, %21, !dbg !5604
  br i1 %cmp22, label %cond.true23, label %cond.false24, !dbg !5604

cond.true23:                                      ; preds = %if.else
  %22 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5604
  br label %cond.end29, !dbg !5604

cond.false24:                                     ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5604
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !5604
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5604
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !5604
  %rt_int28 = bitcast %union.rtunion_def* %arrayidx27 to i32*, !dbg !5604
  %24 = load i32, i32* %rt_int28, align 8, !dbg !5604
  br label %cond.end29, !dbg !5604

cond.end29:                                       ; preds = %cond.false24, %cond.true23
  %cond30 = phi i32 [ %22, %cond.true23 ], [ %24, %cond.false24 ], !dbg !5604
  store i32 %cond30, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5606
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5607
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5607
  %bf.load = load i32, i32* %26, align 8, !dbg !5607
  %bf.clear = and i32 %bf.load, 65535, !dbg !5607
  %cmp31 = icmp eq i32 %bf.clear, 7, !dbg !5607
  br i1 %cmp31, label %if.then32, label %if.end, !dbg !5609

if.then32:                                        ; preds = %cond.end29
  %27 = load i32, i32* %debug_count, align 4, !dbg !5610
  %inc = add nsw i32 %27, 1, !dbg !5610
  store i32 %inc, i32* %debug_count, align 4, !dbg !5610
  br label %if.end, !dbg !5611

if.end:                                           ; preds = %if.then32, %cond.end29
  br label %if.end33

if.end33:                                         ; preds = %if.end, %cond.end
  br label %for.inc, !dbg !5598

for.inc:                                          ; preds = %if.end33
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5612
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5612
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !5612
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 2, !dbg !5612
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !5612
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5612
  store %struct.rtx_def* %29, %struct.rtx_def** %insn, align 8, !dbg !5613
  br label %for.cond, !dbg !5614, !llvm.loop !5615

for.end:                                          ; preds = %for.cond
  %30 = load i32, i32* %debug_count, align 4, !dbg !5617
  %tobool37 = icmp ne i32 %30, 0, !dbg !5617
  br i1 %tobool37, label %if.then38, label %if.else41, !dbg !5619

if.then38:                                        ; preds = %for.end
  %31 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5620
  %arrayidx39 = getelementptr inbounds %struct.param_info, %struct.param_info* %31, i64 117, !dbg !5620
  %value40 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx39, i32 0, i32 1, !dbg !5620
  %32 = load i32, i32* %value40, align 8, !dbg !5620
  %33 = load i32, i32* %debug_count, align 4, !dbg !5621
  %add = add nsw i32 %32, %33, !dbg !5622
  store i32 %add, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5623
  br label %if.end43, !dbg !5624

if.else41:                                        ; preds = %for.end
  %34 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5625
  %inc42 = add nsw i32 %34, 1, !dbg !5625
  store i32 %inc42, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !5625
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then38
  br label %if.end67, !dbg !5626

if.else44:                                        ; preds = %lor.lhs.false
  %35 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !5627
  store %struct.rtx_def* %35, %struct.rtx_def** %insn, align 8, !dbg !5629
  br label %for.cond45, !dbg !5630

for.cond45:                                       ; preds = %for.inc61, %if.else44
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5631
  %tobool46 = icmp ne %struct.rtx_def* %36, null, !dbg !5633
  br i1 %tobool46, label %for.body47, label %for.end66, !dbg !5633

for.body47:                                       ; preds = %for.cond45
  %37 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5634
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5634
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5634
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !5634
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 0, !dbg !5634
  %rt_int51 = bitcast %union.rtunion_def* %arrayidx50 to i32*, !dbg !5634
  %39 = load i32, i32* %rt_int51, align 8, !dbg !5634
  %cmp52 = icmp sgt i32 %37, %39, !dbg !5634
  br i1 %cmp52, label %cond.true53, label %cond.false54, !dbg !5634

cond.true53:                                      ; preds = %for.body47
  %40 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5634
  br label %cond.end59, !dbg !5634

cond.false54:                                     ; preds = %for.body47
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5634
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5634
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !5634
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !5634
  %rt_int58 = bitcast %union.rtunion_def* %arrayidx57 to i32*, !dbg !5634
  %42 = load i32, i32* %rt_int58, align 8, !dbg !5634
  br label %cond.end59, !dbg !5634

cond.end59:                                       ; preds = %cond.false54, %cond.true53
  %cond60 = phi i32 [ %40, %cond.true53 ], [ %42, %cond.false54 ], !dbg !5634
  store i32 %cond60, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5635
  br label %for.inc61, !dbg !5636

for.inc61:                                        ; preds = %cond.end59
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5637
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !5637
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !5637
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 2, !dbg !5637
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !5637
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !5637
  store %struct.rtx_def* %44, %struct.rtx_def** %insn, align 8, !dbg !5638
  br label %for.cond45, !dbg !5639, !llvm.loop !5640

for.end66:                                        ; preds = %for.cond45
  br label %if.end67

if.end67:                                         ; preds = %for.end66, %if.end43
  %45 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5642
  %inc68 = add nsw i32 %45, 1, !dbg !5642
  store i32 %inc68, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !5642
  ret void, !dbg !5643
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unshare_all_rtl_again(%struct.rtx_def* %insn) #0 !dbg !5644 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5645, metadata !DIExpression()), !dbg !5646
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p, metadata !5647, metadata !DIExpression()), !dbg !5648
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5649, metadata !DIExpression()), !dbg !5650
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5651
  store %struct.rtx_def* %0, %struct.rtx_def** %p, align 8, !dbg !5653
  br label %for.cond, !dbg !5654

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5655
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !5657
  br i1 %tobool, label %for.body, label %for.end, !dbg !5657

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5658
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5658
  %bf.load = load i32, i32* %3, align 8, !dbg !5658
  %bf.clear = and i32 %bf.load, 65535, !dbg !5658
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5658
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5658

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5658
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5658
  %bf.load1 = load i32, i32* %5, align 8, !dbg !5658
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5658
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !5658
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !5658

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5658
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5658
  %bf.load5 = load i32, i32* %7, align 8, !dbg !5658
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5658
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !5658
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !5658

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5658
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5658
  %bf.load9 = load i32, i32* %9, align 8, !dbg !5658
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5658
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !5658
  br i1 %cmp11, label %if.then, label %if.end, !dbg !5660

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %for.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5661
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5661
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5661
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5661
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5661
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5661
  call void @reset_used_flags(%struct.rtx_def* %11), !dbg !5663
  %12 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5664
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !5664
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5664
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 7, !dbg !5664
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !5664
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !5664
  call void @reset_used_flags(%struct.rtx_def* %13), !dbg !5665
  br label %if.end, !dbg !5666

if.end:                                           ; preds = %if.then, %lor.lhs.false8
  br label %for.inc, !dbg !5658

for.inc:                                          ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5667
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5667
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5667
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !5667
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !5667
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !5667
  store %struct.rtx_def* %15, %struct.rtx_def** %p, align 8, !dbg !5668
  br label %for.cond, !dbg !5669, !llvm.loop !5670

for.end:                                          ; preds = %for.cond
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5672
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5672
  %decl20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !5672
  %17 = load %union.tree_node*, %union.tree_node** %decl20, align 8, !dbg !5672
  %decl_common = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !5672
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5672
  %18 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5672
  call void @set_used_decls(%union.tree_node* %18), !dbg !5673
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5674
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5674
  %decl22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 6, !dbg !5674
  %20 = load %union.tree_node*, %union.tree_node** %decl22, align 8, !dbg !5674
  %decl_non_common = bitcast %union.tree_node* %20 to %struct.tree_decl_non_common*, !dbg !5674
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5674
  %21 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5674
  store %union.tree_node* %21, %union.tree_node** %decl, align 8, !dbg !5676
  br label %for.cond23, !dbg !5677

for.cond23:                                       ; preds = %for.inc31, %for.end
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5678
  %tobool24 = icmp ne %union.tree_node* %22, null, !dbg !5680
  br i1 %tobool24, label %for.body25, label %for.end32, !dbg !5680

for.body25:                                       ; preds = %for.cond23
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5681
  %decl_with_rtl = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !5681
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5681
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5681
  %tobool26 = icmp ne %struct.rtx_def* %24, null, !dbg !5681
  br i1 %tobool26, label %cond.true, label %cond.false, !dbg !5681

cond.true:                                        ; preds = %for.body25
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5681
  %decl_with_rtl27 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !5681
  %rtl28 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl27, i32 0, i32 1, !dbg !5681
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl28, align 8, !dbg !5681
  br label %cond.end, !dbg !5681

cond.false:                                       ; preds = %for.body25
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5681
  call void @make_decl_rtl(%union.tree_node* %27), !dbg !5681
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5681
  %decl_with_rtl29 = bitcast %union.tree_node* %28 to %struct.tree_decl_with_rtl*, !dbg !5681
  %rtl30 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl29, i32 0, i32 1, !dbg !5681
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl30, align 8, !dbg !5681
  br label %cond.end, !dbg !5681

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %26, %cond.true ], [ %29, %cond.false ], !dbg !5681
  call void @set_used_flags(%struct.rtx_def* %cond), !dbg !5682
  br label %for.inc31, !dbg !5682

for.inc31:                                        ; preds = %cond.end
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5683
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5683
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5683
  %31 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5683
  store %union.tree_node* %31, %union.tree_node** %decl, align 8, !dbg !5684
  br label %for.cond23, !dbg !5685, !llvm.loop !5686

for.end32:                                        ; preds = %for.cond23
  %32 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5688
  call void @reset_used_flags(%struct.rtx_def* %32), !dbg !5689
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5690
  call void @unshare_all_rtl_1(%struct.rtx_def* %33), !dbg !5691
  ret void, !dbg !5692
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reset_used_flags(%struct.rtx_def* %x) #0 !dbg !5693 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %format_ptr = alloca i8*, align 8
  %length = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5694, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5696, metadata !DIExpression()), !dbg !5697
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5698, metadata !DIExpression()), !dbg !5699
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5700, metadata !DIExpression()), !dbg !5701
  call void @llvm.dbg.declare(metadata i8** %format_ptr, metadata !5702, metadata !DIExpression()), !dbg !5703
  call void @llvm.dbg.declare(metadata i32* %length, metadata !5704, metadata !DIExpression()), !dbg !5705
  br label %repeat, !dbg !5706

repeat:                                           ; preds = %if.then12, %entry
  call void @llvm.dbg.label(metadata !5707), !dbg !5708
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5709
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !5711
  br i1 %cmp, label %if.then, label %if.end, !dbg !5712

if.then:                                          ; preds = %repeat
  br label %for.end40, !dbg !5713

if.end:                                           ; preds = %repeat
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5714
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5714
  %bf.load = load i32, i32* %2, align 8, !dbg !5714
  %bf.clear = and i32 %bf.load, 65535, !dbg !5714
  store i32 %bf.clear, i32* %code, align 4, !dbg !5715
  %3 = load i32, i32* %code, align 4, !dbg !5716
  switch i32 %3, label %sw.default [
    i32 37, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 12, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 7, label %sw.bb1
    i32 8, label %sw.bb1
    i32 9, label %sw.bb1
    i32 10, label %sw.bb1
    i32 13, label %sw.bb1
    i32 44, label %sw.bb1
    i32 11, label %sw.bb1
  ], !dbg !5717

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end40, !dbg !5718

sw.bb1:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end40, !dbg !5720

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !5721

sw.epilog:                                        ; preds = %sw.default
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5722
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5722
  %bf.load2 = load i32, i32* %5, align 8, !dbg !5723
  %bf.clear3 = and i32 %bf.load2, -536870913, !dbg !5723
  store i32 %bf.clear3, i32* %5, align 8, !dbg !5723
  %6 = load i32, i32* %code, align 4, !dbg !5724
  %idxprom = sext i32 %6 to i64, !dbg !5724
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !5724
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !5724
  store i8* %7, i8** %format_ptr, align 8, !dbg !5725
  %8 = load i32, i32* %code, align 4, !dbg !5726
  %idxprom4 = sext i32 %8 to i64, !dbg !5726
  %arrayidx5 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom4, !dbg !5726
  %9 = load i8, i8* %arrayidx5, align 1, !dbg !5726
  %conv = zext i8 %9 to i32, !dbg !5726
  store i32 %conv, i32* %length, align 4, !dbg !5727
  store i32 0, i32* %i, align 4, !dbg !5728
  br label %for.cond, !dbg !5730

for.cond:                                         ; preds = %for.inc38, %sw.epilog
  %10 = load i32, i32* %i, align 4, !dbg !5731
  %11 = load i32, i32* %length, align 4, !dbg !5733
  %cmp6 = icmp slt i32 %10, %11, !dbg !5734
  br i1 %cmp6, label %for.body, label %for.end40, !dbg !5735

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %format_ptr, align 8, !dbg !5736
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !5736
  store i8* %incdec.ptr, i8** %format_ptr, align 8, !dbg !5736
  %13 = load i8, i8* %12, align 1, !dbg !5738
  %conv8 = sext i8 %13 to i32, !dbg !5738
  switch i32 %conv8, label %sw.epilog37 [
    i32 101, label %sw.bb9
    i32 69, label %sw.bb21
  ], !dbg !5739

sw.bb9:                                           ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !5740
  %15 = load i32, i32* %length, align 4, !dbg !5743
  %sub = sub nsw i32 %15, 1, !dbg !5744
  %cmp10 = icmp eq i32 %14, %sub, !dbg !5745
  br i1 %cmp10, label %if.then12, label %if.end15, !dbg !5746

if.then12:                                        ; preds = %sw.bb9
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5747
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5747
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5747
  %17 = load i32, i32* %i, align 4, !dbg !5747
  %idxprom13 = sext i32 %17 to i64, !dbg !5747
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom13, !dbg !5747
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !5747
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5747
  store %struct.rtx_def* %18, %struct.rtx_def** %x.addr, align 8, !dbg !5749
  br label %repeat, !dbg !5750

if.end15:                                         ; preds = %sw.bb9
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5751
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5751
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5751
  %20 = load i32, i32* %i, align 4, !dbg !5751
  %idxprom18 = sext i32 %20 to i64, !dbg !5751
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 %idxprom18, !dbg !5751
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !5751
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !5751
  call void @reset_used_flags(%struct.rtx_def* %21), !dbg !5752
  br label %sw.epilog37, !dbg !5753

sw.bb21:                                          ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !5754
  br label %for.cond22, !dbg !5756

for.cond22:                                       ; preds = %for.inc, %sw.bb21
  %22 = load i32, i32* %j, align 4, !dbg !5757
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5759
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !5759
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !5759
  %24 = load i32, i32* %i, align 4, !dbg !5759
  %idxprom25 = sext i32 %24 to i64, !dbg !5759
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 %idxprom25, !dbg !5759
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**, !dbg !5759
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5759
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 0, !dbg !5759
  %26 = load i32, i32* %num_elem, align 8, !dbg !5759
  %cmp27 = icmp slt i32 %22, %26, !dbg !5760
  br i1 %cmp27, label %for.body29, label %for.end, !dbg !5761

for.body29:                                       ; preds = %for.cond22
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5762
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5762
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !5762
  %28 = load i32, i32* %i, align 4, !dbg !5762
  %idxprom32 = sext i32 %28 to i64, !dbg !5762
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 %idxprom32, !dbg !5762
  %rt_rtvec34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**, !dbg !5762
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec34, align 8, !dbg !5762
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 1, !dbg !5762
  %30 = load i32, i32* %j, align 4, !dbg !5762
  %idxprom35 = sext i32 %30 to i64, !dbg !5762
  %arrayidx36 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom35, !dbg !5762
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8, !dbg !5762
  call void @reset_used_flags(%struct.rtx_def* %31), !dbg !5763
  br label %for.inc, !dbg !5763

for.inc:                                          ; preds = %for.body29
  %32 = load i32, i32* %j, align 4, !dbg !5764
  %inc = add nsw i32 %32, 1, !dbg !5764
  store i32 %inc, i32* %j, align 4, !dbg !5764
  br label %for.cond22, !dbg !5765, !llvm.loop !5766

for.end:                                          ; preds = %for.cond22
  br label %sw.epilog37, !dbg !5768

sw.epilog37:                                      ; preds = %for.body, %for.end, %if.end15
  br label %for.inc38, !dbg !5769

for.inc38:                                        ; preds = %sw.epilog37
  %33 = load i32, i32* %i, align 4, !dbg !5770
  %inc39 = add nsw i32 %33, 1, !dbg !5770
  store i32 %inc39, i32* %i, align 4, !dbg !5770
  br label %for.cond, !dbg !5771, !llvm.loop !5772

for.end40:                                        ; preds = %if.then, %sw.bb, %sw.bb1, %for.cond
  ret void, !dbg !5774
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_used_decls(%union.tree_node* %blk) #0 !dbg !5775 {
entry:
  %blk.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %blk, %union.tree_node** %blk.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %blk.addr, metadata !5778, metadata !DIExpression()), !dbg !5779
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5780, metadata !DIExpression()), !dbg !5781
  %0 = load %union.tree_node*, %union.tree_node** %blk.addr, align 8, !dbg !5782
  %block = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !5782
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 3, !dbg !5782
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !5782
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !5784
  br label %for.cond, !dbg !5785

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5786
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5788
  br i1 %tobool, label %for.body, label %for.end, !dbg !5788

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5789
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5789
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5789
  %bf.load = load i64, i64* %4, align 8, !dbg !5789
  %bf.clear = and i64 %bf.load, 65535, !dbg !5789
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5789
  %idxprom = zext i32 %bf.cast to i64, !dbg !5789
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !5789
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !5789
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !5789
  %conv = zext i8 %5 to i32, !dbg !5789
  %tobool2 = icmp ne i32 %conv, 0, !dbg !5789
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !5789

land.lhs.true:                                    ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5789
  %decl_with_rtl = bitcast %union.tree_node* %6 to %struct.tree_decl_with_rtl*, !dbg !5789
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5789
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5789
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !5789
  br i1 %cmp, label %if.then, label %if.end, !dbg !5791

if.then:                                          ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5792
  %decl_with_rtl4 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !5792
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !5792
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !5792
  %tobool6 = icmp ne %struct.rtx_def* %9, null, !dbg !5792
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !5792

cond.true:                                        ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5792
  %decl_with_rtl7 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !5792
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !5792
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !5792
  br label %cond.end, !dbg !5792

cond.false:                                       ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5792
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !5792
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5792
  %decl_with_rtl9 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !5792
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !5792
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !5792
  br label %cond.end, !dbg !5792

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %11, %cond.true ], [ %14, %cond.false ], !dbg !5792
  call void @set_used_flags(%struct.rtx_def* %cond), !dbg !5793
  br label %if.end, !dbg !5793

if.end:                                           ; preds = %cond.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5789

for.inc:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5794
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5794
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5794
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5794
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !5795
  br label %for.cond, !dbg !5796, !llvm.loop !5797

for.end:                                          ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %blk.addr, align 8, !dbg !5799
  %block11 = bitcast %union.tree_node* %17 to %struct.tree_block*, !dbg !5799
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block11, i32 0, i32 5, !dbg !5799
  %18 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !5799
  store %union.tree_node* %18, %union.tree_node** %t, align 8, !dbg !5801
  br label %for.cond12, !dbg !5802

for.cond12:                                       ; preds = %for.inc15, %for.end
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5803
  %tobool13 = icmp ne %union.tree_node* %19, null, !dbg !5805
  br i1 %tobool13, label %for.body14, label %for.end18, !dbg !5805

for.body14:                                       ; preds = %for.cond12
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5806
  call void @set_used_decls(%union.tree_node* %20), !dbg !5807
  br label %for.inc15, !dbg !5807

for.inc15:                                        ; preds = %for.body14
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5808
  %common16 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !5808
  %chain17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 1, !dbg !5808
  %22 = load %union.tree_node*, %union.tree_node** %chain17, align 8, !dbg !5808
  store %union.tree_node* %22, %union.tree_node** %t, align 8, !dbg !5809
  br label %for.cond12, !dbg !5810, !llvm.loop !5811

for.end18:                                        ; preds = %for.cond12
  ret void, !dbg !5813
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_used_flags(%struct.rtx_def* %x) #0 !dbg !5814 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %format_ptr = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5815, metadata !DIExpression()), !dbg !5816
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5817, metadata !DIExpression()), !dbg !5818
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5819, metadata !DIExpression()), !dbg !5820
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5821, metadata !DIExpression()), !dbg !5822
  call void @llvm.dbg.declare(metadata i8** %format_ptr, metadata !5823, metadata !DIExpression()), !dbg !5824
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5825
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !5827
  br i1 %cmp, label %if.then, label %if.end, !dbg !5828

if.then:                                          ; preds = %entry
  br label %for.end31, !dbg !5829

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5830
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5830
  %bf.load = load i32, i32* %2, align 8, !dbg !5830
  %bf.clear = and i32 %bf.load, 65535, !dbg !5830
  store i32 %bf.clear, i32* %code, align 4, !dbg !5831
  %3 = load i32, i32* %code, align 4, !dbg !5832
  switch i32 %3, label %sw.default [
    i32 37, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 12, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 7, label %sw.bb1
    i32 8, label %sw.bb1
    i32 9, label %sw.bb1
    i32 10, label %sw.bb1
    i32 13, label %sw.bb1
    i32 44, label %sw.bb1
    i32 11, label %sw.bb1
  ], !dbg !5833

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end31, !dbg !5834

sw.bb1:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end31, !dbg !5836

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !5837

sw.epilog:                                        ; preds = %sw.default
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5838
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5838
  %bf.load2 = load i32, i32* %5, align 8, !dbg !5839
  %bf.clear3 = and i32 %bf.load2, -536870913, !dbg !5839
  %bf.set = or i32 %bf.clear3, 536870912, !dbg !5839
  store i32 %bf.set, i32* %5, align 8, !dbg !5839
  %6 = load i32, i32* %code, align 4, !dbg !5840
  %idxprom = sext i32 %6 to i64, !dbg !5840
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !5840
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !5840
  store i8* %7, i8** %format_ptr, align 8, !dbg !5841
  store i32 0, i32* %i, align 4, !dbg !5842
  br label %for.cond, !dbg !5844

for.cond:                                         ; preds = %for.inc29, %sw.epilog
  %8 = load i32, i32* %i, align 4, !dbg !5845
  %9 = load i32, i32* %code, align 4, !dbg !5847
  %idxprom4 = sext i32 %9 to i64, !dbg !5847
  %arrayidx5 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom4, !dbg !5847
  %10 = load i8, i8* %arrayidx5, align 1, !dbg !5847
  %conv = zext i8 %10 to i32, !dbg !5847
  %cmp6 = icmp slt i32 %8, %conv, !dbg !5848
  br i1 %cmp6, label %for.body, label %for.end31, !dbg !5849

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %format_ptr, align 8, !dbg !5850
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !5850
  store i8* %incdec.ptr, i8** %format_ptr, align 8, !dbg !5850
  %12 = load i8, i8* %11, align 1, !dbg !5852
  %conv8 = sext i8 %12 to i32, !dbg !5852
  switch i32 %conv8, label %sw.epilog28 [
    i32 101, label %sw.bb9
    i32 69, label %sw.bb12
  ], !dbg !5853

sw.bb9:                                           ; preds = %for.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5854
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5854
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5854
  %14 = load i32, i32* %i, align 4, !dbg !5854
  %idxprom10 = sext i32 %14 to i64, !dbg !5854
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom10, !dbg !5854
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !5854
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5854
  call void @set_used_flags(%struct.rtx_def* %15), !dbg !5856
  br label %sw.epilog28, !dbg !5857

sw.bb12:                                          ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !5858
  br label %for.cond13, !dbg !5860

for.cond13:                                       ; preds = %for.inc, %sw.bb12
  %16 = load i32, i32* %j, align 4, !dbg !5861
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5863
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5863
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !5863
  %18 = load i32, i32* %i, align 4, !dbg !5863
  %idxprom16 = sext i32 %18 to i64, !dbg !5863
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 %idxprom16, !dbg !5863
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtvec_def**, !dbg !5863
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5863
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 0, !dbg !5863
  %20 = load i32, i32* %num_elem, align 8, !dbg !5863
  %cmp18 = icmp slt i32 %16, %20, !dbg !5864
  br i1 %cmp18, label %for.body20, label %for.end, !dbg !5865

for.body20:                                       ; preds = %for.cond13
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5866
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5866
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !5866
  %22 = load i32, i32* %i, align 4, !dbg !5866
  %idxprom23 = sext i32 %22 to i64, !dbg !5866
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 %idxprom23, !dbg !5866
  %rt_rtvec25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtvec_def**, !dbg !5866
  %23 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec25, align 8, !dbg !5866
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %23, i32 0, i32 1, !dbg !5866
  %24 = load i32, i32* %j, align 4, !dbg !5866
  %idxprom26 = sext i32 %24 to i64, !dbg !5866
  %arrayidx27 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom26, !dbg !5866
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8, !dbg !5866
  call void @set_used_flags(%struct.rtx_def* %25), !dbg !5867
  br label %for.inc, !dbg !5867

for.inc:                                          ; preds = %for.body20
  %26 = load i32, i32* %j, align 4, !dbg !5868
  %inc = add nsw i32 %26, 1, !dbg !5868
  store i32 %inc, i32* %j, align 4, !dbg !5868
  br label %for.cond13, !dbg !5869, !llvm.loop !5870

for.end:                                          ; preds = %for.cond13
  br label %sw.epilog28, !dbg !5872

sw.epilog28:                                      ; preds = %for.body, %for.end, %sw.bb9
  br label %for.inc29, !dbg !5873

for.inc29:                                        ; preds = %sw.epilog28
  %27 = load i32, i32* %i, align 4, !dbg !5874
  %inc30 = add nsw i32 %27, 1, !dbg !5874
  store i32 %inc30, i32* %i, align 4, !dbg !5874
  br label %for.cond, !dbg !5875, !llvm.loop !5876

for.end31:                                        ; preds = %if.then, %sw.bb, %sw.bb1, %for.cond
  ret void, !dbg !5878
}

; Function Attrs: noinline nounwind uwtable
define internal void @unshare_all_rtl_1(%struct.rtx_def* %insn) #0 !dbg !5879 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5880, metadata !DIExpression()), !dbg !5881
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5882
  call void @unshare_all_rtl_in_chain(%struct.rtx_def* %0), !dbg !5883
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5884
  %call = call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %1), !dbg !5885
  store %struct.rtx_def* %call, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5886
  ret void, !dbg !5887
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @unshare_all_rtl() #0 !dbg !5888 {
entry:
  %call = call %struct.rtx_def* @get_insns(), !dbg !5889
  call void @unshare_all_rtl_1(%struct.rtx_def* %call), !dbg !5890
  ret i32 0, !dbg !5891
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_insns() #0 !dbg !5892 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !5893
  ret %struct.rtx_def* %0, !dbg !5894
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_rtl_sharing() #0 !dbg !5895 {
entry:
  %p = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %q = alloca %struct.rtx_def*, align 8
  %sequence = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p, metadata !5898, metadata !DIExpression()), !dbg !5899
  %call = call %struct.rtx_def* @get_insns(), !dbg !5900
  store %struct.rtx_def* %call, %struct.rtx_def** %p, align 8, !dbg !5902
  br label %for.cond, !dbg !5903

for.cond:                                         ; preds = %for.inc63, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5904
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !5906
  br i1 %tobool, label %for.body, label %for.end68, !dbg !5906

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5907
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5907
  %bf.load = load i32, i32* %2, align 8, !dbg !5907
  %bf.clear = and i32 %bf.load, 65535, !dbg !5907
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5907
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5907

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5907
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5907
  %bf.load1 = load i32, i32* %4, align 8, !dbg !5907
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5907
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !5907
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !5907

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5907
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5907
  %bf.load5 = load i32, i32* %6, align 8, !dbg !5907
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5907
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !5907
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !5907

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5907
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5907
  %bf.load9 = load i32, i32* %8, align 8, !dbg !5907
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5907
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !5907
  br i1 %cmp11, label %if.then, label %if.end62, !dbg !5909

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5910
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !5910
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5910
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5910
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5910
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5910
  call void @reset_used_flags(%struct.rtx_def* %10), !dbg !5912
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5913
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5913
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !5913
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 7, !dbg !5913
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !5913
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !5913
  call void @reset_used_flags(%struct.rtx_def* %12), !dbg !5914
  %13 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5915
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5915
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5915
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !5915
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !5915
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !5915
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5915
  %bf.load20 = load i32, i32* %15, align 8, !dbg !5915
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !5915
  %cmp22 = icmp eq i32 %bf.clear21, 5, !dbg !5917
  br i1 %cmp22, label %if.then23, label %if.end, !dbg !5918

if.then23:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5919, metadata !DIExpression()), !dbg !5921
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %q, metadata !5922, metadata !DIExpression()), !dbg !5923
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sequence, metadata !5924, metadata !DIExpression()), !dbg !5925
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5926
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5926
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !5926
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 5, !dbg !5926
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !5926
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !5926
  store %struct.rtx_def* %17, %struct.rtx_def** %sequence, align 8, !dbg !5925
  store i32 0, i32* %i, align 4, !dbg !5927
  br label %for.cond28, !dbg !5929

for.cond28:                                       ; preds = %for.inc, %if.then23
  %18 = load i32, i32* %i, align 4, !dbg !5930
  %19 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !5932
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5932
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !5932
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !5932
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtvec_def**, !dbg !5932
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5932
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 0, !dbg !5932
  %21 = load i32, i32* %num_elem, align 8, !dbg !5932
  %cmp32 = icmp slt i32 %18, %21, !dbg !5933
  br i1 %cmp32, label %for.body33, label %for.end, !dbg !5934

for.body33:                                       ; preds = %for.cond28
  %22 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !5935
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5935
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !5935
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 0, !dbg !5935
  %rt_rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !5935
  %23 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec37, align 8, !dbg !5935
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %23, i32 0, i32 1, !dbg !5935
  %24 = load i32, i32* %i, align 4, !dbg !5935
  %idxprom = sext i32 %24 to i64, !dbg !5935
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !5935
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !5935
  store %struct.rtx_def* %25, %struct.rtx_def** %q, align 8, !dbg !5937
  %26 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5938
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !5938
  %bf.load39 = load i32, i32* %27, align 8, !dbg !5938
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !5938
  %cmp41 = icmp eq i32 %bf.clear40, 8, !dbg !5938
  br i1 %cmp41, label %cond.false, label %lor.lhs.false42, !dbg !5938

lor.lhs.false42:                                  ; preds = %for.body33
  %28 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5938
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5938
  %bf.load43 = load i32, i32* %29, align 8, !dbg !5938
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !5938
  %cmp45 = icmp eq i32 %bf.clear44, 7, !dbg !5938
  br i1 %cmp45, label %cond.false, label %lor.lhs.false46, !dbg !5938

lor.lhs.false46:                                  ; preds = %lor.lhs.false42
  %30 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5938
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5938
  %bf.load47 = load i32, i32* %31, align 8, !dbg !5938
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !5938
  %cmp49 = icmp eq i32 %bf.clear48, 9, !dbg !5938
  br i1 %cmp49, label %cond.false, label %lor.lhs.false50, !dbg !5938

lor.lhs.false50:                                  ; preds = %lor.lhs.false46
  %32 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5938
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !5938
  %bf.load51 = load i32, i32* %33, align 8, !dbg !5938
  %bf.clear52 = and i32 %bf.load51, 65535, !dbg !5938
  %cmp53 = icmp eq i32 %bf.clear52, 10, !dbg !5938
  br i1 %cmp53, label %cond.false, label %cond.true, !dbg !5938

cond.true:                                        ; preds = %lor.lhs.false50
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2528, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5938
  br label %cond.end, !dbg !5938

cond.false:                                       ; preds = %lor.lhs.false50, %lor.lhs.false46, %lor.lhs.false42, %for.body33
  br label %cond.end, !dbg !5938

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5938
  %34 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5939
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5939
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5939
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 5, !dbg !5939
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !5939
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !5939
  call void @reset_used_flags(%struct.rtx_def* %35), !dbg !5940
  %36 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8, !dbg !5941
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5941
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5941
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 7, !dbg !5941
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !5941
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !5941
  call void @reset_used_flags(%struct.rtx_def* %37), !dbg !5942
  br label %for.inc, !dbg !5943

for.inc:                                          ; preds = %cond.end
  %38 = load i32, i32* %i, align 4, !dbg !5944
  %inc = add nsw i32 %38, 1, !dbg !5944
  store i32 %inc, i32* %i, align 4, !dbg !5944
  br label %for.cond28, !dbg !5945, !llvm.loop !5946

for.end:                                          ; preds = %for.cond28
  br label %if.end, !dbg !5948

if.end:                                           ; preds = %for.end, %if.then
  br label %if.end62, !dbg !5949

if.end62:                                         ; preds = %if.end, %lor.lhs.false8
  br label %for.inc63, !dbg !5907

for.inc63:                                        ; preds = %if.end62
  %39 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5950
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5950
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5950
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 2, !dbg !5950
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !5950
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !5950
  store %struct.rtx_def* %40, %struct.rtx_def** %p, align 8, !dbg !5951
  br label %for.cond, !dbg !5952, !llvm.loop !5953

for.end68:                                        ; preds = %for.cond
  %call69 = call %struct.rtx_def* @get_insns(), !dbg !5955
  store %struct.rtx_def* %call69, %struct.rtx_def** %p, align 8, !dbg !5957
  br label %for.cond70, !dbg !5958

for.cond70:                                       ; preds = %for.inc98, %for.end68
  %41 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5959
  %tobool71 = icmp ne %struct.rtx_def* %41, null, !dbg !5961
  br i1 %tobool71, label %for.body72, label %for.end103, !dbg !5961

for.body72:                                       ; preds = %for.cond70
  %42 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5962
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !5962
  %bf.load73 = load i32, i32* %43, align 8, !dbg !5962
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !5962
  %cmp75 = icmp eq i32 %bf.clear74, 8, !dbg !5962
  br i1 %cmp75, label %if.then88, label %lor.lhs.false76, !dbg !5962

lor.lhs.false76:                                  ; preds = %for.body72
  %44 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5962
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !5962
  %bf.load77 = load i32, i32* %45, align 8, !dbg !5962
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5962
  %cmp79 = icmp eq i32 %bf.clear78, 7, !dbg !5962
  br i1 %cmp79, label %if.then88, label %lor.lhs.false80, !dbg !5962

lor.lhs.false80:                                  ; preds = %lor.lhs.false76
  %46 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5962
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5962
  %bf.load81 = load i32, i32* %47, align 8, !dbg !5962
  %bf.clear82 = and i32 %bf.load81, 65535, !dbg !5962
  %cmp83 = icmp eq i32 %bf.clear82, 9, !dbg !5962
  br i1 %cmp83, label %if.then88, label %lor.lhs.false84, !dbg !5962

lor.lhs.false84:                                  ; preds = %lor.lhs.false80
  %48 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5962
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5962
  %bf.load85 = load i32, i32* %49, align 8, !dbg !5962
  %bf.clear86 = and i32 %bf.load85, 65535, !dbg !5962
  %cmp87 = icmp eq i32 %bf.clear86, 10, !dbg !5962
  br i1 %cmp87, label %if.then88, label %if.end97, !dbg !5964

if.then88:                                        ; preds = %lor.lhs.false84, %lor.lhs.false80, %lor.lhs.false76, %for.body72
  %50 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5965
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !5965
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !5965
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 5, !dbg !5965
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !5965
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !5965
  %52 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5967
  call void @verify_rtx_sharing(%struct.rtx_def* %51, %struct.rtx_def* %52), !dbg !5968
  %53 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5969
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5969
  %fld94 = bitcast %union.u* %u93 to [1 x %union.rtunion_def]*, !dbg !5969
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i64 0, i64 7, !dbg !5969
  %rt_rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**, !dbg !5969
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx96, align 8, !dbg !5969
  %55 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5970
  call void @verify_rtx_sharing(%struct.rtx_def* %54, %struct.rtx_def* %55), !dbg !5971
  br label %if.end97, !dbg !5972

if.end97:                                         ; preds = %if.then88, %lor.lhs.false84
  br label %for.inc98, !dbg !5962

for.inc98:                                        ; preds = %if.end97
  %56 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8, !dbg !5973
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !5973
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !5973
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 2, !dbg !5973
  %rt_rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**, !dbg !5973
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx102, align 8, !dbg !5973
  store %struct.rtx_def* %57, %struct.rtx_def** %p, align 8, !dbg !5974
  br label %for.cond70, !dbg !5975, !llvm.loop !5976

for.end103:                                       ; preds = %for.cond70
  ret void, !dbg !5978
}

; Function Attrs: noinline nounwind uwtable
define internal void @verify_rtx_sharing(%struct.rtx_def* %orig, %struct.rtx_def* %insn) #0 !dbg !5979 {
entry:
  %orig.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %format_ptr = alloca i8*, align 8
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.rtx_def* %orig, %struct.rtx_def** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig.addr, metadata !5980, metadata !DIExpression()), !dbg !5981
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5982, metadata !DIExpression()), !dbg !5983
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5984, metadata !DIExpression()), !dbg !5985
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !5986
  store %struct.rtx_def* %0, %struct.rtx_def** %x, align 8, !dbg !5985
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5987, metadata !DIExpression()), !dbg !5988
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5989, metadata !DIExpression()), !dbg !5990
  call void @llvm.dbg.declare(metadata i8** %format_ptr, metadata !5991, metadata !DIExpression()), !dbg !5992
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5993
  %cmp = icmp eq %struct.rtx_def* %1, null, !dbg !5995
  br i1 %cmp, label %if.then, label %if.end, !dbg !5996

if.then:                                          ; preds = %entry
  br label %return, !dbg !5997

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5998
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5998
  %bf.load = load i32, i32* %3, align 8, !dbg !5998
  %bf.clear = and i32 %bf.load, 65535, !dbg !5998
  store i32 %bf.clear, i32* %code, align 4, !dbg !5999
  %4 = load i32, i32* %code, align 4, !dbg !6000
  switch i32 %4, label %sw.default [
    i32 37, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 44, label %sw.bb
    i32 12, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 38, label %sw.bb
    i32 25, label %sw.bb1
    i32 35, label %sw.bb12
    i32 43, label %sw.bb16
  ], !dbg !6001

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %return, !dbg !6002

sw.bb1:                                           ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6004
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6004
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6004
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6004
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6004
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6004
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6004
  %bf.load2 = load i32, i32* %7, align 8, !dbg !6004
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6004
  %cmp4 = icmp eq i32 %bf.clear3, 37, !dbg !6004
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !6006

land.lhs.true:                                    ; preds = %sw.bb1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6007
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6007
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !6007
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !6007
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !6007
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !6007
  %call = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !6007
  %cmp9 = icmp ult i32 %call, 53, !dbg !6008
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6009

if.then10:                                        ; preds = %land.lhs.true
  br label %return, !dbg !6010

if.end11:                                         ; preds = %land.lhs.true, %sw.bb1
  br label %sw.epilog, !dbg !6011

sw.bb12:                                          ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !6012
  %call13 = call zeroext i8 @shared_const_p(%struct.rtx_def* %10), !dbg !6014
  %tobool = icmp ne i8 %call13, 0, !dbg !6014
  br i1 %tobool, label %if.then14, label %if.end15, !dbg !6015

if.then14:                                        ; preds = %sw.bb12
  br label %return, !dbg !6016

if.end15:                                         ; preds = %sw.bb12
  br label %sw.epilog, !dbg !6017

sw.bb16:                                          ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6018
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6018
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !6018
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !6018
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !6018
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !6018
  %call21 = call zeroext i8 @constant_address_p(%struct.rtx_def* %12), !dbg !6018
  %conv = zext i8 %call21 to i32, !dbg !6018
  %tobool22 = icmp ne i32 %conv, 0, !dbg !6018
  br i1 %tobool22, label %if.then26, label %lor.lhs.false, !dbg !6020

lor.lhs.false:                                    ; preds = %sw.bb16
  %13 = load i32, i32* @reload_completed, align 4, !dbg !6021
  %tobool23 = icmp ne i32 %13, 0, !dbg !6021
  br i1 %tobool23, label %if.then26, label %lor.lhs.false24, !dbg !6022

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %14 = load i32, i32* @reload_in_progress, align 4, !dbg !6023
  %tobool25 = icmp ne i32 %14, 0, !dbg !6023
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !6024

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %sw.bb16
  br label %return, !dbg !6025

if.end27:                                         ; preds = %lor.lhs.false24
  br label %sw.epilog, !dbg !6026

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !6027

sw.epilog:                                        ; preds = %sw.default, %if.end27, %if.end15, %if.end11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6028
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6028
  %bf.load28 = load i32, i32* %16, align 8, !dbg !6028
  %bf.lshr = lshr i32 %bf.load28, 29, !dbg !6028
  %bf.clear29 = and i32 %bf.lshr, 1, !dbg !6028
  %tobool30 = icmp ne i32 %bf.clear29, 0, !dbg !6028
  br i1 %tobool30, label %cond.true, label %cond.false, !dbg !6028

cond.true:                                        ; preds = %sw.epilog
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2467, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6028
  br label %cond.end, !dbg !6028

cond.false:                                       ; preds = %sw.epilog
  br label %cond.end, !dbg !6028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6028
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6029
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6029
  %bf.load31 = load i32, i32* %18, align 8, !dbg !6030
  %bf.clear32 = and i32 %bf.load31, -536870913, !dbg !6030
  %bf.set = or i32 %bf.clear32, 536870912, !dbg !6030
  store i32 %bf.set, i32* %18, align 8, !dbg !6030
  %19 = load i32, i32* %code, align 4, !dbg !6031
  %idxprom = sext i32 %19 to i64, !dbg !6031
  %arrayidx33 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !6031
  %20 = load i8*, i8** %arrayidx33, align 8, !dbg !6031
  store i8* %20, i8** %format_ptr, align 8, !dbg !6032
  store i32 0, i32* %i, align 4, !dbg !6033
  br label %for.cond, !dbg !6035

for.cond:                                         ; preds = %for.inc117, %cond.end
  %21 = load i32, i32* %i, align 4, !dbg !6036
  %22 = load i32, i32* %code, align 4, !dbg !6038
  %idxprom34 = sext i32 %22 to i64, !dbg !6038
  %arrayidx35 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom34, !dbg !6038
  %23 = load i8, i8* %arrayidx35, align 1, !dbg !6038
  %conv36 = zext i8 %23 to i32, !dbg !6038
  %cmp37 = icmp slt i32 %21, %conv36, !dbg !6039
  br i1 %cmp37, label %for.body, label %for.end119, !dbg !6040

for.body:                                         ; preds = %for.cond
  %24 = load i8*, i8** %format_ptr, align 8, !dbg !6041
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1, !dbg !6041
  store i8* %incdec.ptr, i8** %format_ptr, align 8, !dbg !6041
  %25 = load i8, i8* %24, align 1, !dbg !6043
  %conv39 = sext i8 %25 to i32, !dbg !6043
  switch i32 %conv39, label %sw.epilog116 [
    i32 101, label %sw.bb40
    i32 69, label %sw.bb46
  ], !dbg !6044

sw.bb40:                                          ; preds = %for.body
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6045
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6045
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6045
  %27 = load i32, i32* %i, align 4, !dbg !6045
  %idxprom43 = sext i32 %27 to i64, !dbg !6045
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 %idxprom43, !dbg !6045
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !6045
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !6045
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6047
  call void @verify_rtx_sharing(%struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !6048
  br label %sw.epilog116, !dbg !6049

sw.bb46:                                          ; preds = %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6050
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !6050
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !6050
  %31 = load i32, i32* %i, align 4, !dbg !6050
  %idxprom49 = sext i32 %31 to i64, !dbg !6050
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 %idxprom49, !dbg !6050
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtvec_def**, !dbg !6050
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6050
  %cmp51 = icmp ne %struct.rtvec_def* %32, null, !dbg !6052
  br i1 %cmp51, label %if.then53, label %if.end115, !dbg !6053

if.then53:                                        ; preds = %sw.bb46
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6054, metadata !DIExpression()), !dbg !6056
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6057, metadata !DIExpression()), !dbg !6058
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6059
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !6059
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !6059
  %34 = load i32, i32* %i, align 4, !dbg !6059
  %idxprom56 = sext i32 %34 to i64, !dbg !6059
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 %idxprom56, !dbg !6059
  %rt_rtvec58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtvec_def**, !dbg !6059
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec58, align 8, !dbg !6059
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 0, !dbg !6059
  %36 = load i32, i32* %num_elem, align 8, !dbg !6059
  store i32 %36, i32* %len, align 4, !dbg !6058
  store i32 0, i32* %j, align 4, !dbg !6060
  br label %for.cond59, !dbg !6062

for.cond59:                                       ; preds = %for.inc, %if.then53
  %37 = load i32, i32* %j, align 4, !dbg !6063
  %38 = load i32, i32* %len, align 4, !dbg !6065
  %cmp60 = icmp slt i32 %37, %38, !dbg !6066
  br i1 %cmp60, label %for.body62, label %for.end, !dbg !6067

for.body62:                                       ; preds = %for.cond59
  %39 = load i32, i32* %j, align 4, !dbg !6068
  %tobool63 = icmp ne i32 %39, 0, !dbg !6068
  br i1 %tobool63, label %land.lhs.true64, label %if.else, !dbg !6071

land.lhs.true64:                                  ; preds = %for.body62
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6072
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !6072
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !6072
  %41 = load i32, i32* %i, align 4, !dbg !6072
  %idxprom67 = sext i32 %41 to i64, !dbg !6072
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 %idxprom67, !dbg !6072
  %rt_rtvec69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtvec_def**, !dbg !6072
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec69, align 8, !dbg !6072
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %42, i32 0, i32 1, !dbg !6072
  %43 = load i32, i32* %j, align 4, !dbg !6072
  %idxprom70 = sext i32 %43 to i64, !dbg !6072
  %arrayidx71 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom70, !dbg !6072
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx71, align 8, !dbg !6072
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6072
  %bf.load72 = load i32, i32* %45, align 8, !dbg !6072
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !6072
  %cmp74 = icmp eq i32 %bf.clear73, 23, !dbg !6073
  br i1 %cmp74, label %land.lhs.true76, label %if.else, !dbg !6074

land.lhs.true76:                                  ; preds = %land.lhs.true64
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6075
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6075
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !6075
  %47 = load i32, i32* %i, align 4, !dbg !6075
  %idxprom79 = sext i32 %47 to i64, !dbg !6075
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 %idxprom79, !dbg !6075
  %rt_rtvec81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtvec_def**, !dbg !6075
  %48 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec81, align 8, !dbg !6075
  %elem82 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %48, i32 0, i32 1, !dbg !6075
  %49 = load i32, i32* %j, align 4, !dbg !6075
  %idxprom83 = sext i32 %49 to i64, !dbg !6075
  %arrayidx84 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem82, i64 0, i64 %idxprom83, !dbg !6075
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx84, align 8, !dbg !6075
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6075
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !6075
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 1, !dbg !6075
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !6075
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !6075
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !6075
  %bf.load89 = load i32, i32* %52, align 8, !dbg !6075
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !6075
  %cmp91 = icmp eq i32 %bf.clear90, 17, !dbg !6076
  br i1 %cmp91, label %if.then93, label %if.else, !dbg !6077

if.then93:                                        ; preds = %land.lhs.true76
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6078
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !6078
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !6078
  %54 = load i32, i32* %i, align 4, !dbg !6078
  %idxprom96 = sext i32 %54 to i64, !dbg !6078
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 %idxprom96, !dbg !6078
  %rt_rtvec98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtvec_def**, !dbg !6078
  %55 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec98, align 8, !dbg !6078
  %elem99 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %55, i32 0, i32 1, !dbg !6078
  %56 = load i32, i32* %j, align 4, !dbg !6078
  %idxprom100 = sext i32 %56 to i64, !dbg !6078
  %arrayidx101 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem99, i64 0, i64 %idxprom100, !dbg !6078
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx101, align 8, !dbg !6078
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !6078
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !6078
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 0, !dbg !6078
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !6078
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !6078
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6079
  call void @verify_rtx_sharing(%struct.rtx_def* %58, %struct.rtx_def* %59), !dbg !6080
  br label %if.end114, !dbg !6080

if.else:                                          ; preds = %land.lhs.true76, %land.lhs.true64, %for.body62
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6081
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !6081
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !6081
  %61 = load i32, i32* %i, align 4, !dbg !6081
  %idxprom108 = sext i32 %61 to i64, !dbg !6081
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 %idxprom108, !dbg !6081
  %rt_rtvec110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtvec_def**, !dbg !6081
  %62 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec110, align 8, !dbg !6081
  %elem111 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %62, i32 0, i32 1, !dbg !6081
  %63 = load i32, i32* %j, align 4, !dbg !6081
  %idxprom112 = sext i32 %63 to i64, !dbg !6081
  %arrayidx113 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem111, i64 0, i64 %idxprom112, !dbg !6081
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx113, align 8, !dbg !6081
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6082
  call void @verify_rtx_sharing(%struct.rtx_def* %64, %struct.rtx_def* %65), !dbg !6083
  br label %if.end114

if.end114:                                        ; preds = %if.else, %if.then93
  br label %for.inc, !dbg !6084

for.inc:                                          ; preds = %if.end114
  %66 = load i32, i32* %j, align 4, !dbg !6085
  %inc = add nsw i32 %66, 1, !dbg !6085
  store i32 %inc, i32* %j, align 4, !dbg !6085
  br label %for.cond59, !dbg !6086, !llvm.loop !6087

for.end:                                          ; preds = %for.cond59
  br label %if.end115, !dbg !6089

if.end115:                                        ; preds = %for.end, %sw.bb46
  br label %sw.epilog116, !dbg !6090

sw.epilog116:                                     ; preds = %for.body, %if.end115, %sw.bb40
  br label %for.inc117, !dbg !6091

for.inc117:                                       ; preds = %sw.epilog116
  %67 = load i32, i32* %i, align 4, !dbg !6092
  %inc118 = add nsw i32 %67, 1, !dbg !6092
  store i32 %inc118, i32* %i, align 4, !dbg !6092
  br label %for.cond, !dbg !6093, !llvm.loop !6094

for.end119:                                       ; preds = %for.cond
  br label %return, !dbg !6096

return:                                           ; preds = %for.end119, %if.then26, %if.then14, %if.then10, %sw.bb, %if.then
  ret void, !dbg !6097
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unshare_all_rtl_in_chain(%struct.rtx_def* %insn) #0 !dbg !6098 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6099, metadata !DIExpression()), !dbg !6100
  br label %for.cond, !dbg !6101

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6102
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6105
  br i1 %tobool, label %for.body, label %for.end, !dbg !6105

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6106
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6106
  %bf.load = load i32, i32* %2, align 8, !dbg !6106
  %bf.clear = and i32 %bf.load, 65535, !dbg !6106
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !6106
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6106

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6106
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6106
  %bf.load1 = load i32, i32* %4, align 8, !dbg !6106
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6106
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !6106
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !6106

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6106
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6106
  %bf.load5 = load i32, i32* %6, align 8, !dbg !6106
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !6106
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !6106
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !6106

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6106
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6106
  %bf.load9 = load i32, i32* %8, align 8, !dbg !6106
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6106
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !6106
  br i1 %cmp11, label %if.then, label %if.end, !dbg !6108

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6109
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6109
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6109
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6109
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6109
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6109
  %call = call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %10), !dbg !6111
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6112
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6112
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6112
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !6112
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !6112
  store %struct.rtx_def* %call, %struct.rtx_def** %rt_rtx15, align 8, !dbg !6113
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6114
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6114
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !6114
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 7, !dbg !6114
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !6114
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !6114
  %call20 = call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %13), !dbg !6115
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6116
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6116
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !6116
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 7, !dbg !6116
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !6116
  store %struct.rtx_def* %call20, %struct.rtx_def** %rt_rtx24, align 8, !dbg !6117
  br label %if.end, !dbg !6118

if.end:                                           ; preds = %if.then, %lor.lhs.false8
  br label %for.inc, !dbg !6106

for.inc:                                          ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6119
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6119
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6119
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 2, !dbg !6119
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !6119
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !6119
  store %struct.rtx_def* %16, %struct.rtx_def** %insn.addr, align 8, !dbg !6120
  br label %for.cond, !dbg !6121, !llvm.loop !6122

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6124
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %orig) #0 !dbg !6125 {
entry:
  %orig.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig, %struct.rtx_def** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig.addr, metadata !6126, metadata !DIExpression()), !dbg !6127
  call void @copy_rtx_if_shared_1(%struct.rtx_def** %orig.addr), !dbg !6128
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !6129
  ret %struct.rtx_def* %0, !dbg !6130
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_rtx_if_shared_1(%struct.rtx_def** %orig1) #0 !dbg !6131 {
entry:
  %orig1.addr = alloca %struct.rtx_def**, align 8
  %x = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %last_ptr = alloca %struct.rtx_def**, align 8
  %format_ptr = alloca i8*, align 8
  %copied = alloca i32, align 4
  %length = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.rtx_def** %orig1, %struct.rtx_def*** %orig1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %orig1.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6136, metadata !DIExpression()), !dbg !6137
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6140, metadata !DIExpression()), !dbg !6141
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %last_ptr, metadata !6142, metadata !DIExpression()), !dbg !6143
  call void @llvm.dbg.declare(metadata i8** %format_ptr, metadata !6144, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.declare(metadata i32* %copied, metadata !6146, metadata !DIExpression()), !dbg !6147
  store i32 0, i32* %copied, align 4, !dbg !6147
  call void @llvm.dbg.declare(metadata i32* %length, metadata !6148, metadata !DIExpression()), !dbg !6149
  br label %repeat, !dbg !6150

repeat:                                           ; preds = %if.then91, %entry
  call void @llvm.dbg.label(metadata !6151), !dbg !6152
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %orig1.addr, align 8, !dbg !6153
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !6154
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !6155
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6156
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !6158
  br i1 %cmp, label %if.then, label %if.end, !dbg !6159

if.then:                                          ; preds = %repeat
  br label %return, !dbg !6160

if.end:                                           ; preds = %repeat
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6161
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6161
  %bf.load = load i32, i32* %4, align 8, !dbg !6161
  %bf.clear = and i32 %bf.load, 65535, !dbg !6161
  store i32 %bf.clear, i32* %code, align 4, !dbg !6162
  %5 = load i32, i32* %code, align 4, !dbg !6163
  switch i32 %5, label %sw.default [
    i32 37, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 44, label %sw.bb
    i32 12, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 38, label %sw.bb
    i32 25, label %sw.bb1
    i32 35, label %sw.bb12
    i32 7, label %sw.bb16
    i32 8, label %sw.bb16
    i32 9, label %sw.bb16
    i32 10, label %sw.bb16
    i32 13, label %sw.bb16
    i32 11, label %sw.bb16
  ], !dbg !6164

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %return, !dbg !6165

sw.bb1:                                           ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6167
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6167
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6167
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6167
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6167
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6167
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6167
  %bf.load2 = load i32, i32* %8, align 8, !dbg !6167
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6167
  %cmp4 = icmp eq i32 %bf.clear3, 37, !dbg !6167
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !6169

land.lhs.true:                                    ; preds = %sw.bb1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6170
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6170
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !6170
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !6170
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !6170
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !6170
  %call = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !6170
  %cmp9 = icmp ult i32 %call, 53, !dbg !6171
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6172

if.then10:                                        ; preds = %land.lhs.true
  br label %return, !dbg !6173

if.end11:                                         ; preds = %land.lhs.true, %sw.bb1
  br label %sw.epilog, !dbg !6174

sw.bb12:                                          ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6175
  %call13 = call zeroext i8 @shared_const_p(%struct.rtx_def* %11), !dbg !6177
  %tobool = icmp ne i8 %call13, 0, !dbg !6177
  br i1 %tobool, label %if.then14, label %if.end15, !dbg !6178

if.then14:                                        ; preds = %sw.bb12
  br label %return, !dbg !6179

if.end15:                                         ; preds = %sw.bb12
  br label %sw.epilog, !dbg !6180

sw.bb16:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %return, !dbg !6181

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !6182

sw.epilog:                                        ; preds = %sw.default, %if.end15, %if.end11
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6183
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6183
  %bf.load17 = load i32, i32* %13, align 8, !dbg !6183
  %bf.lshr = lshr i32 %bf.load17, 29, !dbg !6183
  %bf.clear18 = and i32 %bf.lshr, 1, !dbg !6183
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !6183
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !6185

if.then20:                                        ; preds = %sw.epilog
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6186
  %call21 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %14), !dbg !6186
  store %struct.rtx_def* %call21, %struct.rtx_def** %x, align 8, !dbg !6188
  store i32 1, i32* %copied, align 4, !dbg !6189
  br label %if.end22, !dbg !6190

if.end22:                                         ; preds = %if.then20, %sw.epilog
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6191
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6191
  %bf.load23 = load i32, i32* %16, align 8, !dbg !6192
  %bf.clear24 = and i32 %bf.load23, -536870913, !dbg !6192
  %bf.set = or i32 %bf.clear24, 536870912, !dbg !6192
  store i32 %bf.set, i32* %16, align 8, !dbg !6192
  %17 = load i32, i32* %code, align 4, !dbg !6193
  %idxprom = sext i32 %17 to i64, !dbg !6193
  %arrayidx25 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !6193
  %18 = load i8*, i8** %arrayidx25, align 8, !dbg !6193
  store i8* %18, i8** %format_ptr, align 8, !dbg !6194
  %19 = load i32, i32* %code, align 4, !dbg !6195
  %idxprom26 = sext i32 %19 to i64, !dbg !6195
  %arrayidx27 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom26, !dbg !6195
  %20 = load i8, i8* %arrayidx27, align 1, !dbg !6195
  %conv = zext i8 %20 to i32, !dbg !6195
  store i32 %conv, i32* %length, align 4, !dbg !6196
  store %struct.rtx_def** null, %struct.rtx_def*** %last_ptr, align 8, !dbg !6197
  store i32 0, i32* %i, align 4, !dbg !6198
  br label %for.cond, !dbg !6200

for.cond:                                         ; preds = %for.inc87, %if.end22
  %21 = load i32, i32* %i, align 4, !dbg !6201
  %22 = load i32, i32* %length, align 4, !dbg !6203
  %cmp28 = icmp slt i32 %21, %22, !dbg !6204
  br i1 %cmp28, label %for.body, label %for.end89, !dbg !6205

for.body:                                         ; preds = %for.cond
  %23 = load i8*, i8** %format_ptr, align 8, !dbg !6206
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !6206
  store i8* %incdec.ptr, i8** %format_ptr, align 8, !dbg !6206
  %24 = load i8, i8* %23, align 1, !dbg !6208
  %conv30 = sext i8 %24 to i32, !dbg !6208
  switch i32 %conv30, label %sw.epilog86 [
    i32 101, label %sw.bb31
    i32 69, label %sw.bb40
  ], !dbg !6209

sw.bb31:                                          ; preds = %for.body
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6210
  %tobool32 = icmp ne %struct.rtx_def** %25, null, !dbg !6210
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !6213

if.then33:                                        ; preds = %sw.bb31
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6214
  call void @copy_rtx_if_shared_1(%struct.rtx_def** %26), !dbg !6215
  br label %if.end34, !dbg !6215

if.end34:                                         ; preds = %if.then33, %sw.bb31
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6216
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6216
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !6216
  %28 = load i32, i32* %i, align 4, !dbg !6216
  %idxprom37 = sext i32 %28 to i64, !dbg !6216
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 %idxprom37, !dbg !6216
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !6216
  store %struct.rtx_def** %rt_rtx39, %struct.rtx_def*** %last_ptr, align 8, !dbg !6217
  br label %sw.epilog86, !dbg !6218

sw.bb40:                                          ; preds = %for.body
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6219
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6219
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6219
  %30 = load i32, i32* %i, align 4, !dbg !6219
  %idxprom43 = sext i32 %30 to i64, !dbg !6219
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 %idxprom43, !dbg !6219
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtvec_def**, !dbg !6219
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6219
  %cmp45 = icmp ne %struct.rtvec_def* %31, null, !dbg !6221
  br i1 %cmp45, label %if.then47, label %if.end85, !dbg !6222

if.then47:                                        ; preds = %sw.bb40
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6223, metadata !DIExpression()), !dbg !6225
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6226, metadata !DIExpression()), !dbg !6227
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6228
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6228
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !6228
  %33 = load i32, i32* %i, align 4, !dbg !6228
  %idxprom50 = sext i32 %33 to i64, !dbg !6228
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 %idxprom50, !dbg !6228
  %rt_rtvec52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtvec_def**, !dbg !6228
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec52, align 8, !dbg !6228
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 0, !dbg !6228
  %35 = load i32, i32* %num_elem, align 8, !dbg !6228
  store i32 %35, i32* %len, align 4, !dbg !6227
  %36 = load i32, i32* %copied, align 4, !dbg !6229
  %tobool53 = icmp ne i32 %36, 0, !dbg !6229
  br i1 %tobool53, label %land.lhs.true54, label %if.end69, !dbg !6231

land.lhs.true54:                                  ; preds = %if.then47
  %37 = load i32, i32* %len, align 4, !dbg !6232
  %cmp55 = icmp sgt i32 %37, 0, !dbg !6233
  br i1 %cmp55, label %if.then57, label %if.end69, !dbg !6234

if.then57:                                        ; preds = %land.lhs.true54
  %38 = load i32, i32* %len, align 4, !dbg !6235
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6236
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6236
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !6236
  %40 = load i32, i32* %i, align 4, !dbg !6236
  %idxprom60 = sext i32 %40 to i64, !dbg !6236
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 %idxprom60, !dbg !6236
  %rt_rtvec62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtvec_def**, !dbg !6236
  %41 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec62, align 8, !dbg !6236
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %41, i32 0, i32 1, !dbg !6237
  %arraydecay = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !6236
  %call63 = call %struct.rtvec_def* @gen_rtvec_v(i32 %38, %struct.rtx_def** %arraydecay), !dbg !6238
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6239
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6239
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !6239
  %43 = load i32, i32* %i, align 4, !dbg !6239
  %idxprom66 = sext i32 %43 to i64, !dbg !6239
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 %idxprom66, !dbg !6239
  %rt_rtvec68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtvec_def**, !dbg !6239
  store %struct.rtvec_def* %call63, %struct.rtvec_def** %rt_rtvec68, align 8, !dbg !6240
  br label %if.end69, !dbg !6239

if.end69:                                         ; preds = %if.then57, %land.lhs.true54, %if.then47
  store i32 0, i32* %j, align 4, !dbg !6241
  br label %for.cond70, !dbg !6243

for.cond70:                                       ; preds = %for.inc, %if.end69
  %44 = load i32, i32* %j, align 4, !dbg !6244
  %45 = load i32, i32* %len, align 4, !dbg !6246
  %cmp71 = icmp slt i32 %44, %45, !dbg !6247
  br i1 %cmp71, label %for.body73, label %for.end, !dbg !6248

for.body73:                                       ; preds = %for.cond70
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6249
  %tobool74 = icmp ne %struct.rtx_def** %46, null, !dbg !6249
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !6252

if.then75:                                        ; preds = %for.body73
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6253
  call void @copy_rtx_if_shared_1(%struct.rtx_def** %47), !dbg !6254
  br label %if.end76, !dbg !6254

if.end76:                                         ; preds = %if.then75, %for.body73
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6255
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6255
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !6255
  %49 = load i32, i32* %i, align 4, !dbg !6255
  %idxprom79 = sext i32 %49 to i64, !dbg !6255
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 %idxprom79, !dbg !6255
  %rt_rtvec81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtvec_def**, !dbg !6255
  %50 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec81, align 8, !dbg !6255
  %elem82 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %50, i32 0, i32 1, !dbg !6255
  %51 = load i32, i32* %j, align 4, !dbg !6255
  %idxprom83 = sext i32 %51 to i64, !dbg !6255
  %arrayidx84 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem82, i64 0, i64 %idxprom83, !dbg !6255
  store %struct.rtx_def** %arrayidx84, %struct.rtx_def*** %last_ptr, align 8, !dbg !6256
  br label %for.inc, !dbg !6257

for.inc:                                          ; preds = %if.end76
  %52 = load i32, i32* %j, align 4, !dbg !6258
  %inc = add nsw i32 %52, 1, !dbg !6258
  store i32 %inc, i32* %j, align 4, !dbg !6258
  br label %for.cond70, !dbg !6259, !llvm.loop !6260

for.end:                                          ; preds = %for.cond70
  br label %if.end85, !dbg !6262

if.end85:                                         ; preds = %for.end, %sw.bb40
  br label %sw.epilog86, !dbg !6263

sw.epilog86:                                      ; preds = %for.body, %if.end85, %if.end34
  br label %for.inc87, !dbg !6264

for.inc87:                                        ; preds = %sw.epilog86
  %53 = load i32, i32* %i, align 4, !dbg !6265
  %inc88 = add nsw i32 %53, 1, !dbg !6265
  store i32 %inc88, i32* %i, align 4, !dbg !6265
  br label %for.cond, !dbg !6266, !llvm.loop !6267

for.end89:                                        ; preds = %for.cond
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6269
  %55 = load %struct.rtx_def**, %struct.rtx_def*** %orig1.addr, align 8, !dbg !6270
  store %struct.rtx_def* %54, %struct.rtx_def** %55, align 8, !dbg !6271
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6272
  %tobool90 = icmp ne %struct.rtx_def** %56, null, !dbg !6272
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !6274

if.then91:                                        ; preds = %for.end89
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %last_ptr, align 8, !dbg !6275
  store %struct.rtx_def** %57, %struct.rtx_def*** %orig1.addr, align 8, !dbg !6277
  br label %repeat, !dbg !6278

if.end92:                                         ; preds = %for.end89
  br label %return, !dbg !6279

return:                                           ; preds = %if.end92, %sw.bb16, %if.then14, %if.then10, %sw.bb, %if.then
  ret void, !dbg !6280
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @make_safe_from(%struct.rtx_def* %x, %struct.rtx_def* %other) #0 !dbg !6281 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %other.addr = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6282, metadata !DIExpression()), !dbg !6283
  store %struct.rtx_def* %other, %struct.rtx_def** %other.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %other.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  br label %while.body, !dbg !6286

while.body:                                       ; preds = %entry, %sw.epilog
  %0 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6287
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6287
  %bf.load = load i32, i32* %1, align 8, !dbg !6287
  %bf.clear = and i32 %bf.load, 65535, !dbg !6287
  switch i32 %bf.clear, label %sw.default [
    i32 39, label %sw.bb
    i32 40, label %sw.bb1
    i32 98, label %sw.bb1
    i32 99, label %sw.bb1
  ], !dbg !6288

sw.bb:                                            ; preds = %while.body
  %2 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6289
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6289
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6289
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6289
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6289
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6289
  store %struct.rtx_def* %3, %struct.rtx_def** %other.addr, align 8, !dbg !6291
  br label %sw.epilog, !dbg !6292

sw.bb1:                                           ; preds = %while.body, %while.body, %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6293
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6293
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6293
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !6293
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !6293
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !6293
  store %struct.rtx_def* %5, %struct.rtx_def** %other.addr, align 8, !dbg !6294
  br label %sw.epilog, !dbg !6295

sw.default:                                       ; preds = %while.body
  br label %done, !dbg !6296

sw.epilog:                                        ; preds = %sw.bb1, %sw.bb
  br label %while.body, !dbg !6286, !llvm.loop !6297

done:                                             ; preds = %sw.default
  call void @llvm.dbg.label(metadata !6299), !dbg !6300
  %6 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6301
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6301
  %bf.load6 = load i32, i32* %7, align 8, !dbg !6301
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6301
  %cmp = icmp eq i32 %bf.clear7, 43, !dbg !6301
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6303

land.lhs.true:                                    ; preds = %done
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6304
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6304
  %bf.load8 = load i32, i32* %9, align 8, !dbg !6304
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !6304
  %idxprom = sext i32 %bf.clear9 to i64, !dbg !6304
  %arrayidx10 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6304
  %10 = load i32, i32* %arrayidx10, align 4, !dbg !6304
  %cmp11 = icmp eq i32 %10, 9, !dbg !6304
  br i1 %cmp11, label %lor.lhs.false, label %land.lhs.true12, !dbg !6305

land.lhs.true12:                                  ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6306
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6306
  %bf.load13 = load i32, i32* %12, align 8, !dbg !6306
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !6306
  %cmp15 = icmp eq i32 %bf.clear14, 37, !dbg !6306
  br i1 %cmp15, label %lor.lhs.false, label %land.lhs.true16, !dbg !6307

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6308
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6308
  %bf.load17 = load i32, i32* %14, align 8, !dbg !6308
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !6308
  %cmp19 = icmp ne i32 %bf.clear18, 39, !dbg !6309
  br i1 %cmp19, label %if.then, label %lor.lhs.false, !dbg !6310

lor.lhs.false:                                    ; preds = %land.lhs.true16, %land.lhs.true12, %land.lhs.true, %done
  %15 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6311
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6311
  %bf.load20 = load i32, i32* %16, align 8, !dbg !6311
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !6311
  %cmp22 = icmp eq i32 %bf.clear21, 37, !dbg !6311
  br i1 %cmp22, label %land.lhs.true23, label %if.end, !dbg !6312

land.lhs.true23:                                  ; preds = %lor.lhs.false
  %17 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6313
  %call = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !6313
  %cmp24 = icmp ult i32 %call, 53, !dbg !6314
  br i1 %cmp24, label %if.then, label %lor.lhs.false25, !dbg !6315

lor.lhs.false25:                                  ; preds = %land.lhs.true23
  %18 = load %struct.rtx_def*, %struct.rtx_def** %other.addr, align 8, !dbg !6316
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6317
  %call26 = call i32 @reg_mentioned_p(%struct.rtx_def* %18, %struct.rtx_def* %19), !dbg !6318
  %tobool = icmp ne i32 %call26, 0, !dbg !6318
  br i1 %tobool, label %if.then, label %if.end, !dbg !6319

if.then:                                          ; preds = %lor.lhs.false25, %land.lhs.true23, %land.lhs.true16
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !6320, metadata !DIExpression()), !dbg !6322
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6323
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6323
  %bf.load27 = load i32, i32* %21, align 8, !dbg !6323
  %bf.lshr = lshr i32 %bf.load27, 16, !dbg !6323
  %bf.clear28 = and i32 %bf.lshr, 255, !dbg !6323
  %call29 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear28), !dbg !6324
  store %struct.rtx_def* %call29, %struct.rtx_def** %temp, align 8, !dbg !6322
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6325
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6326
  %call30 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %22, %struct.rtx_def* %23), !dbg !6327
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6328
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !6329
  br label %return, !dbg !6329

if.end:                                           ; preds = %lor.lhs.false25, %lor.lhs.false
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6330
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !6331
  br label %return, !dbg !6331

return:                                           ; preds = %if.end, %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6332
  ret %struct.rtx_def* %26, !dbg !6332
}

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_first_insn(%struct.rtx_def* %insn) #0 !dbg !6333 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6334, metadata !DIExpression()), !dbg !6335
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6336
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6336
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6336
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6336
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6336
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6336
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !6336
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6336

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2912, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6336
  br label %cond.end, !dbg !6336

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6336

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6336
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6337
  store %struct.rtx_def* %2, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !6338
  ret void, !dbg !6339
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_last_insn() #0 !dbg !6340 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !6341
  ret %struct.rtx_def* %0, !dbg !6342
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_last_insn(%struct.rtx_def* %insn) #0 !dbg !6343 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6344, metadata !DIExpression()), !dbg !6345
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6346
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6346
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6346
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6346
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6346
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6346
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !6346
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6346

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2929, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6346
  br label %cond.end, !dbg !6346

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6346

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6346
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6347
  store %struct.rtx_def* %2, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !6348
  ret void, !dbg !6349
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_last_insn_anywhere() #0 !dbg !6350 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %stack = alloca %struct.sequence_stack*, align 8
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !6351, metadata !DIExpression()), !dbg !6352
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !6353
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6353
  br i1 %tobool, label %if.then, label %if.end, !dbg !6355

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !6356
  store %struct.rtx_def* %1, %struct.rtx_def** %retval, align 8, !dbg !6357
  br label %return, !dbg !6357

if.end:                                           ; preds = %entry
  %2 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !6358
  store %struct.sequence_stack* %2, %struct.sequence_stack** %stack, align 8, !dbg !6360
  br label %for.cond, !dbg !6361

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !6362
  %tobool1 = icmp ne %struct.sequence_stack* %3, null, !dbg !6364
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6364

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !6365
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %4, i32 0, i32 1, !dbg !6367
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6367
  %cmp = icmp ne %struct.rtx_def* %5, null, !dbg !6368
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !6369

if.then2:                                         ; preds = %for.body
  %6 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !6370
  %last3 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %6, i32 0, i32 1, !dbg !6371
  %7 = load %struct.rtx_def*, %struct.rtx_def** %last3, align 8, !dbg !6371
  store %struct.rtx_def* %7, %struct.rtx_def** %retval, align 8, !dbg !6372
  br label %return, !dbg !6372

if.end4:                                          ; preds = %for.body
  br label %for.inc, !dbg !6373

for.inc:                                          ; preds = %if.end4
  %8 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !6374
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %8, i32 0, i32 2, !dbg !6375
  %9 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !6375
  store %struct.sequence_stack* %9, %struct.sequence_stack** %stack, align 8, !dbg !6376
  br label %for.cond, !dbg !6377, !llvm.loop !6378

for.end:                                          ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6380
  br label %return, !dbg !6380

return:                                           ; preds = %for.end, %if.then2, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6381
  ret %struct.rtx_def* %10, !dbg !6381
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_first_nonnote_insn() #0 !dbg !6382 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6383, metadata !DIExpression()), !dbg !6384
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !6385
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8, !dbg !6384
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6386
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !6386
  br i1 %tobool, label %if.then, label %if.end23, !dbg !6388

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6389
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6389
  %bf.load = load i32, i32* %3, align 8, !dbg !6389
  %bf.clear = and i32 %bf.load, 65535, !dbg !6389
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !6389
  br i1 %cmp, label %if.then1, label %if.else, !dbg !6392

if.then1:                                         ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6393
  %call = call %struct.rtx_def* @next_insn(%struct.rtx_def* %4), !dbg !6395
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !6396
  br label %for.cond, !dbg !6397

for.cond:                                         ; preds = %for.inc, %if.then1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6398
  %tobool2 = icmp ne %struct.rtx_def* %5, null, !dbg !6398
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !6400

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6401
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6401
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6401
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6401
  %cmp5 = icmp eq i32 %bf.clear4, 13, !dbg !6401
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ], !dbg !6402
  br i1 %8, label %for.body, label %for.end, !dbg !6403

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !6404

for.inc:                                          ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6405
  %call6 = call %struct.rtx_def* @next_insn(%struct.rtx_def* %9), !dbg !6406
  store %struct.rtx_def* %call6, %struct.rtx_def** %insn, align 8, !dbg !6407
  br label %for.cond, !dbg !6408, !llvm.loop !6409

for.end:                                          ; preds = %land.end
  br label %if.end22, !dbg !6410

if.else:                                          ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6411
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6411
  %bf.load7 = load i32, i32* %11, align 8, !dbg !6411
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6411
  %cmp9 = icmp eq i32 %bf.clear8, 8, !dbg !6411
  br i1 %cmp9, label %land.lhs.true, label %if.end, !dbg !6414

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6415
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6415
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6415
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6415
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6415
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6415
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6415
  %bf.load10 = load i32, i32* %14, align 8, !dbg !6415
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6415
  %cmp12 = icmp eq i32 %bf.clear11, 5, !dbg !6416
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !6417

if.then13:                                        ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6418
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6418
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !6418
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 5, !dbg !6418
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !6418
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !6418
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6418
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6418
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !6418
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**, !dbg !6418
  %17 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6418
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %17, i32 0, i32 1, !dbg !6418
  %arrayidx21 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !6418
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8, !dbg !6418
  store %struct.rtx_def* %18, %struct.rtx_def** %insn, align 8, !dbg !6419
  br label %if.end, !dbg !6420

if.end:                                           ; preds = %if.then13, %land.lhs.true, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end, %for.end
  br label %if.end23, !dbg !6421

if.end23:                                         ; preds = %if.end22, %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6422
  ret %struct.rtx_def* %19, !dbg !6423
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_insn(%struct.rtx_def* %insn) #0 !dbg !6424 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6425, metadata !DIExpression()), !dbg !6426
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6427
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6427
  br i1 %tobool, label %if.then, label %if.end19, !dbg !6429

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6430
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6430
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6430
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6430
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6430
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6430
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6432
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6433
  %tobool1 = icmp ne %struct.rtx_def* %3, null, !dbg !6433
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !6435

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6436
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6436
  %bf.load = load i32, i32* %5, align 8, !dbg !6436
  %bf.clear = and i32 %bf.load, 65535, !dbg !6436
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !6436
  br i1 %cmp, label %land.lhs.true2, label %if.end, !dbg !6437

land.lhs.true2:                                   ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6438
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6438
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !6438
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 5, !dbg !6438
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !6438
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !6438
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6438
  %bf.load7 = load i32, i32* %8, align 8, !dbg !6438
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6438
  %cmp9 = icmp eq i32 %bf.clear8, 5, !dbg !6439
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !6440

if.then10:                                        ; preds = %land.lhs.true2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6441
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6441
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !6441
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 5, !dbg !6441
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !6441
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !6441
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6441
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !6441
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !6441
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtvec_def**, !dbg !6441
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6441
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %11, i32 0, i32 1, !dbg !6441
  %arrayidx18 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !6441
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8, !dbg !6441
  store %struct.rtx_def* %12, %struct.rtx_def** %insn.addr, align 8, !dbg !6442
  br label %if.end, !dbg !6443

if.end:                                           ; preds = %if.then10, %land.lhs.true2, %land.lhs.true, %if.then
  br label %if.end19, !dbg !6444

if.end19:                                         ; preds = %if.end, %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6445
  ret %struct.rtx_def* %13, !dbg !6446
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_last_nonnote_insn() #0 !dbg !6447 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6448, metadata !DIExpression()), !dbg !6449
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !6450
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8, !dbg !6449
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6451
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !6451
  br i1 %tobool, label %if.then, label %if.end31, !dbg !6453

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6454
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6454
  %bf.load = load i32, i32* %3, align 8, !dbg !6454
  %bf.clear = and i32 %bf.load, 65535, !dbg !6454
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !6454
  br i1 %cmp, label %if.then1, label %if.else, !dbg !6457

if.then1:                                         ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6458
  %call = call %struct.rtx_def* @previous_insn(%struct.rtx_def* %4), !dbg !6460
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !6461
  br label %for.cond, !dbg !6462

for.cond:                                         ; preds = %for.inc, %if.then1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6463
  %tobool2 = icmp ne %struct.rtx_def* %5, null, !dbg !6463
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !6465

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6466
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6466
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6466
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6466
  %cmp5 = icmp eq i32 %bf.clear4, 13, !dbg !6466
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ], !dbg !6467
  br i1 %8, label %for.body, label %for.end, !dbg !6468

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !6469

for.inc:                                          ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6470
  %call6 = call %struct.rtx_def* @previous_insn(%struct.rtx_def* %9), !dbg !6471
  store %struct.rtx_def* %call6, %struct.rtx_def** %insn, align 8, !dbg !6472
  br label %for.cond, !dbg !6473, !llvm.loop !6474

for.end:                                          ; preds = %land.end
  br label %if.end30, !dbg !6475

if.else:                                          ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6476
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6476
  %bf.load7 = load i32, i32* %11, align 8, !dbg !6476
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6476
  %cmp9 = icmp eq i32 %bf.clear8, 8, !dbg !6476
  br i1 %cmp9, label %land.lhs.true, label %if.end, !dbg !6479

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6480
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6480
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6480
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6480
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6480
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6480
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6480
  %bf.load10 = load i32, i32* %14, align 8, !dbg !6480
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6480
  %cmp12 = icmp eq i32 %bf.clear11, 5, !dbg !6481
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !6482

if.then13:                                        ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6483
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6483
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !6483
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 5, !dbg !6483
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !6483
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !6483
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6483
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6483
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !6483
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**, !dbg !6483
  %17 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6483
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %17, i32 0, i32 1, !dbg !6483
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6483
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6483
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !6483
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 5, !dbg !6483
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !6483
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !6483
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6483
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6483
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !6483
  %rt_rtvec28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**, !dbg !6483
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec28, align 8, !dbg !6483
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 0, !dbg !6483
  %21 = load i32, i32* %num_elem, align 8, !dbg !6483
  %sub = sub nsw i32 %21, 1, !dbg !6483
  %idxprom = sext i32 %sub to i64, !dbg !6483
  %arrayidx29 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !6483
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8, !dbg !6483
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !6484
  br label %if.end, !dbg !6485

if.end:                                           ; preds = %if.then13, %land.lhs.true, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end, %for.end
  br label %if.end31, !dbg !6486

if.end31:                                         ; preds = %if.end30, %entry
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6487
  ret %struct.rtx_def* %23, !dbg !6488
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @previous_insn(%struct.rtx_def* %insn) #0 !dbg !6489 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6490, metadata !DIExpression()), !dbg !6491
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6492
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6492
  br i1 %tobool, label %if.then, label %if.end27, !dbg !6494

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6495
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6495
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6495
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6495
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6495
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6495
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6497
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6498
  %tobool1 = icmp ne %struct.rtx_def* %3, null, !dbg !6498
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !6500

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6501
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6501
  %bf.load = load i32, i32* %5, align 8, !dbg !6501
  %bf.clear = and i32 %bf.load, 65535, !dbg !6501
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !6501
  br i1 %cmp, label %land.lhs.true2, label %if.end, !dbg !6502

land.lhs.true2:                                   ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6503
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6503
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !6503
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 5, !dbg !6503
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !6503
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !6503
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6503
  %bf.load7 = load i32, i32* %8, align 8, !dbg !6503
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6503
  %cmp9 = icmp eq i32 %bf.clear8, 5, !dbg !6504
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !6505

if.then10:                                        ; preds = %land.lhs.true2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6506
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6506
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !6506
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 5, !dbg !6506
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !6506
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !6506
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6506
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !6506
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !6506
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtvec_def**, !dbg !6506
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6506
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %11, i32 0, i32 1, !dbg !6506
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6506
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6506
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6506
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 5, !dbg !6506
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6506
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !6506
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6506
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !6506
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 0, !dbg !6506
  %rt_rtvec25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtvec_def**, !dbg !6506
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec25, align 8, !dbg !6506
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0, !dbg !6506
  %15 = load i32, i32* %num_elem, align 8, !dbg !6506
  %sub = sub nsw i32 %15, 1, !dbg !6506
  %idxprom = sext i32 %sub to i64, !dbg !6506
  %arrayidx26 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !6506
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8, !dbg !6506
  store %struct.rtx_def* %16, %struct.rtx_def** %insn.addr, align 8, !dbg !6507
  br label %if.end, !dbg !6508

if.end:                                           ; preds = %if.then10, %land.lhs.true2, %land.lhs.true, %if.then
  br label %if.end27, !dbg !6509

if.end27:                                         ; preds = %if.end, %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6510
  ret %struct.rtx_def* %17, !dbg !6511
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_max_uid() #0 !dbg !6512 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !6513
  ret i32 %0, !dbg !6514
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_max_insn_count() #0 !dbg !6515 {
entry:
  %n = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6516, metadata !DIExpression()), !dbg !6517
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !6518
  store i32 %0, i32* %n, align 4, !dbg !6517
  %1 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !6519
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6521
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 117, !dbg !6521
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !6521
  %3 = load i32, i32* %value, align 8, !dbg !6521
  %cmp = icmp sgt i32 %1, %3, !dbg !6522
  br i1 %cmp, label %if.then, label %if.else, !dbg !6523

if.then:                                          ; preds = %entry
  %4 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !6524
  %5 = load i32, i32* %n, align 4, !dbg !6525
  %sub = sub nsw i32 %5, %4, !dbg !6525
  store i32 %sub, i32* %n, align 4, !dbg !6525
  br label %if.end, !dbg !6526

if.else:                                          ; preds = %entry
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6527
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 117, !dbg !6527
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !6527
  %7 = load i32, i32* %value2, align 8, !dbg !6527
  %8 = load i32, i32* %n, align 4, !dbg !6528
  %sub3 = sub nsw i32 %8, %7, !dbg !6528
  store i32 %sub3, i32* %n, align 4, !dbg !6528
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %n, align 4, !dbg !6529
  ret i32 %9, !dbg !6530
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %insn) #0 !dbg !6531 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6532, metadata !DIExpression()), !dbg !6533
  br label %while.cond, !dbg !6534

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6535
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6534
  br i1 %tobool, label %while.body, label %while.end, !dbg !6534

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6536
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6536
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6536
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6536
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6536
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6536
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6538
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6539
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6541
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6542

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6543
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6543
  %bf.load = load i32, i32* %5, align 8, !dbg !6543
  %bf.clear = and i32 %bf.load, 65535, !dbg !6543
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !6543
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6544

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6545

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6534, !llvm.loop !6546

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6548
  ret %struct.rtx_def* %6, !dbg !6549
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_nonnote_insn_bb(%struct.rtx_def* %insn) #0 !dbg !6550 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6551, metadata !DIExpression()), !dbg !6552
  br label %while.cond, !dbg !6553

while.cond:                                       ; preds = %if.end10, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6554
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6553
  br i1 %tobool, label %while.body, label %while.end, !dbg !6553

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6555
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6555
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6555
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6555
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6555
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6555
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6557
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6558
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6560
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6561

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6562
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6562
  %bf.load = load i32, i32* %5, align 8, !dbg !6562
  %bf.clear = and i32 %bf.load, 65535, !dbg !6562
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !6562
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6563

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6564

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6565
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6565
  %bf.load2 = load i32, i32* %7, align 8, !dbg !6565
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6565
  %cmp4 = icmp eq i32 %bf.clear3, 13, !dbg !6565
  br i1 %cmp4, label %land.lhs.true, label %if.end10, !dbg !6565

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6565
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6565
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !6565
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 5, !dbg !6565
  %rt_int = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !6565
  %9 = load i32, i32* %rt_int, align 8, !dbg !6565
  %cmp8 = icmp eq i32 %9, 10, !dbg !6565
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6567

if.then9:                                         ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6568
  br label %return, !dbg !6568

if.end10:                                         ; preds = %land.lhs.true, %if.end
  br label %while.cond, !dbg !6553, !llvm.loop !6569

while.end:                                        ; preds = %if.then, %while.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6571
  store %struct.rtx_def* %10, %struct.rtx_def** %retval, align 8, !dbg !6572
  br label %return, !dbg !6572

return:                                           ; preds = %while.end, %if.then9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6573
  ret %struct.rtx_def* %11, !dbg !6573
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %insn) #0 !dbg !6574 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6575, metadata !DIExpression()), !dbg !6576
  br label %while.cond, !dbg !6577

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6578
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6577
  br i1 %tobool, label %while.body, label %while.end, !dbg !6577

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6579
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6579
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6579
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6579
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6579
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6579
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6581
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6582
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6584
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6585

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6586
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6586
  %bf.load = load i32, i32* %5, align 8, !dbg !6586
  %bf.clear = and i32 %bf.load, 65535, !dbg !6586
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !6586
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6587

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6588

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6577, !llvm.loop !6589

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6591
  ret %struct.rtx_def* %6, !dbg !6592
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_nonnote_insn_bb(%struct.rtx_def* %insn) #0 !dbg !6593 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6594, metadata !DIExpression()), !dbg !6595
  br label %while.cond, !dbg !6596

while.cond:                                       ; preds = %if.end10, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6597
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6596
  br i1 %tobool, label %while.body, label %while.end, !dbg !6596

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6598
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6598
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6598
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6598
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6598
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6598
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6600
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6601
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6603
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6604

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6605
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6605
  %bf.load = load i32, i32* %5, align 8, !dbg !6605
  %bf.clear = and i32 %bf.load, 65535, !dbg !6605
  %cmp1 = icmp eq i32 %bf.clear, 13, !dbg !6605
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6606

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6607

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6608
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6608
  %bf.load2 = load i32, i32* %7, align 8, !dbg !6608
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6608
  %cmp4 = icmp eq i32 %bf.clear3, 13, !dbg !6608
  br i1 %cmp4, label %land.lhs.true, label %if.end10, !dbg !6608

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6608
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6608
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !6608
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 5, !dbg !6608
  %rt_int = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !6608
  %9 = load i32, i32* %rt_int, align 8, !dbg !6608
  %cmp8 = icmp eq i32 %9, 10, !dbg !6608
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6610

if.then9:                                         ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6611
  br label %return, !dbg !6611

if.end10:                                         ; preds = %land.lhs.true, %if.end
  br label %while.cond, !dbg !6596, !llvm.loop !6612

while.end:                                        ; preds = %if.then, %while.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6614
  store %struct.rtx_def* %10, %struct.rtx_def** %retval, align 8, !dbg !6615
  br label %return, !dbg !6615

return:                                           ; preds = %while.end, %if.then9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6616
  ret %struct.rtx_def* %11, !dbg !6616
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_nondebug_insn(%struct.rtx_def* %insn) #0 !dbg !6617 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  br label %while.cond, !dbg !6620

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6621
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6620
  br i1 %tobool, label %while.body, label %while.end, !dbg !6620

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6622
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6622
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6622
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6622
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6622
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6622
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6624
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6625
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6627
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6628

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6629
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6629
  %bf.load = load i32, i32* %5, align 8, !dbg !6629
  %bf.clear = and i32 %bf.load, 65535, !dbg !6629
  %cmp1 = icmp eq i32 %bf.clear, 7, !dbg !6629
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6630

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6631

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6620, !llvm.loop !6632

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6634
  ret %struct.rtx_def* %6, !dbg !6635
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_nondebug_insn(%struct.rtx_def* %insn) #0 !dbg !6636 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6637, metadata !DIExpression()), !dbg !6638
  br label %while.cond, !dbg !6639

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6640
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6639
  br i1 %tobool, label %while.body, label %while.end, !dbg !6639

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6641
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6641
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6641
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6641
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6641
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6641
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6643
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6644
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6646
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6647

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6648
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6648
  %bf.load = load i32, i32* %5, align 8, !dbg !6648
  %bf.clear = and i32 %bf.load, 65535, !dbg !6648
  %cmp1 = icmp eq i32 %bf.clear, 7, !dbg !6648
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6649

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6650

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6639, !llvm.loop !6651

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6653
  ret %struct.rtx_def* %6, !dbg !6654
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_real_insn(%struct.rtx_def* %insn) #0 !dbg !6655 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6656, metadata !DIExpression()), !dbg !6657
  br label %while.cond, !dbg !6658

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6659
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6658
  br i1 %tobool, label %while.body, label %while.end, !dbg !6658

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6660
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6660
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6660
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6660
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6660
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6660
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6662
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6663
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6665
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6666

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6667
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6667
  %bf.load = load i32, i32* %5, align 8, !dbg !6667
  %bf.clear = and i32 %bf.load, 65535, !dbg !6667
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !6667
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !6667

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6667
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6667
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6667
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6667
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !6667
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !6667

lor.lhs.false6:                                   ; preds = %lor.lhs.false2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6667
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6667
  %bf.load7 = load i32, i32* %9, align 8, !dbg !6667
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6667
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !6667
  br i1 %cmp9, label %if.then, label %lor.lhs.false10, !dbg !6667

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6667
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6667
  %bf.load11 = load i32, i32* %11, align 8, !dbg !6667
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6667
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !6667
  br i1 %cmp13, label %if.then, label %if.end, !dbg !6668

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false2, %lor.lhs.false, %while.body
  br label %while.end, !dbg !6669

if.end:                                           ; preds = %lor.lhs.false10
  br label %while.cond, !dbg !6658, !llvm.loop !6670

while.end:                                        ; preds = %if.then, %while.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6672
  ret %struct.rtx_def* %12, !dbg !6673
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_real_insn(%struct.rtx_def* %insn) #0 !dbg !6674 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  br label %while.cond, !dbg !6677

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6678
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6677
  br i1 %tobool, label %while.body, label %while.end, !dbg !6677

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6679
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6679
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6679
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6679
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6679
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6679
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6681
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6682
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6684
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6685

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6686
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6686
  %bf.load = load i32, i32* %5, align 8, !dbg !6686
  %bf.clear = and i32 %bf.load, 65535, !dbg !6686
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !6686
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !6686

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6686
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6686
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6686
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6686
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !6686
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !6686

lor.lhs.false6:                                   ; preds = %lor.lhs.false2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6686
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6686
  %bf.load7 = load i32, i32* %9, align 8, !dbg !6686
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6686
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !6686
  br i1 %cmp9, label %if.then, label %lor.lhs.false10, !dbg !6686

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6686
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6686
  %bf.load11 = load i32, i32* %11, align 8, !dbg !6686
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6686
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !6686
  br i1 %cmp13, label %if.then, label %if.end, !dbg !6687

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false2, %lor.lhs.false, %while.body
  br label %while.end, !dbg !6688

if.end:                                           ; preds = %lor.lhs.false10
  br label %while.cond, !dbg !6677, !llvm.loop !6689

while.end:                                        ; preds = %if.then, %while.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6691
  ret %struct.rtx_def* %12, !dbg !6692
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @last_call_insn() #0 !dbg !6693 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6694, metadata !DIExpression()), !dbg !6695
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !6696
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !6698
  br label %for.cond, !dbg !6699

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6700
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6700
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6702

land.rhs:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6703
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6703
  %bf.load = load i32, i32* %2, align 8, !dbg !6703
  %bf.clear = and i32 %bf.load, 65535, !dbg !6703
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !6703
  %lnot = xor i1 %cmp, true, !dbg !6704
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %3 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !6705
  br i1 %3, label %for.body, label %for.end, !dbg !6706

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !6706

for.inc:                                          ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6707
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6707
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6707
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6707
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6707
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6707
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !6708
  br label %for.cond, !dbg !6709, !llvm.loop !6710

for.end:                                          ; preds = %land.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6712
  ret %struct.rtx_def* %6, !dbg !6713
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @active_insn_p(%struct.rtx_def* %insn) #0 !dbg !6714 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6715, metadata !DIExpression()), !dbg !6716
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6717
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6717
  %bf.load = load i32, i32* %1, align 8, !dbg !6717
  %bf.clear = and i32 %bf.load, 65535, !dbg !6717
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !6717
  br i1 %cmp, label %lor.end20, label %lor.lhs.false, !dbg !6718

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6719
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6719
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6719
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6719
  %cmp3 = icmp eq i32 %bf.clear2, 9, !dbg !6719
  br i1 %cmp3, label %lor.end20, label %lor.rhs, !dbg !6720

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6721
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6721
  %bf.load4 = load i32, i32* %5, align 8, !dbg !6721
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !6721
  %cmp6 = icmp eq i32 %bf.clear5, 8, !dbg !6721
  br i1 %cmp6, label %land.rhs, label %land.end19, !dbg !6722

land.rhs:                                         ; preds = %lor.rhs
  %6 = load i32, i32* @reload_completed, align 4, !dbg !6723
  %tobool = icmp ne i32 %6, 0, !dbg !6723
  br i1 %tobool, label %lor.rhs7, label %lor.end, !dbg !6724

lor.rhs7:                                         ; preds = %land.rhs
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6725
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6725
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6725
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6725
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6725
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6725
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6725
  %bf.load8 = load i32, i32* %9, align 8, !dbg !6725
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !6725
  %cmp10 = icmp ne i32 %bf.clear9, 24, !dbg !6726
  br i1 %cmp10, label %land.rhs11, label %land.end, !dbg !6727

land.rhs11:                                       ; preds = %lor.rhs7
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6728
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6728
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6728
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !6728
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !6728
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !6728
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6728
  %bf.load16 = load i32, i32* %12, align 8, !dbg !6728
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !6728
  %cmp18 = icmp ne i32 %bf.clear17, 25, !dbg !6729
  br label %land.end

land.end:                                         ; preds = %land.rhs11, %lor.rhs7
  %13 = phi i1 [ false, %lor.rhs7 ], [ %cmp18, %land.rhs11 ], !dbg !6730
  br label %lor.end, !dbg !6724

lor.end:                                          ; preds = %land.end, %land.rhs
  %14 = phi i1 [ true, %land.rhs ], [ %13, %land.end ]
  br label %land.end19

land.end19:                                       ; preds = %lor.end, %lor.rhs
  %15 = phi i1 [ false, %lor.rhs ], [ %14, %lor.end ], !dbg !6730
  br label %lor.end20, !dbg !6720

lor.end20:                                        ; preds = %land.end19, %lor.lhs.false, %entry
  %16 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %15, %land.end19 ]
  %lor.ext = zext i1 %16 to i32, !dbg !6720
  ret i32 %lor.ext, !dbg !6731
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_active_insn(%struct.rtx_def* %insn) #0 !dbg !6732 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6733, metadata !DIExpression()), !dbg !6734
  br label %while.cond, !dbg !6735

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6736
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6735
  br i1 %tobool, label %while.body, label %while.end, !dbg !6735

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6737
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6737
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6737
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6737
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6737
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6737
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6739
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6740
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6742
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6743

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6744
  %call = call i32 @active_insn_p(%struct.rtx_def* %4), !dbg !6745
  %tobool1 = icmp ne i32 %call, 0, !dbg !6745
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6746

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6747

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6735, !llvm.loop !6748

while.end:                                        ; preds = %if.then, %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6750
  ret %struct.rtx_def* %5, !dbg !6751
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_active_insn(%struct.rtx_def* %insn) #0 !dbg !6752 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  br label %while.cond, !dbg !6755

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6756
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6755
  br i1 %tobool, label %while.body, label %while.end, !dbg !6755

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6757
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6757
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6757
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6757
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6757
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6757
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6759
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6760
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6762
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6763

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6764
  %call = call i32 @active_insn_p(%struct.rtx_def* %4), !dbg !6765
  %tobool1 = icmp ne i32 %call, 0, !dbg !6765
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6766

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6767

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6755, !llvm.loop !6768

while.end:                                        ; preds = %if.then, %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6770
  ret %struct.rtx_def* %5, !dbg !6771
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @next_label(%struct.rtx_def* %insn) #0 !dbg !6772 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  br label %while.cond, !dbg !6775

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6776
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6775
  br i1 %tobool, label %while.body, label %while.end, !dbg !6775

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6777
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6777
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6777
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6777
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6777
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6777
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6779
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6780
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6782
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6783

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6784
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6784
  %bf.load = load i32, i32* %5, align 8, !dbg !6784
  %bf.clear = and i32 %bf.load, 65535, !dbg !6784
  %cmp1 = icmp eq i32 %bf.clear, 12, !dbg !6784
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6785

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6786

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6775, !llvm.loop !6787

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6789
  ret %struct.rtx_def* %6, !dbg !6790
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prev_label(%struct.rtx_def* %insn) #0 !dbg !6791 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  br label %while.cond, !dbg !6794

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6795
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6794
  br i1 %tobool, label %while.body, label %while.end, !dbg !6794

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6796
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6796
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6796
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6796
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6796
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6796
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !6798
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6799
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6801
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6802

lor.lhs.false:                                    ; preds = %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6803
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6803
  %bf.load = load i32, i32* %5, align 8, !dbg !6803
  %bf.clear = and i32 %bf.load, 65535, !dbg !6803
  %cmp1 = icmp eq i32 %bf.clear, 12, !dbg !6803
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6804

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end, !dbg !6805

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6794, !llvm.loop !6806

while.end:                                        ; preds = %if.then, %while.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6808
  ret %struct.rtx_def* %6, !dbg !6809
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @skip_consecutive_labels(%struct.rtx_def* %label) #0 !dbg !6810 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !6811, metadata !DIExpression()), !dbg !6812
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6813, metadata !DIExpression()), !dbg !6814
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6815
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8, !dbg !6817
  br label %for.cond, !dbg !6818

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6819
  %cmp = icmp ne %struct.rtx_def* %1, null, !dbg !6821
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6822

land.rhs:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6823
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6823
  %bf.load = load i32, i32* %3, align 8, !dbg !6823
  %bf.clear = and i32 %bf.load, 65535, !dbg !6823
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !6823
  br i1 %cmp1, label %lor.end, label %lor.lhs.false, !dbg !6823

lor.lhs.false:                                    ; preds = %land.rhs
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6823
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6823
  %bf.load2 = load i32, i32* %5, align 8, !dbg !6823
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6823
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !6823
  br i1 %cmp4, label %lor.end, label %lor.lhs.false5, !dbg !6823

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6823
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6823
  %bf.load6 = load i32, i32* %7, align 8, !dbg !6823
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6823
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !6823
  br i1 %cmp8, label %lor.end, label %lor.rhs, !dbg !6823

lor.rhs:                                          ; preds = %lor.lhs.false5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6823
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6823
  %bf.load9 = load i32, i32* %9, align 8, !dbg !6823
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6823
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !6823
  br label %lor.end, !dbg !6823

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false5, %lor.lhs.false, %land.rhs
  %10 = phi i1 [ true, %lor.lhs.false5 ], [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp11, %lor.rhs ]
  %lnot = xor i1 %10, true, !dbg !6824
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %lnot, %lor.end ], !dbg !6825
  br i1 %11, label %for.body, label %for.end, !dbg !6826

for.body:                                         ; preds = %land.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6827
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6827
  %bf.load12 = load i32, i32* %13, align 8, !dbg !6827
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !6827
  %cmp14 = icmp eq i32 %bf.clear13, 12, !dbg !6827
  br i1 %cmp14, label %if.then, label %if.end, !dbg !6829

if.then:                                          ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6830
  store %struct.rtx_def* %14, %struct.rtx_def** %label.addr, align 8, !dbg !6831
  br label %if.end, !dbg !6832

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6827

for.inc:                                          ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6833
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6833
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6833
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6833
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6833
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6833
  store %struct.rtx_def* %16, %struct.rtx_def** %insn, align 8, !dbg !6834
  br label %for.cond, !dbg !6835, !llvm.loop !6836

for.end:                                          ; preds = %land.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6838
  ret %struct.rtx_def* %17, !dbg !6839
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @try_split(%struct.rtx_def* %pat, %struct.rtx_def* %trial, i32 %last) #0 !dbg !6840 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %trial.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca i32, align 4
  %before = alloca %struct.rtx_def*, align 8
  %after = alloca %struct.rtx_def*, align 8
  %has_barrier = alloca i32, align 4
  %note = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %probability = alloca i32, align 4
  %insn_last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %njumps = alloca i32, align 4
  %p = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !6843, metadata !DIExpression()), !dbg !6844
  store %struct.rtx_def* %trial, %struct.rtx_def** %trial.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trial.addr, metadata !6845, metadata !DIExpression()), !dbg !6846
  store i32 %last, i32* %last.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %last.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before, metadata !6849, metadata !DIExpression()), !dbg !6850
  %0 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6851
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6851
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6851
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6851
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6851
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6851
  store %struct.rtx_def* %1, %struct.rtx_def** %before, align 8, !dbg !6850
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after, metadata !6852, metadata !DIExpression()), !dbg !6853
  %2 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6854
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6854
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6854
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !6854
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6854
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !6854
  store %struct.rtx_def* %3, %struct.rtx_def** %after, align 8, !dbg !6853
  call void @llvm.dbg.declare(metadata i32* %has_barrier, metadata !6855, metadata !DIExpression()), !dbg !6856
  store i32 0, i32* %has_barrier, align 4, !dbg !6856
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !6857, metadata !DIExpression()), !dbg !6858
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6859, metadata !DIExpression()), !dbg !6860
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !6861, metadata !DIExpression()), !dbg !6862
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !6863, metadata !DIExpression()), !dbg !6864
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_last, metadata !6865, metadata !DIExpression()), !dbg !6866
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6867, metadata !DIExpression()), !dbg !6868
  call void @llvm.dbg.declare(metadata i32* %njumps, metadata !6869, metadata !DIExpression()), !dbg !6870
  store i32 0, i32* %njumps, align 4, !dbg !6870
  %4 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6871
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6871
  %bf.load = load i32, i32* %5, align 8, !dbg !6871
  %bf.lshr = lshr i32 %bf.load, 30, !dbg !6871
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6871
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6871
  br i1 %tobool, label %if.then, label %if.end, !dbg !6873

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6874
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !6875
  br label %return, !dbg !6875

if.end:                                           ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6876
  %call = call i32 @any_condjump_p(%struct.rtx_def* %7), !dbg !6878
  %tobool5 = icmp ne i32 %call, 0, !dbg !6878
  br i1 %tobool5, label %land.lhs.true, label %if.end15, !dbg !6879

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6880
  %call6 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %8, i32 13, %struct.rtx_def* null), !dbg !6881
  store %struct.rtx_def* %call6, %struct.rtx_def** %note, align 8, !dbg !6882
  %tobool7 = icmp ne %struct.rtx_def* %call6, null, !dbg !6882
  br i1 %tobool7, label %if.then8, label %if.end15, !dbg !6883

if.then8:                                         ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6884
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6884
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !6884
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !6884
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !6884
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !6884
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6884
  %hwint = bitcast %union.u* %u13 to [1 x i64]*, !dbg !6884
  %arrayidx14 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6884
  %11 = load i64, i64* %arrayidx14, align 8, !dbg !6884
  %conv = trunc i64 %11 to i32, !dbg !6884
  store i32 %conv, i32* @split_branch_probability, align 4, !dbg !6885
  br label %if.end15, !dbg !6886

if.end15:                                         ; preds = %if.then8, %land.lhs.true, %if.end
  %12 = load i32, i32* @split_branch_probability, align 4, !dbg !6887
  store i32 %12, i32* %probability, align 4, !dbg !6888
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6889
  %14 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6890
  %call16 = call %struct.rtx_def* @split_insns(%struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !6891
  store %struct.rtx_def* %call16, %struct.rtx_def** %seq, align 8, !dbg !6892
  store i32 -1, i32* @split_branch_probability, align 4, !dbg !6893
  %15 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !6894
  %tobool17 = icmp ne %struct.rtx_def* %15, null, !dbg !6894
  br i1 %tobool17, label %land.lhs.true18, label %if.end27, !dbg !6896

land.lhs.true18:                                  ; preds = %if.end15
  %16 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !6897
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6897
  %bf.load19 = load i32, i32* %17, align 8, !dbg !6897
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !6897
  %cmp = icmp eq i32 %bf.clear20, 11, !dbg !6897
  br i1 %cmp, label %if.then22, label %if.end27, !dbg !6898

if.then22:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %has_barrier, align 4, !dbg !6899
  %18 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !6901
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6901
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !6901
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 2, !dbg !6901
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !6901
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !6901
  store %struct.rtx_def* %19, %struct.rtx_def** %after, align 8, !dbg !6902
  br label %if.end27, !dbg !6903

if.end27:                                         ; preds = %if.then22, %land.lhs.true18, %if.end15
  %20 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6904
  %tobool28 = icmp ne %struct.rtx_def* %20, null, !dbg !6904
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !6906

if.then29:                                        ; preds = %if.end27
  %21 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6907
  store %struct.rtx_def* %21, %struct.rtx_def** %retval, align 8, !dbg !6908
  br label %return, !dbg !6908

if.end30:                                         ; preds = %if.end27
  %22 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6909
  store %struct.rtx_def* %22, %struct.rtx_def** %insn_last, align 8, !dbg !6910
  br label %while.body, !dbg !6911

while.body:                                       ; preds = %if.end30, %if.end64
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6912
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6912
  %bf.load31 = load i32, i32* %24, align 8, !dbg !6912
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !6912
  %cmp33 = icmp eq i32 %bf.clear32, 8, !dbg !6912
  br i1 %cmp33, label %land.lhs.true49, label %lor.lhs.false, !dbg !6912

lor.lhs.false:                                    ; preds = %while.body
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6912
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !6912
  %bf.load35 = load i32, i32* %26, align 8, !dbg !6912
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !6912
  %cmp37 = icmp eq i32 %bf.clear36, 7, !dbg !6912
  br i1 %cmp37, label %land.lhs.true49, label %lor.lhs.false39, !dbg !6912

lor.lhs.false39:                                  ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6912
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6912
  %bf.load40 = load i32, i32* %28, align 8, !dbg !6912
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !6912
  %cmp42 = icmp eq i32 %bf.clear41, 9, !dbg !6912
  br i1 %cmp42, label %land.lhs.true49, label %lor.lhs.false44, !dbg !6912

lor.lhs.false44:                                  ; preds = %lor.lhs.false39
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6912
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !6912
  %bf.load45 = load i32, i32* %30, align 8, !dbg !6912
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !6912
  %cmp47 = icmp eq i32 %bf.clear46, 10, !dbg !6912
  br i1 %cmp47, label %land.lhs.true49, label %if.end57, !dbg !6915

land.lhs.true49:                                  ; preds = %lor.lhs.false44, %lor.lhs.false39, %lor.lhs.false, %while.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6916
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6916
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !6916
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 5, !dbg !6916
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !6916
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !6916
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6917
  %call54 = call i32 @rtx_equal_p(%struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !6918
  %tobool55 = icmp ne i32 %call54, 0, !dbg !6918
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !6919

if.then56:                                        ; preds = %land.lhs.true49
  %34 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6920
  store %struct.rtx_def* %34, %struct.rtx_def** %retval, align 8, !dbg !6921
  br label %return, !dbg !6921

if.end57:                                         ; preds = %land.lhs.true49, %lor.lhs.false44
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6922
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6922
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !6922
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 2, !dbg !6922
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !6922
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !6922
  %tobool62 = icmp ne %struct.rtx_def* %36, null, !dbg !6922
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !6924

if.then63:                                        ; preds = %if.end57
  br label %while.end, !dbg !6925

if.end64:                                         ; preds = %if.end57
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6926
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !6926
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !6926
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 2, !dbg !6926
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !6926
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !6926
  store %struct.rtx_def* %38, %struct.rtx_def** %insn_last, align 8, !dbg !6927
  br label %while.body, !dbg !6911, !llvm.loop !6928

while.end:                                        ; preds = %if.then63
  %39 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6930
  call void @unshare_all_rtl_in_chain(%struct.rtx_def* %39), !dbg !6931
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6932
  store %struct.rtx_def* %40, %struct.rtx_def** %insn, align 8, !dbg !6934
  br label %for.cond, !dbg !6935

for.cond:                                         ; preds = %for.inc, %while.end
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6936
  %tobool69 = icmp ne %struct.rtx_def* %41, null, !dbg !6938
  br i1 %tobool69, label %for.body, label %for.end, !dbg !6938

for.body:                                         ; preds = %for.cond
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6939
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !6939
  %bf.load70 = load i32, i32* %43, align 8, !dbg !6939
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !6939
  %cmp72 = icmp eq i32 %bf.clear71, 9, !dbg !6939
  br i1 %cmp72, label %if.then74, label %if.end93, !dbg !6942

if.then74:                                        ; preds = %for.body
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6943
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !6943
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !6943
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 5, !dbg !6943
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !6943
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !6943
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6945
  call void @mark_jump_label(%struct.rtx_def* %45, %struct.rtx_def* %46, i32 0), !dbg !6946
  %47 = load i32, i32* %njumps, align 4, !dbg !6947
  %inc = add nsw i32 %47, 1, !dbg !6947
  store i32 %inc, i32* %njumps, align 4, !dbg !6947
  %48 = load i32, i32* %probability, align 4, !dbg !6948
  %cmp79 = icmp ne i32 %48, -1, !dbg !6950
  br i1 %cmp79, label %land.lhs.true81, label %if.end92, !dbg !6951

land.lhs.true81:                                  ; preds = %if.then74
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6952
  %call82 = call i32 @any_condjump_p(%struct.rtx_def* %49), !dbg !6953
  %tobool83 = icmp ne i32 %call82, 0, !dbg !6953
  br i1 %tobool83, label %land.lhs.true84, label %if.end92, !dbg !6954

land.lhs.true84:                                  ; preds = %land.lhs.true81
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6955
  %call85 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %50, i32 13, %struct.rtx_def* null), !dbg !6956
  %tobool86 = icmp ne %struct.rtx_def* %call85, null, !dbg !6956
  br i1 %tobool86, label %if.end92, label %if.then87, !dbg !6957

if.then87:                                        ; preds = %land.lhs.true84
  %51 = load i32, i32* %njumps, align 4, !dbg !6958
  %cmp88 = icmp eq i32 %51, 1, !dbg !6958
  br i1 %cmp88, label %cond.false, label %cond.true, !dbg !6958

cond.true:                                        ; preds = %if.then87
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3497, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6958
  br label %cond.end, !dbg !6958

cond.false:                                       ; preds = %if.then87
  br label %cond.end, !dbg !6958

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6958
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6960
  %53 = load i32, i32* %probability, align 4, !dbg !6961
  %conv90 = sext i32 %53 to i64, !dbg !6961
  %call91 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv90), !dbg !6961
  call void @add_reg_note(%struct.rtx_def* %52, i32 13, %struct.rtx_def* %call91), !dbg !6962
  br label %if.end92, !dbg !6963

if.end92:                                         ; preds = %cond.end, %land.lhs.true84, %land.lhs.true81, %if.then74
  br label %if.end93, !dbg !6964

if.end93:                                         ; preds = %if.end92, %for.body
  br label %for.inc, !dbg !6965

for.inc:                                          ; preds = %if.end93
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6966
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6966
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !6966
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 1, !dbg !6966
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !6966
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !6966
  store %struct.rtx_def* %55, %struct.rtx_def** %insn, align 8, !dbg !6967
  br label %for.cond, !dbg !6968, !llvm.loop !6969

for.end:                                          ; preds = %for.cond
  %56 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6971
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !6971
  %bf.load98 = load i32, i32* %57, align 8, !dbg !6971
  %bf.clear99 = and i32 %bf.load98, 65535, !dbg !6971
  %cmp100 = icmp eq i32 %bf.clear99, 10, !dbg !6971
  br i1 %cmp100, label %if.then102, label %if.end141, !dbg !6973

if.then102:                                       ; preds = %for.end
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !6974
  store %struct.rtx_def* %58, %struct.rtx_def** %insn, align 8, !dbg !6977
  br label %for.cond103, !dbg !6978

for.cond103:                                      ; preds = %for.inc135, %if.then102
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6979
  %tobool104 = icmp ne %struct.rtx_def* %59, null, !dbg !6981
  br i1 %tobool104, label %for.body105, label %for.end140, !dbg !6981

for.body105:                                      ; preds = %for.cond103
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6982
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !6982
  %bf.load106 = load i32, i32* %61, align 8, !dbg !6982
  %bf.clear107 = and i32 %bf.load106, 65535, !dbg !6982
  %cmp108 = icmp eq i32 %bf.clear107, 10, !dbg !6982
  br i1 %cmp108, label %if.then110, label %if.end134, !dbg !6984

if.then110:                                       ; preds = %for.body105
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %p, metadata !6985, metadata !DIExpression()), !dbg !6987
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6988
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6988
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !6988
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 8, !dbg !6988
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !6988
  store %struct.rtx_def** %rt_rtx114, %struct.rtx_def*** %p, align 8, !dbg !6987
  br label %while.cond, !dbg !6989

while.cond:                                       ; preds = %while.body116, %if.then110
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !6990
  %64 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8, !dbg !6991
  %tobool115 = icmp ne %struct.rtx_def* %64, null, !dbg !6989
  br i1 %tobool115, label %while.body116, label %while.end121, !dbg !6989

while.body116:                                    ; preds = %while.cond
  %65 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !6992
  %66 = load %struct.rtx_def*, %struct.rtx_def** %65, align 8, !dbg !6992
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !6992
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !6992
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 1, !dbg !6992
  %rt_rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**, !dbg !6992
  store %struct.rtx_def** %rt_rtx120, %struct.rtx_def*** %p, align 8, !dbg !6993
  br label %while.cond, !dbg !6989, !llvm.loop !6994

while.end121:                                     ; preds = %while.cond
  %67 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6995
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !6995
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !6995
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 8, !dbg !6995
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !6995
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !6995
  %69 = load %struct.rtx_def**, %struct.rtx_def*** %p, align 8, !dbg !6996
  store %struct.rtx_def* %68, %struct.rtx_def** %69, align 8, !dbg !6997
  %70 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !6998
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !6998
  %bf.load126 = load i32, i32* %71, align 8, !dbg !6998
  %bf.lshr127 = lshr i32 %bf.load126, 24, !dbg !6998
  %bf.clear128 = and i32 %bf.lshr127, 1, !dbg !6998
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6999
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !6999
  %bf.load129 = load i32, i32* %73, align 8, !dbg !7000
  %bf.value = and i32 %bf.clear128, 1, !dbg !7000
  %bf.shl = shl i32 %bf.value, 24, !dbg !7000
  %bf.clear130 = and i32 %bf.load129, -16777217, !dbg !7000
  %bf.set = or i32 %bf.clear130, %bf.shl, !dbg !7000
  store i32 %bf.set, i32* %73, align 8, !dbg !7000
  %74 = load i32, i32* @flag_enable_icf_debug, align 4, !dbg !7001
  %tobool131 = icmp ne i32 %74, 0, !dbg !7001
  br i1 %tobool131, label %if.then132, label %if.end133, !dbg !7003

if.then132:                                       ; preds = %while.end121
  %75 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !7004
  %copy_call_info = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %75, i32 0, i32 28, !dbg !7005
  %76 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** %copy_call_info, align 8, !dbg !7005
  %77 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7006
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7007
  call void %76(%struct.rtx_def* %77, %struct.rtx_def* %78), !dbg !7008
  br label %if.end133, !dbg !7008

if.end133:                                        ; preds = %if.then132, %while.end121
  br label %if.end134, !dbg !7009

if.end134:                                        ; preds = %if.end133, %for.body105
  br label %for.inc135, !dbg !6982

for.inc135:                                       ; preds = %if.end134
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7010
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !7010
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !7010
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 1, !dbg !7010
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !7010
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx139, align 8, !dbg !7010
  store %struct.rtx_def* %80, %struct.rtx_def** %insn, align 8, !dbg !7011
  br label %for.cond103, !dbg !7012, !llvm.loop !7013

for.end140:                                       ; preds = %for.cond103
  br label %if.end141, !dbg !7015

if.end141:                                        ; preds = %for.end140, %for.end
  %81 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7016
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !7016
  %fld143 = bitcast %union.u* %u142 to [1 x %union.rtunion_def]*, !dbg !7016
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i64 0, i64 7, !dbg !7016
  %rt_rtx145 = bitcast %union.rtunion_def* %arrayidx144 to %struct.rtx_def**, !dbg !7016
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx145, align 8, !dbg !7016
  store %struct.rtx_def* %82, %struct.rtx_def** %note, align 8, !dbg !7018
  br label %for.cond146, !dbg !7019

for.cond146:                                      ; preds = %for.inc200, %if.end141
  %83 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7020
  %tobool147 = icmp ne %struct.rtx_def* %83, null, !dbg !7022
  br i1 %tobool147, label %for.body148, label %for.end205, !dbg !7022

for.body148:                                      ; preds = %for.cond146
  %84 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7023
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !7023
  %bf.load149 = load i32, i32* %85, align 8, !dbg !7023
  %bf.lshr150 = lshr i32 %bf.load149, 16, !dbg !7023
  %bf.clear151 = and i32 %bf.lshr150, 255, !dbg !7023
  switch i32 %bf.clear151, label %sw.default [
    i32 25, label %sw.bb
    i32 27, label %sw.bb152
    i32 30, label %sw.bb152
    i32 28, label %sw.bb176
  ], !dbg !7025

sw.bb:                                            ; preds = %for.body148
  %86 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7026
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !7028
  call void @copy_reg_eh_region_note_backward(%struct.rtx_def* %86, %struct.rtx_def* %87, %struct.rtx_def* null), !dbg !7029
  br label %sw.epilog, !dbg !7030

sw.bb152:                                         ; preds = %for.body148, %for.body148
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !7031
  store %struct.rtx_def* %88, %struct.rtx_def** %insn, align 8, !dbg !7033
  br label %for.cond153, !dbg !7034

for.cond153:                                      ; preds = %for.inc170, %sw.bb152
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7035
  %cmp154 = icmp ne %struct.rtx_def* %89, null, !dbg !7037
  br i1 %cmp154, label %for.body156, label %for.end175, !dbg !7038

for.body156:                                      ; preds = %for.cond153
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7039
  %91 = bitcast %struct.rtx_def* %90 to i32*, !dbg !7039
  %bf.load157 = load i32, i32* %91, align 8, !dbg !7039
  %bf.clear158 = and i32 %bf.load157, 65535, !dbg !7039
  %cmp159 = icmp eq i32 %bf.clear158, 10, !dbg !7039
  br i1 %cmp159, label %if.then161, label %if.end169, !dbg !7042

if.then161:                                       ; preds = %for.body156
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7043
  %93 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7044
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !7044
  %bf.load162 = load i32, i32* %94, align 8, !dbg !7044
  %bf.lshr163 = lshr i32 %bf.load162, 16, !dbg !7044
  %bf.clear164 = and i32 %bf.lshr163, 255, !dbg !7044
  %95 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7045
  %u165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !7045
  %fld166 = bitcast %union.u* %u165 to [1 x %union.rtunion_def]*, !dbg !7045
  %arrayidx167 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld166, i64 0, i64 0, !dbg !7045
  %rt_rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**, !dbg !7045
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx168, align 8, !dbg !7045
  call void @add_reg_note(%struct.rtx_def* %92, i32 %bf.clear164, %struct.rtx_def* %96), !dbg !7046
  br label %if.end169, !dbg !7046

if.end169:                                        ; preds = %if.then161, %for.body156
  br label %for.inc170, !dbg !7047

for.inc170:                                       ; preds = %if.end169
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7048
  %u171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !7048
  %fld172 = bitcast %union.u* %u171 to [1 x %union.rtunion_def]*, !dbg !7048
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i64 0, i64 1, !dbg !7048
  %rt_rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**, !dbg !7048
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx174, align 8, !dbg !7048
  store %struct.rtx_def* %98, %struct.rtx_def** %insn, align 8, !dbg !7049
  br label %for.cond153, !dbg !7050, !llvm.loop !7051

for.end175:                                       ; preds = %for.cond153
  br label %sw.epilog, !dbg !7053

sw.bb176:                                         ; preds = %for.body148
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !7054
  store %struct.rtx_def* %99, %struct.rtx_def** %insn, align 8, !dbg !7056
  br label %for.cond177, !dbg !7057

for.cond177:                                      ; preds = %for.inc194, %sw.bb176
  %100 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7058
  %cmp178 = icmp ne %struct.rtx_def* %100, null, !dbg !7060
  br i1 %cmp178, label %for.body180, label %for.end199, !dbg !7061

for.body180:                                      ; preds = %for.cond177
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7062
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !7062
  %bf.load181 = load i32, i32* %102, align 8, !dbg !7062
  %bf.clear182 = and i32 %bf.load181, 65535, !dbg !7062
  %cmp183 = icmp eq i32 %bf.clear182, 9, !dbg !7062
  br i1 %cmp183, label %if.then185, label %if.end193, !dbg !7065

if.then185:                                       ; preds = %for.body180
  %103 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7066
  %104 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7067
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !7067
  %bf.load186 = load i32, i32* %105, align 8, !dbg !7067
  %bf.lshr187 = lshr i32 %bf.load186, 16, !dbg !7067
  %bf.clear188 = and i32 %bf.lshr187, 255, !dbg !7067
  %106 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7068
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !7068
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !7068
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 0, !dbg !7068
  %rt_rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**, !dbg !7068
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx192, align 8, !dbg !7068
  call void @add_reg_note(%struct.rtx_def* %103, i32 %bf.clear188, %struct.rtx_def* %107), !dbg !7069
  br label %if.end193, !dbg !7069

if.end193:                                        ; preds = %if.then185, %for.body180
  br label %for.inc194, !dbg !7070

for.inc194:                                       ; preds = %if.end193
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7071
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !7071
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !7071
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 1, !dbg !7071
  %rt_rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**, !dbg !7071
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx198, align 8, !dbg !7071
  store %struct.rtx_def* %109, %struct.rtx_def** %insn, align 8, !dbg !7072
  br label %for.cond177, !dbg !7073, !llvm.loop !7074

for.end199:                                       ; preds = %for.cond177
  br label %sw.epilog, !dbg !7076

sw.default:                                       ; preds = %for.body148
  br label %sw.epilog, !dbg !7077

sw.epilog:                                        ; preds = %sw.default, %for.end199, %for.end175, %sw.bb
  br label %for.inc200, !dbg !7078

for.inc200:                                       ; preds = %sw.epilog
  %110 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7079
  %u201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !7079
  %fld202 = bitcast %union.u* %u201 to [1 x %union.rtunion_def]*, !dbg !7079
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i64 0, i64 1, !dbg !7079
  %rt_rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**, !dbg !7079
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx204, align 8, !dbg !7079
  store %struct.rtx_def* %111, %struct.rtx_def** %note, align 8, !dbg !7080
  br label %for.cond146, !dbg !7081, !llvm.loop !7082

for.end205:                                       ; preds = %for.cond146
  %112 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7084
  %113 = bitcast %struct.rtx_def* %112 to i32*, !dbg !7084
  %bf.load206 = load i32, i32* %113, align 8, !dbg !7084
  %bf.clear207 = and i32 %bf.load206, 65535, !dbg !7084
  %cmp208 = icmp eq i32 %bf.clear207, 8, !dbg !7084
  br i1 %cmp208, label %if.then225, label %lor.lhs.false210, !dbg !7084

lor.lhs.false210:                                 ; preds = %for.end205
  %114 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7084
  %115 = bitcast %struct.rtx_def* %114 to i32*, !dbg !7084
  %bf.load211 = load i32, i32* %115, align 8, !dbg !7084
  %bf.clear212 = and i32 %bf.load211, 65535, !dbg !7084
  %cmp213 = icmp eq i32 %bf.clear212, 7, !dbg !7084
  br i1 %cmp213, label %if.then225, label %lor.lhs.false215, !dbg !7084

lor.lhs.false215:                                 ; preds = %lor.lhs.false210
  %116 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7084
  %117 = bitcast %struct.rtx_def* %116 to i32*, !dbg !7084
  %bf.load216 = load i32, i32* %117, align 8, !dbg !7084
  %bf.clear217 = and i32 %bf.load216, 65535, !dbg !7084
  %cmp218 = icmp eq i32 %bf.clear217, 9, !dbg !7084
  br i1 %cmp218, label %if.then225, label %lor.lhs.false220, !dbg !7084

lor.lhs.false220:                                 ; preds = %lor.lhs.false215
  %118 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7084
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !7084
  %bf.load221 = load i32, i32* %119, align 8, !dbg !7084
  %bf.clear222 = and i32 %bf.load221, 65535, !dbg !7084
  %cmp223 = icmp eq i32 %bf.clear222, 10, !dbg !7084
  br i1 %cmp223, label %if.then225, label %if.end245, !dbg !7086

if.then225:                                       ; preds = %lor.lhs.false220, %lor.lhs.false215, %lor.lhs.false210, %for.end205
  %120 = load %struct.rtx_def*, %struct.rtx_def** %insn_last, align 8, !dbg !7087
  store %struct.rtx_def* %120, %struct.rtx_def** %insn, align 8, !dbg !7089
  br label %while.cond226, !dbg !7090

while.cond226:                                    ; preds = %if.end239, %if.then225
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7091
  %cmp227 = icmp ne %struct.rtx_def* %121, null, !dbg !7092
  br i1 %cmp227, label %while.body229, label %while.end244, !dbg !7090

while.body229:                                    ; preds = %while.cond226
  %122 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7093
  %123 = bitcast %struct.rtx_def* %122 to i32*, !dbg !7093
  %bf.load230 = load i32, i32* %123, align 8, !dbg !7093
  %bf.clear231 = and i32 %bf.load230, 65535, !dbg !7093
  %cmp232 = icmp eq i32 %bf.clear231, 8, !dbg !7093
  br i1 %cmp232, label %if.then234, label %if.end239, !dbg !7096

if.then234:                                       ; preds = %while.body229
  %124 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7097
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !7097
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !7097
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 5, !dbg !7097
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !7097
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx238, align 8, !dbg !7097
  call void @mark_label_nuses(%struct.rtx_def* %125), !dbg !7098
  br label %if.end239, !dbg !7098

if.end239:                                        ; preds = %if.then234, %while.body229
  %126 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7099
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !7099
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !7099
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 1, !dbg !7099
  %rt_rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**, !dbg !7099
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx243, align 8, !dbg !7099
  store %struct.rtx_def* %127, %struct.rtx_def** %insn, align 8, !dbg !7100
  br label %while.cond226, !dbg !7090, !llvm.loop !7101

while.end244:                                     ; preds = %while.cond226
  br label %if.end245, !dbg !7103

if.end245:                                        ; preds = %while.end244, %lor.lhs.false220
  %128 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7104
  %129 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7105
  %130 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7106
  %u246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1, !dbg !7106
  %fld247 = bitcast %union.u* %u246 to [1 x %union.rtunion_def]*, !dbg !7106
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i64 0, i64 4, !dbg !7106
  %rt_int = bitcast %union.rtunion_def* %arrayidx248 to i32*, !dbg !7106
  %131 = load i32, i32* %rt_int, align 8, !dbg !7106
  %call249 = call %struct.rtx_def* @emit_insn_after_setloc(%struct.rtx_def* %128, %struct.rtx_def* %129, i32 %131), !dbg !7107
  store %struct.rtx_def* %call249, %struct.rtx_def** %tem, align 8, !dbg !7108
  %132 = load %struct.rtx_def*, %struct.rtx_def** %trial.addr, align 8, !dbg !7109
  %call250 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %132), !dbg !7110
  %133 = load i32, i32* %has_barrier, align 4, !dbg !7111
  %tobool251 = icmp ne i32 %133, 0, !dbg !7111
  br i1 %tobool251, label %if.then252, label %if.end254, !dbg !7113

if.then252:                                       ; preds = %if.end245
  %134 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7114
  %call253 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %134), !dbg !7115
  br label %if.end254, !dbg !7115

if.end254:                                        ; preds = %if.then252, %if.end245
  %135 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !7116
  %u255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %135, i32 0, i32 1, !dbg !7116
  %fld256 = bitcast %union.u* %u255 to [1 x %union.rtunion_def]*, !dbg !7116
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i64 0, i64 2, !dbg !7116
  %rt_rtx258 = bitcast %union.rtunion_def* %arrayidx257 to %struct.rtx_def**, !dbg !7116
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx258, align 8, !dbg !7116
  store %struct.rtx_def* %136, %struct.rtx_def** %tem, align 8, !dbg !7118
  br label %for.cond259, !dbg !7119

for.cond259:                                      ; preds = %for.inc294, %if.end254
  %137 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7120
  %138 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !7122
  %cmp260 = icmp ne %struct.rtx_def* %137, %138, !dbg !7123
  br i1 %cmp260, label %for.body262, label %for.end299, !dbg !7124

for.body262:                                      ; preds = %for.cond259
  %139 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7125
  %140 = bitcast %struct.rtx_def* %139 to i32*, !dbg !7125
  %bf.load263 = load i32, i32* %140, align 8, !dbg !7125
  %bf.lshr264 = lshr i32 %bf.load263, 27, !dbg !7125
  %bf.clear265 = and i32 %bf.lshr264, 1, !dbg !7125
  %tobool266 = icmp ne i32 %bf.clear265, 0, !dbg !7125
  br i1 %tobool266, label %if.end293, label %land.lhs.true267, !dbg !7127

land.lhs.true267:                                 ; preds = %for.body262
  %141 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7128
  %142 = bitcast %struct.rtx_def* %141 to i32*, !dbg !7128
  %bf.load268 = load i32, i32* %142, align 8, !dbg !7128
  %bf.clear269 = and i32 %bf.load268, 65535, !dbg !7128
  %cmp270 = icmp eq i32 %bf.clear269, 8, !dbg !7128
  br i1 %cmp270, label %if.then287, label %lor.lhs.false272, !dbg !7128

lor.lhs.false272:                                 ; preds = %land.lhs.true267
  %143 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7128
  %144 = bitcast %struct.rtx_def* %143 to i32*, !dbg !7128
  %bf.load273 = load i32, i32* %144, align 8, !dbg !7128
  %bf.clear274 = and i32 %bf.load273, 65535, !dbg !7128
  %cmp275 = icmp eq i32 %bf.clear274, 7, !dbg !7128
  br i1 %cmp275, label %if.then287, label %lor.lhs.false277, !dbg !7128

lor.lhs.false277:                                 ; preds = %lor.lhs.false272
  %145 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7128
  %146 = bitcast %struct.rtx_def* %145 to i32*, !dbg !7128
  %bf.load278 = load i32, i32* %146, align 8, !dbg !7128
  %bf.clear279 = and i32 %bf.load278, 65535, !dbg !7128
  %cmp280 = icmp eq i32 %bf.clear279, 9, !dbg !7128
  br i1 %cmp280, label %if.then287, label %lor.lhs.false282, !dbg !7128

lor.lhs.false282:                                 ; preds = %lor.lhs.false277
  %147 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7128
  %148 = bitcast %struct.rtx_def* %147 to i32*, !dbg !7128
  %bf.load283 = load i32, i32* %148, align 8, !dbg !7128
  %bf.clear284 = and i32 %bf.load283, 65535, !dbg !7128
  %cmp285 = icmp eq i32 %bf.clear284, 10, !dbg !7128
  br i1 %cmp285, label %if.then287, label %if.end293, !dbg !7129

if.then287:                                       ; preds = %lor.lhs.false282, %lor.lhs.false277, %lor.lhs.false272, %land.lhs.true267
  %149 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7130
  %u288 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1, !dbg !7130
  %fld289 = bitcast %union.u* %u288 to [1 x %union.rtunion_def]*, !dbg !7130
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i64 0, i64 5, !dbg !7130
  %rt_rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**, !dbg !7130
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx291, align 8, !dbg !7130
  %151 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7131
  %call292 = call %struct.rtx_def* @try_split(%struct.rtx_def* %150, %struct.rtx_def* %151, i32 1), !dbg !7132
  store %struct.rtx_def* %call292, %struct.rtx_def** %tem, align 8, !dbg !7133
  br label %if.end293, !dbg !7134

if.end293:                                        ; preds = %if.then287, %lor.lhs.false282, %for.body262
  br label %for.inc294, !dbg !7128

for.inc294:                                       ; preds = %if.end293
  %152 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7135
  %u295 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !7135
  %fld296 = bitcast %union.u* %u295 to [1 x %union.rtunion_def]*, !dbg !7135
  %arrayidx297 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld296, i64 0, i64 2, !dbg !7135
  %rt_rtx298 = bitcast %union.rtunion_def* %arrayidx297 to %struct.rtx_def**, !dbg !7135
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx298, align 8, !dbg !7135
  store %struct.rtx_def* %153, %struct.rtx_def** %tem, align 8, !dbg !7136
  br label %for.cond259, !dbg !7137, !llvm.loop !7138

for.end299:                                       ; preds = %for.cond259
  %154 = load i32, i32* %last.addr, align 4, !dbg !7140
  %tobool300 = icmp ne i32 %154, 0, !dbg !7140
  br i1 %tobool300, label %cond.true301, label %cond.false311, !dbg !7140

cond.true301:                                     ; preds = %for.end299
  %155 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !7141
  %tobool302 = icmp ne %struct.rtx_def* %155, null, !dbg !7141
  br i1 %tobool302, label %cond.true303, label %cond.false308, !dbg !7141

cond.true303:                                     ; preds = %cond.true301
  %156 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !7142
  %u304 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1, !dbg !7142
  %fld305 = bitcast %union.u* %u304 to [1 x %union.rtunion_def]*, !dbg !7142
  %arrayidx306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld305, i64 0, i64 1, !dbg !7142
  %rt_rtx307 = bitcast %union.rtunion_def* %arrayidx306 to %struct.rtx_def**, !dbg !7142
  %157 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx307, align 8, !dbg !7142
  br label %cond.end309, !dbg !7141

cond.false308:                                    ; preds = %cond.true301
  %158 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7143
  br label %cond.end309, !dbg !7141

cond.end309:                                      ; preds = %cond.false308, %cond.true303
  %cond310 = phi %struct.rtx_def* [ %157, %cond.true303 ], [ %158, %cond.false308 ], !dbg !7141
  br label %cond.end316, !dbg !7140

cond.false311:                                    ; preds = %for.end299
  %159 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8, !dbg !7144
  %u312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %159, i32 0, i32 1, !dbg !7144
  %fld313 = bitcast %union.u* %u312 to [1 x %union.rtunion_def]*, !dbg !7144
  %arrayidx314 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld313, i64 0, i64 2, !dbg !7144
  %rt_rtx315 = bitcast %union.rtunion_def* %arrayidx314 to %struct.rtx_def**, !dbg !7144
  %160 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx315, align 8, !dbg !7144
  br label %cond.end316, !dbg !7140

cond.end316:                                      ; preds = %cond.false311, %cond.end309
  %cond317 = phi %struct.rtx_def* [ %cond310, %cond.end309 ], [ %160, %cond.false311 ], !dbg !7140
  store %struct.rtx_def* %cond317, %struct.rtx_def** %retval, align 8, !dbg !7145
  br label %return, !dbg !7145

return:                                           ; preds = %cond.end316, %if.then56, %if.then29, %if.then
  %161 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7146
  ret %struct.rtx_def* %161, !dbg !7146
}

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @split_insns(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @mark_jump_label(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @copy_reg_eh_region_note_backward(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_label_nuses(%struct.rtx_def* %x) #0 !dbg !7147 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7148, metadata !DIExpression()), !dbg !7149
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7150, metadata !DIExpression()), !dbg !7151
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7152, metadata !DIExpression()), !dbg !7153
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7154, metadata !DIExpression()), !dbg !7155
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7156, metadata !DIExpression()), !dbg !7157
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7158
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7158
  %bf.load = load i32, i32* %1, align 8, !dbg !7158
  %bf.clear = and i32 %bf.load, 65535, !dbg !7158
  store i32 %bf.clear, i32* %code, align 4, !dbg !7159
  %2 = load i32, i32* %code, align 4, !dbg !7160
  %cmp = icmp eq i32 %2, 44, !dbg !7162
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7163

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7164
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7164
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7164
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7164
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7164
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7164
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7164
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7164
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7164
  %cmp3 = icmp eq i32 %bf.clear2, 12, !dbg !7164
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7165

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7166
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7166
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7166
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !7166
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !7166
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !7166
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7166
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7166
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !7166
  %rt_int = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !7166
  %8 = load i32, i32* %rt_int, align 8, !dbg !7167
  %inc = add nsw i32 %8, 1, !dbg !7167
  store i32 %inc, i32* %rt_int, align 8, !dbg !7167
  br label %if.end, !dbg !7166

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load i32, i32* %code, align 4, !dbg !7168
  %idxprom = sext i32 %9 to i64, !dbg !7168
  %arrayidx11 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !7168
  %10 = load i8*, i8** %arrayidx11, align 8, !dbg !7168
  store i8* %10, i8** %fmt, align 8, !dbg !7169
  %11 = load i32, i32* %code, align 4, !dbg !7170
  %idxprom12 = sext i32 %11 to i64, !dbg !7170
  %arrayidx13 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom12, !dbg !7170
  %12 = load i8, i8* %arrayidx13, align 1, !dbg !7170
  %conv = zext i8 %12 to i32, !dbg !7170
  %sub = sub nsw i32 %conv, 1, !dbg !7172
  store i32 %sub, i32* %i, align 4, !dbg !7173
  br label %for.cond, !dbg !7174

for.cond:                                         ; preds = %for.inc51, %if.end
  %13 = load i32, i32* %i, align 4, !dbg !7175
  %cmp14 = icmp sge i32 %13, 0, !dbg !7177
  br i1 %cmp14, label %for.body, label %for.end53, !dbg !7178

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %fmt, align 8, !dbg !7179
  %15 = load i32, i32* %i, align 4, !dbg !7182
  %idxprom16 = sext i32 %15 to i64, !dbg !7179
  %arrayidx17 = getelementptr inbounds i8, i8* %14, i64 %idxprom16, !dbg !7179
  %16 = load i8, i8* %arrayidx17, align 1, !dbg !7179
  %conv18 = sext i8 %16 to i32, !dbg !7179
  %cmp19 = icmp eq i32 %conv18, 101, !dbg !7183
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !7184

if.then21:                                        ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7185
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7185
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !7185
  %18 = load i32, i32* %i, align 4, !dbg !7185
  %idxprom24 = sext i32 %18 to i64, !dbg !7185
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 %idxprom24, !dbg !7185
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !7185
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !7185
  call void @mark_label_nuses(%struct.rtx_def* %19), !dbg !7186
  br label %if.end50, !dbg !7186

if.else:                                          ; preds = %for.body
  %20 = load i8*, i8** %fmt, align 8, !dbg !7187
  %21 = load i32, i32* %i, align 4, !dbg !7189
  %idxprom27 = sext i32 %21 to i64, !dbg !7187
  %arrayidx28 = getelementptr inbounds i8, i8* %20, i64 %idxprom27, !dbg !7187
  %22 = load i8, i8* %arrayidx28, align 1, !dbg !7187
  %conv29 = sext i8 %22 to i32, !dbg !7187
  %cmp30 = icmp eq i32 %conv29, 69, !dbg !7190
  br i1 %cmp30, label %if.then32, label %if.end49, !dbg !7191

if.then32:                                        ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7192
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7192
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7192
  %24 = load i32, i32* %i, align 4, !dbg !7192
  %idxprom35 = sext i32 %24 to i64, !dbg !7192
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 %idxprom35, !dbg !7192
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !7192
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7192
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 0, !dbg !7192
  %26 = load i32, i32* %num_elem, align 8, !dbg !7192
  %sub37 = sub nsw i32 %26, 1, !dbg !7194
  store i32 %sub37, i32* %j, align 4, !dbg !7195
  br label %for.cond38, !dbg !7196

for.cond38:                                       ; preds = %for.inc, %if.then32
  %27 = load i32, i32* %j, align 4, !dbg !7197
  %cmp39 = icmp sge i32 %27, 0, !dbg !7199
  br i1 %cmp39, label %for.body41, label %for.end, !dbg !7200

for.body41:                                       ; preds = %for.cond38
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7201
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !7201
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !7201
  %29 = load i32, i32* %i, align 4, !dbg !7201
  %idxprom44 = sext i32 %29 to i64, !dbg !7201
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 %idxprom44, !dbg !7201
  %rt_rtvec46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtvec_def**, !dbg !7201
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec46, align 8, !dbg !7201
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 1, !dbg !7201
  %31 = load i32, i32* %j, align 4, !dbg !7201
  %idxprom47 = sext i32 %31 to i64, !dbg !7201
  %arrayidx48 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom47, !dbg !7201
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8, !dbg !7201
  call void @mark_label_nuses(%struct.rtx_def* %32), !dbg !7202
  br label %for.inc, !dbg !7202

for.inc:                                          ; preds = %for.body41
  %33 = load i32, i32* %j, align 4, !dbg !7203
  %dec = add nsw i32 %33, -1, !dbg !7203
  store i32 %dec, i32* %j, align 4, !dbg !7203
  br label %for.cond38, !dbg !7204, !llvm.loop !7205

for.end:                                          ; preds = %for.cond38
  br label %if.end49, !dbg !7206

if.end49:                                         ; preds = %for.end, %if.else
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then21
  br label %for.inc51, !dbg !7207

for.inc51:                                        ; preds = %if.end50
  %34 = load i32, i32* %i, align 4, !dbg !7208
  %dec52 = add nsw i32 %34, -1, !dbg !7208
  store i32 %dec52, i32* %i, align 4, !dbg !7208
  br label %for.cond, !dbg !7209, !llvm.loop !7210

for.end53:                                        ; preds = %for.cond
  ret void, !dbg !7212
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_after_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %after, i32 %loc) #0 !dbg !7213 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !7214, metadata !DIExpression()), !dbg !7215
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7220, metadata !DIExpression()), !dbg !7221
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !7222
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7223
  %call = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %0, %struct.rtx_def* %1, %struct.basic_block_def* null), !dbg !7224
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !7221
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !7225
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !7227
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7228

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %loc.addr, align 4, !dbg !7229
  %tobool = icmp ne i32 %3, 0, !dbg !7229
  br i1 %tobool, label %if.end, label %if.then, !dbg !7230

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7231
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !7232
  br label %return, !dbg !7232

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7233
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7233
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7233
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7233
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7233
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7233
  store %struct.rtx_def* %6, %struct.rtx_def** %after.addr, align 8, !dbg !7234
  br label %while.body, !dbg !7235

while.body:                                       ; preds = %if.end, %if.end15
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7236
  %call1 = call i32 @active_insn_p(%struct.rtx_def* %7), !dbg !7239
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7239
  br i1 %tobool2, label %land.lhs.true, label %if.end12, !dbg !7240

land.lhs.true:                                    ; preds = %while.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7241
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7241
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !7241
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 4, !dbg !7241
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !7241
  %9 = load i32, i32* %rt_int, align 8, !dbg !7241
  %tobool6 = icmp ne i32 %9, 0, !dbg !7241
  br i1 %tobool6, label %if.end12, label %if.then7, !dbg !7242

if.then7:                                         ; preds = %land.lhs.true
  %10 = load i32, i32* %loc.addr, align 4, !dbg !7243
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7244
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7244
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7244
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !7244
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !7244
  store i32 %10, i32* %rt_int11, align 8, !dbg !7245
  br label %if.end12, !dbg !7244

if.end12:                                         ; preds = %if.then7, %land.lhs.true, %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7246
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7248
  %cmp13 = icmp eq %struct.rtx_def* %12, %13, !dbg !7249
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !7250

if.then14:                                        ; preds = %if.end12
  br label %while.end, !dbg !7251

if.end15:                                         ; preds = %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7252
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7252
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7252
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !7252
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !7252
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !7252
  store %struct.rtx_def* %15, %struct.rtx_def** %after.addr, align 8, !dbg !7253
  br label %while.body, !dbg !7235, !llvm.loop !7254

while.end:                                        ; preds = %if.then14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7256
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !7257
  br label %return, !dbg !7257

return:                                           ; preds = %while.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7258
  ret %struct.rtx_def* %17, !dbg !7258
}

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %after) #0 !dbg !7259 {
entry:
  %after.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7262, metadata !DIExpression()), !dbg !7263
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 11), !dbg !7264
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !7263
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7265
  %inc = add nsw i32 %0, 1, !dbg !7265
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7265
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7266
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7266
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7266
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7266
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7266
  store i32 %0, i32* %rt_int, align 8, !dbg !7267
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7268
  %3 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7269
  call void @add_insn_after(%struct.rtx_def* %2, %struct.rtx_def* %3, %struct.basic_block_def* null), !dbg !7270
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7271
  ret %struct.rtx_def* %4, !dbg !7272
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %pattern) #0 !dbg !7273 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !7274, metadata !DIExpression()), !dbg !7275
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7276, metadata !DIExpression()), !dbg !7277
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 8), !dbg !7278
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !7279
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7280
  %inc = add nsw i32 %0, 1, !dbg !7280
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7280
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7281
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7281
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7281
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7281
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7281
  store i32 %0, i32* %rt_int, align 8, !dbg !7282
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !7283
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7284
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7284
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7284
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !7284
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7284
  store %struct.rtx_def* %2, %struct.rtx_def** %rt_rtx, align 8, !dbg !7285
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7286
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7286
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7286
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !7286
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !7286
  store i32 -1, i32* %rt_int7, align 8, !dbg !7287
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7288
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7288
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7288
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 7, !dbg !7288
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !7288
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx11, align 8, !dbg !7289
  %call12 = call i32 @curr_insn_locator(), !dbg !7290
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7291
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7291
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7291
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 4, !dbg !7291
  %rt_int16 = bitcast %union.rtunion_def* %arrayidx15 to i32*, !dbg !7291
  store i32 %call12, i32* %rt_int16, align 8, !dbg !7292
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7293
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7293
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7293
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 3, !dbg !7293
  %rt_bb = bitcast %union.rtunion_def* %arrayidx19 to %struct.basic_block_def**, !dbg !7293
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !7294
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7295
  ret %struct.rtx_def* %8, !dbg !7296
}

declare dso_local i32 @curr_insn_locator() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @make_debug_insn_raw(%struct.rtx_def* %pattern) #0 !dbg !7297 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !7298, metadata !DIExpression()), !dbg !7299
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7300, metadata !DIExpression()), !dbg !7301
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 7), !dbg !7302
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !7303
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !7304
  %inc = add nsw i32 %0, 1, !dbg !7304
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !7304
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7305
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7305
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7305
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7305
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7305
  store i32 %0, i32* %rt_int, align 8, !dbg !7306
  %2 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !7307
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7309
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 117, !dbg !7309
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !7309
  %4 = load i32, i32* %value, align 8, !dbg !7309
  %cmp = icmp sgt i32 %2, %4, !dbg !7310
  br i1 %cmp, label %if.then, label %if.end, !dbg !7311

if.then:                                          ; preds = %entry
  %5 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7312
  %inc2 = add nsw i32 %5, 1, !dbg !7312
  store i32 %inc2, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7312
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7313
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7313
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !7313
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 0, !dbg !7313
  %rt_int6 = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !7313
  store i32 %5, i32* %rt_int6, align 8, !dbg !7314
  br label %if.end, !dbg !7313

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !7315
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7316
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7316
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !7316
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 5, !dbg !7316
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !7316
  store %struct.rtx_def* %7, %struct.rtx_def** %rt_rtx, align 8, !dbg !7317
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7318
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7318
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !7318
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 6, !dbg !7318
  %rt_int13 = bitcast %union.rtunion_def* %arrayidx12 to i32*, !dbg !7318
  store i32 -1, i32* %rt_int13, align 8, !dbg !7319
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7320
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7320
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !7320
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 7, !dbg !7320
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !7320
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx17, align 8, !dbg !7321
  %call18 = call i32 @curr_insn_locator(), !dbg !7322
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7323
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7323
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7323
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 4, !dbg !7323
  %rt_int22 = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !7323
  store i32 %call18, i32* %rt_int22, align 8, !dbg !7324
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7325
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7325
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !7325
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 3, !dbg !7325
  %rt_bb = bitcast %union.rtunion_def* %arrayidx25 to %struct.basic_block_def**, !dbg !7325
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !7326
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7327
  ret %struct.rtx_def* %13, !dbg !7328
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @make_jump_insn_raw(%struct.rtx_def* %pattern) #0 !dbg !7329 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !7330, metadata !DIExpression()), !dbg !7331
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7332, metadata !DIExpression()), !dbg !7333
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 9), !dbg !7334
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !7335
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7336
  %inc = add nsw i32 %0, 1, !dbg !7336
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !7336
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7337
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7337
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7337
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7337
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7337
  store i32 %0, i32* %rt_int, align 8, !dbg !7338
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !7339
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7340
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7340
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7340
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !7340
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7340
  store %struct.rtx_def* %2, %struct.rtx_def** %rt_rtx, align 8, !dbg !7341
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7342
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7342
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7342
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !7342
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !7342
  store i32 -1, i32* %rt_int7, align 8, !dbg !7343
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7344
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7344
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7344
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 7, !dbg !7344
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !7344
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx11, align 8, !dbg !7345
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7346
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7346
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !7346
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 8, !dbg !7346
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !7346
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx15, align 8, !dbg !7347
  %call16 = call i32 @curr_insn_locator(), !dbg !7348
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7349
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7349
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7349
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 4, !dbg !7349
  %rt_int20 = bitcast %union.rtunion_def* %arrayidx19 to i32*, !dbg !7349
  store i32 %call16, i32* %rt_int20, align 8, !dbg !7350
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7351
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7351
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !7351
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 3, !dbg !7351
  %rt_bb = bitcast %union.rtunion_def* %arrayidx23 to %struct.basic_block_def**, !dbg !7351
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !7352
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7353
  ret %struct.rtx_def* %9, !dbg !7354
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_insn(%struct.rtx_def* %insn) #0 !dbg !7355 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7356, metadata !DIExpression()), !dbg !7357
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7358
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7359
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7359
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7359
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7359
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7359
  store %struct.rtx_def* %0, %struct.rtx_def** %rt_rtx, align 8, !dbg !7360
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7361
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7361
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7361
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !7361
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7361
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7362
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7363
  %cmp = icmp ne %struct.rtx_def* null, %3, !dbg !7365
  br i1 %cmp, label %if.then, label %if.end, !dbg !7366

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7367
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7368
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7368
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7368
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 2, !dbg !7368
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !7368
  store %struct.rtx_def* %4, %struct.rtx_def** %rt_rtx8, align 8, !dbg !7369
  br label %if.end, !dbg !7368

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7370
  %cmp9 = icmp eq %struct.rtx_def* null, %6, !dbg !7372
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !7373

if.then10:                                        ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7374
  store %struct.rtx_def* %7, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7375
  br label %if.end11, !dbg !7376

if.end11:                                         ; preds = %if.then10, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7377
  store %struct.rtx_def* %8, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7378
  ret void, !dbg !7379
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_insn_after(%struct.rtx_def* %insn, %struct.rtx_def* %after, %struct.basic_block_def* %bb) #0 !dbg !7380 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %stack = alloca %struct.sequence_stack*, align 8
  %sequence = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7383, metadata !DIExpression()), !dbg !7384
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7385, metadata !DIExpression()), !dbg !7386
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7387, metadata !DIExpression()), !dbg !7388
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !7389, metadata !DIExpression()), !dbg !7390
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7391
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7391
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7391
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7391
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7391
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7391
  store %struct.rtx_def* %1, %struct.rtx_def** %next, align 8, !dbg !7390
  %2 = load i32, i32* @optimize, align 4, !dbg !7392
  %tobool = icmp ne i32 %2, 0, !dbg !7392
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !7392

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7392
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7392
  %bf.load = load i32, i32* %4, align 8, !dbg !7392
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !7392
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7392
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !7392
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7392

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3723, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7392
  br label %cond.end, !dbg !7392

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !7392

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7392
  %5 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7393
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7394
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7394
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7394
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 2, !dbg !7394
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !7394
  store %struct.rtx_def* %5, %struct.rtx_def** %rt_rtx5, align 8, !dbg !7395
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7396
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7397
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7397
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !7397
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !7397
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !7397
  store %struct.rtx_def* %7, %struct.rtx_def** %rt_rtx9, align 8, !dbg !7398
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7399
  %tobool10 = icmp ne %struct.rtx_def* %9, null, !dbg !7399
  br i1 %tobool10, label %if.then, label %if.else, !dbg !7401

if.then:                                          ; preds = %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7402
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7404
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7404
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !7404
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 1, !dbg !7404
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !7404
  store %struct.rtx_def* %10, %struct.rtx_def** %rt_rtx14, align 8, !dbg !7405
  %12 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7406
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7406
  %bf.load15 = load i32, i32* %13, align 8, !dbg !7406
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !7406
  %cmp = icmp eq i32 %bf.clear16, 8, !dbg !7406
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7408

land.lhs.true:                                    ; preds = %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7409
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7409
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7409
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 5, !dbg !7409
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !7409
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !7409
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !7409
  %bf.load21 = load i32, i32* %16, align 8, !dbg !7409
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !7409
  %cmp23 = icmp eq i32 %bf.clear22, 5, !dbg !7410
  br i1 %cmp23, label %if.then24, label %if.end, !dbg !7411

if.then24:                                        ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7412
  %18 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7413
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7413
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !7413
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 5, !dbg !7413
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !7413
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !7413
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7413
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7413
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !7413
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtvec_def**, !dbg !7413
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7413
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 1, !dbg !7413
  %arrayidx32 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !7413
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8, !dbg !7413
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7413
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7413
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !7413
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !7413
  store %struct.rtx_def* %17, %struct.rtx_def** %rt_rtx36, align 8, !dbg !7414
  br label %if.end, !dbg !7413

if.end:                                           ; preds = %if.then24, %land.lhs.true, %if.then
  br label %if.end52, !dbg !7415

if.else:                                          ; preds = %cond.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7416
  %23 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7418
  %cmp37 = icmp eq %struct.rtx_def* %22, %23, !dbg !7419
  br i1 %cmp37, label %if.then38, label %if.else39, !dbg !7420

if.then38:                                        ; preds = %if.else
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7421
  store %struct.rtx_def* %24, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7422
  br label %if.end51, !dbg !7423

if.else39:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !7424, metadata !DIExpression()), !dbg !7426
  %25 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !7427
  store %struct.sequence_stack* %25, %struct.sequence_stack** %stack, align 8, !dbg !7426
  br label %for.cond, !dbg !7428

for.cond:                                         ; preds = %for.inc, %if.else39
  %26 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7429
  %tobool40 = icmp ne %struct.sequence_stack* %26, null, !dbg !7432
  br i1 %tobool40, label %for.body, label %for.end, !dbg !7432

for.body:                                         ; preds = %for.cond
  %27 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7433
  %28 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7435
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %28, i32 0, i32 1, !dbg !7436
  %29 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7436
  %cmp41 = icmp eq %struct.rtx_def* %27, %29, !dbg !7437
  br i1 %cmp41, label %if.then42, label %if.end44, !dbg !7438

if.then42:                                        ; preds = %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7439
  %31 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7441
  %last43 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %31, i32 0, i32 1, !dbg !7442
  store %struct.rtx_def* %30, %struct.rtx_def** %last43, align 8, !dbg !7443
  br label %for.end, !dbg !7444

if.end44:                                         ; preds = %for.body
  br label %for.inc, !dbg !7436

for.inc:                                          ; preds = %if.end44
  %32 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7445
  %next45 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %32, i32 0, i32 2, !dbg !7446
  %33 = load %struct.sequence_stack*, %struct.sequence_stack** %next45, align 8, !dbg !7446
  store %struct.sequence_stack* %33, %struct.sequence_stack** %stack, align 8, !dbg !7447
  br label %for.cond, !dbg !7448, !llvm.loop !7449

for.end:                                          ; preds = %if.then42, %for.cond
  %34 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7451
  %tobool46 = icmp ne %struct.sequence_stack* %34, null, !dbg !7451
  br i1 %tobool46, label %cond.false48, label %cond.true47, !dbg !7451

cond.true47:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7451
  br label %cond.end49, !dbg !7451

cond.false48:                                     ; preds = %for.end
  br label %cond.end49, !dbg !7451

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !7451
  br label %if.end51

if.end51:                                         ; preds = %cond.end49, %if.then38
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7452
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7452
  %bf.load53 = load i32, i32* %36, align 8, !dbg !7452
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !7452
  %cmp55 = icmp eq i32 %bf.clear54, 11, !dbg !7452
  br i1 %cmp55, label %if.end106, label %land.lhs.true56, !dbg !7454

land.lhs.true56:                                  ; preds = %if.end52
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7455
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7455
  %bf.load57 = load i32, i32* %38, align 8, !dbg !7455
  %bf.clear58 = and i32 %bf.load57, 65535, !dbg !7455
  %cmp59 = icmp eq i32 %bf.clear58, 11, !dbg !7455
  br i1 %cmp59, label %if.end106, label %land.lhs.true60, !dbg !7456

land.lhs.true60:                                  ; preds = %land.lhs.true56
  %39 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7457
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !7457
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !7457
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 3, !dbg !7457
  %rt_bb = bitcast %union.rtunion_def* %arrayidx63 to %struct.basic_block_def**, !dbg !7457
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7457
  store %struct.basic_block_def* %40, %struct.basic_block_def** %bb.addr, align 8, !dbg !7458
  %tobool64 = icmp ne %struct.basic_block_def* %40, null, !dbg !7458
  br i1 %tobool64, label %if.then65, label %if.end106, !dbg !7459

if.then65:                                        ; preds = %land.lhs.true60
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7460
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7460
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !7460
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !7460
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 3, !dbg !7460
  %rt_bb69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.basic_block_def**, !dbg !7460
  store %struct.basic_block_def* %41, %struct.basic_block_def** %rt_bb69, align 8, !dbg !7460
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7462
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !7462
  %bf.load70 = load i32, i32* %44, align 8, !dbg !7462
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !7462
  %cmp72 = icmp eq i32 %bf.clear71, 8, !dbg !7462
  br i1 %cmp72, label %if.then85, label %lor.lhs.false73, !dbg !7462

lor.lhs.false73:                                  ; preds = %if.then65
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7462
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !7462
  %bf.load74 = load i32, i32* %46, align 8, !dbg !7462
  %bf.clear75 = and i32 %bf.load74, 65535, !dbg !7462
  %cmp76 = icmp eq i32 %bf.clear75, 7, !dbg !7462
  br i1 %cmp76, label %if.then85, label %lor.lhs.false77, !dbg !7462

lor.lhs.false77:                                  ; preds = %lor.lhs.false73
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7462
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !7462
  %bf.load78 = load i32, i32* %48, align 8, !dbg !7462
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !7462
  %cmp80 = icmp eq i32 %bf.clear79, 9, !dbg !7462
  br i1 %cmp80, label %if.then85, label %lor.lhs.false81, !dbg !7462

lor.lhs.false81:                                  ; preds = %lor.lhs.false77
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7462
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !7462
  %bf.load82 = load i32, i32* %50, align 8, !dbg !7462
  %bf.clear83 = and i32 %bf.load82, 65535, !dbg !7462
  %cmp84 = icmp eq i32 %bf.clear83, 10, !dbg !7462
  br i1 %cmp84, label %if.then85, label %if.end86, !dbg !7464

if.then85:                                        ; preds = %lor.lhs.false81, %lor.lhs.false77, %lor.lhs.false73, %if.then65
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7465
  %call = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %51), !dbg !7466
  br label %if.end86, !dbg !7466

if.end86:                                         ; preds = %if.then85, %lor.lhs.false81
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7467
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 7, !dbg !7467
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7467
  %53 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7467
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %53, i32 0, i32 1, !dbg !7467
  %54 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7467
  %55 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7469
  %cmp87 = icmp eq %struct.rtx_def* %54, %55, !dbg !7470
  br i1 %cmp87, label %land.lhs.true88, label %if.end105, !dbg !7471

land.lhs.true88:                                  ; preds = %if.end86
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7472
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !7472
  %bf.load89 = load i32, i32* %57, align 8, !dbg !7472
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !7472
  %cmp91 = icmp eq i32 %bf.clear90, 11, !dbg !7472
  br i1 %cmp91, label %if.end105, label %land.lhs.true92, !dbg !7473

land.lhs.true92:                                  ; preds = %land.lhs.true88
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7474
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !7474
  %bf.load93 = load i32, i32* %59, align 8, !dbg !7474
  %bf.clear94 = and i32 %bf.load93, 65535, !dbg !7474
  %cmp95 = icmp eq i32 %bf.clear94, 13, !dbg !7474
  br i1 %cmp95, label %land.lhs.true96, label %if.then101, !dbg !7474

land.lhs.true96:                                  ; preds = %land.lhs.true92
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7474
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !7474
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !7474
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 5, !dbg !7474
  %rt_int = bitcast %union.rtunion_def* %arrayidx99 to i32*, !dbg !7474
  %61 = load i32, i32* %rt_int, align 8, !dbg !7474
  %cmp100 = icmp eq i32 %61, 10, !dbg !7474
  br i1 %cmp100, label %if.end105, label %if.then101, !dbg !7475

if.then101:                                       ; preds = %land.lhs.true96, %land.lhs.true92
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7476
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7477
  %il102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 7, !dbg !7477
  %rtl103 = bitcast %union.basic_block_il_dependent* %il102 to %struct.rtl_bb_info**, !dbg !7477
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl103, align 8, !dbg !7477
  %end_104 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 1, !dbg !7477
  store %struct.rtx_def* %62, %struct.rtx_def** %end_104, align 8, !dbg !7478
  br label %if.end105, !dbg !7477

if.end105:                                        ; preds = %if.then101, %land.lhs.true96, %land.lhs.true88, %if.end86
  br label %if.end106, !dbg !7479

if.end106:                                        ; preds = %if.end105, %land.lhs.true60, %land.lhs.true56, %if.end52
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7480
  %66 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7481
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !7481
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !7481
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 2, !dbg !7481
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !7481
  store %struct.rtx_def* %65, %struct.rtx_def** %rt_rtx110, align 8, !dbg !7482
  %67 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7483
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !7483
  %bf.load111 = load i32, i32* %68, align 8, !dbg !7483
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !7483
  %cmp113 = icmp eq i32 %bf.clear112, 8, !dbg !7483
  br i1 %cmp113, label %land.lhs.true114, label %if.end141, !dbg !7485

land.lhs.true114:                                 ; preds = %if.end106
  %69 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7486
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !7486
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !7486
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 5, !dbg !7486
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !7486
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !7486
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !7486
  %bf.load119 = load i32, i32* %71, align 8, !dbg !7486
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !7486
  %cmp121 = icmp eq i32 %bf.clear120, 5, !dbg !7487
  br i1 %cmp121, label %if.then122, label %if.end141, !dbg !7488

if.then122:                                       ; preds = %land.lhs.true114
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sequence, metadata !7489, metadata !DIExpression()), !dbg !7491
  %72 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7492
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !7492
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !7492
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 5, !dbg !7492
  %rt_rtx126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**, !dbg !7492
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx126, align 8, !dbg !7492
  store %struct.rtx_def* %73, %struct.rtx_def** %sequence, align 8, !dbg !7491
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7493
  %75 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7494
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !7494
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !7494
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 0, !dbg !7494
  %rt_rtvec130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtvec_def**, !dbg !7494
  %76 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec130, align 8, !dbg !7494
  %elem131 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %76, i32 0, i32 1, !dbg !7494
  %77 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7494
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !7494
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !7494
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 0, !dbg !7494
  %rt_rtvec135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtvec_def**, !dbg !7494
  %78 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec135, align 8, !dbg !7494
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %78, i32 0, i32 0, !dbg !7494
  %79 = load i32, i32* %num_elem, align 8, !dbg !7494
  %sub = sub nsw i32 %79, 1, !dbg !7494
  %idxprom = sext i32 %sub to i64, !dbg !7494
  %arrayidx136 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem131, i64 0, i64 %idxprom, !dbg !7494
  %80 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx136, align 8, !dbg !7494
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !7494
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !7494
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 2, !dbg !7494
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !7494
  store %struct.rtx_def* %74, %struct.rtx_def** %rt_rtx140, align 8, !dbg !7495
  br label %if.end141, !dbg !7496

if.end141:                                        ; preds = %if.then122, %land.lhs.true114, %if.end106
  ret void, !dbg !7497
}

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_insn_before(%struct.rtx_def* %insn, %struct.rtx_def* %before, %struct.basic_block_def* %bb) #0 !dbg !7498 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %sequence = alloca %struct.rtx_def*, align 8
  %stack = alloca %struct.sequence_stack*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7499, metadata !DIExpression()), !dbg !7500
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !7501, metadata !DIExpression()), !dbg !7502
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7503, metadata !DIExpression()), !dbg !7504
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !7505, metadata !DIExpression()), !dbg !7506
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7507
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7507
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7507
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7507
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7507
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7507
  store %struct.rtx_def* %1, %struct.rtx_def** %prev, align 8, !dbg !7506
  %2 = load i32, i32* @optimize, align 4, !dbg !7508
  %tobool = icmp ne i32 %2, 0, !dbg !7508
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !7508

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7508
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7508
  %bf.load = load i32, i32* %4, align 8, !dbg !7508
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !7508
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7508
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !7508
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7508

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3785, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7508
  br label %cond.end, !dbg !7508

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !7508

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7508
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7509
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7510
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7510
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7510
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !7510
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !7510
  store %struct.rtx_def* %5, %struct.rtx_def** %rt_rtx5, align 8, !dbg !7511
  %7 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7512
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7513
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7513
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !7513
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 2, !dbg !7513
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !7513
  store %struct.rtx_def* %7, %struct.rtx_def** %rt_rtx9, align 8, !dbg !7514
  %9 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7515
  %tobool10 = icmp ne %struct.rtx_def* %9, null, !dbg !7515
  br i1 %tobool10, label %if.then, label %if.else, !dbg !7517

if.then:                                          ; preds = %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7518
  %11 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7520
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7520
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !7520
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !7520
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !7520
  store %struct.rtx_def* %10, %struct.rtx_def** %rt_rtx14, align 8, !dbg !7521
  %12 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7522
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7522
  %bf.load15 = load i32, i32* %13, align 8, !dbg !7522
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !7522
  %cmp = icmp eq i32 %bf.clear16, 8, !dbg !7522
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7524

land.lhs.true:                                    ; preds = %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7525
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7525
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7525
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 5, !dbg !7525
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !7525
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !7525
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !7525
  %bf.load21 = load i32, i32* %16, align 8, !dbg !7525
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !7525
  %cmp23 = icmp eq i32 %bf.clear22, 5, !dbg !7526
  br i1 %cmp23, label %if.then24, label %if.end, !dbg !7527

if.then24:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sequence, metadata !7528, metadata !DIExpression()), !dbg !7530
  %17 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7531
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7531
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !7531
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 5, !dbg !7531
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !7531
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !7531
  store %struct.rtx_def* %18, %struct.rtx_def** %sequence, align 8, !dbg !7530
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7532
  %20 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7533
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !7533
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7533
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !7533
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtvec_def**, !dbg !7533
  %21 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7533
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %21, i32 0, i32 1, !dbg !7533
  %22 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7533
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7533
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !7533
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !7533
  %rt_rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**, !dbg !7533
  %23 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec35, align 8, !dbg !7533
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %23, i32 0, i32 0, !dbg !7533
  %24 = load i32, i32* %num_elem, align 8, !dbg !7533
  %sub = sub nsw i32 %24, 1, !dbg !7533
  %idxprom = sext i32 %sub to i64, !dbg !7533
  %arrayidx36 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !7533
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8, !dbg !7533
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !7533
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !7533
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !7533
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !7533
  store %struct.rtx_def* %19, %struct.rtx_def** %rt_rtx40, align 8, !dbg !7534
  br label %if.end, !dbg !7535

if.end:                                           ; preds = %if.then24, %land.lhs.true, %if.then
  br label %if.end55, !dbg !7536

if.else:                                          ; preds = %cond.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7537
  %27 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7539
  %cmp41 = icmp eq %struct.rtx_def* %26, %27, !dbg !7540
  br i1 %cmp41, label %if.then42, label %if.else43, !dbg !7541

if.then42:                                        ; preds = %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7542
  store %struct.rtx_def* %28, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7543
  br label %if.end54, !dbg !7544

if.else43:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !7545, metadata !DIExpression()), !dbg !7547
  %29 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !7548
  store %struct.sequence_stack* %29, %struct.sequence_stack** %stack, align 8, !dbg !7547
  br label %for.cond, !dbg !7549

for.cond:                                         ; preds = %for.inc, %if.else43
  %30 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7550
  %tobool44 = icmp ne %struct.sequence_stack* %30, null, !dbg !7553
  br i1 %tobool44, label %for.body, label %for.end, !dbg !7553

for.body:                                         ; preds = %for.cond
  %31 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7554
  %32 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7556
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %32, i32 0, i32 0, !dbg !7557
  %33 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7557
  %cmp45 = icmp eq %struct.rtx_def* %31, %33, !dbg !7558
  br i1 %cmp45, label %if.then46, label %if.end48, !dbg !7559

if.then46:                                        ; preds = %for.body
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7560
  %35 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7562
  %first47 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %35, i32 0, i32 0, !dbg !7563
  store %struct.rtx_def* %34, %struct.rtx_def** %first47, align 8, !dbg !7564
  br label %for.end, !dbg !7565

if.end48:                                         ; preds = %for.body
  br label %for.inc, !dbg !7557

for.inc:                                          ; preds = %if.end48
  %36 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7566
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %36, i32 0, i32 2, !dbg !7567
  %37 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !7567
  store %struct.sequence_stack* %37, %struct.sequence_stack** %stack, align 8, !dbg !7568
  br label %for.cond, !dbg !7569, !llvm.loop !7570

for.end:                                          ; preds = %if.then46, %for.cond
  %38 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7572
  %tobool49 = icmp ne %struct.sequence_stack* %38, null, !dbg !7572
  br i1 %tobool49, label %cond.false51, label %cond.true50, !dbg !7572

cond.true50:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3812, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7572
  br label %cond.end52, !dbg !7572

cond.false51:                                     ; preds = %for.end
  br label %cond.end52, !dbg !7572

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !7572
  br label %if.end54

if.end54:                                         ; preds = %cond.end52, %if.then42
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7573
  %tobool56 = icmp ne %struct.basic_block_def* %39, null, !dbg !7573
  br i1 %tobool56, label %if.end69, label %land.lhs.true57, !dbg !7575

land.lhs.true57:                                  ; preds = %if.end55
  %40 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7576
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !7576
  %bf.load58 = load i32, i32* %41, align 8, !dbg !7576
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !7576
  %cmp60 = icmp eq i32 %bf.clear59, 11, !dbg !7576
  br i1 %cmp60, label %if.end69, label %land.lhs.true61, !dbg !7577

land.lhs.true61:                                  ; preds = %land.lhs.true57
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7578
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !7578
  %bf.load62 = load i32, i32* %43, align 8, !dbg !7578
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !7578
  %cmp64 = icmp eq i32 %bf.clear63, 11, !dbg !7578
  br i1 %cmp64, label %if.end69, label %if.then65, !dbg !7579

if.then65:                                        ; preds = %land.lhs.true61
  %44 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7580
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !7580
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !7580
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 3, !dbg !7580
  %rt_bb = bitcast %union.rtunion_def* %arrayidx68 to %struct.basic_block_def**, !dbg !7580
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7580
  store %struct.basic_block_def* %45, %struct.basic_block_def** %bb.addr, align 8, !dbg !7581
  br label %if.end69, !dbg !7582

if.end69:                                         ; preds = %if.then65, %land.lhs.true61, %land.lhs.true57, %if.end55
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7583
  %tobool70 = icmp ne %struct.basic_block_def* %46, null, !dbg !7583
  br i1 %tobool70, label %if.then71, label %if.end111, !dbg !7585

if.then71:                                        ; preds = %if.end69
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7586
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7586
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !7586
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !7586
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 3, !dbg !7586
  %rt_bb75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.basic_block_def**, !dbg !7586
  store %struct.basic_block_def* %47, %struct.basic_block_def** %rt_bb75, align 8, !dbg !7586
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7588
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !7588
  %bf.load76 = load i32, i32* %50, align 8, !dbg !7588
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !7588
  %cmp78 = icmp eq i32 %bf.clear77, 8, !dbg !7588
  br i1 %cmp78, label %if.then91, label %lor.lhs.false79, !dbg !7588

lor.lhs.false79:                                  ; preds = %if.then71
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7588
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !7588
  %bf.load80 = load i32, i32* %52, align 8, !dbg !7588
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !7588
  %cmp82 = icmp eq i32 %bf.clear81, 7, !dbg !7588
  br i1 %cmp82, label %if.then91, label %lor.lhs.false83, !dbg !7588

lor.lhs.false83:                                  ; preds = %lor.lhs.false79
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7588
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !7588
  %bf.load84 = load i32, i32* %54, align 8, !dbg !7588
  %bf.clear85 = and i32 %bf.load84, 65535, !dbg !7588
  %cmp86 = icmp eq i32 %bf.clear85, 9, !dbg !7588
  br i1 %cmp86, label %if.then91, label %lor.lhs.false87, !dbg !7588

lor.lhs.false87:                                  ; preds = %lor.lhs.false83
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7588
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !7588
  %bf.load88 = load i32, i32* %56, align 8, !dbg !7588
  %bf.clear89 = and i32 %bf.load88, 65535, !dbg !7588
  %cmp90 = icmp eq i32 %bf.clear89, 10, !dbg !7588
  br i1 %cmp90, label %if.then91, label %if.end92, !dbg !7590

if.then91:                                        ; preds = %lor.lhs.false87, %lor.lhs.false83, %lor.lhs.false79, %if.then71
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7591
  %call = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %57), !dbg !7592
  br label %if.end92, !dbg !7592

if.end92:                                         ; preds = %if.then91, %lor.lhs.false87
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7593
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 7, !dbg !7593
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7593
  %59 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7593
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %59, i32 0, i32 0, !dbg !7593
  %60 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7593
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7593
  %cmp93 = icmp ne %struct.rtx_def* %60, %61, !dbg !7593
  br i1 %cmp93, label %cond.false108, label %lor.lhs.false94, !dbg !7593

lor.lhs.false94:                                  ; preds = %if.end92
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7593
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !7593
  %bf.load95 = load i32, i32* %63, align 8, !dbg !7593
  %bf.clear96 = and i32 %bf.load95, 65535, !dbg !7593
  %cmp97 = icmp eq i32 %bf.clear96, 11, !dbg !7593
  br i1 %cmp97, label %cond.false108, label %lor.lhs.false98, !dbg !7593

lor.lhs.false98:                                  ; preds = %lor.lhs.false94
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7593
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !7593
  %bf.load99 = load i32, i32* %65, align 8, !dbg !7593
  %bf.clear100 = and i32 %bf.load99, 65535, !dbg !7593
  %cmp101 = icmp eq i32 %bf.clear100, 13, !dbg !7593
  br i1 %cmp101, label %land.lhs.true102, label %cond.true107, !dbg !7593

land.lhs.true102:                                 ; preds = %lor.lhs.false98
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7593
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !7593
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !7593
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 5, !dbg !7593
  %rt_int = bitcast %union.rtunion_def* %arrayidx105 to i32*, !dbg !7593
  %67 = load i32, i32* %rt_int, align 8, !dbg !7593
  %cmp106 = icmp eq i32 %67, 10, !dbg !7593
  br i1 %cmp106, label %cond.false108, label %cond.true107, !dbg !7593

cond.true107:                                     ; preds = %land.lhs.true102, %lor.lhs.false98
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3830, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7593
  br label %cond.end109, !dbg !7593

cond.false108:                                    ; preds = %land.lhs.true102, %lor.lhs.false94, %if.end92
  br label %cond.end109, !dbg !7593

cond.end109:                                      ; preds = %cond.false108, %cond.true107
  %cond110 = phi i32 [ 0, %cond.true107 ], [ 0, %cond.false108 ], !dbg !7593
  br label %if.end111, !dbg !7594

if.end111:                                        ; preds = %cond.end109, %if.end69
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7595
  %69 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7596
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !7596
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !7596
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 1, !dbg !7596
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !7596
  store %struct.rtx_def* %68, %struct.rtx_def** %rt_rtx115, align 8, !dbg !7597
  %70 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7598
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !7598
  %bf.load116 = load i32, i32* %71, align 8, !dbg !7598
  %bf.clear117 = and i32 %bf.load116, 65535, !dbg !7598
  %cmp118 = icmp eq i32 %bf.clear117, 8, !dbg !7598
  br i1 %cmp118, label %land.lhs.true119, label %if.end142, !dbg !7600

land.lhs.true119:                                 ; preds = %if.end111
  %72 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7601
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !7601
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !7601
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 5, !dbg !7601
  %rt_rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**, !dbg !7601
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx123, align 8, !dbg !7601
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !7601
  %bf.load124 = load i32, i32* %74, align 8, !dbg !7601
  %bf.clear125 = and i32 %bf.load124, 65535, !dbg !7601
  %cmp126 = icmp eq i32 %bf.clear125, 5, !dbg !7602
  br i1 %cmp126, label %if.then127, label %if.end142, !dbg !7603

if.then127:                                       ; preds = %land.lhs.true119
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7604
  %76 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7605
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !7605
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !7605
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 5, !dbg !7605
  %rt_rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**, !dbg !7605
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx131, align 8, !dbg !7605
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !7605
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !7605
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 0, !dbg !7605
  %rt_rtvec135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtvec_def**, !dbg !7605
  %78 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec135, align 8, !dbg !7605
  %elem136 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %78, i32 0, i32 1, !dbg !7605
  %arrayidx137 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem136, i64 0, i64 0, !dbg !7605
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8, !dbg !7605
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !7605
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !7605
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 1, !dbg !7605
  %rt_rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**, !dbg !7605
  store %struct.rtx_def* %75, %struct.rtx_def** %rt_rtx141, align 8, !dbg !7606
  br label %if.end142, !dbg !7605

if.end142:                                        ; preds = %if.then127, %land.lhs.true119, %if.end111
  ret void, !dbg !7607
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_insn_deleted(%struct.rtx_def* %insn) #0 !dbg !7608 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7609, metadata !DIExpression()), !dbg !7610
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7611
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7611
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7611
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7611
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7611
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7611
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7612
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7612
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7612
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !7612
  %rt_int = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !7612
  %3 = load i32, i32* %rt_int, align 8, !dbg !7612
  call void @df_insn_delete(%struct.basic_block_def* %1, i32 %3), !dbg !7613
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7614
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7614
  %bf.load = load i32, i32* %5, align 8, !dbg !7614
  %bf.clear = and i32 %bf.load, -65536, !dbg !7614
  %bf.set = or i32 %bf.clear, 13, !dbg !7614
  store i32 %bf.set, i32* %5, align 8, !dbg !7614
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7615
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7615
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7615
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 5, !dbg !7615
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !7615
  store i32 0, i32* %rt_int7, align 8, !dbg !7616
  ret void, !dbg !7617
}

declare dso_local void @df_insn_delete(%struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_insn(%struct.rtx_def* %insn) #0 !dbg !7618 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %sequence = alloca %struct.rtx_def*, align 8
  %stack = alloca %struct.sequence_stack*, align 8
  %stack85 = alloca %struct.sequence_stack*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7619, metadata !DIExpression()), !dbg !7620
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !7621, metadata !DIExpression()), !dbg !7622
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7623
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7623
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7623
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7623
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7623
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7623
  store %struct.rtx_def* %1, %struct.rtx_def** %next, align 8, !dbg !7622
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !7624, metadata !DIExpression()), !dbg !7625
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7626
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7626
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7626
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !7626
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7626
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7626
  store %struct.rtx_def* %3, %struct.rtx_def** %prev, align 8, !dbg !7625
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7627, metadata !DIExpression()), !dbg !7628
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7629
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7629
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7629
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !7629
  %rt_int = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !7629
  %5 = load i32, i32* %rt_int, align 8, !dbg !7629
  call void @df_insn_delete(%struct.basic_block_def* null, i32 %5), !dbg !7630
  %6 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7631
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !7631
  br i1 %tobool, label %if.then, label %if.else, !dbg !7633

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7634
  %8 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7636
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7636
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7636
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 2, !dbg !7636
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !7636
  store %struct.rtx_def* %7, %struct.rtx_def** %rt_rtx11, align 8, !dbg !7637
  %9 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7638
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !7638
  %bf.load = load i32, i32* %10, align 8, !dbg !7638
  %bf.clear = and i32 %bf.load, 65535, !dbg !7638
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !7638
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7640

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7641
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7641
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !7641
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !7641
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !7641
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !7641
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7641
  %bf.load16 = load i32, i32* %13, align 8, !dbg !7641
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !7641
  %cmp18 = icmp eq i32 %bf.clear17, 5, !dbg !7642
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !7643

if.then19:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sequence, metadata !7644, metadata !DIExpression()), !dbg !7646
  %14 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7647
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7647
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7647
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !7647
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7647
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7647
  store %struct.rtx_def* %15, %struct.rtx_def** %sequence, align 8, !dbg !7646
  %16 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7648
  %17 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7649
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7649
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !7649
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !7649
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**, !dbg !7649
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7649
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1, !dbg !7649
  %19 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8, !dbg !7649
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7649
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !7649
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !7649
  %rt_rtvec30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtvec_def**, !dbg !7649
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec30, align 8, !dbg !7649
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 0, !dbg !7649
  %21 = load i32, i32* %num_elem, align 8, !dbg !7649
  %sub = sub nsw i32 %21, 1, !dbg !7649
  %idxprom = sext i32 %sub to i64, !dbg !7649
  %arrayidx31 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !7649
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8, !dbg !7649
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7649
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !7649
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 2, !dbg !7649
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !7649
  store %struct.rtx_def* %16, %struct.rtx_def** %rt_rtx35, align 8, !dbg !7650
  br label %if.end, !dbg !7651

if.end:                                           ; preds = %if.then19, %land.lhs.true, %if.then
  br label %if.end47, !dbg !7652

if.else:                                          ; preds = %entry
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7653
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7655
  %cmp36 = icmp eq %struct.rtx_def* %23, %24, !dbg !7656
  br i1 %cmp36, label %if.then37, label %if.else38, !dbg !7657

if.then37:                                        ; preds = %if.else
  %25 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7658
  store %struct.rtx_def* %25, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7659
  br label %if.end46, !dbg !7660

if.else38:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !7661, metadata !DIExpression()), !dbg !7663
  %26 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !7664
  store %struct.sequence_stack* %26, %struct.sequence_stack** %stack, align 8, !dbg !7663
  br label %for.cond, !dbg !7665

for.cond:                                         ; preds = %for.inc, %if.else38
  %27 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7666
  %tobool39 = icmp ne %struct.sequence_stack* %27, null, !dbg !7669
  br i1 %tobool39, label %for.body, label %for.end, !dbg !7669

for.body:                                         ; preds = %for.cond
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7670
  %29 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7672
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %29, i32 0, i32 0, !dbg !7673
  %30 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7673
  %cmp40 = icmp eq %struct.rtx_def* %28, %30, !dbg !7674
  br i1 %cmp40, label %if.then41, label %if.end43, !dbg !7675

if.then41:                                        ; preds = %for.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7676
  %32 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7678
  %first42 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %32, i32 0, i32 0, !dbg !7679
  store %struct.rtx_def* %31, %struct.rtx_def** %first42, align 8, !dbg !7680
  br label %for.end, !dbg !7681

if.end43:                                         ; preds = %for.body
  br label %for.inc, !dbg !7673

for.inc:                                          ; preds = %if.end43
  %33 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7682
  %next44 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %33, i32 0, i32 2, !dbg !7683
  %34 = load %struct.sequence_stack*, %struct.sequence_stack** %next44, align 8, !dbg !7683
  store %struct.sequence_stack* %34, %struct.sequence_stack** %stack, align 8, !dbg !7684
  br label %for.cond, !dbg !7685, !llvm.loop !7686

for.end:                                          ; preds = %if.then41, %for.cond
  %35 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !7688
  %tobool45 = icmp ne %struct.sequence_stack* %35, null, !dbg !7688
  br i1 %tobool45, label %cond.false, label %cond.true, !dbg !7688

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3884, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7688
  br label %cond.end, !dbg !7688

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !7688

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7688
  br label %if.end46

if.end46:                                         ; preds = %cond.end, %if.then37
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.end
  %36 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7689
  %tobool48 = icmp ne %struct.rtx_def* %36, null, !dbg !7689
  br i1 %tobool48, label %if.then49, label %if.else81, !dbg !7691

if.then49:                                        ; preds = %if.end47
  %37 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7692
  %38 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7694
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !7694
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !7694
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 1, !dbg !7694
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !7694
  store %struct.rtx_def* %37, %struct.rtx_def** %rt_rtx53, align 8, !dbg !7695
  %39 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7696
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !7696
  %bf.load54 = load i32, i32* %40, align 8, !dbg !7696
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !7696
  %cmp56 = icmp eq i32 %bf.clear55, 8, !dbg !7696
  br i1 %cmp56, label %land.lhs.true57, label %if.end80, !dbg !7698

land.lhs.true57:                                  ; preds = %if.then49
  %41 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7699
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !7699
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !7699
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !7699
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !7699
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !7699
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !7699
  %bf.load62 = load i32, i32* %43, align 8, !dbg !7699
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !7699
  %cmp64 = icmp eq i32 %bf.clear63, 5, !dbg !7700
  br i1 %cmp64, label %if.then65, label %if.end80, !dbg !7701

if.then65:                                        ; preds = %land.lhs.true57
  %44 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7702
  %45 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7703
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !7703
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !7703
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 5, !dbg !7703
  %rt_rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !7703
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx69, align 8, !dbg !7703
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7703
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !7703
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 0, !dbg !7703
  %rt_rtvec73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtvec_def**, !dbg !7703
  %47 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec73, align 8, !dbg !7703
  %elem74 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %47, i32 0, i32 1, !dbg !7703
  %arrayidx75 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem74, i64 0, i64 0, !dbg !7703
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx75, align 8, !dbg !7703
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !7703
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !7703
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 1, !dbg !7703
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !7703
  store %struct.rtx_def* %44, %struct.rtx_def** %rt_rtx79, align 8, !dbg !7704
  br label %if.end80, !dbg !7703

if.end80:                                         ; preds = %if.then65, %land.lhs.true57, %if.then49
  br label %if.end102, !dbg !7705

if.else81:                                        ; preds = %if.end47
  %49 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7706
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7708
  %cmp82 = icmp eq %struct.rtx_def* %49, %50, !dbg !7709
  br i1 %cmp82, label %if.then83, label %if.else84, !dbg !7710

if.then83:                                        ; preds = %if.else81
  %51 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7711
  store %struct.rtx_def* %51, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7712
  br label %if.end101, !dbg !7713

if.else84:                                        ; preds = %if.else81
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack85, metadata !7714, metadata !DIExpression()), !dbg !7716
  %52 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !7717
  store %struct.sequence_stack* %52, %struct.sequence_stack** %stack85, align 8, !dbg !7716
  br label %for.cond86, !dbg !7718

for.cond86:                                       ; preds = %for.inc93, %if.else84
  %53 = load %struct.sequence_stack*, %struct.sequence_stack** %stack85, align 8, !dbg !7719
  %tobool87 = icmp ne %struct.sequence_stack* %53, null, !dbg !7722
  br i1 %tobool87, label %for.body88, label %for.end95, !dbg !7722

for.body88:                                       ; preds = %for.cond86
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7723
  %55 = load %struct.sequence_stack*, %struct.sequence_stack** %stack85, align 8, !dbg !7725
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %55, i32 0, i32 1, !dbg !7726
  %56 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7726
  %cmp89 = icmp eq %struct.rtx_def* %54, %56, !dbg !7727
  br i1 %cmp89, label %if.then90, label %if.end92, !dbg !7728

if.then90:                                        ; preds = %for.body88
  %57 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7729
  %58 = load %struct.sequence_stack*, %struct.sequence_stack** %stack85, align 8, !dbg !7731
  %last91 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %58, i32 0, i32 1, !dbg !7732
  store %struct.rtx_def* %57, %struct.rtx_def** %last91, align 8, !dbg !7733
  br label %for.end95, !dbg !7734

if.end92:                                         ; preds = %for.body88
  br label %for.inc93, !dbg !7726

for.inc93:                                        ; preds = %if.end92
  %59 = load %struct.sequence_stack*, %struct.sequence_stack** %stack85, align 8, !dbg !7735
  %next94 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %59, i32 0, i32 2, !dbg !7736
  %60 = load %struct.sequence_stack*, %struct.sequence_stack** %next94, align 8, !dbg !7736
  store %struct.sequence_stack* %60, %struct.sequence_stack** %stack85, align 8, !dbg !7737
  br label %for.cond86, !dbg !7738, !llvm.loop !7739

for.end95:                                        ; preds = %if.then90, %for.cond86
  %61 = load %struct.sequence_stack*, %struct.sequence_stack** %stack85, align 8, !dbg !7741
  %tobool96 = icmp ne %struct.sequence_stack* %61, null, !dbg !7741
  br i1 %tobool96, label %cond.false98, label %cond.true97, !dbg !7741

cond.true97:                                      ; preds = %for.end95
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3906, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7741
  br label %cond.end99, !dbg !7741

cond.false98:                                     ; preds = %for.end95
  br label %cond.end99, !dbg !7741

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond100 = phi i32 [ 0, %cond.true97 ], [ 0, %cond.false98 ], !dbg !7741
  br label %if.end101

if.end101:                                        ; preds = %cond.end99, %if.then83
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.end80
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7742
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !7742
  %bf.load103 = load i32, i32* %63, align 8, !dbg !7742
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !7742
  %cmp105 = icmp eq i32 %bf.clear104, 11, !dbg !7742
  br i1 %cmp105, label %if.end149, label %land.lhs.true106, !dbg !7744

land.lhs.true106:                                 ; preds = %if.end102
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7745
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !7745
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !7745
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 3, !dbg !7745
  %rt_bb = bitcast %union.rtunion_def* %arrayidx109 to %struct.basic_block_def**, !dbg !7745
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7745
  store %struct.basic_block_def* %65, %struct.basic_block_def** %bb, align 8, !dbg !7746
  %tobool110 = icmp ne %struct.basic_block_def* %65, null, !dbg !7746
  br i1 %tobool110, label %if.then111, label %if.end149, !dbg !7747

if.then111:                                       ; preds = %land.lhs.true106
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7748
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !7748
  %bf.load112 = load i32, i32* %67, align 8, !dbg !7748
  %bf.clear113 = and i32 %bf.load112, 65535, !dbg !7748
  %cmp114 = icmp eq i32 %bf.clear113, 8, !dbg !7748
  br i1 %cmp114, label %if.then126, label %lor.lhs.false, !dbg !7748

lor.lhs.false:                                    ; preds = %if.then111
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7748
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !7748
  %bf.load115 = load i32, i32* %69, align 8, !dbg !7748
  %bf.clear116 = and i32 %bf.load115, 65535, !dbg !7748
  %cmp117 = icmp eq i32 %bf.clear116, 7, !dbg !7748
  br i1 %cmp117, label %if.then126, label %lor.lhs.false118, !dbg !7748

lor.lhs.false118:                                 ; preds = %lor.lhs.false
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7748
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !7748
  %bf.load119 = load i32, i32* %71, align 8, !dbg !7748
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !7748
  %cmp121 = icmp eq i32 %bf.clear120, 9, !dbg !7748
  br i1 %cmp121, label %if.then126, label %lor.lhs.false122, !dbg !7748

lor.lhs.false122:                                 ; preds = %lor.lhs.false118
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7748
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !7748
  %bf.load123 = load i32, i32* %73, align 8, !dbg !7748
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !7748
  %cmp125 = icmp eq i32 %bf.clear124, 10, !dbg !7748
  br i1 %cmp125, label %if.then126, label %if.end127, !dbg !7751

if.then126:                                       ; preds = %lor.lhs.false122, %lor.lhs.false118, %lor.lhs.false, %if.then111
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7752
  call void @df_set_bb_dirty(%struct.basic_block_def* %74), !dbg !7753
  br label %if.end127, !dbg !7753

if.end127:                                        ; preds = %if.then126, %lor.lhs.false122
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7754
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 7, !dbg !7754
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7754
  %76 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7754
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %76, i32 0, i32 0, !dbg !7754
  %77 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7754
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7756
  %cmp128 = icmp eq %struct.rtx_def* %77, %78, !dbg !7757
  br i1 %cmp128, label %if.then129, label %if.end140, !dbg !7758

if.then129:                                       ; preds = %if.end127
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7759
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !7759
  %bf.load130 = load i32, i32* %80, align 8, !dbg !7759
  %bf.clear131 = and i32 %bf.load130, 65535, !dbg !7759
  %cmp132 = icmp eq i32 %bf.clear131, 13, !dbg !7759
  br i1 %cmp132, label %cond.true133, label %cond.false134, !dbg !7759

cond.true133:                                     ; preds = %if.then129
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3917, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7759
  br label %cond.end135, !dbg !7759

cond.false134:                                    ; preds = %if.then129
  br label %cond.end135, !dbg !7759

cond.end135:                                      ; preds = %cond.false134, %cond.true133
  %cond136 = phi i32 [ 0, %cond.true133 ], [ 0, %cond.false134 ], !dbg !7759
  %81 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7761
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7762
  %il137 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 7, !dbg !7762
  %rtl138 = bitcast %union.basic_block_il_dependent* %il137 to %struct.rtl_bb_info**, !dbg !7762
  %83 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl138, align 8, !dbg !7762
  %head_139 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %83, i32 0, i32 0, !dbg !7762
  store %struct.rtx_def* %81, %struct.rtx_def** %head_139, align 8, !dbg !7763
  br label %if.end140, !dbg !7764

if.end140:                                        ; preds = %cond.end135, %if.end127
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7765
  %il141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 7, !dbg !7765
  %rtl142 = bitcast %union.basic_block_il_dependent* %il141 to %struct.rtl_bb_info**, !dbg !7765
  %85 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl142, align 8, !dbg !7765
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %85, i32 0, i32 1, !dbg !7765
  %86 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7765
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7767
  %cmp143 = icmp eq %struct.rtx_def* %86, %87, !dbg !7768
  br i1 %cmp143, label %if.then144, label %if.end148, !dbg !7769

if.then144:                                       ; preds = %if.end140
  %88 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7770
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7771
  %il145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 7, !dbg !7771
  %rtl146 = bitcast %union.basic_block_il_dependent* %il145 to %struct.rtl_bb_info**, !dbg !7771
  %90 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl146, align 8, !dbg !7771
  %end_147 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %90, i32 0, i32 1, !dbg !7771
  store %struct.rtx_def* %88, %struct.rtx_def** %end_147, align 8, !dbg !7772
  br label %if.end148, !dbg !7771

if.end148:                                        ; preds = %if.then144, %if.end140
  br label %if.end149, !dbg !7773

if.end149:                                        ; preds = %if.end148, %land.lhs.true106, %if.end102
  ret void, !dbg !7774
}

declare dso_local void @df_set_bb_dirty(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_function_usage_to(%struct.rtx_def* %call_insn, %struct.rtx_def* %call_fusage) #0 !dbg !7775 {
entry:
  %call_insn.addr = alloca %struct.rtx_def*, align 8
  %call_fusage.addr = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %call_insn, %struct.rtx_def** %call_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_insn.addr, metadata !7776, metadata !DIExpression()), !dbg !7777
  store %struct.rtx_def* %call_fusage, %struct.rtx_def** %call_fusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_fusage.addr, metadata !7778, metadata !DIExpression()), !dbg !7779
  %0 = load %struct.rtx_def*, %struct.rtx_def** %call_insn.addr, align 8, !dbg !7780
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !7780
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7780

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %call_insn.addr, align 8, !dbg !7780
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7780
  %bf.load = load i32, i32* %2, align 8, !dbg !7780
  %bf.clear = and i32 %bf.load, 65535, !dbg !7780
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !7780
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7780

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3930, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7780
  br label %cond.end, !dbg !7780

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7780

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7780
  %3 = load %struct.rtx_def*, %struct.rtx_def** %call_insn.addr, align 8, !dbg !7781
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7781
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7781
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 8, !dbg !7781
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7781
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7781
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !7781
  br i1 %tobool1, label %if.then, label %if.else, !dbg !7783

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !7784, metadata !DIExpression()), !dbg !7786
  %5 = load %struct.rtx_def*, %struct.rtx_def** %call_insn.addr, align 8, !dbg !7787
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7787
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7787
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 8, !dbg !7787
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !7787
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !7787
  store %struct.rtx_def* %6, %struct.rtx_def** %link, align 8, !dbg !7789
  br label %for.cond, !dbg !7790

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !7791
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7791
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !7791
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !7791
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !7791
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !7791
  %cmp10 = icmp ne %struct.rtx_def* %8, null, !dbg !7793
  br i1 %cmp10, label %for.body, label %for.end, !dbg !7794

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !7794

for.inc:                                          ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !7795
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7795
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !7795
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 1, !dbg !7795
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !7795
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !7795
  store %struct.rtx_def* %10, %struct.rtx_def** %link, align 8, !dbg !7796
  br label %for.cond, !dbg !7797, !llvm.loop !7798

for.end:                                          ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage.addr, align 8, !dbg !7800
  %12 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !7801
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7801
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !7801
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !7801
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !7801
  store %struct.rtx_def* %11, %struct.rtx_def** %rt_rtx18, align 8, !dbg !7802
  br label %if.end, !dbg !7803

if.else:                                          ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage.addr, align 8, !dbg !7804
  %14 = load %struct.rtx_def*, %struct.rtx_def** %call_insn.addr, align 8, !dbg !7805
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7805
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7805
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 8, !dbg !7805
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !7805
  store %struct.rtx_def* %13, %struct.rtx_def** %rt_rtx22, align 8, !dbg !7806
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !7807
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_insns_since(%struct.rtx_def* %from) #0 !dbg !7808 {
entry:
  %from.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !7809, metadata !DIExpression()), !dbg !7810
  %0 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7811
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !7813
  br i1 %cmp, label %if.then, label %if.else, !dbg !7814

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7815
  br label %if.end, !dbg !7816

if.else:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7817
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7817
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7817
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7817
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7817
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx, align 8, !dbg !7818
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7819
  store %struct.rtx_def* %2, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7820
  ret void, !dbg !7821
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reorder_insns_nobb(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after) #0 !dbg !7822 {
entry:
  %from.addr = alloca %struct.rtx_def*, align 8
  %to.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !7825, metadata !DIExpression()), !dbg !7826
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !7827, metadata !DIExpression()), !dbg !7828
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7829, metadata !DIExpression()), !dbg !7830
  %0 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7831
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7831
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7831
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7831
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7831
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7831
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !7831
  br i1 %tobool, label %if.then, label %if.end, !dbg !7833

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7834
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7834
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7834
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !7834
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7834
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7834
  %4 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7835
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7835
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7835
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !7835
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !7835
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !7835
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7835
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !7835
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 2, !dbg !7835
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !7835
  store %struct.rtx_def* %3, %struct.rtx_def** %rt_rtx12, align 8, !dbg !7836
  br label %if.end, !dbg !7835

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7837
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7837
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7837
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 2, !dbg !7837
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !7837
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !7837
  %tobool17 = icmp ne %struct.rtx_def* %7, null, !dbg !7837
  br i1 %tobool17, label %if.then18, label %if.end31, !dbg !7839

if.then18:                                        ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7840
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7840
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7840
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !7840
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !7840
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !7840
  %10 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7841
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7841
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !7841
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 2, !dbg !7841
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !7841
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !7841
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7841
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !7841
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 1, !dbg !7841
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !7841
  store %struct.rtx_def* %9, %struct.rtx_def** %rt_rtx30, align 8, !dbg !7842
  br label %if.end31, !dbg !7841

if.end31:                                         ; preds = %if.then18, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7843
  %13 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7845
  %cmp = icmp eq %struct.rtx_def* %12, %13, !dbg !7846
  br i1 %cmp, label %if.then32, label %if.end37, !dbg !7847

if.then32:                                        ; preds = %if.end31
  %14 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7848
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7848
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7848
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !7848
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !7848
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !7848
  store %struct.rtx_def* %15, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7849
  br label %if.end37, !dbg !7850

if.end37:                                         ; preds = %if.then32, %if.end31
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7851
  %17 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7853
  %cmp38 = icmp eq %struct.rtx_def* %16, %17, !dbg !7854
  br i1 %cmp38, label %if.then39, label %if.end44, !dbg !7855

if.then39:                                        ; preds = %if.end37
  %18 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7856
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7856
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !7856
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 2, !dbg !7856
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !7856
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !7856
  store %struct.rtx_def* %19, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !7857
  br label %if.end44, !dbg !7858

if.end44:                                         ; preds = %if.then39, %if.end37
  %20 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7859
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !7859
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !7859
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 2, !dbg !7859
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !7859
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !7859
  %tobool49 = icmp ne %struct.rtx_def* %21, null, !dbg !7859
  br i1 %tobool49, label %if.then50, label %if.end59, !dbg !7861

if.then50:                                        ; preds = %if.end44
  %22 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7862
  %23 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7863
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7863
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !7863
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 2, !dbg !7863
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !7863
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !7863
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7863
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !7863
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !7863
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !7863
  store %struct.rtx_def* %22, %struct.rtx_def** %rt_rtx58, align 8, !dbg !7864
  br label %if.end59, !dbg !7863

if.end59:                                         ; preds = %if.then50, %if.end44
  %25 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7865
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !7865
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !7865
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 2, !dbg !7865
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !7865
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !7865
  %27 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7866
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7866
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !7866
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 2, !dbg !7866
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !7866
  store %struct.rtx_def* %26, %struct.rtx_def** %rt_rtx67, align 8, !dbg !7867
  %28 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7868
  %29 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7869
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !7869
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !7869
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !7869
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !7869
  store %struct.rtx_def* %28, %struct.rtx_def** %rt_rtx71, align 8, !dbg !7870
  %30 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7871
  %31 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7872
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7872
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !7872
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 2, !dbg !7872
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !7872
  store %struct.rtx_def* %30, %struct.rtx_def** %rt_rtx75, align 8, !dbg !7873
  %32 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7874
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7876
  %cmp76 = icmp eq %struct.rtx_def* %32, %33, !dbg !7877
  br i1 %cmp76, label %if.then77, label %if.end78, !dbg !7878

if.then77:                                        ; preds = %if.end59
  %34 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7879
  store %struct.rtx_def* %34, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7880
  br label %if.end78, !dbg !7881

if.end78:                                         ; preds = %if.then77, %if.end59
  ret void, !dbg !7882
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reorder_insns(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after) #0 !dbg !7883 {
entry:
  %from.addr = alloca %struct.rtx_def*, align 8
  %to.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !7884, metadata !DIExpression()), !dbg !7885
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !7886, metadata !DIExpression()), !dbg !7887
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !7888, metadata !DIExpression()), !dbg !7889
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !7890, metadata !DIExpression()), !dbg !7891
  %0 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7892
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7892
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7892
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7892
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7892
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7892
  store %struct.rtx_def* %1, %struct.rtx_def** %prev, align 8, !dbg !7891
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7893, metadata !DIExpression()), !dbg !7894
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !7895, metadata !DIExpression()), !dbg !7896
  %2 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7897
  %3 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7898
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7899
  call void @reorder_insns_nobb(%struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !7900
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7901
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7901
  %bf.load = load i32, i32* %6, align 8, !dbg !7901
  %bf.clear = and i32 %bf.load, 65535, !dbg !7901
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !7901
  br i1 %cmp, label %if.end43, label %land.lhs.true, !dbg !7903

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7904
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7904
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7904
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !7904
  %rt_bb = bitcast %union.rtunion_def* %arrayidx3 to %struct.basic_block_def**, !dbg !7904
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7904
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !7905
  %tobool = icmp ne %struct.basic_block_def* %8, null, !dbg !7905
  br i1 %tobool, label %if.then, label %if.end43, !dbg !7906

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !7907, metadata !DIExpression()), !dbg !7909
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7910
  call void @df_set_bb_dirty(%struct.basic_block_def* %9), !dbg !7911
  %10 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7912
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7912
  %bf.load4 = load i32, i32* %11, align 8, !dbg !7912
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !7912
  %cmp6 = icmp eq i32 %bf.clear5, 11, !dbg !7912
  br i1 %cmp6, label %if.end19, label %land.lhs.true7, !dbg !7914

land.lhs.true7:                                   ; preds = %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7915
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7915
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7915
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 3, !dbg !7915
  %rt_bb11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.basic_block_def**, !dbg !7915
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb11, align 8, !dbg !7915
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb2, align 8, !dbg !7916
  %tobool12 = icmp ne %struct.basic_block_def* %13, null, !dbg !7916
  br i1 %tobool12, label %if.then13, label %if.end19, !dbg !7917

if.then13:                                        ; preds = %land.lhs.true7
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !7918
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !7918
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7918
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7918
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 1, !dbg !7918
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7918
  %17 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7921
  %cmp14 = icmp eq %struct.rtx_def* %16, %17, !dbg !7922
  br i1 %cmp14, label %if.then15, label %if.end, !dbg !7923

if.then15:                                        ; preds = %if.then13
  %18 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !7924
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !7925
  %il16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !7925
  %rtl17 = bitcast %union.basic_block_il_dependent* %il16 to %struct.rtl_bb_info**, !dbg !7925
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl17, align 8, !dbg !7925
  %end_18 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !7925
  store %struct.rtx_def* %18, %struct.rtx_def** %end_18, align 8, !dbg !7926
  br label %if.end, !dbg !7925

if.end:                                           ; preds = %if.then15, %if.then13
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !7927
  call void @df_set_bb_dirty(%struct.basic_block_def* %21), !dbg !7928
  br label %if.end19, !dbg !7929

if.end19:                                         ; preds = %if.end, %land.lhs.true7, %if.then
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7930
  %il20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !7930
  %rtl21 = bitcast %union.basic_block_il_dependent* %il20 to %struct.rtl_bb_info**, !dbg !7930
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl21, align 8, !dbg !7930
  %end_22 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !7930
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_22, align 8, !dbg !7930
  %25 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !7932
  %cmp23 = icmp eq %struct.rtx_def* %24, %25, !dbg !7933
  br i1 %cmp23, label %if.then24, label %if.end28, !dbg !7934

if.then24:                                        ; preds = %if.end19
  %26 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7935
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7936
  %il25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 7, !dbg !7936
  %rtl26 = bitcast %union.basic_block_il_dependent* %il25 to %struct.rtl_bb_info**, !dbg !7936
  %28 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl26, align 8, !dbg !7936
  %end_27 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %28, i32 0, i32 1, !dbg !7936
  store %struct.rtx_def* %26, %struct.rtx_def** %end_27, align 8, !dbg !7937
  br label %if.end28, !dbg !7936

if.end28:                                         ; preds = %if.then24, %if.end19
  %29 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !7938
  store %struct.rtx_def* %29, %struct.rtx_def** %x, align 8, !dbg !7940
  br label %for.cond, !dbg !7941

for.cond:                                         ; preds = %for.inc, %if.end28
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7942
  %31 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !7944
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7944
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7944
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 2, !dbg !7944
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !7944
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !7944
  %cmp33 = icmp ne %struct.rtx_def* %30, %32, !dbg !7945
  br i1 %cmp33, label %for.body, label %for.end, !dbg !7946

for.body:                                         ; preds = %for.cond
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7947
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !7947
  %bf.load34 = load i32, i32* %34, align 8, !dbg !7947
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !7947
  %cmp36 = icmp eq i32 %bf.clear35, 11, !dbg !7947
  br i1 %cmp36, label %if.end38, label %if.then37, !dbg !7949

if.then37:                                        ; preds = %for.body
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7950
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7951
  call void @df_insn_change_bb(%struct.rtx_def* %35, %struct.basic_block_def* %36), !dbg !7952
  br label %if.end38, !dbg !7952

if.end38:                                         ; preds = %if.then37, %for.body
  br label %for.inc, !dbg !7947

for.inc:                                          ; preds = %if.end38
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7953
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !7953
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !7953
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 2, !dbg !7953
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !7953
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !7953
  store %struct.rtx_def* %38, %struct.rtx_def** %x, align 8, !dbg !7954
  br label %for.cond, !dbg !7955, !llvm.loop !7956

for.end:                                          ; preds = %for.cond
  br label %if.end43, !dbg !7958

if.end43:                                         ; preds = %for.end, %land.lhs.true, %entry
  ret void, !dbg !7959
}

declare dso_local void @df_insn_change_bb(%struct.rtx_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %x, %struct.rtx_def* %before, %struct.basic_block_def* %bb) #0 !dbg !7960 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7963, metadata !DIExpression()), !dbg !7964
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !7965, metadata !DIExpression()), !dbg !7966
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7967, metadata !DIExpression()), !dbg !7968
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7969, metadata !DIExpression()), !dbg !7970
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7971
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !7970
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7972, metadata !DIExpression()), !dbg !7973
  %1 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7974
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !7974
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7974

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4061, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7974
  br label %cond.end, !dbg !7974

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7974

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7974
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7975
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !7977
  br i1 %cmp, label %if.then, label %if.end, !dbg !7978

if.then:                                          ; preds = %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7979
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !7980
  br label %return, !dbg !7980

if.end:                                           ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7981
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7981
  %bf.load = load i32, i32* %5, align 8, !dbg !7981
  %bf.clear = and i32 %bf.load, 65535, !dbg !7981
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !7982

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7983
  store %struct.rtx_def* %6, %struct.rtx_def** %insn, align 8, !dbg !7985
  br label %while.cond, !dbg !7986

while.cond:                                       ; preds = %while.body, %sw.bb
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7987
  %tobool1 = icmp ne %struct.rtx_def* %7, null, !dbg !7986
  br i1 %tobool1, label %while.body, label %while.end, !dbg !7986

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !7988, metadata !DIExpression()), !dbg !7990
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7991
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7991
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7991
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7991
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7991
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7991
  store %struct.rtx_def* %9, %struct.rtx_def** %next, align 8, !dbg !7990
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7992
  %11 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !7993
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7994
  call void @add_insn_before(%struct.rtx_def* %10, %struct.rtx_def* %11, %struct.basic_block_def* %12), !dbg !7995
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7996
  store %struct.rtx_def* %13, %struct.rtx_def** %last, align 8, !dbg !7997
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7998
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8, !dbg !7999
  br label %while.cond, !dbg !7986, !llvm.loop !8000

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !8002

sw.default:                                       ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8003
  %call = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %15), !dbg !8004
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8005
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8006
  %17 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8007
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8008
  call void @add_insn_before(%struct.rtx_def* %16, %struct.rtx_def* %17, %struct.basic_block_def* %18), !dbg !8009
  br label %sw.epilog, !dbg !8010

sw.epilog:                                        ; preds = %sw.default, %while.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8011
  store %struct.rtx_def* %19, %struct.rtx_def** %retval, align 8, !dbg !8012
  br label %return, !dbg !8012

return:                                           ; preds = %sw.epilog, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8013
  ret %struct.rtx_def* %20, !dbg !8013
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_before_noloc(%struct.rtx_def* %x, %struct.rtx_def* %before) #0 !dbg !8014 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8015, metadata !DIExpression()), !dbg !8016
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8017, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8019, metadata !DIExpression()), !dbg !8020
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8021, metadata !DIExpression()), !dbg !8022
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !8022
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8023
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8023
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8023

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8023
  br label %cond.end, !dbg !8023

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8023

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8023
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8024
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8024
  %bf.load = load i32, i32* %2, align 8, !dbg !8024
  %bf.clear = and i32 %bf.load, 65535, !dbg !8024
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8025

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8026
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !8028
  br label %while.cond, !dbg !8029

while.cond:                                       ; preds = %while.body, %sw.bb
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8030
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !8029
  br i1 %tobool1, label %while.body, label %while.end, !dbg !8029

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8031, metadata !DIExpression()), !dbg !8033
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8034
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8034
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8034
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8034
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8034
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8034
  store %struct.rtx_def* %6, %struct.rtx_def** %next, align 8, !dbg !8033
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8035
  %8 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8036
  call void @add_insn_before(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.basic_block_def* null), !dbg !8037
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8038
  store %struct.rtx_def* %9, %struct.rtx_def** %last, align 8, !dbg !8039
  %10 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8040
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !8041
  br label %while.cond, !dbg !8029, !llvm.loop !8042

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !8044

sw.default:                                       ; preds = %cond.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8045
  %call = call %struct.rtx_def* @make_jump_insn_raw(%struct.rtx_def* %11), !dbg !8046
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8047
  %12 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8048
  %13 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8049
  call void @add_insn_before(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.basic_block_def* null), !dbg !8050
  br label %sw.epilog, !dbg !8051

sw.epilog:                                        ; preds = %sw.default, %while.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8052
  ret %struct.rtx_def* %14, !dbg !8053
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_before_noloc(%struct.rtx_def* %x, %struct.rtx_def* %before) #0 !dbg !8054 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8055, metadata !DIExpression()), !dbg !8056
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8057, metadata !DIExpression()), !dbg !8058
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8059, metadata !DIExpression()), !dbg !8060
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !8060
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8061, metadata !DIExpression()), !dbg !8062
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8063
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8063
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8063

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4152, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8063
  br label %cond.end, !dbg !8063

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8063
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8064
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8064
  %bf.load = load i32, i32* %2, align 8, !dbg !8064
  %bf.clear = and i32 %bf.load, 65535, !dbg !8064
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8065

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8066
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !8068
  br label %while.cond, !dbg !8069

while.cond:                                       ; preds = %while.body, %sw.bb
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8070
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !8069
  br i1 %tobool1, label %while.body, label %while.end, !dbg !8069

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8071, metadata !DIExpression()), !dbg !8073
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8074
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8074
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8074
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8074
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8074
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8074
  store %struct.rtx_def* %6, %struct.rtx_def** %next, align 8, !dbg !8073
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8075
  %8 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8076
  call void @add_insn_before(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.basic_block_def* null), !dbg !8077
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8078
  store %struct.rtx_def* %9, %struct.rtx_def** %last, align 8, !dbg !8079
  %10 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8080
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !8081
  br label %while.cond, !dbg !8069, !llvm.loop !8082

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !8084

sw.default:                                       ; preds = %cond.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8085
  %call = call %struct.rtx_def* @make_call_insn_raw(%struct.rtx_def* %11), !dbg !8086
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8087
  %12 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8088
  %13 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8089
  call void @add_insn_before(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.basic_block_def* null), !dbg !8090
  br label %sw.epilog, !dbg !8091

sw.epilog:                                        ; preds = %sw.default, %while.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8092
  ret %struct.rtx_def* %14, !dbg !8093
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @make_call_insn_raw(%struct.rtx_def* %pattern) #0 !dbg !8094 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8097, metadata !DIExpression()), !dbg !8098
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 10), !dbg !8099
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !8100
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8101
  %inc = add nsw i32 %0, 1, !dbg !8101
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8101
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8102
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8102
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8102
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8102
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8102
  store i32 %0, i32* %rt_int, align 8, !dbg !8103
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8104
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8105
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8105
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8105
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !8105
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8105
  store %struct.rtx_def* %2, %struct.rtx_def** %rt_rtx, align 8, !dbg !8106
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8107
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !8107
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !8107
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !8107
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !8107
  store i32 -1, i32* %rt_int7, align 8, !dbg !8108
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8109
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8109
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8109
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 7, !dbg !8109
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8109
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx11, align 8, !dbg !8110
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8111
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8111
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !8111
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 8, !dbg !8111
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !8111
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx15, align 8, !dbg !8112
  %call16 = call i32 @curr_insn_locator(), !dbg !8113
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8114
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !8114
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !8114
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 4, !dbg !8114
  %rt_int20 = bitcast %union.rtunion_def* %arrayidx19 to i32*, !dbg !8114
  store i32 %call16, i32* %rt_int20, align 8, !dbg !8115
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8116
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8116
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !8116
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 3, !dbg !8116
  %rt_bb = bitcast %union.rtunion_def* %arrayidx23 to %struct.basic_block_def**, !dbg !8116
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !8117
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8118
  ret %struct.rtx_def* %9, !dbg !8119
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_before_noloc(%struct.rtx_def* %x, %struct.rtx_def* %before) #0 !dbg !8120 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8121, metadata !DIExpression()), !dbg !8122
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8123, metadata !DIExpression()), !dbg !8124
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8125, metadata !DIExpression()), !dbg !8126
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !8126
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8127, metadata !DIExpression()), !dbg !8128
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8129
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8129
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8129

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4196, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8129
  br label %cond.end, !dbg !8129

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8129

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8129
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8130
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8130
  %bf.load = load i32, i32* %2, align 8, !dbg !8130
  %bf.clear = and i32 %bf.load, 65535, !dbg !8130
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8131

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8132
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !8134
  br label %while.cond, !dbg !8135

while.cond:                                       ; preds = %while.body, %sw.bb
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8136
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !8135
  br i1 %tobool1, label %while.body, label %while.end, !dbg !8135

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8137, metadata !DIExpression()), !dbg !8139
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8140
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8140
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8140
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8140
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8140
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8140
  store %struct.rtx_def* %6, %struct.rtx_def** %next, align 8, !dbg !8139
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8141
  %8 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8142
  call void @add_insn_before(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.basic_block_def* null), !dbg !8143
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8144
  store %struct.rtx_def* %9, %struct.rtx_def** %last, align 8, !dbg !8145
  %10 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8146
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !8147
  br label %while.cond, !dbg !8135, !llvm.loop !8148

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !8150

sw.default:                                       ; preds = %cond.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8151
  %call = call %struct.rtx_def* @make_debug_insn_raw(%struct.rtx_def* %11), !dbg !8152
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8153
  %12 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8154
  %13 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8155
  call void @add_insn_before(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.basic_block_def* null), !dbg !8156
  br label %sw.epilog, !dbg !8157

sw.epilog:                                        ; preds = %sw.default, %while.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8158
  ret %struct.rtx_def* %14, !dbg !8159
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_barrier_before(%struct.rtx_def* %before) #0 !dbg !8160 {
entry:
  %before.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8161, metadata !DIExpression()), !dbg !8162
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8163, metadata !DIExpression()), !dbg !8164
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 11), !dbg !8165
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !8164
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8166
  %inc = add nsw i32 %0, 1, !dbg !8166
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8166
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8167
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8167
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8167
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8167
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8167
  store i32 %0, i32* %rt_int, align 8, !dbg !8168
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8169
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8170
  call void @add_insn_before(%struct.rtx_def* %2, %struct.rtx_def* %3, %struct.basic_block_def* null), !dbg !8171
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8172
  ret %struct.rtx_def* %4, !dbg !8173
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_label_before(%struct.rtx_def* %label, %struct.rtx_def* %before) #0 !dbg !8174 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !8175, metadata !DIExpression()), !dbg !8176
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8177, metadata !DIExpression()), !dbg !8178
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8179
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8179
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8179
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8179
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8179
  %1 = load i32, i32* %rt_int, align 8, !dbg !8179
  %cmp = icmp eq i32 %1, 0, !dbg !8181
  br i1 %cmp, label %if.then, label %if.end, !dbg !8182

if.then:                                          ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8183
  %inc = add nsw i32 %2, 1, !dbg !8183
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8183
  %3 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8185
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8185
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8185
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !8185
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !8185
  store i32 %2, i32* %rt_int4, align 8, !dbg !8186
  %4 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8187
  %5 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8188
  call void @add_insn_before(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.basic_block_def* null), !dbg !8189
  br label %if.end, !dbg !8190

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8191
  ret %struct.rtx_def* %6, !dbg !8192
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_note_before(i32 %subtype, %struct.rtx_def* %before) #0 !dbg !8193 {
entry:
  %subtype.addr = alloca i32, align 4
  %before.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store i32 %subtype, i32* %subtype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subtype.addr, metadata !8196, metadata !DIExpression()), !dbg !8197
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8198, metadata !DIExpression()), !dbg !8199
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !8200, metadata !DIExpression()), !dbg !8201
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 13), !dbg !8202
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !8201
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8203
  %inc = add nsw i32 %0, 1, !dbg !8203
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8203
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8204
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8204
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8204
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8204
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8204
  store i32 %0, i32* %rt_int, align 8, !dbg !8205
  %2 = load i32, i32* %subtype.addr, align 4, !dbg !8206
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8207
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8207
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8207
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !8207
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !8207
  store i32 %2, i32* %rt_int4, align 8, !dbg !8208
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8209
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !8209
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !8209
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 3, !dbg !8209
  %rt_bb = bitcast %union.rtunion_def* %arrayidx7 to %struct.basic_block_def**, !dbg !8209
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !8210
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8211
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8211
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8211
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !8211
  %6 = bitcast %union.rtunion_def* %arrayidx10 to i8*, !dbg !8212
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 8, i1 false), !dbg !8212
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8213
  %8 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8214
  call void @add_insn_before(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.basic_block_def* null), !dbg !8215
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8216
  ret %struct.rtx_def* %9, !dbg !8217
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %x, %struct.rtx_def* %after, %struct.basic_block_def* %bb) #0 !dbg !8218 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8219, metadata !DIExpression()), !dbg !8220
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8221, metadata !DIExpression()), !dbg !8222
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8223, metadata !DIExpression()), !dbg !8224
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8225, metadata !DIExpression()), !dbg !8226
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8227
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !8226
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8228
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !8228
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8228

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4331, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8228
  br label %cond.end, !dbg !8228

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8228

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8228
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8229
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !8231
  br i1 %cmp, label %if.then, label %if.end, !dbg !8232

if.then:                                          ; preds = %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8233
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !8234
  br label %return, !dbg !8234

if.end:                                           ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8235
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8235
  %bf.load = load i32, i32* %5, align 8, !dbg !8235
  %bf.clear = and i32 %bf.load, 65535, !dbg !8235
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8236

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8237
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8239
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8240
  %call = call %struct.rtx_def* @emit_insn_after_1(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.basic_block_def* %8), !dbg !8241
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8242
  br label %sw.epilog, !dbg !8243

sw.default:                                       ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8244
  %call1 = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %9), !dbg !8245
  store %struct.rtx_def* %call1, %struct.rtx_def** %last, align 8, !dbg !8246
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8247
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8248
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8249
  call void @add_insn_after(%struct.rtx_def* %10, %struct.rtx_def* %11, %struct.basic_block_def* %12), !dbg !8250
  br label %sw.epilog, !dbg !8251

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8252
  store %struct.rtx_def* %13, %struct.rtx_def** %retval, align 8, !dbg !8253
  br label %return, !dbg !8253

return:                                           ; preds = %sw.epilog, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8254
  ret %struct.rtx_def* %14, !dbg !8254
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_insn_after_1(%struct.rtx_def* %first, %struct.rtx_def* %after, %struct.basic_block_def* %bb) #0 !dbg !8255 {
entry:
  %first.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %after_after = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !8256, metadata !DIExpression()), !dbg !8257
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8258, metadata !DIExpression()), !dbg !8259
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8260, metadata !DIExpression()), !dbg !8261
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8262, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after_after, metadata !8264, metadata !DIExpression()), !dbg !8265
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8266
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !8266
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8268

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8269
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8269
  %bf.load = load i32, i32* %2, align 8, !dbg !8269
  %bf.clear = and i32 %bf.load, 65535, !dbg !8269
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !8269
  br i1 %cmp, label %if.end, label %if.then, !dbg !8270

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8271
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8271
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8271
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8271
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8271
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8271
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb.addr, align 8, !dbg !8272
  br label %if.end, !dbg !8273

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8274
  %tobool1 = icmp ne %struct.basic_block_def* %5, null, !dbg !8274
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !8276

if.then2:                                         ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8277
  call void @df_set_bb_dirty(%struct.basic_block_def* %6), !dbg !8279
  %7 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !8280
  store %struct.rtx_def* %7, %struct.rtx_def** %last, align 8, !dbg !8282
  br label %for.cond, !dbg !8283

for.cond:                                         ; preds = %for.inc, %if.then2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8284
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8284
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !8284
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 2, !dbg !8284
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !8284
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8284
  %tobool6 = icmp ne %struct.rtx_def* %9, null, !dbg !8286
  br i1 %tobool6, label %for.body, label %for.end, !dbg !8286

for.body:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8287
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8287
  %bf.load7 = load i32, i32* %11, align 8, !dbg !8287
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !8287
  %cmp9 = icmp eq i32 %bf.clear8, 11, !dbg !8287
  br i1 %cmp9, label %if.end15, label %if.then10, !dbg !8289

if.then10:                                        ; preds = %for.body
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8290
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8290
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8290
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !8290
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 3, !dbg !8290
  %rt_bb14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.basic_block_def**, !dbg !8290
  store %struct.basic_block_def* %12, %struct.basic_block_def** %rt_bb14, align 8, !dbg !8290
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8292
  %call = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %14), !dbg !8293
  br label %if.end15, !dbg !8294

if.end15:                                         ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !8287

for.inc:                                          ; preds = %if.end15
  %15 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8295
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8295
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8295
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !8295
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !8295
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !8295
  store %struct.rtx_def* %16, %struct.rtx_def** %last, align 8, !dbg !8296
  br label %for.cond, !dbg !8297, !llvm.loop !8298

for.end:                                          ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8300
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !8300
  %bf.load20 = load i32, i32* %18, align 8, !dbg !8300
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !8300
  %cmp22 = icmp eq i32 %bf.clear21, 11, !dbg !8300
  br i1 %cmp22, label %if.end29, label %if.then23, !dbg !8302

if.then23:                                        ; preds = %for.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8303
  %20 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8303
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !8303
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8303
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 3, !dbg !8303
  %rt_bb27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.basic_block_def**, !dbg !8303
  store %struct.basic_block_def* %19, %struct.basic_block_def** %rt_bb27, align 8, !dbg !8303
  %21 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8305
  %call28 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %21), !dbg !8306
  br label %if.end29, !dbg !8307

if.end29:                                         ; preds = %if.then23, %for.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8308
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !8308
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8308
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8308
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !8308
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8308
  %25 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8310
  %cmp30 = icmp eq %struct.rtx_def* %24, %25, !dbg !8311
  br i1 %cmp30, label %if.then31, label %if.end35, !dbg !8312

if.then31:                                        ; preds = %if.end29
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8313
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8314
  %il32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 7, !dbg !8314
  %rtl33 = bitcast %union.basic_block_il_dependent* %il32 to %struct.rtl_bb_info**, !dbg !8314
  %28 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl33, align 8, !dbg !8314
  %end_34 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %28, i32 0, i32 1, !dbg !8314
  store %struct.rtx_def* %26, %struct.rtx_def** %end_34, align 8, !dbg !8315
  br label %if.end35, !dbg !8314

if.end35:                                         ; preds = %if.then31, %if.end29
  br label %if.end49, !dbg !8316

if.else:                                          ; preds = %if.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !8317
  store %struct.rtx_def* %29, %struct.rtx_def** %last, align 8, !dbg !8319
  br label %for.cond36, !dbg !8320

for.cond36:                                       ; preds = %for.inc43, %if.else
  %30 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8321
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !8321
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !8321
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !8321
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !8321
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !8321
  %tobool41 = icmp ne %struct.rtx_def* %31, null, !dbg !8323
  br i1 %tobool41, label %for.body42, label %for.end48, !dbg !8323

for.body42:                                       ; preds = %for.cond36
  br label %for.inc43, !dbg !8324

for.inc43:                                        ; preds = %for.body42
  %32 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8325
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !8325
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !8325
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 2, !dbg !8325
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !8325
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !8325
  store %struct.rtx_def* %33, %struct.rtx_def** %last, align 8, !dbg !8326
  br label %for.cond36, !dbg !8327, !llvm.loop !8328

for.end48:                                        ; preds = %for.cond36
  br label %if.end49

if.end49:                                         ; preds = %for.end48, %if.end35
  %34 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8330
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !8330
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !8330
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 2, !dbg !8330
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !8330
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !8330
  store %struct.rtx_def* %35, %struct.rtx_def** %after_after, align 8, !dbg !8331
  %36 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !8332
  %37 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8333
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !8333
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !8333
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 2, !dbg !8333
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !8333
  store %struct.rtx_def* %36, %struct.rtx_def** %rt_rtx57, align 8, !dbg !8334
  %38 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8335
  %39 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !8336
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !8336
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !8336
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !8336
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !8336
  store %struct.rtx_def* %38, %struct.rtx_def** %rt_rtx61, align 8, !dbg !8337
  %40 = load %struct.rtx_def*, %struct.rtx_def** %after_after, align 8, !dbg !8338
  %41 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8339
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !8339
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !8339
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 2, !dbg !8339
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !8339
  store %struct.rtx_def* %40, %struct.rtx_def** %rt_rtx65, align 8, !dbg !8340
  %42 = load %struct.rtx_def*, %struct.rtx_def** %after_after, align 8, !dbg !8341
  %tobool66 = icmp ne %struct.rtx_def* %42, null, !dbg !8341
  br i1 %tobool66, label %if.then67, label %if.end72, !dbg !8343

if.then67:                                        ; preds = %if.end49
  %43 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8344
  %44 = load %struct.rtx_def*, %struct.rtx_def** %after_after, align 8, !dbg !8345
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !8345
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !8345
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !8345
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !8345
  store %struct.rtx_def* %43, %struct.rtx_def** %rt_rtx71, align 8, !dbg !8346
  br label %if.end72, !dbg !8345

if.end72:                                         ; preds = %if.then67, %if.end49
  %45 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8347
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !8349
  %cmp73 = icmp eq %struct.rtx_def* %45, %46, !dbg !8350
  br i1 %cmp73, label %if.then74, label %if.end75, !dbg !8351

if.then74:                                        ; preds = %if.end72
  %47 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8352
  store %struct.rtx_def* %47, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !8353
  br label %if.end75, !dbg !8354

if.end75:                                         ; preds = %if.then74, %if.end72
  %48 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8355
  ret %struct.rtx_def* %48, !dbg !8356
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_after_noloc(%struct.rtx_def* %x, %struct.rtx_def* %after) #0 !dbg !8357 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8358, metadata !DIExpression()), !dbg !8359
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8360, metadata !DIExpression()), !dbg !8361
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8362, metadata !DIExpression()), !dbg !8363
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8364
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8364
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8364

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4372, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8364
  br label %cond.end, !dbg !8364

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8364
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8365
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8365
  %bf.load = load i32, i32* %2, align 8, !dbg !8365
  %bf.clear = and i32 %bf.load, 65535, !dbg !8365
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8366

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8367
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8369
  %call = call %struct.rtx_def* @emit_insn_after_1(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.basic_block_def* null), !dbg !8370
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8371
  br label %sw.epilog, !dbg !8372

sw.default:                                       ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8373
  %call1 = call %struct.rtx_def* @make_jump_insn_raw(%struct.rtx_def* %5), !dbg !8374
  store %struct.rtx_def* %call1, %struct.rtx_def** %last, align 8, !dbg !8375
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8376
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8377
  call void @add_insn_after(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.basic_block_def* null), !dbg !8378
  br label %sw.epilog, !dbg !8379

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8380
  ret %struct.rtx_def* %8, !dbg !8381
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_after_noloc(%struct.rtx_def* %x, %struct.rtx_def* %after) #0 !dbg !8382 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8383, metadata !DIExpression()), !dbg !8384
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8385, metadata !DIExpression()), !dbg !8386
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8387, metadata !DIExpression()), !dbg !8388
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8389
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8389
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8389

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4409, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8389
  br label %cond.end, !dbg !8389

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8389

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8389
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8390
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8390
  %bf.load = load i32, i32* %2, align 8, !dbg !8390
  %bf.clear = and i32 %bf.load, 65535, !dbg !8390
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8391

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8392
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8394
  %call = call %struct.rtx_def* @emit_insn_after_1(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.basic_block_def* null), !dbg !8395
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8396
  br label %sw.epilog, !dbg !8397

sw.default:                                       ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8398
  %call1 = call %struct.rtx_def* @make_call_insn_raw(%struct.rtx_def* %5), !dbg !8399
  store %struct.rtx_def* %call1, %struct.rtx_def** %last, align 8, !dbg !8400
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8401
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8402
  call void @add_insn_after(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.basic_block_def* null), !dbg !8403
  br label %sw.epilog, !dbg !8404

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8405
  ret %struct.rtx_def* %8, !dbg !8406
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_after_noloc(%struct.rtx_def* %x, %struct.rtx_def* %after) #0 !dbg !8407 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8408, metadata !DIExpression()), !dbg !8409
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8410, metadata !DIExpression()), !dbg !8411
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8412, metadata !DIExpression()), !dbg !8413
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8414
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8414
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8414

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8414
  br label %cond.end, !dbg !8414

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8414
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8415
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8415
  %bf.load = load i32, i32* %2, align 8, !dbg !8415
  %bf.clear = and i32 %bf.load, 65535, !dbg !8415
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !8416

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8417
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8419
  %call = call %struct.rtx_def* @emit_insn_after_1(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.basic_block_def* null), !dbg !8420
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8421
  br label %sw.epilog, !dbg !8422

sw.default:                                       ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8423
  %call1 = call %struct.rtx_def* @make_debug_insn_raw(%struct.rtx_def* %5), !dbg !8424
  store %struct.rtx_def* %call1, %struct.rtx_def** %last, align 8, !dbg !8425
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8426
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8427
  call void @add_insn_after(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.basic_block_def* null), !dbg !8428
  br label %sw.epilog, !dbg !8429

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8430
  ret %struct.rtx_def* %8, !dbg !8431
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_label_after(%struct.rtx_def* %label, %struct.rtx_def* %after) #0 !dbg !8432 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !8433, metadata !DIExpression()), !dbg !8434
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8435, metadata !DIExpression()), !dbg !8436
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8437
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8437
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8437
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8437
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8437
  %1 = load i32, i32* %rt_int, align 8, !dbg !8437
  %cmp = icmp eq i32 %1, 0, !dbg !8439
  br i1 %cmp, label %if.then, label %if.end, !dbg !8440

if.then:                                          ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8441
  %inc = add nsw i32 %2, 1, !dbg !8441
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8441
  %3 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8443
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8443
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8443
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !8443
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !8443
  store i32 %2, i32* %rt_int4, align 8, !dbg !8444
  %4 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8445
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8446
  call void @add_insn_after(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.basic_block_def* null), !dbg !8447
  br label %if.end, !dbg !8448

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !8449
  ret %struct.rtx_def* %6, !dbg !8450
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_note_after(i32 %subtype, %struct.rtx_def* %after) #0 !dbg !8451 {
entry:
  %subtype.addr = alloca i32, align 4
  %after.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store i32 %subtype, i32* %subtype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subtype.addr, metadata !8452, metadata !DIExpression()), !dbg !8453
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8454, metadata !DIExpression()), !dbg !8455
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !8456, metadata !DIExpression()), !dbg !8457
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 13), !dbg !8458
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !8457
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8459
  %inc = add nsw i32 %0, 1, !dbg !8459
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !8459
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8460
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8460
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8460
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8460
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8460
  store i32 %0, i32* %rt_int, align 8, !dbg !8461
  %2 = load i32, i32* %subtype.addr, align 4, !dbg !8462
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8463
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8463
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8463
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !8463
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !8463
  store i32 %2, i32* %rt_int4, align 8, !dbg !8464
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8465
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !8465
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !8465
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 3, !dbg !8465
  %rt_bb = bitcast %union.rtunion_def* %arrayidx7 to %struct.basic_block_def**, !dbg !8465
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !8466
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8467
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8467
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8467
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !8467
  %6 = bitcast %union.rtunion_def* %arrayidx10 to i8*, !dbg !8468
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 8, i1 false), !dbg !8468
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8469
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8470
  call void @add_insn_after(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.basic_block_def* null), !dbg !8471
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8472
  ret %struct.rtx_def* %9, !dbg !8473
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 !dbg !8474 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8475, metadata !DIExpression()), !dbg !8476
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8477, metadata !DIExpression()), !dbg !8478
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !8479, metadata !DIExpression()), !dbg !8480
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8481
  store %struct.rtx_def* %0, %struct.rtx_def** %prev, align 8, !dbg !8480
  br label %while.cond, !dbg !8482

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8483
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8483
  %bf.load = load i32, i32* %2, align 8, !dbg !8483
  %bf.clear = and i32 %bf.load, 65535, !dbg !8483
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8483
  br i1 %cmp, label %while.body, label %while.end, !dbg !8482

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8484
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8484
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8484
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8484
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8484
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8484
  store %struct.rtx_def* %4, %struct.rtx_def** %prev, align 8, !dbg !8485
  br label %while.cond, !dbg !8482, !llvm.loop !8486

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8487
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8487
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8487
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8487
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8487
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8487

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8487
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8487
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8487
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8487
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8487
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8487

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8487
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8487
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8487
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8487
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8487
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8487

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8487
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8487
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8487
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8487
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8487
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8489

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8490
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8491
  %15 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8492
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8492
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8492
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8492
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8492
  %16 = load i32, i32* %rt_int, align 8, !dbg !8492
  %call = call %struct.rtx_def* @emit_insn_after_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8493
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8494
  br label %return, !dbg !8494

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8495
  %18 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8496
  %call18 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18, %struct.basic_block_def* null), !dbg !8497
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8498
  br label %return, !dbg !8498

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8499
  ret %struct.rtx_def* %19, !dbg !8499
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_after_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %after, i32 %loc) #0 !dbg !8500 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8501, metadata !DIExpression()), !dbg !8502
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8503, metadata !DIExpression()), !dbg !8504
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8505, metadata !DIExpression()), !dbg !8506
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8507, metadata !DIExpression()), !dbg !8508
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8509
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8510
  %call = call %struct.rtx_def* @emit_jump_insn_after_noloc(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !8511
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8508
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8512
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !8514
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8515

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %loc.addr, align 4, !dbg !8516
  %tobool = icmp ne i32 %3, 0, !dbg !8516
  br i1 %tobool, label %if.end, label %if.then, !dbg !8517

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8518
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !8519
  br label %return, !dbg !8519

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8520
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8520
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8520
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8520
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8520
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8520
  store %struct.rtx_def* %6, %struct.rtx_def** %after.addr, align 8, !dbg !8521
  br label %while.body, !dbg !8522

while.body:                                       ; preds = %if.end, %if.end15
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8523
  %call1 = call i32 @active_insn_p(%struct.rtx_def* %7), !dbg !8526
  %tobool2 = icmp ne i32 %call1, 0, !dbg !8526
  br i1 %tobool2, label %land.lhs.true, label %if.end12, !dbg !8527

land.lhs.true:                                    ; preds = %while.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8528
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8528
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !8528
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 4, !dbg !8528
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !8528
  %9 = load i32, i32* %rt_int, align 8, !dbg !8528
  %tobool6 = icmp ne i32 %9, 0, !dbg !8528
  br i1 %tobool6, label %if.end12, label %if.then7, !dbg !8529

if.then7:                                         ; preds = %land.lhs.true
  %10 = load i32, i32* %loc.addr, align 4, !dbg !8530
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8531
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8531
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8531
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !8531
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !8531
  store i32 %10, i32* %rt_int11, align 8, !dbg !8532
  br label %if.end12, !dbg !8531

if.end12:                                         ; preds = %if.then7, %land.lhs.true, %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8533
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8535
  %cmp13 = icmp eq %struct.rtx_def* %12, %13, !dbg !8536
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !8537

if.then14:                                        ; preds = %if.end12
  br label %while.end, !dbg !8538

if.end15:                                         ; preds = %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8539
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8539
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8539
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !8539
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !8539
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !8539
  store %struct.rtx_def* %15, %struct.rtx_def** %after.addr, align 8, !dbg !8540
  br label %while.body, !dbg !8522, !llvm.loop !8541

while.end:                                        ; preds = %if.then14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8543
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !8544
  br label %return, !dbg !8544

return:                                           ; preds = %while.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8545
  ret %struct.rtx_def* %17, !dbg !8545
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 !dbg !8546 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8547, metadata !DIExpression()), !dbg !8548
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8549, metadata !DIExpression()), !dbg !8550
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !8551, metadata !DIExpression()), !dbg !8552
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8553
  store %struct.rtx_def* %0, %struct.rtx_def** %prev, align 8, !dbg !8552
  br label %while.cond, !dbg !8554

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8555
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8555
  %bf.load = load i32, i32* %2, align 8, !dbg !8555
  %bf.clear = and i32 %bf.load, 65535, !dbg !8555
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8555
  br i1 %cmp, label %while.body, label %while.end, !dbg !8554

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8556
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8556
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8556
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8556
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8556
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8556
  store %struct.rtx_def* %4, %struct.rtx_def** %prev, align 8, !dbg !8557
  br label %while.cond, !dbg !8554, !llvm.loop !8558

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8559
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8559
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8559
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8559
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8559
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8559

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8559
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8559
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8559
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8559
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8559
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8559

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8559
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8559
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8559
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8559
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8559
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8559

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8559
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8559
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8559
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8559
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8559
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8561

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8562
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8563
  %15 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8564
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8564
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8564
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8564
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8564
  %16 = load i32, i32* %rt_int, align 8, !dbg !8564
  %call = call %struct.rtx_def* @emit_jump_insn_after_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8565
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8566
  br label %return, !dbg !8566

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8567
  %18 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8568
  %call18 = call %struct.rtx_def* @emit_jump_insn_after_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !8569
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8570
  br label %return, !dbg !8570

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8571
  ret %struct.rtx_def* %19, !dbg !8571
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_after_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %after, i32 %loc) #0 !dbg !8572 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8573, metadata !DIExpression()), !dbg !8574
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8575, metadata !DIExpression()), !dbg !8576
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8577, metadata !DIExpression()), !dbg !8578
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8579, metadata !DIExpression()), !dbg !8580
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8581
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8582
  %call = call %struct.rtx_def* @emit_call_insn_after_noloc(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !8583
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8580
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8584
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !8586
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8587

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %loc.addr, align 4, !dbg !8588
  %tobool = icmp ne i32 %3, 0, !dbg !8588
  br i1 %tobool, label %if.end, label %if.then, !dbg !8589

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8590
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !8591
  br label %return, !dbg !8591

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8592
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8592
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8592
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8592
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8592
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8592
  store %struct.rtx_def* %6, %struct.rtx_def** %after.addr, align 8, !dbg !8593
  br label %while.body, !dbg !8594

while.body:                                       ; preds = %if.end, %if.end15
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8595
  %call1 = call i32 @active_insn_p(%struct.rtx_def* %7), !dbg !8598
  %tobool2 = icmp ne i32 %call1, 0, !dbg !8598
  br i1 %tobool2, label %land.lhs.true, label %if.end12, !dbg !8599

land.lhs.true:                                    ; preds = %while.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8600
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8600
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !8600
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 4, !dbg !8600
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !8600
  %9 = load i32, i32* %rt_int, align 8, !dbg !8600
  %tobool6 = icmp ne i32 %9, 0, !dbg !8600
  br i1 %tobool6, label %if.end12, label %if.then7, !dbg !8601

if.then7:                                         ; preds = %land.lhs.true
  %10 = load i32, i32* %loc.addr, align 4, !dbg !8602
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8603
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8603
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8603
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !8603
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !8603
  store i32 %10, i32* %rt_int11, align 8, !dbg !8604
  br label %if.end12, !dbg !8603

if.end12:                                         ; preds = %if.then7, %land.lhs.true, %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8605
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8607
  %cmp13 = icmp eq %struct.rtx_def* %12, %13, !dbg !8608
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !8609

if.then14:                                        ; preds = %if.end12
  br label %while.end, !dbg !8610

if.end15:                                         ; preds = %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8611
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8611
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8611
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !8611
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !8611
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !8611
  store %struct.rtx_def* %15, %struct.rtx_def** %after.addr, align 8, !dbg !8612
  br label %while.body, !dbg !8594, !llvm.loop !8613

while.end:                                        ; preds = %if.then14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8615
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !8616
  br label %return, !dbg !8616

return:                                           ; preds = %while.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8617
  ret %struct.rtx_def* %17, !dbg !8617
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 !dbg !8618 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8619, metadata !DIExpression()), !dbg !8620
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8621, metadata !DIExpression()), !dbg !8622
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !8623, metadata !DIExpression()), !dbg !8624
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8625
  store %struct.rtx_def* %0, %struct.rtx_def** %prev, align 8, !dbg !8624
  br label %while.cond, !dbg !8626

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8627
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8627
  %bf.load = load i32, i32* %2, align 8, !dbg !8627
  %bf.clear = and i32 %bf.load, 65535, !dbg !8627
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8627
  br i1 %cmp, label %while.body, label %while.end, !dbg !8626

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8628
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8628
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8628
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8628
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8628
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8628
  store %struct.rtx_def* %4, %struct.rtx_def** %prev, align 8, !dbg !8629
  br label %while.cond, !dbg !8626, !llvm.loop !8630

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8631
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8631
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8631
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8631
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8631
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8631

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8631
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8631
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8631
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8631
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8631
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8631

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8631
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8631
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8631
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8631
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8631
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8631

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8631
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8631
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8631
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8631
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8631
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8633

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8634
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8635
  %15 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !8636
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8636
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8636
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8636
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8636
  %16 = load i32, i32* %rt_int, align 8, !dbg !8636
  %call = call %struct.rtx_def* @emit_call_insn_after_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8637
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8638
  br label %return, !dbg !8638

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8639
  %18 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8640
  %call18 = call %struct.rtx_def* @emit_call_insn_after_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !8641
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8642
  br label %return, !dbg !8642

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8643
  ret %struct.rtx_def* %19, !dbg !8643
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_after_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %after, i32 %loc) #0 !dbg !8644 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8645, metadata !DIExpression()), !dbg !8646
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8647, metadata !DIExpression()), !dbg !8648
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8649, metadata !DIExpression()), !dbg !8650
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8651, metadata !DIExpression()), !dbg !8652
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8653
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8654
  %call = call %struct.rtx_def* @emit_debug_insn_after_noloc(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !8655
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8652
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8656
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !8658
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8659

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %loc.addr, align 4, !dbg !8660
  %tobool = icmp ne i32 %3, 0, !dbg !8660
  br i1 %tobool, label %if.end, label %if.then, !dbg !8661

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8662
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !8663
  br label %return, !dbg !8663

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8664
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8664
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8664
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8664
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8664
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8664
  store %struct.rtx_def* %6, %struct.rtx_def** %after.addr, align 8, !dbg !8665
  br label %while.body, !dbg !8666

while.body:                                       ; preds = %if.end, %if.end15
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8667
  %call1 = call i32 @active_insn_p(%struct.rtx_def* %7), !dbg !8670
  %tobool2 = icmp ne i32 %call1, 0, !dbg !8670
  br i1 %tobool2, label %land.lhs.true, label %if.end12, !dbg !8671

land.lhs.true:                                    ; preds = %while.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8672
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8672
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !8672
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 4, !dbg !8672
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !8672
  %9 = load i32, i32* %rt_int, align 8, !dbg !8672
  %tobool6 = icmp ne i32 %9, 0, !dbg !8672
  br i1 %tobool6, label %if.end12, label %if.then7, !dbg !8673

if.then7:                                         ; preds = %land.lhs.true
  %10 = load i32, i32* %loc.addr, align 4, !dbg !8674
  %11 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8675
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8675
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8675
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 4, !dbg !8675
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !8675
  store i32 %10, i32* %rt_int11, align 8, !dbg !8676
  br label %if.end12, !dbg !8675

if.end12:                                         ; preds = %if.then7, %land.lhs.true, %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8677
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8679
  %cmp13 = icmp eq %struct.rtx_def* %12, %13, !dbg !8680
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !8681

if.then14:                                        ; preds = %if.end12
  br label %while.end, !dbg !8682

if.end15:                                         ; preds = %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8683
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8683
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8683
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !8683
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !8683
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !8683
  store %struct.rtx_def* %15, %struct.rtx_def** %after.addr, align 8, !dbg !8684
  br label %while.body, !dbg !8666, !llvm.loop !8685

while.end:                                        ; preds = %if.then14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8687
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !8688
  br label %return, !dbg !8688

return:                                           ; preds = %while.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8689
  ret %struct.rtx_def* %17, !dbg !8689
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 !dbg !8690 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8691, metadata !DIExpression()), !dbg !8692
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !8693, metadata !DIExpression()), !dbg !8694
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8695
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8695
  %bf.load = load i32, i32* %1, align 8, !dbg !8695
  %bf.clear = and i32 %bf.load, 65535, !dbg !8695
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !8695
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8695

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8695
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8695
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8695
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8695
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !8695
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !8695

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8695
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8695
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8695
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8695
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !8695
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !8695

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8695
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !8695
  %bf.load9 = load i32, i32* %7, align 8, !dbg !8695
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8695
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !8695
  br i1 %cmp11, label %if.then, label %if.else, !dbg !8697

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8698
  %9 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8699
  %10 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8700
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8700
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8700
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !8700
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8700
  %11 = load i32, i32* %rt_int, align 8, !dbg !8700
  %call = call %struct.rtx_def* @emit_debug_insn_after_setloc(%struct.rtx_def* %8, %struct.rtx_def* %9, i32 %11), !dbg !8701
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8702
  br label %return, !dbg !8702

if.else:                                          ; preds = %lor.lhs.false8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8703
  %13 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !8704
  %call12 = call %struct.rtx_def* @emit_debug_insn_after_noloc(%struct.rtx_def* %12, %struct.rtx_def* %13), !dbg !8705
  store %struct.rtx_def* %call12, %struct.rtx_def** %retval, align 8, !dbg !8706
  br label %return, !dbg !8706

return:                                           ; preds = %if.else, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8707
  ret %struct.rtx_def* %14, !dbg !8707
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %before, i32 %loc) #0 !dbg !8708 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8709, metadata !DIExpression()), !dbg !8710
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8711, metadata !DIExpression()), !dbg !8712
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8713, metadata !DIExpression()), !dbg !8714
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !8715, metadata !DIExpression()), !dbg !8716
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8717
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8717
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8717
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8717
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8717
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8717
  store %struct.rtx_def* %1, %struct.rtx_def** %first, align 8, !dbg !8716
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8718, metadata !DIExpression()), !dbg !8719
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8720
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8721
  %call = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %2, %struct.rtx_def* %3, %struct.basic_block_def* null), !dbg !8722
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8719
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8723
  %cmp = icmp eq %struct.rtx_def* %4, null, !dbg !8725
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8726

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %loc.addr, align 4, !dbg !8727
  %tobool = icmp ne i32 %5, 0, !dbg !8727
  br i1 %tobool, label %if.end, label %if.then, !dbg !8728

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8729
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !8730
  br label %return, !dbg !8730

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8731
  %tobool1 = icmp ne %struct.rtx_def* %7, null, !dbg !8731
  br i1 %tobool1, label %if.else, label %if.then2, !dbg !8733

if.then2:                                         ; preds = %if.end
  %call3 = call %struct.rtx_def* @get_insns(), !dbg !8734
  store %struct.rtx_def* %call3, %struct.rtx_def** %first, align 8, !dbg !8735
  br label %if.end8, !dbg !8736

if.else:                                          ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8737
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8737
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !8737
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 2, !dbg !8737
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !8737
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !8737
  store %struct.rtx_def* %9, %struct.rtx_def** %first, align 8, !dbg !8738
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then2
  br label %while.body, !dbg !8739

while.body:                                       ; preds = %if.end8, %if.end23
  %10 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8740
  %call9 = call i32 @active_insn_p(%struct.rtx_def* %10), !dbg !8743
  %tobool10 = icmp ne i32 %call9, 0, !dbg !8743
  br i1 %tobool10, label %land.lhs.true, label %if.end20, !dbg !8744

land.lhs.true:                                    ; preds = %while.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8745
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8745
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !8745
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 4, !dbg !8745
  %rt_int = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !8745
  %12 = load i32, i32* %rt_int, align 8, !dbg !8745
  %tobool14 = icmp ne i32 %12, 0, !dbg !8745
  br i1 %tobool14, label %if.end20, label %if.then15, !dbg !8746

if.then15:                                        ; preds = %land.lhs.true
  %13 = load i32, i32* %loc.addr, align 4, !dbg !8747
  %14 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8748
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8748
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8748
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 4, !dbg !8748
  %rt_int19 = bitcast %union.rtunion_def* %arrayidx18 to i32*, !dbg !8748
  store i32 %13, i32* %rt_int19, align 8, !dbg !8749
  br label %if.end20, !dbg !8748

if.end20:                                         ; preds = %if.then15, %land.lhs.true, %while.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8750
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8752
  %cmp21 = icmp eq %struct.rtx_def* %15, %16, !dbg !8753
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !8754

if.then22:                                        ; preds = %if.end20
  br label %while.end, !dbg !8755

if.end23:                                         ; preds = %if.end20
  %17 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8756
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8756
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8756
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 2, !dbg !8756
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !8756
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !8756
  store %struct.rtx_def* %18, %struct.rtx_def** %first, align 8, !dbg !8757
  br label %while.body, !dbg !8739, !llvm.loop !8758

while.end:                                        ; preds = %if.then22
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8760
  store %struct.rtx_def* %19, %struct.rtx_def** %retval, align 8, !dbg !8761
  br label %return, !dbg !8761

return:                                           ; preds = %while.end, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8762
  ret %struct.rtx_def* %20, !dbg !8762
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 !dbg !8763 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8764, metadata !DIExpression()), !dbg !8765
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8766, metadata !DIExpression()), !dbg !8767
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8768, metadata !DIExpression()), !dbg !8769
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8770
  store %struct.rtx_def* %0, %struct.rtx_def** %next, align 8, !dbg !8769
  br label %while.cond, !dbg !8771

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8772
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8772
  %bf.load = load i32, i32* %2, align 8, !dbg !8772
  %bf.clear = and i32 %bf.load, 65535, !dbg !8772
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8772
  br i1 %cmp, label %while.body, label %while.end, !dbg !8771

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8773
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8773
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8773
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8773
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8773
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8773
  store %struct.rtx_def* %4, %struct.rtx_def** %next, align 8, !dbg !8774
  br label %while.cond, !dbg !8771, !llvm.loop !8775

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8776
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8776
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8776
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8776
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8776
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8776

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8776
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8776
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8776
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8776
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8776
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8776

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8776
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8776
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8776
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8776
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8776
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8776

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8776
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8776
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8776
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8776
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8776
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8778

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8779
  %14 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8780
  %15 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8781
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8781
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8781
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8781
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8781
  %16 = load i32, i32* %rt_int, align 8, !dbg !8781
  %call = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8782
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8783
  br label %return, !dbg !8783

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8784
  %18 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8785
  %call18 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18, %struct.basic_block_def* null), !dbg !8786
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8787
  br label %return, !dbg !8787

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8788
  ret %struct.rtx_def* %19, !dbg !8788
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_before_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %before, i32 %loc) #0 !dbg !8789 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8790, metadata !DIExpression()), !dbg !8791
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8792, metadata !DIExpression()), !dbg !8793
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8794, metadata !DIExpression()), !dbg !8795
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !8796, metadata !DIExpression()), !dbg !8797
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8798
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8798
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8798
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8798
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8798
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8798
  store %struct.rtx_def* %1, %struct.rtx_def** %first, align 8, !dbg !8797
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8799, metadata !DIExpression()), !dbg !8800
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8801
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8802
  %call = call %struct.rtx_def* @emit_jump_insn_before_noloc(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !8803
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8800
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8804
  %cmp = icmp eq %struct.rtx_def* %4, null, !dbg !8806
  br i1 %cmp, label %if.then, label %if.end, !dbg !8807

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8808
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !8809
  br label %return, !dbg !8809

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8810
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8810
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8810
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !8810
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8810
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !8810
  store %struct.rtx_def* %7, %struct.rtx_def** %first, align 8, !dbg !8811
  br label %while.body, !dbg !8812

while.body:                                       ; preds = %if.end, %if.end18
  %8 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8813
  %call5 = call i32 @active_insn_p(%struct.rtx_def* %8), !dbg !8816
  %tobool = icmp ne i32 %call5, 0, !dbg !8816
  br i1 %tobool, label %land.lhs.true, label %if.end15, !dbg !8817

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8818
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8818
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !8818
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 4, !dbg !8818
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !8818
  %10 = load i32, i32* %rt_int, align 8, !dbg !8818
  %tobool9 = icmp ne i32 %10, 0, !dbg !8818
  br i1 %tobool9, label %if.end15, label %if.then10, !dbg !8819

if.then10:                                        ; preds = %land.lhs.true
  %11 = load i32, i32* %loc.addr, align 4, !dbg !8820
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8821
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !8821
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !8821
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 4, !dbg !8821
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !8821
  store i32 %11, i32* %rt_int14, align 8, !dbg !8822
  br label %if.end15, !dbg !8821

if.end15:                                         ; preds = %if.then10, %land.lhs.true, %while.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8823
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8825
  %cmp16 = icmp eq %struct.rtx_def* %13, %14, !dbg !8826
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8827

if.then17:                                        ; preds = %if.end15
  br label %while.end, !dbg !8828

if.end18:                                         ; preds = %if.end15
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8829
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8829
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !8829
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 2, !dbg !8829
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !8829
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !8829
  store %struct.rtx_def* %16, %struct.rtx_def** %first, align 8, !dbg !8830
  br label %while.body, !dbg !8812, !llvm.loop !8831

while.end:                                        ; preds = %if.then17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8833
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !8834
  br label %return, !dbg !8834

return:                                           ; preds = %while.end, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8835
  ret %struct.rtx_def* %18, !dbg !8835
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 !dbg !8836 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8837, metadata !DIExpression()), !dbg !8838
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8839, metadata !DIExpression()), !dbg !8840
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8841, metadata !DIExpression()), !dbg !8842
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8843
  store %struct.rtx_def* %0, %struct.rtx_def** %next, align 8, !dbg !8842
  br label %while.cond, !dbg !8844

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8845
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8845
  %bf.load = load i32, i32* %2, align 8, !dbg !8845
  %bf.clear = and i32 %bf.load, 65535, !dbg !8845
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8845
  br i1 %cmp, label %while.body, label %while.end, !dbg !8844

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8846
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8846
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8846
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8846
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8846
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8846
  store %struct.rtx_def* %4, %struct.rtx_def** %next, align 8, !dbg !8847
  br label %while.cond, !dbg !8844, !llvm.loop !8848

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8849
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8849
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8849
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8849
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8849
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8849

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8849
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8849
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8849
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8849
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8849
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8849

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8849
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8849
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8849
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8849
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8849
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8849

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8849
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8849
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8849
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8849
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8849
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8851

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8852
  %14 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8853
  %15 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8854
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8854
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8854
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8854
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8854
  %16 = load i32, i32* %rt_int, align 8, !dbg !8854
  %call = call %struct.rtx_def* @emit_jump_insn_before_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8855
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8856
  br label %return, !dbg !8856

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8857
  %18 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8858
  %call18 = call %struct.rtx_def* @emit_jump_insn_before_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !8859
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8860
  br label %return, !dbg !8860

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8861
  ret %struct.rtx_def* %19, !dbg !8861
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_before_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %before, i32 %loc) #0 !dbg !8862 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8865, metadata !DIExpression()), !dbg !8866
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8867, metadata !DIExpression()), !dbg !8868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !8869, metadata !DIExpression()), !dbg !8870
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8871
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8871
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8871
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8871
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8871
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8871
  store %struct.rtx_def* %1, %struct.rtx_def** %first, align 8, !dbg !8870
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8872, metadata !DIExpression()), !dbg !8873
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8874
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8875
  %call = call %struct.rtx_def* @emit_call_insn_before_noloc(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !8876
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8873
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8877
  %cmp = icmp eq %struct.rtx_def* %4, null, !dbg !8879
  br i1 %cmp, label %if.then, label %if.end, !dbg !8880

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8881
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !8882
  br label %return, !dbg !8882

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8883
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8883
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8883
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !8883
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8883
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !8883
  store %struct.rtx_def* %7, %struct.rtx_def** %first, align 8, !dbg !8884
  br label %while.body, !dbg !8885

while.body:                                       ; preds = %if.end, %if.end18
  %8 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8886
  %call5 = call i32 @active_insn_p(%struct.rtx_def* %8), !dbg !8889
  %tobool = icmp ne i32 %call5, 0, !dbg !8889
  br i1 %tobool, label %land.lhs.true, label %if.end15, !dbg !8890

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8891
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8891
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !8891
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 4, !dbg !8891
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !8891
  %10 = load i32, i32* %rt_int, align 8, !dbg !8891
  %tobool9 = icmp ne i32 %10, 0, !dbg !8891
  br i1 %tobool9, label %if.end15, label %if.then10, !dbg !8892

if.then10:                                        ; preds = %land.lhs.true
  %11 = load i32, i32* %loc.addr, align 4, !dbg !8893
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8894
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !8894
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !8894
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 4, !dbg !8894
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !8894
  store i32 %11, i32* %rt_int14, align 8, !dbg !8895
  br label %if.end15, !dbg !8894

if.end15:                                         ; preds = %if.then10, %land.lhs.true, %while.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8896
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8898
  %cmp16 = icmp eq %struct.rtx_def* %13, %14, !dbg !8899
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8900

if.then17:                                        ; preds = %if.end15
  br label %while.end, !dbg !8901

if.end18:                                         ; preds = %if.end15
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8902
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8902
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !8902
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 2, !dbg !8902
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !8902
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !8902
  store %struct.rtx_def* %16, %struct.rtx_def** %first, align 8, !dbg !8903
  br label %while.body, !dbg !8885, !llvm.loop !8904

while.end:                                        ; preds = %if.then17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8906
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !8907
  br label %return, !dbg !8907

return:                                           ; preds = %while.end, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8908
  ret %struct.rtx_def* %18, !dbg !8908
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 !dbg !8909 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8910, metadata !DIExpression()), !dbg !8911
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8912, metadata !DIExpression()), !dbg !8913
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8914, metadata !DIExpression()), !dbg !8915
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8916
  store %struct.rtx_def* %0, %struct.rtx_def** %next, align 8, !dbg !8915
  br label %while.cond, !dbg !8917

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8918
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8918
  %bf.load = load i32, i32* %2, align 8, !dbg !8918
  %bf.clear = and i32 %bf.load, 65535, !dbg !8918
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !8918
  br i1 %cmp, label %while.body, label %while.end, !dbg !8917

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8919
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8919
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8919
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8919
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8919
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8919
  store %struct.rtx_def* %4, %struct.rtx_def** %next, align 8, !dbg !8920
  br label %while.cond, !dbg !8917, !llvm.loop !8921

while.end:                                        ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8922
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8922
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8922
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8922
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !8922
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8922

lor.lhs.false:                                    ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8922
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8922
  %bf.load4 = load i32, i32* %8, align 8, !dbg !8922
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8922
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !8922
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8922

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8922
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8922
  %bf.load8 = load i32, i32* %10, align 8, !dbg !8922
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8922
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !8922
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !8922

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8922
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !8922
  %bf.load12 = load i32, i32* %12, align 8, !dbg !8922
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8922
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !8922
  br i1 %cmp14, label %if.then, label %if.else, !dbg !8924

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8925
  %14 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8926
  %15 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8927
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8927
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !8927
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 4, !dbg !8927
  %rt_int = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !8927
  %16 = load i32, i32* %rt_int, align 8, !dbg !8927
  %call = call %struct.rtx_def* @emit_call_insn_before_setloc(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %16), !dbg !8928
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8929
  br label %return, !dbg !8929

if.else:                                          ; preds = %lor.lhs.false11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8930
  %18 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8931
  %call18 = call %struct.rtx_def* @emit_call_insn_before_noloc(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !8932
  store %struct.rtx_def* %call18, %struct.rtx_def** %retval, align 8, !dbg !8933
  br label %return, !dbg !8933

return:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8934
  ret %struct.rtx_def* %19, !dbg !8934
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_before_setloc(%struct.rtx_def* %pattern, %struct.rtx_def* %before, i32 %loc) #0 !dbg !8935 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8936, metadata !DIExpression()), !dbg !8937
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8938, metadata !DIExpression()), !dbg !8939
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8940, metadata !DIExpression()), !dbg !8941
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !8942, metadata !DIExpression()), !dbg !8943
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8944
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8944
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8944
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8944
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8944
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8944
  store %struct.rtx_def* %1, %struct.rtx_def** %first, align 8, !dbg !8943
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8945, metadata !DIExpression()), !dbg !8946
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8947
  %3 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8948
  %call = call %struct.rtx_def* @emit_debug_insn_before_noloc(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !8949
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8946
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8950
  %cmp = icmp eq %struct.rtx_def* %4, null, !dbg !8952
  br i1 %cmp, label %if.then, label %if.end, !dbg !8953

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8954
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !8955
  br label %return, !dbg !8955

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8956
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8956
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8956
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !8956
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8956
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !8956
  store %struct.rtx_def* %7, %struct.rtx_def** %first, align 8, !dbg !8957
  br label %while.body, !dbg !8958

while.body:                                       ; preds = %if.end, %if.end18
  %8 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8959
  %call5 = call i32 @active_insn_p(%struct.rtx_def* %8), !dbg !8962
  %tobool = icmp ne i32 %call5, 0, !dbg !8962
  br i1 %tobool, label %land.lhs.true, label %if.end15, !dbg !8963

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8964
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8964
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !8964
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 4, !dbg !8964
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !8964
  %10 = load i32, i32* %rt_int, align 8, !dbg !8964
  %tobool9 = icmp ne i32 %10, 0, !dbg !8964
  br i1 %tobool9, label %if.end15, label %if.then10, !dbg !8965

if.then10:                                        ; preds = %land.lhs.true
  %11 = load i32, i32* %loc.addr, align 4, !dbg !8966
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8967
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !8967
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !8967
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 4, !dbg !8967
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !8967
  store i32 %11, i32* %rt_int14, align 8, !dbg !8968
  br label %if.end15, !dbg !8967

if.end15:                                         ; preds = %if.then10, %land.lhs.true, %while.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8969
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8971
  %cmp16 = icmp eq %struct.rtx_def* %13, %14, !dbg !8972
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8973

if.then17:                                        ; preds = %if.end15
  br label %while.end, !dbg !8974

if.end18:                                         ; preds = %if.end15
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !8975
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8975
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !8975
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 2, !dbg !8975
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !8975
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !8975
  store %struct.rtx_def* %16, %struct.rtx_def** %first, align 8, !dbg !8976
  br label %while.body, !dbg !8958, !llvm.loop !8977

while.end:                                        ; preds = %if.then17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8979
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !8980
  br label %return, !dbg !8980

return:                                           ; preds = %while.end, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8981
  ret %struct.rtx_def* %18, !dbg !8981
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 !dbg !8982 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %before.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !8983, metadata !DIExpression()), !dbg !8984
  store %struct.rtx_def* %before, %struct.rtx_def** %before.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before.addr, metadata !8985, metadata !DIExpression()), !dbg !8986
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8987
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8987
  %bf.load = load i32, i32* %1, align 8, !dbg !8987
  %bf.clear = and i32 %bf.load, 65535, !dbg !8987
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !8987
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8987

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8987
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8987
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8987
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8987
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !8987
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !8987

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8987
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8987
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8987
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8987
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !8987
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !8987

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8987
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !8987
  %bf.load9 = load i32, i32* %7, align 8, !dbg !8987
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8987
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !8987
  br i1 %cmp11, label %if.then, label %if.else, !dbg !8989

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8990
  %9 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8991
  %10 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8992
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8992
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8992
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !8992
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8992
  %11 = load i32, i32* %rt_int, align 8, !dbg !8992
  %call = call %struct.rtx_def* @emit_debug_insn_before_setloc(%struct.rtx_def* %8, %struct.rtx_def* %9, i32 %11), !dbg !8993
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !8994
  br label %return, !dbg !8994

if.else:                                          ; preds = %lor.lhs.false8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !8995
  %13 = load %struct.rtx_def*, %struct.rtx_def** %before.addr, align 8, !dbg !8996
  %call12 = call %struct.rtx_def* @emit_debug_insn_before_noloc(%struct.rtx_def* %12, %struct.rtx_def* %13), !dbg !8997
  store %struct.rtx_def* %call12, %struct.rtx_def** %retval, align 8, !dbg !8998
  br label %return, !dbg !8998

return:                                           ; preds = %if.else, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8999
  ret %struct.rtx_def* %14, !dbg !8999
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def* %x) #0 !dbg !9000 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9001, metadata !DIExpression()), !dbg !9002
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9003, metadata !DIExpression()), !dbg !9004
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9005
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !9004
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9006, metadata !DIExpression()), !dbg !9007
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9008
  %cmp = icmp eq %struct.rtx_def* %1, null, !dbg !9010
  br i1 %cmp, label %if.then, label %if.end, !dbg !9011

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9012
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !9013
  br label %return, !dbg !9013

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9014
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9014
  %bf.load = load i32, i32* %4, align 8, !dbg !9014
  %bf.clear = and i32 %bf.load, 65535, !dbg !9014
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !9015

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9016
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !9018
  br label %while.cond, !dbg !9019

while.cond:                                       ; preds = %while.body, %sw.bb
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9020
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !9019
  br i1 %tobool, label %while.body, label %while.end, !dbg !9019

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !9021, metadata !DIExpression()), !dbg !9023
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9024
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9024
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9024
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9024
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9024
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9024
  store %struct.rtx_def* %8, %struct.rtx_def** %next, align 8, !dbg !9023
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9025
  call void @add_insn(%struct.rtx_def* %9), !dbg !9026
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9027
  store %struct.rtx_def* %10, %struct.rtx_def** %last, align 8, !dbg !9028
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !9029
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !9030
  br label %while.cond, !dbg !9019, !llvm.loop !9031

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !9033

sw.default:                                       ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9034
  %call = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %12), !dbg !9035
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9036
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9037
  call void @add_insn(%struct.rtx_def* %13), !dbg !9038
  br label %sw.epilog, !dbg !9039

sw.epilog:                                        ; preds = %sw.default, %while.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9040
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !9041
  br label %return, !dbg !9041

return:                                           ; preds = %sw.epilog, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9042
  ret %struct.rtx_def* %15, !dbg !9042
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_debug_insn(%struct.rtx_def* %x) #0 !dbg !9043 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9044, metadata !DIExpression()), !dbg !9045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9046, metadata !DIExpression()), !dbg !9047
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9048
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !9047
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9049, metadata !DIExpression()), !dbg !9050
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9051
  %cmp = icmp eq %struct.rtx_def* %1, null, !dbg !9053
  br i1 %cmp, label %if.then, label %if.end, !dbg !9054

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9055
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !9056
  br label %return, !dbg !9056

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9057
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9057
  %bf.load = load i32, i32* %4, align 8, !dbg !9057
  %bf.clear = and i32 %bf.load, 65535, !dbg !9057
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !9058

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9059
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !9061
  br label %while.cond, !dbg !9062

while.cond:                                       ; preds = %while.body, %sw.bb
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9063
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !9062
  br i1 %tobool, label %while.body, label %while.end, !dbg !9062

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !9064, metadata !DIExpression()), !dbg !9066
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9067
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9067
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9067
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9067
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9067
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9067
  store %struct.rtx_def* %8, %struct.rtx_def** %next, align 8, !dbg !9066
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9068
  call void @add_insn(%struct.rtx_def* %9), !dbg !9069
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9070
  store %struct.rtx_def* %10, %struct.rtx_def** %last, align 8, !dbg !9071
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !9072
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !9073
  br label %while.cond, !dbg !9062, !llvm.loop !9074

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !9076

sw.default:                                       ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9077
  %call = call %struct.rtx_def* @make_debug_insn_raw(%struct.rtx_def* %12), !dbg !9078
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9079
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9080
  call void @add_insn(%struct.rtx_def* %13), !dbg !9081
  br label %sw.epilog, !dbg !9082

sw.epilog:                                        ; preds = %sw.default, %while.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9083
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !9084
  br label %return, !dbg !9084

return:                                           ; preds = %sw.epilog, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9085
  ret %struct.rtx_def* %15, !dbg !9085
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %x) #0 !dbg !9086 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9087, metadata !DIExpression()), !dbg !9088
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9089, metadata !DIExpression()), !dbg !9090
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !9090
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9091, metadata !DIExpression()), !dbg !9092
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9093
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9093
  %bf.load = load i32, i32* %1, align 8, !dbg !9093
  %bf.clear = and i32 %bf.load, 65535, !dbg !9093
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !9094

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9095
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !9097
  br label %while.cond, !dbg !9098

while.cond:                                       ; preds = %while.body, %sw.bb
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9099
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !9098
  br i1 %tobool, label %while.body, label %while.end, !dbg !9098

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !9100, metadata !DIExpression()), !dbg !9102
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9103
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9103
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9103
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9103
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9103
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9103
  store %struct.rtx_def* %5, %struct.rtx_def** %next, align 8, !dbg !9102
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9104
  call void @add_insn(%struct.rtx_def* %6), !dbg !9105
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9106
  store %struct.rtx_def* %7, %struct.rtx_def** %last, align 8, !dbg !9107
  %8 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !9108
  store %struct.rtx_def* %8, %struct.rtx_def** %insn, align 8, !dbg !9109
  br label %while.cond, !dbg !9098, !llvm.loop !9110

while.end:                                        ; preds = %while.cond
  br label %sw.epilog, !dbg !9112

sw.default:                                       ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9113
  %call = call %struct.rtx_def* @make_jump_insn_raw(%struct.rtx_def* %9), !dbg !9114
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9115
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9116
  call void @add_insn(%struct.rtx_def* %10), !dbg !9117
  br label %sw.epilog, !dbg !9118

sw.epilog:                                        ; preds = %sw.default, %while.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9119
  ret %struct.rtx_def* %11, !dbg !9120
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %x) #0 !dbg !9121 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9122, metadata !DIExpression()), !dbg !9123
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9124, metadata !DIExpression()), !dbg !9125
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9126
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9126
  %bf.load = load i32, i32* %1, align 8, !dbg !9126
  %bf.clear = and i32 %bf.load, 65535, !dbg !9126
  switch i32 %bf.clear, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !9127

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9128
  %call = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %2), !dbg !9130
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !9131
  br label %sw.epilog, !dbg !9132

sw.default:                                       ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9133
  %call1 = call %struct.rtx_def* @make_call_insn_raw(%struct.rtx_def* %3), !dbg !9134
  store %struct.rtx_def* %call1, %struct.rtx_def** %insn, align 8, !dbg !9135
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9136
  call void @add_insn(%struct.rtx_def* %4), !dbg !9137
  br label %sw.epilog, !dbg !9138

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9139
  ret %struct.rtx_def* %5, !dbg !9140
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_label(%struct.rtx_def* %label) #0 !dbg !9141 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !9142, metadata !DIExpression()), !dbg !9143
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !9144
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9144
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9144
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9144
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9144
  %1 = load i32, i32* %rt_int, align 8, !dbg !9144
  %cmp = icmp eq i32 %1, 0, !dbg !9146
  br i1 %cmp, label %if.then, label %if.end, !dbg !9147

if.then:                                          ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9148
  %inc = add nsw i32 %2, 1, !dbg !9148
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9148
  %3 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !9150
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9150
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9150
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !9150
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !9150
  store i32 %2, i32* %rt_int4, align 8, !dbg !9151
  %4 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !9152
  call void @add_insn(%struct.rtx_def* %4), !dbg !9153
  br label %if.end, !dbg !9154

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !9155
  ret %struct.rtx_def* %5, !dbg !9156
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_barrier() #0 !dbg !9157 {
entry:
  %barrier = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %barrier, metadata !9158, metadata !DIExpression()), !dbg !9159
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 11), !dbg !9160
  store %struct.rtx_def* %call, %struct.rtx_def** %barrier, align 8, !dbg !9159
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9161
  %inc = add nsw i32 %0, 1, !dbg !9161
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9161
  %1 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !9162
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9162
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9162
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9162
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9162
  store i32 %0, i32* %rt_int, align 8, !dbg !9163
  %2 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !9164
  call void @add_insn(%struct.rtx_def* %2), !dbg !9165
  %3 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !9166
  ret %struct.rtx_def* %3, !dbg !9167
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_note_copy(%struct.rtx_def* %orig) #0 !dbg !9168 {
entry:
  %orig.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig, %struct.rtx_def** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig.addr, metadata !9169, metadata !DIExpression()), !dbg !9170
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9171, metadata !DIExpression()), !dbg !9172
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 13), !dbg !9173
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !9174
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9175
  %inc = add nsw i32 %0, 1, !dbg !9175
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9175
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9176
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9176
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9176
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9176
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9176
  store i32 %0, i32* %rt_int, align 8, !dbg !9177
  %2 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9178
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9178
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9178
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 4, !dbg !9178
  %3 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9179
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9179
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9179
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 4, !dbg !9179
  %4 = bitcast %union.rtunion_def* %arrayidx3 to i8*, !dbg !9179
  %5 = bitcast %union.rtunion_def* %arrayidx6 to i8*, !dbg !9179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 8, i1 false), !dbg !9179
  %6 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9180
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9180
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !9180
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 5, !dbg !9180
  %rt_int10 = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !9180
  %7 = load i32, i32* %rt_int10, align 8, !dbg !9180
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9181
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9181
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !9181
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 5, !dbg !9181
  %rt_int14 = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !9181
  store i32 %7, i32* %rt_int14, align 8, !dbg !9182
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9183
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !9183
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !9183
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 3, !dbg !9183
  %rt_bb = bitcast %union.rtunion_def* %arrayidx17 to %struct.basic_block_def**, !dbg !9183
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !9184
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9185
  call void @add_insn(%struct.rtx_def* %10), !dbg !9186
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9187
  ret %struct.rtx_def* %11, !dbg !9188
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_note(i32 %kind) #0 !dbg !9189 {
entry:
  %kind.addr = alloca i32, align 4
  %note = alloca %struct.rtx_def*, align 8
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !9192, metadata !DIExpression()), !dbg !9193
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9194, metadata !DIExpression()), !dbg !9195
  %call = call %struct.rtx_def* @rtx_alloc_stat(i32 13), !dbg !9196
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !9197
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9198
  %inc = add nsw i32 %0, 1, !dbg !9198
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9198
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9199
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9199
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9199
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9199
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9199
  store i32 %0, i32* %rt_int, align 8, !dbg !9200
  %2 = load i32, i32* %kind.addr, align 4, !dbg !9201
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9202
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9202
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9202
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !9202
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !9202
  store i32 %2, i32* %rt_int4, align 8, !dbg !9203
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9204
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9204
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !9204
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 4, !dbg !9204
  %5 = bitcast %union.rtunion_def* %arrayidx7 to i8*, !dbg !9205
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 8, i1 false), !dbg !9205
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9206
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9206
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !9206
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 3, !dbg !9206
  %rt_bb = bitcast %union.rtunion_def* %arrayidx10 to %struct.basic_block_def**, !dbg !9206
  store %struct.basic_block_def* null, %struct.basic_block_def** %rt_bb, align 8, !dbg !9207
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9208
  call void @add_insn(%struct.rtx_def* %7), !dbg !9209
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9210
  ret %struct.rtx_def* %8, !dbg !9211
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_clobber(%struct.rtx_def* %x) #0 !dbg !9212 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9213, metadata !DIExpression()), !dbg !9214
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9215
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9215
  %bf.load = load i32, i32* %1, align 8, !dbg !9215
  %bf.clear = and i32 %bf.load, 65535, !dbg !9215
  %cmp = icmp eq i32 %bf.clear, 41, !dbg !9217
  br i1 %cmp, label %if.then, label %if.end, !dbg !9218

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9219
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9219
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9219
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9219
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9219
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9219
  %call = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %3), !dbg !9221
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9222
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9222
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9222
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !9222
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !9222
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !9222
  %call5 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %5), !dbg !9223
  store %struct.rtx_def* %call5, %struct.rtx_def** %retval, align 8, !dbg !9224
  br label %return, !dbg !9224

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9225
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %6), !dbg !9225
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6), !dbg !9226
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !9227
  br label %return, !dbg !9227

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9228
  ret %struct.rtx_def* %7, !dbg !9228
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_clobber(%struct.rtx_def* %x) #0 !dbg !9229 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9230, metadata !DIExpression()), !dbg !9231
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9232, metadata !DIExpression()), !dbg !9233
  call void @start_sequence(), !dbg !9234
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9235
  %call = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %0), !dbg !9236
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !9237
  store %struct.rtx_def* %call1, %struct.rtx_def** %seq, align 8, !dbg !9238
  call void @end_sequence(), !dbg !9239
  %1 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9240
  ret %struct.rtx_def* %1, !dbg !9241
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @start_sequence() #0 !dbg !9242 {
entry:
  %tem = alloca %struct.sequence_stack*, align 8
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %tem, metadata !9243, metadata !DIExpression()), !dbg !9244
  %0 = load %struct.sequence_stack*, %struct.sequence_stack** @free_sequence_stack, align 8, !dbg !9245
  %cmp = icmp ne %struct.sequence_stack* %0, null, !dbg !9247
  br i1 %cmp, label %if.then, label %if.else, !dbg !9248

if.then:                                          ; preds = %entry
  %1 = load %struct.sequence_stack*, %struct.sequence_stack** @free_sequence_stack, align 8, !dbg !9249
  store %struct.sequence_stack* %1, %struct.sequence_stack** %tem, align 8, !dbg !9251
  %2 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9252
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %2, i32 0, i32 2, !dbg !9253
  %3 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !9253
  store %struct.sequence_stack* %3, %struct.sequence_stack** @free_sequence_stack, align 8, !dbg !9254
  br label %if.end, !dbg !9255

if.else:                                          ; preds = %entry
  %call = call i8* @ggc_alloc_stat(i64 24), !dbg !9256
  %4 = bitcast i8* %call to %struct.sequence_stack*, !dbg !9256
  store %struct.sequence_stack* %4, %struct.sequence_stack** %tem, align 8, !dbg !9257
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9258
  %6 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9259
  %next1 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %6, i32 0, i32 2, !dbg !9260
  store %struct.sequence_stack* %5, %struct.sequence_stack** %next1, align 8, !dbg !9261
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9262
  %8 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9263
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %8, i32 0, i32 0, !dbg !9264
  store %struct.rtx_def* %7, %struct.rtx_def** %first, align 8, !dbg !9265
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9266
  %10 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9267
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %10, i32 0, i32 1, !dbg !9268
  store %struct.rtx_def* %9, %struct.rtx_def** %last, align 8, !dbg !9269
  %11 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9270
  store %struct.sequence_stack* %11, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9271
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9272
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9273
  ret void, !dbg !9274
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @end_sequence() #0 !dbg !9275 {
entry:
  %tem = alloca %struct.sequence_stack*, align 8
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %tem, metadata !9276, metadata !DIExpression()), !dbg !9277
  %0 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9278
  store %struct.sequence_stack* %0, %struct.sequence_stack** %tem, align 8, !dbg !9277
  %1 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9279
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %1, i32 0, i32 0, !dbg !9280
  %2 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9280
  store %struct.rtx_def* %2, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9281
  %3 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9282
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %3, i32 0, i32 1, !dbg !9283
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9283
  store %struct.rtx_def* %4, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9284
  %5 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9285
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %5, i32 0, i32 2, !dbg !9286
  %6 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !9286
  store %struct.sequence_stack* %6, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9287
  %7 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9288
  %8 = bitcast %struct.sequence_stack* %7 to i8*, !dbg !9289
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false), !dbg !9289
  %9 = load %struct.sequence_stack*, %struct.sequence_stack** @free_sequence_stack, align 8, !dbg !9290
  %10 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9291
  %next1 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %10, i32 0, i32 2, !dbg !9292
  store %struct.sequence_stack* %9, %struct.sequence_stack** %next1, align 8, !dbg !9293
  %11 = load %struct.sequence_stack*, %struct.sequence_stack** %tem, align 8, !dbg !9294
  store %struct.sequence_stack* %11, %struct.sequence_stack** @free_sequence_stack, align 8, !dbg !9295
  ret void, !dbg !9296
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_use(%struct.rtx_def* %x) #0 !dbg !9297 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9298, metadata !DIExpression()), !dbg !9299
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9300
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9300
  %bf.load = load i32, i32* %1, align 8, !dbg !9300
  %bf.clear = and i32 %bf.load, 65535, !dbg !9300
  %cmp = icmp eq i32 %bf.clear, 41, !dbg !9302
  br i1 %cmp, label %if.then, label %if.end, !dbg !9303

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9304
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9304
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9304
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9304
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9304
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9304
  %call = call %struct.rtx_def* @emit_use(%struct.rtx_def* %3), !dbg !9306
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9307
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9307
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9307
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !9307
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !9307
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !9307
  %call5 = call %struct.rtx_def* @emit_use(%struct.rtx_def* %5), !dbg !9308
  store %struct.rtx_def* %call5, %struct.rtx_def** %retval, align 8, !dbg !9309
  br label %return, !dbg !9309

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9310
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %6), !dbg !9310
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6), !dbg !9311
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !9312
  br label %return, !dbg !9312

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9313
  ret %struct.rtx_def* %7, !dbg !9313
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_use(%struct.rtx_def* %x) #0 !dbg !9314 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9317, metadata !DIExpression()), !dbg !9318
  call void @start_sequence(), !dbg !9319
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9320
  %call = call %struct.rtx_def* @emit_use(%struct.rtx_def* %0), !dbg !9321
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !9322
  store %struct.rtx_def* %call1, %struct.rtx_def** %seq, align 8, !dbg !9323
  call void @end_sequence(), !dbg !9324
  %1 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9325
  ret %struct.rtx_def* %1, !dbg !9326
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @force_next_line_note() #0 !dbg !9327 {
entry:
  store i32 -1, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 7), align 8, !dbg !9328
  ret void, !dbg !9329
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %insn, i32 %kind, %struct.rtx_def* %datum) #0 !dbg !9330 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %kind.addr = alloca i32, align 4
  %datum.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9333, metadata !DIExpression()), !dbg !9334
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !9335, metadata !DIExpression()), !dbg !9336
  store %struct.rtx_def* %datum, %struct.rtx_def** %datum.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %datum.addr, metadata !9337, metadata !DIExpression()), !dbg !9338
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9339, metadata !DIExpression()), !dbg !9340
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9341
  %1 = load i32, i32* %kind.addr, align 4, !dbg !9342
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 %1, %struct.rtx_def* null), !dbg !9343
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !9340
  %2 = load i32, i32* %kind.addr, align 4, !dbg !9344
  switch i32 %2, label %sw.default [
    i32 4, label %sw.bb
    i32 3, label %sw.bb
  ], !dbg !9345

sw.bb:                                            ; preds = %entry, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9346
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9346
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9346
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9346
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9346
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9346
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9346
  %bf.load = load i32, i32* %5, align 8, !dbg !9346
  %bf.clear = and i32 %bf.load, 65535, !dbg !9346
  %cmp = icmp eq i32 %bf.clear, 15, !dbg !9349
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9350

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9351
  %call1 = call i32 @multiple_sets(%struct.rtx_def* %6), !dbg !9352
  %tobool = icmp ne i32 %call1, 0, !dbg !9352
  br i1 %tobool, label %if.then, label %if.end, !dbg !9353

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9354
  %tobool2 = icmp ne %struct.rtx_def* %7, null, !dbg !9354
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !9354

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5124, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9354
  br label %cond.end, !dbg !9354

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9354
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9356
  br label %return, !dbg !9356

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %datum.addr, align 8, !dbg !9357
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9357
  %bf.load3 = load i32, i32* %9, align 8, !dbg !9357
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !9357
  %cmp5 = icmp eq i32 %bf.clear4, 17, !dbg !9359
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !9360

if.then6:                                         ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9361
  br label %return, !dbg !9361

if.end7:                                          ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9362
  %tobool8 = icmp ne %struct.rtx_def* %10, null, !dbg !9362
  br i1 %tobool8, label %if.then9, label %if.end14, !dbg !9364

if.then9:                                         ; preds = %if.end7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %datum.addr, align 8, !dbg !9365
  %12 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9367
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9367
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !9367
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !9367
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !9367
  store %struct.rtx_def* %11, %struct.rtx_def** %rt_rtx13, align 8, !dbg !9368
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9369
  call void @df_notes_rescan(%struct.rtx_def* %13), !dbg !9370
  %14 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9371
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !9372
  br label %return, !dbg !9372

if.end14:                                         ; preds = %if.end7
  br label %sw.epilog, !dbg !9373

sw.default:                                       ; preds = %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9374
  %tobool15 = icmp ne %struct.rtx_def* %15, null, !dbg !9374
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !9376

if.then16:                                        ; preds = %sw.default
  %16 = load %struct.rtx_def*, %struct.rtx_def** %datum.addr, align 8, !dbg !9377
  %17 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9379
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !9379
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !9379
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !9379
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !9379
  store %struct.rtx_def* %16, %struct.rtx_def** %rt_rtx20, align 8, !dbg !9380
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9381
  store %struct.rtx_def* %18, %struct.rtx_def** %retval, align 8, !dbg !9382
  br label %return, !dbg !9382

if.end21:                                         ; preds = %sw.default
  br label %sw.epilog, !dbg !9383

sw.epilog:                                        ; preds = %if.end21, %if.end14
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9384
  %20 = load i32, i32* %kind.addr, align 4, !dbg !9385
  %21 = load %struct.rtx_def*, %struct.rtx_def** %datum.addr, align 8, !dbg !9386
  call void @add_reg_note(%struct.rtx_def* %19, i32 %20, %struct.rtx_def* %21), !dbg !9387
  %22 = load i32, i32* %kind.addr, align 4, !dbg !9388
  switch i32 %22, label %sw.default23 [
    i32 4, label %sw.bb22
    i32 3, label %sw.bb22
  ], !dbg !9389

sw.bb22:                                          ; preds = %sw.epilog, %sw.epilog
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9390
  call void @df_notes_rescan(%struct.rtx_def* %23), !dbg !9392
  br label %sw.epilog24, !dbg !9393

sw.default23:                                     ; preds = %sw.epilog
  br label %sw.epilog24, !dbg !9394

sw.epilog24:                                      ; preds = %sw.default23, %sw.bb22
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9395
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !9395
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !9395
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 7, !dbg !9395
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !9395
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !9395
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !9396
  br label %return, !dbg !9396

return:                                           ; preds = %sw.epilog24, %if.then16, %if.then9, %if.then6, %cond.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9397
  ret %struct.rtx_def* %26, !dbg !9397
}

declare dso_local i32 @multiple_sets(%struct.rtx_def*) #2

declare dso_local void @df_notes_rescan(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit(%struct.rtx_def* %x) #0 !dbg !9398 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9399, metadata !DIExpression()), !dbg !9400
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9401, metadata !DIExpression()), !dbg !9402
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9403
  %call = call i32 @classify_insn(%struct.rtx_def* %0), !dbg !9404
  store i32 %call, i32* %code, align 4, !dbg !9402
  %1 = load i32, i32* %code, align 4, !dbg !9405
  switch i32 %1, label %sw.default [
    i32 12, label %sw.bb
    i32 8, label %sw.bb2
    i32 9, label %sw.bb4
    i32 10, label %sw.bb8
    i32 7, label %sw.bb10
  ], !dbg !9406

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9407
  %call1 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2), !dbg !9409
  store %struct.rtx_def* %call1, %struct.rtx_def** %retval, align 8, !dbg !9410
  br label %return, !dbg !9410

sw.bb2:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9411
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %3), !dbg !9412
  store %struct.rtx_def* %call3, %struct.rtx_def** %retval, align 8, !dbg !9413
  br label %return, !dbg !9413

sw.bb4:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9414, metadata !DIExpression()), !dbg !9416
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9417
  %call5 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %4), !dbg !9418
  store %struct.rtx_def* %call5, %struct.rtx_def** %insn, align 8, !dbg !9416
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9419
  %call6 = call i32 @any_uncondjump_p(%struct.rtx_def* %5), !dbg !9421
  %tobool = icmp ne i32 %call6, 0, !dbg !9421
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !9422

lor.lhs.false:                                    ; preds = %sw.bb4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9423
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9423
  %bf.load = load i32, i32* %7, align 8, !dbg !9423
  %bf.clear = and i32 %bf.load, 65535, !dbg !9423
  %cmp = icmp eq i32 %bf.clear, 27, !dbg !9424
  br i1 %cmp, label %if.then, label %if.end, !dbg !9425

if.then:                                          ; preds = %lor.lhs.false, %sw.bb4
  %call7 = call %struct.rtx_def* @emit_barrier(), !dbg !9426
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !9427
  br label %return, !dbg !9427

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9428
  store %struct.rtx_def* %8, %struct.rtx_def** %retval, align 8, !dbg !9429
  br label %return, !dbg !9429

sw.bb8:                                           ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9430
  %call9 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %9), !dbg !9431
  store %struct.rtx_def* %call9, %struct.rtx_def** %retval, align 8, !dbg !9432
  br label %return, !dbg !9432

sw.bb10:                                          ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9433
  %call11 = call %struct.rtx_def* @emit_debug_insn(%struct.rtx_def* %10), !dbg !9434
  store %struct.rtx_def* %call11, %struct.rtx_def** %retval, align 8, !dbg !9435
  br label %return, !dbg !9435

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5228, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9436
  br label %sw.epilog, !dbg !9437

sw.epilog:                                        ; preds = %sw.default
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9438
  br label %return, !dbg !9438

return:                                           ; preds = %sw.epilog, %sw.bb10, %sw.bb8, %if.end, %if.then, %sw.bb2, %sw.bb
  %11 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9439
  ret %struct.rtx_def* %11, !dbg !9439
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @classify_insn(%struct.rtx_def* %x) #0 !dbg !9440 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9443, metadata !DIExpression()), !dbg !9444
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9445
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9445
  %bf.load = load i32, i32* %1, align 8, !dbg !9445
  %bf.clear = and i32 %bf.load, 65535, !dbg !9445
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !9445
  br i1 %cmp, label %if.then, label %if.end, !dbg !9447

if.then:                                          ; preds = %entry
  store i32 12, i32* %retval, align 4, !dbg !9448
  br label %return, !dbg !9448

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9449
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !9449
  %bf.load1 = load i32, i32* %3, align 8, !dbg !9449
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !9449
  %cmp3 = icmp eq i32 %bf.clear2, 26, !dbg !9451
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !9452

if.then4:                                         ; preds = %if.end
  store i32 10, i32* %retval, align 4, !dbg !9453
  br label %return, !dbg !9453

if.end5:                                          ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9454
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9454
  %bf.load6 = load i32, i32* %5, align 8, !dbg !9454
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !9454
  %cmp8 = icmp eq i32 %bf.clear7, 27, !dbg !9456
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !9457

if.then9:                                         ; preds = %if.end5
  store i32 9, i32* %retval, align 4, !dbg !9458
  br label %return, !dbg !9458

if.end10:                                         ; preds = %if.end5
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9459
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9459
  %bf.load11 = load i32, i32* %7, align 8, !dbg !9459
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !9459
  %cmp13 = icmp eq i32 %bf.clear12, 23, !dbg !9461
  br i1 %cmp13, label %if.then14, label %if.end26, !dbg !9462

if.then14:                                        ; preds = %if.end10
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9463
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9463
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9463
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9463
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9463
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9463
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !9466
  %cmp15 = icmp eq %struct.rtx_def* %9, %10, !dbg !9467
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !9468

if.then16:                                        ; preds = %if.then14
  store i32 9, i32* %retval, align 4, !dbg !9469
  br label %return, !dbg !9469

if.else:                                          ; preds = %if.then14
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9470
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9470
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !9470
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !9470
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !9470
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !9470
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !9470
  %bf.load21 = load i32, i32* %13, align 8, !dbg !9470
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !9470
  %cmp23 = icmp eq i32 %bf.clear22, 26, !dbg !9472
  br i1 %cmp23, label %if.then24, label %if.else25, !dbg !9473

if.then24:                                        ; preds = %if.else
  store i32 10, i32* %retval, align 4, !dbg !9474
  br label %return, !dbg !9474

if.else25:                                        ; preds = %if.else
  store i32 8, i32* %retval, align 4, !dbg !9475
  br label %return, !dbg !9475

if.end26:                                         ; preds = %if.end10
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9476
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9476
  %bf.load27 = load i32, i32* %15, align 8, !dbg !9476
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !9476
  %cmp29 = icmp eq i32 %bf.clear28, 15, !dbg !9478
  br i1 %cmp29, label %if.then30, label %if.end98, !dbg !9479

if.then30:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9480, metadata !DIExpression()), !dbg !9482
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9483
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9483
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !9483
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !9483
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**, !dbg !9483
  %17 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9483
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %17, i32 0, i32 0, !dbg !9483
  %18 = load i32, i32* %num_elem, align 8, !dbg !9483
  %sub = sub nsw i32 %18, 1, !dbg !9485
  store i32 %sub, i32* %j, align 4, !dbg !9486
  br label %for.cond, !dbg !9487

for.cond:                                         ; preds = %for.inc, %if.then30
  %19 = load i32, i32* %j, align 4, !dbg !9488
  %cmp34 = icmp sge i32 %19, 0, !dbg !9490
  br i1 %cmp34, label %for.body, label %for.end, !dbg !9491

for.body:                                         ; preds = %for.cond
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9492
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !9492
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !9492
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !9492
  %rt_rtvec38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtvec_def**, !dbg !9492
  %21 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec38, align 8, !dbg !9492
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %21, i32 0, i32 1, !dbg !9492
  %22 = load i32, i32* %j, align 4, !dbg !9492
  %idxprom = sext i32 %22 to i64, !dbg !9492
  %arrayidx39 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !9492
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8, !dbg !9492
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !9492
  %bf.load40 = load i32, i32* %24, align 8, !dbg !9492
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !9492
  %cmp42 = icmp eq i32 %bf.clear41, 26, !dbg !9494
  br i1 %cmp42, label %if.then43, label %if.else44, !dbg !9495

if.then43:                                        ; preds = %for.body
  store i32 10, i32* %retval, align 4, !dbg !9496
  br label %return, !dbg !9496

if.else44:                                        ; preds = %for.body
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9497
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !9497
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !9497
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !9497
  %rt_rtvec48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtvec_def**, !dbg !9497
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec48, align 8, !dbg !9497
  %elem49 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %26, i32 0, i32 1, !dbg !9497
  %27 = load i32, i32* %j, align 4, !dbg !9497
  %idxprom50 = sext i32 %27 to i64, !dbg !9497
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem49, i64 0, i64 %idxprom50, !dbg !9497
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !9497
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9497
  %bf.load52 = load i32, i32* %29, align 8, !dbg !9497
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !9497
  %cmp54 = icmp eq i32 %bf.clear53, 23, !dbg !9499
  br i1 %cmp54, label %land.lhs.true, label %if.else68, !dbg !9500

land.lhs.true:                                    ; preds = %if.else44
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9501
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !9501
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !9501
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !9501
  %rt_rtvec58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtvec_def**, !dbg !9501
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec58, align 8, !dbg !9501
  %elem59 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 1, !dbg !9501
  %32 = load i32, i32* %j, align 4, !dbg !9501
  %idxprom60 = sext i32 %32 to i64, !dbg !9501
  %arrayidx61 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem59, i64 0, i64 %idxprom60, !dbg !9501
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx61, align 8, !dbg !9501
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9501
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !9501
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !9501
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !9501
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !9501
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !9502
  %cmp66 = icmp eq %struct.rtx_def* %34, %35, !dbg !9503
  br i1 %cmp66, label %if.then67, label %if.else68, !dbg !9504

if.then67:                                        ; preds = %land.lhs.true
  store i32 9, i32* %retval, align 4, !dbg !9505
  br label %return, !dbg !9505

if.else68:                                        ; preds = %land.lhs.true, %if.else44
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9506
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9506
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !9506
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 0, !dbg !9506
  %rt_rtvec72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtvec_def**, !dbg !9506
  %37 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec72, align 8, !dbg !9506
  %elem73 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %37, i32 0, i32 1, !dbg !9506
  %38 = load i32, i32* %j, align 4, !dbg !9506
  %idxprom74 = sext i32 %38 to i64, !dbg !9506
  %arrayidx75 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem73, i64 0, i64 %idxprom74, !dbg !9506
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx75, align 8, !dbg !9506
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !9506
  %bf.load76 = load i32, i32* %40, align 8, !dbg !9506
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !9506
  %cmp78 = icmp eq i32 %bf.clear77, 23, !dbg !9508
  br i1 %cmp78, label %land.lhs.true79, label %if.end95, !dbg !9509

land.lhs.true79:                                  ; preds = %if.else68
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9510
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !9510
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !9510
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !9510
  %rt_rtvec83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtvec_def**, !dbg !9510
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec83, align 8, !dbg !9510
  %elem84 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %42, i32 0, i32 1, !dbg !9510
  %43 = load i32, i32* %j, align 4, !dbg !9510
  %idxprom85 = sext i32 %43 to i64, !dbg !9510
  %arrayidx86 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem84, i64 0, i64 %idxprom85, !dbg !9510
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx86, align 8, !dbg !9510
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !9510
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !9510
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 1, !dbg !9510
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !9510
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !9510
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !9510
  %bf.load91 = load i32, i32* %46, align 8, !dbg !9510
  %bf.clear92 = and i32 %bf.load91, 65535, !dbg !9510
  %cmp93 = icmp eq i32 %bf.clear92, 26, !dbg !9511
  br i1 %cmp93, label %if.then94, label %if.end95, !dbg !9512

if.then94:                                        ; preds = %land.lhs.true79
  store i32 10, i32* %retval, align 4, !dbg !9513
  br label %return, !dbg !9513

if.end95:                                         ; preds = %land.lhs.true79, %if.else68
  br label %if.end96

if.end96:                                         ; preds = %if.end95
  br label %if.end97

if.end97:                                         ; preds = %if.end96
  br label %for.inc, !dbg !9514

for.inc:                                          ; preds = %if.end97
  %47 = load i32, i32* %j, align 4, !dbg !9515
  %dec = add nsw i32 %47, -1, !dbg !9515
  store i32 %dec, i32* %j, align 4, !dbg !9515
  br label %for.cond, !dbg !9516, !llvm.loop !9517

for.end:                                          ; preds = %for.cond
  br label %if.end98, !dbg !9519

if.end98:                                         ; preds = %for.end, %if.end26
  store i32 8, i32* %retval, align 4, !dbg !9520
  br label %return, !dbg !9520

return:                                           ; preds = %if.end98, %if.then94, %if.then67, %if.then43, %if.else25, %if.then24, %if.then16, %if.then9, %if.then4, %if.then
  %48 = load i32, i32* %retval, align 4, !dbg !9521
  ret i32 %48, !dbg !9521
}

declare dso_local i32 @any_uncondjump_p(%struct.rtx_def*) #2

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_to_sequence(%struct.rtx_def* %first) #0 !dbg !9522 {
entry:
  %first.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !9523, metadata !DIExpression()), !dbg !9524
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9525, metadata !DIExpression()), !dbg !9526
  call void @start_sequence(), !dbg !9527
  %0 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !9528
  store %struct.rtx_def* %0, %struct.rtx_def** %last, align 8, !dbg !9530
  br label %for.cond, !dbg !9531

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9532
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !9532
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9534

land.rhs:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9535
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9535
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9535
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9535
  %tobool1 = icmp ne %struct.rtx_def* %3, null, !dbg !9534
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %tobool1, %land.rhs ], !dbg !9536
  br i1 %4, label %for.body, label %for.end, !dbg !9537

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !9537

for.inc:                                          ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9538
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9538
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !9538
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 2, !dbg !9538
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !9538
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !9538
  store %struct.rtx_def* %6, %struct.rtx_def** %last, align 8, !dbg !9539
  br label %for.cond, !dbg !9540, !llvm.loop !9541

for.end:                                          ; preds = %land.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !9543
  store %struct.rtx_def* %7, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9544
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9545
  store %struct.rtx_def* %8, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9546
  ret void, !dbg !9547
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_to_sequence2(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 !dbg !9548 {
entry:
  %first.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !9549, metadata !DIExpression()), !dbg !9550
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !9551, metadata !DIExpression()), !dbg !9552
  call void @start_sequence(), !dbg !9553
  %0 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !9554
  store %struct.rtx_def* %0, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9555
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !9556
  store %struct.rtx_def* %1, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9557
  ret void, !dbg !9558
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_topmost_sequence() #0 !dbg !9559 {
entry:
  %stack = alloca %struct.sequence_stack*, align 8
  %top = alloca %struct.sequence_stack*, align 8
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !9560, metadata !DIExpression()), !dbg !9561
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %top, metadata !9562, metadata !DIExpression()), !dbg !9563
  store %struct.sequence_stack* null, %struct.sequence_stack** %top, align 8, !dbg !9563
  call void @start_sequence(), !dbg !9564
  %0 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9565
  store %struct.sequence_stack* %0, %struct.sequence_stack** %stack, align 8, !dbg !9567
  br label %for.cond, !dbg !9568

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9569
  %tobool = icmp ne %struct.sequence_stack* %1, null, !dbg !9571
  br i1 %tobool, label %for.body, label %for.end, !dbg !9571

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9572
  store %struct.sequence_stack* %2, %struct.sequence_stack** %top, align 8, !dbg !9573
  br label %for.inc, !dbg !9574

for.inc:                                          ; preds = %for.body
  %3 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9575
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %3, i32 0, i32 2, !dbg !9576
  %4 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !9576
  store %struct.sequence_stack* %4, %struct.sequence_stack** %stack, align 8, !dbg !9577
  br label %for.cond, !dbg !9578, !llvm.loop !9579

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sequence_stack*, %struct.sequence_stack** %top, align 8, !dbg !9581
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %5, i32 0, i32 0, !dbg !9582
  %6 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9582
  store %struct.rtx_def* %6, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9583
  %7 = load %struct.sequence_stack*, %struct.sequence_stack** %top, align 8, !dbg !9584
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %7, i32 0, i32 1, !dbg !9585
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9585
  store %struct.rtx_def* %8, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9586
  ret void, !dbg !9587
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pop_topmost_sequence() #0 !dbg !9588 {
entry:
  %stack = alloca %struct.sequence_stack*, align 8
  %top = alloca %struct.sequence_stack*, align 8
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %stack, metadata !9589, metadata !DIExpression()), !dbg !9590
  call void @llvm.dbg.declare(metadata %struct.sequence_stack** %top, metadata !9591, metadata !DIExpression()), !dbg !9592
  store %struct.sequence_stack* null, %struct.sequence_stack** %top, align 8, !dbg !9592
  %0 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9593
  store %struct.sequence_stack* %0, %struct.sequence_stack** %stack, align 8, !dbg !9595
  br label %for.cond, !dbg !9596

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9597
  %tobool = icmp ne %struct.sequence_stack* %1, null, !dbg !9599
  br i1 %tobool, label %for.body, label %for.end, !dbg !9599

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9600
  store %struct.sequence_stack* %2, %struct.sequence_stack** %top, align 8, !dbg !9601
  br label %for.inc, !dbg !9602

for.inc:                                          ; preds = %for.body
  %3 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8, !dbg !9603
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %3, i32 0, i32 2, !dbg !9604
  %4 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8, !dbg !9604
  store %struct.sequence_stack* %4, %struct.sequence_stack** %stack, align 8, !dbg !9605
  br label %for.cond, !dbg !9606, !llvm.loop !9607

for.end:                                          ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9609
  %6 = load %struct.sequence_stack*, %struct.sequence_stack** %top, align 8, !dbg !9610
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %6, i32 0, i32 0, !dbg !9611
  store %struct.rtx_def* %5, %struct.rtx_def** %first, align 8, !dbg !9612
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9613
  %8 = load %struct.sequence_stack*, %struct.sequence_stack** %top, align 8, !dbg !9614
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %8, i32 0, i32 1, !dbg !9615
  store %struct.rtx_def* %7, %struct.rtx_def** %last, align 8, !dbg !9616
  call void @end_sequence(), !dbg !9617
  ret void, !dbg !9618
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @in_sequence_p() #0 !dbg !9619 {
entry:
  %0 = load %struct.sequence_stack*, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9620
  %cmp = icmp ne %struct.sequence_stack* %0, null, !dbg !9621
  %conv = zext i1 %cmp to i32, !dbg !9621
  ret i32 %conv, !dbg !9622
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %orig) #0 !dbg !9623 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %orig.addr = alloca %struct.rtx_def*, align 8
  %copy = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %format_ptr = alloca i8*, align 8
  store %struct.rtx_def* %orig, %struct.rtx_def** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig.addr, metadata !9624, metadata !DIExpression()), !dbg !9625
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy, metadata !9626, metadata !DIExpression()), !dbg !9627
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9628, metadata !DIExpression()), !dbg !9629
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9630, metadata !DIExpression()), !dbg !9631
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9632, metadata !DIExpression()), !dbg !9633
  call void @llvm.dbg.declare(metadata i8** %format_ptr, metadata !9634, metadata !DIExpression()), !dbg !9635
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9636
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !9638
  br i1 %cmp, label %if.then, label %if.end, !dbg !9639

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9640
  br label %return, !dbg !9640

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9641
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !9641
  %bf.load = load i32, i32* %2, align 8, !dbg !9641
  %bf.clear = and i32 %bf.load, 65535, !dbg !9641
  store i32 %bf.clear, i32* %code, align 4, !dbg !9642
  %3 = load i32, i32* %code, align 4, !dbg !9643
  switch i32 %3, label %sw.default [
    i32 37, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 12, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 25, label %sw.bb1
    i32 38, label %sw.bb12
    i32 35, label %sw.bb20
  ], !dbg !9644

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9645
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !9647
  br label %return, !dbg !9647

sw.bb1:                                           ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9648
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9648
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9648
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9648
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9648
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9648
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9648
  %bf.load2 = load i32, i32* %7, align 8, !dbg !9648
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !9648
  %cmp4 = icmp eq i32 %bf.clear3, 37, !dbg !9648
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !9650

land.lhs.true:                                    ; preds = %sw.bb1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9651
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9651
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !9651
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !9651
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !9651
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !9651
  %call = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !9651
  %cmp9 = icmp ult i32 %call, 53, !dbg !9652
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !9653

if.then10:                                        ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9654
  store %struct.rtx_def* %10, %struct.rtx_def** %retval, align 8, !dbg !9655
  br label %return, !dbg !9655

if.end11:                                         ; preds = %land.lhs.true, %sw.bb1
  br label %sw.epilog, !dbg !9656

sw.bb12:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !9657
  br label %for.cond, !dbg !9659

for.cond:                                         ; preds = %for.inc, %sw.bb12
  %11 = load i32, i32* %i, align 4, !dbg !9660
  %12 = load i32, i32* @copy_insn_n_scratches, align 4, !dbg !9662
  %cmp13 = icmp slt i32 %11, %12, !dbg !9663
  br i1 %cmp13, label %for.body, label %for.end, !dbg !9664

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !9665
  %idxprom = sext i32 %13 to i64, !dbg !9667
  %arrayidx14 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* @copy_insn_scratch_in, i64 0, i64 %idxprom, !dbg !9667
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8, !dbg !9667
  %15 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9668
  %cmp15 = icmp eq %struct.rtx_def* %14, %15, !dbg !9669
  br i1 %cmp15, label %if.then16, label %if.end19, !dbg !9670

if.then16:                                        ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !9671
  %idxprom17 = sext i32 %16 to i64, !dbg !9672
  %arrayidx18 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* @copy_insn_scratch_out, i64 0, i64 %idxprom17, !dbg !9672
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8, !dbg !9672
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !9673
  br label %return, !dbg !9673

if.end19:                                         ; preds = %for.body
  br label %for.inc, !dbg !9668

for.inc:                                          ; preds = %if.end19
  %18 = load i32, i32* %i, align 4, !dbg !9674
  %inc = add nsw i32 %18, 1, !dbg !9674
  store i32 %inc, i32* %i, align 4, !dbg !9674
  br label %for.cond, !dbg !9675, !llvm.loop !9676

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !9678

sw.bb20:                                          ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9679
  %call21 = call zeroext i8 @shared_const_p(%struct.rtx_def* %19), !dbg !9681
  %tobool = icmp ne i8 %call21, 0, !dbg !9681
  br i1 %tobool, label %if.then22, label %if.end23, !dbg !9682

if.then22:                                        ; preds = %sw.bb20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9683
  store %struct.rtx_def* %20, %struct.rtx_def** %retval, align 8, !dbg !9684
  br label %return, !dbg !9684

if.end23:                                         ; preds = %sw.bb20
  br label %sw.epilog, !dbg !9685

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !9686

sw.epilog:                                        ; preds = %sw.default, %if.end23, %for.end, %if.end11
  %21 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9687
  %call24 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %21), !dbg !9687
  store %struct.rtx_def* %call24, %struct.rtx_def** %copy, align 8, !dbg !9688
  %22 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9689
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !9689
  %bf.load25 = load i32, i32* %23, align 8, !dbg !9690
  %bf.clear26 = and i32 %bf.load25, -536870913, !dbg !9690
  store i32 %bf.clear26, i32* %23, align 8, !dbg !9690
  %24 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9691
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9691
  %bf.load27 = load i32, i32* %25, align 8, !dbg !9691
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !9691
  %cmp29 = icmp eq i32 %bf.clear28, 8, !dbg !9691
  br i1 %cmp29, label %if.then41, label %lor.lhs.false, !dbg !9691

lor.lhs.false:                                    ; preds = %sw.epilog
  %26 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9691
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !9691
  %bf.load30 = load i32, i32* %27, align 8, !dbg !9691
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !9691
  %cmp32 = icmp eq i32 %bf.clear31, 7, !dbg !9691
  br i1 %cmp32, label %if.then41, label %lor.lhs.false33, !dbg !9691

lor.lhs.false33:                                  ; preds = %lor.lhs.false
  %28 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9691
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9691
  %bf.load34 = load i32, i32* %29, align 8, !dbg !9691
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !9691
  %cmp36 = icmp eq i32 %bf.clear35, 9, !dbg !9691
  br i1 %cmp36, label %if.then41, label %lor.lhs.false37, !dbg !9691

lor.lhs.false37:                                  ; preds = %lor.lhs.false33
  %30 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9691
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !9691
  %bf.load38 = load i32, i32* %31, align 8, !dbg !9691
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !9691
  %cmp40 = icmp eq i32 %bf.clear39, 10, !dbg !9691
  br i1 %cmp40, label %if.then41, label %if.end48, !dbg !9693

if.then41:                                        ; preds = %lor.lhs.false37, %lor.lhs.false33, %lor.lhs.false, %sw.epilog
  %32 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9694
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !9694
  %bf.load42 = load i32, i32* %33, align 8, !dbg !9696
  %bf.clear43 = and i32 %bf.load42, -16777217, !dbg !9696
  store i32 %bf.clear43, i32* %33, align 8, !dbg !9696
  %34 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9697
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !9697
  %bf.load44 = load i32, i32* %35, align 8, !dbg !9698
  %bf.clear45 = and i32 %bf.load44, -33554433, !dbg !9698
  store i32 %bf.clear45, i32* %35, align 8, !dbg !9698
  %36 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9699
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !9699
  %bf.load46 = load i32, i32* %37, align 8, !dbg !9700
  %bf.clear47 = and i32 %bf.load46, -1073741825, !dbg !9700
  store i32 %bf.clear47, i32* %37, align 8, !dbg !9700
  br label %if.end48, !dbg !9701

if.end48:                                         ; preds = %if.then41, %lor.lhs.false37
  %38 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9702
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !9702
  %bf.load49 = load i32, i32* %39, align 8, !dbg !9702
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !9702
  %idxprom51 = sext i32 %bf.clear50 to i64, !dbg !9702
  %arrayidx52 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom51, !dbg !9702
  %40 = load i8*, i8** %arrayidx52, align 8, !dbg !9702
  store i8* %40, i8** %format_ptr, align 8, !dbg !9703
  store i32 0, i32* %i, align 4, !dbg !9704
  br label %for.cond53, !dbg !9706

for.cond53:                                       ; preds = %for.inc164, %if.end48
  %41 = load i32, i32* %i, align 4, !dbg !9707
  %42 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9709
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !9709
  %bf.load54 = load i32, i32* %43, align 8, !dbg !9709
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !9709
  %idxprom56 = sext i32 %bf.clear55 to i64, !dbg !9709
  %arrayidx57 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom56, !dbg !9709
  %44 = load i8, i8* %arrayidx57, align 1, !dbg !9709
  %conv = zext i8 %44 to i32, !dbg !9709
  %cmp58 = icmp slt i32 %41, %conv, !dbg !9710
  br i1 %cmp58, label %for.body60, label %for.end166, !dbg !9711

for.body60:                                       ; preds = %for.cond53
  %45 = load i8*, i8** %format_ptr, align 8, !dbg !9712
  %incdec.ptr = getelementptr inbounds i8, i8* %45, i32 1, !dbg !9712
  store i8* %incdec.ptr, i8** %format_ptr, align 8, !dbg !9712
  %46 = load i8, i8* %45, align 1, !dbg !9713
  %conv61 = sext i8 %46 to i32, !dbg !9713
  switch i32 %conv61, label %sw.default162 [
    i32 101, label %sw.bb62
    i32 69, label %sw.bb83
    i32 86, label %sw.bb83
    i32 116, label %sw.bb161
    i32 119, label %sw.bb161
    i32 105, label %sw.bb161
    i32 115, label %sw.bb161
    i32 83, label %sw.bb161
    i32 117, label %sw.bb161
    i32 48, label %sw.bb161
  ], !dbg !9714

sw.bb62:                                          ; preds = %for.body60
  %47 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9715
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !9715
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !9715
  %48 = load i32, i32* %i, align 4, !dbg !9715
  %idxprom65 = sext i32 %48 to i64, !dbg !9715
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 %idxprom65, !dbg !9715
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !9715
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !9715
  %cmp68 = icmp ne %struct.rtx_def* %49, null, !dbg !9718
  br i1 %cmp68, label %if.then70, label %if.end82, !dbg !9719

if.then70:                                        ; preds = %sw.bb62
  %50 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9720
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !9720
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !9720
  %51 = load i32, i32* %i, align 4, !dbg !9720
  %idxprom73 = sext i32 %51 to i64, !dbg !9720
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 %idxprom73, !dbg !9720
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !9720
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !9720
  %call76 = call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %52), !dbg !9721
  %53 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9722
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !9722
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !9722
  %54 = load i32, i32* %i, align 4, !dbg !9722
  %idxprom79 = sext i32 %54 to i64, !dbg !9722
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 %idxprom79, !dbg !9722
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !9722
  store %struct.rtx_def* %call76, %struct.rtx_def** %rt_rtx81, align 8, !dbg !9723
  br label %if.end82, !dbg !9722

if.end82:                                         ; preds = %if.then70, %sw.bb62
  br label %sw.epilog163, !dbg !9724

sw.bb83:                                          ; preds = %for.body60, %for.body60
  %55 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9725
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !9725
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !9725
  %56 = load i32, i32* %i, align 4, !dbg !9725
  %idxprom86 = sext i32 %56 to i64, !dbg !9725
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 %idxprom86, !dbg !9725
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtvec_def**, !dbg !9725
  %57 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9725
  %58 = load %struct.rtvec_def*, %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !dbg !9727
  %cmp88 = icmp eq %struct.rtvec_def* %57, %58, !dbg !9728
  br i1 %cmp88, label %if.then90, label %if.else, !dbg !9729

if.then90:                                        ; preds = %sw.bb83
  %59 = load %struct.rtvec_def*, %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !dbg !9730
  %60 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9731
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !9731
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !9731
  %61 = load i32, i32* %i, align 4, !dbg !9731
  %idxprom93 = sext i32 %61 to i64, !dbg !9731
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 %idxprom93, !dbg !9731
  %rt_rtvec95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtvec_def**, !dbg !9731
  store %struct.rtvec_def* %59, %struct.rtvec_def** %rt_rtvec95, align 8, !dbg !9732
  br label %if.end160, !dbg !9731

if.else:                                          ; preds = %sw.bb83
  %62 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9733
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !9733
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !9733
  %63 = load i32, i32* %i, align 4, !dbg !9733
  %idxprom98 = sext i32 %63 to i64, !dbg !9733
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 %idxprom98, !dbg !9733
  %rt_rtvec100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtvec_def**, !dbg !9733
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec100, align 8, !dbg !9733
  %65 = load %struct.rtvec_def*, %struct.rtvec_def** @orig_asm_operands_vector, align 8, !dbg !9735
  %cmp101 = icmp eq %struct.rtvec_def* %64, %65, !dbg !9736
  br i1 %cmp101, label %if.then103, label %if.else109, !dbg !9737

if.then103:                                       ; preds = %if.else
  %66 = load %struct.rtvec_def*, %struct.rtvec_def** @copy_asm_operands_vector, align 8, !dbg !9738
  %67 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9739
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !9739
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !9739
  %68 = load i32, i32* %i, align 4, !dbg !9739
  %idxprom106 = sext i32 %68 to i64, !dbg !9739
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 %idxprom106, !dbg !9739
  %rt_rtvec108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**, !dbg !9739
  store %struct.rtvec_def* %66, %struct.rtvec_def** %rt_rtvec108, align 8, !dbg !9740
  br label %if.end159, !dbg !9739

if.else109:                                       ; preds = %if.else
  %69 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9741
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !9741
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !9741
  %70 = load i32, i32* %i, align 4, !dbg !9741
  %idxprom112 = sext i32 %70 to i64, !dbg !9741
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 %idxprom112, !dbg !9741
  %rt_rtvec114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtvec_def**, !dbg !9741
  %71 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec114, align 8, !dbg !9741
  %cmp115 = icmp ne %struct.rtvec_def* %71, null, !dbg !9743
  br i1 %cmp115, label %if.then117, label %if.end158, !dbg !9744

if.then117:                                       ; preds = %if.else109
  %72 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9745
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !9745
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !9745
  %73 = load i32, i32* %i, align 4, !dbg !9745
  %idxprom120 = sext i32 %73 to i64, !dbg !9745
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 %idxprom120, !dbg !9745
  %rt_rtvec122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtvec_def**, !dbg !9745
  %74 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec122, align 8, !dbg !9745
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %74, i32 0, i32 0, !dbg !9745
  %75 = load i32, i32* %num_elem, align 8, !dbg !9745
  %call123 = call %struct.rtvec_def* @rtvec_alloc(i32 %75), !dbg !9747
  %76 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9748
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !9748
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !9748
  %77 = load i32, i32* %i, align 4, !dbg !9748
  %idxprom126 = sext i32 %77 to i64, !dbg !9748
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 %idxprom126, !dbg !9748
  %rt_rtvec128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtvec_def**, !dbg !9748
  store %struct.rtvec_def* %call123, %struct.rtvec_def** %rt_rtvec128, align 8, !dbg !9749
  store i32 0, i32* %j, align 4, !dbg !9750
  br label %for.cond129, !dbg !9752

for.cond129:                                      ; preds = %for.inc155, %if.then117
  %78 = load i32, i32* %j, align 4, !dbg !9753
  %79 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9755
  %u130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !9755
  %fld131 = bitcast %union.u* %u130 to [1 x %union.rtunion_def]*, !dbg !9755
  %80 = load i32, i32* %i, align 4, !dbg !9755
  %idxprom132 = sext i32 %80 to i64, !dbg !9755
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i64 0, i64 %idxprom132, !dbg !9755
  %rt_rtvec134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtvec_def**, !dbg !9755
  %81 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec134, align 8, !dbg !9755
  %num_elem135 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %81, i32 0, i32 0, !dbg !9755
  %82 = load i32, i32* %num_elem135, align 8, !dbg !9755
  %cmp136 = icmp slt i32 %78, %82, !dbg !9756
  br i1 %cmp136, label %for.body138, label %for.end157, !dbg !9757

for.body138:                                      ; preds = %for.cond129
  %83 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9758
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !9758
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !9758
  %84 = load i32, i32* %i, align 4, !dbg !9758
  %idxprom141 = sext i32 %84 to i64, !dbg !9758
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 %idxprom141, !dbg !9758
  %rt_rtvec143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtvec_def**, !dbg !9758
  %85 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec143, align 8, !dbg !9758
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %85, i32 0, i32 1, !dbg !9758
  %86 = load i32, i32* %j, align 4, !dbg !9758
  %idxprom144 = sext i32 %86 to i64, !dbg !9758
  %arrayidx145 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom144, !dbg !9758
  %87 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx145, align 8, !dbg !9758
  %call146 = call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %87), !dbg !9759
  %88 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9760
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !9760
  %fld148 = bitcast %union.u* %u147 to [1 x %union.rtunion_def]*, !dbg !9760
  %89 = load i32, i32* %i, align 4, !dbg !9760
  %idxprom149 = sext i32 %89 to i64, !dbg !9760
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i64 0, i64 %idxprom149, !dbg !9760
  %rt_rtvec151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtvec_def**, !dbg !9760
  %90 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec151, align 8, !dbg !9760
  %elem152 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %90, i32 0, i32 1, !dbg !9760
  %91 = load i32, i32* %j, align 4, !dbg !9760
  %idxprom153 = sext i32 %91 to i64, !dbg !9760
  %arrayidx154 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem152, i64 0, i64 %idxprom153, !dbg !9760
  store %struct.rtx_def* %call146, %struct.rtx_def** %arrayidx154, align 8, !dbg !9761
  br label %for.inc155, !dbg !9760

for.inc155:                                       ; preds = %for.body138
  %92 = load i32, i32* %j, align 4, !dbg !9762
  %inc156 = add nsw i32 %92, 1, !dbg !9762
  store i32 %inc156, i32* %j, align 4, !dbg !9762
  br label %for.cond129, !dbg !9763, !llvm.loop !9764

for.end157:                                       ; preds = %for.cond129
  br label %if.end158, !dbg !9766

if.end158:                                        ; preds = %for.end157, %if.else109
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.then103
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.then90
  br label %sw.epilog163, !dbg !9767

sw.bb161:                                         ; preds = %for.body60, %for.body60, %for.body60, %for.body60, %for.body60, %for.body60, %for.body60
  br label %sw.epilog163, !dbg !9768

sw.default162:                                    ; preds = %for.body60
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9769
  br label %sw.epilog163, !dbg !9770

sw.epilog163:                                     ; preds = %sw.default162, %sw.bb161, %if.end160, %if.end82
  br label %for.inc164, !dbg !9770

for.inc164:                                       ; preds = %sw.epilog163
  %93 = load i32, i32* %i, align 4, !dbg !9771
  %inc165 = add nsw i32 %93, 1, !dbg !9771
  store i32 %inc165, i32* %i, align 4, !dbg !9771
  br label %for.cond53, !dbg !9772, !llvm.loop !9773

for.end166:                                       ; preds = %for.cond53
  %94 = load i32, i32* %code, align 4, !dbg !9775
  %cmp167 = icmp eq i32 %94, 38, !dbg !9777
  br i1 %cmp167, label %if.then169, label %if.else177, !dbg !9778

if.then169:                                       ; preds = %for.end166
  %95 = load i32, i32* @copy_insn_n_scratches, align 4, !dbg !9779
  %inc170 = add nsw i32 %95, 1, !dbg !9779
  store i32 %inc170, i32* @copy_insn_n_scratches, align 4, !dbg !9779
  store i32 %95, i32* %i, align 4, !dbg !9781
  %96 = load i32, i32* %i, align 4, !dbg !9782
  %cmp171 = icmp slt i32 %96, 30, !dbg !9782
  br i1 %cmp171, label %cond.false, label %cond.true, !dbg !9782

cond.true:                                        ; preds = %if.then169
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9782
  br label %cond.end, !dbg !9782

cond.false:                                       ; preds = %if.then169
  br label %cond.end, !dbg !9782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9782
  %97 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9783
  %98 = load i32, i32* %i, align 4, !dbg !9784
  %idxprom173 = sext i32 %98 to i64, !dbg !9785
  %arrayidx174 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* @copy_insn_scratch_in, i64 0, i64 %idxprom173, !dbg !9785
  store %struct.rtx_def* %97, %struct.rtx_def** %arrayidx174, align 8, !dbg !9786
  %99 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9787
  %100 = load i32, i32* %i, align 4, !dbg !9788
  %idxprom175 = sext i32 %100 to i64, !dbg !9789
  %arrayidx176 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* @copy_insn_scratch_out, i64 0, i64 %idxprom175, !dbg !9789
  store %struct.rtx_def* %99, %struct.rtx_def** %arrayidx176, align 8, !dbg !9790
  br label %if.end198, !dbg !9791

if.else177:                                       ; preds = %for.end166
  %101 = load i32, i32* %code, align 4, !dbg !9792
  %cmp178 = icmp eq i32 %101, 17, !dbg !9794
  br i1 %cmp178, label %if.then180, label %if.end197, !dbg !9795

if.then180:                                       ; preds = %if.else177
  %102 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9796
  %u181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !9796
  %fld182 = bitcast %union.u* %u181 to [1 x %union.rtunion_def]*, !dbg !9796
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i64 0, i64 3, !dbg !9796
  %rt_rtvec184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtvec_def**, !dbg !9796
  %103 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec184, align 8, !dbg !9796
  store %struct.rtvec_def* %103, %struct.rtvec_def** @orig_asm_operands_vector, align 8, !dbg !9798
  %104 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9799
  %u185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !9799
  %fld186 = bitcast %union.u* %u185 to [1 x %union.rtunion_def]*, !dbg !9799
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i64 0, i64 3, !dbg !9799
  %rt_rtvec188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtvec_def**, !dbg !9799
  %105 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec188, align 8, !dbg !9799
  store %struct.rtvec_def* %105, %struct.rtvec_def** @copy_asm_operands_vector, align 8, !dbg !9800
  %106 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8, !dbg !9801
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !9801
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !9801
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 4, !dbg !9801
  %rt_rtvec192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtvec_def**, !dbg !9801
  %107 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec192, align 8, !dbg !9801
  store %struct.rtvec_def* %107, %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !dbg !9802
  %108 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9803
  %u193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !9803
  %fld194 = bitcast %union.u* %u193 to [1 x %union.rtunion_def]*, !dbg !9803
  %arrayidx195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld194, i64 0, i64 4, !dbg !9803
  %rt_rtvec196 = bitcast %union.rtunion_def* %arrayidx195 to %struct.rtvec_def**, !dbg !9803
  %109 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec196, align 8, !dbg !9803
  store %struct.rtvec_def* %109, %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !dbg !9804
  br label %if.end197, !dbg !9805

if.end197:                                        ; preds = %if.then180, %if.else177
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %cond.end
  %110 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9806
  store %struct.rtx_def* %110, %struct.rtx_def** %retval, align 8, !dbg !9807
  br label %return, !dbg !9807

return:                                           ; preds = %if.end198, %if.then22, %if.then16, %if.then10, %sw.bb, %if.then
  %111 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9808
  ret %struct.rtx_def* %111, !dbg !9808
}

declare dso_local zeroext i8 @shared_const_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @copy_insn(%struct.rtx_def* %insn) #0 !dbg !9809 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9810, metadata !DIExpression()), !dbg !9811
  store i32 0, i32* @copy_insn_n_scratches, align 4, !dbg !9812
  store %struct.rtvec_def* null, %struct.rtvec_def** @orig_asm_operands_vector, align 8, !dbg !9813
  store %struct.rtvec_def* null, %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !dbg !9814
  store %struct.rtvec_def* null, %struct.rtvec_def** @copy_asm_operands_vector, align 8, !dbg !9815
  store %struct.rtvec_def* null, %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !dbg !9816
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9817
  %call = call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %0), !dbg !9818
  ret %struct.rtx_def* %call, !dbg !9819
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_emit() #0 !dbg !9820 {
entry:
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 2), align 8, !dbg !9821
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !9822
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !9823
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 117, !dbg !9823
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !9823
  %1 = load i32, i32* %value, align 8, !dbg !9823
  %tobool = icmp ne i32 %1, 0, !dbg !9823
  br i1 %tobool, label %if.then, label %if.else, !dbg !9825

if.then:                                          ; preds = %entry
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !9826
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 117, !dbg !9826
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !9826
  %3 = load i32, i32* %value2, align 8, !dbg !9826
  store i32 %3, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9827
  br label %if.end, !dbg !9828

if.else:                                          ; preds = %entry
  store i32 1, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 5), align 8, !dbg !9829
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 1, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 6), align 4, !dbg !9830
  store i32 58, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 0), align 8, !dbg !9831
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 7), align 8, !dbg !9832
  %4 = load i32, i32* @label_num, align 4, !dbg !9833
  store i32 %4, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 1), align 4, !dbg !9834
  store %struct.sequence_stack* null, %struct.sequence_stack** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 4), align 8, !dbg !9835
  store i32 158, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !9836
  %5 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !9837
  %conv = sext i32 %5 to i64, !dbg !9837
  %call = call i8* @xcalloc(i64 %conv, i64 1), !dbg !9837
  store i8* %call, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9838
  %6 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 8), align 4, !dbg !9839
  %conv3 = sext i32 %6 to i64, !dbg !9839
  %mul = mul i64 %conv3, 8, !dbg !9839
  %call4 = call i8* @ggc_alloc_stat(i64 %mul), !dbg !9839
  %7 = bitcast i8* %call4 to %struct.rtx_def**, !dbg !9839
  store %struct.rtx_def** %7, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9840
  %8 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9841
  %9 = bitcast %struct.rtx_def** %8 to i8*, !dbg !9842
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 16 bitcast ([53 x %struct.rtx_def*]* @static_regno_reg_rtx to i8*), i64 424, i1 false), !dbg !9842
  call void @init_virtual_regs(), !dbg !9843
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !9844
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !9844
  %bf.load = load i32, i32* %11, align 8, !dbg !9845
  %bf.clear = and i32 %bf.load, -1073741825, !dbg !9845
  %bf.set = or i32 %bf.clear, 1073741824, !dbg !9845
  store i32 %bf.set, i32* %11, align 8, !dbg !9845
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !9846
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !9846
  %bf.load5 = load i32, i32* %13, align 8, !dbg !9847
  %bf.clear6 = and i32 %bf.load5, -1073741825, !dbg !9847
  %bf.set7 = or i32 %bf.clear6, 1073741824, !dbg !9847
  store i32 %bf.set7, i32* %13, align 8, !dbg !9847
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !9848
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9848
  %bf.load8 = load i32, i32* %15, align 8, !dbg !9849
  %bf.clear9 = and i32 %bf.load8, -1073741825, !dbg !9849
  %bf.set10 = or i32 %bf.clear9, 1073741824, !dbg !9849
  store i32 %bf.set10, i32* %15, align 8, !dbg !9849
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !9850
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !9850
  %bf.load11 = load i32, i32* %17, align 8, !dbg !9851
  %bf.clear12 = and i32 %bf.load11, -1073741825, !dbg !9851
  %bf.set13 = or i32 %bf.clear12, 1073741824, !dbg !9851
  store i32 %bf.set13, i32* %17, align 8, !dbg !9851
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !dbg !9852
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9852
  %bf.load14 = load i32, i32* %19, align 8, !dbg !9853
  %bf.clear15 = and i32 %bf.load14, -1073741825, !dbg !9853
  %bf.set16 = or i32 %bf.clear15, 1073741824, !dbg !9853
  store i32 %bf.set16, i32* %19, align 8, !dbg !9853
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !9854
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !9854
  %bf.load17 = load i32, i32* %21, align 8, !dbg !9855
  %bf.clear18 = and i32 %bf.load17, -1073741825, !dbg !9855
  %bf.set19 = or i32 %bf.clear18, 1073741824, !dbg !9855
  store i32 %bf.set19, i32* %21, align 8, !dbg !9855
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !dbg !9856
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !9856
  %bf.load20 = load i32, i32* %23, align 8, !dbg !9857
  %bf.clear21 = and i32 %bf.load20, -1073741825, !dbg !9857
  %bf.set22 = or i32 %bf.clear21, 1073741824, !dbg !9857
  store i32 %bf.set22, i32* %23, align 8, !dbg !9857
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !9858
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9858
  %bf.load23 = load i32, i32* %25, align 8, !dbg !9859
  %bf.clear24 = and i32 %bf.load23, -1073741825, !dbg !9859
  %bf.set25 = or i32 %bf.clear24, 1073741824, !dbg !9859
  store i32 %bf.set25, i32* %25, align 8, !dbg !9859
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !dbg !9860
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !9860
  %bf.load26 = load i32, i32* %27, align 8, !dbg !9861
  %bf.clear27 = and i32 %bf.load26, -1073741825, !dbg !9861
  %bf.set28 = or i32 %bf.clear27, 1073741824, !dbg !9861
  store i32 %bf.set28, i32* %27, align 8, !dbg !9861
  %28 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9862
  %arrayidx29 = getelementptr inbounds i8, i8* %28, i64 7, !dbg !9862
  store i8 32, i8* %arrayidx29, align 1, !dbg !9863
  %29 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9864
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i64 20, !dbg !9864
  store i8 32, i8* %arrayidx30, align 1, !dbg !9865
  %30 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9866
  %arrayidx31 = getelementptr inbounds i8, i8* %30, i64 6, !dbg !9866
  store i8 32, i8* %arrayidx31, align 1, !dbg !9867
  %31 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9868
  %arrayidx32 = getelementptr inbounds i8, i8* %31, i64 16, !dbg !9868
  store i8 32, i8* %arrayidx32, align 1, !dbg !9869
  %32 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9870
  %arrayidx33 = getelementptr inbounds i8, i8* %32, i64 53, !dbg !9870
  store i8 32, i8* %arrayidx33, align 1, !dbg !9871
  %33 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9872
  %arrayidx34 = getelementptr inbounds i8, i8* %33, i64 54, !dbg !9872
  store i8 32, i8* %arrayidx34, align 1, !dbg !9873
  %34 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9874
  %arrayidx35 = getelementptr inbounds i8, i8* %34, i64 55, !dbg !9874
  store i8 32, i8* %arrayidx35, align 1, !dbg !9875
  %35 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9876
  %arrayidx36 = getelementptr inbounds i8, i8* %35, i64 56, !dbg !9876
  store i8 32, i8* %arrayidx36, align 1, !dbg !9877
  %36 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !9878
  %arrayidx37 = getelementptr inbounds i8, i8* %36, i64 57, !dbg !9878
  store i8 32, i8* %arrayidx37, align 1, !dbg !9879
  ret void, !dbg !9880
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_virtual_regs() #0 !dbg !9881 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !dbg !9882
  %1 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9883
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 53, !dbg !9883
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8, !dbg !9884
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !9885
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9886
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 54, !dbg !9886
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx1, align 8, !dbg !9887
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !dbg !9888
  %5 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9889
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 55, !dbg !9889
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx2, align 8, !dbg !9890
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !9891
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9892
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 56, !dbg !9892
  store %struct.rtx_def* %6, %struct.rtx_def** %arrayidx3, align 8, !dbg !9893
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !dbg !9894
  %9 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !9895
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 57, !dbg !9895
  store %struct.rtx_def* %8, %struct.rtx_def** %arrayidx4, align 8, !dbg !9896
  ret void, !dbg !9897
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_rtx_CONST_VECTOR(i32 %mode, %struct.rtvec_def* %v) #0 !dbg !9898 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %v.addr = alloca %struct.rtvec_def*, align 8
  %inner = alloca i32, align 4
  %nunits = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9901, metadata !DIExpression()), !dbg !9902
  store %struct.rtvec_def* %v, %struct.rtvec_def** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %v.addr, metadata !9903, metadata !DIExpression()), !dbg !9904
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !9905, metadata !DIExpression()), !dbg !9906
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9907
  %idxprom = zext i32 %0 to i64, !dbg !9907
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom, !dbg !9907
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9907
  %conv = zext i8 %1 to i32, !dbg !9907
  store i32 %conv, i32* %inner, align 4, !dbg !9906
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !9908, metadata !DIExpression()), !dbg !9909
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9910
  %idxprom1 = zext i32 %2 to i64, !dbg !9910
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom1, !dbg !9910
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !9910
  %conv3 = zext i8 %3 to i32, !dbg !9910
  store i32 %conv3, i32* %nunits, align 4, !dbg !9909
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !9911, metadata !DIExpression()), !dbg !9912
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9913, metadata !DIExpression()), !dbg !9914
  %4 = load %struct.rtvec_def*, %struct.rtvec_def** %v.addr, align 8, !dbg !9915
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %4, i32 0, i32 1, !dbg !9915
  %5 = load i32, i32* %nunits, align 4, !dbg !9915
  %sub = sub nsw i32 %5, 1, !dbg !9915
  %idxprom4 = sext i32 %sub to i64, !dbg !9915
  %arrayidx5 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom4, !dbg !9915
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8, !dbg !9915
  store %struct.rtx_def* %6, %struct.rtx_def** %x, align 8, !dbg !9916
  %7 = load i32, i32* %nunits, align 4, !dbg !9917
  %sub6 = sub nsw i32 %7, 2, !dbg !9919
  store i32 %sub6, i32* %i, align 4, !dbg !9920
  br label %for.cond, !dbg !9921

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !9922
  %cmp = icmp sge i32 %8, 0, !dbg !9924
  br i1 %cmp, label %for.body, label %for.end, !dbg !9925

for.body:                                         ; preds = %for.cond
  %9 = load %struct.rtvec_def*, %struct.rtvec_def** %v.addr, align 8, !dbg !9926
  %elem8 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %9, i32 0, i32 1, !dbg !9926
  %10 = load i32, i32* %i, align 4, !dbg !9926
  %idxprom9 = sext i32 %10 to i64, !dbg !9926
  %arrayidx10 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem8, i64 0, i64 %idxprom9, !dbg !9926
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8, !dbg !9926
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9928
  %cmp11 = icmp ne %struct.rtx_def* %11, %12, !dbg !9929
  br i1 %cmp11, label %if.then, label %if.end, !dbg !9930

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !9931

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9928

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !9932
  %dec = add nsw i32 %13, -1, !dbg !9932
  store i32 %dec, i32* %i, align 4, !dbg !9932
  br label %for.cond, !dbg !9933, !llvm.loop !9934

for.end:                                          ; preds = %if.then, %for.cond
  %14 = load i32, i32* %i, align 4, !dbg !9936
  %cmp13 = icmp eq i32 %14, -1, !dbg !9938
  br i1 %cmp13, label %if.then15, label %if.end32, !dbg !9939

if.then15:                                        ; preds = %for.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9940
  %16 = load i32, i32* %inner, align 4, !dbg !9943
  %idxprom16 = sext i32 %16 to i64, !dbg !9943
  %arrayidx17 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom16, !dbg !9943
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8, !dbg !9943
  %cmp18 = icmp eq %struct.rtx_def* %15, %17, !dbg !9944
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !9945

if.then20:                                        ; preds = %if.then15
  %18 = load i32, i32* %mode.addr, align 4, !dbg !9946
  %idxprom21 = sext i32 %18 to i64, !dbg !9946
  %arrayidx22 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom21, !dbg !9946
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8, !dbg !9946
  store %struct.rtx_def* %19, %struct.rtx_def** %retval, align 8, !dbg !9947
  br label %return, !dbg !9947

if.else:                                          ; preds = %if.then15
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9948
  %21 = load i32, i32* %inner, align 4, !dbg !9950
  %idxprom23 = sext i32 %21 to i64, !dbg !9950
  %arrayidx24 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom23, !dbg !9950
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8, !dbg !9950
  %cmp25 = icmp eq %struct.rtx_def* %20, %22, !dbg !9951
  br i1 %cmp25, label %if.then27, label %if.end30, !dbg !9952

if.then27:                                        ; preds = %if.else
  %23 = load i32, i32* %mode.addr, align 4, !dbg !9953
  %idxprom28 = sext i32 %23 to i64, !dbg !9953
  %arrayidx29 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom28, !dbg !9953
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8, !dbg !9953
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !9954
  br label %return, !dbg !9954

if.end30:                                         ; preds = %if.else
  br label %if.end31

if.end31:                                         ; preds = %if.end30
  br label %if.end32, !dbg !9955

if.end32:                                         ; preds = %if.end31, %for.end
  %25 = load i32, i32* %mode.addr, align 4, !dbg !9956
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %v.addr, align 8, !dbg !9956
  %call = call %struct.rtx_def* @gen_rtx_fmt_E_stat(i32 33, i32 %25, %struct.rtvec_def* %26), !dbg !9956
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !9957
  br label %return, !dbg !9957

return:                                           ; preds = %if.end32, %if.then27, %if.then20
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9958
  ret %struct.rtx_def* %27, !dbg !9958
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_E_stat(i32, i32, %struct.rtvec_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_emit_regs() #0 !dbg !9959 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9960, metadata !DIExpression()), !dbg !9961
  %0 = load %struct.htab*, %struct.htab** @reg_attrs_htab, align 8, !dbg !9962
  call void @htab_empty(%struct.htab* %0), !dbg !9963
  call void @init_reg_modes_target(), !dbg !9964
  %call = call %struct.rtx_def* @gen_rtx_fmt__stat(i32 36, i32 0), !dbg !9965
  store %struct.rtx_def* %call, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !9966
  %call1 = call %struct.rtx_def* @gen_rtx_fmt__stat(i32 46, i32 0), !dbg !9967
  store %struct.rtx_def* %call1, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 1), align 8, !dbg !9968
  %call2 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 7), !dbg !9969
  store %struct.rtx_def* %call2, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !9970
  %call3 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 20), !dbg !9971
  store %struct.rtx_def* %call3, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !9972
  %call4 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 6), !dbg !9973
  store %struct.rtx_def* %call4, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !9974
  %call5 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 16), !dbg !9975
  store %struct.rtx_def* %call5, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !9976
  %call6 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 53), !dbg !9977
  store %struct.rtx_def* %call6, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !dbg !9978
  %call7 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 54), !dbg !9979
  store %struct.rtx_def* %call7, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !9980
  %call8 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 55), !dbg !9981
  store %struct.rtx_def* %call8, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !dbg !9982
  %call9 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 56), !dbg !9983
  store %struct.rtx_def* %call9, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !9984
  %call10 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 57), !dbg !9985
  store %struct.rtx_def* %call10, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !dbg !9986
  store i32 0, i32* %i, align 4, !dbg !9987
  br label %for.cond, !dbg !9989

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !9990
  %cmp = icmp slt i32 %1, 53, !dbg !9992
  br i1 %cmp, label %for.body, label %for.end, !dbg !9993

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9994
  %idxprom = sext i32 %2 to i64, !dbg !9995
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %idxprom, !dbg !9995
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9995
  %4 = load i32, i32* %i, align 4, !dbg !9996
  %call11 = call %struct.rtx_def* @gen_raw_REG(i32 %3, i32 %4), !dbg !9997
  %5 = load i32, i32* %i, align 4, !dbg !9998
  %idxprom12 = sext i32 %5 to i64, !dbg !9999
  %arrayidx13 = getelementptr inbounds [53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_regno_reg_rtx, i64 0, i64 %idxprom12, !dbg !9999
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx13, align 8, !dbg !10000
  br label %for.inc, !dbg !9999

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !10001
  %inc = add nsw i32 %6, 1, !dbg !10001
  store i32 %inc, i32* %i, align 4, !dbg !10001
  br label %for.cond, !dbg !10002, !llvm.loop !10003

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @flag_pic, align 4, !dbg !10005
  %tobool = icmp ne i32 %7, 0, !dbg !10005
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10005

cond.true:                                        ; preds = %for.end
  br label %cond.end18, !dbg !10005

cond.false:                                       ; preds = %for.end
  %8 = load i32, i32* @reload_completed, align 4, !dbg !10005
  %tobool14 = icmp ne i32 %8, 0, !dbg !10005
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !10005

cond.true15:                                      ; preds = %cond.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !10005
  %call16 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !10005
  br label %cond.end, !dbg !10005

cond.false17:                                     ; preds = %cond.false
  br label %cond.end, !dbg !10005

cond.end:                                         ; preds = %cond.false17, %cond.true15
  %cond = phi i32 [ %call16, %cond.true15 ], [ 3, %cond.false17 ], !dbg !10005
  br label %cond.end18, !dbg !10005

cond.end18:                                       ; preds = %cond.end, %cond.true
  %cond19 = phi i32 [ -1, %cond.true ], [ %cond, %cond.end ], !dbg !10005
  %cmp20 = icmp ne i32 %cond19, -1, !dbg !10007
  br i1 %cmp20, label %if.then, label %if.else, !dbg !10008

if.then:                                          ; preds = %cond.end18
  %10 = load i32, i32* @flag_pic, align 4, !dbg !10009
  %tobool21 = icmp ne i32 %10, 0, !dbg !10009
  br i1 %tobool21, label %cond.false23, label %cond.true22, !dbg !10009

cond.true22:                                      ; preds = %if.then
  br label %cond.end30, !dbg !10009

cond.false23:                                     ; preds = %if.then
  %11 = load i32, i32* @reload_completed, align 4, !dbg !10009
  %tobool24 = icmp ne i32 %11, 0, !dbg !10009
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !10009

cond.true25:                                      ; preds = %cond.false23
  %12 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !10009
  %call26 = call i32 @rhs_regno(%struct.rtx_def* %12), !dbg !10009
  br label %cond.end28, !dbg !10009

cond.false27:                                     ; preds = %cond.false23
  br label %cond.end28, !dbg !10009

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi i32 [ %call26, %cond.true25 ], [ 3, %cond.false27 ], !dbg !10009
  br label %cond.end30, !dbg !10009

cond.end30:                                       ; preds = %cond.end28, %cond.true22
  %cond31 = phi i32 [ -1, %cond.true22 ], [ %cond29, %cond.end28 ], !dbg !10009
  %call32 = call %struct.rtx_def* @gen_raw_REG(i32 16, i32 %cond31), !dbg !10010
  store %struct.rtx_def* %call32, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !10011
  br label %if.end, !dbg !10012

if.else:                                          ; preds = %cond.end18
  store %struct.rtx_def* null, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !10013
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end30
  ret void, !dbg !10014
}

declare dso_local void @htab_empty(%struct.htab*) #2

declare dso_local void @init_reg_modes_target() #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt__stat(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_emit_once() #0 !dbg !10015 {
entry:
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %double_mode = alloca i32, align 4
  %r = alloca %struct.real_value*, align 8
  %inner = alloca %struct.rtx_def*, align 8
  %inner174 = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10016, metadata !DIExpression()), !dbg !10017
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !10018, metadata !DIExpression()), !dbg !10019
  call void @llvm.dbg.declare(metadata i32* %double_mode, metadata !10020, metadata !DIExpression()), !dbg !10021
  %call = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @const_int_htab_hash, i32 (i8*, i8*)* @const_int_htab_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10022
  store %struct.htab* %call, %struct.htab** @const_int_htab, align 8, !dbg !10023
  %call1 = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @const_double_htab_hash, i32 (i8*, i8*)* @const_double_htab_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10024
  store %struct.htab* %call1, %struct.htab** @const_double_htab, align 8, !dbg !10025
  %call2 = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @const_fixed_htab_hash, i32 (i8*, i8*)* @const_fixed_htab_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10026
  store %struct.htab* %call2, %struct.htab** @const_fixed_htab, align 8, !dbg !10027
  %call3 = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @mem_attrs_htab_hash, i32 (i8*, i8*)* @mem_attrs_htab_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10028
  store %struct.htab* %call3, %struct.htab** @mem_attrs_htab, align 8, !dbg !10029
  %call4 = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @reg_attrs_htab_hash, i32 (i8*, i8*)* @reg_attrs_htab_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10030
  store %struct.htab* %call4, %struct.htab** @reg_attrs_htab, align 8, !dbg !10031
  store i32 0, i32* @byte_mode, align 4, !dbg !10032
  store i32 0, i32* @word_mode, align 4, !dbg !10033
  store i32 0, i32* %double_mode, align 4, !dbg !10034
  %0 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !10035
  %conv = zext i8 %0 to i32, !dbg !10035
  store i32 %conv, i32* %mode, align 4, !dbg !10037
  br label %for.cond, !dbg !10038

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %mode, align 4, !dbg !10039
  %cmp = icmp ne i32 %1, 0, !dbg !10041
  br i1 %cmp, label %for.body, label %for.end, !dbg !10042

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %mode, align 4, !dbg !10043
  %idxprom = zext i32 %2 to i64, !dbg !10043
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !10043
  %3 = load i8, i8* %arrayidx, align 1, !dbg !10043
  %conv6 = zext i8 %3 to i16, !dbg !10043
  %conv7 = zext i16 %conv6 to i32, !dbg !10043
  %mul = mul nsw i32 %conv7, 8, !dbg !10043
  %conv8 = trunc i32 %mul to i16, !dbg !10043
  %conv9 = zext i16 %conv8 to i32, !dbg !10043
  %cmp10 = icmp eq i32 %conv9, 8, !dbg !10046
  br i1 %cmp10, label %land.lhs.true, label %if.end, !dbg !10047

land.lhs.true:                                    ; preds = %for.body
  %4 = load i32, i32* @byte_mode, align 4, !dbg !10048
  %cmp12 = icmp eq i32 %4, 0, !dbg !10049
  br i1 %cmp12, label %if.then, label %if.end, !dbg !10050

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %mode, align 4, !dbg !10051
  store i32 %5, i32* @byte_mode, align 4, !dbg !10052
  br label %if.end, !dbg !10053

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %6 = load i32, i32* %mode, align 4, !dbg !10054
  %idxprom14 = zext i32 %6 to i64, !dbg !10054
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !10054
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !10054
  %conv16 = zext i8 %7 to i16, !dbg !10054
  %conv17 = zext i16 %conv16 to i32, !dbg !10054
  %mul18 = mul nsw i32 %conv17, 8, !dbg !10054
  %conv19 = trunc i32 %mul18 to i16, !dbg !10054
  %conv20 = zext i16 %conv19 to i32, !dbg !10054
  %cmp21 = icmp eq i32 %conv20, 32, !dbg !10056
  br i1 %cmp21, label %land.lhs.true23, label %if.end27, !dbg !10057

land.lhs.true23:                                  ; preds = %if.end
  %8 = load i32, i32* @word_mode, align 4, !dbg !10058
  %cmp24 = icmp eq i32 %8, 0, !dbg !10059
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !10060

if.then26:                                        ; preds = %land.lhs.true23
  %9 = load i32, i32* %mode, align 4, !dbg !10061
  store i32 %9, i32* @word_mode, align 4, !dbg !10062
  br label %if.end27, !dbg !10063

if.end27:                                         ; preds = %if.then26, %land.lhs.true23, %if.end
  br label %for.inc, !dbg !10064

for.inc:                                          ; preds = %if.end27
  %10 = load i32, i32* %mode, align 4, !dbg !10065
  %idxprom28 = zext i32 %10 to i64, !dbg !10065
  %arrayidx29 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom28, !dbg !10065
  %11 = load i8, i8* %arrayidx29, align 1, !dbg !10065
  %conv30 = zext i8 %11 to i32, !dbg !10065
  store i32 %conv30, i32* %mode, align 4, !dbg !10066
  br label %for.cond, !dbg !10067, !llvm.loop !10068

for.end:                                          ; preds = %for.cond
  %12 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 8), align 8, !dbg !10070
  %conv31 = zext i8 %12 to i32, !dbg !10070
  store i32 %conv31, i32* %mode, align 4, !dbg !10072
  br label %for.cond32, !dbg !10073

for.cond32:                                       ; preds = %for.inc50, %for.end
  %13 = load i32, i32* %mode, align 4, !dbg !10074
  %cmp33 = icmp ne i32 %13, 0, !dbg !10076
  br i1 %cmp33, label %for.body35, label %for.end54, !dbg !10077

for.body35:                                       ; preds = %for.cond32
  %14 = load i32, i32* %mode, align 4, !dbg !10078
  %idxprom36 = zext i32 %14 to i64, !dbg !10078
  %arrayidx37 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom36, !dbg !10078
  %15 = load i8, i8* %arrayidx37, align 1, !dbg !10078
  %conv38 = zext i8 %15 to i16, !dbg !10078
  %conv39 = zext i16 %conv38 to i32, !dbg !10078
  %mul40 = mul nsw i32 %conv39, 8, !dbg !10078
  %conv41 = trunc i32 %mul40 to i16, !dbg !10078
  %conv42 = zext i16 %conv41 to i32, !dbg !10078
  %cmp43 = icmp eq i32 %conv42, 64, !dbg !10081
  br i1 %cmp43, label %land.lhs.true45, label %if.end49, !dbg !10082

land.lhs.true45:                                  ; preds = %for.body35
  %16 = load i32, i32* %double_mode, align 4, !dbg !10083
  %cmp46 = icmp eq i32 %16, 0, !dbg !10084
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !10085

if.then48:                                        ; preds = %land.lhs.true45
  %17 = load i32, i32* %mode, align 4, !dbg !10086
  store i32 %17, i32* %double_mode, align 4, !dbg !10087
  br label %if.end49, !dbg !10088

if.end49:                                         ; preds = %if.then48, %land.lhs.true45, %for.body35
  br label %for.inc50, !dbg !10089

for.inc50:                                        ; preds = %if.end49
  %18 = load i32, i32* %mode, align 4, !dbg !10090
  %idxprom51 = zext i32 %18 to i64, !dbg !10090
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom51, !dbg !10090
  %19 = load i8, i8* %arrayidx52, align 1, !dbg !10090
  %conv53 = zext i8 %19 to i32, !dbg !10090
  store i32 %conv53, i32* %mode, align 4, !dbg !10091
  br label %for.cond32, !dbg !10092, !llvm.loop !10093

for.end54:                                        ; preds = %for.cond32
  %20 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_class, i64 0, i64 16), align 16, !dbg !10095
  %conv55 = zext i8 %20 to i32, !dbg !10095
  %call56 = call i32 @mode_for_size(i32 32, i32 %conv55, i32 0), !dbg !10096
  store i32 %call56, i32* @ptr_mode, align 4, !dbg !10097
  store i32 -64, i32* %i, align 4, !dbg !10098
  br label %for.cond57, !dbg !10100

for.cond57:                                       ; preds = %for.inc65, %for.end54
  %21 = load i32, i32* %i, align 4, !dbg !10101
  %cmp58 = icmp sle i32 %21, 64, !dbg !10103
  br i1 %cmp58, label %for.body60, label %for.end66, !dbg !10104

for.body60:                                       ; preds = %for.cond57
  %22 = load i32, i32* %i, align 4, !dbg !10105
  %conv61 = sext i32 %22 to i64, !dbg !10105
  %call62 = call %struct.rtx_def* @gen_rtx_fmt_w_stat(i32 30, i32 0, i64 %conv61), !dbg !10105
  %23 = load i32, i32* %i, align 4, !dbg !10106
  %add = add nsw i32 %23, 64, !dbg !10107
  %idxprom63 = sext i32 %add to i64, !dbg !10108
  %arrayidx64 = getelementptr inbounds [129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %idxprom63, !dbg !10108
  store %struct.rtx_def* %call62, %struct.rtx_def** %arrayidx64, align 8, !dbg !10109
  br label %for.inc65, !dbg !10108

for.inc65:                                        ; preds = %for.body60
  %24 = load i32, i32* %i, align 4, !dbg !10110
  %inc = add nsw i32 %24, 1, !dbg !10110
  store i32 %inc, i32* %i, align 4, !dbg !10110
  br label %for.cond57, !dbg !10111, !llvm.loop !10112

for.end66:                                        ; preds = %for.cond57
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10114
  store %struct.rtx_def* %25, %struct.rtx_def** @const_true_rtx, align 8, !dbg !10116
  %26 = load i32, i32* %double_mode, align 4, !dbg !10117
  call void @real_from_integer(%struct.real_value* @dconst0, i32 %26, i64 0, i64 0, i32 0), !dbg !10117
  %27 = load i32, i32* %double_mode, align 4, !dbg !10118
  call void @real_from_integer(%struct.real_value* @dconst1, i32 %27, i64 1, i64 0, i32 0), !dbg !10118
  %28 = load i32, i32* %double_mode, align 4, !dbg !10119
  call void @real_from_integer(%struct.real_value* @dconst2, i32 %28, i64 2, i64 0, i32 0), !dbg !10119
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.real_value* @dconstm1 to i8*), i8* align 8 bitcast (%struct.real_value* @dconst1 to i8*), i64 32, i1 false), !dbg !10120
  %bf.load = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconstm1, i32 0, i32 0), align 8, !dbg !10121
  %bf.clear = and i32 %bf.load, -9, !dbg !10121
  %bf.set = or i32 %bf.clear, 8, !dbg !10121
  store i32 %bf.set, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconstm1, i32 0, i32 0), align 8, !dbg !10121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.real_value* @dconsthalf to i8*), i8* align 8 bitcast (%struct.real_value* @dconst1 to i8*), i64 32, i1 false), !dbg !10122
  %bf.load67 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconsthalf, i32 0, i32 0), align 8, !dbg !10123
  %bf.lshr = lshr i32 %bf.load67, 6, !dbg !10123
  %xor = xor i32 %bf.lshr, 33554432, !dbg !10123
  %sub = sub nsw i32 %xor, 33554432, !dbg !10123
  %sub68 = sub nsw i32 %sub, 1, !dbg !10123
  %and = and i32 %sub68, 67108863, !dbg !10123
  %bf.load69 = load i32, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconsthalf, i32 0, i32 0), align 8, !dbg !10123
  %bf.value = and i32 %and, 67108863, !dbg !10123
  %bf.shl = shl i32 %bf.value, 6, !dbg !10123
  %bf.clear70 = and i32 %bf.load69, 63, !dbg !10123
  %bf.set71 = or i32 %bf.clear70, %bf.shl, !dbg !10123
  store i32 %bf.set71, i32* getelementptr inbounds (%struct.real_value, %struct.real_value* @dconsthalf, i32 0, i32 0), align 8, !dbg !10123
  store i32 0, i32* %i, align 4, !dbg !10124
  br label %for.cond72, !dbg !10126

for.cond72:                                       ; preds = %for.inc148, %for.end66
  %29 = load i32, i32* %i, align 4, !dbg !10127
  %cmp73 = icmp slt i32 %29, 3, !dbg !10129
  br i1 %cmp73, label %for.body75, label %for.end150, !dbg !10130

for.body75:                                       ; preds = %for.cond72
  call void @llvm.dbg.declare(metadata %struct.real_value** %r, metadata !10131, metadata !DIExpression()), !dbg !10134
  %30 = load i32, i32* %i, align 4, !dbg !10135
  %cmp76 = icmp eq i32 %30, 0, !dbg !10136
  br i1 %cmp76, label %cond.true, label %cond.false, !dbg !10135

cond.true:                                        ; preds = %for.body75
  br label %cond.end, !dbg !10135

cond.false:                                       ; preds = %for.body75
  %31 = load i32, i32* %i, align 4, !dbg !10137
  %cmp78 = icmp eq i32 %31, 1, !dbg !10138
  %32 = zext i1 %cmp78 to i64, !dbg !10137
  %cond = select i1 %cmp78, %struct.real_value* @dconst1, %struct.real_value* @dconst2, !dbg !10137
  br label %cond.end, !dbg !10135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond80 = phi %struct.real_value* [ @dconst0, %cond.true ], [ %cond, %cond.false ], !dbg !10135
  store %struct.real_value* %cond80, %struct.real_value** %r, align 8, !dbg !10134
  %33 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 8), align 8, !dbg !10139
  %conv81 = zext i8 %33 to i32, !dbg !10139
  store i32 %conv81, i32* %mode, align 4, !dbg !10141
  br label %for.cond82, !dbg !10142

for.cond82:                                       ; preds = %for.inc91, %cond.end
  %34 = load i32, i32* %mode, align 4, !dbg !10143
  %cmp83 = icmp ne i32 %34, 0, !dbg !10145
  br i1 %cmp83, label %for.body85, label %for.end95, !dbg !10146

for.body85:                                       ; preds = %for.cond82
  %35 = load %struct.real_value*, %struct.real_value** %r, align 8, !dbg !10147
  %36 = load i32, i32* %mode, align 4, !dbg !10147
  %call86 = call %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %35, i32 %36), !dbg !10147
  %37 = load i32, i32* %i, align 4, !dbg !10148
  %idxprom87 = sext i32 %37 to i64, !dbg !10149
  %arrayidx88 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom87, !dbg !10149
  %38 = load i32, i32* %mode, align 4, !dbg !10150
  %idxprom89 = sext i32 %38 to i64, !dbg !10149
  %arrayidx90 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx88, i64 0, i64 %idxprom89, !dbg !10149
  store %struct.rtx_def* %call86, %struct.rtx_def** %arrayidx90, align 8, !dbg !10151
  br label %for.inc91, !dbg !10149

for.inc91:                                        ; preds = %for.body85
  %39 = load i32, i32* %mode, align 4, !dbg !10152
  %idxprom92 = zext i32 %39 to i64, !dbg !10152
  %arrayidx93 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom92, !dbg !10152
  %40 = load i8, i8* %arrayidx93, align 1, !dbg !10152
  %conv94 = zext i8 %40 to i32, !dbg !10152
  store i32 %conv94, i32* %mode, align 4, !dbg !10153
  br label %for.cond82, !dbg !10154, !llvm.loop !10155

for.end95:                                        ; preds = %for.cond82
  %41 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 9), align 1, !dbg !10157
  %conv96 = zext i8 %41 to i32, !dbg !10157
  store i32 %conv96, i32* %mode, align 4, !dbg !10159
  br label %for.cond97, !dbg !10160

for.cond97:                                       ; preds = %for.inc106, %for.end95
  %42 = load i32, i32* %mode, align 4, !dbg !10161
  %cmp98 = icmp ne i32 %42, 0, !dbg !10163
  br i1 %cmp98, label %for.body100, label %for.end110, !dbg !10164

for.body100:                                      ; preds = %for.cond97
  %43 = load %struct.real_value*, %struct.real_value** %r, align 8, !dbg !10165
  %44 = load i32, i32* %mode, align 4, !dbg !10165
  %call101 = call %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %43, i32 %44), !dbg !10165
  %45 = load i32, i32* %i, align 4, !dbg !10166
  %idxprom102 = sext i32 %45 to i64, !dbg !10167
  %arrayidx103 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom102, !dbg !10167
  %46 = load i32, i32* %mode, align 4, !dbg !10168
  %idxprom104 = sext i32 %46 to i64, !dbg !10167
  %arrayidx105 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx103, i64 0, i64 %idxprom104, !dbg !10167
  store %struct.rtx_def* %call101, %struct.rtx_def** %arrayidx105, align 8, !dbg !10169
  br label %for.inc106, !dbg !10167

for.inc106:                                       ; preds = %for.body100
  %47 = load i32, i32* %mode, align 4, !dbg !10170
  %idxprom107 = zext i32 %47 to i64, !dbg !10170
  %arrayidx108 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom107, !dbg !10170
  %48 = load i8, i8* %arrayidx108, align 1, !dbg !10170
  %conv109 = zext i8 %48 to i32, !dbg !10170
  store i32 %conv109, i32* %mode, align 4, !dbg !10171
  br label %for.cond97, !dbg !10172, !llvm.loop !10173

for.end110:                                       ; preds = %for.cond97
  %49 = load i32, i32* %i, align 4, !dbg !10175
  %conv111 = sext i32 %49 to i64, !dbg !10175
  %call112 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv111), !dbg !10175
  %50 = load i32, i32* %i, align 4, !dbg !10176
  %idxprom113 = sext i32 %50 to i64, !dbg !10177
  %arrayidx114 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom113, !dbg !10177
  %arrayidx115 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx114, i64 0, i64 0, !dbg !10177
  store %struct.rtx_def* %call112, %struct.rtx_def** %arrayidx115, align 8, !dbg !10178
  %51 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !10179
  %conv116 = zext i8 %51 to i32, !dbg !10179
  store i32 %conv116, i32* %mode, align 4, !dbg !10181
  br label %for.cond117, !dbg !10182

for.cond117:                                      ; preds = %for.inc127, %for.end110
  %52 = load i32, i32* %mode, align 4, !dbg !10183
  %cmp118 = icmp ne i32 %52, 0, !dbg !10185
  br i1 %cmp118, label %for.body120, label %for.end131, !dbg !10186

for.body120:                                      ; preds = %for.cond117
  %53 = load i32, i32* %i, align 4, !dbg !10187
  %conv121 = sext i32 %53 to i64, !dbg !10187
  %call122 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv121), !dbg !10187
  %54 = load i32, i32* %i, align 4, !dbg !10188
  %idxprom123 = sext i32 %54 to i64, !dbg !10189
  %arrayidx124 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom123, !dbg !10189
  %55 = load i32, i32* %mode, align 4, !dbg !10190
  %idxprom125 = sext i32 %55 to i64, !dbg !10189
  %arrayidx126 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx124, i64 0, i64 %idxprom125, !dbg !10189
  store %struct.rtx_def* %call122, %struct.rtx_def** %arrayidx126, align 8, !dbg !10191
  br label %for.inc127, !dbg !10189

for.inc127:                                       ; preds = %for.body120
  %56 = load i32, i32* %mode, align 4, !dbg !10192
  %idxprom128 = zext i32 %56 to i64, !dbg !10192
  %arrayidx129 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom128, !dbg !10192
  %57 = load i8, i8* %arrayidx129, align 1, !dbg !10192
  %conv130 = zext i8 %57 to i32, !dbg !10192
  store i32 %conv130, i32* %mode, align 4, !dbg !10193
  br label %for.cond117, !dbg !10194, !llvm.loop !10195

for.end131:                                       ; preds = %for.cond117
  %58 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 3), align 1, !dbg !10197
  %conv132 = zext i8 %58 to i32, !dbg !10197
  store i32 %conv132, i32* %mode, align 4, !dbg !10199
  br label %for.cond133, !dbg !10200

for.cond133:                                      ; preds = %for.inc143, %for.end131
  %59 = load i32, i32* %mode, align 4, !dbg !10201
  %cmp134 = icmp ne i32 %59, 0, !dbg !10203
  br i1 %cmp134, label %for.body136, label %for.end147, !dbg !10204

for.body136:                                      ; preds = %for.cond133
  %60 = load i32, i32* %i, align 4, !dbg !10205
  %conv137 = sext i32 %60 to i64, !dbg !10205
  %call138 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv137), !dbg !10205
  %61 = load i32, i32* %i, align 4, !dbg !10206
  %idxprom139 = sext i32 %61 to i64, !dbg !10207
  %arrayidx140 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom139, !dbg !10207
  %62 = load i32, i32* %mode, align 4, !dbg !10208
  %idxprom141 = sext i32 %62 to i64, !dbg !10207
  %arrayidx142 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx140, i64 0, i64 %idxprom141, !dbg !10207
  store %struct.rtx_def* %call138, %struct.rtx_def** %arrayidx142, align 8, !dbg !10209
  br label %for.inc143, !dbg !10207

for.inc143:                                       ; preds = %for.body136
  %63 = load i32, i32* %mode, align 4, !dbg !10210
  %idxprom144 = zext i32 %63 to i64, !dbg !10210
  %arrayidx145 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom144, !dbg !10210
  %64 = load i8, i8* %arrayidx145, align 1, !dbg !10210
  %conv146 = zext i8 %64 to i32, !dbg !10210
  store i32 %conv146, i32* %mode, align 4, !dbg !10211
  br label %for.cond133, !dbg !10212, !llvm.loop !10213

for.end147:                                       ; preds = %for.cond133
  br label %for.inc148, !dbg !10215

for.inc148:                                       ; preds = %for.end147
  %65 = load i32, i32* %i, align 4, !dbg !10216
  %inc149 = add nsw i32 %65, 1, !dbg !10216
  store i32 %inc149, i32* %i, align 4, !dbg !10216
  br label %for.cond72, !dbg !10217, !llvm.loop !10218

for.end150:                                       ; preds = %for.cond72
  %66 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 10), align 2, !dbg !10220
  %conv151 = zext i8 %66 to i32, !dbg !10220
  store i32 %conv151, i32* %mode, align 4, !dbg !10222
  br label %for.cond152, !dbg !10223

for.cond152:                                      ; preds = %for.inc164, %for.end150
  %67 = load i32, i32* %mode, align 4, !dbg !10224
  %cmp153 = icmp ne i32 %67, 0, !dbg !10226
  br i1 %cmp153, label %for.body155, label %for.end168, !dbg !10227

for.body155:                                      ; preds = %for.cond152
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inner, metadata !10228, metadata !DIExpression()), !dbg !10230
  %68 = load i32, i32* %mode, align 4, !dbg !10231
  %idxprom156 = zext i32 %68 to i64, !dbg !10231
  %arrayidx157 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom156, !dbg !10231
  %69 = load i8, i8* %arrayidx157, align 1, !dbg !10231
  %conv158 = zext i8 %69 to i32, !dbg !10231
  %idxprom159 = sext i32 %conv158 to i64, !dbg !10232
  %arrayidx160 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom159, !dbg !10232
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx160, align 8, !dbg !10232
  store %struct.rtx_def* %70, %struct.rtx_def** %inner, align 8, !dbg !10230
  %71 = load i32, i32* %mode, align 4, !dbg !10233
  %72 = load %struct.rtx_def*, %struct.rtx_def** %inner, align 8, !dbg !10233
  %73 = load %struct.rtx_def*, %struct.rtx_def** %inner, align 8, !dbg !10233
  %call161 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %71, %struct.rtx_def* %72, %struct.rtx_def* %73), !dbg !10233
  %74 = load i32, i32* %mode, align 4, !dbg !10234
  %idxprom162 = sext i32 %74 to i64, !dbg !10235
  %arrayidx163 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom162, !dbg !10235
  store %struct.rtx_def* %call161, %struct.rtx_def** %arrayidx163, align 8, !dbg !10236
  br label %for.inc164, !dbg !10237

for.inc164:                                       ; preds = %for.body155
  %75 = load i32, i32* %mode, align 4, !dbg !10238
  %idxprom165 = zext i32 %75 to i64, !dbg !10238
  %arrayidx166 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom165, !dbg !10238
  %76 = load i8, i8* %arrayidx166, align 1, !dbg !10238
  %conv167 = zext i8 %76 to i32, !dbg !10238
  store i32 %conv167, i32* %mode, align 4, !dbg !10239
  br label %for.cond152, !dbg !10240, !llvm.loop !10241

for.end168:                                       ; preds = %for.cond152
  %77 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 11), align 1, !dbg !10243
  %conv169 = zext i8 %77 to i32, !dbg !10243
  store i32 %conv169, i32* %mode, align 4, !dbg !10245
  br label %for.cond170, !dbg !10246

for.cond170:                                      ; preds = %for.inc183, %for.end168
  %78 = load i32, i32* %mode, align 4, !dbg !10247
  %cmp171 = icmp ne i32 %78, 0, !dbg !10249
  br i1 %cmp171, label %for.body173, label %for.end187, !dbg !10250

for.body173:                                      ; preds = %for.cond170
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inner174, metadata !10251, metadata !DIExpression()), !dbg !10253
  %79 = load i32, i32* %mode, align 4, !dbg !10254
  %idxprom175 = zext i32 %79 to i64, !dbg !10254
  %arrayidx176 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom175, !dbg !10254
  %80 = load i8, i8* %arrayidx176, align 1, !dbg !10254
  %conv177 = zext i8 %80 to i32, !dbg !10254
  %idxprom178 = sext i32 %conv177 to i64, !dbg !10255
  %arrayidx179 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom178, !dbg !10255
  %81 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx179, align 8, !dbg !10255
  store %struct.rtx_def* %81, %struct.rtx_def** %inner174, align 8, !dbg !10253
  %82 = load i32, i32* %mode, align 4, !dbg !10256
  %83 = load %struct.rtx_def*, %struct.rtx_def** %inner174, align 8, !dbg !10256
  %84 = load %struct.rtx_def*, %struct.rtx_def** %inner174, align 8, !dbg !10256
  %call180 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %82, %struct.rtx_def* %83, %struct.rtx_def* %84), !dbg !10256
  %85 = load i32, i32* %mode, align 4, !dbg !10257
  %idxprom181 = sext i32 %85 to i64, !dbg !10258
  %arrayidx182 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom181, !dbg !10258
  store %struct.rtx_def* %call180, %struct.rtx_def** %arrayidx182, align 8, !dbg !10259
  br label %for.inc183, !dbg !10260

for.inc183:                                       ; preds = %for.body173
  %86 = load i32, i32* %mode, align 4, !dbg !10261
  %idxprom184 = zext i32 %86 to i64, !dbg !10261
  %arrayidx185 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom184, !dbg !10261
  %87 = load i8, i8* %arrayidx185, align 1, !dbg !10261
  %conv186 = zext i8 %87 to i32, !dbg !10261
  store i32 %conv186, i32* %mode, align 4, !dbg !10262
  br label %for.cond170, !dbg !10263, !llvm.loop !10264

for.end187:                                       ; preds = %for.cond170
  %88 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 12), align 4, !dbg !10266
  %conv188 = zext i8 %88 to i32, !dbg !10266
  store i32 %conv188, i32* %mode, align 4, !dbg !10268
  br label %for.cond189, !dbg !10269

for.cond189:                                      ; preds = %for.inc199, %for.end187
  %89 = load i32, i32* %mode, align 4, !dbg !10270
  %cmp190 = icmp ne i32 %89, 0, !dbg !10272
  br i1 %cmp190, label %for.body192, label %for.end203, !dbg !10273

for.body192:                                      ; preds = %for.cond189
  %90 = load i32, i32* %mode, align 4, !dbg !10274
  %call193 = call %struct.rtx_def* @gen_const_vector(i32 %90, i32 0), !dbg !10276
  %91 = load i32, i32* %mode, align 4, !dbg !10277
  %idxprom194 = sext i32 %91 to i64, !dbg !10278
  %arrayidx195 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom194, !dbg !10278
  store %struct.rtx_def* %call193, %struct.rtx_def** %arrayidx195, align 8, !dbg !10279
  %92 = load i32, i32* %mode, align 4, !dbg !10280
  %call196 = call %struct.rtx_def* @gen_const_vector(i32 %92, i32 1), !dbg !10281
  %93 = load i32, i32* %mode, align 4, !dbg !10282
  %idxprom197 = sext i32 %93 to i64, !dbg !10283
  %arrayidx198 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom197, !dbg !10283
  store %struct.rtx_def* %call196, %struct.rtx_def** %arrayidx198, align 8, !dbg !10284
  br label %for.inc199, !dbg !10285

for.inc199:                                       ; preds = %for.body192
  %94 = load i32, i32* %mode, align 4, !dbg !10286
  %idxprom200 = zext i32 %94 to i64, !dbg !10286
  %arrayidx201 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom200, !dbg !10286
  %95 = load i8, i8* %arrayidx201, align 1, !dbg !10286
  %conv202 = zext i8 %95 to i32, !dbg !10286
  store i32 %conv202, i32* %mode, align 4, !dbg !10287
  br label %for.cond189, !dbg !10288, !llvm.loop !10289

for.end203:                                       ; preds = %for.cond189
  %96 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 17), align 1, !dbg !10291
  %conv204 = zext i8 %96 to i32, !dbg !10291
  store i32 %conv204, i32* %mode, align 4, !dbg !10293
  br label %for.cond205, !dbg !10294

for.cond205:                                      ; preds = %for.inc215, %for.end203
  %97 = load i32, i32* %mode, align 4, !dbg !10295
  %cmp206 = icmp ne i32 %97, 0, !dbg !10297
  br i1 %cmp206, label %for.body208, label %for.end219, !dbg !10298

for.body208:                                      ; preds = %for.cond205
  %98 = load i32, i32* %mode, align 4, !dbg !10299
  %call209 = call %struct.rtx_def* @gen_const_vector(i32 %98, i32 0), !dbg !10301
  %99 = load i32, i32* %mode, align 4, !dbg !10302
  %idxprom210 = sext i32 %99 to i64, !dbg !10303
  %arrayidx211 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom210, !dbg !10303
  store %struct.rtx_def* %call209, %struct.rtx_def** %arrayidx211, align 8, !dbg !10304
  %100 = load i32, i32* %mode, align 4, !dbg !10305
  %call212 = call %struct.rtx_def* @gen_const_vector(i32 %100, i32 1), !dbg !10306
  %101 = load i32, i32* %mode, align 4, !dbg !10307
  %idxprom213 = sext i32 %101 to i64, !dbg !10308
  %arrayidx214 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom213, !dbg !10308
  store %struct.rtx_def* %call212, %struct.rtx_def** %arrayidx214, align 8, !dbg !10309
  br label %for.inc215, !dbg !10310

for.inc215:                                       ; preds = %for.body208
  %102 = load i32, i32* %mode, align 4, !dbg !10311
  %idxprom216 = zext i32 %102 to i64, !dbg !10311
  %arrayidx217 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom216, !dbg !10311
  %103 = load i8, i8* %arrayidx217, align 1, !dbg !10311
  %conv218 = zext i8 %103 to i32, !dbg !10311
  store i32 %conv218, i32* %mode, align 4, !dbg !10312
  br label %for.cond205, !dbg !10313, !llvm.loop !10314

for.end219:                                       ; preds = %for.cond205
  %104 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 4), align 4, !dbg !10316
  %conv220 = zext i8 %104 to i32, !dbg !10316
  store i32 %conv220, i32* %mode, align 4, !dbg !10318
  br label %for.cond221, !dbg !10319

for.cond221:                                      ; preds = %for.inc242, %for.end219
  %105 = load i32, i32* %mode, align 4, !dbg !10320
  %cmp222 = icmp ne i32 %105, 0, !dbg !10322
  br i1 %cmp222, label %for.body224, label %for.end246, !dbg !10323

for.body224:                                      ; preds = %for.cond221
  %106 = load i32, i32* %mode, align 4, !dbg !10324
  %sub225 = sub i32 %106, 20, !dbg !10324
  %idxprom226 = zext i32 %sub225 to i64, !dbg !10324
  %arrayidx227 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom226, !dbg !10324
  %data = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx227, i32 0, i32 0, !dbg !10326
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %data, i32 0, i32 1, !dbg !10327
  store i64 0, i64* %high, align 8, !dbg !10328
  %107 = load i32, i32* %mode, align 4, !dbg !10329
  %sub228 = sub i32 %107, 20, !dbg !10329
  %idxprom229 = zext i32 %sub228 to i64, !dbg !10329
  %arrayidx230 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom229, !dbg !10329
  %data231 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx230, i32 0, i32 0, !dbg !10330
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %data231, i32 0, i32 0, !dbg !10331
  store i64 0, i64* %low, align 8, !dbg !10332
  %108 = load i32, i32* %mode, align 4, !dbg !10333
  %109 = load i32, i32* %mode, align 4, !dbg !10334
  %sub232 = sub i32 %109, 20, !dbg !10334
  %idxprom233 = zext i32 %sub232 to i64, !dbg !10334
  %arrayidx234 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom233, !dbg !10334
  %mode235 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx234, i32 0, i32 1, !dbg !10335
  store i32 %108, i32* %mode235, align 8, !dbg !10336
  %110 = load i32, i32* %mode, align 4, !dbg !10337
  %sub236 = sub i32 %110, 20, !dbg !10337
  %idxprom237 = zext i32 %sub236 to i64, !dbg !10337
  %arrayidx238 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom237, !dbg !10337
  %111 = load i32, i32* %mode, align 4, !dbg !10337
  %call239 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx238, i32 %111), !dbg !10337
  %112 = load i32, i32* %mode, align 4, !dbg !10338
  %idxprom240 = sext i32 %112 to i64, !dbg !10339
  %arrayidx241 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom240, !dbg !10339
  store %struct.rtx_def* %call239, %struct.rtx_def** %arrayidx241, align 8, !dbg !10340
  br label %for.inc242, !dbg !10341

for.inc242:                                       ; preds = %for.body224
  %113 = load i32, i32* %mode, align 4, !dbg !10342
  %idxprom243 = zext i32 %113 to i64, !dbg !10342
  %arrayidx244 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom243, !dbg !10342
  %114 = load i8, i8* %arrayidx244, align 1, !dbg !10342
  %conv245 = zext i8 %114 to i32, !dbg !10342
  store i32 %conv245, i32* %mode, align 4, !dbg !10343
  br label %for.cond221, !dbg !10344, !llvm.loop !10345

for.end246:                                       ; preds = %for.cond221
  %115 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 5), align 1, !dbg !10347
  %conv247 = zext i8 %115 to i32, !dbg !10347
  store i32 %conv247, i32* %mode, align 4, !dbg !10349
  br label %for.cond248, !dbg !10350

for.cond248:                                      ; preds = %for.inc272, %for.end246
  %116 = load i32, i32* %mode, align 4, !dbg !10351
  %cmp249 = icmp ne i32 %116, 0, !dbg !10353
  br i1 %cmp249, label %for.body251, label %for.end276, !dbg !10354

for.body251:                                      ; preds = %for.cond248
  %117 = load i32, i32* %mode, align 4, !dbg !10355
  %sub252 = sub i32 %117, 20, !dbg !10355
  %idxprom253 = zext i32 %sub252 to i64, !dbg !10355
  %arrayidx254 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom253, !dbg !10355
  %data255 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx254, i32 0, i32 0, !dbg !10357
  %high256 = getelementptr inbounds %struct.double_int, %struct.double_int* %data255, i32 0, i32 1, !dbg !10358
  store i64 0, i64* %high256, align 8, !dbg !10359
  %118 = load i32, i32* %mode, align 4, !dbg !10360
  %sub257 = sub i32 %118, 20, !dbg !10360
  %idxprom258 = zext i32 %sub257 to i64, !dbg !10360
  %arrayidx259 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom258, !dbg !10360
  %data260 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx259, i32 0, i32 0, !dbg !10361
  %low261 = getelementptr inbounds %struct.double_int, %struct.double_int* %data260, i32 0, i32 0, !dbg !10362
  store i64 0, i64* %low261, align 8, !dbg !10363
  %119 = load i32, i32* %mode, align 4, !dbg !10364
  %120 = load i32, i32* %mode, align 4, !dbg !10365
  %sub262 = sub i32 %120, 20, !dbg !10365
  %idxprom263 = zext i32 %sub262 to i64, !dbg !10365
  %arrayidx264 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom263, !dbg !10365
  %mode265 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx264, i32 0, i32 1, !dbg !10366
  store i32 %119, i32* %mode265, align 8, !dbg !10367
  %121 = load i32, i32* %mode, align 4, !dbg !10368
  %sub266 = sub i32 %121, 20, !dbg !10368
  %idxprom267 = zext i32 %sub266 to i64, !dbg !10368
  %arrayidx268 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom267, !dbg !10368
  %122 = load i32, i32* %mode, align 4, !dbg !10368
  %call269 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx268, i32 %122), !dbg !10368
  %123 = load i32, i32* %mode, align 4, !dbg !10369
  %idxprom270 = sext i32 %123 to i64, !dbg !10370
  %arrayidx271 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom270, !dbg !10370
  store %struct.rtx_def* %call269, %struct.rtx_def** %arrayidx271, align 8, !dbg !10371
  br label %for.inc272, !dbg !10372

for.inc272:                                       ; preds = %for.body251
  %124 = load i32, i32* %mode, align 4, !dbg !10373
  %idxprom273 = zext i32 %124 to i64, !dbg !10373
  %arrayidx274 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom273, !dbg !10373
  %125 = load i8, i8* %arrayidx274, align 1, !dbg !10373
  %conv275 = zext i8 %125 to i32, !dbg !10373
  store i32 %conv275, i32* %mode, align 4, !dbg !10374
  br label %for.cond248, !dbg !10375, !llvm.loop !10376

for.end276:                                       ; preds = %for.cond248
  %126 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 6), align 2, !dbg !10378
  %conv277 = zext i8 %126 to i32, !dbg !10378
  store i32 %conv277, i32* %mode, align 4, !dbg !10380
  br label %for.cond278, !dbg !10381

for.cond278:                                      ; preds = %for.inc357, %for.end276
  %127 = load i32, i32* %mode, align 4, !dbg !10382
  %cmp279 = icmp ne i32 %127, 0, !dbg !10384
  br i1 %cmp279, label %for.body281, label %for.end361, !dbg !10385

for.body281:                                      ; preds = %for.cond278
  %128 = load i32, i32* %mode, align 4, !dbg !10386
  %sub282 = sub i32 %128, 20, !dbg !10386
  %idxprom283 = zext i32 %sub282 to i64, !dbg !10386
  %arrayidx284 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom283, !dbg !10386
  %data285 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx284, i32 0, i32 0, !dbg !10388
  %high286 = getelementptr inbounds %struct.double_int, %struct.double_int* %data285, i32 0, i32 1, !dbg !10389
  store i64 0, i64* %high286, align 8, !dbg !10390
  %129 = load i32, i32* %mode, align 4, !dbg !10391
  %sub287 = sub i32 %129, 20, !dbg !10391
  %idxprom288 = zext i32 %sub287 to i64, !dbg !10391
  %arrayidx289 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom288, !dbg !10391
  %data290 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx289, i32 0, i32 0, !dbg !10392
  %low291 = getelementptr inbounds %struct.double_int, %struct.double_int* %data290, i32 0, i32 0, !dbg !10393
  store i64 0, i64* %low291, align 8, !dbg !10394
  %130 = load i32, i32* %mode, align 4, !dbg !10395
  %131 = load i32, i32* %mode, align 4, !dbg !10396
  %sub292 = sub i32 %131, 20, !dbg !10396
  %idxprom293 = zext i32 %sub292 to i64, !dbg !10396
  %arrayidx294 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom293, !dbg !10396
  %mode295 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx294, i32 0, i32 1, !dbg !10397
  store i32 %130, i32* %mode295, align 8, !dbg !10398
  %132 = load i32, i32* %mode, align 4, !dbg !10399
  %sub296 = sub i32 %132, 20, !dbg !10399
  %idxprom297 = zext i32 %sub296 to i64, !dbg !10399
  %arrayidx298 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom297, !dbg !10399
  %133 = load i32, i32* %mode, align 4, !dbg !10399
  %call299 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx298, i32 %133), !dbg !10399
  %134 = load i32, i32* %mode, align 4, !dbg !10400
  %idxprom300 = sext i32 %134 to i64, !dbg !10401
  %arrayidx301 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom300, !dbg !10401
  store %struct.rtx_def* %call299, %struct.rtx_def** %arrayidx301, align 8, !dbg !10402
  %135 = load i32, i32* %mode, align 4, !dbg !10403
  %sub302 = sub i32 %135, 30, !dbg !10403
  %idxprom303 = zext i32 %sub302 to i64, !dbg !10403
  %arrayidx304 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom303, !dbg !10403
  %data305 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx304, i32 0, i32 0, !dbg !10404
  %high306 = getelementptr inbounds %struct.double_int, %struct.double_int* %data305, i32 0, i32 1, !dbg !10405
  store i64 0, i64* %high306, align 8, !dbg !10406
  %136 = load i32, i32* %mode, align 4, !dbg !10407
  %sub307 = sub i32 %136, 30, !dbg !10407
  %idxprom308 = zext i32 %sub307 to i64, !dbg !10407
  %arrayidx309 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom308, !dbg !10407
  %data310 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx309, i32 0, i32 0, !dbg !10408
  %low311 = getelementptr inbounds %struct.double_int, %struct.double_int* %data310, i32 0, i32 0, !dbg !10409
  store i64 0, i64* %low311, align 8, !dbg !10410
  %137 = load i32, i32* %mode, align 4, !dbg !10411
  %138 = load i32, i32* %mode, align 4, !dbg !10412
  %sub312 = sub i32 %138, 30, !dbg !10412
  %idxprom313 = zext i32 %sub312 to i64, !dbg !10412
  %arrayidx314 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom313, !dbg !10412
  %mode315 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx314, i32 0, i32 1, !dbg !10413
  store i32 %137, i32* %mode315, align 8, !dbg !10414
  %139 = load i32, i32* %mode, align 4, !dbg !10415
  %idxprom316 = zext i32 %139 to i64, !dbg !10415
  %arrayidx317 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_fbit, i64 0, i64 %idxprom316, !dbg !10415
  %140 = load i8, i8* %arrayidx317, align 1, !dbg !10415
  %conv318 = zext i8 %140 to i64, !dbg !10415
  %141 = load i32, i32* %mode, align 4, !dbg !10416
  %sub319 = sub i32 %141, 30, !dbg !10416
  %idxprom320 = zext i32 %sub319 to i64, !dbg !10416
  %arrayidx321 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom320, !dbg !10416
  %data322 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx321, i32 0, i32 0, !dbg !10417
  %low323 = getelementptr inbounds %struct.double_int, %struct.double_int* %data322, i32 0, i32 0, !dbg !10418
  %142 = load i32, i32* %mode, align 4, !dbg !10419
  %sub324 = sub i32 %142, 30, !dbg !10419
  %idxprom325 = zext i32 %sub324 to i64, !dbg !10419
  %arrayidx326 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom325, !dbg !10419
  %data327 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx326, i32 0, i32 0, !dbg !10420
  %high328 = getelementptr inbounds %struct.double_int, %struct.double_int* %data327, i32 0, i32 1, !dbg !10421
  %143 = load i32, i32* %mode, align 4, !dbg !10422
  %idxprom329 = zext i32 %143 to i64, !dbg !10422
  %arrayidx330 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom329, !dbg !10422
  %144 = load i8, i8* %arrayidx330, align 1, !dbg !10422
  %conv331 = zext i8 %144 to i32, !dbg !10422
  %cmp332 = icmp eq i32 %conv331, 4, !dbg !10422
  br i1 %cmp332, label %lor.end350, label %lor.lhs.false, !dbg !10422

lor.lhs.false:                                    ; preds = %for.body281
  %145 = load i32, i32* %mode, align 4, !dbg !10422
  %idxprom334 = zext i32 %145 to i64, !dbg !10422
  %arrayidx335 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom334, !dbg !10422
  %146 = load i8, i8* %arrayidx335, align 1, !dbg !10422
  %conv336 = zext i8 %146 to i32, !dbg !10422
  %cmp337 = icmp eq i32 %conv336, 13, !dbg !10422
  br i1 %cmp337, label %lor.end350, label %lor.rhs, !dbg !10422

lor.rhs:                                          ; preds = %lor.lhs.false
  %147 = load i32, i32* %mode, align 4, !dbg !10422
  %idxprom339 = zext i32 %147 to i64, !dbg !10422
  %arrayidx340 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom339, !dbg !10422
  %148 = load i8, i8* %arrayidx340, align 1, !dbg !10422
  %conv341 = zext i8 %148 to i32, !dbg !10422
  %cmp342 = icmp eq i32 %conv341, 6, !dbg !10422
  br i1 %cmp342, label %lor.end, label %lor.rhs344, !dbg !10422

lor.rhs344:                                       ; preds = %lor.rhs
  %149 = load i32, i32* %mode, align 4, !dbg !10422
  %idxprom345 = zext i32 %149 to i64, !dbg !10422
  %arrayidx346 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom345, !dbg !10422
  %150 = load i8, i8* %arrayidx346, align 1, !dbg !10422
  %conv347 = zext i8 %150 to i32, !dbg !10422
  %cmp348 = icmp eq i32 %conv347, 15, !dbg !10422
  br label %lor.end, !dbg !10422

lor.end:                                          ; preds = %lor.rhs344, %lor.rhs
  %151 = phi i1 [ true, %lor.rhs ], [ %cmp348, %lor.rhs344 ]
  br label %lor.end350, !dbg !10422

lor.end350:                                       ; preds = %lor.end, %lor.lhs.false, %for.body281
  %152 = phi i1 [ true, %lor.lhs.false ], [ true, %for.body281 ], [ %151, %lor.end ]
  %lor.ext = zext i1 %152 to i32, !dbg !10422
  call void @lshift_double(i64 1, i64 0, i64 %conv318, i32 128, i64* %low323, i64* %high328, i32 %lor.ext), !dbg !10423
  %153 = load i32, i32* %mode, align 4, !dbg !10424
  %sub351 = sub i32 %153, 30, !dbg !10424
  %idxprom352 = zext i32 %sub351 to i64, !dbg !10424
  %arrayidx353 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom352, !dbg !10424
  %154 = load i32, i32* %mode, align 4, !dbg !10424
  %call354 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx353, i32 %154), !dbg !10424
  %155 = load i32, i32* %mode, align 4, !dbg !10425
  %idxprom355 = sext i32 %155 to i64, !dbg !10426
  %arrayidx356 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom355, !dbg !10426
  store %struct.rtx_def* %call354, %struct.rtx_def** %arrayidx356, align 8, !dbg !10427
  br label %for.inc357, !dbg !10428

for.inc357:                                       ; preds = %lor.end350
  %156 = load i32, i32* %mode, align 4, !dbg !10429
  %idxprom358 = zext i32 %156 to i64, !dbg !10429
  %arrayidx359 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom358, !dbg !10429
  %157 = load i8, i8* %arrayidx359, align 1, !dbg !10429
  %conv360 = zext i8 %157 to i32, !dbg !10429
  store i32 %conv360, i32* %mode, align 4, !dbg !10430
  br label %for.cond278, !dbg !10431, !llvm.loop !10432

for.end361:                                       ; preds = %for.cond278
  %158 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 7), align 1, !dbg !10434
  %conv362 = zext i8 %158 to i32, !dbg !10434
  store i32 %conv362, i32* %mode, align 4, !dbg !10436
  br label %for.cond363, !dbg !10437

for.cond363:                                      ; preds = %for.inc447, %for.end361
  %159 = load i32, i32* %mode, align 4, !dbg !10438
  %cmp364 = icmp ne i32 %159, 0, !dbg !10440
  br i1 %cmp364, label %for.body366, label %for.end451, !dbg !10441

for.body366:                                      ; preds = %for.cond363
  %160 = load i32, i32* %mode, align 4, !dbg !10442
  %sub367 = sub i32 %160, 20, !dbg !10442
  %idxprom368 = zext i32 %sub367 to i64, !dbg !10442
  %arrayidx369 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom368, !dbg !10442
  %data370 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx369, i32 0, i32 0, !dbg !10444
  %high371 = getelementptr inbounds %struct.double_int, %struct.double_int* %data370, i32 0, i32 1, !dbg !10445
  store i64 0, i64* %high371, align 8, !dbg !10446
  %161 = load i32, i32* %mode, align 4, !dbg !10447
  %sub372 = sub i32 %161, 20, !dbg !10447
  %idxprom373 = zext i32 %sub372 to i64, !dbg !10447
  %arrayidx374 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom373, !dbg !10447
  %data375 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx374, i32 0, i32 0, !dbg !10448
  %low376 = getelementptr inbounds %struct.double_int, %struct.double_int* %data375, i32 0, i32 0, !dbg !10449
  store i64 0, i64* %low376, align 8, !dbg !10450
  %162 = load i32, i32* %mode, align 4, !dbg !10451
  %163 = load i32, i32* %mode, align 4, !dbg !10452
  %sub377 = sub i32 %163, 20, !dbg !10452
  %idxprom378 = zext i32 %sub377 to i64, !dbg !10452
  %arrayidx379 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom378, !dbg !10452
  %mode380 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx379, i32 0, i32 1, !dbg !10453
  store i32 %162, i32* %mode380, align 8, !dbg !10454
  %164 = load i32, i32* %mode, align 4, !dbg !10455
  %sub381 = sub i32 %164, 20, !dbg !10455
  %idxprom382 = zext i32 %sub381 to i64, !dbg !10455
  %arrayidx383 = getelementptr inbounds [18 x %struct.fixed_value], [18 x %struct.fixed_value]* @fconst0, i64 0, i64 %idxprom382, !dbg !10455
  %165 = load i32, i32* %mode, align 4, !dbg !10455
  %call384 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx383, i32 %165), !dbg !10455
  %166 = load i32, i32* %mode, align 4, !dbg !10456
  %idxprom385 = sext i32 %166 to i64, !dbg !10457
  %arrayidx386 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom385, !dbg !10457
  store %struct.rtx_def* %call384, %struct.rtx_def** %arrayidx386, align 8, !dbg !10458
  %167 = load i32, i32* %mode, align 4, !dbg !10459
  %sub387 = sub i32 %167, 30, !dbg !10459
  %idxprom388 = zext i32 %sub387 to i64, !dbg !10459
  %arrayidx389 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom388, !dbg !10459
  %data390 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx389, i32 0, i32 0, !dbg !10460
  %high391 = getelementptr inbounds %struct.double_int, %struct.double_int* %data390, i32 0, i32 1, !dbg !10461
  store i64 0, i64* %high391, align 8, !dbg !10462
  %168 = load i32, i32* %mode, align 4, !dbg !10463
  %sub392 = sub i32 %168, 30, !dbg !10463
  %idxprom393 = zext i32 %sub392 to i64, !dbg !10463
  %arrayidx394 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom393, !dbg !10463
  %data395 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx394, i32 0, i32 0, !dbg !10464
  %low396 = getelementptr inbounds %struct.double_int, %struct.double_int* %data395, i32 0, i32 0, !dbg !10465
  store i64 0, i64* %low396, align 8, !dbg !10466
  %169 = load i32, i32* %mode, align 4, !dbg !10467
  %170 = load i32, i32* %mode, align 4, !dbg !10468
  %sub397 = sub i32 %170, 30, !dbg !10468
  %idxprom398 = zext i32 %sub397 to i64, !dbg !10468
  %arrayidx399 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom398, !dbg !10468
  %mode400 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx399, i32 0, i32 1, !dbg !10469
  store i32 %169, i32* %mode400, align 8, !dbg !10470
  %171 = load i32, i32* %mode, align 4, !dbg !10471
  %idxprom401 = zext i32 %171 to i64, !dbg !10471
  %arrayidx402 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_fbit, i64 0, i64 %idxprom401, !dbg !10471
  %172 = load i8, i8* %arrayidx402, align 1, !dbg !10471
  %conv403 = zext i8 %172 to i64, !dbg !10471
  %173 = load i32, i32* %mode, align 4, !dbg !10472
  %sub404 = sub i32 %173, 30, !dbg !10472
  %idxprom405 = zext i32 %sub404 to i64, !dbg !10472
  %arrayidx406 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom405, !dbg !10472
  %data407 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx406, i32 0, i32 0, !dbg !10473
  %low408 = getelementptr inbounds %struct.double_int, %struct.double_int* %data407, i32 0, i32 0, !dbg !10474
  %174 = load i32, i32* %mode, align 4, !dbg !10475
  %sub409 = sub i32 %174, 30, !dbg !10475
  %idxprom410 = zext i32 %sub409 to i64, !dbg !10475
  %arrayidx411 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom410, !dbg !10475
  %data412 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %arrayidx411, i32 0, i32 0, !dbg !10476
  %high413 = getelementptr inbounds %struct.double_int, %struct.double_int* %data412, i32 0, i32 1, !dbg !10477
  %175 = load i32, i32* %mode, align 4, !dbg !10478
  %idxprom414 = zext i32 %175 to i64, !dbg !10478
  %arrayidx415 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom414, !dbg !10478
  %176 = load i8, i8* %arrayidx415, align 1, !dbg !10478
  %conv416 = zext i8 %176 to i32, !dbg !10478
  %cmp417 = icmp eq i32 %conv416, 4, !dbg !10478
  br i1 %cmp417, label %lor.end439, label %lor.lhs.false419, !dbg !10478

lor.lhs.false419:                                 ; preds = %for.body366
  %177 = load i32, i32* %mode, align 4, !dbg !10478
  %idxprom420 = zext i32 %177 to i64, !dbg !10478
  %arrayidx421 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom420, !dbg !10478
  %178 = load i8, i8* %arrayidx421, align 1, !dbg !10478
  %conv422 = zext i8 %178 to i32, !dbg !10478
  %cmp423 = icmp eq i32 %conv422, 13, !dbg !10478
  br i1 %cmp423, label %lor.end439, label %lor.rhs425, !dbg !10478

lor.rhs425:                                       ; preds = %lor.lhs.false419
  %179 = load i32, i32* %mode, align 4, !dbg !10478
  %idxprom426 = zext i32 %179 to i64, !dbg !10478
  %arrayidx427 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom426, !dbg !10478
  %180 = load i8, i8* %arrayidx427, align 1, !dbg !10478
  %conv428 = zext i8 %180 to i32, !dbg !10478
  %cmp429 = icmp eq i32 %conv428, 6, !dbg !10478
  br i1 %cmp429, label %lor.end437, label %lor.rhs431, !dbg !10478

lor.rhs431:                                       ; preds = %lor.rhs425
  %181 = load i32, i32* %mode, align 4, !dbg !10478
  %idxprom432 = zext i32 %181 to i64, !dbg !10478
  %arrayidx433 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom432, !dbg !10478
  %182 = load i8, i8* %arrayidx433, align 1, !dbg !10478
  %conv434 = zext i8 %182 to i32, !dbg !10478
  %cmp435 = icmp eq i32 %conv434, 15, !dbg !10478
  br label %lor.end437, !dbg !10478

lor.end437:                                       ; preds = %lor.rhs431, %lor.rhs425
  %183 = phi i1 [ true, %lor.rhs425 ], [ %cmp435, %lor.rhs431 ]
  br label %lor.end439, !dbg !10478

lor.end439:                                       ; preds = %lor.end437, %lor.lhs.false419, %for.body366
  %184 = phi i1 [ true, %lor.lhs.false419 ], [ true, %for.body366 ], [ %183, %lor.end437 ]
  %lor.ext440 = zext i1 %184 to i32, !dbg !10478
  call void @lshift_double(i64 1, i64 0, i64 %conv403, i32 128, i64* %low408, i64* %high413, i32 %lor.ext440), !dbg !10479
  %185 = load i32, i32* %mode, align 4, !dbg !10480
  %sub441 = sub i32 %185, 30, !dbg !10480
  %idxprom442 = zext i32 %sub441 to i64, !dbg !10480
  %arrayidx443 = getelementptr inbounds [8 x %struct.fixed_value], [8 x %struct.fixed_value]* @fconst1, i64 0, i64 %idxprom442, !dbg !10480
  %186 = load i32, i32* %mode, align 4, !dbg !10480
  %call444 = call %struct.rtx_def* @const_fixed_from_fixed_value(%struct.fixed_value* byval(%struct.fixed_value) align 8 %arrayidx443, i32 %186), !dbg !10480
  %187 = load i32, i32* %mode, align 4, !dbg !10481
  %idxprom445 = sext i32 %187 to i64, !dbg !10482
  %arrayidx446 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom445, !dbg !10482
  store %struct.rtx_def* %call444, %struct.rtx_def** %arrayidx446, align 8, !dbg !10483
  br label %for.inc447, !dbg !10484

for.inc447:                                       ; preds = %lor.end439
  %188 = load i32, i32* %mode, align 4, !dbg !10485
  %idxprom448 = zext i32 %188 to i64, !dbg !10485
  %arrayidx449 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom448, !dbg !10485
  %189 = load i8, i8* %arrayidx449, align 1, !dbg !10485
  %conv450 = zext i8 %189 to i32, !dbg !10485
  store i32 %conv450, i32* %mode, align 4, !dbg !10486
  br label %for.cond363, !dbg !10487, !llvm.loop !10488

for.end451:                                       ; preds = %for.cond363
  %190 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 13), align 1, !dbg !10490
  %conv452 = zext i8 %190 to i32, !dbg !10490
  store i32 %conv452, i32* %mode, align 4, !dbg !10492
  br label %for.cond453, !dbg !10493

for.cond453:                                      ; preds = %for.inc460, %for.end451
  %191 = load i32, i32* %mode, align 4, !dbg !10494
  %cmp454 = icmp ne i32 %191, 0, !dbg !10496
  br i1 %cmp454, label %for.body456, label %for.end464, !dbg !10497

for.body456:                                      ; preds = %for.cond453
  %192 = load i32, i32* %mode, align 4, !dbg !10498
  %call457 = call %struct.rtx_def* @gen_const_vector(i32 %192, i32 0), !dbg !10500
  %193 = load i32, i32* %mode, align 4, !dbg !10501
  %idxprom458 = sext i32 %193 to i64, !dbg !10502
  %arrayidx459 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom458, !dbg !10502
  store %struct.rtx_def* %call457, %struct.rtx_def** %arrayidx459, align 8, !dbg !10503
  br label %for.inc460, !dbg !10504

for.inc460:                                       ; preds = %for.body456
  %194 = load i32, i32* %mode, align 4, !dbg !10505
  %idxprom461 = zext i32 %194 to i64, !dbg !10505
  %arrayidx462 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom461, !dbg !10505
  %195 = load i8, i8* %arrayidx462, align 1, !dbg !10505
  %conv463 = zext i8 %195 to i32, !dbg !10505
  store i32 %conv463, i32* %mode, align 4, !dbg !10506
  br label %for.cond453, !dbg !10507, !llvm.loop !10508

for.end464:                                       ; preds = %for.cond453
  %196 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 14), align 2, !dbg !10510
  %conv465 = zext i8 %196 to i32, !dbg !10510
  store i32 %conv465, i32* %mode, align 4, !dbg !10512
  br label %for.cond466, !dbg !10513

for.cond466:                                      ; preds = %for.inc473, %for.end464
  %197 = load i32, i32* %mode, align 4, !dbg !10514
  %cmp467 = icmp ne i32 %197, 0, !dbg !10516
  br i1 %cmp467, label %for.body469, label %for.end477, !dbg !10517

for.body469:                                      ; preds = %for.cond466
  %198 = load i32, i32* %mode, align 4, !dbg !10518
  %call470 = call %struct.rtx_def* @gen_const_vector(i32 %198, i32 0), !dbg !10520
  %199 = load i32, i32* %mode, align 4, !dbg !10521
  %idxprom471 = sext i32 %199 to i64, !dbg !10522
  %arrayidx472 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom471, !dbg !10522
  store %struct.rtx_def* %call470, %struct.rtx_def** %arrayidx472, align 8, !dbg !10523
  br label %for.inc473, !dbg !10524

for.inc473:                                       ; preds = %for.body469
  %200 = load i32, i32* %mode, align 4, !dbg !10525
  %idxprom474 = zext i32 %200 to i64, !dbg !10525
  %arrayidx475 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom474, !dbg !10525
  %201 = load i8, i8* %arrayidx475, align 1, !dbg !10525
  %conv476 = zext i8 %201 to i32, !dbg !10525
  store i32 %conv476, i32* %mode, align 4, !dbg !10526
  br label %for.cond466, !dbg !10527, !llvm.loop !10528

for.end477:                                       ; preds = %for.cond466
  %202 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 15), align 1, !dbg !10530
  %conv478 = zext i8 %202 to i32, !dbg !10530
  store i32 %conv478, i32* %mode, align 4, !dbg !10532
  br label %for.cond479, !dbg !10533

for.cond479:                                      ; preds = %for.inc489, %for.end477
  %203 = load i32, i32* %mode, align 4, !dbg !10534
  %cmp480 = icmp ne i32 %203, 0, !dbg !10536
  br i1 %cmp480, label %for.body482, label %for.end493, !dbg !10537

for.body482:                                      ; preds = %for.cond479
  %204 = load i32, i32* %mode, align 4, !dbg !10538
  %call483 = call %struct.rtx_def* @gen_const_vector(i32 %204, i32 0), !dbg !10540
  %205 = load i32, i32* %mode, align 4, !dbg !10541
  %idxprom484 = sext i32 %205 to i64, !dbg !10542
  %arrayidx485 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom484, !dbg !10542
  store %struct.rtx_def* %call483, %struct.rtx_def** %arrayidx485, align 8, !dbg !10543
  %206 = load i32, i32* %mode, align 4, !dbg !10544
  %call486 = call %struct.rtx_def* @gen_const_vector(i32 %206, i32 1), !dbg !10545
  %207 = load i32, i32* %mode, align 4, !dbg !10546
  %idxprom487 = sext i32 %207 to i64, !dbg !10547
  %arrayidx488 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom487, !dbg !10547
  store %struct.rtx_def* %call486, %struct.rtx_def** %arrayidx488, align 8, !dbg !10548
  br label %for.inc489, !dbg !10549

for.inc489:                                       ; preds = %for.body482
  %208 = load i32, i32* %mode, align 4, !dbg !10550
  %idxprom490 = zext i32 %208 to i64, !dbg !10550
  %arrayidx491 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom490, !dbg !10550
  %209 = load i8, i8* %arrayidx491, align 1, !dbg !10550
  %conv492 = zext i8 %209 to i32, !dbg !10550
  store i32 %conv492, i32* %mode, align 4, !dbg !10551
  br label %for.cond479, !dbg !10552, !llvm.loop !10553

for.end493:                                       ; preds = %for.cond479
  %210 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 16), align 16, !dbg !10555
  %conv494 = zext i8 %210 to i32, !dbg !10555
  store i32 %conv494, i32* %mode, align 4, !dbg !10557
  br label %for.cond495, !dbg !10558

for.cond495:                                      ; preds = %for.inc505, %for.end493
  %211 = load i32, i32* %mode, align 4, !dbg !10559
  %cmp496 = icmp ne i32 %211, 0, !dbg !10561
  br i1 %cmp496, label %for.body498, label %for.end509, !dbg !10562

for.body498:                                      ; preds = %for.cond495
  %212 = load i32, i32* %mode, align 4, !dbg !10563
  %call499 = call %struct.rtx_def* @gen_const_vector(i32 %212, i32 0), !dbg !10565
  %213 = load i32, i32* %mode, align 4, !dbg !10566
  %idxprom500 = sext i32 %213 to i64, !dbg !10567
  %arrayidx501 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom500, !dbg !10567
  store %struct.rtx_def* %call499, %struct.rtx_def** %arrayidx501, align 8, !dbg !10568
  %214 = load i32, i32* %mode, align 4, !dbg !10569
  %call502 = call %struct.rtx_def* @gen_const_vector(i32 %214, i32 1), !dbg !10570
  %215 = load i32, i32* %mode, align 4, !dbg !10571
  %idxprom503 = sext i32 %215 to i64, !dbg !10572
  %arrayidx504 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom503, !dbg !10572
  store %struct.rtx_def* %call502, %struct.rtx_def** %arrayidx504, align 8, !dbg !10573
  br label %for.inc505, !dbg !10574

for.inc505:                                       ; preds = %for.body498
  %216 = load i32, i32* %mode, align 4, !dbg !10575
  %idxprom506 = zext i32 %216 to i64, !dbg !10575
  %arrayidx507 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom506, !dbg !10575
  %217 = load i8, i8* %arrayidx507, align 1, !dbg !10575
  %conv508 = zext i8 %217 to i32, !dbg !10575
  store i32 %conv508, i32* %mode, align 4, !dbg !10576
  br label %for.cond495, !dbg !10577, !llvm.loop !10578

for.end509:                                       ; preds = %for.cond495
  store i32 2, i32* %i, align 4, !dbg !10580
  br label %for.cond510, !dbg !10582

for.cond510:                                      ; preds = %for.inc523, %for.end509
  %218 = load i32, i32* %i, align 4, !dbg !10583
  %cmp511 = icmp slt i32 %218, 87, !dbg !10585
  br i1 %cmp511, label %for.body513, label %for.end525, !dbg !10586

for.body513:                                      ; preds = %for.cond510
  %219 = load i32, i32* %i, align 4, !dbg !10587
  %idxprom514 = zext i32 %219 to i64, !dbg !10587
  %arrayidx515 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom514, !dbg !10587
  %220 = load i8, i8* %arrayidx515, align 1, !dbg !10587
  %conv516 = zext i8 %220 to i32, !dbg !10587
  %cmp517 = icmp eq i32 %conv516, 1, !dbg !10589
  br i1 %cmp517, label %if.then519, label %if.end522, !dbg !10590

if.then519:                                       ; preds = %for.body513
  %221 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10591
  %222 = load i32, i32* %i, align 4, !dbg !10592
  %idxprom520 = sext i32 %222 to i64, !dbg !10593
  %arrayidx521 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom520, !dbg !10593
  store %struct.rtx_def* %221, %struct.rtx_def** %arrayidx521, align 8, !dbg !10594
  br label %if.end522, !dbg !10593

if.end522:                                        ; preds = %if.then519, %for.body513
  br label %for.inc523, !dbg !10595

for.inc523:                                       ; preds = %if.end522
  %223 = load i32, i32* %i, align 4, !dbg !10596
  %inc524 = add nsw i32 %223, 1, !dbg !10596
  store i32 %inc524, i32* %i, align 4, !dbg !10596
  br label %for.cond510, !dbg !10597, !llvm.loop !10598

for.end525:                                       ; preds = %for.cond510
  %224 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10600
  store %struct.rtx_def* %224, %struct.rtx_def** getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 13), align 8, !dbg !10601
  %225 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10602
  store %struct.rtx_def* %225, %struct.rtx_def** getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1, i64 13), align 8, !dbg !10604
  ret void, !dbg !10605
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_int_htab_hash(i8* %x) #0 !dbg !10606 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10607, metadata !DIExpression()), !dbg !10608
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10609
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10609
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !10609
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10609
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10609
  %2 = load i64, i64* %arrayidx, align 8, !dbg !10609
  %conv = trunc i64 %2 to i32, !dbg !10610
  ret i32 %conv, !dbg !10611
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_int_htab_eq(i8* %x, i8* %y) #0 !dbg !10612 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10613, metadata !DIExpression()), !dbg !10614
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !10615, metadata !DIExpression()), !dbg !10616
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10617
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10617
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !10617
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10617
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10617
  %2 = load i64, i64* %arrayidx, align 8, !dbg !10617
  %3 = load i8*, i8** %y.addr, align 8, !dbg !10618
  %4 = bitcast i8* %3 to i64*, !dbg !10619
  %5 = load i64, i64* %4, align 8, !dbg !10620
  %cmp = icmp eq i64 %2, %5, !dbg !10621
  %conv = zext i1 %cmp to i32, !dbg !10621
  ret i32 %conv, !dbg !10622
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_double_htab_hash(i8* %x) #0 !dbg !10623 {
entry:
  %x.addr = alloca i8*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %h = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10624, metadata !DIExpression()), !dbg !10625
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !10626, metadata !DIExpression()), !dbg !10628
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10629
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10630
  store %struct.rtx_def* %1, %struct.rtx_def** %value, align 8, !dbg !10628
  call void @llvm.dbg.declare(metadata i32* %h, metadata !10631, metadata !DIExpression()), !dbg !10632
  %2 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10633
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !10633
  %bf.load = load i32, i32* %3, align 8, !dbg !10633
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10633
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10633
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !10635
  br i1 %cmp, label %if.then, label %if.else, !dbg !10636

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10637
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !10637
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10637
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10637
  %5 = load i64, i64* %arrayidx, align 8, !dbg !10637
  %6 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10638
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !10638
  %hwint2 = bitcast %union.u* %u1 to [1 x i64]*, !dbg !10638
  %arrayidx3 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint2, i64 0, i64 1, !dbg !10638
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !10638
  %xor = xor i64 %5, %7, !dbg !10639
  %conv = trunc i64 %xor to i32, !dbg !10637
  store i32 %conv, i32* %h, align 4, !dbg !10640
  br label %if.end, !dbg !10641

if.else:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10642
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10642
  %rv = bitcast %union.u* %u4 to %struct.real_value*, !dbg !10642
  %call = call i32 @real_hash(%struct.real_value* %rv), !dbg !10644
  store i32 %call, i32* %h, align 4, !dbg !10645
  %9 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10646
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !10646
  %bf.load5 = load i32, i32* %10, align 8, !dbg !10646
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !10646
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !10646
  %11 = load i32, i32* %h, align 4, !dbg !10647
  %xor8 = xor i32 %11, %bf.clear7, !dbg !10647
  store i32 %xor8, i32* %h, align 4, !dbg !10647
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %h, align 4, !dbg !10648
  ret i32 %12, !dbg !10649
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_double_htab_eq(i8* %x, i8* %y) #0 !dbg !10650 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.rtx_def*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10651, metadata !DIExpression()), !dbg !10652
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !10653, metadata !DIExpression()), !dbg !10654
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !10655, metadata !DIExpression()), !dbg !10656
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10657
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10658
  store %struct.rtx_def* %1, %struct.rtx_def** %a, align 8, !dbg !10656
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b, metadata !10659, metadata !DIExpression()), !dbg !10660
  %2 = load i8*, i8** %y.addr, align 8, !dbg !10661
  %3 = bitcast i8* %2 to %struct.rtx_def*, !dbg !10662
  store %struct.rtx_def* %3, %struct.rtx_def** %b, align 8, !dbg !10660
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10663
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !10663
  %bf.load = load i32, i32* %5, align 8, !dbg !10663
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10663
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10663
  %6 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10665
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !10665
  %bf.load1 = load i32, i32* %7, align 8, !dbg !10665
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !10665
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !10665
  %cmp = icmp ne i32 %bf.clear, %bf.clear3, !dbg !10666
  br i1 %cmp, label %if.then, label %if.end, !dbg !10667

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10668
  br label %return, !dbg !10668

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10669
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !10669
  %bf.load4 = load i32, i32* %9, align 8, !dbg !10669
  %bf.lshr5 = lshr i32 %bf.load4, 16, !dbg !10669
  %bf.clear6 = and i32 %bf.lshr5, 255, !dbg !10669
  %cmp7 = icmp eq i32 %bf.clear6, 0, !dbg !10671
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !10672

if.then8:                                         ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10673
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !10673
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10673
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10673
  %11 = load i64, i64* %arrayidx, align 8, !dbg !10673
  %12 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10674
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !10674
  %hwint10 = bitcast %union.u* %u9 to [1 x i64]*, !dbg !10674
  %arrayidx11 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint10, i64 0, i64 0, !dbg !10674
  %13 = load i64, i64* %arrayidx11, align 8, !dbg !10674
  %cmp12 = icmp eq i64 %11, %13, !dbg !10675
  br i1 %cmp12, label %land.rhs, label %land.end, !dbg !10676

land.rhs:                                         ; preds = %if.then8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10677
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !10677
  %hwint14 = bitcast %union.u* %u13 to [1 x i64]*, !dbg !10677
  %arrayidx15 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint14, i64 0, i64 1, !dbg !10677
  %15 = load i64, i64* %arrayidx15, align 8, !dbg !10677
  %16 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10678
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !10678
  %hwint17 = bitcast %union.u* %u16 to [1 x i64]*, !dbg !10678
  %arrayidx18 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint17, i64 0, i64 1, !dbg !10678
  %17 = load i64, i64* %arrayidx18, align 8, !dbg !10678
  %cmp19 = icmp eq i64 %15, %17, !dbg !10679
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then8
  %18 = phi i1 [ false, %if.then8 ], [ %cmp19, %land.rhs ], !dbg !10680
  %land.ext = zext i1 %18 to i32, !dbg !10676
  store i32 %land.ext, i32* %retval, align 4, !dbg !10681
  br label %return, !dbg !10681

if.else:                                          ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10682
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !10682
  %rv = bitcast %union.u* %u20 to %struct.real_value*, !dbg !10682
  %20 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10683
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !10683
  %rv22 = bitcast %union.u* %u21 to %struct.real_value*, !dbg !10683
  %call = call zeroext i8 @real_identical(%struct.real_value* %rv, %struct.real_value* %rv22), !dbg !10684
  %conv = zext i8 %call to i32, !dbg !10684
  store i32 %conv, i32* %retval, align 4, !dbg !10685
  br label %return, !dbg !10685

return:                                           ; preds = %if.else, %land.end, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !10686
  ret i32 %21, !dbg !10686
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_fixed_htab_hash(i8* %x) #0 !dbg !10687 {
entry:
  %x.addr = alloca i8*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %h = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10688, metadata !DIExpression()), !dbg !10689
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !10690, metadata !DIExpression()), !dbg !10691
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10692
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10693
  store %struct.rtx_def* %1, %struct.rtx_def** %value, align 8, !dbg !10691
  call void @llvm.dbg.declare(metadata i32* %h, metadata !10694, metadata !DIExpression()), !dbg !10695
  %2 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10696
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10696
  %fv = bitcast %union.u* %u to %struct.fixed_value*, !dbg !10696
  %call = call i32 @fixed_hash(%struct.fixed_value* %fv), !dbg !10697
  store i32 %call, i32* %h, align 4, !dbg !10698
  %3 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !10699
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !10699
  %bf.load = load i32, i32* %4, align 8, !dbg !10699
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10699
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10699
  %5 = load i32, i32* %h, align 4, !dbg !10700
  %xor = xor i32 %5, %bf.clear, !dbg !10700
  store i32 %xor, i32* %h, align 4, !dbg !10700
  %6 = load i32, i32* %h, align 4, !dbg !10701
  ret i32 %6, !dbg !10702
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_fixed_htab_eq(i8* %x, i8* %y) #0 !dbg !10703 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.rtx_def*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10704, metadata !DIExpression()), !dbg !10705
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !10706, metadata !DIExpression()), !dbg !10707
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !10708, metadata !DIExpression()), !dbg !10709
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10710
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !10711
  store %struct.rtx_def* %1, %struct.rtx_def** %a, align 8, !dbg !10709
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b, metadata !10712, metadata !DIExpression()), !dbg !10713
  %2 = load i8*, i8** %y.addr, align 8, !dbg !10714
  %3 = bitcast i8* %2 to %struct.rtx_def*, !dbg !10715
  store %struct.rtx_def* %3, %struct.rtx_def** %b, align 8, !dbg !10713
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10716
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !10716
  %bf.load = load i32, i32* %5, align 8, !dbg !10716
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10716
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10716
  %6 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10718
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !10718
  %bf.load1 = load i32, i32* %7, align 8, !dbg !10718
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !10718
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !10718
  %cmp = icmp ne i32 %bf.clear, %bf.clear3, !dbg !10719
  br i1 %cmp, label %if.then, label %if.end, !dbg !10720

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10721
  br label %return, !dbg !10721

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !10722
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10722
  %fv = bitcast %union.u* %u to %struct.fixed_value*, !dbg !10722
  %9 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !10723
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !10723
  %fv5 = bitcast %union.u* %u4 to %struct.fixed_value*, !dbg !10723
  %call = call zeroext i8 @fixed_identical(%struct.fixed_value* %fv, %struct.fixed_value* %fv5), !dbg !10724
  %conv = zext i8 %call to i32, !dbg !10724
  store i32 %conv, i32* %retval, align 4, !dbg !10725
  br label %return, !dbg !10725

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !10726
  ret i32 %10, !dbg !10726
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_attrs_htab_hash(i8* %x) #0 !dbg !10727 {
entry:
  %x.addr = alloca i8*, align 8
  %p = alloca %struct.mem_attrs*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10728, metadata !DIExpression()), !dbg !10729
  call void @llvm.dbg.declare(metadata %struct.mem_attrs** %p, metadata !10730, metadata !DIExpression()), !dbg !10732
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10733
  %1 = bitcast i8* %0 to %struct.mem_attrs*, !dbg !10734
  store %struct.mem_attrs* %1, %struct.mem_attrs** %p, align 8, !dbg !10732
  %2 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10735
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %2, i32 0, i32 3, !dbg !10736
  %3 = load i32, i32* %alias, align 8, !dbg !10736
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10737
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %4, i32 0, i32 4, !dbg !10738
  %5 = load i32, i32* %align, align 4, !dbg !10738
  %mul = mul i32 %5, 1000, !dbg !10739
  %xor = xor i32 %3, %mul, !dbg !10740
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10741
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %6, i32 0, i32 5, !dbg !10742
  %7 = load i8, i8* %addrspace, align 8, !dbg !10742
  %conv = zext i8 %7 to i32, !dbg !10741
  %mul1 = mul nsw i32 %conv, 4000, !dbg !10743
  %xor2 = xor i32 %xor, %mul1, !dbg !10744
  %conv3 = zext i32 %xor2 to i64, !dbg !10735
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10745
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 1, !dbg !10746
  %9 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !10746
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !10745
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10745

cond.true:                                        ; preds = %entry
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10747
  %offset4 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %10, i32 0, i32 1, !dbg !10747
  %11 = load %struct.rtx_def*, %struct.rtx_def** %offset4, align 8, !dbg !10747
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !10747
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10747
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10747
  %12 = load i64, i64* %arrayidx, align 8, !dbg !10747
  br label %cond.end, !dbg !10745

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10745

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ 0, %cond.false ], !dbg !10745
  %mul5 = mul nsw i64 %cond, 50000, !dbg !10748
  %xor6 = xor i64 %conv3, %mul5, !dbg !10749
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10750
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 2, !dbg !10751
  %14 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !10751
  %tobool7 = icmp ne %struct.rtx_def* %14, null, !dbg !10750
  br i1 %tobool7, label %cond.true8, label %cond.false13, !dbg !10750

cond.true8:                                       ; preds = %cond.end
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10752
  %size9 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %15, i32 0, i32 2, !dbg !10752
  %16 = load %struct.rtx_def*, %struct.rtx_def** %size9, align 8, !dbg !10752
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !10752
  %hwint11 = bitcast %union.u* %u10 to [1 x i64]*, !dbg !10752
  %arrayidx12 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint11, i64 0, i64 0, !dbg !10752
  %17 = load i64, i64* %arrayidx12, align 8, !dbg !10752
  br label %cond.end14, !dbg !10750

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !10750

cond.end14:                                       ; preds = %cond.false13, %cond.true8
  %cond15 = phi i64 [ %17, %cond.true8 ], [ 0, %cond.false13 ], !dbg !10750
  %mul16 = mul nsw i64 %cond15, 2500000, !dbg !10753
  %xor17 = xor i64 %xor6, %mul16, !dbg !10754
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10755
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 0, !dbg !10756
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10756
  %call = call i32 @iterative_hash_expr(%union.tree_node* %19, i32 0), !dbg !10757
  %conv18 = zext i32 %call to i64, !dbg !10758
  %xor19 = xor i64 %xor17, %conv18, !dbg !10759
  %conv20 = trunc i64 %xor19 to i32, !dbg !10760
  ret i32 %conv20, !dbg !10761
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_attrs_htab_eq(i8* %x, i8* %y) #0 !dbg !10762 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %p = alloca %struct.mem_attrs*, align 8
  %q = alloca %struct.mem_attrs*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10763, metadata !DIExpression()), !dbg !10764
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !10765, metadata !DIExpression()), !dbg !10766
  call void @llvm.dbg.declare(metadata %struct.mem_attrs** %p, metadata !10767, metadata !DIExpression()), !dbg !10768
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10769
  %1 = bitcast i8* %0 to %struct.mem_attrs*, !dbg !10770
  store %struct.mem_attrs* %1, %struct.mem_attrs** %p, align 8, !dbg !10768
  call void @llvm.dbg.declare(metadata %struct.mem_attrs** %q, metadata !10771, metadata !DIExpression()), !dbg !10772
  %2 = load i8*, i8** %y.addr, align 8, !dbg !10773
  %3 = bitcast i8* %2 to %struct.mem_attrs*, !dbg !10774
  store %struct.mem_attrs* %3, %struct.mem_attrs** %q, align 8, !dbg !10772
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10775
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %4, i32 0, i32 3, !dbg !10776
  %5 = load i32, i32* %alias, align 8, !dbg !10776
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10777
  %alias1 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %6, i32 0, i32 3, !dbg !10778
  %7 = load i32, i32* %alias1, align 8, !dbg !10778
  %cmp = icmp eq i32 %5, %7, !dbg !10779
  br i1 %cmp, label %land.lhs.true, label %land.end28, !dbg !10780

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10781
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 1, !dbg !10782
  %9 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !10782
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10783
  %offset2 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %10, i32 0, i32 1, !dbg !10784
  %11 = load %struct.rtx_def*, %struct.rtx_def** %offset2, align 8, !dbg !10784
  %cmp3 = icmp eq %struct.rtx_def* %9, %11, !dbg !10785
  br i1 %cmp3, label %land.lhs.true4, label %land.end28, !dbg !10786

land.lhs.true4:                                   ; preds = %land.lhs.true
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10787
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %12, i32 0, i32 2, !dbg !10788
  %13 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !10788
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10789
  %size5 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 2, !dbg !10790
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size5, align 8, !dbg !10790
  %cmp6 = icmp eq %struct.rtx_def* %13, %15, !dbg !10791
  br i1 %cmp6, label %land.lhs.true7, label %land.end28, !dbg !10792

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10793
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %16, i32 0, i32 4, !dbg !10794
  %17 = load i32, i32* %align, align 4, !dbg !10794
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10795
  %align8 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 4, !dbg !10796
  %19 = load i32, i32* %align8, align 4, !dbg !10796
  %cmp9 = icmp eq i32 %17, %19, !dbg !10797
  br i1 %cmp9, label %land.lhs.true10, label %land.end28, !dbg !10798

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10799
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %20, i32 0, i32 5, !dbg !10800
  %21 = load i8, i8* %addrspace, align 8, !dbg !10800
  %conv = zext i8 %21 to i32, !dbg !10799
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10801
  %addrspace11 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 5, !dbg !10802
  %23 = load i8, i8* %addrspace11, align 8, !dbg !10802
  %conv12 = zext i8 %23 to i32, !dbg !10801
  %cmp13 = icmp eq i32 %conv, %conv12, !dbg !10803
  br i1 %cmp13, label %land.rhs, label %land.end28, !dbg !10804

land.rhs:                                         ; preds = %land.lhs.true10
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10805
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %24, i32 0, i32 0, !dbg !10806
  %25 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10806
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10807
  %expr15 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %26, i32 0, i32 0, !dbg !10808
  %27 = load %union.tree_node*, %union.tree_node** %expr15, align 8, !dbg !10808
  %cmp16 = icmp eq %union.tree_node* %25, %27, !dbg !10809
  br i1 %cmp16, label %lor.end, label %lor.rhs, !dbg !10810

lor.rhs:                                          ; preds = %land.rhs
  %28 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10811
  %expr18 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %28, i32 0, i32 0, !dbg !10812
  %29 = load %union.tree_node*, %union.tree_node** %expr18, align 8, !dbg !10812
  %cmp19 = icmp ne %union.tree_node* %29, null, !dbg !10813
  br i1 %cmp19, label %land.lhs.true21, label %land.end, !dbg !10814

land.lhs.true21:                                  ; preds = %lor.rhs
  %30 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10815
  %expr22 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %30, i32 0, i32 0, !dbg !10816
  %31 = load %union.tree_node*, %union.tree_node** %expr22, align 8, !dbg !10816
  %cmp23 = icmp ne %union.tree_node* %31, null, !dbg !10817
  br i1 %cmp23, label %land.rhs25, label %land.end, !dbg !10818

land.rhs25:                                       ; preds = %land.lhs.true21
  %32 = load %struct.mem_attrs*, %struct.mem_attrs** %p, align 8, !dbg !10819
  %expr26 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %32, i32 0, i32 0, !dbg !10820
  %33 = load %union.tree_node*, %union.tree_node** %expr26, align 8, !dbg !10820
  %34 = load %struct.mem_attrs*, %struct.mem_attrs** %q, align 8, !dbg !10821
  %expr27 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %34, i32 0, i32 0, !dbg !10822
  %35 = load %union.tree_node*, %union.tree_node** %expr27, align 8, !dbg !10822
  %call = call i32 @operand_equal_p(%union.tree_node* %33, %union.tree_node* %35, i32 0), !dbg !10823
  %tobool = icmp ne i32 %call, 0, !dbg !10818
  br label %land.end

land.end:                                         ; preds = %land.rhs25, %land.lhs.true21, %lor.rhs
  %36 = phi i1 [ false, %land.lhs.true21 ], [ false, %lor.rhs ], [ %tobool, %land.rhs25 ], !dbg !10824
  br label %lor.end, !dbg !10810

lor.end:                                          ; preds = %land.end, %land.rhs
  %37 = phi i1 [ true, %land.rhs ], [ %36, %land.end ]
  br label %land.end28

land.end28:                                       ; preds = %lor.end, %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %entry
  %38 = phi i1 [ false, %land.lhs.true10 ], [ false, %land.lhs.true7 ], [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %entry ], [ %37, %lor.end ], !dbg !10824
  %land.ext = zext i1 %38 to i32, !dbg !10804
  ret i32 %land.ext, !dbg !10825
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @reg_attrs_htab_hash(i8* %x) #0 !dbg !10826 {
entry:
  %x.addr = alloca i8*, align 8
  %p = alloca %struct.reg_attrs*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  call void @llvm.dbg.declare(metadata %struct.reg_attrs** %p, metadata !10829, metadata !DIExpression()), !dbg !10831
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10832
  %1 = bitcast i8* %0 to %struct.reg_attrs*, !dbg !10833
  store %struct.reg_attrs* %1, %struct.reg_attrs** %p, align 8, !dbg !10831
  %2 = load %struct.reg_attrs*, %struct.reg_attrs** %p, align 8, !dbg !10834
  %offset = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %2, i32 0, i32 1, !dbg !10835
  %3 = load i64, i64* %offset, align 8, !dbg !10835
  %mul = mul nsw i64 %3, 1000, !dbg !10836
  %4 = load %struct.reg_attrs*, %struct.reg_attrs** %p, align 8, !dbg !10837
  %decl = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %4, i32 0, i32 0, !dbg !10838
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10838
  %6 = ptrtoint %union.tree_node* %5 to i64, !dbg !10839
  %xor = xor i64 %mul, %6, !dbg !10840
  %conv = trunc i64 %xor to i32, !dbg !10841
  ret i32 %conv, !dbg !10842
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @reg_attrs_htab_eq(i8* %x, i8* %y) #0 !dbg !10843 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %p = alloca %struct.reg_attrs*, align 8
  %q = alloca %struct.reg_attrs*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !10844, metadata !DIExpression()), !dbg !10845
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !10846, metadata !DIExpression()), !dbg !10847
  call void @llvm.dbg.declare(metadata %struct.reg_attrs** %p, metadata !10848, metadata !DIExpression()), !dbg !10849
  %0 = load i8*, i8** %x.addr, align 8, !dbg !10850
  %1 = bitcast i8* %0 to %struct.reg_attrs*, !dbg !10851
  store %struct.reg_attrs* %1, %struct.reg_attrs** %p, align 8, !dbg !10849
  call void @llvm.dbg.declare(metadata %struct.reg_attrs** %q, metadata !10852, metadata !DIExpression()), !dbg !10853
  %2 = load i8*, i8** %y.addr, align 8, !dbg !10854
  %3 = bitcast i8* %2 to %struct.reg_attrs*, !dbg !10855
  store %struct.reg_attrs* %3, %struct.reg_attrs** %q, align 8, !dbg !10853
  %4 = load %struct.reg_attrs*, %struct.reg_attrs** %p, align 8, !dbg !10856
  %decl = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %4, i32 0, i32 0, !dbg !10857
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10857
  %6 = load %struct.reg_attrs*, %struct.reg_attrs** %q, align 8, !dbg !10858
  %decl1 = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %6, i32 0, i32 0, !dbg !10859
  %7 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !10859
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !10860
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10861

land.rhs:                                         ; preds = %entry
  %8 = load %struct.reg_attrs*, %struct.reg_attrs** %p, align 8, !dbg !10862
  %offset = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %8, i32 0, i32 1, !dbg !10863
  %9 = load i64, i64* %offset, align 8, !dbg !10863
  %10 = load %struct.reg_attrs*, %struct.reg_attrs** %q, align 8, !dbg !10864
  %offset2 = getelementptr inbounds %struct.reg_attrs, %struct.reg_attrs* %10, i32 0, i32 1, !dbg !10865
  %11 = load i64, i64* %offset2, align 8, !dbg !10865
  %cmp3 = icmp eq i64 %9, %11, !dbg !10866
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !10867
  %land.ext = zext i1 %12 to i32, !dbg !10861
  ret i32 %land.ext, !dbg !10868
}

declare dso_local void @real_from_integer(%struct.real_value*, i32, i64, i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @gen_const_vector(i32 %mode, i32 %constant) #0 !dbg !10869 {
entry:
  %mode.addr = alloca i32, align 4
  %constant.addr = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.rtvec_def*, align 8
  %units = alloca i32, align 4
  %i = alloca i32, align 4
  %inner = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10870, metadata !DIExpression()), !dbg !10871
  store i32 %constant, i32* %constant.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %constant.addr, metadata !10872, metadata !DIExpression()), !dbg !10873
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !10874, metadata !DIExpression()), !dbg !10875
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %v, metadata !10876, metadata !DIExpression()), !dbg !10877
  call void @llvm.dbg.declare(metadata i32* %units, metadata !10878, metadata !DIExpression()), !dbg !10879
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10880, metadata !DIExpression()), !dbg !10881
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !10882, metadata !DIExpression()), !dbg !10883
  %0 = load i32, i32* %mode.addr, align 4, !dbg !10884
  %idxprom = zext i32 %0 to i64, !dbg !10884
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom, !dbg !10884
  %1 = load i8, i8* %arrayidx, align 1, !dbg !10884
  %conv = zext i8 %1 to i32, !dbg !10884
  store i32 %conv, i32* %units, align 4, !dbg !10885
  %2 = load i32, i32* %mode.addr, align 4, !dbg !10886
  %idxprom1 = zext i32 %2 to i64, !dbg !10886
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1, !dbg !10886
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !10886
  %conv3 = zext i8 %3 to i32, !dbg !10886
  store i32 %conv3, i32* %inner, align 4, !dbg !10887
  %4 = load i32, i32* %inner, align 4, !dbg !10888
  %idxprom4 = zext i32 %4 to i64, !dbg !10888
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom4, !dbg !10888
  %5 = load i8, i8* %arrayidx5, align 1, !dbg !10888
  %conv6 = zext i8 %5 to i32, !dbg !10888
  %cmp = icmp eq i32 %conv6, 9, !dbg !10888
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10888

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5626, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10888
  br label %cond.end, !dbg !10888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10888
  %6 = load i32, i32* %units, align 4, !dbg !10889
  %call = call %struct.rtvec_def* @rtvec_alloc(i32 %6), !dbg !10890
  store %struct.rtvec_def* %call, %struct.rtvec_def** %v, align 8, !dbg !10891
  %7 = load i32, i32* %constant.addr, align 4, !dbg !10892
  %idxprom8 = sext i32 %7 to i64, !dbg !10892
  %arrayidx9 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom8, !dbg !10892
  %8 = load i32, i32* %inner, align 4, !dbg !10892
  %idxprom10 = sext i32 %8 to i64, !dbg !10892
  %arrayidx11 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx9, i64 0, i64 %idxprom10, !dbg !10892
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8, !dbg !10892
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !10892
  br i1 %tobool, label %cond.false13, label %cond.true12, !dbg !10892

cond.true12:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5632, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10892
  br label %cond.end14, !dbg !10892

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !10892

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !10892
  store i32 0, i32* %i, align 4, !dbg !10893
  br label %for.cond, !dbg !10895

for.cond:                                         ; preds = %for.inc, %cond.end14
  %10 = load i32, i32* %i, align 4, !dbg !10896
  %11 = load i32, i32* %units, align 4, !dbg !10898
  %cmp16 = icmp slt i32 %10, %11, !dbg !10899
  br i1 %cmp16, label %for.body, label %for.end, !dbg !10900

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %constant.addr, align 4, !dbg !10901
  %idxprom18 = sext i32 %12 to i64, !dbg !10902
  %arrayidx19 = getelementptr inbounds [3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %idxprom18, !dbg !10902
  %13 = load i32, i32* %inner, align 4, !dbg !10903
  %idxprom20 = sext i32 %13 to i64, !dbg !10902
  %arrayidx21 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx19, i64 0, i64 %idxprom20, !dbg !10902
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8, !dbg !10902
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %v, align 8, !dbg !10904
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 1, !dbg !10904
  %16 = load i32, i32* %i, align 4, !dbg !10904
  %idxprom22 = sext i32 %16 to i64, !dbg !10904
  %arrayidx23 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom22, !dbg !10904
  store %struct.rtx_def* %14, %struct.rtx_def** %arrayidx23, align 8, !dbg !10905
  br label %for.inc, !dbg !10904

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !10906
  %inc = add nsw i32 %17, 1, !dbg !10906
  store i32 %inc, i32* %i, align 4, !dbg !10906
  br label %for.cond, !dbg !10907, !llvm.loop !10908

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %mode.addr, align 4, !dbg !10910
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %v, align 8, !dbg !10910
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_E_stat(i32 33, i32 %18, %struct.rtvec_def* %19), !dbg !10910
  store %struct.rtx_def* %call24, %struct.rtx_def** %tem, align 8, !dbg !10911
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10912
  ret %struct.rtx_def* %20, !dbg !10913
}

declare dso_local void @lshift_double(i64, i64, i64, i32, i64*, i64*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_copy_of_insn_after(%struct.rtx_def* %insn, %struct.rtx_def* %after) #0 !dbg !10914 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10915, metadata !DIExpression()), !dbg !10916
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !10917, metadata !DIExpression()), !dbg !10918
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !10919, metadata !DIExpression()), !dbg !10920
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !10921, metadata !DIExpression()), !dbg !10922
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10923
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !10923
  %bf.load = load i32, i32* %1, align 8, !dbg !10923
  %bf.clear = and i32 %bf.load, 65535, !dbg !10923
  switch i32 %bf.clear, label %sw.default [
    i32 8, label %sw.bb
    i32 9, label %sw.bb2
    i32 7, label %sw.bb9
    i32 10, label %sw.bb16
  ], !dbg !10924

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10925
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10925
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10925
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10925
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10925
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10925
  %call = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %3), !dbg !10927
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !10928
  %call1 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %4), !dbg !10929
  store %struct.rtx_def* %call1, %struct.rtx_def** %new_rtx, align 8, !dbg !10930
  br label %sw.epilog, !dbg !10931

sw.bb2:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10932
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !10932
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !10932
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 5, !dbg !10932
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !10932
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !10932
  %call7 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %6), !dbg !10933
  %7 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !10934
  %call8 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call7, %struct.rtx_def* %7), !dbg !10935
  store %struct.rtx_def* %call8, %struct.rtx_def** %new_rtx, align 8, !dbg !10936
  br label %sw.epilog, !dbg !10937

sw.bb9:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10938
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10938
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !10938
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 5, !dbg !10938
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !10938
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !10938
  %call14 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %9), !dbg !10939
  %10 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !10940
  %call15 = call %struct.rtx_def* @emit_debug_insn_after(%struct.rtx_def* %call14, %struct.rtx_def* %10), !dbg !10941
  store %struct.rtx_def* %call15, %struct.rtx_def** %new_rtx, align 8, !dbg !10942
  br label %sw.epilog, !dbg !10943

sw.bb16:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10944
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !10944
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !10944
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 5, !dbg !10944
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !10944
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !10944
  %call21 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %12), !dbg !10945
  %13 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !10946
  %call22 = call %struct.rtx_def* @emit_call_insn_after(%struct.rtx_def* %call21, %struct.rtx_def* %13), !dbg !10947
  store %struct.rtx_def* %call22, %struct.rtx_def** %new_rtx, align 8, !dbg !10948
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10949
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !10949
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !10949
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 8, !dbg !10949
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !10949
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !10949
  %tobool = icmp ne %struct.rtx_def* %15, null, !dbg !10949
  br i1 %tobool, label %if.then, label %if.end, !dbg !10951

if.then:                                          ; preds = %sw.bb16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10952
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !10952
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !10952
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 8, !dbg !10952
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !10952
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !10952
  %call31 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %17), !dbg !10953
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10954
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !10954
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !10954
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 8, !dbg !10954
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !10954
  store %struct.rtx_def* %call31, %struct.rtx_def** %rt_rtx35, align 8, !dbg !10955
  br label %if.end, !dbg !10954

if.end:                                           ; preds = %if.then, %sw.bb16
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10956
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !10956
  %bf.load36 = load i32, i32* %20, align 8, !dbg !10956
  %bf.lshr = lshr i32 %bf.load36, 24, !dbg !10956
  %bf.clear37 = and i32 %bf.lshr, 1, !dbg !10956
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10957
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !10957
  %bf.load38 = load i32, i32* %22, align 8, !dbg !10958
  %bf.value = and i32 %bf.clear37, 1, !dbg !10958
  %bf.shl = shl i32 %bf.value, 24, !dbg !10958
  %bf.clear39 = and i32 %bf.load38, -16777217, !dbg !10958
  %bf.set = or i32 %bf.clear39, %bf.shl, !dbg !10958
  store i32 %bf.set, i32* %22, align 8, !dbg !10958
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10959
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !10959
  %bf.load40 = load i32, i32* %24, align 8, !dbg !10959
  %bf.lshr41 = lshr i32 %bf.load40, 26, !dbg !10959
  %bf.clear42 = and i32 %bf.lshr41, 1, !dbg !10959
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10960
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !10960
  %bf.load43 = load i32, i32* %26, align 8, !dbg !10961
  %bf.value44 = and i32 %bf.clear42, 1, !dbg !10961
  %bf.shl45 = shl i32 %bf.value44, 26, !dbg !10961
  %bf.clear46 = and i32 %bf.load43, -67108865, !dbg !10961
  %bf.set47 = or i32 %bf.clear46, %bf.shl45, !dbg !10961
  store i32 %bf.set47, i32* %26, align 8, !dbg !10961
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10962
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !10962
  %bf.load48 = load i32, i32* %28, align 8, !dbg !10962
  %bf.lshr49 = lshr i32 %bf.load48, 31, !dbg !10962
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10963
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !10963
  %bf.load50 = load i32, i32* %30, align 8, !dbg !10964
  %bf.value51 = and i32 %bf.lshr49, 1, !dbg !10964
  %bf.shl52 = shl i32 %bf.value51, 31, !dbg !10964
  %bf.clear53 = and i32 %bf.load50, 2147483647, !dbg !10964
  %bf.set54 = or i32 %bf.clear53, %bf.shl52, !dbg !10964
  store i32 %bf.set54, i32* %30, align 8, !dbg !10964
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10965
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !10965
  %bf.load55 = load i32, i32* %32, align 8, !dbg !10965
  %bf.lshr56 = lshr i32 %bf.load55, 25, !dbg !10965
  %bf.clear57 = and i32 %bf.lshr56, 1, !dbg !10965
  %33 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10966
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !10966
  %bf.load58 = load i32, i32* %34, align 8, !dbg !10967
  %bf.value59 = and i32 %bf.clear57, 1, !dbg !10967
  %bf.shl60 = shl i32 %bf.value59, 25, !dbg !10967
  %bf.clear61 = and i32 %bf.load58, -33554433, !dbg !10967
  %bf.set62 = or i32 %bf.clear61, %bf.shl60, !dbg !10967
  store i32 %bf.set62, i32* %34, align 8, !dbg !10967
  br label %sw.epilog, !dbg !10968

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6007, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10969
  br label %sw.epilog, !dbg !10970

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb9, %sw.bb2, %sw.bb
  %35 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10971
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !10971
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !10971
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 5, !dbg !10971
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !10971
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !10971
  %37 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10972
  call void @mark_jump_label(%struct.rtx_def* %36, %struct.rtx_def* %37, i32 0), !dbg !10973
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10974
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !10974
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !10974
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 4, !dbg !10974
  %rt_int = bitcast %union.rtunion_def* %arrayidx69 to i32*, !dbg !10974
  %39 = load i32, i32* %rt_int, align 8, !dbg !10974
  %40 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10975
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !10975
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !10975
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 4, !dbg !10975
  %rt_int73 = bitcast %union.rtunion_def* %arrayidx72 to i32*, !dbg !10975
  store i32 %39, i32* %rt_int73, align 8, !dbg !10976
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10977
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !10977
  %bf.load74 = load i32, i32* %42, align 8, !dbg !10977
  %bf.lshr75 = lshr i32 %bf.load74, 30, !dbg !10977
  %bf.clear76 = and i32 %bf.lshr75, 1, !dbg !10977
  %43 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10978
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !10978
  %bf.load77 = load i32, i32* %44, align 8, !dbg !10979
  %bf.value78 = and i32 %bf.clear76, 1, !dbg !10979
  %bf.shl79 = shl i32 %bf.value78, 30, !dbg !10979
  %bf.clear80 = and i32 %bf.load77, -1073741825, !dbg !10979
  %bf.set81 = or i32 %bf.clear80, %bf.shl79, !dbg !10979
  store i32 %bf.set81, i32* %44, align 8, !dbg !10979
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10980
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !10980
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !10980
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 7, !dbg !10980
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !10980
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !10980
  store %struct.rtx_def* %46, %struct.rtx_def** %link, align 8, !dbg !10982
  br label %for.cond, !dbg !10983

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %47 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !10984
  %tobool86 = icmp ne %struct.rtx_def* %47, null, !dbg !10986
  br i1 %tobool86, label %for.body, label %for.end, !dbg !10986

for.body:                                         ; preds = %for.cond
  %48 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !10987
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !10987
  %bf.load87 = load i32, i32* %49, align 8, !dbg !10987
  %bf.lshr88 = lshr i32 %bf.load87, 16, !dbg !10987
  %bf.clear89 = and i32 %bf.lshr88, 255, !dbg !10987
  %cmp = icmp ne i32 %bf.clear89, 10, !dbg !10989
  br i1 %cmp, label %if.then90, label %if.end111, !dbg !10990

if.then90:                                        ; preds = %for.body
  %50 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !10991
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !10991
  %bf.load91 = load i32, i32* %51, align 8, !dbg !10991
  %bf.clear92 = and i32 %bf.load91, 65535, !dbg !10991
  %cmp93 = icmp eq i32 %bf.clear92, 3, !dbg !10994
  br i1 %cmp93, label %if.then94, label %if.else, !dbg !10995

if.then94:                                        ; preds = %if.then90
  %52 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10996
  %53 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !10997
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !10997
  %bf.load95 = load i32, i32* %54, align 8, !dbg !10997
  %bf.lshr96 = lshr i32 %bf.load95, 16, !dbg !10997
  %bf.clear97 = and i32 %bf.lshr96, 255, !dbg !10997
  %55 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !10998
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !10998
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !10998
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 0, !dbg !10998
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !10998
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx101, align 8, !dbg !10998
  %call102 = call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %56), !dbg !10999
  call void @add_reg_note(%struct.rtx_def* %52, i32 %bf.clear97, %struct.rtx_def* %call102), !dbg !11000
  br label %if.end110, !dbg !11000

if.else:                                          ; preds = %if.then90
  %57 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !11001
  %58 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !11002
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !11002
  %bf.load103 = load i32, i32* %59, align 8, !dbg !11002
  %bf.lshr104 = lshr i32 %bf.load103, 16, !dbg !11002
  %bf.clear105 = and i32 %bf.lshr104, 255, !dbg !11002
  %60 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !11003
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !11003
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !11003
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 0, !dbg !11003
  %rt_rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !11003
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx109, align 8, !dbg !11003
  call void @add_reg_note(%struct.rtx_def* %57, i32 %bf.clear105, %struct.rtx_def* %61), !dbg !11004
  br label %if.end110

if.end110:                                        ; preds = %if.else, %if.then94
  br label %if.end111, !dbg !11005

if.end111:                                        ; preds = %if.end110, %for.body
  br label %for.inc, !dbg !11006

for.inc:                                          ; preds = %if.end111
  %62 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !11007
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !11007
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !11007
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 1, !dbg !11007
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !11007
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx115, align 8, !dbg !11007
  store %struct.rtx_def* %63, %struct.rtx_def** %link, align 8, !dbg !11008
  br label %for.cond, !dbg !11009, !llvm.loop !11010

for.end:                                          ; preds = %for.cond
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11012
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !11012
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !11012
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 6, !dbg !11012
  %rt_int119 = bitcast %union.rtunion_def* %arrayidx118 to i32*, !dbg !11012
  %65 = load i32, i32* %rt_int119, align 8, !dbg !11012
  %66 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !11013
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !11013
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !11013
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 6, !dbg !11013
  %rt_int123 = bitcast %union.rtunion_def* %arrayidx122 to i32*, !dbg !11013
  store i32 %65, i32* %rt_int123, align 8, !dbg !11014
  %67 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !11015
  ret %struct.rtx_def* %67, !dbg !11016
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_hard_reg_clobber(i32 %mode, i32 %regno) #0 !dbg !11017 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11018, metadata !DIExpression()), !dbg !11019
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !11020, metadata !DIExpression()), !dbg !11021
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11022
  %idxprom = zext i32 %0 to i64, !dbg !11024
  %arrayidx = getelementptr inbounds [87 x [53 x %struct.rtx_def*]], [87 x [53 x %struct.rtx_def*]]* @hard_reg_clobbers, i64 0, i64 %idxprom, !dbg !11024
  %1 = load i32, i32* %regno.addr, align 4, !dbg !11025
  %idxprom1 = zext i32 %1 to i64, !dbg !11024
  %arrayidx2 = getelementptr inbounds [53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* %arrayidx, i64 0, i64 %idxprom1, !dbg !11024
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8, !dbg !11024
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !11024
  br i1 %tobool, label %if.then, label %if.else, !dbg !11026

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !11027
  %idxprom3 = zext i32 %3 to i64, !dbg !11028
  %arrayidx4 = getelementptr inbounds [87 x [53 x %struct.rtx_def*]], [87 x [53 x %struct.rtx_def*]]* @hard_reg_clobbers, i64 0, i64 %idxprom3, !dbg !11028
  %4 = load i32, i32* %regno.addr, align 4, !dbg !11029
  %idxprom5 = zext i32 %4 to i64, !dbg !11028
  %arrayidx6 = getelementptr inbounds [53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* %arrayidx4, i64 0, i64 %idxprom5, !dbg !11028
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !11028
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !11030
  br label %return, !dbg !11030

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %mode.addr, align 4, !dbg !11031
  %7 = load i32, i32* %regno.addr, align 4, !dbg !11031
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %6, i32 %7), !dbg !11031
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %call), !dbg !11031
  %8 = load i32, i32* %mode.addr, align 4, !dbg !11032
  %idxprom8 = zext i32 %8 to i64, !dbg !11033
  %arrayidx9 = getelementptr inbounds [87 x [53 x %struct.rtx_def*]], [87 x [53 x %struct.rtx_def*]]* @hard_reg_clobbers, i64 0, i64 %idxprom8, !dbg !11033
  %9 = load i32, i32* %regno.addr, align 4, !dbg !11034
  %idxprom10 = zext i32 %9 to i64, !dbg !11033
  %arrayidx11 = getelementptr inbounds [53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* %arrayidx9, i64 0, i64 %idxprom10, !dbg !11033
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx11, align 8, !dbg !11035
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !11036
  br label %return, !dbg !11036

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !11037
  ret %struct.rtx_def* %10, !dbg !11037
}

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

declare dso_local i32 @ggc_marked_p(i8*) #2

declare dso_local void @gt_ggc_mx_reg_attrs(i8*) #2

declare dso_local void @gt_pch_nx_reg_attrs(i8*) #2

declare dso_local void @gt_ggc_mx_mem_attrs(i8*) #2

declare dso_local void @gt_pch_nx_mem_attrs(i8*) #2

declare dso_local void @gt_ggc_m_P7rtx_def4htab(i8*) #2

declare dso_local void @gt_pch_n_P7rtx_def4htab(i8*) #2

declare dso_local void @gt_ggc_m_P9reg_attrs4htab(i8*) #2

declare dso_local void @gt_pch_n_P9reg_attrs4htab(i8*) #2

declare dso_local void @gt_ggc_m_P9mem_attrs4htab(i8*) #2

declare dso_local void @gt_pch_n_P9mem_attrs4htab(i8*) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

declare dso_local %struct.rtx_def* @memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local zeroext i8 @constant_address_p(%struct.rtx_def*) #2

declare dso_local i32 @real_hash(%struct.real_value*) #2

declare dso_local zeroext i8 @real_identical(%struct.real_value*, %struct.real_value*) #2

declare dso_local i32 @fixed_hash(%struct.fixed_value*) #2

declare dso_local zeroext i8 @fixed_identical(%struct.fixed_value*, %struct.fixed_value*) #2

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2522, !2523, !2524}
!llvm.ident = !{!2525}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "split_branch_probability", scope: !2, file: !3, line: 202, type: !1149, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1123, globals: !2190, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "emit-rtl.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !520, !525, !547, !561, !574, !708, !745, !752, !875, !882, !1058, !1073, !1089}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !378, line: 45, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519}
!380 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!387 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!388 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!389 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!390 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!391 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!392 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!393 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!394 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!395 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!396 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!398 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!399 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!400 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!401 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!402 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!403 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!404 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!405 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!406 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!407 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!408 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!409 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!410 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!411 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!412 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!413 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!414 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!415 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!416 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!417 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!418 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!419 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!420 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!421 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!422 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!423 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!424 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!425 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!426 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!427 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!428 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!429 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!430 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!431 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!432 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!433 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!434 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!435 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!436 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!437 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!438 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!439 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!440 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!441 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!442 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!443 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!444 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!445 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!446 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!447 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!448 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!449 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!450 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!451 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!452 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!453 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!454 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!455 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!456 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!457 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!458 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!459 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!460 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!461 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!462 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!463 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!464 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!465 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!466 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!467 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!468 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!469 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!470 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!471 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!472 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!473 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!474 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!475 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!476 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!477 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!478 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!479 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!480 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!481 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!482 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!483 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!484 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!485 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!486 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!487 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!488 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!489 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!490 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!491 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!492 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!493 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!494 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!495 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!496 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!497 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!498 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!499 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!500 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!501 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!502 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!505 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!506 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!507 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!508 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!509 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!510 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!511 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!512 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!513 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!514 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!515 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!516 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!517 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!518 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!519 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!520 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !521, line: 147, baseType: !7, size: 32, elements: !522)
!521 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!522 = !{!523, !524}
!523 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!524 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!525 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !526, line: 36, baseType: !7, size: 32, elements: !527)
!526 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!527 = !{!528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546}
!528 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!529 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!530 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!531 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!532 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!533 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!534 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!535 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!536 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!537 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!538 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!539 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!540 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!541 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!542 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!543 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!544 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!545 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!546 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!547 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !378, line: 1994, baseType: !7, size: 32, elements: !548)
!548 = !{!549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560}
!549 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!550 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!551 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!552 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!553 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!554 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!555 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!556 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!557 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!558 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!559 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!560 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!561 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !151, line: 58, baseType: !7, size: 32, elements: !562)
!562 = !{!563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573}
!563 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!564 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!565 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!566 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!567 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!568 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!569 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!570 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!571 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!572 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!573 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!574 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !151, line: 3410, baseType: !7, size: 32, elements: !575)
!575 = !{!576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707}
!576 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!602 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!603 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!604 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!708 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !151, line: 630, baseType: !7, size: 32, elements: !709)
!709 = !{!710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744}
!710 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!711 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!712 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!713 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!714 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!715 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!716 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!717 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!718 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!719 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!720 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!721 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!722 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!723 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!724 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!725 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!726 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!727 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!728 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!729 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!730 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!731 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!732 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!733 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!734 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!735 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!736 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!737 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!738 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!739 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!740 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!741 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!742 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!743 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!744 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!745 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !151, line: 4288, baseType: !7, size: 32, elements: !746)
!746 = !{!747, !748, !749, !750, !751}
!747 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!748 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!749 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!750 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!751 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!752 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !753, line: 82, baseType: !7, size: 32, elements: !754)
!753 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!754 = !{!755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874}
!755 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!760 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!761 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!762 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!763 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!764 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!765 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!766 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!767 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!768 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!769 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!770 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!771 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!772 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!773 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!774 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!775 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!776 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!777 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!778 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!779 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!780 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!781 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!782 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!783 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!784 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!785 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!786 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!787 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!788 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!789 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!790 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!791 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!792 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!793 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!794 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!795 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!796 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!797 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!798 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!799 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!800 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!801 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!802 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!803 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!804 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!805 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!806 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!807 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!808 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!809 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!810 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!811 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!812 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!813 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!814 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!815 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!816 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!817 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!818 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!819 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!820 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!821 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!822 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!823 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!824 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!825 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!826 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!827 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!828 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!829 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!830 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!831 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!832 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!833 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!834 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!835 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!836 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!837 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!838 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!839 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!840 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!841 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!842 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!843 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!844 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!845 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!846 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!847 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!848 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!849 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!850 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!851 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!852 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!853 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!854 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!855 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!856 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!857 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!858 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!859 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!860 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!861 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!862 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!863 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!864 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!865 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!866 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!867 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!868 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!869 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!870 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!871 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!872 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!873 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!874 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!875 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !876, line: 104, baseType: !7, size: 32, elements: !877)
!876 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!877 = !{!878, !879, !880, !881}
!878 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!879 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!880 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!881 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!882 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !883, line: 74, baseType: !7, size: 32, elements: !884)
!883 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!884 = !{!885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057}
!885 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!886 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!887 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!888 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!889 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!890 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!891 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!892 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!893 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!894 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!895 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!896 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!897 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!898 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!899 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!900 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!901 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!902 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!903 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!904 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!905 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!906 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!907 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!908 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!909 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!910 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!911 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!912 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!913 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!914 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!915 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!916 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!917 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!918 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!919 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!920 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!921 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!922 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!923 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!924 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!925 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!926 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!927 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!928 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!929 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!930 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!931 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!932 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!933 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!934 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!935 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!936 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!937 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!938 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!939 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!940 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!941 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!942 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!943 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!944 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!945 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!946 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!947 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!948 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!949 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!950 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!951 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!952 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!953 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!954 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!955 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!956 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!957 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!958 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!959 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!960 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!961 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!962 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!963 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!964 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!965 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!966 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!967 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!968 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!969 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!970 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!971 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!972 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!973 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!974 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!975 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!976 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!977 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!978 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!979 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!980 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!981 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!982 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!983 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!984 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!985 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!986 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!987 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!988 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!989 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!990 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!991 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!992 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!993 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!994 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!995 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!996 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!997 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!998 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!999 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!1000 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!1001 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!1002 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!1003 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!1004 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!1005 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!1006 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!1007 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!1008 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!1009 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!1010 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!1011 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!1012 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!1013 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!1014 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!1015 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!1016 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!1017 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!1018 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!1019 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!1020 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!1021 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!1022 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!1023 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!1024 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!1025 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!1026 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!1027 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!1028 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!1029 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!1030 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!1031 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!1032 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!1033 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!1034 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!1035 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!1036 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!1037 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!1038 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!1039 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!1040 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!1041 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!1042 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!1043 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!1044 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!1045 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!1046 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!1047 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!1048 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!1049 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!1050 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!1051 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!1052 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!1053 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!1054 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!1055 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!1056 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!1057 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!1058 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !378, line: 60, baseType: !7, size: 32, elements: !1059)
!1059 = !{!1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072}
!1060 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!1061 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!1062 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!1063 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!1064 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!1065 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!1066 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!1067 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!1068 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!1069 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!1070 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!1071 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!1072 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!1073 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !378, line: 956, baseType: !7, size: 32, elements: !1074)
!1074 = !{!1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088}
!1075 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!1076 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!1077 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!1078 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!1079 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!1080 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!1081 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!1082 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!1083 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!1084 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!1085 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!1086 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!1087 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!1088 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!1089 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !378, line: 836, baseType: !7, size: 32, elements: !1090)
!1090 = !{!1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122}
!1091 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!1092 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!1093 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!1094 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!1095 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!1096 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!1097 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!1098 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!1099 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!1100 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!1101 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!1102 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!1103 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!1104 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!1105 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!1106 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!1107 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!1108 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!1109 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!1110 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!1111 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!1112 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!1113 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!1114 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!1115 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!1116 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!1117 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!1118 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!1119 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!1120 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!1121 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!1122 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!1123 = !{!1124, !1125, !525, !2168, !7, !5, !377, !1157, !1222, !1237, !2169, !2170, !183, !1247, !1149, !1370, !1199, !1216, !1089, !2171, !2126, !2115, !2177, !2180, !2182, !2184, !2186, !1636, !2188}
!1124 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !521, line: 47, baseType: !7)
!1125 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1126, line: 50, baseType: !1127)
!1126 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64)
!1128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !378, line: 240, size: 384, elements: !1129)
!1129 = !{!1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140}
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1128, file: !378, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1128, file: !378, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1128, file: !378, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1128, file: !378, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1128, file: !378, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1128, file: !378, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1128, file: !378, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1128, file: !378, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1128, file: !378, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1128, file: !378, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1128, file: !378, line: 321, baseType: !1141, size: 320, offset: 64)
!1141 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !378, line: 315, size: 320, elements: !1142)
!1142 = !{!1143, !2135, !2137, !2166, !2167}
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1141, file: !378, line: 316, baseType: !1144, size: 64)
!1144 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1145, size: 64, elements: !1164)
!1145 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !378, line: 183, baseType: !1146)
!1146 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !378, line: 166, size: 64, elements: !1147)
!1147 = !{!1148, !1150, !1151, !1155, !1156, !1166, !1167, !1179, !1182, !1246, !2113, !2114, !2125, !2132}
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1146, file: !378, line: 168, baseType: !1149, size: 32)
!1149 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1146, file: !378, line: 169, baseType: !7, size: 32)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1146, file: !378, line: 170, baseType: !1152, size: 64)
!1152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1153, size: 64)
!1153 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1154)
!1154 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1146, file: !378, line: 171, baseType: !1125, size: 64)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1146, file: !378, line: 172, baseType: !1157, size: 64)
!1157 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1126, line: 53, baseType: !1158)
!1158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1159, size: 64)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !378, line: 359, size: 128, elements: !1160)
!1160 = !{!1161, !1162}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1159, file: !378, line: 360, baseType: !1149, size: 32)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1159, file: !378, line: 361, baseType: !1163, size: 64, offset: 64)
!1163 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 64, elements: !1164)
!1164 = !{!1165}
!1165 = !DISubrange(count: 1)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1146, file: !378, line: 173, baseType: !5, size: 32)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1146, file: !378, line: 174, baseType: !1168, size: 32)
!1168 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !378, line: 133, baseType: !1169)
!1169 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 115, size: 32, elements: !1170)
!1170 = !{!1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1169, file: !378, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1169, file: !378, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1169, file: !378, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1169, file: !378, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1169, file: !378, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1169, file: !378, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1169, file: !378, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1169, file: !378, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1146, file: !378, line: 175, baseType: !1180, size: 64)
!1180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1181, size: 64)
!1181 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !378, line: 175, flags: DIFlagFwdDecl)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1146, file: !378, line: 176, baseType: !1183, size: 64)
!1183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1184, size: 64)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1185, line: 75, size: 256, elements: !1186)
!1185 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1186 = !{!1187, !1202, !1203, !1204}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1184, file: !1185, line: 76, baseType: !1188, size: 64)
!1188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1189, size: 64)
!1189 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1185, line: 68, baseType: !1190)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1185, line: 63, size: 320, elements: !1191)
!1191 = !{!1192, !1194, !1195, !1196}
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1190, file: !1185, line: 64, baseType: !1193, size: 64)
!1193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1190, file: !1185, line: 65, baseType: !1193, size: 64, offset: 64)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1190, file: !1185, line: 66, baseType: !7, size: 32, offset: 128)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1190, file: !1185, line: 67, baseType: !1197, size: 128, offset: 192)
!1197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1198, size: 128, elements: !1200)
!1198 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1185, line: 29, baseType: !1199)
!1199 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1200 = !{!1201}
!1201 = !DISubrange(count: 2)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1184, file: !1185, line: 77, baseType: !1188, size: 64, offset: 64)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1184, file: !1185, line: 78, baseType: !7, size: 32, offset: 128)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1184, file: !1185, line: 79, baseType: !1205, size: 64, offset: 192)
!1205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1206, size: 64)
!1206 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1185, line: 49, baseType: !1207)
!1207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1185, line: 45, size: 832, elements: !1208)
!1208 = !{!1209, !1210, !1211}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1207, file: !1185, line: 46, baseType: !1193, size: 64)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1207, file: !1185, line: 47, baseType: !1183, size: 64, offset: 64)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1207, file: !1185, line: 48, baseType: !1212, size: 704, offset: 128)
!1212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1213, line: 164, size: 704, elements: !1214)
!1213 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1214 = !{!1215, !1217, !1228, !1229, !1230, !1231, !1232, !1233, !1238, !1242, !1243, !1244, !1245}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1212, file: !1213, line: 166, baseType: !1216, size: 64)
!1216 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1212, file: !1213, line: 167, baseType: !1218, size: 64, offset: 64)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1213, line: 157, size: 192, elements: !1220)
!1220 = !{!1221, !1223, !1224}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1219, file: !1213, line: 159, baseType: !1222, size: 64)
!1222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1154, size: 64)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1219, file: !1213, line: 160, baseType: !1218, size: 64, offset: 64)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1219, file: !1213, line: 161, baseType: !1225, size: 32, offset: 128)
!1225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1154, size: 32, elements: !1226)
!1226 = !{!1227}
!1227 = !DISubrange(count: 4)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1212, file: !1213, line: 168, baseType: !1222, size: 64, offset: 128)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1212, file: !1213, line: 169, baseType: !1222, size: 64, offset: 192)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1212, file: !1213, line: 170, baseType: !1222, size: 64, offset: 256)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1212, file: !1213, line: 171, baseType: !1216, size: 64, offset: 320)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1212, file: !1213, line: 172, baseType: !1149, size: 32, offset: 384)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1212, file: !1213, line: 176, baseType: !1234, size: 64, offset: 448)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DISubroutineType(types: !1236)
!1236 = !{!1218, !1237, !1216}
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1212, file: !1213, line: 177, baseType: !1239, size: 64, offset: 512)
!1239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1240, size: 64)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{null, !1237, !1218}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1212, file: !1213, line: 178, baseType: !1237, size: 64, offset: 576)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1212, file: !1213, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1212, file: !1213, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1212, file: !1213, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1146, file: !378, line: 177, baseType: !1247, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1126, line: 56, baseType: !1248)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1249 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !1250)
!1250 = !{!1251, !1284, !1290, !1301, !1320, !1331, !1336, !1343, !1349, !1363, !1375, !1413, !1418, !1446, !1454, !1455, !1460, !1469, !1475, !1480, !1484, !1488, !1737, !1786, !1792, !1799, !1806, !1832, !1857, !1874, !1886, !1908, !1923, !2095}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1249, file: !151, line: 3372, baseType: !1252, size: 64)
!1252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !1253)
!1253 = !{!1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1252, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1252, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1252, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1252, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1252, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1252, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1252, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1252, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1252, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1252, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1252, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1252, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1252, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1252, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1252, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1252, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1252, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1252, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1252, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1252, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1252, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1252, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1252, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1252, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1252, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1252, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1252, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1252, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1252, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1252, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1249, file: !151, line: 3373, baseType: !1285, size: 192)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !1286)
!1286 = !{!1287, !1288, !1289}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1285, file: !151, line: 403, baseType: !1252, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1285, file: !151, line: 404, baseType: !1247, size: 64, offset: 64)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1285, file: !151, line: 405, baseType: !1247, size: 64, offset: 128)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1249, file: !151, line: 3374, baseType: !1291, size: 320)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !1292)
!1292 = !{!1293, !1294}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1291, file: !151, line: 1385, baseType: !1285, size: 192)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1291, file: !151, line: 1386, baseType: !1295, size: 128, offset: 192)
!1295 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1296, line: 58, baseType: !1297)
!1296 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1297 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1296, line: 54, size: 128, elements: !1298)
!1298 = !{!1299, !1300}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1297, file: !1296, line: 56, baseType: !1199, size: 64)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1297, file: !1296, line: 57, baseType: !1216, size: 64, offset: 64)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1249, file: !151, line: 3375, baseType: !1302, size: 256)
!1302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !1303)
!1303 = !{!1304, !1305}
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1302, file: !151, line: 1398, baseType: !1285, size: 192)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1302, file: !151, line: 1399, baseType: !1306, size: 64, offset: 192)
!1306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1307, size: 64)
!1307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1308, line: 52, size: 256, elements: !1309)
!1308 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1309 = !{!1310, !1311, !1312, !1313, !1314, !1315, !1316}
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1307, file: !1308, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1307, file: !1308, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1307, file: !1308, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1307, file: !1308, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1307, file: !1308, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1307, file: !1308, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1307, file: !1308, line: 62, baseType: !1317, size: 192, offset: 64)
!1317 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1199, size: 192, elements: !1318)
!1318 = !{!1319}
!1319 = !DISubrange(count: 3)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1249, file: !151, line: 3376, baseType: !1321, size: 256)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !1322)
!1322 = !{!1323, !1324}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1321, file: !151, line: 1409, baseType: !1285, size: 192)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1321, file: !151, line: 1410, baseType: !1325, size: 64, offset: 192)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1327, line: 27, size: 192, elements: !1328)
!1327 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1328 = !{!1329, !1330}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1326, file: !1327, line: 29, baseType: !1295, size: 128)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1326, file: !1327, line: 30, baseType: !5, size: 32, offset: 128)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1249, file: !151, line: 3377, baseType: !1332, size: 256)
!1332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !1333)
!1333 = !{!1334, !1335}
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1332, file: !151, line: 1438, baseType: !1285, size: 192)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1332, file: !151, line: 1439, baseType: !1247, size: 64, offset: 192)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1249, file: !151, line: 3378, baseType: !1337, size: 256)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !1338)
!1338 = !{!1339, !1340, !1341}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1337, file: !151, line: 1419, baseType: !1285, size: 192)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1337, file: !151, line: 1420, baseType: !1149, size: 32, offset: 192)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1337, file: !151, line: 1421, baseType: !1342, size: 8, offset: 224)
!1342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1154, size: 8, elements: !1164)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1249, file: !151, line: 3379, baseType: !1344, size: 320)
!1344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !1345)
!1345 = !{!1346, !1347, !1348}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1344, file: !151, line: 1429, baseType: !1285, size: 192)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1344, file: !151, line: 1430, baseType: !1247, size: 64, offset: 192)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1344, file: !151, line: 1431, baseType: !1247, size: 64, offset: 256)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1249, file: !151, line: 3380, baseType: !1350, size: 320)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !1351)
!1351 = !{!1352, !1353}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1350, file: !151, line: 1461, baseType: !1285, size: 192)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1350, file: !151, line: 1462, baseType: !1354, size: 128, offset: 192)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1355, line: 31, size: 128, elements: !1356)
!1355 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1356 = !{!1357, !1361, !1362}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1354, file: !1355, line: 32, baseType: !1358, size: 64)
!1358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1359, size: 64)
!1359 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1360)
!1360 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1354, file: !1355, line: 33, baseType: !7, size: 32, offset: 64)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1354, file: !1355, line: 34, baseType: !7, size: 32, offset: 96)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1249, file: !151, line: 3381, baseType: !1364, size: 384)
!1364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !1365)
!1365 = !{!1366, !1367, !1372, !1373, !1374}
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1364, file: !151, line: 2508, baseType: !1285, size: 192)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1364, file: !151, line: 2509, baseType: !1368, size: 32, offset: 192)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1369, line: 58, baseType: !1370)
!1369 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1371, line: 44, baseType: !7)
!1371 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1364, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1364, file: !151, line: 2511, baseType: !1247, size: 64, offset: 256)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1364, file: !151, line: 2512, baseType: !1247, size: 64, offset: 320)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1249, file: !151, line: 3382, baseType: !1376, size: 896)
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !1377)
!1377 = !{!1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1376, file: !151, line: 2653, baseType: !1364, size: 384)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1376, file: !151, line: 2654, baseType: !1247, size: 64, offset: 384)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1376, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1376, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1376, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1376, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1376, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1376, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1376, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1376, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1376, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1376, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1376, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1376, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1376, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1376, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1376, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1376, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1376, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1376, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1376, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1376, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1376, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1376, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1376, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1376, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1376, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1376, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1376, file: !151, line: 2705, baseType: !1247, size: 64, offset: 576)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1376, file: !151, line: 2706, baseType: !1247, size: 64, offset: 640)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1376, file: !151, line: 2707, baseType: !1247, size: 64, offset: 704)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1376, file: !151, line: 2708, baseType: !1247, size: 64, offset: 768)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1376, file: !151, line: 2711, baseType: !1411, size: 64, offset: 832)
!1411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1412, size: 64)
!1412 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1249, file: !151, line: 3383, baseType: !1414, size: 960)
!1414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !1415)
!1415 = !{!1416, !1417}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1414, file: !151, line: 2757, baseType: !1376, size: 896)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1414, file: !151, line: 2758, baseType: !1125, size: 64, offset: 896)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1249, file: !151, line: 3384, baseType: !1419, size: 1472)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !1420)
!1420 = !{!1421, !1442, !1443, !1444, !1445}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1419, file: !151, line: 3115, baseType: !1422, size: 1216)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !1423)
!1423 = !{!1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1422, file: !151, line: 2985, baseType: !1414, size: 960)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1422, file: !151, line: 2986, baseType: !1247, size: 64, offset: 960)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1422, file: !151, line: 2987, baseType: !1247, size: 64, offset: 1024)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1422, file: !151, line: 2988, baseType: !1247, size: 64, offset: 1088)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1422, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1422, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1422, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1422, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1422, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1422, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1422, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1422, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1422, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1422, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1422, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1422, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1422, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1422, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1419, file: !151, line: 3117, baseType: !1247, size: 64, offset: 1216)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1419, file: !151, line: 3119, baseType: !1247, size: 64, offset: 1280)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1419, file: !151, line: 3121, baseType: !1247, size: 64, offset: 1344)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1419, file: !151, line: 3123, baseType: !1247, size: 64, offset: 1408)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1249, file: !151, line: 3385, baseType: !1447, size: 1088)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !1448)
!1448 = !{!1449, !1450, !1451}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1447, file: !151, line: 2875, baseType: !1414, size: 960)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1447, file: !151, line: 2876, baseType: !1125, size: 64, offset: 960)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1447, file: !151, line: 2877, baseType: !1452, size: 64, offset: 1024)
!1452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1453, size: 64)
!1453 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !151, line: 2856, flags: DIFlagFwdDecl)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1249, file: !151, line: 3386, baseType: !1422, size: 1216)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1249, file: !151, line: 3387, baseType: !1456, size: 1280)
!1456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !1457)
!1457 = !{!1458, !1459}
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1456, file: !151, line: 3094, baseType: !1422, size: 1216)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1456, file: !151, line: 3095, baseType: !1452, size: 64, offset: 1216)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1249, file: !151, line: 3388, baseType: !1461, size: 1216)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !1462)
!1462 = !{!1463, !1464, !1465, !1466, !1467, !1468}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1461, file: !151, line: 2825, baseType: !1376, size: 896)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1461, file: !151, line: 2827, baseType: !1247, size: 64, offset: 896)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1461, file: !151, line: 2828, baseType: !1247, size: 64, offset: 960)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1461, file: !151, line: 2829, baseType: !1247, size: 64, offset: 1024)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1461, file: !151, line: 2830, baseType: !1247, size: 64, offset: 1088)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1461, file: !151, line: 2831, baseType: !1247, size: 64, offset: 1152)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1249, file: !151, line: 3389, baseType: !1470, size: 1024)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !1471)
!1471 = !{!1472, !1473, !1474}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1470, file: !151, line: 2851, baseType: !1414, size: 960)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1470, file: !151, line: 2852, baseType: !1149, size: 32, offset: 960)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1470, file: !151, line: 2853, baseType: !1149, size: 32, offset: 992)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1249, file: !151, line: 3390, baseType: !1476, size: 1024)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !1477)
!1477 = !{!1478, !1479}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1476, file: !151, line: 2858, baseType: !1414, size: 960)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1476, file: !151, line: 2859, baseType: !1452, size: 64, offset: 960)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1249, file: !151, line: 3391, baseType: !1481, size: 960)
!1481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !1482)
!1482 = !{!1483}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1481, file: !151, line: 2863, baseType: !1414, size: 960)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1249, file: !151, line: 3392, baseType: !1485, size: 1472)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !1486)
!1486 = !{!1487}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1485, file: !151, line: 3305, baseType: !1419, size: 1472)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1249, file: !151, line: 3393, baseType: !1489, size: 1792)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !1490)
!1490 = !{!1491, !1492, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1489, file: !151, line: 3249, baseType: !1419, size: 1472)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1489, file: !151, line: 3251, baseType: !1493, size: 64, offset: 1472)
!1493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1494, size: 64)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1495, line: 463, size: 1152, elements: !1496)
!1495 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1496 = !{!1497, !1500, !1604, !1605, !1608, !1611, !1661, !1662, !1663, !1664, !1665, !1689, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1494, file: !1495, line: 464, baseType: !1498, size: 64)
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1499, size: 64)
!1499 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1495, line: 464, flags: DIFlagFwdDecl)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1494, file: !1495, line: 467, baseType: !1501, size: 64, offset: 64)
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1502, size: 64)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1503)
!1503 = !{!1504, !1579, !1580, !1593, !1594, !1595, !1596, !1597, !1598, !1600, !1602, !1603}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1502, file: !135, line: 377, baseType: !1505, size: 64)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1126, line: 111, baseType: !1506)
!1506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1507, size: 64)
!1507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1508)
!1508 = !{!1509, !1544, !1545, !1546, !1549, !1553, !1554, !1555, !1573, !1574, !1575, !1576, !1577, !1578}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1507, file: !135, line: 219, baseType: !1510, size: 64)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1512)
!1512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1513)
!1513 = !{!1514}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1512, file: !135, line: 151, baseType: !1515, size: 128)
!1515 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1516)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1517)
!1517 = !{!1518, !1519, !1520}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1516, file: !135, line: 150, baseType: !7, size: 32)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1516, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1516, file: !135, line: 150, baseType: !1521, size: 64, offset: 64)
!1521 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1522, size: 64, elements: !1164)
!1522 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1126, line: 108, baseType: !1523)
!1523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1524, size: 64)
!1524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1525)
!1525 = !{!1526, !1527, !1528, !1536, !1537, !1538, !1539, !1540, !1541, !1542}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1524, file: !135, line: 124, baseType: !1506, size: 64)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1524, file: !135, line: 125, baseType: !1506, size: 64, offset: 64)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1524, file: !135, line: 131, baseType: !1529, size: 64, offset: 128)
!1529 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1530)
!1530 = !{!1531, !1535}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1529, file: !135, line: 129, baseType: !1532, size: 64)
!1532 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1126, line: 66, baseType: !1533)
!1533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!1534 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1126, line: 65, flags: DIFlagFwdDecl)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1529, file: !135, line: 130, baseType: !1125, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1524, file: !135, line: 134, baseType: !1237, size: 64, offset: 192)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1524, file: !135, line: 137, baseType: !1247, size: 64, offset: 256)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1524, file: !135, line: 138, baseType: !1368, size: 32, offset: 320)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1524, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1524, file: !135, line: 144, baseType: !1149, size: 32, offset: 384)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1524, file: !135, line: 145, baseType: !1149, size: 32, offset: 416)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1524, file: !135, line: 146, baseType: !1543, size: 64, offset: 448)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !1216)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1507, file: !135, line: 220, baseType: !1510, size: 64, offset: 64)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1507, file: !135, line: 223, baseType: !1237, size: 64, offset: 128)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1507, file: !135, line: 226, baseType: !1547, size: 64, offset: 192)
!1547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1548, size: 64)
!1548 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1507, file: !135, line: 229, baseType: !1550, size: 128, offset: 256)
!1550 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1551, size: 128, elements: !1200)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1507, file: !135, line: 232, baseType: !1506, size: 64, offset: 384)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1507, file: !135, line: 233, baseType: !1506, size: 64, offset: 448)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1507, file: !135, line: 238, baseType: !1556, size: 64, offset: 512)
!1556 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1557)
!1557 = !{!1558, !1564}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1556, file: !135, line: 236, baseType: !1559, size: 64)
!1559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!1560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1561)
!1561 = !{!1562, !1563}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1560, file: !135, line: 275, baseType: !1532, size: 64)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1560, file: !135, line: 278, baseType: !1532, size: 64, offset: 64)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1556, file: !135, line: 237, baseType: !1565, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1567)
!1567 = !{!1568, !1569, !1570, !1571, !1572}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1566, file: !135, line: 261, baseType: !1125, size: 64)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1566, file: !135, line: 262, baseType: !1125, size: 64, offset: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1566, file: !135, line: 266, baseType: !1125, size: 64, offset: 128)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1566, file: !135, line: 267, baseType: !1125, size: 64, offset: 192)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1566, file: !135, line: 270, baseType: !1149, size: 32, offset: 256)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1507, file: !135, line: 241, baseType: !1543, size: 64, offset: 576)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1507, file: !135, line: 244, baseType: !1149, size: 32, offset: 640)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1507, file: !135, line: 247, baseType: !1149, size: 32, offset: 672)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1507, file: !135, line: 250, baseType: !1149, size: 32, offset: 704)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1507, file: !135, line: 253, baseType: !1149, size: 32, offset: 736)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1507, file: !135, line: 256, baseType: !1149, size: 32, offset: 768)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1502, file: !135, line: 378, baseType: !1505, size: 64, offset: 64)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1502, file: !135, line: 381, baseType: !1581, size: 64, offset: 128)
!1581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1582, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1583)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1584)
!1584 = !{!1585}
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1583, file: !135, line: 282, baseType: !1586, size: 128)
!1586 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1587)
!1587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1588)
!1588 = !{!1589, !1590, !1591}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1587, file: !135, line: 281, baseType: !7, size: 32)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1587, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1587, file: !135, line: 281, baseType: !1592, size: 64, offset: 64)
!1592 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 64, elements: !1164)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1502, file: !135, line: 384, baseType: !1149, size: 32, offset: 192)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1502, file: !135, line: 387, baseType: !1149, size: 32, offset: 224)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1502, file: !135, line: 390, baseType: !1149, size: 32, offset: 256)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1502, file: !135, line: 394, baseType: !1581, size: 64, offset: 320)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1502, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1502, file: !135, line: 399, baseType: !1599, size: 64, offset: 416)
!1599 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1200)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1502, file: !135, line: 402, baseType: !1601, size: 64, offset: 480)
!1601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1200)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1502, file: !135, line: 406, baseType: !1149, size: 32, offset: 544)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1502, file: !135, line: 409, baseType: !1149, size: 32, offset: 576)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1494, file: !1495, line: 470, baseType: !1533, size: 64, offset: 128)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1494, file: !1495, line: 473, baseType: !1606, size: 64, offset: 192)
!1606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1607, size: 64)
!1607 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1495, line: 166, flags: DIFlagFwdDecl)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1494, file: !1495, line: 476, baseType: !1609, size: 64, offset: 256)
!1609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1610, size: 64)
!1610 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1495, line: 476, flags: DIFlagFwdDecl)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1494, file: !1495, line: 479, baseType: !1612, size: 64, offset: 320)
!1612 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !521, line: 144, baseType: !1613)
!1613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1614, size: 64)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !521, line: 100, size: 896, elements: !1615)
!1615 = !{!1616, !1623, !1628, !1633, !1635, !1638, !1639, !1640, !1641, !1642, !1647, !1649, !1650, !1655, !1660}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1614, file: !521, line: 102, baseType: !1617, size: 64)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !521, line: 52, baseType: !1618)
!1618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!1619 = !DISubroutineType(types: !1620)
!1620 = !{!1124, !1621}
!1621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1622, size: 64)
!1622 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1614, file: !521, line: 105, baseType: !1624, size: 64, offset: 64)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !521, line: 59, baseType: !1625)
!1625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1626, size: 64)
!1626 = !DISubroutineType(types: !1627)
!1627 = !{!1149, !1621, !1621}
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1614, file: !521, line: 108, baseType: !1629, size: 64, offset: 128)
!1629 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !521, line: 63, baseType: !1630)
!1630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1631, size: 64)
!1631 = !DISubroutineType(types: !1632)
!1632 = !{null, !1237}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1614, file: !521, line: 111, baseType: !1634, size: 64, offset: 192)
!1634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1237, size: 64)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1614, file: !521, line: 114, baseType: !1636, size: 64, offset: 256)
!1636 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1637, line: 46, baseType: !1199)
!1637 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1614, file: !521, line: 117, baseType: !1636, size: 64, offset: 320)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1614, file: !521, line: 120, baseType: !1636, size: 64, offset: 384)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1614, file: !521, line: 124, baseType: !7, size: 32, offset: 448)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1614, file: !521, line: 128, baseType: !7, size: 32, offset: 480)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1614, file: !521, line: 131, baseType: !1643, size: 64, offset: 512)
!1643 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !521, line: 75, baseType: !1644)
!1644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1645, size: 64)
!1645 = !DISubroutineType(types: !1646)
!1646 = !{!1237, !1636, !1636}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1614, file: !521, line: 132, baseType: !1648, size: 64, offset: 576)
!1648 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !521, line: 78, baseType: !1630)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1614, file: !521, line: 135, baseType: !1237, size: 64, offset: 640)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1614, file: !521, line: 136, baseType: !1651, size: 64, offset: 704)
!1651 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !521, line: 82, baseType: !1652)
!1652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!1653 = !DISubroutineType(types: !1654)
!1654 = !{!1237, !1237, !1636, !1636}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1614, file: !521, line: 137, baseType: !1656, size: 64, offset: 768)
!1656 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !521, line: 83, baseType: !1657)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DISubroutineType(types: !1659)
!1659 = !{null, !1237, !1237}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1614, file: !521, line: 141, baseType: !7, size: 32, offset: 832)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1494, file: !1495, line: 484, baseType: !1247, size: 64, offset: 384)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1494, file: !1495, line: 488, baseType: !1247, size: 64, offset: 448)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1494, file: !1495, line: 493, baseType: !1247, size: 64, offset: 512)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1494, file: !1495, line: 496, baseType: !1247, size: 64, offset: 576)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1494, file: !1495, line: 501, baseType: !1666, size: 64, offset: 640)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !1668)
!1668 = !{!1669, !1672, !1673, !1674, !1675, !1677, !1678, !1683, !1684, !1685, !1686, !1687, !1688}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1667, file: !146, line: 2356, baseType: !1670, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1671, size: 64)
!1671 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1667, file: !146, line: 2357, baseType: !1152, size: 64, offset: 64)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1667, file: !146, line: 2358, baseType: !1149, size: 32, offset: 128)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1667, file: !146, line: 2359, baseType: !1149, size: 32, offset: 160)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1667, file: !146, line: 2360, baseType: !1676, size: 128, offset: 192)
!1676 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1149, size: 128, elements: !1226)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1667, file: !146, line: 2364, baseType: !1149, size: 32, offset: 320)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1667, file: !146, line: 2367, baseType: !1679, size: 128, offset: 384)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !1680)
!1680 = !{!1681, !1682}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1679, file: !146, line: 2351, baseType: !1125, size: 64)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1679, file: !146, line: 2352, baseType: !1216, size: 64, offset: 64)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1667, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1667, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1667, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1667, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1667, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1667, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1494, file: !1495, line: 504, baseType: !1690, size: 64, offset: 704)
!1690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1691, size: 64)
!1691 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1495, line: 504, flags: DIFlagFwdDecl)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1494, file: !1495, line: 507, baseType: !1612, size: 64, offset: 768)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1494, file: !1495, line: 510, baseType: !1149, size: 32, offset: 832)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1494, file: !1495, line: 513, baseType: !1149, size: 32, offset: 864)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1494, file: !1495, line: 516, baseType: !1368, size: 32, offset: 896)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1494, file: !1495, line: 519, baseType: !1368, size: 32, offset: 928)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1494, file: !1495, line: 522, baseType: !7, size: 32, offset: 960)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1494, file: !1495, line: 523, baseType: !7, size: 32, offset: 992)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1494, file: !1495, line: 528, baseType: !1152, size: 64, offset: 1024)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1494, file: !1495, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1494, file: !1495, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1494, file: !1495, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1494, file: !1495, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1494, file: !1495, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1494, file: !1495, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1494, file: !1495, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1494, file: !1495, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1494, file: !1495, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1494, file: !1495, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1494, file: !1495, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1494, file: !1495, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1494, file: !1495, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1494, file: !1495, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1494, file: !1495, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1494, file: !1495, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1489, file: !151, line: 3254, baseType: !1247, size: 64, offset: 1536)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1489, file: !151, line: 3257, baseType: !1247, size: 64, offset: 1600)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1489, file: !151, line: 3258, baseType: !1247, size: 64, offset: 1664)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1489, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1489, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1489, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1489, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1489, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1489, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1489, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1489, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1489, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1489, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1489, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1489, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1489, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1489, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1489, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1489, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1489, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1489, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1249, file: !151, line: 3394, baseType: !1738, size: 1344)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !1739)
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1765, !1766, !1767, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1738, file: !151, line: 2280, baseType: !1285, size: 192)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1738, file: !151, line: 2281, baseType: !1247, size: 64, offset: 192)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1738, file: !151, line: 2282, baseType: !1247, size: 64, offset: 256)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1738, file: !151, line: 2283, baseType: !1247, size: 64, offset: 320)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1738, file: !151, line: 2284, baseType: !1247, size: 64, offset: 384)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1738, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1738, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1738, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1738, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1738, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1738, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1738, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1738, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1738, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1738, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1738, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1738, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1738, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1738, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1738, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1738, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1738, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1738, file: !151, line: 2306, baseType: !1763, size: 32, offset: 544)
!1763 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1764, line: 31, baseType: !1149)
!1764 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1738, file: !151, line: 2307, baseType: !1247, size: 64, offset: 576)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1738, file: !151, line: 2308, baseType: !1247, size: 64, offset: 640)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1738, file: !151, line: 2314, baseType: !1768, size: 64, offset: 704)
!1768 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !1769)
!1769 = !{!1770, !1771, !1772}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1768, file: !151, line: 2310, baseType: !1149, size: 32)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1768, file: !151, line: 2311, baseType: !1152, size: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1768, file: !151, line: 2312, baseType: !1773, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1738, file: !151, line: 2315, baseType: !1247, size: 64, offset: 768)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1738, file: !151, line: 2316, baseType: !1247, size: 64, offset: 832)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1738, file: !151, line: 2317, baseType: !1247, size: 64, offset: 896)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1738, file: !151, line: 2318, baseType: !1247, size: 64, offset: 960)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1738, file: !151, line: 2319, baseType: !1247, size: 64, offset: 1024)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1738, file: !151, line: 2320, baseType: !1247, size: 64, offset: 1088)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1738, file: !151, line: 2321, baseType: !1247, size: 64, offset: 1152)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1738, file: !151, line: 2322, baseType: !1247, size: 64, offset: 1216)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1738, file: !151, line: 2324, baseType: !1784, size: 64, offset: 1280)
!1784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1785, size: 64)
!1785 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1249, file: !151, line: 3395, baseType: !1787, size: 320)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !1788)
!1788 = !{!1789, !1790, !1791}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1787, file: !151, line: 1470, baseType: !1285, size: 192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1787, file: !151, line: 1471, baseType: !1247, size: 64, offset: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1787, file: !151, line: 1472, baseType: !1247, size: 64, offset: 256)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1249, file: !151, line: 3396, baseType: !1793, size: 320)
!1793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !1794)
!1794 = !{!1795, !1796, !1797}
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1793, file: !151, line: 1483, baseType: !1285, size: 192)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1793, file: !151, line: 1484, baseType: !1149, size: 32, offset: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1793, file: !151, line: 1485, baseType: !1798, size: 64, offset: 256)
!1798 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1247, size: 64, elements: !1164)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1249, file: !151, line: 3397, baseType: !1800, size: 384)
!1800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !1801)
!1801 = !{!1802, !1803, !1804, !1805}
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1800, file: !151, line: 1830, baseType: !1285, size: 192)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1800, file: !151, line: 1831, baseType: !1368, size: 32, offset: 192)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1800, file: !151, line: 1832, baseType: !1247, size: 64, offset: 256)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1800, file: !151, line: 1835, baseType: !1798, size: 64, offset: 320)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1249, file: !151, line: 3398, baseType: !1807, size: 704)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !1808)
!1808 = !{!1809, !1810, !1811, !1815, !1816, !1819}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1807, file: !151, line: 1899, baseType: !1285, size: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1807, file: !151, line: 1902, baseType: !1247, size: 64, offset: 192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1807, file: !151, line: 1905, baseType: !1812, size: 64, offset: 256)
!1812 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1126, line: 58, baseType: !1813)
!1813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1814, size: 64)
!1814 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1126, line: 57, flags: DIFlagFwdDecl)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1807, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1807, file: !151, line: 1911, baseType: !1817, size: 64, offset: 384)
!1817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1818, size: 64)
!1818 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !151, line: 1876, flags: DIFlagFwdDecl)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1807, file: !151, line: 1914, baseType: !1820, size: 256, offset: 448)
!1820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1821)
!1821 = !{!1822, !1824, !1825, !1830}
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1820, file: !151, line: 1884, baseType: !1823, size: 64)
!1823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1820, size: 64)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1820, file: !151, line: 1885, baseType: !1823, size: 64, offset: 64)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1820, file: !151, line: 1891, baseType: !1826, size: 64, offset: 128)
!1826 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1820, file: !151, line: 1891, size: 64, elements: !1827)
!1827 = !{!1828, !1829}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1826, file: !151, line: 1891, baseType: !1812, size: 64)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1826, file: !151, line: 1891, baseType: !1247, size: 64)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1820, file: !151, line: 1892, baseType: !1831, size: 64, offset: 192)
!1831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1247, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1249, file: !151, line: 3399, baseType: !1833, size: 704)
!1833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !1834)
!1834 = !{!1835, !1836, !1837, !1838, !1839, !1840, !1852, !1853, !1854, !1855, !1856}
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1833, file: !151, line: 2009, baseType: !1285, size: 192)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1833, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1833, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1833, file: !151, line: 2014, baseType: !1368, size: 32, offset: 224)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1833, file: !151, line: 2016, baseType: !1247, size: 64, offset: 256)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1833, file: !151, line: 2017, baseType: !1841, size: 64, offset: 320)
!1841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1842, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !1843)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !1844)
!1844 = !{!1845}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1843, file: !151, line: 183, baseType: !1846, size: 128)
!1846 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !1847)
!1847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !1848)
!1848 = !{!1849, !1850, !1851}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1847, file: !151, line: 182, baseType: !7, size: 32)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1847, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1847, file: !151, line: 182, baseType: !1798, size: 64, offset: 64)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1833, file: !151, line: 2019, baseType: !1247, size: 64, offset: 384)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1833, file: !151, line: 2020, baseType: !1247, size: 64, offset: 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1833, file: !151, line: 2021, baseType: !1247, size: 64, offset: 512)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1833, file: !151, line: 2022, baseType: !1247, size: 64, offset: 576)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1833, file: !151, line: 2023, baseType: !1247, size: 64, offset: 640)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1249, file: !151, line: 3400, baseType: !1858, size: 832)
!1858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !1859)
!1859 = !{!1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869}
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1858, file: !151, line: 2431, baseType: !1285, size: 192)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1858, file: !151, line: 2433, baseType: !1247, size: 64, offset: 192)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1858, file: !151, line: 2434, baseType: !1247, size: 64, offset: 256)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1858, file: !151, line: 2435, baseType: !1247, size: 64, offset: 320)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1858, file: !151, line: 2436, baseType: !1247, size: 64, offset: 384)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1858, file: !151, line: 2437, baseType: !1841, size: 64, offset: 448)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1858, file: !151, line: 2438, baseType: !1247, size: 64, offset: 512)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1858, file: !151, line: 2440, baseType: !1247, size: 64, offset: 576)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1858, file: !151, line: 2441, baseType: !1247, size: 64, offset: 640)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1858, file: !151, line: 2443, baseType: !1870, size: 128, offset: 704)
!1870 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !1871)
!1871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !1872)
!1872 = !{!1873}
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1871, file: !151, line: 182, baseType: !1846, size: 128)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1249, file: !151, line: 3401, baseType: !1875, size: 320)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !1876)
!1876 = !{!1877, !1878, !1885}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1875, file: !151, line: 3329, baseType: !1285, size: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1875, file: !151, line: 3330, baseType: !1879, size: 64, offset: 192)
!1879 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1880, size: 64)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !1881)
!1881 = !{!1882, !1883, !1884}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1880, file: !151, line: 3322, baseType: !1879, size: 64)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1880, file: !151, line: 3323, baseType: !1879, size: 64, offset: 64)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1880, file: !151, line: 3324, baseType: !1247, size: 64, offset: 128)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1875, file: !151, line: 3331, baseType: !1879, size: 64, offset: 256)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1249, file: !151, line: 3402, baseType: !1887, size: 256)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !1888)
!1888 = !{!1889, !1890}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1887, file: !151, line: 1541, baseType: !1285, size: 192)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1887, file: !151, line: 1542, baseType: !1891, size: 64, offset: 192)
!1891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !1893)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !1894)
!1894 = !{!1895}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1893, file: !151, line: 1538, baseType: !1896, size: 192)
!1896 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !1897)
!1897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !1898)
!1898 = !{!1899, !1900, !1901}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1897, file: !151, line: 1537, baseType: !7, size: 32)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1897, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1897, file: !151, line: 1537, baseType: !1902, size: 128, offset: 64)
!1902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1903, size: 128, elements: !1164)
!1903 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !1904)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !1905)
!1905 = !{!1906, !1907}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1904, file: !151, line: 1533, baseType: !1247, size: 64)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1904, file: !151, line: 1534, baseType: !1247, size: 64, offset: 64)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1249, file: !151, line: 3403, baseType: !1909, size: 512)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !1910)
!1910 = !{!1911, !1912, !1913, !1914, !1920, !1921, !1922}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1909, file: !151, line: 1939, baseType: !1285, size: 192)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1909, file: !151, line: 1940, baseType: !1368, size: 32, offset: 192)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1909, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1909, file: !151, line: 1946, baseType: !1915, size: 32, offset: 256)
!1915 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !1916)
!1916 = !{!1917, !1918, !1919}
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1915, file: !151, line: 1943, baseType: !169, size: 32)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1915, file: !151, line: 1944, baseType: !176, size: 32)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1915, file: !151, line: 1945, baseType: !183, size: 32)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1909, file: !151, line: 1950, baseType: !1532, size: 64, offset: 320)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1909, file: !151, line: 1951, baseType: !1532, size: 64, offset: 384)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1909, file: !151, line: 1953, baseType: !1798, size: 64, offset: 448)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1249, file: !151, line: 3404, baseType: !1924, size: 1664)
!1924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !1925)
!1925 = !{!1926, !1927}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1924, file: !151, line: 3338, baseType: !1285, size: 192)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1924, file: !151, line: 3341, baseType: !1928, size: 1472, offset: 192)
!1928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1929, line: 410, size: 1472, elements: !1930)
!1929 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1930 = !{!1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094}
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1928, file: !1929, line: 412, baseType: !1149, size: 32)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1928, file: !1929, line: 413, baseType: !1149, size: 32, offset: 32)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1928, file: !1929, line: 414, baseType: !1149, size: 32, offset: 64)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1928, file: !1929, line: 415, baseType: !1149, size: 32, offset: 96)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1928, file: !1929, line: 416, baseType: !1149, size: 32, offset: 128)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1928, file: !1929, line: 417, baseType: !1149, size: 32, offset: 160)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1928, file: !1929, line: 418, baseType: !1360, size: 8, offset: 192)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1928, file: !1929, line: 419, baseType: !1360, size: 8, offset: 200)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1928, file: !1929, line: 420, baseType: !1940, size: 8, offset: 208)
!1940 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1928, file: !1929, line: 421, baseType: !1940, size: 8, offset: 216)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1928, file: !1929, line: 422, baseType: !1940, size: 8, offset: 224)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1928, file: !1929, line: 423, baseType: !1940, size: 8, offset: 232)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1928, file: !1929, line: 424, baseType: !1940, size: 8, offset: 240)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1928, file: !1929, line: 425, baseType: !1940, size: 8, offset: 248)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1928, file: !1929, line: 426, baseType: !1940, size: 8, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1928, file: !1929, line: 427, baseType: !1940, size: 8, offset: 264)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1928, file: !1929, line: 428, baseType: !1940, size: 8, offset: 272)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1928, file: !1929, line: 429, baseType: !1940, size: 8, offset: 280)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1928, file: !1929, line: 430, baseType: !1940, size: 8, offset: 288)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1928, file: !1929, line: 431, baseType: !1940, size: 8, offset: 296)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1928, file: !1929, line: 432, baseType: !1940, size: 8, offset: 304)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1928, file: !1929, line: 433, baseType: !1940, size: 8, offset: 312)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1928, file: !1929, line: 434, baseType: !1940, size: 8, offset: 320)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1928, file: !1929, line: 435, baseType: !1940, size: 8, offset: 328)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1928, file: !1929, line: 436, baseType: !1940, size: 8, offset: 336)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1928, file: !1929, line: 437, baseType: !1940, size: 8, offset: 344)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1928, file: !1929, line: 438, baseType: !1940, size: 8, offset: 352)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1928, file: !1929, line: 439, baseType: !1940, size: 8, offset: 360)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1928, file: !1929, line: 440, baseType: !1940, size: 8, offset: 368)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1928, file: !1929, line: 441, baseType: !1940, size: 8, offset: 376)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1928, file: !1929, line: 442, baseType: !1940, size: 8, offset: 384)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1928, file: !1929, line: 443, baseType: !1940, size: 8, offset: 392)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1928, file: !1929, line: 444, baseType: !1940, size: 8, offset: 400)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1928, file: !1929, line: 445, baseType: !1940, size: 8, offset: 408)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1928, file: !1929, line: 446, baseType: !1940, size: 8, offset: 416)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1928, file: !1929, line: 447, baseType: !1940, size: 8, offset: 424)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1928, file: !1929, line: 448, baseType: !1940, size: 8, offset: 432)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1928, file: !1929, line: 449, baseType: !1940, size: 8, offset: 440)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1928, file: !1929, line: 450, baseType: !1940, size: 8, offset: 448)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1928, file: !1929, line: 451, baseType: !1940, size: 8, offset: 456)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1928, file: !1929, line: 452, baseType: !1940, size: 8, offset: 464)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1928, file: !1929, line: 453, baseType: !1940, size: 8, offset: 472)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1928, file: !1929, line: 454, baseType: !1940, size: 8, offset: 480)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1928, file: !1929, line: 455, baseType: !1940, size: 8, offset: 488)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1928, file: !1929, line: 456, baseType: !1940, size: 8, offset: 496)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1928, file: !1929, line: 457, baseType: !1940, size: 8, offset: 504)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1928, file: !1929, line: 458, baseType: !1940, size: 8, offset: 512)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1928, file: !1929, line: 459, baseType: !1940, size: 8, offset: 520)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1928, file: !1929, line: 460, baseType: !1940, size: 8, offset: 528)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1928, file: !1929, line: 461, baseType: !1940, size: 8, offset: 536)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1928, file: !1929, line: 462, baseType: !1940, size: 8, offset: 544)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1928, file: !1929, line: 463, baseType: !1940, size: 8, offset: 552)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1928, file: !1929, line: 464, baseType: !1940, size: 8, offset: 560)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1928, file: !1929, line: 465, baseType: !1940, size: 8, offset: 568)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1928, file: !1929, line: 466, baseType: !1940, size: 8, offset: 576)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1928, file: !1929, line: 467, baseType: !1940, size: 8, offset: 584)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1928, file: !1929, line: 468, baseType: !1940, size: 8, offset: 592)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1928, file: !1929, line: 469, baseType: !1940, size: 8, offset: 600)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1928, file: !1929, line: 470, baseType: !1940, size: 8, offset: 608)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1928, file: !1929, line: 471, baseType: !1940, size: 8, offset: 616)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1928, file: !1929, line: 472, baseType: !1940, size: 8, offset: 624)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1928, file: !1929, line: 473, baseType: !1940, size: 8, offset: 632)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1928, file: !1929, line: 474, baseType: !1940, size: 8, offset: 640)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1928, file: !1929, line: 475, baseType: !1940, size: 8, offset: 648)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1928, file: !1929, line: 476, baseType: !1940, size: 8, offset: 656)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1928, file: !1929, line: 477, baseType: !1940, size: 8, offset: 664)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1928, file: !1929, line: 478, baseType: !1940, size: 8, offset: 672)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1928, file: !1929, line: 479, baseType: !1940, size: 8, offset: 680)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1928, file: !1929, line: 480, baseType: !1940, size: 8, offset: 688)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1928, file: !1929, line: 481, baseType: !1940, size: 8, offset: 696)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1928, file: !1929, line: 482, baseType: !1940, size: 8, offset: 704)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1928, file: !1929, line: 483, baseType: !1940, size: 8, offset: 712)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1928, file: !1929, line: 484, baseType: !1940, size: 8, offset: 720)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1928, file: !1929, line: 485, baseType: !1940, size: 8, offset: 728)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1928, file: !1929, line: 486, baseType: !1940, size: 8, offset: 736)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1928, file: !1929, line: 487, baseType: !1940, size: 8, offset: 744)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1928, file: !1929, line: 488, baseType: !1940, size: 8, offset: 752)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1928, file: !1929, line: 489, baseType: !1940, size: 8, offset: 760)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1928, file: !1929, line: 490, baseType: !1940, size: 8, offset: 768)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1928, file: !1929, line: 491, baseType: !1940, size: 8, offset: 776)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1928, file: !1929, line: 492, baseType: !1940, size: 8, offset: 784)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1928, file: !1929, line: 493, baseType: !1940, size: 8, offset: 792)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1928, file: !1929, line: 494, baseType: !1940, size: 8, offset: 800)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1928, file: !1929, line: 495, baseType: !1940, size: 8, offset: 808)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1928, file: !1929, line: 496, baseType: !1940, size: 8, offset: 816)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1928, file: !1929, line: 497, baseType: !1940, size: 8, offset: 824)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1928, file: !1929, line: 498, baseType: !1940, size: 8, offset: 832)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1928, file: !1929, line: 499, baseType: !1940, size: 8, offset: 840)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1928, file: !1929, line: 500, baseType: !1940, size: 8, offset: 848)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1928, file: !1929, line: 501, baseType: !1940, size: 8, offset: 856)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1928, file: !1929, line: 502, baseType: !1940, size: 8, offset: 864)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1928, file: !1929, line: 503, baseType: !1940, size: 8, offset: 872)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1928, file: !1929, line: 504, baseType: !1940, size: 8, offset: 880)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1928, file: !1929, line: 505, baseType: !1940, size: 8, offset: 888)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1928, file: !1929, line: 506, baseType: !1940, size: 8, offset: 896)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1928, file: !1929, line: 507, baseType: !1940, size: 8, offset: 904)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1928, file: !1929, line: 508, baseType: !1940, size: 8, offset: 912)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1928, file: !1929, line: 509, baseType: !1940, size: 8, offset: 920)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1928, file: !1929, line: 510, baseType: !1940, size: 8, offset: 928)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1928, file: !1929, line: 511, baseType: !1940, size: 8, offset: 936)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1928, file: !1929, line: 512, baseType: !1940, size: 8, offset: 944)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1928, file: !1929, line: 513, baseType: !1940, size: 8, offset: 952)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1928, file: !1929, line: 514, baseType: !1940, size: 8, offset: 960)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1928, file: !1929, line: 515, baseType: !1940, size: 8, offset: 968)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1928, file: !1929, line: 516, baseType: !1940, size: 8, offset: 976)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1928, file: !1929, line: 517, baseType: !1940, size: 8, offset: 984)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1928, file: !1929, line: 518, baseType: !1940, size: 8, offset: 992)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1928, file: !1929, line: 519, baseType: !1940, size: 8, offset: 1000)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1928, file: !1929, line: 520, baseType: !1940, size: 8, offset: 1008)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1928, file: !1929, line: 521, baseType: !1940, size: 8, offset: 1016)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1928, file: !1929, line: 522, baseType: !1940, size: 8, offset: 1024)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1928, file: !1929, line: 523, baseType: !1940, size: 8, offset: 1032)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1928, file: !1929, line: 524, baseType: !1940, size: 8, offset: 1040)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1928, file: !1929, line: 525, baseType: !1940, size: 8, offset: 1048)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1928, file: !1929, line: 526, baseType: !1940, size: 8, offset: 1056)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1928, file: !1929, line: 527, baseType: !1940, size: 8, offset: 1064)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1928, file: !1929, line: 528, baseType: !1940, size: 8, offset: 1072)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1928, file: !1929, line: 529, baseType: !1940, size: 8, offset: 1080)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1928, file: !1929, line: 530, baseType: !1940, size: 8, offset: 1088)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1928, file: !1929, line: 531, baseType: !1940, size: 8, offset: 1096)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1928, file: !1929, line: 532, baseType: !1940, size: 8, offset: 1104)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1928, file: !1929, line: 533, baseType: !1940, size: 8, offset: 1112)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1928, file: !1929, line: 534, baseType: !1940, size: 8, offset: 1120)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1928, file: !1929, line: 535, baseType: !1940, size: 8, offset: 1128)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1928, file: !1929, line: 536, baseType: !1940, size: 8, offset: 1136)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1928, file: !1929, line: 537, baseType: !1940, size: 8, offset: 1144)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1928, file: !1929, line: 538, baseType: !1940, size: 8, offset: 1152)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1928, file: !1929, line: 539, baseType: !1940, size: 8, offset: 1160)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1928, file: !1929, line: 540, baseType: !1940, size: 8, offset: 1168)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1928, file: !1929, line: 541, baseType: !1940, size: 8, offset: 1176)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1928, file: !1929, line: 542, baseType: !1940, size: 8, offset: 1184)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1928, file: !1929, line: 543, baseType: !1940, size: 8, offset: 1192)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1928, file: !1929, line: 544, baseType: !1940, size: 8, offset: 1200)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1928, file: !1929, line: 545, baseType: !1940, size: 8, offset: 1208)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1928, file: !1929, line: 546, baseType: !1940, size: 8, offset: 1216)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1928, file: !1929, line: 547, baseType: !1940, size: 8, offset: 1224)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1928, file: !1929, line: 548, baseType: !1940, size: 8, offset: 1232)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1928, file: !1929, line: 549, baseType: !1940, size: 8, offset: 1240)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1928, file: !1929, line: 550, baseType: !1940, size: 8, offset: 1248)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1928, file: !1929, line: 551, baseType: !1940, size: 8, offset: 1256)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1928, file: !1929, line: 552, baseType: !1940, size: 8, offset: 1264)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1928, file: !1929, line: 553, baseType: !1940, size: 8, offset: 1272)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1928, file: !1929, line: 554, baseType: !1940, size: 8, offset: 1280)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1928, file: !1929, line: 555, baseType: !1940, size: 8, offset: 1288)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1928, file: !1929, line: 556, baseType: !1940, size: 8, offset: 1296)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1928, file: !1929, line: 557, baseType: !1940, size: 8, offset: 1304)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1928, file: !1929, line: 558, baseType: !1940, size: 8, offset: 1312)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1928, file: !1929, line: 559, baseType: !1940, size: 8, offset: 1320)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1928, file: !1929, line: 560, baseType: !1940, size: 8, offset: 1328)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1928, file: !1929, line: 561, baseType: !1940, size: 8, offset: 1336)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1928, file: !1929, line: 562, baseType: !1940, size: 8, offset: 1344)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1928, file: !1929, line: 563, baseType: !1940, size: 8, offset: 1352)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1928, file: !1929, line: 564, baseType: !1940, size: 8, offset: 1360)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1928, file: !1929, line: 565, baseType: !1940, size: 8, offset: 1368)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1928, file: !1929, line: 566, baseType: !1940, size: 8, offset: 1376)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1928, file: !1929, line: 567, baseType: !1940, size: 8, offset: 1384)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1928, file: !1929, line: 568, baseType: !1940, size: 8, offset: 1392)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1928, file: !1929, line: 569, baseType: !1940, size: 8, offset: 1400)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1928, file: !1929, line: 570, baseType: !1940, size: 8, offset: 1408)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1928, file: !1929, line: 571, baseType: !1940, size: 8, offset: 1416)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1928, file: !1929, line: 572, baseType: !1940, size: 8, offset: 1424)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1928, file: !1929, line: 573, baseType: !1940, size: 8, offset: 1432)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1928, file: !1929, line: 574, baseType: !1940, size: 8, offset: 1440)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1249, file: !151, line: 3405, baseType: !2096, size: 384)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !2097)
!2097 = !{!2098, !2099}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2096, file: !151, line: 3353, baseType: !1285, size: 192)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2096, file: !151, line: 3356, baseType: !2100, size: 192, offset: 192)
!2100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1929, line: 578, size: 192, elements: !2101)
!2101 = !{!2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112}
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2100, file: !1929, line: 580, baseType: !1149, size: 32)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2100, file: !1929, line: 581, baseType: !1149, size: 32, offset: 32)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2100, file: !1929, line: 582, baseType: !1149, size: 32, offset: 64)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2100, file: !1929, line: 583, baseType: !1149, size: 32, offset: 96)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2100, file: !1929, line: 584, baseType: !1360, size: 8, offset: 128)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2100, file: !1929, line: 585, baseType: !1360, size: 8, offset: 136)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2100, file: !1929, line: 586, baseType: !1360, size: 8, offset: 144)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2100, file: !1929, line: 587, baseType: !1360, size: 8, offset: 152)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2100, file: !1929, line: 588, baseType: !1360, size: 8, offset: 160)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2100, file: !1929, line: 589, baseType: !1360, size: 8, offset: 168)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2100, file: !1929, line: 590, baseType: !1360, size: 8, offset: 176)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1146, file: !378, line: 178, baseType: !1506, size: 64)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1146, file: !378, line: 179, baseType: !2115, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !378, line: 150, baseType: !2117)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !378, line: 142, size: 320, elements: !2118)
!2118 = !{!2119, !2120, !2121, !2122, !2123, !2124}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2117, file: !378, line: 144, baseType: !1247, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2117, file: !378, line: 145, baseType: !1125, size: 64, offset: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2117, file: !378, line: 146, baseType: !1125, size: 64, offset: 128)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2117, file: !378, line: 147, baseType: !1763, size: 32, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2117, file: !378, line: 148, baseType: !7, size: 32, offset: 224)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2117, file: !378, line: 149, baseType: !1360, size: 8, offset: 256)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1146, file: !378, line: 180, baseType: !2126, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2127, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !378, line: 162, baseType: !2128)
!2128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !378, line: 159, size: 128, elements: !2129)
!2129 = !{!2130, !2131}
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2128, file: !378, line: 160, baseType: !1247, size: 64)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2128, file: !378, line: 161, baseType: !1216, size: 64, offset: 64)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1146, file: !378, line: 181, baseType: !2133, size: 64)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !378, line: 181, flags: DIFlagFwdDecl)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1141, file: !378, line: 317, baseType: !2136, size: 64)
!2136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1216, size: 64, elements: !1164)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1141, file: !378, line: 318, baseType: !2138, size: 320)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !378, line: 188, size: 320, elements: !2139)
!2139 = !{!2140, !2142, !2165}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2138, file: !378, line: 190, baseType: !2141, size: 192)
!2141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1145, size: 192, elements: !1318)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2138, file: !378, line: 193, baseType: !2143, size: 64, offset: 192)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !378, line: 206, size: 320, elements: !2145)
!2145 = !{!2146, !2150, !2151, !2152, !2164}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2144, file: !378, line: 208, baseType: !2147, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2148, size: 64)
!2148 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1126, line: 62, baseType: !2149)
!2149 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1126, line: 61, flags: DIFlagFwdDecl)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2144, file: !378, line: 211, baseType: !7, size: 32, offset: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2144, file: !378, line: 214, baseType: !1216, size: 64, offset: 128)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2144, file: !378, line: 224, baseType: !2153, size: 64, offset: 192)
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2154, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !378, line: 202, baseType: !2155)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !378, line: 202, size: 128, elements: !2156)
!2156 = !{!2157}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2155, file: !378, line: 202, baseType: !2158, size: 128)
!2158 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !378, line: 200, baseType: !2159)
!2159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !378, line: 200, size: 128, elements: !2160)
!2160 = !{!2161, !2162, !2163}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2159, file: !378, line: 200, baseType: !7, size: 32)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2159, file: !378, line: 200, baseType: !7, size: 32, offset: 32)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2159, file: !378, line: 200, baseType: !1163, size: 64, offset: 64)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2144, file: !378, line: 234, baseType: !2153, size: 64, offset: 256)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2138, file: !378, line: 197, baseType: !1216, size: 64, offset: 256)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1141, file: !378, line: 319, baseType: !1307, size: 256)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1141, file: !378, line: 320, baseType: !1326, size: 192)
!2168 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!2170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!2171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2172, size: 64)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sequence_stack", file: !1495, line: 34, size: 192, elements: !2173)
!2173 = !{!2174, !2175, !2176}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2172, file: !1495, line: 36, baseType: !1125, size: 64)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2172, file: !1495, line: 37, baseType: !1125, size: 64, offset: 64)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2172, file: !1495, line: 38, baseType: !2171, size: 64, offset: 128)
!2177 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !1126, line: 51, baseType: !2178)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1128)
!2180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2181, size: 64)
!2181 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1216)
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2183, size: 64)
!2183 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1307)
!2184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2185, size: 64)
!2185 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1326)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2116)
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2127)
!2190 = !{!0, !2191, !2219, !2233, !2235, !2253, !2256, !2259, !2261, !2263, !2265, !2267, !2437, !2439, !2444, !2449, !2454, !2456, !2458, !2460, !2462, !2464, !2466, !2471, !2476, !2478, !2480, !2485, !2487, !2489, !2491, !2493, !2495, !2497, !2499, !2504, !2506, !2508, !2510, !2512, !2514, !2516, !2520}
!2191 = !DIGlobalVariableExpression(var: !2192, expr: !DIExpression())
!2192 = distinct !DIGlobalVariable(name: "pass_unshare_all_rtl", scope: !2, file: !3, line: 2378, type: !2193, isLocal: false, isDefinition: true)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !876, line: 162, size: 640, elements: !2194)
!2194 = !{!2195}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2193, file: !876, line: 164, baseType: !2196, size: 640)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !876, line: 114, size: 640, elements: !2197)
!2197 = !{!2198, !2199, !2200, !2204, !2208, !2210, !2211, !2212, !2214, !2215, !2216, !2217, !2218}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2196, file: !876, line: 117, baseType: !875, size: 32)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2196, file: !876, line: 121, baseType: !1152, size: 64, offset: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2196, file: !876, line: 125, baseType: !2201, size: 64, offset: 128)
!2201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2202, size: 64)
!2202 = !DISubroutineType(types: !2203)
!2203 = !{!1360}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2196, file: !876, line: 130, baseType: !2205, size: 64, offset: 192)
!2205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2206, size: 64)
!2206 = !DISubroutineType(types: !2207)
!2207 = !{!7}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2196, file: !876, line: 133, baseType: !2209, size: 64, offset: 256)
!2209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2196, size: 64)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2196, file: !876, line: 136, baseType: !2209, size: 64, offset: 320)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2196, file: !876, line: 139, baseType: !1149, size: 32, offset: 384)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2196, file: !876, line: 143, baseType: !2213, size: 32, offset: 416)
!2213 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !883, line: 80, baseType: !882)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2196, file: !876, line: 146, baseType: !7, size: 32, offset: 448)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2196, file: !876, line: 147, baseType: !7, size: 32, offset: 480)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2196, file: !876, line: 148, baseType: !7, size: 32, offset: 512)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2196, file: !876, line: 151, baseType: !7, size: 32, offset: 544)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2196, file: !876, line: 152, baseType: !7, size: 32, offset: 576)
!2219 = !DIGlobalVariableExpression(var: !2220, expr: !DIExpression())
!2220 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_emit_rtl_h", scope: !2, file: !2221, line: 24, type: !2222, isLocal: false, isDefinition: true)
!2221 = !DIFile(filename: "./gt-emit-rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2223, size: 960, elements: !1318)
!2223 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2224)
!2224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2225, line: 69, size: 320, elements: !2226)
!2225 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2226 = !{!2227, !2228, !2229, !2230, !2232}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2224, file: !2225, line: 70, baseType: !1237, size: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2224, file: !2225, line: 71, baseType: !1636, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2224, file: !2225, line: 72, baseType: !1636, size: 64, offset: 128)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2224, file: !2225, line: 73, baseType: !2231, size: 64, offset: 192)
!2231 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2225, line: 65, baseType: !1630)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2224, file: !2225, line: 74, baseType: !2231, size: 64, offset: 256)
!2233 = !DIGlobalVariableExpression(var: !2234, expr: !DIExpression())
!2234 = distinct !DIGlobalVariable(name: "gt_ggc_rd_gt_emit_rtl_h", scope: !2, file: !2221, line: 42, type: !2222, isLocal: false, isDefinition: true)
!2235 = !DIGlobalVariableExpression(var: !2236, expr: !DIExpression())
!2236 = distinct !DIGlobalVariable(name: "gt_ggc_rc_gt_emit_rtl_h", scope: !2, file: !2221, line: 48, type: !2237, isLocal: false, isDefinition: true)
!2237 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2238, size: 2304, elements: !2251)
!2238 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2239)
!2239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_cache_tab", file: !2225, line: 85, size: 384, elements: !2240)
!2240 = !{!2241, !2243, !2244, !2245, !2246, !2247}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2239, file: !2225, line: 86, baseType: !2242, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2239, file: !2225, line: 87, baseType: !1636, size: 64, offset: 64)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2239, file: !2225, line: 88, baseType: !1636, size: 64, offset: 128)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2239, file: !2225, line: 89, baseType: !2231, size: 64, offset: 192)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2239, file: !2225, line: 90, baseType: !2231, size: 64, offset: 256)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "marked_p", scope: !2239, file: !2225, line: 91, baseType: !2248, size: 64, offset: 320)
!2248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2249, size: 64)
!2249 = !DISubroutineType(types: !2250)
!2250 = !{!1149, !1621}
!2251 = !{!2252}
!2252 = !DISubrange(count: 6)
!2253 = !DIGlobalVariableExpression(var: !2254, expr: !DIExpression())
!2254 = distinct !DIGlobalVariable(name: "gt_pch_rc_gt_emit_rtl_h", scope: !2, file: !2221, line: 92, type: !2255, isLocal: false, isDefinition: true)
!2255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2223, size: 1920, elements: !2251)
!2256 = !DIGlobalVariableExpression(var: !2257, expr: !DIExpression())
!2257 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_emit_rtl_h", scope: !2, file: !2221, line: 131, type: !2258, isLocal: false, isDefinition: true)
!2258 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2223, size: 640, elements: !1200)
!2259 = !DIGlobalVariableExpression(var: !2260, expr: !DIExpression())
!2260 = distinct !DIGlobalVariable(name: "byte_mode", scope: !2, file: !3, line: 66, type: !5, isLocal: false, isDefinition: true)
!2261 = !DIGlobalVariableExpression(var: !2262, expr: !DIExpression())
!2262 = distinct !DIGlobalVariable(name: "word_mode", scope: !2, file: !3, line: 67, type: !5, isLocal: false, isDefinition: true)
!2263 = !DIGlobalVariableExpression(var: !2264, expr: !DIExpression())
!2264 = distinct !DIGlobalVariable(name: "double_mode", scope: !2, file: !3, line: 68, type: !5, isLocal: false, isDefinition: true)
!2265 = !DIGlobalVariableExpression(var: !2266, expr: !DIExpression())
!2266 = distinct !DIGlobalVariable(name: "ptr_mode", scope: !2, file: !3, line: 69, type: !5, isLocal: false, isDefinition: true)
!2267 = !DIGlobalVariableExpression(var: !2268, expr: !DIExpression())
!2268 = distinct !DIGlobalVariable(name: "x_rtl", scope: !2, file: !3, line: 73, type: !2269, isLocal: false, isDefinition: true)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_data", file: !1495, line: 246, size: 3904, elements: !2270)
!2270 = !{!2271, !2280, !2293, !2300, !2328, !2336, !2376, !2377, !2378, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2269, file: !1495, line: 247, baseType: !2272, size: 320)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "expr_status", file: !1495, line: 101, size: 320, elements: !2273)
!2273 = !{!2274, !2275, !2276, !2277, !2278, !2279}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "x_pending_stack_adjust", scope: !2272, file: !1495, line: 104, baseType: !1149, size: 32)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "x_inhibit_defer_pop", scope: !2272, file: !1495, line: 121, baseType: !1149, size: 32, offset: 32)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "x_stack_pointer_delta", scope: !2272, file: !1495, line: 127, baseType: !1149, size: 32, offset: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "x_saveregs_value", scope: !2272, file: !1495, line: 132, baseType: !1125, size: 64, offset: 128)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "x_apply_args_value", scope: !2272, file: !1495, line: 135, baseType: !1125, size: 64, offset: 192)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "x_forced_labels", scope: !2272, file: !1495, line: 138, baseType: !1125, size: 64, offset: 256)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "emit", scope: !2269, file: !1495, line: 248, baseType: !2281, size: 448, offset: 320)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "emit_status", file: !1495, line: 41, size: 448, elements: !2282)
!2282 = !{!2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "x_reg_rtx_no", scope: !2281, file: !1495, line: 44, baseType: !1149, size: 32)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "x_first_label_num", scope: !2281, file: !1495, line: 47, baseType: !1149, size: 32, offset: 32)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "x_first_insn", scope: !2281, file: !1495, line: 54, baseType: !1125, size: 64, offset: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_insn", scope: !2281, file: !1495, line: 55, baseType: !1125, size: 64, offset: 128)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "sequence_stack", scope: !2281, file: !1495, line: 61, baseType: !2171, size: 64, offset: 192)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "x_cur_insn_uid", scope: !2281, file: !1495, line: 65, baseType: !1149, size: 32, offset: 256)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "x_cur_debug_insn_uid", scope: !2281, file: !1495, line: 69, baseType: !1149, size: 32, offset: 288)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_location", scope: !2281, file: !1495, line: 73, baseType: !1368, size: 32, offset: 320)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "regno_pointer_align_length", scope: !2281, file: !1495, line: 79, baseType: !1149, size: 32, offset: 352)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "regno_pointer_align", scope: !2281, file: !1495, line: 84, baseType: !2169, size: 64, offset: 384)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "varasm", scope: !2269, file: !1495, line: 249, baseType: !2294, size: 128, offset: 768)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varasm_status", file: !1495, line: 190, size: 128, elements: !2295)
!2295 = !{!2296, !2299}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !2294, file: !1495, line: 192, baseType: !2297, size: 64)
!2297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2298, size: 64)
!2298 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_constant_pool", file: !1495, line: 192, flags: DIFlagFwdDecl)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_constants", scope: !2294, file: !1495, line: 196, baseType: !7, size: 32, offset: 64)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2269, file: !1495, line: 250, baseType: !2301, size: 768, offset: 896)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "incoming_args", file: !1495, line: 200, size: 768, elements: !2302)
!2302 = !{!2303, !2304, !2305, !2306, !2307, !2327}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "pops_args", scope: !2301, file: !1495, line: 204, baseType: !1149, size: 32)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2301, file: !1495, line: 209, baseType: !1149, size: 32, offset: 32)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "pretend_args_size", scope: !2301, file: !1495, line: 214, baseType: !1149, size: 32, offset: 64)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "arg_offset_rtx", scope: !2301, file: !1495, line: 218, baseType: !1125, size: 64, offset: 128)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2301, file: !1495, line: 222, baseType: !2308, size: 512, offset: 192)
!2308 = !DIDerivedType(tag: DW_TAG_typedef, name: "CUMULATIVE_ARGS", file: !146, line: 1598, baseType: !2309)
!2309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ix86_args", file: !146, line: 1579, size: 512, elements: !2310)
!2310 = !{!2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326}
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !2309, file: !146, line: 1580, baseType: !1149, size: 32)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "nregs", scope: !2309, file: !146, line: 1581, baseType: !1149, size: 32, offset: 32)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !2309, file: !146, line: 1582, baseType: !1149, size: 32, offset: 64)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "fastcall", scope: !2309, file: !146, line: 1583, baseType: !1149, size: 32, offset: 96)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "sse_words", scope: !2309, file: !146, line: 1584, baseType: !1149, size: 32, offset: 128)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "sse_nregs", scope: !2309, file: !146, line: 1585, baseType: !1149, size: 32, offset: 160)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "warn_avx", scope: !2309, file: !146, line: 1586, baseType: !1149, size: 32, offset: 192)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "warn_sse", scope: !2309, file: !146, line: 1587, baseType: !1149, size: 32, offset: 224)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "warn_mmx", scope: !2309, file: !146, line: 1588, baseType: !1149, size: 32, offset: 256)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "sse_regno", scope: !2309, file: !146, line: 1589, baseType: !1149, size: 32, offset: 288)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_words", scope: !2309, file: !146, line: 1590, baseType: !1149, size: 32, offset: 320)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_nregs", scope: !2309, file: !146, line: 1591, baseType: !1149, size: 32, offset: 352)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_regno", scope: !2309, file: !146, line: 1592, baseType: !1149, size: 32, offset: 384)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_vaarg", scope: !2309, file: !146, line: 1593, baseType: !1149, size: 32, offset: 416)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "float_in_sse", scope: !2309, file: !146, line: 1594, baseType: !1149, size: 32, offset: 448)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2309, file: !146, line: 1596, baseType: !145, size: 32, offset: 480)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "internal_arg_pointer", scope: !2301, file: !1495, line: 225, baseType: !1125, size: 64, offset: 704)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "subsections", scope: !2269, file: !1495, line: 251, baseType: !2329, size: 320, offset: 1664)
!2329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function_subsections", file: !1495, line: 229, size: 320, elements: !2330)
!2330 = !{!2331, !2332, !2333, !2334, !2335}
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "hot_section_label", scope: !2329, file: !1495, line: 234, baseType: !1152, size: 64)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "cold_section_label", scope: !2329, file: !1495, line: 235, baseType: !1152, size: 64, offset: 64)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "hot_section_end_label", scope: !2329, file: !1495, line: 236, baseType: !1152, size: 64, offset: 128)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "cold_section_end_label", scope: !2329, file: !1495, line: 237, baseType: !1152, size: 64, offset: 192)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "unlikely_text_section_name", scope: !2329, file: !1495, line: 242, baseType: !1152, size: 64, offset: 256)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2269, file: !1495, line: 252, baseType: !2337, size: 512, offset: 1984)
!2337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_eh", file: !1495, line: 146, size: 512, elements: !2338)
!2338 = !{!2339, !2340, !2341, !2342, !2343, !2344, !2359}
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "ehr_stackadj", scope: !2337, file: !1495, line: 147, baseType: !1125, size: 64)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "ehr_handler", scope: !2337, file: !1495, line: 148, baseType: !1125, size: 64, offset: 64)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "ehr_label", scope: !2337, file: !1495, line: 149, baseType: !1125, size: 64, offset: 128)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "sjlj_fc", scope: !2337, file: !1495, line: 151, baseType: !1125, size: 64, offset: 192)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "sjlj_exit_after", scope: !2337, file: !1495, line: 152, baseType: !1125, size: 64, offset: 256)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "action_record_data", scope: !2337, file: !1495, line: 154, baseType: !2345, size: 64, offset: 320)
!2345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2346, size: 64)
!2346 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2347, line: 29, baseType: !2348)
!2347 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2347, line: 29, size: 96, elements: !2349)
!2349 = !{!2350}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2348, file: !2347, line: 29, baseType: !2351, size: 96)
!2351 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2347, line: 27, baseType: !2352)
!2352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2347, line: 27, size: 96, elements: !2353)
!2353 = !{!2354, !2355, !2356}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2352, file: !2347, line: 27, baseType: !7, size: 32)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2352, file: !2347, line: 27, baseType: !7, size: 32, offset: 32)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2352, file: !2347, line: 27, baseType: !2357, size: 8, offset: 64)
!2357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2358, size: 8, elements: !1164)
!2358 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2347, line: 26, baseType: !1360)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_record", scope: !2337, file: !1495, line: 156, baseType: !2360, size: 128, offset: 384)
!2360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2361, size: 128, elements: !1200)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_call_site_record_gc", file: !1495, line: 143, baseType: !2363)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_call_site_record_gc", file: !1495, line: 143, size: 128, elements: !2364)
!2364 = !{!2365}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2363, file: !1495, line: 143, baseType: !2366, size: 128)
!2366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_call_site_record_base", file: !1495, line: 142, baseType: !2367)
!2367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_call_site_record_base", file: !1495, line: 142, size: 128, elements: !2368)
!2368 = !{!2369, !2370, !2371}
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2367, file: !1495, line: 142, baseType: !7, size: 32)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2367, file: !1495, line: 142, baseType: !7, size: 32, offset: 32)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2367, file: !1495, line: 142, baseType: !2372, size: 64, offset: 64)
!2372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2373, size: 64, elements: !1164)
!2373 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_site_record", file: !1495, line: 141, baseType: !2374)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2375, size: 64)
!2375 = !DICompositeType(tag: DW_TAG_structure_type, name: "call_site_record_d", file: !1495, line: 141, flags: DIFlagFwdDecl)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "outgoing_args_size", scope: !2269, file: !1495, line: 258, baseType: !1149, size: 32, offset: 2496)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "return_rtx", scope: !2269, file: !1495, line: 264, baseType: !1125, size: 64, offset: 2560)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "hard_reg_initial_vals", scope: !2269, file: !1495, line: 268, baseType: !2379, size: 64, offset: 2624)
!2379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2380, size: 64)
!2380 = !DICompositeType(tag: DW_TAG_structure_type, name: "initial_value_struct", file: !1495, line: 268, flags: DIFlagFwdDecl)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "stack_protect_guard", scope: !2269, file: !1495, line: 272, baseType: !1247, size: 64, offset: 2688)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "x_nonlocal_goto_handler_labels", scope: !2269, file: !1495, line: 276, baseType: !1125, size: 64, offset: 2752)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "x_return_label", scope: !2269, file: !1495, line: 281, baseType: !1125, size: 64, offset: 2816)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "x_naked_return_label", scope: !2269, file: !1495, line: 286, baseType: !1125, size: 64, offset: 2880)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "x_stack_slot_list", scope: !2269, file: !1495, line: 290, baseType: !1125, size: 64, offset: 2944)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "x_stack_check_probe_note", scope: !2269, file: !1495, line: 293, baseType: !1125, size: 64, offset: 3008)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "x_arg_pointer_save_area", scope: !2269, file: !1495, line: 299, baseType: !1125, size: 64, offset: 3072)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "drap_reg", scope: !2269, file: !1495, line: 302, baseType: !1125, size: 64, offset: 3136)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "x_frame_offset", scope: !2269, file: !1495, line: 307, baseType: !1216, size: 64, offset: 3200)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "x_parm_birth_insn", scope: !2269, file: !1495, line: 310, baseType: !1125, size: 64, offset: 3264)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "x_used_temp_slots", scope: !2269, file: !1495, line: 313, baseType: !2392, size: 64, offset: 3328)
!2392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2393, size: 64)
!2393 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_temp_slot_p_gc", file: !1495, line: 172, baseType: !2394)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_temp_slot_p_gc", file: !1495, line: 172, size: 128, elements: !2395)
!2395 = !{!2396}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2394, file: !1495, line: 172, baseType: !2397, size: 128)
!2397 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_temp_slot_p_base", file: !1495, line: 171, baseType: !2398)
!2398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_temp_slot_p_base", file: !1495, line: 171, size: 128, elements: !2399)
!2399 = !{!2400, !2401, !2402}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2398, file: !1495, line: 171, baseType: !7, size: 32)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2398, file: !1495, line: 171, baseType: !7, size: 32, offset: 32)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2398, file: !1495, line: 171, baseType: !2403, size: 64, offset: 64)
!2403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2404, size: 64, elements: !1164)
!2404 = !DIDerivedType(tag: DW_TAG_typedef, name: "temp_slot_p", file: !1495, line: 168, baseType: !2405)
!2405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2406, size: 64)
!2406 = !DICompositeType(tag: DW_TAG_structure_type, name: "temp_slot", file: !1495, line: 167, flags: DIFlagFwdDecl)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "x_avail_temp_slots", scope: !2269, file: !1495, line: 316, baseType: !2405, size: 64, offset: 3392)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "x_temp_slot_level", scope: !2269, file: !1495, line: 319, baseType: !1149, size: 32, offset: 3456)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "stack_alignment_needed", scope: !2269, file: !1495, line: 323, baseType: !7, size: 32, offset: 3488)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_stack_boundary", scope: !2269, file: !1495, line: 327, baseType: !7, size: 32, offset: 3520)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "parm_stack_boundary", scope: !2269, file: !1495, line: 330, baseType: !7, size: 32, offset: 3552)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "max_used_stack_slot_alignment", scope: !2269, file: !1495, line: 333, baseType: !7, size: 32, offset: 3584)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "stack_alignment_estimated", scope: !2269, file: !1495, line: 342, baseType: !7, size: 32, offset: 3616)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "epilogue_delay_list", scope: !2269, file: !1495, line: 348, baseType: !1125, size: 64, offset: 3648)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prior_frames", scope: !2269, file: !1495, line: 352, baseType: !1360, size: 8, offset: 3712)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "calls_eh_return", scope: !2269, file: !1495, line: 355, baseType: !1360, size: 8, offset: 3720)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "saves_all_registers", scope: !2269, file: !1495, line: 359, baseType: !1360, size: 8, offset: 3728)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_goto", scope: !2269, file: !1495, line: 363, baseType: !1360, size: 8, offset: 3736)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "has_asm_statement", scope: !2269, file: !1495, line: 366, baseType: !1360, size: 8, offset: 3744)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "all_throwers_are_sibcalls", scope: !2269, file: !1495, line: 373, baseType: !1360, size: 8, offset: 3752)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "limit_stack", scope: !2269, file: !1495, line: 377, baseType: !1360, size: 8, offset: 3760)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !2269, file: !1495, line: 380, baseType: !1360, size: 8, offset: 3768)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "uses_const_pool", scope: !2269, file: !1495, line: 383, baseType: !1360, size: 8, offset: 3776)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "uses_pic_offset_table", scope: !2269, file: !1495, line: 386, baseType: !1360, size: 8, offset: 3784)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "uses_eh_lsda", scope: !2269, file: !1495, line: 389, baseType: !1360, size: 8, offset: 3792)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "tail_call_emit", scope: !2269, file: !1495, line: 392, baseType: !1360, size: 8, offset: 3800)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "arg_pointer_save_area_init", scope: !2269, file: !1495, line: 395, baseType: !1360, size: 8, offset: 3808)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "frame_pointer_needed", scope: !2269, file: !1495, line: 399, baseType: !1360, size: 8, offset: 3816)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_hot_insn_p", scope: !2269, file: !1495, line: 402, baseType: !1360, size: 8, offset: 3824)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "stack_realign_needed", scope: !2269, file: !1495, line: 409, baseType: !1360, size: 8, offset: 3832)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "stack_realign_tried", scope: !2269, file: !1495, line: 414, baseType: !1360, size: 8, offset: 3840)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "need_drap", scope: !2269, file: !1495, line: 418, baseType: !1360, size: 8, offset: 3848)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "stack_realign_processed", scope: !2269, file: !1495, line: 423, baseType: !1360, size: 8, offset: 3856)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "stack_realign_finalized", scope: !2269, file: !1495, line: 427, baseType: !1360, size: 8, offset: 3864)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "dbr_scheduled_p", scope: !2269, file: !1495, line: 430, baseType: !1360, size: 8, offset: 3872)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow", scope: !2269, file: !1495, line: 435, baseType: !1360, size: 8, offset: 3880)
!2437 = !DIGlobalVariableExpression(var: !2438, expr: !DIExpression())
!2438 = distinct !DIGlobalVariable(name: "regno_reg_rtx", scope: !2, file: !3, line: 80, type: !2170, isLocal: false, isDefinition: true)
!2439 = !DIGlobalVariableExpression(var: !2440, expr: !DIExpression())
!2440 = distinct !DIGlobalVariable(name: "global_rtl", scope: !2, file: !3, line: 92, type: !2441, isLocal: false, isDefinition: true)
!2441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 704, elements: !2442)
!2442 = !{!2443}
!2443 = !DISubrange(count: 11)
!2444 = !DIGlobalVariableExpression(var: !2445, expr: !DIExpression())
!2445 = distinct !DIGlobalVariable(name: "static_regno_reg_rtx", scope: !2, file: !3, line: 98, type: !2446, isLocal: true, isDefinition: true)
!2446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 3392, elements: !2447)
!2447 = !{!2448}
!2448 = !DISubrange(count: 53)
!2449 = !DIGlobalVariableExpression(var: !2450, expr: !DIExpression())
!2450 = distinct !DIGlobalVariable(name: "const_tiny_rtx", scope: !2, file: !3, line: 104, type: !2451, isLocal: false, isDefinition: true)
!2451 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 16704, elements: !2452)
!2452 = !{!1319, !2453}
!2453 = !DISubrange(count: 87)
!2454 = !DIGlobalVariableExpression(var: !2455, expr: !DIExpression())
!2455 = distinct !DIGlobalVariable(name: "const_true_rtx", scope: !2, file: !3, line: 106, type: !1125, isLocal: false, isDefinition: true)
!2456 = !DIGlobalVariableExpression(var: !2457, expr: !DIExpression())
!2457 = distinct !DIGlobalVariable(name: "dconst0", scope: !2, file: !3, line: 108, type: !1307, isLocal: false, isDefinition: true)
!2458 = !DIGlobalVariableExpression(var: !2459, expr: !DIExpression())
!2459 = distinct !DIGlobalVariable(name: "dconst1", scope: !2, file: !3, line: 109, type: !1307, isLocal: false, isDefinition: true)
!2460 = !DIGlobalVariableExpression(var: !2461, expr: !DIExpression())
!2461 = distinct !DIGlobalVariable(name: "dconst2", scope: !2, file: !3, line: 110, type: !1307, isLocal: false, isDefinition: true)
!2462 = !DIGlobalVariableExpression(var: !2463, expr: !DIExpression())
!2463 = distinct !DIGlobalVariable(name: "dconstm1", scope: !2, file: !3, line: 111, type: !1307, isLocal: false, isDefinition: true)
!2464 = !DIGlobalVariableExpression(var: !2465, expr: !DIExpression())
!2465 = distinct !DIGlobalVariable(name: "dconsthalf", scope: !2, file: !3, line: 112, type: !1307, isLocal: false, isDefinition: true)
!2466 = !DIGlobalVariableExpression(var: !2467, expr: !DIExpression())
!2467 = distinct !DIGlobalVariable(name: "fconst0", scope: !2, file: !3, line: 115, type: !2468, isLocal: false, isDefinition: true)
!2468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1326, size: 3456, elements: !2469)
!2469 = !{!2470}
!2470 = !DISubrange(count: 18)
!2471 = !DIGlobalVariableExpression(var: !2472, expr: !DIExpression())
!2472 = distinct !DIGlobalVariable(name: "fconst1", scope: !2, file: !3, line: 116, type: !2473, isLocal: false, isDefinition: true)
!2473 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1326, size: 1536, elements: !2474)
!2474 = !{!2475}
!2475 = !DISubrange(count: 8)
!2476 = !DIGlobalVariableExpression(var: !2477, expr: !DIExpression())
!2477 = distinct !DIGlobalVariable(name: "pic_offset_table_rtx", scope: !2, file: !3, line: 136, type: !1125, isLocal: false, isDefinition: true)
!2478 = !DIGlobalVariableExpression(var: !2479, expr: !DIExpression())
!2479 = distinct !DIGlobalVariable(name: "return_address_pointer_rtx", scope: !2, file: !3, line: 140, type: !1125, isLocal: false, isDefinition: true)
!2480 = !DIGlobalVariableExpression(var: !2481, expr: !DIExpression())
!2481 = distinct !DIGlobalVariable(name: "const_int_rtx", scope: !2, file: !3, line: 147, type: !2482, isLocal: false, isDefinition: true)
!2482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 8256, elements: !2483)
!2483 = !{!2484}
!2484 = !DISubrange(count: 129)
!2485 = !DIGlobalVariableExpression(var: !2486, expr: !DIExpression())
!2486 = distinct !DIGlobalVariable(name: "const_int_htab", scope: !2, file: !3, line: 153, type: !1612, isLocal: true, isDefinition: true)
!2487 = !DIGlobalVariableExpression(var: !2488, expr: !DIExpression())
!2488 = distinct !DIGlobalVariable(name: "mem_attrs_htab", scope: !2, file: !3, line: 157, type: !1612, isLocal: true, isDefinition: true)
!2489 = !DIGlobalVariableExpression(var: !2490, expr: !DIExpression())
!2490 = distinct !DIGlobalVariable(name: "reg_attrs_htab", scope: !2, file: !3, line: 161, type: !1612, isLocal: true, isDefinition: true)
!2491 = !DIGlobalVariableExpression(var: !2492, expr: !DIExpression())
!2492 = distinct !DIGlobalVariable(name: "const_double_htab", scope: !2, file: !3, line: 165, type: !1612, isLocal: true, isDefinition: true)
!2493 = !DIGlobalVariableExpression(var: !2494, expr: !DIExpression())
!2494 = distinct !DIGlobalVariable(name: "const_fixed_htab", scope: !2, file: !3, line: 169, type: !1612, isLocal: true, isDefinition: true)
!2495 = !DIGlobalVariableExpression(var: !2496, expr: !DIExpression())
!2496 = distinct !DIGlobalVariable(name: "spill_slot_decl", scope: !2, file: !3, line: 2211, type: !1247, isLocal: true, isDefinition: true)
!2497 = !DIGlobalVariableExpression(var: !2498, expr: !DIExpression())
!2498 = distinct !DIGlobalVariable(name: "free_sequence_stack", scope: !2, file: !3, line: 5236, type: !2171, isLocal: true, isDefinition: true)
!2499 = !DIGlobalVariableExpression(var: !2500, expr: !DIExpression())
!2500 = distinct !DIGlobalVariable(name: "copy_insn_scratch_in", scope: !2, file: !3, line: 5380, type: !2501, isLocal: true, isDefinition: true)
!2501 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 1920, elements: !2502)
!2502 = !{!2503}
!2503 = !DISubrange(count: 30)
!2504 = !DIGlobalVariableExpression(var: !2505, expr: !DIExpression())
!2505 = distinct !DIGlobalVariable(name: "copy_insn_scratch_out", scope: !2, file: !3, line: 5381, type: !2501, isLocal: true, isDefinition: true)
!2506 = !DIGlobalVariableExpression(var: !2507, expr: !DIExpression())
!2507 = distinct !DIGlobalVariable(name: "copy_insn_n_scratches", scope: !2, file: !3, line: 5382, type: !1149, isLocal: true, isDefinition: true)
!2508 = !DIGlobalVariableExpression(var: !2509, expr: !DIExpression())
!2509 = distinct !DIGlobalVariable(name: "orig_asm_operands_vector", scope: !2, file: !3, line: 5387, type: !1157, isLocal: true, isDefinition: true)
!2510 = !DIGlobalVariableExpression(var: !2511, expr: !DIExpression())
!2511 = distinct !DIGlobalVariable(name: "copy_asm_operands_vector", scope: !2, file: !3, line: 5392, type: !1157, isLocal: true, isDefinition: true)
!2512 = !DIGlobalVariableExpression(var: !2513, expr: !DIExpression())
!2513 = distinct !DIGlobalVariable(name: "orig_asm_constraints_vector", scope: !2, file: !3, line: 5395, type: !1157, isLocal: true, isDefinition: true)
!2514 = !DIGlobalVariableExpression(var: !2515, expr: !DIExpression())
!2515 = distinct !DIGlobalVariable(name: "copy_asm_constraints_vector", scope: !2, file: !3, line: 5396, type: !1157, isLocal: true, isDefinition: true)
!2516 = !DIGlobalVariableExpression(var: !2517, expr: !DIExpression())
!2517 = distinct !DIGlobalVariable(name: "hard_reg_clobbers", scope: !2, file: !3, line: 6037, type: !2518, isLocal: true, isDefinition: true)
!2518 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 295104, elements: !2519)
!2519 = !{!2453, !2448}
!2520 = !DIGlobalVariableExpression(var: !2521, expr: !DIExpression())
!2521 = distinct !DIGlobalVariable(name: "label_num", scope: !2, file: !3, line: 85, type: !1149, isLocal: true, isDefinition: true)
!2522 = !{i32 7, !"Dwarf Version", i32 4}
!2523 = !{i32 2, !"Debug Info Version", i32 3}
!2524 = !{i32 1, !"wchar_size", i32 4}
!2525 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2526 = distinct !DISubprogram(name: "gen_raw_REG", scope: !3, file: !3, line: 423, type: !2527, scopeLine: 424, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2527 = !DISubroutineType(types: !2528)
!2528 = !{!1125, !5, !1149}
!2529 = !{}
!2530 = !DILocalVariable(name: "mode", arg: 1, scope: !2526, file: !3, line: 423, type: !5)
!2531 = !DILocation(line: 423, column: 32, scope: !2526)
!2532 = !DILocalVariable(name: "regno", arg: 2, scope: !2526, file: !3, line: 423, type: !1149)
!2533 = !DILocation(line: 423, column: 42, scope: !2526)
!2534 = !DILocalVariable(name: "x", scope: !2526, file: !3, line: 425, type: !1125)
!2535 = !DILocation(line: 425, column: 7, scope: !2526)
!2536 = !DILocation(line: 425, column: 11, scope: !2526)
!2537 = !DILocation(line: 426, column: 24, scope: !2526)
!2538 = !DILocation(line: 426, column: 3, scope: !2526)
!2539 = !DILocation(line: 426, column: 22, scope: !2526)
!2540 = !DILocation(line: 427, column: 10, scope: !2526)
!2541 = !DILocation(line: 427, column: 3, scope: !2526)
!2542 = distinct !DISubprogram(name: "gen_rtx_CONST_INT", scope: !3, file: !3, line: 435, type: !2543, scopeLine: 436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2543 = !DISubroutineType(types: !2544)
!2544 = !{!1125, !5, !1216}
!2545 = !DILocalVariable(name: "mode", arg: 1, scope: !2542, file: !3, line: 435, type: !5)
!2546 = !DILocation(line: 435, column: 38, scope: !2542)
!2547 = !DILocalVariable(name: "arg", arg: 2, scope: !2542, file: !3, line: 435, type: !1216)
!2548 = !DILocation(line: 435, column: 75, scope: !2542)
!2549 = !DILocalVariable(name: "slot", scope: !2542, file: !3, line: 437, type: !1634)
!2550 = !DILocation(line: 437, column: 10, scope: !2542)
!2551 = !DILocation(line: 439, column: 7, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2542, file: !3, line: 439, column: 7)
!2553 = !DILocation(line: 439, column: 11, scope: !2552)
!2554 = !DILocation(line: 439, column: 36, scope: !2552)
!2555 = !DILocation(line: 439, column: 39, scope: !2552)
!2556 = !DILocation(line: 439, column: 43, scope: !2552)
!2557 = !DILocation(line: 439, column: 7, scope: !2542)
!2558 = !DILocation(line: 440, column: 26, scope: !2552)
!2559 = !DILocation(line: 440, column: 30, scope: !2552)
!2560 = !DILocation(line: 440, column: 12, scope: !2552)
!2561 = !DILocation(line: 440, column: 5, scope: !2552)
!2562 = !DILocation(line: 448, column: 36, scope: !2542)
!2563 = !DILocation(line: 448, column: 52, scope: !2542)
!2564 = !DILocation(line: 449, column: 20, scope: !2542)
!2565 = !DILocation(line: 449, column: 8, scope: !2542)
!2566 = !DILocation(line: 448, column: 10, scope: !2542)
!2567 = !DILocation(line: 448, column: 8, scope: !2542)
!2568 = !DILocation(line: 450, column: 8, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2542, file: !3, line: 450, column: 7)
!2570 = !DILocation(line: 450, column: 7, scope: !2569)
!2571 = !DILocation(line: 450, column: 13, scope: !2569)
!2572 = !DILocation(line: 450, column: 7, scope: !2542)
!2573 = !DILocation(line: 451, column: 13, scope: !2569)
!2574 = !DILocation(line: 451, column: 6, scope: !2569)
!2575 = !DILocation(line: 451, column: 11, scope: !2569)
!2576 = !DILocation(line: 451, column: 5, scope: !2569)
!2577 = !DILocation(line: 453, column: 17, scope: !2542)
!2578 = !DILocation(line: 453, column: 16, scope: !2542)
!2579 = !DILocation(line: 453, column: 10, scope: !2542)
!2580 = !DILocation(line: 453, column: 3, scope: !2542)
!2581 = !DILocation(line: 454, column: 1, scope: !2542)
!2582 = distinct !DISubprogram(name: "gen_int_mode", scope: !3, file: !3, line: 457, type: !2583, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2583 = !DISubroutineType(types: !2584)
!2584 = !{!1125, !1216, !5}
!2585 = !DILocalVariable(name: "c", arg: 1, scope: !2582, file: !3, line: 457, type: !1216)
!2586 = !DILocation(line: 457, column: 29, scope: !2582)
!2587 = !DILocalVariable(name: "mode", arg: 2, scope: !2582, file: !3, line: 457, type: !5)
!2588 = !DILocation(line: 457, column: 50, scope: !2582)
!2589 = !DILocation(line: 459, column: 10, scope: !2582)
!2590 = !DILocation(line: 459, column: 3, scope: !2582)
!2591 = distinct !DISubprogram(name: "const_double_from_real_value", scope: !3, file: !3, line: 482, type: !2592, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2592 = !DISubroutineType(types: !2593)
!2593 = !{!1125, !1307, !5}
!2594 = !DILocalVariable(name: "value", arg: 1, scope: !2591, file: !3, line: 482, type: !1307)
!2595 = !DILocation(line: 482, column: 47, scope: !2591)
!2596 = !DILocalVariable(name: "mode", arg: 2, scope: !2591, file: !3, line: 482, type: !5)
!2597 = !DILocation(line: 482, column: 72, scope: !2591)
!2598 = !DILocalVariable(name: "real", scope: !2591, file: !3, line: 484, type: !1125)
!2599 = !DILocation(line: 484, column: 7, scope: !2591)
!2600 = !DILocation(line: 484, column: 14, scope: !2591)
!2601 = !DILocation(line: 485, column: 3, scope: !2591)
!2602 = !DILocation(line: 487, column: 3, scope: !2591)
!2603 = !DILocation(line: 487, column: 9, scope: !2591)
!2604 = !DILocation(line: 487, column: 11, scope: !2591)
!2605 = !DILocation(line: 487, column: 16, scope: !2591)
!2606 = !DILocation(line: 489, column: 31, scope: !2591)
!2607 = !DILocation(line: 489, column: 10, scope: !2591)
!2608 = !DILocation(line: 489, column: 3, scope: !2591)
!2609 = distinct !DISubprogram(name: "lookup_const_double", scope: !3, file: !3, line: 470, type: !2610, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2610 = !DISubroutineType(types: !2611)
!2611 = !{!1125, !1125}
!2612 = !DILocalVariable(name: "real", arg: 1, scope: !2609, file: !3, line: 470, type: !1125)
!2613 = !DILocation(line: 470, column: 26, scope: !2609)
!2614 = !DILocalVariable(name: "slot", scope: !2609, file: !3, line: 472, type: !1634)
!2615 = !DILocation(line: 472, column: 10, scope: !2609)
!2616 = !DILocation(line: 472, column: 33, scope: !2609)
!2617 = !DILocation(line: 472, column: 52, scope: !2609)
!2618 = !DILocation(line: 472, column: 17, scope: !2609)
!2619 = !DILocation(line: 473, column: 8, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2609, file: !3, line: 473, column: 7)
!2621 = !DILocation(line: 473, column: 7, scope: !2620)
!2622 = !DILocation(line: 473, column: 13, scope: !2620)
!2623 = !DILocation(line: 473, column: 7, scope: !2609)
!2624 = !DILocation(line: 474, column: 13, scope: !2620)
!2625 = !DILocation(line: 474, column: 6, scope: !2620)
!2626 = !DILocation(line: 474, column: 11, scope: !2620)
!2627 = !DILocation(line: 474, column: 5, scope: !2620)
!2628 = !DILocation(line: 476, column: 17, scope: !2609)
!2629 = !DILocation(line: 476, column: 16, scope: !2609)
!2630 = !DILocation(line: 476, column: 10, scope: !2609)
!2631 = !DILocation(line: 476, column: 3, scope: !2609)
!2632 = distinct !DISubprogram(name: "const_fixed_from_fixed_value", scope: !3, file: !3, line: 510, type: !2633, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2633 = !DISubroutineType(types: !2634)
!2634 = !{!1125, !1326, !5}
!2635 = !DILocalVariable(name: "value", arg: 1, scope: !2632, file: !3, line: 510, type: !1326)
!2636 = !DILocation(line: 510, column: 48, scope: !2632)
!2637 = !DILocalVariable(name: "mode", arg: 2, scope: !2632, file: !3, line: 510, type: !5)
!2638 = !DILocation(line: 510, column: 73, scope: !2632)
!2639 = !DILocalVariable(name: "fixed", scope: !2632, file: !3, line: 512, type: !1125)
!2640 = !DILocation(line: 512, column: 7, scope: !2632)
!2641 = !DILocation(line: 512, column: 15, scope: !2632)
!2642 = !DILocation(line: 513, column: 3, scope: !2632)
!2643 = !DILocation(line: 515, column: 3, scope: !2632)
!2644 = !DILocation(line: 515, column: 10, scope: !2632)
!2645 = !DILocation(line: 515, column: 12, scope: !2632)
!2646 = !DILocation(line: 515, column: 17, scope: !2632)
!2647 = !DILocation(line: 517, column: 30, scope: !2632)
!2648 = !DILocation(line: 517, column: 10, scope: !2632)
!2649 = !DILocation(line: 517, column: 3, scope: !2632)
!2650 = distinct !DISubprogram(name: "lookup_const_fixed", scope: !3, file: !3, line: 497, type: !2610, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2651 = !DILocalVariable(name: "fixed", arg: 1, scope: !2650, file: !3, line: 497, type: !1125)
!2652 = !DILocation(line: 497, column: 25, scope: !2650)
!2653 = !DILocalVariable(name: "slot", scope: !2650, file: !3, line: 499, type: !1634)
!2654 = !DILocation(line: 499, column: 10, scope: !2650)
!2655 = !DILocation(line: 499, column: 33, scope: !2650)
!2656 = !DILocation(line: 499, column: 51, scope: !2650)
!2657 = !DILocation(line: 499, column: 17, scope: !2650)
!2658 = !DILocation(line: 500, column: 8, scope: !2659)
!2659 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 500, column: 7)
!2660 = !DILocation(line: 500, column: 7, scope: !2659)
!2661 = !DILocation(line: 500, column: 13, scope: !2659)
!2662 = !DILocation(line: 500, column: 7, scope: !2650)
!2663 = !DILocation(line: 501, column: 13, scope: !2659)
!2664 = !DILocation(line: 501, column: 6, scope: !2659)
!2665 = !DILocation(line: 501, column: 11, scope: !2659)
!2666 = !DILocation(line: 501, column: 5, scope: !2659)
!2667 = !DILocation(line: 503, column: 17, scope: !2650)
!2668 = !DILocation(line: 503, column: 16, scope: !2650)
!2669 = !DILocation(line: 503, column: 10, scope: !2650)
!2670 = !DILocation(line: 503, column: 3, scope: !2650)
!2671 = distinct !DISubprogram(name: "immed_double_const", scope: !3, file: !3, line: 526, type: !2672, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2672 = !DISubroutineType(types: !2673)
!2673 = !{!1125, !1216, !1216, !5}
!2674 = !DILocalVariable(name: "i0", arg: 1, scope: !2671, file: !3, line: 526, type: !1216)
!2675 = !DILocation(line: 526, column: 35, scope: !2671)
!2676 = !DILocalVariable(name: "i1", arg: 2, scope: !2671, file: !3, line: 526, type: !1216)
!2677 = !DILocation(line: 526, column: 53, scope: !2671)
!2678 = !DILocalVariable(name: "mode", arg: 3, scope: !2671, file: !3, line: 526, type: !5)
!2679 = !DILocation(line: 526, column: 75, scope: !2671)
!2680 = !DILocalVariable(name: "value", scope: !2671, file: !3, line: 528, type: !1125)
!2681 = !DILocation(line: 528, column: 7, scope: !2671)
!2682 = !DILocalVariable(name: "i", scope: !2671, file: !3, line: 529, type: !7)
!2683 = !DILocation(line: 529, column: 16, scope: !2671)
!2684 = !DILocation(line: 541, column: 7, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 541, column: 7)
!2686 = !DILocation(line: 541, column: 12, scope: !2685)
!2687 = !DILocation(line: 541, column: 7, scope: !2671)
!2688 = !DILocation(line: 543, column: 7, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 542, column: 5)
!2690 = !DILocation(line: 549, column: 11, scope: !2691)
!2691 = distinct !DILexicalBlock(scope: !2689, file: !3, line: 549, column: 11)
!2692 = !DILocation(line: 549, column: 35, scope: !2691)
!2693 = !DILocation(line: 549, column: 11, scope: !2689)
!2694 = !DILocation(line: 550, column: 23, scope: !2691)
!2695 = !DILocation(line: 550, column: 27, scope: !2691)
!2696 = !DILocation(line: 550, column: 9, scope: !2691)
!2697 = !DILocation(line: 550, column: 2, scope: !2691)
!2698 = !DILocation(line: 552, column: 7, scope: !2689)
!2699 = !DILocation(line: 553, column: 5, scope: !2689)
!2700 = !DILocation(line: 556, column: 8, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 556, column: 7)
!2702 = !DILocation(line: 556, column: 11, scope: !2701)
!2703 = !DILocation(line: 556, column: 16, scope: !2701)
!2704 = !DILocation(line: 556, column: 19, scope: !2701)
!2705 = !DILocation(line: 556, column: 22, scope: !2701)
!2706 = !DILocation(line: 556, column: 28, scope: !2701)
!2707 = !DILocation(line: 556, column: 32, scope: !2701)
!2708 = !DILocation(line: 556, column: 35, scope: !2701)
!2709 = !DILocation(line: 556, column: 41, scope: !2701)
!2710 = !DILocation(line: 556, column: 44, scope: !2701)
!2711 = !DILocation(line: 556, column: 47, scope: !2701)
!2712 = !DILocation(line: 556, column: 7, scope: !2671)
!2713 = !DILocation(line: 557, column: 12, scope: !2701)
!2714 = !DILocation(line: 557, column: 5, scope: !2701)
!2715 = !DILocation(line: 560, column: 11, scope: !2671)
!2716 = !DILocation(line: 560, column: 9, scope: !2671)
!2717 = !DILocation(line: 561, column: 3, scope: !2671)
!2718 = !DILocation(line: 563, column: 30, scope: !2671)
!2719 = !DILocation(line: 563, column: 3, scope: !2671)
!2720 = !DILocation(line: 563, column: 28, scope: !2671)
!2721 = !DILocation(line: 564, column: 31, scope: !2671)
!2722 = !DILocation(line: 564, column: 3, scope: !2671)
!2723 = !DILocation(line: 564, column: 29, scope: !2671)
!2724 = !DILocation(line: 566, column: 10, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 566, column: 3)
!2726 = !DILocation(line: 566, column: 8, scope: !2725)
!2727 = !DILocation(line: 566, column: 15, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 566, column: 3)
!2729 = !DILocation(line: 566, column: 17, scope: !2728)
!2730 = !DILocation(line: 566, column: 3, scope: !2725)
!2731 = !DILocation(line: 567, column: 5, scope: !2728)
!2732 = !DILocation(line: 567, column: 22, scope: !2728)
!2733 = !DILocation(line: 566, column: 54, scope: !2728)
!2734 = !DILocation(line: 566, column: 3, scope: !2728)
!2735 = distinct !{!2735, !2730, !2736}
!2736 = !DILocation(line: 567, column: 24, scope: !2725)
!2737 = !DILocation(line: 569, column: 31, scope: !2671)
!2738 = !DILocation(line: 569, column: 10, scope: !2671)
!2739 = !DILocation(line: 569, column: 3, scope: !2671)
!2740 = !DILocation(line: 570, column: 1, scope: !2671)
!2741 = distinct !DISubprogram(name: "gen_rtx_REG", scope: !3, file: !3, line: 573, type: !2742, scopeLine: 574, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2742 = !DISubroutineType(types: !2743)
!2743 = !{!1125, !5, !7}
!2744 = !DILocalVariable(name: "mode", arg: 1, scope: !2741, file: !3, line: 573, type: !5)
!2745 = !DILocation(line: 573, column: 32, scope: !2741)
!2746 = !DILocalVariable(name: "regno", arg: 2, scope: !2741, file: !3, line: 573, type: !7)
!2747 = !DILocation(line: 573, column: 51, scope: !2741)
!2748 = !DILocation(line: 589, column: 7, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2741, file: !3, line: 589, column: 7)
!2750 = !DILocation(line: 589, column: 12, scope: !2749)
!2751 = !DILocation(line: 589, column: 21, scope: !2749)
!2752 = !DILocation(line: 589, column: 25, scope: !2749)
!2753 = !DILocation(line: 589, column: 7, scope: !2741)
!2754 = !DILocation(line: 591, column: 11, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 591, column: 11)
!2756 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 590, column: 5)
!2757 = !DILocation(line: 591, column: 17, scope: !2755)
!2758 = !DILocation(line: 592, column: 4, scope: !2755)
!2759 = !DILocation(line: 592, column: 9, scope: !2755)
!2760 = !DILocation(line: 592, column: 26, scope: !2755)
!2761 = !DILocation(line: 592, column: 29, scope: !2755)
!2762 = !DILocation(line: 591, column: 11, scope: !2756)
!2763 = !DILocation(line: 593, column: 9, scope: !2755)
!2764 = !DILocation(line: 593, column: 2, scope: !2755)
!2765 = !DILocation(line: 595, column: 11, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 595, column: 11)
!2767 = !DILocation(line: 595, column: 17, scope: !2766)
!2768 = !DILocation(line: 596, column: 4, scope: !2766)
!2769 = !DILocation(line: 596, column: 9, scope: !2766)
!2770 = !DILocation(line: 596, column: 26, scope: !2766)
!2771 = !DILocation(line: 596, column: 29, scope: !2766)
!2772 = !DILocation(line: 595, column: 11, scope: !2756)
!2773 = !DILocation(line: 597, column: 9, scope: !2766)
!2774 = !DILocation(line: 597, column: 2, scope: !2766)
!2775 = !DILocation(line: 600, column: 11, scope: !2776)
!2776 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 600, column: 11)
!2777 = !DILocation(line: 600, column: 17, scope: !2776)
!2778 = !DILocation(line: 600, column: 11, scope: !2756)
!2779 = !DILocation(line: 601, column: 9, scope: !2776)
!2780 = !DILocation(line: 601, column: 2, scope: !2776)
!2781 = !DILocation(line: 607, column: 11, scope: !2782)
!2782 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 607, column: 11)
!2783 = !DILocation(line: 607, column: 31, scope: !2782)
!2784 = !DILocation(line: 607, column: 17, scope: !2782)
!2785 = !DILocation(line: 608, column: 4, scope: !2782)
!2786 = !DILocation(line: 608, column: 18, scope: !2782)
!2787 = !DILocation(line: 608, column: 7, scope: !2782)
!2788 = !DILocation(line: 607, column: 11, scope: !2756)
!2789 = !DILocation(line: 609, column: 9, scope: !2782)
!2790 = !DILocation(line: 609, column: 2, scope: !2782)
!2791 = !DILocation(line: 610, column: 11, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 610, column: 11)
!2793 = !DILocation(line: 610, column: 17, scope: !2792)
!2794 = !DILocation(line: 610, column: 11, scope: !2756)
!2795 = !DILocation(line: 611, column: 9, scope: !2792)
!2796 = !DILocation(line: 611, column: 2, scope: !2792)
!2797 = !DILocation(line: 612, column: 5, scope: !2756)
!2798 = !DILocation(line: 634, column: 23, scope: !2741)
!2799 = !DILocation(line: 634, column: 29, scope: !2741)
!2800 = !DILocation(line: 634, column: 10, scope: !2741)
!2801 = !DILocation(line: 634, column: 3, scope: !2741)
!2802 = !DILocation(line: 635, column: 1, scope: !2741)
!2803 = distinct !DISubprogram(name: "rhs_regno", scope: !378, file: !378, line: 1051, type: !2804, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2804 = !DISubroutineType(types: !2805)
!2805 = !{!7, !2177}
!2806 = !DILocalVariable(name: "x", arg: 1, scope: !2803, file: !378, line: 1051, type: !2177)
!2807 = !DILocation(line: 1051, column: 22, scope: !2803)
!2808 = !DILocation(line: 1053, column: 10, scope: !2803)
!2809 = !DILocation(line: 1053, column: 3, scope: !2803)
!2810 = distinct !DISubprogram(name: "gen_rtx_MEM", scope: !3, file: !3, line: 638, type: !2811, scopeLine: 639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2811 = !DISubroutineType(types: !2812)
!2812 = !{!1125, !5, !1125}
!2813 = !DILocalVariable(name: "mode", arg: 1, scope: !2810, file: !3, line: 638, type: !5)
!2814 = !DILocation(line: 638, column: 32, scope: !2810)
!2815 = !DILocalVariable(name: "addr", arg: 2, scope: !2810, file: !3, line: 638, type: !1125)
!2816 = !DILocation(line: 638, column: 42, scope: !2810)
!2817 = !DILocalVariable(name: "rt", scope: !2810, file: !3, line: 640, type: !1125)
!2818 = !DILocation(line: 640, column: 7, scope: !2810)
!2819 = !DILocation(line: 640, column: 12, scope: !2810)
!2820 = !DILocation(line: 644, column: 3, scope: !2810)
!2821 = !DILocation(line: 644, column: 18, scope: !2810)
!2822 = !DILocation(line: 646, column: 10, scope: !2810)
!2823 = !DILocation(line: 646, column: 3, scope: !2810)
!2824 = distinct !DISubprogram(name: "gen_const_mem", scope: !3, file: !3, line: 652, type: !2811, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2825 = !DILocalVariable(name: "mode", arg: 1, scope: !2824, file: !3, line: 652, type: !5)
!2826 = !DILocation(line: 652, column: 34, scope: !2824)
!2827 = !DILocalVariable(name: "addr", arg: 2, scope: !2824, file: !3, line: 652, type: !1125)
!2828 = !DILocation(line: 652, column: 44, scope: !2824)
!2829 = !DILocalVariable(name: "mem", scope: !2824, file: !3, line: 654, type: !1125)
!2830 = !DILocation(line: 654, column: 7, scope: !2824)
!2831 = !DILocation(line: 654, column: 26, scope: !2824)
!2832 = !DILocation(line: 654, column: 32, scope: !2824)
!2833 = !DILocation(line: 654, column: 13, scope: !2824)
!2834 = !DILocation(line: 655, column: 3, scope: !2824)
!2835 = !DILocation(line: 655, column: 24, scope: !2824)
!2836 = !DILocation(line: 656, column: 3, scope: !2824)
!2837 = !DILocation(line: 656, column: 22, scope: !2824)
!2838 = !DILocation(line: 657, column: 10, scope: !2824)
!2839 = !DILocation(line: 657, column: 3, scope: !2824)
!2840 = distinct !DISubprogram(name: "gen_frame_mem", scope: !3, file: !3, line: 664, type: !2811, scopeLine: 665, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2841 = !DILocalVariable(name: "mode", arg: 1, scope: !2840, file: !3, line: 664, type: !5)
!2842 = !DILocation(line: 664, column: 34, scope: !2840)
!2843 = !DILocalVariable(name: "addr", arg: 2, scope: !2840, file: !3, line: 664, type: !1125)
!2844 = !DILocation(line: 664, column: 44, scope: !2840)
!2845 = !DILocalVariable(name: "mem", scope: !2840, file: !3, line: 666, type: !1125)
!2846 = !DILocation(line: 666, column: 7, scope: !2840)
!2847 = !DILocation(line: 666, column: 26, scope: !2840)
!2848 = !DILocation(line: 666, column: 32, scope: !2840)
!2849 = !DILocation(line: 666, column: 13, scope: !2840)
!2850 = !DILocation(line: 667, column: 3, scope: !2840)
!2851 = !DILocation(line: 667, column: 22, scope: !2840)
!2852 = !DILocation(line: 668, column: 22, scope: !2840)
!2853 = !DILocation(line: 668, column: 27, scope: !2840)
!2854 = !DILocation(line: 668, column: 3, scope: !2840)
!2855 = !DILocation(line: 669, column: 10, scope: !2840)
!2856 = !DILocation(line: 669, column: 3, scope: !2840)
!2857 = distinct !DISubprogram(name: "set_mem_alias_set", scope: !3, file: !3, line: 1824, type: !2858, scopeLine: 1825, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2858 = !DISubroutineType(types: !2859)
!2859 = !{null, !1125, !1763}
!2860 = !DILocalVariable(name: "mem", arg: 1, scope: !2857, file: !3, line: 1824, type: !1125)
!2861 = !DILocation(line: 1824, column: 24, scope: !2857)
!2862 = !DILocalVariable(name: "set", arg: 2, scope: !2857, file: !3, line: 1824, type: !1763)
!2863 = !DILocation(line: 1824, column: 44, scope: !2857)
!2864 = !DILocation(line: 1831, column: 36, scope: !2857)
!2865 = !DILocation(line: 1831, column: 41, scope: !2857)
!2866 = !DILocation(line: 1831, column: 57, scope: !2857)
!2867 = !DILocation(line: 1832, column: 8, scope: !2857)
!2868 = !DILocation(line: 1832, column: 24, scope: !2857)
!2869 = !DILocation(line: 1833, column: 8, scope: !2857)
!2870 = !DILocation(line: 1833, column: 30, scope: !2857)
!2871 = !DILocation(line: 1831, column: 21, scope: !2857)
!2872 = !DILocation(line: 1831, column: 3, scope: !2857)
!2873 = !DILocation(line: 1831, column: 19, scope: !2857)
!2874 = !DILocation(line: 1834, column: 1, scope: !2857)
!2875 = distinct !DISubprogram(name: "gen_tmp_stack_mem", scope: !3, file: !3, line: 676, type: !2811, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2876 = !DILocalVariable(name: "mode", arg: 1, scope: !2875, file: !3, line: 676, type: !5)
!2877 = !DILocation(line: 676, column: 38, scope: !2875)
!2878 = !DILocalVariable(name: "addr", arg: 2, scope: !2875, file: !3, line: 676, type: !1125)
!2879 = !DILocation(line: 676, column: 48, scope: !2875)
!2880 = !DILocalVariable(name: "mem", scope: !2875, file: !3, line: 678, type: !1125)
!2881 = !DILocation(line: 678, column: 7, scope: !2875)
!2882 = !DILocation(line: 678, column: 26, scope: !2875)
!2883 = !DILocation(line: 678, column: 32, scope: !2875)
!2884 = !DILocation(line: 678, column: 13, scope: !2875)
!2885 = !DILocation(line: 679, column: 3, scope: !2875)
!2886 = !DILocation(line: 679, column: 22, scope: !2875)
!2887 = !DILocation(line: 680, column: 8, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2875, file: !3, line: 680, column: 7)
!2889 = !DILocation(line: 680, column: 14, scope: !2888)
!2890 = !DILocation(line: 680, column: 7, scope: !2875)
!2891 = !DILocation(line: 681, column: 24, scope: !2888)
!2892 = !DILocation(line: 681, column: 29, scope: !2888)
!2893 = !DILocation(line: 681, column: 5, scope: !2888)
!2894 = !DILocation(line: 682, column: 10, scope: !2875)
!2895 = !DILocation(line: 682, column: 3, scope: !2875)
!2896 = distinct !DISubprogram(name: "validate_subreg", scope: !3, file: !3, line: 689, type: !2897, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!2897 = !DISubroutineType(types: !2898)
!2898 = !{!1360, !5, !5, !2177, !7}
!2899 = !DILocalVariable(name: "omode", arg: 1, scope: !2896, file: !3, line: 689, type: !5)
!2900 = !DILocation(line: 689, column: 36, scope: !2896)
!2901 = !DILocalVariable(name: "imode", arg: 2, scope: !2896, file: !3, line: 689, type: !5)
!2902 = !DILocation(line: 689, column: 61, scope: !2896)
!2903 = !DILocalVariable(name: "reg", arg: 3, scope: !2896, file: !3, line: 690, type: !2177)
!2904 = !DILocation(line: 690, column: 14, scope: !2896)
!2905 = !DILocalVariable(name: "offset", arg: 4, scope: !2896, file: !3, line: 690, type: !7)
!2906 = !DILocation(line: 690, column: 32, scope: !2896)
!2907 = !DILocalVariable(name: "isize", scope: !2896, file: !3, line: 692, type: !7)
!2908 = !DILocation(line: 692, column: 16, scope: !2896)
!2909 = !DILocation(line: 692, column: 24, scope: !2896)
!2910 = !DILocalVariable(name: "osize", scope: !2896, file: !3, line: 693, type: !7)
!2911 = !DILocation(line: 693, column: 16, scope: !2896)
!2912 = !DILocation(line: 693, column: 24, scope: !2896)
!2913 = !DILocation(line: 696, column: 7, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 696, column: 7)
!2915 = !DILocation(line: 696, column: 16, scope: !2914)
!2916 = !DILocation(line: 696, column: 14, scope: !2914)
!2917 = !DILocation(line: 696, column: 22, scope: !2914)
!2918 = !DILocation(line: 696, column: 7, scope: !2896)
!2919 = !DILocation(line: 697, column: 5, scope: !2914)
!2920 = !DILocation(line: 700, column: 7, scope: !2921)
!2921 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 700, column: 7)
!2922 = !DILocation(line: 700, column: 17, scope: !2921)
!2923 = !DILocation(line: 700, column: 14, scope: !2921)
!2924 = !DILocation(line: 700, column: 7, scope: !2896)
!2925 = !DILocation(line: 701, column: 5, scope: !2921)
!2926 = !DILocation(line: 707, column: 7, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 707, column: 7)
!2928 = !DILocation(line: 707, column: 16, scope: !2927)
!2929 = !DILocation(line: 707, column: 13, scope: !2927)
!2930 = !DILocation(line: 707, column: 7, scope: !2896)
!2931 = !DILocation(line: 711, column: 12, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2927, file: !3, line: 711, column: 12)
!2933 = !DILocation(line: 711, column: 18, scope: !2932)
!2934 = !DILocation(line: 711, column: 36, scope: !2932)
!2935 = !DILocation(line: 711, column: 39, scope: !2932)
!2936 = !DILocation(line: 711, column: 48, scope: !2932)
!2937 = !DILocation(line: 711, column: 45, scope: !2932)
!2938 = !DILocation(line: 711, column: 12, scope: !2927)
!2939 = !DILocation(line: 715, column: 13, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 715, column: 12)
!2941 = !DILocation(line: 715, column: 36, scope: !2940)
!2942 = !DILocation(line: 715, column: 39, scope: !2940)
!2943 = !DILocation(line: 716, column: 5, scope: !2940)
!2944 = !DILocation(line: 716, column: 8, scope: !2940)
!2945 = !DILocation(line: 716, column: 34, scope: !2940)
!2946 = !DILocation(line: 716, column: 31, scope: !2940)
!2947 = !DILocation(line: 715, column: 12, scope: !2932)
!2948 = !DILocation(line: 723, column: 12, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2940, file: !3, line: 723, column: 12)
!2950 = !DILocation(line: 723, column: 34, scope: !2949)
!2951 = !DILocation(line: 723, column: 37, scope: !2949)
!2952 = !DILocation(line: 723, column: 63, scope: !2949)
!2953 = !DILocation(line: 723, column: 60, scope: !2949)
!2954 = !DILocation(line: 723, column: 12, scope: !2940)
!2955 = !DILocation(line: 728, column: 12, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 728, column: 12)
!2957 = !DILocation(line: 728, column: 33, scope: !2956)
!2958 = !DILocation(line: 728, column: 36, scope: !2956)
!2959 = !DILocation(line: 728, column: 12, scope: !2949)
!2960 = !DILocation(line: 730, column: 11, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2962, file: !3, line: 730, column: 11)
!2962 = distinct !DILexicalBlock(scope: !2956, file: !3, line: 729, column: 5)
!2963 = !DILocation(line: 730, column: 20, scope: !2961)
!2964 = !DILocation(line: 730, column: 17, scope: !2961)
!2965 = !DILocation(line: 730, column: 11, scope: !2962)
!2966 = !DILocation(line: 731, column: 2, scope: !2961)
!2967 = !DILocation(line: 732, column: 5, scope: !2962)
!2968 = !DILocation(line: 735, column: 7, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 735, column: 7)
!2970 = !DILocation(line: 735, column: 15, scope: !2969)
!2971 = !DILocation(line: 735, column: 13, scope: !2969)
!2972 = !DILocation(line: 735, column: 7, scope: !2896)
!2973 = !DILocation(line: 736, column: 12, scope: !2969)
!2974 = !DILocation(line: 736, column: 19, scope: !2969)
!2975 = !DILocation(line: 736, column: 5, scope: !2969)
!2976 = !DILocation(line: 742, column: 7, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 742, column: 7)
!2978 = !DILocation(line: 742, column: 11, scope: !2977)
!2979 = !DILocation(line: 742, column: 14, scope: !2977)
!2980 = !DILocation(line: 742, column: 26, scope: !2977)
!2981 = !DILocation(line: 742, column: 29, scope: !2977)
!2982 = !DILocation(line: 742, column: 7, scope: !2896)
!2983 = !DILocalVariable(name: "regno", scope: !2984, file: !3, line: 744, type: !7)
!2984 = distinct !DILexicalBlock(scope: !2977, file: !3, line: 743, column: 5)
!2985 = !DILocation(line: 744, column: 20, scope: !2984)
!2986 = !DILocation(line: 744, column: 28, scope: !2984)
!2987 = !DILocation(line: 747, column: 12, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 747, column: 11)
!2989 = !DILocation(line: 747, column: 35, scope: !2988)
!2990 = !DILocation(line: 747, column: 38, scope: !2988)
!2991 = !DILocation(line: 748, column: 4, scope: !2988)
!2992 = !DILocation(line: 748, column: 7, scope: !2988)
!2993 = !DILocation(line: 748, column: 33, scope: !2988)
!2994 = !DILocation(line: 748, column: 30, scope: !2988)
!2995 = !DILocation(line: 747, column: 11, scope: !2984)
!2996 = !DILocation(line: 750, column: 16, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 750, column: 16)
!2998 = !DILocation(line: 750, column: 16, scope: !2988)
!2999 = !DILocation(line: 751, column: 2, scope: !2997)
!3000 = !DILocation(line: 754, column: 45, scope: !2984)
!3001 = !DILocation(line: 754, column: 52, scope: !2984)
!3002 = !DILocation(line: 754, column: 59, scope: !2984)
!3003 = !DILocation(line: 754, column: 67, scope: !2984)
!3004 = !DILocation(line: 754, column: 14, scope: !2984)
!3005 = !DILocation(line: 754, column: 7, scope: !2984)
!3006 = !DILocation(line: 763, column: 7, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 763, column: 7)
!3008 = !DILocation(line: 763, column: 13, scope: !3007)
!3009 = !DILocation(line: 763, column: 7, scope: !2896)
!3010 = !DILocalVariable(name: "wmode", scope: !3011, file: !3, line: 765, type: !5)
!3011 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 764, column: 5)
!3012 = !DILocation(line: 765, column: 25, scope: !3011)
!3013 = !DILocation(line: 765, column: 33, scope: !3011)
!3014 = !DILocation(line: 765, column: 39, scope: !3011)
!3015 = !DILocation(line: 765, column: 58, scope: !3011)
!3016 = !DILocation(line: 765, column: 70, scope: !3011)
!3017 = !DILocalVariable(name: "low_off", scope: !3011, file: !3, line: 766, type: !7)
!3018 = !DILocation(line: 766, column: 20, scope: !3011)
!3019 = !DILocation(line: 766, column: 53, scope: !3011)
!3020 = !DILocation(line: 766, column: 60, scope: !3011)
!3021 = !DILocation(line: 766, column: 30, scope: !3011)
!3022 = !DILocation(line: 767, column: 11, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 767, column: 11)
!3024 = !DILocation(line: 767, column: 18, scope: !3023)
!3025 = !DILocation(line: 767, column: 38, scope: !3023)
!3026 = !DILocation(line: 767, column: 35, scope: !3023)
!3027 = !DILocation(line: 767, column: 11, scope: !3011)
!3028 = !DILocation(line: 768, column: 2, scope: !3023)
!3029 = !DILocation(line: 769, column: 5, scope: !3011)
!3030 = !DILocation(line: 770, column: 3, scope: !2896)
!3031 = !DILocation(line: 771, column: 1, scope: !2896)
!3032 = distinct !DISubprogram(name: "subreg_lowpart_offset", scope: !3, file: !3, line: 1283, type: !3033, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3033 = !DISubroutineType(types: !3034)
!3034 = !{!7, !5, !5}
!3035 = !DILocalVariable(name: "outermode", arg: 1, scope: !3032, file: !3, line: 1283, type: !5)
!3036 = !DILocation(line: 1283, column: 42, scope: !3032)
!3037 = !DILocalVariable(name: "innermode", arg: 2, scope: !3032, file: !3, line: 1283, type: !5)
!3038 = !DILocation(line: 1283, column: 71, scope: !3032)
!3039 = !DILocalVariable(name: "offset", scope: !3032, file: !3, line: 1285, type: !7)
!3040 = !DILocation(line: 1285, column: 16, scope: !3032)
!3041 = !DILocalVariable(name: "difference", scope: !3032, file: !3, line: 1286, type: !1149)
!3042 = !DILocation(line: 1286, column: 7, scope: !3032)
!3043 = !DILocation(line: 1286, column: 21, scope: !3032)
!3044 = !DILocation(line: 1286, column: 49, scope: !3032)
!3045 = !DILocation(line: 1286, column: 47, scope: !3032)
!3046 = !DILocation(line: 1288, column: 7, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3032, file: !3, line: 1288, column: 7)
!3048 = !DILocation(line: 1288, column: 18, scope: !3047)
!3049 = !DILocation(line: 1288, column: 7, scope: !3032)
!3050 = !DILocation(line: 1294, column: 5, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 1289, column: 5)
!3052 = !DILocation(line: 1296, column: 10, scope: !3032)
!3053 = !DILocation(line: 1296, column: 3, scope: !3032)
!3054 = distinct !DISubprogram(name: "gen_rtx_SUBREG", scope: !3, file: !3, line: 774, type: !3055, scopeLine: 775, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3055 = !DISubroutineType(types: !3056)
!3056 = !{!1125, !5, !1125, !1149}
!3057 = !DILocalVariable(name: "mode", arg: 1, scope: !3054, file: !3, line: 774, type: !5)
!3058 = !DILocation(line: 774, column: 35, scope: !3054)
!3059 = !DILocalVariable(name: "reg", arg: 2, scope: !3054, file: !3, line: 774, type: !1125)
!3060 = !DILocation(line: 774, column: 45, scope: !3054)
!3061 = !DILocalVariable(name: "offset", arg: 3, scope: !3054, file: !3, line: 774, type: !1149)
!3062 = !DILocation(line: 774, column: 54, scope: !3054)
!3063 = !DILocation(line: 776, column: 3, scope: !3054)
!3064 = !DILocation(line: 777, column: 10, scope: !3054)
!3065 = !DILocation(line: 777, column: 3, scope: !3054)
!3066 = distinct !DISubprogram(name: "gen_lowpart_SUBREG", scope: !3, file: !3, line: 784, type: !2811, scopeLine: 785, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3067 = !DILocalVariable(name: "mode", arg: 1, scope: !3066, file: !3, line: 784, type: !5)
!3068 = !DILocation(line: 784, column: 39, scope: !3066)
!3069 = !DILocalVariable(name: "reg", arg: 2, scope: !3066, file: !3, line: 784, type: !1125)
!3070 = !DILocation(line: 784, column: 49, scope: !3066)
!3071 = !DILocalVariable(name: "inmode", scope: !3066, file: !3, line: 786, type: !5)
!3072 = !DILocation(line: 786, column: 21, scope: !3066)
!3073 = !DILocation(line: 788, column: 12, scope: !3066)
!3074 = !DILocation(line: 788, column: 10, scope: !3066)
!3075 = !DILocation(line: 789, column: 7, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3066, file: !3, line: 789, column: 7)
!3077 = !DILocation(line: 789, column: 14, scope: !3076)
!3078 = !DILocation(line: 789, column: 7, scope: !3066)
!3079 = !DILocation(line: 790, column: 14, scope: !3076)
!3080 = !DILocation(line: 790, column: 12, scope: !3076)
!3081 = !DILocation(line: 790, column: 5, scope: !3076)
!3082 = !DILocation(line: 791, column: 26, scope: !3066)
!3083 = !DILocation(line: 791, column: 32, scope: !3066)
!3084 = !DILocation(line: 792, column: 28, scope: !3066)
!3085 = !DILocation(line: 792, column: 34, scope: !3066)
!3086 = !DILocation(line: 792, column: 5, scope: !3066)
!3087 = !DILocation(line: 791, column: 10, scope: !3066)
!3088 = !DILocation(line: 791, column: 3, scope: !3066)
!3089 = distinct !DISubprogram(name: "gen_rtvec", scope: !3, file: !3, line: 799, type: !3090, scopeLine: 800, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3090 = !DISubroutineType(types: !3091)
!3091 = !{!1157, !1149, null}
!3092 = !DILocalVariable(name: "n", arg: 1, scope: !3089, file: !3, line: 799, type: !1149)
!3093 = !DILocation(line: 799, column: 16, scope: !3089)
!3094 = !DILocalVariable(name: "i", scope: !3089, file: !3, line: 801, type: !1149)
!3095 = !DILocation(line: 801, column: 7, scope: !3089)
!3096 = !DILocalVariable(name: "rt_val", scope: !3089, file: !3, line: 802, type: !1157)
!3097 = !DILocation(line: 802, column: 9, scope: !3089)
!3098 = !DILocalVariable(name: "p", scope: !3089, file: !3, line: 803, type: !3099)
!3099 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3100, line: 52, baseType: !3101)
!3100 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3101 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3102, line: 32, baseType: !3103)
!3102 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!3103 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 803, baseType: !3104)
!3104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3105, size: 192, elements: !1164)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 803, size: 192, elements: !3106)
!3106 = !{!3107, !3108, !3109, !3110}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3105, file: !3, line: 803, baseType: !7, size: 32)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3105, file: !3, line: 803, baseType: !7, size: 32, offset: 32)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3105, file: !3, line: 803, baseType: !1237, size: 64, offset: 64)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3105, file: !3, line: 803, baseType: !1237, size: 64, offset: 128)
!3111 = !DILocation(line: 803, column: 11, scope: !3089)
!3112 = !DILocation(line: 805, column: 3, scope: !3089)
!3113 = !DILocation(line: 808, column: 7, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 808, column: 7)
!3115 = !DILocation(line: 808, column: 9, scope: !3114)
!3116 = !DILocation(line: 808, column: 7, scope: !3089)
!3117 = !DILocation(line: 809, column: 5, scope: !3114)
!3118 = !DILocation(line: 811, column: 25, scope: !3089)
!3119 = !DILocation(line: 811, column: 12, scope: !3089)
!3120 = !DILocation(line: 811, column: 10, scope: !3089)
!3121 = !DILocation(line: 813, column: 10, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 813, column: 3)
!3123 = !DILocation(line: 813, column: 8, scope: !3122)
!3124 = !DILocation(line: 813, column: 15, scope: !3125)
!3125 = distinct !DILexicalBlock(scope: !3122, file: !3, line: 813, column: 3)
!3126 = !DILocation(line: 813, column: 19, scope: !3125)
!3127 = !DILocation(line: 813, column: 17, scope: !3125)
!3128 = !DILocation(line: 813, column: 3, scope: !3122)
!3129 = !DILocation(line: 814, column: 23, scope: !3125)
!3130 = !DILocation(line: 814, column: 5, scope: !3125)
!3131 = !DILocation(line: 814, column: 13, scope: !3125)
!3132 = !DILocation(line: 814, column: 18, scope: !3125)
!3133 = !DILocation(line: 814, column: 21, scope: !3125)
!3134 = !DILocation(line: 813, column: 23, scope: !3125)
!3135 = !DILocation(line: 813, column: 3, scope: !3125)
!3136 = distinct !{!3136, !3128, !3137}
!3137 = !DILocation(line: 814, column: 23, scope: !3122)
!3138 = !DILocation(line: 816, column: 3, scope: !3089)
!3139 = !DILocation(line: 817, column: 10, scope: !3089)
!3140 = !DILocation(line: 817, column: 3, scope: !3089)
!3141 = !DILocation(line: 818, column: 1, scope: !3089)
!3142 = distinct !DISubprogram(name: "gen_rtvec_v", scope: !3, file: !3, line: 821, type: !3143, scopeLine: 822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!1157, !1149, !2170}
!3145 = !DILocalVariable(name: "n", arg: 1, scope: !3142, file: !3, line: 821, type: !1149)
!3146 = !DILocation(line: 821, column: 18, scope: !3142)
!3147 = !DILocalVariable(name: "argp", arg: 2, scope: !3142, file: !3, line: 821, type: !2170)
!3148 = !DILocation(line: 821, column: 26, scope: !3142)
!3149 = !DILocalVariable(name: "i", scope: !3142, file: !3, line: 823, type: !1149)
!3150 = !DILocation(line: 823, column: 7, scope: !3142)
!3151 = !DILocalVariable(name: "rt_val", scope: !3142, file: !3, line: 824, type: !1157)
!3152 = !DILocation(line: 824, column: 9, scope: !3142)
!3153 = !DILocation(line: 827, column: 7, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 827, column: 7)
!3155 = !DILocation(line: 827, column: 9, scope: !3154)
!3156 = !DILocation(line: 827, column: 7, scope: !3142)
!3157 = !DILocation(line: 828, column: 5, scope: !3154)
!3158 = !DILocation(line: 830, column: 25, scope: !3142)
!3159 = !DILocation(line: 830, column: 12, scope: !3142)
!3160 = !DILocation(line: 830, column: 10, scope: !3142)
!3161 = !DILocation(line: 832, column: 10, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 832, column: 3)
!3163 = !DILocation(line: 832, column: 8, scope: !3162)
!3164 = !DILocation(line: 832, column: 15, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 832, column: 3)
!3166 = !DILocation(line: 832, column: 19, scope: !3165)
!3167 = !DILocation(line: 832, column: 17, scope: !3165)
!3168 = !DILocation(line: 832, column: 3, scope: !3162)
!3169 = !DILocation(line: 833, column: 28, scope: !3165)
!3170 = !DILocation(line: 833, column: 23, scope: !3165)
!3171 = !DILocation(line: 833, column: 5, scope: !3165)
!3172 = !DILocation(line: 833, column: 13, scope: !3165)
!3173 = !DILocation(line: 833, column: 18, scope: !3165)
!3174 = !DILocation(line: 833, column: 21, scope: !3165)
!3175 = !DILocation(line: 832, column: 23, scope: !3165)
!3176 = !DILocation(line: 832, column: 3, scope: !3165)
!3177 = distinct !{!3177, !3168, !3178}
!3178 = !DILocation(line: 833, column: 28, scope: !3162)
!3179 = !DILocation(line: 835, column: 10, scope: !3142)
!3180 = !DILocation(line: 835, column: 3, scope: !3142)
!3181 = !DILocation(line: 836, column: 1, scope: !3142)
!3182 = distinct !DISubprogram(name: "byte_lowpart_offset", scope: !3, file: !3, line: 845, type: !3183, scopeLine: 847, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!1149, !5, !5}
!3185 = !DILocalVariable(name: "outer_mode", arg: 1, scope: !3182, file: !3, line: 845, type: !5)
!3186 = !DILocation(line: 845, column: 40, scope: !3182)
!3187 = !DILocalVariable(name: "inner_mode", arg: 2, scope: !3182, file: !3, line: 846, type: !5)
!3188 = !DILocation(line: 846, column: 26, scope: !3182)
!3189 = !DILocation(line: 848, column: 7, scope: !3190)
!3190 = distinct !DILexicalBlock(scope: !3182, file: !3, line: 848, column: 7)
!3191 = !DILocation(line: 848, column: 36, scope: !3190)
!3192 = !DILocation(line: 848, column: 34, scope: !3190)
!3193 = !DILocation(line: 848, column: 7, scope: !3182)
!3194 = !DILocation(line: 849, column: 35, scope: !3190)
!3195 = !DILocation(line: 849, column: 47, scope: !3190)
!3196 = !DILocation(line: 849, column: 12, scope: !3190)
!3197 = !DILocation(line: 849, column: 5, scope: !3190)
!3198 = !DILocation(line: 851, column: 36, scope: !3190)
!3199 = !DILocation(line: 851, column: 48, scope: !3190)
!3200 = !DILocation(line: 851, column: 13, scope: !3190)
!3201 = !DILocation(line: 851, column: 12, scope: !3190)
!3202 = !DILocation(line: 851, column: 5, scope: !3190)
!3203 = !DILocation(line: 852, column: 1, scope: !3182)
!3204 = distinct !DISubprogram(name: "gen_reg_rtx", scope: !3, file: !3, line: 858, type: !3205, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{!1125, !5}
!3207 = !DILocalVariable(name: "mode", arg: 1, scope: !3204, file: !3, line: 858, type: !5)
!3208 = !DILocation(line: 858, column: 32, scope: !3204)
!3209 = !DILocalVariable(name: "val", scope: !3204, file: !3, line: 860, type: !1125)
!3210 = !DILocation(line: 860, column: 7, scope: !3204)
!3211 = !DILocalVariable(name: "align", scope: !3204, file: !3, line: 861, type: !7)
!3212 = !DILocation(line: 861, column: 16, scope: !3204)
!3213 = !DILocation(line: 861, column: 24, scope: !3204)
!3214 = !DILocation(line: 863, column: 3, scope: !3204)
!3215 = !DILocation(line: 869, column: 16, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 868, column: 7)
!3217 = !DILocation(line: 869, column: 44, scope: !3216)
!3218 = !DILocation(line: 869, column: 42, scope: !3216)
!3219 = !DILocation(line: 870, column: 7, scope: !3216)
!3220 = !DILocation(line: 870, column: 17, scope: !3216)
!3221 = !DILocation(line: 870, column: 11, scope: !3216)
!3222 = !DILocation(line: 868, column: 7, scope: !3204)
!3223 = !DILocalVariable(name: "min_align", scope: !3224, file: !3, line: 872, type: !7)
!3224 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 871, column: 5)
!3225 = !DILocation(line: 872, column: 20, scope: !3224)
!3226 = !DILocation(line: 872, column: 32, scope: !3224)
!3227 = !DILocation(line: 873, column: 17, scope: !3228)
!3228 = distinct !DILexicalBlock(scope: !3224, file: !3, line: 873, column: 11)
!3229 = !DILocation(line: 873, column: 45, scope: !3228)
!3230 = !DILocation(line: 873, column: 43, scope: !3228)
!3231 = !DILocation(line: 873, column: 11, scope: !3224)
!3232 = !DILocation(line: 874, column: 36, scope: !3228)
!3233 = !DILocation(line: 874, column: 34, scope: !3228)
!3234 = !DILocation(line: 874, column: 2, scope: !3228)
!3235 = !DILocation(line: 875, column: 5, scope: !3224)
!3236 = !DILocation(line: 877, column: 7, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 877, column: 7)
!3238 = !DILocation(line: 878, column: 7, scope: !3237)
!3239 = !DILocation(line: 878, column: 11, scope: !3237)
!3240 = !DILocation(line: 878, column: 33, scope: !3237)
!3241 = !DILocation(line: 879, column: 4, scope: !3237)
!3242 = !DILocation(line: 879, column: 7, scope: !3237)
!3243 = !DILocation(line: 879, column: 29, scope: !3237)
!3244 = !DILocation(line: 877, column: 7, scope: !3204)
!3245 = !DILocalVariable(name: "realpart", scope: !3246, file: !3, line: 886, type: !1125)
!3246 = distinct !DILexicalBlock(scope: !3237, file: !3, line: 880, column: 5)
!3247 = !DILocation(line: 886, column: 11, scope: !3246)
!3248 = !DILocalVariable(name: "imagpart", scope: !3246, file: !3, line: 886, type: !1125)
!3249 = !DILocation(line: 886, column: 21, scope: !3246)
!3250 = !DILocalVariable(name: "partmode", scope: !3246, file: !3, line: 887, type: !5)
!3251 = !DILocation(line: 887, column: 25, scope: !3246)
!3252 = !DILocation(line: 887, column: 36, scope: !3246)
!3253 = !DILocation(line: 889, column: 31, scope: !3246)
!3254 = !DILocation(line: 889, column: 18, scope: !3246)
!3255 = !DILocation(line: 889, column: 16, scope: !3246)
!3256 = !DILocation(line: 890, column: 31, scope: !3246)
!3257 = !DILocation(line: 890, column: 18, scope: !3246)
!3258 = !DILocation(line: 890, column: 16, scope: !3246)
!3259 = !DILocation(line: 891, column: 14, scope: !3246)
!3260 = !DILocation(line: 891, column: 7, scope: !3246)
!3261 = !DILocation(line: 897, column: 7, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 897, column: 7)
!3263 = !DILocation(line: 897, column: 32, scope: !3262)
!3264 = !DILocation(line: 897, column: 18, scope: !3262)
!3265 = !DILocation(line: 897, column: 7, scope: !3204)
!3266 = !DILocalVariable(name: "old_size", scope: !3267, file: !3, line: 899, type: !1149)
!3267 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 898, column: 5)
!3268 = !DILocation(line: 899, column: 11, scope: !3267)
!3269 = !DILocation(line: 899, column: 33, scope: !3267)
!3270 = !DILocalVariable(name: "tmp", scope: !3267, file: !3, line: 900, type: !1222)
!3271 = !DILocation(line: 900, column: 13, scope: !3267)
!3272 = !DILocalVariable(name: "new1", scope: !3267, file: !3, line: 901, type: !2170)
!3273 = !DILocation(line: 901, column: 12, scope: !3267)
!3274 = !DILocation(line: 903, column: 13, scope: !3267)
!3275 = !DILocation(line: 903, column: 11, scope: !3267)
!3276 = !DILocation(line: 904, column: 15, scope: !3267)
!3277 = !DILocation(line: 904, column: 21, scope: !3267)
!3278 = !DILocation(line: 904, column: 19, scope: !3267)
!3279 = !DILocation(line: 904, column: 34, scope: !3267)
!3280 = !DILocation(line: 904, column: 7, scope: !3267)
!3281 = !DILocation(line: 905, column: 58, scope: !3267)
!3282 = !DILocation(line: 905, column: 38, scope: !3267)
!3283 = !DILocation(line: 907, column: 14, scope: !3267)
!3284 = !DILocation(line: 907, column: 12, scope: !3267)
!3285 = !DILocation(line: 908, column: 15, scope: !3267)
!3286 = !DILocation(line: 908, column: 22, scope: !3267)
!3287 = !DILocation(line: 908, column: 20, scope: !3267)
!3288 = !DILocation(line: 908, column: 7, scope: !3267)
!3289 = !DILocation(line: 908, column: 35, scope: !3267)
!3290 = !DILocation(line: 908, column: 44, scope: !3267)
!3291 = !DILocation(line: 909, column: 23, scope: !3267)
!3292 = !DILocation(line: 909, column: 21, scope: !3267)
!3293 = !DILocation(line: 911, column: 47, scope: !3267)
!3294 = !DILocation(line: 911, column: 56, scope: !3267)
!3295 = !DILocation(line: 911, column: 45, scope: !3267)
!3296 = !DILocation(line: 912, column: 5, scope: !3267)
!3297 = !DILocation(line: 914, column: 22, scope: !3204)
!3298 = !DILocation(line: 914, column: 28, scope: !3204)
!3299 = !DILocation(line: 914, column: 9, scope: !3204)
!3300 = !DILocation(line: 914, column: 7, scope: !3204)
!3301 = !DILocation(line: 915, column: 33, scope: !3204)
!3302 = !DILocation(line: 915, column: 3, scope: !3204)
!3303 = !DILocation(line: 915, column: 27, scope: !3204)
!3304 = !DILocation(line: 915, column: 31, scope: !3204)
!3305 = !DILocation(line: 916, column: 10, scope: !3204)
!3306 = !DILocation(line: 916, column: 3, scope: !3204)
!3307 = !DILocation(line: 917, column: 1, scope: !3204)
!3308 = distinct !DISubprogram(name: "gen_rtx_REG_offset", scope: !3, file: !3, line: 933, type: !3309, scopeLine: 935, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3309 = !DISubroutineType(types: !3310)
!3310 = !{!1125, !1125, !5, !7, !1149}
!3311 = !DILocalVariable(name: "reg", arg: 1, scope: !3308, file: !3, line: 933, type: !1125)
!3312 = !DILocation(line: 933, column: 25, scope: !3308)
!3313 = !DILocalVariable(name: "mode", arg: 2, scope: !3308, file: !3, line: 933, type: !5)
!3314 = !DILocation(line: 933, column: 48, scope: !3308)
!3315 = !DILocalVariable(name: "regno", arg: 3, scope: !3308, file: !3, line: 933, type: !7)
!3316 = !DILocation(line: 933, column: 67, scope: !3308)
!3317 = !DILocalVariable(name: "offset", arg: 4, scope: !3308, file: !3, line: 934, type: !1149)
!3318 = !DILocation(line: 934, column: 11, scope: !3308)
!3319 = !DILocalVariable(name: "new_rtx", scope: !3308, file: !3, line: 936, type: !1125)
!3320 = !DILocation(line: 936, column: 7, scope: !3308)
!3321 = !DILocation(line: 936, column: 30, scope: !3308)
!3322 = !DILocation(line: 936, column: 36, scope: !3308)
!3323 = !DILocation(line: 936, column: 17, scope: !3308)
!3324 = !DILocation(line: 938, column: 22, scope: !3308)
!3325 = !DILocation(line: 938, column: 31, scope: !3308)
!3326 = !DILocation(line: 938, column: 36, scope: !3308)
!3327 = !DILocation(line: 938, column: 3, scope: !3308)
!3328 = !DILocation(line: 939, column: 10, scope: !3308)
!3329 = !DILocation(line: 939, column: 3, scope: !3308)
!3330 = distinct !DISubprogram(name: "update_reg_offset", scope: !3, file: !3, line: 923, type: !3331, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3331 = !DISubroutineType(types: !3332)
!3332 = !{null, !1125, !1125, !1149}
!3333 = !DILocalVariable(name: "new_rtx", arg: 1, scope: !3330, file: !3, line: 923, type: !1125)
!3334 = !DILocation(line: 923, column: 24, scope: !3330)
!3335 = !DILocalVariable(name: "reg", arg: 2, scope: !3330, file: !3, line: 923, type: !1125)
!3336 = !DILocation(line: 923, column: 37, scope: !3330)
!3337 = !DILocalVariable(name: "offset", arg: 3, scope: !3330, file: !3, line: 923, type: !1149)
!3338 = !DILocation(line: 923, column: 46, scope: !3330)
!3339 = !DILocation(line: 925, column: 40, scope: !3330)
!3340 = !DILocation(line: 926, column: 8, scope: !3330)
!3341 = !DILocation(line: 926, column: 27, scope: !3330)
!3342 = !DILocation(line: 926, column: 25, scope: !3330)
!3343 = !DILocation(line: 925, column: 25, scope: !3330)
!3344 = !DILocation(line: 925, column: 3, scope: !3330)
!3345 = !DILocation(line: 925, column: 23, scope: !3330)
!3346 = !DILocation(line: 927, column: 1, scope: !3330)
!3347 = distinct !DISubprogram(name: "gen_reg_rtx_offset", scope: !3, file: !3, line: 946, type: !3348, scopeLine: 947, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{!1125, !1125, !5, !1149}
!3350 = !DILocalVariable(name: "reg", arg: 1, scope: !3347, file: !3, line: 946, type: !1125)
!3351 = !DILocation(line: 946, column: 25, scope: !3347)
!3352 = !DILocalVariable(name: "mode", arg: 2, scope: !3347, file: !3, line: 946, type: !5)
!3353 = !DILocation(line: 946, column: 48, scope: !3347)
!3354 = !DILocalVariable(name: "offset", arg: 3, scope: !3347, file: !3, line: 946, type: !1149)
!3355 = !DILocation(line: 946, column: 58, scope: !3347)
!3356 = !DILocalVariable(name: "new_rtx", scope: !3347, file: !3, line: 948, type: !1125)
!3357 = !DILocation(line: 948, column: 7, scope: !3347)
!3358 = !DILocation(line: 948, column: 30, scope: !3347)
!3359 = !DILocation(line: 948, column: 17, scope: !3347)
!3360 = !DILocation(line: 950, column: 22, scope: !3347)
!3361 = !DILocation(line: 950, column: 31, scope: !3347)
!3362 = !DILocation(line: 950, column: 36, scope: !3347)
!3363 = !DILocation(line: 950, column: 3, scope: !3347)
!3364 = !DILocation(line: 951, column: 10, scope: !3347)
!3365 = !DILocation(line: 951, column: 3, scope: !3347)
!3366 = distinct !DISubprogram(name: "adjust_reg_mode", scope: !3, file: !3, line: 958, type: !3367, scopeLine: 959, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{null, !1125, !5}
!3369 = !DILocalVariable(name: "reg", arg: 1, scope: !3366, file: !3, line: 958, type: !1125)
!3370 = !DILocation(line: 958, column: 22, scope: !3366)
!3371 = !DILocalVariable(name: "mode", arg: 2, scope: !3366, file: !3, line: 958, type: !5)
!3372 = !DILocation(line: 958, column: 45, scope: !3366)
!3373 = !DILocation(line: 960, column: 22, scope: !3366)
!3374 = !DILocation(line: 960, column: 27, scope: !3366)
!3375 = !DILocation(line: 960, column: 53, scope: !3366)
!3376 = !DILocation(line: 960, column: 59, scope: !3366)
!3377 = !DILocation(line: 960, column: 32, scope: !3366)
!3378 = !DILocation(line: 960, column: 3, scope: !3366)
!3379 = !DILocation(line: 961, column: 3, scope: !3366)
!3380 = !DILocation(line: 962, column: 1, scope: !3366)
!3381 = distinct !DISubprogram(name: "set_reg_attrs_from_value", scope: !3, file: !3, line: 968, type: !3382, scopeLine: 969, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3382 = !DISubroutineType(types: !3383)
!3383 = !{null, !1125, !1125}
!3384 = !DILocalVariable(name: "reg", arg: 1, scope: !3381, file: !3, line: 968, type: !1125)
!3385 = !DILocation(line: 968, column: 31, scope: !3381)
!3386 = !DILocalVariable(name: "x", arg: 2, scope: !3381, file: !3, line: 968, type: !1125)
!3387 = !DILocation(line: 968, column: 40, scope: !3381)
!3388 = !DILocalVariable(name: "offset", scope: !3381, file: !3, line: 970, type: !1149)
!3389 = !DILocation(line: 970, column: 7, scope: !3381)
!3390 = !DILocation(line: 975, column: 7, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 975, column: 7)
!3392 = !DILocation(line: 975, column: 7, scope: !3381)
!3393 = !DILocation(line: 976, column: 5, scope: !3391)
!3394 = !DILocation(line: 978, column: 33, scope: !3381)
!3395 = !DILocation(line: 978, column: 49, scope: !3381)
!3396 = !DILocation(line: 978, column: 12, scope: !3381)
!3397 = !DILocation(line: 978, column: 10, scope: !3381)
!3398 = !DILocation(line: 979, column: 7, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 979, column: 7)
!3400 = !DILocation(line: 979, column: 7, scope: !3381)
!3401 = !DILocation(line: 981, column: 11, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 981, column: 11)
!3403 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 980, column: 5)
!3404 = !DILocation(line: 981, column: 26, scope: !3402)
!3405 = !DILocation(line: 981, column: 29, scope: !3402)
!3406 = !DILocation(line: 981, column: 11, scope: !3403)
!3407 = !DILocation(line: 983, column: 21, scope: !3402)
!3408 = !DILocation(line: 983, column: 35, scope: !3402)
!3409 = !DILocation(line: 983, column: 61, scope: !3402)
!3410 = !DILocation(line: 983, column: 59, scope: !3402)
!3411 = !DILocation(line: 983, column: 6, scope: !3402)
!3412 = !DILocation(line: 982, column: 2, scope: !3402)
!3413 = !DILocation(line: 983, column: 4, scope: !3402)
!3414 = !DILocation(line: 984, column: 11, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 984, column: 11)
!3416 = !DILocation(line: 984, column: 11, scope: !3403)
!3417 = !DILocation(line: 985, column: 20, scope: !3415)
!3418 = !DILocation(line: 985, column: 2, scope: !3415)
!3419 = !DILocation(line: 986, column: 5, scope: !3403)
!3420 = !DILocation(line: 987, column: 12, scope: !3421)
!3421 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 987, column: 12)
!3422 = !DILocation(line: 987, column: 12, scope: !3399)
!3423 = !DILocation(line: 989, column: 11, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 989, column: 11)
!3425 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 988, column: 5)
!3426 = !DILocation(line: 989, column: 11, scope: !3425)
!3427 = !DILocation(line: 990, column: 21, scope: !3424)
!3428 = !DILocation(line: 990, column: 26, scope: !3424)
!3429 = !DILocation(line: 990, column: 29, scope: !3424)
!3430 = !DILocation(line: 990, column: 2, scope: !3424)
!3431 = !DILocation(line: 991, column: 11, scope: !3432)
!3432 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 991, column: 11)
!3433 = !DILocation(line: 991, column: 11, scope: !3425)
!3434 = !DILocation(line: 992, column: 20, scope: !3432)
!3435 = !DILocation(line: 992, column: 25, scope: !3432)
!3436 = !DILocation(line: 992, column: 2, scope: !3432)
!3437 = !DILocation(line: 993, column: 5, scope: !3425)
!3438 = !DILocation(line: 994, column: 1, scope: !3381)
!3439 = distinct !DISubprogram(name: "get_reg_attrs", scope: !3, file: !3, line: 381, type: !3440, scopeLine: 382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3440 = !DISubroutineType(types: !3441)
!3441 = !{!2126, !1247, !1149}
!3442 = !DILocalVariable(name: "decl", arg: 1, scope: !3439, file: !3, line: 381, type: !1247)
!3443 = !DILocation(line: 381, column: 21, scope: !3439)
!3444 = !DILocalVariable(name: "offset", arg: 2, scope: !3439, file: !3, line: 381, type: !1149)
!3445 = !DILocation(line: 381, column: 31, scope: !3439)
!3446 = !DILocalVariable(name: "attrs", scope: !3439, file: !3, line: 383, type: !2127)
!3447 = !DILocation(line: 383, column: 13, scope: !3439)
!3448 = !DILocalVariable(name: "slot", scope: !3439, file: !3, line: 384, type: !1634)
!3449 = !DILocation(line: 384, column: 10, scope: !3439)
!3450 = !DILocation(line: 387, column: 7, scope: !3451)
!3451 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 387, column: 7)
!3452 = !DILocation(line: 387, column: 12, scope: !3451)
!3453 = !DILocation(line: 387, column: 17, scope: !3451)
!3454 = !DILocation(line: 387, column: 20, scope: !3451)
!3455 = !DILocation(line: 387, column: 27, scope: !3451)
!3456 = !DILocation(line: 387, column: 7, scope: !3439)
!3457 = !DILocation(line: 388, column: 5, scope: !3451)
!3458 = !DILocation(line: 390, column: 16, scope: !3439)
!3459 = !DILocation(line: 390, column: 9, scope: !3439)
!3460 = !DILocation(line: 390, column: 14, scope: !3439)
!3461 = !DILocation(line: 391, column: 18, scope: !3439)
!3462 = !DILocation(line: 391, column: 9, scope: !3439)
!3463 = !DILocation(line: 391, column: 16, scope: !3439)
!3464 = !DILocation(line: 393, column: 26, scope: !3439)
!3465 = !DILocation(line: 393, column: 42, scope: !3439)
!3466 = !DILocation(line: 393, column: 10, scope: !3439)
!3467 = !DILocation(line: 393, column: 8, scope: !3439)
!3468 = !DILocation(line: 394, column: 8, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 394, column: 7)
!3470 = !DILocation(line: 394, column: 7, scope: !3469)
!3471 = !DILocation(line: 394, column: 13, scope: !3469)
!3472 = !DILocation(line: 394, column: 7, scope: !3439)
!3473 = !DILocation(line: 396, column: 15, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3469, file: !3, line: 395, column: 5)
!3475 = !DILocation(line: 396, column: 8, scope: !3474)
!3476 = !DILocation(line: 396, column: 13, scope: !3474)
!3477 = !DILocation(line: 397, column: 16, scope: !3474)
!3478 = !DILocation(line: 397, column: 15, scope: !3474)
!3479 = !DILocation(line: 397, column: 7, scope: !3474)
!3480 = !DILocation(line: 398, column: 5, scope: !3474)
!3481 = !DILocation(line: 400, column: 25, scope: !3439)
!3482 = !DILocation(line: 400, column: 24, scope: !3439)
!3483 = !DILocation(line: 400, column: 10, scope: !3439)
!3484 = !DILocation(line: 400, column: 3, scope: !3439)
!3485 = !DILocation(line: 401, column: 1, scope: !3439)
!3486 = distinct !DISubprogram(name: "mark_reg_pointer", scope: !3, file: !3, line: 1116, type: !3487, scopeLine: 1117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3487 = !DISubroutineType(types: !3488)
!3488 = !{null, !1125, !1149}
!3489 = !DILocalVariable(name: "reg", arg: 1, scope: !3486, file: !3, line: 1116, type: !1125)
!3490 = !DILocation(line: 1116, column: 23, scope: !3486)
!3491 = !DILocalVariable(name: "align", arg: 2, scope: !3486, file: !3, line: 1116, type: !1149)
!3492 = !DILocation(line: 1116, column: 32, scope: !3486)
!3493 = !DILocation(line: 1118, column: 9, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 1118, column: 7)
!3495 = !DILocation(line: 1118, column: 7, scope: !3486)
!3496 = !DILocation(line: 1120, column: 7, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 1119, column: 5)
!3498 = !DILocation(line: 1120, column: 25, scope: !3497)
!3499 = !DILocation(line: 1122, column: 11, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1122, column: 11)
!3501 = !DILocation(line: 1122, column: 11, scope: !3497)
!3502 = !DILocation(line: 1123, column: 38, scope: !3500)
!3503 = !DILocation(line: 1123, column: 2, scope: !3500)
!3504 = !DILocation(line: 1123, column: 36, scope: !3500)
!3505 = !DILocation(line: 1124, column: 5, scope: !3497)
!3506 = !DILocation(line: 1125, column: 12, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 1125, column: 12)
!3508 = !DILocation(line: 1125, column: 18, scope: !3507)
!3509 = !DILocation(line: 1125, column: 21, scope: !3507)
!3510 = !DILocation(line: 1125, column: 29, scope: !3507)
!3511 = !DILocation(line: 1125, column: 27, scope: !3507)
!3512 = !DILocation(line: 1125, column: 12, scope: !3494)
!3513 = !DILocation(line: 1127, column: 41, scope: !3507)
!3514 = !DILocation(line: 1127, column: 5, scope: !3507)
!3515 = !DILocation(line: 1127, column: 39, scope: !3507)
!3516 = !DILocation(line: 1128, column: 1, scope: !3486)
!3517 = distinct !DISubprogram(name: "gen_reg_rtx_and_attrs", scope: !3, file: !3, line: 1000, type: !2610, scopeLine: 1001, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3518 = !DILocalVariable(name: "x", arg: 1, scope: !3517, file: !3, line: 1000, type: !1125)
!3519 = !DILocation(line: 1000, column: 28, scope: !3517)
!3520 = !DILocalVariable(name: "reg", scope: !3517, file: !3, line: 1002, type: !1125)
!3521 = !DILocation(line: 1002, column: 7, scope: !3517)
!3522 = !DILocation(line: 1002, column: 26, scope: !3517)
!3523 = !DILocation(line: 1002, column: 13, scope: !3517)
!3524 = !DILocation(line: 1003, column: 29, scope: !3517)
!3525 = !DILocation(line: 1003, column: 34, scope: !3517)
!3526 = !DILocation(line: 1003, column: 3, scope: !3517)
!3527 = !DILocation(line: 1004, column: 10, scope: !3517)
!3528 = !DILocation(line: 1004, column: 3, scope: !3517)
!3529 = distinct !DISubprogram(name: "set_reg_attrs_for_parm", scope: !3, file: !3, line: 1011, type: !3382, scopeLine: 1012, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3530 = !DILocalVariable(name: "parm_rtx", arg: 1, scope: !3529, file: !3, line: 1011, type: !1125)
!3531 = !DILocation(line: 1011, column: 29, scope: !3529)
!3532 = !DILocalVariable(name: "mem", arg: 2, scope: !3529, file: !3, line: 1011, type: !1125)
!3533 = !DILocation(line: 1011, column: 43, scope: !3529)
!3534 = !DILocation(line: 1013, column: 7, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3529, file: !3, line: 1013, column: 7)
!3536 = !DILocation(line: 1013, column: 7, scope: !3529)
!3537 = !DILocation(line: 1014, column: 31, scope: !3535)
!3538 = !DILocation(line: 1014, column: 41, scope: !3535)
!3539 = !DILocation(line: 1014, column: 5, scope: !3535)
!3540 = !DILocation(line: 1015, column: 12, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 1015, column: 12)
!3542 = !DILocation(line: 1015, column: 32, scope: !3541)
!3543 = !DILocation(line: 1015, column: 12, scope: !3535)
!3544 = !DILocalVariable(name: "i", scope: !3545, file: !3, line: 1019, type: !1149)
!3545 = distinct !DILexicalBlock(scope: !3541, file: !3, line: 1016, column: 5)
!3546 = !DILocation(line: 1019, column: 11, scope: !3545)
!3547 = !DILocation(line: 1019, column: 15, scope: !3545)
!3548 = !DILocation(line: 1020, column: 7, scope: !3545)
!3549 = !DILocation(line: 1020, column: 14, scope: !3550)
!3550 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1020, column: 7)
!3551 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 1020, column: 7)
!3552 = !DILocation(line: 1020, column: 18, scope: !3550)
!3553 = !DILocation(line: 1020, column: 16, scope: !3550)
!3554 = !DILocation(line: 1020, column: 7, scope: !3551)
!3555 = !DILocalVariable(name: "x", scope: !3556, file: !3, line: 1022, type: !1125)
!3556 = distinct !DILexicalBlock(scope: !3550, file: !3, line: 1021, column: 2)
!3557 = !DILocation(line: 1022, column: 8, scope: !3556)
!3558 = !DILocation(line: 1022, column: 12, scope: !3556)
!3559 = !DILocation(line: 1023, column: 8, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 1023, column: 8)
!3561 = !DILocation(line: 1023, column: 8, scope: !3556)
!3562 = !DILocation(line: 1025, column: 25, scope: !3560)
!3563 = !DILocation(line: 1026, column: 11, scope: !3560)
!3564 = !DILocation(line: 1025, column: 10, scope: !3560)
!3565 = !DILocation(line: 1024, column: 6, scope: !3560)
!3566 = !DILocation(line: 1025, column: 8, scope: !3560)
!3567 = !DILocation(line: 1027, column: 2, scope: !3556)
!3568 = !DILocation(line: 1020, column: 42, scope: !3550)
!3569 = !DILocation(line: 1020, column: 7, scope: !3550)
!3570 = distinct !{!3570, !3554, !3571}
!3571 = !DILocation(line: 1027, column: 2, scope: !3551)
!3572 = !DILocation(line: 1028, column: 5, scope: !3545)
!3573 = !DILocation(line: 1029, column: 1, scope: !3529)
!3574 = distinct !DISubprogram(name: "set_reg_attrs_for_decl_rtl", scope: !3, file: !3, line: 1035, type: !3575, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3575 = !DISubroutineType(types: !3576)
!3576 = !{null, !1247, !1125}
!3577 = !DILocalVariable(name: "t", arg: 1, scope: !3574, file: !3, line: 1035, type: !1247)
!3578 = !DILocation(line: 1035, column: 34, scope: !3574)
!3579 = !DILocalVariable(name: "x", arg: 2, scope: !3574, file: !3, line: 1035, type: !1125)
!3580 = !DILocation(line: 1035, column: 41, scope: !3574)
!3581 = !DILocation(line: 1037, column: 7, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1037, column: 7)
!3583 = !DILocation(line: 1037, column: 20, scope: !3582)
!3584 = !DILocation(line: 1037, column: 7, scope: !3574)
!3585 = !DILocation(line: 1039, column: 7, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3582, file: !3, line: 1038, column: 5)
!3587 = !DILocation(line: 1040, column: 11, scope: !3586)
!3588 = !DILocation(line: 1040, column: 9, scope: !3586)
!3589 = !DILocation(line: 1041, column: 5, scope: !3586)
!3590 = !DILocation(line: 1042, column: 7, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1042, column: 7)
!3592 = !DILocation(line: 1042, column: 7, scope: !3574)
!3593 = !DILocation(line: 1044, column: 24, scope: !3591)
!3594 = !DILocation(line: 1044, column: 48, scope: !3591)
!3595 = !DILocation(line: 1045, column: 13, scope: !3591)
!3596 = !DILocation(line: 1044, column: 27, scope: !3591)
!3597 = !DILocation(line: 1044, column: 9, scope: !3591)
!3598 = !DILocation(line: 1043, column: 5, scope: !3591)
!3599 = !DILocation(line: 1044, column: 7, scope: !3591)
!3600 = !DILocation(line: 1046, column: 7, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1046, column: 7)
!3602 = !DILocation(line: 1046, column: 20, scope: !3601)
!3603 = !DILocation(line: 1046, column: 7, scope: !3574)
!3604 = !DILocation(line: 1048, column: 11, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3606, file: !3, line: 1048, column: 11)
!3606 = distinct !DILexicalBlock(scope: !3601, file: !3, line: 1047, column: 5)
!3607 = !DILocation(line: 1048, column: 11, scope: !3606)
!3608 = !DILocation(line: 1049, column: 50, scope: !3605)
!3609 = !DILocation(line: 1049, column: 35, scope: !3605)
!3610 = !DILocation(line: 1049, column: 9, scope: !3605)
!3611 = !DILocation(line: 1049, column: 33, scope: !3605)
!3612 = !DILocation(line: 1050, column: 11, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3606, file: !3, line: 1050, column: 11)
!3614 = !DILocation(line: 1050, column: 11, scope: !3606)
!3615 = !DILocation(line: 1052, column: 21, scope: !3613)
!3616 = !DILocation(line: 1052, column: 24, scope: !3613)
!3617 = !DILocation(line: 1052, column: 6, scope: !3613)
!3618 = !DILocation(line: 1051, column: 2, scope: !3613)
!3619 = !DILocation(line: 1052, column: 4, scope: !3613)
!3620 = !DILocation(line: 1053, column: 5, scope: !3606)
!3621 = !DILocation(line: 1054, column: 7, scope: !3622)
!3622 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1054, column: 7)
!3623 = !DILocation(line: 1054, column: 20, scope: !3622)
!3624 = !DILocation(line: 1054, column: 7, scope: !3574)
!3625 = !DILocalVariable(name: "i", scope: !3626, file: !3, line: 1056, type: !1149)
!3626 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 1055, column: 5)
!3627 = !DILocation(line: 1056, column: 11, scope: !3626)
!3628 = !DILocalVariable(name: "start", scope: !3626, file: !3, line: 1056, type: !1149)
!3629 = !DILocation(line: 1056, column: 14, scope: !3626)
!3630 = !DILocation(line: 1060, column: 11, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3626, file: !3, line: 1060, column: 11)
!3632 = !DILocation(line: 1060, column: 11, scope: !3626)
!3633 = !DILocation(line: 1061, column: 8, scope: !3631)
!3634 = !DILocation(line: 1061, column: 2, scope: !3631)
!3635 = !DILocation(line: 1063, column: 8, scope: !3631)
!3636 = !DILocation(line: 1065, column: 16, scope: !3637)
!3637 = distinct !DILexicalBlock(scope: !3626, file: !3, line: 1065, column: 7)
!3638 = !DILocation(line: 1065, column: 14, scope: !3637)
!3639 = !DILocation(line: 1065, column: 12, scope: !3637)
!3640 = !DILocation(line: 1065, column: 23, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 1065, column: 7)
!3642 = !DILocation(line: 1065, column: 27, scope: !3641)
!3643 = !DILocation(line: 1065, column: 25, scope: !3641)
!3644 = !DILocation(line: 1065, column: 7, scope: !3637)
!3645 = !DILocalVariable(name: "y", scope: !3646, file: !3, line: 1067, type: !1125)
!3646 = distinct !DILexicalBlock(scope: !3641, file: !3, line: 1066, column: 2)
!3647 = !DILocation(line: 1067, column: 8, scope: !3646)
!3648 = !DILocation(line: 1067, column: 12, scope: !3646)
!3649 = !DILocation(line: 1068, column: 8, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1068, column: 8)
!3651 = !DILocation(line: 1068, column: 8, scope: !3646)
!3652 = !DILocation(line: 1069, column: 47, scope: !3650)
!3653 = !DILocation(line: 1069, column: 50, scope: !3650)
!3654 = !DILocation(line: 1069, column: 32, scope: !3650)
!3655 = !DILocation(line: 1069, column: 6, scope: !3650)
!3656 = !DILocation(line: 1069, column: 30, scope: !3650)
!3657 = !DILocation(line: 1070, column: 2, scope: !3646)
!3658 = !DILocation(line: 1065, column: 44, scope: !3641)
!3659 = !DILocation(line: 1065, column: 7, scope: !3641)
!3660 = distinct !{!3660, !3644, !3661}
!3661 = !DILocation(line: 1070, column: 2, scope: !3637)
!3662 = !DILocation(line: 1071, column: 5, scope: !3626)
!3663 = !DILocation(line: 1072, column: 1, scope: !3574)
!3664 = distinct !DISubprogram(name: "subreg_lowpart_p", scope: !3, file: !3, line: 1325, type: !3665, scopeLine: 1326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3665 = !DISubroutineType(types: !3666)
!3666 = !{!1149, !2177}
!3667 = !DILocalVariable(name: "x", arg: 1, scope: !3664, file: !3, line: 1325, type: !2177)
!3668 = !DILocation(line: 1325, column: 29, scope: !3664)
!3669 = !DILocation(line: 1327, column: 7, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3664, file: !3, line: 1327, column: 7)
!3671 = !DILocation(line: 1327, column: 20, scope: !3670)
!3672 = !DILocation(line: 1327, column: 7, scope: !3664)
!3673 = !DILocation(line: 1328, column: 5, scope: !3670)
!3674 = !DILocation(line: 1329, column: 12, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 1329, column: 12)
!3676 = !DILocation(line: 1329, column: 38, scope: !3675)
!3677 = !DILocation(line: 1329, column: 12, scope: !3670)
!3678 = !DILocation(line: 1330, column: 5, scope: !3675)
!3679 = !DILocation(line: 1332, column: 34, scope: !3664)
!3680 = !DILocation(line: 1332, column: 48, scope: !3664)
!3681 = !DILocation(line: 1332, column: 11, scope: !3664)
!3682 = !DILocation(line: 1333, column: 7, scope: !3664)
!3683 = !DILocation(line: 1333, column: 4, scope: !3664)
!3684 = !DILocation(line: 1332, column: 3, scope: !3664)
!3685 = !DILocation(line: 1334, column: 1, scope: !3664)
!3686 = distinct !DISubprogram(name: "set_decl_rtl", scope: !3, file: !3, line: 1077, type: !3575, scopeLine: 1078, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3687 = !DILocalVariable(name: "t", arg: 1, scope: !3686, file: !3, line: 1077, type: !1247)
!3688 = !DILocation(line: 1077, column: 20, scope: !3686)
!3689 = !DILocalVariable(name: "x", arg: 2, scope: !3686, file: !3, line: 1077, type: !1125)
!3690 = !DILocation(line: 1077, column: 27, scope: !3686)
!3691 = !DILocation(line: 1079, column: 44, scope: !3686)
!3692 = !DILocation(line: 1079, column: 3, scope: !3686)
!3693 = !DILocation(line: 1079, column: 24, scope: !3686)
!3694 = !DILocation(line: 1079, column: 38, scope: !3686)
!3695 = !DILocation(line: 1079, column: 42, scope: !3686)
!3696 = !DILocation(line: 1080, column: 7, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1080, column: 7)
!3698 = !DILocation(line: 1080, column: 7, scope: !3686)
!3699 = !DILocation(line: 1081, column: 33, scope: !3697)
!3700 = !DILocation(line: 1081, column: 36, scope: !3697)
!3701 = !DILocation(line: 1081, column: 5, scope: !3697)
!3702 = !DILocation(line: 1082, column: 1, scope: !3686)
!3703 = distinct !DISubprogram(name: "set_decl_incoming_rtl", scope: !3, file: !3, line: 1088, type: !3704, scopeLine: 1089, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3704 = !DISubroutineType(types: !3705)
!3705 = !{null, !1247, !1125, !1360}
!3706 = !DILocalVariable(name: "t", arg: 1, scope: !3703, file: !3, line: 1088, type: !1247)
!3707 = !DILocation(line: 1088, column: 29, scope: !3703)
!3708 = !DILocalVariable(name: "x", arg: 2, scope: !3703, file: !3, line: 1088, type: !1125)
!3709 = !DILocation(line: 1088, column: 36, scope: !3703)
!3710 = !DILocalVariable(name: "by_reference_p", arg: 3, scope: !3703, file: !3, line: 1088, type: !1360)
!3711 = !DILocation(line: 1088, column: 44, scope: !3703)
!3712 = !DILocation(line: 1090, column: 27, scope: !3703)
!3713 = !DILocation(line: 1090, column: 3, scope: !3703)
!3714 = !DILocation(line: 1090, column: 25, scope: !3703)
!3715 = !DILocation(line: 1091, column: 7, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3703, file: !3, line: 1091, column: 7)
!3717 = !DILocation(line: 1091, column: 9, scope: !3716)
!3718 = !DILocation(line: 1091, column: 13, scope: !3716)
!3719 = !DILocation(line: 1091, column: 7, scope: !3703)
!3720 = !DILocation(line: 1092, column: 33, scope: !3716)
!3721 = !DILocation(line: 1092, column: 36, scope: !3716)
!3722 = !DILocation(line: 1092, column: 5, scope: !3716)
!3723 = !DILocation(line: 1093, column: 1, scope: !3703)
!3724 = distinct !DISubprogram(name: "mark_user_reg", scope: !3, file: !3, line: 1098, type: !3725, scopeLine: 1099, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3725 = !DISubroutineType(types: !3726)
!3726 = !{null, !1125}
!3727 = !DILocalVariable(name: "reg", arg: 1, scope: !3724, file: !3, line: 1098, type: !1125)
!3728 = !DILocation(line: 1098, column: 20, scope: !3724)
!3729 = !DILocation(line: 1100, column: 7, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3724, file: !3, line: 1100, column: 7)
!3731 = !DILocation(line: 1100, column: 22, scope: !3730)
!3732 = !DILocation(line: 1100, column: 7, scope: !3724)
!3733 = !DILocation(line: 1102, column: 7, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3730, file: !3, line: 1101, column: 5)
!3735 = !DILocation(line: 1102, column: 37, scope: !3734)
!3736 = !DILocation(line: 1103, column: 7, scope: !3734)
!3737 = !DILocation(line: 1103, column: 37, scope: !3734)
!3738 = !DILocation(line: 1104, column: 5, scope: !3734)
!3739 = !DILocation(line: 1107, column: 7, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3730, file: !3, line: 1106, column: 5)
!3741 = !DILocation(line: 1108, column: 7, scope: !3740)
!3742 = !DILocation(line: 1108, column: 27, scope: !3740)
!3743 = !DILocation(line: 1110, column: 1, scope: !3724)
!3744 = distinct !DISubprogram(name: "max_reg_num", scope: !3, file: !3, line: 1133, type: !3745, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3745 = !DISubroutineType(types: !3746)
!3746 = !{!1149}
!3747 = !DILocation(line: 1135, column: 10, scope: !3744)
!3748 = !DILocation(line: 1135, column: 3, scope: !3744)
!3749 = distinct !DISubprogram(name: "max_label_num", scope: !3, file: !3, line: 1141, type: !3745, scopeLine: 1142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3750 = !DILocation(line: 1143, column: 10, scope: !3749)
!3751 = !DILocation(line: 1143, column: 3, scope: !3749)
!3752 = distinct !DISubprogram(name: "get_first_label_num", scope: !3, file: !3, line: 1149, type: !3745, scopeLine: 1150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3753 = !DILocation(line: 1151, column: 10, scope: !3752)
!3754 = !DILocation(line: 1151, column: 3, scope: !3752)
!3755 = distinct !DISubprogram(name: "maybe_set_first_label_num", scope: !3, file: !3, line: 1159, type: !3725, scopeLine: 1160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3756 = !DILocalVariable(name: "x", arg: 1, scope: !3755, file: !3, line: 1159, type: !1125)
!3757 = !DILocation(line: 1159, column: 32, scope: !3755)
!3758 = !DILocation(line: 1161, column: 7, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 1161, column: 7)
!3760 = !DILocation(line: 1161, column: 31, scope: !3759)
!3761 = !DILocation(line: 1161, column: 29, scope: !3759)
!3762 = !DILocation(line: 1161, column: 7, scope: !3755)
!3763 = !DILocation(line: 1162, column: 23, scope: !3759)
!3764 = !DILocation(line: 1162, column: 21, scope: !3759)
!3765 = !DILocation(line: 1162, column: 5, scope: !3759)
!3766 = !DILocation(line: 1163, column: 1, scope: !3755)
!3767 = distinct !DISubprogram(name: "gen_lowpart_common", scope: !3, file: !3, line: 1177, type: !2811, scopeLine: 1178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3768 = !DILocalVariable(name: "mode", arg: 1, scope: !3767, file: !3, line: 1177, type: !5)
!3769 = !DILocation(line: 1177, column: 39, scope: !3767)
!3770 = !DILocalVariable(name: "x", arg: 2, scope: !3767, file: !3, line: 1177, type: !1125)
!3771 = !DILocation(line: 1177, column: 49, scope: !3767)
!3772 = !DILocalVariable(name: "msize", scope: !3767, file: !3, line: 1179, type: !1149)
!3773 = !DILocation(line: 1179, column: 7, scope: !3767)
!3774 = !DILocation(line: 1179, column: 15, scope: !3767)
!3775 = !DILocalVariable(name: "xsize", scope: !3767, file: !3, line: 1180, type: !1149)
!3776 = !DILocation(line: 1180, column: 7, scope: !3767)
!3777 = !DILocalVariable(name: "offset", scope: !3767, file: !3, line: 1181, type: !1149)
!3778 = !DILocation(line: 1181, column: 7, scope: !3767)
!3779 = !DILocalVariable(name: "innermode", scope: !3767, file: !3, line: 1182, type: !5)
!3780 = !DILocation(line: 1182, column: 21, scope: !3767)
!3781 = !DILocation(line: 1186, column: 15, scope: !3767)
!3782 = !DILocation(line: 1186, column: 13, scope: !3767)
!3783 = !DILocation(line: 1187, column: 7, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 1187, column: 7)
!3785 = !DILocation(line: 1188, column: 7, scope: !3784)
!3786 = !DILocation(line: 1188, column: 10, scope: !3784)
!3787 = !DILocation(line: 1188, column: 16, scope: !3784)
!3788 = !DILocation(line: 1188, column: 32, scope: !3784)
!3789 = !DILocation(line: 1187, column: 7, scope: !3767)
!3790 = !DILocation(line: 1189, column: 17, scope: !3784)
!3791 = !DILocation(line: 1189, column: 15, scope: !3784)
!3792 = !DILocation(line: 1189, column: 5, scope: !3784)
!3793 = !DILocation(line: 1190, column: 12, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 1190, column: 12)
!3795 = !DILocation(line: 1190, column: 22, scope: !3794)
!3796 = !DILocation(line: 1190, column: 12, scope: !3784)
!3797 = !DILocation(line: 1191, column: 17, scope: !3794)
!3798 = !DILocation(line: 1191, column: 15, scope: !3794)
!3799 = !DILocation(line: 1191, column: 5, scope: !3794)
!3800 = !DILocation(line: 1193, column: 11, scope: !3767)
!3801 = !DILocation(line: 1193, column: 9, scope: !3767)
!3802 = !DILocation(line: 1195, column: 3, scope: !3767)
!3803 = !DILocation(line: 1197, column: 7, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 1197, column: 7)
!3805 = !DILocation(line: 1197, column: 20, scope: !3804)
!3806 = !DILocation(line: 1197, column: 17, scope: !3804)
!3807 = !DILocation(line: 1197, column: 7, scope: !3767)
!3808 = !DILocation(line: 1198, column: 12, scope: !3804)
!3809 = !DILocation(line: 1198, column: 5, scope: !3804)
!3810 = !DILocation(line: 1201, column: 8, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 1201, column: 7)
!3812 = !DILocation(line: 1201, column: 14, scope: !3811)
!3813 = !DILocation(line: 1201, column: 38, scope: !3811)
!3814 = !DILocation(line: 1202, column: 11, scope: !3811)
!3815 = !DILocation(line: 1202, column: 17, scope: !3811)
!3816 = !DILocation(line: 1202, column: 41, scope: !3811)
!3817 = !DILocation(line: 1202, column: 7, scope: !3811)
!3818 = !DILocation(line: 1201, column: 7, scope: !3767)
!3819 = !DILocation(line: 1203, column: 5, scope: !3811)
!3820 = !DILocation(line: 1206, column: 7, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 1206, column: 7)
!3822 = !DILocation(line: 1206, column: 34, scope: !3821)
!3823 = !DILocation(line: 1206, column: 37, scope: !3821)
!3824 = !DILocation(line: 1206, column: 45, scope: !3821)
!3825 = !DILocation(line: 1206, column: 43, scope: !3821)
!3826 = !DILocation(line: 1206, column: 7, scope: !3767)
!3827 = !DILocation(line: 1207, column: 5, scope: !3821)
!3828 = !DILocation(line: 1209, column: 35, scope: !3767)
!3829 = !DILocation(line: 1209, column: 41, scope: !3767)
!3830 = !DILocation(line: 1209, column: 12, scope: !3767)
!3831 = !DILocation(line: 1209, column: 10, scope: !3767)
!3832 = !DILocation(line: 1211, column: 8, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 1211, column: 7)
!3834 = !DILocation(line: 1211, column: 21, scope: !3833)
!3835 = !DILocation(line: 1211, column: 36, scope: !3833)
!3836 = !DILocation(line: 1211, column: 39, scope: !3833)
!3837 = !DILocation(line: 1211, column: 52, scope: !3833)
!3838 = !DILocation(line: 1212, column: 7, scope: !3833)
!3839 = !DILocation(line: 1212, column: 11, scope: !3833)
!3840 = !DILocation(line: 1212, column: 33, scope: !3833)
!3841 = !DILocation(line: 1213, column: 4, scope: !3833)
!3842 = !DILocation(line: 1213, column: 7, scope: !3833)
!3843 = !DILocation(line: 1213, column: 29, scope: !3833)
!3844 = !DILocation(line: 1211, column: 7, scope: !3767)
!3845 = !DILocation(line: 1223, column: 11, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3847, file: !3, line: 1223, column: 11)
!3847 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1214, column: 5)
!3848 = !DILocation(line: 1223, column: 37, scope: !3846)
!3849 = !DILocation(line: 1223, column: 34, scope: !3846)
!3850 = !DILocation(line: 1223, column: 11, scope: !3847)
!3851 = !DILocation(line: 1224, column: 9, scope: !3846)
!3852 = !DILocation(line: 1224, column: 2, scope: !3846)
!3853 = !DILocation(line: 1225, column: 16, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3846, file: !3, line: 1225, column: 16)
!3855 = !DILocation(line: 1225, column: 24, scope: !3854)
!3856 = !DILocation(line: 1225, column: 22, scope: !3854)
!3857 = !DILocation(line: 1225, column: 16, scope: !3846)
!3858 = !DILocation(line: 1226, column: 29, scope: !3854)
!3859 = !DILocation(line: 1226, column: 35, scope: !3854)
!3860 = !DILocation(line: 1226, column: 9, scope: !3854)
!3861 = !DILocation(line: 1226, column: 2, scope: !3854)
!3862 = !DILocation(line: 1227, column: 16, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 1227, column: 16)
!3864 = !DILocation(line: 1227, column: 24, scope: !3863)
!3865 = !DILocation(line: 1227, column: 22, scope: !3863)
!3866 = !DILocation(line: 1227, column: 16, scope: !3854)
!3867 = !DILocation(line: 1228, column: 9, scope: !3863)
!3868 = !DILocation(line: 1228, column: 2, scope: !3863)
!3869 = !DILocation(line: 1229, column: 5, scope: !3847)
!3870 = !DILocation(line: 1230, column: 12, scope: !3871)
!3871 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1230, column: 12)
!3872 = !DILocation(line: 1230, column: 25, scope: !3871)
!3873 = !DILocation(line: 1230, column: 35, scope: !3871)
!3874 = !DILocation(line: 1230, column: 38, scope: !3871)
!3875 = !DILocation(line: 1231, column: 5, scope: !3871)
!3876 = !DILocation(line: 1231, column: 8, scope: !3871)
!3877 = !DILocation(line: 1231, column: 21, scope: !3871)
!3878 = !DILocation(line: 1231, column: 31, scope: !3871)
!3879 = !DILocation(line: 1231, column: 34, scope: !3871)
!3880 = !DILocation(line: 1231, column: 47, scope: !3871)
!3881 = !DILocation(line: 1232, column: 5, scope: !3871)
!3882 = !DILocation(line: 1232, column: 8, scope: !3871)
!3883 = !DILocation(line: 1232, column: 21, scope: !3871)
!3884 = !DILocation(line: 1232, column: 37, scope: !3871)
!3885 = !DILocation(line: 1232, column: 40, scope: !3871)
!3886 = !DILocation(line: 1230, column: 12, scope: !3833)
!3887 = !DILocation(line: 1233, column: 33, scope: !3871)
!3888 = !DILocation(line: 1233, column: 39, scope: !3871)
!3889 = !DILocation(line: 1233, column: 42, scope: !3871)
!3890 = !DILocation(line: 1233, column: 53, scope: !3871)
!3891 = !DILocation(line: 1233, column: 12, scope: !3871)
!3892 = !DILocation(line: 1233, column: 5, scope: !3871)
!3893 = !DILocation(line: 1236, column: 3, scope: !3767)
!3894 = !DILocation(line: 1237, column: 1, scope: !3767)
!3895 = distinct !DISubprogram(name: "gen_highpart", scope: !3, file: !3, line: 1240, type: !2811, scopeLine: 1241, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3896 = !DILocalVariable(name: "mode", arg: 1, scope: !3895, file: !3, line: 1240, type: !5)
!3897 = !DILocation(line: 1240, column: 33, scope: !3895)
!3898 = !DILocalVariable(name: "x", arg: 2, scope: !3895, file: !3, line: 1240, type: !1125)
!3899 = !DILocation(line: 1240, column: 43, scope: !3895)
!3900 = !DILocalVariable(name: "msize", scope: !3895, file: !3, line: 1242, type: !7)
!3901 = !DILocation(line: 1242, column: 16, scope: !3895)
!3902 = !DILocation(line: 1242, column: 24, scope: !3895)
!3903 = !DILocalVariable(name: "result", scope: !3895, file: !3, line: 1243, type: !1125)
!3904 = !DILocation(line: 1243, column: 7, scope: !3895)
!3905 = !DILocation(line: 1247, column: 3, scope: !3895)
!3906 = !DILocation(line: 1250, column: 33, scope: !3895)
!3907 = !DILocation(line: 1250, column: 39, scope: !3895)
!3908 = !DILocation(line: 1250, column: 42, scope: !3895)
!3909 = !DILocation(line: 1251, column: 29, scope: !3895)
!3910 = !DILocation(line: 1251, column: 35, scope: !3895)
!3911 = !DILocation(line: 1251, column: 5, scope: !3895)
!3912 = !DILocation(line: 1250, column: 12, scope: !3895)
!3913 = !DILocation(line: 1250, column: 10, scope: !3895)
!3914 = !DILocation(line: 1252, column: 3, scope: !3895)
!3915 = !DILocation(line: 1257, column: 7, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1257, column: 7)
!3917 = !DILocation(line: 1257, column: 7, scope: !3895)
!3918 = !DILocation(line: 1259, column: 30, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 1258, column: 5)
!3920 = !DILocation(line: 1259, column: 16, scope: !3919)
!3921 = !DILocation(line: 1259, column: 14, scope: !3919)
!3922 = !DILocation(line: 1260, column: 7, scope: !3919)
!3923 = !DILocation(line: 1261, column: 5, scope: !3919)
!3924 = !DILocation(line: 1263, column: 10, scope: !3895)
!3925 = !DILocation(line: 1263, column: 3, scope: !3895)
!3926 = distinct !DISubprogram(name: "subreg_highpart_offset", scope: !3, file: !3, line: 1302, type: !3033, scopeLine: 1303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3927 = !DILocalVariable(name: "outermode", arg: 1, scope: !3926, file: !3, line: 1302, type: !5)
!3928 = !DILocation(line: 1302, column: 43, scope: !3926)
!3929 = !DILocalVariable(name: "innermode", arg: 2, scope: !3926, file: !3, line: 1302, type: !5)
!3930 = !DILocation(line: 1302, column: 72, scope: !3926)
!3931 = !DILocalVariable(name: "offset", scope: !3926, file: !3, line: 1304, type: !7)
!3932 = !DILocation(line: 1304, column: 16, scope: !3926)
!3933 = !DILocalVariable(name: "difference", scope: !3926, file: !3, line: 1305, type: !1149)
!3934 = !DILocation(line: 1305, column: 7, scope: !3926)
!3935 = !DILocation(line: 1305, column: 21, scope: !3926)
!3936 = !DILocation(line: 1305, column: 49, scope: !3926)
!3937 = !DILocation(line: 1305, column: 47, scope: !3926)
!3938 = !DILocation(line: 1307, column: 3, scope: !3926)
!3939 = !DILocation(line: 1309, column: 7, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 1309, column: 7)
!3941 = !DILocation(line: 1309, column: 18, scope: !3940)
!3942 = !DILocation(line: 1309, column: 7, scope: !3926)
!3943 = !DILocation(line: 1312, column: 13, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 1311, column: 11)
!3945 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 1310, column: 5)
!3946 = !DILocation(line: 1312, column: 24, scope: !3944)
!3947 = !DILocation(line: 1312, column: 42, scope: !3944)
!3948 = !DILocation(line: 1312, column: 9, scope: !3944)
!3949 = !DILocation(line: 1314, column: 12, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 1313, column: 11)
!3951 = !DILocation(line: 1314, column: 23, scope: !3950)
!3952 = !DILocation(line: 1314, column: 9, scope: !3950)
!3953 = !DILocation(line: 1315, column: 5, scope: !3945)
!3954 = !DILocation(line: 1317, column: 10, scope: !3926)
!3955 = !DILocation(line: 1317, column: 3, scope: !3926)
!3956 = distinct !DISubprogram(name: "gen_highpart_mode", scope: !3, file: !3, line: 1269, type: !3957, scopeLine: 1270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3957 = !DISubroutineType(types: !3958)
!3958 = !{!1125, !5, !5, !1125}
!3959 = !DILocalVariable(name: "outermode", arg: 1, scope: !3956, file: !3, line: 1269, type: !5)
!3960 = !DILocation(line: 1269, column: 38, scope: !3956)
!3961 = !DILocalVariable(name: "innermode", arg: 2, scope: !3956, file: !3, line: 1269, type: !5)
!3962 = !DILocation(line: 1269, column: 67, scope: !3956)
!3963 = !DILocalVariable(name: "exp", arg: 3, scope: !3956, file: !3, line: 1269, type: !1125)
!3964 = !DILocation(line: 1269, column: 82, scope: !3956)
!3965 = !DILocation(line: 1271, column: 7, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 1271, column: 7)
!3967 = !DILocation(line: 1271, column: 22, scope: !3966)
!3968 = !DILocation(line: 1271, column: 7, scope: !3956)
!3969 = !DILocation(line: 1273, column: 7, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 1272, column: 5)
!3971 = !DILocation(line: 1274, column: 28, scope: !3970)
!3972 = !DILocation(line: 1274, column: 39, scope: !3970)
!3973 = !DILocation(line: 1274, column: 14, scope: !3970)
!3974 = !DILocation(line: 1274, column: 7, scope: !3970)
!3975 = !DILocation(line: 1276, column: 31, scope: !3956)
!3976 = !DILocation(line: 1276, column: 42, scope: !3956)
!3977 = !DILocation(line: 1276, column: 47, scope: !3956)
!3978 = !DILocation(line: 1277, column: 34, scope: !3956)
!3979 = !DILocation(line: 1277, column: 45, scope: !3956)
!3980 = !DILocation(line: 1277, column: 10, scope: !3956)
!3981 = !DILocation(line: 1276, column: 10, scope: !3956)
!3982 = !DILocation(line: 1276, column: 3, scope: !3956)
!3983 = !DILocation(line: 1278, column: 1, scope: !3956)
!3984 = distinct !DISubprogram(name: "operand_subword", scope: !3, file: !3, line: 1362, type: !3985, scopeLine: 1363, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!3985 = !DISubroutineType(types: !3986)
!3986 = !{!1125, !1125, !7, !1149, !5}
!3987 = !DILocalVariable(name: "op", arg: 1, scope: !3984, file: !3, line: 1362, type: !1125)
!3988 = !DILocation(line: 1362, column: 22, scope: !3984)
!3989 = !DILocalVariable(name: "offset", arg: 2, scope: !3984, file: !3, line: 1362, type: !7)
!3990 = !DILocation(line: 1362, column: 39, scope: !3984)
!3991 = !DILocalVariable(name: "validate_address", arg: 3, scope: !3984, file: !3, line: 1362, type: !1149)
!3992 = !DILocation(line: 1362, column: 51, scope: !3984)
!3993 = !DILocalVariable(name: "mode", arg: 4, scope: !3984, file: !3, line: 1362, type: !5)
!3994 = !DILocation(line: 1362, column: 87, scope: !3984)
!3995 = !DILocation(line: 1364, column: 7, scope: !3996)
!3996 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 1364, column: 7)
!3997 = !DILocation(line: 1364, column: 12, scope: !3996)
!3998 = !DILocation(line: 1364, column: 7, scope: !3984)
!3999 = !DILocation(line: 1365, column: 12, scope: !3996)
!4000 = !DILocation(line: 1365, column: 10, scope: !3996)
!4001 = !DILocation(line: 1365, column: 5, scope: !3996)
!4002 = !DILocation(line: 1367, column: 3, scope: !3984)
!4003 = !DILocation(line: 1370, column: 7, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 1370, column: 7)
!4005 = !DILocation(line: 1370, column: 12, scope: !4004)
!4006 = !DILocation(line: 1371, column: 7, scope: !4004)
!4007 = !DILocation(line: 1371, column: 11, scope: !4004)
!4008 = !DILocation(line: 1371, column: 32, scope: !4004)
!4009 = !DILocation(line: 1370, column: 7, scope: !3984)
!4010 = !DILocation(line: 1372, column: 5, scope: !4004)
!4011 = !DILocation(line: 1375, column: 7, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 1375, column: 7)
!4013 = !DILocation(line: 1375, column: 12, scope: !4012)
!4014 = !DILocation(line: 1376, column: 7, scope: !4012)
!4015 = !DILocation(line: 1376, column: 11, scope: !4012)
!4016 = !DILocation(line: 1376, column: 18, scope: !4012)
!4017 = !DILocation(line: 1376, column: 23, scope: !4012)
!4018 = !DILocation(line: 1376, column: 42, scope: !4012)
!4019 = !DILocation(line: 1376, column: 40, scope: !4012)
!4020 = !DILocation(line: 1375, column: 7, scope: !3984)
!4021 = !DILocation(line: 1377, column: 12, scope: !4012)
!4022 = !DILocation(line: 1377, column: 5, scope: !4012)
!4023 = !DILocation(line: 1380, column: 7, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 1380, column: 7)
!4025 = !DILocation(line: 1380, column: 7, scope: !3984)
!4026 = !DILocalVariable(name: "new_rtx", scope: !4027, file: !3, line: 1382, type: !1125)
!4027 = distinct !DILexicalBlock(scope: !4024, file: !3, line: 1381, column: 5)
!4028 = !DILocation(line: 1382, column: 11, scope: !4027)
!4029 = !DILocation(line: 1382, column: 21, scope: !4027)
!4030 = !DILocation(line: 1384, column: 13, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 1384, column: 11)
!4032 = !DILocation(line: 1384, column: 11, scope: !4027)
!4033 = !DILocation(line: 1385, column: 9, scope: !4031)
!4034 = !DILocation(line: 1385, column: 2, scope: !4031)
!4035 = !DILocation(line: 1387, column: 16, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 1387, column: 16)
!4037 = !DILocation(line: 1387, column: 16, scope: !4031)
!4038 = !DILocation(line: 1389, column: 46, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 1389, column: 8)
!4040 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 1388, column: 2)
!4041 = !DILocation(line: 1390, column: 11, scope: !4039)
!4042 = !DILocation(line: 1391, column: 11, scope: !4039)
!4043 = !DILocation(line: 1389, column: 10, scope: !4039)
!4044 = !DILocation(line: 1389, column: 8, scope: !4040)
!4045 = !DILocation(line: 1392, column: 6, scope: !4039)
!4046 = !DILocation(line: 1393, column: 2, scope: !4040)
!4047 = !DILocation(line: 1395, column: 32, scope: !4036)
!4048 = !DILocation(line: 1395, column: 41, scope: !4036)
!4049 = !DILocation(line: 1395, column: 9, scope: !4036)
!4050 = !DILocation(line: 1395, column: 2, scope: !4036)
!4051 = !DILocation(line: 1396, column: 5, scope: !4027)
!4052 = !DILocation(line: 1399, column: 31, scope: !3984)
!4053 = !DILocation(line: 1399, column: 42, scope: !3984)
!4054 = !DILocation(line: 1399, column: 46, scope: !3984)
!4055 = !DILocation(line: 1399, column: 53, scope: !3984)
!4056 = !DILocation(line: 1399, column: 60, scope: !3984)
!4057 = !DILocation(line: 1399, column: 10, scope: !3984)
!4058 = !DILocation(line: 1399, column: 3, scope: !3984)
!4059 = !DILocation(line: 1400, column: 1, scope: !3984)
!4060 = distinct !DISubprogram(name: "adjust_address_1", scope: !3, file: !3, line: 1966, type: !4061, scopeLine: 1968, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4061 = !DISubroutineType(types: !4062)
!4062 = !{!1125, !1125, !5, !1216, !1149, !1149}
!4063 = !DILocalVariable(name: "memref", arg: 1, scope: !4060, file: !3, line: 1966, type: !1125)
!4064 = !DILocation(line: 1966, column: 23, scope: !4060)
!4065 = !DILocalVariable(name: "mode", arg: 2, scope: !4060, file: !3, line: 1966, type: !5)
!4066 = !DILocation(line: 1966, column: 49, scope: !4060)
!4067 = !DILocalVariable(name: "offset", arg: 3, scope: !4060, file: !3, line: 1966, type: !1216)
!4068 = !DILocation(line: 1966, column: 69, scope: !4060)
!4069 = !DILocalVariable(name: "validate", arg: 4, scope: !4060, file: !3, line: 1967, type: !1149)
!4070 = !DILocation(line: 1967, column: 9, scope: !4060)
!4071 = !DILocalVariable(name: "adjust", arg: 5, scope: !4060, file: !3, line: 1967, type: !1149)
!4072 = !DILocation(line: 1967, column: 23, scope: !4060)
!4073 = !DILocalVariable(name: "addr", scope: !4060, file: !3, line: 1969, type: !1125)
!4074 = !DILocation(line: 1969, column: 7, scope: !4060)
!4075 = !DILocation(line: 1969, column: 14, scope: !4060)
!4076 = !DILocalVariable(name: "new_rtx", scope: !4060, file: !3, line: 1970, type: !1125)
!4077 = !DILocation(line: 1970, column: 7, scope: !4060)
!4078 = !DILocalVariable(name: "memoffset", scope: !4060, file: !3, line: 1971, type: !1125)
!4079 = !DILocation(line: 1971, column: 7, scope: !4060)
!4080 = !DILocation(line: 1971, column: 19, scope: !4060)
!4081 = !DILocalVariable(name: "size", scope: !4060, file: !3, line: 1972, type: !1125)
!4082 = !DILocation(line: 1972, column: 7, scope: !4060)
!4083 = !DILocalVariable(name: "memalign", scope: !4060, file: !3, line: 1973, type: !7)
!4084 = !DILocation(line: 1973, column: 16, scope: !4060)
!4085 = !DILocation(line: 1973, column: 27, scope: !4060)
!4086 = !DILocalVariable(name: "as", scope: !4060, file: !3, line: 1974, type: !4087)
!4087 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !1126, line: 73, baseType: !1360)
!4088 = !DILocation(line: 1974, column: 16, scope: !4060)
!4089 = !DILocation(line: 1974, column: 21, scope: !4060)
!4090 = !DILocalVariable(name: "address_mode", scope: !4060, file: !3, line: 1975, type: !5)
!4091 = !DILocation(line: 1975, column: 21, scope: !4060)
!4092 = !DILocation(line: 1975, column: 55, scope: !4060)
!4093 = !DILocation(line: 1975, column: 69, scope: !4060)
!4094 = !DILocation(line: 1975, column: 36, scope: !4060)
!4095 = !DILocalVariable(name: "pbits", scope: !4060, file: !3, line: 1976, type: !1149)
!4096 = !DILocation(line: 1976, column: 7, scope: !4060)
!4097 = !DILocation(line: 1979, column: 7, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1979, column: 7)
!4099 = !DILocation(line: 1979, column: 15, scope: !4098)
!4100 = !DILocation(line: 1979, column: 12, scope: !4098)
!4101 = !DILocation(line: 1979, column: 33, scope: !4098)
!4102 = !DILocation(line: 1979, column: 37, scope: !4098)
!4103 = !DILocation(line: 1980, column: 7, scope: !4098)
!4104 = !DILocation(line: 1980, column: 12, scope: !4098)
!4105 = !DILocation(line: 1980, column: 21, scope: !4098)
!4106 = !DILocation(line: 1980, column: 53, scope: !4098)
!4107 = !DILocation(line: 1980, column: 59, scope: !4098)
!4108 = !DILocation(line: 1980, column: 65, scope: !4098)
!4109 = !DILocation(line: 1980, column: 24, scope: !4098)
!4110 = !DILocation(line: 1979, column: 7, scope: !4060)
!4111 = !DILocation(line: 1981, column: 12, scope: !4098)
!4112 = !DILocation(line: 1981, column: 5, scope: !4098)
!4113 = !DILocation(line: 1986, column: 20, scope: !4060)
!4114 = !DILocation(line: 1986, column: 10, scope: !4060)
!4115 = !DILocation(line: 1986, column: 8, scope: !4060)
!4116 = !DILocation(line: 1990, column: 11, scope: !4060)
!4117 = !DILocation(line: 1990, column: 9, scope: !4060)
!4118 = !DILocation(line: 1991, column: 32, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1991, column: 7)
!4120 = !DILocation(line: 1991, column: 30, scope: !4119)
!4121 = !DILocation(line: 1991, column: 7, scope: !4060)
!4122 = !DILocalVariable(name: "shift", scope: !4123, file: !3, line: 1993, type: !1149)
!4123 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1992, column: 5)
!4124 = !DILocation(line: 1993, column: 11, scope: !4123)
!4125 = !DILocation(line: 1993, column: 44, scope: !4123)
!4126 = !DILocation(line: 1993, column: 42, scope: !4123)
!4127 = !DILocation(line: 1994, column: 60, scope: !4123)
!4128 = !DILocation(line: 1994, column: 70, scope: !4123)
!4129 = !DILocation(line: 1994, column: 67, scope: !4123)
!4130 = !DILocation(line: 1995, column: 6, scope: !4123)
!4131 = !DILocation(line: 1995, column: 3, scope: !4123)
!4132 = !DILocation(line: 1994, column: 14, scope: !4123)
!4133 = !DILocation(line: 1996, column: 5, scope: !4123)
!4134 = !DILocation(line: 1998, column: 7, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1998, column: 7)
!4136 = !DILocation(line: 1998, column: 7, scope: !4060)
!4137 = !DILocation(line: 2002, column: 11, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 2002, column: 11)
!4139 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 1999, column: 5)
!4140 = !DILocation(line: 2002, column: 29, scope: !4138)
!4141 = !DILocation(line: 2002, column: 40, scope: !4138)
!4142 = !DILocation(line: 2002, column: 43, scope: !4138)
!4143 = !DILocation(line: 2002, column: 59, scope: !4138)
!4144 = !DILocation(line: 2003, column: 4, scope: !4138)
!4145 = !DILocation(line: 2003, column: 7, scope: !4138)
!4146 = !DILocation(line: 2003, column: 14, scope: !4138)
!4147 = !DILocation(line: 2004, column: 4, scope: !4138)
!4148 = !DILocation(line: 2004, column: 32, scope: !4138)
!4149 = !DILocation(line: 2005, column: 10, scope: !4138)
!4150 = !DILocation(line: 2005, column: 49, scope: !4138)
!4151 = !DILocation(line: 2005, column: 8, scope: !4138)
!4152 = !DILocation(line: 2002, column: 11, scope: !4139)
!4153 = !DILocation(line: 2006, column: 9, scope: !4138)
!4154 = !DILocation(line: 2006, column: 7, scope: !4138)
!4155 = !DILocation(line: 2006, column: 2, scope: !4138)
!4156 = !DILocation(line: 2009, column: 24, scope: !4138)
!4157 = !DILocation(line: 2009, column: 30, scope: !4138)
!4158 = !DILocation(line: 2009, column: 9, scope: !4138)
!4159 = !DILocation(line: 2009, column: 7, scope: !4138)
!4160 = !DILocation(line: 2010, column: 5, scope: !4139)
!4161 = !DILocation(line: 2012, column: 31, scope: !4060)
!4162 = !DILocation(line: 2012, column: 39, scope: !4060)
!4163 = !DILocation(line: 2012, column: 45, scope: !4060)
!4164 = !DILocation(line: 2012, column: 51, scope: !4060)
!4165 = !DILocation(line: 2012, column: 13, scope: !4060)
!4166 = !DILocation(line: 2012, column: 11, scope: !4060)
!4167 = !DILocation(line: 2016, column: 7, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 2016, column: 7)
!4169 = !DILocation(line: 2016, column: 18, scope: !4168)
!4170 = !DILocation(line: 2016, column: 15, scope: !4168)
!4171 = !DILocation(line: 2016, column: 25, scope: !4168)
!4172 = !DILocation(line: 2016, column: 28, scope: !4168)
!4173 = !DILocation(line: 2016, column: 35, scope: !4168)
!4174 = !DILocation(line: 2016, column: 7, scope: !4060)
!4175 = !DILocation(line: 2017, column: 25, scope: !4168)
!4176 = !DILocation(line: 2017, column: 15, scope: !4168)
!4177 = !DILocation(line: 2017, column: 13, scope: !4168)
!4178 = !DILocation(line: 2017, column: 5, scope: !4168)
!4179 = !DILocation(line: 2021, column: 7, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 2021, column: 7)
!4181 = !DILocation(line: 2021, column: 7, scope: !4060)
!4182 = !DILocation(line: 2022, column: 17, scope: !4180)
!4183 = !DILocation(line: 2022, column: 15, scope: !4180)
!4184 = !DILocation(line: 2022, column: 5, scope: !4180)
!4185 = !DILocation(line: 2027, column: 7, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 2027, column: 7)
!4187 = !DILocation(line: 2027, column: 14, scope: !4186)
!4188 = !DILocation(line: 2027, column: 7, scope: !4060)
!4189 = !DILocation(line: 2029, column: 9, scope: !4186)
!4190 = !DILocation(line: 2029, column: 7, scope: !4186)
!4191 = !DILocation(line: 2028, column: 5, scope: !4186)
!4192 = !DILocation(line: 2033, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 2033, column: 7)
!4194 = !DILocation(line: 2033, column: 26, scope: !4193)
!4195 = !DILocation(line: 2033, column: 7, scope: !4060)
!4196 = !DILocation(line: 2034, column: 12, scope: !4193)
!4197 = !DILocation(line: 2034, column: 10, scope: !4193)
!4198 = !DILocation(line: 2034, column: 5, scope: !4193)
!4199 = !DILocation(line: 2035, column: 12, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 2035, column: 12)
!4201 = !DILocation(line: 2035, column: 12, scope: !4193)
!4202 = !DILocation(line: 2036, column: 27, scope: !4200)
!4203 = !DILocation(line: 2036, column: 47, scope: !4200)
!4204 = !DILocation(line: 2036, column: 46, scope: !4200)
!4205 = !DILocation(line: 2036, column: 12, scope: !4200)
!4206 = !DILocation(line: 2036, column: 10, scope: !4200)
!4207 = !DILocation(line: 2036, column: 5, scope: !4200)
!4208 = !DILocation(line: 2038, column: 40, scope: !4060)
!4209 = !DILocation(line: 2038, column: 64, scope: !4060)
!4210 = !DILocation(line: 2039, column: 12, scope: !4060)
!4211 = !DILocation(line: 2039, column: 23, scope: !4060)
!4212 = !DILocation(line: 2039, column: 29, scope: !4060)
!4213 = !DILocation(line: 2039, column: 39, scope: !4060)
!4214 = !DILocation(line: 2040, column: 12, scope: !4060)
!4215 = !DILocation(line: 2038, column: 25, scope: !4060)
!4216 = !DILocation(line: 2038, column: 3, scope: !4060)
!4217 = !DILocation(line: 2038, column: 23, scope: !4060)
!4218 = !DILocation(line: 2044, column: 10, scope: !4060)
!4219 = !DILocation(line: 2044, column: 3, scope: !4060)
!4220 = !DILocation(line: 2045, column: 1, scope: !4060)
!4221 = distinct !DISubprogram(name: "replace_equiv_address", scope: !3, file: !3, line: 2110, type: !4222, scopeLine: 2111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4222 = !DISubroutineType(types: !4223)
!4223 = !{!1125, !1125, !1125}
!4224 = !DILocalVariable(name: "memref", arg: 1, scope: !4221, file: !3, line: 2110, type: !1125)
!4225 = !DILocation(line: 2110, column: 28, scope: !4221)
!4226 = !DILocalVariable(name: "addr", arg: 2, scope: !4221, file: !3, line: 2110, type: !1125)
!4227 = !DILocation(line: 2110, column: 40, scope: !4221)
!4228 = !DILocation(line: 2114, column: 29, scope: !4221)
!4229 = !DILocation(line: 2114, column: 47, scope: !4221)
!4230 = !DILocation(line: 2114, column: 3, scope: !4221)
!4231 = !DILocation(line: 2115, column: 28, scope: !4221)
!4232 = !DILocation(line: 2115, column: 46, scope: !4221)
!4233 = !DILocation(line: 2115, column: 10, scope: !4221)
!4234 = !DILocation(line: 2115, column: 3, scope: !4221)
!4235 = distinct !DISubprogram(name: "operand_subword_force", scope: !3, file: !3, line: 1410, type: !4236, scopeLine: 1411, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4236 = !DISubroutineType(types: !4237)
!4237 = !{!1125, !1125, !7, !5}
!4238 = !DILocalVariable(name: "op", arg: 1, scope: !4235, file: !3, line: 1410, type: !1125)
!4239 = !DILocation(line: 1410, column: 28, scope: !4235)
!4240 = !DILocalVariable(name: "offset", arg: 2, scope: !4235, file: !3, line: 1410, type: !7)
!4241 = !DILocation(line: 1410, column: 45, scope: !4235)
!4242 = !DILocalVariable(name: "mode", arg: 3, scope: !4235, file: !3, line: 1410, type: !5)
!4243 = !DILocation(line: 1410, column: 71, scope: !4235)
!4244 = !DILocalVariable(name: "result", scope: !4235, file: !3, line: 1412, type: !1125)
!4245 = !DILocation(line: 1412, column: 7, scope: !4235)
!4246 = !DILocation(line: 1412, column: 33, scope: !4235)
!4247 = !DILocation(line: 1412, column: 37, scope: !4235)
!4248 = !DILocation(line: 1412, column: 48, scope: !4235)
!4249 = !DILocation(line: 1412, column: 16, scope: !4235)
!4250 = !DILocation(line: 1414, column: 7, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 1414, column: 7)
!4252 = !DILocation(line: 1414, column: 7, scope: !4235)
!4253 = !DILocation(line: 1415, column: 12, scope: !4251)
!4254 = !DILocation(line: 1415, column: 5, scope: !4251)
!4255 = !DILocation(line: 1417, column: 7, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 1417, column: 7)
!4257 = !DILocation(line: 1417, column: 12, scope: !4256)
!4258 = !DILocation(line: 1417, column: 23, scope: !4256)
!4259 = !DILocation(line: 1417, column: 26, scope: !4256)
!4260 = !DILocation(line: 1417, column: 31, scope: !4256)
!4261 = !DILocation(line: 1417, column: 7, scope: !4235)
!4262 = !DILocation(line: 1421, column: 11, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4264, file: !3, line: 1421, column: 11)
!4264 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 1418, column: 5)
!4265 = !DILocation(line: 1421, column: 11, scope: !4264)
!4266 = !DILocation(line: 1422, column: 20, scope: !4263)
!4267 = !DILocation(line: 1422, column: 7, scope: !4263)
!4268 = !DILocation(line: 1422, column: 5, scope: !4263)
!4269 = !DILocation(line: 1422, column: 2, scope: !4263)
!4270 = !DILocation(line: 1424, column: 18, scope: !4263)
!4271 = !DILocation(line: 1424, column: 24, scope: !4263)
!4272 = !DILocation(line: 1424, column: 7, scope: !4263)
!4273 = !DILocation(line: 1424, column: 5, scope: !4263)
!4274 = !DILocation(line: 1425, column: 5, scope: !4264)
!4275 = !DILocation(line: 1427, column: 29, scope: !4235)
!4276 = !DILocation(line: 1427, column: 33, scope: !4235)
!4277 = !DILocation(line: 1427, column: 44, scope: !4235)
!4278 = !DILocation(line: 1427, column: 12, scope: !4235)
!4279 = !DILocation(line: 1427, column: 10, scope: !4235)
!4280 = !DILocation(line: 1428, column: 3, scope: !4235)
!4281 = !DILocation(line: 1430, column: 10, scope: !4235)
!4282 = !DILocation(line: 1430, column: 3, scope: !4235)
!4283 = !DILocation(line: 1431, column: 1, scope: !4235)
!4284 = distinct !DISubprogram(name: "mem_expr_equal_p", scope: !3, file: !3, line: 1437, type: !4285, scopeLine: 1438, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4285 = !DISubroutineType(types: !4286)
!4286 = !{!1149, !4287, !4287}
!4287 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1126, line: 59, baseType: !4288)
!4288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4289, size: 64)
!4289 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1249)
!4290 = !DILocalVariable(name: "expr1", arg: 1, scope: !4284, file: !3, line: 1437, type: !4287)
!4291 = !DILocation(line: 1437, column: 30, scope: !4284)
!4292 = !DILocalVariable(name: "expr2", arg: 2, scope: !4284, file: !3, line: 1437, type: !4287)
!4293 = !DILocation(line: 1437, column: 48, scope: !4284)
!4294 = !DILocation(line: 1439, column: 7, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 1439, column: 7)
!4296 = !DILocation(line: 1439, column: 16, scope: !4295)
!4297 = !DILocation(line: 1439, column: 13, scope: !4295)
!4298 = !DILocation(line: 1439, column: 7, scope: !4284)
!4299 = !DILocation(line: 1440, column: 5, scope: !4295)
!4300 = !DILocation(line: 1442, column: 9, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 1442, column: 7)
!4302 = !DILocation(line: 1442, column: 15, scope: !4301)
!4303 = !DILocation(line: 1442, column: 20, scope: !4301)
!4304 = !DILocation(line: 1442, column: 7, scope: !4284)
!4305 = !DILocation(line: 1443, column: 5, scope: !4301)
!4306 = !DILocation(line: 1445, column: 7, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 1445, column: 7)
!4308 = !DILocation(line: 1445, column: 28, scope: !4307)
!4309 = !DILocation(line: 1445, column: 25, scope: !4307)
!4310 = !DILocation(line: 1445, column: 7, scope: !4284)
!4311 = !DILocation(line: 1446, column: 5, scope: !4307)
!4312 = !DILocation(line: 1448, column: 27, scope: !4284)
!4313 = !DILocation(line: 1448, column: 34, scope: !4284)
!4314 = !DILocation(line: 1448, column: 10, scope: !4284)
!4315 = !DILocation(line: 1448, column: 3, scope: !4284)
!4316 = !DILocation(line: 1449, column: 1, scope: !4284)
!4317 = distinct !DISubprogram(name: "get_mem_align_offset", scope: !3, file: !3, line: 1456, type: !4318, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4318 = !DISubroutineType(types: !4319)
!4319 = !{!1149, !1125, !7}
!4320 = !DILocalVariable(name: "mem", arg: 1, scope: !4317, file: !3, line: 1456, type: !1125)
!4321 = !DILocation(line: 1456, column: 27, scope: !4317)
!4322 = !DILocalVariable(name: "align", arg: 2, scope: !4317, file: !3, line: 1456, type: !7)
!4323 = !DILocation(line: 1456, column: 45, scope: !4317)
!4324 = !DILocalVariable(name: "expr", scope: !4317, file: !3, line: 1458, type: !1247)
!4325 = !DILocation(line: 1458, column: 8, scope: !4317)
!4326 = !DILocalVariable(name: "offset", scope: !4317, file: !3, line: 1459, type: !1199)
!4327 = !DILocation(line: 1459, column: 26, scope: !4317)
!4328 = !DILocation(line: 1476, column: 3, scope: !4317)
!4329 = !DILocation(line: 1477, column: 10, scope: !4317)
!4330 = !DILocation(line: 1477, column: 8, scope: !4317)
!4331 = !DILocation(line: 1478, column: 7, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4317, file: !3, line: 1478, column: 7)
!4333 = !DILocation(line: 1478, column: 12, scope: !4332)
!4334 = !DILocation(line: 1479, column: 7, scope: !4332)
!4335 = !DILocation(line: 1479, column: 10, scope: !4332)
!4336 = !DILocation(line: 1479, column: 27, scope: !4332)
!4337 = !DILocation(line: 1480, column: 7, scope: !4332)
!4338 = !DILocation(line: 1480, column: 11, scope: !4332)
!4339 = !DILocation(line: 1478, column: 7, scope: !4317)
!4340 = !DILocation(line: 1481, column: 5, scope: !4332)
!4341 = !DILocation(line: 1483, column: 12, scope: !4317)
!4342 = !DILocation(line: 1483, column: 10, scope: !4317)
!4343 = !DILocation(line: 1484, column: 7, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4317, file: !3, line: 1484, column: 7)
!4345 = !DILocation(line: 1484, column: 7, scope: !4317)
!4346 = !DILocation(line: 1486, column: 11, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1486, column: 11)
!4348 = distinct !DILexicalBlock(scope: !4344, file: !3, line: 1485, column: 5)
!4349 = !DILocation(line: 1486, column: 31, scope: !4347)
!4350 = !DILocation(line: 1486, column: 29, scope: !4347)
!4351 = !DILocation(line: 1486, column: 11, scope: !4348)
!4352 = !DILocation(line: 1487, column: 2, scope: !4347)
!4353 = !DILocation(line: 1488, column: 5, scope: !4348)
!4354 = !DILocation(line: 1489, column: 12, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4344, file: !3, line: 1489, column: 12)
!4356 = !DILocation(line: 1489, column: 12, scope: !4344)
!4357 = !DILocation(line: 1491, column: 11, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4359, file: !3, line: 1491, column: 11)
!4359 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1490, column: 5)
!4360 = !DILocation(line: 1491, column: 58, scope: !4358)
!4361 = !DILocation(line: 1491, column: 41, scope: !4358)
!4362 = !DILocation(line: 1491, column: 11, scope: !4359)
!4363 = !DILocation(line: 1492, column: 2, scope: !4358)
!4364 = !DILocation(line: 1493, column: 5, scope: !4359)
!4365 = !DILocation(line: 1494, column: 12, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1494, column: 12)
!4367 = !DILocation(line: 1494, column: 29, scope: !4366)
!4368 = !DILocation(line: 1494, column: 12, scope: !4355)
!4369 = !DILocation(line: 1496, column: 7, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 1495, column: 5)
!4371 = !DILocalVariable(name: "inner", scope: !4372, file: !3, line: 1498, type: !1247)
!4372 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 1497, column: 2)
!4373 = !DILocation(line: 1498, column: 9, scope: !4372)
!4374 = !DILocation(line: 1498, column: 17, scope: !4372)
!4375 = !DILocalVariable(name: "field", scope: !4372, file: !3, line: 1499, type: !1247)
!4376 = !DILocation(line: 1499, column: 9, scope: !4372)
!4377 = !DILocation(line: 1499, column: 17, scope: !4372)
!4378 = !DILocalVariable(name: "byte_offset", scope: !4372, file: !3, line: 1500, type: !1247)
!4379 = !DILocation(line: 1500, column: 9, scope: !4372)
!4380 = !DILocation(line: 1500, column: 51, scope: !4372)
!4381 = !DILocation(line: 1500, column: 23, scope: !4372)
!4382 = !DILocalVariable(name: "bit_offset", scope: !4372, file: !3, line: 1501, type: !1247)
!4383 = !DILocation(line: 1501, column: 9, scope: !4372)
!4384 = !DILocation(line: 1501, column: 22, scope: !4372)
!4385 = !DILocation(line: 1503, column: 9, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 1503, column: 8)
!4387 = !DILocation(line: 1504, column: 8, scope: !4386)
!4388 = !DILocation(line: 1504, column: 27, scope: !4386)
!4389 = !DILocation(line: 1504, column: 12, scope: !4386)
!4390 = !DILocation(line: 1505, column: 8, scope: !4386)
!4391 = !DILocation(line: 1505, column: 27, scope: !4386)
!4392 = !DILocation(line: 1505, column: 12, scope: !4386)
!4393 = !DILocation(line: 1503, column: 8, scope: !4372)
!4394 = !DILocation(line: 1506, column: 6, scope: !4386)
!4395 = !DILocation(line: 1508, column: 28, scope: !4372)
!4396 = !DILocation(line: 1508, column: 14, scope: !4372)
!4397 = !DILocation(line: 1508, column: 11, scope: !4372)
!4398 = !DILocation(line: 1509, column: 28, scope: !4372)
!4399 = !DILocation(line: 1509, column: 14, scope: !4372)
!4400 = !DILocation(line: 1509, column: 43, scope: !4372)
!4401 = !DILocation(line: 1509, column: 11, scope: !4372)
!4402 = !DILocation(line: 1511, column: 8, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 1511, column: 8)
!4404 = !DILocation(line: 1511, column: 14, scope: !4403)
!4405 = !DILocation(line: 1511, column: 8, scope: !4372)
!4406 = !DILocation(line: 1513, column: 12, scope: !4407)
!4407 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 1513, column: 12)
!4408 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1512, column: 6)
!4409 = !DILocation(line: 1514, column: 22, scope: !4407)
!4410 = !DILocation(line: 1514, column: 5, scope: !4407)
!4411 = !DILocation(line: 1513, column: 12, scope: !4408)
!4412 = !DILocation(line: 1515, column: 3, scope: !4407)
!4413 = !DILocation(line: 1516, column: 8, scope: !4408)
!4414 = !DILocation(line: 1518, column: 13, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1518, column: 13)
!4416 = !DILocation(line: 1518, column: 13, scope: !4403)
!4417 = !DILocation(line: 1520, column: 12, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 1520, column: 12)
!4419 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 1519, column: 6)
!4420 = !DILocation(line: 1520, column: 33, scope: !4418)
!4421 = !DILocation(line: 1520, column: 31, scope: !4418)
!4422 = !DILocation(line: 1520, column: 12, scope: !4419)
!4423 = !DILocation(line: 1521, column: 3, scope: !4418)
!4424 = !DILocation(line: 1522, column: 8, scope: !4419)
!4425 = !DILocation(line: 1524, column: 13, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 1524, column: 13)
!4427 = !DILocation(line: 1524, column: 31, scope: !4426)
!4428 = !DILocation(line: 1524, column: 13, scope: !4415)
!4429 = !DILocation(line: 1525, column: 6, scope: !4426)
!4430 = !DILocation(line: 1526, column: 11, scope: !4372)
!4431 = !DILocation(line: 1526, column: 9, scope: !4372)
!4432 = distinct !{!4432, !4369, !4433}
!4433 = !DILocation(line: 1527, column: 2, scope: !4370)
!4434 = !DILocation(line: 1528, column: 5, scope: !4370)
!4435 = !DILocation(line: 1530, column: 5, scope: !4366)
!4436 = !DILocation(line: 1532, column: 10, scope: !4317)
!4437 = !DILocation(line: 1532, column: 21, scope: !4317)
!4438 = !DILocation(line: 1532, column: 27, scope: !4317)
!4439 = !DILocation(line: 1532, column: 44, scope: !4317)
!4440 = !DILocation(line: 1532, column: 19, scope: !4317)
!4441 = !DILocation(line: 1532, column: 17, scope: !4317)
!4442 = !DILocation(line: 1532, column: 3, scope: !4317)
!4443 = !DILocation(line: 1533, column: 1, scope: !4317)
!4444 = distinct !DISubprogram(name: "set_mem_attributes_minus_bitpos", scope: !3, file: !3, line: 1541, type: !4445, scopeLine: 1543, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4445 = !DISubroutineType(types: !4446)
!4446 = !{null, !1125, !1247, !1149, !1216}
!4447 = !DILocalVariable(name: "ref", arg: 1, scope: !4444, file: !3, line: 1541, type: !1125)
!4448 = !DILocation(line: 1541, column: 38, scope: !4444)
!4449 = !DILocalVariable(name: "t", arg: 2, scope: !4444, file: !3, line: 1541, type: !1247)
!4450 = !DILocation(line: 1541, column: 48, scope: !4444)
!4451 = !DILocalVariable(name: "objectp", arg: 3, scope: !4444, file: !3, line: 1541, type: !1149)
!4452 = !DILocation(line: 1541, column: 55, scope: !4444)
!4453 = !DILocalVariable(name: "bitpos", arg: 4, scope: !4444, file: !3, line: 1542, type: !1216)
!4454 = !DILocation(line: 1542, column: 20, scope: !4444)
!4455 = !DILocalVariable(name: "alias", scope: !4444, file: !3, line: 1544, type: !1763)
!4456 = !DILocation(line: 1544, column: 18, scope: !4444)
!4457 = !DILocation(line: 1544, column: 26, scope: !4444)
!4458 = !DILocalVariable(name: "expr", scope: !4444, file: !3, line: 1545, type: !1247)
!4459 = !DILocation(line: 1545, column: 8, scope: !4444)
!4460 = !DILocation(line: 1545, column: 15, scope: !4444)
!4461 = !DILocalVariable(name: "offset", scope: !4444, file: !3, line: 1546, type: !1125)
!4462 = !DILocation(line: 1546, column: 7, scope: !4444)
!4463 = !DILocation(line: 1546, column: 16, scope: !4444)
!4464 = !DILocalVariable(name: "size", scope: !4444, file: !3, line: 1547, type: !1125)
!4465 = !DILocation(line: 1547, column: 7, scope: !4444)
!4466 = !DILocation(line: 1547, column: 14, scope: !4444)
!4467 = !DILocalVariable(name: "align", scope: !4444, file: !3, line: 1548, type: !7)
!4468 = !DILocation(line: 1548, column: 16, scope: !4444)
!4469 = !DILocation(line: 1548, column: 24, scope: !4444)
!4470 = !DILocalVariable(name: "apply_bitpos", scope: !4444, file: !3, line: 1549, type: !1216)
!4471 = !DILocation(line: 1549, column: 17, scope: !4444)
!4472 = !DILocalVariable(name: "type", scope: !4444, file: !3, line: 1550, type: !1247)
!4473 = !DILocation(line: 1550, column: 8, scope: !4444)
!4474 = !DILocation(line: 1555, column: 7, scope: !4475)
!4475 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1555, column: 7)
!4476 = !DILocation(line: 1555, column: 9, scope: !4475)
!4477 = !DILocation(line: 1555, column: 7, scope: !4444)
!4478 = !DILocation(line: 1556, column: 5, scope: !4475)
!4479 = !DILocation(line: 1558, column: 10, scope: !4444)
!4480 = !DILocation(line: 1558, column: 23, scope: !4444)
!4481 = !DILocation(line: 1558, column: 27, scope: !4444)
!4482 = !DILocation(line: 1558, column: 8, scope: !4444)
!4483 = !DILocation(line: 1559, column: 7, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1559, column: 7)
!4485 = !DILocation(line: 1559, column: 15, scope: !4484)
!4486 = !DILocation(line: 1559, column: 12, scope: !4484)
!4487 = !DILocation(line: 1559, column: 7, scope: !4444)
!4488 = !DILocation(line: 1560, column: 5, scope: !4484)
!4489 = !DILocation(line: 1566, column: 3, scope: !4444)
!4490 = !DILocation(line: 1570, column: 26, scope: !4444)
!4491 = !DILocation(line: 1570, column: 11, scope: !4444)
!4492 = !DILocation(line: 1570, column: 9, scope: !4444)
!4493 = !DILocation(line: 1572, column: 27, scope: !4444)
!4494 = !DILocation(line: 1572, column: 3, scope: !4444)
!4495 = !DILocation(line: 1572, column: 24, scope: !4444)
!4496 = !DILocation(line: 1574, column: 7, scope: !4444)
!4497 = !DILocation(line: 1574, column: 31, scope: !4444)
!4498 = !DILocation(line: 1574, column: 34, scope: !4444)
!4499 = !DILocation(line: 1574, column: 51, scope: !4444)
!4500 = !DILocation(line: 1573, column: 3, scope: !4444)
!4501 = !DILocation(line: 1574, column: 5, scope: !4444)
!4502 = !DILocation(line: 1575, column: 23, scope: !4444)
!4503 = !DILocation(line: 1575, column: 3, scope: !4444)
!4504 = !DILocation(line: 1575, column: 21, scope: !4444)
!4505 = !DILocation(line: 1579, column: 8, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1579, column: 7)
!4507 = !DILocation(line: 1579, column: 16, scope: !4506)
!4508 = !DILocation(line: 1579, column: 19, scope: !4506)
!4509 = !DILocation(line: 1580, column: 7, scope: !4506)
!4510 = !DILocation(line: 1580, column: 12, scope: !4506)
!4511 = !DILocation(line: 1581, column: 7, scope: !4506)
!4512 = !DILocation(line: 1581, column: 10, scope: !4506)
!4513 = !DILocation(line: 1581, column: 27, scope: !4506)
!4514 = !DILocation(line: 1579, column: 7, scope: !4444)
!4515 = !DILocation(line: 1582, column: 5, scope: !4506)
!4516 = !DILocation(line: 1582, column: 24, scope: !4506)
!4517 = !DILocation(line: 1586, column: 7, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1586, column: 7)
!4519 = !DILocation(line: 1586, column: 15, scope: !4518)
!4520 = !DILocation(line: 1586, column: 18, scope: !4518)
!4521 = !DILocation(line: 1586, column: 32, scope: !4518)
!4522 = !DILocation(line: 1587, column: 7, scope: !4518)
!4523 = !DILocation(line: 1587, column: 10, scope: !4518)
!4524 = !DILocation(line: 1587, column: 24, scope: !4518)
!4525 = !DILocation(line: 1588, column: 7, scope: !4518)
!4526 = !DILocation(line: 1588, column: 10, scope: !4518)
!4527 = !DILocation(line: 1586, column: 7, scope: !4444)
!4528 = !DILocation(line: 1589, column: 13, scope: !4518)
!4529 = !DILocation(line: 1589, column: 11, scope: !4518)
!4530 = !DILocation(line: 1589, column: 5, scope: !4518)
!4531 = !DILocation(line: 1591, column: 9, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 1591, column: 9)
!4533 = !DILocation(line: 1591, column: 23, scope: !4532)
!4534 = !DILocation(line: 1591, column: 9, scope: !4518)
!4535 = !DILocation(line: 1593, column: 21, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1593, column: 6)
!4537 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1592, column: 7)
!4538 = !DILocation(line: 1593, column: 6, scope: !4536)
!4539 = !DILocation(line: 1593, column: 6, scope: !4537)
!4540 = !DILocation(line: 1595, column: 10, scope: !4536)
!4541 = !DILocation(line: 1595, column: 4, scope: !4536)
!4542 = !DILocation(line: 1597, column: 26, scope: !4536)
!4543 = !DILocation(line: 1597, column: 12, scope: !4536)
!4544 = !DILocation(line: 1597, column: 10, scope: !4536)
!4545 = !DILocation(line: 1598, column: 7, scope: !4537)
!4546 = !DILocation(line: 1601, column: 7, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1601, column: 7)
!4548 = !DILocation(line: 1601, column: 29, scope: !4547)
!4549 = !DILocation(line: 1601, column: 47, scope: !4547)
!4550 = !DILocation(line: 1601, column: 32, scope: !4547)
!4551 = !DILocation(line: 1601, column: 7, scope: !4444)
!4552 = !DILocation(line: 1602, column: 12, scope: !4547)
!4553 = !DILocation(line: 1602, column: 10, scope: !4547)
!4554 = !DILocation(line: 1602, column: 5, scope: !4547)
!4555 = !DILocation(line: 1606, column: 9, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1606, column: 7)
!4557 = !DILocation(line: 1606, column: 7, scope: !4444)
!4558 = !DILocalVariable(name: "base", scope: !4559, file: !3, line: 1608, type: !1247)
!4559 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 1607, column: 5)
!4560 = !DILocation(line: 1608, column: 12, scope: !4559)
!4561 = !DILocalVariable(name: "align_computed", scope: !4559, file: !3, line: 1609, type: !1360)
!4562 = !DILocation(line: 1609, column: 12, scope: !4559)
!4563 = !DILocation(line: 1611, column: 11, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1611, column: 11)
!4565 = !DILocation(line: 1611, column: 11, scope: !4559)
!4566 = !DILocation(line: 1612, column: 2, scope: !4564)
!4567 = !DILocation(line: 1612, column: 23, scope: !4564)
!4568 = !DILocation(line: 1616, column: 7, scope: !4559)
!4569 = !DILocation(line: 1616, column: 14, scope: !4559)
!4570 = !DILocation(line: 1617, column: 7, scope: !4559)
!4571 = !DILocation(line: 1617, column: 10, scope: !4559)
!4572 = !DILocation(line: 1617, column: 24, scope: !4559)
!4573 = !DILocation(line: 1618, column: 7, scope: !4559)
!4574 = !DILocation(line: 1618, column: 10, scope: !4559)
!4575 = !DILocation(line: 1618, column: 24, scope: !4559)
!4576 = !DILocation(line: 1619, column: 6, scope: !4559)
!4577 = !DILocation(line: 1619, column: 4, scope: !4559)
!4578 = distinct !{!4578, !4568, !4576}
!4579 = !DILocation(line: 1623, column: 14, scope: !4559)
!4580 = !DILocation(line: 1623, column: 12, scope: !4559)
!4581 = !DILocation(line: 1624, column: 7, scope: !4559)
!4582 = !DILocation(line: 1624, column: 14, scope: !4559)
!4583 = !DILocation(line: 1624, column: 31, scope: !4559)
!4584 = !DILocation(line: 1625, column: 7, scope: !4559)
!4585 = !DILocation(line: 1625, column: 10, scope: !4559)
!4586 = !DILocation(line: 1625, column: 27, scope: !4559)
!4587 = !DILocation(line: 1626, column: 7, scope: !4559)
!4588 = !DILocation(line: 1626, column: 10, scope: !4559)
!4589 = !DILocation(line: 1626, column: 27, scope: !4559)
!4590 = !DILocation(line: 1627, column: 7, scope: !4559)
!4591 = !DILocation(line: 1627, column: 10, scope: !4559)
!4592 = !DILocation(line: 1627, column: 27, scope: !4559)
!4593 = !DILocation(line: 1628, column: 9, scope: !4559)
!4594 = !DILocation(line: 1628, column: 7, scope: !4559)
!4595 = distinct !{!4595, !4581, !4593}
!4596 = !DILocation(line: 1630, column: 11, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1630, column: 11)
!4598 = !DILocation(line: 1630, column: 11, scope: !4559)
!4599 = !DILocation(line: 1632, column: 8, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 1632, column: 8)
!4601 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 1631, column: 2)
!4602 = !DILocation(line: 1632, column: 8, scope: !4601)
!4603 = !DILocation(line: 1633, column: 28, scope: !4600)
!4604 = !DILocation(line: 1633, column: 27, scope: !4600)
!4605 = !DILocation(line: 1633, column: 6, scope: !4600)
!4606 = !DILocation(line: 1633, column: 25, scope: !4600)
!4607 = !DILocation(line: 1635, column: 6, scope: !4600)
!4608 = !DILocation(line: 1635, column: 25, scope: !4600)
!4609 = !DILocation(line: 1636, column: 2, scope: !4601)
!4610 = !DILocation(line: 1638, column: 23, scope: !4597)
!4611 = !DILocation(line: 1638, column: 2, scope: !4597)
!4612 = !DILocation(line: 1638, column: 21, scope: !4597)
!4613 = !DILocation(line: 1640, column: 32, scope: !4559)
!4614 = !DILocation(line: 1640, column: 14, scope: !4559)
!4615 = !DILocation(line: 1640, column: 12, scope: !4559)
!4616 = !DILocation(line: 1641, column: 11, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1641, column: 11)
!4618 = !DILocation(line: 1641, column: 16, scope: !4617)
!4619 = !DILocation(line: 1641, column: 19, scope: !4617)
!4620 = !DILocation(line: 1642, column: 4, scope: !4617)
!4621 = !DILocation(line: 1642, column: 7, scope: !4617)
!4622 = !DILocation(line: 1643, column: 4, scope: !4617)
!4623 = !DILocation(line: 1643, column: 8, scope: !4617)
!4624 = !DILocation(line: 1643, column: 27, scope: !4617)
!4625 = !DILocation(line: 1643, column: 30, scope: !4617)
!4626 = !DILocation(line: 1641, column: 11, scope: !4559)
!4627 = !DILocalVariable(name: "base_type", scope: !4628, file: !3, line: 1645, type: !1247)
!4628 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 1644, column: 2)
!4629 = !DILocation(line: 1645, column: 9, scope: !4628)
!4630 = !DILocation(line: 1645, column: 21, scope: !4628)
!4631 = !DILocation(line: 1646, column: 4, scope: !4628)
!4632 = !DILocation(line: 1648, column: 4, scope: !4628)
!4633 = !DILocation(line: 1648, column: 25, scope: !4628)
!4634 = !DILocation(line: 1649, column: 2, scope: !4628)
!4635 = !DILocation(line: 1653, column: 44, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1653, column: 11)
!4637 = !DILocation(line: 1653, column: 11, scope: !4636)
!4638 = !DILocation(line: 1653, column: 11, scope: !4559)
!4639 = !DILocation(line: 1654, column: 2, scope: !4636)
!4640 = !DILocation(line: 1654, column: 29, scope: !4636)
!4641 = !DILocation(line: 1657, column: 11, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1657, column: 11)
!4643 = !DILocation(line: 1657, column: 11, scope: !4559)
!4644 = !DILocation(line: 1659, column: 11, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 1658, column: 2)
!4646 = !DILocation(line: 1659, column: 9, scope: !4645)
!4647 = !DILocation(line: 1660, column: 13, scope: !4645)
!4648 = !DILocation(line: 1660, column: 11, scope: !4645)
!4649 = !DILocation(line: 1661, column: 19, scope: !4645)
!4650 = !DILocation(line: 1661, column: 17, scope: !4645)
!4651 = !DILocation(line: 1662, column: 12, scope: !4645)
!4652 = !DILocation(line: 1663, column: 5, scope: !4645)
!4653 = !DILocation(line: 1663, column: 23, scope: !4645)
!4654 = !DILocation(line: 1663, column: 8, scope: !4645)
!4655 = !DILocation(line: 1664, column: 7, scope: !4645)
!4656 = !DILocation(line: 1662, column: 9, scope: !4645)
!4657 = !DILocation(line: 1665, column: 12, scope: !4645)
!4658 = !DILocation(line: 1665, column: 10, scope: !4645)
!4659 = !DILocation(line: 1666, column: 19, scope: !4645)
!4660 = !DILocation(line: 1667, column: 2, scope: !4645)
!4661 = !DILocation(line: 1670, column: 16, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 1670, column: 16)
!4663 = !DILocation(line: 1670, column: 16, scope: !4642)
!4664 = !DILocation(line: 1672, column: 12, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4662, file: !3, line: 1671, column: 2)
!4666 = !DILocation(line: 1672, column: 10, scope: !4665)
!4667 = !DILocation(line: 1674, column: 12, scope: !4665)
!4668 = !DILocation(line: 1674, column: 10, scope: !4665)
!4669 = !DILocation(line: 1676, column: 19, scope: !4665)
!4670 = !DILocation(line: 1677, column: 2, scope: !4665)
!4671 = !DILocation(line: 1683, column: 16, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4662, file: !3, line: 1683, column: 16)
!4673 = !DILocation(line: 1683, column: 30, scope: !4672)
!4674 = !DILocation(line: 1684, column: 9, scope: !4672)
!4675 = !DILocation(line: 1684, column: 14, scope: !4672)
!4676 = !DILocation(line: 1683, column: 16, scope: !4662)
!4677 = !DILocation(line: 1686, column: 11, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 1685, column: 2)
!4679 = !DILocation(line: 1686, column: 9, scope: !4678)
!4680 = !DILocation(line: 1687, column: 13, scope: !4678)
!4681 = !DILocation(line: 1687, column: 11, scope: !4678)
!4682 = !DILocation(line: 1688, column: 19, scope: !4678)
!4683 = !DILocation(line: 1688, column: 17, scope: !4678)
!4684 = !DILocation(line: 1691, column: 2, scope: !4678)
!4685 = !DILocation(line: 1694, column: 16, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 1694, column: 16)
!4687 = !DILocation(line: 1694, column: 30, scope: !4686)
!4688 = !DILocation(line: 1694, column: 16, scope: !4672)
!4689 = !DILocalVariable(name: "off_tree", scope: !4690, file: !3, line: 1696, type: !1247)
!4690 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1695, column: 2)
!4691 = !DILocation(line: 1696, column: 9, scope: !4690)
!4692 = !DILocation(line: 1696, column: 20, scope: !4690)
!4693 = !DILocalVariable(name: "t2", scope: !4690, file: !3, line: 1699, type: !1247)
!4694 = !DILocation(line: 1699, column: 9, scope: !4690)
!4695 = !DILocation(line: 1699, column: 14, scope: !4690)
!4696 = !DILocation(line: 1701, column: 4, scope: !4690)
!4697 = !DILocalVariable(name: "index", scope: !4698, file: !3, line: 1703, type: !1247)
!4698 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1702, column: 6)
!4699 = !DILocation(line: 1703, column: 13, scope: !4698)
!4700 = !DILocation(line: 1703, column: 21, scope: !4698)
!4701 = !DILocalVariable(name: "low_bound", scope: !4698, file: !3, line: 1704, type: !1247)
!4702 = !DILocation(line: 1704, column: 13, scope: !4698)
!4703 = !DILocation(line: 1704, column: 46, scope: !4698)
!4704 = !DILocation(line: 1704, column: 25, scope: !4698)
!4705 = !DILocalVariable(name: "unit_size", scope: !4698, file: !3, line: 1705, type: !1247)
!4706 = !DILocation(line: 1705, column: 13, scope: !4698)
!4707 = !DILocation(line: 1705, column: 49, scope: !4698)
!4708 = !DILocation(line: 1705, column: 25, scope: !4698)
!4709 = !DILocation(line: 1711, column: 29, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1711, column: 12)
!4711 = !DILocation(line: 1711, column: 14, scope: !4710)
!4712 = !DILocation(line: 1711, column: 12, scope: !4698)
!4713 = !DILocation(line: 1712, column: 11, scope: !4710)
!4714 = !DILocation(line: 1712, column: 9, scope: !4710)
!4715 = !DILocation(line: 1712, column: 3, scope: !4710)
!4716 = !DILocation(line: 1715, column: 19, scope: !4698)
!4717 = !DILocation(line: 1715, column: 17, scope: !4698)
!4718 = !DILocation(line: 1721, column: 13, scope: !4698)
!4719 = !DILocation(line: 1721, column: 11, scope: !4698)
!4720 = !DILocation(line: 1722, column: 6, scope: !4698)
!4721 = !DILocation(line: 1723, column: 11, scope: !4690)
!4722 = !DILocation(line: 1723, column: 26, scope: !4690)
!4723 = distinct !{!4723, !4696, !4724}
!4724 = !DILocation(line: 1723, column: 38, scope: !4690)
!4725 = !DILocation(line: 1725, column: 8, scope: !4726)
!4726 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1725, column: 8)
!4727 = !DILocation(line: 1725, column: 8, scope: !4690)
!4728 = !DILocation(line: 1727, column: 15, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1726, column: 6)
!4730 = !DILocation(line: 1727, column: 13, scope: !4729)
!4731 = !DILocation(line: 1728, column: 15, scope: !4729)
!4732 = !DILocation(line: 1729, column: 27, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 1729, column: 12)
!4734 = !DILocation(line: 1729, column: 12, scope: !4733)
!4735 = !DILocation(line: 1729, column: 12, scope: !4729)
!4736 = !DILocalVariable(name: "ioff", scope: !4737, file: !3, line: 1731, type: !1216)
!4737 = distinct !DILexicalBlock(scope: !4733, file: !3, line: 1730, column: 3)
!4738 = !DILocation(line: 1731, column: 19, scope: !4737)
!4739 = !DILocation(line: 1731, column: 40, scope: !4737)
!4740 = !DILocation(line: 1731, column: 26, scope: !4737)
!4741 = !DILocalVariable(name: "aoff", scope: !4737, file: !3, line: 1732, type: !1216)
!4742 = !DILocation(line: 1732, column: 19, scope: !4737)
!4743 = !DILocation(line: 1732, column: 27, scope: !4737)
!4744 = !DILocation(line: 1732, column: 35, scope: !4737)
!4745 = !DILocation(line: 1732, column: 34, scope: !4737)
!4746 = !DILocation(line: 1732, column: 32, scope: !4737)
!4747 = !DILocation(line: 1732, column: 41, scope: !4737)
!4748 = !DILocation(line: 1733, column: 13, scope: !4737)
!4749 = !DILocation(line: 1733, column: 11, scope: !4737)
!4750 = !DILocation(line: 1734, column: 9, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1734, column: 9)
!4752 = !DILocation(line: 1734, column: 14, scope: !4751)
!4753 = !DILocation(line: 1734, column: 42, scope: !4751)
!4754 = !DILocation(line: 1734, column: 49, scope: !4751)
!4755 = !DILocation(line: 1734, column: 47, scope: !4751)
!4756 = !DILocation(line: 1734, column: 9, scope: !4737)
!4757 = !DILocation(line: 1735, column: 22, scope: !4751)
!4758 = !DILocation(line: 1735, column: 20, scope: !4751)
!4759 = !DILocation(line: 1735, column: 14, scope: !4751)
!4760 = !DILocation(line: 1736, column: 20, scope: !4737)
!4761 = !DILocation(line: 1737, column: 14, scope: !4737)
!4762 = !DILocation(line: 1737, column: 12, scope: !4737)
!4763 = !DILocation(line: 1738, column: 20, scope: !4737)
!4764 = !DILocation(line: 1738, column: 18, scope: !4737)
!4765 = !DILocation(line: 1739, column: 3, scope: !4737)
!4766 = !DILocation(line: 1740, column: 6, scope: !4729)
!4767 = !DILocation(line: 1741, column: 13, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1741, column: 13)
!4769 = !DILocation(line: 1741, column: 28, scope: !4768)
!4770 = !DILocation(line: 1741, column: 13, scope: !4726)
!4771 = !DILocation(line: 1743, column: 15, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 1742, column: 6)
!4773 = !DILocation(line: 1743, column: 13, scope: !4772)
!4774 = !DILocation(line: 1744, column: 15, scope: !4772)
!4775 = !DILocation(line: 1745, column: 27, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1745, column: 12)
!4777 = !DILocation(line: 1745, column: 12, scope: !4776)
!4778 = !DILocation(line: 1745, column: 12, scope: !4772)
!4779 = !DILocation(line: 1747, column: 14, scope: !4780)
!4780 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 1746, column: 3)
!4781 = !DILocation(line: 1747, column: 12, scope: !4780)
!4782 = !DILocation(line: 1748, column: 20, scope: !4780)
!4783 = !DILocation(line: 1748, column: 18, scope: !4780)
!4784 = !DILocation(line: 1749, column: 3, scope: !4780)
!4785 = !DILocation(line: 1752, column: 6, scope: !4772)
!4786 = !DILocation(line: 1753, column: 13, scope: !4787)
!4787 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 1753, column: 13)
!4788 = !DILocation(line: 1753, column: 35, scope: !4787)
!4789 = !DILocation(line: 1754, column: 6, scope: !4787)
!4790 = !DILocation(line: 1754, column: 10, scope: !4787)
!4791 = !DILocation(line: 1755, column: 6, scope: !4787)
!4792 = !DILocation(line: 1755, column: 9, scope: !4787)
!4793 = !DILocation(line: 1755, column: 42, scope: !4787)
!4794 = !DILocation(line: 1753, column: 13, scope: !4768)
!4795 = !DILocation(line: 1757, column: 15, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 1756, column: 6)
!4797 = !DILocation(line: 1757, column: 13, scope: !4796)
!4798 = !DILocation(line: 1758, column: 15, scope: !4796)
!4799 = !DILocation(line: 1759, column: 6, scope: !4796)
!4800 = !DILocation(line: 1760, column: 2, scope: !4690)
!4801 = !DILocation(line: 1764, column: 16, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1764, column: 16)
!4803 = !DILocation(line: 1764, column: 38, scope: !4802)
!4804 = !DILocation(line: 1765, column: 9, scope: !4802)
!4805 = !DILocation(line: 1765, column: 13, scope: !4802)
!4806 = !DILocation(line: 1766, column: 9, scope: !4802)
!4807 = !DILocation(line: 1766, column: 12, scope: !4802)
!4808 = !DILocation(line: 1766, column: 44, scope: !4802)
!4809 = !DILocation(line: 1764, column: 16, scope: !4686)
!4810 = !DILocation(line: 1768, column: 11, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1767, column: 2)
!4812 = !DILocation(line: 1768, column: 9, scope: !4811)
!4813 = !DILocation(line: 1769, column: 11, scope: !4811)
!4814 = !DILocation(line: 1770, column: 2, scope: !4811)
!4815 = !DILocation(line: 1772, column: 12, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1772, column: 11)
!4817 = !DILocation(line: 1772, column: 27, scope: !4816)
!4818 = !DILocation(line: 1772, column: 31, scope: !4816)
!4819 = !DILocation(line: 1772, column: 11, scope: !4559)
!4820 = !DILocalVariable(name: "obj_align", scope: !4821, file: !3, line: 1774, type: !7)
!4821 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 1773, column: 2)
!4822 = !DILocation(line: 1774, column: 17, scope: !4821)
!4823 = !DILocation(line: 1775, column: 30, scope: !4821)
!4824 = !DILocation(line: 1775, column: 33, scope: !4821)
!4825 = !DILocation(line: 1775, column: 40, scope: !4821)
!4826 = !DILocation(line: 1775, column: 8, scope: !4821)
!4827 = !DILocation(line: 1776, column: 12, scope: !4821)
!4828 = !DILocation(line: 1776, column: 10, scope: !4821)
!4829 = !DILocation(line: 1777, column: 2, scope: !4821)
!4830 = !DILocation(line: 1778, column: 5, scope: !4559)
!4831 = !DILocation(line: 1783, column: 7, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1783, column: 7)
!4833 = !DILocation(line: 1783, column: 7, scope: !4444)
!4834 = !DILocation(line: 1785, column: 31, scope: !4835)
!4835 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 1784, column: 5)
!4836 = !DILocation(line: 1785, column: 41, scope: !4835)
!4837 = !DILocation(line: 1785, column: 54, scope: !4835)
!4838 = !DILocation(line: 1785, column: 39, scope: !4835)
!4839 = !DILocation(line: 1785, column: 16, scope: !4835)
!4840 = !DILocation(line: 1785, column: 14, scope: !4835)
!4841 = !DILocation(line: 1786, column: 11, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1786, column: 11)
!4843 = !DILocation(line: 1786, column: 11, scope: !4835)
!4844 = !DILocation(line: 1787, column: 24, scope: !4842)
!4845 = !DILocation(line: 1787, column: 30, scope: !4842)
!4846 = !DILocation(line: 1787, column: 43, scope: !4842)
!4847 = !DILocation(line: 1787, column: 9, scope: !4842)
!4848 = !DILocation(line: 1787, column: 7, scope: !4842)
!4849 = !DILocation(line: 1787, column: 2, scope: !4842)
!4850 = !DILocation(line: 1788, column: 5, scope: !4835)
!4851 = !DILocation(line: 1790, column: 7, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1790, column: 7)
!4853 = !DILocation(line: 1790, column: 21, scope: !4852)
!4854 = !DILocation(line: 1790, column: 7, scope: !4444)
!4855 = !DILocation(line: 1794, column: 14, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4852, file: !3, line: 1791, column: 5)
!4857 = !DILocation(line: 1795, column: 12, scope: !4856)
!4858 = !DILocation(line: 1796, column: 5, scope: !4856)
!4859 = !DILocation(line: 1800, column: 22, scope: !4444)
!4860 = !DILocation(line: 1800, column: 29, scope: !4444)
!4861 = !DILocation(line: 1800, column: 35, scope: !4444)
!4862 = !DILocation(line: 1800, column: 43, scope: !4444)
!4863 = !DILocation(line: 1800, column: 49, scope: !4444)
!4864 = !DILocation(line: 1801, column: 8, scope: !4444)
!4865 = !DILocation(line: 1801, column: 32, scope: !4444)
!4866 = !DILocation(line: 1800, column: 7, scope: !4444)
!4867 = !DILocation(line: 1799, column: 3, scope: !4444)
!4868 = !DILocation(line: 1800, column: 5, scope: !4444)
!4869 = !DILocation(line: 1804, column: 7, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1804, column: 7)
!4871 = !DILocation(line: 1804, column: 29, scope: !4870)
!4872 = !DILocation(line: 1804, column: 32, scope: !4870)
!4873 = !DILocation(line: 1804, column: 7, scope: !4444)
!4874 = !DILocation(line: 1805, column: 5, scope: !4870)
!4875 = !DILocation(line: 1809, column: 12, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4870, file: !3, line: 1809, column: 12)
!4877 = !DILocation(line: 1809, column: 26, scope: !4876)
!4878 = !DILocation(line: 1809, column: 43, scope: !4876)
!4879 = !DILocation(line: 1809, column: 46, scope: !4876)
!4880 = !DILocation(line: 1809, column: 60, scope: !4876)
!4881 = !DILocation(line: 1810, column: 5, scope: !4876)
!4882 = !DILocation(line: 1810, column: 8, scope: !4876)
!4883 = !DILocation(line: 1810, column: 22, scope: !4876)
!4884 = !DILocation(line: 1811, column: 5, scope: !4876)
!4885 = !DILocation(line: 1811, column: 8, scope: !4876)
!4886 = !DILocation(line: 1811, column: 22, scope: !4876)
!4887 = !DILocation(line: 1809, column: 12, scope: !4870)
!4888 = !DILocation(line: 1812, column: 5, scope: !4876)
!4889 = !DILocation(line: 1812, column: 27, scope: !4876)
!4890 = !DILocation(line: 1813, column: 1, scope: !4444)
!4891 = distinct !DISubprogram(name: "get_mem_attrs", scope: !3, file: !3, line: 321, type: !4892, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4892 = !DISubroutineType(types: !4893)
!4893 = !{!2115, !1763, !1247, !1125, !1125, !7, !4087, !5}
!4894 = !DILocalVariable(name: "alias", arg: 1, scope: !4891, file: !3, line: 321, type: !1763)
!4895 = !DILocation(line: 321, column: 31, scope: !4891)
!4896 = !DILocalVariable(name: "expr", arg: 2, scope: !4891, file: !3, line: 321, type: !1247)
!4897 = !DILocation(line: 321, column: 43, scope: !4891)
!4898 = !DILocalVariable(name: "offset", arg: 3, scope: !4891, file: !3, line: 321, type: !1125)
!4899 = !DILocation(line: 321, column: 53, scope: !4891)
!4900 = !DILocalVariable(name: "size", arg: 4, scope: !4891, file: !3, line: 321, type: !1125)
!4901 = !DILocation(line: 321, column: 65, scope: !4891)
!4902 = !DILocalVariable(name: "align", arg: 5, scope: !4891, file: !3, line: 322, type: !7)
!4903 = !DILocation(line: 322, column: 22, scope: !4891)
!4904 = !DILocalVariable(name: "addrspace", arg: 6, scope: !4891, file: !3, line: 322, type: !4087)
!4905 = !DILocation(line: 322, column: 42, scope: !4891)
!4906 = !DILocalVariable(name: "mode", arg: 7, scope: !4891, file: !3, line: 322, type: !5)
!4907 = !DILocation(line: 322, column: 71, scope: !4891)
!4908 = !DILocalVariable(name: "attrs", scope: !4891, file: !3, line: 324, type: !2116)
!4909 = !DILocation(line: 324, column: 13, scope: !4891)
!4910 = !DILocalVariable(name: "slot", scope: !4891, file: !3, line: 325, type: !1634)
!4911 = !DILocation(line: 325, column: 10, scope: !4891)
!4912 = !DILocation(line: 330, column: 7, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 330, column: 7)
!4914 = !DILocation(line: 330, column: 13, scope: !4913)
!4915 = !DILocation(line: 330, column: 18, scope: !4913)
!4916 = !DILocation(line: 330, column: 21, scope: !4913)
!4917 = !DILocation(line: 330, column: 26, scope: !4913)
!4918 = !DILocation(line: 330, column: 31, scope: !4913)
!4919 = !DILocation(line: 330, column: 34, scope: !4913)
!4920 = !DILocation(line: 330, column: 41, scope: !4913)
!4921 = !DILocation(line: 330, column: 46, scope: !4913)
!4922 = !DILocation(line: 330, column: 49, scope: !4913)
!4923 = !DILocation(line: 330, column: 59, scope: !4913)
!4924 = !DILocation(line: 331, column: 7, scope: !4913)
!4925 = !DILocation(line: 331, column: 11, scope: !4913)
!4926 = !DILocation(line: 331, column: 16, scope: !4913)
!4927 = !DILocation(line: 332, column: 4, scope: !4913)
!4928 = !DILocation(line: 332, column: 8, scope: !4913)
!4929 = !DILocation(line: 332, column: 13, scope: !4913)
!4930 = !DILocation(line: 332, column: 24, scope: !4913)
!4931 = !DILocation(line: 332, column: 27, scope: !4913)
!4932 = !DILocation(line: 332, column: 51, scope: !4913)
!4933 = !DILocation(line: 332, column: 48, scope: !4913)
!4934 = !DILocation(line: 333, column: 7, scope: !4913)
!4935 = !DILocation(line: 333, column: 28, scope: !4913)
!4936 = !DILocation(line: 333, column: 31, scope: !4913)
!4937 = !DILocation(line: 333, column: 36, scope: !4913)
!4938 = !DILocation(line: 330, column: 7, scope: !4891)
!4939 = !DILocation(line: 334, column: 6, scope: !4913)
!4940 = !DILocation(line: 334, column: 15, scope: !4913)
!4941 = !DILocation(line: 334, column: 12, scope: !4913)
!4942 = !DILocation(line: 333, column: 11, scope: !4913)
!4943 = !DILocation(line: 334, column: 43, scope: !4913)
!4944 = !DILocation(line: 334, column: 49, scope: !4913)
!4945 = !DILocation(line: 335, column: 5, scope: !4913)
!4946 = !DILocation(line: 337, column: 17, scope: !4891)
!4947 = !DILocation(line: 337, column: 9, scope: !4891)
!4948 = !DILocation(line: 337, column: 15, scope: !4891)
!4949 = !DILocation(line: 338, column: 16, scope: !4891)
!4950 = !DILocation(line: 338, column: 9, scope: !4891)
!4951 = !DILocation(line: 338, column: 14, scope: !4891)
!4952 = !DILocation(line: 339, column: 18, scope: !4891)
!4953 = !DILocation(line: 339, column: 9, scope: !4891)
!4954 = !DILocation(line: 339, column: 16, scope: !4891)
!4955 = !DILocation(line: 340, column: 16, scope: !4891)
!4956 = !DILocation(line: 340, column: 9, scope: !4891)
!4957 = !DILocation(line: 340, column: 14, scope: !4891)
!4958 = !DILocation(line: 341, column: 17, scope: !4891)
!4959 = !DILocation(line: 341, column: 9, scope: !4891)
!4960 = !DILocation(line: 341, column: 15, scope: !4891)
!4961 = !DILocation(line: 342, column: 21, scope: !4891)
!4962 = !DILocation(line: 342, column: 9, scope: !4891)
!4963 = !DILocation(line: 342, column: 19, scope: !4891)
!4964 = !DILocation(line: 344, column: 26, scope: !4891)
!4965 = !DILocation(line: 344, column: 42, scope: !4891)
!4966 = !DILocation(line: 344, column: 10, scope: !4891)
!4967 = !DILocation(line: 344, column: 8, scope: !4891)
!4968 = !DILocation(line: 345, column: 8, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 345, column: 7)
!4970 = !DILocation(line: 345, column: 7, scope: !4969)
!4971 = !DILocation(line: 345, column: 13, scope: !4969)
!4972 = !DILocation(line: 345, column: 7, scope: !4891)
!4973 = !DILocation(line: 347, column: 15, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 346, column: 5)
!4975 = !DILocation(line: 347, column: 8, scope: !4974)
!4976 = !DILocation(line: 347, column: 13, scope: !4974)
!4977 = !DILocation(line: 348, column: 16, scope: !4974)
!4978 = !DILocation(line: 348, column: 15, scope: !4974)
!4979 = !DILocation(line: 348, column: 7, scope: !4974)
!4980 = !DILocation(line: 349, column: 5, scope: !4974)
!4981 = !DILocation(line: 351, column: 25, scope: !4891)
!4982 = !DILocation(line: 351, column: 24, scope: !4891)
!4983 = !DILocation(line: 351, column: 10, scope: !4891)
!4984 = !DILocation(line: 351, column: 3, scope: !4891)
!4985 = !DILocation(line: 352, column: 1, scope: !4891)
!4986 = distinct !DISubprogram(name: "set_mem_attributes", scope: !3, file: !3, line: 1816, type: !4987, scopeLine: 1817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!4987 = !DISubroutineType(types: !4988)
!4988 = !{null, !1125, !1247, !1149}
!4989 = !DILocalVariable(name: "ref", arg: 1, scope: !4986, file: !3, line: 1816, type: !1125)
!4990 = !DILocation(line: 1816, column: 25, scope: !4986)
!4991 = !DILocalVariable(name: "t", arg: 2, scope: !4986, file: !3, line: 1816, type: !1247)
!4992 = !DILocation(line: 1816, column: 35, scope: !4986)
!4993 = !DILocalVariable(name: "objectp", arg: 3, scope: !4986, file: !3, line: 1816, type: !1149)
!4994 = !DILocation(line: 1816, column: 42, scope: !4986)
!4995 = !DILocation(line: 1818, column: 36, scope: !4986)
!4996 = !DILocation(line: 1818, column: 41, scope: !4986)
!4997 = !DILocation(line: 1818, column: 44, scope: !4986)
!4998 = !DILocation(line: 1818, column: 3, scope: !4986)
!4999 = !DILocation(line: 1819, column: 1, scope: !4986)
!5000 = distinct !DISubprogram(name: "set_mem_addr_space", scope: !3, file: !3, line: 1839, type: !5001, scopeLine: 1840, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5001 = !DISubroutineType(types: !5002)
!5002 = !{null, !1125, !4087}
!5003 = !DILocalVariable(name: "mem", arg: 1, scope: !5000, file: !3, line: 1839, type: !1125)
!5004 = !DILocation(line: 1839, column: 25, scope: !5000)
!5005 = !DILocalVariable(name: "addrspace", arg: 2, scope: !5000, file: !3, line: 1839, type: !4087)
!5006 = !DILocation(line: 1839, column: 43, scope: !5000)
!5007 = !DILocation(line: 1841, column: 36, scope: !5000)
!5008 = !DILocation(line: 1841, column: 57, scope: !5000)
!5009 = !DILocation(line: 1842, column: 8, scope: !5000)
!5010 = !DILocation(line: 1842, column: 26, scope: !5000)
!5011 = !DILocation(line: 1843, column: 8, scope: !5000)
!5012 = !DILocation(line: 1843, column: 25, scope: !5000)
!5013 = !DILocation(line: 1843, column: 36, scope: !5000)
!5014 = !DILocation(line: 1841, column: 21, scope: !5000)
!5015 = !DILocation(line: 1841, column: 3, scope: !5000)
!5016 = !DILocation(line: 1841, column: 19, scope: !5000)
!5017 = !DILocation(line: 1844, column: 1, scope: !5000)
!5018 = distinct !DISubprogram(name: "set_mem_align", scope: !3, file: !3, line: 1849, type: !5019, scopeLine: 1850, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5019 = !DISubroutineType(types: !5020)
!5020 = !{null, !1125, !7}
!5021 = !DILocalVariable(name: "mem", arg: 1, scope: !5018, file: !3, line: 1849, type: !1125)
!5022 = !DILocation(line: 1849, column: 20, scope: !5018)
!5023 = !DILocalVariable(name: "align", arg: 2, scope: !5018, file: !3, line: 1849, type: !7)
!5024 = !DILocation(line: 1849, column: 38, scope: !5018)
!5025 = !DILocation(line: 1851, column: 36, scope: !5018)
!5026 = !DILocation(line: 1851, column: 57, scope: !5018)
!5027 = !DILocation(line: 1852, column: 8, scope: !5018)
!5028 = !DILocation(line: 1852, column: 26, scope: !5018)
!5029 = !DILocation(line: 1852, column: 42, scope: !5018)
!5030 = !DILocation(line: 1853, column: 8, scope: !5018)
!5031 = !DILocation(line: 1853, column: 30, scope: !5018)
!5032 = !DILocation(line: 1851, column: 21, scope: !5018)
!5033 = !DILocation(line: 1851, column: 3, scope: !5018)
!5034 = !DILocation(line: 1851, column: 19, scope: !5018)
!5035 = !DILocation(line: 1854, column: 1, scope: !5018)
!5036 = distinct !DISubprogram(name: "set_mem_expr", scope: !3, file: !3, line: 1859, type: !5037, scopeLine: 1860, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5037 = !DISubroutineType(types: !5038)
!5038 = !{null, !1125, !1247}
!5039 = !DILocalVariable(name: "mem", arg: 1, scope: !5036, file: !3, line: 1859, type: !1125)
!5040 = !DILocation(line: 1859, column: 19, scope: !5036)
!5041 = !DILocalVariable(name: "expr", arg: 2, scope: !5036, file: !3, line: 1859, type: !1247)
!5042 = !DILocation(line: 1859, column: 29, scope: !5036)
!5043 = !DILocation(line: 1862, column: 22, scope: !5036)
!5044 = !DILocation(line: 1862, column: 43, scope: !5036)
!5045 = !DILocation(line: 1862, column: 49, scope: !5036)
!5046 = !DILocation(line: 1863, column: 8, scope: !5036)
!5047 = !DILocation(line: 1863, column: 24, scope: !5036)
!5048 = !DILocation(line: 1864, column: 8, scope: !5036)
!5049 = !DILocation(line: 1864, column: 30, scope: !5036)
!5050 = !DILocation(line: 1862, column: 7, scope: !5036)
!5051 = !DILocation(line: 1861, column: 3, scope: !5036)
!5052 = !DILocation(line: 1862, column: 5, scope: !5036)
!5053 = !DILocation(line: 1865, column: 1, scope: !5036)
!5054 = distinct !DISubprogram(name: "set_mem_offset", scope: !3, file: !3, line: 1870, type: !3382, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5055 = !DILocalVariable(name: "mem", arg: 1, scope: !5054, file: !3, line: 1870, type: !1125)
!5056 = !DILocation(line: 1870, column: 21, scope: !5054)
!5057 = !DILocalVariable(name: "offset", arg: 2, scope: !5054, file: !3, line: 1870, type: !1125)
!5058 = !DILocation(line: 1870, column: 30, scope: !5054)
!5059 = !DILocation(line: 1872, column: 36, scope: !5054)
!5060 = !DILocation(line: 1872, column: 57, scope: !5054)
!5061 = !DILocation(line: 1873, column: 8, scope: !5054)
!5062 = !DILocation(line: 1873, column: 16, scope: !5054)
!5063 = !DILocation(line: 1873, column: 32, scope: !5054)
!5064 = !DILocation(line: 1874, column: 8, scope: !5054)
!5065 = !DILocation(line: 1874, column: 30, scope: !5054)
!5066 = !DILocation(line: 1872, column: 21, scope: !5054)
!5067 = !DILocation(line: 1872, column: 3, scope: !5054)
!5068 = !DILocation(line: 1872, column: 19, scope: !5054)
!5069 = !DILocation(line: 1875, column: 1, scope: !5054)
!5070 = distinct !DISubprogram(name: "set_mem_size", scope: !3, file: !3, line: 1880, type: !3382, scopeLine: 1881, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5071 = !DILocalVariable(name: "mem", arg: 1, scope: !5070, file: !3, line: 1880, type: !1125)
!5072 = !DILocation(line: 1880, column: 19, scope: !5070)
!5073 = !DILocalVariable(name: "size", arg: 2, scope: !5070, file: !3, line: 1880, type: !1125)
!5074 = !DILocation(line: 1880, column: 28, scope: !5070)
!5075 = !DILocation(line: 1882, column: 36, scope: !5070)
!5076 = !DILocation(line: 1882, column: 57, scope: !5070)
!5077 = !DILocation(line: 1883, column: 8, scope: !5070)
!5078 = !DILocation(line: 1883, column: 26, scope: !5070)
!5079 = !DILocation(line: 1883, column: 32, scope: !5070)
!5080 = !DILocation(line: 1884, column: 8, scope: !5070)
!5081 = !DILocation(line: 1884, column: 30, scope: !5070)
!5082 = !DILocation(line: 1882, column: 21, scope: !5070)
!5083 = !DILocation(line: 1882, column: 3, scope: !5070)
!5084 = !DILocation(line: 1882, column: 19, scope: !5070)
!5085 = !DILocation(line: 1885, column: 1, scope: !5070)
!5086 = distinct !DISubprogram(name: "change_address", scope: !3, file: !3, line: 1929, type: !5087, scopeLine: 1930, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5087 = !DISubroutineType(types: !5088)
!5088 = !{!1125, !1125, !5, !1125}
!5089 = !DILocalVariable(name: "memref", arg: 1, scope: !5086, file: !3, line: 1929, type: !1125)
!5090 = !DILocation(line: 1929, column: 21, scope: !5086)
!5091 = !DILocalVariable(name: "mode", arg: 2, scope: !5086, file: !3, line: 1929, type: !5)
!5092 = !DILocation(line: 1929, column: 47, scope: !5086)
!5093 = !DILocalVariable(name: "addr", arg: 3, scope: !5086, file: !3, line: 1929, type: !1125)
!5094 = !DILocation(line: 1929, column: 57, scope: !5086)
!5095 = !DILocalVariable(name: "new_rtx", scope: !5086, file: !3, line: 1931, type: !1125)
!5096 = !DILocation(line: 1931, column: 7, scope: !5086)
!5097 = !DILocation(line: 1931, column: 35, scope: !5086)
!5098 = !DILocation(line: 1931, column: 43, scope: !5086)
!5099 = !DILocation(line: 1931, column: 49, scope: !5086)
!5100 = !DILocation(line: 1931, column: 17, scope: !5086)
!5101 = !DILocalVariable(name: "size", scope: !5086, file: !3, line: 1931, type: !1125)
!5102 = !DILocation(line: 1931, column: 59, scope: !5086)
!5103 = !DILocalVariable(name: "mmode", scope: !5086, file: !3, line: 1932, type: !5)
!5104 = !DILocation(line: 1932, column: 21, scope: !5086)
!5105 = !DILocation(line: 1932, column: 29, scope: !5086)
!5106 = !DILocalVariable(name: "align", scope: !5086, file: !3, line: 1933, type: !7)
!5107 = !DILocation(line: 1933, column: 16, scope: !5086)
!5108 = !DILocation(line: 1935, column: 10, scope: !5086)
!5109 = !DILocation(line: 1935, column: 16, scope: !5086)
!5110 = !DILocation(line: 1935, column: 33, scope: !5086)
!5111 = !DILocation(line: 1935, column: 8, scope: !5086)
!5112 = !DILocation(line: 1936, column: 11, scope: !5086)
!5113 = !DILocation(line: 1936, column: 17, scope: !5086)
!5114 = !DILocation(line: 1936, column: 46, scope: !5086)
!5115 = !DILocation(line: 1936, column: 9, scope: !5086)
!5116 = !DILocation(line: 1939, column: 7, scope: !5117)
!5117 = distinct !DILexicalBlock(scope: !5086, file: !3, line: 1939, column: 7)
!5118 = !DILocation(line: 1939, column: 18, scope: !5117)
!5119 = !DILocation(line: 1939, column: 15, scope: !5117)
!5120 = !DILocation(line: 1939, column: 7, scope: !5086)
!5121 = !DILocation(line: 1941, column: 11, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 1941, column: 11)
!5123 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 1940, column: 5)
!5124 = !DILocation(line: 1941, column: 30, scope: !5122)
!5125 = !DILocation(line: 1942, column: 4, scope: !5122)
!5126 = !DILocation(line: 1942, column: 8, scope: !5122)
!5127 = !DILocation(line: 1942, column: 26, scope: !5122)
!5128 = !DILocation(line: 1943, column: 8, scope: !5122)
!5129 = !DILocation(line: 1943, column: 11, scope: !5122)
!5130 = !DILocation(line: 1943, column: 31, scope: !5122)
!5131 = !DILocation(line: 1944, column: 8, scope: !5122)
!5132 = !DILocation(line: 1944, column: 11, scope: !5122)
!5133 = !DILocation(line: 1944, column: 32, scope: !5122)
!5134 = !DILocation(line: 1944, column: 29, scope: !5122)
!5135 = !DILocation(line: 1945, column: 8, scope: !5122)
!5136 = !DILocation(line: 1945, column: 11, scope: !5122)
!5137 = !DILocation(line: 1945, column: 33, scope: !5122)
!5138 = !DILocation(line: 1945, column: 30, scope: !5122)
!5139 = !DILocation(line: 1941, column: 11, scope: !5123)
!5140 = !DILocation(line: 1946, column: 9, scope: !5122)
!5141 = !DILocation(line: 1946, column: 2, scope: !5122)
!5142 = !DILocation(line: 1948, column: 30, scope: !5123)
!5143 = !DILocation(line: 1948, column: 37, scope: !5123)
!5144 = !DILocation(line: 1948, column: 17, scope: !5123)
!5145 = !DILocation(line: 1948, column: 15, scope: !5123)
!5146 = !DILocation(line: 1949, column: 7, scope: !5123)
!5147 = !DILocation(line: 1950, column: 5, scope: !5123)
!5148 = !DILocation(line: 1953, column: 22, scope: !5086)
!5149 = !DILocation(line: 1953, column: 52, scope: !5086)
!5150 = !DILocation(line: 1953, column: 58, scope: !5086)
!5151 = !DILocation(line: 1954, column: 8, scope: !5086)
!5152 = !DILocation(line: 1954, column: 33, scope: !5086)
!5153 = !DILocation(line: 1953, column: 7, scope: !5086)
!5154 = !DILocation(line: 1952, column: 3, scope: !5086)
!5155 = !DILocation(line: 1953, column: 5, scope: !5086)
!5156 = !DILocation(line: 1956, column: 10, scope: !5086)
!5157 = !DILocation(line: 1956, column: 3, scope: !5086)
!5158 = !DILocation(line: 1957, column: 1, scope: !5086)
!5159 = distinct !DISubprogram(name: "change_address_1", scope: !3, file: !3, line: 1894, type: !5160, scopeLine: 1895, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{!1125, !1125, !5, !1125, !1149}
!5162 = !DILocalVariable(name: "memref", arg: 1, scope: !5159, file: !3, line: 1894, type: !1125)
!5163 = !DILocation(line: 1894, column: 23, scope: !5159)
!5164 = !DILocalVariable(name: "mode", arg: 2, scope: !5159, file: !3, line: 1894, type: !5)
!5165 = !DILocation(line: 1894, column: 49, scope: !5159)
!5166 = !DILocalVariable(name: "addr", arg: 3, scope: !5159, file: !3, line: 1894, type: !1125)
!5167 = !DILocation(line: 1894, column: 59, scope: !5159)
!5168 = !DILocalVariable(name: "validate", arg: 4, scope: !5159, file: !3, line: 1894, type: !1149)
!5169 = !DILocation(line: 1894, column: 69, scope: !5159)
!5170 = !DILocalVariable(name: "as", scope: !5159, file: !3, line: 1896, type: !4087)
!5171 = !DILocation(line: 1896, column: 16, scope: !5159)
!5172 = !DILocalVariable(name: "new_rtx", scope: !5159, file: !3, line: 1897, type: !1125)
!5173 = !DILocation(line: 1897, column: 7, scope: !5159)
!5174 = !DILocation(line: 1899, column: 3, scope: !5159)
!5175 = !DILocation(line: 1900, column: 8, scope: !5159)
!5176 = !DILocation(line: 1900, column: 6, scope: !5159)
!5177 = !DILocation(line: 1901, column: 7, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1901, column: 7)
!5179 = !DILocation(line: 1901, column: 12, scope: !5178)
!5180 = !DILocation(line: 1901, column: 7, scope: !5159)
!5181 = !DILocation(line: 1902, column: 12, scope: !5178)
!5182 = !DILocation(line: 1902, column: 10, scope: !5178)
!5183 = !DILocation(line: 1902, column: 5, scope: !5178)
!5184 = !DILocation(line: 1903, column: 7, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1903, column: 7)
!5186 = !DILocation(line: 1903, column: 12, scope: !5185)
!5187 = !DILocation(line: 1903, column: 7, scope: !5159)
!5188 = !DILocation(line: 1904, column: 12, scope: !5185)
!5189 = !DILocation(line: 1904, column: 10, scope: !5185)
!5190 = !DILocation(line: 1904, column: 5, scope: !5185)
!5191 = !DILocation(line: 1905, column: 7, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1905, column: 7)
!5193 = !DILocation(line: 1905, column: 15, scope: !5192)
!5194 = !DILocation(line: 1905, column: 12, scope: !5192)
!5195 = !DILocation(line: 1905, column: 33, scope: !5192)
!5196 = !DILocation(line: 1905, column: 36, scope: !5192)
!5197 = !DILocation(line: 1905, column: 44, scope: !5192)
!5198 = !DILocation(line: 1905, column: 41, scope: !5192)
!5199 = !DILocation(line: 1906, column: 7, scope: !5192)
!5200 = !DILocation(line: 1906, column: 12, scope: !5192)
!5201 = !DILocation(line: 1906, column: 21, scope: !5192)
!5202 = !DILocation(line: 1906, column: 53, scope: !5192)
!5203 = !DILocation(line: 1906, column: 59, scope: !5192)
!5204 = !DILocation(line: 1906, column: 65, scope: !5192)
!5205 = !DILocation(line: 1906, column: 24, scope: !5192)
!5206 = !DILocation(line: 1905, column: 7, scope: !5159)
!5207 = !DILocation(line: 1907, column: 12, scope: !5192)
!5208 = !DILocation(line: 1907, column: 5, scope: !5192)
!5209 = !DILocation(line: 1909, column: 7, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1909, column: 7)
!5211 = !DILocation(line: 1909, column: 7, scope: !5159)
!5212 = !DILocation(line: 1911, column: 11, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5214, file: !3, line: 1911, column: 11)
!5214 = distinct !DILexicalBlock(scope: !5210, file: !3, line: 1910, column: 5)
!5215 = !DILocation(line: 1911, column: 30, scope: !5213)
!5216 = !DILocation(line: 1911, column: 33, scope: !5213)
!5217 = !DILocation(line: 1911, column: 11, scope: !5214)
!5218 = !DILocation(line: 1912, column: 2, scope: !5213)
!5219 = !DILocation(line: 1914, column: 36, scope: !5213)
!5220 = !DILocation(line: 1914, column: 42, scope: !5213)
!5221 = !DILocation(line: 1914, column: 48, scope: !5213)
!5222 = !DILocation(line: 1914, column: 9, scope: !5213)
!5223 = !DILocation(line: 1914, column: 7, scope: !5213)
!5224 = !DILocation(line: 1915, column: 5, scope: !5214)
!5225 = !DILocation(line: 1917, column: 20, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1917, column: 7)
!5227 = !DILocation(line: 1917, column: 26, scope: !5226)
!5228 = !DILocation(line: 1917, column: 7, scope: !5226)
!5229 = !DILocation(line: 1917, column: 44, scope: !5226)
!5230 = !DILocation(line: 1917, column: 47, scope: !5226)
!5231 = !DILocation(line: 1917, column: 55, scope: !5226)
!5232 = !DILocation(line: 1917, column: 52, scope: !5226)
!5233 = !DILocation(line: 1917, column: 7, scope: !5159)
!5234 = !DILocation(line: 1918, column: 12, scope: !5226)
!5235 = !DILocation(line: 1918, column: 5, scope: !5226)
!5236 = !DILocation(line: 1920, column: 26, scope: !5159)
!5237 = !DILocation(line: 1920, column: 32, scope: !5159)
!5238 = !DILocation(line: 1920, column: 13, scope: !5159)
!5239 = !DILocation(line: 1920, column: 11, scope: !5159)
!5240 = !DILocation(line: 1921, column: 3, scope: !5159)
!5241 = !DILocation(line: 1922, column: 10, scope: !5159)
!5242 = !DILocation(line: 1922, column: 3, scope: !5159)
!5243 = !DILocation(line: 1923, column: 1, scope: !5159)
!5244 = distinct !DISubprogram(name: "adjust_automodify_address_1", scope: !3, file: !3, line: 2053, type: !5245, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5245 = !DISubroutineType(types: !5246)
!5246 = !{!1125, !1125, !5, !1125, !1216, !1149}
!5247 = !DILocalVariable(name: "memref", arg: 1, scope: !5244, file: !3, line: 2053, type: !1125)
!5248 = !DILocation(line: 2053, column: 34, scope: !5244)
!5249 = !DILocalVariable(name: "mode", arg: 2, scope: !5244, file: !3, line: 2053, type: !5)
!5250 = !DILocation(line: 2053, column: 60, scope: !5244)
!5251 = !DILocalVariable(name: "addr", arg: 3, scope: !5244, file: !3, line: 2053, type: !1125)
!5252 = !DILocation(line: 2053, column: 70, scope: !5244)
!5253 = !DILocalVariable(name: "offset", arg: 4, scope: !5244, file: !3, line: 2054, type: !1216)
!5254 = !DILocation(line: 2054, column: 23, scope: !5244)
!5255 = !DILocalVariable(name: "validate", arg: 5, scope: !5244, file: !3, line: 2054, type: !1149)
!5256 = !DILocation(line: 2054, column: 35, scope: !5244)
!5257 = !DILocation(line: 2056, column: 30, scope: !5244)
!5258 = !DILocation(line: 2056, column: 48, scope: !5244)
!5259 = !DILocation(line: 2056, column: 54, scope: !5244)
!5260 = !DILocation(line: 2056, column: 12, scope: !5244)
!5261 = !DILocation(line: 2056, column: 10, scope: !5244)
!5262 = !DILocation(line: 2057, column: 28, scope: !5244)
!5263 = !DILocation(line: 2057, column: 36, scope: !5244)
!5264 = !DILocation(line: 2057, column: 42, scope: !5244)
!5265 = !DILocation(line: 2057, column: 50, scope: !5244)
!5266 = !DILocation(line: 2057, column: 10, scope: !5244)
!5267 = !DILocation(line: 2057, column: 3, scope: !5244)
!5268 = distinct !DISubprogram(name: "offset_address", scope: !3, file: !3, line: 2065, type: !5269, scopeLine: 2066, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5269 = !DISubroutineType(types: !5270)
!5270 = !{!1125, !1125, !1125, !1199}
!5271 = !DILocalVariable(name: "memref", arg: 1, scope: !5268, file: !3, line: 2065, type: !1125)
!5272 = !DILocation(line: 2065, column: 21, scope: !5268)
!5273 = !DILocalVariable(name: "offset", arg: 2, scope: !5268, file: !3, line: 2065, type: !1125)
!5274 = !DILocation(line: 2065, column: 33, scope: !5268)
!5275 = !DILocalVariable(name: "pow2", arg: 3, scope: !5268, file: !3, line: 2065, type: !1199)
!5276 = !DILocation(line: 2065, column: 64, scope: !5268)
!5277 = !DILocalVariable(name: "new_rtx", scope: !5268, file: !3, line: 2067, type: !1125)
!5278 = !DILocation(line: 2067, column: 7, scope: !5268)
!5279 = !DILocalVariable(name: "addr", scope: !5268, file: !3, line: 2067, type: !1125)
!5280 = !DILocation(line: 2067, column: 16, scope: !5268)
!5281 = !DILocation(line: 2067, column: 23, scope: !5268)
!5282 = !DILocalVariable(name: "as", scope: !5268, file: !3, line: 2068, type: !4087)
!5283 = !DILocation(line: 2068, column: 16, scope: !5268)
!5284 = !DILocation(line: 2068, column: 21, scope: !5268)
!5285 = !DILocalVariable(name: "address_mode", scope: !5268, file: !3, line: 2069, type: !5)
!5286 = !DILocation(line: 2069, column: 21, scope: !5268)
!5287 = !DILocation(line: 2069, column: 55, scope: !5268)
!5288 = !DILocation(line: 2069, column: 69, scope: !5268)
!5289 = !DILocation(line: 2069, column: 36, scope: !5268)
!5290 = !DILocation(line: 2071, column: 40, scope: !5268)
!5291 = !DILocation(line: 2071, column: 54, scope: !5268)
!5292 = !DILocation(line: 2071, column: 60, scope: !5268)
!5293 = !DILocation(line: 2071, column: 13, scope: !5268)
!5294 = !DILocation(line: 2071, column: 11, scope: !5268)
!5295 = !DILocation(line: 2080, column: 38, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 2080, column: 7)
!5297 = !DILocation(line: 2080, column: 57, scope: !5296)
!5298 = !DILocation(line: 2080, column: 66, scope: !5296)
!5299 = !DILocation(line: 2080, column: 9, scope: !5296)
!5300 = !DILocation(line: 2081, column: 7, scope: !5296)
!5301 = !DILocation(line: 2081, column: 10, scope: !5296)
!5302 = !DILocation(line: 2081, column: 26, scope: !5296)
!5303 = !DILocation(line: 2082, column: 7, scope: !5296)
!5304 = !DILocation(line: 2082, column: 10, scope: !5296)
!5305 = !DILocation(line: 2082, column: 28, scope: !5296)
!5306 = !DILocation(line: 2082, column: 25, scope: !5296)
!5307 = !DILocation(line: 2080, column: 7, scope: !5268)
!5308 = !DILocation(line: 2084, column: 25, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 2083, column: 5)
!5310 = !DILocation(line: 2084, column: 42, scope: !5309)
!5311 = !DILocation(line: 2084, column: 14, scope: !5309)
!5312 = !DILocation(line: 2084, column: 12, scope: !5309)
!5313 = !DILocation(line: 2085, column: 44, scope: !5309)
!5314 = !DILocation(line: 2085, column: 58, scope: !5309)
!5315 = !DILocation(line: 2085, column: 64, scope: !5309)
!5316 = !DILocation(line: 2085, column: 17, scope: !5309)
!5317 = !DILocation(line: 2085, column: 15, scope: !5309)
!5318 = !DILocation(line: 2086, column: 5, scope: !5309)
!5319 = !DILocation(line: 2088, column: 29, scope: !5268)
!5320 = !DILocation(line: 2088, column: 47, scope: !5268)
!5321 = !DILocation(line: 2088, column: 3, scope: !5268)
!5322 = !DILocation(line: 2089, column: 31, scope: !5268)
!5323 = !DILocation(line: 2089, column: 49, scope: !5268)
!5324 = !DILocation(line: 2089, column: 13, scope: !5268)
!5325 = !DILocation(line: 2089, column: 11, scope: !5268)
!5326 = !DILocation(line: 2092, column: 7, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 2092, column: 7)
!5328 = !DILocation(line: 2092, column: 18, scope: !5327)
!5329 = !DILocation(line: 2092, column: 15, scope: !5327)
!5330 = !DILocation(line: 2092, column: 7, scope: !5268)
!5331 = !DILocation(line: 2093, column: 12, scope: !5327)
!5332 = !DILocation(line: 2093, column: 5, scope: !5327)
!5333 = !DILocation(line: 2098, column: 22, scope: !5268)
!5334 = !DILocation(line: 2098, column: 46, scope: !5268)
!5335 = !DILocation(line: 2099, column: 8, scope: !5268)
!5336 = !DILocation(line: 2100, column: 8, scope: !5268)
!5337 = !DILocation(line: 2100, column: 12, scope: !5268)
!5338 = !DILocation(line: 2098, column: 7, scope: !5268)
!5339 = !DILocation(line: 2097, column: 3, scope: !5268)
!5340 = !DILocation(line: 2098, column: 5, scope: !5268)
!5341 = !DILocation(line: 2101, column: 10, scope: !5268)
!5342 = !DILocation(line: 2101, column: 3, scope: !5268)
!5343 = !DILocation(line: 2102, column: 1, scope: !5268)
!5344 = distinct !DISubprogram(name: "replace_equiv_address_nv", scope: !3, file: !3, line: 2121, type: !4222, scopeLine: 2122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5345 = !DILocalVariable(name: "memref", arg: 1, scope: !5344, file: !3, line: 2121, type: !1125)
!5346 = !DILocation(line: 2121, column: 31, scope: !5344)
!5347 = !DILocalVariable(name: "addr", arg: 2, scope: !5344, file: !3, line: 2121, type: !1125)
!5348 = !DILocation(line: 2121, column: 43, scope: !5344)
!5349 = !DILocation(line: 2123, column: 28, scope: !5344)
!5350 = !DILocation(line: 2123, column: 46, scope: !5344)
!5351 = !DILocation(line: 2123, column: 10, scope: !5344)
!5352 = !DILocation(line: 2123, column: 3, scope: !5344)
!5353 = distinct !DISubprogram(name: "widen_memory_access", scope: !3, file: !3, line: 2132, type: !5354, scopeLine: 2133, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5354 = !DISubroutineType(types: !5355)
!5355 = !{!1125, !1125, !5, !1216}
!5356 = !DILocalVariable(name: "memref", arg: 1, scope: !5353, file: !3, line: 2132, type: !1125)
!5357 = !DILocation(line: 2132, column: 26, scope: !5353)
!5358 = !DILocalVariable(name: "mode", arg: 2, scope: !5353, file: !3, line: 2132, type: !5)
!5359 = !DILocation(line: 2132, column: 52, scope: !5353)
!5360 = !DILocalVariable(name: "offset", arg: 3, scope: !5353, file: !3, line: 2132, type: !1216)
!5361 = !DILocation(line: 2132, column: 72, scope: !5353)
!5362 = !DILocalVariable(name: "new_rtx", scope: !5353, file: !3, line: 2134, type: !1125)
!5363 = !DILocation(line: 2134, column: 7, scope: !5353)
!5364 = !DILocation(line: 2134, column: 35, scope: !5353)
!5365 = !DILocation(line: 2134, column: 43, scope: !5353)
!5366 = !DILocation(line: 2134, column: 49, scope: !5353)
!5367 = !DILocation(line: 2134, column: 17, scope: !5353)
!5368 = !DILocalVariable(name: "expr", scope: !5353, file: !3, line: 2135, type: !1247)
!5369 = !DILocation(line: 2135, column: 8, scope: !5353)
!5370 = !DILocation(line: 2135, column: 15, scope: !5353)
!5371 = !DILocalVariable(name: "memoffset", scope: !5353, file: !3, line: 2136, type: !1125)
!5372 = !DILocation(line: 2136, column: 7, scope: !5353)
!5373 = !DILocation(line: 2136, column: 19, scope: !5353)
!5374 = !DILocalVariable(name: "size", scope: !5353, file: !3, line: 2137, type: !7)
!5375 = !DILocation(line: 2137, column: 16, scope: !5353)
!5376 = !DILocation(line: 2137, column: 23, scope: !5353)
!5377 = !DILocation(line: 2140, column: 7, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2140, column: 7)
!5379 = !DILocation(line: 2140, column: 18, scope: !5378)
!5380 = !DILocation(line: 2140, column: 15, scope: !5378)
!5381 = !DILocation(line: 2140, column: 7, scope: !5353)
!5382 = !DILocation(line: 2141, column: 12, scope: !5378)
!5383 = !DILocation(line: 2141, column: 5, scope: !5378)
!5384 = !DILocation(line: 2145, column: 9, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2145, column: 7)
!5386 = !DILocation(line: 2145, column: 7, scope: !5353)
!5387 = !DILocation(line: 2146, column: 10, scope: !5385)
!5388 = !DILocation(line: 2146, column: 5, scope: !5385)
!5389 = !DILocation(line: 2148, column: 3, scope: !5353)
!5390 = !DILocation(line: 2148, column: 10, scope: !5353)
!5391 = !DILocation(line: 2150, column: 11, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 2150, column: 11)
!5393 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2149, column: 5)
!5394 = !DILocation(line: 2150, column: 28, scope: !5392)
!5395 = !DILocation(line: 2150, column: 11, scope: !5393)
!5396 = !DILocalVariable(name: "field", scope: !5397, file: !3, line: 2152, type: !1247)
!5397 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 2151, column: 2)
!5398 = !DILocation(line: 2152, column: 9, scope: !5397)
!5399 = !DILocation(line: 2152, column: 17, scope: !5397)
!5400 = !DILocalVariable(name: "offset", scope: !5397, file: !3, line: 2153, type: !1247)
!5401 = !DILocation(line: 2153, column: 9, scope: !5397)
!5402 = !DILocation(line: 2153, column: 46, scope: !5397)
!5403 = !DILocation(line: 2153, column: 18, scope: !5397)
!5404 = !DILocation(line: 2155, column: 10, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5397, file: !3, line: 2155, column: 8)
!5406 = !DILocation(line: 2155, column: 8, scope: !5397)
!5407 = !DILocation(line: 2157, column: 13, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 2156, column: 6)
!5409 = !DILocation(line: 2158, column: 8, scope: !5408)
!5410 = !DILocation(line: 2163, column: 8, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5397, file: !3, line: 2163, column: 8)
!5412 = !DILocation(line: 2163, column: 43, scope: !5411)
!5413 = !DILocation(line: 2164, column: 8, scope: !5411)
!5414 = !DILocation(line: 2164, column: 29, scope: !5411)
!5415 = !DILocation(line: 2164, column: 53, scope: !5411)
!5416 = !DILocation(line: 2164, column: 11, scope: !5411)
!5417 = !DILocation(line: 2164, column: 59, scope: !5411)
!5418 = !DILocation(line: 2165, column: 8, scope: !5411)
!5419 = !DILocation(line: 2165, column: 11, scope: !5411)
!5420 = !DILocation(line: 2165, column: 30, scope: !5411)
!5421 = !DILocation(line: 2163, column: 8, scope: !5397)
!5422 = !DILocation(line: 2166, column: 6, scope: !5411)
!5423 = !DILocation(line: 2168, column: 25, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5397, file: !3, line: 2168, column: 8)
!5425 = !DILocation(line: 2168, column: 10, scope: !5424)
!5426 = !DILocation(line: 2168, column: 8, scope: !5397)
!5427 = !DILocation(line: 2170, column: 13, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5424, file: !3, line: 2169, column: 6)
!5429 = !DILocation(line: 2171, column: 8, scope: !5428)
!5430 = !DILocation(line: 2174, column: 11, scope: !5397)
!5431 = !DILocation(line: 2174, column: 9, scope: !5397)
!5432 = !DILocation(line: 2176, column: 9, scope: !5397)
!5433 = !DILocation(line: 2176, column: 6, scope: !5397)
!5434 = !DILocation(line: 2180, column: 2, scope: !5397)
!5435 = !DILocation(line: 2182, column: 16, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 2182, column: 16)
!5437 = !DILocation(line: 2183, column: 9, scope: !5436)
!5438 = !DILocation(line: 2183, column: 12, scope: !5436)
!5439 = !DILocation(line: 2184, column: 9, scope: !5436)
!5440 = !DILocation(line: 2184, column: 12, scope: !5436)
!5441 = !DILocation(line: 2184, column: 46, scope: !5436)
!5442 = !DILocation(line: 2185, column: 9, scope: !5436)
!5443 = !DILocation(line: 2185, column: 30, scope: !5436)
!5444 = !DILocation(line: 2185, column: 53, scope: !5436)
!5445 = !DILocation(line: 2185, column: 12, scope: !5436)
!5446 = !DILocation(line: 2185, column: 59, scope: !5436)
!5447 = !DILocation(line: 2186, column: 9, scope: !5436)
!5448 = !DILocation(line: 2186, column: 15, scope: !5436)
!5449 = !DILocation(line: 2186, column: 25, scope: !5436)
!5450 = !DILocation(line: 2186, column: 28, scope: !5436)
!5451 = !DILocation(line: 2186, column: 47, scope: !5436)
!5452 = !DILocation(line: 2182, column: 16, scope: !5392)
!5453 = !DILocation(line: 2187, column: 2, scope: !5436)
!5454 = !DILocation(line: 2192, column: 9, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5436, file: !3, line: 2189, column: 2)
!5456 = !DILocation(line: 2193, column: 4, scope: !5455)
!5457 = distinct !{!5457, !5389, !5458}
!5458 = !DILocation(line: 2195, column: 5, scope: !5353)
!5459 = !DILocation(line: 2197, column: 9, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2197, column: 7)
!5461 = !DILocation(line: 2197, column: 7, scope: !5353)
!5462 = !DILocation(line: 2198, column: 15, scope: !5460)
!5463 = !DILocation(line: 2198, column: 5, scope: !5460)
!5464 = !DILocation(line: 2203, column: 43, scope: !5353)
!5465 = !DILocation(line: 2203, column: 49, scope: !5353)
!5466 = !DILocation(line: 2203, column: 60, scope: !5353)
!5467 = !DILocation(line: 2204, column: 12, scope: !5353)
!5468 = !DILocation(line: 2205, column: 12, scope: !5353)
!5469 = !DILocation(line: 2205, column: 38, scope: !5353)
!5470 = !DILocation(line: 2203, column: 25, scope: !5353)
!5471 = !DILocation(line: 2203, column: 3, scope: !5353)
!5472 = !DILocation(line: 2203, column: 23, scope: !5353)
!5473 = !DILocation(line: 2207, column: 10, scope: !5353)
!5474 = !DILocation(line: 2207, column: 3, scope: !5353)
!5475 = !DILocation(line: 2208, column: 1, scope: !5353)
!5476 = distinct !DISubprogram(name: "get_spill_slot_decl", scope: !3, file: !3, line: 2214, type: !5477, scopeLine: 2215, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5477 = !DISubroutineType(types: !5478)
!5478 = !{!1247, !1360}
!5479 = !DILocalVariable(name: "force_build_p", arg: 1, scope: !5476, file: !3, line: 2214, type: !1360)
!5480 = !DILocation(line: 2214, column: 27, scope: !5476)
!5481 = !DILocalVariable(name: "d", scope: !5476, file: !3, line: 2216, type: !1247)
!5482 = !DILocation(line: 2216, column: 8, scope: !5476)
!5483 = !DILocation(line: 2216, column: 12, scope: !5476)
!5484 = !DILocalVariable(name: "rd", scope: !5476, file: !3, line: 2217, type: !1125)
!5485 = !DILocation(line: 2217, column: 7, scope: !5476)
!5486 = !DILocation(line: 2219, column: 7, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 2219, column: 7)
!5488 = !DILocation(line: 2219, column: 9, scope: !5487)
!5489 = !DILocation(line: 2219, column: 13, scope: !5487)
!5490 = !DILocation(line: 2219, column: 7, scope: !5476)
!5491 = !DILocation(line: 2220, column: 12, scope: !5487)
!5492 = !DILocation(line: 2220, column: 5, scope: !5487)
!5493 = !DILocation(line: 2222, column: 7, scope: !5476)
!5494 = !DILocation(line: 2222, column: 5, scope: !5476)
!5495 = !DILocation(line: 2224, column: 3, scope: !5476)
!5496 = !DILocation(line: 2224, column: 23, scope: !5476)
!5497 = !DILocation(line: 2225, column: 3, scope: !5476)
!5498 = !DILocation(line: 2225, column: 22, scope: !5476)
!5499 = !DILocation(line: 2226, column: 3, scope: !5476)
!5500 = !DILocation(line: 2226, column: 17, scope: !5476)
!5501 = !DILocation(line: 2227, column: 3, scope: !5476)
!5502 = !DILocation(line: 2227, column: 24, scope: !5476)
!5503 = !DILocation(line: 2228, column: 21, scope: !5476)
!5504 = !DILocation(line: 2228, column: 19, scope: !5476)
!5505 = !DILocation(line: 2230, column: 30, scope: !5476)
!5506 = !DILocation(line: 2230, column: 8, scope: !5476)
!5507 = !DILocation(line: 2230, column: 6, scope: !5476)
!5508 = !DILocation(line: 2231, column: 3, scope: !5476)
!5509 = !DILocation(line: 2231, column: 21, scope: !5476)
!5510 = !DILocation(line: 2232, column: 35, scope: !5476)
!5511 = !DILocation(line: 2232, column: 53, scope: !5476)
!5512 = !DILocation(line: 2232, column: 56, scope: !5476)
!5513 = !DILocation(line: 2232, column: 20, scope: !5476)
!5514 = !DILocation(line: 2232, column: 3, scope: !5476)
!5515 = !DILocation(line: 2232, column: 18, scope: !5476)
!5516 = !DILocation(line: 2234, column: 3, scope: !5476)
!5517 = !DILocation(line: 2236, column: 10, scope: !5476)
!5518 = !DILocation(line: 2236, column: 3, scope: !5476)
!5519 = !DILocation(line: 2237, column: 1, scope: !5476)
!5520 = distinct !DISubprogram(name: "set_mem_attrs_for_spill", scope: !3, file: !3, line: 2246, type: !3725, scopeLine: 2247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5521 = !DILocalVariable(name: "mem", arg: 1, scope: !5520, file: !3, line: 2246, type: !1125)
!5522 = !DILocation(line: 2246, column: 30, scope: !5520)
!5523 = !DILocalVariable(name: "alias", scope: !5520, file: !3, line: 2248, type: !1763)
!5524 = !DILocation(line: 2248, column: 18, scope: !5520)
!5525 = !DILocalVariable(name: "addr", scope: !5520, file: !3, line: 2249, type: !1125)
!5526 = !DILocation(line: 2249, column: 7, scope: !5520)
!5527 = !DILocalVariable(name: "offset", scope: !5520, file: !3, line: 2249, type: !1125)
!5528 = !DILocation(line: 2249, column: 13, scope: !5520)
!5529 = !DILocalVariable(name: "expr", scope: !5520, file: !3, line: 2250, type: !1247)
!5530 = !DILocation(line: 2250, column: 8, scope: !5520)
!5531 = !DILocation(line: 2252, column: 10, scope: !5520)
!5532 = !DILocation(line: 2252, column: 8, scope: !5520)
!5533 = !DILocation(line: 2253, column: 11, scope: !5520)
!5534 = !DILocation(line: 2253, column: 9, scope: !5520)
!5535 = !DILocation(line: 2258, column: 10, scope: !5520)
!5536 = !DILocation(line: 2258, column: 8, scope: !5520)
!5537 = !DILocation(line: 2259, column: 12, scope: !5520)
!5538 = !DILocation(line: 2259, column: 10, scope: !5520)
!5539 = !DILocation(line: 2260, column: 7, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5520, file: !3, line: 2260, column: 7)
!5541 = !DILocation(line: 2260, column: 23, scope: !5540)
!5542 = !DILocation(line: 2261, column: 7, scope: !5540)
!5543 = !DILocation(line: 2261, column: 10, scope: !5540)
!5544 = !DILocation(line: 2260, column: 7, scope: !5520)
!5545 = !DILocation(line: 2262, column: 14, scope: !5540)
!5546 = !DILocation(line: 2262, column: 12, scope: !5540)
!5547 = !DILocation(line: 2262, column: 5, scope: !5540)
!5548 = !DILocation(line: 2264, column: 36, scope: !5520)
!5549 = !DILocation(line: 2264, column: 43, scope: !5520)
!5550 = !DILocation(line: 2264, column: 49, scope: !5520)
!5551 = !DILocation(line: 2265, column: 8, scope: !5520)
!5552 = !DILocation(line: 2265, column: 24, scope: !5520)
!5553 = !DILocation(line: 2266, column: 28, scope: !5520)
!5554 = !DILocation(line: 2264, column: 21, scope: !5520)
!5555 = !DILocation(line: 2264, column: 3, scope: !5520)
!5556 = !DILocation(line: 2264, column: 19, scope: !5520)
!5557 = !DILocation(line: 2267, column: 3, scope: !5520)
!5558 = !DILocation(line: 2267, column: 22, scope: !5520)
!5559 = !DILocation(line: 2268, column: 1, scope: !5520)
!5560 = distinct !DISubprogram(name: "gen_label_rtx", scope: !3, file: !3, line: 2273, type: !5561, scopeLine: 2274, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5561 = !DISubroutineType(types: !5562)
!5562 = !{!1125}
!5563 = !DILocation(line: 2275, column: 10, scope: !5560)
!5564 = !DILocation(line: 2275, column: 3, scope: !5560)
!5565 = distinct !DISubprogram(name: "set_new_first_and_last_insn", scope: !3, file: !3, line: 2286, type: !3382, scopeLine: 2287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5566 = !DILocalVariable(name: "first", arg: 1, scope: !5565, file: !3, line: 2286, type: !1125)
!5567 = !DILocation(line: 2286, column: 34, scope: !5565)
!5568 = !DILocalVariable(name: "last", arg: 2, scope: !5565, file: !3, line: 2286, type: !1125)
!5569 = !DILocation(line: 2286, column: 45, scope: !5565)
!5570 = !DILocalVariable(name: "insn", scope: !5565, file: !3, line: 2288, type: !1125)
!5571 = !DILocation(line: 2288, column: 7, scope: !5565)
!5572 = !DILocation(line: 2290, column: 16, scope: !5565)
!5573 = !DILocation(line: 2290, column: 14, scope: !5565)
!5574 = !DILocation(line: 2291, column: 15, scope: !5565)
!5575 = !DILocation(line: 2291, column: 13, scope: !5565)
!5576 = !DILocation(line: 2292, column: 16, scope: !5565)
!5577 = !DILocation(line: 2294, column: 7, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 2294, column: 7)
!5579 = !DILocation(line: 2294, column: 29, scope: !5578)
!5580 = !DILocation(line: 2294, column: 32, scope: !5578)
!5581 = !DILocation(line: 2294, column: 7, scope: !5565)
!5582 = !DILocalVariable(name: "debug_count", scope: !5583, file: !3, line: 2296, type: !1149)
!5583 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 2295, column: 5)
!5584 = !DILocation(line: 2296, column: 11, scope: !5583)
!5585 = !DILocation(line: 2298, column: 22, scope: !5583)
!5586 = !DILocation(line: 2298, column: 44, scope: !5583)
!5587 = !DILocation(line: 2298, column: 20, scope: !5583)
!5588 = !DILocation(line: 2299, column: 26, scope: !5583)
!5589 = !DILocation(line: 2301, column: 19, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5583, file: !3, line: 2301, column: 7)
!5591 = !DILocation(line: 2301, column: 17, scope: !5590)
!5592 = !DILocation(line: 2301, column: 12, scope: !5590)
!5593 = !DILocation(line: 2301, column: 26, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5590, file: !3, line: 2301, column: 7)
!5595 = !DILocation(line: 2301, column: 7, scope: !5590)
!5596 = !DILocation(line: 2302, column: 6, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5594, file: !3, line: 2302, column: 6)
!5598 = !DILocation(line: 2302, column: 24, scope: !5597)
!5599 = !DILocation(line: 2302, column: 22, scope: !5597)
!5600 = !DILocation(line: 2302, column: 6, scope: !5594)
!5601 = !DILocation(line: 2303, column: 25, scope: !5597)
!5602 = !DILocation(line: 2303, column: 23, scope: !5597)
!5603 = !DILocation(line: 2303, column: 4, scope: !5597)
!5604 = !DILocation(line: 2306, column: 21, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 2305, column: 4)
!5606 = !DILocation(line: 2306, column: 19, scope: !5605)
!5607 = !DILocation(line: 2307, column: 10, scope: !5608)
!5608 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 2307, column: 10)
!5609 = !DILocation(line: 2307, column: 10, scope: !5605)
!5610 = !DILocation(line: 2308, column: 19, scope: !5608)
!5611 = !DILocation(line: 2308, column: 8, scope: !5608)
!5612 = !DILocation(line: 2301, column: 39, scope: !5594)
!5613 = !DILocation(line: 2301, column: 37, scope: !5594)
!5614 = !DILocation(line: 2301, column: 7, scope: !5594)
!5615 = distinct !{!5615, !5595, !5616}
!5616 = !DILocation(line: 2309, column: 4, scope: !5590)
!5617 = !DILocation(line: 2311, column: 11, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5583, file: !3, line: 2311, column: 11)
!5619 = !DILocation(line: 2311, column: 11, scope: !5583)
!5620 = !DILocation(line: 2312, column: 23, scope: !5618)
!5621 = !DILocation(line: 2312, column: 47, scope: !5618)
!5622 = !DILocation(line: 2312, column: 45, scope: !5618)
!5623 = !DILocation(line: 2312, column: 21, scope: !5618)
!5624 = !DILocation(line: 2312, column: 2, scope: !5618)
!5625 = !DILocation(line: 2314, column: 20, scope: !5618)
!5626 = !DILocation(line: 2315, column: 5, scope: !5583)
!5627 = !DILocation(line: 2317, column: 17, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 2317, column: 5)
!5629 = !DILocation(line: 2317, column: 15, scope: !5628)
!5630 = !DILocation(line: 2317, column: 10, scope: !5628)
!5631 = !DILocation(line: 2317, column: 24, scope: !5632)
!5632 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 2317, column: 5)
!5633 = !DILocation(line: 2317, column: 5, scope: !5628)
!5634 = !DILocation(line: 2318, column: 22, scope: !5632)
!5635 = !DILocation(line: 2318, column: 20, scope: !5632)
!5636 = !DILocation(line: 2318, column: 7, scope: !5632)
!5637 = !DILocation(line: 2317, column: 37, scope: !5632)
!5638 = !DILocation(line: 2317, column: 35, scope: !5632)
!5639 = !DILocation(line: 2317, column: 5, scope: !5632)
!5640 = distinct !{!5640, !5633, !5641}
!5641 = !DILocation(line: 2318, column: 22, scope: !5628)
!5642 = !DILocation(line: 2320, column: 15, scope: !5565)
!5643 = !DILocation(line: 2321, column: 1, scope: !5565)
!5644 = distinct !DISubprogram(name: "unshare_all_rtl_again", scope: !3, file: !3, line: 2347, type: !3725, scopeLine: 2348, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5645 = !DILocalVariable(name: "insn", arg: 1, scope: !5644, file: !3, line: 2347, type: !1125)
!5646 = !DILocation(line: 2347, column: 28, scope: !5644)
!5647 = !DILocalVariable(name: "p", scope: !5644, file: !3, line: 2349, type: !1125)
!5648 = !DILocation(line: 2349, column: 7, scope: !5644)
!5649 = !DILocalVariable(name: "decl", scope: !5644, file: !3, line: 2350, type: !1247)
!5650 = !DILocation(line: 2350, column: 8, scope: !5644)
!5651 = !DILocation(line: 2352, column: 12, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5644, file: !3, line: 2352, column: 3)
!5653 = !DILocation(line: 2352, column: 10, scope: !5652)
!5654 = !DILocation(line: 2352, column: 8, scope: !5652)
!5655 = !DILocation(line: 2352, column: 18, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 2352, column: 3)
!5657 = !DILocation(line: 2352, column: 3, scope: !5652)
!5658 = !DILocation(line: 2353, column: 9, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 2353, column: 9)
!5660 = !DILocation(line: 2353, column: 9, scope: !5656)
!5661 = !DILocation(line: 2355, column: 20, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 2354, column: 7)
!5663 = !DILocation(line: 2355, column: 2, scope: !5662)
!5664 = !DILocation(line: 2356, column: 20, scope: !5662)
!5665 = !DILocation(line: 2356, column: 2, scope: !5662)
!5666 = !DILocation(line: 2357, column: 7, scope: !5662)
!5667 = !DILocation(line: 2352, column: 25, scope: !5656)
!5668 = !DILocation(line: 2352, column: 23, scope: !5656)
!5669 = !DILocation(line: 2352, column: 3, scope: !5656)
!5670 = distinct !{!5670, !5657, !5671}
!5671 = !DILocation(line: 2357, column: 7, scope: !5652)
!5672 = !DILocation(line: 2360, column: 19, scope: !5644)
!5673 = !DILocation(line: 2360, column: 3, scope: !5644)
!5674 = !DILocation(line: 2363, column: 15, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5644, file: !3, line: 2363, column: 3)
!5676 = !DILocation(line: 2363, column: 13, scope: !5675)
!5677 = !DILocation(line: 2363, column: 8, scope: !5675)
!5678 = !DILocation(line: 2363, column: 44, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 2363, column: 3)
!5680 = !DILocation(line: 2363, column: 3, scope: !5675)
!5681 = !DILocation(line: 2364, column: 21, scope: !5679)
!5682 = !DILocation(line: 2364, column: 5, scope: !5679)
!5683 = !DILocation(line: 2363, column: 57, scope: !5679)
!5684 = !DILocation(line: 2363, column: 55, scope: !5679)
!5685 = !DILocation(line: 2363, column: 3, scope: !5679)
!5686 = distinct !{!5686, !5680, !5687}
!5687 = !DILocation(line: 2364, column: 36, scope: !5675)
!5688 = !DILocation(line: 2366, column: 21, scope: !5644)
!5689 = !DILocation(line: 2366, column: 3, scope: !5644)
!5690 = !DILocation(line: 2368, column: 22, scope: !5644)
!5691 = !DILocation(line: 2368, column: 3, scope: !5644)
!5692 = !DILocation(line: 2369, column: 1, scope: !5644)
!5693 = distinct !DISubprogram(name: "reset_used_flags", scope: !3, file: !3, line: 2722, type: !3725, scopeLine: 2723, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5694 = !DILocalVariable(name: "x", arg: 1, scope: !5693, file: !3, line: 2722, type: !1125)
!5695 = !DILocation(line: 2722, column: 23, scope: !5693)
!5696 = !DILocalVariable(name: "i", scope: !5693, file: !3, line: 2724, type: !1149)
!5697 = !DILocation(line: 2724, column: 7, scope: !5693)
!5698 = !DILocalVariable(name: "j", scope: !5693, file: !3, line: 2724, type: !1149)
!5699 = !DILocation(line: 2724, column: 10, scope: !5693)
!5700 = !DILocalVariable(name: "code", scope: !5693, file: !3, line: 2725, type: !377)
!5701 = !DILocation(line: 2725, column: 17, scope: !5693)
!5702 = !DILocalVariable(name: "format_ptr", scope: !5693, file: !3, line: 2726, type: !1152)
!5703 = !DILocation(line: 2726, column: 15, scope: !5693)
!5704 = !DILocalVariable(name: "length", scope: !5693, file: !3, line: 2727, type: !1149)
!5705 = !DILocation(line: 2727, column: 7, scope: !5693)
!5706 = !DILocation(line: 2727, column: 3, scope: !5693)
!5707 = !DILabel(scope: !5693, name: "repeat", file: !3, line: 2730)
!5708 = !DILocation(line: 2730, column: 1, scope: !5693)
!5709 = !DILocation(line: 2731, column: 7, scope: !5710)
!5710 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 2731, column: 7)
!5711 = !DILocation(line: 2731, column: 9, scope: !5710)
!5712 = !DILocation(line: 2731, column: 7, scope: !5693)
!5713 = !DILocation(line: 2732, column: 5, scope: !5710)
!5714 = !DILocation(line: 2734, column: 10, scope: !5693)
!5715 = !DILocation(line: 2734, column: 8, scope: !5693)
!5716 = !DILocation(line: 2739, column: 11, scope: !5693)
!5717 = !DILocation(line: 2739, column: 3, scope: !5693)
!5718 = !DILocation(line: 2752, column: 7, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 2740, column: 5)
!5720 = !DILocation(line: 2762, column: 7, scope: !5719)
!5721 = !DILocation(line: 2765, column: 7, scope: !5719)
!5722 = !DILocation(line: 2768, column: 3, scope: !5693)
!5723 = !DILocation(line: 2768, column: 22, scope: !5693)
!5724 = !DILocation(line: 2770, column: 16, scope: !5693)
!5725 = !DILocation(line: 2770, column: 14, scope: !5693)
!5726 = !DILocation(line: 2771, column: 12, scope: !5693)
!5727 = !DILocation(line: 2771, column: 10, scope: !5693)
!5728 = !DILocation(line: 2773, column: 10, scope: !5729)
!5729 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 2773, column: 3)
!5730 = !DILocation(line: 2773, column: 8, scope: !5729)
!5731 = !DILocation(line: 2773, column: 15, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5729, file: !3, line: 2773, column: 3)
!5733 = !DILocation(line: 2773, column: 19, scope: !5732)
!5734 = !DILocation(line: 2773, column: 17, scope: !5732)
!5735 = !DILocation(line: 2773, column: 3, scope: !5729)
!5736 = !DILocation(line: 2775, column: 26, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 2774, column: 5)
!5738 = !DILocation(line: 2775, column: 15, scope: !5737)
!5739 = !DILocation(line: 2775, column: 7, scope: !5737)
!5740 = !DILocation(line: 2778, column: 15, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 2778, column: 15)
!5742 = distinct !DILexicalBlock(scope: !5737, file: !3, line: 2776, column: 2)
!5743 = !DILocation(line: 2778, column: 20, scope: !5741)
!5744 = !DILocation(line: 2778, column: 26, scope: !5741)
!5745 = !DILocation(line: 2778, column: 17, scope: !5741)
!5746 = !DILocation(line: 2778, column: 15, scope: !5742)
!5747 = !DILocation(line: 2780, column: 19, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2779, column: 13)
!5749 = !DILocation(line: 2780, column: 17, scope: !5748)
!5750 = !DILocation(line: 2781, column: 8, scope: !5748)
!5751 = !DILocation(line: 2783, column: 22, scope: !5742)
!5752 = !DILocation(line: 2783, column: 4, scope: !5742)
!5753 = !DILocation(line: 2784, column: 4, scope: !5742)
!5754 = !DILocation(line: 2787, column: 11, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 2787, column: 4)
!5756 = !DILocation(line: 2787, column: 9, scope: !5755)
!5757 = !DILocation(line: 2787, column: 16, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5755, file: !3, line: 2787, column: 4)
!5759 = !DILocation(line: 2787, column: 20, scope: !5758)
!5760 = !DILocation(line: 2787, column: 18, scope: !5758)
!5761 = !DILocation(line: 2787, column: 4, scope: !5755)
!5762 = !DILocation(line: 2788, column: 24, scope: !5758)
!5763 = !DILocation(line: 2788, column: 6, scope: !5758)
!5764 = !DILocation(line: 2787, column: 37, scope: !5758)
!5765 = !DILocation(line: 2787, column: 4, scope: !5758)
!5766 = distinct !{!5766, !5761, !5767}
!5767 = !DILocation(line: 2788, column: 41, scope: !5755)
!5768 = !DILocation(line: 2789, column: 4, scope: !5742)
!5769 = !DILocation(line: 2791, column: 5, scope: !5737)
!5770 = !DILocation(line: 2773, column: 28, scope: !5732)
!5771 = !DILocation(line: 2773, column: 3, scope: !5732)
!5772 = distinct !{!5772, !5735, !5773}
!5773 = !DILocation(line: 2791, column: 5, scope: !5729)
!5774 = !DILocation(line: 2792, column: 1, scope: !5693)
!5775 = distinct !DISubprogram(name: "set_used_decls", scope: !3, file: !3, line: 2568, type: !5776, scopeLine: 2569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5776 = !DISubroutineType(types: !5777)
!5777 = !{null, !1247}
!5778 = !DILocalVariable(name: "blk", arg: 1, scope: !5775, file: !3, line: 2568, type: !1247)
!5779 = !DILocation(line: 2568, column: 22, scope: !5775)
!5780 = !DILocalVariable(name: "t", scope: !5775, file: !3, line: 2570, type: !1247)
!5781 = !DILocation(line: 2570, column: 8, scope: !5775)
!5782 = !DILocation(line: 2573, column: 12, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 2573, column: 3)
!5784 = !DILocation(line: 2573, column: 10, scope: !5783)
!5785 = !DILocation(line: 2573, column: 8, scope: !5783)
!5786 = !DILocation(line: 2573, column: 30, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 2573, column: 3)
!5788 = !DILocation(line: 2573, column: 3, scope: !5783)
!5789 = !DILocation(line: 2574, column: 9, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 2574, column: 9)
!5791 = !DILocation(line: 2574, column: 9, scope: !5787)
!5792 = !DILocation(line: 2575, column: 23, scope: !5790)
!5793 = !DILocation(line: 2575, column: 7, scope: !5790)
!5794 = !DILocation(line: 2573, column: 37, scope: !5787)
!5795 = !DILocation(line: 2573, column: 35, scope: !5787)
!5796 = !DILocation(line: 2573, column: 3, scope: !5787)
!5797 = distinct !{!5797, !5788, !5798}
!5798 = !DILocation(line: 2575, column: 35, scope: !5783)
!5799 = !DILocation(line: 2578, column: 12, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 2578, column: 3)
!5801 = !DILocation(line: 2578, column: 10, scope: !5800)
!5802 = !DILocation(line: 2578, column: 8, scope: !5800)
!5803 = !DILocation(line: 2578, column: 35, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5800, file: !3, line: 2578, column: 3)
!5805 = !DILocation(line: 2578, column: 3, scope: !5800)
!5806 = !DILocation(line: 2579, column: 21, scope: !5804)
!5807 = !DILocation(line: 2579, column: 5, scope: !5804)
!5808 = !DILocation(line: 2578, column: 42, scope: !5804)
!5809 = !DILocation(line: 2578, column: 40, scope: !5804)
!5810 = !DILocation(line: 2578, column: 3, scope: !5804)
!5811 = distinct !{!5811, !5805, !5812}
!5812 = !DILocation(line: 2579, column: 22, scope: !5800)
!5813 = !DILocation(line: 2580, column: 1, scope: !5775)
!5814 = distinct !DISubprogram(name: "set_used_flags", scope: !3, file: !3, line: 2798, type: !3725, scopeLine: 2799, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5815 = !DILocalVariable(name: "x", arg: 1, scope: !5814, file: !3, line: 2798, type: !1125)
!5816 = !DILocation(line: 2798, column: 21, scope: !5814)
!5817 = !DILocalVariable(name: "i", scope: !5814, file: !3, line: 2800, type: !1149)
!5818 = !DILocation(line: 2800, column: 7, scope: !5814)
!5819 = !DILocalVariable(name: "j", scope: !5814, file: !3, line: 2800, type: !1149)
!5820 = !DILocation(line: 2800, column: 10, scope: !5814)
!5821 = !DILocalVariable(name: "code", scope: !5814, file: !3, line: 2801, type: !377)
!5822 = !DILocation(line: 2801, column: 17, scope: !5814)
!5823 = !DILocalVariable(name: "format_ptr", scope: !5814, file: !3, line: 2802, type: !1152)
!5824 = !DILocation(line: 2802, column: 15, scope: !5814)
!5825 = !DILocation(line: 2804, column: 7, scope: !5826)
!5826 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 2804, column: 7)
!5827 = !DILocation(line: 2804, column: 9, scope: !5826)
!5828 = !DILocation(line: 2804, column: 7, scope: !5814)
!5829 = !DILocation(line: 2805, column: 5, scope: !5826)
!5830 = !DILocation(line: 2807, column: 10, scope: !5814)
!5831 = !DILocation(line: 2807, column: 8, scope: !5814)
!5832 = !DILocation(line: 2812, column: 11, scope: !5814)
!5833 = !DILocation(line: 2812, column: 3, scope: !5814)
!5834 = !DILocation(line: 2825, column: 7, scope: !5835)
!5835 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 2813, column: 5)
!5836 = !DILocation(line: 2835, column: 7, scope: !5835)
!5837 = !DILocation(line: 2838, column: 7, scope: !5835)
!5838 = !DILocation(line: 2841, column: 3, scope: !5814)
!5839 = !DILocation(line: 2841, column: 22, scope: !5814)
!5840 = !DILocation(line: 2843, column: 16, scope: !5814)
!5841 = !DILocation(line: 2843, column: 14, scope: !5814)
!5842 = !DILocation(line: 2844, column: 10, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 2844, column: 3)
!5844 = !DILocation(line: 2844, column: 8, scope: !5843)
!5845 = !DILocation(line: 2844, column: 15, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 2844, column: 3)
!5847 = !DILocation(line: 2844, column: 19, scope: !5846)
!5848 = !DILocation(line: 2844, column: 17, scope: !5846)
!5849 = !DILocation(line: 2844, column: 3, scope: !5843)
!5850 = !DILocation(line: 2846, column: 26, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5846, file: !3, line: 2845, column: 5)
!5852 = !DILocation(line: 2846, column: 15, scope: !5851)
!5853 = !DILocation(line: 2846, column: 7, scope: !5851)
!5854 = !DILocation(line: 2849, column: 20, scope: !5855)
!5855 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 2847, column: 2)
!5856 = !DILocation(line: 2849, column: 4, scope: !5855)
!5857 = !DILocation(line: 2850, column: 4, scope: !5855)
!5858 = !DILocation(line: 2853, column: 11, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5855, file: !3, line: 2853, column: 4)
!5860 = !DILocation(line: 2853, column: 9, scope: !5859)
!5861 = !DILocation(line: 2853, column: 16, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 2853, column: 4)
!5863 = !DILocation(line: 2853, column: 20, scope: !5862)
!5864 = !DILocation(line: 2853, column: 18, scope: !5862)
!5865 = !DILocation(line: 2853, column: 4, scope: !5859)
!5866 = !DILocation(line: 2854, column: 22, scope: !5862)
!5867 = !DILocation(line: 2854, column: 6, scope: !5862)
!5868 = !DILocation(line: 2853, column: 37, scope: !5862)
!5869 = !DILocation(line: 2853, column: 4, scope: !5862)
!5870 = distinct !{!5870, !5865, !5871}
!5871 = !DILocation(line: 2854, column: 39, scope: !5859)
!5872 = !DILocation(line: 2855, column: 4, scope: !5855)
!5873 = !DILocation(line: 2857, column: 5, scope: !5851)
!5874 = !DILocation(line: 2844, column: 43, scope: !5846)
!5875 = !DILocation(line: 2844, column: 3, scope: !5846)
!5876 = distinct !{!5876, !5849, !5877}
!5877 = !DILocation(line: 2857, column: 5, scope: !5843)
!5878 = !DILocation(line: 2858, column: 1, scope: !5814)
!5879 = distinct !DISubprogram(name: "unshare_all_rtl_1", scope: !3, file: !3, line: 2327, type: !3725, scopeLine: 2328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5880 = !DILocalVariable(name: "insn", arg: 1, scope: !5879, file: !3, line: 2327, type: !1125)
!5881 = !DILocation(line: 2327, column: 24, scope: !5879)
!5882 = !DILocation(line: 2330, column: 29, scope: !5879)
!5883 = !DILocation(line: 2330, column: 3, scope: !5879)
!5884 = !DILocation(line: 2339, column: 41, scope: !5879)
!5885 = !DILocation(line: 2339, column: 21, scope: !5879)
!5886 = !DILocation(line: 2339, column: 19, scope: !5879)
!5887 = !DILocation(line: 2340, column: 1, scope: !5879)
!5888 = distinct !DISubprogram(name: "unshare_all_rtl", scope: !3, file: !3, line: 2372, type: !2206, scopeLine: 2373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5889 = !DILocation(line: 2374, column: 22, scope: !5888)
!5890 = !DILocation(line: 2374, column: 3, scope: !5888)
!5891 = !DILocation(line: 2375, column: 3, scope: !5888)
!5892 = distinct !DISubprogram(name: "get_insns", scope: !3, file: !3, line: 2902, type: !5561, scopeLine: 2903, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5893 = !DILocation(line: 2904, column: 10, scope: !5892)
!5894 = !DILocation(line: 2904, column: 3, scope: !5892)
!5895 = distinct !DISubprogram(name: "verify_rtl_sharing", scope: !3, file: !3, line: 2511, type: !5896, scopeLine: 2512, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5896 = !DISubroutineType(types: !5897)
!5897 = !{null}
!5898 = !DILocalVariable(name: "p", scope: !5895, file: !3, line: 2513, type: !1125)
!5899 = !DILocation(line: 2513, column: 7, scope: !5895)
!5900 = !DILocation(line: 2515, column: 12, scope: !5901)
!5901 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2515, column: 3)
!5902 = !DILocation(line: 2515, column: 10, scope: !5901)
!5903 = !DILocation(line: 2515, column: 8, scope: !5901)
!5904 = !DILocation(line: 2515, column: 26, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 2515, column: 3)
!5906 = !DILocation(line: 2515, column: 3, scope: !5901)
!5907 = !DILocation(line: 2516, column: 9, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 2516, column: 9)
!5909 = !DILocation(line: 2516, column: 9, scope: !5905)
!5910 = !DILocation(line: 2518, column: 20, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 2517, column: 7)
!5912 = !DILocation(line: 2518, column: 2, scope: !5911)
!5913 = !DILocation(line: 2519, column: 20, scope: !5911)
!5914 = !DILocation(line: 2519, column: 2, scope: !5911)
!5915 = !DILocation(line: 2520, column: 6, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5911, file: !3, line: 2520, column: 6)
!5917 = !DILocation(line: 2520, column: 29, scope: !5916)
!5918 = !DILocation(line: 2520, column: 6, scope: !5911)
!5919 = !DILocalVariable(name: "i", scope: !5920, file: !3, line: 2522, type: !1149)
!5920 = distinct !DILexicalBlock(scope: !5916, file: !3, line: 2521, column: 4)
!5921 = !DILocation(line: 2522, column: 10, scope: !5920)
!5922 = !DILocalVariable(name: "q", scope: !5920, file: !3, line: 2523, type: !1125)
!5923 = !DILocation(line: 2523, column: 10, scope: !5920)
!5924 = !DILocalVariable(name: "sequence", scope: !5920, file: !3, line: 2523, type: !1125)
!5925 = !DILocation(line: 2523, column: 13, scope: !5920)
!5926 = !DILocation(line: 2523, column: 24, scope: !5920)
!5927 = !DILocation(line: 2525, column: 13, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 2525, column: 6)
!5929 = !DILocation(line: 2525, column: 11, scope: !5928)
!5930 = !DILocation(line: 2525, column: 18, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 2525, column: 6)
!5932 = !DILocation(line: 2525, column: 22, scope: !5931)
!5933 = !DILocation(line: 2525, column: 20, scope: !5931)
!5934 = !DILocation(line: 2525, column: 6, scope: !5928)
!5935 = !DILocation(line: 2527, column: 7, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 2526, column: 8)
!5937 = !DILocation(line: 2527, column: 5, scope: !5936)
!5938 = !DILocation(line: 2528, column: 3, scope: !5936)
!5939 = !DILocation(line: 2529, column: 21, scope: !5936)
!5940 = !DILocation(line: 2529, column: 3, scope: !5936)
!5941 = !DILocation(line: 2530, column: 21, scope: !5936)
!5942 = !DILocation(line: 2530, column: 3, scope: !5936)
!5943 = !DILocation(line: 2531, column: 8, scope: !5936)
!5944 = !DILocation(line: 2525, column: 46, scope: !5931)
!5945 = !DILocation(line: 2525, column: 6, scope: !5931)
!5946 = distinct !{!5946, !5934, !5947}
!5947 = !DILocation(line: 2531, column: 8, scope: !5928)
!5948 = !DILocation(line: 2532, column: 4, scope: !5920)
!5949 = !DILocation(line: 2533, column: 7, scope: !5911)
!5950 = !DILocation(line: 2515, column: 33, scope: !5905)
!5951 = !DILocation(line: 2515, column: 31, scope: !5905)
!5952 = !DILocation(line: 2515, column: 3, scope: !5905)
!5953 = distinct !{!5953, !5906, !5954}
!5954 = !DILocation(line: 2533, column: 7, scope: !5901)
!5955 = !DILocation(line: 2535, column: 12, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2535, column: 3)
!5957 = !DILocation(line: 2535, column: 10, scope: !5956)
!5958 = !DILocation(line: 2535, column: 8, scope: !5956)
!5959 = !DILocation(line: 2535, column: 26, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 2535, column: 3)
!5961 = !DILocation(line: 2535, column: 3, scope: !5956)
!5962 = !DILocation(line: 2536, column: 9, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 2536, column: 9)
!5964 = !DILocation(line: 2536, column: 9, scope: !5960)
!5965 = !DILocation(line: 2538, column: 22, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 2537, column: 7)
!5967 = !DILocation(line: 2538, column: 35, scope: !5966)
!5968 = !DILocation(line: 2538, column: 2, scope: !5966)
!5969 = !DILocation(line: 2539, column: 22, scope: !5966)
!5970 = !DILocation(line: 2539, column: 37, scope: !5966)
!5971 = !DILocation(line: 2539, column: 2, scope: !5966)
!5972 = !DILocation(line: 2540, column: 7, scope: !5966)
!5973 = !DILocation(line: 2535, column: 33, scope: !5960)
!5974 = !DILocation(line: 2535, column: 31, scope: !5960)
!5975 = !DILocation(line: 2535, column: 3, scope: !5960)
!5976 = distinct !{!5976, !5961, !5977}
!5977 = !DILocation(line: 2540, column: 7, scope: !5956)
!5978 = !DILocation(line: 2541, column: 1, scope: !5895)
!5979 = distinct !DISubprogram(name: "verify_rtx_sharing", scope: !3, file: !3, line: 2402, type: !3382, scopeLine: 2403, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!5980 = !DILocalVariable(name: "orig", arg: 1, scope: !5979, file: !3, line: 2402, type: !1125)
!5981 = !DILocation(line: 2402, column: 25, scope: !5979)
!5982 = !DILocalVariable(name: "insn", arg: 2, scope: !5979, file: !3, line: 2402, type: !1125)
!5983 = !DILocation(line: 2402, column: 35, scope: !5979)
!5984 = !DILocalVariable(name: "x", scope: !5979, file: !3, line: 2404, type: !1125)
!5985 = !DILocation(line: 2404, column: 7, scope: !5979)
!5986 = !DILocation(line: 2404, column: 11, scope: !5979)
!5987 = !DILocalVariable(name: "i", scope: !5979, file: !3, line: 2405, type: !1149)
!5988 = !DILocation(line: 2405, column: 7, scope: !5979)
!5989 = !DILocalVariable(name: "code", scope: !5979, file: !3, line: 2406, type: !377)
!5990 = !DILocation(line: 2406, column: 17, scope: !5979)
!5991 = !DILocalVariable(name: "format_ptr", scope: !5979, file: !3, line: 2407, type: !1152)
!5992 = !DILocation(line: 2407, column: 15, scope: !5979)
!5993 = !DILocation(line: 2409, column: 7, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 2409, column: 7)
!5995 = !DILocation(line: 2409, column: 9, scope: !5994)
!5996 = !DILocation(line: 2409, column: 7, scope: !5979)
!5997 = !DILocation(line: 2410, column: 5, scope: !5994)
!5998 = !DILocation(line: 2412, column: 10, scope: !5979)
!5999 = !DILocation(line: 2412, column: 8, scope: !5979)
!6000 = !DILocation(line: 2416, column: 11, scope: !5979)
!6001 = !DILocation(line: 2416, column: 3, scope: !5979)
!6002 = !DILocation(line: 2431, column: 7, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 2417, column: 5)
!6004 = !DILocation(line: 2434, column: 11, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2434, column: 11)
!6006 = !DILocation(line: 2434, column: 31, scope: !6005)
!6007 = !DILocation(line: 2434, column: 34, scope: !6005)
!6008 = !DILocation(line: 2434, column: 54, scope: !6005)
!6009 = !DILocation(line: 2434, column: 11, scope: !6003)
!6010 = !DILocation(line: 2435, column: 2, scope: !6005)
!6011 = !DILocation(line: 2436, column: 7, scope: !6003)
!6012 = !DILocation(line: 2439, column: 27, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2439, column: 11)
!6014 = !DILocation(line: 2439, column: 11, scope: !6013)
!6015 = !DILocation(line: 2439, column: 11, scope: !6003)
!6016 = !DILocation(line: 2440, column: 2, scope: !6013)
!6017 = !DILocation(line: 2441, column: 7, scope: !6003)
!6018 = !DILocation(line: 2445, column: 11, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2445, column: 11)
!6020 = !DILocation(line: 2446, column: 4, scope: !6019)
!6021 = !DILocation(line: 2446, column: 7, scope: !6019)
!6022 = !DILocation(line: 2446, column: 24, scope: !6019)
!6023 = !DILocation(line: 2446, column: 27, scope: !6019)
!6024 = !DILocation(line: 2445, column: 11, scope: !6003)
!6025 = !DILocation(line: 2447, column: 2, scope: !6019)
!6026 = !DILocation(line: 2449, column: 7, scope: !6003)
!6027 = !DILocation(line: 2452, column: 7, scope: !6003)
!6028 = !DILocation(line: 2467, column: 3, scope: !5979)
!6029 = !DILocation(line: 2469, column: 3, scope: !5979)
!6030 = !DILocation(line: 2469, column: 22, scope: !5979)
!6031 = !DILocation(line: 2473, column: 16, scope: !5979)
!6032 = !DILocation(line: 2473, column: 14, scope: !5979)
!6033 = !DILocation(line: 2475, column: 10, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 2475, column: 3)
!6035 = !DILocation(line: 2475, column: 8, scope: !6034)
!6036 = !DILocation(line: 2475, column: 15, scope: !6037)
!6037 = distinct !DILexicalBlock(scope: !6034, file: !3, line: 2475, column: 3)
!6038 = !DILocation(line: 2475, column: 19, scope: !6037)
!6039 = !DILocation(line: 2475, column: 17, scope: !6037)
!6040 = !DILocation(line: 2475, column: 3, scope: !6034)
!6041 = !DILocation(line: 2477, column: 26, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 2476, column: 5)
!6043 = !DILocation(line: 2477, column: 15, scope: !6042)
!6044 = !DILocation(line: 2477, column: 7, scope: !6042)
!6045 = !DILocation(line: 2480, column: 24, scope: !6046)
!6046 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 2478, column: 2)
!6047 = !DILocation(line: 2480, column: 37, scope: !6046)
!6048 = !DILocation(line: 2480, column: 4, scope: !6046)
!6049 = !DILocation(line: 2481, column: 4, scope: !6046)
!6050 = !DILocation(line: 2484, column: 8, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6046, file: !3, line: 2484, column: 8)
!6052 = !DILocation(line: 2484, column: 20, scope: !6051)
!6053 = !DILocation(line: 2484, column: 8, scope: !6046)
!6054 = !DILocalVariable(name: "j", scope: !6055, file: !3, line: 2486, type: !1149)
!6055 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 2485, column: 6)
!6056 = !DILocation(line: 2486, column: 12, scope: !6055)
!6057 = !DILocalVariable(name: "len", scope: !6055, file: !3, line: 2487, type: !1149)
!6058 = !DILocation(line: 2487, column: 12, scope: !6055)
!6059 = !DILocation(line: 2487, column: 18, scope: !6055)
!6060 = !DILocation(line: 2489, column: 15, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6055, file: !3, line: 2489, column: 8)
!6062 = !DILocation(line: 2489, column: 13, scope: !6061)
!6063 = !DILocation(line: 2489, column: 20, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 2489, column: 8)
!6065 = !DILocation(line: 2489, column: 24, scope: !6064)
!6066 = !DILocation(line: 2489, column: 22, scope: !6064)
!6067 = !DILocation(line: 2489, column: 8, scope: !6061)
!6068 = !DILocation(line: 2493, column: 9, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 2493, column: 9)
!6070 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 2490, column: 3)
!6071 = !DILocation(line: 2493, column: 11, scope: !6069)
!6072 = !DILocation(line: 2493, column: 14, scope: !6069)
!6073 = !DILocation(line: 2493, column: 43, scope: !6069)
!6074 = !DILocation(line: 2494, column: 9, scope: !6069)
!6075 = !DILocation(line: 2494, column: 13, scope: !6069)
!6076 = !DILocation(line: 2495, column: 6, scope: !6069)
!6077 = !DILocation(line: 2493, column: 9, scope: !6070)
!6078 = !DILocation(line: 2496, column: 27, scope: !6069)
!6079 = !DILocation(line: 2496, column: 57, scope: !6069)
!6080 = !DILocation(line: 2496, column: 7, scope: !6069)
!6081 = !DILocation(line: 2498, column: 27, scope: !6069)
!6082 = !DILocation(line: 2498, column: 46, scope: !6069)
!6083 = !DILocation(line: 2498, column: 7, scope: !6069)
!6084 = !DILocation(line: 2499, column: 3, scope: !6070)
!6085 = !DILocation(line: 2489, column: 30, scope: !6064)
!6086 = !DILocation(line: 2489, column: 8, scope: !6064)
!6087 = distinct !{!6087, !6067, !6088}
!6088 = !DILocation(line: 2499, column: 3, scope: !6061)
!6089 = !DILocation(line: 2500, column: 6, scope: !6055)
!6090 = !DILocation(line: 2501, column: 4, scope: !6046)
!6091 = !DILocation(line: 2503, column: 5, scope: !6042)
!6092 = !DILocation(line: 2475, column: 43, scope: !6037)
!6093 = !DILocation(line: 2475, column: 3, scope: !6037)
!6094 = distinct !{!6094, !6040, !6095}
!6095 = !DILocation(line: 2503, column: 5, scope: !6034)
!6096 = !DILocation(line: 2504, column: 3, scope: !5979)
!6097 = !DILocation(line: 2505, column: 1, scope: !5979)
!6098 = distinct !DISubprogram(name: "unshare_all_rtl_in_chain", scope: !3, file: !3, line: 2547, type: !3725, scopeLine: 2548, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6099 = !DILocalVariable(name: "insn", arg: 1, scope: !6098, file: !3, line: 2547, type: !1125)
!6100 = !DILocation(line: 2547, column: 31, scope: !6098)
!6101 = !DILocation(line: 2549, column: 3, scope: !6098)
!6102 = !DILocation(line: 2549, column: 10, scope: !6103)
!6103 = distinct !DILexicalBlock(scope: !6104, file: !3, line: 2549, column: 3)
!6104 = distinct !DILexicalBlock(scope: !6098, file: !3, line: 2549, column: 3)
!6105 = !DILocation(line: 2549, column: 3, scope: !6104)
!6106 = !DILocation(line: 2550, column: 9, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6103, file: !3, line: 2550, column: 9)
!6108 = !DILocation(line: 2550, column: 9, scope: !6103)
!6109 = !DILocation(line: 2552, column: 39, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6107, file: !3, line: 2551, column: 7)
!6111 = !DILocation(line: 2552, column: 19, scope: !6110)
!6112 = !DILocation(line: 2552, column: 2, scope: !6110)
!6113 = !DILocation(line: 2552, column: 17, scope: !6110)
!6114 = !DILocation(line: 2553, column: 41, scope: !6110)
!6115 = !DILocation(line: 2553, column: 21, scope: !6110)
!6116 = !DILocation(line: 2553, column: 2, scope: !6110)
!6117 = !DILocation(line: 2553, column: 19, scope: !6110)
!6118 = !DILocation(line: 2554, column: 7, scope: !6110)
!6119 = !DILocation(line: 2549, column: 23, scope: !6103)
!6120 = !DILocation(line: 2549, column: 21, scope: !6103)
!6121 = !DILocation(line: 2549, column: 3, scope: !6103)
!6122 = distinct !{!6122, !6105, !6123}
!6123 = !DILocation(line: 2554, column: 7, scope: !6104)
!6124 = !DILocation(line: 2555, column: 1, scope: !6098)
!6125 = distinct !DISubprogram(name: "copy_rtx_if_shared", scope: !3, file: !3, line: 2587, type: !2610, scopeLine: 2588, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6126 = !DILocalVariable(name: "orig", arg: 1, scope: !6125, file: !3, line: 2587, type: !1125)
!6127 = !DILocation(line: 2587, column: 25, scope: !6125)
!6128 = !DILocation(line: 2589, column: 3, scope: !6125)
!6129 = !DILocation(line: 2590, column: 10, scope: !6125)
!6130 = !DILocation(line: 2590, column: 3, scope: !6125)
!6131 = distinct !DISubprogram(name: "copy_rtx_if_shared_1", scope: !3, file: !3, line: 2597, type: !6132, scopeLine: 2598, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6132 = !DISubroutineType(types: !6133)
!6133 = !{null, !2170}
!6134 = !DILocalVariable(name: "orig1", arg: 1, scope: !6131, file: !3, line: 2597, type: !2170)
!6135 = !DILocation(line: 2597, column: 28, scope: !6131)
!6136 = !DILocalVariable(name: "x", scope: !6131, file: !3, line: 2599, type: !1125)
!6137 = !DILocation(line: 2599, column: 7, scope: !6131)
!6138 = !DILocalVariable(name: "i", scope: !6131, file: !3, line: 2600, type: !1149)
!6139 = !DILocation(line: 2600, column: 7, scope: !6131)
!6140 = !DILocalVariable(name: "code", scope: !6131, file: !3, line: 2601, type: !377)
!6141 = !DILocation(line: 2601, column: 17, scope: !6131)
!6142 = !DILocalVariable(name: "last_ptr", scope: !6131, file: !3, line: 2602, type: !2170)
!6143 = !DILocation(line: 2602, column: 8, scope: !6131)
!6144 = !DILocalVariable(name: "format_ptr", scope: !6131, file: !3, line: 2603, type: !1152)
!6145 = !DILocation(line: 2603, column: 15, scope: !6131)
!6146 = !DILocalVariable(name: "copied", scope: !6131, file: !3, line: 2604, type: !1149)
!6147 = !DILocation(line: 2604, column: 7, scope: !6131)
!6148 = !DILocalVariable(name: "length", scope: !6131, file: !3, line: 2605, type: !1149)
!6149 = !DILocation(line: 2605, column: 7, scope: !6131)
!6150 = !DILocation(line: 2605, column: 3, scope: !6131)
!6151 = !DILabel(scope: !6131, name: "repeat", file: !3, line: 2608)
!6152 = !DILocation(line: 2608, column: 1, scope: !6131)
!6153 = !DILocation(line: 2609, column: 8, scope: !6131)
!6154 = !DILocation(line: 2609, column: 7, scope: !6131)
!6155 = !DILocation(line: 2609, column: 5, scope: !6131)
!6156 = !DILocation(line: 2611, column: 7, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2611, column: 7)
!6158 = !DILocation(line: 2611, column: 9, scope: !6157)
!6159 = !DILocation(line: 2611, column: 7, scope: !6131)
!6160 = !DILocation(line: 2612, column: 5, scope: !6157)
!6161 = !DILocation(line: 2614, column: 10, scope: !6131)
!6162 = !DILocation(line: 2614, column: 8, scope: !6131)
!6163 = !DILocation(line: 2618, column: 11, scope: !6131)
!6164 = !DILocation(line: 2618, column: 3, scope: !6131)
!6165 = !DILocation(line: 2634, column: 7, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2619, column: 5)
!6167 = !DILocation(line: 2636, column: 11, scope: !6168)
!6168 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 2636, column: 11)
!6169 = !DILocation(line: 2636, column: 31, scope: !6168)
!6170 = !DILocation(line: 2636, column: 34, scope: !6168)
!6171 = !DILocation(line: 2636, column: 54, scope: !6168)
!6172 = !DILocation(line: 2636, column: 11, scope: !6166)
!6173 = !DILocation(line: 2637, column: 2, scope: !6168)
!6174 = !DILocation(line: 2638, column: 7, scope: !6166)
!6175 = !DILocation(line: 2641, column: 27, scope: !6176)
!6176 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 2641, column: 11)
!6177 = !DILocation(line: 2641, column: 11, scope: !6176)
!6178 = !DILocation(line: 2641, column: 11, scope: !6166)
!6179 = !DILocation(line: 2642, column: 2, scope: !6176)
!6180 = !DILocation(line: 2643, column: 7, scope: !6166)
!6181 = !DILocation(line: 2652, column: 7, scope: !6166)
!6182 = !DILocation(line: 2655, column: 7, scope: !6166)
!6183 = !DILocation(line: 2661, column: 7, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2661, column: 7)
!6185 = !DILocation(line: 2661, column: 7, scope: !6131)
!6186 = !DILocation(line: 2663, column: 11, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 2662, column: 5)
!6188 = !DILocation(line: 2663, column: 9, scope: !6187)
!6189 = !DILocation(line: 2664, column: 14, scope: !6187)
!6190 = !DILocation(line: 2665, column: 5, scope: !6187)
!6191 = !DILocation(line: 2666, column: 3, scope: !6131)
!6192 = !DILocation(line: 2666, column: 22, scope: !6131)
!6193 = !DILocation(line: 2673, column: 16, scope: !6131)
!6194 = !DILocation(line: 2673, column: 14, scope: !6131)
!6195 = !DILocation(line: 2674, column: 12, scope: !6131)
!6196 = !DILocation(line: 2674, column: 10, scope: !6131)
!6197 = !DILocation(line: 2675, column: 12, scope: !6131)
!6198 = !DILocation(line: 2677, column: 10, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2677, column: 3)
!6200 = !DILocation(line: 2677, column: 8, scope: !6199)
!6201 = !DILocation(line: 2677, column: 15, scope: !6202)
!6202 = distinct !DILexicalBlock(scope: !6199, file: !3, line: 2677, column: 3)
!6203 = !DILocation(line: 2677, column: 19, scope: !6202)
!6204 = !DILocation(line: 2677, column: 17, scope: !6202)
!6205 = !DILocation(line: 2677, column: 3, scope: !6199)
!6206 = !DILocation(line: 2679, column: 26, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6202, file: !3, line: 2678, column: 5)
!6208 = !DILocation(line: 2679, column: 15, scope: !6207)
!6209 = !DILocation(line: 2679, column: 7, scope: !6207)
!6210 = !DILocation(line: 2682, column: 15, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 2682, column: 15)
!6212 = distinct !DILexicalBlock(scope: !6207, file: !3, line: 2680, column: 2)
!6213 = !DILocation(line: 2682, column: 15, scope: !6212)
!6214 = !DILocation(line: 2683, column: 35, scope: !6211)
!6215 = !DILocation(line: 2683, column: 13, scope: !6211)
!6216 = !DILocation(line: 2684, column: 16, scope: !6212)
!6217 = !DILocation(line: 2684, column: 13, scope: !6212)
!6218 = !DILocation(line: 2685, column: 4, scope: !6212)
!6219 = !DILocation(line: 2688, column: 8, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 2688, column: 8)
!6221 = !DILocation(line: 2688, column: 20, scope: !6220)
!6222 = !DILocation(line: 2688, column: 8, scope: !6212)
!6223 = !DILocalVariable(name: "j", scope: !6224, file: !3, line: 2690, type: !1149)
!6224 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 2689, column: 6)
!6225 = !DILocation(line: 2690, column: 12, scope: !6224)
!6226 = !DILocalVariable(name: "len", scope: !6224, file: !3, line: 2691, type: !1149)
!6227 = !DILocation(line: 2691, column: 12, scope: !6224)
!6228 = !DILocation(line: 2691, column: 18, scope: !6224)
!6229 = !DILocation(line: 2695, column: 12, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 2695, column: 12)
!6231 = !DILocation(line: 2695, column: 19, scope: !6230)
!6232 = !DILocation(line: 2695, column: 22, scope: !6230)
!6233 = !DILocation(line: 2695, column: 26, scope: !6230)
!6234 = !DILocation(line: 2695, column: 12, scope: !6224)
!6235 = !DILocation(line: 2696, column: 30, scope: !6230)
!6236 = !DILocation(line: 2696, column: 35, scope: !6230)
!6237 = !DILocation(line: 2696, column: 48, scope: !6230)
!6238 = !DILocation(line: 2696, column: 17, scope: !6230)
!6239 = !DILocation(line: 2696, column: 3, scope: !6230)
!6240 = !DILocation(line: 2696, column: 15, scope: !6230)
!6241 = !DILocation(line: 2699, column: 15, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 2699, column: 8)
!6243 = !DILocation(line: 2699, column: 13, scope: !6242)
!6244 = !DILocation(line: 2699, column: 20, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6242, file: !3, line: 2699, column: 8)
!6246 = !DILocation(line: 2699, column: 24, scope: !6245)
!6247 = !DILocation(line: 2699, column: 22, scope: !6245)
!6248 = !DILocation(line: 2699, column: 8, scope: !6242)
!6249 = !DILocation(line: 2701, column: 9, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 2701, column: 9)
!6251 = distinct !DILexicalBlock(scope: !6245, file: !3, line: 2700, column: 17)
!6252 = !DILocation(line: 2701, column: 9, scope: !6251)
!6253 = !DILocation(line: 2702, column: 29, scope: !6250)
!6254 = !DILocation(line: 2702, column: 7, scope: !6250)
!6255 = !DILocation(line: 2703, column: 31, scope: !6251)
!6256 = !DILocation(line: 2703, column: 28, scope: !6251)
!6257 = !DILocation(line: 2704, column: 17, scope: !6251)
!6258 = !DILocation(line: 2699, column: 30, scope: !6245)
!6259 = !DILocation(line: 2699, column: 8, scope: !6245)
!6260 = distinct !{!6260, !6248, !6261}
!6261 = !DILocation(line: 2704, column: 17, scope: !6242)
!6262 = !DILocation(line: 2705, column: 6, scope: !6224)
!6263 = !DILocation(line: 2706, column: 4, scope: !6212)
!6264 = !DILocation(line: 2708, column: 5, scope: !6207)
!6265 = !DILocation(line: 2677, column: 28, scope: !6202)
!6266 = !DILocation(line: 2677, column: 3, scope: !6202)
!6267 = distinct !{!6267, !6205, !6268}
!6268 = !DILocation(line: 2708, column: 5, scope: !6199)
!6269 = !DILocation(line: 2709, column: 12, scope: !6131)
!6270 = !DILocation(line: 2709, column: 4, scope: !6131)
!6271 = !DILocation(line: 2709, column: 10, scope: !6131)
!6272 = !DILocation(line: 2710, column: 7, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2710, column: 7)
!6274 = !DILocation(line: 2710, column: 7, scope: !6131)
!6275 = !DILocation(line: 2712, column: 15, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 2711, column: 5)
!6277 = !DILocation(line: 2712, column: 13, scope: !6276)
!6278 = !DILocation(line: 2713, column: 7, scope: !6276)
!6279 = !DILocation(line: 2715, column: 3, scope: !6131)
!6280 = !DILocation(line: 2716, column: 1, scope: !6131)
!6281 = distinct !DISubprogram(name: "make_safe_from", scope: !3, file: !3, line: 2865, type: !4222, scopeLine: 2866, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6282 = !DILocalVariable(name: "x", arg: 1, scope: !6281, file: !3, line: 2865, type: !1125)
!6283 = !DILocation(line: 2865, column: 21, scope: !6281)
!6284 = !DILocalVariable(name: "other", arg: 2, scope: !6281, file: !3, line: 2865, type: !1125)
!6285 = !DILocation(line: 2865, column: 28, scope: !6281)
!6286 = !DILocation(line: 2867, column: 3, scope: !6281)
!6287 = !DILocation(line: 2868, column: 13, scope: !6281)
!6288 = !DILocation(line: 2868, column: 5, scope: !6281)
!6289 = !DILocation(line: 2871, column: 10, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 2869, column: 7)
!6291 = !DILocation(line: 2871, column: 8, scope: !6290)
!6292 = !DILocation(line: 2872, column: 2, scope: !6290)
!6293 = !DILocation(line: 2876, column: 10, scope: !6290)
!6294 = !DILocation(line: 2876, column: 8, scope: !6290)
!6295 = !DILocation(line: 2877, column: 2, scope: !6290)
!6296 = !DILocation(line: 2879, column: 2, scope: !6290)
!6297 = distinct !{!6297, !6286, !6298}
!6298 = !DILocation(line: 2880, column: 7, scope: !6281)
!6299 = !DILabel(scope: !6281, name: "done", file: !3, line: 2881)
!6300 = !DILocation(line: 2881, column: 2, scope: !6281)
!6301 = !DILocation(line: 2882, column: 8, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 2882, column: 7)
!6303 = !DILocation(line: 2883, column: 8, scope: !6302)
!6304 = !DILocation(line: 2883, column: 13, scope: !6302)
!6305 = !DILocation(line: 2884, column: 8, scope: !6302)
!6306 = !DILocation(line: 2884, column: 12, scope: !6302)
!6307 = !DILocation(line: 2885, column: 8, scope: !6302)
!6308 = !DILocation(line: 2885, column: 11, scope: !6302)
!6309 = !DILocation(line: 2885, column: 24, scope: !6302)
!6310 = !DILocation(line: 2886, column: 7, scope: !6302)
!6311 = !DILocation(line: 2886, column: 11, scope: !6302)
!6312 = !DILocation(line: 2887, column: 4, scope: !6302)
!6313 = !DILocation(line: 2887, column: 8, scope: !6302)
!6314 = !DILocation(line: 2887, column: 22, scope: !6302)
!6315 = !DILocation(line: 2888, column: 8, scope: !6302)
!6316 = !DILocation(line: 2888, column: 28, scope: !6302)
!6317 = !DILocation(line: 2888, column: 35, scope: !6302)
!6318 = !DILocation(line: 2888, column: 11, scope: !6302)
!6319 = !DILocation(line: 2882, column: 7, scope: !6281)
!6320 = !DILocalVariable(name: "temp", scope: !6321, file: !3, line: 2890, type: !1125)
!6321 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 2889, column: 5)
!6322 = !DILocation(line: 2890, column: 11, scope: !6321)
!6323 = !DILocation(line: 2890, column: 31, scope: !6321)
!6324 = !DILocation(line: 2890, column: 18, scope: !6321)
!6325 = !DILocation(line: 2891, column: 23, scope: !6321)
!6326 = !DILocation(line: 2891, column: 29, scope: !6321)
!6327 = !DILocation(line: 2891, column: 7, scope: !6321)
!6328 = !DILocation(line: 2892, column: 14, scope: !6321)
!6329 = !DILocation(line: 2892, column: 7, scope: !6321)
!6330 = !DILocation(line: 2894, column: 10, scope: !6281)
!6331 = !DILocation(line: 2894, column: 3, scope: !6281)
!6332 = !DILocation(line: 2895, column: 1, scope: !6281)
!6333 = distinct !DISubprogram(name: "set_first_insn", scope: !3, file: !3, line: 2910, type: !3725, scopeLine: 2911, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6334 = !DILocalVariable(name: "insn", arg: 1, scope: !6333, file: !3, line: 2910, type: !1125)
!6335 = !DILocation(line: 2910, column: 21, scope: !6333)
!6336 = !DILocation(line: 2912, column: 3, scope: !6333)
!6337 = !DILocation(line: 2913, column: 16, scope: !6333)
!6338 = !DILocation(line: 2913, column: 14, scope: !6333)
!6339 = !DILocation(line: 2914, column: 1, scope: !6333)
!6340 = distinct !DISubprogram(name: "get_last_insn", scope: !3, file: !3, line: 2919, type: !5561, scopeLine: 2920, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6341 = !DILocation(line: 2921, column: 10, scope: !6340)
!6342 = !DILocation(line: 2921, column: 3, scope: !6340)
!6343 = distinct !DISubprogram(name: "set_last_insn", scope: !3, file: !3, line: 2927, type: !3725, scopeLine: 2928, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6344 = !DILocalVariable(name: "insn", arg: 1, scope: !6343, file: !3, line: 2927, type: !1125)
!6345 = !DILocation(line: 2927, column: 20, scope: !6343)
!6346 = !DILocation(line: 2929, column: 3, scope: !6343)
!6347 = !DILocation(line: 2930, column: 15, scope: !6343)
!6348 = !DILocation(line: 2930, column: 13, scope: !6343)
!6349 = !DILocation(line: 2931, column: 1, scope: !6343)
!6350 = distinct !DISubprogram(name: "get_last_insn_anywhere", scope: !3, file: !3, line: 2936, type: !5561, scopeLine: 2937, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6351 = !DILocalVariable(name: "stack", scope: !6350, file: !3, line: 2938, type: !2171)
!6352 = !DILocation(line: 2938, column: 26, scope: !6350)
!6353 = !DILocation(line: 2939, column: 7, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 2939, column: 7)
!6355 = !DILocation(line: 2939, column: 7, scope: !6350)
!6356 = !DILocation(line: 2940, column: 12, scope: !6354)
!6357 = !DILocation(line: 2940, column: 5, scope: !6354)
!6358 = !DILocation(line: 2941, column: 16, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 2941, column: 3)
!6360 = !DILocation(line: 2941, column: 14, scope: !6359)
!6361 = !DILocation(line: 2941, column: 8, scope: !6359)
!6362 = !DILocation(line: 2941, column: 27, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 2941, column: 3)
!6364 = !DILocation(line: 2941, column: 3, scope: !6359)
!6365 = !DILocation(line: 2942, column: 9, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !6363, file: !3, line: 2942, column: 9)
!6367 = !DILocation(line: 2942, column: 16, scope: !6366)
!6368 = !DILocation(line: 2942, column: 21, scope: !6366)
!6369 = !DILocation(line: 2942, column: 9, scope: !6363)
!6370 = !DILocation(line: 2943, column: 14, scope: !6366)
!6371 = !DILocation(line: 2943, column: 21, scope: !6366)
!6372 = !DILocation(line: 2943, column: 7, scope: !6366)
!6373 = !DILocation(line: 2942, column: 24, scope: !6366)
!6374 = !DILocation(line: 2941, column: 42, scope: !6363)
!6375 = !DILocation(line: 2941, column: 49, scope: !6363)
!6376 = !DILocation(line: 2941, column: 40, scope: !6363)
!6377 = !DILocation(line: 2941, column: 3, scope: !6363)
!6378 = distinct !{!6378, !6364, !6379}
!6379 = !DILocation(line: 2943, column: 21, scope: !6359)
!6380 = !DILocation(line: 2944, column: 3, scope: !6350)
!6381 = !DILocation(line: 2945, column: 1, scope: !6350)
!6382 = distinct !DISubprogram(name: "get_first_nonnote_insn", scope: !3, file: !3, line: 2951, type: !5561, scopeLine: 2952, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6383 = !DILocalVariable(name: "insn", scope: !6382, file: !3, line: 2953, type: !1125)
!6384 = !DILocation(line: 2953, column: 7, scope: !6382)
!6385 = !DILocation(line: 2953, column: 14, scope: !6382)
!6386 = !DILocation(line: 2955, column: 7, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 2955, column: 7)
!6388 = !DILocation(line: 2955, column: 7, scope: !6382)
!6389 = !DILocation(line: 2957, column: 11, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6391, file: !3, line: 2957, column: 11)
!6391 = distinct !DILexicalBlock(scope: !6387, file: !3, line: 2956, column: 5)
!6392 = !DILocation(line: 2957, column: 11, scope: !6391)
!6393 = !DILocation(line: 2958, column: 25, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 2958, column: 2)
!6395 = !DILocation(line: 2958, column: 14, scope: !6394)
!6396 = !DILocation(line: 2958, column: 12, scope: !6394)
!6397 = !DILocation(line: 2958, column: 7, scope: !6394)
!6398 = !DILocation(line: 2959, column: 7, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 2958, column: 2)
!6400 = !DILocation(line: 2959, column: 12, scope: !6399)
!6401 = !DILocation(line: 2959, column: 15, scope: !6399)
!6402 = !DILocation(line: 0, scope: !6399)
!6403 = !DILocation(line: 2958, column: 2, scope: !6394)
!6404 = !DILocation(line: 2961, column: 4, scope: !6399)
!6405 = !DILocation(line: 2960, column: 25, scope: !6399)
!6406 = !DILocation(line: 2960, column: 14, scope: !6399)
!6407 = !DILocation(line: 2960, column: 12, scope: !6399)
!6408 = !DILocation(line: 2958, column: 2, scope: !6399)
!6409 = distinct !{!6409, !6403, !6410}
!6410 = !DILocation(line: 2961, column: 4, scope: !6394)
!6411 = !DILocation(line: 2964, column: 8, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 2964, column: 8)
!6413 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 2963, column: 2)
!6414 = !DILocation(line: 2965, column: 8, scope: !6412)
!6415 = !DILocation(line: 2965, column: 11, scope: !6412)
!6416 = !DILocation(line: 2965, column: 37, scope: !6412)
!6417 = !DILocation(line: 2964, column: 8, scope: !6413)
!6418 = !DILocation(line: 2966, column: 13, scope: !6412)
!6419 = !DILocation(line: 2966, column: 11, scope: !6412)
!6420 = !DILocation(line: 2966, column: 6, scope: !6412)
!6421 = !DILocation(line: 2968, column: 5, scope: !6391)
!6422 = !DILocation(line: 2970, column: 10, scope: !6382)
!6423 = !DILocation(line: 2970, column: 3, scope: !6382)
!6424 = distinct !DISubprogram(name: "next_insn", scope: !3, file: !3, line: 3033, type: !2610, scopeLine: 3034, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6425 = !DILocalVariable(name: "insn", arg: 1, scope: !6424, file: !3, line: 3033, type: !1125)
!6426 = !DILocation(line: 3033, column: 16, scope: !6424)
!6427 = !DILocation(line: 3035, column: 7, scope: !6428)
!6428 = distinct !DILexicalBlock(scope: !6424, file: !3, line: 3035, column: 7)
!6429 = !DILocation(line: 3035, column: 7, scope: !6424)
!6430 = !DILocation(line: 3037, column: 14, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 3036, column: 5)
!6432 = !DILocation(line: 3037, column: 12, scope: !6431)
!6433 = !DILocation(line: 3038, column: 11, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 3038, column: 11)
!6435 = !DILocation(line: 3038, column: 16, scope: !6434)
!6436 = !DILocation(line: 3038, column: 19, scope: !6434)
!6437 = !DILocation(line: 3039, column: 4, scope: !6434)
!6438 = !DILocation(line: 3039, column: 7, scope: !6434)
!6439 = !DILocation(line: 3039, column: 33, scope: !6434)
!6440 = !DILocation(line: 3038, column: 11, scope: !6431)
!6441 = !DILocation(line: 3040, column: 9, scope: !6434)
!6442 = !DILocation(line: 3040, column: 7, scope: !6434)
!6443 = !DILocation(line: 3040, column: 2, scope: !6434)
!6444 = !DILocation(line: 3041, column: 5, scope: !6431)
!6445 = !DILocation(line: 3043, column: 10, scope: !6424)
!6446 = !DILocation(line: 3043, column: 3, scope: !6424)
!6447 = distinct !DISubprogram(name: "get_last_nonnote_insn", scope: !3, file: !3, line: 2977, type: !5561, scopeLine: 2978, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6448 = !DILocalVariable(name: "insn", scope: !6447, file: !3, line: 2979, type: !1125)
!6449 = !DILocation(line: 2979, column: 7, scope: !6447)
!6450 = !DILocation(line: 2979, column: 14, scope: !6447)
!6451 = !DILocation(line: 2981, column: 7, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6447, file: !3, line: 2981, column: 7)
!6453 = !DILocation(line: 2981, column: 7, scope: !6447)
!6454 = !DILocation(line: 2983, column: 11, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6456, file: !3, line: 2983, column: 11)
!6456 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 2982, column: 5)
!6457 = !DILocation(line: 2983, column: 11, scope: !6456)
!6458 = !DILocation(line: 2984, column: 29, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 2984, column: 2)
!6460 = !DILocation(line: 2984, column: 14, scope: !6459)
!6461 = !DILocation(line: 2984, column: 12, scope: !6459)
!6462 = !DILocation(line: 2984, column: 7, scope: !6459)
!6463 = !DILocation(line: 2985, column: 7, scope: !6464)
!6464 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 2984, column: 2)
!6465 = !DILocation(line: 2985, column: 12, scope: !6464)
!6466 = !DILocation(line: 2985, column: 15, scope: !6464)
!6467 = !DILocation(line: 0, scope: !6464)
!6468 = !DILocation(line: 2984, column: 2, scope: !6459)
!6469 = !DILocation(line: 2987, column: 4, scope: !6464)
!6470 = !DILocation(line: 2986, column: 29, scope: !6464)
!6471 = !DILocation(line: 2986, column: 14, scope: !6464)
!6472 = !DILocation(line: 2986, column: 12, scope: !6464)
!6473 = !DILocation(line: 2984, column: 2, scope: !6464)
!6474 = distinct !{!6474, !6468, !6475}
!6475 = !DILocation(line: 2987, column: 4, scope: !6459)
!6476 = !DILocation(line: 2990, column: 8, scope: !6477)
!6477 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 2990, column: 8)
!6478 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 2989, column: 2)
!6479 = !DILocation(line: 2991, column: 8, scope: !6477)
!6480 = !DILocation(line: 2991, column: 11, scope: !6477)
!6481 = !DILocation(line: 2991, column: 37, scope: !6477)
!6482 = !DILocation(line: 2990, column: 8, scope: !6478)
!6483 = !DILocation(line: 2992, column: 13, scope: !6477)
!6484 = !DILocation(line: 2992, column: 11, scope: !6477)
!6485 = !DILocation(line: 2992, column: 6, scope: !6477)
!6486 = !DILocation(line: 2995, column: 5, scope: !6456)
!6487 = !DILocation(line: 2997, column: 10, scope: !6447)
!6488 = !DILocation(line: 2997, column: 3, scope: !6447)
!6489 = distinct !DISubprogram(name: "previous_insn", scope: !3, file: !3, line: 3050, type: !2610, scopeLine: 3051, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6490 = !DILocalVariable(name: "insn", arg: 1, scope: !6489, file: !3, line: 3050, type: !1125)
!6491 = !DILocation(line: 3050, column: 20, scope: !6489)
!6492 = !DILocation(line: 3052, column: 7, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 3052, column: 7)
!6494 = !DILocation(line: 3052, column: 7, scope: !6489)
!6495 = !DILocation(line: 3054, column: 14, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 3053, column: 5)
!6497 = !DILocation(line: 3054, column: 12, scope: !6496)
!6498 = !DILocation(line: 3055, column: 11, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 3055, column: 11)
!6500 = !DILocation(line: 3055, column: 16, scope: !6499)
!6501 = !DILocation(line: 3055, column: 19, scope: !6499)
!6502 = !DILocation(line: 3056, column: 4, scope: !6499)
!6503 = !DILocation(line: 3056, column: 7, scope: !6499)
!6504 = !DILocation(line: 3056, column: 33, scope: !6499)
!6505 = !DILocation(line: 3055, column: 11, scope: !6496)
!6506 = !DILocation(line: 3057, column: 9, scope: !6499)
!6507 = !DILocation(line: 3057, column: 7, scope: !6499)
!6508 = !DILocation(line: 3057, column: 2, scope: !6499)
!6509 = !DILocation(line: 3058, column: 5, scope: !6496)
!6510 = !DILocation(line: 3060, column: 10, scope: !6489)
!6511 = !DILocation(line: 3060, column: 3, scope: !6489)
!6512 = distinct !DISubprogram(name: "get_max_uid", scope: !3, file: !3, line: 3003, type: !3745, scopeLine: 3004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6513 = !DILocation(line: 3005, column: 10, scope: !6512)
!6514 = !DILocation(line: 3005, column: 3, scope: !6512)
!6515 = distinct !DISubprogram(name: "get_max_insn_count", scope: !3, file: !3, line: 3012, type: !3745, scopeLine: 3013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6516 = !DILocalVariable(name: "n", scope: !6515, file: !3, line: 3014, type: !1149)
!6517 = !DILocation(line: 3014, column: 7, scope: !6515)
!6518 = !DILocation(line: 3014, column: 11, scope: !6515)
!6519 = !DILocation(line: 3020, column: 7, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6515, file: !3, line: 3020, column: 7)
!6521 = !DILocation(line: 3020, column: 28, scope: !6520)
!6522 = !DILocation(line: 3020, column: 26, scope: !6520)
!6523 = !DILocation(line: 3020, column: 7, scope: !6515)
!6524 = !DILocation(line: 3021, column: 10, scope: !6520)
!6525 = !DILocation(line: 3021, column: 7, scope: !6520)
!6526 = !DILocation(line: 3021, column: 5, scope: !6520)
!6527 = !DILocation(line: 3023, column: 10, scope: !6520)
!6528 = !DILocation(line: 3023, column: 7, scope: !6520)
!6529 = !DILocation(line: 3025, column: 10, scope: !6515)
!6530 = !DILocation(line: 3025, column: 3, scope: !6515)
!6531 = distinct !DISubprogram(name: "next_nonnote_insn", scope: !3, file: !3, line: 3067, type: !2610, scopeLine: 3068, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6532 = !DILocalVariable(name: "insn", arg: 1, scope: !6531, file: !3, line: 3067, type: !1125)
!6533 = !DILocation(line: 3067, column: 24, scope: !6531)
!6534 = !DILocation(line: 3069, column: 3, scope: !6531)
!6535 = !DILocation(line: 3069, column: 10, scope: !6531)
!6536 = !DILocation(line: 3071, column: 14, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 3070, column: 5)
!6538 = !DILocation(line: 3071, column: 12, scope: !6537)
!6539 = !DILocation(line: 3072, column: 11, scope: !6540)
!6540 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 3072, column: 11)
!6541 = !DILocation(line: 3072, column: 16, scope: !6540)
!6542 = !DILocation(line: 3072, column: 21, scope: !6540)
!6543 = !DILocation(line: 3072, column: 25, scope: !6540)
!6544 = !DILocation(line: 3072, column: 11, scope: !6537)
!6545 = !DILocation(line: 3073, column: 2, scope: !6540)
!6546 = distinct !{!6546, !6534, !6547}
!6547 = !DILocation(line: 3074, column: 5, scope: !6531)
!6548 = !DILocation(line: 3076, column: 10, scope: !6531)
!6549 = !DILocation(line: 3076, column: 3, scope: !6531)
!6550 = distinct !DISubprogram(name: "next_nonnote_insn_bb", scope: !3, file: !3, line: 3084, type: !2610, scopeLine: 3085, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6551 = !DILocalVariable(name: "insn", arg: 1, scope: !6550, file: !3, line: 3084, type: !1125)
!6552 = !DILocation(line: 3084, column: 27, scope: !6550)
!6553 = !DILocation(line: 3086, column: 3, scope: !6550)
!6554 = !DILocation(line: 3086, column: 10, scope: !6550)
!6555 = !DILocation(line: 3088, column: 14, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6550, file: !3, line: 3087, column: 5)
!6557 = !DILocation(line: 3088, column: 12, scope: !6556)
!6558 = !DILocation(line: 3089, column: 11, scope: !6559)
!6559 = distinct !DILexicalBlock(scope: !6556, file: !3, line: 3089, column: 11)
!6560 = !DILocation(line: 3089, column: 16, scope: !6559)
!6561 = !DILocation(line: 3089, column: 21, scope: !6559)
!6562 = !DILocation(line: 3089, column: 25, scope: !6559)
!6563 = !DILocation(line: 3089, column: 11, scope: !6556)
!6564 = !DILocation(line: 3090, column: 2, scope: !6559)
!6565 = !DILocation(line: 3091, column: 11, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6556, file: !3, line: 3091, column: 11)
!6567 = !DILocation(line: 3091, column: 11, scope: !6556)
!6568 = !DILocation(line: 3092, column: 2, scope: !6566)
!6569 = distinct !{!6569, !6553, !6570}
!6570 = !DILocation(line: 3093, column: 5, scope: !6550)
!6571 = !DILocation(line: 3095, column: 10, scope: !6550)
!6572 = !DILocation(line: 3095, column: 3, scope: !6550)
!6573 = !DILocation(line: 3096, column: 1, scope: !6550)
!6574 = distinct !DISubprogram(name: "prev_nonnote_insn", scope: !3, file: !3, line: 3102, type: !2610, scopeLine: 3103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6575 = !DILocalVariable(name: "insn", arg: 1, scope: !6574, file: !3, line: 3102, type: !1125)
!6576 = !DILocation(line: 3102, column: 24, scope: !6574)
!6577 = !DILocation(line: 3104, column: 3, scope: !6574)
!6578 = !DILocation(line: 3104, column: 10, scope: !6574)
!6579 = !DILocation(line: 3106, column: 14, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 3105, column: 5)
!6581 = !DILocation(line: 3106, column: 12, scope: !6580)
!6582 = !DILocation(line: 3107, column: 11, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 3107, column: 11)
!6584 = !DILocation(line: 3107, column: 16, scope: !6583)
!6585 = !DILocation(line: 3107, column: 21, scope: !6583)
!6586 = !DILocation(line: 3107, column: 25, scope: !6583)
!6587 = !DILocation(line: 3107, column: 11, scope: !6580)
!6588 = !DILocation(line: 3108, column: 2, scope: !6583)
!6589 = distinct !{!6589, !6577, !6590}
!6590 = !DILocation(line: 3109, column: 5, scope: !6574)
!6591 = !DILocation(line: 3111, column: 10, scope: !6574)
!6592 = !DILocation(line: 3111, column: 3, scope: !6574)
!6593 = distinct !DISubprogram(name: "prev_nonnote_insn_bb", scope: !3, file: !3, line: 3119, type: !2610, scopeLine: 3120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6594 = !DILocalVariable(name: "insn", arg: 1, scope: !6593, file: !3, line: 3119, type: !1125)
!6595 = !DILocation(line: 3119, column: 27, scope: !6593)
!6596 = !DILocation(line: 3121, column: 3, scope: !6593)
!6597 = !DILocation(line: 3121, column: 10, scope: !6593)
!6598 = !DILocation(line: 3123, column: 14, scope: !6599)
!6599 = distinct !DILexicalBlock(scope: !6593, file: !3, line: 3122, column: 5)
!6600 = !DILocation(line: 3123, column: 12, scope: !6599)
!6601 = !DILocation(line: 3124, column: 11, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6599, file: !3, line: 3124, column: 11)
!6603 = !DILocation(line: 3124, column: 16, scope: !6602)
!6604 = !DILocation(line: 3124, column: 21, scope: !6602)
!6605 = !DILocation(line: 3124, column: 25, scope: !6602)
!6606 = !DILocation(line: 3124, column: 11, scope: !6599)
!6607 = !DILocation(line: 3125, column: 2, scope: !6602)
!6608 = !DILocation(line: 3126, column: 11, scope: !6609)
!6609 = distinct !DILexicalBlock(scope: !6599, file: !3, line: 3126, column: 11)
!6610 = !DILocation(line: 3126, column: 11, scope: !6599)
!6611 = !DILocation(line: 3127, column: 2, scope: !6609)
!6612 = distinct !{!6612, !6596, !6613}
!6613 = !DILocation(line: 3128, column: 5, scope: !6593)
!6614 = !DILocation(line: 3130, column: 10, scope: !6593)
!6615 = !DILocation(line: 3130, column: 3, scope: !6593)
!6616 = !DILocation(line: 3131, column: 1, scope: !6593)
!6617 = distinct !DISubprogram(name: "next_nondebug_insn", scope: !3, file: !3, line: 3137, type: !2610, scopeLine: 3138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6618 = !DILocalVariable(name: "insn", arg: 1, scope: !6617, file: !3, line: 3137, type: !1125)
!6619 = !DILocation(line: 3137, column: 25, scope: !6617)
!6620 = !DILocation(line: 3139, column: 3, scope: !6617)
!6621 = !DILocation(line: 3139, column: 10, scope: !6617)
!6622 = !DILocation(line: 3141, column: 14, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 3140, column: 5)
!6624 = !DILocation(line: 3141, column: 12, scope: !6623)
!6625 = !DILocation(line: 3142, column: 11, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6623, file: !3, line: 3142, column: 11)
!6627 = !DILocation(line: 3142, column: 16, scope: !6626)
!6628 = !DILocation(line: 3142, column: 21, scope: !6626)
!6629 = !DILocation(line: 3142, column: 25, scope: !6626)
!6630 = !DILocation(line: 3142, column: 11, scope: !6623)
!6631 = !DILocation(line: 3143, column: 2, scope: !6626)
!6632 = distinct !{!6632, !6620, !6633}
!6633 = !DILocation(line: 3144, column: 5, scope: !6617)
!6634 = !DILocation(line: 3146, column: 10, scope: !6617)
!6635 = !DILocation(line: 3146, column: 3, scope: !6617)
!6636 = distinct !DISubprogram(name: "prev_nondebug_insn", scope: !3, file: !3, line: 3153, type: !2610, scopeLine: 3154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6637 = !DILocalVariable(name: "insn", arg: 1, scope: !6636, file: !3, line: 3153, type: !1125)
!6638 = !DILocation(line: 3153, column: 25, scope: !6636)
!6639 = !DILocation(line: 3155, column: 3, scope: !6636)
!6640 = !DILocation(line: 3155, column: 10, scope: !6636)
!6641 = !DILocation(line: 3157, column: 14, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 3156, column: 5)
!6643 = !DILocation(line: 3157, column: 12, scope: !6642)
!6644 = !DILocation(line: 3158, column: 11, scope: !6645)
!6645 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 3158, column: 11)
!6646 = !DILocation(line: 3158, column: 16, scope: !6645)
!6647 = !DILocation(line: 3158, column: 21, scope: !6645)
!6648 = !DILocation(line: 3158, column: 25, scope: !6645)
!6649 = !DILocation(line: 3158, column: 11, scope: !6642)
!6650 = !DILocation(line: 3159, column: 2, scope: !6645)
!6651 = distinct !{!6651, !6639, !6652}
!6652 = !DILocation(line: 3160, column: 5, scope: !6636)
!6653 = !DILocation(line: 3162, column: 10, scope: !6636)
!6654 = !DILocation(line: 3162, column: 3, scope: !6636)
!6655 = distinct !DISubprogram(name: "next_real_insn", scope: !3, file: !3, line: 3170, type: !2610, scopeLine: 3171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6656 = !DILocalVariable(name: "insn", arg: 1, scope: !6655, file: !3, line: 3170, type: !1125)
!6657 = !DILocation(line: 3170, column: 21, scope: !6655)
!6658 = !DILocation(line: 3172, column: 3, scope: !6655)
!6659 = !DILocation(line: 3172, column: 10, scope: !6655)
!6660 = !DILocation(line: 3174, column: 14, scope: !6661)
!6661 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 3173, column: 5)
!6662 = !DILocation(line: 3174, column: 12, scope: !6661)
!6663 = !DILocation(line: 3175, column: 11, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6661, file: !3, line: 3175, column: 11)
!6665 = !DILocation(line: 3175, column: 16, scope: !6664)
!6666 = !DILocation(line: 3175, column: 21, scope: !6664)
!6667 = !DILocation(line: 3175, column: 24, scope: !6664)
!6668 = !DILocation(line: 3175, column: 11, scope: !6661)
!6669 = !DILocation(line: 3176, column: 2, scope: !6664)
!6670 = distinct !{!6670, !6658, !6671}
!6671 = !DILocation(line: 3177, column: 5, scope: !6655)
!6672 = !DILocation(line: 3179, column: 10, scope: !6655)
!6673 = !DILocation(line: 3179, column: 3, scope: !6655)
!6674 = distinct !DISubprogram(name: "prev_real_insn", scope: !3, file: !3, line: 3187, type: !2610, scopeLine: 3188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6675 = !DILocalVariable(name: "insn", arg: 1, scope: !6674, file: !3, line: 3187, type: !1125)
!6676 = !DILocation(line: 3187, column: 21, scope: !6674)
!6677 = !DILocation(line: 3189, column: 3, scope: !6674)
!6678 = !DILocation(line: 3189, column: 10, scope: !6674)
!6679 = !DILocation(line: 3191, column: 14, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 3190, column: 5)
!6681 = !DILocation(line: 3191, column: 12, scope: !6680)
!6682 = !DILocation(line: 3192, column: 11, scope: !6683)
!6683 = distinct !DILexicalBlock(scope: !6680, file: !3, line: 3192, column: 11)
!6684 = !DILocation(line: 3192, column: 16, scope: !6683)
!6685 = !DILocation(line: 3192, column: 21, scope: !6683)
!6686 = !DILocation(line: 3192, column: 24, scope: !6683)
!6687 = !DILocation(line: 3192, column: 11, scope: !6680)
!6688 = !DILocation(line: 3193, column: 2, scope: !6683)
!6689 = distinct !{!6689, !6677, !6690}
!6690 = !DILocation(line: 3194, column: 5, scope: !6674)
!6691 = !DILocation(line: 3196, column: 10, scope: !6674)
!6692 = !DILocation(line: 3196, column: 3, scope: !6674)
!6693 = distinct !DISubprogram(name: "last_call_insn", scope: !3, file: !3, line: 3203, type: !5561, scopeLine: 3204, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6694 = !DILocalVariable(name: "insn", scope: !6693, file: !3, line: 3205, type: !1125)
!6695 = !DILocation(line: 3205, column: 7, scope: !6693)
!6696 = !DILocation(line: 3207, column: 15, scope: !6697)
!6697 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 3207, column: 3)
!6698 = !DILocation(line: 3207, column: 13, scope: !6697)
!6699 = !DILocation(line: 3207, column: 8, scope: !6697)
!6700 = !DILocation(line: 3208, column: 8, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6697, file: !3, line: 3207, column: 3)
!6702 = !DILocation(line: 3208, column: 13, scope: !6701)
!6703 = !DILocation(line: 3208, column: 17, scope: !6701)
!6704 = !DILocation(line: 3208, column: 16, scope: !6701)
!6705 = !DILocation(line: 0, scope: !6701)
!6706 = !DILocation(line: 3207, column: 3, scope: !6697)
!6707 = !DILocation(line: 3209, column: 15, scope: !6701)
!6708 = !DILocation(line: 3209, column: 13, scope: !6701)
!6709 = !DILocation(line: 3207, column: 3, scope: !6701)
!6710 = distinct !{!6710, !6706, !6711}
!6711 = !DILocation(line: 3210, column: 5, scope: !6697)
!6712 = !DILocation(line: 3212, column: 10, scope: !6693)
!6713 = !DILocation(line: 3212, column: 3, scope: !6693)
!6714 = distinct !DISubprogram(name: "active_insn_p", scope: !3, file: !3, line: 3220, type: !3665, scopeLine: 3221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6715 = !DILocalVariable(name: "insn", arg: 1, scope: !6714, file: !3, line: 3220, type: !2177)
!6716 = !DILocation(line: 3220, column: 26, scope: !6714)
!6717 = !DILocation(line: 3222, column: 11, scope: !6714)
!6718 = !DILocation(line: 3222, column: 25, scope: !6714)
!6719 = !DILocation(line: 3222, column: 28, scope: !6714)
!6720 = !DILocation(line: 3223, column: 4, scope: !6714)
!6721 = !DILocation(line: 3223, column: 8, scope: !6714)
!6722 = !DILocation(line: 3224, column: 8, scope: !6714)
!6723 = !DILocation(line: 3224, column: 14, scope: !6714)
!6724 = !DILocation(line: 3225, column: 5, scope: !6714)
!6725 = !DILocation(line: 3225, column: 9, scope: !6714)
!6726 = !DILocation(line: 3225, column: 35, scope: !6714)
!6727 = !DILocation(line: 3226, column: 9, scope: !6714)
!6728 = !DILocation(line: 3226, column: 12, scope: !6714)
!6729 = !DILocation(line: 3226, column: 38, scope: !6714)
!6730 = !DILocation(line: 0, scope: !6714)
!6731 = !DILocation(line: 3222, column: 3, scope: !6714)
!6732 = distinct !DISubprogram(name: "next_active_insn", scope: !3, file: !3, line: 3230, type: !2610, scopeLine: 3231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6733 = !DILocalVariable(name: "insn", arg: 1, scope: !6732, file: !3, line: 3230, type: !1125)
!6734 = !DILocation(line: 3230, column: 23, scope: !6732)
!6735 = !DILocation(line: 3232, column: 3, scope: !6732)
!6736 = !DILocation(line: 3232, column: 10, scope: !6732)
!6737 = !DILocation(line: 3234, column: 14, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3233, column: 5)
!6739 = !DILocation(line: 3234, column: 12, scope: !6738)
!6740 = !DILocation(line: 3235, column: 11, scope: !6741)
!6741 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 3235, column: 11)
!6742 = !DILocation(line: 3235, column: 16, scope: !6741)
!6743 = !DILocation(line: 3235, column: 21, scope: !6741)
!6744 = !DILocation(line: 3235, column: 39, scope: !6741)
!6745 = !DILocation(line: 3235, column: 24, scope: !6741)
!6746 = !DILocation(line: 3235, column: 11, scope: !6738)
!6747 = !DILocation(line: 3236, column: 2, scope: !6741)
!6748 = distinct !{!6748, !6735, !6749}
!6749 = !DILocation(line: 3237, column: 5, scope: !6732)
!6750 = !DILocation(line: 3239, column: 10, scope: !6732)
!6751 = !DILocation(line: 3239, column: 3, scope: !6732)
!6752 = distinct !DISubprogram(name: "prev_active_insn", scope: !3, file: !3, line: 3247, type: !2610, scopeLine: 3248, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6753 = !DILocalVariable(name: "insn", arg: 1, scope: !6752, file: !3, line: 3247, type: !1125)
!6754 = !DILocation(line: 3247, column: 23, scope: !6752)
!6755 = !DILocation(line: 3249, column: 3, scope: !6752)
!6756 = !DILocation(line: 3249, column: 10, scope: !6752)
!6757 = !DILocation(line: 3251, column: 14, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6752, file: !3, line: 3250, column: 5)
!6759 = !DILocation(line: 3251, column: 12, scope: !6758)
!6760 = !DILocation(line: 3252, column: 11, scope: !6761)
!6761 = distinct !DILexicalBlock(scope: !6758, file: !3, line: 3252, column: 11)
!6762 = !DILocation(line: 3252, column: 16, scope: !6761)
!6763 = !DILocation(line: 3252, column: 21, scope: !6761)
!6764 = !DILocation(line: 3252, column: 39, scope: !6761)
!6765 = !DILocation(line: 3252, column: 24, scope: !6761)
!6766 = !DILocation(line: 3252, column: 11, scope: !6758)
!6767 = !DILocation(line: 3253, column: 2, scope: !6761)
!6768 = distinct !{!6768, !6755, !6769}
!6769 = !DILocation(line: 3254, column: 5, scope: !6752)
!6770 = !DILocation(line: 3256, column: 10, scope: !6752)
!6771 = !DILocation(line: 3256, column: 3, scope: !6752)
!6772 = distinct !DISubprogram(name: "next_label", scope: !3, file: !3, line: 3262, type: !2610, scopeLine: 3263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6773 = !DILocalVariable(name: "insn", arg: 1, scope: !6772, file: !3, line: 3262, type: !1125)
!6774 = !DILocation(line: 3262, column: 17, scope: !6772)
!6775 = !DILocation(line: 3264, column: 3, scope: !6772)
!6776 = !DILocation(line: 3264, column: 10, scope: !6772)
!6777 = !DILocation(line: 3266, column: 14, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 3265, column: 5)
!6779 = !DILocation(line: 3266, column: 12, scope: !6778)
!6780 = !DILocation(line: 3267, column: 11, scope: !6781)
!6781 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 3267, column: 11)
!6782 = !DILocation(line: 3267, column: 16, scope: !6781)
!6783 = !DILocation(line: 3267, column: 21, scope: !6781)
!6784 = !DILocation(line: 3267, column: 24, scope: !6781)
!6785 = !DILocation(line: 3267, column: 11, scope: !6778)
!6786 = !DILocation(line: 3268, column: 2, scope: !6781)
!6787 = distinct !{!6787, !6775, !6788}
!6788 = !DILocation(line: 3269, column: 5, scope: !6772)
!6789 = !DILocation(line: 3271, column: 10, scope: !6772)
!6790 = !DILocation(line: 3271, column: 3, scope: !6772)
!6791 = distinct !DISubprogram(name: "prev_label", scope: !3, file: !3, line: 3277, type: !2610, scopeLine: 3278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6792 = !DILocalVariable(name: "insn", arg: 1, scope: !6791, file: !3, line: 3277, type: !1125)
!6793 = !DILocation(line: 3277, column: 17, scope: !6791)
!6794 = !DILocation(line: 3279, column: 3, scope: !6791)
!6795 = !DILocation(line: 3279, column: 10, scope: !6791)
!6796 = !DILocation(line: 3281, column: 14, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6791, file: !3, line: 3280, column: 5)
!6798 = !DILocation(line: 3281, column: 12, scope: !6797)
!6799 = !DILocation(line: 3282, column: 11, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 3282, column: 11)
!6801 = !DILocation(line: 3282, column: 16, scope: !6800)
!6802 = !DILocation(line: 3282, column: 21, scope: !6800)
!6803 = !DILocation(line: 3282, column: 24, scope: !6800)
!6804 = !DILocation(line: 3282, column: 11, scope: !6797)
!6805 = !DILocation(line: 3283, column: 2, scope: !6800)
!6806 = distinct !{!6806, !6794, !6807}
!6807 = !DILocation(line: 3284, column: 5, scope: !6791)
!6808 = !DILocation(line: 3286, column: 10, scope: !6791)
!6809 = !DILocation(line: 3286, column: 3, scope: !6791)
!6810 = distinct !DISubprogram(name: "skip_consecutive_labels", scope: !3, file: !3, line: 3293, type: !2610, scopeLine: 3294, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6811 = !DILocalVariable(name: "label", arg: 1, scope: !6810, file: !3, line: 3293, type: !1125)
!6812 = !DILocation(line: 3293, column: 30, scope: !6810)
!6813 = !DILocalVariable(name: "insn", scope: !6810, file: !3, line: 3295, type: !1125)
!6814 = !DILocation(line: 3295, column: 7, scope: !6810)
!6815 = !DILocation(line: 3297, column: 15, scope: !6816)
!6816 = distinct !DILexicalBlock(scope: !6810, file: !3, line: 3297, column: 3)
!6817 = !DILocation(line: 3297, column: 13, scope: !6816)
!6818 = !DILocation(line: 3297, column: 8, scope: !6816)
!6819 = !DILocation(line: 3297, column: 22, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6816, file: !3, line: 3297, column: 3)
!6821 = !DILocation(line: 3297, column: 27, scope: !6820)
!6822 = !DILocation(line: 3297, column: 32, scope: !6820)
!6823 = !DILocation(line: 3297, column: 36, scope: !6820)
!6824 = !DILocation(line: 3297, column: 35, scope: !6820)
!6825 = !DILocation(line: 0, scope: !6820)
!6826 = !DILocation(line: 3297, column: 3, scope: !6816)
!6827 = !DILocation(line: 3298, column: 9, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6820, file: !3, line: 3298, column: 9)
!6829 = !DILocation(line: 3298, column: 9, scope: !6820)
!6830 = !DILocation(line: 3299, column: 15, scope: !6828)
!6831 = !DILocation(line: 3299, column: 13, scope: !6828)
!6832 = !DILocation(line: 3299, column: 7, scope: !6828)
!6833 = !DILocation(line: 3297, column: 58, scope: !6820)
!6834 = !DILocation(line: 3297, column: 56, scope: !6820)
!6835 = !DILocation(line: 3297, column: 3, scope: !6820)
!6836 = distinct !{!6836, !6826, !6837}
!6837 = !DILocation(line: 3299, column: 15, scope: !6816)
!6838 = !DILocation(line: 3301, column: 10, scope: !6810)
!6839 = !DILocation(line: 3301, column: 3, scope: !6810)
!6840 = distinct !DISubprogram(name: "try_split", scope: !3, file: !3, line: 3431, type: !6841, scopeLine: 3432, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!6841 = !DISubroutineType(types: !6842)
!6842 = !{!1125, !1125, !1125, !1149}
!6843 = !DILocalVariable(name: "pat", arg: 1, scope: !6840, file: !3, line: 3431, type: !1125)
!6844 = !DILocation(line: 3431, column: 16, scope: !6840)
!6845 = !DILocalVariable(name: "trial", arg: 2, scope: !6840, file: !3, line: 3431, type: !1125)
!6846 = !DILocation(line: 3431, column: 25, scope: !6840)
!6847 = !DILocalVariable(name: "last", arg: 3, scope: !6840, file: !3, line: 3431, type: !1149)
!6848 = !DILocation(line: 3431, column: 36, scope: !6840)
!6849 = !DILocalVariable(name: "before", scope: !6840, file: !3, line: 3433, type: !1125)
!6850 = !DILocation(line: 3433, column: 7, scope: !6840)
!6851 = !DILocation(line: 3433, column: 16, scope: !6840)
!6852 = !DILocalVariable(name: "after", scope: !6840, file: !3, line: 3434, type: !1125)
!6853 = !DILocation(line: 3434, column: 7, scope: !6840)
!6854 = !DILocation(line: 3434, column: 15, scope: !6840)
!6855 = !DILocalVariable(name: "has_barrier", scope: !6840, file: !3, line: 3435, type: !1149)
!6856 = !DILocation(line: 3435, column: 7, scope: !6840)
!6857 = !DILocalVariable(name: "note", scope: !6840, file: !3, line: 3436, type: !1125)
!6858 = !DILocation(line: 3436, column: 7, scope: !6840)
!6859 = !DILocalVariable(name: "seq", scope: !6840, file: !3, line: 3436, type: !1125)
!6860 = !DILocation(line: 3436, column: 13, scope: !6840)
!6861 = !DILocalVariable(name: "tem", scope: !6840, file: !3, line: 3436, type: !1125)
!6862 = !DILocation(line: 3436, column: 18, scope: !6840)
!6863 = !DILocalVariable(name: "probability", scope: !6840, file: !3, line: 3437, type: !1149)
!6864 = !DILocation(line: 3437, column: 7, scope: !6840)
!6865 = !DILocalVariable(name: "insn_last", scope: !6840, file: !3, line: 3438, type: !1125)
!6866 = !DILocation(line: 3438, column: 7, scope: !6840)
!6867 = !DILocalVariable(name: "insn", scope: !6840, file: !3, line: 3438, type: !1125)
!6868 = !DILocation(line: 3438, column: 18, scope: !6840)
!6869 = !DILocalVariable(name: "njumps", scope: !6840, file: !3, line: 3439, type: !1149)
!6870 = !DILocation(line: 3439, column: 7, scope: !6840)
!6871 = !DILocation(line: 3442, column: 7, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3442, column: 7)
!6873 = !DILocation(line: 3442, column: 7, scope: !6840)
!6874 = !DILocation(line: 3443, column: 12, scope: !6872)
!6875 = !DILocation(line: 3443, column: 5, scope: !6872)
!6876 = !DILocation(line: 3445, column: 23, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3445, column: 7)
!6878 = !DILocation(line: 3445, column: 7, scope: !6877)
!6879 = !DILocation(line: 3446, column: 7, scope: !6877)
!6880 = !DILocation(line: 3446, column: 33, scope: !6877)
!6881 = !DILocation(line: 3446, column: 18, scope: !6877)
!6882 = !DILocation(line: 3446, column: 16, scope: !6877)
!6883 = !DILocation(line: 3445, column: 7, scope: !6840)
!6884 = !DILocation(line: 3447, column: 32, scope: !6877)
!6885 = !DILocation(line: 3447, column: 30, scope: !6877)
!6886 = !DILocation(line: 3447, column: 5, scope: !6877)
!6887 = !DILocation(line: 3448, column: 17, scope: !6840)
!6888 = !DILocation(line: 3448, column: 15, scope: !6840)
!6889 = !DILocation(line: 3450, column: 22, scope: !6840)
!6890 = !DILocation(line: 3450, column: 27, scope: !6840)
!6891 = !DILocation(line: 3450, column: 9, scope: !6840)
!6892 = !DILocation(line: 3450, column: 7, scope: !6840)
!6893 = !DILocation(line: 3452, column: 28, scope: !6840)
!6894 = !DILocation(line: 3456, column: 7, scope: !6895)
!6895 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3456, column: 7)
!6896 = !DILocation(line: 3456, column: 13, scope: !6895)
!6897 = !DILocation(line: 3456, column: 16, scope: !6895)
!6898 = !DILocation(line: 3456, column: 7, scope: !6840)
!6899 = !DILocation(line: 3458, column: 19, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 3457, column: 5)
!6901 = !DILocation(line: 3459, column: 15, scope: !6900)
!6902 = !DILocation(line: 3459, column: 13, scope: !6900)
!6903 = !DILocation(line: 3460, column: 5, scope: !6900)
!6904 = !DILocation(line: 3462, column: 8, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3462, column: 7)
!6906 = !DILocation(line: 3462, column: 7, scope: !6840)
!6907 = !DILocation(line: 3463, column: 12, scope: !6905)
!6908 = !DILocation(line: 3463, column: 5, scope: !6905)
!6909 = !DILocation(line: 3467, column: 15, scope: !6840)
!6910 = !DILocation(line: 3467, column: 13, scope: !6840)
!6911 = !DILocation(line: 3468, column: 3, scope: !6840)
!6912 = !DILocation(line: 3470, column: 11, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 3470, column: 11)
!6914 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3469, column: 5)
!6915 = !DILocation(line: 3471, column: 4, scope: !6913)
!6916 = !DILocation(line: 3471, column: 20, scope: !6913)
!6917 = !DILocation(line: 3471, column: 41, scope: !6913)
!6918 = !DILocation(line: 3471, column: 7, scope: !6913)
!6919 = !DILocation(line: 3470, column: 11, scope: !6914)
!6920 = !DILocation(line: 3472, column: 9, scope: !6913)
!6921 = !DILocation(line: 3472, column: 2, scope: !6913)
!6922 = !DILocation(line: 3473, column: 12, scope: !6923)
!6923 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 3473, column: 11)
!6924 = !DILocation(line: 3473, column: 11, scope: !6914)
!6925 = !DILocation(line: 3474, column: 2, scope: !6923)
!6926 = !DILocation(line: 3475, column: 19, scope: !6914)
!6927 = !DILocation(line: 3475, column: 17, scope: !6914)
!6928 = distinct !{!6928, !6911, !6929}
!6929 = !DILocation(line: 3476, column: 5, scope: !6840)
!6930 = !DILocation(line: 3480, column: 29, scope: !6840)
!6931 = !DILocation(line: 3480, column: 3, scope: !6840)
!6932 = !DILocation(line: 3483, column: 15, scope: !6933)
!6933 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3483, column: 3)
!6934 = !DILocation(line: 3483, column: 13, scope: !6933)
!6935 = !DILocation(line: 3483, column: 8, scope: !6933)
!6936 = !DILocation(line: 3483, column: 26, scope: !6937)
!6937 = distinct !DILexicalBlock(scope: !6933, file: !3, line: 3483, column: 3)
!6938 = !DILocation(line: 3483, column: 3, scope: !6933)
!6939 = !DILocation(line: 3485, column: 11, scope: !6940)
!6940 = distinct !DILexicalBlock(scope: !6941, file: !3, line: 3485, column: 11)
!6941 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 3484, column: 5)
!6942 = !DILocation(line: 3485, column: 11, scope: !6941)
!6943 = !DILocation(line: 3487, column: 21, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6940, file: !3, line: 3486, column: 2)
!6945 = !DILocation(line: 3487, column: 37, scope: !6944)
!6946 = !DILocation(line: 3487, column: 4, scope: !6944)
!6947 = !DILocation(line: 3488, column: 10, scope: !6944)
!6948 = !DILocation(line: 3489, column: 8, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 3489, column: 8)
!6950 = !DILocation(line: 3489, column: 20, scope: !6949)
!6951 = !DILocation(line: 3490, column: 8, scope: !6949)
!6952 = !DILocation(line: 3490, column: 27, scope: !6949)
!6953 = !DILocation(line: 3490, column: 11, scope: !6949)
!6954 = !DILocation(line: 3491, column: 8, scope: !6949)
!6955 = !DILocation(line: 3491, column: 27, scope: !6949)
!6956 = !DILocation(line: 3491, column: 12, scope: !6949)
!6957 = !DILocation(line: 3489, column: 8, scope: !6944)
!6958 = !DILocation(line: 3497, column: 8, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3492, column: 6)
!6960 = !DILocation(line: 3498, column: 22, scope: !6959)
!6961 = !DILocation(line: 3498, column: 41, scope: !6959)
!6962 = !DILocation(line: 3498, column: 8, scope: !6959)
!6963 = !DILocation(line: 3499, column: 6, scope: !6959)
!6964 = !DILocation(line: 3500, column: 2, scope: !6944)
!6965 = !DILocation(line: 3501, column: 5, scope: !6941)
!6966 = !DILocation(line: 3483, column: 40, scope: !6937)
!6967 = !DILocation(line: 3483, column: 38, scope: !6937)
!6968 = !DILocation(line: 3483, column: 3, scope: !6937)
!6969 = distinct !{!6969, !6938, !6970}
!6970 = !DILocation(line: 3501, column: 5, scope: !6933)
!6971 = !DILocation(line: 3505, column: 7, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3505, column: 7)
!6973 = !DILocation(line: 3505, column: 7, scope: !6840)
!6974 = !DILocation(line: 3507, column: 19, scope: !6975)
!6975 = distinct !DILexicalBlock(scope: !6976, file: !3, line: 3507, column: 7)
!6976 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 3506, column: 5)
!6977 = !DILocation(line: 3507, column: 17, scope: !6975)
!6978 = !DILocation(line: 3507, column: 12, scope: !6975)
!6979 = !DILocation(line: 3507, column: 30, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6975, file: !3, line: 3507, column: 7)
!6981 = !DILocation(line: 3507, column: 7, scope: !6975)
!6982 = !DILocation(line: 3508, column: 6, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6980, file: !3, line: 3508, column: 6)
!6984 = !DILocation(line: 3508, column: 6, scope: !6980)
!6985 = !DILocalVariable(name: "p", scope: !6986, file: !3, line: 3510, type: !2170)
!6986 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 3509, column: 4)
!6987 = !DILocation(line: 3510, column: 11, scope: !6986)
!6988 = !DILocation(line: 3510, column: 16, scope: !6986)
!6989 = !DILocation(line: 3511, column: 6, scope: !6986)
!6990 = !DILocation(line: 3511, column: 14, scope: !6986)
!6991 = !DILocation(line: 3511, column: 13, scope: !6986)
!6992 = !DILocation(line: 3512, column: 13, scope: !6986)
!6993 = !DILocation(line: 3512, column: 10, scope: !6986)
!6994 = distinct !{!6994, !6989, !6992}
!6995 = !DILocation(line: 3513, column: 11, scope: !6986)
!6996 = !DILocation(line: 3513, column: 7, scope: !6986)
!6997 = !DILocation(line: 3513, column: 9, scope: !6986)
!6998 = !DILocation(line: 3514, column: 30, scope: !6986)
!6999 = !DILocation(line: 3514, column: 6, scope: !6986)
!7000 = !DILocation(line: 3514, column: 28, scope: !6986)
!7001 = !DILocation(line: 3517, column: 10, scope: !7002)
!7002 = distinct !DILexicalBlock(scope: !6986, file: !3, line: 3517, column: 10)
!7003 = !DILocation(line: 3517, column: 10, scope: !6986)
!7004 = !DILocation(line: 3518, column: 10, scope: !7002)
!7005 = !DILocation(line: 3518, column: 23, scope: !7002)
!7006 = !DILocation(line: 3518, column: 40, scope: !7002)
!7007 = !DILocation(line: 3518, column: 47, scope: !7002)
!7008 = !DILocation(line: 3518, column: 8, scope: !7002)
!7009 = !DILocation(line: 3519, column: 4, scope: !6986)
!7010 = !DILocation(line: 3507, column: 44, scope: !6980)
!7011 = !DILocation(line: 3507, column: 42, scope: !6980)
!7012 = !DILocation(line: 3507, column: 7, scope: !6980)
!7013 = distinct !{!7013, !6981, !7014}
!7014 = !DILocation(line: 3519, column: 4, scope: !6975)
!7015 = !DILocation(line: 3520, column: 5, scope: !6976)
!7016 = !DILocation(line: 3523, column: 15, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3523, column: 3)
!7018 = !DILocation(line: 3523, column: 13, scope: !7017)
!7019 = !DILocation(line: 3523, column: 8, scope: !7017)
!7020 = !DILocation(line: 3523, column: 34, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7017, file: !3, line: 3523, column: 3)
!7022 = !DILocation(line: 3523, column: 3, scope: !7017)
!7023 = !DILocation(line: 3525, column: 15, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 3524, column: 5)
!7025 = !DILocation(line: 3525, column: 7, scope: !7024)
!7026 = !DILocation(line: 3528, column: 38, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !7024, file: !3, line: 3526, column: 2)
!7028 = !DILocation(line: 3528, column: 44, scope: !7027)
!7029 = !DILocation(line: 3528, column: 4, scope: !7027)
!7030 = !DILocation(line: 3529, column: 4, scope: !7027)
!7031 = !DILocation(line: 3533, column: 16, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 3533, column: 4)
!7033 = !DILocation(line: 3533, column: 14, scope: !7032)
!7034 = !DILocation(line: 3533, column: 9, scope: !7032)
!7035 = !DILocation(line: 3533, column: 27, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7032, file: !3, line: 3533, column: 4)
!7037 = !DILocation(line: 3533, column: 32, scope: !7036)
!7038 = !DILocation(line: 3533, column: 4, scope: !7032)
!7039 = !DILocation(line: 3535, column: 12, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !7041, file: !3, line: 3535, column: 12)
!7041 = distinct !DILexicalBlock(scope: !7036, file: !3, line: 3534, column: 6)
!7042 = !DILocation(line: 3535, column: 12, scope: !7041)
!7043 = !DILocation(line: 3536, column: 17, scope: !7040)
!7044 = !DILocation(line: 3536, column: 23, scope: !7040)
!7045 = !DILocation(line: 3536, column: 45, scope: !7040)
!7046 = !DILocation(line: 3536, column: 3, scope: !7040)
!7047 = !DILocation(line: 3537, column: 6, scope: !7041)
!7048 = !DILocation(line: 3533, column: 52, scope: !7036)
!7049 = !DILocation(line: 3533, column: 50, scope: !7036)
!7050 = !DILocation(line: 3533, column: 4, scope: !7036)
!7051 = distinct !{!7051, !7038, !7052}
!7052 = !DILocation(line: 3537, column: 6, scope: !7032)
!7053 = !DILocation(line: 3538, column: 4, scope: !7027)
!7054 = !DILocation(line: 3541, column: 16, scope: !7055)
!7055 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 3541, column: 4)
!7056 = !DILocation(line: 3541, column: 14, scope: !7055)
!7057 = !DILocation(line: 3541, column: 9, scope: !7055)
!7058 = !DILocation(line: 3541, column: 27, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !7055, file: !3, line: 3541, column: 4)
!7060 = !DILocation(line: 3541, column: 32, scope: !7059)
!7061 = !DILocation(line: 3541, column: 4, scope: !7055)
!7062 = !DILocation(line: 3543, column: 12, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7064, file: !3, line: 3543, column: 12)
!7064 = distinct !DILexicalBlock(scope: !7059, file: !3, line: 3542, column: 6)
!7065 = !DILocation(line: 3543, column: 12, scope: !7064)
!7066 = !DILocation(line: 3544, column: 17, scope: !7063)
!7067 = !DILocation(line: 3544, column: 23, scope: !7063)
!7068 = !DILocation(line: 3544, column: 45, scope: !7063)
!7069 = !DILocation(line: 3544, column: 3, scope: !7063)
!7070 = !DILocation(line: 3545, column: 6, scope: !7064)
!7071 = !DILocation(line: 3541, column: 52, scope: !7059)
!7072 = !DILocation(line: 3541, column: 50, scope: !7059)
!7073 = !DILocation(line: 3541, column: 4, scope: !7059)
!7074 = distinct !{!7074, !7061, !7075}
!7075 = !DILocation(line: 3545, column: 6, scope: !7055)
!7076 = !DILocation(line: 3546, column: 4, scope: !7027)
!7077 = !DILocation(line: 3561, column: 4, scope: !7027)
!7078 = !DILocation(line: 3563, column: 5, scope: !7024)
!7079 = !DILocation(line: 3523, column: 47, scope: !7021)
!7080 = !DILocation(line: 3523, column: 45, scope: !7021)
!7081 = !DILocation(line: 3523, column: 3, scope: !7021)
!7082 = distinct !{!7082, !7022, !7083}
!7083 = !DILocation(line: 3563, column: 5, scope: !7017)
!7084 = !DILocation(line: 3567, column: 7, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3567, column: 7)
!7086 = !DILocation(line: 3567, column: 7, scope: !6840)
!7087 = !DILocation(line: 3569, column: 14, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 3568, column: 5)
!7089 = !DILocation(line: 3569, column: 12, scope: !7088)
!7090 = !DILocation(line: 3570, column: 7, scope: !7088)
!7091 = !DILocation(line: 3570, column: 14, scope: !7088)
!7092 = !DILocation(line: 3570, column: 19, scope: !7088)
!7093 = !DILocation(line: 3573, column: 8, scope: !7094)
!7094 = distinct !DILexicalBlock(scope: !7095, file: !3, line: 3573, column: 8)
!7095 = distinct !DILexicalBlock(scope: !7088, file: !3, line: 3571, column: 2)
!7096 = !DILocation(line: 3573, column: 8, scope: !7095)
!7097 = !DILocation(line: 3574, column: 24, scope: !7094)
!7098 = !DILocation(line: 3574, column: 6, scope: !7094)
!7099 = !DILocation(line: 3576, column: 11, scope: !7095)
!7100 = !DILocation(line: 3576, column: 9, scope: !7095)
!7101 = distinct !{!7101, !7090, !7102}
!7102 = !DILocation(line: 3577, column: 2, scope: !7088)
!7103 = !DILocation(line: 3578, column: 5, scope: !7088)
!7104 = !DILocation(line: 3580, column: 33, scope: !6840)
!7105 = !DILocation(line: 3580, column: 38, scope: !6840)
!7106 = !DILocation(line: 3580, column: 45, scope: !6840)
!7107 = !DILocation(line: 3580, column: 9, scope: !6840)
!7108 = !DILocation(line: 3580, column: 7, scope: !6840)
!7109 = !DILocation(line: 3582, column: 16, scope: !6840)
!7110 = !DILocation(line: 3582, column: 3, scope: !6840)
!7111 = !DILocation(line: 3583, column: 7, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3583, column: 7)
!7113 = !DILocation(line: 3583, column: 7, scope: !6840)
!7114 = !DILocation(line: 3584, column: 25, scope: !7112)
!7115 = !DILocation(line: 3584, column: 5, scope: !7112)
!7116 = !DILocation(line: 3591, column: 14, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 3591, column: 3)
!7118 = !DILocation(line: 3591, column: 12, scope: !7117)
!7119 = !DILocation(line: 3591, column: 8, scope: !7117)
!7120 = !DILocation(line: 3591, column: 34, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 3591, column: 3)
!7122 = !DILocation(line: 3591, column: 41, scope: !7121)
!7123 = !DILocation(line: 3591, column: 38, scope: !7121)
!7124 = !DILocation(line: 3591, column: 3, scope: !7117)
!7125 = !DILocation(line: 3592, column: 11, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !7121, file: !3, line: 3592, column: 9)
!7127 = !DILocation(line: 3592, column: 32, scope: !7126)
!7128 = !DILocation(line: 3592, column: 35, scope: !7126)
!7129 = !DILocation(line: 3592, column: 9, scope: !7121)
!7130 = !DILocation(line: 3593, column: 24, scope: !7126)
!7131 = !DILocation(line: 3593, column: 39, scope: !7126)
!7132 = !DILocation(line: 3593, column: 13, scope: !7126)
!7133 = !DILocation(line: 3593, column: 11, scope: !7126)
!7134 = !DILocation(line: 3593, column: 7, scope: !7126)
!7135 = !DILocation(line: 3591, column: 54, scope: !7121)
!7136 = !DILocation(line: 3591, column: 52, scope: !7121)
!7137 = !DILocation(line: 3591, column: 3, scope: !7121)
!7138 = distinct !{!7138, !7124, !7139}
!7139 = !DILocation(line: 3593, column: 45, scope: !7117)
!7140 = !DILocation(line: 3597, column: 10, scope: !6840)
!7141 = !DILocation(line: 3598, column: 8, scope: !6840)
!7142 = !DILocation(line: 3598, column: 16, scope: !6840)
!7143 = !DILocation(line: 3598, column: 36, scope: !6840)
!7144 = !DILocation(line: 3599, column: 7, scope: !6840)
!7145 = !DILocation(line: 3597, column: 3, scope: !6840)
!7146 = !DILocation(line: 3600, column: 1, scope: !6840)
!7147 = distinct !DISubprogram(name: "mark_label_nuses", scope: !3, file: !3, line: 3399, type: !3725, scopeLine: 3400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7148 = !DILocalVariable(name: "x", arg: 1, scope: !7147, file: !3, line: 3399, type: !1125)
!7149 = !DILocation(line: 3399, column: 23, scope: !7147)
!7150 = !DILocalVariable(name: "code", scope: !7147, file: !3, line: 3401, type: !377)
!7151 = !DILocation(line: 3401, column: 17, scope: !7147)
!7152 = !DILocalVariable(name: "i", scope: !7147, file: !3, line: 3402, type: !1149)
!7153 = !DILocation(line: 3402, column: 7, scope: !7147)
!7154 = !DILocalVariable(name: "j", scope: !7147, file: !3, line: 3402, type: !1149)
!7155 = !DILocation(line: 3402, column: 10, scope: !7147)
!7156 = !DILocalVariable(name: "fmt", scope: !7147, file: !3, line: 3403, type: !1152)
!7157 = !DILocation(line: 3403, column: 15, scope: !7147)
!7158 = !DILocation(line: 3405, column: 10, scope: !7147)
!7159 = !DILocation(line: 3405, column: 8, scope: !7147)
!7160 = !DILocation(line: 3406, column: 7, scope: !7161)
!7161 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 3406, column: 7)
!7162 = !DILocation(line: 3406, column: 12, scope: !7161)
!7163 = !DILocation(line: 3406, column: 25, scope: !7161)
!7164 = !DILocation(line: 3406, column: 28, scope: !7161)
!7165 = !DILocation(line: 3406, column: 7, scope: !7147)
!7166 = !DILocation(line: 3407, column: 5, scope: !7161)
!7167 = !DILocation(line: 3407, column: 30, scope: !7161)
!7168 = !DILocation(line: 3409, column: 9, scope: !7147)
!7169 = !DILocation(line: 3409, column: 7, scope: !7147)
!7170 = !DILocation(line: 3410, column: 12, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 3410, column: 3)
!7172 = !DILocation(line: 3410, column: 34, scope: !7171)
!7173 = !DILocation(line: 3410, column: 10, scope: !7171)
!7174 = !DILocation(line: 3410, column: 8, scope: !7171)
!7175 = !DILocation(line: 3410, column: 39, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 3410, column: 3)
!7177 = !DILocation(line: 3410, column: 41, scope: !7176)
!7178 = !DILocation(line: 3410, column: 3, scope: !7171)
!7179 = !DILocation(line: 3412, column: 11, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 3412, column: 11)
!7181 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 3411, column: 5)
!7182 = !DILocation(line: 3412, column: 15, scope: !7180)
!7183 = !DILocation(line: 3412, column: 18, scope: !7180)
!7184 = !DILocation(line: 3412, column: 11, scope: !7181)
!7185 = !DILocation(line: 3413, column: 20, scope: !7180)
!7186 = !DILocation(line: 3413, column: 2, scope: !7180)
!7187 = !DILocation(line: 3414, column: 16, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7180, file: !3, line: 3414, column: 16)
!7189 = !DILocation(line: 3414, column: 20, scope: !7188)
!7190 = !DILocation(line: 3414, column: 23, scope: !7188)
!7191 = !DILocation(line: 3414, column: 16, scope: !7180)
!7192 = !DILocation(line: 3415, column: 11, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7188, file: !3, line: 3415, column: 2)
!7194 = !DILocation(line: 3415, column: 26, scope: !7193)
!7195 = !DILocation(line: 3415, column: 9, scope: !7193)
!7196 = !DILocation(line: 3415, column: 7, scope: !7193)
!7197 = !DILocation(line: 3415, column: 31, scope: !7198)
!7198 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 3415, column: 2)
!7199 = !DILocation(line: 3415, column: 33, scope: !7198)
!7200 = !DILocation(line: 3415, column: 2, scope: !7193)
!7201 = !DILocation(line: 3416, column: 22, scope: !7198)
!7202 = !DILocation(line: 3416, column: 4, scope: !7198)
!7203 = !DILocation(line: 3415, column: 40, scope: !7198)
!7204 = !DILocation(line: 3415, column: 2, scope: !7198)
!7205 = distinct !{!7205, !7200, !7206}
!7206 = !DILocation(line: 3416, column: 39, scope: !7193)
!7207 = !DILocation(line: 3417, column: 5, scope: !7181)
!7208 = !DILocation(line: 3410, column: 48, scope: !7176)
!7209 = !DILocation(line: 3410, column: 3, scope: !7176)
!7210 = distinct !{!7210, !7178, !7211}
!7211 = !DILocation(line: 3417, column: 5, scope: !7171)
!7212 = !DILocation(line: 3418, column: 1, scope: !7147)
!7213 = distinct !DISubprogram(name: "emit_insn_after_setloc", scope: !3, file: !3, line: 4522, type: !6841, scopeLine: 4523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7214 = !DILocalVariable(name: "pattern", arg: 1, scope: !7213, file: !3, line: 4522, type: !1125)
!7215 = !DILocation(line: 4522, column: 29, scope: !7213)
!7216 = !DILocalVariable(name: "after", arg: 2, scope: !7213, file: !3, line: 4522, type: !1125)
!7217 = !DILocation(line: 4522, column: 42, scope: !7213)
!7218 = !DILocalVariable(name: "loc", arg: 3, scope: !7213, file: !3, line: 4522, type: !1149)
!7219 = !DILocation(line: 4522, column: 53, scope: !7213)
!7220 = !DILocalVariable(name: "last", scope: !7213, file: !3, line: 4524, type: !1125)
!7221 = !DILocation(line: 4524, column: 7, scope: !7213)
!7222 = !DILocation(line: 4524, column: 37, scope: !7213)
!7223 = !DILocation(line: 4524, column: 46, scope: !7213)
!7224 = !DILocation(line: 4524, column: 14, scope: !7213)
!7225 = !DILocation(line: 4526, column: 7, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 4526, column: 7)
!7227 = !DILocation(line: 4526, column: 15, scope: !7226)
!7228 = !DILocation(line: 4526, column: 27, scope: !7226)
!7229 = !DILocation(line: 4526, column: 31, scope: !7226)
!7230 = !DILocation(line: 4526, column: 7, scope: !7213)
!7231 = !DILocation(line: 4527, column: 12, scope: !7226)
!7232 = !DILocation(line: 4527, column: 5, scope: !7226)
!7233 = !DILocation(line: 4529, column: 11, scope: !7213)
!7234 = !DILocation(line: 4529, column: 9, scope: !7213)
!7235 = !DILocation(line: 4530, column: 3, scope: !7213)
!7236 = !DILocation(line: 4532, column: 26, scope: !7237)
!7237 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 4532, column: 11)
!7238 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 4531, column: 5)
!7239 = !DILocation(line: 4532, column: 11, scope: !7237)
!7240 = !DILocation(line: 4532, column: 33, scope: !7237)
!7241 = !DILocation(line: 4532, column: 37, scope: !7237)
!7242 = !DILocation(line: 4532, column: 11, scope: !7238)
!7243 = !DILocation(line: 4533, column: 25, scope: !7237)
!7244 = !DILocation(line: 4533, column: 2, scope: !7237)
!7245 = !DILocation(line: 4533, column: 23, scope: !7237)
!7246 = !DILocation(line: 4534, column: 11, scope: !7247)
!7247 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 4534, column: 11)
!7248 = !DILocation(line: 4534, column: 20, scope: !7247)
!7249 = !DILocation(line: 4534, column: 17, scope: !7247)
!7250 = !DILocation(line: 4534, column: 11, scope: !7238)
!7251 = !DILocation(line: 4535, column: 2, scope: !7247)
!7252 = !DILocation(line: 4536, column: 15, scope: !7238)
!7253 = !DILocation(line: 4536, column: 13, scope: !7238)
!7254 = distinct !{!7254, !7235, !7255}
!7255 = !DILocation(line: 4537, column: 5, scope: !7213)
!7256 = !DILocation(line: 4538, column: 10, scope: !7213)
!7257 = !DILocation(line: 4538, column: 3, scope: !7213)
!7258 = !DILocation(line: 4539, column: 1, scope: !7213)
!7259 = distinct !DISubprogram(name: "emit_barrier_after", scope: !3, file: !3, line: 4479, type: !2610, scopeLine: 4480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7260 = !DILocalVariable(name: "after", arg: 1, scope: !7259, file: !3, line: 4479, type: !1125)
!7261 = !DILocation(line: 4479, column: 25, scope: !7259)
!7262 = !DILocalVariable(name: "insn", scope: !7259, file: !3, line: 4481, type: !1125)
!7263 = !DILocation(line: 4481, column: 7, scope: !7259)
!7264 = !DILocation(line: 4481, column: 14, scope: !7259)
!7265 = !DILocation(line: 4483, column: 33, scope: !7259)
!7266 = !DILocation(line: 4483, column: 3, scope: !7259)
!7267 = !DILocation(line: 4483, column: 19, scope: !7259)
!7268 = !DILocation(line: 4485, column: 19, scope: !7259)
!7269 = !DILocation(line: 4485, column: 25, scope: !7259)
!7270 = !DILocation(line: 4485, column: 3, scope: !7259)
!7271 = !DILocation(line: 4486, column: 10, scope: !7259)
!7272 = !DILocation(line: 4486, column: 3, scope: !7259)
!7273 = distinct !DISubprogram(name: "make_insn_raw", scope: !3, file: !3, line: 3606, type: !2610, scopeLine: 3607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7274 = !DILocalVariable(name: "pattern", arg: 1, scope: !7273, file: !3, line: 3606, type: !1125)
!7275 = !DILocation(line: 3606, column: 20, scope: !7273)
!7276 = !DILocalVariable(name: "insn", scope: !7273, file: !3, line: 3608, type: !1125)
!7277 = !DILocation(line: 3608, column: 7, scope: !7273)
!7278 = !DILocation(line: 3610, column: 10, scope: !7273)
!7279 = !DILocation(line: 3610, column: 8, scope: !7273)
!7280 = !DILocation(line: 3612, column: 33, scope: !7273)
!7281 = !DILocation(line: 3612, column: 3, scope: !7273)
!7282 = !DILocation(line: 3612, column: 19, scope: !7273)
!7283 = !DILocation(line: 3613, column: 20, scope: !7273)
!7284 = !DILocation(line: 3613, column: 3, scope: !7273)
!7285 = !DILocation(line: 3613, column: 18, scope: !7273)
!7286 = !DILocation(line: 3614, column: 3, scope: !7273)
!7287 = !DILocation(line: 3614, column: 20, scope: !7273)
!7288 = !DILocation(line: 3615, column: 3, scope: !7273)
!7289 = !DILocation(line: 3615, column: 20, scope: !7273)
!7290 = !DILocation(line: 3616, column: 25, scope: !7273)
!7291 = !DILocation(line: 3616, column: 3, scope: !7273)
!7292 = !DILocation(line: 3616, column: 23, scope: !7273)
!7293 = !DILocation(line: 3617, column: 3, scope: !7273)
!7294 = !DILocation(line: 3617, column: 25, scope: !7273)
!7295 = !DILocation(line: 3631, column: 10, scope: !7273)
!7296 = !DILocation(line: 3631, column: 3, scope: !7273)
!7297 = distinct !DISubprogram(name: "make_debug_insn_raw", scope: !3, file: !3, line: 3637, type: !2610, scopeLine: 3638, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7298 = !DILocalVariable(name: "pattern", arg: 1, scope: !7297, file: !3, line: 3637, type: !1125)
!7299 = !DILocation(line: 3637, column: 26, scope: !7297)
!7300 = !DILocalVariable(name: "insn", scope: !7297, file: !3, line: 3639, type: !1125)
!7301 = !DILocation(line: 3639, column: 7, scope: !7297)
!7302 = !DILocation(line: 3641, column: 10, scope: !7297)
!7303 = !DILocation(line: 3641, column: 8, scope: !7297)
!7304 = !DILocation(line: 3642, column: 39, scope: !7297)
!7305 = !DILocation(line: 3642, column: 3, scope: !7297)
!7306 = !DILocation(line: 3642, column: 19, scope: !7297)
!7307 = !DILocation(line: 3643, column: 7, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 3643, column: 7)
!7309 = !DILocation(line: 3643, column: 28, scope: !7308)
!7310 = !DILocation(line: 3643, column: 26, scope: !7308)
!7311 = !DILocation(line: 3643, column: 7, scope: !7297)
!7312 = !DILocation(line: 3644, column: 35, scope: !7308)
!7313 = !DILocation(line: 3644, column: 5, scope: !7308)
!7314 = !DILocation(line: 3644, column: 21, scope: !7308)
!7315 = !DILocation(line: 3646, column: 20, scope: !7297)
!7316 = !DILocation(line: 3646, column: 3, scope: !7297)
!7317 = !DILocation(line: 3646, column: 18, scope: !7297)
!7318 = !DILocation(line: 3647, column: 3, scope: !7297)
!7319 = !DILocation(line: 3647, column: 20, scope: !7297)
!7320 = !DILocation(line: 3648, column: 3, scope: !7297)
!7321 = !DILocation(line: 3648, column: 20, scope: !7297)
!7322 = !DILocation(line: 3649, column: 25, scope: !7297)
!7323 = !DILocation(line: 3649, column: 3, scope: !7297)
!7324 = !DILocation(line: 3649, column: 23, scope: !7297)
!7325 = !DILocation(line: 3650, column: 3, scope: !7297)
!7326 = !DILocation(line: 3650, column: 25, scope: !7297)
!7327 = !DILocation(line: 3652, column: 10, scope: !7297)
!7328 = !DILocation(line: 3652, column: 3, scope: !7297)
!7329 = distinct !DISubprogram(name: "make_jump_insn_raw", scope: !3, file: !3, line: 3658, type: !2610, scopeLine: 3659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7330 = !DILocalVariable(name: "pattern", arg: 1, scope: !7329, file: !3, line: 3658, type: !1125)
!7331 = !DILocation(line: 3658, column: 25, scope: !7329)
!7332 = !DILocalVariable(name: "insn", scope: !7329, file: !3, line: 3660, type: !1125)
!7333 = !DILocation(line: 3660, column: 7, scope: !7329)
!7334 = !DILocation(line: 3662, column: 10, scope: !7329)
!7335 = !DILocation(line: 3662, column: 8, scope: !7329)
!7336 = !DILocation(line: 3663, column: 33, scope: !7329)
!7337 = !DILocation(line: 3663, column: 3, scope: !7329)
!7338 = !DILocation(line: 3663, column: 19, scope: !7329)
!7339 = !DILocation(line: 3665, column: 20, scope: !7329)
!7340 = !DILocation(line: 3665, column: 3, scope: !7329)
!7341 = !DILocation(line: 3665, column: 18, scope: !7329)
!7342 = !DILocation(line: 3666, column: 3, scope: !7329)
!7343 = !DILocation(line: 3666, column: 20, scope: !7329)
!7344 = !DILocation(line: 3667, column: 3, scope: !7329)
!7345 = !DILocation(line: 3667, column: 20, scope: !7329)
!7346 = !DILocation(line: 3668, column: 3, scope: !7329)
!7347 = !DILocation(line: 3668, column: 21, scope: !7329)
!7348 = !DILocation(line: 3669, column: 25, scope: !7329)
!7349 = !DILocation(line: 3669, column: 3, scope: !7329)
!7350 = !DILocation(line: 3669, column: 23, scope: !7329)
!7351 = !DILocation(line: 3670, column: 3, scope: !7329)
!7352 = !DILocation(line: 3670, column: 25, scope: !7329)
!7353 = !DILocation(line: 3672, column: 10, scope: !7329)
!7354 = !DILocation(line: 3672, column: 3, scope: !7329)
!7355 = distinct !DISubprogram(name: "add_insn", scope: !3, file: !3, line: 3699, type: !3725, scopeLine: 3700, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7356 = !DILocalVariable(name: "insn", arg: 1, scope: !7355, file: !3, line: 3699, type: !1125)
!7357 = !DILocation(line: 3699, column: 15, scope: !7355)
!7358 = !DILocation(line: 3701, column: 22, scope: !7355)
!7359 = !DILocation(line: 3701, column: 3, scope: !7355)
!7360 = !DILocation(line: 3701, column: 20, scope: !7355)
!7361 = !DILocation(line: 3702, column: 3, scope: !7355)
!7362 = !DILocation(line: 3702, column: 20, scope: !7355)
!7363 = !DILocation(line: 3704, column: 15, scope: !7364)
!7364 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 3704, column: 7)
!7365 = !DILocation(line: 3704, column: 12, scope: !7364)
!7366 = !DILocation(line: 3704, column: 7, scope: !7355)
!7367 = !DILocation(line: 3705, column: 29, scope: !7364)
!7368 = !DILocation(line: 3705, column: 5, scope: !7364)
!7369 = !DILocation(line: 3705, column: 27, scope: !7364)
!7370 = !DILocation(line: 3707, column: 15, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 3707, column: 7)
!7372 = !DILocation(line: 3707, column: 12, scope: !7371)
!7373 = !DILocation(line: 3707, column: 7, scope: !7355)
!7374 = !DILocation(line: 3708, column: 18, scope: !7371)
!7375 = !DILocation(line: 3708, column: 16, scope: !7371)
!7376 = !DILocation(line: 3708, column: 5, scope: !7371)
!7377 = !DILocation(line: 3710, column: 15, scope: !7355)
!7378 = !DILocation(line: 3710, column: 13, scope: !7355)
!7379 = !DILocation(line: 3711, column: 1, scope: !7355)
!7380 = distinct !DISubprogram(name: "add_insn_after", scope: !3, file: !3, line: 3719, type: !7381, scopeLine: 3720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7381 = !DISubroutineType(types: !7382)
!7382 = !{null, !1125, !1125, !1505}
!7383 = !DILocalVariable(name: "insn", arg: 1, scope: !7380, file: !3, line: 3719, type: !1125)
!7384 = !DILocation(line: 3719, column: 21, scope: !7380)
!7385 = !DILocalVariable(name: "after", arg: 2, scope: !7380, file: !3, line: 3719, type: !1125)
!7386 = !DILocation(line: 3719, column: 31, scope: !7380)
!7387 = !DILocalVariable(name: "bb", arg: 3, scope: !7380, file: !3, line: 3719, type: !1505)
!7388 = !DILocation(line: 3719, column: 50, scope: !7380)
!7389 = !DILocalVariable(name: "next", scope: !7380, file: !3, line: 3721, type: !1125)
!7390 = !DILocation(line: 3721, column: 7, scope: !7380)
!7391 = !DILocation(line: 3721, column: 14, scope: !7380)
!7392 = !DILocation(line: 3723, column: 3, scope: !7380)
!7393 = !DILocation(line: 3725, column: 22, scope: !7380)
!7394 = !DILocation(line: 3725, column: 3, scope: !7380)
!7395 = !DILocation(line: 3725, column: 20, scope: !7380)
!7396 = !DILocation(line: 3726, column: 22, scope: !7380)
!7397 = !DILocation(line: 3726, column: 3, scope: !7380)
!7398 = !DILocation(line: 3726, column: 20, scope: !7380)
!7399 = !DILocation(line: 3728, column: 7, scope: !7400)
!7400 = distinct !DILexicalBlock(scope: !7380, file: !3, line: 3728, column: 7)
!7401 = !DILocation(line: 3728, column: 7, scope: !7380)
!7402 = !DILocation(line: 3730, column: 26, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 3729, column: 5)
!7404 = !DILocation(line: 3730, column: 7, scope: !7403)
!7405 = !DILocation(line: 3730, column: 24, scope: !7403)
!7406 = !DILocation(line: 3731, column: 11, scope: !7407)
!7407 = distinct !DILexicalBlock(scope: !7403, file: !3, line: 3731, column: 11)
!7408 = !DILocation(line: 3731, column: 33, scope: !7407)
!7409 = !DILocation(line: 3731, column: 36, scope: !7407)
!7410 = !DILocation(line: 3731, column: 62, scope: !7407)
!7411 = !DILocation(line: 3731, column: 11, scope: !7403)
!7412 = !DILocation(line: 3732, column: 47, scope: !7407)
!7413 = !DILocation(line: 3732, column: 2, scope: !7407)
!7414 = !DILocation(line: 3732, column: 45, scope: !7407)
!7415 = !DILocation(line: 3733, column: 5, scope: !7403)
!7416 = !DILocation(line: 3734, column: 12, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 3734, column: 12)
!7418 = !DILocation(line: 3734, column: 25, scope: !7417)
!7419 = !DILocation(line: 3734, column: 22, scope: !7417)
!7420 = !DILocation(line: 3734, column: 12, scope: !7400)
!7421 = !DILocation(line: 3735, column: 17, scope: !7417)
!7422 = !DILocation(line: 3735, column: 15, scope: !7417)
!7423 = !DILocation(line: 3735, column: 5, scope: !7417)
!7424 = !DILocalVariable(name: "stack", scope: !7425, file: !3, line: 3738, type: !2171)
!7425 = distinct !DILexicalBlock(scope: !7417, file: !3, line: 3737, column: 5)
!7426 = !DILocation(line: 3738, column: 30, scope: !7425)
!7427 = !DILocation(line: 3738, column: 38, scope: !7425)
!7428 = !DILocation(line: 3740, column: 7, scope: !7425)
!7429 = !DILocation(line: 3740, column: 14, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 3740, column: 7)
!7431 = distinct !DILexicalBlock(scope: !7425, file: !3, line: 3740, column: 7)
!7432 = !DILocation(line: 3740, column: 7, scope: !7431)
!7433 = !DILocation(line: 3741, column: 6, scope: !7434)
!7434 = distinct !DILexicalBlock(scope: !7430, file: !3, line: 3741, column: 6)
!7435 = !DILocation(line: 3741, column: 15, scope: !7434)
!7436 = !DILocation(line: 3741, column: 22, scope: !7434)
!7437 = !DILocation(line: 3741, column: 12, scope: !7434)
!7438 = !DILocation(line: 3741, column: 6, scope: !7430)
!7439 = !DILocation(line: 3743, column: 20, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7434, file: !3, line: 3742, column: 4)
!7441 = !DILocation(line: 3743, column: 6, scope: !7440)
!7442 = !DILocation(line: 3743, column: 13, scope: !7440)
!7443 = !DILocation(line: 3743, column: 18, scope: !7440)
!7444 = !DILocation(line: 3744, column: 6, scope: !7440)
!7445 = !DILocation(line: 3740, column: 29, scope: !7430)
!7446 = !DILocation(line: 3740, column: 36, scope: !7430)
!7447 = !DILocation(line: 3740, column: 27, scope: !7430)
!7448 = !DILocation(line: 3740, column: 7, scope: !7430)
!7449 = distinct !{!7449, !7432, !7450}
!7450 = !DILocation(line: 3745, column: 4, scope: !7431)
!7451 = !DILocation(line: 3747, column: 7, scope: !7425)
!7452 = !DILocation(line: 3750, column: 8, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7380, file: !3, line: 3750, column: 7)
!7454 = !DILocation(line: 3751, column: 7, scope: !7453)
!7455 = !DILocation(line: 3751, column: 11, scope: !7453)
!7456 = !DILocation(line: 3752, column: 7, scope: !7453)
!7457 = !DILocation(line: 3752, column: 16, scope: !7453)
!7458 = !DILocation(line: 3752, column: 14, scope: !7453)
!7459 = !DILocation(line: 3750, column: 7, scope: !7380)
!7460 = !DILocation(line: 3754, column: 7, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 3753, column: 5)
!7462 = !DILocation(line: 3755, column: 11, scope: !7463)
!7463 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 3755, column: 11)
!7464 = !DILocation(line: 3755, column: 11, scope: !7461)
!7465 = !DILocation(line: 3756, column: 18, scope: !7463)
!7466 = !DILocation(line: 3756, column: 2, scope: !7463)
!7467 = !DILocation(line: 3759, column: 11, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 3759, column: 11)
!7469 = !DILocation(line: 3759, column: 26, scope: !7468)
!7470 = !DILocation(line: 3759, column: 23, scope: !7468)
!7471 = !DILocation(line: 3761, column: 4, scope: !7468)
!7472 = !DILocation(line: 3761, column: 8, scope: !7468)
!7473 = !DILocation(line: 3762, column: 4, scope: !7468)
!7474 = !DILocation(line: 3762, column: 8, scope: !7468)
!7475 = !DILocation(line: 3759, column: 11, scope: !7461)
!7476 = !DILocation(line: 3763, column: 16, scope: !7468)
!7477 = !DILocation(line: 3763, column: 2, scope: !7468)
!7478 = !DILocation(line: 3763, column: 14, scope: !7468)
!7479 = !DILocation(line: 3764, column: 5, scope: !7461)
!7480 = !DILocation(line: 3766, column: 23, scope: !7380)
!7481 = !DILocation(line: 3766, column: 3, scope: !7380)
!7482 = !DILocation(line: 3766, column: 21, scope: !7380)
!7483 = !DILocation(line: 3767, column: 7, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7380, file: !3, line: 3767, column: 7)
!7485 = !DILocation(line: 3767, column: 30, scope: !7484)
!7486 = !DILocation(line: 3767, column: 33, scope: !7484)
!7487 = !DILocation(line: 3767, column: 60, scope: !7484)
!7488 = !DILocation(line: 3767, column: 7, scope: !7380)
!7489 = !DILocalVariable(name: "sequence", scope: !7490, file: !3, line: 3769, type: !1125)
!7490 = distinct !DILexicalBlock(scope: !7484, file: !3, line: 3768, column: 5)
!7491 = !DILocation(line: 3769, column: 11, scope: !7490)
!7492 = !DILocation(line: 3769, column: 22, scope: !7490)
!7493 = !DILocation(line: 3770, column: 70, scope: !7490)
!7494 = !DILocation(line: 3770, column: 7, scope: !7490)
!7495 = !DILocation(line: 3770, column: 68, scope: !7490)
!7496 = !DILocation(line: 3771, column: 5, scope: !7490)
!7497 = !DILocation(line: 3772, column: 1, scope: !7380)
!7498 = distinct !DISubprogram(name: "add_insn_before", scope: !3, file: !3, line: 3781, type: !7381, scopeLine: 3782, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7499 = !DILocalVariable(name: "insn", arg: 1, scope: !7498, file: !3, line: 3781, type: !1125)
!7500 = !DILocation(line: 3781, column: 22, scope: !7498)
!7501 = !DILocalVariable(name: "before", arg: 2, scope: !7498, file: !3, line: 3781, type: !1125)
!7502 = !DILocation(line: 3781, column: 32, scope: !7498)
!7503 = !DILocalVariable(name: "bb", arg: 3, scope: !7498, file: !3, line: 3781, type: !1505)
!7504 = !DILocation(line: 3781, column: 52, scope: !7498)
!7505 = !DILocalVariable(name: "prev", scope: !7498, file: !3, line: 3783, type: !1125)
!7506 = !DILocation(line: 3783, column: 7, scope: !7498)
!7507 = !DILocation(line: 3783, column: 14, scope: !7498)
!7508 = !DILocation(line: 3785, column: 3, scope: !7498)
!7509 = !DILocation(line: 3787, column: 22, scope: !7498)
!7510 = !DILocation(line: 3787, column: 3, scope: !7498)
!7511 = !DILocation(line: 3787, column: 20, scope: !7498)
!7512 = !DILocation(line: 3788, column: 22, scope: !7498)
!7513 = !DILocation(line: 3788, column: 3, scope: !7498)
!7514 = !DILocation(line: 3788, column: 20, scope: !7498)
!7515 = !DILocation(line: 3790, column: 7, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3790, column: 7)
!7517 = !DILocation(line: 3790, column: 7, scope: !7498)
!7518 = !DILocation(line: 3792, column: 26, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 3791, column: 5)
!7520 = !DILocation(line: 3792, column: 7, scope: !7519)
!7521 = !DILocation(line: 3792, column: 24, scope: !7519)
!7522 = !DILocation(line: 3793, column: 11, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 3793, column: 11)
!7524 = !DILocation(line: 3793, column: 33, scope: !7523)
!7525 = !DILocation(line: 3793, column: 36, scope: !7523)
!7526 = !DILocation(line: 3793, column: 62, scope: !7523)
!7527 = !DILocation(line: 3793, column: 11, scope: !7519)
!7528 = !DILocalVariable(name: "sequence", scope: !7529, file: !3, line: 3795, type: !1125)
!7529 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 3794, column: 2)
!7530 = !DILocation(line: 3795, column: 8, scope: !7529)
!7531 = !DILocation(line: 3795, column: 19, scope: !7529)
!7532 = !DILocation(line: 3796, column: 67, scope: !7529)
!7533 = !DILocation(line: 3796, column: 4, scope: !7529)
!7534 = !DILocation(line: 3796, column: 65, scope: !7529)
!7535 = !DILocation(line: 3797, column: 2, scope: !7529)
!7536 = !DILocation(line: 3798, column: 5, scope: !7519)
!7537 = !DILocation(line: 3799, column: 12, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 3799, column: 12)
!7539 = !DILocation(line: 3799, column: 26, scope: !7538)
!7540 = !DILocation(line: 3799, column: 23, scope: !7538)
!7541 = !DILocation(line: 3799, column: 12, scope: !7516)
!7542 = !DILocation(line: 3800, column: 18, scope: !7538)
!7543 = !DILocation(line: 3800, column: 16, scope: !7538)
!7544 = !DILocation(line: 3800, column: 5, scope: !7538)
!7545 = !DILocalVariable(name: "stack", scope: !7546, file: !3, line: 3803, type: !2171)
!7546 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 3802, column: 5)
!7547 = !DILocation(line: 3803, column: 30, scope: !7546)
!7548 = !DILocation(line: 3803, column: 38, scope: !7546)
!7549 = !DILocation(line: 3805, column: 7, scope: !7546)
!7550 = !DILocation(line: 3805, column: 14, scope: !7551)
!7551 = distinct !DILexicalBlock(scope: !7552, file: !3, line: 3805, column: 7)
!7552 = distinct !DILexicalBlock(scope: !7546, file: !3, line: 3805, column: 7)
!7553 = !DILocation(line: 3805, column: 7, scope: !7552)
!7554 = !DILocation(line: 3806, column: 6, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7551, file: !3, line: 3806, column: 6)
!7556 = !DILocation(line: 3806, column: 16, scope: !7555)
!7557 = !DILocation(line: 3806, column: 23, scope: !7555)
!7558 = !DILocation(line: 3806, column: 13, scope: !7555)
!7559 = !DILocation(line: 3806, column: 6, scope: !7551)
!7560 = !DILocation(line: 3808, column: 21, scope: !7561)
!7561 = distinct !DILexicalBlock(scope: !7555, file: !3, line: 3807, column: 4)
!7562 = !DILocation(line: 3808, column: 6, scope: !7561)
!7563 = !DILocation(line: 3808, column: 13, scope: !7561)
!7564 = !DILocation(line: 3808, column: 19, scope: !7561)
!7565 = !DILocation(line: 3809, column: 6, scope: !7561)
!7566 = !DILocation(line: 3805, column: 29, scope: !7551)
!7567 = !DILocation(line: 3805, column: 36, scope: !7551)
!7568 = !DILocation(line: 3805, column: 27, scope: !7551)
!7569 = !DILocation(line: 3805, column: 7, scope: !7551)
!7570 = distinct !{!7570, !7553, !7571}
!7571 = !DILocation(line: 3810, column: 4, scope: !7552)
!7572 = !DILocation(line: 3812, column: 7, scope: !7546)
!7573 = !DILocation(line: 3815, column: 8, scope: !7574)
!7574 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3815, column: 7)
!7575 = !DILocation(line: 3816, column: 7, scope: !7574)
!7576 = !DILocation(line: 3816, column: 11, scope: !7574)
!7577 = !DILocation(line: 3817, column: 7, scope: !7574)
!7578 = !DILocation(line: 3817, column: 11, scope: !7574)
!7579 = !DILocation(line: 3815, column: 7, scope: !7498)
!7580 = !DILocation(line: 3818, column: 10, scope: !7574)
!7581 = !DILocation(line: 3818, column: 8, scope: !7574)
!7582 = !DILocation(line: 3818, column: 5, scope: !7574)
!7583 = !DILocation(line: 3820, column: 7, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3820, column: 7)
!7585 = !DILocation(line: 3820, column: 7, scope: !7498)
!7586 = !DILocation(line: 3822, column: 7, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 3821, column: 5)
!7588 = !DILocation(line: 3823, column: 11, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 3823, column: 11)
!7590 = !DILocation(line: 3823, column: 11, scope: !7587)
!7591 = !DILocation(line: 3824, column: 18, scope: !7589)
!7592 = !DILocation(line: 3824, column: 2, scope: !7589)
!7593 = !DILocation(line: 3827, column: 7, scope: !7587)
!7594 = !DILocation(line: 3831, column: 5, scope: !7587)
!7595 = !DILocation(line: 3833, column: 24, scope: !7498)
!7596 = !DILocation(line: 3833, column: 3, scope: !7498)
!7597 = !DILocation(line: 3833, column: 22, scope: !7498)
!7598 = !DILocation(line: 3834, column: 7, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3834, column: 7)
!7600 = !DILocation(line: 3834, column: 31, scope: !7599)
!7601 = !DILocation(line: 3834, column: 34, scope: !7599)
!7602 = !DILocation(line: 3834, column: 62, scope: !7599)
!7603 = !DILocation(line: 3834, column: 7, scope: !7498)
!7604 = !DILocation(line: 3835, column: 52, scope: !7599)
!7605 = !DILocation(line: 3835, column: 5, scope: !7599)
!7606 = !DILocation(line: 3835, column: 50, scope: !7599)
!7607 = !DILocation(line: 3836, column: 1, scope: !7498)
!7608 = distinct !DISubprogram(name: "set_insn_deleted", scope: !3, file: !3, line: 3842, type: !3725, scopeLine: 3843, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7609 = !DILocalVariable(name: "insn", arg: 1, scope: !7608, file: !3, line: 3842, type: !1125)
!7610 = !DILocation(line: 3842, column: 23, scope: !7608)
!7611 = !DILocation(line: 3844, column: 19, scope: !7608)
!7612 = !DILocation(line: 3844, column: 42, scope: !7608)
!7613 = !DILocation(line: 3844, column: 3, scope: !7608)
!7614 = !DILocation(line: 3845, column: 3, scope: !7608)
!7615 = !DILocation(line: 3846, column: 3, scope: !7608)
!7616 = !DILocation(line: 3846, column: 20, scope: !7608)
!7617 = !DILocation(line: 3847, column: 1, scope: !7608)
!7618 = distinct !DISubprogram(name: "remove_insn", scope: !3, file: !3, line: 3853, type: !3725, scopeLine: 3854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7619 = !DILocalVariable(name: "insn", arg: 1, scope: !7618, file: !3, line: 3853, type: !1125)
!7620 = !DILocation(line: 3853, column: 18, scope: !7618)
!7621 = !DILocalVariable(name: "next", scope: !7618, file: !3, line: 3855, type: !1125)
!7622 = !DILocation(line: 3855, column: 7, scope: !7618)
!7623 = !DILocation(line: 3855, column: 14, scope: !7618)
!7624 = !DILocalVariable(name: "prev", scope: !7618, file: !3, line: 3856, type: !1125)
!7625 = !DILocation(line: 3856, column: 7, scope: !7618)
!7626 = !DILocation(line: 3856, column: 14, scope: !7618)
!7627 = !DILocalVariable(name: "bb", scope: !7618, file: !3, line: 3857, type: !1505)
!7628 = !DILocation(line: 3857, column: 15, scope: !7618)
!7629 = !DILocation(line: 3860, column: 25, scope: !7618)
!7630 = !DILocation(line: 3860, column: 3, scope: !7618)
!7631 = !DILocation(line: 3862, column: 7, scope: !7632)
!7632 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 3862, column: 7)
!7633 = !DILocation(line: 3862, column: 7, scope: !7618)
!7634 = !DILocation(line: 3864, column: 26, scope: !7635)
!7635 = distinct !DILexicalBlock(scope: !7632, file: !3, line: 3863, column: 5)
!7636 = !DILocation(line: 3864, column: 7, scope: !7635)
!7637 = !DILocation(line: 3864, column: 24, scope: !7635)
!7638 = !DILocation(line: 3865, column: 11, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3865, column: 11)
!7640 = !DILocation(line: 3865, column: 33, scope: !7639)
!7641 = !DILocation(line: 3865, column: 36, scope: !7639)
!7642 = !DILocation(line: 3865, column: 62, scope: !7639)
!7643 = !DILocation(line: 3865, column: 11, scope: !7635)
!7644 = !DILocalVariable(name: "sequence", scope: !7645, file: !3, line: 3867, type: !1125)
!7645 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 3866, column: 2)
!7646 = !DILocation(line: 3867, column: 8, scope: !7645)
!7647 = !DILocation(line: 3867, column: 19, scope: !7645)
!7648 = !DILocation(line: 3868, column: 67, scope: !7645)
!7649 = !DILocation(line: 3868, column: 4, scope: !7645)
!7650 = !DILocation(line: 3868, column: 65, scope: !7645)
!7651 = !DILocation(line: 3869, column: 2, scope: !7645)
!7652 = !DILocation(line: 3870, column: 5, scope: !7635)
!7653 = !DILocation(line: 3871, column: 12, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7632, file: !3, line: 3871, column: 12)
!7655 = !DILocation(line: 3871, column: 26, scope: !7654)
!7656 = !DILocation(line: 3871, column: 23, scope: !7654)
!7657 = !DILocation(line: 3871, column: 12, scope: !7632)
!7658 = !DILocation(line: 3872, column: 18, scope: !7654)
!7659 = !DILocation(line: 3872, column: 16, scope: !7654)
!7660 = !DILocation(line: 3872, column: 5, scope: !7654)
!7661 = !DILocalVariable(name: "stack", scope: !7662, file: !3, line: 3875, type: !2171)
!7662 = distinct !DILexicalBlock(scope: !7654, file: !3, line: 3874, column: 5)
!7663 = !DILocation(line: 3875, column: 30, scope: !7662)
!7664 = !DILocation(line: 3875, column: 38, scope: !7662)
!7665 = !DILocation(line: 3877, column: 7, scope: !7662)
!7666 = !DILocation(line: 3877, column: 14, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7668, file: !3, line: 3877, column: 7)
!7668 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 3877, column: 7)
!7669 = !DILocation(line: 3877, column: 7, scope: !7668)
!7670 = !DILocation(line: 3878, column: 6, scope: !7671)
!7671 = distinct !DILexicalBlock(scope: !7667, file: !3, line: 3878, column: 6)
!7672 = !DILocation(line: 3878, column: 14, scope: !7671)
!7673 = !DILocation(line: 3878, column: 21, scope: !7671)
!7674 = !DILocation(line: 3878, column: 11, scope: !7671)
!7675 = !DILocation(line: 3878, column: 6, scope: !7667)
!7676 = !DILocation(line: 3880, column: 21, scope: !7677)
!7677 = distinct !DILexicalBlock(scope: !7671, file: !3, line: 3879, column: 4)
!7678 = !DILocation(line: 3880, column: 6, scope: !7677)
!7679 = !DILocation(line: 3880, column: 13, scope: !7677)
!7680 = !DILocation(line: 3880, column: 19, scope: !7677)
!7681 = !DILocation(line: 3881, column: 6, scope: !7677)
!7682 = !DILocation(line: 3877, column: 29, scope: !7667)
!7683 = !DILocation(line: 3877, column: 36, scope: !7667)
!7684 = !DILocation(line: 3877, column: 27, scope: !7667)
!7685 = !DILocation(line: 3877, column: 7, scope: !7667)
!7686 = distinct !{!7686, !7669, !7687}
!7687 = !DILocation(line: 3882, column: 4, scope: !7668)
!7688 = !DILocation(line: 3884, column: 7, scope: !7662)
!7689 = !DILocation(line: 3887, column: 7, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 3887, column: 7)
!7691 = !DILocation(line: 3887, column: 7, scope: !7618)
!7692 = !DILocation(line: 3889, column: 26, scope: !7693)
!7693 = distinct !DILexicalBlock(scope: !7690, file: !3, line: 3888, column: 5)
!7694 = !DILocation(line: 3889, column: 7, scope: !7693)
!7695 = !DILocation(line: 3889, column: 24, scope: !7693)
!7696 = !DILocation(line: 3890, column: 11, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7693, file: !3, line: 3890, column: 11)
!7698 = !DILocation(line: 3890, column: 33, scope: !7697)
!7699 = !DILocation(line: 3890, column: 36, scope: !7697)
!7700 = !DILocation(line: 3890, column: 62, scope: !7697)
!7701 = !DILocation(line: 3890, column: 11, scope: !7693)
!7702 = !DILocation(line: 3891, column: 47, scope: !7697)
!7703 = !DILocation(line: 3891, column: 2, scope: !7697)
!7704 = !DILocation(line: 3891, column: 45, scope: !7697)
!7705 = !DILocation(line: 3892, column: 5, scope: !7693)
!7706 = !DILocation(line: 3893, column: 12, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7690, file: !3, line: 3893, column: 12)
!7708 = !DILocation(line: 3893, column: 25, scope: !7707)
!7709 = !DILocation(line: 3893, column: 22, scope: !7707)
!7710 = !DILocation(line: 3893, column: 12, scope: !7690)
!7711 = !DILocation(line: 3894, column: 17, scope: !7707)
!7712 = !DILocation(line: 3894, column: 15, scope: !7707)
!7713 = !DILocation(line: 3894, column: 5, scope: !7707)
!7714 = !DILocalVariable(name: "stack", scope: !7715, file: !3, line: 3897, type: !2171)
!7715 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 3896, column: 5)
!7716 = !DILocation(line: 3897, column: 30, scope: !7715)
!7717 = !DILocation(line: 3897, column: 38, scope: !7715)
!7718 = !DILocation(line: 3899, column: 7, scope: !7715)
!7719 = !DILocation(line: 3899, column: 14, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7721, file: !3, line: 3899, column: 7)
!7721 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 3899, column: 7)
!7722 = !DILocation(line: 3899, column: 7, scope: !7721)
!7723 = !DILocation(line: 3900, column: 6, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 3900, column: 6)
!7725 = !DILocation(line: 3900, column: 14, scope: !7724)
!7726 = !DILocation(line: 3900, column: 21, scope: !7724)
!7727 = !DILocation(line: 3900, column: 11, scope: !7724)
!7728 = !DILocation(line: 3900, column: 6, scope: !7720)
!7729 = !DILocation(line: 3902, column: 20, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7724, file: !3, line: 3901, column: 4)
!7731 = !DILocation(line: 3902, column: 6, scope: !7730)
!7732 = !DILocation(line: 3902, column: 13, scope: !7730)
!7733 = !DILocation(line: 3902, column: 18, scope: !7730)
!7734 = !DILocation(line: 3903, column: 6, scope: !7730)
!7735 = !DILocation(line: 3899, column: 29, scope: !7720)
!7736 = !DILocation(line: 3899, column: 36, scope: !7720)
!7737 = !DILocation(line: 3899, column: 27, scope: !7720)
!7738 = !DILocation(line: 3899, column: 7, scope: !7720)
!7739 = distinct !{!7739, !7722, !7740}
!7740 = !DILocation(line: 3904, column: 4, scope: !7721)
!7741 = !DILocation(line: 3906, column: 7, scope: !7715)
!7742 = !DILocation(line: 3908, column: 8, scope: !7743)
!7743 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 3908, column: 7)
!7744 = !DILocation(line: 3909, column: 7, scope: !7743)
!7745 = !DILocation(line: 3909, column: 16, scope: !7743)
!7746 = !DILocation(line: 3909, column: 14, scope: !7743)
!7747 = !DILocation(line: 3908, column: 7, scope: !7618)
!7748 = !DILocation(line: 3911, column: 11, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 3911, column: 11)
!7750 = distinct !DILexicalBlock(scope: !7743, file: !3, line: 3910, column: 5)
!7751 = !DILocation(line: 3911, column: 11, scope: !7750)
!7752 = !DILocation(line: 3912, column: 19, scope: !7749)
!7753 = !DILocation(line: 3912, column: 2, scope: !7749)
!7754 = !DILocation(line: 3913, column: 11, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 3913, column: 11)
!7756 = !DILocation(line: 3913, column: 27, scope: !7755)
!7757 = !DILocation(line: 3913, column: 24, scope: !7755)
!7758 = !DILocation(line: 3913, column: 11, scope: !7750)
!7759 = !DILocation(line: 3917, column: 4, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 3914, column: 2)
!7761 = !DILocation(line: 3918, column: 19, scope: !7760)
!7762 = !DILocation(line: 3918, column: 4, scope: !7760)
!7763 = !DILocation(line: 3918, column: 17, scope: !7760)
!7764 = !DILocation(line: 3919, column: 2, scope: !7760)
!7765 = !DILocation(line: 3920, column: 11, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 3920, column: 11)
!7767 = !DILocation(line: 3920, column: 26, scope: !7766)
!7768 = !DILocation(line: 3920, column: 23, scope: !7766)
!7769 = !DILocation(line: 3920, column: 11, scope: !7750)
!7770 = !DILocation(line: 3921, column: 16, scope: !7766)
!7771 = !DILocation(line: 3921, column: 2, scope: !7766)
!7772 = !DILocation(line: 3921, column: 14, scope: !7766)
!7773 = !DILocation(line: 3922, column: 5, scope: !7750)
!7774 = !DILocation(line: 3923, column: 1, scope: !7618)
!7775 = distinct !DISubprogram(name: "add_function_usage_to", scope: !3, file: !3, line: 3928, type: !3382, scopeLine: 3929, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7776 = !DILocalVariable(name: "call_insn", arg: 1, scope: !7775, file: !3, line: 3928, type: !1125)
!7777 = !DILocation(line: 3928, column: 28, scope: !7775)
!7778 = !DILocalVariable(name: "call_fusage", arg: 2, scope: !7775, file: !3, line: 3928, type: !1125)
!7779 = !DILocation(line: 3928, column: 43, scope: !7775)
!7780 = !DILocation(line: 3930, column: 3, scope: !7775)
!7781 = !DILocation(line: 3934, column: 7, scope: !7782)
!7782 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 3934, column: 7)
!7783 = !DILocation(line: 3934, column: 7, scope: !7775)
!7784 = !DILocalVariable(name: "link", scope: !7785, file: !3, line: 3936, type: !1125)
!7785 = distinct !DILexicalBlock(scope: !7782, file: !3, line: 3935, column: 5)
!7786 = !DILocation(line: 3936, column: 11, scope: !7785)
!7787 = !DILocation(line: 3938, column: 19, scope: !7788)
!7788 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 3938, column: 7)
!7789 = !DILocation(line: 3938, column: 17, scope: !7788)
!7790 = !DILocation(line: 3938, column: 12, scope: !7788)
!7791 = !DILocation(line: 3938, column: 57, scope: !7792)
!7792 = distinct !DILexicalBlock(scope: !7788, file: !3, line: 3938, column: 7)
!7793 = !DILocation(line: 3938, column: 72, scope: !7792)
!7794 = !DILocation(line: 3938, column: 7, scope: !7788)
!7795 = !DILocation(line: 3939, column: 12, scope: !7792)
!7796 = !DILocation(line: 3939, column: 10, scope: !7792)
!7797 = !DILocation(line: 3938, column: 7, scope: !7792)
!7798 = distinct !{!7798, !7794, !7799}
!7799 = !DILocation(line: 3940, column: 2, scope: !7788)
!7800 = !DILocation(line: 3942, column: 24, scope: !7785)
!7801 = !DILocation(line: 3942, column: 7, scope: !7785)
!7802 = !DILocation(line: 3942, column: 22, scope: !7785)
!7803 = !DILocation(line: 3943, column: 5, scope: !7785)
!7804 = !DILocation(line: 3945, column: 44, scope: !7782)
!7805 = !DILocation(line: 3945, column: 5, scope: !7782)
!7806 = !DILocation(line: 3945, column: 42, scope: !7782)
!7807 = !DILocation(line: 3946, column: 1, scope: !7775)
!7808 = distinct !DISubprogram(name: "delete_insns_since", scope: !3, file: !3, line: 3952, type: !3725, scopeLine: 3953, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7809 = !DILocalVariable(name: "from", arg: 1, scope: !7808, file: !3, line: 3952, type: !1125)
!7810 = !DILocation(line: 3952, column: 25, scope: !7808)
!7811 = !DILocation(line: 3954, column: 7, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7808, file: !3, line: 3954, column: 7)
!7813 = !DILocation(line: 3954, column: 12, scope: !7812)
!7814 = !DILocation(line: 3954, column: 7, scope: !7808)
!7815 = !DILocation(line: 3955, column: 16, scope: !7812)
!7816 = !DILocation(line: 3955, column: 5, scope: !7812)
!7817 = !DILocation(line: 3957, column: 5, scope: !7812)
!7818 = !DILocation(line: 3957, column: 22, scope: !7812)
!7819 = !DILocation(line: 3958, column: 15, scope: !7808)
!7820 = !DILocation(line: 3958, column: 13, scope: !7808)
!7821 = !DILocation(line: 3959, column: 1, scope: !7808)
!7822 = distinct !DISubprogram(name: "reorder_insns_nobb", scope: !3, file: !3, line: 3972, type: !7823, scopeLine: 3973, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7823 = !DISubroutineType(types: !7824)
!7824 = !{null, !1125, !1125, !1125}
!7825 = !DILocalVariable(name: "from", arg: 1, scope: !7822, file: !3, line: 3972, type: !1125)
!7826 = !DILocation(line: 3972, column: 25, scope: !7822)
!7827 = !DILocalVariable(name: "to", arg: 2, scope: !7822, file: !3, line: 3972, type: !1125)
!7828 = !DILocation(line: 3972, column: 35, scope: !7822)
!7829 = !DILocalVariable(name: "after", arg: 3, scope: !7822, file: !3, line: 3972, type: !1125)
!7830 = !DILocation(line: 3972, column: 43, scope: !7822)
!7831 = !DILocation(line: 3975, column: 7, scope: !7832)
!7832 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3975, column: 7)
!7833 = !DILocation(line: 3975, column: 7, scope: !7822)
!7834 = !DILocation(line: 3976, column: 36, scope: !7832)
!7835 = !DILocation(line: 3976, column: 5, scope: !7832)
!7836 = !DILocation(line: 3976, column: 34, scope: !7832)
!7837 = !DILocation(line: 3977, column: 7, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3977, column: 7)
!7839 = !DILocation(line: 3977, column: 7, scope: !7822)
!7840 = !DILocation(line: 3978, column: 34, scope: !7838)
!7841 = !DILocation(line: 3978, column: 5, scope: !7838)
!7842 = !DILocation(line: 3978, column: 32, scope: !7838)
!7843 = !DILocation(line: 3979, column: 7, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3979, column: 7)
!7845 = !DILocation(line: 3979, column: 20, scope: !7844)
!7846 = !DILocation(line: 3979, column: 17, scope: !7844)
!7847 = !DILocation(line: 3979, column: 7, scope: !7822)
!7848 = !DILocation(line: 3980, column: 17, scope: !7844)
!7849 = !DILocation(line: 3980, column: 15, scope: !7844)
!7850 = !DILocation(line: 3980, column: 5, scope: !7844)
!7851 = !DILocation(line: 3981, column: 7, scope: !7852)
!7852 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3981, column: 7)
!7853 = !DILocation(line: 3981, column: 21, scope: !7852)
!7854 = !DILocation(line: 3981, column: 18, scope: !7852)
!7855 = !DILocation(line: 3981, column: 7, scope: !7822)
!7856 = !DILocation(line: 3982, column: 18, scope: !7852)
!7857 = !DILocation(line: 3982, column: 16, scope: !7852)
!7858 = !DILocation(line: 3982, column: 5, scope: !7852)
!7859 = !DILocation(line: 3985, column: 7, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3985, column: 7)
!7861 = !DILocation(line: 3985, column: 7, scope: !7822)
!7862 = !DILocation(line: 3986, column: 37, scope: !7860)
!7863 = !DILocation(line: 3986, column: 5, scope: !7860)
!7864 = !DILocation(line: 3986, column: 35, scope: !7860)
!7865 = !DILocation(line: 3988, column: 20, scope: !7822)
!7866 = !DILocation(line: 3988, column: 3, scope: !7822)
!7867 = !DILocation(line: 3988, column: 18, scope: !7822)
!7868 = !DILocation(line: 3989, column: 22, scope: !7822)
!7869 = !DILocation(line: 3989, column: 3, scope: !7822)
!7870 = !DILocation(line: 3989, column: 20, scope: !7822)
!7871 = !DILocation(line: 3990, column: 23, scope: !7822)
!7872 = !DILocation(line: 3990, column: 3, scope: !7822)
!7873 = !DILocation(line: 3990, column: 21, scope: !7822)
!7874 = !DILocation(line: 3991, column: 7, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 3991, column: 7)
!7876 = !DILocation(line: 3991, column: 16, scope: !7875)
!7877 = !DILocation(line: 3991, column: 13, scope: !7875)
!7878 = !DILocation(line: 3991, column: 7, scope: !7822)
!7879 = !DILocation(line: 3992, column: 17, scope: !7875)
!7880 = !DILocation(line: 3992, column: 15, scope: !7875)
!7881 = !DILocation(line: 3992, column: 5, scope: !7875)
!7882 = !DILocation(line: 3993, column: 1, scope: !7822)
!7883 = distinct !DISubprogram(name: "reorder_insns", scope: !3, file: !3, line: 3997, type: !7823, scopeLine: 3998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7884 = !DILocalVariable(name: "from", arg: 1, scope: !7883, file: !3, line: 3997, type: !1125)
!7885 = !DILocation(line: 3997, column: 20, scope: !7883)
!7886 = !DILocalVariable(name: "to", arg: 2, scope: !7883, file: !3, line: 3997, type: !1125)
!7887 = !DILocation(line: 3997, column: 30, scope: !7883)
!7888 = !DILocalVariable(name: "after", arg: 3, scope: !7883, file: !3, line: 3997, type: !1125)
!7889 = !DILocation(line: 3997, column: 38, scope: !7883)
!7890 = !DILocalVariable(name: "prev", scope: !7883, file: !3, line: 3999, type: !1125)
!7891 = !DILocation(line: 3999, column: 7, scope: !7883)
!7892 = !DILocation(line: 3999, column: 14, scope: !7883)
!7893 = !DILocalVariable(name: "bb", scope: !7883, file: !3, line: 4000, type: !1505)
!7894 = !DILocation(line: 4000, column: 15, scope: !7883)
!7895 = !DILocalVariable(name: "bb2", scope: !7883, file: !3, line: 4000, type: !1505)
!7896 = !DILocation(line: 4000, column: 19, scope: !7883)
!7897 = !DILocation(line: 4002, column: 23, scope: !7883)
!7898 = !DILocation(line: 4002, column: 29, scope: !7883)
!7899 = !DILocation(line: 4002, column: 33, scope: !7883)
!7900 = !DILocation(line: 4002, column: 3, scope: !7883)
!7901 = !DILocation(line: 4004, column: 8, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7883, file: !3, line: 4004, column: 7)
!7903 = !DILocation(line: 4005, column: 7, scope: !7902)
!7904 = !DILocation(line: 4005, column: 16, scope: !7902)
!7905 = !DILocation(line: 4005, column: 14, scope: !7902)
!7906 = !DILocation(line: 4004, column: 7, scope: !7883)
!7907 = !DILocalVariable(name: "x", scope: !7908, file: !3, line: 4007, type: !1125)
!7908 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 4006, column: 5)
!7909 = !DILocation(line: 4007, column: 11, scope: !7908)
!7910 = !DILocation(line: 4008, column: 24, scope: !7908)
!7911 = !DILocation(line: 4008, column: 7, scope: !7908)
!7912 = !DILocation(line: 4010, column: 12, scope: !7913)
!7913 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 4010, column: 11)
!7914 = !DILocation(line: 4011, column: 4, scope: !7913)
!7915 = !DILocation(line: 4011, column: 14, scope: !7913)
!7916 = !DILocation(line: 4011, column: 12, scope: !7913)
!7917 = !DILocation(line: 4010, column: 11, scope: !7908)
!7918 = !DILocation(line: 4013, column: 8, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 4013, column: 8)
!7920 = distinct !DILexicalBlock(scope: !7913, file: !3, line: 4012, column: 2)
!7921 = !DILocation(line: 4013, column: 24, scope: !7919)
!7922 = !DILocation(line: 4013, column: 21, scope: !7919)
!7923 = !DILocation(line: 4013, column: 8, scope: !7920)
!7924 = !DILocation(line: 4014, column: 21, scope: !7919)
!7925 = !DILocation(line: 4014, column: 6, scope: !7919)
!7926 = !DILocation(line: 4014, column: 19, scope: !7919)
!7927 = !DILocation(line: 4015, column: 21, scope: !7920)
!7928 = !DILocation(line: 4015, column: 4, scope: !7920)
!7929 = !DILocation(line: 4016, column: 2, scope: !7920)
!7930 = !DILocation(line: 4018, column: 11, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 4018, column: 11)
!7932 = !DILocation(line: 4018, column: 26, scope: !7931)
!7933 = !DILocation(line: 4018, column: 23, scope: !7931)
!7934 = !DILocation(line: 4018, column: 11, scope: !7908)
!7935 = !DILocation(line: 4019, column: 16, scope: !7931)
!7936 = !DILocation(line: 4019, column: 2, scope: !7931)
!7937 = !DILocation(line: 4019, column: 14, scope: !7931)
!7938 = !DILocation(line: 4021, column: 16, scope: !7939)
!7939 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 4021, column: 7)
!7940 = !DILocation(line: 4021, column: 14, scope: !7939)
!7941 = !DILocation(line: 4021, column: 12, scope: !7939)
!7942 = !DILocation(line: 4021, column: 22, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7939, file: !3, line: 4021, column: 7)
!7944 = !DILocation(line: 4021, column: 27, scope: !7943)
!7945 = !DILocation(line: 4021, column: 24, scope: !7943)
!7946 = !DILocation(line: 4021, column: 7, scope: !7939)
!7947 = !DILocation(line: 4022, column: 7, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7943, file: !3, line: 4022, column: 6)
!7949 = !DILocation(line: 4022, column: 6, scope: !7943)
!7950 = !DILocation(line: 4023, column: 23, scope: !7948)
!7951 = !DILocation(line: 4023, column: 26, scope: !7948)
!7952 = !DILocation(line: 4023, column: 4, scope: !7948)
!7953 = !DILocation(line: 4021, column: 47, scope: !7943)
!7954 = !DILocation(line: 4021, column: 45, scope: !7943)
!7955 = !DILocation(line: 4021, column: 7, scope: !7943)
!7956 = distinct !{!7956, !7946, !7957}
!7957 = !DILocation(line: 4023, column: 28, scope: !7939)
!7958 = !DILocation(line: 4024, column: 5, scope: !7908)
!7959 = !DILocation(line: 4025, column: 1, scope: !7883)
!7960 = distinct !DISubprogram(name: "emit_insn_before_noloc", scope: !3, file: !3, line: 4056, type: !7961, scopeLine: 4057, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!7961 = !DISubroutineType(types: !7962)
!7962 = !{!1125, !1125, !1125, !1505}
!7963 = !DILocalVariable(name: "x", arg: 1, scope: !7960, file: !3, line: 4056, type: !1125)
!7964 = !DILocation(line: 4056, column: 29, scope: !7960)
!7965 = !DILocalVariable(name: "before", arg: 2, scope: !7960, file: !3, line: 4056, type: !1125)
!7966 = !DILocation(line: 4056, column: 36, scope: !7960)
!7967 = !DILocalVariable(name: "bb", arg: 3, scope: !7960, file: !3, line: 4056, type: !1505)
!7968 = !DILocation(line: 4056, column: 56, scope: !7960)
!7969 = !DILocalVariable(name: "last", scope: !7960, file: !3, line: 4058, type: !1125)
!7970 = !DILocation(line: 4058, column: 7, scope: !7960)
!7971 = !DILocation(line: 4058, column: 14, scope: !7960)
!7972 = !DILocalVariable(name: "insn", scope: !7960, file: !3, line: 4059, type: !1125)
!7973 = !DILocation(line: 4059, column: 7, scope: !7960)
!7974 = !DILocation(line: 4061, column: 3, scope: !7960)
!7975 = !DILocation(line: 4063, column: 7, scope: !7976)
!7976 = distinct !DILexicalBlock(scope: !7960, file: !3, line: 4063, column: 7)
!7977 = !DILocation(line: 4063, column: 9, scope: !7976)
!7978 = !DILocation(line: 4063, column: 7, scope: !7960)
!7979 = !DILocation(line: 4064, column: 12, scope: !7976)
!7980 = !DILocation(line: 4064, column: 5, scope: !7976)
!7981 = !DILocation(line: 4066, column: 11, scope: !7960)
!7982 = !DILocation(line: 4066, column: 3, scope: !7960)
!7983 = !DILocation(line: 4075, column: 14, scope: !7984)
!7984 = distinct !DILexicalBlock(scope: !7960, file: !3, line: 4067, column: 5)
!7985 = !DILocation(line: 4075, column: 12, scope: !7984)
!7986 = !DILocation(line: 4076, column: 7, scope: !7984)
!7987 = !DILocation(line: 4076, column: 14, scope: !7984)
!7988 = !DILocalVariable(name: "next", scope: !7989, file: !3, line: 4078, type: !1125)
!7989 = distinct !DILexicalBlock(scope: !7984, file: !3, line: 4077, column: 2)
!7990 = !DILocation(line: 4078, column: 8, scope: !7989)
!7991 = !DILocation(line: 4078, column: 15, scope: !7989)
!7992 = !DILocation(line: 4079, column: 21, scope: !7989)
!7993 = !DILocation(line: 4079, column: 27, scope: !7989)
!7994 = !DILocation(line: 4079, column: 35, scope: !7989)
!7995 = !DILocation(line: 4079, column: 4, scope: !7989)
!7996 = !DILocation(line: 4080, column: 11, scope: !7989)
!7997 = !DILocation(line: 4080, column: 9, scope: !7989)
!7998 = !DILocation(line: 4081, column: 11, scope: !7989)
!7999 = !DILocation(line: 4081, column: 9, scope: !7989)
!8000 = distinct !{!8000, !7986, !8001}
!8001 = !DILocation(line: 4082, column: 2, scope: !7984)
!8002 = !DILocation(line: 4083, column: 7, scope: !7984)
!8003 = !DILocation(line: 4092, column: 29, scope: !7984)
!8004 = !DILocation(line: 4092, column: 14, scope: !7984)
!8005 = !DILocation(line: 4092, column: 12, scope: !7984)
!8006 = !DILocation(line: 4093, column: 24, scope: !7984)
!8007 = !DILocation(line: 4093, column: 30, scope: !7984)
!8008 = !DILocation(line: 4093, column: 38, scope: !7984)
!8009 = !DILocation(line: 4093, column: 7, scope: !7984)
!8010 = !DILocation(line: 4094, column: 7, scope: !7984)
!8011 = !DILocation(line: 4097, column: 10, scope: !7960)
!8012 = !DILocation(line: 4097, column: 3, scope: !7960)
!8013 = !DILocation(line: 4098, column: 1, scope: !7960)
!8014 = distinct !DISubprogram(name: "emit_jump_insn_before_noloc", scope: !3, file: !3, line: 4104, type: !4222, scopeLine: 4105, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8015 = !DILocalVariable(name: "x", arg: 1, scope: !8014, file: !3, line: 4104, type: !1125)
!8016 = !DILocation(line: 4104, column: 34, scope: !8014)
!8017 = !DILocalVariable(name: "before", arg: 2, scope: !8014, file: !3, line: 4104, type: !1125)
!8018 = !DILocation(line: 4104, column: 41, scope: !8014)
!8019 = !DILocalVariable(name: "insn", scope: !8014, file: !3, line: 4106, type: !1125)
!8020 = !DILocation(line: 4106, column: 7, scope: !8014)
!8021 = !DILocalVariable(name: "last", scope: !8014, file: !3, line: 4106, type: !1125)
!8022 = !DILocation(line: 4106, column: 13, scope: !8014)
!8023 = !DILocation(line: 4108, column: 3, scope: !8014)
!8024 = !DILocation(line: 4110, column: 11, scope: !8014)
!8025 = !DILocation(line: 4110, column: 3, scope: !8014)
!8026 = !DILocation(line: 4119, column: 14, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8014, file: !3, line: 4111, column: 5)
!8028 = !DILocation(line: 4119, column: 12, scope: !8027)
!8029 = !DILocation(line: 4120, column: 7, scope: !8027)
!8030 = !DILocation(line: 4120, column: 14, scope: !8027)
!8031 = !DILocalVariable(name: "next", scope: !8032, file: !3, line: 4122, type: !1125)
!8032 = distinct !DILexicalBlock(scope: !8027, file: !3, line: 4121, column: 2)
!8033 = !DILocation(line: 4122, column: 8, scope: !8032)
!8034 = !DILocation(line: 4122, column: 15, scope: !8032)
!8035 = !DILocation(line: 4123, column: 21, scope: !8032)
!8036 = !DILocation(line: 4123, column: 27, scope: !8032)
!8037 = !DILocation(line: 4123, column: 4, scope: !8032)
!8038 = !DILocation(line: 4124, column: 11, scope: !8032)
!8039 = !DILocation(line: 4124, column: 9, scope: !8032)
!8040 = !DILocation(line: 4125, column: 11, scope: !8032)
!8041 = !DILocation(line: 4125, column: 9, scope: !8032)
!8042 = distinct !{!8042, !8029, !8043}
!8043 = !DILocation(line: 4126, column: 2, scope: !8027)
!8044 = !DILocation(line: 4127, column: 7, scope: !8027)
!8045 = !DILocation(line: 4136, column: 34, scope: !8027)
!8046 = !DILocation(line: 4136, column: 14, scope: !8027)
!8047 = !DILocation(line: 4136, column: 12, scope: !8027)
!8048 = !DILocation(line: 4137, column: 24, scope: !8027)
!8049 = !DILocation(line: 4137, column: 30, scope: !8027)
!8050 = !DILocation(line: 4137, column: 7, scope: !8027)
!8051 = !DILocation(line: 4138, column: 7, scope: !8027)
!8052 = !DILocation(line: 4141, column: 10, scope: !8014)
!8053 = !DILocation(line: 4141, column: 3, scope: !8014)
!8054 = distinct !DISubprogram(name: "emit_call_insn_before_noloc", scope: !3, file: !3, line: 4148, type: !4222, scopeLine: 4149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8055 = !DILocalVariable(name: "x", arg: 1, scope: !8054, file: !3, line: 4148, type: !1125)
!8056 = !DILocation(line: 4148, column: 34, scope: !8054)
!8057 = !DILocalVariable(name: "before", arg: 2, scope: !8054, file: !3, line: 4148, type: !1125)
!8058 = !DILocation(line: 4148, column: 41, scope: !8054)
!8059 = !DILocalVariable(name: "last", scope: !8054, file: !3, line: 4150, type: !1125)
!8060 = !DILocation(line: 4150, column: 7, scope: !8054)
!8061 = !DILocalVariable(name: "insn", scope: !8054, file: !3, line: 4150, type: !1125)
!8062 = !DILocation(line: 4150, column: 24, scope: !8054)
!8063 = !DILocation(line: 4152, column: 3, scope: !8054)
!8064 = !DILocation(line: 4154, column: 11, scope: !8054)
!8065 = !DILocation(line: 4154, column: 3, scope: !8054)
!8066 = !DILocation(line: 4163, column: 14, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8054, file: !3, line: 4155, column: 5)
!8068 = !DILocation(line: 4163, column: 12, scope: !8067)
!8069 = !DILocation(line: 4164, column: 7, scope: !8067)
!8070 = !DILocation(line: 4164, column: 14, scope: !8067)
!8071 = !DILocalVariable(name: "next", scope: !8072, file: !3, line: 4166, type: !1125)
!8072 = distinct !DILexicalBlock(scope: !8067, file: !3, line: 4165, column: 2)
!8073 = !DILocation(line: 4166, column: 8, scope: !8072)
!8074 = !DILocation(line: 4166, column: 15, scope: !8072)
!8075 = !DILocation(line: 4167, column: 21, scope: !8072)
!8076 = !DILocation(line: 4167, column: 27, scope: !8072)
!8077 = !DILocation(line: 4167, column: 4, scope: !8072)
!8078 = !DILocation(line: 4168, column: 11, scope: !8072)
!8079 = !DILocation(line: 4168, column: 9, scope: !8072)
!8080 = !DILocation(line: 4169, column: 11, scope: !8072)
!8081 = !DILocation(line: 4169, column: 9, scope: !8072)
!8082 = distinct !{!8082, !8069, !8083}
!8083 = !DILocation(line: 4170, column: 2, scope: !8067)
!8084 = !DILocation(line: 4171, column: 7, scope: !8067)
!8085 = !DILocation(line: 4180, column: 34, scope: !8067)
!8086 = !DILocation(line: 4180, column: 14, scope: !8067)
!8087 = !DILocation(line: 4180, column: 12, scope: !8067)
!8088 = !DILocation(line: 4181, column: 24, scope: !8067)
!8089 = !DILocation(line: 4181, column: 30, scope: !8067)
!8090 = !DILocation(line: 4181, column: 7, scope: !8067)
!8091 = !DILocation(line: 4182, column: 7, scope: !8067)
!8092 = !DILocation(line: 4185, column: 10, scope: !8054)
!8093 = !DILocation(line: 4185, column: 3, scope: !8054)
!8094 = distinct !DISubprogram(name: "make_call_insn_raw", scope: !3, file: !3, line: 3678, type: !2610, scopeLine: 3679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8095 = !DILocalVariable(name: "pattern", arg: 1, scope: !8094, file: !3, line: 3678, type: !1125)
!8096 = !DILocation(line: 3678, column: 25, scope: !8094)
!8097 = !DILocalVariable(name: "insn", scope: !8094, file: !3, line: 3680, type: !1125)
!8098 = !DILocation(line: 3680, column: 7, scope: !8094)
!8099 = !DILocation(line: 3682, column: 10, scope: !8094)
!8100 = !DILocation(line: 3682, column: 8, scope: !8094)
!8101 = !DILocation(line: 3683, column: 33, scope: !8094)
!8102 = !DILocation(line: 3683, column: 3, scope: !8094)
!8103 = !DILocation(line: 3683, column: 19, scope: !8094)
!8104 = !DILocation(line: 3685, column: 20, scope: !8094)
!8105 = !DILocation(line: 3685, column: 3, scope: !8094)
!8106 = !DILocation(line: 3685, column: 18, scope: !8094)
!8107 = !DILocation(line: 3686, column: 3, scope: !8094)
!8108 = !DILocation(line: 3686, column: 20, scope: !8094)
!8109 = !DILocation(line: 3687, column: 3, scope: !8094)
!8110 = !DILocation(line: 3687, column: 20, scope: !8094)
!8111 = !DILocation(line: 3688, column: 3, scope: !8094)
!8112 = !DILocation(line: 3688, column: 35, scope: !8094)
!8113 = !DILocation(line: 3689, column: 25, scope: !8094)
!8114 = !DILocation(line: 3689, column: 3, scope: !8094)
!8115 = !DILocation(line: 3689, column: 23, scope: !8094)
!8116 = !DILocation(line: 3690, column: 3, scope: !8094)
!8117 = !DILocation(line: 3690, column: 25, scope: !8094)
!8118 = !DILocation(line: 3692, column: 10, scope: !8094)
!8119 = !DILocation(line: 3692, column: 3, scope: !8094)
!8120 = distinct !DISubprogram(name: "emit_debug_insn_before_noloc", scope: !3, file: !3, line: 4192, type: !4222, scopeLine: 4193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8121 = !DILocalVariable(name: "x", arg: 1, scope: !8120, file: !3, line: 4192, type: !1125)
!8122 = !DILocation(line: 4192, column: 35, scope: !8120)
!8123 = !DILocalVariable(name: "before", arg: 2, scope: !8120, file: !3, line: 4192, type: !1125)
!8124 = !DILocation(line: 4192, column: 42, scope: !8120)
!8125 = !DILocalVariable(name: "last", scope: !8120, file: !3, line: 4194, type: !1125)
!8126 = !DILocation(line: 4194, column: 7, scope: !8120)
!8127 = !DILocalVariable(name: "insn", scope: !8120, file: !3, line: 4194, type: !1125)
!8128 = !DILocation(line: 4194, column: 24, scope: !8120)
!8129 = !DILocation(line: 4196, column: 3, scope: !8120)
!8130 = !DILocation(line: 4198, column: 11, scope: !8120)
!8131 = !DILocation(line: 4198, column: 3, scope: !8120)
!8132 = !DILocation(line: 4207, column: 14, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8120, file: !3, line: 4199, column: 5)
!8134 = !DILocation(line: 4207, column: 12, scope: !8133)
!8135 = !DILocation(line: 4208, column: 7, scope: !8133)
!8136 = !DILocation(line: 4208, column: 14, scope: !8133)
!8137 = !DILocalVariable(name: "next", scope: !8138, file: !3, line: 4210, type: !1125)
!8138 = distinct !DILexicalBlock(scope: !8133, file: !3, line: 4209, column: 2)
!8139 = !DILocation(line: 4210, column: 8, scope: !8138)
!8140 = !DILocation(line: 4210, column: 15, scope: !8138)
!8141 = !DILocation(line: 4211, column: 21, scope: !8138)
!8142 = !DILocation(line: 4211, column: 27, scope: !8138)
!8143 = !DILocation(line: 4211, column: 4, scope: !8138)
!8144 = !DILocation(line: 4212, column: 11, scope: !8138)
!8145 = !DILocation(line: 4212, column: 9, scope: !8138)
!8146 = !DILocation(line: 4213, column: 11, scope: !8138)
!8147 = !DILocation(line: 4213, column: 9, scope: !8138)
!8148 = distinct !{!8148, !8135, !8149}
!8149 = !DILocation(line: 4214, column: 2, scope: !8133)
!8150 = !DILocation(line: 4215, column: 7, scope: !8133)
!8151 = !DILocation(line: 4224, column: 35, scope: !8133)
!8152 = !DILocation(line: 4224, column: 14, scope: !8133)
!8153 = !DILocation(line: 4224, column: 12, scope: !8133)
!8154 = !DILocation(line: 4225, column: 24, scope: !8133)
!8155 = !DILocation(line: 4225, column: 30, scope: !8133)
!8156 = !DILocation(line: 4225, column: 7, scope: !8133)
!8157 = !DILocation(line: 4226, column: 7, scope: !8133)
!8158 = !DILocation(line: 4229, column: 10, scope: !8120)
!8159 = !DILocation(line: 4229, column: 3, scope: !8120)
!8160 = distinct !DISubprogram(name: "emit_barrier_before", scope: !3, file: !3, line: 4236, type: !2610, scopeLine: 4237, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8161 = !DILocalVariable(name: "before", arg: 1, scope: !8160, file: !3, line: 4236, type: !1125)
!8162 = !DILocation(line: 4236, column: 26, scope: !8160)
!8163 = !DILocalVariable(name: "insn", scope: !8160, file: !3, line: 4238, type: !1125)
!8164 = !DILocation(line: 4238, column: 7, scope: !8160)
!8165 = !DILocation(line: 4238, column: 14, scope: !8160)
!8166 = !DILocation(line: 4240, column: 33, scope: !8160)
!8167 = !DILocation(line: 4240, column: 3, scope: !8160)
!8168 = !DILocation(line: 4240, column: 19, scope: !8160)
!8169 = !DILocation(line: 4242, column: 20, scope: !8160)
!8170 = !DILocation(line: 4242, column: 26, scope: !8160)
!8171 = !DILocation(line: 4242, column: 3, scope: !8160)
!8172 = !DILocation(line: 4243, column: 10, scope: !8160)
!8173 = !DILocation(line: 4243, column: 3, scope: !8160)
!8174 = distinct !DISubprogram(name: "emit_label_before", scope: !3, file: !3, line: 4249, type: !4222, scopeLine: 4250, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8175 = !DILocalVariable(name: "label", arg: 1, scope: !8174, file: !3, line: 4249, type: !1125)
!8176 = !DILocation(line: 4249, column: 24, scope: !8174)
!8177 = !DILocalVariable(name: "before", arg: 2, scope: !8174, file: !3, line: 4249, type: !1125)
!8178 = !DILocation(line: 4249, column: 35, scope: !8174)
!8179 = !DILocation(line: 4253, column: 7, scope: !8180)
!8180 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 4253, column: 7)
!8181 = !DILocation(line: 4253, column: 24, scope: !8180)
!8182 = !DILocation(line: 4253, column: 7, scope: !8174)
!8183 = !DILocation(line: 4255, column: 38, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 4254, column: 5)
!8185 = !DILocation(line: 4255, column: 7, scope: !8184)
!8186 = !DILocation(line: 4255, column: 24, scope: !8184)
!8187 = !DILocation(line: 4256, column: 24, scope: !8184)
!8188 = !DILocation(line: 4256, column: 31, scope: !8184)
!8189 = !DILocation(line: 4256, column: 7, scope: !8184)
!8190 = !DILocation(line: 4257, column: 5, scope: !8184)
!8191 = !DILocation(line: 4259, column: 10, scope: !8174)
!8192 = !DILocation(line: 4259, column: 3, scope: !8174)
!8193 = distinct !DISubprogram(name: "emit_note_before", scope: !3, file: !3, line: 4265, type: !8194, scopeLine: 4266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8194 = !DISubroutineType(types: !8195)
!8195 = !{!1125, !1073, !1125}
!8196 = !DILocalVariable(name: "subtype", arg: 1, scope: !8193, file: !3, line: 4265, type: !1073)
!8197 = !DILocation(line: 4265, column: 34, scope: !8193)
!8198 = !DILocalVariable(name: "before", arg: 2, scope: !8193, file: !3, line: 4265, type: !1125)
!8199 = !DILocation(line: 4265, column: 47, scope: !8193)
!8200 = !DILocalVariable(name: "note", scope: !8193, file: !3, line: 4267, type: !1125)
!8201 = !DILocation(line: 4267, column: 7, scope: !8193)
!8202 = !DILocation(line: 4267, column: 14, scope: !8193)
!8203 = !DILocation(line: 4268, column: 33, scope: !8193)
!8204 = !DILocation(line: 4268, column: 3, scope: !8193)
!8205 = !DILocation(line: 4268, column: 19, scope: !8193)
!8206 = !DILocation(line: 4269, column: 22, scope: !8193)
!8207 = !DILocation(line: 4269, column: 3, scope: !8193)
!8208 = !DILocation(line: 4269, column: 20, scope: !8193)
!8209 = !DILocation(line: 4270, column: 3, scope: !8193)
!8210 = !DILocation(line: 4270, column: 25, scope: !8193)
!8211 = !DILocation(line: 4271, column: 12, scope: !8193)
!8212 = !DILocation(line: 4271, column: 3, scope: !8193)
!8213 = !DILocation(line: 4273, column: 20, scope: !8193)
!8214 = !DILocation(line: 4273, column: 26, scope: !8193)
!8215 = !DILocation(line: 4273, column: 3, scope: !8193)
!8216 = !DILocation(line: 4274, column: 10, scope: !8193)
!8217 = !DILocation(line: 4274, column: 3, scope: !8193)
!8218 = distinct !DISubprogram(name: "emit_insn_after_noloc", scope: !3, file: !3, line: 4327, type: !7961, scopeLine: 4328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8219 = !DILocalVariable(name: "x", arg: 1, scope: !8218, file: !3, line: 4327, type: !1125)
!8220 = !DILocation(line: 4327, column: 28, scope: !8218)
!8221 = !DILocalVariable(name: "after", arg: 2, scope: !8218, file: !3, line: 4327, type: !1125)
!8222 = !DILocation(line: 4327, column: 35, scope: !8218)
!8223 = !DILocalVariable(name: "bb", arg: 3, scope: !8218, file: !3, line: 4327, type: !1505)
!8224 = !DILocation(line: 4327, column: 54, scope: !8218)
!8225 = !DILocalVariable(name: "last", scope: !8218, file: !3, line: 4329, type: !1125)
!8226 = !DILocation(line: 4329, column: 7, scope: !8218)
!8227 = !DILocation(line: 4329, column: 14, scope: !8218)
!8228 = !DILocation(line: 4331, column: 3, scope: !8218)
!8229 = !DILocation(line: 4333, column: 7, scope: !8230)
!8230 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 4333, column: 7)
!8231 = !DILocation(line: 4333, column: 9, scope: !8230)
!8232 = !DILocation(line: 4333, column: 7, scope: !8218)
!8233 = !DILocation(line: 4334, column: 12, scope: !8230)
!8234 = !DILocation(line: 4334, column: 5, scope: !8230)
!8235 = !DILocation(line: 4336, column: 11, scope: !8218)
!8236 = !DILocation(line: 4336, column: 3, scope: !8218)
!8237 = !DILocation(line: 4345, column: 33, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 4337, column: 5)
!8239 = !DILocation(line: 4345, column: 36, scope: !8238)
!8240 = !DILocation(line: 4345, column: 43, scope: !8238)
!8241 = !DILocation(line: 4345, column: 14, scope: !8238)
!8242 = !DILocation(line: 4345, column: 12, scope: !8238)
!8243 = !DILocation(line: 4346, column: 7, scope: !8238)
!8244 = !DILocation(line: 4355, column: 29, scope: !8238)
!8245 = !DILocation(line: 4355, column: 14, scope: !8238)
!8246 = !DILocation(line: 4355, column: 12, scope: !8238)
!8247 = !DILocation(line: 4356, column: 23, scope: !8238)
!8248 = !DILocation(line: 4356, column: 29, scope: !8238)
!8249 = !DILocation(line: 4356, column: 36, scope: !8238)
!8250 = !DILocation(line: 4356, column: 7, scope: !8238)
!8251 = !DILocation(line: 4357, column: 7, scope: !8238)
!8252 = !DILocation(line: 4360, column: 10, scope: !8218)
!8253 = !DILocation(line: 4360, column: 3, scope: !8218)
!8254 = !DILocation(line: 4361, column: 1, scope: !8218)
!8255 = distinct !DISubprogram(name: "emit_insn_after_1", scope: !3, file: !3, line: 4281, type: !7961, scopeLine: 4282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8256 = !DILocalVariable(name: "first", arg: 1, scope: !8255, file: !3, line: 4281, type: !1125)
!8257 = !DILocation(line: 4281, column: 24, scope: !8255)
!8258 = !DILocalVariable(name: "after", arg: 2, scope: !8255, file: !3, line: 4281, type: !1125)
!8259 = !DILocation(line: 4281, column: 35, scope: !8255)
!8260 = !DILocalVariable(name: "bb", arg: 3, scope: !8255, file: !3, line: 4281, type: !1505)
!8261 = !DILocation(line: 4281, column: 54, scope: !8255)
!8262 = !DILocalVariable(name: "last", scope: !8255, file: !3, line: 4283, type: !1125)
!8263 = !DILocation(line: 4283, column: 7, scope: !8255)
!8264 = !DILocalVariable(name: "after_after", scope: !8255, file: !3, line: 4284, type: !1125)
!8265 = !DILocation(line: 4284, column: 7, scope: !8255)
!8266 = !DILocation(line: 4285, column: 8, scope: !8267)
!8267 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 4285, column: 7)
!8268 = !DILocation(line: 4285, column: 11, scope: !8267)
!8269 = !DILocation(line: 4285, column: 15, scope: !8267)
!8270 = !DILocation(line: 4285, column: 7, scope: !8255)
!8271 = !DILocation(line: 4286, column: 10, scope: !8267)
!8272 = !DILocation(line: 4286, column: 8, scope: !8267)
!8273 = !DILocation(line: 4286, column: 5, scope: !8267)
!8274 = !DILocation(line: 4288, column: 7, scope: !8275)
!8275 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 4288, column: 7)
!8276 = !DILocation(line: 4288, column: 7, scope: !8255)
!8277 = !DILocation(line: 4290, column: 24, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8275, file: !3, line: 4289, column: 5)
!8279 = !DILocation(line: 4290, column: 7, scope: !8278)
!8280 = !DILocation(line: 4291, column: 19, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 4291, column: 7)
!8282 = !DILocation(line: 4291, column: 17, scope: !8281)
!8283 = !DILocation(line: 4291, column: 12, scope: !8281)
!8284 = !DILocation(line: 4291, column: 26, scope: !8285)
!8285 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 4291, column: 7)
!8286 = !DILocation(line: 4291, column: 7, scope: !8281)
!8287 = !DILocation(line: 4292, column: 7, scope: !8288)
!8288 = distinct !DILexicalBlock(scope: !8285, file: !3, line: 4292, column: 6)
!8289 = !DILocation(line: 4292, column: 6, scope: !8285)
!8290 = !DILocation(line: 4294, column: 6, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8288, file: !3, line: 4293, column: 4)
!8292 = !DILocation(line: 4295, column: 22, scope: !8291)
!8293 = !DILocation(line: 4295, column: 6, scope: !8291)
!8294 = !DILocation(line: 4296, column: 4, scope: !8291)
!8295 = !DILocation(line: 4291, column: 51, scope: !8285)
!8296 = !DILocation(line: 4291, column: 49, scope: !8285)
!8297 = !DILocation(line: 4291, column: 7, scope: !8285)
!8298 = distinct !{!8298, !8286, !8299}
!8299 = !DILocation(line: 4296, column: 4, scope: !8281)
!8300 = !DILocation(line: 4297, column: 12, scope: !8301)
!8301 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 4297, column: 11)
!8302 = !DILocation(line: 4297, column: 11, scope: !8278)
!8303 = !DILocation(line: 4299, column: 4, scope: !8304)
!8304 = distinct !DILexicalBlock(scope: !8301, file: !3, line: 4298, column: 2)
!8305 = !DILocation(line: 4300, column: 20, scope: !8304)
!8306 = !DILocation(line: 4300, column: 4, scope: !8304)
!8307 = !DILocation(line: 4301, column: 2, scope: !8304)
!8308 = !DILocation(line: 4302, column: 11, scope: !8309)
!8309 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 4302, column: 11)
!8310 = !DILocation(line: 4302, column: 26, scope: !8309)
!8311 = !DILocation(line: 4302, column: 23, scope: !8309)
!8312 = !DILocation(line: 4302, column: 11, scope: !8278)
!8313 = !DILocation(line: 4303, column: 16, scope: !8309)
!8314 = !DILocation(line: 4303, column: 2, scope: !8309)
!8315 = !DILocation(line: 4303, column: 14, scope: !8309)
!8316 = !DILocation(line: 4304, column: 5, scope: !8278)
!8317 = !DILocation(line: 4306, column: 17, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8275, file: !3, line: 4306, column: 5)
!8319 = !DILocation(line: 4306, column: 15, scope: !8318)
!8320 = !DILocation(line: 4306, column: 10, scope: !8318)
!8321 = !DILocation(line: 4306, column: 24, scope: !8322)
!8322 = distinct !DILexicalBlock(scope: !8318, file: !3, line: 4306, column: 5)
!8323 = !DILocation(line: 4306, column: 5, scope: !8318)
!8324 = !DILocation(line: 4307, column: 7, scope: !8322)
!8325 = !DILocation(line: 4306, column: 49, scope: !8322)
!8326 = !DILocation(line: 4306, column: 47, scope: !8322)
!8327 = !DILocation(line: 4306, column: 5, scope: !8322)
!8328 = distinct !{!8328, !8323, !8329}
!8329 = !DILocation(line: 4307, column: 7, scope: !8318)
!8330 = !DILocation(line: 4309, column: 17, scope: !8255)
!8331 = !DILocation(line: 4309, column: 15, scope: !8255)
!8332 = !DILocation(line: 4311, column: 23, scope: !8255)
!8333 = !DILocation(line: 4311, column: 3, scope: !8255)
!8334 = !DILocation(line: 4311, column: 21, scope: !8255)
!8335 = !DILocation(line: 4312, column: 23, scope: !8255)
!8336 = !DILocation(line: 4312, column: 3, scope: !8255)
!8337 = !DILocation(line: 4312, column: 21, scope: !8255)
!8338 = !DILocation(line: 4313, column: 22, scope: !8255)
!8339 = !DILocation(line: 4313, column: 3, scope: !8255)
!8340 = !DILocation(line: 4313, column: 20, scope: !8255)
!8341 = !DILocation(line: 4314, column: 7, scope: !8342)
!8342 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 4314, column: 7)
!8343 = !DILocation(line: 4314, column: 7, scope: !8255)
!8344 = !DILocation(line: 4315, column: 31, scope: !8342)
!8345 = !DILocation(line: 4315, column: 5, scope: !8342)
!8346 = !DILocation(line: 4315, column: 29, scope: !8342)
!8347 = !DILocation(line: 4317, column: 7, scope: !8348)
!8348 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 4317, column: 7)
!8349 = !DILocation(line: 4317, column: 16, scope: !8348)
!8350 = !DILocation(line: 4317, column: 13, scope: !8348)
!8351 = !DILocation(line: 4317, column: 7, scope: !8255)
!8352 = !DILocation(line: 4318, column: 17, scope: !8348)
!8353 = !DILocation(line: 4318, column: 15, scope: !8348)
!8354 = !DILocation(line: 4318, column: 5, scope: !8348)
!8355 = !DILocation(line: 4320, column: 10, scope: !8255)
!8356 = !DILocation(line: 4320, column: 3, scope: !8255)
!8357 = distinct !DISubprogram(name: "emit_jump_insn_after_noloc", scope: !3, file: !3, line: 4368, type: !4222, scopeLine: 4369, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8358 = !DILocalVariable(name: "x", arg: 1, scope: !8357, file: !3, line: 4368, type: !1125)
!8359 = !DILocation(line: 4368, column: 33, scope: !8357)
!8360 = !DILocalVariable(name: "after", arg: 2, scope: !8357, file: !3, line: 4368, type: !1125)
!8361 = !DILocation(line: 4368, column: 40, scope: !8357)
!8362 = !DILocalVariable(name: "last", scope: !8357, file: !3, line: 4370, type: !1125)
!8363 = !DILocation(line: 4370, column: 7, scope: !8357)
!8364 = !DILocation(line: 4372, column: 3, scope: !8357)
!8365 = !DILocation(line: 4374, column: 11, scope: !8357)
!8366 = !DILocation(line: 4374, column: 3, scope: !8357)
!8367 = !DILocation(line: 4383, column: 33, scope: !8368)
!8368 = distinct !DILexicalBlock(scope: !8357, file: !3, line: 4375, column: 5)
!8369 = !DILocation(line: 4383, column: 36, scope: !8368)
!8370 = !DILocation(line: 4383, column: 14, scope: !8368)
!8371 = !DILocation(line: 4383, column: 12, scope: !8368)
!8372 = !DILocation(line: 4384, column: 7, scope: !8368)
!8373 = !DILocation(line: 4393, column: 34, scope: !8368)
!8374 = !DILocation(line: 4393, column: 14, scope: !8368)
!8375 = !DILocation(line: 4393, column: 12, scope: !8368)
!8376 = !DILocation(line: 4394, column: 23, scope: !8368)
!8377 = !DILocation(line: 4394, column: 29, scope: !8368)
!8378 = !DILocation(line: 4394, column: 7, scope: !8368)
!8379 = !DILocation(line: 4395, column: 7, scope: !8368)
!8380 = !DILocation(line: 4398, column: 10, scope: !8357)
!8381 = !DILocation(line: 4398, column: 3, scope: !8357)
!8382 = distinct !DISubprogram(name: "emit_call_insn_after_noloc", scope: !3, file: !3, line: 4405, type: !4222, scopeLine: 4406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8383 = !DILocalVariable(name: "x", arg: 1, scope: !8382, file: !3, line: 4405, type: !1125)
!8384 = !DILocation(line: 4405, column: 33, scope: !8382)
!8385 = !DILocalVariable(name: "after", arg: 2, scope: !8382, file: !3, line: 4405, type: !1125)
!8386 = !DILocation(line: 4405, column: 40, scope: !8382)
!8387 = !DILocalVariable(name: "last", scope: !8382, file: !3, line: 4407, type: !1125)
!8388 = !DILocation(line: 4407, column: 7, scope: !8382)
!8389 = !DILocation(line: 4409, column: 3, scope: !8382)
!8390 = !DILocation(line: 4411, column: 11, scope: !8382)
!8391 = !DILocation(line: 4411, column: 3, scope: !8382)
!8392 = !DILocation(line: 4420, column: 33, scope: !8393)
!8393 = distinct !DILexicalBlock(scope: !8382, file: !3, line: 4412, column: 5)
!8394 = !DILocation(line: 4420, column: 36, scope: !8393)
!8395 = !DILocation(line: 4420, column: 14, scope: !8393)
!8396 = !DILocation(line: 4420, column: 12, scope: !8393)
!8397 = !DILocation(line: 4421, column: 7, scope: !8393)
!8398 = !DILocation(line: 4430, column: 34, scope: !8393)
!8399 = !DILocation(line: 4430, column: 14, scope: !8393)
!8400 = !DILocation(line: 4430, column: 12, scope: !8393)
!8401 = !DILocation(line: 4431, column: 23, scope: !8393)
!8402 = !DILocation(line: 4431, column: 29, scope: !8393)
!8403 = !DILocation(line: 4431, column: 7, scope: !8393)
!8404 = !DILocation(line: 4432, column: 7, scope: !8393)
!8405 = !DILocation(line: 4435, column: 10, scope: !8382)
!8406 = !DILocation(line: 4435, column: 3, scope: !8382)
!8407 = distinct !DISubprogram(name: "emit_debug_insn_after_noloc", scope: !3, file: !3, line: 4442, type: !4222, scopeLine: 4443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8408 = !DILocalVariable(name: "x", arg: 1, scope: !8407, file: !3, line: 4442, type: !1125)
!8409 = !DILocation(line: 4442, column: 34, scope: !8407)
!8410 = !DILocalVariable(name: "after", arg: 2, scope: !8407, file: !3, line: 4442, type: !1125)
!8411 = !DILocation(line: 4442, column: 41, scope: !8407)
!8412 = !DILocalVariable(name: "last", scope: !8407, file: !3, line: 4444, type: !1125)
!8413 = !DILocation(line: 4444, column: 7, scope: !8407)
!8414 = !DILocation(line: 4446, column: 3, scope: !8407)
!8415 = !DILocation(line: 4448, column: 11, scope: !8407)
!8416 = !DILocation(line: 4448, column: 3, scope: !8407)
!8417 = !DILocation(line: 4457, column: 33, scope: !8418)
!8418 = distinct !DILexicalBlock(scope: !8407, file: !3, line: 4449, column: 5)
!8419 = !DILocation(line: 4457, column: 36, scope: !8418)
!8420 = !DILocation(line: 4457, column: 14, scope: !8418)
!8421 = !DILocation(line: 4457, column: 12, scope: !8418)
!8422 = !DILocation(line: 4458, column: 7, scope: !8418)
!8423 = !DILocation(line: 4467, column: 35, scope: !8418)
!8424 = !DILocation(line: 4467, column: 14, scope: !8418)
!8425 = !DILocation(line: 4467, column: 12, scope: !8418)
!8426 = !DILocation(line: 4468, column: 23, scope: !8418)
!8427 = !DILocation(line: 4468, column: 29, scope: !8418)
!8428 = !DILocation(line: 4468, column: 7, scope: !8418)
!8429 = !DILocation(line: 4469, column: 7, scope: !8418)
!8430 = !DILocation(line: 4472, column: 10, scope: !8407)
!8431 = !DILocation(line: 4472, column: 3, scope: !8407)
!8432 = distinct !DISubprogram(name: "emit_label_after", scope: !3, file: !3, line: 4492, type: !4222, scopeLine: 4493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8433 = !DILocalVariable(name: "label", arg: 1, scope: !8432, file: !3, line: 4492, type: !1125)
!8434 = !DILocation(line: 4492, column: 23, scope: !8432)
!8435 = !DILocalVariable(name: "after", arg: 2, scope: !8432, file: !3, line: 4492, type: !1125)
!8436 = !DILocation(line: 4492, column: 34, scope: !8432)
!8437 = !DILocation(line: 4497, column: 7, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 4497, column: 7)
!8439 = !DILocation(line: 4497, column: 24, scope: !8438)
!8440 = !DILocation(line: 4497, column: 7, scope: !8432)
!8441 = !DILocation(line: 4499, column: 38, scope: !8442)
!8442 = distinct !DILexicalBlock(scope: !8438, file: !3, line: 4498, column: 5)
!8443 = !DILocation(line: 4499, column: 7, scope: !8442)
!8444 = !DILocation(line: 4499, column: 24, scope: !8442)
!8445 = !DILocation(line: 4500, column: 23, scope: !8442)
!8446 = !DILocation(line: 4500, column: 30, scope: !8442)
!8447 = !DILocation(line: 4500, column: 7, scope: !8442)
!8448 = !DILocation(line: 4501, column: 5, scope: !8442)
!8449 = !DILocation(line: 4503, column: 10, scope: !8432)
!8450 = !DILocation(line: 4503, column: 3, scope: !8432)
!8451 = distinct !DISubprogram(name: "emit_note_after", scope: !3, file: !3, line: 4509, type: !8194, scopeLine: 4510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8452 = !DILocalVariable(name: "subtype", arg: 1, scope: !8451, file: !3, line: 4509, type: !1073)
!8453 = !DILocation(line: 4509, column: 33, scope: !8451)
!8454 = !DILocalVariable(name: "after", arg: 2, scope: !8451, file: !3, line: 4509, type: !1125)
!8455 = !DILocation(line: 4509, column: 46, scope: !8451)
!8456 = !DILocalVariable(name: "note", scope: !8451, file: !3, line: 4511, type: !1125)
!8457 = !DILocation(line: 4511, column: 7, scope: !8451)
!8458 = !DILocation(line: 4511, column: 14, scope: !8451)
!8459 = !DILocation(line: 4512, column: 33, scope: !8451)
!8460 = !DILocation(line: 4512, column: 3, scope: !8451)
!8461 = !DILocation(line: 4512, column: 19, scope: !8451)
!8462 = !DILocation(line: 4513, column: 22, scope: !8451)
!8463 = !DILocation(line: 4513, column: 3, scope: !8451)
!8464 = !DILocation(line: 4513, column: 20, scope: !8451)
!8465 = !DILocation(line: 4514, column: 3, scope: !8451)
!8466 = !DILocation(line: 4514, column: 25, scope: !8451)
!8467 = !DILocation(line: 4515, column: 12, scope: !8451)
!8468 = !DILocation(line: 4515, column: 3, scope: !8451)
!8469 = !DILocation(line: 4516, column: 19, scope: !8451)
!8470 = !DILocation(line: 4516, column: 25, scope: !8451)
!8471 = !DILocation(line: 4516, column: 3, scope: !8451)
!8472 = !DILocation(line: 4517, column: 10, scope: !8451)
!8473 = !DILocation(line: 4517, column: 3, scope: !8451)
!8474 = distinct !DISubprogram(name: "emit_insn_after", scope: !3, file: !3, line: 4543, type: !4222, scopeLine: 4544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8475 = !DILocalVariable(name: "pattern", arg: 1, scope: !8474, file: !3, line: 4543, type: !1125)
!8476 = !DILocation(line: 4543, column: 22, scope: !8474)
!8477 = !DILocalVariable(name: "after", arg: 2, scope: !8474, file: !3, line: 4543, type: !1125)
!8478 = !DILocation(line: 4543, column: 35, scope: !8474)
!8479 = !DILocalVariable(name: "prev", scope: !8474, file: !3, line: 4545, type: !1125)
!8480 = !DILocation(line: 4545, column: 7, scope: !8474)
!8481 = !DILocation(line: 4545, column: 14, scope: !8474)
!8482 = !DILocation(line: 4547, column: 3, scope: !8474)
!8483 = !DILocation(line: 4547, column: 10, scope: !8474)
!8484 = !DILocation(line: 4548, column: 12, scope: !8474)
!8485 = !DILocation(line: 4548, column: 10, scope: !8474)
!8486 = distinct !{!8486, !8482, !8484}
!8487 = !DILocation(line: 4550, column: 7, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8474, file: !3, line: 4550, column: 7)
!8489 = !DILocation(line: 4550, column: 7, scope: !8474)
!8490 = !DILocation(line: 4551, column: 36, scope: !8488)
!8491 = !DILocation(line: 4551, column: 45, scope: !8488)
!8492 = !DILocation(line: 4551, column: 52, scope: !8488)
!8493 = !DILocation(line: 4551, column: 12, scope: !8488)
!8494 = !DILocation(line: 4551, column: 5, scope: !8488)
!8495 = !DILocation(line: 4553, column: 35, scope: !8488)
!8496 = !DILocation(line: 4553, column: 44, scope: !8488)
!8497 = !DILocation(line: 4553, column: 12, scope: !8488)
!8498 = !DILocation(line: 4553, column: 5, scope: !8488)
!8499 = !DILocation(line: 4554, column: 1, scope: !8474)
!8500 = distinct !DISubprogram(name: "emit_jump_insn_after_setloc", scope: !3, file: !3, line: 4558, type: !6841, scopeLine: 4559, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8501 = !DILocalVariable(name: "pattern", arg: 1, scope: !8500, file: !3, line: 4558, type: !1125)
!8502 = !DILocation(line: 4558, column: 34, scope: !8500)
!8503 = !DILocalVariable(name: "after", arg: 2, scope: !8500, file: !3, line: 4558, type: !1125)
!8504 = !DILocation(line: 4558, column: 47, scope: !8500)
!8505 = !DILocalVariable(name: "loc", arg: 3, scope: !8500, file: !3, line: 4558, type: !1149)
!8506 = !DILocation(line: 4558, column: 58, scope: !8500)
!8507 = !DILocalVariable(name: "last", scope: !8500, file: !3, line: 4560, type: !1125)
!8508 = !DILocation(line: 4560, column: 7, scope: !8500)
!8509 = !DILocation(line: 4560, column: 42, scope: !8500)
!8510 = !DILocation(line: 4560, column: 51, scope: !8500)
!8511 = !DILocation(line: 4560, column: 14, scope: !8500)
!8512 = !DILocation(line: 4562, column: 7, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 4562, column: 7)
!8514 = !DILocation(line: 4562, column: 15, scope: !8513)
!8515 = !DILocation(line: 4562, column: 27, scope: !8513)
!8516 = !DILocation(line: 4562, column: 31, scope: !8513)
!8517 = !DILocation(line: 4562, column: 7, scope: !8500)
!8518 = !DILocation(line: 4563, column: 12, scope: !8513)
!8519 = !DILocation(line: 4563, column: 5, scope: !8513)
!8520 = !DILocation(line: 4565, column: 11, scope: !8500)
!8521 = !DILocation(line: 4565, column: 9, scope: !8500)
!8522 = !DILocation(line: 4566, column: 3, scope: !8500)
!8523 = !DILocation(line: 4568, column: 26, scope: !8524)
!8524 = distinct !DILexicalBlock(scope: !8525, file: !3, line: 4568, column: 11)
!8525 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 4567, column: 5)
!8526 = !DILocation(line: 4568, column: 11, scope: !8524)
!8527 = !DILocation(line: 4568, column: 33, scope: !8524)
!8528 = !DILocation(line: 4568, column: 37, scope: !8524)
!8529 = !DILocation(line: 4568, column: 11, scope: !8525)
!8530 = !DILocation(line: 4569, column: 25, scope: !8524)
!8531 = !DILocation(line: 4569, column: 2, scope: !8524)
!8532 = !DILocation(line: 4569, column: 23, scope: !8524)
!8533 = !DILocation(line: 4570, column: 11, scope: !8534)
!8534 = distinct !DILexicalBlock(scope: !8525, file: !3, line: 4570, column: 11)
!8535 = !DILocation(line: 4570, column: 20, scope: !8534)
!8536 = !DILocation(line: 4570, column: 17, scope: !8534)
!8537 = !DILocation(line: 4570, column: 11, scope: !8525)
!8538 = !DILocation(line: 4571, column: 2, scope: !8534)
!8539 = !DILocation(line: 4572, column: 15, scope: !8525)
!8540 = !DILocation(line: 4572, column: 13, scope: !8525)
!8541 = distinct !{!8541, !8522, !8542}
!8542 = !DILocation(line: 4573, column: 5, scope: !8500)
!8543 = !DILocation(line: 4574, column: 10, scope: !8500)
!8544 = !DILocation(line: 4574, column: 3, scope: !8500)
!8545 = !DILocation(line: 4575, column: 1, scope: !8500)
!8546 = distinct !DISubprogram(name: "emit_jump_insn_after", scope: !3, file: !3, line: 4579, type: !4222, scopeLine: 4580, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8547 = !DILocalVariable(name: "pattern", arg: 1, scope: !8546, file: !3, line: 4579, type: !1125)
!8548 = !DILocation(line: 4579, column: 27, scope: !8546)
!8549 = !DILocalVariable(name: "after", arg: 2, scope: !8546, file: !3, line: 4579, type: !1125)
!8550 = !DILocation(line: 4579, column: 40, scope: !8546)
!8551 = !DILocalVariable(name: "prev", scope: !8546, file: !3, line: 4581, type: !1125)
!8552 = !DILocation(line: 4581, column: 7, scope: !8546)
!8553 = !DILocation(line: 4581, column: 14, scope: !8546)
!8554 = !DILocation(line: 4583, column: 3, scope: !8546)
!8555 = !DILocation(line: 4583, column: 10, scope: !8546)
!8556 = !DILocation(line: 4584, column: 12, scope: !8546)
!8557 = !DILocation(line: 4584, column: 10, scope: !8546)
!8558 = distinct !{!8558, !8554, !8556}
!8559 = !DILocation(line: 4586, column: 7, scope: !8560)
!8560 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 4586, column: 7)
!8561 = !DILocation(line: 4586, column: 7, scope: !8546)
!8562 = !DILocation(line: 4587, column: 41, scope: !8560)
!8563 = !DILocation(line: 4587, column: 50, scope: !8560)
!8564 = !DILocation(line: 4587, column: 57, scope: !8560)
!8565 = !DILocation(line: 4587, column: 12, scope: !8560)
!8566 = !DILocation(line: 4587, column: 5, scope: !8560)
!8567 = !DILocation(line: 4589, column: 40, scope: !8560)
!8568 = !DILocation(line: 4589, column: 49, scope: !8560)
!8569 = !DILocation(line: 4589, column: 12, scope: !8560)
!8570 = !DILocation(line: 4589, column: 5, scope: !8560)
!8571 = !DILocation(line: 4590, column: 1, scope: !8546)
!8572 = distinct !DISubprogram(name: "emit_call_insn_after_setloc", scope: !3, file: !3, line: 4594, type: !6841, scopeLine: 4595, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8573 = !DILocalVariable(name: "pattern", arg: 1, scope: !8572, file: !3, line: 4594, type: !1125)
!8574 = !DILocation(line: 4594, column: 34, scope: !8572)
!8575 = !DILocalVariable(name: "after", arg: 2, scope: !8572, file: !3, line: 4594, type: !1125)
!8576 = !DILocation(line: 4594, column: 47, scope: !8572)
!8577 = !DILocalVariable(name: "loc", arg: 3, scope: !8572, file: !3, line: 4594, type: !1149)
!8578 = !DILocation(line: 4594, column: 58, scope: !8572)
!8579 = !DILocalVariable(name: "last", scope: !8572, file: !3, line: 4596, type: !1125)
!8580 = !DILocation(line: 4596, column: 7, scope: !8572)
!8581 = !DILocation(line: 4596, column: 42, scope: !8572)
!8582 = !DILocation(line: 4596, column: 51, scope: !8572)
!8583 = !DILocation(line: 4596, column: 14, scope: !8572)
!8584 = !DILocation(line: 4598, column: 7, scope: !8585)
!8585 = distinct !DILexicalBlock(scope: !8572, file: !3, line: 4598, column: 7)
!8586 = !DILocation(line: 4598, column: 15, scope: !8585)
!8587 = !DILocation(line: 4598, column: 27, scope: !8585)
!8588 = !DILocation(line: 4598, column: 31, scope: !8585)
!8589 = !DILocation(line: 4598, column: 7, scope: !8572)
!8590 = !DILocation(line: 4599, column: 12, scope: !8585)
!8591 = !DILocation(line: 4599, column: 5, scope: !8585)
!8592 = !DILocation(line: 4601, column: 11, scope: !8572)
!8593 = !DILocation(line: 4601, column: 9, scope: !8572)
!8594 = !DILocation(line: 4602, column: 3, scope: !8572)
!8595 = !DILocation(line: 4604, column: 26, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 4604, column: 11)
!8597 = distinct !DILexicalBlock(scope: !8572, file: !3, line: 4603, column: 5)
!8598 = !DILocation(line: 4604, column: 11, scope: !8596)
!8599 = !DILocation(line: 4604, column: 33, scope: !8596)
!8600 = !DILocation(line: 4604, column: 37, scope: !8596)
!8601 = !DILocation(line: 4604, column: 11, scope: !8597)
!8602 = !DILocation(line: 4605, column: 25, scope: !8596)
!8603 = !DILocation(line: 4605, column: 2, scope: !8596)
!8604 = !DILocation(line: 4605, column: 23, scope: !8596)
!8605 = !DILocation(line: 4606, column: 11, scope: !8606)
!8606 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 4606, column: 11)
!8607 = !DILocation(line: 4606, column: 20, scope: !8606)
!8608 = !DILocation(line: 4606, column: 17, scope: !8606)
!8609 = !DILocation(line: 4606, column: 11, scope: !8597)
!8610 = !DILocation(line: 4607, column: 2, scope: !8606)
!8611 = !DILocation(line: 4608, column: 15, scope: !8597)
!8612 = !DILocation(line: 4608, column: 13, scope: !8597)
!8613 = distinct !{!8613, !8594, !8614}
!8614 = !DILocation(line: 4609, column: 5, scope: !8572)
!8615 = !DILocation(line: 4610, column: 10, scope: !8572)
!8616 = !DILocation(line: 4610, column: 3, scope: !8572)
!8617 = !DILocation(line: 4611, column: 1, scope: !8572)
!8618 = distinct !DISubprogram(name: "emit_call_insn_after", scope: !3, file: !3, line: 4615, type: !4222, scopeLine: 4616, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8619 = !DILocalVariable(name: "pattern", arg: 1, scope: !8618, file: !3, line: 4615, type: !1125)
!8620 = !DILocation(line: 4615, column: 27, scope: !8618)
!8621 = !DILocalVariable(name: "after", arg: 2, scope: !8618, file: !3, line: 4615, type: !1125)
!8622 = !DILocation(line: 4615, column: 40, scope: !8618)
!8623 = !DILocalVariable(name: "prev", scope: !8618, file: !3, line: 4617, type: !1125)
!8624 = !DILocation(line: 4617, column: 7, scope: !8618)
!8625 = !DILocation(line: 4617, column: 14, scope: !8618)
!8626 = !DILocation(line: 4619, column: 3, scope: !8618)
!8627 = !DILocation(line: 4619, column: 10, scope: !8618)
!8628 = !DILocation(line: 4620, column: 12, scope: !8618)
!8629 = !DILocation(line: 4620, column: 10, scope: !8618)
!8630 = distinct !{!8630, !8626, !8628}
!8631 = !DILocation(line: 4622, column: 7, scope: !8632)
!8632 = distinct !DILexicalBlock(scope: !8618, file: !3, line: 4622, column: 7)
!8633 = !DILocation(line: 4622, column: 7, scope: !8618)
!8634 = !DILocation(line: 4623, column: 41, scope: !8632)
!8635 = !DILocation(line: 4623, column: 50, scope: !8632)
!8636 = !DILocation(line: 4623, column: 57, scope: !8632)
!8637 = !DILocation(line: 4623, column: 12, scope: !8632)
!8638 = !DILocation(line: 4623, column: 5, scope: !8632)
!8639 = !DILocation(line: 4625, column: 40, scope: !8632)
!8640 = !DILocation(line: 4625, column: 49, scope: !8632)
!8641 = !DILocation(line: 4625, column: 12, scope: !8632)
!8642 = !DILocation(line: 4625, column: 5, scope: !8632)
!8643 = !DILocation(line: 4626, column: 1, scope: !8618)
!8644 = distinct !DISubprogram(name: "emit_debug_insn_after_setloc", scope: !3, file: !3, line: 4630, type: !6841, scopeLine: 4631, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8645 = !DILocalVariable(name: "pattern", arg: 1, scope: !8644, file: !3, line: 4630, type: !1125)
!8646 = !DILocation(line: 4630, column: 35, scope: !8644)
!8647 = !DILocalVariable(name: "after", arg: 2, scope: !8644, file: !3, line: 4630, type: !1125)
!8648 = !DILocation(line: 4630, column: 48, scope: !8644)
!8649 = !DILocalVariable(name: "loc", arg: 3, scope: !8644, file: !3, line: 4630, type: !1149)
!8650 = !DILocation(line: 4630, column: 59, scope: !8644)
!8651 = !DILocalVariable(name: "last", scope: !8644, file: !3, line: 4632, type: !1125)
!8652 = !DILocation(line: 4632, column: 7, scope: !8644)
!8653 = !DILocation(line: 4632, column: 43, scope: !8644)
!8654 = !DILocation(line: 4632, column: 52, scope: !8644)
!8655 = !DILocation(line: 4632, column: 14, scope: !8644)
!8656 = !DILocation(line: 4634, column: 7, scope: !8657)
!8657 = distinct !DILexicalBlock(scope: !8644, file: !3, line: 4634, column: 7)
!8658 = !DILocation(line: 4634, column: 15, scope: !8657)
!8659 = !DILocation(line: 4634, column: 27, scope: !8657)
!8660 = !DILocation(line: 4634, column: 31, scope: !8657)
!8661 = !DILocation(line: 4634, column: 7, scope: !8644)
!8662 = !DILocation(line: 4635, column: 12, scope: !8657)
!8663 = !DILocation(line: 4635, column: 5, scope: !8657)
!8664 = !DILocation(line: 4637, column: 11, scope: !8644)
!8665 = !DILocation(line: 4637, column: 9, scope: !8644)
!8666 = !DILocation(line: 4638, column: 3, scope: !8644)
!8667 = !DILocation(line: 4640, column: 26, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8669, file: !3, line: 4640, column: 11)
!8669 = distinct !DILexicalBlock(scope: !8644, file: !3, line: 4639, column: 5)
!8670 = !DILocation(line: 4640, column: 11, scope: !8668)
!8671 = !DILocation(line: 4640, column: 33, scope: !8668)
!8672 = !DILocation(line: 4640, column: 37, scope: !8668)
!8673 = !DILocation(line: 4640, column: 11, scope: !8669)
!8674 = !DILocation(line: 4641, column: 25, scope: !8668)
!8675 = !DILocation(line: 4641, column: 2, scope: !8668)
!8676 = !DILocation(line: 4641, column: 23, scope: !8668)
!8677 = !DILocation(line: 4642, column: 11, scope: !8678)
!8678 = distinct !DILexicalBlock(scope: !8669, file: !3, line: 4642, column: 11)
!8679 = !DILocation(line: 4642, column: 20, scope: !8678)
!8680 = !DILocation(line: 4642, column: 17, scope: !8678)
!8681 = !DILocation(line: 4642, column: 11, scope: !8669)
!8682 = !DILocation(line: 4643, column: 2, scope: !8678)
!8683 = !DILocation(line: 4644, column: 15, scope: !8669)
!8684 = !DILocation(line: 4644, column: 13, scope: !8669)
!8685 = distinct !{!8685, !8666, !8686}
!8686 = !DILocation(line: 4645, column: 5, scope: !8644)
!8687 = !DILocation(line: 4646, column: 10, scope: !8644)
!8688 = !DILocation(line: 4646, column: 3, scope: !8644)
!8689 = !DILocation(line: 4647, column: 1, scope: !8644)
!8690 = distinct !DISubprogram(name: "emit_debug_insn_after", scope: !3, file: !3, line: 4651, type: !4222, scopeLine: 4652, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8691 = !DILocalVariable(name: "pattern", arg: 1, scope: !8690, file: !3, line: 4651, type: !1125)
!8692 = !DILocation(line: 4651, column: 28, scope: !8690)
!8693 = !DILocalVariable(name: "after", arg: 2, scope: !8690, file: !3, line: 4651, type: !1125)
!8694 = !DILocation(line: 4651, column: 41, scope: !8690)
!8695 = !DILocation(line: 4653, column: 7, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8690, file: !3, line: 4653, column: 7)
!8697 = !DILocation(line: 4653, column: 7, scope: !8690)
!8698 = !DILocation(line: 4654, column: 42, scope: !8696)
!8699 = !DILocation(line: 4654, column: 51, scope: !8696)
!8700 = !DILocation(line: 4654, column: 58, scope: !8696)
!8701 = !DILocation(line: 4654, column: 12, scope: !8696)
!8702 = !DILocation(line: 4654, column: 5, scope: !8696)
!8703 = !DILocation(line: 4656, column: 41, scope: !8696)
!8704 = !DILocation(line: 4656, column: 50, scope: !8696)
!8705 = !DILocation(line: 4656, column: 12, scope: !8696)
!8706 = !DILocation(line: 4656, column: 5, scope: !8696)
!8707 = !DILocation(line: 4657, column: 1, scope: !8690)
!8708 = distinct !DISubprogram(name: "emit_insn_before_setloc", scope: !3, file: !3, line: 4661, type: !6841, scopeLine: 4662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8709 = !DILocalVariable(name: "pattern", arg: 1, scope: !8708, file: !3, line: 4661, type: !1125)
!8710 = !DILocation(line: 4661, column: 30, scope: !8708)
!8711 = !DILocalVariable(name: "before", arg: 2, scope: !8708, file: !3, line: 4661, type: !1125)
!8712 = !DILocation(line: 4661, column: 43, scope: !8708)
!8713 = !DILocalVariable(name: "loc", arg: 3, scope: !8708, file: !3, line: 4661, type: !1149)
!8714 = !DILocation(line: 4661, column: 55, scope: !8708)
!8715 = !DILocalVariable(name: "first", scope: !8708, file: !3, line: 4663, type: !1125)
!8716 = !DILocation(line: 4663, column: 7, scope: !8708)
!8717 = !DILocation(line: 4663, column: 15, scope: !8708)
!8718 = !DILocalVariable(name: "last", scope: !8708, file: !3, line: 4664, type: !1125)
!8719 = !DILocation(line: 4664, column: 7, scope: !8708)
!8720 = !DILocation(line: 4664, column: 38, scope: !8708)
!8721 = !DILocation(line: 4664, column: 47, scope: !8708)
!8722 = !DILocation(line: 4664, column: 14, scope: !8708)
!8723 = !DILocation(line: 4666, column: 7, scope: !8724)
!8724 = distinct !DILexicalBlock(scope: !8708, file: !3, line: 4666, column: 7)
!8725 = !DILocation(line: 4666, column: 15, scope: !8724)
!8726 = !DILocation(line: 4666, column: 27, scope: !8724)
!8727 = !DILocation(line: 4666, column: 31, scope: !8724)
!8728 = !DILocation(line: 4666, column: 7, scope: !8708)
!8729 = !DILocation(line: 4667, column: 12, scope: !8724)
!8730 = !DILocation(line: 4667, column: 5, scope: !8724)
!8731 = !DILocation(line: 4669, column: 8, scope: !8732)
!8732 = distinct !DILexicalBlock(scope: !8708, file: !3, line: 4669, column: 7)
!8733 = !DILocation(line: 4669, column: 7, scope: !8708)
!8734 = !DILocation(line: 4670, column: 13, scope: !8732)
!8735 = !DILocation(line: 4670, column: 11, scope: !8732)
!8736 = !DILocation(line: 4670, column: 5, scope: !8732)
!8737 = !DILocation(line: 4672, column: 13, scope: !8732)
!8738 = !DILocation(line: 4672, column: 11, scope: !8732)
!8739 = !DILocation(line: 4673, column: 3, scope: !8708)
!8740 = !DILocation(line: 4675, column: 26, scope: !8741)
!8741 = distinct !DILexicalBlock(scope: !8742, file: !3, line: 4675, column: 11)
!8742 = distinct !DILexicalBlock(scope: !8708, file: !3, line: 4674, column: 5)
!8743 = !DILocation(line: 4675, column: 11, scope: !8741)
!8744 = !DILocation(line: 4675, column: 33, scope: !8741)
!8745 = !DILocation(line: 4675, column: 37, scope: !8741)
!8746 = !DILocation(line: 4675, column: 11, scope: !8742)
!8747 = !DILocation(line: 4676, column: 25, scope: !8741)
!8748 = !DILocation(line: 4676, column: 2, scope: !8741)
!8749 = !DILocation(line: 4676, column: 23, scope: !8741)
!8750 = !DILocation(line: 4677, column: 11, scope: !8751)
!8751 = distinct !DILexicalBlock(scope: !8742, file: !3, line: 4677, column: 11)
!8752 = !DILocation(line: 4677, column: 20, scope: !8751)
!8753 = !DILocation(line: 4677, column: 17, scope: !8751)
!8754 = !DILocation(line: 4677, column: 11, scope: !8742)
!8755 = !DILocation(line: 4678, column: 2, scope: !8751)
!8756 = !DILocation(line: 4679, column: 15, scope: !8742)
!8757 = !DILocation(line: 4679, column: 13, scope: !8742)
!8758 = distinct !{!8758, !8739, !8759}
!8759 = !DILocation(line: 4680, column: 5, scope: !8708)
!8760 = !DILocation(line: 4681, column: 10, scope: !8708)
!8761 = !DILocation(line: 4681, column: 3, scope: !8708)
!8762 = !DILocation(line: 4682, column: 1, scope: !8708)
!8763 = distinct !DISubprogram(name: "emit_insn_before", scope: !3, file: !3, line: 4686, type: !4222, scopeLine: 4687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8764 = !DILocalVariable(name: "pattern", arg: 1, scope: !8763, file: !3, line: 4686, type: !1125)
!8765 = !DILocation(line: 4686, column: 23, scope: !8763)
!8766 = !DILocalVariable(name: "before", arg: 2, scope: !8763, file: !3, line: 4686, type: !1125)
!8767 = !DILocation(line: 4686, column: 36, scope: !8763)
!8768 = !DILocalVariable(name: "next", scope: !8763, file: !3, line: 4688, type: !1125)
!8769 = !DILocation(line: 4688, column: 7, scope: !8763)
!8770 = !DILocation(line: 4688, column: 14, scope: !8763)
!8771 = !DILocation(line: 4690, column: 3, scope: !8763)
!8772 = !DILocation(line: 4690, column: 10, scope: !8763)
!8773 = !DILocation(line: 4691, column: 12, scope: !8763)
!8774 = !DILocation(line: 4691, column: 10, scope: !8763)
!8775 = distinct !{!8775, !8771, !8773}
!8776 = !DILocation(line: 4693, column: 7, scope: !8777)
!8777 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 4693, column: 7)
!8778 = !DILocation(line: 4693, column: 7, scope: !8763)
!8779 = !DILocation(line: 4694, column: 37, scope: !8777)
!8780 = !DILocation(line: 4694, column: 46, scope: !8777)
!8781 = !DILocation(line: 4694, column: 54, scope: !8777)
!8782 = !DILocation(line: 4694, column: 12, scope: !8777)
!8783 = !DILocation(line: 4694, column: 5, scope: !8777)
!8784 = !DILocation(line: 4696, column: 36, scope: !8777)
!8785 = !DILocation(line: 4696, column: 45, scope: !8777)
!8786 = !DILocation(line: 4696, column: 12, scope: !8777)
!8787 = !DILocation(line: 4696, column: 5, scope: !8777)
!8788 = !DILocation(line: 4697, column: 1, scope: !8763)
!8789 = distinct !DISubprogram(name: "emit_jump_insn_before_setloc", scope: !3, file: !3, line: 4701, type: !6841, scopeLine: 4702, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8790 = !DILocalVariable(name: "pattern", arg: 1, scope: !8789, file: !3, line: 4701, type: !1125)
!8791 = !DILocation(line: 4701, column: 35, scope: !8789)
!8792 = !DILocalVariable(name: "before", arg: 2, scope: !8789, file: !3, line: 4701, type: !1125)
!8793 = !DILocation(line: 4701, column: 48, scope: !8789)
!8794 = !DILocalVariable(name: "loc", arg: 3, scope: !8789, file: !3, line: 4701, type: !1149)
!8795 = !DILocation(line: 4701, column: 60, scope: !8789)
!8796 = !DILocalVariable(name: "first", scope: !8789, file: !3, line: 4703, type: !1125)
!8797 = !DILocation(line: 4703, column: 7, scope: !8789)
!8798 = !DILocation(line: 4703, column: 15, scope: !8789)
!8799 = !DILocalVariable(name: "last", scope: !8789, file: !3, line: 4704, type: !1125)
!8800 = !DILocation(line: 4704, column: 7, scope: !8789)
!8801 = !DILocation(line: 4704, column: 43, scope: !8789)
!8802 = !DILocation(line: 4704, column: 52, scope: !8789)
!8803 = !DILocation(line: 4704, column: 14, scope: !8789)
!8804 = !DILocation(line: 4706, column: 7, scope: !8805)
!8805 = distinct !DILexicalBlock(scope: !8789, file: !3, line: 4706, column: 7)
!8806 = !DILocation(line: 4706, column: 15, scope: !8805)
!8807 = !DILocation(line: 4706, column: 7, scope: !8789)
!8808 = !DILocation(line: 4707, column: 12, scope: !8805)
!8809 = !DILocation(line: 4707, column: 5, scope: !8805)
!8810 = !DILocation(line: 4709, column: 11, scope: !8789)
!8811 = !DILocation(line: 4709, column: 9, scope: !8789)
!8812 = !DILocation(line: 4710, column: 3, scope: !8789)
!8813 = !DILocation(line: 4712, column: 26, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !8815, file: !3, line: 4712, column: 11)
!8815 = distinct !DILexicalBlock(scope: !8789, file: !3, line: 4711, column: 5)
!8816 = !DILocation(line: 4712, column: 11, scope: !8814)
!8817 = !DILocation(line: 4712, column: 33, scope: !8814)
!8818 = !DILocation(line: 4712, column: 37, scope: !8814)
!8819 = !DILocation(line: 4712, column: 11, scope: !8815)
!8820 = !DILocation(line: 4713, column: 25, scope: !8814)
!8821 = !DILocation(line: 4713, column: 2, scope: !8814)
!8822 = !DILocation(line: 4713, column: 23, scope: !8814)
!8823 = !DILocation(line: 4714, column: 11, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8815, file: !3, line: 4714, column: 11)
!8825 = !DILocation(line: 4714, column: 20, scope: !8824)
!8826 = !DILocation(line: 4714, column: 17, scope: !8824)
!8827 = !DILocation(line: 4714, column: 11, scope: !8815)
!8828 = !DILocation(line: 4715, column: 2, scope: !8824)
!8829 = !DILocation(line: 4716, column: 15, scope: !8815)
!8830 = !DILocation(line: 4716, column: 13, scope: !8815)
!8831 = distinct !{!8831, !8812, !8832}
!8832 = !DILocation(line: 4717, column: 5, scope: !8789)
!8833 = !DILocation(line: 4718, column: 10, scope: !8789)
!8834 = !DILocation(line: 4718, column: 3, scope: !8789)
!8835 = !DILocation(line: 4719, column: 1, scope: !8789)
!8836 = distinct !DISubprogram(name: "emit_jump_insn_before", scope: !3, file: !3, line: 4723, type: !4222, scopeLine: 4724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8837 = !DILocalVariable(name: "pattern", arg: 1, scope: !8836, file: !3, line: 4723, type: !1125)
!8838 = !DILocation(line: 4723, column: 28, scope: !8836)
!8839 = !DILocalVariable(name: "before", arg: 2, scope: !8836, file: !3, line: 4723, type: !1125)
!8840 = !DILocation(line: 4723, column: 41, scope: !8836)
!8841 = !DILocalVariable(name: "next", scope: !8836, file: !3, line: 4725, type: !1125)
!8842 = !DILocation(line: 4725, column: 7, scope: !8836)
!8843 = !DILocation(line: 4725, column: 14, scope: !8836)
!8844 = !DILocation(line: 4727, column: 3, scope: !8836)
!8845 = !DILocation(line: 4727, column: 10, scope: !8836)
!8846 = !DILocation(line: 4728, column: 12, scope: !8836)
!8847 = !DILocation(line: 4728, column: 10, scope: !8836)
!8848 = distinct !{!8848, !8844, !8846}
!8849 = !DILocation(line: 4730, column: 7, scope: !8850)
!8850 = distinct !DILexicalBlock(scope: !8836, file: !3, line: 4730, column: 7)
!8851 = !DILocation(line: 4730, column: 7, scope: !8836)
!8852 = !DILocation(line: 4731, column: 42, scope: !8850)
!8853 = !DILocation(line: 4731, column: 51, scope: !8850)
!8854 = !DILocation(line: 4731, column: 59, scope: !8850)
!8855 = !DILocation(line: 4731, column: 12, scope: !8850)
!8856 = !DILocation(line: 4731, column: 5, scope: !8850)
!8857 = !DILocation(line: 4733, column: 41, scope: !8850)
!8858 = !DILocation(line: 4733, column: 50, scope: !8850)
!8859 = !DILocation(line: 4733, column: 12, scope: !8850)
!8860 = !DILocation(line: 4733, column: 5, scope: !8850)
!8861 = !DILocation(line: 4734, column: 1, scope: !8836)
!8862 = distinct !DISubprogram(name: "emit_call_insn_before_setloc", scope: !3, file: !3, line: 4738, type: !6841, scopeLine: 4739, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8863 = !DILocalVariable(name: "pattern", arg: 1, scope: !8862, file: !3, line: 4738, type: !1125)
!8864 = !DILocation(line: 4738, column: 35, scope: !8862)
!8865 = !DILocalVariable(name: "before", arg: 2, scope: !8862, file: !3, line: 4738, type: !1125)
!8866 = !DILocation(line: 4738, column: 48, scope: !8862)
!8867 = !DILocalVariable(name: "loc", arg: 3, scope: !8862, file: !3, line: 4738, type: !1149)
!8868 = !DILocation(line: 4738, column: 60, scope: !8862)
!8869 = !DILocalVariable(name: "first", scope: !8862, file: !3, line: 4740, type: !1125)
!8870 = !DILocation(line: 4740, column: 7, scope: !8862)
!8871 = !DILocation(line: 4740, column: 15, scope: !8862)
!8872 = !DILocalVariable(name: "last", scope: !8862, file: !3, line: 4741, type: !1125)
!8873 = !DILocation(line: 4741, column: 7, scope: !8862)
!8874 = !DILocation(line: 4741, column: 43, scope: !8862)
!8875 = !DILocation(line: 4741, column: 52, scope: !8862)
!8876 = !DILocation(line: 4741, column: 14, scope: !8862)
!8877 = !DILocation(line: 4743, column: 7, scope: !8878)
!8878 = distinct !DILexicalBlock(scope: !8862, file: !3, line: 4743, column: 7)
!8879 = !DILocation(line: 4743, column: 15, scope: !8878)
!8880 = !DILocation(line: 4743, column: 7, scope: !8862)
!8881 = !DILocation(line: 4744, column: 12, scope: !8878)
!8882 = !DILocation(line: 4744, column: 5, scope: !8878)
!8883 = !DILocation(line: 4746, column: 11, scope: !8862)
!8884 = !DILocation(line: 4746, column: 9, scope: !8862)
!8885 = !DILocation(line: 4747, column: 3, scope: !8862)
!8886 = !DILocation(line: 4749, column: 26, scope: !8887)
!8887 = distinct !DILexicalBlock(scope: !8888, file: !3, line: 4749, column: 11)
!8888 = distinct !DILexicalBlock(scope: !8862, file: !3, line: 4748, column: 5)
!8889 = !DILocation(line: 4749, column: 11, scope: !8887)
!8890 = !DILocation(line: 4749, column: 33, scope: !8887)
!8891 = !DILocation(line: 4749, column: 37, scope: !8887)
!8892 = !DILocation(line: 4749, column: 11, scope: !8888)
!8893 = !DILocation(line: 4750, column: 25, scope: !8887)
!8894 = !DILocation(line: 4750, column: 2, scope: !8887)
!8895 = !DILocation(line: 4750, column: 23, scope: !8887)
!8896 = !DILocation(line: 4751, column: 11, scope: !8897)
!8897 = distinct !DILexicalBlock(scope: !8888, file: !3, line: 4751, column: 11)
!8898 = !DILocation(line: 4751, column: 20, scope: !8897)
!8899 = !DILocation(line: 4751, column: 17, scope: !8897)
!8900 = !DILocation(line: 4751, column: 11, scope: !8888)
!8901 = !DILocation(line: 4752, column: 2, scope: !8897)
!8902 = !DILocation(line: 4753, column: 15, scope: !8888)
!8903 = !DILocation(line: 4753, column: 13, scope: !8888)
!8904 = distinct !{!8904, !8885, !8905}
!8905 = !DILocation(line: 4754, column: 5, scope: !8862)
!8906 = !DILocation(line: 4755, column: 10, scope: !8862)
!8907 = !DILocation(line: 4755, column: 3, scope: !8862)
!8908 = !DILocation(line: 4756, column: 1, scope: !8862)
!8909 = distinct !DISubprogram(name: "emit_call_insn_before", scope: !3, file: !3, line: 4761, type: !4222, scopeLine: 4762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8910 = !DILocalVariable(name: "pattern", arg: 1, scope: !8909, file: !3, line: 4761, type: !1125)
!8911 = !DILocation(line: 4761, column: 28, scope: !8909)
!8912 = !DILocalVariable(name: "before", arg: 2, scope: !8909, file: !3, line: 4761, type: !1125)
!8913 = !DILocation(line: 4761, column: 41, scope: !8909)
!8914 = !DILocalVariable(name: "next", scope: !8909, file: !3, line: 4763, type: !1125)
!8915 = !DILocation(line: 4763, column: 7, scope: !8909)
!8916 = !DILocation(line: 4763, column: 14, scope: !8909)
!8917 = !DILocation(line: 4765, column: 3, scope: !8909)
!8918 = !DILocation(line: 4765, column: 10, scope: !8909)
!8919 = !DILocation(line: 4766, column: 12, scope: !8909)
!8920 = !DILocation(line: 4766, column: 10, scope: !8909)
!8921 = distinct !{!8921, !8917, !8919}
!8922 = !DILocation(line: 4768, column: 7, scope: !8923)
!8923 = distinct !DILexicalBlock(scope: !8909, file: !3, line: 4768, column: 7)
!8924 = !DILocation(line: 4768, column: 7, scope: !8909)
!8925 = !DILocation(line: 4769, column: 42, scope: !8923)
!8926 = !DILocation(line: 4769, column: 51, scope: !8923)
!8927 = !DILocation(line: 4769, column: 59, scope: !8923)
!8928 = !DILocation(line: 4769, column: 12, scope: !8923)
!8929 = !DILocation(line: 4769, column: 5, scope: !8923)
!8930 = !DILocation(line: 4771, column: 41, scope: !8923)
!8931 = !DILocation(line: 4771, column: 50, scope: !8923)
!8932 = !DILocation(line: 4771, column: 12, scope: !8923)
!8933 = !DILocation(line: 4771, column: 5, scope: !8923)
!8934 = !DILocation(line: 4772, column: 1, scope: !8909)
!8935 = distinct !DISubprogram(name: "emit_debug_insn_before_setloc", scope: !3, file: !3, line: 4776, type: !6841, scopeLine: 4777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8936 = !DILocalVariable(name: "pattern", arg: 1, scope: !8935, file: !3, line: 4776, type: !1125)
!8937 = !DILocation(line: 4776, column: 36, scope: !8935)
!8938 = !DILocalVariable(name: "before", arg: 2, scope: !8935, file: !3, line: 4776, type: !1125)
!8939 = !DILocation(line: 4776, column: 49, scope: !8935)
!8940 = !DILocalVariable(name: "loc", arg: 3, scope: !8935, file: !3, line: 4776, type: !1149)
!8941 = !DILocation(line: 4776, column: 61, scope: !8935)
!8942 = !DILocalVariable(name: "first", scope: !8935, file: !3, line: 4778, type: !1125)
!8943 = !DILocation(line: 4778, column: 7, scope: !8935)
!8944 = !DILocation(line: 4778, column: 15, scope: !8935)
!8945 = !DILocalVariable(name: "last", scope: !8935, file: !3, line: 4779, type: !1125)
!8946 = !DILocation(line: 4779, column: 7, scope: !8935)
!8947 = !DILocation(line: 4779, column: 44, scope: !8935)
!8948 = !DILocation(line: 4779, column: 53, scope: !8935)
!8949 = !DILocation(line: 4779, column: 14, scope: !8935)
!8950 = !DILocation(line: 4781, column: 7, scope: !8951)
!8951 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 4781, column: 7)
!8952 = !DILocation(line: 4781, column: 15, scope: !8951)
!8953 = !DILocation(line: 4781, column: 7, scope: !8935)
!8954 = !DILocation(line: 4782, column: 12, scope: !8951)
!8955 = !DILocation(line: 4782, column: 5, scope: !8951)
!8956 = !DILocation(line: 4784, column: 11, scope: !8935)
!8957 = !DILocation(line: 4784, column: 9, scope: !8935)
!8958 = !DILocation(line: 4785, column: 3, scope: !8935)
!8959 = !DILocation(line: 4787, column: 26, scope: !8960)
!8960 = distinct !DILexicalBlock(scope: !8961, file: !3, line: 4787, column: 11)
!8961 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 4786, column: 5)
!8962 = !DILocation(line: 4787, column: 11, scope: !8960)
!8963 = !DILocation(line: 4787, column: 33, scope: !8960)
!8964 = !DILocation(line: 4787, column: 37, scope: !8960)
!8965 = !DILocation(line: 4787, column: 11, scope: !8961)
!8966 = !DILocation(line: 4788, column: 25, scope: !8960)
!8967 = !DILocation(line: 4788, column: 2, scope: !8960)
!8968 = !DILocation(line: 4788, column: 23, scope: !8960)
!8969 = !DILocation(line: 4789, column: 11, scope: !8970)
!8970 = distinct !DILexicalBlock(scope: !8961, file: !3, line: 4789, column: 11)
!8971 = !DILocation(line: 4789, column: 20, scope: !8970)
!8972 = !DILocation(line: 4789, column: 17, scope: !8970)
!8973 = !DILocation(line: 4789, column: 11, scope: !8961)
!8974 = !DILocation(line: 4790, column: 2, scope: !8970)
!8975 = !DILocation(line: 4791, column: 15, scope: !8961)
!8976 = !DILocation(line: 4791, column: 13, scope: !8961)
!8977 = distinct !{!8977, !8958, !8978}
!8978 = !DILocation(line: 4792, column: 5, scope: !8935)
!8979 = !DILocation(line: 4793, column: 10, scope: !8935)
!8980 = !DILocation(line: 4793, column: 3, scope: !8935)
!8981 = !DILocation(line: 4794, column: 1, scope: !8935)
!8982 = distinct !DISubprogram(name: "emit_debug_insn_before", scope: !3, file: !3, line: 4799, type: !4222, scopeLine: 4800, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!8983 = !DILocalVariable(name: "pattern", arg: 1, scope: !8982, file: !3, line: 4799, type: !1125)
!8984 = !DILocation(line: 4799, column: 29, scope: !8982)
!8985 = !DILocalVariable(name: "before", arg: 2, scope: !8982, file: !3, line: 4799, type: !1125)
!8986 = !DILocation(line: 4799, column: 42, scope: !8982)
!8987 = !DILocation(line: 4801, column: 7, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8982, file: !3, line: 4801, column: 7)
!8989 = !DILocation(line: 4801, column: 7, scope: !8982)
!8990 = !DILocation(line: 4802, column: 43, scope: !8988)
!8991 = !DILocation(line: 4802, column: 52, scope: !8988)
!8992 = !DILocation(line: 4802, column: 60, scope: !8988)
!8993 = !DILocation(line: 4802, column: 12, scope: !8988)
!8994 = !DILocation(line: 4802, column: 5, scope: !8988)
!8995 = !DILocation(line: 4804, column: 42, scope: !8988)
!8996 = !DILocation(line: 4804, column: 51, scope: !8988)
!8997 = !DILocation(line: 4804, column: 12, scope: !8988)
!8998 = !DILocation(line: 4804, column: 5, scope: !8988)
!8999 = !DILocation(line: 4805, column: 1, scope: !8982)
!9000 = distinct !DISubprogram(name: "emit_insn", scope: !3, file: !3, line: 4813, type: !2610, scopeLine: 4814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9001 = !DILocalVariable(name: "x", arg: 1, scope: !9000, file: !3, line: 4813, type: !1125)
!9002 = !DILocation(line: 4813, column: 16, scope: !9000)
!9003 = !DILocalVariable(name: "last", scope: !9000, file: !3, line: 4815, type: !1125)
!9004 = !DILocation(line: 4815, column: 7, scope: !9000)
!9005 = !DILocation(line: 4815, column: 14, scope: !9000)
!9006 = !DILocalVariable(name: "insn", scope: !9000, file: !3, line: 4816, type: !1125)
!9007 = !DILocation(line: 4816, column: 7, scope: !9000)
!9008 = !DILocation(line: 4818, column: 7, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !9000, file: !3, line: 4818, column: 7)
!9010 = !DILocation(line: 4818, column: 9, scope: !9009)
!9011 = !DILocation(line: 4818, column: 7, scope: !9000)
!9012 = !DILocation(line: 4819, column: 12, scope: !9009)
!9013 = !DILocation(line: 4819, column: 5, scope: !9009)
!9014 = !DILocation(line: 4821, column: 11, scope: !9000)
!9015 = !DILocation(line: 4821, column: 3, scope: !9000)
!9016 = !DILocation(line: 4830, column: 14, scope: !9017)
!9017 = distinct !DILexicalBlock(scope: !9000, file: !3, line: 4822, column: 5)
!9018 = !DILocation(line: 4830, column: 12, scope: !9017)
!9019 = !DILocation(line: 4831, column: 7, scope: !9017)
!9020 = !DILocation(line: 4831, column: 14, scope: !9017)
!9021 = !DILocalVariable(name: "next", scope: !9022, file: !3, line: 4833, type: !1125)
!9022 = distinct !DILexicalBlock(scope: !9017, file: !3, line: 4832, column: 2)
!9023 = !DILocation(line: 4833, column: 8, scope: !9022)
!9024 = !DILocation(line: 4833, column: 15, scope: !9022)
!9025 = !DILocation(line: 4834, column: 14, scope: !9022)
!9026 = !DILocation(line: 4834, column: 4, scope: !9022)
!9027 = !DILocation(line: 4835, column: 11, scope: !9022)
!9028 = !DILocation(line: 4835, column: 9, scope: !9022)
!9029 = !DILocation(line: 4836, column: 11, scope: !9022)
!9030 = !DILocation(line: 4836, column: 9, scope: !9022)
!9031 = distinct !{!9031, !9019, !9032}
!9032 = !DILocation(line: 4837, column: 2, scope: !9017)
!9033 = !DILocation(line: 4838, column: 7, scope: !9017)
!9034 = !DILocation(line: 4847, column: 29, scope: !9017)
!9035 = !DILocation(line: 4847, column: 14, scope: !9017)
!9036 = !DILocation(line: 4847, column: 12, scope: !9017)
!9037 = !DILocation(line: 4848, column: 17, scope: !9017)
!9038 = !DILocation(line: 4848, column: 7, scope: !9017)
!9039 = !DILocation(line: 4849, column: 7, scope: !9017)
!9040 = !DILocation(line: 4852, column: 10, scope: !9000)
!9041 = !DILocation(line: 4852, column: 3, scope: !9000)
!9042 = !DILocation(line: 4853, column: 1, scope: !9000)
!9043 = distinct !DISubprogram(name: "emit_debug_insn", scope: !3, file: !3, line: 4859, type: !2610, scopeLine: 4860, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9044 = !DILocalVariable(name: "x", arg: 1, scope: !9043, file: !3, line: 4859, type: !1125)
!9045 = !DILocation(line: 4859, column: 22, scope: !9043)
!9046 = !DILocalVariable(name: "last", scope: !9043, file: !3, line: 4861, type: !1125)
!9047 = !DILocation(line: 4861, column: 7, scope: !9043)
!9048 = !DILocation(line: 4861, column: 14, scope: !9043)
!9049 = !DILocalVariable(name: "insn", scope: !9043, file: !3, line: 4862, type: !1125)
!9050 = !DILocation(line: 4862, column: 7, scope: !9043)
!9051 = !DILocation(line: 4864, column: 7, scope: !9052)
!9052 = distinct !DILexicalBlock(scope: !9043, file: !3, line: 4864, column: 7)
!9053 = !DILocation(line: 4864, column: 9, scope: !9052)
!9054 = !DILocation(line: 4864, column: 7, scope: !9043)
!9055 = !DILocation(line: 4865, column: 12, scope: !9052)
!9056 = !DILocation(line: 4865, column: 5, scope: !9052)
!9057 = !DILocation(line: 4867, column: 11, scope: !9043)
!9058 = !DILocation(line: 4867, column: 3, scope: !9043)
!9059 = !DILocation(line: 4876, column: 14, scope: !9060)
!9060 = distinct !DILexicalBlock(scope: !9043, file: !3, line: 4868, column: 5)
!9061 = !DILocation(line: 4876, column: 12, scope: !9060)
!9062 = !DILocation(line: 4877, column: 7, scope: !9060)
!9063 = !DILocation(line: 4877, column: 14, scope: !9060)
!9064 = !DILocalVariable(name: "next", scope: !9065, file: !3, line: 4879, type: !1125)
!9065 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 4878, column: 2)
!9066 = !DILocation(line: 4879, column: 8, scope: !9065)
!9067 = !DILocation(line: 4879, column: 15, scope: !9065)
!9068 = !DILocation(line: 4880, column: 14, scope: !9065)
!9069 = !DILocation(line: 4880, column: 4, scope: !9065)
!9070 = !DILocation(line: 4881, column: 11, scope: !9065)
!9071 = !DILocation(line: 4881, column: 9, scope: !9065)
!9072 = !DILocation(line: 4882, column: 11, scope: !9065)
!9073 = !DILocation(line: 4882, column: 9, scope: !9065)
!9074 = distinct !{!9074, !9062, !9075}
!9075 = !DILocation(line: 4883, column: 2, scope: !9060)
!9076 = !DILocation(line: 4884, column: 7, scope: !9060)
!9077 = !DILocation(line: 4893, column: 35, scope: !9060)
!9078 = !DILocation(line: 4893, column: 14, scope: !9060)
!9079 = !DILocation(line: 4893, column: 12, scope: !9060)
!9080 = !DILocation(line: 4894, column: 17, scope: !9060)
!9081 = !DILocation(line: 4894, column: 7, scope: !9060)
!9082 = !DILocation(line: 4895, column: 7, scope: !9060)
!9083 = !DILocation(line: 4898, column: 10, scope: !9043)
!9084 = !DILocation(line: 4898, column: 3, scope: !9043)
!9085 = !DILocation(line: 4899, column: 1, scope: !9043)
!9086 = distinct !DISubprogram(name: "emit_jump_insn", scope: !3, file: !3, line: 4905, type: !2610, scopeLine: 4906, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9087 = !DILocalVariable(name: "x", arg: 1, scope: !9086, file: !3, line: 4905, type: !1125)
!9088 = !DILocation(line: 4905, column: 21, scope: !9086)
!9089 = !DILocalVariable(name: "last", scope: !9086, file: !3, line: 4907, type: !1125)
!9090 = !DILocation(line: 4907, column: 7, scope: !9086)
!9091 = !DILocalVariable(name: "insn", scope: !9086, file: !3, line: 4907, type: !1125)
!9092 = !DILocation(line: 4907, column: 24, scope: !9086)
!9093 = !DILocation(line: 4909, column: 11, scope: !9086)
!9094 = !DILocation(line: 4909, column: 3, scope: !9086)
!9095 = !DILocation(line: 4918, column: 14, scope: !9096)
!9096 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 4910, column: 5)
!9097 = !DILocation(line: 4918, column: 12, scope: !9096)
!9098 = !DILocation(line: 4919, column: 7, scope: !9096)
!9099 = !DILocation(line: 4919, column: 14, scope: !9096)
!9100 = !DILocalVariable(name: "next", scope: !9101, file: !3, line: 4921, type: !1125)
!9101 = distinct !DILexicalBlock(scope: !9096, file: !3, line: 4920, column: 2)
!9102 = !DILocation(line: 4921, column: 8, scope: !9101)
!9103 = !DILocation(line: 4921, column: 15, scope: !9101)
!9104 = !DILocation(line: 4922, column: 14, scope: !9101)
!9105 = !DILocation(line: 4922, column: 4, scope: !9101)
!9106 = !DILocation(line: 4923, column: 11, scope: !9101)
!9107 = !DILocation(line: 4923, column: 9, scope: !9101)
!9108 = !DILocation(line: 4924, column: 11, scope: !9101)
!9109 = !DILocation(line: 4924, column: 9, scope: !9101)
!9110 = distinct !{!9110, !9098, !9111}
!9111 = !DILocation(line: 4925, column: 2, scope: !9096)
!9112 = !DILocation(line: 4926, column: 7, scope: !9096)
!9113 = !DILocation(line: 4935, column: 34, scope: !9096)
!9114 = !DILocation(line: 4935, column: 14, scope: !9096)
!9115 = !DILocation(line: 4935, column: 12, scope: !9096)
!9116 = !DILocation(line: 4936, column: 17, scope: !9096)
!9117 = !DILocation(line: 4936, column: 7, scope: !9096)
!9118 = !DILocation(line: 4937, column: 7, scope: !9096)
!9119 = !DILocation(line: 4940, column: 10, scope: !9086)
!9120 = !DILocation(line: 4940, column: 3, scope: !9086)
!9121 = distinct !DISubprogram(name: "emit_call_insn", scope: !3, file: !3, line: 4947, type: !2610, scopeLine: 4948, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9122 = !DILocalVariable(name: "x", arg: 1, scope: !9121, file: !3, line: 4947, type: !1125)
!9123 = !DILocation(line: 4947, column: 21, scope: !9121)
!9124 = !DILocalVariable(name: "insn", scope: !9121, file: !3, line: 4949, type: !1125)
!9125 = !DILocation(line: 4949, column: 7, scope: !9121)
!9126 = !DILocation(line: 4951, column: 11, scope: !9121)
!9127 = !DILocation(line: 4951, column: 3, scope: !9121)
!9128 = !DILocation(line: 4960, column: 25, scope: !9129)
!9129 = distinct !DILexicalBlock(scope: !9121, file: !3, line: 4952, column: 5)
!9130 = !DILocation(line: 4960, column: 14, scope: !9129)
!9131 = !DILocation(line: 4960, column: 12, scope: !9129)
!9132 = !DILocation(line: 4961, column: 7, scope: !9129)
!9133 = !DILocation(line: 4970, column: 34, scope: !9129)
!9134 = !DILocation(line: 4970, column: 14, scope: !9129)
!9135 = !DILocation(line: 4970, column: 12, scope: !9129)
!9136 = !DILocation(line: 4971, column: 17, scope: !9129)
!9137 = !DILocation(line: 4971, column: 7, scope: !9129)
!9138 = !DILocation(line: 4972, column: 7, scope: !9129)
!9139 = !DILocation(line: 4975, column: 10, scope: !9121)
!9140 = !DILocation(line: 4975, column: 3, scope: !9121)
!9141 = distinct !DISubprogram(name: "emit_label", scope: !3, file: !3, line: 4981, type: !2610, scopeLine: 4982, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9142 = !DILocalVariable(name: "label", arg: 1, scope: !9141, file: !3, line: 4981, type: !1125)
!9143 = !DILocation(line: 4981, column: 17, scope: !9141)
!9144 = !DILocation(line: 4986, column: 7, scope: !9145)
!9145 = distinct !DILexicalBlock(scope: !9141, file: !3, line: 4986, column: 7)
!9146 = !DILocation(line: 4986, column: 24, scope: !9145)
!9147 = !DILocation(line: 4986, column: 7, scope: !9141)
!9148 = !DILocation(line: 4988, column: 38, scope: !9149)
!9149 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 4987, column: 5)
!9150 = !DILocation(line: 4988, column: 7, scope: !9149)
!9151 = !DILocation(line: 4988, column: 24, scope: !9149)
!9152 = !DILocation(line: 4989, column: 17, scope: !9149)
!9153 = !DILocation(line: 4989, column: 7, scope: !9149)
!9154 = !DILocation(line: 4990, column: 5, scope: !9149)
!9155 = !DILocation(line: 4991, column: 10, scope: !9141)
!9156 = !DILocation(line: 4991, column: 3, scope: !9141)
!9157 = distinct !DISubprogram(name: "emit_barrier", scope: !3, file: !3, line: 4998, type: !5561, scopeLine: 4999, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9158 = !DILocalVariable(name: "barrier", scope: !9157, file: !3, line: 5000, type: !1125)
!9159 = !DILocation(line: 5000, column: 7, scope: !9157)
!9160 = !DILocation(line: 5000, column: 17, scope: !9157)
!9161 = !DILocation(line: 5001, column: 36, scope: !9157)
!9162 = !DILocation(line: 5001, column: 3, scope: !9157)
!9163 = !DILocation(line: 5001, column: 22, scope: !9157)
!9164 = !DILocation(line: 5002, column: 13, scope: !9157)
!9165 = !DILocation(line: 5002, column: 3, scope: !9157)
!9166 = !DILocation(line: 5003, column: 10, scope: !9157)
!9167 = !DILocation(line: 5003, column: 3, scope: !9157)
!9168 = distinct !DISubprogram(name: "emit_note_copy", scope: !3, file: !3, line: 5009, type: !2610, scopeLine: 5010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9169 = !DILocalVariable(name: "orig", arg: 1, scope: !9168, file: !3, line: 5009, type: !1125)
!9170 = !DILocation(line: 5009, column: 21, scope: !9168)
!9171 = !DILocalVariable(name: "note", scope: !9168, file: !3, line: 5011, type: !1125)
!9172 = !DILocation(line: 5011, column: 7, scope: !9168)
!9173 = !DILocation(line: 5013, column: 10, scope: !9168)
!9174 = !DILocation(line: 5013, column: 8, scope: !9168)
!9175 = !DILocation(line: 5015, column: 33, scope: !9168)
!9176 = !DILocation(line: 5015, column: 3, scope: !9168)
!9177 = !DILocation(line: 5015, column: 19, scope: !9168)
!9178 = !DILocation(line: 5016, column: 3, scope: !9168)
!9179 = !DILocation(line: 5016, column: 22, scope: !9168)
!9180 = !DILocation(line: 5017, column: 22, scope: !9168)
!9181 = !DILocation(line: 5017, column: 3, scope: !9168)
!9182 = !DILocation(line: 5017, column: 20, scope: !9168)
!9183 = !DILocation(line: 5018, column: 3, scope: !9168)
!9184 = !DILocation(line: 5018, column: 25, scope: !9168)
!9185 = !DILocation(line: 5019, column: 13, scope: !9168)
!9186 = !DILocation(line: 5019, column: 3, scope: !9168)
!9187 = !DILocation(line: 5021, column: 10, scope: !9168)
!9188 = !DILocation(line: 5021, column: 3, scope: !9168)
!9189 = distinct !DISubprogram(name: "emit_note", scope: !3, file: !3, line: 5028, type: !9190, scopeLine: 5029, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9190 = !DISubroutineType(types: !9191)
!9191 = !{!1125, !1073}
!9192 = !DILocalVariable(name: "kind", arg: 1, scope: !9189, file: !3, line: 5028, type: !1073)
!9193 = !DILocation(line: 5028, column: 27, scope: !9189)
!9194 = !DILocalVariable(name: "note", scope: !9189, file: !3, line: 5030, type: !1125)
!9195 = !DILocation(line: 5030, column: 7, scope: !9189)
!9196 = !DILocation(line: 5032, column: 10, scope: !9189)
!9197 = !DILocation(line: 5032, column: 8, scope: !9189)
!9198 = !DILocation(line: 5033, column: 33, scope: !9189)
!9199 = !DILocation(line: 5033, column: 3, scope: !9189)
!9200 = !DILocation(line: 5033, column: 19, scope: !9189)
!9201 = !DILocation(line: 5034, column: 22, scope: !9189)
!9202 = !DILocation(line: 5034, column: 3, scope: !9189)
!9203 = !DILocation(line: 5034, column: 20, scope: !9189)
!9204 = !DILocation(line: 5035, column: 12, scope: !9189)
!9205 = !DILocation(line: 5035, column: 3, scope: !9189)
!9206 = !DILocation(line: 5036, column: 3, scope: !9189)
!9207 = !DILocation(line: 5036, column: 25, scope: !9189)
!9208 = !DILocation(line: 5037, column: 13, scope: !9189)
!9209 = !DILocation(line: 5037, column: 3, scope: !9189)
!9210 = !DILocation(line: 5038, column: 10, scope: !9189)
!9211 = !DILocation(line: 5038, column: 3, scope: !9189)
!9212 = distinct !DISubprogram(name: "emit_clobber", scope: !3, file: !3, line: 5044, type: !2610, scopeLine: 5045, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9213 = !DILocalVariable(name: "x", arg: 1, scope: !9212, file: !3, line: 5044, type: !1125)
!9214 = !DILocation(line: 5044, column: 19, scope: !9212)
!9215 = !DILocation(line: 5047, column: 7, scope: !9216)
!9216 = distinct !DILexicalBlock(scope: !9212, file: !3, line: 5047, column: 7)
!9217 = !DILocation(line: 5047, column: 20, scope: !9216)
!9218 = !DILocation(line: 5047, column: 7, scope: !9212)
!9219 = !DILocation(line: 5049, column: 21, scope: !9220)
!9220 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 5048, column: 5)
!9221 = !DILocation(line: 5049, column: 7, scope: !9220)
!9222 = !DILocation(line: 5050, column: 28, scope: !9220)
!9223 = !DILocation(line: 5050, column: 14, scope: !9220)
!9224 = !DILocation(line: 5050, column: 7, scope: !9220)
!9225 = !DILocation(line: 5052, column: 21, scope: !9212)
!9226 = !DILocation(line: 5052, column: 10, scope: !9212)
!9227 = !DILocation(line: 5052, column: 3, scope: !9212)
!9228 = !DILocation(line: 5053, column: 1, scope: !9212)
!9229 = distinct !DISubprogram(name: "gen_clobber", scope: !3, file: !3, line: 5058, type: !2610, scopeLine: 5059, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9230 = !DILocalVariable(name: "x", arg: 1, scope: !9229, file: !3, line: 5058, type: !1125)
!9231 = !DILocation(line: 5058, column: 18, scope: !9229)
!9232 = !DILocalVariable(name: "seq", scope: !9229, file: !3, line: 5060, type: !1125)
!9233 = !DILocation(line: 5060, column: 7, scope: !9229)
!9234 = !DILocation(line: 5062, column: 3, scope: !9229)
!9235 = !DILocation(line: 5063, column: 17, scope: !9229)
!9236 = !DILocation(line: 5063, column: 3, scope: !9229)
!9237 = !DILocation(line: 5064, column: 9, scope: !9229)
!9238 = !DILocation(line: 5064, column: 7, scope: !9229)
!9239 = !DILocation(line: 5065, column: 3, scope: !9229)
!9240 = !DILocation(line: 5066, column: 10, scope: !9229)
!9241 = !DILocation(line: 5066, column: 3, scope: !9229)
!9242 = distinct !DISubprogram(name: "start_sequence", scope: !3, file: !3, line: 5246, type: !5896, scopeLine: 5247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9243 = !DILocalVariable(name: "tem", scope: !9242, file: !3, line: 5248, type: !2171)
!9244 = !DILocation(line: 5248, column: 26, scope: !9242)
!9245 = !DILocation(line: 5250, column: 7, scope: !9246)
!9246 = distinct !DILexicalBlock(scope: !9242, file: !3, line: 5250, column: 7)
!9247 = !DILocation(line: 5250, column: 27, scope: !9246)
!9248 = !DILocation(line: 5250, column: 7, scope: !9242)
!9249 = !DILocation(line: 5252, column: 13, scope: !9250)
!9250 = distinct !DILexicalBlock(scope: !9246, file: !3, line: 5251, column: 5)
!9251 = !DILocation(line: 5252, column: 11, scope: !9250)
!9252 = !DILocation(line: 5253, column: 29, scope: !9250)
!9253 = !DILocation(line: 5253, column: 34, scope: !9250)
!9254 = !DILocation(line: 5253, column: 27, scope: !9250)
!9255 = !DILocation(line: 5254, column: 5, scope: !9250)
!9256 = !DILocation(line: 5256, column: 11, scope: !9246)
!9257 = !DILocation(line: 5256, column: 9, scope: !9246)
!9258 = !DILocation(line: 5258, column: 15, scope: !9242)
!9259 = !DILocation(line: 5258, column: 3, scope: !9242)
!9260 = !DILocation(line: 5258, column: 8, scope: !9242)
!9261 = !DILocation(line: 5258, column: 13, scope: !9242)
!9262 = !DILocation(line: 5259, column: 16, scope: !9242)
!9263 = !DILocation(line: 5259, column: 3, scope: !9242)
!9264 = !DILocation(line: 5259, column: 8, scope: !9242)
!9265 = !DILocation(line: 5259, column: 14, scope: !9242)
!9266 = !DILocation(line: 5260, column: 15, scope: !9242)
!9267 = !DILocation(line: 5260, column: 3, scope: !9242)
!9268 = !DILocation(line: 5260, column: 8, scope: !9242)
!9269 = !DILocation(line: 5260, column: 13, scope: !9242)
!9270 = !DILocation(line: 5262, column: 15, scope: !9242)
!9271 = !DILocation(line: 5262, column: 13, scope: !9242)
!9272 = !DILocation(line: 5264, column: 14, scope: !9242)
!9273 = !DILocation(line: 5265, column: 13, scope: !9242)
!9274 = !DILocation(line: 5266, column: 1, scope: !9242)
!9275 = distinct !DISubprogram(name: "end_sequence", scope: !3, file: !3, line: 5345, type: !5896, scopeLine: 5346, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9276 = !DILocalVariable(name: "tem", scope: !9275, file: !3, line: 5347, type: !2171)
!9277 = !DILocation(line: 5347, column: 26, scope: !9275)
!9278 = !DILocation(line: 5347, column: 32, scope: !9275)
!9279 = !DILocation(line: 5349, column: 16, scope: !9275)
!9280 = !DILocation(line: 5349, column: 21, scope: !9275)
!9281 = !DILocation(line: 5349, column: 14, scope: !9275)
!9282 = !DILocation(line: 5350, column: 15, scope: !9275)
!9283 = !DILocation(line: 5350, column: 20, scope: !9275)
!9284 = !DILocation(line: 5350, column: 13, scope: !9275)
!9285 = !DILocation(line: 5351, column: 15, scope: !9275)
!9286 = !DILocation(line: 5351, column: 20, scope: !9275)
!9287 = !DILocation(line: 5351, column: 13, scope: !9275)
!9288 = !DILocation(line: 5353, column: 11, scope: !9275)
!9289 = !DILocation(line: 5353, column: 3, scope: !9275)
!9290 = !DILocation(line: 5354, column: 15, scope: !9275)
!9291 = !DILocation(line: 5354, column: 3, scope: !9275)
!9292 = !DILocation(line: 5354, column: 8, scope: !9275)
!9293 = !DILocation(line: 5354, column: 13, scope: !9275)
!9294 = !DILocation(line: 5355, column: 25, scope: !9275)
!9295 = !DILocation(line: 5355, column: 23, scope: !9275)
!9296 = !DILocation(line: 5356, column: 1, scope: !9275)
!9297 = distinct !DISubprogram(name: "emit_use", scope: !3, file: !3, line: 5072, type: !2610, scopeLine: 5073, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9298 = !DILocalVariable(name: "x", arg: 1, scope: !9297, file: !3, line: 5072, type: !1125)
!9299 = !DILocation(line: 5072, column: 15, scope: !9297)
!9300 = !DILocation(line: 5075, column: 7, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !9297, file: !3, line: 5075, column: 7)
!9302 = !DILocation(line: 5075, column: 20, scope: !9301)
!9303 = !DILocation(line: 5075, column: 7, scope: !9297)
!9304 = !DILocation(line: 5077, column: 17, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 5076, column: 5)
!9306 = !DILocation(line: 5077, column: 7, scope: !9305)
!9307 = !DILocation(line: 5078, column: 24, scope: !9305)
!9308 = !DILocation(line: 5078, column: 14, scope: !9305)
!9309 = !DILocation(line: 5078, column: 7, scope: !9305)
!9310 = !DILocation(line: 5080, column: 21, scope: !9297)
!9311 = !DILocation(line: 5080, column: 10, scope: !9297)
!9312 = !DILocation(line: 5080, column: 3, scope: !9297)
!9313 = !DILocation(line: 5081, column: 1, scope: !9297)
!9314 = distinct !DISubprogram(name: "gen_use", scope: !3, file: !3, line: 5086, type: !2610, scopeLine: 5087, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9315 = !DILocalVariable(name: "x", arg: 1, scope: !9314, file: !3, line: 5086, type: !1125)
!9316 = !DILocation(line: 5086, column: 14, scope: !9314)
!9317 = !DILocalVariable(name: "seq", scope: !9314, file: !3, line: 5088, type: !1125)
!9318 = !DILocation(line: 5088, column: 7, scope: !9314)
!9319 = !DILocation(line: 5090, column: 3, scope: !9314)
!9320 = !DILocation(line: 5091, column: 13, scope: !9314)
!9321 = !DILocation(line: 5091, column: 3, scope: !9314)
!9322 = !DILocation(line: 5092, column: 9, scope: !9314)
!9323 = !DILocation(line: 5092, column: 7, scope: !9314)
!9324 = !DILocation(line: 5093, column: 3, scope: !9314)
!9325 = !DILocation(line: 5094, column: 10, scope: !9314)
!9326 = !DILocation(line: 5094, column: 3, scope: !9314)
!9327 = distinct !DISubprogram(name: "force_next_line_note", scope: !3, file: !3, line: 5101, type: !5896, scopeLine: 5102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9328 = !DILocation(line: 5103, column: 17, scope: !9327)
!9329 = !DILocation(line: 5104, column: 1, scope: !9327)
!9330 = distinct !DISubprogram(name: "set_unique_reg_note", scope: !3, file: !3, line: 5110, type: !9331, scopeLine: 5111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9331 = !DISubroutineType(types: !9332)
!9332 = !{!1125, !1125, !1089, !1125}
!9333 = !DILocalVariable(name: "insn", arg: 1, scope: !9330, file: !3, line: 5110, type: !1125)
!9334 = !DILocation(line: 5110, column: 26, scope: !9330)
!9335 = !DILocalVariable(name: "kind", arg: 2, scope: !9330, file: !3, line: 5110, type: !1089)
!9336 = !DILocation(line: 5110, column: 46, scope: !9330)
!9337 = !DILocalVariable(name: "datum", arg: 3, scope: !9330, file: !3, line: 5110, type: !1125)
!9338 = !DILocation(line: 5110, column: 56, scope: !9330)
!9339 = !DILocalVariable(name: "note", scope: !9330, file: !3, line: 5112, type: !1125)
!9340 = !DILocation(line: 5112, column: 7, scope: !9330)
!9341 = !DILocation(line: 5112, column: 29, scope: !9330)
!9342 = !DILocation(line: 5112, column: 35, scope: !9330)
!9343 = !DILocation(line: 5112, column: 14, scope: !9330)
!9344 = !DILocation(line: 5114, column: 11, scope: !9330)
!9345 = !DILocation(line: 5114, column: 3, scope: !9330)
!9346 = !DILocation(line: 5122, column: 11, scope: !9347)
!9347 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 5122, column: 11)
!9348 = distinct !DILexicalBlock(scope: !9330, file: !3, line: 5115, column: 5)
!9349 = !DILocation(line: 5122, column: 37, scope: !9347)
!9350 = !DILocation(line: 5122, column: 49, scope: !9347)
!9351 = !DILocation(line: 5122, column: 67, scope: !9347)
!9352 = !DILocation(line: 5122, column: 52, scope: !9347)
!9353 = !DILocation(line: 5122, column: 11, scope: !9348)
!9354 = !DILocation(line: 5124, column: 4, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 5123, column: 2)
!9356 = !DILocation(line: 5125, column: 4, scope: !9355)
!9357 = !DILocation(line: 5130, column: 11, scope: !9358)
!9358 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 5130, column: 11)
!9359 = !DILocation(line: 5130, column: 28, scope: !9358)
!9360 = !DILocation(line: 5130, column: 11, scope: !9348)
!9361 = !DILocation(line: 5131, column: 2, scope: !9358)
!9362 = !DILocation(line: 5133, column: 11, scope: !9363)
!9363 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 5133, column: 11)
!9364 = !DILocation(line: 5133, column: 11, scope: !9348)
!9365 = !DILocation(line: 5135, column: 21, scope: !9366)
!9366 = distinct !DILexicalBlock(scope: !9363, file: !3, line: 5134, column: 2)
!9367 = !DILocation(line: 5135, column: 4, scope: !9366)
!9368 = !DILocation(line: 5135, column: 19, scope: !9366)
!9369 = !DILocation(line: 5136, column: 21, scope: !9366)
!9370 = !DILocation(line: 5136, column: 4, scope: !9366)
!9371 = !DILocation(line: 5137, column: 11, scope: !9366)
!9372 = !DILocation(line: 5137, column: 4, scope: !9366)
!9373 = !DILocation(line: 5139, column: 7, scope: !9348)
!9374 = !DILocation(line: 5142, column: 11, scope: !9375)
!9375 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 5142, column: 11)
!9376 = !DILocation(line: 5142, column: 11, scope: !9348)
!9377 = !DILocation(line: 5144, column: 21, scope: !9378)
!9378 = distinct !DILexicalBlock(scope: !9375, file: !3, line: 5143, column: 2)
!9379 = !DILocation(line: 5144, column: 4, scope: !9378)
!9380 = !DILocation(line: 5144, column: 19, scope: !9378)
!9381 = !DILocation(line: 5145, column: 11, scope: !9378)
!9382 = !DILocation(line: 5145, column: 4, scope: !9378)
!9383 = !DILocation(line: 5147, column: 7, scope: !9348)
!9384 = !DILocation(line: 5150, column: 17, scope: !9330)
!9385 = !DILocation(line: 5150, column: 23, scope: !9330)
!9386 = !DILocation(line: 5150, column: 29, scope: !9330)
!9387 = !DILocation(line: 5150, column: 3, scope: !9330)
!9388 = !DILocation(line: 5152, column: 11, scope: !9330)
!9389 = !DILocation(line: 5152, column: 3, scope: !9330)
!9390 = !DILocation(line: 5156, column: 24, scope: !9391)
!9391 = distinct !DILexicalBlock(scope: !9330, file: !3, line: 5153, column: 5)
!9392 = !DILocation(line: 5156, column: 7, scope: !9391)
!9393 = !DILocation(line: 5157, column: 7, scope: !9391)
!9394 = !DILocation(line: 5159, column: 7, scope: !9391)
!9395 = !DILocation(line: 5162, column: 10, scope: !9330)
!9396 = !DILocation(line: 5162, column: 3, scope: !9330)
!9397 = !DILocation(line: 5163, column: 1, scope: !9330)
!9398 = distinct !DISubprogram(name: "emit", scope: !3, file: !3, line: 5206, type: !2610, scopeLine: 5207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9399 = !DILocalVariable(name: "x", arg: 1, scope: !9398, file: !3, line: 5206, type: !1125)
!9400 = !DILocation(line: 5206, column: 11, scope: !9398)
!9401 = !DILocalVariable(name: "code", scope: !9398, file: !3, line: 5208, type: !377)
!9402 = !DILocation(line: 5208, column: 17, scope: !9398)
!9403 = !DILocation(line: 5208, column: 39, scope: !9398)
!9404 = !DILocation(line: 5208, column: 24, scope: !9398)
!9405 = !DILocation(line: 5210, column: 11, scope: !9398)
!9406 = !DILocation(line: 5210, column: 3, scope: !9398)
!9407 = !DILocation(line: 5213, column: 26, scope: !9408)
!9408 = distinct !DILexicalBlock(scope: !9398, file: !3, line: 5211, column: 5)
!9409 = !DILocation(line: 5213, column: 14, scope: !9408)
!9410 = !DILocation(line: 5213, column: 7, scope: !9408)
!9411 = !DILocation(line: 5215, column: 25, scope: !9408)
!9412 = !DILocation(line: 5215, column: 14, scope: !9408)
!9413 = !DILocation(line: 5215, column: 7, scope: !9408)
!9414 = !DILocalVariable(name: "insn", scope: !9415, file: !3, line: 5218, type: !1125)
!9415 = distinct !DILexicalBlock(scope: !9408, file: !3, line: 5217, column: 7)
!9416 = !DILocation(line: 5218, column: 6, scope: !9415)
!9417 = !DILocation(line: 5218, column: 29, scope: !9415)
!9418 = !DILocation(line: 5218, column: 13, scope: !9415)
!9419 = !DILocation(line: 5219, column: 24, scope: !9420)
!9420 = distinct !DILexicalBlock(scope: !9415, file: !3, line: 5219, column: 6)
!9421 = !DILocation(line: 5219, column: 6, scope: !9420)
!9422 = !DILocation(line: 5219, column: 30, scope: !9420)
!9423 = !DILocation(line: 5219, column: 33, scope: !9420)
!9424 = !DILocation(line: 5219, column: 46, scope: !9420)
!9425 = !DILocation(line: 5219, column: 6, scope: !9415)
!9426 = !DILocation(line: 5220, column: 11, scope: !9420)
!9427 = !DILocation(line: 5220, column: 4, scope: !9420)
!9428 = !DILocation(line: 5221, column: 9, scope: !9415)
!9429 = !DILocation(line: 5221, column: 2, scope: !9415)
!9430 = !DILocation(line: 5224, column: 30, scope: !9408)
!9431 = !DILocation(line: 5224, column: 14, scope: !9408)
!9432 = !DILocation(line: 5224, column: 7, scope: !9408)
!9433 = !DILocation(line: 5226, column: 31, scope: !9408)
!9434 = !DILocation(line: 5226, column: 14, scope: !9408)
!9435 = !DILocation(line: 5226, column: 7, scope: !9408)
!9436 = !DILocation(line: 5228, column: 7, scope: !9408)
!9437 = !DILocation(line: 5229, column: 5, scope: !9408)
!9438 = !DILocation(line: 5231, column: 5, scope: !9398)
!9439 = !DILocation(line: 5233, column: 1, scope: !9398)
!9440 = distinct !DISubprogram(name: "classify_insn", scope: !3, file: !3, line: 5169, type: !9441, scopeLine: 5170, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9441 = !DISubroutineType(types: !9442)
!9442 = !{!377, !1125}
!9443 = !DILocalVariable(name: "x", arg: 1, scope: !9440, file: !3, line: 5169, type: !1125)
!9444 = !DILocation(line: 5169, column: 20, scope: !9440)
!9445 = !DILocation(line: 5171, column: 7, scope: !9446)
!9446 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 5171, column: 7)
!9447 = !DILocation(line: 5171, column: 7, scope: !9440)
!9448 = !DILocation(line: 5172, column: 5, scope: !9446)
!9449 = !DILocation(line: 5173, column: 7, scope: !9450)
!9450 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 5173, column: 7)
!9451 = !DILocation(line: 5173, column: 20, scope: !9450)
!9452 = !DILocation(line: 5173, column: 7, scope: !9440)
!9453 = !DILocation(line: 5174, column: 5, scope: !9450)
!9454 = !DILocation(line: 5175, column: 7, scope: !9455)
!9455 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 5175, column: 7)
!9456 = !DILocation(line: 5175, column: 20, scope: !9455)
!9457 = !DILocation(line: 5175, column: 7, scope: !9440)
!9458 = !DILocation(line: 5176, column: 5, scope: !9455)
!9459 = !DILocation(line: 5177, column: 7, scope: !9460)
!9460 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 5177, column: 7)
!9461 = !DILocation(line: 5177, column: 20, scope: !9460)
!9462 = !DILocation(line: 5177, column: 7, scope: !9440)
!9463 = !DILocation(line: 5179, column: 11, scope: !9464)
!9464 = distinct !DILexicalBlock(scope: !9465, file: !3, line: 5179, column: 11)
!9465 = distinct !DILexicalBlock(scope: !9460, file: !3, line: 5178, column: 5)
!9466 = !DILocation(line: 5179, column: 27, scope: !9464)
!9467 = !DILocation(line: 5179, column: 24, scope: !9464)
!9468 = !DILocation(line: 5179, column: 11, scope: !9465)
!9469 = !DILocation(line: 5180, column: 2, scope: !9464)
!9470 = !DILocation(line: 5181, column: 16, scope: !9471)
!9471 = distinct !DILexicalBlock(scope: !9464, file: !3, line: 5181, column: 16)
!9472 = !DILocation(line: 5181, column: 39, scope: !9471)
!9473 = !DILocation(line: 5181, column: 16, scope: !9464)
!9474 = !DILocation(line: 5182, column: 2, scope: !9471)
!9475 = !DILocation(line: 5184, column: 2, scope: !9471)
!9476 = !DILocation(line: 5186, column: 7, scope: !9477)
!9477 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 5186, column: 7)
!9478 = !DILocation(line: 5186, column: 20, scope: !9477)
!9479 = !DILocation(line: 5186, column: 7, scope: !9440)
!9480 = !DILocalVariable(name: "j", scope: !9481, file: !3, line: 5188, type: !1149)
!9481 = distinct !DILexicalBlock(scope: !9477, file: !3, line: 5187, column: 5)
!9482 = !DILocation(line: 5188, column: 11, scope: !9481)
!9483 = !DILocation(line: 5189, column: 16, scope: !9484)
!9484 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 5189, column: 7)
!9485 = !DILocation(line: 5189, column: 31, scope: !9484)
!9486 = !DILocation(line: 5189, column: 14, scope: !9484)
!9487 = !DILocation(line: 5189, column: 12, scope: !9484)
!9488 = !DILocation(line: 5189, column: 36, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9484, file: !3, line: 5189, column: 7)
!9490 = !DILocation(line: 5189, column: 38, scope: !9489)
!9491 = !DILocation(line: 5189, column: 7, scope: !9484)
!9492 = !DILocation(line: 5190, column: 6, scope: !9493)
!9493 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 5190, column: 6)
!9494 = !DILocation(line: 5190, column: 35, scope: !9493)
!9495 = !DILocation(line: 5190, column: 6, scope: !9489)
!9496 = !DILocation(line: 5191, column: 4, scope: !9493)
!9497 = !DILocation(line: 5192, column: 11, scope: !9498)
!9498 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 5192, column: 11)
!9499 = !DILocation(line: 5192, column: 40, scope: !9498)
!9500 = !DILocation(line: 5193, column: 4, scope: !9498)
!9501 = !DILocation(line: 5193, column: 7, scope: !9498)
!9502 = !DILocation(line: 5193, column: 39, scope: !9498)
!9503 = !DILocation(line: 5193, column: 36, scope: !9498)
!9504 = !DILocation(line: 5192, column: 11, scope: !9493)
!9505 = !DILocation(line: 5194, column: 4, scope: !9498)
!9506 = !DILocation(line: 5195, column: 11, scope: !9507)
!9507 = distinct !DILexicalBlock(scope: !9498, file: !3, line: 5195, column: 11)
!9508 = !DILocation(line: 5195, column: 40, scope: !9507)
!9509 = !DILocation(line: 5196, column: 4, scope: !9507)
!9510 = !DILocation(line: 5196, column: 7, scope: !9507)
!9511 = !DILocation(line: 5196, column: 46, scope: !9507)
!9512 = !DILocation(line: 5195, column: 11, scope: !9498)
!9513 = !DILocation(line: 5197, column: 4, scope: !9507)
!9514 = !DILocation(line: 5190, column: 38, scope: !9493)
!9515 = !DILocation(line: 5189, column: 45, scope: !9489)
!9516 = !DILocation(line: 5189, column: 7, scope: !9489)
!9517 = distinct !{!9517, !9491, !9518}
!9518 = !DILocation(line: 5197, column: 11, scope: !9484)
!9519 = !DILocation(line: 5198, column: 5, scope: !9481)
!9520 = !DILocation(line: 5199, column: 3, scope: !9440)
!9521 = !DILocation(line: 5200, column: 1, scope: !9440)
!9522 = distinct !DISubprogram(name: "push_to_sequence", scope: !3, file: !3, line: 5273, type: !3725, scopeLine: 5274, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9523 = !DILocalVariable(name: "first", arg: 1, scope: !9522, file: !3, line: 5273, type: !1125)
!9524 = !DILocation(line: 5273, column: 23, scope: !9522)
!9525 = !DILocalVariable(name: "last", scope: !9522, file: !3, line: 5275, type: !1125)
!9526 = !DILocation(line: 5275, column: 7, scope: !9522)
!9527 = !DILocation(line: 5277, column: 3, scope: !9522)
!9528 = !DILocation(line: 5279, column: 15, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 5279, column: 3)
!9530 = !DILocation(line: 5279, column: 13, scope: !9529)
!9531 = !DILocation(line: 5279, column: 8, scope: !9529)
!9532 = !DILocation(line: 5279, column: 22, scope: !9533)
!9533 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5279, column: 3)
!9534 = !DILocation(line: 5279, column: 27, scope: !9533)
!9535 = !DILocation(line: 5279, column: 30, scope: !9533)
!9536 = !DILocation(line: 0, scope: !9533)
!9537 = !DILocation(line: 5279, column: 3, scope: !9529)
!9538 = !DILocation(line: 5279, column: 55, scope: !9533)
!9539 = !DILocation(line: 5279, column: 53, scope: !9533)
!9540 = !DILocation(line: 5279, column: 3, scope: !9533)
!9541 = distinct !{!9541, !9537, !9542}
!9542 = !DILocation(line: 5279, column: 72, scope: !9529)
!9543 = !DILocation(line: 5281, column: 16, scope: !9522)
!9544 = !DILocation(line: 5281, column: 14, scope: !9522)
!9545 = !DILocation(line: 5282, column: 15, scope: !9522)
!9546 = !DILocation(line: 5282, column: 13, scope: !9522)
!9547 = !DILocation(line: 5283, column: 1, scope: !9522)
!9548 = distinct !DISubprogram(name: "push_to_sequence2", scope: !3, file: !3, line: 5289, type: !3382, scopeLine: 5290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9549 = !DILocalVariable(name: "first", arg: 1, scope: !9548, file: !3, line: 5289, type: !1125)
!9550 = !DILocation(line: 5289, column: 24, scope: !9548)
!9551 = !DILocalVariable(name: "last", arg: 2, scope: !9548, file: !3, line: 5289, type: !1125)
!9552 = !DILocation(line: 5289, column: 35, scope: !9548)
!9553 = !DILocation(line: 5291, column: 3, scope: !9548)
!9554 = !DILocation(line: 5293, column: 16, scope: !9548)
!9555 = !DILocation(line: 5293, column: 14, scope: !9548)
!9556 = !DILocation(line: 5294, column: 15, scope: !9548)
!9557 = !DILocation(line: 5294, column: 13, scope: !9548)
!9558 = !DILocation(line: 5295, column: 1, scope: !9548)
!9559 = distinct !DISubprogram(name: "push_topmost_sequence", scope: !3, file: !3, line: 5301, type: !5896, scopeLine: 5302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9560 = !DILocalVariable(name: "stack", scope: !9559, file: !3, line: 5303, type: !2171)
!9561 = !DILocation(line: 5303, column: 26, scope: !9559)
!9562 = !DILocalVariable(name: "top", scope: !9559, file: !3, line: 5303, type: !2171)
!9563 = !DILocation(line: 5303, column: 34, scope: !9559)
!9564 = !DILocation(line: 5305, column: 3, scope: !9559)
!9565 = !DILocation(line: 5307, column: 16, scope: !9566)
!9566 = distinct !DILexicalBlock(scope: !9559, file: !3, line: 5307, column: 3)
!9567 = !DILocation(line: 5307, column: 14, scope: !9566)
!9568 = !DILocation(line: 5307, column: 8, scope: !9566)
!9569 = !DILocation(line: 5307, column: 27, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9566, file: !3, line: 5307, column: 3)
!9571 = !DILocation(line: 5307, column: 3, scope: !9566)
!9572 = !DILocation(line: 5308, column: 11, scope: !9570)
!9573 = !DILocation(line: 5308, column: 9, scope: !9570)
!9574 = !DILocation(line: 5308, column: 5, scope: !9570)
!9575 = !DILocation(line: 5307, column: 42, scope: !9570)
!9576 = !DILocation(line: 5307, column: 49, scope: !9570)
!9577 = !DILocation(line: 5307, column: 40, scope: !9570)
!9578 = !DILocation(line: 5307, column: 3, scope: !9570)
!9579 = distinct !{!9579, !9571, !9580}
!9580 = !DILocation(line: 5308, column: 11, scope: !9566)
!9581 = !DILocation(line: 5310, column: 16, scope: !9559)
!9582 = !DILocation(line: 5310, column: 21, scope: !9559)
!9583 = !DILocation(line: 5310, column: 14, scope: !9559)
!9584 = !DILocation(line: 5311, column: 15, scope: !9559)
!9585 = !DILocation(line: 5311, column: 20, scope: !9559)
!9586 = !DILocation(line: 5311, column: 13, scope: !9559)
!9587 = !DILocation(line: 5312, column: 1, scope: !9559)
!9588 = distinct !DISubprogram(name: "pop_topmost_sequence", scope: !3, file: !3, line: 5318, type: !5896, scopeLine: 5319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9589 = !DILocalVariable(name: "stack", scope: !9588, file: !3, line: 5320, type: !2171)
!9590 = !DILocation(line: 5320, column: 26, scope: !9588)
!9591 = !DILocalVariable(name: "top", scope: !9588, file: !3, line: 5320, type: !2171)
!9592 = !DILocation(line: 5320, column: 34, scope: !9588)
!9593 = !DILocation(line: 5322, column: 16, scope: !9594)
!9594 = distinct !DILexicalBlock(scope: !9588, file: !3, line: 5322, column: 3)
!9595 = !DILocation(line: 5322, column: 14, scope: !9594)
!9596 = !DILocation(line: 5322, column: 8, scope: !9594)
!9597 = !DILocation(line: 5322, column: 27, scope: !9598)
!9598 = distinct !DILexicalBlock(scope: !9594, file: !3, line: 5322, column: 3)
!9599 = !DILocation(line: 5322, column: 3, scope: !9594)
!9600 = !DILocation(line: 5323, column: 11, scope: !9598)
!9601 = !DILocation(line: 5323, column: 9, scope: !9598)
!9602 = !DILocation(line: 5323, column: 5, scope: !9598)
!9603 = !DILocation(line: 5322, column: 42, scope: !9598)
!9604 = !DILocation(line: 5322, column: 49, scope: !9598)
!9605 = !DILocation(line: 5322, column: 40, scope: !9598)
!9606 = !DILocation(line: 5322, column: 3, scope: !9598)
!9607 = distinct !{!9607, !9599, !9608}
!9608 = !DILocation(line: 5323, column: 11, scope: !9594)
!9609 = !DILocation(line: 5325, column: 16, scope: !9588)
!9610 = !DILocation(line: 5325, column: 3, scope: !9588)
!9611 = !DILocation(line: 5325, column: 8, scope: !9588)
!9612 = !DILocation(line: 5325, column: 14, scope: !9588)
!9613 = !DILocation(line: 5326, column: 15, scope: !9588)
!9614 = !DILocation(line: 5326, column: 3, scope: !9588)
!9615 = !DILocation(line: 5326, column: 8, scope: !9588)
!9616 = !DILocation(line: 5326, column: 13, scope: !9588)
!9617 = !DILocation(line: 5328, column: 3, scope: !9588)
!9618 = !DILocation(line: 5329, column: 1, scope: !9588)
!9619 = distinct !DISubprogram(name: "in_sequence_p", scope: !3, file: !3, line: 5361, type: !3745, scopeLine: 5362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9620 = !DILocation(line: 5363, column: 10, scope: !9619)
!9621 = !DILocation(line: 5363, column: 20, scope: !9619)
!9622 = !DILocation(line: 5363, column: 3, scope: !9619)
!9623 = distinct !DISubprogram(name: "copy_insn_1", scope: !3, file: !3, line: 5407, type: !2610, scopeLine: 5408, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9624 = !DILocalVariable(name: "orig", arg: 1, scope: !9623, file: !3, line: 5407, type: !1125)
!9625 = !DILocation(line: 5407, column: 18, scope: !9623)
!9626 = !DILocalVariable(name: "copy", scope: !9623, file: !3, line: 5409, type: !1125)
!9627 = !DILocation(line: 5409, column: 7, scope: !9623)
!9628 = !DILocalVariable(name: "i", scope: !9623, file: !3, line: 5410, type: !1149)
!9629 = !DILocation(line: 5410, column: 7, scope: !9623)
!9630 = !DILocalVariable(name: "j", scope: !9623, file: !3, line: 5410, type: !1149)
!9631 = !DILocation(line: 5410, column: 10, scope: !9623)
!9632 = !DILocalVariable(name: "code", scope: !9623, file: !3, line: 5411, type: !377)
!9633 = !DILocation(line: 5411, column: 12, scope: !9623)
!9634 = !DILocalVariable(name: "format_ptr", scope: !9623, file: !3, line: 5412, type: !1152)
!9635 = !DILocation(line: 5412, column: 15, scope: !9623)
!9636 = !DILocation(line: 5414, column: 7, scope: !9637)
!9637 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 5414, column: 7)
!9638 = !DILocation(line: 5414, column: 12, scope: !9637)
!9639 = !DILocation(line: 5414, column: 7, scope: !9623)
!9640 = !DILocation(line: 5415, column: 5, scope: !9637)
!9641 = !DILocation(line: 5417, column: 10, scope: !9623)
!9642 = !DILocation(line: 5417, column: 8, scope: !9623)
!9643 = !DILocation(line: 5419, column: 11, scope: !9623)
!9644 = !DILocation(line: 5419, column: 3, scope: !9623)
!9645 = !DILocation(line: 5430, column: 14, scope: !9646)
!9646 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 5420, column: 5)
!9647 = !DILocation(line: 5430, column: 7, scope: !9646)
!9648 = !DILocation(line: 5432, column: 11, scope: !9649)
!9649 = distinct !DILexicalBlock(scope: !9646, file: !3, line: 5432, column: 11)
!9650 = !DILocation(line: 5432, column: 34, scope: !9649)
!9651 = !DILocation(line: 5432, column: 37, scope: !9649)
!9652 = !DILocation(line: 5432, column: 60, scope: !9649)
!9653 = !DILocation(line: 5432, column: 11, scope: !9646)
!9654 = !DILocation(line: 5433, column: 9, scope: !9649)
!9655 = !DILocation(line: 5433, column: 2, scope: !9649)
!9656 = !DILocation(line: 5434, column: 7, scope: !9646)
!9657 = !DILocation(line: 5437, column: 14, scope: !9658)
!9658 = distinct !DILexicalBlock(scope: !9646, file: !3, line: 5437, column: 7)
!9659 = !DILocation(line: 5437, column: 12, scope: !9658)
!9660 = !DILocation(line: 5437, column: 19, scope: !9661)
!9661 = distinct !DILexicalBlock(scope: !9658, file: !3, line: 5437, column: 7)
!9662 = !DILocation(line: 5437, column: 23, scope: !9661)
!9663 = !DILocation(line: 5437, column: 21, scope: !9661)
!9664 = !DILocation(line: 5437, column: 7, scope: !9658)
!9665 = !DILocation(line: 5438, column: 27, scope: !9666)
!9666 = distinct !DILexicalBlock(scope: !9661, file: !3, line: 5438, column: 6)
!9667 = !DILocation(line: 5438, column: 6, scope: !9666)
!9668 = !DILocation(line: 5438, column: 33, scope: !9666)
!9669 = !DILocation(line: 5438, column: 30, scope: !9666)
!9670 = !DILocation(line: 5438, column: 6, scope: !9661)
!9671 = !DILocation(line: 5439, column: 33, scope: !9666)
!9672 = !DILocation(line: 5439, column: 11, scope: !9666)
!9673 = !DILocation(line: 5439, column: 4, scope: !9666)
!9674 = !DILocation(line: 5437, column: 47, scope: !9661)
!9675 = !DILocation(line: 5437, column: 7, scope: !9661)
!9676 = distinct !{!9676, !9664, !9677}
!9677 = !DILocation(line: 5439, column: 34, scope: !9658)
!9678 = !DILocation(line: 5440, column: 7, scope: !9646)
!9679 = !DILocation(line: 5443, column: 27, scope: !9680)
!9680 = distinct !DILexicalBlock(scope: !9646, file: !3, line: 5443, column: 11)
!9681 = !DILocation(line: 5443, column: 11, scope: !9680)
!9682 = !DILocation(line: 5443, column: 11, scope: !9646)
!9683 = !DILocation(line: 5444, column: 9, scope: !9680)
!9684 = !DILocation(line: 5444, column: 2, scope: !9680)
!9685 = !DILocation(line: 5445, column: 7, scope: !9646)
!9686 = !DILocation(line: 5453, column: 7, scope: !9646)
!9687 = !DILocation(line: 5460, column: 10, scope: !9623)
!9688 = !DILocation(line: 5460, column: 8, scope: !9623)
!9689 = !DILocation(line: 5464, column: 3, scope: !9623)
!9690 = !DILocation(line: 5464, column: 25, scope: !9623)
!9691 = !DILocation(line: 5467, column: 7, scope: !9692)
!9692 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 5467, column: 7)
!9693 = !DILocation(line: 5467, column: 7, scope: !9623)
!9694 = !DILocation(line: 5469, column: 7, scope: !9695)
!9695 = distinct !DILexicalBlock(scope: !9692, file: !3, line: 5468, column: 5)
!9696 = !DILocation(line: 5469, column: 29, scope: !9695)
!9697 = !DILocation(line: 5470, column: 7, scope: !9695)
!9698 = !DILocation(line: 5470, column: 29, scope: !9695)
!9699 = !DILocation(line: 5471, column: 7, scope: !9695)
!9700 = !DILocation(line: 5471, column: 38, scope: !9695)
!9701 = !DILocation(line: 5472, column: 5, scope: !9695)
!9702 = !DILocation(line: 5474, column: 16, scope: !9623)
!9703 = !DILocation(line: 5474, column: 14, scope: !9623)
!9704 = !DILocation(line: 5476, column: 10, scope: !9705)
!9705 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 5476, column: 3)
!9706 = !DILocation(line: 5476, column: 8, scope: !9705)
!9707 = !DILocation(line: 5476, column: 15, scope: !9708)
!9708 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 5476, column: 3)
!9709 = !DILocation(line: 5476, column: 19, scope: !9708)
!9710 = !DILocation(line: 5476, column: 17, scope: !9708)
!9711 = !DILocation(line: 5476, column: 3, scope: !9705)
!9712 = !DILocation(line: 5477, column: 24, scope: !9708)
!9713 = !DILocation(line: 5477, column: 13, scope: !9708)
!9714 = !DILocation(line: 5477, column: 5, scope: !9708)
!9715 = !DILocation(line: 5480, column: 6, scope: !9716)
!9716 = distinct !DILexicalBlock(scope: !9717, file: !3, line: 5480, column: 6)
!9717 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 5478, column: 7)
!9718 = !DILocation(line: 5480, column: 21, scope: !9716)
!9719 = !DILocation(line: 5480, column: 6, scope: !9717)
!9720 = !DILocation(line: 5481, column: 34, scope: !9716)
!9721 = !DILocation(line: 5481, column: 21, scope: !9716)
!9722 = !DILocation(line: 5481, column: 4, scope: !9716)
!9723 = !DILocation(line: 5481, column: 19, scope: !9716)
!9724 = !DILocation(line: 5482, column: 2, scope: !9717)
!9725 = !DILocation(line: 5486, column: 6, scope: !9726)
!9726 = distinct !DILexicalBlock(scope: !9717, file: !3, line: 5486, column: 6)
!9727 = !DILocation(line: 5486, column: 24, scope: !9726)
!9728 = !DILocation(line: 5486, column: 21, scope: !9726)
!9729 = !DILocation(line: 5486, column: 6, scope: !9717)
!9730 = !DILocation(line: 5487, column: 21, scope: !9726)
!9731 = !DILocation(line: 5487, column: 4, scope: !9726)
!9732 = !DILocation(line: 5487, column: 19, scope: !9726)
!9733 = !DILocation(line: 5488, column: 11, scope: !9734)
!9734 = distinct !DILexicalBlock(scope: !9726, file: !3, line: 5488, column: 11)
!9735 = !DILocation(line: 5488, column: 29, scope: !9734)
!9736 = !DILocation(line: 5488, column: 26, scope: !9734)
!9737 = !DILocation(line: 5488, column: 11, scope: !9726)
!9738 = !DILocation(line: 5489, column: 21, scope: !9734)
!9739 = !DILocation(line: 5489, column: 4, scope: !9734)
!9740 = !DILocation(line: 5489, column: 19, scope: !9734)
!9741 = !DILocation(line: 5490, column: 11, scope: !9742)
!9742 = distinct !DILexicalBlock(scope: !9734, file: !3, line: 5490, column: 11)
!9743 = !DILocation(line: 5490, column: 26, scope: !9742)
!9744 = !DILocation(line: 5490, column: 11, scope: !9734)
!9745 = !DILocation(line: 5492, column: 36, scope: !9746)
!9746 = distinct !DILexicalBlock(scope: !9742, file: !3, line: 5491, column: 4)
!9747 = !DILocation(line: 5492, column: 23, scope: !9746)
!9748 = !DILocation(line: 5492, column: 6, scope: !9746)
!9749 = !DILocation(line: 5492, column: 21, scope: !9746)
!9750 = !DILocation(line: 5493, column: 13, scope: !9751)
!9751 = distinct !DILexicalBlock(scope: !9746, file: !3, line: 5493, column: 6)
!9752 = !DILocation(line: 5493, column: 11, scope: !9751)
!9753 = !DILocation(line: 5493, column: 18, scope: !9754)
!9754 = distinct !DILexicalBlock(scope: !9751, file: !3, line: 5493, column: 6)
!9755 = !DILocation(line: 5493, column: 22, scope: !9754)
!9756 = !DILocation(line: 5493, column: 20, scope: !9754)
!9757 = !DILocation(line: 5493, column: 6, scope: !9751)
!9758 = !DILocation(line: 5494, column: 44, scope: !9754)
!9759 = !DILocation(line: 5494, column: 31, scope: !9754)
!9760 = !DILocation(line: 5494, column: 8, scope: !9754)
!9761 = !DILocation(line: 5494, column: 29, scope: !9754)
!9762 = !DILocation(line: 5493, column: 42, scope: !9754)
!9763 = !DILocation(line: 5493, column: 6, scope: !9754)
!9764 = distinct !{!9764, !9757, !9765}
!9765 = !DILocation(line: 5494, column: 64, scope: !9751)
!9766 = !DILocation(line: 5495, column: 4, scope: !9746)
!9767 = !DILocation(line: 5496, column: 2, scope: !9717)
!9768 = !DILocation(line: 5506, column: 2, scope: !9717)
!9769 = !DILocation(line: 5509, column: 2, scope: !9717)
!9770 = !DILocation(line: 5510, column: 7, scope: !9717)
!9771 = !DILocation(line: 5476, column: 54, scope: !9708)
!9772 = !DILocation(line: 5476, column: 3, scope: !9708)
!9773 = distinct !{!9773, !9711, !9774}
!9774 = !DILocation(line: 5510, column: 7, scope: !9705)
!9775 = !DILocation(line: 5512, column: 7, scope: !9776)
!9776 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 5512, column: 7)
!9777 = !DILocation(line: 5512, column: 12, scope: !9776)
!9778 = !DILocation(line: 5512, column: 7, scope: !9623)
!9779 = !DILocation(line: 5514, column: 32, scope: !9780)
!9780 = distinct !DILexicalBlock(scope: !9776, file: !3, line: 5513, column: 5)
!9781 = !DILocation(line: 5514, column: 9, scope: !9780)
!9782 = !DILocation(line: 5515, column: 7, scope: !9780)
!9783 = !DILocation(line: 5516, column: 33, scope: !9780)
!9784 = !DILocation(line: 5516, column: 28, scope: !9780)
!9785 = !DILocation(line: 5516, column: 7, scope: !9780)
!9786 = !DILocation(line: 5516, column: 31, scope: !9780)
!9787 = !DILocation(line: 5517, column: 34, scope: !9780)
!9788 = !DILocation(line: 5517, column: 29, scope: !9780)
!9789 = !DILocation(line: 5517, column: 7, scope: !9780)
!9790 = !DILocation(line: 5517, column: 32, scope: !9780)
!9791 = !DILocation(line: 5518, column: 5, scope: !9780)
!9792 = !DILocation(line: 5519, column: 12, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9776, file: !3, line: 5519, column: 12)
!9794 = !DILocation(line: 5519, column: 17, scope: !9793)
!9795 = !DILocation(line: 5519, column: 12, scope: !9776)
!9796 = !DILocation(line: 5521, column: 34, scope: !9797)
!9797 = distinct !DILexicalBlock(scope: !9793, file: !3, line: 5520, column: 5)
!9798 = !DILocation(line: 5521, column: 32, scope: !9797)
!9799 = !DILocation(line: 5522, column: 34, scope: !9797)
!9800 = !DILocation(line: 5522, column: 32, scope: !9797)
!9801 = !DILocation(line: 5523, column: 37, scope: !9797)
!9802 = !DILocation(line: 5523, column: 35, scope: !9797)
!9803 = !DILocation(line: 5524, column: 37, scope: !9797)
!9804 = !DILocation(line: 5524, column: 35, scope: !9797)
!9805 = !DILocation(line: 5525, column: 5, scope: !9797)
!9806 = !DILocation(line: 5527, column: 10, scope: !9623)
!9807 = !DILocation(line: 5527, column: 3, scope: !9623)
!9808 = !DILocation(line: 5528, column: 1, scope: !9623)
!9809 = distinct !DISubprogram(name: "copy_insn", scope: !3, file: !3, line: 5536, type: !2610, scopeLine: 5537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9810 = !DILocalVariable(name: "insn", arg: 1, scope: !9809, file: !3, line: 5536, type: !1125)
!9811 = !DILocation(line: 5536, column: 16, scope: !9809)
!9812 = !DILocation(line: 5538, column: 25, scope: !9809)
!9813 = !DILocation(line: 5539, column: 28, scope: !9809)
!9814 = !DILocation(line: 5540, column: 31, scope: !9809)
!9815 = !DILocation(line: 5541, column: 28, scope: !9809)
!9816 = !DILocation(line: 5542, column: 31, scope: !9809)
!9817 = !DILocation(line: 5543, column: 23, scope: !9809)
!9818 = !DILocation(line: 5543, column: 10, scope: !9809)
!9819 = !DILocation(line: 5543, column: 3, scope: !9809)
!9820 = distinct !DISubprogram(name: "init_emit", scope: !3, file: !3, line: 5550, type: !5896, scopeLine: 5551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9821 = !DILocation(line: 5552, column: 14, scope: !9820)
!9822 = !DILocation(line: 5553, column: 13, scope: !9820)
!9823 = !DILocation(line: 5554, column: 7, scope: !9824)
!9824 = distinct !DILexicalBlock(scope: !9820, file: !3, line: 5554, column: 7)
!9825 = !DILocation(line: 5554, column: 7, scope: !9820)
!9826 = !DILocation(line: 5555, column: 20, scope: !9824)
!9827 = !DILocation(line: 5555, column: 18, scope: !9824)
!9828 = !DILocation(line: 5555, column: 5, scope: !9824)
!9829 = !DILocation(line: 5557, column: 18, scope: !9824)
!9830 = !DILocation(line: 5558, column: 22, scope: !9820)
!9831 = !DILocation(line: 5559, column: 14, scope: !9820)
!9832 = !DILocation(line: 5560, column: 17, scope: !9820)
!9833 = !DILocation(line: 5561, column: 21, scope: !9820)
!9834 = !DILocation(line: 5561, column: 19, scope: !9820)
!9835 = !DILocation(line: 5562, column: 13, scope: !9820)
!9836 = !DILocation(line: 5566, column: 41, scope: !9820)
!9837 = !DILocation(line: 5569, column: 7, scope: !9820)
!9838 = !DILocation(line: 5569, column: 5, scope: !9820)
!9839 = !DILocation(line: 5572, column: 7, scope: !9820)
!9840 = !DILocation(line: 5572, column: 5, scope: !9820)
!9841 = !DILocation(line: 5575, column: 11, scope: !9820)
!9842 = !DILocation(line: 5575, column: 3, scope: !9820)
!9843 = !DILocation(line: 5580, column: 3, scope: !9820)
!9844 = !DILocation(line: 5584, column: 3, scope: !9820)
!9845 = !DILocation(line: 5584, column: 35, scope: !9820)
!9846 = !DILocation(line: 5585, column: 3, scope: !9820)
!9847 = !DILocation(line: 5585, column: 35, scope: !9820)
!9848 = !DILocation(line: 5586, column: 3, scope: !9820)
!9849 = !DILocation(line: 5586, column: 40, scope: !9820)
!9850 = !DILocation(line: 5587, column: 3, scope: !9820)
!9851 = !DILocation(line: 5587, column: 33, scope: !9820)
!9852 = !DILocation(line: 5589, column: 3, scope: !9820)
!9853 = !DILocation(line: 5589, column: 43, scope: !9820)
!9854 = !DILocation(line: 5590, column: 3, scope: !9820)
!9855 = !DILocation(line: 5590, column: 40, scope: !9820)
!9856 = !DILocation(line: 5591, column: 3, scope: !9820)
!9857 = !DILocation(line: 5591, column: 43, scope: !9820)
!9858 = !DILocation(line: 5592, column: 3, scope: !9820)
!9859 = !DILocation(line: 5592, column: 43, scope: !9820)
!9860 = !DILocation(line: 5593, column: 3, scope: !9820)
!9861 = !DILocation(line: 5593, column: 33, scope: !9820)
!9862 = !DILocation(line: 5596, column: 3, scope: !9820)
!9863 = !DILocation(line: 5596, column: 46, scope: !9820)
!9864 = !DILocation(line: 5597, column: 3, scope: !9820)
!9865 = !DILocation(line: 5597, column: 46, scope: !9820)
!9866 = !DILocation(line: 5598, column: 3, scope: !9820)
!9867 = !DILocation(line: 5598, column: 51, scope: !9820)
!9868 = !DILocation(line: 5599, column: 3, scope: !9820)
!9869 = !DILocation(line: 5599, column: 44, scope: !9820)
!9870 = !DILocation(line: 5601, column: 3, scope: !9820)
!9871 = !DILocation(line: 5601, column: 54, scope: !9820)
!9872 = !DILocation(line: 5602, column: 3, scope: !9820)
!9873 = !DILocation(line: 5602, column: 51, scope: !9820)
!9874 = !DILocation(line: 5603, column: 3, scope: !9820)
!9875 = !DILocation(line: 5603, column: 54, scope: !9820)
!9876 = !DILocation(line: 5604, column: 3, scope: !9820)
!9877 = !DILocation(line: 5604, column: 54, scope: !9820)
!9878 = !DILocation(line: 5605, column: 3, scope: !9820)
!9879 = !DILocation(line: 5605, column: 44, scope: !9820)
!9880 = !DILocation(line: 5611, column: 1, scope: !9820)
!9881 = distinct !DISubprogram(name: "init_virtual_regs", scope: !3, file: !3, line: 5369, type: !5896, scopeLine: 5370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9882 = !DILocation(line: 5371, column: 49, scope: !9881)
!9883 = !DILocation(line: 5371, column: 3, scope: !9881)
!9884 = !DILocation(line: 5371, column: 47, scope: !9881)
!9885 = !DILocation(line: 5372, column: 46, scope: !9881)
!9886 = !DILocation(line: 5372, column: 3, scope: !9881)
!9887 = !DILocation(line: 5372, column: 44, scope: !9881)
!9888 = !DILocation(line: 5373, column: 49, scope: !9881)
!9889 = !DILocation(line: 5373, column: 3, scope: !9881)
!9890 = !DILocation(line: 5373, column: 47, scope: !9881)
!9891 = !DILocation(line: 5374, column: 49, scope: !9881)
!9892 = !DILocation(line: 5374, column: 3, scope: !9881)
!9893 = !DILocation(line: 5374, column: 47, scope: !9881)
!9894 = !DILocation(line: 5375, column: 39, scope: !9881)
!9895 = !DILocation(line: 5375, column: 3, scope: !9881)
!9896 = !DILocation(line: 5375, column: 37, scope: !9881)
!9897 = !DILocation(line: 5376, column: 1, scope: !9881)
!9898 = distinct !DISubprogram(name: "gen_rtx_CONST_VECTOR", scope: !3, file: !3, line: 5644, type: !9899, scopeLine: 5645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9899 = !DISubroutineType(types: !9900)
!9900 = !{!1125, !5, !1157}
!9901 = !DILocalVariable(name: "mode", arg: 1, scope: !9898, file: !3, line: 5644, type: !5)
!9902 = !DILocation(line: 5644, column: 41, scope: !9898)
!9903 = !DILocalVariable(name: "v", arg: 2, scope: !9898, file: !3, line: 5644, type: !1157)
!9904 = !DILocation(line: 5644, column: 53, scope: !9898)
!9905 = !DILocalVariable(name: "inner", scope: !9898, file: !3, line: 5646, type: !5)
!9906 = !DILocation(line: 5646, column: 21, scope: !9898)
!9907 = !DILocation(line: 5646, column: 29, scope: !9898)
!9908 = !DILocalVariable(name: "nunits", scope: !9898, file: !3, line: 5647, type: !1149)
!9909 = !DILocation(line: 5647, column: 7, scope: !9898)
!9910 = !DILocation(line: 5647, column: 16, scope: !9898)
!9911 = !DILocalVariable(name: "x", scope: !9898, file: !3, line: 5648, type: !1125)
!9912 = !DILocation(line: 5648, column: 7, scope: !9898)
!9913 = !DILocalVariable(name: "i", scope: !9898, file: !3, line: 5649, type: !1149)
!9914 = !DILocation(line: 5649, column: 7, scope: !9898)
!9915 = !DILocation(line: 5652, column: 7, scope: !9898)
!9916 = !DILocation(line: 5652, column: 5, scope: !9898)
!9917 = !DILocation(line: 5653, column: 12, scope: !9918)
!9918 = distinct !DILexicalBlock(scope: !9898, file: !3, line: 5653, column: 3)
!9919 = !DILocation(line: 5653, column: 19, scope: !9918)
!9920 = !DILocation(line: 5653, column: 10, scope: !9918)
!9921 = !DILocation(line: 5653, column: 8, scope: !9918)
!9922 = !DILocation(line: 5653, column: 24, scope: !9923)
!9923 = distinct !DILexicalBlock(scope: !9918, file: !3, line: 5653, column: 3)
!9924 = !DILocation(line: 5653, column: 26, scope: !9923)
!9925 = !DILocation(line: 5653, column: 3, scope: !9918)
!9926 = !DILocation(line: 5654, column: 9, scope: !9927)
!9927 = distinct !DILexicalBlock(scope: !9923, file: !3, line: 5654, column: 9)
!9928 = !DILocation(line: 5654, column: 29, scope: !9927)
!9929 = !DILocation(line: 5654, column: 26, scope: !9927)
!9930 = !DILocation(line: 5654, column: 9, scope: !9923)
!9931 = !DILocation(line: 5655, column: 7, scope: !9927)
!9932 = !DILocation(line: 5653, column: 33, scope: !9923)
!9933 = !DILocation(line: 5653, column: 3, scope: !9923)
!9934 = distinct !{!9934, !9925, !9935}
!9935 = !DILocation(line: 5655, column: 7, scope: !9918)
!9936 = !DILocation(line: 5659, column: 7, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9898, file: !3, line: 5659, column: 7)
!9938 = !DILocation(line: 5659, column: 9, scope: !9937)
!9939 = !DILocation(line: 5659, column: 7, scope: !9898)
!9940 = !DILocation(line: 5661, column: 11, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !9942, file: !3, line: 5661, column: 11)
!9942 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 5660, column: 5)
!9943 = !DILocation(line: 5661, column: 16, scope: !9941)
!9944 = !DILocation(line: 5661, column: 13, scope: !9941)
!9945 = !DILocation(line: 5661, column: 11, scope: !9942)
!9946 = !DILocation(line: 5662, column: 9, scope: !9941)
!9947 = !DILocation(line: 5662, column: 2, scope: !9941)
!9948 = !DILocation(line: 5663, column: 16, scope: !9949)
!9949 = distinct !DILexicalBlock(scope: !9941, file: !3, line: 5663, column: 16)
!9950 = !DILocation(line: 5663, column: 21, scope: !9949)
!9951 = !DILocation(line: 5663, column: 18, scope: !9949)
!9952 = !DILocation(line: 5663, column: 16, scope: !9941)
!9953 = !DILocation(line: 5664, column: 9, scope: !9949)
!9954 = !DILocation(line: 5664, column: 2, scope: !9949)
!9955 = !DILocation(line: 5665, column: 5, scope: !9942)
!9956 = !DILocation(line: 5667, column: 10, scope: !9898)
!9957 = !DILocation(line: 5667, column: 3, scope: !9898)
!9958 = !DILocation(line: 5668, column: 1, scope: !9898)
!9959 = distinct !DISubprogram(name: "init_emit_regs", scope: !3, file: !3, line: 5673, type: !5896, scopeLine: 5674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!9960 = !DILocalVariable(name: "i", scope: !9959, file: !3, line: 5675, type: !1149)
!9961 = !DILocation(line: 5675, column: 7, scope: !9959)
!9962 = !DILocation(line: 5678, column: 15, scope: !9959)
!9963 = !DILocation(line: 5678, column: 3, scope: !9959)
!9964 = !DILocation(line: 5681, column: 3, scope: !9959)
!9965 = !DILocation(line: 5684, column: 12, scope: !9959)
!9966 = !DILocation(line: 5684, column: 10, scope: !9959)
!9967 = !DILocation(line: 5685, column: 13, scope: !9959)
!9968 = !DILocation(line: 5685, column: 11, scope: !9959)
!9969 = !DILocation(line: 5686, column: 23, scope: !9959)
!9970 = !DILocation(line: 5686, column: 21, scope: !9959)
!9971 = !DILocation(line: 5687, column: 23, scope: !9959)
!9972 = !DILocation(line: 5687, column: 21, scope: !9959)
!9973 = !DILocation(line: 5688, column: 28, scope: !9959)
!9974 = !DILocation(line: 5688, column: 26, scope: !9959)
!9975 = !DILocation(line: 5689, column: 21, scope: !9959)
!9976 = !DILocation(line: 5689, column: 19, scope: !9959)
!9977 = !DILocation(line: 5691, column: 5, scope: !9959)
!9978 = !DILocation(line: 5690, column: 29, scope: !9959)
!9979 = !DILocation(line: 5693, column: 5, scope: !9959)
!9980 = !DILocation(line: 5692, column: 26, scope: !9959)
!9981 = !DILocation(line: 5695, column: 5, scope: !9959)
!9982 = !DILocation(line: 5694, column: 29, scope: !9959)
!9983 = !DILocation(line: 5697, column: 5, scope: !9959)
!9984 = !DILocation(line: 5696, column: 29, scope: !9959)
!9985 = !DILocation(line: 5698, column: 21, scope: !9959)
!9986 = !DILocation(line: 5698, column: 19, scope: !9959)
!9987 = !DILocation(line: 5702, column: 10, scope: !9988)
!9988 = distinct !DILexicalBlock(scope: !9959, file: !3, line: 5702, column: 3)
!9989 = !DILocation(line: 5702, column: 8, scope: !9988)
!9990 = !DILocation(line: 5702, column: 15, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9988, file: !3, line: 5702, column: 3)
!9992 = !DILocation(line: 5702, column: 17, scope: !9991)
!9993 = !DILocation(line: 5702, column: 3, scope: !9988)
!9994 = !DILocation(line: 5703, column: 57, scope: !9991)
!9995 = !DILocation(line: 5703, column: 44, scope: !9991)
!9996 = !DILocation(line: 5703, column: 61, scope: !9991)
!9997 = !DILocation(line: 5703, column: 31, scope: !9991)
!9998 = !DILocation(line: 5703, column: 26, scope: !9991)
!9999 = !DILocation(line: 5703, column: 5, scope: !9991)
!10000 = !DILocation(line: 5703, column: 29, scope: !9991)
!10001 = !DILocation(line: 5702, column: 43, scope: !9991)
!10002 = !DILocation(line: 5702, column: 3, scope: !9991)
!10003 = distinct !{!10003, !9993, !10004}
!10004 = !DILocation(line: 5703, column: 62, scope: !9988)
!10005 = !DILocation(line: 5710, column: 18, scope: !10006)
!10006 = distinct !DILexicalBlock(scope: !9959, file: !3, line: 5710, column: 7)
!10007 = !DILocation(line: 5710, column: 42, scope: !10006)
!10008 = !DILocation(line: 5710, column: 7, scope: !9959)
!10009 = !DILocation(line: 5711, column: 48, scope: !10006)
!10010 = !DILocation(line: 5711, column: 28, scope: !10006)
!10011 = !DILocation(line: 5711, column: 26, scope: !10006)
!10012 = !DILocation(line: 5711, column: 5, scope: !10006)
!10013 = !DILocation(line: 5713, column: 26, scope: !10006)
!10014 = !DILocation(line: 5714, column: 1, scope: !9959)
!10015 = distinct !DISubprogram(name: "init_emit_once", scope: !3, file: !3, line: 5719, type: !5896, scopeLine: 5720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10016 = !DILocalVariable(name: "i", scope: !10015, file: !3, line: 5721, type: !1149)
!10017 = !DILocation(line: 5721, column: 7, scope: !10015)
!10018 = !DILocalVariable(name: "mode", scope: !10015, file: !3, line: 5722, type: !5)
!10019 = !DILocation(line: 5722, column: 21, scope: !10015)
!10020 = !DILocalVariable(name: "double_mode", scope: !10015, file: !3, line: 5723, type: !5)
!10021 = !DILocation(line: 5723, column: 21, scope: !10015)
!10022 = !DILocation(line: 5727, column: 20, scope: !10015)
!10023 = !DILocation(line: 5727, column: 18, scope: !10015)
!10024 = !DILocation(line: 5730, column: 23, scope: !10015)
!10025 = !DILocation(line: 5730, column: 21, scope: !10015)
!10026 = !DILocation(line: 5733, column: 22, scope: !10015)
!10027 = !DILocation(line: 5733, column: 20, scope: !10015)
!10028 = !DILocation(line: 5736, column: 20, scope: !10015)
!10029 = !DILocation(line: 5736, column: 18, scope: !10015)
!10030 = !DILocation(line: 5738, column: 20, scope: !10015)
!10031 = !DILocation(line: 5738, column: 18, scope: !10015)
!10032 = !DILocation(line: 5743, column: 13, scope: !10015)
!10033 = !DILocation(line: 5744, column: 13, scope: !10015)
!10034 = !DILocation(line: 5745, column: 15, scope: !10015)
!10035 = !DILocation(line: 5747, column: 15, scope: !10036)
!10036 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5747, column: 3)
!10037 = !DILocation(line: 5747, column: 13, scope: !10036)
!10038 = !DILocation(line: 5747, column: 8, scope: !10036)
!10039 = !DILocation(line: 5748, column: 8, scope: !10040)
!10040 = distinct !DILexicalBlock(scope: !10036, file: !3, line: 5747, column: 3)
!10041 = !DILocation(line: 5748, column: 13, scope: !10040)
!10042 = !DILocation(line: 5747, column: 3, scope: !10036)
!10043 = !DILocation(line: 5751, column: 11, scope: !10044)
!10044 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 5751, column: 11)
!10045 = distinct !DILexicalBlock(scope: !10040, file: !3, line: 5750, column: 5)
!10046 = !DILocation(line: 5751, column: 35, scope: !10044)
!10047 = !DILocation(line: 5752, column: 4, scope: !10044)
!10048 = !DILocation(line: 5752, column: 7, scope: !10044)
!10049 = !DILocation(line: 5752, column: 17, scope: !10044)
!10050 = !DILocation(line: 5751, column: 11, scope: !10045)
!10051 = !DILocation(line: 5753, column: 14, scope: !10044)
!10052 = !DILocation(line: 5753, column: 12, scope: !10044)
!10053 = !DILocation(line: 5753, column: 2, scope: !10044)
!10054 = !DILocation(line: 5755, column: 11, scope: !10055)
!10055 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 5755, column: 11)
!10056 = !DILocation(line: 5755, column: 35, scope: !10055)
!10057 = !DILocation(line: 5756, column: 4, scope: !10055)
!10058 = !DILocation(line: 5756, column: 7, scope: !10055)
!10059 = !DILocation(line: 5756, column: 17, scope: !10055)
!10060 = !DILocation(line: 5755, column: 11, scope: !10045)
!10061 = !DILocation(line: 5757, column: 14, scope: !10055)
!10062 = !DILocation(line: 5757, column: 12, scope: !10055)
!10063 = !DILocation(line: 5757, column: 2, scope: !10055)
!10064 = !DILocation(line: 5758, column: 5, scope: !10045)
!10065 = !DILocation(line: 5749, column: 15, scope: !10040)
!10066 = !DILocation(line: 5749, column: 13, scope: !10040)
!10067 = !DILocation(line: 5747, column: 3, scope: !10040)
!10068 = distinct !{!10068, !10042, !10069}
!10069 = !DILocation(line: 5758, column: 5, scope: !10036)
!10070 = !DILocation(line: 5760, column: 15, scope: !10071)
!10071 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5760, column: 3)
!10072 = !DILocation(line: 5760, column: 13, scope: !10071)
!10073 = !DILocation(line: 5760, column: 8, scope: !10071)
!10074 = !DILocation(line: 5761, column: 8, scope: !10075)
!10075 = distinct !DILexicalBlock(scope: !10071, file: !3, line: 5760, column: 3)
!10076 = !DILocation(line: 5761, column: 13, scope: !10075)
!10077 = !DILocation(line: 5760, column: 3, scope: !10071)
!10078 = !DILocation(line: 5764, column: 11, scope: !10079)
!10079 = distinct !DILexicalBlock(scope: !10080, file: !3, line: 5764, column: 11)
!10080 = distinct !DILexicalBlock(scope: !10075, file: !3, line: 5763, column: 5)
!10081 = !DILocation(line: 5764, column: 35, scope: !10079)
!10082 = !DILocation(line: 5765, column: 4, scope: !10079)
!10083 = !DILocation(line: 5765, column: 7, scope: !10079)
!10084 = !DILocation(line: 5765, column: 19, scope: !10079)
!10085 = !DILocation(line: 5764, column: 11, scope: !10080)
!10086 = !DILocation(line: 5766, column: 16, scope: !10079)
!10087 = !DILocation(line: 5766, column: 14, scope: !10079)
!10088 = !DILocation(line: 5766, column: 2, scope: !10079)
!10089 = !DILocation(line: 5767, column: 5, scope: !10080)
!10090 = !DILocation(line: 5762, column: 15, scope: !10075)
!10091 = !DILocation(line: 5762, column: 13, scope: !10075)
!10092 = !DILocation(line: 5760, column: 3, scope: !10075)
!10093 = distinct !{!10093, !10077, !10094}
!10094 = !DILocation(line: 5767, column: 5, scope: !10071)
!10095 = !DILocation(line: 5769, column: 43, scope: !10015)
!10096 = !DILocation(line: 5769, column: 14, scope: !10015)
!10097 = !DILocation(line: 5769, column: 12, scope: !10015)
!10098 = !DILocation(line: 5783, column: 10, scope: !10099)
!10099 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5783, column: 3)
!10100 = !DILocation(line: 5783, column: 8, scope: !10099)
!10101 = !DILocation(line: 5783, column: 35, scope: !10102)
!10102 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 5783, column: 3)
!10103 = !DILocation(line: 5783, column: 37, scope: !10102)
!10104 = !DILocation(line: 5783, column: 3, scope: !10099)
!10105 = !DILocation(line: 5785, column: 7, scope: !10102)
!10106 = !DILocation(line: 5784, column: 19, scope: !10102)
!10107 = !DILocation(line: 5784, column: 21, scope: !10102)
!10108 = !DILocation(line: 5784, column: 5, scope: !10102)
!10109 = !DILocation(line: 5784, column: 44, scope: !10102)
!10110 = !DILocation(line: 5783, column: 62, scope: !10102)
!10111 = !DILocation(line: 5783, column: 3, scope: !10102)
!10112 = distinct !{!10112, !10104, !10113}
!10113 = !DILocation(line: 5785, column: 7, scope: !10099)
!10114 = !DILocation(line: 5789, column: 22, scope: !10115)
!10115 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5787, column: 7)
!10116 = !DILocation(line: 5789, column: 20, scope: !10115)
!10117 = !DILocation(line: 5793, column: 3, scope: !10015)
!10118 = !DILocation(line: 5794, column: 3, scope: !10015)
!10119 = !DILocation(line: 5795, column: 3, scope: !10015)
!10120 = !DILocation(line: 5797, column: 14, scope: !10015)
!10121 = !DILocation(line: 5798, column: 17, scope: !10015)
!10122 = !DILocation(line: 5800, column: 16, scope: !10015)
!10123 = !DILocation(line: 5801, column: 3, scope: !10015)
!10124 = !DILocation(line: 5803, column: 10, scope: !10125)
!10125 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5803, column: 3)
!10126 = !DILocation(line: 5803, column: 8, scope: !10125)
!10127 = !DILocation(line: 5803, column: 15, scope: !10128)
!10128 = distinct !DILexicalBlock(scope: !10125, file: !3, line: 5803, column: 3)
!10129 = !DILocation(line: 5803, column: 17, scope: !10128)
!10130 = !DILocation(line: 5803, column: 3, scope: !10125)
!10131 = !DILocalVariable(name: "r", scope: !10132, file: !3, line: 5805, type: !10133)
!10132 = distinct !DILexicalBlock(scope: !10128, file: !3, line: 5804, column: 5)
!10133 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2182)
!10134 = !DILocation(line: 5805, column: 36, scope: !10132)
!10135 = !DILocation(line: 5806, column: 3, scope: !10132)
!10136 = !DILocation(line: 5806, column: 5, scope: !10132)
!10137 = !DILocation(line: 5806, column: 23, scope: !10132)
!10138 = !DILocation(line: 5806, column: 25, scope: !10132)
!10139 = !DILocation(line: 5808, column: 19, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10132, file: !3, line: 5808, column: 7)
!10141 = !DILocation(line: 5808, column: 17, scope: !10140)
!10142 = !DILocation(line: 5808, column: 12, scope: !10140)
!10143 = !DILocation(line: 5809, column: 5, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10140, file: !3, line: 5808, column: 7)
!10145 = !DILocation(line: 5809, column: 10, scope: !10144)
!10146 = !DILocation(line: 5808, column: 7, scope: !10140)
!10147 = !DILocation(line: 5812, column: 4, scope: !10144)
!10148 = !DILocation(line: 5811, column: 17, scope: !10144)
!10149 = !DILocation(line: 5811, column: 2, scope: !10144)
!10150 = !DILocation(line: 5811, column: 26, scope: !10144)
!10151 = !DILocation(line: 5811, column: 32, scope: !10144)
!10152 = !DILocation(line: 5810, column: 12, scope: !10144)
!10153 = !DILocation(line: 5810, column: 10, scope: !10144)
!10154 = !DILocation(line: 5808, column: 7, scope: !10144)
!10155 = distinct !{!10155, !10146, !10156}
!10156 = !DILocation(line: 5812, column: 4, scope: !10140)
!10157 = !DILocation(line: 5814, column: 19, scope: !10158)
!10158 = distinct !DILexicalBlock(scope: !10132, file: !3, line: 5814, column: 7)
!10159 = !DILocation(line: 5814, column: 17, scope: !10158)
!10160 = !DILocation(line: 5814, column: 12, scope: !10158)
!10161 = !DILocation(line: 5815, column: 5, scope: !10162)
!10162 = distinct !DILexicalBlock(scope: !10158, file: !3, line: 5814, column: 7)
!10163 = !DILocation(line: 5815, column: 10, scope: !10162)
!10164 = !DILocation(line: 5814, column: 7, scope: !10158)
!10165 = !DILocation(line: 5818, column: 4, scope: !10162)
!10166 = !DILocation(line: 5817, column: 17, scope: !10162)
!10167 = !DILocation(line: 5817, column: 2, scope: !10162)
!10168 = !DILocation(line: 5817, column: 26, scope: !10162)
!10169 = !DILocation(line: 5817, column: 32, scope: !10162)
!10170 = !DILocation(line: 5816, column: 12, scope: !10162)
!10171 = !DILocation(line: 5816, column: 10, scope: !10162)
!10172 = !DILocation(line: 5814, column: 7, scope: !10162)
!10173 = distinct !{!10173, !10164, !10174}
!10174 = !DILocation(line: 5818, column: 4, scope: !10158)
!10175 = !DILocation(line: 5820, column: 43, scope: !10132)
!10176 = !DILocation(line: 5820, column: 22, scope: !10132)
!10177 = !DILocation(line: 5820, column: 7, scope: !10132)
!10178 = !DILocation(line: 5820, column: 41, scope: !10132)
!10179 = !DILocation(line: 5822, column: 19, scope: !10180)
!10180 = distinct !DILexicalBlock(scope: !10132, file: !3, line: 5822, column: 7)
!10181 = !DILocation(line: 5822, column: 17, scope: !10180)
!10182 = !DILocation(line: 5822, column: 12, scope: !10180)
!10183 = !DILocation(line: 5823, column: 5, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10180, file: !3, line: 5822, column: 7)
!10185 = !DILocation(line: 5823, column: 10, scope: !10184)
!10186 = !DILocation(line: 5822, column: 7, scope: !10180)
!10187 = !DILocation(line: 5825, column: 34, scope: !10184)
!10188 = !DILocation(line: 5825, column: 17, scope: !10184)
!10189 = !DILocation(line: 5825, column: 2, scope: !10184)
!10190 = !DILocation(line: 5825, column: 26, scope: !10184)
!10191 = !DILocation(line: 5825, column: 32, scope: !10184)
!10192 = !DILocation(line: 5824, column: 12, scope: !10184)
!10193 = !DILocation(line: 5824, column: 10, scope: !10184)
!10194 = !DILocation(line: 5822, column: 7, scope: !10184)
!10195 = distinct !{!10195, !10186, !10196}
!10196 = !DILocation(line: 5825, column: 34, scope: !10180)
!10197 = !DILocation(line: 5827, column: 19, scope: !10198)
!10198 = distinct !DILexicalBlock(scope: !10132, file: !3, line: 5827, column: 7)
!10199 = !DILocation(line: 5827, column: 17, scope: !10198)
!10200 = !DILocation(line: 5827, column: 12, scope: !10198)
!10201 = !DILocation(line: 5828, column: 5, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !10198, file: !3, line: 5827, column: 7)
!10203 = !DILocation(line: 5828, column: 10, scope: !10202)
!10204 = !DILocation(line: 5827, column: 7, scope: !10198)
!10205 = !DILocation(line: 5830, column: 34, scope: !10202)
!10206 = !DILocation(line: 5830, column: 17, scope: !10202)
!10207 = !DILocation(line: 5830, column: 2, scope: !10202)
!10208 = !DILocation(line: 5830, column: 26, scope: !10202)
!10209 = !DILocation(line: 5830, column: 32, scope: !10202)
!10210 = !DILocation(line: 5829, column: 12, scope: !10202)
!10211 = !DILocation(line: 5829, column: 10, scope: !10202)
!10212 = !DILocation(line: 5827, column: 7, scope: !10202)
!10213 = distinct !{!10213, !10204, !10214}
!10214 = !DILocation(line: 5830, column: 34, scope: !10198)
!10215 = !DILocation(line: 5831, column: 5, scope: !10132)
!10216 = !DILocation(line: 5803, column: 55, scope: !10128)
!10217 = !DILocation(line: 5803, column: 3, scope: !10128)
!10218 = distinct !{!10218, !10130, !10219}
!10219 = !DILocation(line: 5831, column: 5, scope: !10125)
!10220 = !DILocation(line: 5833, column: 15, scope: !10221)
!10221 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5833, column: 3)
!10222 = !DILocation(line: 5833, column: 13, scope: !10221)
!10223 = !DILocation(line: 5833, column: 8, scope: !10221)
!10224 = !DILocation(line: 5834, column: 8, scope: !10225)
!10225 = distinct !DILexicalBlock(scope: !10221, file: !3, line: 5833, column: 3)
!10226 = !DILocation(line: 5834, column: 13, scope: !10225)
!10227 = !DILocation(line: 5833, column: 3, scope: !10221)
!10228 = !DILocalVariable(name: "inner", scope: !10229, file: !3, line: 5837, type: !1125)
!10229 = distinct !DILexicalBlock(scope: !10225, file: !3, line: 5836, column: 5)
!10230 = !DILocation(line: 5837, column: 11, scope: !10229)
!10231 = !DILocation(line: 5837, column: 42, scope: !10229)
!10232 = !DILocation(line: 5837, column: 19, scope: !10229)
!10233 = !DILocation(line: 5838, column: 39, scope: !10229)
!10234 = !DILocation(line: 5838, column: 31, scope: !10229)
!10235 = !DILocation(line: 5838, column: 7, scope: !10229)
!10236 = !DILocation(line: 5838, column: 37, scope: !10229)
!10237 = !DILocation(line: 5839, column: 5, scope: !10229)
!10238 = !DILocation(line: 5835, column: 15, scope: !10225)
!10239 = !DILocation(line: 5835, column: 13, scope: !10225)
!10240 = !DILocation(line: 5833, column: 3, scope: !10225)
!10241 = distinct !{!10241, !10227, !10242}
!10242 = !DILocation(line: 5839, column: 5, scope: !10221)
!10243 = !DILocation(line: 5841, column: 15, scope: !10244)
!10244 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5841, column: 3)
!10245 = !DILocation(line: 5841, column: 13, scope: !10244)
!10246 = !DILocation(line: 5841, column: 8, scope: !10244)
!10247 = !DILocation(line: 5842, column: 8, scope: !10248)
!10248 = distinct !DILexicalBlock(scope: !10244, file: !3, line: 5841, column: 3)
!10249 = !DILocation(line: 5842, column: 13, scope: !10248)
!10250 = !DILocation(line: 5841, column: 3, scope: !10244)
!10251 = !DILocalVariable(name: "inner", scope: !10252, file: !3, line: 5845, type: !1125)
!10252 = distinct !DILexicalBlock(scope: !10248, file: !3, line: 5844, column: 5)
!10253 = !DILocation(line: 5845, column: 11, scope: !10252)
!10254 = !DILocation(line: 5845, column: 42, scope: !10252)
!10255 = !DILocation(line: 5845, column: 19, scope: !10252)
!10256 = !DILocation(line: 5846, column: 39, scope: !10252)
!10257 = !DILocation(line: 5846, column: 31, scope: !10252)
!10258 = !DILocation(line: 5846, column: 7, scope: !10252)
!10259 = !DILocation(line: 5846, column: 37, scope: !10252)
!10260 = !DILocation(line: 5847, column: 5, scope: !10252)
!10261 = !DILocation(line: 5843, column: 15, scope: !10248)
!10262 = !DILocation(line: 5843, column: 13, scope: !10248)
!10263 = !DILocation(line: 5841, column: 3, scope: !10248)
!10264 = distinct !{!10264, !10250, !10265}
!10265 = !DILocation(line: 5847, column: 5, scope: !10244)
!10266 = !DILocation(line: 5849, column: 15, scope: !10267)
!10267 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5849, column: 3)
!10268 = !DILocation(line: 5849, column: 13, scope: !10267)
!10269 = !DILocation(line: 5849, column: 8, scope: !10267)
!10270 = !DILocation(line: 5850, column: 8, scope: !10271)
!10271 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 5849, column: 3)
!10272 = !DILocation(line: 5850, column: 13, scope: !10271)
!10273 = !DILocation(line: 5849, column: 3, scope: !10267)
!10274 = !DILocation(line: 5853, column: 57, scope: !10275)
!10275 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 5852, column: 5)
!10276 = !DILocation(line: 5853, column: 39, scope: !10275)
!10277 = !DILocation(line: 5853, column: 31, scope: !10275)
!10278 = !DILocation(line: 5853, column: 7, scope: !10275)
!10279 = !DILocation(line: 5853, column: 37, scope: !10275)
!10280 = !DILocation(line: 5854, column: 57, scope: !10275)
!10281 = !DILocation(line: 5854, column: 39, scope: !10275)
!10282 = !DILocation(line: 5854, column: 31, scope: !10275)
!10283 = !DILocation(line: 5854, column: 7, scope: !10275)
!10284 = !DILocation(line: 5854, column: 37, scope: !10275)
!10285 = !DILocation(line: 5855, column: 5, scope: !10275)
!10286 = !DILocation(line: 5851, column: 15, scope: !10271)
!10287 = !DILocation(line: 5851, column: 13, scope: !10271)
!10288 = !DILocation(line: 5849, column: 3, scope: !10271)
!10289 = distinct !{!10289, !10273, !10290}
!10290 = !DILocation(line: 5855, column: 5, scope: !10267)
!10291 = !DILocation(line: 5857, column: 15, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5857, column: 3)
!10293 = !DILocation(line: 5857, column: 13, scope: !10292)
!10294 = !DILocation(line: 5857, column: 8, scope: !10292)
!10295 = !DILocation(line: 5858, column: 8, scope: !10296)
!10296 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 5857, column: 3)
!10297 = !DILocation(line: 5858, column: 13, scope: !10296)
!10298 = !DILocation(line: 5857, column: 3, scope: !10292)
!10299 = !DILocation(line: 5861, column: 57, scope: !10300)
!10300 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 5860, column: 5)
!10301 = !DILocation(line: 5861, column: 39, scope: !10300)
!10302 = !DILocation(line: 5861, column: 31, scope: !10300)
!10303 = !DILocation(line: 5861, column: 7, scope: !10300)
!10304 = !DILocation(line: 5861, column: 37, scope: !10300)
!10305 = !DILocation(line: 5862, column: 57, scope: !10300)
!10306 = !DILocation(line: 5862, column: 39, scope: !10300)
!10307 = !DILocation(line: 5862, column: 31, scope: !10300)
!10308 = !DILocation(line: 5862, column: 7, scope: !10300)
!10309 = !DILocation(line: 5862, column: 37, scope: !10300)
!10310 = !DILocation(line: 5863, column: 5, scope: !10300)
!10311 = !DILocation(line: 5859, column: 15, scope: !10296)
!10312 = !DILocation(line: 5859, column: 13, scope: !10296)
!10313 = !DILocation(line: 5857, column: 3, scope: !10296)
!10314 = distinct !{!10314, !10298, !10315}
!10315 = !DILocation(line: 5863, column: 5, scope: !10292)
!10316 = !DILocation(line: 5865, column: 15, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5865, column: 3)
!10318 = !DILocation(line: 5865, column: 13, scope: !10317)
!10319 = !DILocation(line: 5865, column: 8, scope: !10317)
!10320 = !DILocation(line: 5866, column: 8, scope: !10321)
!10321 = distinct !DILexicalBlock(scope: !10317, file: !3, line: 5865, column: 3)
!10322 = !DILocation(line: 5866, column: 13, scope: !10321)
!10323 = !DILocation(line: 5865, column: 3, scope: !10317)
!10324 = !DILocation(line: 5869, column: 7, scope: !10325)
!10325 = distinct !DILexicalBlock(scope: !10321, file: !3, line: 5868, column: 5)
!10326 = !DILocation(line: 5869, column: 21, scope: !10325)
!10327 = !DILocation(line: 5869, column: 26, scope: !10325)
!10328 = !DILocation(line: 5869, column: 31, scope: !10325)
!10329 = !DILocation(line: 5870, column: 7, scope: !10325)
!10330 = !DILocation(line: 5870, column: 21, scope: !10325)
!10331 = !DILocation(line: 5870, column: 26, scope: !10325)
!10332 = !DILocation(line: 5870, column: 30, scope: !10325)
!10333 = !DILocation(line: 5871, column: 28, scope: !10325)
!10334 = !DILocation(line: 5871, column: 7, scope: !10325)
!10335 = !DILocation(line: 5871, column: 21, scope: !10325)
!10336 = !DILocation(line: 5871, column: 26, scope: !10325)
!10337 = !DILocation(line: 5872, column: 39, scope: !10325)
!10338 = !DILocation(line: 5872, column: 31, scope: !10325)
!10339 = !DILocation(line: 5872, column: 7, scope: !10325)
!10340 = !DILocation(line: 5872, column: 37, scope: !10325)
!10341 = !DILocation(line: 5874, column: 5, scope: !10325)
!10342 = !DILocation(line: 5867, column: 15, scope: !10321)
!10343 = !DILocation(line: 5867, column: 13, scope: !10321)
!10344 = !DILocation(line: 5865, column: 3, scope: !10321)
!10345 = distinct !{!10345, !10323, !10346}
!10346 = !DILocation(line: 5874, column: 5, scope: !10317)
!10347 = !DILocation(line: 5876, column: 15, scope: !10348)
!10348 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5876, column: 3)
!10349 = !DILocation(line: 5876, column: 13, scope: !10348)
!10350 = !DILocation(line: 5876, column: 8, scope: !10348)
!10351 = !DILocation(line: 5877, column: 8, scope: !10352)
!10352 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 5876, column: 3)
!10353 = !DILocation(line: 5877, column: 13, scope: !10352)
!10354 = !DILocation(line: 5876, column: 3, scope: !10348)
!10355 = !DILocation(line: 5880, column: 7, scope: !10356)
!10356 = distinct !DILexicalBlock(scope: !10352, file: !3, line: 5879, column: 5)
!10357 = !DILocation(line: 5880, column: 21, scope: !10356)
!10358 = !DILocation(line: 5880, column: 26, scope: !10356)
!10359 = !DILocation(line: 5880, column: 31, scope: !10356)
!10360 = !DILocation(line: 5881, column: 7, scope: !10356)
!10361 = !DILocation(line: 5881, column: 21, scope: !10356)
!10362 = !DILocation(line: 5881, column: 26, scope: !10356)
!10363 = !DILocation(line: 5881, column: 30, scope: !10356)
!10364 = !DILocation(line: 5882, column: 28, scope: !10356)
!10365 = !DILocation(line: 5882, column: 7, scope: !10356)
!10366 = !DILocation(line: 5882, column: 21, scope: !10356)
!10367 = !DILocation(line: 5882, column: 26, scope: !10356)
!10368 = !DILocation(line: 5883, column: 39, scope: !10356)
!10369 = !DILocation(line: 5883, column: 31, scope: !10356)
!10370 = !DILocation(line: 5883, column: 7, scope: !10356)
!10371 = !DILocation(line: 5883, column: 37, scope: !10356)
!10372 = !DILocation(line: 5885, column: 5, scope: !10356)
!10373 = !DILocation(line: 5878, column: 15, scope: !10352)
!10374 = !DILocation(line: 5878, column: 13, scope: !10352)
!10375 = !DILocation(line: 5876, column: 3, scope: !10352)
!10376 = distinct !{!10376, !10354, !10377}
!10377 = !DILocation(line: 5885, column: 5, scope: !10348)
!10378 = !DILocation(line: 5887, column: 15, scope: !10379)
!10379 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5887, column: 3)
!10380 = !DILocation(line: 5887, column: 13, scope: !10379)
!10381 = !DILocation(line: 5887, column: 8, scope: !10379)
!10382 = !DILocation(line: 5888, column: 8, scope: !10383)
!10383 = distinct !DILexicalBlock(scope: !10379, file: !3, line: 5887, column: 3)
!10384 = !DILocation(line: 5888, column: 13, scope: !10383)
!10385 = !DILocation(line: 5887, column: 3, scope: !10379)
!10386 = !DILocation(line: 5891, column: 7, scope: !10387)
!10387 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 5890, column: 5)
!10388 = !DILocation(line: 5891, column: 21, scope: !10387)
!10389 = !DILocation(line: 5891, column: 26, scope: !10387)
!10390 = !DILocation(line: 5891, column: 31, scope: !10387)
!10391 = !DILocation(line: 5892, column: 7, scope: !10387)
!10392 = !DILocation(line: 5892, column: 21, scope: !10387)
!10393 = !DILocation(line: 5892, column: 26, scope: !10387)
!10394 = !DILocation(line: 5892, column: 30, scope: !10387)
!10395 = !DILocation(line: 5893, column: 28, scope: !10387)
!10396 = !DILocation(line: 5893, column: 7, scope: !10387)
!10397 = !DILocation(line: 5893, column: 21, scope: !10387)
!10398 = !DILocation(line: 5893, column: 26, scope: !10387)
!10399 = !DILocation(line: 5894, column: 39, scope: !10387)
!10400 = !DILocation(line: 5894, column: 31, scope: !10387)
!10401 = !DILocation(line: 5894, column: 7, scope: !10387)
!10402 = !DILocation(line: 5894, column: 37, scope: !10387)
!10403 = !DILocation(line: 5898, column: 7, scope: !10387)
!10404 = !DILocation(line: 5898, column: 21, scope: !10387)
!10405 = !DILocation(line: 5898, column: 26, scope: !10387)
!10406 = !DILocation(line: 5898, column: 31, scope: !10387)
!10407 = !DILocation(line: 5899, column: 7, scope: !10387)
!10408 = !DILocation(line: 5899, column: 21, scope: !10387)
!10409 = !DILocation(line: 5899, column: 26, scope: !10387)
!10410 = !DILocation(line: 5899, column: 30, scope: !10387)
!10411 = !DILocation(line: 5900, column: 28, scope: !10387)
!10412 = !DILocation(line: 5900, column: 7, scope: !10387)
!10413 = !DILocation(line: 5900, column: 21, scope: !10387)
!10414 = !DILocation(line: 5900, column: 26, scope: !10387)
!10415 = !DILocation(line: 5901, column: 28, scope: !10387)
!10416 = !DILocation(line: 5903, column: 23, scope: !10387)
!10417 = !DILocation(line: 5903, column: 37, scope: !10387)
!10418 = !DILocation(line: 5903, column: 42, scope: !10387)
!10419 = !DILocation(line: 5904, column: 9, scope: !10387)
!10420 = !DILocation(line: 5904, column: 23, scope: !10387)
!10421 = !DILocation(line: 5904, column: 28, scope: !10387)
!10422 = !DILocation(line: 5905, column: 22, scope: !10387)
!10423 = !DILocation(line: 5901, column: 7, scope: !10387)
!10424 = !DILocation(line: 5906, column: 39, scope: !10387)
!10425 = !DILocation(line: 5906, column: 31, scope: !10387)
!10426 = !DILocation(line: 5906, column: 7, scope: !10387)
!10427 = !DILocation(line: 5906, column: 37, scope: !10387)
!10428 = !DILocation(line: 5908, column: 5, scope: !10387)
!10429 = !DILocation(line: 5889, column: 15, scope: !10383)
!10430 = !DILocation(line: 5889, column: 13, scope: !10383)
!10431 = !DILocation(line: 5887, column: 3, scope: !10383)
!10432 = distinct !{!10432, !10385, !10433}
!10433 = !DILocation(line: 5908, column: 5, scope: !10379)
!10434 = !DILocation(line: 5910, column: 15, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5910, column: 3)
!10436 = !DILocation(line: 5910, column: 13, scope: !10435)
!10437 = !DILocation(line: 5910, column: 8, scope: !10435)
!10438 = !DILocation(line: 5911, column: 8, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10435, file: !3, line: 5910, column: 3)
!10440 = !DILocation(line: 5911, column: 13, scope: !10439)
!10441 = !DILocation(line: 5910, column: 3, scope: !10435)
!10442 = !DILocation(line: 5914, column: 7, scope: !10443)
!10443 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 5913, column: 5)
!10444 = !DILocation(line: 5914, column: 21, scope: !10443)
!10445 = !DILocation(line: 5914, column: 26, scope: !10443)
!10446 = !DILocation(line: 5914, column: 31, scope: !10443)
!10447 = !DILocation(line: 5915, column: 7, scope: !10443)
!10448 = !DILocation(line: 5915, column: 21, scope: !10443)
!10449 = !DILocation(line: 5915, column: 26, scope: !10443)
!10450 = !DILocation(line: 5915, column: 30, scope: !10443)
!10451 = !DILocation(line: 5916, column: 28, scope: !10443)
!10452 = !DILocation(line: 5916, column: 7, scope: !10443)
!10453 = !DILocation(line: 5916, column: 21, scope: !10443)
!10454 = !DILocation(line: 5916, column: 26, scope: !10443)
!10455 = !DILocation(line: 5917, column: 39, scope: !10443)
!10456 = !DILocation(line: 5917, column: 31, scope: !10443)
!10457 = !DILocation(line: 5917, column: 7, scope: !10443)
!10458 = !DILocation(line: 5917, column: 37, scope: !10443)
!10459 = !DILocation(line: 5921, column: 7, scope: !10443)
!10460 = !DILocation(line: 5921, column: 21, scope: !10443)
!10461 = !DILocation(line: 5921, column: 26, scope: !10443)
!10462 = !DILocation(line: 5921, column: 31, scope: !10443)
!10463 = !DILocation(line: 5922, column: 7, scope: !10443)
!10464 = !DILocation(line: 5922, column: 21, scope: !10443)
!10465 = !DILocation(line: 5922, column: 26, scope: !10443)
!10466 = !DILocation(line: 5922, column: 30, scope: !10443)
!10467 = !DILocation(line: 5923, column: 28, scope: !10443)
!10468 = !DILocation(line: 5923, column: 7, scope: !10443)
!10469 = !DILocation(line: 5923, column: 21, scope: !10443)
!10470 = !DILocation(line: 5923, column: 26, scope: !10443)
!10471 = !DILocation(line: 5924, column: 28, scope: !10443)
!10472 = !DILocation(line: 5926, column: 23, scope: !10443)
!10473 = !DILocation(line: 5926, column: 37, scope: !10443)
!10474 = !DILocation(line: 5926, column: 42, scope: !10443)
!10475 = !DILocation(line: 5927, column: 9, scope: !10443)
!10476 = !DILocation(line: 5927, column: 23, scope: !10443)
!10477 = !DILocation(line: 5927, column: 28, scope: !10443)
!10478 = !DILocation(line: 5928, column: 22, scope: !10443)
!10479 = !DILocation(line: 5924, column: 7, scope: !10443)
!10480 = !DILocation(line: 5929, column: 39, scope: !10443)
!10481 = !DILocation(line: 5929, column: 31, scope: !10443)
!10482 = !DILocation(line: 5929, column: 7, scope: !10443)
!10483 = !DILocation(line: 5929, column: 37, scope: !10443)
!10484 = !DILocation(line: 5931, column: 5, scope: !10443)
!10485 = !DILocation(line: 5912, column: 15, scope: !10439)
!10486 = !DILocation(line: 5912, column: 13, scope: !10439)
!10487 = !DILocation(line: 5910, column: 3, scope: !10439)
!10488 = distinct !{!10488, !10441, !10489}
!10489 = !DILocation(line: 5931, column: 5, scope: !10435)
!10490 = !DILocation(line: 5933, column: 15, scope: !10491)
!10491 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5933, column: 3)
!10492 = !DILocation(line: 5933, column: 13, scope: !10491)
!10493 = !DILocation(line: 5933, column: 8, scope: !10491)
!10494 = !DILocation(line: 5934, column: 8, scope: !10495)
!10495 = distinct !DILexicalBlock(scope: !10491, file: !3, line: 5933, column: 3)
!10496 = !DILocation(line: 5934, column: 13, scope: !10495)
!10497 = !DILocation(line: 5933, column: 3, scope: !10491)
!10498 = !DILocation(line: 5937, column: 57, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10495, file: !3, line: 5936, column: 5)
!10500 = !DILocation(line: 5937, column: 39, scope: !10499)
!10501 = !DILocation(line: 5937, column: 31, scope: !10499)
!10502 = !DILocation(line: 5937, column: 7, scope: !10499)
!10503 = !DILocation(line: 5937, column: 37, scope: !10499)
!10504 = !DILocation(line: 5938, column: 5, scope: !10499)
!10505 = !DILocation(line: 5935, column: 15, scope: !10495)
!10506 = !DILocation(line: 5935, column: 13, scope: !10495)
!10507 = !DILocation(line: 5933, column: 3, scope: !10495)
!10508 = distinct !{!10508, !10497, !10509}
!10509 = !DILocation(line: 5938, column: 5, scope: !10491)
!10510 = !DILocation(line: 5940, column: 15, scope: !10511)
!10511 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5940, column: 3)
!10512 = !DILocation(line: 5940, column: 13, scope: !10511)
!10513 = !DILocation(line: 5940, column: 8, scope: !10511)
!10514 = !DILocation(line: 5941, column: 8, scope: !10515)
!10515 = distinct !DILexicalBlock(scope: !10511, file: !3, line: 5940, column: 3)
!10516 = !DILocation(line: 5941, column: 13, scope: !10515)
!10517 = !DILocation(line: 5940, column: 3, scope: !10511)
!10518 = !DILocation(line: 5944, column: 57, scope: !10519)
!10519 = distinct !DILexicalBlock(scope: !10515, file: !3, line: 5943, column: 5)
!10520 = !DILocation(line: 5944, column: 39, scope: !10519)
!10521 = !DILocation(line: 5944, column: 31, scope: !10519)
!10522 = !DILocation(line: 5944, column: 7, scope: !10519)
!10523 = !DILocation(line: 5944, column: 37, scope: !10519)
!10524 = !DILocation(line: 5945, column: 5, scope: !10519)
!10525 = !DILocation(line: 5942, column: 15, scope: !10515)
!10526 = !DILocation(line: 5942, column: 13, scope: !10515)
!10527 = !DILocation(line: 5940, column: 3, scope: !10515)
!10528 = distinct !{!10528, !10517, !10529}
!10529 = !DILocation(line: 5945, column: 5, scope: !10511)
!10530 = !DILocation(line: 5947, column: 15, scope: !10531)
!10531 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5947, column: 3)
!10532 = !DILocation(line: 5947, column: 13, scope: !10531)
!10533 = !DILocation(line: 5947, column: 8, scope: !10531)
!10534 = !DILocation(line: 5948, column: 8, scope: !10535)
!10535 = distinct !DILexicalBlock(scope: !10531, file: !3, line: 5947, column: 3)
!10536 = !DILocation(line: 5948, column: 13, scope: !10535)
!10537 = !DILocation(line: 5947, column: 3, scope: !10531)
!10538 = !DILocation(line: 5951, column: 57, scope: !10539)
!10539 = distinct !DILexicalBlock(scope: !10535, file: !3, line: 5950, column: 5)
!10540 = !DILocation(line: 5951, column: 39, scope: !10539)
!10541 = !DILocation(line: 5951, column: 31, scope: !10539)
!10542 = !DILocation(line: 5951, column: 7, scope: !10539)
!10543 = !DILocation(line: 5951, column: 37, scope: !10539)
!10544 = !DILocation(line: 5952, column: 57, scope: !10539)
!10545 = !DILocation(line: 5952, column: 39, scope: !10539)
!10546 = !DILocation(line: 5952, column: 31, scope: !10539)
!10547 = !DILocation(line: 5952, column: 7, scope: !10539)
!10548 = !DILocation(line: 5952, column: 37, scope: !10539)
!10549 = !DILocation(line: 5953, column: 5, scope: !10539)
!10550 = !DILocation(line: 5949, column: 15, scope: !10535)
!10551 = !DILocation(line: 5949, column: 13, scope: !10535)
!10552 = !DILocation(line: 5947, column: 3, scope: !10535)
!10553 = distinct !{!10553, !10537, !10554}
!10554 = !DILocation(line: 5953, column: 5, scope: !10531)
!10555 = !DILocation(line: 5955, column: 15, scope: !10556)
!10556 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5955, column: 3)
!10557 = !DILocation(line: 5955, column: 13, scope: !10556)
!10558 = !DILocation(line: 5955, column: 8, scope: !10556)
!10559 = !DILocation(line: 5956, column: 8, scope: !10560)
!10560 = distinct !DILexicalBlock(scope: !10556, file: !3, line: 5955, column: 3)
!10561 = !DILocation(line: 5956, column: 13, scope: !10560)
!10562 = !DILocation(line: 5955, column: 3, scope: !10556)
!10563 = !DILocation(line: 5959, column: 57, scope: !10564)
!10564 = distinct !DILexicalBlock(scope: !10560, file: !3, line: 5958, column: 5)
!10565 = !DILocation(line: 5959, column: 39, scope: !10564)
!10566 = !DILocation(line: 5959, column: 31, scope: !10564)
!10567 = !DILocation(line: 5959, column: 7, scope: !10564)
!10568 = !DILocation(line: 5959, column: 37, scope: !10564)
!10569 = !DILocation(line: 5960, column: 57, scope: !10564)
!10570 = !DILocation(line: 5960, column: 39, scope: !10564)
!10571 = !DILocation(line: 5960, column: 31, scope: !10564)
!10572 = !DILocation(line: 5960, column: 7, scope: !10564)
!10573 = !DILocation(line: 5960, column: 37, scope: !10564)
!10574 = !DILocation(line: 5961, column: 5, scope: !10564)
!10575 = !DILocation(line: 5957, column: 15, scope: !10560)
!10576 = !DILocation(line: 5957, column: 13, scope: !10560)
!10577 = !DILocation(line: 5955, column: 3, scope: !10560)
!10578 = distinct !{!10578, !10562, !10579}
!10579 = !DILocation(line: 5961, column: 5, scope: !10556)
!10580 = !DILocation(line: 5963, column: 10, scope: !10581)
!10581 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5963, column: 3)
!10582 = !DILocation(line: 5963, column: 8, scope: !10581)
!10583 = !DILocation(line: 5963, column: 26, scope: !10584)
!10584 = distinct !DILexicalBlock(scope: !10581, file: !3, line: 5963, column: 3)
!10585 = !DILocation(line: 5963, column: 28, scope: !10584)
!10586 = !DILocation(line: 5963, column: 3, scope: !10581)
!10587 = !DILocation(line: 5964, column: 9, scope: !10588)
!10588 = distinct !DILexicalBlock(scope: !10584, file: !3, line: 5964, column: 9)
!10589 = !DILocation(line: 5964, column: 48, scope: !10588)
!10590 = !DILocation(line: 5964, column: 9, scope: !10584)
!10591 = !DILocation(line: 5965, column: 30, scope: !10588)
!10592 = !DILocation(line: 5965, column: 25, scope: !10588)
!10593 = !DILocation(line: 5965, column: 7, scope: !10588)
!10594 = !DILocation(line: 5965, column: 28, scope: !10588)
!10595 = !DILocation(line: 5964, column: 51, scope: !10588)
!10596 = !DILocation(line: 5963, column: 54, scope: !10584)
!10597 = !DILocation(line: 5963, column: 3, scope: !10584)
!10598 = distinct !{!10598, !10586, !10599}
!10599 = !DILocation(line: 5965, column: 30, scope: !10581)
!10600 = !DILocation(line: 5967, column: 37, scope: !10015)
!10601 = !DILocation(line: 5967, column: 35, scope: !10015)
!10602 = !DILocation(line: 5969, column: 39, scope: !10603)
!10603 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 5968, column: 7)
!10604 = !DILocation(line: 5969, column: 37, scope: !10603)
!10605 = !DILocation(line: 5970, column: 1, scope: !10015)
!10606 = distinct !DISubprogram(name: "const_int_htab_hash", scope: !3, file: !3, line: 207, type: !1619, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10607 = !DILocalVariable(name: "x", arg: 1, scope: !10606, file: !3, line: 207, type: !1621)
!10608 = !DILocation(line: 207, column: 34, scope: !10606)
!10609 = !DILocation(line: 209, column: 22, scope: !10606)
!10610 = !DILocation(line: 209, column: 10, scope: !10606)
!10611 = !DILocation(line: 209, column: 3, scope: !10606)
!10612 = distinct !DISubprogram(name: "const_int_htab_eq", scope: !3, file: !3, line: 217, type: !1626, scopeLine: 218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10613 = !DILocalVariable(name: "x", arg: 1, scope: !10612, file: !3, line: 217, type: !1621)
!10614 = !DILocation(line: 217, column: 32, scope: !10612)
!10615 = !DILocalVariable(name: "y", arg: 2, scope: !10612, file: !3, line: 217, type: !1621)
!10616 = !DILocation(line: 217, column: 47, scope: !10612)
!10617 = !DILocation(line: 219, column: 11, scope: !10612)
!10618 = !DILocation(line: 219, column: 63, scope: !10612)
!10619 = !DILocation(line: 219, column: 39, scope: !10612)
!10620 = !DILocation(line: 219, column: 37, scope: !10612)
!10621 = !DILocation(line: 219, column: 34, scope: !10612)
!10622 = !DILocation(line: 219, column: 3, scope: !10612)
!10623 = distinct !DISubprogram(name: "const_double_htab_hash", scope: !3, file: !3, line: 224, type: !1619, scopeLine: 225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10624 = !DILocalVariable(name: "x", arg: 1, scope: !10623, file: !3, line: 224, type: !1621)
!10625 = !DILocation(line: 224, column: 37, scope: !10623)
!10626 = !DILocalVariable(name: "value", scope: !10623, file: !3, line: 226, type: !10627)
!10627 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2177)
!10628 = !DILocation(line: 226, column: 19, scope: !10623)
!10629 = !DILocation(line: 226, column: 39, scope: !10623)
!10630 = !DILocation(line: 226, column: 27, scope: !10623)
!10631 = !DILocalVariable(name: "h", scope: !10623, file: !3, line: 227, type: !1124)
!10632 = !DILocation(line: 227, column: 13, scope: !10623)
!10633 = !DILocation(line: 229, column: 7, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10623, file: !3, line: 229, column: 7)
!10635 = !DILocation(line: 229, column: 24, scope: !10634)
!10636 = !DILocation(line: 229, column: 7, scope: !10623)
!10637 = !DILocation(line: 230, column: 9, scope: !10634)
!10638 = !DILocation(line: 230, column: 36, scope: !10634)
!10639 = !DILocation(line: 230, column: 34, scope: !10634)
!10640 = !DILocation(line: 230, column: 7, scope: !10634)
!10641 = !DILocation(line: 230, column: 5, scope: !10634)
!10642 = !DILocation(line: 233, column: 22, scope: !10643)
!10643 = distinct !DILexicalBlock(scope: !10634, file: !3, line: 232, column: 5)
!10644 = !DILocation(line: 233, column: 11, scope: !10643)
!10645 = !DILocation(line: 233, column: 9, scope: !10643)
!10646 = !DILocation(line: 235, column: 12, scope: !10643)
!10647 = !DILocation(line: 235, column: 9, scope: !10643)
!10648 = !DILocation(line: 237, column: 10, scope: !10623)
!10649 = !DILocation(line: 237, column: 3, scope: !10623)
!10650 = distinct !DISubprogram(name: "const_double_htab_eq", scope: !3, file: !3, line: 243, type: !1626, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10651 = !DILocalVariable(name: "x", arg: 1, scope: !10650, file: !3, line: 243, type: !1621)
!10652 = !DILocation(line: 243, column: 35, scope: !10650)
!10653 = !DILocalVariable(name: "y", arg: 2, scope: !10650, file: !3, line: 243, type: !1621)
!10654 = !DILocation(line: 243, column: 50, scope: !10650)
!10655 = !DILocalVariable(name: "a", scope: !10650, file: !3, line: 245, type: !10627)
!10656 = !DILocation(line: 245, column: 19, scope: !10650)
!10657 = !DILocation(line: 245, column: 34, scope: !10650)
!10658 = !DILocation(line: 245, column: 23, scope: !10650)
!10659 = !DILocalVariable(name: "b", scope: !10650, file: !3, line: 245, type: !10627)
!10660 = !DILocation(line: 245, column: 37, scope: !10650)
!10661 = !DILocation(line: 245, column: 52, scope: !10650)
!10662 = !DILocation(line: 245, column: 41, scope: !10650)
!10663 = !DILocation(line: 247, column: 7, scope: !10664)
!10664 = distinct !DILexicalBlock(scope: !10650, file: !3, line: 247, column: 7)
!10665 = !DILocation(line: 247, column: 23, scope: !10664)
!10666 = !DILocation(line: 247, column: 20, scope: !10664)
!10667 = !DILocation(line: 247, column: 7, scope: !10650)
!10668 = !DILocation(line: 248, column: 5, scope: !10664)
!10669 = !DILocation(line: 249, column: 7, scope: !10670)
!10670 = distinct !DILexicalBlock(scope: !10650, file: !3, line: 249, column: 7)
!10671 = !DILocation(line: 249, column: 20, scope: !10670)
!10672 = !DILocation(line: 249, column: 7, scope: !10650)
!10673 = !DILocation(line: 250, column: 13, scope: !10670)
!10674 = !DILocation(line: 250, column: 37, scope: !10670)
!10675 = !DILocation(line: 250, column: 34, scope: !10670)
!10676 = !DILocation(line: 251, column: 6, scope: !10670)
!10677 = !DILocation(line: 251, column: 9, scope: !10670)
!10678 = !DILocation(line: 251, column: 34, scope: !10670)
!10679 = !DILocation(line: 251, column: 31, scope: !10670)
!10680 = !DILocation(line: 0, scope: !10670)
!10681 = !DILocation(line: 250, column: 5, scope: !10670)
!10682 = !DILocation(line: 253, column: 28, scope: !10670)
!10683 = !DILocation(line: 254, column: 7, scope: !10670)
!10684 = !DILocation(line: 253, column: 12, scope: !10670)
!10685 = !DILocation(line: 253, column: 5, scope: !10670)
!10686 = !DILocation(line: 255, column: 1, scope: !10650)
!10687 = distinct !DISubprogram(name: "const_fixed_htab_hash", scope: !3, file: !3, line: 260, type: !1619, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10688 = !DILocalVariable(name: "x", arg: 1, scope: !10687, file: !3, line: 260, type: !1621)
!10689 = !DILocation(line: 260, column: 36, scope: !10687)
!10690 = !DILocalVariable(name: "value", scope: !10687, file: !3, line: 262, type: !10627)
!10691 = !DILocation(line: 262, column: 19, scope: !10687)
!10692 = !DILocation(line: 262, column: 39, scope: !10687)
!10693 = !DILocation(line: 262, column: 27, scope: !10687)
!10694 = !DILocalVariable(name: "h", scope: !10687, file: !3, line: 263, type: !1124)
!10695 = !DILocation(line: 263, column: 13, scope: !10687)
!10696 = !DILocation(line: 265, column: 19, scope: !10687)
!10697 = !DILocation(line: 265, column: 7, scope: !10687)
!10698 = !DILocation(line: 265, column: 5, scope: !10687)
!10699 = !DILocation(line: 267, column: 8, scope: !10687)
!10700 = !DILocation(line: 267, column: 5, scope: !10687)
!10701 = !DILocation(line: 268, column: 10, scope: !10687)
!10702 = !DILocation(line: 268, column: 3, scope: !10687)
!10703 = distinct !DISubprogram(name: "const_fixed_htab_eq", scope: !3, file: !3, line: 275, type: !1626, scopeLine: 276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10704 = !DILocalVariable(name: "x", arg: 1, scope: !10703, file: !3, line: 275, type: !1621)
!10705 = !DILocation(line: 275, column: 34, scope: !10703)
!10706 = !DILocalVariable(name: "y", arg: 2, scope: !10703, file: !3, line: 275, type: !1621)
!10707 = !DILocation(line: 275, column: 49, scope: !10703)
!10708 = !DILocalVariable(name: "a", scope: !10703, file: !3, line: 277, type: !10627)
!10709 = !DILocation(line: 277, column: 19, scope: !10703)
!10710 = !DILocation(line: 277, column: 35, scope: !10703)
!10711 = !DILocation(line: 277, column: 23, scope: !10703)
!10712 = !DILocalVariable(name: "b", scope: !10703, file: !3, line: 277, type: !10627)
!10713 = !DILocation(line: 277, column: 38, scope: !10703)
!10714 = !DILocation(line: 277, column: 54, scope: !10703)
!10715 = !DILocation(line: 277, column: 42, scope: !10703)
!10716 = !DILocation(line: 279, column: 7, scope: !10717)
!10717 = distinct !DILexicalBlock(scope: !10703, file: !3, line: 279, column: 7)
!10718 = !DILocation(line: 279, column: 23, scope: !10717)
!10719 = !DILocation(line: 279, column: 20, scope: !10717)
!10720 = !DILocation(line: 279, column: 7, scope: !10703)
!10721 = !DILocation(line: 280, column: 5, scope: !10717)
!10722 = !DILocation(line: 281, column: 27, scope: !10703)
!10723 = !DILocation(line: 281, column: 50, scope: !10703)
!10724 = !DILocation(line: 281, column: 10, scope: !10703)
!10725 = !DILocation(line: 281, column: 3, scope: !10703)
!10726 = !DILocation(line: 282, column: 1, scope: !10703)
!10727 = distinct !DISubprogram(name: "mem_attrs_htab_hash", scope: !3, file: !3, line: 287, type: !1619, scopeLine: 288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10728 = !DILocalVariable(name: "x", arg: 1, scope: !10727, file: !3, line: 287, type: !1621)
!10729 = !DILocation(line: 287, column: 34, scope: !10727)
!10730 = !DILocalVariable(name: "p", scope: !10727, file: !3, line: 289, type: !10731)
!10731 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2186)
!10732 = !DILocation(line: 289, column: 26, scope: !10727)
!10733 = !DILocation(line: 289, column: 50, scope: !10727)
!10734 = !DILocation(line: 289, column: 30, scope: !10727)
!10735 = !DILocation(line: 291, column: 11, scope: !10727)
!10736 = !DILocation(line: 291, column: 14, scope: !10727)
!10737 = !DILocation(line: 291, column: 23, scope: !10727)
!10738 = !DILocation(line: 291, column: 26, scope: !10727)
!10739 = !DILocation(line: 291, column: 32, scope: !10727)
!10740 = !DILocation(line: 291, column: 20, scope: !10727)
!10741 = !DILocation(line: 292, column: 7, scope: !10727)
!10742 = !DILocation(line: 292, column: 10, scope: !10727)
!10743 = !DILocation(line: 292, column: 20, scope: !10727)
!10744 = !DILocation(line: 292, column: 4, scope: !10727)
!10745 = !DILocation(line: 293, column: 8, scope: !10727)
!10746 = !DILocation(line: 293, column: 11, scope: !10727)
!10747 = !DILocation(line: 293, column: 20, scope: !10727)
!10748 = !DILocation(line: 293, column: 44, scope: !10727)
!10749 = !DILocation(line: 293, column: 4, scope: !10727)
!10750 = !DILocation(line: 294, column: 8, scope: !10727)
!10751 = !DILocation(line: 294, column: 11, scope: !10727)
!10752 = !DILocation(line: 294, column: 18, scope: !10727)
!10753 = !DILocation(line: 294, column: 40, scope: !10727)
!10754 = !DILocation(line: 294, column: 4, scope: !10727)
!10755 = !DILocation(line: 295, column: 36, scope: !10727)
!10756 = !DILocation(line: 295, column: 39, scope: !10727)
!10757 = !DILocation(line: 295, column: 15, scope: !10727)
!10758 = !DILocation(line: 295, column: 6, scope: !10727)
!10759 = !DILocation(line: 295, column: 4, scope: !10727)
!10760 = !DILocation(line: 291, column: 10, scope: !10727)
!10761 = !DILocation(line: 291, column: 3, scope: !10727)
!10762 = distinct !DISubprogram(name: "mem_attrs_htab_eq", scope: !3, file: !3, line: 303, type: !1626, scopeLine: 304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10763 = !DILocalVariable(name: "x", arg: 1, scope: !10762, file: !3, line: 303, type: !1621)
!10764 = !DILocation(line: 303, column: 32, scope: !10762)
!10765 = !DILocalVariable(name: "y", arg: 2, scope: !10762, file: !3, line: 303, type: !1621)
!10766 = !DILocation(line: 303, column: 47, scope: !10762)
!10767 = !DILocalVariable(name: "p", scope: !10762, file: !3, line: 305, type: !10731)
!10768 = !DILocation(line: 305, column: 26, scope: !10762)
!10769 = !DILocation(line: 305, column: 50, scope: !10762)
!10770 = !DILocation(line: 305, column: 30, scope: !10762)
!10771 = !DILocalVariable(name: "q", scope: !10762, file: !3, line: 306, type: !10731)
!10772 = !DILocation(line: 306, column: 26, scope: !10762)
!10773 = !DILocation(line: 306, column: 50, scope: !10762)
!10774 = !DILocation(line: 306, column: 30, scope: !10762)
!10775 = !DILocation(line: 308, column: 11, scope: !10762)
!10776 = !DILocation(line: 308, column: 14, scope: !10762)
!10777 = !DILocation(line: 308, column: 23, scope: !10762)
!10778 = !DILocation(line: 308, column: 26, scope: !10762)
!10779 = !DILocation(line: 308, column: 20, scope: !10762)
!10780 = !DILocation(line: 308, column: 32, scope: !10762)
!10781 = !DILocation(line: 308, column: 35, scope: !10762)
!10782 = !DILocation(line: 308, column: 38, scope: !10762)
!10783 = !DILocation(line: 308, column: 48, scope: !10762)
!10784 = !DILocation(line: 308, column: 51, scope: !10762)
!10785 = !DILocation(line: 308, column: 45, scope: !10762)
!10786 = !DILocation(line: 309, column: 4, scope: !10762)
!10787 = !DILocation(line: 309, column: 7, scope: !10762)
!10788 = !DILocation(line: 309, column: 10, scope: !10762)
!10789 = !DILocation(line: 309, column: 18, scope: !10762)
!10790 = !DILocation(line: 309, column: 21, scope: !10762)
!10791 = !DILocation(line: 309, column: 15, scope: !10762)
!10792 = !DILocation(line: 309, column: 26, scope: !10762)
!10793 = !DILocation(line: 309, column: 29, scope: !10762)
!10794 = !DILocation(line: 309, column: 32, scope: !10762)
!10795 = !DILocation(line: 309, column: 41, scope: !10762)
!10796 = !DILocation(line: 309, column: 44, scope: !10762)
!10797 = !DILocation(line: 309, column: 38, scope: !10762)
!10798 = !DILocation(line: 310, column: 4, scope: !10762)
!10799 = !DILocation(line: 310, column: 7, scope: !10762)
!10800 = !DILocation(line: 310, column: 10, scope: !10762)
!10801 = !DILocation(line: 310, column: 23, scope: !10762)
!10802 = !DILocation(line: 310, column: 26, scope: !10762)
!10803 = !DILocation(line: 310, column: 20, scope: !10762)
!10804 = !DILocation(line: 311, column: 4, scope: !10762)
!10805 = !DILocation(line: 311, column: 8, scope: !10762)
!10806 = !DILocation(line: 311, column: 11, scope: !10762)
!10807 = !DILocation(line: 311, column: 19, scope: !10762)
!10808 = !DILocation(line: 311, column: 22, scope: !10762)
!10809 = !DILocation(line: 311, column: 16, scope: !10762)
!10810 = !DILocation(line: 312, column: 8, scope: !10762)
!10811 = !DILocation(line: 312, column: 12, scope: !10762)
!10812 = !DILocation(line: 312, column: 15, scope: !10762)
!10813 = !DILocation(line: 312, column: 20, scope: !10762)
!10814 = !DILocation(line: 312, column: 33, scope: !10762)
!10815 = !DILocation(line: 312, column: 36, scope: !10762)
!10816 = !DILocation(line: 312, column: 39, scope: !10762)
!10817 = !DILocation(line: 312, column: 44, scope: !10762)
!10818 = !DILocation(line: 313, column: 5, scope: !10762)
!10819 = !DILocation(line: 313, column: 25, scope: !10762)
!10820 = !DILocation(line: 313, column: 28, scope: !10762)
!10821 = !DILocation(line: 313, column: 34, scope: !10762)
!10822 = !DILocation(line: 313, column: 37, scope: !10762)
!10823 = !DILocation(line: 313, column: 8, scope: !10762)
!10824 = !DILocation(line: 0, scope: !10762)
!10825 = !DILocation(line: 308, column: 3, scope: !10762)
!10826 = distinct !DISubprogram(name: "reg_attrs_htab_hash", scope: !3, file: !3, line: 357, type: !1619, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10827 = !DILocalVariable(name: "x", arg: 1, scope: !10826, file: !3, line: 357, type: !1621)
!10828 = !DILocation(line: 357, column: 34, scope: !10826)
!10829 = !DILocalVariable(name: "p", scope: !10826, file: !3, line: 359, type: !10830)
!10830 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2188)
!10831 = !DILocation(line: 359, column: 26, scope: !10826)
!10832 = !DILocation(line: 359, column: 50, scope: !10826)
!10833 = !DILocation(line: 359, column: 30, scope: !10826)
!10834 = !DILocation(line: 361, column: 12, scope: !10826)
!10835 = !DILocation(line: 361, column: 15, scope: !10826)
!10836 = !DILocation(line: 361, column: 22, scope: !10826)
!10837 = !DILocation(line: 361, column: 39, scope: !10826)
!10838 = !DILocation(line: 361, column: 42, scope: !10826)
!10839 = !DILocation(line: 361, column: 32, scope: !10826)
!10840 = !DILocation(line: 361, column: 30, scope: !10826)
!10841 = !DILocation(line: 361, column: 10, scope: !10826)
!10842 = !DILocation(line: 361, column: 3, scope: !10826)
!10843 = distinct !DISubprogram(name: "reg_attrs_htab_eq", scope: !3, file: !3, line: 369, type: !1626, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10844 = !DILocalVariable(name: "x", arg: 1, scope: !10843, file: !3, line: 369, type: !1621)
!10845 = !DILocation(line: 369, column: 32, scope: !10843)
!10846 = !DILocalVariable(name: "y", arg: 2, scope: !10843, file: !3, line: 369, type: !1621)
!10847 = !DILocation(line: 369, column: 47, scope: !10843)
!10848 = !DILocalVariable(name: "p", scope: !10843, file: !3, line: 371, type: !10830)
!10849 = !DILocation(line: 371, column: 26, scope: !10843)
!10850 = !DILocation(line: 371, column: 50, scope: !10843)
!10851 = !DILocation(line: 371, column: 30, scope: !10843)
!10852 = !DILocalVariable(name: "q", scope: !10843, file: !3, line: 372, type: !10830)
!10853 = !DILocation(line: 372, column: 26, scope: !10843)
!10854 = !DILocation(line: 372, column: 50, scope: !10843)
!10855 = !DILocation(line: 372, column: 30, scope: !10843)
!10856 = !DILocation(line: 374, column: 11, scope: !10843)
!10857 = !DILocation(line: 374, column: 14, scope: !10843)
!10858 = !DILocation(line: 374, column: 22, scope: !10843)
!10859 = !DILocation(line: 374, column: 25, scope: !10843)
!10860 = !DILocation(line: 374, column: 19, scope: !10843)
!10861 = !DILocation(line: 374, column: 30, scope: !10843)
!10862 = !DILocation(line: 374, column: 33, scope: !10843)
!10863 = !DILocation(line: 374, column: 36, scope: !10843)
!10864 = !DILocation(line: 374, column: 46, scope: !10843)
!10865 = !DILocation(line: 374, column: 49, scope: !10843)
!10866 = !DILocation(line: 374, column: 43, scope: !10843)
!10867 = !DILocation(line: 0, scope: !10843)
!10868 = !DILocation(line: 374, column: 3, scope: !10843)
!10869 = distinct !DISubprogram(name: "gen_const_vector", scope: !3, file: !3, line: 5616, type: !2527, scopeLine: 5617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10870 = !DILocalVariable(name: "mode", arg: 1, scope: !10869, file: !3, line: 5616, type: !5)
!10871 = !DILocation(line: 5616, column: 37, scope: !10869)
!10872 = !DILocalVariable(name: "constant", arg: 2, scope: !10869, file: !3, line: 5616, type: !1149)
!10873 = !DILocation(line: 5616, column: 47, scope: !10869)
!10874 = !DILocalVariable(name: "tem", scope: !10869, file: !3, line: 5618, type: !1125)
!10875 = !DILocation(line: 5618, column: 7, scope: !10869)
!10876 = !DILocalVariable(name: "v", scope: !10869, file: !3, line: 5619, type: !1157)
!10877 = !DILocation(line: 5619, column: 9, scope: !10869)
!10878 = !DILocalVariable(name: "units", scope: !10869, file: !3, line: 5620, type: !1149)
!10879 = !DILocation(line: 5620, column: 7, scope: !10869)
!10880 = !DILocalVariable(name: "i", scope: !10869, file: !3, line: 5620, type: !1149)
!10881 = !DILocation(line: 5620, column: 14, scope: !10869)
!10882 = !DILocalVariable(name: "inner", scope: !10869, file: !3, line: 5621, type: !5)
!10883 = !DILocation(line: 5621, column: 21, scope: !10869)
!10884 = !DILocation(line: 5623, column: 11, scope: !10869)
!10885 = !DILocation(line: 5623, column: 9, scope: !10869)
!10886 = !DILocation(line: 5624, column: 11, scope: !10869)
!10887 = !DILocation(line: 5624, column: 9, scope: !10869)
!10888 = !DILocation(line: 5626, column: 3, scope: !10869)
!10889 = !DILocation(line: 5628, column: 20, scope: !10869)
!10890 = !DILocation(line: 5628, column: 7, scope: !10869)
!10891 = !DILocation(line: 5628, column: 5, scope: !10869)
!10892 = !DILocation(line: 5632, column: 3, scope: !10869)
!10893 = !DILocation(line: 5634, column: 10, scope: !10894)
!10894 = distinct !DILexicalBlock(scope: !10869, file: !3, line: 5634, column: 3)
!10895 = !DILocation(line: 5634, column: 8, scope: !10894)
!10896 = !DILocation(line: 5634, column: 15, scope: !10897)
!10897 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 5634, column: 3)
!10898 = !DILocation(line: 5634, column: 19, scope: !10897)
!10899 = !DILocation(line: 5634, column: 17, scope: !10897)
!10900 = !DILocation(line: 5634, column: 3, scope: !10894)
!10901 = !DILocation(line: 5635, column: 39, scope: !10897)
!10902 = !DILocation(line: 5635, column: 24, scope: !10897)
!10903 = !DILocation(line: 5635, column: 55, scope: !10897)
!10904 = !DILocation(line: 5635, column: 5, scope: !10897)
!10905 = !DILocation(line: 5635, column: 22, scope: !10897)
!10906 = !DILocation(line: 5634, column: 26, scope: !10897)
!10907 = !DILocation(line: 5634, column: 3, scope: !10897)
!10908 = distinct !{!10908, !10900, !10909}
!10909 = !DILocation(line: 5635, column: 60, scope: !10894)
!10910 = !DILocation(line: 5637, column: 9, scope: !10869)
!10911 = !DILocation(line: 5637, column: 7, scope: !10869)
!10912 = !DILocation(line: 5638, column: 10, scope: !10869)
!10913 = !DILocation(line: 5638, column: 3, scope: !10869)
!10914 = distinct !DISubprogram(name: "emit_copy_of_insn_after", scope: !3, file: !3, line: 5976, type: !4222, scopeLine: 5977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!10915 = !DILocalVariable(name: "insn", arg: 1, scope: !10914, file: !3, line: 5976, type: !1125)
!10916 = !DILocation(line: 5976, column: 30, scope: !10914)
!10917 = !DILocalVariable(name: "after", arg: 2, scope: !10914, file: !3, line: 5976, type: !1125)
!10918 = !DILocation(line: 5976, column: 40, scope: !10914)
!10919 = !DILocalVariable(name: "new_rtx", scope: !10914, file: !3, line: 5978, type: !1125)
!10920 = !DILocation(line: 5978, column: 7, scope: !10914)
!10921 = !DILocalVariable(name: "link", scope: !10914, file: !3, line: 5978, type: !1125)
!10922 = !DILocation(line: 5978, column: 16, scope: !10914)
!10923 = !DILocation(line: 5980, column: 11, scope: !10914)
!10924 = !DILocation(line: 5980, column: 3, scope: !10914)
!10925 = !DILocation(line: 5983, column: 45, scope: !10926)
!10926 = distinct !DILexicalBlock(scope: !10914, file: !3, line: 5981, column: 5)
!10927 = !DILocation(line: 5983, column: 34, scope: !10926)
!10928 = !DILocation(line: 5983, column: 62, scope: !10926)
!10929 = !DILocation(line: 5983, column: 17, scope: !10926)
!10930 = !DILocation(line: 5983, column: 15, scope: !10926)
!10931 = !DILocation(line: 5984, column: 7, scope: !10926)
!10932 = !DILocation(line: 5987, column: 50, scope: !10926)
!10933 = !DILocation(line: 5987, column: 39, scope: !10926)
!10934 = !DILocation(line: 5987, column: 67, scope: !10926)
!10935 = !DILocation(line: 5987, column: 17, scope: !10926)
!10936 = !DILocation(line: 5987, column: 15, scope: !10926)
!10937 = !DILocation(line: 5988, column: 7, scope: !10926)
!10938 = !DILocation(line: 5991, column: 51, scope: !10926)
!10939 = !DILocation(line: 5991, column: 40, scope: !10926)
!10940 = !DILocation(line: 5991, column: 68, scope: !10926)
!10941 = !DILocation(line: 5991, column: 17, scope: !10926)
!10942 = !DILocation(line: 5991, column: 15, scope: !10926)
!10943 = !DILocation(line: 5992, column: 7, scope: !10926)
!10944 = !DILocation(line: 5995, column: 50, scope: !10926)
!10945 = !DILocation(line: 5995, column: 39, scope: !10926)
!10946 = !DILocation(line: 5995, column: 67, scope: !10926)
!10947 = !DILocation(line: 5995, column: 17, scope: !10926)
!10948 = !DILocation(line: 5995, column: 15, scope: !10926)
!10949 = !DILocation(line: 5996, column: 11, scope: !10950)
!10950 = distinct !DILexicalBlock(scope: !10926, file: !3, line: 5996, column: 11)
!10951 = !DILocation(line: 5996, column: 11, scope: !10926)
!10952 = !DILocation(line: 5998, column: 17, scope: !10950)
!10953 = !DILocation(line: 5998, column: 6, scope: !10950)
!10954 = !DILocation(line: 5997, column: 2, scope: !10950)
!10955 = !DILocation(line: 5998, column: 4, scope: !10950)
!10956 = !DILocation(line: 5999, column: 34, scope: !10926)
!10957 = !DILocation(line: 5999, column: 7, scope: !10926)
!10958 = !DILocation(line: 5999, column: 32, scope: !10926)
!10959 = !DILocation(line: 6000, column: 36, scope: !10926)
!10960 = !DILocation(line: 6000, column: 7, scope: !10926)
!10961 = !DILocation(line: 6000, column: 34, scope: !10926)
!10962 = !DILocation(line: 6001, column: 35, scope: !10926)
!10963 = !DILocation(line: 6001, column: 7, scope: !10926)
!10964 = !DILocation(line: 6001, column: 33, scope: !10926)
!10965 = !DILocation(line: 6003, column: 4, scope: !10926)
!10966 = !DILocation(line: 6002, column: 7, scope: !10926)
!10967 = !DILocation(line: 6003, column: 2, scope: !10926)
!10968 = !DILocation(line: 6004, column: 7, scope: !10926)
!10969 = !DILocation(line: 6007, column: 7, scope: !10926)
!10970 = !DILocation(line: 6008, column: 5, scope: !10926)
!10971 = !DILocation(line: 6011, column: 20, scope: !10914)
!10972 = !DILocation(line: 6011, column: 39, scope: !10914)
!10973 = !DILocation(line: 6011, column: 3, scope: !10914)
!10974 = !DILocation(line: 6013, column: 28, scope: !10914)
!10975 = !DILocation(line: 6013, column: 3, scope: !10914)
!10976 = !DILocation(line: 6013, column: 26, scope: !10914)
!10977 = !DILocation(line: 6018, column: 35, scope: !10914)
!10978 = !DILocation(line: 6018, column: 3, scope: !10914)
!10979 = !DILocation(line: 6018, column: 33, scope: !10914)
!10980 = !DILocation(line: 6023, column: 15, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10914, file: !3, line: 6023, column: 3)
!10982 = !DILocation(line: 6023, column: 13, scope: !10981)
!10983 = !DILocation(line: 6023, column: 8, scope: !10981)
!10984 = !DILocation(line: 6023, column: 33, scope: !10985)
!10985 = distinct !DILexicalBlock(scope: !10981, file: !3, line: 6023, column: 3)
!10986 = !DILocation(line: 6023, column: 3, scope: !10981)
!10987 = !DILocation(line: 6024, column: 9, scope: !10988)
!10988 = distinct !DILexicalBlock(scope: !10985, file: !3, line: 6024, column: 9)
!10989 = !DILocation(line: 6024, column: 30, scope: !10988)
!10990 = !DILocation(line: 6024, column: 9, scope: !10985)
!10991 = !DILocation(line: 6026, column: 6, scope: !10992)
!10992 = distinct !DILexicalBlock(scope: !10993, file: !3, line: 6026, column: 6)
!10993 = distinct !DILexicalBlock(scope: !10988, file: !3, line: 6025, column: 7)
!10994 = !DILocation(line: 6026, column: 22, scope: !10992)
!10995 = !DILocation(line: 6026, column: 6, scope: !10993)
!10996 = !DILocation(line: 6027, column: 18, scope: !10992)
!10997 = !DILocation(line: 6027, column: 27, scope: !10992)
!10998 = !DILocation(line: 6028, column: 17, scope: !10992)
!10999 = !DILocation(line: 6028, column: 4, scope: !10992)
!11000 = !DILocation(line: 6027, column: 4, scope: !10992)
!11001 = !DILocation(line: 6030, column: 18, scope: !10992)
!11002 = !DILocation(line: 6030, column: 27, scope: !10992)
!11003 = !DILocation(line: 6030, column: 49, scope: !10992)
!11004 = !DILocation(line: 6030, column: 4, scope: !10992)
!11005 = !DILocation(line: 6031, column: 7, scope: !10993)
!11006 = !DILocation(line: 6024, column: 33, scope: !10988)
!11007 = !DILocation(line: 6023, column: 46, scope: !10985)
!11008 = !DILocation(line: 6023, column: 44, scope: !10985)
!11009 = !DILocation(line: 6023, column: 3, scope: !10985)
!11010 = distinct !{!11010, !10986, !11011}
!11011 = !DILocation(line: 6031, column: 7, scope: !10981)
!11012 = !DILocation(line: 6033, column: 25, scope: !10914)
!11013 = !DILocation(line: 6033, column: 3, scope: !10914)
!11014 = !DILocation(line: 6033, column: 23, scope: !10914)
!11015 = !DILocation(line: 6034, column: 10, scope: !10914)
!11016 = !DILocation(line: 6034, column: 3, scope: !10914)
!11017 = distinct !DISubprogram(name: "gen_hard_reg_clobber", scope: !3, file: !3, line: 6039, type: !2742, scopeLine: 6040, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2529)
!11018 = !DILocalVariable(name: "mode", arg: 1, scope: !11017, file: !3, line: 6039, type: !5)
!11019 = !DILocation(line: 6039, column: 41, scope: !11017)
!11020 = !DILocalVariable(name: "regno", arg: 2, scope: !11017, file: !3, line: 6039, type: !7)
!11021 = !DILocation(line: 6039, column: 60, scope: !11017)
!11022 = !DILocation(line: 6041, column: 25, scope: !11023)
!11023 = distinct !DILexicalBlock(scope: !11017, file: !3, line: 6041, column: 7)
!11024 = !DILocation(line: 6041, column: 7, scope: !11023)
!11025 = !DILocation(line: 6041, column: 31, scope: !11023)
!11026 = !DILocation(line: 6041, column: 7, scope: !11017)
!11027 = !DILocation(line: 6042, column: 30, scope: !11023)
!11028 = !DILocation(line: 6042, column: 12, scope: !11023)
!11029 = !DILocation(line: 6042, column: 36, scope: !11023)
!11030 = !DILocation(line: 6042, column: 5, scope: !11023)
!11031 = !DILocation(line: 6045, column: 6, scope: !11023)
!11032 = !DILocation(line: 6044, column: 31, scope: !11023)
!11033 = !DILocation(line: 6044, column: 13, scope: !11023)
!11034 = !DILocation(line: 6044, column: 37, scope: !11023)
!11035 = !DILocation(line: 6044, column: 44, scope: !11023)
!11036 = !DILocation(line: 6044, column: 5, scope: !11023)
!11037 = !DILocation(line: 6046, column: 1, scope: !11017)
