; ModuleID = 'except.c'
source_filename = "except.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, [10 x %struct.array_descr_dimen] }
%struct.array_descr_dimen = type { %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type { %struct.rtx_def*, i32 }
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.eh_catch_d = type { %struct.eh_catch_d*, %struct.eh_catch_d*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_try = type { %struct.eh_catch_d*, %struct.eh_catch_d* }
%struct.duplicate_eh_regions_data = type { %union.tree_node* (%union.tree_node*, i8*)*, i8*, %struct.pointer_map_t* }
%struct.eh_region_u_must_not_throw = type { %union.tree_node*, i32 }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.ttypes_filter = type { %union.tree_node*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.action_record = type { i32, i32, i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }

@flag_exceptions = external dso_local global i32, align 4
@doing_eh.warned = internal global i32 0, align 4, !dbg !0
@.str = private unnamed_addr constant [56 x i8] c"exception handling disabled, use -fexceptions to enable\00", align 1
@type_to_runtime_map = internal global %struct.htab* null, align 8, !dbg !2671
@cfun = external dso_local global %struct.function*, align 8
@.str.1 = private unnamed_addr constant [9 x i8] c"except.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@targetm = external dso_local global %struct.gcc_target, align 8
@x_rtl = external dso_local global %struct.rtl_data, align 8
@.str.3 = private unnamed_addr constant [7 x i8] c"rtl eh\00", align 1
@pass_rtl_eh = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8 ()* @gate_handle_eh, i32 ()* @rest_of_handle_eh, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 119, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !2551
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@flag_non_call_exceptions = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"nothrow\00", align 1
@pass_set_nothrow_function_flags = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8 ()* null, i32 ()* @set_nothrow_function_flags, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !2579
@ptr_mode = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [59 x i8] c"argument of %<__builtin_eh_return_regno%> must be constant\00", align 1
@svr4_dbx_register_map = external dso_local constant [53 x i32], align 16
@.str.6 = private unnamed_addr constant [10 x i8] c"eh_ranges\00", align 1
@pass_convert_to_eh_region_ranges = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8 ()* @gate_convert_to_eh_region_ranges, i32 ()* @convert_to_eh_region_ranges, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !2581
@current_function_decl = external dso_local global %union.tree_node*, align 8
@dump_eh_tree.type_name = internal constant [4 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i32 0, i32 0)], align 16, !dbg !2583
@.str.7 = private unnamed_addr constant [8 x i8] c"cleanup\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"try\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"allowed_exceptions\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"must_not_throw\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"Eh tree:\0A\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"  %*s %i %s\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [7 x i8] c" land:\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"{%i,\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"%i%s,\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"(del)\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"(nil),\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"%i%s}\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"(nil)}\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c" catch:\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"lab:\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c" filter :%i types:\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.24 = private unnamed_addr constant [40 x i8] c"region_array is corrupted for region %i\00", align 1
@.str.25 = private unnamed_addr constant [32 x i8] c"lp_array is corrupted for lp %i\00", align 1
@.str.26 = private unnamed_addr constant [34 x i8] c"outer block of region %i is wrong\00", align 1
@.str.27 = private unnamed_addr constant [36 x i8] c"negative nesting depth of region %i\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"region of lp %i is wrong\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"tree list ends on depth %i\00", align 1
@.str.30 = private unnamed_addr constant [40 x i8] c"region_array does not match region_tree\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"lp_array does not match region_tree\00", align 1
@.str.32 = private unnamed_addr constant [22 x i8] c"verify_eh_tree failed\00", align 1
@sjlj_fc_type_node = internal global %union.tree_node* null, align 8, !dbg !2673
@gt_ggc_r_gt_except_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%union.tree_node** @sjlj_fc_type_node to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @type_to_runtime_map to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P9tree_node4htab, void (i8*)* @gt_pch_n_P9tree_node4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2642
@call_site_base = internal global i32 0, align 4, !dbg !2669
@gt_pch_rs_gt_except_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @call_site_base to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2656
@lang_protect_cleanup_actions = common dso_local global %union.tree_node* ()* null, align 8, !dbg !2659
@lang_eh_type_covers = common dso_local global i32 (%union.tree_node*, %union.tree_node*)* null, align 8, !dbg !2664
@.str.33 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.34 = private unnamed_addr constant [31 x i8] c"Marking function nothrow: %s\0A\0A\00", align 1
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@asm_out_file = external dso_local global %struct._IO_FILE*, align 8
@.str.35 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"LLSDATTC\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c"LLSDATT\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"LLSDAC\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"LLSDA\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"@LPStart format (%s)\00", align 1
@.str.41 = private unnamed_addr constant [19 x i8] c"@TType format (%s)\00", align 1
@.str.42 = private unnamed_addr constant [10 x i8] c"LLSDATTDC\00", align 1
@.str.43 = private unnamed_addr constant [9 x i8] c"LLSDATTD\00", align 1
@.str.44 = private unnamed_addr constant [19 x i8] c"@TType base offset\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.46 = private unnamed_addr constant [22 x i8] c"call-site format (%s)\00", align 1
@.str.47 = private unnamed_addr constant [10 x i8] c"LLSDACSBC\00", align 1
@.str.48 = private unnamed_addr constant [9 x i8] c"LLSDACSB\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"LLSDACSEC\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"LLSDACSE\00", align 1
@.str.51 = private unnamed_addr constant [23 x i8] c"Call-site table length\00", align 1
@.str.52 = private unnamed_addr constant [20 x i8] c"Action record table\00", align 1
@.str.53 = private unnamed_addr constant [30 x i8] c"Exception specification table\00", align 1
@exception_section = external dso_local global %union.section*, align 8
@flag_pic = external dso_local global i32, align 4
@flag_function_sections = external dso_local global i32, align 4
@.str.54 = private unnamed_addr constant [21 x i8] c".gcc_except_table.%s\00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c".gcc_except_table\00", align 1
@data_section = external dso_local global %union.section*, align 8
@readonly_data_section = external dso_local global %union.section*, align 8
@current_function_func_begin_label = external dso_local global i8*, align 8
@first_function_block_is_cold = external dso_local global i8, align 1
@.str.56 = private unnamed_addr constant [5 x i8] c"LEHB\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c"LEHE\00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.59 = private unnamed_addr constant [16 x i8] c"region %d start\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.61 = private unnamed_addr constant [12 x i8] c"landing pad\00", align 1
@.str.62 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @doing_eh(i32 %do_warn) #0 !dbg !2 {
entry:
  %retval = alloca i32, align 4
  %do_warn.addr = alloca i32, align 4
  store i32 %do_warn, i32* %do_warn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %do_warn.addr, metadata !2679, metadata !DIExpression()), !dbg !2680
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !2681
  %tobool = icmp ne i32 %0, 0, !dbg !2681
  br i1 %tobool, label %if.end4, label %if.then, !dbg !2683

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @doing_eh.warned, align 4, !dbg !2684
  %tobool1 = icmp ne i32 %1, 0, !dbg !2684
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !2687

land.lhs.true:                                    ; preds = %if.then
  %2 = load i32, i32* %do_warn.addr, align 4, !dbg !2688
  %tobool2 = icmp ne i32 %2, 0, !dbg !2688
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !2689

if.then3:                                         ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0)), !dbg !2690
  store i32 1, i32* @doing_eh.warned, align 4, !dbg !2692
  br label %if.end, !dbg !2693

if.end:                                           ; preds = %if.then3, %land.lhs.true, %if.then
  store i32 0, i32* %retval, align 4, !dbg !2694
  br label %return, !dbg !2694

if.end4:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !2695
  br label %return, !dbg !2695

return:                                           ; preds = %if.end4, %if.end
  %3 = load i32, i32* %retval, align 4, !dbg !2696
  ret i32 %3, !dbg !2696
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_eh() #0 !dbg !2697 {
entry:
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !2700
  %tobool = icmp ne i32 %0, 0, !dbg !2700
  br i1 %tobool, label %if.end, label %if.then, !dbg !2702

if.then:                                          ; preds = %entry
  br label %return, !dbg !2703

if.end:                                           ; preds = %entry
  %call = call %struct.htab* @htab_create_alloc(i64 31, i32 (i8*)* @t2r_hash, i32 (i8*, i8*)* @t2r_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !2704
  store %struct.htab* %call, %struct.htab** @type_to_runtime_map, align 8, !dbg !2705
  br label %return, !dbg !2706

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !2706
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @t2r_hash(i8* %pentry) #0 !dbg !2707 {
entry:
  %pentry.addr = alloca i8*, align 8
  %entry1 = alloca %union.tree_node*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !2708, metadata !DIExpression()), !dbg !2709
  call void @llvm.dbg.declare(metadata %union.tree_node** %entry1, metadata !2710, metadata !DIExpression()), !dbg !2712
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !2713
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !2714
  store %union.tree_node* %1, %union.tree_node** %entry1, align 8, !dbg !2712
  %2 = load %union.tree_node*, %union.tree_node** %entry1, align 8, !dbg !2715
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !2715
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !2715
  %3 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !2715
  %4 = ptrtoint %union.tree_node* %3 to i64, !dbg !2715
  %and = and i64 %4, 262143, !dbg !2715
  %conv = trunc i64 %and to i32, !dbg !2715
  ret i32 %conv, !dbg !2716
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @t2r_eq(i8* %pentry, i8* %pdata) #0 !dbg !2717 {
entry:
  %pentry.addr = alloca i8*, align 8
  %pdata.addr = alloca i8*, align 8
  %entry1 = alloca %union.tree_node*, align 8
  %data = alloca %union.tree_node*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !2718, metadata !DIExpression()), !dbg !2719
  store i8* %pdata, i8** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pdata.addr, metadata !2720, metadata !DIExpression()), !dbg !2721
  call void @llvm.dbg.declare(metadata %union.tree_node** %entry1, metadata !2722, metadata !DIExpression()), !dbg !2723
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !2724
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !2725
  store %union.tree_node* %1, %union.tree_node** %entry1, align 8, !dbg !2723
  call void @llvm.dbg.declare(metadata %union.tree_node** %data, metadata !2726, metadata !DIExpression()), !dbg !2727
  %2 = load i8*, i8** %pdata.addr, align 8, !dbg !2728
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !2729
  store %union.tree_node* %3, %union.tree_node** %data, align 8, !dbg !2727
  %4 = load %union.tree_node*, %union.tree_node** %entry1, align 8, !dbg !2730
  %list = bitcast %union.tree_node* %4 to %struct.tree_list*, !dbg !2730
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !2730
  %5 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !2730
  %6 = load %union.tree_node*, %union.tree_node** %data, align 8, !dbg !2731
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !2732
  %conv = zext i1 %cmp to i32, !dbg !2732
  ret i32 %conv, !dbg !2733
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_eh_for_function() #0 !dbg !2734 {
entry:
  %call = call i8* @ggc_alloc_cleared_stat(i64 48), !dbg !2735
  %0 = bitcast i8* %call to %struct.eh_status*, !dbg !2735
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2736
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2736
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !2737
  store %struct.eh_status* %0, %struct.eh_status** %eh, align 8, !dbg !2738
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2739
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !2739
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !2739
  %3 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !2739
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %3, i32 0, i32 1, !dbg !2739
  %call3 = call %struct.eh_region_d** @VEC_eh_region_gc_safe_push(%struct.VEC_eh_region_gc** %region_array, %struct.eh_region_d* null), !dbg !2739
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2740
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !2740
  %eh5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 0, !dbg !2740
  %5 = load %struct.eh_status*, %struct.eh_status** %eh5, align 8, !dbg !2740
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %5, i32 0, i32 2, !dbg !2740
  %call6 = call %struct.eh_landing_pad_d** @VEC_eh_landing_pad_gc_safe_push(%struct.VEC_eh_landing_pad_gc** %lp_array, %struct.eh_landing_pad_d* null), !dbg !2740
  ret void, !dbg !2741
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d** @VEC_eh_region_gc_safe_push(%struct.VEC_eh_region_gc** %vec_, %struct.eh_region_d* %obj_) #0 !dbg !2742 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_gc**, align 8
  %obj_.addr = alloca %struct.eh_region_d*, align 8
  store %struct.VEC_eh_region_gc** %vec_, %struct.VEC_eh_region_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_gc*** %vec_.addr, metadata !2747, metadata !DIExpression()), !dbg !2748
  store %struct.eh_region_d* %obj_, %struct.eh_region_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %obj_.addr, metadata !2749, metadata !DIExpression()), !dbg !2748
  %0 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !2748
  %call = call i32 @VEC_eh_region_gc_reserve(%struct.VEC_eh_region_gc** %0, i32 1), !dbg !2748
  %1 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !2748
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %1, align 8, !dbg !2748
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !2748
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2748

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !2748
  %4 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %3, align 8, !dbg !2748
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %4, i32 0, i32 0, !dbg !2748
  br label %cond.end, !dbg !2748

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2748

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2748
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %obj_.addr, align 8, !dbg !2748
  %call1 = call %struct.eh_region_d** @VEC_eh_region_base_quick_push(%struct.VEC_eh_region_base* %cond, %struct.eh_region_d* %5), !dbg !2748
  ret %struct.eh_region_d** %call1, !dbg !2748
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d** @VEC_eh_landing_pad_gc_safe_push(%struct.VEC_eh_landing_pad_gc** %vec_, %struct.eh_landing_pad_d* %obj_) #0 !dbg !2750 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_gc**, align 8
  %obj_.addr = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.VEC_eh_landing_pad_gc** %vec_, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_gc*** %vec_.addr, metadata !2755, metadata !DIExpression()), !dbg !2756
  store %struct.eh_landing_pad_d* %obj_, %struct.eh_landing_pad_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %obj_.addr, metadata !2757, metadata !DIExpression()), !dbg !2756
  %0 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !2756
  %call = call i32 @VEC_eh_landing_pad_gc_reserve(%struct.VEC_eh_landing_pad_gc** %0, i32 1), !dbg !2756
  %1 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !2756
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %1, align 8, !dbg !2756
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !2756
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2756

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !2756
  %4 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %3, align 8, !dbg !2756
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %4, i32 0, i32 0, !dbg !2756
  br label %cond.end, !dbg !2756

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2756
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %obj_.addr, align 8, !dbg !2756
  %call1 = call %struct.eh_landing_pad_d** @VEC_eh_landing_pad_base_quick_push(%struct.VEC_eh_landing_pad_base* %cond, %struct.eh_landing_pad_d* %5), !dbg !2756
  ret %struct.eh_landing_pad_d** %call1, !dbg !2756
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @gen_eh_region_cleanup(%struct.eh_region_d* %outer) #0 !dbg !2758 {
entry:
  %outer.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2763
  %call = call %struct.eh_region_d* @gen_eh_region(i32 0, %struct.eh_region_d* %0), !dbg !2764
  ret %struct.eh_region_d* %call, !dbg !2765
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @gen_eh_region(i32 %type, %struct.eh_region_d* %outer) #0 !dbg !2766 {
entry:
  %type.addr = alloca i32, align 4
  %outer.addr = alloca %struct.eh_region_d*, align 8
  %new_eh = alloca %struct.eh_region_d*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2769, metadata !DIExpression()), !dbg !2770
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !2771, metadata !DIExpression()), !dbg !2772
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_eh, metadata !2773, metadata !DIExpression()), !dbg !2774
  %call = call i8* @ggc_alloc_cleared_stat(i64 88), !dbg !2775
  %0 = bitcast i8* %call to %struct.eh_region_d*, !dbg !2775
  store %struct.eh_region_d* %0, %struct.eh_region_d** %new_eh, align 8, !dbg !2776
  %1 = load i32, i32* %type.addr, align 4, !dbg !2777
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2778
  %type1 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 4, !dbg !2779
  store i32 %1, i32* %type1, align 4, !dbg !2780
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2781
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2782
  %outer2 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 0, !dbg !2783
  store %struct.eh_region_d* %3, %struct.eh_region_d** %outer2, align 8, !dbg !2784
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2785
  %tobool = icmp ne %struct.eh_region_d* %5, null, !dbg !2785
  br i1 %tobool, label %if.then, label %if.else, !dbg !2787

if.then:                                          ; preds = %entry
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2788
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 1, !dbg !2790
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !2790
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2791
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 2, !dbg !2792
  store %struct.eh_region_d* %7, %struct.eh_region_d** %next_peer, align 8, !dbg !2793
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2794
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2795
  %inner3 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 1, !dbg !2796
  store %struct.eh_region_d* %9, %struct.eh_region_d** %inner3, align 8, !dbg !2797
  br label %if.end, !dbg !2798

if.else:                                          ; preds = %entry
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2799
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !2799
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !2801
  %12 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !2801
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %12, i32 0, i32 0, !dbg !2802
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !2802
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2803
  %next_peer4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 2, !dbg !2804
  store %struct.eh_region_d* %13, %struct.eh_region_d** %next_peer4, align 8, !dbg !2805
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2806
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2807
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !2807
  %eh6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 0, !dbg !2808
  %17 = load %struct.eh_status*, %struct.eh_status** %eh6, align 8, !dbg !2808
  %region_tree7 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %17, i32 0, i32 0, !dbg !2809
  store %struct.eh_region_d* %15, %struct.eh_region_d** %region_tree7, align 8, !dbg !2810
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2811
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !2811
  %eh9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 0, !dbg !2811
  %19 = load %struct.eh_status*, %struct.eh_status** %eh9, align 8, !dbg !2811
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %19, i32 0, i32 1, !dbg !2811
  %20 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !2811
  %tobool10 = icmp ne %struct.VEC_eh_region_gc* %20, null, !dbg !2811
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !2811

cond.true:                                        ; preds = %if.end
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2811
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !2811
  %eh12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 0, !dbg !2811
  %22 = load %struct.eh_status*, %struct.eh_status** %eh12, align 8, !dbg !2811
  %region_array13 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %22, i32 0, i32 1, !dbg !2811
  %23 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array13, align 8, !dbg !2811
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %23, i32 0, i32 0, !dbg !2811
  br label %cond.end, !dbg !2811

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2811
  %call14 = call i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %cond), !dbg !2811
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2812
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %24, i32 0, i32 3, !dbg !2813
  store i32 %call14, i32* %index, align 8, !dbg !2814
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2815
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !2815
  %eh16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 0, !dbg !2815
  %26 = load %struct.eh_status*, %struct.eh_status** %eh16, align 8, !dbg !2815
  %region_array17 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %26, i32 0, i32 1, !dbg !2815
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2815
  %call18 = call %struct.eh_region_d** @VEC_eh_region_gc_safe_push(%struct.VEC_eh_region_gc** %region_array17, %struct.eh_region_d* %27), !dbg !2815
  %28 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !2816
  %conv = zext i8 %28 to i32, !dbg !2818
  %tobool19 = icmp ne i32 %conv, 0, !dbg !2818
  br i1 %tobool19, label %land.lhs.true, label %if.end23, !dbg !2819

land.lhs.true:                                    ; preds = %cond.end
  %29 = load i8, i8* getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 47), align 8, !dbg !2820
  %conv20 = zext i8 %29 to i32, !dbg !2821
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !2821
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !2822

if.then22:                                        ; preds = %land.lhs.true
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2823
  %use_cxa_end_cleanup = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %30, i32 0, i32 9, !dbg !2824
  store i8 1, i8* %use_cxa_end_cleanup, align 8, !dbg !2825
  br label %if.end23, !dbg !2823

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %cond.end
  %31 = load %struct.eh_region_d*, %struct.eh_region_d** %new_eh, align 8, !dbg !2826
  ret %struct.eh_region_d* %31, !dbg !2827
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @gen_eh_region_try(%struct.eh_region_d* %outer) #0 !dbg !2828 {
entry:
  %outer.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !2829, metadata !DIExpression()), !dbg !2830
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2831
  %call = call %struct.eh_region_d* @gen_eh_region(i32 1, %struct.eh_region_d* %0), !dbg !2832
  ret %struct.eh_region_d* %call, !dbg !2833
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_catch_d* @gen_eh_region_catch(%struct.eh_region_d* %t, %union.tree_node* %type_or_list) #0 !dbg !2834 {
entry:
  %t.addr = alloca %struct.eh_region_d*, align 8
  %type_or_list.addr = alloca %union.tree_node*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %l = alloca %struct.eh_catch_d*, align 8
  %type_list = alloca %union.tree_node*, align 8
  %type_node = alloca %union.tree_node*, align 8
  store %struct.eh_region_d* %t, %struct.eh_region_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %t.addr, metadata !2838, metadata !DIExpression()), !dbg !2839
  store %union.tree_node* %type_or_list, %union.tree_node** %type_or_list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_or_list.addr, metadata !2840, metadata !DIExpression()), !dbg !2841
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !2842, metadata !DIExpression()), !dbg !2843
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %l, metadata !2844, metadata !DIExpression()), !dbg !2845
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_list, metadata !2846, metadata !DIExpression()), !dbg !2847
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_node, metadata !2848, metadata !DIExpression()), !dbg !2849
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %t.addr, align 8, !dbg !2850
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 4, !dbg !2850
  %1 = load i32, i32* %type, align 4, !dbg !2850
  %cmp = icmp eq i32 %1, 1, !dbg !2850
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2850

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 397, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !2850
  br label %cond.end, !dbg !2850

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2850

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2850
  %2 = load %union.tree_node*, %union.tree_node** %type_or_list.addr, align 8, !dbg !2851
  store %union.tree_node* %2, %union.tree_node** %type_list, align 8, !dbg !2852
  %3 = load %union.tree_node*, %union.tree_node** %type_or_list.addr, align 8, !dbg !2853
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !2853
  br i1 %tobool, label %if.then, label %if.end4, !dbg !2855

if.then:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %type_or_list.addr, align 8, !dbg !2856
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !2856
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !2856
  %bf.load = load i64, i64* %5, align 8, !dbg !2856
  %bf.clear = and i64 %bf.load, 65535, !dbg !2856
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2856
  %cmp1 = icmp ne i32 %bf.cast, 2, !dbg !2859
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !2860

if.then2:                                         ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type_or_list.addr, align 8, !dbg !2861
  %call = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %6, %union.tree_node* null), !dbg !2861
  store %union.tree_node* %call, %union.tree_node** %type_list, align 8, !dbg !2862
  br label %if.end, !dbg !2863

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !2864
  store %union.tree_node* %7, %union.tree_node** %type_node, align 8, !dbg !2865
  br label %for.cond, !dbg !2866

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type_node, align 8, !dbg !2867
  %tobool3 = icmp ne %union.tree_node* %8, null, !dbg !2870
  br i1 %tobool3, label %for.body, label %for.end, !dbg !2870

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %type_node, align 8, !dbg !2871
  %list = bitcast %union.tree_node* %9 to %struct.tree_list*, !dbg !2871
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2871
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2871
  call void @add_type_for_runtime(%union.tree_node* %10), !dbg !2872
  br label %for.inc, !dbg !2872

for.inc:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %type_node, align 8, !dbg !2873
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !2873
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2873
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2873
  store %union.tree_node* %12, %union.tree_node** %type_node, align 8, !dbg !2874
  br label %for.cond, !dbg !2875, !llvm.loop !2876

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !2878

if.end4:                                          ; preds = %for.end, %cond.end
  %call5 = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !2879
  %13 = bitcast i8* %call5 to %struct.eh_catch_d*, !dbg !2879
  store %struct.eh_catch_d* %13, %struct.eh_catch_d** %c, align 8, !dbg !2880
  %14 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !2881
  %15 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2882
  %type_list6 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %15, i32 0, i32 2, !dbg !2883
  store %union.tree_node* %14, %union.tree_node** %type_list6, align 8, !dbg !2884
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %t.addr, align 8, !dbg !2885
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 5, !dbg !2886
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !2887
  %last_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 1, !dbg !2888
  %17 = load %struct.eh_catch_d*, %struct.eh_catch_d** %last_catch, align 8, !dbg !2888
  store %struct.eh_catch_d* %17, %struct.eh_catch_d** %l, align 8, !dbg !2889
  %18 = load %struct.eh_catch_d*, %struct.eh_catch_d** %l, align 8, !dbg !2890
  %19 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2891
  %prev_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %19, i32 0, i32 1, !dbg !2892
  store %struct.eh_catch_d* %18, %struct.eh_catch_d** %prev_catch, align 8, !dbg !2893
  %20 = load %struct.eh_catch_d*, %struct.eh_catch_d** %l, align 8, !dbg !2894
  %tobool7 = icmp ne %struct.eh_catch_d* %20, null, !dbg !2894
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !2896

if.then8:                                         ; preds = %if.end4
  %21 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2897
  %22 = load %struct.eh_catch_d*, %struct.eh_catch_d** %l, align 8, !dbg !2898
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %22, i32 0, i32 0, !dbg !2899
  store %struct.eh_catch_d* %21, %struct.eh_catch_d** %next_catch, align 8, !dbg !2900
  br label %if.end11, !dbg !2898

if.else:                                          ; preds = %if.end4
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2901
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %t.addr, align 8, !dbg !2902
  %u9 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %24, i32 0, i32 5, !dbg !2903
  %eh_try10 = bitcast %union.eh_region_u* %u9 to %struct.eh_region_u_try*, !dbg !2904
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try10, i32 0, i32 0, !dbg !2905
  store %struct.eh_catch_d* %23, %struct.eh_catch_d** %first_catch, align 8, !dbg !2906
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then8
  %25 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2907
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %t.addr, align 8, !dbg !2908
  %u12 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %26, i32 0, i32 5, !dbg !2909
  %eh_try13 = bitcast %union.eh_region_u* %u12 to %struct.eh_region_u_try*, !dbg !2910
  %last_catch14 = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try13, i32 0, i32 1, !dbg !2911
  store %struct.eh_catch_d* %25, %struct.eh_catch_d** %last_catch14, align 8, !dbg !2912
  %27 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !2913
  ret %struct.eh_catch_d* %27, !dbg !2914
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_type_for_runtime(%union.tree_node* %type) #0 !dbg !2915 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %slot = alloca %union.tree_node**, align 8
  %runtime = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2918, metadata !DIExpression()), !dbg !2919
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot, metadata !2920, metadata !DIExpression()), !dbg !2921
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2922
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2922
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2922
  %bf.load = load i64, i64* %1, align 8, !dbg !2922
  %bf.clear = and i64 %bf.load, 65535, !dbg !2922
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2922
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !2924
  br i1 %cmp, label %if.then, label %if.end, !dbg !2925

if.then:                                          ; preds = %entry
  br label %if.end6, !dbg !2926

if.end:                                           ; preds = %entry
  %2 = load %struct.htab*, %struct.htab** @type_to_runtime_map, align 8, !dbg !2927
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2928
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !2928
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2929
  %6 = ptrtoint %union.tree_node* %5 to i64, !dbg !2929
  %and = and i64 %6, 262143, !dbg !2929
  %conv = trunc i64 %and to i32, !dbg !2929
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %4, i32 %conv, i32 1), !dbg !2930
  %7 = bitcast i8** %call to %union.tree_node**, !dbg !2931
  store %union.tree_node** %7, %union.tree_node*** %slot, align 8, !dbg !2932
  %8 = load %union.tree_node**, %union.tree_node*** %slot, align 8, !dbg !2933
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !2935
  %cmp1 = icmp eq %union.tree_node* %9, null, !dbg !2936
  br i1 %cmp1, label %if.then3, label %if.end6, !dbg !2937

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %runtime, metadata !2938, metadata !DIExpression()), !dbg !2940
  %10 = load %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 46), align 8, !dbg !2941
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2942
  %call4 = call %union.tree_node* %10(%union.tree_node* %11), !dbg !2943
  store %union.tree_node* %call4, %union.tree_node** %runtime, align 8, !dbg !2940
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2944
  %13 = load %union.tree_node*, %union.tree_node** %runtime, align 8, !dbg !2944
  %call5 = call %union.tree_node* @tree_cons_stat(%union.tree_node* %12, %union.tree_node* %13, %union.tree_node* null), !dbg !2944
  %14 = load %union.tree_node**, %union.tree_node*** %slot, align 8, !dbg !2945
  store %union.tree_node* %call5, %union.tree_node** %14, align 8, !dbg !2946
  br label %if.end6, !dbg !2947

if.end6:                                          ; preds = %if.then, %if.then3, %if.end
  ret void, !dbg !2948
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @gen_eh_region_allowed(%struct.eh_region_d* %outer, %union.tree_node* %allowed) #0 !dbg !2949 {
entry:
  %outer.addr = alloca %struct.eh_region_d*, align 8
  %allowed.addr = alloca %union.tree_node*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !2952, metadata !DIExpression()), !dbg !2953
  store %union.tree_node* %allowed, %union.tree_node** %allowed.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %allowed.addr, metadata !2954, metadata !DIExpression()), !dbg !2955
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !2956, metadata !DIExpression()), !dbg !2957
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2958
  %call = call %struct.eh_region_d* @gen_eh_region(i32 2, %struct.eh_region_d* %0), !dbg !2959
  store %struct.eh_region_d* %call, %struct.eh_region_d** %region, align 8, !dbg !2957
  %1 = load %union.tree_node*, %union.tree_node** %allowed.addr, align 8, !dbg !2960
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !2961
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 5, !dbg !2962
  %allowed1 = bitcast %union.eh_region_u* %u to %struct.eh_region_u_allowed*, !dbg !2963
  %type_list = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed1, i32 0, i32 0, !dbg !2964
  store %union.tree_node* %1, %union.tree_node** %type_list, align 8, !dbg !2965
  br label %for.cond, !dbg !2966

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %union.tree_node*, %union.tree_node** %allowed.addr, align 8, !dbg !2967
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !2970
  br i1 %tobool, label %for.body, label %for.end, !dbg !2970

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %allowed.addr, align 8, !dbg !2971
  %list = bitcast %union.tree_node* %4 to %struct.tree_list*, !dbg !2971
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2971
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2971
  call void @add_type_for_runtime(%union.tree_node* %5), !dbg !2972
  br label %for.inc, !dbg !2972

for.inc:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %allowed.addr, align 8, !dbg !2973
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !2973
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2973
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2973
  store %union.tree_node* %7, %union.tree_node** %allowed.addr, align 8, !dbg !2974
  br label %for.cond, !dbg !2975, !llvm.loop !2976

for.end:                                          ; preds = %for.cond
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !2978
  ret %struct.eh_region_d* %8, !dbg !2979
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @gen_eh_region_must_not_throw(%struct.eh_region_d* %outer) #0 !dbg !2980 {
entry:
  %outer.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !2981, metadata !DIExpression()), !dbg !2982
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !2983
  %call = call %struct.eh_region_d* @gen_eh_region(i32 3, %struct.eh_region_d* %0), !dbg !2984
  ret %struct.eh_region_d* %call, !dbg !2985
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d* %region) #0 !dbg !2986 {
entry:
  %region.addr = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !2989, metadata !DIExpression()), !dbg !2990
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !2991, metadata !DIExpression()), !dbg !2992
  %call = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !2993
  %0 = bitcast i8* %call to %struct.eh_landing_pad_d*, !dbg !2993
  store %struct.eh_landing_pad_d* %0, %struct.eh_landing_pad_d** %lp, align 8, !dbg !2992
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !2994
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 6, !dbg !2995
  %2 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !2995
  %3 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !2996
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %3, i32 0, i32 0, !dbg !2997
  store %struct.eh_landing_pad_d* %2, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !2998
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !2999
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3000
  %region1 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %5, i32 0, i32 1, !dbg !3001
  store %struct.eh_region_d* %4, %struct.eh_region_d** %region1, align 8, !dbg !3002
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3003
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3003
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3003
  %7 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3003
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 2, !dbg !3003
  %8 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !3003
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %8, null, !dbg !3003
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3003

cond.true:                                        ; preds = %entry
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3003
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3003
  %eh3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 0, !dbg !3003
  %10 = load %struct.eh_status*, %struct.eh_status** %eh3, align 8, !dbg !3003
  %lp_array4 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %10, i32 0, i32 2, !dbg !3003
  %11 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array4, align 8, !dbg !3003
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %11, i32 0, i32 0, !dbg !3003
  br label %cond.end, !dbg !3003

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3003

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3003
  %call5 = call i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %cond), !dbg !3003
  %12 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3004
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %12, i32 0, i32 4, !dbg !3005
  store i32 %call5, i32* %index, align 8, !dbg !3006
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3007
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !3008
  %landing_pads6 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 6, !dbg !3009
  store %struct.eh_landing_pad_d* %13, %struct.eh_landing_pad_d** %landing_pads6, align 8, !dbg !3010
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3011
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3011
  %eh8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 0, !dbg !3011
  %16 = load %struct.eh_status*, %struct.eh_status** %eh8, align 8, !dbg !3011
  %lp_array9 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %16, i32 0, i32 2, !dbg !3011
  %17 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3011
  %call10 = call %struct.eh_landing_pad_d** @VEC_eh_landing_pad_gc_safe_push(%struct.VEC_eh_landing_pad_gc** %lp_array9, %struct.eh_landing_pad_d* %17), !dbg !3011
  %18 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3012
  ret %struct.eh_landing_pad_d* %18, !dbg !3013
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %vec_) #0 !dbg !3014 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !3019, metadata !DIExpression()), !dbg !3020
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3020
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !3020
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3020

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3020
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !3020
  %2 = load i32, i32* %num, align 8, !dbg !3020
  br label %cond.end, !dbg !3020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3020
  ret i32 %cond, !dbg !3020
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function* %ifun, i32 %i) #0 !dbg !3021 {
entry:
  %ifun.addr = alloca %struct.function*, align 8
  %i.addr = alloca i32, align 4
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3024, metadata !DIExpression()), !dbg !3025
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3026, metadata !DIExpression()), !dbg !3027
  %0 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3028
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !3028
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3028
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 1, !dbg !3028
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !3028
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !3028
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3028

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3028
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !3028
  %4 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !3028
  %region_array2 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 1, !dbg !3028
  %5 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array2, align 8, !dbg !3028
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %5, i32 0, i32 0, !dbg !3028
  br label %cond.end, !dbg !3028

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3028
  %6 = load i32, i32* %i.addr, align 4, !dbg !3028
  %call = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond, i32 %6), !dbg !3028
  ret %struct.eh_region_d* %call, !dbg !3029
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %vec_, i32 %ix_) #0 !dbg !3030 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !3035, metadata !DIExpression()), !dbg !3036
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3037, metadata !DIExpression()), !dbg !3036
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3036
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !3036
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3036

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3036
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3036
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !3036
  %3 = load i32, i32* %num, align 8, !dbg !3036
  %cmp = icmp ult i32 %1, %3, !dbg !3036
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3038
  %land.ext = zext i1 %4 to i32, !dbg !3036
  %5 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3036
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %5, i32 0, i32 2, !dbg !3036
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3036
  %idxprom = zext i32 %6 to i64, !dbg !3036
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !3036
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !3036
  ret %struct.eh_region_d* %7, !dbg !3036
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @get_eh_region_from_number(i32 %i) #0 !dbg !3039 {
entry:
  %i.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3042, metadata !DIExpression()), !dbg !3043
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3044
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3044
  %1 = load i32, i32* %i.addr, align 4, !dbg !3045
  %call = call %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function* %add.ptr, i32 %1), !dbg !3046
  ret %struct.eh_region_d* %call, !dbg !3047
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number_fn(%struct.function* %ifun, i32 %i) #0 !dbg !3048 {
entry:
  %ifun.addr = alloca %struct.function*, align 8
  %i.addr = alloca i32, align 4
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3051, metadata !DIExpression()), !dbg !3052
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3053, metadata !DIExpression()), !dbg !3054
  %0 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3055
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !3055
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3055
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 2, !dbg !3055
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !3055
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !3055
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3055

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3055
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !3055
  %4 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !3055
  %lp_array2 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !3055
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array2, align 8, !dbg !3055
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %5, i32 0, i32 0, !dbg !3055
  br label %cond.end, !dbg !3055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3055
  %6 = load i32, i32* %i.addr, align 4, !dbg !3055
  %call = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond, i32 %6), !dbg !3055
  ret %struct.eh_landing_pad_d* %call, !dbg !3056
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_) #0 !dbg !3057 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3062, metadata !DIExpression()), !dbg !3061
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3061
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !3061
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3061

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3061
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3061
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !3061
  %3 = load i32, i32* %num, align 8, !dbg !3061
  %cmp = icmp ult i32 %1, %3, !dbg !3061
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3063
  %land.ext = zext i1 %4 to i32, !dbg !3061
  %5 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3061
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %5, i32 0, i32 2, !dbg !3061
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3061
  %idxprom = zext i32 %6 to i64, !dbg !3061
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !3061
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !3061
  ret %struct.eh_landing_pad_d* %7, !dbg !3061
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %i) #0 !dbg !3064 {
entry:
  %i.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3067, metadata !DIExpression()), !dbg !3068
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3069
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3069
  %1 = load i32, i32* %i.addr, align 4, !dbg !3070
  %call = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number_fn(%struct.function* %add.ptr, i32 %1), !dbg !3071
  ret %struct.eh_landing_pad_d* %call, !dbg !3072
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @get_eh_region_from_lp_number_fn(%struct.function* %ifun, i32 %i) #0 !dbg !3073 {
entry:
  %retval = alloca %struct.eh_region_d*, align 8
  %ifun.addr = alloca %struct.function*, align 8
  %i.addr = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3076, metadata !DIExpression()), !dbg !3077
  %0 = load i32, i32* %i.addr, align 4, !dbg !3078
  %cmp = icmp slt i32 %0, 0, !dbg !3080
  br i1 %cmp, label %if.then, label %if.else, !dbg !3081

if.then:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3082
  %eh = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 0, !dbg !3082
  %2 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3082
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %2, i32 0, i32 1, !dbg !3082
  %3 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !3082
  %tobool = icmp ne %struct.VEC_eh_region_gc* %3, null, !dbg !3082
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3082

cond.true:                                        ; preds = %if.then
  %4 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3082
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 0, !dbg !3082
  %5 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !3082
  %region_array2 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %5, i32 0, i32 1, !dbg !3082
  %6 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array2, align 8, !dbg !3082
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %6, i32 0, i32 0, !dbg !3082
  br label %cond.end, !dbg !3082

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3082

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3082
  %7 = load i32, i32* %i.addr, align 4, !dbg !3082
  %sub = sub nsw i32 0, %7, !dbg !3082
  %call = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond, i32 %sub), !dbg !3082
  store %struct.eh_region_d* %call, %struct.eh_region_d** %retval, align 8, !dbg !3083
  br label %return, !dbg !3083

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %i.addr, align 4, !dbg !3084
  %cmp3 = icmp eq i32 %8, 0, !dbg !3086
  br i1 %cmp3, label %if.then4, label %if.else5, !dbg !3087

if.then4:                                         ; preds = %if.else
  store %struct.eh_region_d* null, %struct.eh_region_d** %retval, align 8, !dbg !3088
  br label %return, !dbg !3088

if.else5:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !3089, metadata !DIExpression()), !dbg !3091
  %9 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3092
  %eh6 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 0, !dbg !3092
  %10 = load %struct.eh_status*, %struct.eh_status** %eh6, align 8, !dbg !3092
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %10, i32 0, i32 2, !dbg !3092
  %11 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !3092
  %tobool7 = icmp ne %struct.VEC_eh_landing_pad_gc* %11, null, !dbg !3092
  br i1 %tobool7, label %cond.true8, label %cond.false12, !dbg !3092

cond.true8:                                       ; preds = %if.else5
  %12 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3092
  %eh9 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 0, !dbg !3092
  %13 = load %struct.eh_status*, %struct.eh_status** %eh9, align 8, !dbg !3092
  %lp_array10 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %13, i32 0, i32 2, !dbg !3092
  %14 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array10, align 8, !dbg !3092
  %base11 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %14, i32 0, i32 0, !dbg !3092
  br label %cond.end13, !dbg !3092

cond.false12:                                     ; preds = %if.else5
  br label %cond.end13, !dbg !3092

cond.end13:                                       ; preds = %cond.false12, %cond.true8
  %cond14 = phi %struct.VEC_eh_landing_pad_base* [ %base11, %cond.true8 ], [ null, %cond.false12 ], !dbg !3092
  %15 = load i32, i32* %i.addr, align 4, !dbg !3092
  %call15 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond14, i32 %15), !dbg !3092
  store %struct.eh_landing_pad_d* %call15, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3093
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3094
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %16, i32 0, i32 1, !dbg !3095
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !3095
  store %struct.eh_region_d* %17, %struct.eh_region_d** %retval, align 8, !dbg !3096
  br label %return, !dbg !3096

return:                                           ; preds = %cond.end13, %if.then4, %cond.end
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %retval, align 8, !dbg !3097
  ret %struct.eh_region_d* %18, !dbg !3097
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %i) #0 !dbg !3098 {
entry:
  %i.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3099, metadata !DIExpression()), !dbg !3100
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3101
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3101
  %1 = load i32, i32* %i.addr, align 4, !dbg !3102
  %call = call %struct.eh_region_d* @get_eh_region_from_lp_number_fn(%struct.function* %add.ptr, i32 %1), !dbg !3103
  ret %struct.eh_region_d* %call, !dbg !3104
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @current_function_has_exception_handlers() #0 !dbg !3105 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3106
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3106
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3107
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3107
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !3108
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !3108
  %cmp = icmp ne %struct.eh_region_d* %2, null, !dbg !3109
  %conv = zext i1 %cmp to i32, !dbg !3109
  %conv1 = trunc i32 %conv to i8, !dbg !3106
  ret i8 %conv1, !dbg !3110
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.pointer_map_t* @duplicate_eh_regions(%struct.function* %ifun, %struct.eh_region_d* %copy_region, i32 %outer_lp, %union.tree_node* (%union.tree_node*, i8*)* %map, i8* %map_data) #0 !dbg !3111 {
entry:
  %ifun.addr = alloca %struct.function*, align 8
  %copy_region.addr = alloca %struct.eh_region_d*, align 8
  %outer_lp.addr = alloca i32, align 4
  %map.addr = alloca %union.tree_node* (%union.tree_node*, i8*)*, align 8
  %map_data.addr = alloca i8*, align 8
  %data = alloca %struct.duplicate_eh_regions_data, align 8
  %outer_region = alloca %struct.eh_region_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3118, metadata !DIExpression()), !dbg !3119
  store %struct.eh_region_d* %copy_region, %struct.eh_region_d** %copy_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %copy_region.addr, metadata !3120, metadata !DIExpression()), !dbg !3121
  store i32 %outer_lp, i32* %outer_lp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outer_lp.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  store %union.tree_node* (%union.tree_node*, i8*)* %map, %union.tree_node* (%union.tree_node*, i8*)** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node*, i8*)** %map.addr, metadata !3124, metadata !DIExpression()), !dbg !3125
  store i8* %map_data, i8** %map_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %map_data.addr, metadata !3126, metadata !DIExpression()), !dbg !3127
  call void @llvm.dbg.declare(metadata %struct.duplicate_eh_regions_data* %data, metadata !3128, metadata !DIExpression()), !dbg !3134
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer_region, metadata !3135, metadata !DIExpression()), !dbg !3136
  %0 = load %union.tree_node* (%union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, i8*)** %map.addr, align 8, !dbg !3137
  %label_map = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %data, i32 0, i32 0, !dbg !3138
  store %union.tree_node* (%union.tree_node*, i8*)* %0, %union.tree_node* (%union.tree_node*, i8*)** %label_map, align 8, !dbg !3139
  %1 = load i8*, i8** %map_data.addr, align 8, !dbg !3140
  %label_map_data = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %data, i32 0, i32 1, !dbg !3141
  store i8* %1, i8** %label_map_data, align 8, !dbg !3142
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !3143
  %eh_map = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %data, i32 0, i32 2, !dbg !3144
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %eh_map, align 8, !dbg !3145
  %2 = load i32, i32* %outer_lp.addr, align 4, !dbg !3146
  %call1 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %2), !dbg !3147
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %outer_region, align 8, !dbg !3148
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %copy_region.addr, align 8, !dbg !3149
  %tobool = icmp ne %struct.eh_region_d* %3, null, !dbg !3149
  br i1 %tobool, label %if.then, label %if.else, !dbg !3151

if.then:                                          ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %copy_region.addr, align 8, !dbg !3152
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %outer_region, align 8, !dbg !3153
  call void @duplicate_eh_regions_1(%struct.duplicate_eh_regions_data* %data, %struct.eh_region_d* %4, %struct.eh_region_d* %5), !dbg !3154
  br label %if.end, !dbg !3154

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !3155, metadata !DIExpression()), !dbg !3157
  %6 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3158
  %eh = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 0, !dbg !3160
  %7 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3160
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 0, !dbg !3161
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !3161
  store %struct.eh_region_d* %8, %struct.eh_region_d** %r, align 8, !dbg !3162
  br label %for.cond, !dbg !3163

for.cond:                                         ; preds = %for.inc, %if.else
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3164
  %tobool2 = icmp ne %struct.eh_region_d* %9, null, !dbg !3166
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3166

for.body:                                         ; preds = %for.cond
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3167
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %outer_region, align 8, !dbg !3168
  call void @duplicate_eh_regions_1(%struct.duplicate_eh_regions_data* %data, %struct.eh_region_d* %10, %struct.eh_region_d* %11), !dbg !3169
  br label %for.inc, !dbg !3169

for.inc:                                          ; preds = %for.body
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3170
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %12, i32 0, i32 2, !dbg !3171
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !3171
  store %struct.eh_region_d* %13, %struct.eh_region_d** %r, align 8, !dbg !3172
  br label %for.cond, !dbg !3173, !llvm.loop !3174

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %eh_map3 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %data, i32 0, i32 2, !dbg !3176
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map3, align 8, !dbg !3176
  ret %struct.pointer_map_t* %14, !dbg !3177
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @duplicate_eh_regions_1(%struct.duplicate_eh_regions_data* %data, %struct.eh_region_d* %old_r, %struct.eh_region_d* %outer) #0 !dbg !3178 {
entry:
  %data.addr = alloca %struct.duplicate_eh_regions_data*, align 8
  %old_r.addr = alloca %struct.eh_region_d*, align 8
  %outer.addr = alloca %struct.eh_region_d*, align 8
  %old_lp = alloca %struct.eh_landing_pad_d*, align 8
  %new_lp = alloca %struct.eh_landing_pad_d*, align 8
  %new_r = alloca %struct.eh_region_d*, align 8
  %slot = alloca i8**, align 8
  %oc = alloca %struct.eh_catch_d*, align 8
  %nc = alloca %struct.eh_catch_d*, align 8
  store %struct.duplicate_eh_regions_data* %data, %struct.duplicate_eh_regions_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.duplicate_eh_regions_data** %data.addr, metadata !3182, metadata !DIExpression()), !dbg !3183
  store %struct.eh_region_d* %old_r, %struct.eh_region_d** %old_r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_r.addr, metadata !3184, metadata !DIExpression()), !dbg !3185
  store %struct.eh_region_d* %outer, %struct.eh_region_d** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer.addr, metadata !3186, metadata !DIExpression()), !dbg !3187
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %old_lp, metadata !3188, metadata !DIExpression()), !dbg !3189
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %new_lp, metadata !3190, metadata !DIExpression()), !dbg !3191
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_r, metadata !3192, metadata !DIExpression()), !dbg !3193
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3194, metadata !DIExpression()), !dbg !3195
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3196
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 4, !dbg !3197
  %1 = load i32, i32* %type, align 4, !dbg !3197
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %outer.addr, align 8, !dbg !3198
  %call = call %struct.eh_region_d* @gen_eh_region(i32 %1, %struct.eh_region_d* %2), !dbg !3199
  store %struct.eh_region_d* %call, %struct.eh_region_d** %new_r, align 8, !dbg !3200
  %3 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3201
  %eh_map = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %3, i32 0, i32 2, !dbg !3202
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !3202
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3203
  %6 = bitcast %struct.eh_region_d* %5 to i8*, !dbg !3204
  %call1 = call i8** @pointer_map_insert(%struct.pointer_map_t* %4, i8* %6), !dbg !3205
  store i8** %call1, i8*** %slot, align 8, !dbg !3206
  %7 = load i8**, i8*** %slot, align 8, !dbg !3207
  %8 = load i8*, i8** %7, align 8, !dbg !3207
  %cmp = icmp eq i8* %8, null, !dbg !3207
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3207

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3207
  br label %cond.end, !dbg !3207

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3207
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3208
  %10 = bitcast %struct.eh_region_d* %9 to i8*, !dbg !3209
  %11 = load i8**, i8*** %slot, align 8, !dbg !3210
  store i8* %10, i8** %11, align 8, !dbg !3211
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3212
  %type2 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %12, i32 0, i32 4, !dbg !3213
  %13 = load i32, i32* %type2, align 4, !dbg !3213
  switch i32 %13, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
    i32 2, label %sw.bb12
    i32 3, label %sw.bb34
  ], !dbg !3214

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog, !dbg !3215

sw.bb3:                                           ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %oc, metadata !3217, metadata !DIExpression()), !dbg !3219
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %nc, metadata !3220, metadata !DIExpression()), !dbg !3221
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3222
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 5, !dbg !3224
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !3225
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !3226
  %15 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !3226
  store %struct.eh_catch_d* %15, %struct.eh_catch_d** %oc, align 8, !dbg !3227
  br label %for.cond, !dbg !3228

for.cond:                                         ; preds = %for.inc, %sw.bb3
  %16 = load %struct.eh_catch_d*, %struct.eh_catch_d** %oc, align 8, !dbg !3229
  %tobool = icmp ne %struct.eh_catch_d* %16, null, !dbg !3231
  br i1 %tobool, label %for.body, label %for.end, !dbg !3231

for.body:                                         ; preds = %for.cond
  %17 = load %struct.eh_catch_d*, %struct.eh_catch_d** %oc, align 8, !dbg !3232
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %17, i32 0, i32 3, !dbg !3232
  %18 = load %union.tree_node*, %union.tree_node** %filter_list, align 8, !dbg !3232
  %cmp4 = icmp eq %union.tree_node* %18, null, !dbg !3232
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !3232

cond.true5:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 546, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3232
  br label %cond.end7, !dbg !3232

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !3232

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3232
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3234
  %20 = load %struct.eh_catch_d*, %struct.eh_catch_d** %oc, align 8, !dbg !3235
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %20, i32 0, i32 2, !dbg !3236
  %21 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !3236
  %call9 = call %struct.eh_catch_d* @gen_eh_region_catch(%struct.eh_region_d* %19, %union.tree_node* %21), !dbg !3237
  store %struct.eh_catch_d* %call9, %struct.eh_catch_d** %nc, align 8, !dbg !3238
  %22 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3239
  %label_map = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %22, i32 0, i32 0, !dbg !3240
  %23 = load %union.tree_node* (%union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, i8*)** %label_map, align 8, !dbg !3240
  %24 = load %struct.eh_catch_d*, %struct.eh_catch_d** %oc, align 8, !dbg !3241
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %24, i32 0, i32 4, !dbg !3242
  %25 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !3242
  %26 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3243
  %label_map_data = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %26, i32 0, i32 1, !dbg !3244
  %27 = load i8*, i8** %label_map_data, align 8, !dbg !3244
  %call10 = call %union.tree_node* %23(%union.tree_node* %25, i8* %27), !dbg !3239
  %28 = load %struct.eh_catch_d*, %struct.eh_catch_d** %nc, align 8, !dbg !3245
  %label11 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %28, i32 0, i32 4, !dbg !3246
  store %union.tree_node* %call10, %union.tree_node** %label11, align 8, !dbg !3247
  br label %for.inc, !dbg !3248

for.inc:                                          ; preds = %cond.end7
  %29 = load %struct.eh_catch_d*, %struct.eh_catch_d** %oc, align 8, !dbg !3249
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %29, i32 0, i32 0, !dbg !3250
  %30 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !3250
  store %struct.eh_catch_d* %30, %struct.eh_catch_d** %oc, align 8, !dbg !3251
  br label %for.cond, !dbg !3252, !llvm.loop !3253

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !3255

sw.bb12:                                          ; preds = %cond.end
  %31 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3256
  %u13 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %31, i32 0, i32 5, !dbg !3257
  %allowed = bitcast %union.eh_region_u* %u13 to %struct.eh_region_u_allowed*, !dbg !3258
  %type_list14 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 0, !dbg !3259
  %32 = load %union.tree_node*, %union.tree_node** %type_list14, align 8, !dbg !3259
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3260
  %u15 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %33, i32 0, i32 5, !dbg !3261
  %allowed16 = bitcast %union.eh_region_u* %u15 to %struct.eh_region_u_allowed*, !dbg !3262
  %type_list17 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed16, i32 0, i32 0, !dbg !3263
  store %union.tree_node* %32, %union.tree_node** %type_list17, align 8, !dbg !3264
  %34 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3265
  %u18 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %34, i32 0, i32 5, !dbg !3267
  %allowed19 = bitcast %union.eh_region_u* %u18 to %struct.eh_region_u_allowed*, !dbg !3268
  %label20 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed19, i32 0, i32 1, !dbg !3269
  %35 = load %union.tree_node*, %union.tree_node** %label20, align 8, !dbg !3269
  %tobool21 = icmp ne %union.tree_node* %35, null, !dbg !3265
  br i1 %tobool21, label %if.then, label %if.else, !dbg !3270

if.then:                                          ; preds = %sw.bb12
  %36 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3271
  %label_map22 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %36, i32 0, i32 0, !dbg !3272
  %37 = load %union.tree_node* (%union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, i8*)** %label_map22, align 8, !dbg !3272
  %38 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3273
  %u23 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %38, i32 0, i32 5, !dbg !3274
  %allowed24 = bitcast %union.eh_region_u* %u23 to %struct.eh_region_u_allowed*, !dbg !3275
  %label25 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed24, i32 0, i32 1, !dbg !3276
  %39 = load %union.tree_node*, %union.tree_node** %label25, align 8, !dbg !3276
  %40 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3277
  %label_map_data26 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %40, i32 0, i32 1, !dbg !3278
  %41 = load i8*, i8** %label_map_data26, align 8, !dbg !3278
  %call27 = call %union.tree_node* %37(%union.tree_node* %39, i8* %41), !dbg !3271
  %42 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3279
  %u28 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %42, i32 0, i32 5, !dbg !3280
  %allowed29 = bitcast %union.eh_region_u* %u28 to %struct.eh_region_u_allowed*, !dbg !3281
  %label30 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed29, i32 0, i32 1, !dbg !3282
  store %union.tree_node* %call27, %union.tree_node** %label30, align 8, !dbg !3283
  br label %if.end, !dbg !3279

if.else:                                          ; preds = %sw.bb12
  %43 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3284
  %u31 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %43, i32 0, i32 5, !dbg !3285
  %allowed32 = bitcast %union.eh_region_u* %u31 to %struct.eh_region_u_allowed*, !dbg !3286
  %label33 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed32, i32 0, i32 1, !dbg !3287
  store %union.tree_node* null, %union.tree_node** %label33, align 8, !dbg !3288
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !3289

sw.bb34:                                          ; preds = %cond.end
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3290
  %u35 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %44, i32 0, i32 5, !dbg !3291
  %must_not_throw = bitcast %union.eh_region_u* %u35 to %struct.eh_region_u_must_not_throw*, !dbg !3292
  %45 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3293
  %u36 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %45, i32 0, i32 5, !dbg !3294
  %must_not_throw37 = bitcast %union.eh_region_u* %u36 to %struct.eh_region_u_must_not_throw*, !dbg !3295
  %46 = bitcast %struct.eh_region_u_must_not_throw* %must_not_throw to i8*, !dbg !3295
  %47 = bitcast %struct.eh_region_u_must_not_throw* %must_not_throw37 to i8*, !dbg !3295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false), !dbg !3295
  br label %sw.epilog, !dbg !3296

sw.epilog:                                        ; preds = %cond.end, %sw.bb34, %if.end, %for.end, %sw.bb
  %48 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3297
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %48, i32 0, i32 6, !dbg !3299
  %49 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !3299
  store %struct.eh_landing_pad_d* %49, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3300
  br label %for.cond38, !dbg !3301

for.cond38:                                       ; preds = %for.inc58, %sw.epilog
  %50 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3302
  %tobool39 = icmp ne %struct.eh_landing_pad_d* %50, null, !dbg !3304
  br i1 %tobool39, label %for.body40, label %for.end59, !dbg !3304

for.body40:                                       ; preds = %for.cond38
  %51 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3305
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %51, i32 0, i32 2, !dbg !3308
  %52 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !3308
  %cmp41 = icmp eq %union.tree_node* %52, null, !dbg !3309
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !3310

if.then42:                                        ; preds = %for.body40
  br label %for.inc58, !dbg !3311

if.end43:                                         ; preds = %for.body40
  %53 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3312
  %call44 = call %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d* %53), !dbg !3313
  store %struct.eh_landing_pad_d* %call44, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3314
  %54 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3315
  %eh_map45 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %54, i32 0, i32 2, !dbg !3316
  %55 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map45, align 8, !dbg !3316
  %56 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3317
  %57 = bitcast %struct.eh_landing_pad_d* %56 to i8*, !dbg !3318
  %call46 = call i8** @pointer_map_insert(%struct.pointer_map_t* %55, i8* %57), !dbg !3319
  store i8** %call46, i8*** %slot, align 8, !dbg !3320
  %58 = load i8**, i8*** %slot, align 8, !dbg !3321
  %59 = load i8*, i8** %58, align 8, !dbg !3321
  %cmp47 = icmp eq i8* %59, null, !dbg !3321
  br i1 %cmp47, label %cond.false49, label %cond.true48, !dbg !3321

cond.true48:                                      ; preds = %if.end43
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 575, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3321
  br label %cond.end50, !dbg !3321

cond.false49:                                     ; preds = %if.end43
  br label %cond.end50, !dbg !3321

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !3321
  %60 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3322
  %61 = bitcast %struct.eh_landing_pad_d* %60 to i8*, !dbg !3323
  %62 = load i8**, i8*** %slot, align 8, !dbg !3324
  store i8* %61, i8** %62, align 8, !dbg !3325
  %63 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3326
  %label_map52 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %63, i32 0, i32 0, !dbg !3327
  %64 = load %union.tree_node* (%union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, i8*)** %label_map52, align 8, !dbg !3327
  %65 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3328
  %post_landing_pad53 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %65, i32 0, i32 2, !dbg !3329
  %66 = load %union.tree_node*, %union.tree_node** %post_landing_pad53, align 8, !dbg !3329
  %67 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3330
  %label_map_data54 = getelementptr inbounds %struct.duplicate_eh_regions_data, %struct.duplicate_eh_regions_data* %67, i32 0, i32 1, !dbg !3331
  %68 = load i8*, i8** %label_map_data54, align 8, !dbg !3331
  %call55 = call %union.tree_node* %64(%union.tree_node* %66, i8* %68), !dbg !3326
  %69 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3332
  %post_landing_pad56 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %69, i32 0, i32 2, !dbg !3333
  store %union.tree_node* %call55, %union.tree_node** %post_landing_pad56, align 8, !dbg !3334
  %70 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3335
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %70, i32 0, i32 4, !dbg !3336
  %71 = load i32, i32* %index, align 8, !dbg !3336
  %72 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3337
  %post_landing_pad57 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %72, i32 0, i32 2, !dbg !3337
  %73 = load %union.tree_node*, %union.tree_node** %post_landing_pad57, align 8, !dbg !3337
  %label_decl = bitcast %union.tree_node* %73 to %struct.tree_label_decl*, !dbg !3337
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !3337
  store i32 %71, i32* %eh_landing_pad_nr, align 4, !dbg !3338
  br label %for.inc58, !dbg !3339

for.inc58:                                        ; preds = %cond.end50, %if.then42
  %74 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3340
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %74, i32 0, i32 0, !dbg !3341
  %75 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !3341
  store %struct.eh_landing_pad_d* %75, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3342
  br label %for.cond38, !dbg !3343, !llvm.loop !3344

for.end59:                                        ; preds = %for.cond38
  %76 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3346
  %use_cxa_end_cleanup = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %76, i32 0, i32 9, !dbg !3347
  %77 = load i8, i8* %use_cxa_end_cleanup, align 8, !dbg !3347
  %78 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3348
  %use_cxa_end_cleanup60 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %78, i32 0, i32 9, !dbg !3349
  store i8 %77, i8* %use_cxa_end_cleanup60, align 8, !dbg !3350
  %79 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3351
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %79, i32 0, i32 1, !dbg !3353
  %80 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !3353
  store %struct.eh_region_d* %80, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3354
  br label %for.cond61, !dbg !3355

for.cond61:                                       ; preds = %for.inc64, %for.end59
  %81 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3356
  %tobool62 = icmp ne %struct.eh_region_d* %81, null, !dbg !3358
  br i1 %tobool62, label %for.body63, label %for.end65, !dbg !3358

for.body63:                                       ; preds = %for.cond61
  %82 = load %struct.duplicate_eh_regions_data*, %struct.duplicate_eh_regions_data** %data.addr, align 8, !dbg !3359
  %83 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3360
  %84 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !3361
  call void @duplicate_eh_regions_1(%struct.duplicate_eh_regions_data* %82, %struct.eh_region_d* %83, %struct.eh_region_d* %84), !dbg !3362
  br label %for.inc64, !dbg !3362

for.inc64:                                        ; preds = %for.body63
  %85 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3363
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %85, i32 0, i32 2, !dbg !3364
  %86 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !3364
  store %struct.eh_region_d* %86, %struct.eh_region_d** %old_r.addr, align 8, !dbg !3365
  br label %for.cond61, !dbg !3366, !llvm.loop !3367

for.end65:                                        ; preds = %for.cond61
  ret void, !dbg !3369
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @eh_region_outermost(%struct.function* %ifun, %struct.eh_region_d* %region_a, %struct.eh_region_d* %region_b) #0 !dbg !3370 {
entry:
  %ifun.addr = alloca %struct.function*, align 8
  %region_a.addr = alloca %struct.eh_region_d*, align 8
  %region_b.addr = alloca %struct.eh_region_d*, align 8
  %b_outer = alloca %struct.simple_bitmap_def*, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3373, metadata !DIExpression()), !dbg !3374
  store %struct.eh_region_d* %region_a, %struct.eh_region_d** %region_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region_a.addr, metadata !3375, metadata !DIExpression()), !dbg !3376
  store %struct.eh_region_d* %region_b, %struct.eh_region_d** %region_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region_b.addr, metadata !3377, metadata !DIExpression()), !dbg !3378
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %b_outer, metadata !3379, metadata !DIExpression()), !dbg !3391
  %0 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3392
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !3392
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3392
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 1, !dbg !3392
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !3392
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !3392
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3392

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 640, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3392
  br label %cond.end, !dbg !3392

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3392

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3392
  %3 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3393
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !3393
  %4 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !3393
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 0, !dbg !3393
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !3393
  %tobool2 = icmp ne %struct.eh_region_d* %5, null, !dbg !3393
  br i1 %tobool2, label %cond.false4, label %cond.true3, !dbg !3393

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 641, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3393
  br label %cond.end5, !dbg !3393

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3393

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3393
  %6 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3394
  %eh7 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 0, !dbg !3394
  %7 = load %struct.eh_status*, %struct.eh_status** %eh7, align 8, !dbg !3394
  %region_array8 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 1, !dbg !3394
  %8 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array8, align 8, !dbg !3394
  %tobool9 = icmp ne %struct.VEC_eh_region_gc* %8, null, !dbg !3394
  br i1 %tobool9, label %cond.true10, label %cond.false13, !dbg !3394

cond.true10:                                      ; preds = %cond.end5
  %9 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3394
  %eh11 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 0, !dbg !3394
  %10 = load %struct.eh_status*, %struct.eh_status** %eh11, align 8, !dbg !3394
  %region_array12 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %10, i32 0, i32 1, !dbg !3394
  %11 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array12, align 8, !dbg !3394
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %11, i32 0, i32 0, !dbg !3394
  br label %cond.end14, !dbg !3394

cond.false13:                                     ; preds = %cond.end5
  br label %cond.end14, !dbg !3394

cond.end14:                                       ; preds = %cond.false13, %cond.true10
  %cond15 = phi %struct.VEC_eh_region_base* [ %base, %cond.true10 ], [ null, %cond.false13 ], !dbg !3394
  %call = call i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %cond15), !dbg !3394
  %call16 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call), !dbg !3395
  store %struct.simple_bitmap_def* %call16, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3396
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3397
  call void @sbitmap_zero(%struct.simple_bitmap_def* %12), !dbg !3398
  br label %do.body, !dbg !3399

do.body:                                          ; preds = %do.cond, %cond.end14
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3400
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %region_b.addr, align 8, !dbg !3402
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 3, !dbg !3403
  %15 = load i32, i32* %index, align 8, !dbg !3403
  call void @SET_BIT(%struct.simple_bitmap_def* %13, i32 %15), !dbg !3404
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %region_b.addr, align 8, !dbg !3405
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 0, !dbg !3406
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !3406
  store %struct.eh_region_d* %17, %struct.eh_region_d** %region_b.addr, align 8, !dbg !3407
  br label %do.cond, !dbg !3408

do.cond:                                          ; preds = %do.body
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %region_b.addr, align 8, !dbg !3409
  %tobool17 = icmp ne %struct.eh_region_d* %18, null, !dbg !3408
  br i1 %tobool17, label %do.body, label %do.end, !dbg !3408, !llvm.loop !3410

do.end:                                           ; preds = %do.cond
  br label %do.body18, !dbg !3412

do.body18:                                        ; preds = %do.cond23, %do.end
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3413
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %19, i32 0, i32 3, !dbg !3413
  %20 = load %struct.eh_region_d*, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3413
  %index19 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %20, i32 0, i32 3, !dbg !3413
  %21 = load i32, i32* %index19, align 8, !dbg !3413
  %div = udiv i32 %21, 64, !dbg !3413
  %idxprom = zext i32 %div to i64, !dbg !3413
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3413
  %22 = load i64, i64* %arrayidx, align 8, !dbg !3413
  %23 = load %struct.eh_region_d*, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3413
  %index20 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %23, i32 0, i32 3, !dbg !3413
  %24 = load i32, i32* %index20, align 8, !dbg !3413
  %rem = urem i32 %24, 64, !dbg !3413
  %sh_prom = zext i32 %rem to i64, !dbg !3413
  %shr = lshr i64 %22, %sh_prom, !dbg !3413
  %and = and i64 %shr, 1, !dbg !3413
  %tobool21 = icmp ne i64 %and, 0, !dbg !3413
  br i1 %tobool21, label %if.then, label %if.end, !dbg !3416

if.then:                                          ; preds = %do.body18
  br label %do.end25, !dbg !3417

if.end:                                           ; preds = %do.body18
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3418
  %outer22 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %25, i32 0, i32 0, !dbg !3419
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %outer22, align 8, !dbg !3419
  store %struct.eh_region_d* %26, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3420
  br label %do.cond23, !dbg !3421

do.cond23:                                        ; preds = %if.end
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3422
  %tobool24 = icmp ne %struct.eh_region_d* %27, null, !dbg !3421
  br i1 %tobool24, label %do.body18, label %do.end25, !dbg !3421, !llvm.loop !3423

do.end25:                                         ; preds = %do.cond23, %if.then
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3425
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %28, i32 0, i32 0, !dbg !3425
  %29 = load i8*, i8** %popcount, align 8, !dbg !3425
  call void @free(i8* %29), !dbg !3425
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %b_outer, align 8, !dbg !3425
  %31 = bitcast %struct.simple_bitmap_def* %30 to i8*, !dbg !3425
  call void @free(i8* %31), !dbg !3425
  %32 = load %struct.eh_region_d*, %struct.eh_region_d** %region_a.addr, align 8, !dbg !3426
  ret %struct.eh_region_d* %32, !dbg !3427
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %vec_) #0 !dbg !3428 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !3431, metadata !DIExpression()), !dbg !3432
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3432
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !3432
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3432

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3432
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !3432
  %2 = load i32, i32* %num, align 8, !dbg !3432
  br label %cond.end, !dbg !3432

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3432

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3432
  ret i32 %cond, !dbg !3432
}

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3433 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3436, metadata !DIExpression()), !dbg !3437
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3438, metadata !DIExpression()), !dbg !3439
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3440
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3442
  %1 = load i8*, i8** %popcount, align 8, !dbg !3442
  %tobool = icmp ne i8* %1, null, !dbg !3440
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3443

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3444, metadata !DIExpression()), !dbg !3446
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3447
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3447
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3447
  %div = udiv i32 %3, 64, !dbg !3447
  %idxprom = zext i32 %div to i64, !dbg !3447
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3447
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3447
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3447
  %rem = urem i32 %5, 64, !dbg !3447
  %sh_prom = zext i32 %rem to i64, !dbg !3447
  %shr = lshr i64 %4, %sh_prom, !dbg !3447
  %and = and i64 %shr, 1, !dbg !3447
  %conv = trunc i64 %and to i8, !dbg !3447
  store i8 %conv, i8* %oldbit, align 1, !dbg !3448
  %6 = load i8, i8* %oldbit, align 1, !dbg !3449
  %tobool1 = icmp ne i8 %6, 0, !dbg !3449
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3451

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3452
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3453
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3453
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3454
  %div4 = udiv i32 %9, 64, !dbg !3455
  %idxprom5 = zext i32 %div4 to i64, !dbg !3452
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3452
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3456
  %inc = add i8 %10, 1, !dbg !3456
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !3456
  br label %if.end, !dbg !3452

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3457

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3458
  %rem8 = urem i32 %11, 64, !dbg !3459
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3460
  %shl = shl i64 1, %sh_prom9, !dbg !3460
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3461
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3462
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3463
  %div11 = udiv i32 %13, 64, !dbg !3464
  %idxprom12 = zext i32 %div11 to i64, !dbg !3461
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3461
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3465
  %or = or i64 %14, %shl, !dbg !3465
  store i64 %or, i64* %arrayidx13, align 8, !dbg !3465
  ret void, !dbg !3466
}

declare dso_local void @free(i8*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @lookup_type_for_runtime(%union.tree_node* %type) #0 !dbg !3467 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %slot = alloca %union.tree_node**, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3470, metadata !DIExpression()), !dbg !3471
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot, metadata !3472, metadata !DIExpression()), !dbg !3473
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3474
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3474
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3474
  %bf.load = load i64, i64* %1, align 8, !dbg !3474
  %bf.clear = and i64 %bf.load, 65535, !dbg !3474
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3474
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !3476
  br i1 %cmp, label %if.then, label %if.end, !dbg !3477

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3478
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !3479
  br label %return, !dbg !3479

if.end:                                           ; preds = %entry
  %3 = load %struct.htab*, %struct.htab** @type_to_runtime_map, align 8, !dbg !3480
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3481
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !3481
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3482
  %7 = ptrtoint %union.tree_node* %6 to i64, !dbg !3482
  %and = and i64 %7, 262143, !dbg !3482
  %conv = trunc i64 %and to i32, !dbg !3482
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %5, i32 %conv, i32 0), !dbg !3483
  %8 = bitcast i8** %call to %union.tree_node**, !dbg !3484
  store %union.tree_node** %8, %union.tree_node*** %slot, align 8, !dbg !3485
  %9 = load %union.tree_node**, %union.tree_node*** %slot, align 8, !dbg !3486
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !3486
  %list = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !3486
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !3486
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3486
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !3487
  br label %return, !dbg !3487

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3488
  ret %union.tree_node* %12, !dbg !3488
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assign_filter_values() #0 !dbg !3489 {
entry:
  %i = alloca i32, align 4
  %ttypes = alloca %struct.htab*, align 8
  %ehspec = alloca %struct.htab*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %tp_node = alloca %union.tree_node*, align 8
  %flt = alloca i32, align 4
  %flt_node = alloca %union.tree_node*, align 8
  %flt35 = alloca i32, align 4
  %flt_node37 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3490, metadata !DIExpression()), !dbg !3491
  call void @llvm.dbg.declare(metadata %struct.htab** %ttypes, metadata !3492, metadata !DIExpression()), !dbg !3493
  call void @llvm.dbg.declare(metadata %struct.htab** %ehspec, metadata !3494, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !3496, metadata !DIExpression()), !dbg !3497
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !3498, metadata !DIExpression()), !dbg !3499
  %call = call %struct.VEC_tree_gc* @VEC_tree_gc_alloc(i32 16), !dbg !3500
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3501
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3501
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3502
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3502
  %ttype_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 4, !dbg !3503
  store %struct.VEC_tree_gc* %call, %struct.VEC_tree_gc** %ttype_data, align 8, !dbg !3504
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !3505
  %tobool = icmp ne i8 %2, 0, !dbg !3507
  br i1 %tobool, label %if.then, label %if.else, !dbg !3508

if.then:                                          ; preds = %entry
  %call1 = call %struct.VEC_tree_gc* @VEC_tree_gc_alloc(i32 64), !dbg !3509
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3510
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3510
  %eh3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 0, !dbg !3511
  %4 = load %struct.eh_status*, %struct.eh_status** %eh3, align 8, !dbg !3511
  %ehspec_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 5, !dbg !3512
  %arm_eabi = bitcast %union.eh_status_u* %ehspec_data to %struct.VEC_tree_gc**, !dbg !3513
  store %struct.VEC_tree_gc* %call1, %struct.VEC_tree_gc** %arm_eabi, align 8, !dbg !3514
  br label %if.end, !dbg !3510

if.else:                                          ; preds = %entry
  %call4 = call %struct.VEC_uchar_gc* @VEC_uchar_gc_alloc(i32 64), !dbg !3515
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3516
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3516
  %eh6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 0, !dbg !3517
  %6 = load %struct.eh_status*, %struct.eh_status** %eh6, align 8, !dbg !3517
  %ehspec_data7 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %6, i32 0, i32 5, !dbg !3518
  %other = bitcast %union.eh_status_u* %ehspec_data7 to %struct.VEC_uchar_gc**, !dbg !3519
  store %struct.VEC_uchar_gc* %call4, %struct.VEC_uchar_gc** %other, align 8, !dbg !3520
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call8 = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @ttypes_filter_hash, i32 (i8*, i8*)* @ttypes_filter_eq, void (i8*)* @free), !dbg !3521
  store %struct.htab* %call8, %struct.htab** %ttypes, align 8, !dbg !3522
  %call9 = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @ehspec_filter_hash, i32 (i8*, i8*)* @ehspec_filter_eq, void (i8*)* @free), !dbg !3523
  store %struct.htab* %call9, %struct.htab** %ehspec, align 8, !dbg !3524
  store i32 1, i32* %i, align 4, !dbg !3525
  br label %for.cond, !dbg !3527

for.cond:                                         ; preds = %for.inc51, %if.end
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3528
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3528
  %eh11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 0, !dbg !3528
  %8 = load %struct.eh_status*, %struct.eh_status** %eh11, align 8, !dbg !3528
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %8, i32 0, i32 1, !dbg !3528
  %9 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !3528
  %tobool12 = icmp ne %struct.VEC_eh_region_gc* %9, null, !dbg !3528
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !3528

cond.true:                                        ; preds = %for.cond
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3528
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3528
  %eh14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 0, !dbg !3528
  %11 = load %struct.eh_status*, %struct.eh_status** %eh14, align 8, !dbg !3528
  %region_array15 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %11, i32 0, i32 1, !dbg !3528
  %12 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array15, align 8, !dbg !3528
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %12, i32 0, i32 0, !dbg !3528
  br label %cond.end, !dbg !3528

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3528
  %13 = load i32, i32* %i, align 4, !dbg !3528
  %call16 = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond, i32 %13, %struct.eh_region_d** %r), !dbg !3528
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3530
  br i1 %tobool17, label %for.body, label %for.end52, !dbg !3530

for.body:                                         ; preds = %cond.end
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3531
  %cmp = icmp eq %struct.eh_region_d* %14, null, !dbg !3534
  br i1 %cmp, label %if.then18, label %if.end19, !dbg !3535

if.then18:                                        ; preds = %for.body
  br label %for.inc51, !dbg !3536

if.end19:                                         ; preds = %for.body
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3537
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %15, i32 0, i32 4, !dbg !3538
  %16 = load i32, i32* %type, align 4, !dbg !3538
  switch i32 %16, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb45
  ], !dbg !3539

sw.bb:                                            ; preds = %if.end19
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3540
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 5, !dbg !3543
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !3544
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !3545
  %18 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !3545
  store %struct.eh_catch_d* %18, %struct.eh_catch_d** %c, align 8, !dbg !3546
  br label %for.cond20, !dbg !3547

for.cond20:                                       ; preds = %for.inc43, %sw.bb
  %19 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3548
  %tobool21 = icmp ne %struct.eh_catch_d* %19, null, !dbg !3550
  br i1 %tobool21, label %for.body22, label %for.end44, !dbg !3550

for.body22:                                       ; preds = %for.cond20
  %20 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3551
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %20, i32 0, i32 3, !dbg !3553
  store %union.tree_node* null, %union.tree_node** %filter_list, align 8, !dbg !3554
  %21 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3555
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %21, i32 0, i32 2, !dbg !3557
  %22 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !3557
  %cmp23 = icmp ne %union.tree_node* %22, null, !dbg !3558
  br i1 %cmp23, label %if.then24, label %if.else34, !dbg !3559

if.then24:                                        ; preds = %for.body22
  call void @llvm.dbg.declare(metadata %union.tree_node** %tp_node, metadata !3560, metadata !DIExpression()), !dbg !3562
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3563
  %type_list25 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %23, i32 0, i32 2, !dbg !3564
  %24 = load %union.tree_node*, %union.tree_node** %type_list25, align 8, !dbg !3564
  store %union.tree_node* %24, %union.tree_node** %tp_node, align 8, !dbg !3562
  br label %for.cond26, !dbg !3565

for.cond26:                                       ; preds = %for.inc, %if.then24
  %25 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !3566
  %tobool27 = icmp ne %union.tree_node* %25, null, !dbg !3569
  br i1 %tobool27, label %for.body28, label %for.end, !dbg !3569

for.body28:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata i32* %flt, metadata !3570, metadata !DIExpression()), !dbg !3572
  %26 = load %struct.htab*, %struct.htab** %ttypes, align 8, !dbg !3573
  %27 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !3574
  %list = bitcast %union.tree_node* %27 to %struct.tree_list*, !dbg !3574
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !3574
  %28 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3574
  %call29 = call i32 @add_ttypes_entry(%struct.htab* %26, %union.tree_node* %28), !dbg !3575
  store i32 %call29, i32* %flt, align 4, !dbg !3572
  call void @llvm.dbg.declare(metadata %union.tree_node** %flt_node, metadata !3576, metadata !DIExpression()), !dbg !3577
  %29 = load i32, i32* %flt, align 4, !dbg !3578
  %conv = sext i32 %29 to i64, !dbg !3578
  %call30 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !3579
  store %union.tree_node* %call30, %union.tree_node** %flt_node, align 8, !dbg !3577
  %30 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !3580
  %31 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3580
  %filter_list31 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %31, i32 0, i32 3, !dbg !3580
  %32 = load %union.tree_node*, %union.tree_node** %filter_list31, align 8, !dbg !3580
  %call32 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %30, %union.tree_node* %32), !dbg !3580
  %33 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3581
  %filter_list33 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %33, i32 0, i32 3, !dbg !3582
  store %union.tree_node* %call32, %union.tree_node** %filter_list33, align 8, !dbg !3583
  br label %for.inc, !dbg !3584

for.inc:                                          ; preds = %for.body28
  %34 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !3585
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !3585
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3585
  %35 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3585
  store %union.tree_node* %35, %union.tree_node** %tp_node, align 8, !dbg !3586
  br label %for.cond26, !dbg !3587, !llvm.loop !3588

for.end:                                          ; preds = %for.cond26
  br label %if.end42, !dbg !3590

if.else34:                                        ; preds = %for.body22
  call void @llvm.dbg.declare(metadata i32* %flt35, metadata !3591, metadata !DIExpression()), !dbg !3593
  %36 = load %struct.htab*, %struct.htab** %ttypes, align 8, !dbg !3594
  %call36 = call i32 @add_ttypes_entry(%struct.htab* %36, %union.tree_node* null), !dbg !3595
  store i32 %call36, i32* %flt35, align 4, !dbg !3593
  call void @llvm.dbg.declare(metadata %union.tree_node** %flt_node37, metadata !3596, metadata !DIExpression()), !dbg !3597
  %37 = load i32, i32* %flt35, align 4, !dbg !3598
  %conv38 = sext i32 %37 to i64, !dbg !3598
  %call39 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv38), !dbg !3599
  store %union.tree_node* %call39, %union.tree_node** %flt_node37, align 8, !dbg !3597
  %38 = load %union.tree_node*, %union.tree_node** %flt_node37, align 8, !dbg !3600
  %call40 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %38, %union.tree_node* null), !dbg !3600
  %39 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3601
  %filter_list41 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %39, i32 0, i32 3, !dbg !3602
  store %union.tree_node* %call40, %union.tree_node** %filter_list41, align 8, !dbg !3603
  br label %if.end42

if.end42:                                         ; preds = %if.else34, %for.end
  br label %for.inc43, !dbg !3604

for.inc43:                                        ; preds = %if.end42
  %40 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3605
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %40, i32 0, i32 0, !dbg !3606
  %41 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !3606
  store %struct.eh_catch_d* %41, %struct.eh_catch_d** %c, align 8, !dbg !3607
  br label %for.cond20, !dbg !3608, !llvm.loop !3609

for.end44:                                        ; preds = %for.cond20
  br label %sw.epilog, !dbg !3611

sw.bb45:                                          ; preds = %if.end19
  %42 = load %struct.htab*, %struct.htab** %ehspec, align 8, !dbg !3612
  %43 = load %struct.htab*, %struct.htab** %ttypes, align 8, !dbg !3613
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3614
  %u46 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %44, i32 0, i32 5, !dbg !3615
  %allowed = bitcast %union.eh_region_u* %u46 to %struct.eh_region_u_allowed*, !dbg !3616
  %type_list47 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 0, !dbg !3617
  %45 = load %union.tree_node*, %union.tree_node** %type_list47, align 8, !dbg !3617
  %call48 = call i32 @add_ehspec_entry(%struct.htab* %42, %struct.htab* %43, %union.tree_node* %45), !dbg !3618
  %46 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3619
  %u49 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %46, i32 0, i32 5, !dbg !3620
  %allowed50 = bitcast %union.eh_region_u* %u49 to %struct.eh_region_u_allowed*, !dbg !3621
  %filter = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed50, i32 0, i32 2, !dbg !3622
  store i32 %call48, i32* %filter, align 8, !dbg !3623
  br label %sw.epilog, !dbg !3624

sw.default:                                       ; preds = %if.end19
  br label %sw.epilog, !dbg !3625

sw.epilog:                                        ; preds = %sw.default, %sw.bb45, %for.end44
  br label %for.inc51, !dbg !3626

for.inc51:                                        ; preds = %sw.epilog, %if.then18
  %47 = load i32, i32* %i, align 4, !dbg !3627
  %inc = add nsw i32 %47, 1, !dbg !3627
  store i32 %inc, i32* %i, align 4, !dbg !3627
  br label %for.cond, !dbg !3628, !llvm.loop !3629

for.end52:                                        ; preds = %cond.end
  %48 = load %struct.htab*, %struct.htab** %ttypes, align 8, !dbg !3631
  call void @htab_delete(%struct.htab* %48), !dbg !3632
  %49 = load %struct.htab*, %struct.htab** %ehspec, align 8, !dbg !3633
  call void @htab_delete(%struct.htab* %49), !dbg !3634
  ret void, !dbg !3635
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_gc* @VEC_tree_gc_alloc(i32 %alloc_) #0 !dbg !3636 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3639, metadata !DIExpression()), !dbg !3640
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3640
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !3640
  %1 = bitcast i8* %call to %struct.VEC_tree_gc*, !dbg !3640
  ret %struct.VEC_tree_gc* %1, !dbg !3640
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_uchar_gc* @VEC_uchar_gc_alloc(i32 %alloc_) #0 !dbg !3641 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3644, metadata !DIExpression()), !dbg !3645
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3645
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %0, i64 8, i64 1), !dbg !3645
  %1 = bitcast i8* %call to %struct.VEC_uchar_gc*, !dbg !3645
  ret %struct.VEC_uchar_gc* %1, !dbg !3645
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @ttypes_filter_hash(i8* %pentry) #0 !dbg !3646 {
entry:
  %pentry.addr = alloca i8*, align 8
  %entry1 = alloca %struct.ttypes_filter*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !3647, metadata !DIExpression()), !dbg !3648
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %entry1, metadata !3649, metadata !DIExpression()), !dbg !3650
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !3651
  %1 = bitcast i8* %0 to %struct.ttypes_filter*, !dbg !3652
  store %struct.ttypes_filter* %1, %struct.ttypes_filter** %entry1, align 8, !dbg !3650
  %2 = load %struct.ttypes_filter*, %struct.ttypes_filter** %entry1, align 8, !dbg !3653
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %2, i32 0, i32 0, !dbg !3653
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3653
  %4 = ptrtoint %union.tree_node* %3 to i64, !dbg !3653
  %and = and i64 %4, 262143, !dbg !3653
  %conv = trunc i64 %and to i32, !dbg !3653
  ret i32 %conv, !dbg !3654
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ttypes_filter_eq(i8* %pentry, i8* %pdata) #0 !dbg !3655 {
entry:
  %pentry.addr = alloca i8*, align 8
  %pdata.addr = alloca i8*, align 8
  %entry1 = alloca %struct.ttypes_filter*, align 8
  %data = alloca %union.tree_node*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !3656, metadata !DIExpression()), !dbg !3657
  store i8* %pdata, i8** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pdata.addr, metadata !3658, metadata !DIExpression()), !dbg !3659
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %entry1, metadata !3660, metadata !DIExpression()), !dbg !3662
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !3663
  %1 = bitcast i8* %0 to %struct.ttypes_filter*, !dbg !3664
  store %struct.ttypes_filter* %1, %struct.ttypes_filter** %entry1, align 8, !dbg !3662
  call void @llvm.dbg.declare(metadata %union.tree_node** %data, metadata !3665, metadata !DIExpression()), !dbg !3666
  %2 = load i8*, i8** %pdata.addr, align 8, !dbg !3667
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !3668
  store %union.tree_node* %3, %union.tree_node** %data, align 8, !dbg !3666
  %4 = load %struct.ttypes_filter*, %struct.ttypes_filter** %entry1, align 8, !dbg !3669
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %4, i32 0, i32 0, !dbg !3670
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3670
  %6 = load %union.tree_node*, %union.tree_node** %data, align 8, !dbg !3671
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !3672
  %conv = zext i1 %cmp to i32, !dbg !3672
  ret i32 %conv, !dbg !3673
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ehspec_filter_hash(i8* %pentry) #0 !dbg !3674 {
entry:
  %pentry.addr = alloca i8*, align 8
  %entry1 = alloca %struct.ttypes_filter*, align 8
  %h = alloca i32, align 4
  %list = alloca %union.tree_node*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !3675, metadata !DIExpression()), !dbg !3676
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %entry1, metadata !3677, metadata !DIExpression()), !dbg !3678
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !3679
  %1 = bitcast i8* %0 to %struct.ttypes_filter*, !dbg !3680
  store %struct.ttypes_filter* %1, %struct.ttypes_filter** %entry1, align 8, !dbg !3678
  call void @llvm.dbg.declare(metadata i32* %h, metadata !3681, metadata !DIExpression()), !dbg !3682
  store i32 0, i32* %h, align 4, !dbg !3682
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !3683, metadata !DIExpression()), !dbg !3684
  %2 = load %struct.ttypes_filter*, %struct.ttypes_filter** %entry1, align 8, !dbg !3685
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %2, i32 0, i32 0, !dbg !3687
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3687
  store %union.tree_node* %3, %union.tree_node** %list, align 8, !dbg !3688
  br label %for.cond, !dbg !3689

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !3690
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3692
  br i1 %tobool, label %for.body, label %for.end, !dbg !3692

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %h, align 4, !dbg !3693
  %shl = shl i32 %5, 5, !dbg !3694
  %6 = load i32, i32* %h, align 4, !dbg !3695
  %shr = lshr i32 %6, 27, !dbg !3696
  %add = add i32 %shl, %shr, !dbg !3697
  %conv = zext i32 %add to i64, !dbg !3698
  %7 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !3699
  %list2 = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !3699
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list2, i32 0, i32 2, !dbg !3699
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3699
  %9 = ptrtoint %union.tree_node* %8 to i64, !dbg !3699
  %and = and i64 %9, 262143, !dbg !3699
  %add3 = add i64 %conv, %and, !dbg !3700
  %conv4 = trunc i64 %add3 to i32, !dbg !3698
  store i32 %conv4, i32* %h, align 4, !dbg !3701
  br label %for.inc, !dbg !3702

for.inc:                                          ; preds = %for.body
  %10 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !3703
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !3703
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3703
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3703
  store %union.tree_node* %11, %union.tree_node** %list, align 8, !dbg !3704
  br label %for.cond, !dbg !3705, !llvm.loop !3706

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %h, align 4, !dbg !3708
  ret i32 %12, !dbg !3709
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ehspec_filter_eq(i8* %pentry, i8* %pdata) #0 !dbg !3710 {
entry:
  %pentry.addr = alloca i8*, align 8
  %pdata.addr = alloca i8*, align 8
  %entry1 = alloca %struct.ttypes_filter*, align 8
  %data = alloca %struct.ttypes_filter*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !3711, metadata !DIExpression()), !dbg !3712
  store i8* %pdata, i8** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pdata.addr, metadata !3713, metadata !DIExpression()), !dbg !3714
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %entry1, metadata !3715, metadata !DIExpression()), !dbg !3716
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !3717
  %1 = bitcast i8* %0 to %struct.ttypes_filter*, !dbg !3718
  store %struct.ttypes_filter* %1, %struct.ttypes_filter** %entry1, align 8, !dbg !3716
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %data, metadata !3719, metadata !DIExpression()), !dbg !3720
  %2 = load i8*, i8** %pdata.addr, align 8, !dbg !3721
  %3 = bitcast i8* %2 to %struct.ttypes_filter*, !dbg !3722
  store %struct.ttypes_filter* %3, %struct.ttypes_filter** %data, align 8, !dbg !3720
  %4 = load %struct.ttypes_filter*, %struct.ttypes_filter** %entry1, align 8, !dbg !3723
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %4, i32 0, i32 0, !dbg !3724
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3724
  %6 = load %struct.ttypes_filter*, %struct.ttypes_filter** %data, align 8, !dbg !3725
  %t2 = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %6, i32 0, i32 0, !dbg !3726
  %7 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !3726
  %call = call i32 @type_list_equal(%union.tree_node* %5, %union.tree_node* %7), !dbg !3727
  ret i32 %call, !dbg !3728
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d** %ptr) #0 !dbg !3729 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_region_d**, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !3732, metadata !DIExpression()), !dbg !3733
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3734, metadata !DIExpression()), !dbg !3733
  store %struct.eh_region_d** %ptr, %struct.eh_region_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %ptr.addr, metadata !3735, metadata !DIExpression()), !dbg !3733
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3736
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !3736
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3736

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3736
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3736
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !3736
  %3 = load i32, i32* %num, align 8, !dbg !3736
  %cmp = icmp ult i32 %1, %3, !dbg !3736
  br i1 %cmp, label %if.then, label %if.else, !dbg !3733

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !3738
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 2, !dbg !3738
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3738
  %idxprom = zext i32 %5 to i64, !dbg !3738
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !3738
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !3738
  %7 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !3738
  store %struct.eh_region_d* %6, %struct.eh_region_d** %7, align 8, !dbg !3738
  store i32 1, i32* %retval, align 4, !dbg !3738
  br label %return, !dbg !3738

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !3740
  store %struct.eh_region_d* null, %struct.eh_region_d** %8, align 8, !dbg !3740
  store i32 0, i32* %retval, align 4, !dbg !3740
  br label %return, !dbg !3740

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3733
  ret i32 %9, !dbg !3733
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_ttypes_entry(%struct.htab* %ttypes_hash, %union.tree_node* %type) #0 !dbg !3742 {
entry:
  %ttypes_hash.addr = alloca %struct.htab*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %slot = alloca %struct.ttypes_filter**, align 8
  %n = alloca %struct.ttypes_filter*, align 8
  store %struct.htab* %ttypes_hash, %struct.htab** %ttypes_hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %ttypes_hash.addr, metadata !3745, metadata !DIExpression()), !dbg !3746
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3747, metadata !DIExpression()), !dbg !3748
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter*** %slot, metadata !3749, metadata !DIExpression()), !dbg !3750
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %n, metadata !3751, metadata !DIExpression()), !dbg !3752
  %0 = load %struct.htab*, %struct.htab** %ttypes_hash.addr, align 8, !dbg !3753
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3754
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !3754
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3755
  %4 = ptrtoint %union.tree_node* %3 to i64, !dbg !3755
  %and = and i64 %4, 262143, !dbg !3755
  %conv = trunc i64 %and to i32, !dbg !3755
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %2, i32 %conv, i32 1), !dbg !3756
  %5 = bitcast i8** %call to %struct.ttypes_filter**, !dbg !3757
  store %struct.ttypes_filter** %5, %struct.ttypes_filter*** %slot, align 8, !dbg !3758
  %6 = load %struct.ttypes_filter**, %struct.ttypes_filter*** %slot, align 8, !dbg !3759
  %7 = load %struct.ttypes_filter*, %struct.ttypes_filter** %6, align 8, !dbg !3761
  store %struct.ttypes_filter* %7, %struct.ttypes_filter** %n, align 8, !dbg !3762
  %cmp = icmp eq %struct.ttypes_filter* %7, null, !dbg !3763
  br i1 %cmp, label %if.then, label %if.end, !dbg !3764

if.then:                                          ; preds = %entry
  %call2 = call i8* @xmalloc(i64 16), !dbg !3765
  %8 = bitcast i8* %call2 to %struct.ttypes_filter*, !dbg !3765
  store %struct.ttypes_filter* %8, %struct.ttypes_filter** %n, align 8, !dbg !3767
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3768
  %10 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3769
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %10, i32 0, i32 0, !dbg !3770
  store %union.tree_node* %9, %union.tree_node** %t, align 8, !dbg !3771
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3772
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3772
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3772
  %12 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3772
  %ttype_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %12, i32 0, i32 4, !dbg !3772
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data, align 8, !dbg !3772
  %tobool = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !3772
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3772

cond.true:                                        ; preds = %if.then
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3772
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3772
  %eh4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 0, !dbg !3772
  %15 = load %struct.eh_status*, %struct.eh_status** %eh4, align 8, !dbg !3772
  %ttype_data5 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %15, i32 0, i32 4, !dbg !3772
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data5, align 8, !dbg !3772
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %16, i32 0, i32 0, !dbg !3772
  br label %cond.end, !dbg !3772

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3772

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3772
  %call6 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3772
  %add = add i32 %call6, 1, !dbg !3773
  %17 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3774
  %filter = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %17, i32 0, i32 1, !dbg !3775
  store i32 %add, i32* %filter, align 8, !dbg !3776
  %18 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3777
  %19 = load %struct.ttypes_filter**, %struct.ttypes_filter*** %slot, align 8, !dbg !3778
  store %struct.ttypes_filter* %18, %struct.ttypes_filter** %19, align 8, !dbg !3779
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3780
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3780
  %eh8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 0, !dbg !3780
  %21 = load %struct.eh_status*, %struct.eh_status** %eh8, align 8, !dbg !3780
  %ttype_data9 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %21, i32 0, i32 4, !dbg !3780
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3780
  %call10 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %ttype_data9, %union.tree_node* %22), !dbg !3780
  br label %if.end, !dbg !3781

if.end:                                           ; preds = %cond.end, %entry
  %23 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3782
  %filter11 = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %23, i32 0, i32 1, !dbg !3783
  %24 = load i32, i32* %filter11, align 8, !dbg !3783
  ret i32 %24, !dbg !3784
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_ehspec_entry(%struct.htab* %ehspec_hash, %struct.htab* %ttypes_hash, %union.tree_node* %list) #0 !dbg !3785 {
entry:
  %ehspec_hash.addr = alloca %struct.htab*, align 8
  %ttypes_hash.addr = alloca %struct.htab*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %slot = alloca %struct.ttypes_filter**, align 8
  %n = alloca %struct.ttypes_filter*, align 8
  %dummy = alloca %struct.ttypes_filter, align 8
  %len = alloca i32, align 4
  store %struct.htab* %ehspec_hash, %struct.htab** %ehspec_hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %ehspec_hash.addr, metadata !3788, metadata !DIExpression()), !dbg !3789
  store %struct.htab* %ttypes_hash, %struct.htab** %ttypes_hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %ttypes_hash.addr, metadata !3790, metadata !DIExpression()), !dbg !3791
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !3792, metadata !DIExpression()), !dbg !3793
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter*** %slot, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter** %n, metadata !3796, metadata !DIExpression()), !dbg !3797
  call void @llvm.dbg.declare(metadata %struct.ttypes_filter* %dummy, metadata !3798, metadata !DIExpression()), !dbg !3799
  %0 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3800
  %t = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %dummy, i32 0, i32 0, !dbg !3801
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !3802
  %1 = load %struct.htab*, %struct.htab** %ehspec_hash.addr, align 8, !dbg !3803
  %2 = bitcast %struct.ttypes_filter* %dummy to i8*, !dbg !3804
  %call = call i8** @htab_find_slot(%struct.htab* %1, i8* %2, i32 1), !dbg !3805
  %3 = bitcast i8** %call to %struct.ttypes_filter**, !dbg !3806
  store %struct.ttypes_filter** %3, %struct.ttypes_filter*** %slot, align 8, !dbg !3807
  %4 = load %struct.ttypes_filter**, %struct.ttypes_filter*** %slot, align 8, !dbg !3808
  %5 = load %struct.ttypes_filter*, %struct.ttypes_filter** %4, align 8, !dbg !3810
  store %struct.ttypes_filter* %5, %struct.ttypes_filter** %n, align 8, !dbg !3811
  %cmp = icmp eq %struct.ttypes_filter* %5, null, !dbg !3812
  br i1 %cmp, label %if.then, label %if.end56, !dbg !3813

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3814, metadata !DIExpression()), !dbg !3816
  %6 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !3817
  %tobool = icmp ne i8 %6, 0, !dbg !3819
  br i1 %tobool, label %if.then1, label %if.else, !dbg !3820

if.then1:                                         ; preds = %if.then
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3821
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3821
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3821
  %8 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3821
  %ehspec_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %8, i32 0, i32 5, !dbg !3821
  %arm_eabi = bitcast %union.eh_status_u* %ehspec_data to %struct.VEC_tree_gc**, !dbg !3821
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi, align 8, !dbg !3821
  %tobool2 = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !3821
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !3821

cond.true:                                        ; preds = %if.then1
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3821
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3821
  %eh4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 0, !dbg !3821
  %11 = load %struct.eh_status*, %struct.eh_status** %eh4, align 8, !dbg !3821
  %ehspec_data5 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %11, i32 0, i32 5, !dbg !3821
  %arm_eabi6 = bitcast %union.eh_status_u* %ehspec_data5 to %struct.VEC_tree_gc**, !dbg !3821
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi6, align 8, !dbg !3821
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !3821
  br label %cond.end, !dbg !3821

cond.false:                                       ; preds = %if.then1
  br label %cond.end, !dbg !3821

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3821
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3821
  store i32 %call7, i32* %len, align 4, !dbg !3822
  br label %if.end, !dbg !3823

if.else:                                          ; preds = %if.then
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3824
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !3824
  %eh9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 0, !dbg !3824
  %14 = load %struct.eh_status*, %struct.eh_status** %eh9, align 8, !dbg !3824
  %ehspec_data10 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %14, i32 0, i32 5, !dbg !3824
  %other = bitcast %union.eh_status_u* %ehspec_data10 to %struct.VEC_uchar_gc**, !dbg !3824
  %15 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other, align 8, !dbg !3824
  %tobool11 = icmp ne %struct.VEC_uchar_gc* %15, null, !dbg !3824
  br i1 %tobool11, label %cond.true12, label %cond.false18, !dbg !3824

cond.true12:                                      ; preds = %if.else
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3824
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3824
  %eh14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 0, !dbg !3824
  %17 = load %struct.eh_status*, %struct.eh_status** %eh14, align 8, !dbg !3824
  %ehspec_data15 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %17, i32 0, i32 5, !dbg !3824
  %other16 = bitcast %union.eh_status_u* %ehspec_data15 to %struct.VEC_uchar_gc**, !dbg !3824
  %18 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other16, align 8, !dbg !3824
  %base17 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %18, i32 0, i32 0, !dbg !3824
  br label %cond.end19, !dbg !3824

cond.false18:                                     ; preds = %if.else
  br label %cond.end19, !dbg !3824

cond.end19:                                       ; preds = %cond.false18, %cond.true12
  %cond20 = phi %struct.VEC_uchar_base* [ %base17, %cond.true12 ], [ null, %cond.false18 ], !dbg !3824
  %call21 = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond20), !dbg !3824
  store i32 %call21, i32* %len, align 4, !dbg !3825
  br label %if.end

if.end:                                           ; preds = %cond.end19, %cond.end
  %call22 = call i8* @xmalloc(i64 16), !dbg !3826
  %19 = bitcast i8* %call22 to %struct.ttypes_filter*, !dbg !3826
  store %struct.ttypes_filter* %19, %struct.ttypes_filter** %n, align 8, !dbg !3827
  %20 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3828
  %21 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3829
  %t23 = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %21, i32 0, i32 0, !dbg !3830
  store %union.tree_node* %20, %union.tree_node** %t23, align 8, !dbg !3831
  %22 = load i32, i32* %len, align 4, !dbg !3832
  %add = add nsw i32 %22, 1, !dbg !3833
  %sub = sub nsw i32 0, %add, !dbg !3834
  %23 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3835
  %filter = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %23, i32 0, i32 1, !dbg !3836
  store i32 %sub, i32* %filter, align 8, !dbg !3837
  %24 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3838
  %25 = load %struct.ttypes_filter**, %struct.ttypes_filter*** %slot, align 8, !dbg !3839
  store %struct.ttypes_filter* %24, %struct.ttypes_filter** %25, align 8, !dbg !3840
  br label %for.cond, !dbg !3841

for.cond:                                         ; preds = %for.inc, %if.end
  %26 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3842
  %tobool24 = icmp ne %union.tree_node* %26, null, !dbg !3845
  br i1 %tobool24, label %for.body, label %for.end, !dbg !3845

for.body:                                         ; preds = %for.cond
  %27 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !3846
  %tobool25 = icmp ne i8 %27, 0, !dbg !3849
  br i1 %tobool25, label %if.then26, label %if.else33, !dbg !3850

if.then26:                                        ; preds = %for.body
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3851
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !3851
  %eh28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 0, !dbg !3851
  %29 = load %struct.eh_status*, %struct.eh_status** %eh28, align 8, !dbg !3851
  %ehspec_data29 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %29, i32 0, i32 5, !dbg !3851
  %arm_eabi30 = bitcast %union.eh_status_u* %ehspec_data29 to %struct.VEC_tree_gc**, !dbg !3851
  %30 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3851
  %list31 = bitcast %union.tree_node* %30 to %struct.tree_list*, !dbg !3851
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list31, i32 0, i32 2, !dbg !3851
  %31 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3851
  %call32 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %arm_eabi30, %union.tree_node* %31), !dbg !3851
  br label %if.end41, !dbg !3851

if.else33:                                        ; preds = %for.body
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3852
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !3852
  %eh35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 0, !dbg !3854
  %33 = load %struct.eh_status*, %struct.eh_status** %eh35, align 8, !dbg !3854
  %ehspec_data36 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %33, i32 0, i32 5, !dbg !3855
  %other37 = bitcast %union.eh_status_u* %ehspec_data36 to %struct.VEC_uchar_gc**, !dbg !3856
  %34 = load %struct.htab*, %struct.htab** %ttypes_hash.addr, align 8, !dbg !3857
  %35 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3858
  %list38 = bitcast %union.tree_node* %35 to %struct.tree_list*, !dbg !3858
  %value39 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list38, i32 0, i32 2, !dbg !3858
  %36 = load %union.tree_node*, %union.tree_node** %value39, align 8, !dbg !3858
  %call40 = call i32 @add_ttypes_entry(%struct.htab* %34, %union.tree_node* %36), !dbg !3859
  call void @push_uleb128(%struct.VEC_uchar_gc** %other37, i32 %call40), !dbg !3860
  br label %if.end41

if.end41:                                         ; preds = %if.else33, %if.then26
  br label %for.inc, !dbg !3861

for.inc:                                          ; preds = %if.end41
  %37 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !3862
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !3862
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3862
  %38 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3862
  store %union.tree_node* %38, %union.tree_node** %list.addr, align 8, !dbg !3863
  br label %for.cond, !dbg !3864, !llvm.loop !3865

for.end:                                          ; preds = %for.cond
  %39 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !3867
  %tobool42 = icmp ne i8 %39, 0, !dbg !3869
  br i1 %tobool42, label %if.then43, label %if.else49, !dbg !3870

if.then43:                                        ; preds = %for.end
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3871
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !3871
  %eh45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 0, !dbg !3871
  %41 = load %struct.eh_status*, %struct.eh_status** %eh45, align 8, !dbg !3871
  %ehspec_data46 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %41, i32 0, i32 5, !dbg !3871
  %arm_eabi47 = bitcast %union.eh_status_u* %ehspec_data46 to %struct.VEC_tree_gc**, !dbg !3871
  %call48 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %arm_eabi47, %union.tree_node* null), !dbg !3871
  br label %if.end55, !dbg !3871

if.else49:                                        ; preds = %for.end
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3872
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !3872
  %eh51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 0, !dbg !3872
  %43 = load %struct.eh_status*, %struct.eh_status** %eh51, align 8, !dbg !3872
  %ehspec_data52 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %43, i32 0, i32 5, !dbg !3872
  %other53 = bitcast %union.eh_status_u* %ehspec_data52 to %struct.VEC_uchar_gc**, !dbg !3872
  %call54 = call i8* @VEC_uchar_gc_safe_push(%struct.VEC_uchar_gc** %other53, i8 zeroext 0), !dbg !3872
  br label %if.end55

if.end55:                                         ; preds = %if.else49, %if.then43
  br label %if.end56, !dbg !3873

if.end56:                                         ; preds = %if.end55, %entry
  %44 = load %struct.ttypes_filter*, %struct.ttypes_filter** %n, align 8, !dbg !3874
  %filter57 = getelementptr inbounds %struct.ttypes_filter, %struct.ttypes_filter* %44, i32 0, i32 1, !dbg !3875
  %45 = load i32, i32* %filter57, align 8, !dbg !3875
  ret i32 %45, !dbg !3876
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sjlj_emit_function_exit_after(%struct.rtx_def* %after) #0 !dbg !3877 {
entry:
  %after.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !3880, metadata !DIExpression()), !dbg !3881
  %0 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !3882
  store %struct.rtx_def* %0, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 4), align 8, !dbg !3883
  ret void, !dbg !3884
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_eh() #0 !dbg !3885 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3886
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3886
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3887
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3887
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !3888
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !3888
  %cmp = icmp ne %struct.eh_region_d* %2, null, !dbg !3889
  %conv = zext i1 %cmp to i32, !dbg !3889
  %conv1 = trunc i32 %conv to i8, !dbg !3886
  ret i8 %conv1, !dbg !3890
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_eh() #0 !dbg !3891 {
entry:
  call void @finish_eh_generation(), !dbg !3892
  %call = call zeroext i8 @cleanup_cfg(i32 16), !dbg !3893
  ret i32 0, !dbg !3894
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_eh_landing_pad(%struct.eh_landing_pad_d* %lp) #0 !dbg !3895 {
entry:
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  %pp = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !3898, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %pp, metadata !3900, metadata !DIExpression()), !dbg !3901
  %0 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3902
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %0, i32 0, i32 1, !dbg !3904
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !3904
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 6, !dbg !3905
  store %struct.eh_landing_pad_d** %landing_pads, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !3906
  br label %for.cond, !dbg !3907

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !3908
  %3 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %2, align 8, !dbg !3910
  %4 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3911
  %cmp = icmp ne %struct.eh_landing_pad_d* %3, %4, !dbg !3912
  br i1 %cmp, label %for.body, label %for.end, !dbg !3913

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !3914

for.inc:                                          ; preds = %for.body
  %5 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !3915
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %5, align 8, !dbg !3916
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %6, i32 0, i32 0, !dbg !3917
  store %struct.eh_landing_pad_d** %next_lp, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !3918
  br label %for.cond, !dbg !3919, !llvm.loop !3920

for.end:                                          ; preds = %for.cond
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3922
  %next_lp1 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %7, i32 0, i32 0, !dbg !3923
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp1, align 8, !dbg !3923
  %9 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !3924
  store %struct.eh_landing_pad_d* %8, %struct.eh_landing_pad_d** %9, align 8, !dbg !3925
  %10 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3926
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %10, i32 0, i32 2, !dbg !3928
  %11 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !3928
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !3926
  br i1 %tobool, label %if.then, label %if.end, !dbg !3929

if.then:                                          ; preds = %for.end
  %12 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3930
  %post_landing_pad2 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %12, i32 0, i32 2, !dbg !3930
  %13 = load %union.tree_node*, %union.tree_node** %post_landing_pad2, align 8, !dbg !3930
  %label_decl = bitcast %union.tree_node* %13 to %struct.tree_label_decl*, !dbg !3930
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !3930
  store i32 0, i32* %eh_landing_pad_nr, align 4, !dbg !3931
  br label %if.end, !dbg !3930

if.end:                                           ; preds = %if.then, %for.end
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3932
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3932
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3932
  %15 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3932
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %15, i32 0, i32 2, !dbg !3932
  %16 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !3932
  %tobool3 = icmp ne %struct.VEC_eh_landing_pad_gc* %16, null, !dbg !3932
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3932

cond.true:                                        ; preds = %if.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3932
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !3932
  %eh5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 0, !dbg !3932
  %18 = load %struct.eh_status*, %struct.eh_status** %eh5, align 8, !dbg !3932
  %lp_array6 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %18, i32 0, i32 2, !dbg !3932
  %19 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array6, align 8, !dbg !3932
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %19, i32 0, i32 0, !dbg !3932
  br label %cond.end, !dbg !3932

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3932

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3932
  %20 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !3932
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %20, i32 0, i32 4, !dbg !3932
  %21 = load i32, i32* %index, align 8, !dbg !3932
  %call = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_replace(%struct.VEC_eh_landing_pad_base* %cond, i32 %21, %struct.eh_landing_pad_d* null), !dbg !3932
  ret void, !dbg !3933
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_replace(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d* %obj_) #0 !dbg !3934 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.eh_landing_pad_d*, align 8
  %old_obj_ = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3940, metadata !DIExpression()), !dbg !3939
  store %struct.eh_landing_pad_d* %obj_, %struct.eh_landing_pad_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %obj_.addr, metadata !3941, metadata !DIExpression()), !dbg !3939
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %old_obj_, metadata !3942, metadata !DIExpression()), !dbg !3939
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3939
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3939
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !3939
  %2 = load i32, i32* %num, align 8, !dbg !3939
  %cmp = icmp ult i32 %0, %2, !dbg !3939
  %conv = zext i1 %cmp to i32, !dbg !3939
  %3 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3939
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %3, i32 0, i32 2, !dbg !3939
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3939
  %idxprom = zext i32 %4 to i64, !dbg !3939
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !3939
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !3939
  store %struct.eh_landing_pad_d* %5, %struct.eh_landing_pad_d** %old_obj_, align 8, !dbg !3939
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %obj_.addr, align 8, !dbg !3939
  %7 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !3939
  %vec1 = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %7, i32 0, i32 2, !dbg !3939
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3939
  %idxprom2 = zext i32 %8 to i64, !dbg !3939
  %arrayidx3 = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !3939
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %arrayidx3, align 8, !dbg !3939
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_obj_, align 8, !dbg !3939
  ret %struct.eh_landing_pad_d* %9, !dbg !3939
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_eh_handler(%struct.eh_region_d* %region) #0 !dbg !3943 {
entry:
  %region.addr = alloca %struct.eh_region_d*, align 8
  %pp = alloca %struct.eh_region_d**, align 8
  %pp_start = alloca %struct.eh_region_d**, align 8
  %p = alloca %struct.eh_region_d*, align 8
  %outer = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %pp, metadata !3948, metadata !DIExpression()), !dbg !3949
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %pp_start, metadata !3950, metadata !DIExpression()), !dbg !3951
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %p, metadata !3952, metadata !DIExpression()), !dbg !3953
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer, metadata !3954, metadata !DIExpression()), !dbg !3955
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !3956, metadata !DIExpression()), !dbg !3957
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !3958
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 6, !dbg !3960
  %1 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !3960
  store %struct.eh_landing_pad_d* %1, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3961
  br label %for.cond, !dbg !3962

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3963
  %tobool = icmp ne %struct.eh_landing_pad_d* %2, null, !dbg !3965
  br i1 %tobool, label %for.body, label %for.end, !dbg !3965

for.body:                                         ; preds = %for.cond
  %3 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3966
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %3, i32 0, i32 2, !dbg !3969
  %4 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !3969
  %tobool1 = icmp ne %union.tree_node* %4, null, !dbg !3966
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3970

if.then:                                          ; preds = %for.body
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3971
  %post_landing_pad2 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %5, i32 0, i32 2, !dbg !3971
  %6 = load %union.tree_node*, %union.tree_node** %post_landing_pad2, align 8, !dbg !3971
  %label_decl = bitcast %union.tree_node* %6 to %struct.tree_label_decl*, !dbg !3971
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !3971
  store i32 0, i32* %eh_landing_pad_nr, align 4, !dbg !3972
  br label %if.end, !dbg !3971

if.end:                                           ; preds = %if.then, %for.body
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3973
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3973
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !3973
  %8 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3973
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %8, i32 0, i32 2, !dbg !3973
  %9 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !3973
  %tobool3 = icmp ne %struct.VEC_eh_landing_pad_gc* %9, null, !dbg !3973
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3973

cond.true:                                        ; preds = %if.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3973
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3973
  %eh5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 0, !dbg !3973
  %11 = load %struct.eh_status*, %struct.eh_status** %eh5, align 8, !dbg !3973
  %lp_array6 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %11, i32 0, i32 2, !dbg !3973
  %12 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array6, align 8, !dbg !3973
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %12, i32 0, i32 0, !dbg !3973
  br label %cond.end, !dbg !3973

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3973

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3973
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3973
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %13, i32 0, i32 4, !dbg !3973
  %14 = load i32, i32* %index, align 8, !dbg !3973
  %call = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_replace(%struct.VEC_eh_landing_pad_base* %cond, i32 %14, %struct.eh_landing_pad_d* null), !dbg !3973
  br label %for.inc, !dbg !3974

for.inc:                                          ; preds = %cond.end
  %15 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3975
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %15, i32 0, i32 0, !dbg !3976
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !3976
  store %struct.eh_landing_pad_d* %16, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3977
  br label %for.cond, !dbg !3978, !llvm.loop !3979

for.end:                                          ; preds = %for.cond
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !3981
  %outer7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 0, !dbg !3982
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %outer7, align 8, !dbg !3982
  store %struct.eh_region_d* %18, %struct.eh_region_d** %outer, align 8, !dbg !3983
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !3984
  %tobool8 = icmp ne %struct.eh_region_d* %19, null, !dbg !3984
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !3986

if.then9:                                         ; preds = %for.end
  %20 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !3987
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %20, i32 0, i32 1, !dbg !3988
  store %struct.eh_region_d** %inner, %struct.eh_region_d*** %pp_start, align 8, !dbg !3989
  br label %if.end12, !dbg !3990

if.else:                                          ; preds = %for.end
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3991
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !3991
  %eh11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 0, !dbg !3992
  %22 = load %struct.eh_status*, %struct.eh_status** %eh11, align 8, !dbg !3992
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %22, i32 0, i32 0, !dbg !3993
  store %struct.eh_region_d** %region_tree, %struct.eh_region_d*** %pp_start, align 8, !dbg !3994
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then9
  %23 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp_start, align 8, !dbg !3995
  store %struct.eh_region_d** %23, %struct.eh_region_d*** %pp, align 8, !dbg !3997
  %24 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp, align 8, !dbg !3998
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %24, align 8, !dbg !3999
  store %struct.eh_region_d* %25, %struct.eh_region_d** %p, align 8, !dbg !4000
  br label %for.cond13, !dbg !4001

for.cond13:                                       ; preds = %for.inc15, %if.end12
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %p, align 8, !dbg !4002
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !4004
  %cmp = icmp ne %struct.eh_region_d* %26, %27, !dbg !4005
  br i1 %cmp, label %for.body14, label %for.end16, !dbg !4006

for.body14:                                       ; preds = %for.cond13
  br label %for.inc15, !dbg !4007

for.inc15:                                        ; preds = %for.body14
  %28 = load %struct.eh_region_d*, %struct.eh_region_d** %p, align 8, !dbg !4008
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %28, i32 0, i32 2, !dbg !4009
  store %struct.eh_region_d** %next_peer, %struct.eh_region_d*** %pp, align 8, !dbg !4010
  %29 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp, align 8, !dbg !4011
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %29, align 8, !dbg !4012
  store %struct.eh_region_d* %30, %struct.eh_region_d** %p, align 8, !dbg !4013
  br label %for.cond13, !dbg !4014, !llvm.loop !4015

for.end16:                                        ; preds = %for.cond13
  %31 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !4017
  %inner17 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %31, i32 0, i32 1, !dbg !4019
  %32 = load %struct.eh_region_d*, %struct.eh_region_d** %inner17, align 8, !dbg !4019
  %tobool18 = icmp ne %struct.eh_region_d* %32, null, !dbg !4017
  br i1 %tobool18, label %if.then19, label %if.end24, !dbg !4020

if.then19:                                        ; preds = %for.end16
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !4021
  %inner20 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %33, i32 0, i32 1, !dbg !4023
  %34 = load %struct.eh_region_d*, %struct.eh_region_d** %inner20, align 8, !dbg !4023
  store %struct.eh_region_d* %34, %struct.eh_region_d** %p, align 8, !dbg !4024
  %35 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp, align 8, !dbg !4025
  store %struct.eh_region_d* %34, %struct.eh_region_d** %35, align 8, !dbg !4026
  br label %do.body, !dbg !4027

do.body:                                          ; preds = %do.cond, %if.then19
  %36 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !4028
  %37 = load %struct.eh_region_d*, %struct.eh_region_d** %p, align 8, !dbg !4030
  %outer21 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %37, i32 0, i32 0, !dbg !4031
  store %struct.eh_region_d* %36, %struct.eh_region_d** %outer21, align 8, !dbg !4032
  %38 = load %struct.eh_region_d*, %struct.eh_region_d** %p, align 8, !dbg !4033
  %next_peer22 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %38, i32 0, i32 2, !dbg !4034
  store %struct.eh_region_d** %next_peer22, %struct.eh_region_d*** %pp, align 8, !dbg !4035
  %39 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp, align 8, !dbg !4036
  %40 = load %struct.eh_region_d*, %struct.eh_region_d** %39, align 8, !dbg !4037
  store %struct.eh_region_d* %40, %struct.eh_region_d** %p, align 8, !dbg !4038
  br label %do.cond, !dbg !4039

do.cond:                                          ; preds = %do.body
  %41 = load %struct.eh_region_d*, %struct.eh_region_d** %p, align 8, !dbg !4040
  %tobool23 = icmp ne %struct.eh_region_d* %41, null, !dbg !4039
  br i1 %tobool23, label %do.body, label %do.end, !dbg !4039, !llvm.loop !4041

do.end:                                           ; preds = %do.cond
  br label %if.end24, !dbg !4043

if.end24:                                         ; preds = %do.end, %for.end16
  %42 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !4044
  %next_peer25 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %42, i32 0, i32 2, !dbg !4045
  %43 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer25, align 8, !dbg !4045
  %44 = load %struct.eh_region_d**, %struct.eh_region_d*** %pp, align 8, !dbg !4046
  store %struct.eh_region_d* %43, %struct.eh_region_d** %44, align 8, !dbg !4047
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4048
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !4048
  %eh27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 0, !dbg !4048
  %46 = load %struct.eh_status*, %struct.eh_status** %eh27, align 8, !dbg !4048
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %46, i32 0, i32 1, !dbg !4048
  %47 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !4048
  %tobool28 = icmp ne %struct.VEC_eh_region_gc* %47, null, !dbg !4048
  br i1 %tobool28, label %cond.true29, label %cond.false34, !dbg !4048

cond.true29:                                      ; preds = %if.end24
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4048
  %add.ptr30 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !4048
  %eh31 = getelementptr inbounds %struct.function, %struct.function* %add.ptr30, i32 0, i32 0, !dbg !4048
  %49 = load %struct.eh_status*, %struct.eh_status** %eh31, align 8, !dbg !4048
  %region_array32 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %49, i32 0, i32 1, !dbg !4048
  %50 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array32, align 8, !dbg !4048
  %base33 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %50, i32 0, i32 0, !dbg !4048
  br label %cond.end35, !dbg !4048

cond.false34:                                     ; preds = %if.end24
  br label %cond.end35, !dbg !4048

cond.end35:                                       ; preds = %cond.false34, %cond.true29
  %cond36 = phi %struct.VEC_eh_region_base* [ %base33, %cond.true29 ], [ null, %cond.false34 ], !dbg !4048
  %51 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !4048
  %index37 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %51, i32 0, i32 3, !dbg !4048
  %52 = load i32, i32* %index37, align 8, !dbg !4048
  %call38 = call %struct.eh_region_d* @VEC_eh_region_base_replace(%struct.VEC_eh_region_base* %cond36, i32 %52, %struct.eh_region_d* null), !dbg !4048
  ret void, !dbg !4049
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @VEC_eh_region_base_replace(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d* %obj_) #0 !dbg !4050 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.eh_region_d*, align 8
  %old_obj_ = alloca %struct.eh_region_d*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !4054, metadata !DIExpression()), !dbg !4055
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4056, metadata !DIExpression()), !dbg !4055
  store %struct.eh_region_d* %obj_, %struct.eh_region_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %obj_.addr, metadata !4057, metadata !DIExpression()), !dbg !4055
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_obj_, metadata !4058, metadata !DIExpression()), !dbg !4055
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4055
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4055
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !4055
  %2 = load i32, i32* %num, align 8, !dbg !4055
  %cmp = icmp ult i32 %0, %2, !dbg !4055
  %conv = zext i1 %cmp to i32, !dbg !4055
  %3 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4055
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %3, i32 0, i32 2, !dbg !4055
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4055
  %idxprom = zext i32 %4 to i64, !dbg !4055
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !4055
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !4055
  store %struct.eh_region_d* %5, %struct.eh_region_d** %old_obj_, align 8, !dbg !4055
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %obj_.addr, align 8, !dbg !4055
  %7 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4055
  %vec1 = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %7, i32 0, i32 2, !dbg !4055
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4055
  %idxprom2 = zext i32 %8 to i64, !dbg !4055
  %arrayidx3 = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !4055
  store %struct.eh_region_d* %6, %struct.eh_region_d** %arrayidx3, align 8, !dbg !4055
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %old_obj_, align 8, !dbg !4055
  ret %struct.eh_region_d* %9, !dbg !4055
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @for_each_eh_label(void (%struct.rtx_def*)* %callback) #0 !dbg !4059 {
entry:
  %callback.addr = alloca void (%struct.rtx_def*)*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %i = alloca i32, align 4
  %lab = alloca %struct.rtx_def*, align 8
  store void (%struct.rtx_def*)* %callback, void (%struct.rtx_def*)** %callback.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.rtx_def*)** %callback.addr, metadata !4063, metadata !DIExpression()), !dbg !4064
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4065, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4067, metadata !DIExpression()), !dbg !4068
  store i32 1, i32* %i, align 4, !dbg !4069
  br label %for.cond, !dbg !4071

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4072
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4072
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4072
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4072
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 2, !dbg !4072
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !4072
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !4072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4072

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4072
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4072
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !4072
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !4072
  %lp_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !4072
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array3, align 8, !dbg !4072
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %5, i32 0, i32 0, !dbg !4072
  br label %cond.end, !dbg !4072

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4072
  %6 = load i32, i32* %i, align 4, !dbg !4072
  %call = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond, i32 %6, %struct.eh_landing_pad_d** %lp), !dbg !4072
  %tobool4 = icmp ne i32 %call, 0, !dbg !4074
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4074

for.body:                                         ; preds = %cond.end
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4075
  %tobool5 = icmp ne %struct.eh_landing_pad_d* %7, null, !dbg !4075
  br i1 %tobool5, label %if.then, label %if.end8, !dbg !4078

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab, metadata !4079, metadata !DIExpression()), !dbg !4081
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4082
  %landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %8, i32 0, i32 3, !dbg !4083
  %9 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !4083
  store %struct.rtx_def* %9, %struct.rtx_def** %lab, align 8, !dbg !4081
  %10 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !4084
  %tobool6 = icmp ne %struct.rtx_def* %10, null, !dbg !4084
  br i1 %tobool6, label %land.lhs.true, label %if.end, !dbg !4086

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !4087
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4087
  %bf.load = load i32, i32* %12, align 8, !dbg !4087
  %bf.clear = and i32 %bf.load, 65535, !dbg !4087
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !4087
  br i1 %cmp, label %if.then7, label %if.end, !dbg !4088

if.then7:                                         ; preds = %land.lhs.true
  %13 = load void (%struct.rtx_def*)*, void (%struct.rtx_def*)** %callback.addr, align 8, !dbg !4089
  %14 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !4090
  call void %13(%struct.rtx_def* %14), !dbg !4091
  br label %if.end, !dbg !4091

if.end:                                           ; preds = %if.then7, %land.lhs.true, %if.then
  br label %if.end8, !dbg !4092

if.end8:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !4093

for.inc:                                          ; preds = %if.end8
  %15 = load i32, i32* %i, align 4, !dbg !4094
  %inc = add nsw i32 %15, 1, !dbg !4094
  store i32 %inc, i32* %i, align 4, !dbg !4094
  br label %for.cond, !dbg !4095, !llvm.loop !4096

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4098
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d** %ptr) #0 !dbg !4099 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !4102, metadata !DIExpression()), !dbg !4103
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4104, metadata !DIExpression()), !dbg !4103
  store %struct.eh_landing_pad_d** %ptr, %struct.eh_landing_pad_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %ptr.addr, metadata !4105, metadata !DIExpression()), !dbg !4103
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4106
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !4106
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4106

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4106
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4106
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !4106
  %3 = load i32, i32* %num, align 8, !dbg !4106
  %cmp = icmp ult i32 %1, %3, !dbg !4106
  br i1 %cmp, label %if.then, label %if.else, !dbg !4103

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4108
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !4108
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4108
  %idxprom = zext i32 %5 to i64, !dbg !4108
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !4108
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !4108
  %7 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !4108
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %7, align 8, !dbg !4108
  store i32 1, i32* %retval, align 4, !dbg !4108
  br label %return, !dbg !4108

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !4110
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %8, align 8, !dbg !4110
  store i32 0, i32* %retval, align 4, !dbg !4110
  br label %return, !dbg !4110

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4103
  ret i32 %9, !dbg !4103
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_reg_eh_region_note(%struct.rtx_def* %insn, i32 %ecf_flags, i32 %lp_nr) #0 !dbg !4112 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %ecf_flags.addr = alloca i32, align 4
  %lp_nr.addr = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4115, metadata !DIExpression()), !dbg !4116
  store i32 %ecf_flags, i32* %ecf_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ecf_flags.addr, metadata !4117, metadata !DIExpression()), !dbg !4118
  store i32 %lp_nr, i32* %lp_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lp_nr.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !4121, metadata !DIExpression()), !dbg !4122
  %0 = load i32, i32* %ecf_flags.addr, align 4, !dbg !4123
  %and = and i32 %0, 64, !dbg !4125
  %tobool = icmp ne i32 %and, 0, !dbg !4125
  br i1 %tobool, label %if.then, label %if.else, !dbg !4126

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4127
  store %struct.rtx_def* %1, %struct.rtx_def** %value, align 8, !dbg !4128
  br label %if.end3, !dbg !4129

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %lp_nr.addr, align 4, !dbg !4130
  %cmp = icmp ne i32 %2, 0, !dbg !4132
  br i1 %cmp, label %if.then1, label %if.else2, !dbg !4133

if.then1:                                         ; preds = %if.else
  %3 = load i32, i32* %lp_nr.addr, align 4, !dbg !4134
  %conv = sext i32 %3 to i64, !dbg !4134
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !4134
  store %struct.rtx_def* %call, %struct.rtx_def** %value, align 8, !dbg !4135
  br label %if.end, !dbg !4136

if.else2:                                         ; preds = %if.else
  br label %return, !dbg !4137

if.end:                                           ; preds = %if.then1
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4138
  %5 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !4139
  call void @add_reg_note(%struct.rtx_def* %4, i32 25, %struct.rtx_def* %5), !dbg !4140
  br label %return, !dbg !4141

return:                                           ; preds = %if.end3, %if.else2
  ret void, !dbg !4141
}

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_reg_eh_region_note_nothrow_nononlocal(%struct.rtx_def* %insn) #0 !dbg !4142 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %intmin = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4143, metadata !DIExpression()), !dbg !4144
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4145, metadata !DIExpression()), !dbg !4146
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4147
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 25, %struct.rtx_def* null), !dbg !4148
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4146
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %intmin, metadata !4149, metadata !DIExpression()), !dbg !4150
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -2147483648), !dbg !4151
  store %struct.rtx_def* %call1, %struct.rtx_def** %intmin, align 8, !dbg !4150
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4152
  %cmp = icmp ne %struct.rtx_def* %1, null, !dbg !4154
  br i1 %cmp, label %if.then, label %if.else, !dbg !4155

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %intmin, align 8, !dbg !4156
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4157
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4157
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4157
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4157
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4157
  store %struct.rtx_def* %2, %struct.rtx_def** %rt_rtx, align 8, !dbg !4158
  br label %if.end, !dbg !4157

if.else:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4159
  %5 = load %struct.rtx_def*, %struct.rtx_def** %intmin, align 8, !dbg !4160
  call void @add_reg_note(%struct.rtx_def* %4, i32 25, %struct.rtx_def* %5), !dbg !4161
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4162
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @insn_could_throw_p(%struct.rtx_def* %insn) #0 !dbg !4163 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4171
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4171
  %bf.load = load i32, i32* %1, align 8, !dbg !4171
  %bf.clear = and i32 %bf.load, 65535, !dbg !4171
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !4171
  br i1 %cmp, label %if.then, label %if.end, !dbg !4173

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4174
  br label %return, !dbg !4174

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4175
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4175
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4175
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4175
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !4175
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false, !dbg !4175

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4175
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4175
  %bf.load4 = load i32, i32* %5, align 8, !dbg !4175
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !4175
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !4175
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false7, !dbg !4175

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4175
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4175
  %bf.load8 = load i32, i32* %7, align 8, !dbg !4175
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !4175
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !4175
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !4175

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4175
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4175
  %bf.load12 = load i32, i32* %9, align 8, !dbg !4175
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4175
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !4175
  br i1 %cmp14, label %land.lhs.true, label %if.end16, !dbg !4177

land.lhs.true:                                    ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %if.end
  %10 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !4178
  %tobool = icmp ne i32 %10, 0, !dbg !4178
  br i1 %tobool, label %if.then15, label %if.end16, !dbg !4179

if.then15:                                        ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4180
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4180
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4180
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4180
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4180
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4180
  %call = call i32 @may_trap_p(%struct.rtx_def* %12), !dbg !4181
  %conv = trunc i32 %call to i8, !dbg !4181
  store i8 %conv, i8* %retval, align 1, !dbg !4182
  br label %return, !dbg !4182

if.end16:                                         ; preds = %land.lhs.true, %lor.lhs.false11
  store i8 0, i8* %retval, align 1, !dbg !4183
  br label %return, !dbg !4183

return:                                           ; preds = %if.end16, %if.then15, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !4184
  ret i8 %13, !dbg !4184
}

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_reg_eh_region_note_forward(%struct.rtx_def* %note_or_insn, %struct.rtx_def* %first, %struct.rtx_def* %last) #0 !dbg !4185 {
entry:
  %note_or_insn.addr = alloca %struct.rtx_def*, align 8
  %first.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %note_or_insn, %struct.rtx_def** %note_or_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note_or_insn.addr, metadata !4188, metadata !DIExpression()), !dbg !4189
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !4190, metadata !DIExpression()), !dbg !4191
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !4192, metadata !DIExpression()), !dbg !4193
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4194, metadata !DIExpression()), !dbg !4195
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4196, metadata !DIExpression()), !dbg !4197
  %0 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4198
  store %struct.rtx_def* %0, %struct.rtx_def** %note, align 8, !dbg !4197
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4199
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4199
  %bf.load = load i32, i32* %2, align 8, !dbg !4199
  %bf.clear = and i32 %bf.load, 65535, !dbg !4199
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4199
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4199

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4199
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4199
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4199
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4199
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4199
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !4199

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4199
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4199
  %bf.load5 = load i32, i32* %6, align 8, !dbg !4199
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4199
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4199
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !4199

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4199
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4199
  %bf.load9 = load i32, i32* %8, align 8, !dbg !4199
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4199
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4199
  br i1 %cmp11, label %if.then, label %if.end14, !dbg !4201

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4202
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 25, %struct.rtx_def* null), !dbg !4204
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4205
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4206
  %cmp12 = icmp eq %struct.rtx_def* %10, null, !dbg !4208
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !4209

if.then13:                                        ; preds = %if.then
  br label %for.end, !dbg !4210

if.end:                                           ; preds = %if.then
  br label %if.end14, !dbg !4211

if.end14:                                         ; preds = %if.end, %lor.lhs.false8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4212
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4212
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4212
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4212
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4212
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4212
  store %struct.rtx_def* %12, %struct.rtx_def** %note, align 8, !dbg !4213
  %13 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !4214
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !4216
  br label %for.cond, !dbg !4217

for.cond:                                         ; preds = %for.inc, %if.end14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4218
  %15 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !4220
  %cmp15 = icmp ne %struct.rtx_def* %14, %15, !dbg !4221
  br i1 %cmp15, label %for.body, label %for.end, !dbg !4222

for.body:                                         ; preds = %for.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4223
  %call16 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %16, i32 25, %struct.rtx_def* null), !dbg !4225
  %tobool = icmp ne %struct.rtx_def* %call16, null, !dbg !4225
  br i1 %tobool, label %if.end20, label %land.lhs.true, !dbg !4226

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4227
  %call17 = call zeroext i8 @insn_could_throw_p(%struct.rtx_def* %17), !dbg !4228
  %conv = zext i8 %call17 to i32, !dbg !4228
  %tobool18 = icmp ne i32 %conv, 0, !dbg !4228
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !4229

if.then19:                                        ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4230
  %19 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4231
  call void @add_reg_note(%struct.rtx_def* %18, i32 25, %struct.rtx_def* %19), !dbg !4232
  br label %if.end20, !dbg !4232

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4233

for.inc:                                          ; preds = %if.end20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4234
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4234
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !4234
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 2, !dbg !4234
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !4234
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !4234
  store %struct.rtx_def* %21, %struct.rtx_def** %insn, align 8, !dbg !4235
  br label %for.cond, !dbg !4236, !llvm.loop !4237

for.end:                                          ; preds = %if.then13, %for.cond
  ret void, !dbg !4239
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_reg_eh_region_note_backward(%struct.rtx_def* %note_or_insn, %struct.rtx_def* %last, %struct.rtx_def* %first) #0 !dbg !4240 {
entry:
  %note_or_insn.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %first.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %note_or_insn, %struct.rtx_def** %note_or_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note_or_insn.addr, metadata !4241, metadata !DIExpression()), !dbg !4242
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !4243, metadata !DIExpression()), !dbg !4244
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first.addr, metadata !4245, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4247, metadata !DIExpression()), !dbg !4248
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4249, metadata !DIExpression()), !dbg !4250
  %0 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4251
  store %struct.rtx_def* %0, %struct.rtx_def** %note, align 8, !dbg !4250
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4252
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4252
  %bf.load = load i32, i32* %2, align 8, !dbg !4252
  %bf.clear = and i32 %bf.load, 65535, !dbg !4252
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4252
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4252

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4252
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4252
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4252
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4252
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4252
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !4252

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4252
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4252
  %bf.load5 = load i32, i32* %6, align 8, !dbg !4252
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4252
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4252
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !4252

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4252
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4252
  %bf.load9 = load i32, i32* %8, align 8, !dbg !4252
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4252
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4252
  br i1 %cmp11, label %if.then, label %if.end14, !dbg !4254

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note_or_insn.addr, align 8, !dbg !4255
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 25, %struct.rtx_def* null), !dbg !4257
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4258
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4259
  %cmp12 = icmp eq %struct.rtx_def* %10, null, !dbg !4261
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !4262

if.then13:                                        ; preds = %if.then
  br label %for.end, !dbg !4263

if.end:                                           ; preds = %if.then
  br label %if.end14, !dbg !4264

if.end14:                                         ; preds = %if.end, %lor.lhs.false8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4265
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4265
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4265
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4265
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4265
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4265
  store %struct.rtx_def* %12, %struct.rtx_def** %note, align 8, !dbg !4266
  %13 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !4267
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !4269
  br label %for.cond, !dbg !4270

for.cond:                                         ; preds = %for.inc, %if.end14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4271
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8, !dbg !4273
  %cmp15 = icmp ne %struct.rtx_def* %14, %15, !dbg !4274
  br i1 %cmp15, label %for.body, label %for.end, !dbg !4275

for.body:                                         ; preds = %for.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4276
  %call16 = call zeroext i8 @insn_could_throw_p(%struct.rtx_def* %16), !dbg !4278
  %tobool = icmp ne i8 %call16, 0, !dbg !4278
  br i1 %tobool, label %if.then17, label %if.end18, !dbg !4279

if.then17:                                        ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4280
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4281
  call void @add_reg_note(%struct.rtx_def* %17, i32 25, %struct.rtx_def* %18), !dbg !4282
  br label %if.end18, !dbg !4282

if.end18:                                         ; preds = %if.then17, %for.body
  br label %for.inc, !dbg !4283

for.inc:                                          ; preds = %if.end18
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4284
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4284
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4284
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !4284
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4284
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4284
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8, !dbg !4285
  br label %for.cond, !dbg !4286, !llvm.loop !4287

for.end:                                          ; preds = %if.then13, %for.cond
  ret void, !dbg !4289
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_landing_pad_d* @get_eh_landing_pad_from_rtx(%struct.rtx_def* %insn) #0 !dbg !4290 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4293, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4295, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4297, metadata !DIExpression()), !dbg !4298
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4299
  %call = call zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %0, %struct.eh_region_d** %r, %struct.eh_landing_pad_d** %lp), !dbg !4300
  %1 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4301
  ret %struct.eh_landing_pad_d* %1, !dbg !4302
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %insn, %struct.eh_region_d** %pr, %struct.eh_landing_pad_d** %plp) #0 !dbg !4303 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %pr.addr = alloca %struct.eh_region_d**, align 8
  %plp.addr = alloca %struct.eh_landing_pad_d**, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %ret = alloca i8, align 1
  %note = alloca %struct.rtx_def*, align 8
  %lp_nr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4306, metadata !DIExpression()), !dbg !4307
  store %struct.eh_region_d** %pr, %struct.eh_region_d*** %pr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %pr.addr, metadata !4308, metadata !DIExpression()), !dbg !4309
  store %struct.eh_landing_pad_d** %plp, %struct.eh_landing_pad_d*** %plp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %plp.addr, metadata !4310, metadata !DIExpression()), !dbg !4311
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4312, metadata !DIExpression()), !dbg !4313
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4313
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4314, metadata !DIExpression()), !dbg !4315
  store %struct.eh_region_d* null, %struct.eh_region_d** %r, align 8, !dbg !4315
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !4316, metadata !DIExpression()), !dbg !4317
  store i8 0, i8* %ret, align 1, !dbg !4317
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4318, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4320, metadata !DIExpression()), !dbg !4321
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4322
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4322
  %bf.load = load i32, i32* %1, align 8, !dbg !4322
  %bf.clear = and i32 %bf.load, 65535, !dbg !4322
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4322
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4322

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4322
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4322
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4322
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4322
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4322
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !4322

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4322
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4322
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4322
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4322
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4322
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !4322

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4322
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4322
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4322
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4322
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4322
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4324

if.then:                                          ; preds = %lor.lhs.false8
  br label %egress, !dbg !4325

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4326
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4326
  %bf.load12 = load i32, i32* %9, align 8, !dbg !4326
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4326
  %cmp14 = icmp eq i32 %bf.clear13, 8, !dbg !4326
  br i1 %cmp14, label %land.lhs.true, label %if.end27, !dbg !4328

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4329
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4329
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4329
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4329
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4329
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4329
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4329
  %bf.load15 = load i32, i32* %12, align 8, !dbg !4329
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !4329
  %cmp17 = icmp eq i32 %bf.clear16, 5, !dbg !4330
  br i1 %cmp17, label %if.then18, label %if.end27, !dbg !4331

if.then18:                                        ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4332
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4332
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4332
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !4332
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4332
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4332
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4332
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !4332
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !4332
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtvec_def**, !dbg !4332
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4332
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 1, !dbg !4332
  %arrayidx26 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !4332
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8, !dbg !4332
  store %struct.rtx_def* %16, %struct.rtx_def** %insn.addr, align 8, !dbg !4333
  br label %if.end27, !dbg !4334

if.end27:                                         ; preds = %if.then18, %land.lhs.true, %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4335
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %17, i32 25, %struct.rtx_def* null), !dbg !4336
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4337
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4338
  %tobool = icmp ne %struct.rtx_def* %18, null, !dbg !4338
  br i1 %tobool, label %if.end31, label %if.then28, !dbg !4340

if.then28:                                        ; preds = %if.end27
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4341
  %call29 = call zeroext i8 @insn_could_throw_p(%struct.rtx_def* %19), !dbg !4343
  %tobool30 = icmp ne i8 %call29, 0, !dbg !4344
  %lnot = xor i1 %tobool30, true, !dbg !4344
  %lnot.ext = zext i1 %lnot to i32, !dbg !4344
  %conv = trunc i32 %lnot.ext to i8, !dbg !4344
  store i8 %conv, i8* %ret, align 1, !dbg !4345
  br label %egress, !dbg !4346

if.end31:                                         ; preds = %if.end27
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4347
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4347
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4347
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !4347
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !4347
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !4347
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4347
  %hwint = bitcast %union.u* %u36 to [1 x i64]*, !dbg !4347
  %arrayidx37 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4347
  %22 = load i64, i64* %arrayidx37, align 8, !dbg !4347
  %conv38 = trunc i64 %22 to i32, !dbg !4347
  store i32 %conv38, i32* %lp_nr, align 4, !dbg !4348
  %23 = load i32, i32* %lp_nr, align 4, !dbg !4349
  %cmp39 = icmp eq i32 %23, 0, !dbg !4351
  br i1 %cmp39, label %if.then44, label %lor.lhs.false41, !dbg !4352

lor.lhs.false41:                                  ; preds = %if.end31
  %24 = load i32, i32* %lp_nr, align 4, !dbg !4353
  %cmp42 = icmp eq i32 %24, -2147483648, !dbg !4354
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !4355

if.then44:                                        ; preds = %lor.lhs.false41, %if.end31
  store i8 1, i8* %ret, align 1, !dbg !4356
  br label %egress, !dbg !4358

if.end45:                                         ; preds = %lor.lhs.false41
  %25 = load i32, i32* %lp_nr, align 4, !dbg !4359
  %cmp46 = icmp slt i32 %25, 0, !dbg !4361
  br i1 %cmp46, label %if.then48, label %if.else, !dbg !4362

if.then48:                                        ; preds = %if.end45
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4363
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !4363
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4363
  %27 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4363
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %27, i32 0, i32 1, !dbg !4363
  %28 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !4363
  %tobool49 = icmp ne %struct.VEC_eh_region_gc* %28, null, !dbg !4363
  br i1 %tobool49, label %cond.true, label %cond.false, !dbg !4363

cond.true:                                        ; preds = %if.then48
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4363
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !4363
  %eh51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 0, !dbg !4363
  %30 = load %struct.eh_status*, %struct.eh_status** %eh51, align 8, !dbg !4363
  %region_array52 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %30, i32 0, i32 1, !dbg !4363
  %31 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array52, align 8, !dbg !4363
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %31, i32 0, i32 0, !dbg !4363
  br label %cond.end, !dbg !4363

cond.false:                                       ; preds = %if.then48
  br label %cond.end, !dbg !4363

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4363
  %32 = load i32, i32* %lp_nr, align 4, !dbg !4363
  %sub = sub nsw i32 0, %32, !dbg !4363
  %call53 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond, i32 %sub), !dbg !4363
  store %struct.eh_region_d* %call53, %struct.eh_region_d** %r, align 8, !dbg !4364
  br label %if.end66, !dbg !4365

if.else:                                          ; preds = %if.end45
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4366
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !4366
  %eh55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 0, !dbg !4366
  %34 = load %struct.eh_status*, %struct.eh_status** %eh55, align 8, !dbg !4366
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %34, i32 0, i32 2, !dbg !4366
  %35 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !4366
  %tobool56 = icmp ne %struct.VEC_eh_landing_pad_gc* %35, null, !dbg !4366
  br i1 %tobool56, label %cond.true57, label %cond.false62, !dbg !4366

cond.true57:                                      ; preds = %if.else
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4366
  %add.ptr58 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !4366
  %eh59 = getelementptr inbounds %struct.function, %struct.function* %add.ptr58, i32 0, i32 0, !dbg !4366
  %37 = load %struct.eh_status*, %struct.eh_status** %eh59, align 8, !dbg !4366
  %lp_array60 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %37, i32 0, i32 2, !dbg !4366
  %38 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array60, align 8, !dbg !4366
  %base61 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %38, i32 0, i32 0, !dbg !4366
  br label %cond.end63, !dbg !4366

cond.false62:                                     ; preds = %if.else
  br label %cond.end63, !dbg !4366

cond.end63:                                       ; preds = %cond.false62, %cond.true57
  %cond64 = phi %struct.VEC_eh_landing_pad_base* [ %base61, %cond.true57 ], [ null, %cond.false62 ], !dbg !4366
  %39 = load i32, i32* %lp_nr, align 4, !dbg !4366
  %call65 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond64, i32 %39), !dbg !4366
  store %struct.eh_landing_pad_d* %call65, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4368
  %40 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4369
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %40, i32 0, i32 1, !dbg !4370
  %41 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4370
  store %struct.eh_region_d* %41, %struct.eh_region_d** %r, align 8, !dbg !4371
  br label %if.end66

if.end66:                                         ; preds = %cond.end63, %cond.end
  br label %egress, !dbg !4372

egress:                                           ; preds = %if.end66, %if.then44, %if.then28, %if.then
  call void @llvm.dbg.label(metadata !4373), !dbg !4374
  %42 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4375
  %43 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %plp.addr, align 8, !dbg !4376
  store %struct.eh_landing_pad_d* %42, %struct.eh_landing_pad_d** %43, align 8, !dbg !4377
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4378
  %45 = load %struct.eh_region_d**, %struct.eh_region_d*** %pr.addr, align 8, !dbg !4379
  store %struct.eh_region_d* %44, %struct.eh_region_d** %45, align 8, !dbg !4380
  %46 = load i8, i8* %ret, align 1, !dbg !4381
  ret i8 %46, !dbg !4382
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.eh_region_d* @get_eh_region_from_rtx(%struct.rtx_def* %insn) #0 !dbg !4383 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4386, metadata !DIExpression()), !dbg !4387
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4388, metadata !DIExpression()), !dbg !4389
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4390, metadata !DIExpression()), !dbg !4391
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4392
  %call = call zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %0, %struct.eh_region_d** %r, %struct.eh_landing_pad_d** %lp), !dbg !4393
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4394
  ret %struct.eh_region_d* %1, !dbg !4395
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_throw_internal(%struct.rtx_def* %insn) #0 !dbg !4396 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4397, metadata !DIExpression()), !dbg !4398
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4399
  %call = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_rtx(%struct.rtx_def* %0), !dbg !4400
  %cmp = icmp ne %struct.eh_landing_pad_d* %call, null, !dbg !4401
  %conv = zext i1 %cmp to i32, !dbg !4401
  %conv1 = trunc i32 %conv to i8, !dbg !4400
  ret i8 %conv1, !dbg !4402
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_throw_external(%struct.rtx_def* %insn) #0 !dbg !4403 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %nothrow = alloca i8, align 1
  %seq = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4404, metadata !DIExpression()), !dbg !4405
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4406, metadata !DIExpression()), !dbg !4407
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4408, metadata !DIExpression()), !dbg !4409
  call void @llvm.dbg.declare(metadata i8* %nothrow, metadata !4410, metadata !DIExpression()), !dbg !4411
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4412
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4412
  %bf.load = load i32, i32* %1, align 8, !dbg !4412
  %bf.clear = and i32 %bf.load, 65535, !dbg !4412
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4412
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4412

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4412
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4412
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4412
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4412
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4412
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !4412

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4412
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4412
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4412
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4412
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4412
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !4412

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4412
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4412
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4412
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4412
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4412
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4414

if.then:                                          ; preds = %lor.lhs.false8
  store i8 0, i8* %retval, align 1, !dbg !4415
  br label %return, !dbg !4415

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4416
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4416
  %bf.load12 = load i32, i32* %9, align 8, !dbg !4416
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4416
  %cmp14 = icmp eq i32 %bf.clear13, 8, !dbg !4416
  br i1 %cmp14, label %land.lhs.true, label %if.end34, !dbg !4418

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4419
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4419
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4419
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4419
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4419
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4419
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4419
  %bf.load15 = load i32, i32* %12, align 8, !dbg !4419
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !4419
  %cmp17 = icmp eq i32 %bf.clear16, 5, !dbg !4420
  br i1 %cmp17, label %if.then18, label %if.end34, !dbg !4421

if.then18:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4422, metadata !DIExpression()), !dbg !4424
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4425
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4425
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4425
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !4425
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4425
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4425
  store %struct.rtx_def* %14, %struct.rtx_def** %seq, align 8, !dbg !4424
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4426, metadata !DIExpression()), !dbg !4427
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4428, metadata !DIExpression()), !dbg !4429
  %15 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4430
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4430
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !4430
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !4430
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtvec_def**, !dbg !4430
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4430
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 0, !dbg !4430
  %17 = load i32, i32* %num_elem, align 8, !dbg !4430
  store i32 %17, i32* %n, align 4, !dbg !4429
  store i32 0, i32* %i, align 4, !dbg !4431
  br label %for.cond, !dbg !4433

for.cond:                                         ; preds = %for.inc, %if.then18
  %18 = load i32, i32* %i, align 4, !dbg !4434
  %19 = load i32, i32* %n, align 4, !dbg !4436
  %cmp26 = icmp slt i32 %18, %19, !dbg !4437
  br i1 %cmp26, label %for.body, label %for.end, !dbg !4438

for.body:                                         ; preds = %for.cond
  %20 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4439
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4439
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4439
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4439
  %rt_rtvec30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtvec_def**, !dbg !4439
  %21 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec30, align 8, !dbg !4439
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %21, i32 0, i32 1, !dbg !4439
  %22 = load i32, i32* %i, align 4, !dbg !4439
  %idxprom = sext i32 %22 to i64, !dbg !4439
  %arrayidx31 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !4439
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8, !dbg !4439
  %call = call zeroext i8 @can_throw_external(%struct.rtx_def* %23), !dbg !4441
  %tobool = icmp ne i8 %call, 0, !dbg !4441
  br i1 %tobool, label %if.then32, label %if.end33, !dbg !4442

if.then32:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4443
  br label %return, !dbg !4443

if.end33:                                         ; preds = %for.body
  br label %for.inc, !dbg !4444

for.inc:                                          ; preds = %if.end33
  %24 = load i32, i32* %i, align 4, !dbg !4445
  %inc = add nsw i32 %24, 1, !dbg !4445
  store i32 %inc, i32* %i, align 4, !dbg !4445
  br label %for.cond, !dbg !4446, !llvm.loop !4447

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4449
  br label %return, !dbg !4449

if.end34:                                         ; preds = %land.lhs.true, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4450
  %call35 = call zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %25, %struct.eh_region_d** %r, %struct.eh_landing_pad_d** %lp), !dbg !4451
  store i8 %call35, i8* %nothrow, align 1, !dbg !4452
  %26 = load i8, i8* %nothrow, align 1, !dbg !4453
  %tobool36 = icmp ne i8 %26, 0, !dbg !4453
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !4455

if.then37:                                        ; preds = %if.end34
  store i8 0, i8* %retval, align 1, !dbg !4456
  br label %return, !dbg !4456

if.end38:                                         ; preds = %if.end34
  %27 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4457
  %cmp39 = icmp ne %struct.eh_landing_pad_d* %27, null, !dbg !4459
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !4460

if.then40:                                        ; preds = %if.end38
  store i8 0, i8* %retval, align 1, !dbg !4461
  br label %return, !dbg !4461

if.end41:                                         ; preds = %if.end38
  %28 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4462
  %cmp42 = icmp eq %struct.eh_region_d* %28, null, !dbg !4464
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !4465

if.then43:                                        ; preds = %if.end41
  store i8 1, i8* %retval, align 1, !dbg !4466
  br label %return, !dbg !4466

if.end44:                                         ; preds = %if.end41
  %29 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4467
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %29, i32 0, i32 4, !dbg !4467
  %30 = load i32, i32* %type, align 4, !dbg !4467
  %cmp45 = icmp eq i32 %30, 3, !dbg !4467
  br i1 %cmp45, label %cond.false, label %cond.true, !dbg !4467

cond.true:                                        ; preds = %if.end44
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1796, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4467
  br label %cond.end, !dbg !4467

cond.false:                                       ; preds = %if.end44
  br label %cond.end, !dbg !4467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4467
  store i8 0, i8* %retval, align 1, !dbg !4468
  br label %return, !dbg !4468

return:                                           ; preds = %cond.end, %if.then43, %if.then40, %if.then37, %for.end, %if.then32, %if.then
  %31 = load i8, i8* %retval, align 1, !dbg !4469
  ret i8 %31, !dbg !4469
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @insn_nothrow_p(%struct.rtx_def* %insn) #0 !dbg !4470 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4473, metadata !DIExpression()), !dbg !4474
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4475, metadata !DIExpression()), !dbg !4476
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4477
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4477
  %bf.load = load i32, i32* %1, align 8, !dbg !4477
  %bf.clear = and i32 %bf.load, 65535, !dbg !4477
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4477
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4477

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4477
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4477
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4477
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4477
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4477
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !4477

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4477
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4477
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4477
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4477
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4477
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !4477

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4477
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4477
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4477
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4477
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4477
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4479

if.then:                                          ; preds = %lor.lhs.false8
  store i8 1, i8* %retval, align 1, !dbg !4480
  br label %return, !dbg !4480

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4481
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4481
  %bf.load12 = load i32, i32* %9, align 8, !dbg !4481
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4481
  %cmp14 = icmp eq i32 %bf.clear13, 8, !dbg !4481
  br i1 %cmp14, label %land.lhs.true, label %if.end34, !dbg !4483

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4484
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4484
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4484
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4484
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4484
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4484
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4484
  %bf.load15 = load i32, i32* %12, align 8, !dbg !4484
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !4484
  %cmp17 = icmp eq i32 %bf.clear16, 5, !dbg !4485
  br i1 %cmp17, label %if.then18, label %if.end34, !dbg !4486

if.then18:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4487, metadata !DIExpression()), !dbg !4489
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4490
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4490
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4490
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !4490
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4490
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4490
  store %struct.rtx_def* %14, %struct.rtx_def** %seq, align 8, !dbg !4489
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4491, metadata !DIExpression()), !dbg !4492
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4493, metadata !DIExpression()), !dbg !4494
  %15 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4495
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4495
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !4495
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !4495
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtvec_def**, !dbg !4495
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4495
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 0, !dbg !4495
  %17 = load i32, i32* %num_elem, align 8, !dbg !4495
  store i32 %17, i32* %n, align 4, !dbg !4494
  store i32 0, i32* %i, align 4, !dbg !4496
  br label %for.cond, !dbg !4498

for.cond:                                         ; preds = %for.inc, %if.then18
  %18 = load i32, i32* %i, align 4, !dbg !4499
  %19 = load i32, i32* %n, align 4, !dbg !4501
  %cmp26 = icmp slt i32 %18, %19, !dbg !4502
  br i1 %cmp26, label %for.body, label %for.end, !dbg !4503

for.body:                                         ; preds = %for.cond
  %20 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4504
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4504
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4504
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4504
  %rt_rtvec30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtvec_def**, !dbg !4504
  %21 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec30, align 8, !dbg !4504
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %21, i32 0, i32 1, !dbg !4504
  %22 = load i32, i32* %i, align 4, !dbg !4504
  %idxprom = sext i32 %22 to i64, !dbg !4504
  %arrayidx31 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !4504
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8, !dbg !4504
  %call = call zeroext i8 @insn_nothrow_p(%struct.rtx_def* %23), !dbg !4506
  %tobool = icmp ne i8 %call, 0, !dbg !4506
  br i1 %tobool, label %if.end33, label %if.then32, !dbg !4507

if.then32:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4508
  br label %return, !dbg !4508

if.end33:                                         ; preds = %for.body
  br label %for.inc, !dbg !4509

for.inc:                                          ; preds = %if.end33
  %24 = load i32, i32* %i, align 4, !dbg !4510
  %inc = add nsw i32 %24, 1, !dbg !4510
  store i32 %inc, i32* %i, align 4, !dbg !4510
  br label %for.cond, !dbg !4511, !llvm.loop !4512

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4514
  br label %return, !dbg !4514

if.end34:                                         ; preds = %land.lhs.true, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4515
  %call35 = call zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %25, %struct.eh_region_d** %r, %struct.eh_landing_pad_d** %lp), !dbg !4516
  store i8 %call35, i8* %retval, align 1, !dbg !4517
  br label %return, !dbg !4517

return:                                           ; preds = %if.end34, %for.end, %if.then32, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !4518
  ret i8 %26, !dbg !4518
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_nonlocal_goto(%struct.rtx_def* %insn) #0 !dbg !4519 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4520, metadata !DIExpression()), !dbg !4521
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 10), align 8, !dbg !4522
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !4522
  br i1 %tobool, label %land.lhs.true, label %if.end6, !dbg !4524

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4525
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4525
  %bf.load = load i32, i32* %2, align 8, !dbg !4525
  %bf.clear = and i32 %bf.load, 65535, !dbg !4525
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !4525
  br i1 %cmp, label %if.then, label %if.end6, !dbg !4526

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4527, metadata !DIExpression()), !dbg !4529
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4530
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %3, i32 25, %struct.rtx_def* null), !dbg !4531
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4529
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4532
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !4532
  br i1 %tobool1, label %lor.lhs.false, label %if.then5, !dbg !4534

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4535
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4535
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4535
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4535
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4535
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4535
  %hwint = bitcast %union.u* %u2 to [1 x i64]*, !dbg !4535
  %arrayidx3 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4535
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !4535
  %cmp4 = icmp ne i64 %7, -2147483648, !dbg !4536
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !4537

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  store i8 1, i8* %retval, align 1, !dbg !4538
  br label %return, !dbg !4538

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end6, !dbg !4539

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !4540
  br label %return, !dbg !4540

return:                                           ; preds = %if.end6, %if.then5
  %8 = load i8, i8* %retval, align 1, !dbg !4541
  ret i8 %8, !dbg !4541
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @set_nothrow_function_flags() #0 !dbg !4542 {
entry:
  %retval = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4543, metadata !DIExpression()), !dbg !4544
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 49), align 1, !dbg !4545
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 33), align 1, !dbg !4546
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4547
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4547
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4547
  %bf.load = load i64, i64* %1, align 8, !dbg !4547
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !4547
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4547
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4547
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4547
  br i1 %tobool, label %if.then, label %if.end, !dbg !4549

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4550
  br label %return, !dbg !4550

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @flag_exceptions, align 4, !dbg !4551
  %tobool1 = icmp ne i32 %2, 0, !dbg !4551
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !4553

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4554
  br label %return, !dbg !4554

if.end3:                                          ; preds = %if.end
  %call = call %struct.rtx_def* @get_insns(), !dbg !4555
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !4557
  br label %for.cond, !dbg !4558

for.cond:                                         ; preds = %for.inc, %if.end3
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4559
  %tobool4 = icmp ne %struct.rtx_def* %3, null, !dbg !4561
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4561

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4562
  %call5 = call zeroext i8 @can_throw_external(%struct.rtx_def* %4), !dbg !4564
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4564
  br i1 %tobool6, label %if.then7, label %if.end16, !dbg !4565

if.then7:                                         ; preds = %for.body
  store i8 0, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 49), align 1, !dbg !4566
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4568
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4568
  %bf.load8 = load i32, i32* %6, align 8, !dbg !4568
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !4568
  %cmp = icmp eq i32 %bf.clear9, 10, !dbg !4568
  br i1 %cmp, label %lor.lhs.false, label %if.then14, !dbg !4570

lor.lhs.false:                                    ; preds = %if.then7
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4571
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4571
  %bf.load10 = load i32, i32* %8, align 8, !dbg !4571
  %bf.lshr11 = lshr i32 %bf.load10, 24, !dbg !4571
  %bf.clear12 = and i32 %bf.lshr11, 1, !dbg !4571
  %tobool13 = icmp ne i32 %bf.clear12, 0, !dbg !4571
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !4572

if.then14:                                        ; preds = %lor.lhs.false, %if.then7
  store i8 0, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 33), align 1, !dbg !4573
  store i32 0, i32* %retval, align 4, !dbg !4575
  br label %return, !dbg !4575

if.end15:                                         ; preds = %lor.lhs.false
  br label %if.end16, !dbg !4576

if.end16:                                         ; preds = %if.end15, %for.body
  br label %for.inc, !dbg !4577

for.inc:                                          ; preds = %if.end16
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4578
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4578
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4578
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4578
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4578
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4578
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !4579
  br label %for.cond, !dbg !4580, !llvm.loop !4581

for.end:                                          ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 27), align 8, !dbg !4583
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !4585
  br label %for.cond17, !dbg !4586

for.cond17:                                       ; preds = %for.inc34, %for.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4587
  %tobool18 = icmp ne %struct.rtx_def* %12, null, !dbg !4589
  br i1 %tobool18, label %for.body19, label %for.end39, !dbg !4589

for.body19:                                       ; preds = %for.cond17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4590
  %call20 = call zeroext i8 @can_throw_external(%struct.rtx_def* %13), !dbg !4592
  %tobool21 = icmp ne i8 %call20, 0, !dbg !4592
  br i1 %tobool21, label %if.then22, label %if.end33, !dbg !4593

if.then22:                                        ; preds = %for.body19
  store i8 0, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 49), align 1, !dbg !4594
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4596
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4596
  %bf.load23 = load i32, i32* %15, align 8, !dbg !4596
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !4596
  %cmp25 = icmp eq i32 %bf.clear24, 10, !dbg !4596
  br i1 %cmp25, label %lor.lhs.false26, label %if.then31, !dbg !4598

lor.lhs.false26:                                  ; preds = %if.then22
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4599
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4599
  %bf.load27 = load i32, i32* %17, align 8, !dbg !4599
  %bf.lshr28 = lshr i32 %bf.load27, 24, !dbg !4599
  %bf.clear29 = and i32 %bf.lshr28, 1, !dbg !4599
  %tobool30 = icmp ne i32 %bf.clear29, 0, !dbg !4599
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !4600

if.then31:                                        ; preds = %lor.lhs.false26, %if.then22
  store i8 0, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 33), align 1, !dbg !4601
  store i32 0, i32* %retval, align 4, !dbg !4603
  br label %return, !dbg !4603

if.end32:                                         ; preds = %lor.lhs.false26
  br label %if.end33, !dbg !4604

if.end33:                                         ; preds = %if.end32, %for.body19
  br label %for.inc34, !dbg !4605

for.inc34:                                        ; preds = %if.end33
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4606
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4606
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !4606
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !4606
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !4606
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !4606
  store %struct.rtx_def* %19, %struct.rtx_def** %insn, align 8, !dbg !4607
  br label %for.cond17, !dbg !4608, !llvm.loop !4609

for.end39:                                        ; preds = %for.cond17
  %20 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 49), align 1, !dbg !4611
  %conv = zext i8 %20 to i32, !dbg !4613
  %tobool40 = icmp ne i32 %conv, 0, !dbg !4613
  br i1 %tobool40, label %land.lhs.true, label %if.end59, !dbg !4614

land.lhs.true:                                    ; preds = %for.end39
  %21 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4615
  %call41 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %21), !dbg !4616
  %call42 = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %call41), !dbg !4617
  %cmp43 = icmp uge i32 %call42, 3, !dbg !4618
  br i1 %cmp43, label %if.then45, label %if.end59, !dbg !4619

if.then45:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4620, metadata !DIExpression()), !dbg !4825
  %22 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4826
  %call46 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %22), !dbg !4827
  store %struct.cgraph_node* %call46, %struct.cgraph_node** %node, align 8, !dbg !4825
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4828, metadata !DIExpression()), !dbg !4829
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4830
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 2, !dbg !4832
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !4832
  store %struct.cgraph_edge* %24, %struct.cgraph_edge** %e, align 8, !dbg !4833
  br label %for.cond47, !dbg !4834

for.cond47:                                       ; preds = %for.inc52, %if.then45
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4835
  %tobool48 = icmp ne %struct.cgraph_edge* %25, null, !dbg !4837
  br i1 %tobool48, label %for.body49, label %for.end53, !dbg !4837

for.body49:                                       ; preds = %for.cond47
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4838
  %can_throw_external = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 14, !dbg !4839
  %bf.load50 = load i8, i8* %can_throw_external, align 2, !dbg !4840
  %bf.clear51 = and i8 %bf.load50, -5, !dbg !4840
  store i8 %bf.clear51, i8* %can_throw_external, align 2, !dbg !4840
  br label %for.inc52, !dbg !4838

for.inc52:                                        ; preds = %for.body49
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4841
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %27, i32 0, i32 4, !dbg !4842
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !4842
  store %struct.cgraph_edge* %28, %struct.cgraph_edge** %e, align 8, !dbg !4843
  br label %for.cond47, !dbg !4844, !llvm.loop !4845

for.end53:                                        ; preds = %for.cond47
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4847
  call void @cgraph_set_nothrow_flag(%struct.cgraph_node* %29, i8 zeroext 1), !dbg !4848
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4849
  %tobool54 = icmp ne %struct._IO_FILE* %30, null, !dbg !4849
  br i1 %tobool54, label %if.then55, label %if.end58, !dbg !4851

if.then55:                                        ; preds = %for.end53
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4852
  %call56 = call i8* @current_function_name(), !dbg !4853
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.34, i64 0, i64 0), i8* %call56), !dbg !4854
  br label %if.end58, !dbg !4854

if.end58:                                         ; preds = %if.then55, %for.end53
  br label %if.end59, !dbg !4855

if.end59:                                         ; preds = %if.end58, %land.lhs.true, %for.end39
  store i32 0, i32* %retval, align 4, !dbg !4856
  br label %return, !dbg !4856

return:                                           ; preds = %if.end59, %if.then31, %if.then14, %if.then2, %if.then
  %32 = load i32, i32* %retval, align 4, !dbg !4857
  ret i32 %32, !dbg !4857
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_eh_pointer(%union.tree_node* %exp) #0 !dbg !4858 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4861, metadata !DIExpression()), !dbg !4862
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !4863, metadata !DIExpression()), !dbg !4864
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4865
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !4865
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !4865
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !4865
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4865
  %call = call %struct.eh_region_d* @expand_builtin_eh_common(%union.tree_node* %1), !dbg !4866
  store %struct.eh_region_d* %call, %struct.eh_region_d** %region, align 8, !dbg !4864
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4867
  %exc_ptr_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 7, !dbg !4869
  %3 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg, align 8, !dbg !4869
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !4870
  br i1 %cmp, label %if.then, label %if.end, !dbg !4871

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @ptr_mode, align 4, !dbg !4872
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 %4), !dbg !4873
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4874
  %exc_ptr_reg3 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 7, !dbg !4875
  store %struct.rtx_def* %call2, %struct.rtx_def** %exc_ptr_reg3, align 8, !dbg !4876
  br label %if.end, !dbg !4874

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4877
  %exc_ptr_reg4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 7, !dbg !4878
  %7 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg4, align 8, !dbg !4878
  ret %struct.rtx_def* %7, !dbg !4879
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @expand_builtin_eh_common(%union.tree_node* %region_nr_t) #0 !dbg !4880 {
entry:
  %region_nr_t.addr = alloca %union.tree_node*, align 8
  %region_nr = alloca i64, align 8
  %region = alloca %struct.eh_region_d*, align 8
  store %union.tree_node* %region_nr_t, %union.tree_node** %region_nr_t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %region_nr_t.addr, metadata !4883, metadata !DIExpression()), !dbg !4884
  call void @llvm.dbg.declare(metadata i64* %region_nr, metadata !4885, metadata !DIExpression()), !dbg !4886
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !4887, metadata !DIExpression()), !dbg !4888
  %0 = load %union.tree_node*, %union.tree_node** %region_nr_t.addr, align 8, !dbg !4889
  %call = call i32 @host_integerp(%union.tree_node* %0, i32 0), !dbg !4889
  %tobool = icmp ne i32 %call, 0, !dbg !4889
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4889

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1941, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4889
  br label %cond.end, !dbg !4889

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4889
  %1 = load %union.tree_node*, %union.tree_node** %region_nr_t.addr, align 8, !dbg !4890
  %call1 = call i64 @tree_low_cst(%union.tree_node* %1, i32 0), !dbg !4891
  store i64 %call1, i64* %region_nr, align 8, !dbg !4892
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4893
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4893
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4893
  %3 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4893
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %3, i32 0, i32 1, !dbg !4893
  %4 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !4893
  %tobool2 = icmp ne %struct.VEC_eh_region_gc* %4, null, !dbg !4893
  br i1 %tobool2, label %cond.true3, label %cond.false7, !dbg !4893

cond.true3:                                       ; preds = %cond.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4893
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4893
  %eh5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 0, !dbg !4893
  %6 = load %struct.eh_status*, %struct.eh_status** %eh5, align 8, !dbg !4893
  %region_array6 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %6, i32 0, i32 1, !dbg !4893
  %7 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array6, align 8, !dbg !4893
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %7, i32 0, i32 0, !dbg !4893
  br label %cond.end8, !dbg !4893

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !4893

cond.end8:                                        ; preds = %cond.false7, %cond.true3
  %cond9 = phi %struct.VEC_eh_region_base* [ %base, %cond.true3 ], [ null, %cond.false7 ], !dbg !4893
  %8 = load i64, i64* %region_nr, align 8, !dbg !4893
  %conv = trunc i64 %8 to i32, !dbg !4893
  %call10 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond9, i32 %conv), !dbg !4893
  store %struct.eh_region_d* %call10, %struct.eh_region_d** %region, align 8, !dbg !4894
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4895
  %cmp = icmp ne %struct.eh_region_d* %9, null, !dbg !4895
  br i1 %cmp, label %cond.false13, label %cond.true12, !dbg !4895

cond.true12:                                      ; preds = %cond.end8
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1948, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4895
  br label %cond.end14, !dbg !4895

cond.false13:                                     ; preds = %cond.end8
  br label %cond.end14, !dbg !4895

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !4895
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4896
  ret %struct.eh_region_d* %10, !dbg !4897
}

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_eh_filter(%union.tree_node* %exp) #0 !dbg !4898 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4899, metadata !DIExpression()), !dbg !4900
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !4901, metadata !DIExpression()), !dbg !4902
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4903
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !4903
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !4903
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !4903
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4903
  %call = call %struct.eh_region_d* @expand_builtin_eh_common(%union.tree_node* %1), !dbg !4904
  store %struct.eh_region_d* %call, %struct.eh_region_d** %region, align 8, !dbg !4902
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4905
  %filter_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 8, !dbg !4907
  %3 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg, align 8, !dbg !4907
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !4908
  br i1 %cmp, label %if.then, label %if.end, !dbg !4909

if.then:                                          ; preds = %entry
  %4 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 7), align 8, !dbg !4910
  %call2 = call i32 %4(), !dbg !4911
  %call3 = call %struct.rtx_def* @gen_reg_rtx(i32 %call2), !dbg !4912
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4913
  %filter_reg4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 8, !dbg !4914
  store %struct.rtx_def* %call3, %struct.rtx_def** %filter_reg4, align 8, !dbg !4915
  br label %if.end, !dbg !4913

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !4916
  %filter_reg5 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 8, !dbg !4917
  %7 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg5, align 8, !dbg !4917
  ret %struct.rtx_def* %7, !dbg !4918
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_eh_copy_values(%union.tree_node* %exp) #0 !dbg !4919 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %dst = alloca %struct.eh_region_d*, align 8
  %src = alloca %struct.eh_region_d*, align 8
  %fmode = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4920, metadata !DIExpression()), !dbg !4921
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %dst, metadata !4922, metadata !DIExpression()), !dbg !4923
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4924
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !4924
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !4924
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !4924
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4924
  %call = call %struct.eh_region_d* @expand_builtin_eh_common(%union.tree_node* %1), !dbg !4925
  store %struct.eh_region_d* %call, %struct.eh_region_d** %dst, align 8, !dbg !4923
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %src, metadata !4926, metadata !DIExpression()), !dbg !4927
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4928
  %exp2 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !4928
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !4928
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 4, !dbg !4928
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !4928
  %call5 = call %struct.eh_region_d* @expand_builtin_eh_common(%union.tree_node* %3), !dbg !4929
  store %struct.eh_region_d* %call5, %struct.eh_region_d** %src, align 8, !dbg !4927
  call void @llvm.dbg.declare(metadata i32* %fmode, metadata !4930, metadata !DIExpression()), !dbg !4931
  %4 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 7), align 8, !dbg !4932
  %call6 = call i32 %4(), !dbg !4933
  store i32 %call6, i32* %fmode, align 4, !dbg !4931
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4934
  %exc_ptr_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 7, !dbg !4936
  %6 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg, align 8, !dbg !4936
  %cmp = icmp eq %struct.rtx_def* %6, null, !dbg !4937
  br i1 %cmp, label %if.then, label %if.end, !dbg !4938

if.then:                                          ; preds = %entry
  %7 = load i32, i32* @ptr_mode, align 4, !dbg !4939
  %call7 = call %struct.rtx_def* @gen_reg_rtx(i32 %7), !dbg !4940
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4941
  %exc_ptr_reg8 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 7, !dbg !4942
  store %struct.rtx_def* %call7, %struct.rtx_def** %exc_ptr_reg8, align 8, !dbg !4943
  br label %if.end, !dbg !4941

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4944
  %exc_ptr_reg9 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %9, i32 0, i32 7, !dbg !4946
  %10 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg9, align 8, !dbg !4946
  %cmp10 = icmp eq %struct.rtx_def* %10, null, !dbg !4947
  br i1 %cmp10, label %if.then11, label %if.end14, !dbg !4948

if.then11:                                        ; preds = %if.end
  %11 = load i32, i32* @ptr_mode, align 4, !dbg !4949
  %call12 = call %struct.rtx_def* @gen_reg_rtx(i32 %11), !dbg !4950
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4951
  %exc_ptr_reg13 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %12, i32 0, i32 7, !dbg !4952
  store %struct.rtx_def* %call12, %struct.rtx_def** %exc_ptr_reg13, align 8, !dbg !4953
  br label %if.end14, !dbg !4951

if.end14:                                         ; preds = %if.then11, %if.end
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4954
  %filter_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %13, i32 0, i32 8, !dbg !4956
  %14 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg, align 8, !dbg !4956
  %cmp15 = icmp eq %struct.rtx_def* %14, null, !dbg !4957
  br i1 %cmp15, label %if.then16, label %if.end19, !dbg !4958

if.then16:                                        ; preds = %if.end14
  %15 = load i32, i32* %fmode, align 4, !dbg !4959
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 %15), !dbg !4960
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4961
  %filter_reg18 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 8, !dbg !4962
  store %struct.rtx_def* %call17, %struct.rtx_def** %filter_reg18, align 8, !dbg !4963
  br label %if.end19, !dbg !4961

if.end19:                                         ; preds = %if.then16, %if.end14
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4964
  %filter_reg20 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 8, !dbg !4966
  %18 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg20, align 8, !dbg !4966
  %cmp21 = icmp eq %struct.rtx_def* %18, null, !dbg !4967
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !4968

if.then22:                                        ; preds = %if.end19
  %19 = load i32, i32* %fmode, align 4, !dbg !4969
  %call23 = call %struct.rtx_def* @gen_reg_rtx(i32 %19), !dbg !4970
  %20 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4971
  %filter_reg24 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %20, i32 0, i32 8, !dbg !4972
  store %struct.rtx_def* %call23, %struct.rtx_def** %filter_reg24, align 8, !dbg !4973
  br label %if.end25, !dbg !4971

if.end25:                                         ; preds = %if.then22, %if.end19
  %21 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4974
  %exc_ptr_reg26 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %21, i32 0, i32 7, !dbg !4975
  %22 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg26, align 8, !dbg !4975
  %23 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4976
  %exc_ptr_reg27 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %23, i32 0, i32 7, !dbg !4977
  %24 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg27, align 8, !dbg !4977
  %call28 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %22, %struct.rtx_def* %24), !dbg !4978
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %dst, align 8, !dbg !4979
  %filter_reg29 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %25, i32 0, i32 8, !dbg !4980
  %26 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg29, align 8, !dbg !4980
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %src, align 8, !dbg !4981
  %filter_reg30 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %27, i32 0, i32 8, !dbg !4982
  %28 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg30, align 8, !dbg !4982
  %call31 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %28), !dbg !4983
  %29 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4984
  ret %struct.rtx_def* %29, !dbg !4985
}

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_builtin_unwind_init() #0 !dbg !4986 {
entry:
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 30), align 2, !dbg !4987
  call void @ix86_setup_frame_addresses(), !dbg !4988
  ret void, !dbg !4989
}

declare dso_local void @ix86_setup_frame_addresses() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_eh_return_data_regno(%union.tree_node* %exp) #0 !dbg !4990 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %which = alloca %union.tree_node*, align 8
  %iwhich = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4991, metadata !DIExpression()), !dbg !4992
  call void @llvm.dbg.declare(metadata %union.tree_node** %which, metadata !4993, metadata !DIExpression()), !dbg !4994
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4995
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !4995
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !4995
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !4995
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4995
  store %union.tree_node* %1, %union.tree_node** %which, align 8, !dbg !4994
  call void @llvm.dbg.declare(metadata i64* %iwhich, metadata !4996, metadata !DIExpression()), !dbg !4997
  %2 = load %union.tree_node*, %union.tree_node** %which, align 8, !dbg !4998
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4998
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4998
  %bf.load = load i64, i64* %3, align 8, !dbg !4998
  %bf.clear = and i64 %bf.load, 65535, !dbg !4998
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4998
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !5000
  br i1 %cmp, label %if.then, label %if.end, !dbg !5001

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0)), !dbg !5002
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !5004
  store %struct.rtx_def* %4, %struct.rtx_def** %retval, align 8, !dbg !5005
  br label %return, !dbg !5005

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %which, align 8, !dbg !5006
  %call = call i64 @tree_low_cst(%union.tree_node* %5, i32 1), !dbg !5007
  store i64 %call, i64* %iwhich, align 8, !dbg !5008
  %6 = load i64, i64* %iwhich, align 8, !dbg !5009
  %cmp2 = icmp ult i64 %6, 2, !dbg !5009
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !5009

cond.true:                                        ; preds = %if.end
  %7 = load i64, i64* %iwhich, align 8, !dbg !5009
  br label %cond.end, !dbg !5009

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5009

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ 4294967295, %cond.false ], !dbg !5009
  store i64 %cond, i64* %iwhich, align 8, !dbg !5010
  %8 = load i64, i64* %iwhich, align 8, !dbg !5011
  %cmp3 = icmp eq i64 %8, 4294967295, !dbg !5013
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !5014

if.then4:                                         ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !5015
  store %struct.rtx_def* %9, %struct.rtx_def** %retval, align 8, !dbg !5016
  br label %return, !dbg !5016

if.end5:                                          ; preds = %cond.end
  %10 = load i64, i64* %iwhich, align 8, !dbg !5017
  %arrayidx6 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i64 0, i64 %10, !dbg !5017
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !5017
  %conv = sext i32 %11 to i64, !dbg !5017
  store i64 %conv, i64* %iwhich, align 8, !dbg !5018
  %12 = load i64, i64* %iwhich, align 8, !dbg !5019
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %12), !dbg !5019
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !5020
  br label %return, !dbg !5020

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5021
  ret %struct.rtx_def* %13, !dbg !5021
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_extract_return_addr(%union.tree_node* %addr_tree) #0 !dbg !5022 {
entry:
  %addr_tree.addr = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %addr_tree, %union.tree_node** %addr_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_tree.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  %0 = load %union.tree_node*, %union.tree_node** %addr_tree.addr, align 8, !dbg !5027
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* null, i32 16, i32 0), !dbg !5028
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8, !dbg !5026
  %1 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5029
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5029
  %bf.load = load i32, i32* %2, align 8, !dbg !5029
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5029
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5029
  %cmp = icmp ne i32 %bf.clear, 16, !dbg !5031
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5032

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5033
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5033
  %bf.load1 = load i32, i32* %4, align 8, !dbg !5033
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !5033
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !5033
  %cmp4 = icmp ne i32 %bf.clear3, 0, !dbg !5034
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5035

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5036
  %call5 = call %struct.rtx_def* @convert_to_mode(i32 16, %struct.rtx_def* %5, i32 0), !dbg !5038
  store %struct.rtx_def* %call5, %struct.rtx_def** %addr, align 8, !dbg !5039
  br label %if.end, !dbg !5040

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5041
  ret %struct.rtx_def* %6, !dbg !5042
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !5043 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !5046, metadata !DIExpression()), !dbg !5047
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5048, metadata !DIExpression()), !dbg !5049
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5050, metadata !DIExpression()), !dbg !5051
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !5052, metadata !DIExpression()), !dbg !5053
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5054
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5055
  %2 = load i32, i32* %mode.addr, align 4, !dbg !5056
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !5057
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !5058
  ret %struct.rtx_def* %call, !dbg !5059
}

declare dso_local %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_frob_return_addr(%union.tree_node* %addr_tree) #0 !dbg !5060 {
entry:
  %addr_tree.addr = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %addr_tree, %union.tree_node** %addr_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_tree.addr, metadata !5061, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !5063, metadata !DIExpression()), !dbg !5064
  %0 = load %union.tree_node*, %union.tree_node** %addr_tree.addr, align 8, !dbg !5065
  %1 = load i32, i32* @ptr_mode, align 4, !dbg !5066
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* null, i32 %1, i32 0), !dbg !5067
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8, !dbg !5064
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5068
  %call1 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %2, i8 zeroext 0), !dbg !5068
  store %struct.rtx_def* %call1, %struct.rtx_def** %addr, align 8, !dbg !5069
  %3 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5070
  ret %struct.rtx_def* %3, !dbg !5071
}

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_builtin_eh_return(%union.tree_node* %stackadj_tree, %union.tree_node* %handler_tree) #0 !dbg !5072 {
entry:
  %stackadj_tree.addr = alloca %union.tree_node*, align 8
  %handler_tree.addr = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %stackadj_tree, %union.tree_node** %stackadj_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %stackadj_tree.addr, metadata !5075, metadata !DIExpression()), !dbg !5076
  store %union.tree_node* %handler_tree, %union.tree_node** %handler_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %handler_tree.addr, metadata !5077, metadata !DIExpression()), !dbg !5078
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !5079, metadata !DIExpression()), !dbg !5080
  %0 = load %union.tree_node*, %union.tree_node** %stackadj_tree.addr, align 8, !dbg !5081
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5082
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* %1, i32 0, i32 0), !dbg !5083
  store %struct.rtx_def* %call, %struct.rtx_def** %tmp, align 8, !dbg !5084
  %2 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5085
  %call1 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %2, i8 zeroext 0), !dbg !5085
  store %struct.rtx_def* %call1, %struct.rtx_def** %tmp, align 8, !dbg !5086
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5087
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !5089
  br i1 %tobool, label %if.else, label %if.then, !dbg !5090

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5091
  %call2 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %4), !dbg !5092
  store %struct.rtx_def* %call2, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5093
  br label %if.end5, !dbg !5094

if.else:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5095
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5097
  %cmp = icmp ne %struct.rtx_def* %5, %6, !dbg !5098
  br i1 %cmp, label %if.then3, label %if.end, !dbg !5099

if.then3:                                         ; preds = %if.else
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5100
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5101
  %call4 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !5102
  br label %if.end, !dbg !5102

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %handler_tree.addr, align 8, !dbg !5103
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5104
  %call6 = call %struct.rtx_def* @expand_expr(%union.tree_node* %9, %struct.rtx_def* %10, i32 0, i32 0), !dbg !5105
  store %struct.rtx_def* %call6, %struct.rtx_def** %tmp, align 8, !dbg !5106
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5107
  %call7 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %11, i8 zeroext 0), !dbg !5107
  store %struct.rtx_def* %call7, %struct.rtx_def** %tmp, align 8, !dbg !5108
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5109
  %tobool8 = icmp ne %struct.rtx_def* %12, null, !dbg !5111
  br i1 %tobool8, label %if.else11, label %if.then9, !dbg !5112

if.then9:                                         ; preds = %if.end5
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5113
  %call10 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %13), !dbg !5114
  store %struct.rtx_def* %call10, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5115
  br label %if.end16, !dbg !5116

if.else11:                                        ; preds = %if.end5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5117
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5119
  %cmp12 = icmp ne %struct.rtx_def* %14, %15, !dbg !5120
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !5121

if.then13:                                        ; preds = %if.else11
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5122
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5123
  %call14 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !5124
  br label %if.end15, !dbg !5124

if.end15:                                         ; preds = %if.then13, %if.else11
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then9
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 2), align 8, !dbg !5125
  %tobool17 = icmp ne %struct.rtx_def* %18, null, !dbg !5127
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !5128

if.then18:                                        ; preds = %if.end16
  %call19 = call %struct.rtx_def* @gen_label_rtx(), !dbg !5129
  store %struct.rtx_def* %call19, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 2), align 8, !dbg !5130
  br label %if.end20, !dbg !5131

if.end20:                                         ; preds = %if.then18, %if.end16
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 2), align 8, !dbg !5132
  call void @emit_jump(%struct.rtx_def* %19), !dbg !5133
  ret void, !dbg !5134
}

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

declare dso_local void @emit_jump(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_eh_return() #0 !dbg !5135 {
entry:
  %around_label = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %around_label, metadata !5136, metadata !DIExpression()), !dbg !5137
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 2), align 8, !dbg !5138
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !5140
  br i1 %tobool, label %if.end, label %if.then, !dbg !5141

if.then:                                          ; preds = %entry
  br label %return, !dbg !5142

if.end:                                           ; preds = %entry
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 29), align 1, !dbg !5143
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 16, i32 2), !dbg !5144
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5145
  %call1 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call, %struct.rtx_def* %1), !dbg !5146
  %call2 = call %struct.rtx_def* @gen_label_rtx(), !dbg !5147
  store %struct.rtx_def* %call2, %struct.rtx_def** %around_label, align 8, !dbg !5148
  %2 = load %struct.rtx_def*, %struct.rtx_def** %around_label, align 8, !dbg !5149
  call void @emit_jump(%struct.rtx_def* %2), !dbg !5150
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 2), align 8, !dbg !5151
  %call3 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3), !dbg !5152
  call void @clobber_return_register(), !dbg !5153
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 16, i32 2), !dbg !5154
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 0), align 8, !dbg !5155
  %call5 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call4, %struct.rtx_def* %4), !dbg !5156
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 1), align 8, !dbg !5157
  %call6 = call %struct.rtx_def* @gen_eh_return(%struct.rtx_def* %5), !dbg !5159
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6), !dbg !5160
  %6 = load %struct.rtx_def*, %struct.rtx_def** %around_label, align 8, !dbg !5161
  %call8 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %6), !dbg !5162
  br label %return, !dbg !5163

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5163
}

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare dso_local %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare dso_local void @clobber_return_register() #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_eh_return(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_builtin_extend_pointer(%union.tree_node* %addr_tree) #0 !dbg !5164 {
entry:
  %addr_tree.addr = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %extend = alloca i32, align 4
  store %union.tree_node* %addr_tree, %union.tree_node** %addr_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_tree.addr, metadata !5165, metadata !DIExpression()), !dbg !5166
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !5167, metadata !DIExpression()), !dbg !5168
  %0 = load %union.tree_node*, %union.tree_node** %addr_tree.addr, align 8, !dbg !5169
  %1 = load i32, i32* @ptr_mode, align 4, !dbg !5170
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* null, i32 %1, i32 0), !dbg !5171
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8, !dbg !5168
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5172, metadata !DIExpression()), !dbg !5173
  store i32 1, i32* %extend, align 4, !dbg !5174
  %2 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 10), align 8, !dbg !5175
  %call1 = call i32 %2(), !dbg !5176
  %3 = load i32, i32* @ptr_mode, align 4, !dbg !5177
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !5178
  %5 = load i32, i32* %extend, align 4, !dbg !5179
  %call2 = call %struct.rtx_def* @convert_modes(i32 %call1, i32 %3, %struct.rtx_def* %4, i32 %5), !dbg !5180
  ret %struct.rtx_def* %call2, !dbg !5181
}

declare dso_local %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_convert_to_eh_region_ranges() #0 !dbg !5182 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5183
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5183
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !5184
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5184
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !5185
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !5185
  %cmp = icmp eq %struct.eh_region_d* %2, null, !dbg !5186
  %lnot = xor i1 %cmp, true, !dbg !5187
  %lnot.ext = zext i1 %lnot to i32, !dbg !5187
  %conv = trunc i32 %lnot.ext to i8, !dbg !5187
  ret i8 %conv, !dbg !5188
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @convert_to_eh_region_ranges() #0 !dbg !5189 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %iter = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %ar_hash = alloca %struct.htab*, align 8
  %last_action = alloca i32, align 4
  %last_action_insn = alloca %struct.rtx_def*, align 8
  %last_landing_pad = alloca %struct.rtx_def*, align 8
  %first_no_action_insn = alloca %struct.rtx_def*, align 8
  %call_site = alloca i32, align 4
  %cur_sec = alloca i32, align 4
  %section_switch_note = alloca %struct.rtx_def*, align 8
  %first_no_action_insn_before_switch = alloca %struct.rtx_def*, align 8
  %last_no_action_insn_before_switch = alloca %struct.rtx_def*, align 8
  %pad_map = alloca %struct.rtx_def**, align 8
  %pad_loc = alloca %struct.simple_bitmap_def*, align 8
  %min_labelno = alloca i32, align 4
  %max_labelno = alloca i32, align 4
  %saved_call_site_base = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  %nothrow = alloca i8, align 1
  %this_action = alloca i32, align 4
  %this_landing_pad = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %n = alloca i32, align 4
  %prev_bb = alloca %struct.basic_block_def*, align 8
  %padbb = alloca %struct.basic_block_def*, align 8
  %cs = alloca %struct.call_site_record_d*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %note224 = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %part = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %bb_ = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5190, metadata !DIExpression()), !dbg !5191
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %iter, metadata !5192, metadata !DIExpression()), !dbg !5193
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5194, metadata !DIExpression()), !dbg !5195
  call void @llvm.dbg.declare(metadata %struct.htab** %ar_hash, metadata !5196, metadata !DIExpression()), !dbg !5197
  call void @llvm.dbg.declare(metadata i32* %last_action, metadata !5198, metadata !DIExpression()), !dbg !5199
  store i32 -3, i32* %last_action, align 4, !dbg !5199
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_action_insn, metadata !5200, metadata !DIExpression()), !dbg !5201
  store %struct.rtx_def* null, %struct.rtx_def** %last_action_insn, align 8, !dbg !5201
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_landing_pad, metadata !5202, metadata !DIExpression()), !dbg !5203
  store %struct.rtx_def* null, %struct.rtx_def** %last_landing_pad, align 8, !dbg !5203
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first_no_action_insn, metadata !5204, metadata !DIExpression()), !dbg !5205
  store %struct.rtx_def* null, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5205
  call void @llvm.dbg.declare(metadata i32* %call_site, metadata !5206, metadata !DIExpression()), !dbg !5207
  store i32 0, i32* %call_site, align 4, !dbg !5207
  call void @llvm.dbg.declare(metadata i32* %cur_sec, metadata !5208, metadata !DIExpression()), !dbg !5209
  store i32 0, i32* %cur_sec, align 4, !dbg !5209
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %section_switch_note, metadata !5210, metadata !DIExpression()), !dbg !5211
  store %struct.rtx_def* null, %struct.rtx_def** %section_switch_note, align 8, !dbg !5211
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first_no_action_insn_before_switch, metadata !5212, metadata !DIExpression()), !dbg !5213
  store %struct.rtx_def* null, %struct.rtx_def** %first_no_action_insn_before_switch, align 8, !dbg !5213
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_no_action_insn_before_switch, metadata !5214, metadata !DIExpression()), !dbg !5215
  store %struct.rtx_def* null, %struct.rtx_def** %last_no_action_insn_before_switch, align 8, !dbg !5215
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %pad_map, metadata !5216, metadata !DIExpression()), !dbg !5217
  store %struct.rtx_def** null, %struct.rtx_def*** %pad_map, align 8, !dbg !5217
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %pad_loc, metadata !5218, metadata !DIExpression()), !dbg !5219
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5219
  call void @llvm.dbg.declare(metadata i32* %min_labelno, metadata !5220, metadata !DIExpression()), !dbg !5221
  store i32 0, i32* %min_labelno, align 4, !dbg !5221
  call void @llvm.dbg.declare(metadata i32* %max_labelno, metadata !5222, metadata !DIExpression()), !dbg !5223
  store i32 0, i32* %max_labelno, align 4, !dbg !5223
  call void @llvm.dbg.declare(metadata i32* %saved_call_site_base, metadata !5224, metadata !DIExpression()), !dbg !5225
  %0 = load i32, i32* @call_site_base, align 4, !dbg !5226
  store i32 %0, i32* %saved_call_site_base, align 4, !dbg !5225
  %call = call %struct.VEC_uchar_gc* @VEC_uchar_gc_alloc(i32 64), !dbg !5227
  store %struct.VEC_uchar_gc* %call, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !5228
  %call1 = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @action_record_hash, i32 (i8*, i8*)* @action_record_eq, void (i8*)* @free), !dbg !5229
  store %struct.htab* %call1, %struct.htab** %ar_hash, align 8, !dbg !5230
  %call2 = call %struct.rtx_def* @get_insns(), !dbg !5231
  store %struct.rtx_def* %call2, %struct.rtx_def** %iter, align 8, !dbg !5233
  br label %for.cond, !dbg !5234

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5235
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !5237
  br i1 %tobool, label %for.body, label %for.end, !dbg !5237

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5238
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5238
  %bf.load = load i32, i32* %3, align 8, !dbg !5238
  %bf.clear = and i32 %bf.load, 65535, !dbg !5238
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5238
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5238

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5238
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5238
  %bf.load3 = load i32, i32* %5, align 8, !dbg !5238
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !5238
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !5238
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !5238

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5238
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5238
  %bf.load7 = load i32, i32* %7, align 8, !dbg !5238
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !5238
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !5238
  br i1 %cmp9, label %if.then, label %lor.lhs.false10, !dbg !5238

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5238
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5238
  %bf.load11 = load i32, i32* %9, align 8, !dbg !5238
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !5238
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !5238
  br i1 %cmp13, label %if.then, label %if.else102, !dbg !5240

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5241, metadata !DIExpression()), !dbg !5243
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !5244, metadata !DIExpression()), !dbg !5245
  call void @llvm.dbg.declare(metadata i8* %nothrow, metadata !5246, metadata !DIExpression()), !dbg !5247
  call void @llvm.dbg.declare(metadata i32* %this_action, metadata !5248, metadata !DIExpression()), !dbg !5249
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %this_landing_pad, metadata !5250, metadata !DIExpression()), !dbg !5251
  %10 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5252
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !5253
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5254
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !5254
  %bf.load14 = load i32, i32* %12, align 8, !dbg !5254
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !5254
  %cmp16 = icmp eq i32 %bf.clear15, 8, !dbg !5254
  br i1 %cmp16, label %land.lhs.true, label %if.end, !dbg !5256

land.lhs.true:                                    ; preds = %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5257
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5257
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5257
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5257
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5257
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5257
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5257
  %bf.load17 = load i32, i32* %15, align 8, !dbg !5257
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !5257
  %cmp19 = icmp eq i32 %bf.clear18, 5, !dbg !5258
  br i1 %cmp19, label %if.then20, label %if.end, !dbg !5259

if.then20:                                        ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5260
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5260
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !5260
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 5, !dbg !5260
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !5260
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !5260
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5260
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5260
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !5260
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**, !dbg !5260
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5260
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1, !dbg !5260
  %arrayidx28 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !5260
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8, !dbg !5260
  store %struct.rtx_def* %19, %struct.rtx_def** %insn, align 8, !dbg !5261
  br label %if.end, !dbg !5262

if.end:                                           ; preds = %if.then20, %land.lhs.true, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5263
  %call29 = call zeroext i8 @get_eh_region_and_lp_from_rtx(%struct.rtx_def* %20, %struct.eh_region_d** %region, %struct.eh_landing_pad_d** %lp), !dbg !5264
  store i8 %call29, i8* %nothrow, align 1, !dbg !5265
  %21 = load i8, i8* %nothrow, align 1, !dbg !5266
  %tobool30 = icmp ne i8 %21, 0, !dbg !5266
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !5268

if.then31:                                        ; preds = %if.end
  br label %for.inc, !dbg !5269

if.end32:                                         ; preds = %if.end
  %22 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !5270
  %tobool33 = icmp ne %struct.eh_region_d* %22, null, !dbg !5270
  br i1 %tobool33, label %if.then34, label %if.else, !dbg !5272

if.then34:                                        ; preds = %if.end32
  %23 = load %struct.htab*, %struct.htab** %ar_hash, align 8, !dbg !5273
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !5274
  %call35 = call i32 @collect_one_action_chain(%struct.htab* %23, %struct.eh_region_d* %24), !dbg !5275
  store i32 %call35, i32* %this_action, align 4, !dbg !5276
  br label %if.end36, !dbg !5277

if.else:                                          ; preds = %if.end32
  store i32 -1, i32* %this_action, align 4, !dbg !5278
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then34
  %25 = load i32, i32* %this_action, align 4, !dbg !5279
  %cmp37 = icmp ne i32 %25, -1, !dbg !5281
  br i1 %cmp37, label %if.then38, label %if.else39, !dbg !5282

if.then38:                                        ; preds = %if.end36
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 38), align 2, !dbg !5283
  br label %if.end43, !dbg !5284

if.else39:                                        ; preds = %if.end36
  %26 = load i32, i32* %last_action, align 4, !dbg !5285
  %cmp40 = icmp eq i32 %26, -3, !dbg !5287
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !5288

if.then41:                                        ; preds = %if.else39
  %27 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5289
  store %struct.rtx_def* %27, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5291
  store i32 -1, i32* %last_action, align 4, !dbg !5292
  br label %if.end42, !dbg !5293

if.end42:                                         ; preds = %if.then41, %if.else39
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then38
  %28 = load i32, i32* %this_action, align 4, !dbg !5294
  %cmp44 = icmp sge i32 %28, 0, !dbg !5296
  br i1 %cmp44, label %if.then45, label %if.else46, !dbg !5297

if.then45:                                        ; preds = %if.end43
  %29 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5298
  %landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %29, i32 0, i32 3, !dbg !5299
  %30 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !5299
  store %struct.rtx_def* %30, %struct.rtx_def** %this_landing_pad, align 8, !dbg !5300
  br label %if.end47, !dbg !5301

if.else46:                                        ; preds = %if.end43
  store %struct.rtx_def* null, %struct.rtx_def** %this_landing_pad, align 8, !dbg !5302
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.then45
  %31 = load i32, i32* %last_action, align 4, !dbg !5303
  %32 = load i32, i32* %this_action, align 4, !dbg !5305
  %cmp48 = icmp ne i32 %31, %32, !dbg !5306
  br i1 %cmp48, label %if.then51, label %lor.lhs.false49, !dbg !5307

lor.lhs.false49:                                  ; preds = %if.end47
  %33 = load %struct.rtx_def*, %struct.rtx_def** %last_landing_pad, align 8, !dbg !5308
  %34 = load %struct.rtx_def*, %struct.rtx_def** %this_landing_pad, align 8, !dbg !5309
  %cmp50 = icmp ne %struct.rtx_def* %33, %34, !dbg !5310
  br i1 %cmp50, label %if.then51, label %if.end101, !dbg !5311

if.then51:                                        ; preds = %lor.lhs.false49, %if.end47
  %35 = load i32, i32* %last_action, align 4, !dbg !5312
  %cmp52 = icmp sge i32 %35, -1, !dbg !5315
  br i1 %cmp52, label %if.then53, label %if.end86, !dbg !5316

if.then53:                                        ; preds = %if.then51
  %36 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn_before_switch, align 8, !dbg !5317
  %tobool54 = icmp ne %struct.rtx_def* %36, null, !dbg !5317
  br i1 %tobool54, label %if.then55, label %if.end71, !dbg !5320

if.then55:                                        ; preds = %if.then53
  %call56 = call i32 @add_call_site(%struct.rtx_def* null, i32 0, i32 0), !dbg !5321
  store i32 %call56, i32* %call_site, align 4, !dbg !5323
  %37 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn_before_switch, align 8, !dbg !5324
  %call57 = call %struct.rtx_def* @emit_note_before(i32 7, %struct.rtx_def* %37), !dbg !5325
  store %struct.rtx_def* %call57, %struct.rtx_def** %note, align 8, !dbg !5326
  %38 = load i32, i32* %call_site, align 4, !dbg !5327
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5328
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5328
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5328
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 4, !dbg !5328
  %rt_int = bitcast %union.rtunion_def* %arrayidx60 to i32*, !dbg !5328
  store i32 %38, i32* %rt_int, align 8, !dbg !5329
  %40 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5330
  %tobool61 = icmp ne %struct.rtx_def* %40, null, !dbg !5330
  br i1 %tobool61, label %if.then62, label %if.else68, !dbg !5332

if.then62:                                        ; preds = %if.then55
  %41 = load %struct.rtx_def*, %struct.rtx_def** %last_no_action_insn_before_switch, align 8, !dbg !5333
  %call63 = call %struct.rtx_def* @emit_note_after(i32 8, %struct.rtx_def* %41), !dbg !5335
  store %struct.rtx_def* %call63, %struct.rtx_def** %note, align 8, !dbg !5336
  %42 = load i32, i32* %call_site, align 4, !dbg !5337
  %43 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5338
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !5338
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5338
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 4, !dbg !5338
  %rt_int67 = bitcast %union.rtunion_def* %arrayidx66 to i32*, !dbg !5338
  store i32 %42, i32* %rt_int67, align 8, !dbg !5339
  br label %if.end70, !dbg !5340

if.else68:                                        ; preds = %if.then55
  %44 = load %struct.rtx_def*, %struct.rtx_def** %last_action_insn, align 8, !dbg !5341
  %45 = load %struct.rtx_def*, %struct.rtx_def** %last_no_action_insn_before_switch, align 8, !dbg !5341
  %cmp69 = icmp eq %struct.rtx_def* %44, %45, !dbg !5341
  br i1 %cmp69, label %cond.false, label %cond.true, !dbg !5341

cond.true:                                        ; preds = %if.else68
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2481, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5341
  br label %cond.end, !dbg !5341

cond.false:                                       ; preds = %if.else68
  br label %cond.end, !dbg !5341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5341
  br label %if.end70

if.end70:                                         ; preds = %cond.end, %if.then62
  br label %if.end71, !dbg !5342

if.end71:                                         ; preds = %if.end70, %if.then53
  %46 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5343
  %tobool72 = icmp ne %struct.rtx_def* %46, null, !dbg !5343
  br i1 %tobool72, label %if.then73, label %if.end80, !dbg !5345

if.then73:                                        ; preds = %if.end71
  %47 = load i32, i32* %cur_sec, align 4, !dbg !5346
  %call74 = call i32 @add_call_site(%struct.rtx_def* null, i32 0, i32 %47), !dbg !5348
  store i32 %call74, i32* %call_site, align 4, !dbg !5349
  %48 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5350
  %call75 = call %struct.rtx_def* @emit_note_before(i32 7, %struct.rtx_def* %48), !dbg !5351
  store %struct.rtx_def* %call75, %struct.rtx_def** %note, align 8, !dbg !5352
  %49 = load i32, i32* %call_site, align 4, !dbg !5353
  %50 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5354
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !5354
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !5354
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 4, !dbg !5354
  %rt_int79 = bitcast %union.rtunion_def* %arrayidx78 to i32*, !dbg !5354
  store i32 %49, i32* %rt_int79, align 8, !dbg !5355
  store %struct.rtx_def* null, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5356
  br label %if.end80, !dbg !5357

if.end80:                                         ; preds = %if.then73, %if.end71
  %51 = load %struct.rtx_def*, %struct.rtx_def** %last_action_insn, align 8, !dbg !5358
  %call81 = call %struct.rtx_def* @emit_note_after(i32 8, %struct.rtx_def* %51), !dbg !5359
  store %struct.rtx_def* %call81, %struct.rtx_def** %note, align 8, !dbg !5360
  %52 = load i32, i32* %call_site, align 4, !dbg !5361
  %53 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5362
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5362
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !5362
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 4, !dbg !5362
  %rt_int85 = bitcast %union.rtunion_def* %arrayidx84 to i32*, !dbg !5362
  store i32 %52, i32* %rt_int85, align 8, !dbg !5363
  br label %if.end86, !dbg !5364

if.end86:                                         ; preds = %if.end80, %if.then51
  %54 = load i32, i32* %this_action, align 4, !dbg !5365
  %cmp87 = icmp sge i32 %54, -1, !dbg !5367
  br i1 %cmp87, label %if.then88, label %if.end100, !dbg !5368

if.then88:                                        ; preds = %if.end86
  %55 = load %struct.rtx_def*, %struct.rtx_def** %this_landing_pad, align 8, !dbg !5369
  %56 = load i32, i32* %this_action, align 4, !dbg !5371
  %cmp89 = icmp slt i32 %56, 0, !dbg !5372
  br i1 %cmp89, label %cond.true90, label %cond.false91, !dbg !5371

cond.true90:                                      ; preds = %if.then88
  br label %cond.end92, !dbg !5371

cond.false91:                                     ; preds = %if.then88
  %57 = load i32, i32* %this_action, align 4, !dbg !5373
  br label %cond.end92, !dbg !5371

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %57, %cond.false91 ], !dbg !5371
  %58 = load i32, i32* %cur_sec, align 4, !dbg !5374
  %call94 = call i32 @add_call_site(%struct.rtx_def* %55, i32 %cond93, i32 %58), !dbg !5375
  store i32 %call94, i32* %call_site, align 4, !dbg !5376
  %59 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5377
  %call95 = call %struct.rtx_def* @emit_note_before(i32 7, %struct.rtx_def* %59), !dbg !5378
  store %struct.rtx_def* %call95, %struct.rtx_def** %note, align 8, !dbg !5379
  %60 = load i32, i32* %call_site, align 4, !dbg !5380
  %61 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5381
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !5381
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !5381
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 4, !dbg !5381
  %rt_int99 = bitcast %union.rtunion_def* %arrayidx98 to i32*, !dbg !5381
  store i32 %60, i32* %rt_int99, align 8, !dbg !5382
  br label %if.end100, !dbg !5383

if.end100:                                        ; preds = %cond.end92, %if.end86
  %62 = load i32, i32* %this_action, align 4, !dbg !5384
  store i32 %62, i32* %last_action, align 4, !dbg !5385
  %63 = load %struct.rtx_def*, %struct.rtx_def** %this_landing_pad, align 8, !dbg !5386
  store %struct.rtx_def* %63, %struct.rtx_def** %last_landing_pad, align 8, !dbg !5387
  br label %if.end101, !dbg !5388

if.end101:                                        ; preds = %if.end100, %lor.lhs.false49
  %64 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5389
  store %struct.rtx_def* %64, %struct.rtx_def** %last_action_insn, align 8, !dbg !5390
  br label %if.end176, !dbg !5391

if.else102:                                       ; preds = %lor.lhs.false10
  %65 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5392
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !5392
  %bf.load103 = load i32, i32* %66, align 8, !dbg !5392
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !5392
  %cmp105 = icmp eq i32 %bf.clear104, 13, !dbg !5392
  br i1 %cmp105, label %land.lhs.true106, label %if.else161, !dbg !5394

land.lhs.true106:                                 ; preds = %if.else102
  %67 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5395
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5395
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !5395
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 5, !dbg !5395
  %rt_int110 = bitcast %union.rtunion_def* %arrayidx109 to i32*, !dbg !5395
  %68 = load i32, i32* %rt_int110, align 8, !dbg !5395
  %cmp111 = icmp eq i32 %68, 11, !dbg !5396
  br i1 %cmp111, label %if.then112, label %if.else161, !dbg !5397

if.then112:                                       ; preds = %land.lhs.true106
  %69 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5398
  %cmp113 = icmp eq %struct.rtx_def* %69, null, !dbg !5398
  br i1 %cmp113, label %cond.false115, label %cond.true114, !dbg !5398

cond.true114:                                     ; preds = %if.then112
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2516, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5398
  br label %cond.end116, !dbg !5398

cond.false115:                                    ; preds = %if.then112
  br label %cond.end116, !dbg !5398

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i32 [ 0, %cond.true114 ], [ 0, %cond.false115 ], !dbg !5398
  %70 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !5400
  %tobool118 = icmp ne i32 %70, 0, !dbg !5400
  br i1 %tobool118, label %cond.false120, label %cond.true119, !dbg !5400

cond.true119:                                     ; preds = %cond.end116
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5400
  br label %cond.end121, !dbg !5400

cond.false120:                                    ; preds = %cond.end116
  br label %cond.end121, !dbg !5400

cond.end121:                                      ; preds = %cond.false120, %cond.true119
  %cond122 = phi i32 [ 0, %cond.true119 ], [ 0, %cond.false120 ], !dbg !5400
  %71 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5401
  store %struct.rtx_def* %71, %struct.rtx_def** %section_switch_note, align 8, !dbg !5402
  %72 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5403
  %tobool123 = icmp ne %struct.rtx_def* %72, null, !dbg !5403
  br i1 %tobool123, label %if.then124, label %if.else130, !dbg !5405

if.then124:                                       ; preds = %cond.end121
  %73 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5406
  store %struct.rtx_def* %73, %struct.rtx_def** %first_no_action_insn_before_switch, align 8, !dbg !5408
  %74 = load %struct.rtx_def*, %struct.rtx_def** %last_action_insn, align 8, !dbg !5409
  store %struct.rtx_def* %74, %struct.rtx_def** %last_no_action_insn_before_switch, align 8, !dbg !5410
  store %struct.rtx_def* null, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5411
  %75 = load i32, i32* %last_action, align 4, !dbg !5412
  %cmp125 = icmp eq i32 %75, -1, !dbg !5412
  br i1 %cmp125, label %cond.false127, label %cond.true126, !dbg !5412

cond.true126:                                     ; preds = %if.then124
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2524, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5412
  br label %cond.end128, !dbg !5412

cond.false127:                                    ; preds = %if.then124
  br label %cond.end128, !dbg !5412

cond.end128:                                      ; preds = %cond.false127, %cond.true126
  %cond129 = phi i32 [ 0, %cond.true126 ], [ 0, %cond.false127 ], !dbg !5412
  store i32 -3, i32* %last_action, align 4, !dbg !5413
  br label %if.end134, !dbg !5414

if.else130:                                       ; preds = %cond.end121
  %76 = load i32, i32* %last_action, align 4, !dbg !5415
  %cmp131 = icmp ne i32 %76, -3, !dbg !5417
  br i1 %cmp131, label %if.then132, label %if.end133, !dbg !5418

if.then132:                                       ; preds = %if.else130
  %77 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !5419
  store %struct.rtx_def* %77, %struct.rtx_def** %last_landing_pad, align 8, !dbg !5420
  br label %if.end133, !dbg !5421

if.end133:                                        ; preds = %if.then132, %if.else130
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %cond.end128
  %78 = load i32, i32* %cur_sec, align 4, !dbg !5422
  %idxprom = sext i32 %78 to i64, !dbg !5422
  %arrayidx135 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom, !dbg !5422
  %79 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx135, align 8, !dbg !5422
  %tobool136 = icmp ne %struct.VEC_call_site_record_gc* %79, null, !dbg !5422
  br i1 %tobool136, label %cond.true137, label %cond.false140, !dbg !5422

cond.true137:                                     ; preds = %if.end134
  %80 = load i32, i32* %cur_sec, align 4, !dbg !5422
  %idxprom138 = sext i32 %80 to i64, !dbg !5422
  %arrayidx139 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom138, !dbg !5422
  %81 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx139, align 8, !dbg !5422
  %base = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %81, i32 0, i32 0, !dbg !5422
  br label %cond.end141, !dbg !5422

cond.false140:                                    ; preds = %if.end134
  br label %cond.end141, !dbg !5422

cond.end141:                                      ; preds = %cond.false140, %cond.true137
  %cond142 = phi %struct.VEC_call_site_record_base* [ %base, %cond.true137 ], [ null, %cond.false140 ], !dbg !5422
  %call143 = call i32 @VEC_call_site_record_base_length(%struct.VEC_call_site_record_base* %cond142), !dbg !5422
  %82 = load i32, i32* @call_site_base, align 4, !dbg !5423
  %add = add i32 %82, %call143, !dbg !5423
  store i32 %add, i32* @call_site_base, align 4, !dbg !5423
  %83 = load i32, i32* %cur_sec, align 4, !dbg !5424
  %inc = add nsw i32 %83, 1, !dbg !5424
  store i32 %inc, i32* %cur_sec, align 4, !dbg !5424
  %84 = load i32, i32* %cur_sec, align 4, !dbg !5425
  %idxprom144 = sext i32 %84 to i64, !dbg !5425
  %arrayidx145 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom144, !dbg !5425
  %85 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx145, align 8, !dbg !5425
  %cmp146 = icmp eq %struct.VEC_call_site_record_gc* %85, null, !dbg !5425
  br i1 %cmp146, label %cond.false148, label %cond.true147, !dbg !5425

cond.true147:                                     ; preds = %cond.end141
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2534, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5425
  br label %cond.end149, !dbg !5425

cond.false148:                                    ; preds = %cond.end141
  br label %cond.end149, !dbg !5425

cond.end149:                                      ; preds = %cond.false148, %cond.true147
  %cond150 = phi i32 [ 0, %cond.true147 ], [ 0, %cond.false148 ], !dbg !5425
  %call151 = call %struct.VEC_call_site_record_gc* @VEC_call_site_record_gc_alloc(i32 10), !dbg !5426
  %86 = load i32, i32* %cur_sec, align 4, !dbg !5427
  %idxprom152 = sext i32 %86 to i64, !dbg !5428
  %arrayidx153 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom152, !dbg !5428
  store %struct.VEC_call_site_record_gc* %call151, %struct.VEC_call_site_record_gc** %arrayidx153, align 8, !dbg !5429
  %call154 = call i32 @max_label_num(), !dbg !5430
  store i32 %call154, i32* %max_labelno, align 4, !dbg !5431
  %call155 = call i32 @get_first_label_num(), !dbg !5432
  store i32 %call155, i32* %min_labelno, align 4, !dbg !5433
  %87 = load i32, i32* %max_labelno, align 4, !dbg !5434
  %88 = load i32, i32* %min_labelno, align 4, !dbg !5434
  %sub = sub nsw i32 %87, %88, !dbg !5434
  %add156 = add nsw i32 %sub, 1, !dbg !5434
  %conv = sext i32 %add156 to i64, !dbg !5434
  %call157 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !5434
  %89 = bitcast i8* %call157 to %struct.rtx_def**, !dbg !5434
  store %struct.rtx_def** %89, %struct.rtx_def*** %pad_map, align 8, !dbg !5435
  %90 = load i32, i32* %max_labelno, align 4, !dbg !5436
  %91 = load i32, i32* %min_labelno, align 4, !dbg !5437
  %sub158 = sub nsw i32 %90, %91, !dbg !5438
  %add159 = add nsw i32 %sub158, 1, !dbg !5439
  %call160 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add159), !dbg !5440
  store %struct.simple_bitmap_def* %call160, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5441
  br label %if.end175, !dbg !5442

if.else161:                                       ; preds = %land.lhs.true106, %if.else102
  %92 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5443
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !5443
  %bf.load162 = load i32, i32* %93, align 8, !dbg !5443
  %bf.clear163 = and i32 %bf.load162, 65535, !dbg !5443
  %cmp164 = icmp eq i32 %bf.clear163, 12, !dbg !5443
  br i1 %cmp164, label %land.lhs.true166, label %if.end174, !dbg !5445

land.lhs.true166:                                 ; preds = %if.else161
  %94 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5446
  %tobool167 = icmp ne %struct.rtx_def** %94, null, !dbg !5446
  br i1 %tobool167, label %if.then168, label %if.end174, !dbg !5447

if.then168:                                       ; preds = %land.lhs.true166
  %95 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5448
  %96 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5449
  %u169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !5449
  %fld170 = bitcast %union.u* %u169 to [1 x %union.rtunion_def]*, !dbg !5449
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i64 0, i64 6, !dbg !5449
  %rt_int172 = bitcast %union.rtunion_def* %arrayidx171 to i32*, !dbg !5449
  %97 = load i32, i32* %rt_int172, align 8, !dbg !5449
  %98 = load i32, i32* %min_labelno, align 4, !dbg !5450
  %sub173 = sub nsw i32 %97, %98, !dbg !5451
  call void @SET_BIT(%struct.simple_bitmap_def* %95, i32 %sub173), !dbg !5452
  br label %if.end174, !dbg !5452

if.end174:                                        ; preds = %if.then168, %land.lhs.true166, %if.else161
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %cond.end149
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end101
  br label %for.inc, !dbg !5238

for.inc:                                          ; preds = %if.end176, %if.then31
  %99 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5453
  %u177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !5453
  %fld178 = bitcast %union.u* %u177 to [1 x %union.rtunion_def]*, !dbg !5453
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i64 0, i64 2, !dbg !5453
  %rt_rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**, !dbg !5453
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx180, align 8, !dbg !5453
  store %struct.rtx_def* %100, %struct.rtx_def** %iter, align 8, !dbg !5454
  br label %for.cond, !dbg !5455, !llvm.loop !5456

for.end:                                          ; preds = %for.cond
  %101 = load i32, i32* %last_action, align 4, !dbg !5458
  %cmp181 = icmp sge i32 %101, -1, !dbg !5460
  br i1 %cmp181, label %land.lhs.true183, label %if.end191, !dbg !5461

land.lhs.true183:                                 ; preds = %for.end
  %102 = load %struct.rtx_def*, %struct.rtx_def** %first_no_action_insn, align 8, !dbg !5462
  %tobool184 = icmp ne %struct.rtx_def* %102, null, !dbg !5462
  br i1 %tobool184, label %if.end191, label %if.then185, !dbg !5463

if.then185:                                       ; preds = %land.lhs.true183
  %103 = load %struct.rtx_def*, %struct.rtx_def** %last_action_insn, align 8, !dbg !5464
  %call186 = call %struct.rtx_def* @emit_note_after(i32 8, %struct.rtx_def* %103), !dbg !5466
  store %struct.rtx_def* %call186, %struct.rtx_def** %note, align 8, !dbg !5467
  %104 = load i32, i32* %call_site, align 4, !dbg !5468
  %105 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5469
  %u187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !5469
  %fld188 = bitcast %union.u* %u187 to [1 x %union.rtunion_def]*, !dbg !5469
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i64 0, i64 4, !dbg !5469
  %rt_int190 = bitcast %union.rtunion_def* %arrayidx189 to i32*, !dbg !5469
  store i32 %104, i32* %rt_int190, align 8, !dbg !5470
  br label %if.end191, !dbg !5471

if.end191:                                        ; preds = %if.then185, %land.lhs.true183, %for.end
  %106 = load i32, i32* %saved_call_site_base, align 4, !dbg !5472
  store i32 %106, i32* @call_site_base, align 4, !dbg !5473
  %107 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5474
  %tobool192 = icmp ne %struct.rtx_def** %107, null, !dbg !5474
  br i1 %tobool192, label %if.then193, label %if.end376, !dbg !5476

if.then193:                                       ; preds = %if.end191
  store i32 0, i32* %cur_sec, align 4, !dbg !5477
  br label %for.cond194, !dbg !5480

for.cond194:                                      ; preds = %for.inc373, %if.then193
  %108 = load i32, i32* %cur_sec, align 4, !dbg !5481
  %cmp195 = icmp slt i32 %108, 2, !dbg !5483
  br i1 %cmp195, label %for.body197, label %for.end375, !dbg !5484

for.body197:                                      ; preds = %for.cond194
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5485, metadata !DIExpression()), !dbg !5487
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !5488, metadata !DIExpression()), !dbg !5489
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5490, metadata !DIExpression()), !dbg !5491
  %109 = load i32, i32* %cur_sec, align 4, !dbg !5492
  %idxprom198 = sext i32 %109 to i64, !dbg !5492
  %arrayidx199 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom198, !dbg !5492
  %110 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx199, align 8, !dbg !5492
  %tobool200 = icmp ne %struct.VEC_call_site_record_gc* %110, null, !dbg !5492
  br i1 %tobool200, label %cond.true201, label %cond.false205, !dbg !5492

cond.true201:                                     ; preds = %for.body197
  %111 = load i32, i32* %cur_sec, align 4, !dbg !5492
  %idxprom202 = sext i32 %111 to i64, !dbg !5492
  %arrayidx203 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom202, !dbg !5492
  %112 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx203, align 8, !dbg !5492
  %base204 = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %112, i32 0, i32 0, !dbg !5492
  br label %cond.end206, !dbg !5492

cond.false205:                                    ; preds = %for.body197
  br label %cond.end206, !dbg !5492

cond.end206:                                      ; preds = %cond.false205, %cond.true201
  %cond207 = phi %struct.VEC_call_site_record_base* [ %base204, %cond.true201 ], [ null, %cond.false205 ], !dbg !5492
  %call208 = call i32 @VEC_call_site_record_base_length(%struct.VEC_call_site_record_base* %cond207), !dbg !5492
  store i32 %call208, i32* %n, align 4, !dbg !5491
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %prev_bb, metadata !5493, metadata !DIExpression()), !dbg !5494
  store %struct.basic_block_def* null, %struct.basic_block_def** %prev_bb, align 8, !dbg !5494
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %padbb, metadata !5495, metadata !DIExpression()), !dbg !5496
  store i32 0, i32* %i, align 4, !dbg !5497
  br label %for.cond209, !dbg !5499

for.cond209:                                      ; preds = %for.inc370, %cond.end206
  %113 = load i32, i32* %i, align 4, !dbg !5500
  %114 = load i32, i32* %n, align 4, !dbg !5502
  %cmp210 = icmp slt i32 %113, %114, !dbg !5503
  br i1 %cmp210, label %for.body212, label %for.end372, !dbg !5504

for.body212:                                      ; preds = %for.cond209
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %cs, metadata !5505, metadata !DIExpression()), !dbg !5507
  %115 = load i32, i32* %cur_sec, align 4, !dbg !5508
  %idxprom213 = sext i32 %115 to i64, !dbg !5508
  %arrayidx214 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom213, !dbg !5508
  %116 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx214, align 8, !dbg !5508
  %tobool215 = icmp ne %struct.VEC_call_site_record_gc* %116, null, !dbg !5508
  br i1 %tobool215, label %cond.true216, label %cond.false220, !dbg !5508

cond.true216:                                     ; preds = %for.body212
  %117 = load i32, i32* %cur_sec, align 4, !dbg !5508
  %idxprom217 = sext i32 %117 to i64, !dbg !5508
  %arrayidx218 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom217, !dbg !5508
  %118 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx218, align 8, !dbg !5508
  %base219 = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %118, i32 0, i32 0, !dbg !5508
  br label %cond.end221, !dbg !5508

cond.false220:                                    ; preds = %for.body212
  br label %cond.end221, !dbg !5508

cond.end221:                                      ; preds = %cond.false220, %cond.true216
  %cond222 = phi %struct.VEC_call_site_record_base* [ %base219, %cond.true216 ], [ null, %cond.false220 ], !dbg !5508
  %119 = load i32, i32* %i, align 4, !dbg !5508
  %call223 = call %struct.call_site_record_d* @VEC_call_site_record_base_index(%struct.VEC_call_site_record_base* %cond222, i32 %119), !dbg !5508
  store %struct.call_site_record_d* %call223, %struct.call_site_record_d** %cs, align 8, !dbg !5507
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !5509, metadata !DIExpression()), !dbg !5510
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note224, metadata !5511, metadata !DIExpression()), !dbg !5512
  %120 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5513
  %landing_pad225 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %120, i32 0, i32 0, !dbg !5515
  %121 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad225, align 8, !dbg !5515
  %cmp226 = icmp eq %struct.rtx_def* %121, null, !dbg !5516
  br i1 %cmp226, label %if.then228, label %if.end229, !dbg !5517

if.then228:                                       ; preds = %cond.end221
  br label %for.inc370, !dbg !5518

if.end229:                                        ; preds = %cond.end221
  %122 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5519
  %landing_pad230 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %122, i32 0, i32 0, !dbg !5519
  %123 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad230, align 8, !dbg !5519
  %u231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !5519
  %fld232 = bitcast %union.u* %u231 to [1 x %union.rtunion_def]*, !dbg !5519
  %arrayidx233 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld232, i64 0, i64 6, !dbg !5519
  %rt_int234 = bitcast %union.rtunion_def* %arrayidx233 to i32*, !dbg !5519
  %124 = load i32, i32* %rt_int234, align 8, !dbg !5519
  %125 = load i32, i32* %min_labelno, align 4, !dbg !5520
  %sub235 = sub nsw i32 %124, %125, !dbg !5521
  store i32 %sub235, i32* %idx, align 4, !dbg !5522
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5523
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %126, i32 0, i32 3, !dbg !5523
  %127 = load i32, i32* %idx, align 4, !dbg !5523
  %div = udiv i32 %127, 64, !dbg !5523
  %idxprom236 = zext i32 %div to i64, !dbg !5523
  %arrayidx237 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom236, !dbg !5523
  %128 = load i64, i64* %arrayidx237, align 8, !dbg !5523
  %129 = load i32, i32* %idx, align 4, !dbg !5523
  %rem = urem i32 %129, 64, !dbg !5523
  %sh_prom = zext i32 %rem to i64, !dbg !5523
  %shr = lshr i64 %128, %sh_prom, !dbg !5523
  %and = and i64 %shr, 1, !dbg !5523
  %130 = load i32, i32* %cur_sec, align 4, !dbg !5525
  %cmp238 = icmp eq i32 %130, 0, !dbg !5526
  %conv239 = zext i1 %cmp238 to i32, !dbg !5526
  %conv240 = sext i32 %conv239 to i64, !dbg !5527
  %xor = xor i64 %and, %conv240, !dbg !5528
  %tobool241 = icmp ne i64 %xor, 0, !dbg !5528
  br i1 %tobool241, label %if.then242, label %if.end243, !dbg !5529

if.then242:                                       ; preds = %if.end229
  br label %for.inc370, !dbg !5530

if.end243:                                        ; preds = %if.end229
  %131 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5531
  %132 = load i32, i32* %idx, align 4, !dbg !5533
  %idxprom244 = sext i32 %132 to i64, !dbg !5531
  %arrayidx245 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %131, i64 %idxprom244, !dbg !5531
  %133 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx245, align 8, !dbg !5531
  %cmp246 = icmp eq %struct.rtx_def* %133, null, !dbg !5534
  br i1 %cmp246, label %if.then248, label %if.end366, !dbg !5535

if.then248:                                       ; preds = %if.end243
  %call249 = call %struct.rtx_def* @gen_label_rtx(), !dbg !5536
  %134 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5538
  %135 = load i32, i32* %idx, align 4, !dbg !5539
  %idxprom250 = sext i32 %135 to i64, !dbg !5538
  %arrayidx251 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %134, i64 %idxprom250, !dbg !5538
  store %struct.rtx_def* %call249, %struct.rtx_def** %arrayidx251, align 8, !dbg !5540
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5541
  %cmp252 = icmp eq %struct.basic_block_def* %136, null, !dbg !5543
  br i1 %cmp252, label %if.then254, label %if.end280, !dbg !5544

if.then254:                                       ; preds = %if.then248
  %137 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5545
  store %struct.rtx_def* %137, %struct.rtx_def** %iter, align 8, !dbg !5547
  br label %for.cond255, !dbg !5548

for.cond255:                                      ; preds = %for.inc274, %if.then254
  %138 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5549
  %tobool256 = icmp ne %struct.rtx_def* %138, null, !dbg !5551
  br i1 %tobool256, label %for.body257, label %for.end279, !dbg !5551

for.body257:                                      ; preds = %for.cond255
  %139 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5552
  %140 = bitcast %struct.rtx_def* %139 to i32*, !dbg !5552
  %bf.load258 = load i32, i32* %140, align 8, !dbg !5552
  %bf.clear259 = and i32 %bf.load258, 65535, !dbg !5552
  %cmp260 = icmp eq i32 %bf.clear259, 13, !dbg !5552
  br i1 %cmp260, label %land.lhs.true262, label %if.end273, !dbg !5552

land.lhs.true262:                                 ; preds = %for.body257
  %141 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5552
  %u263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !5552
  %fld264 = bitcast %union.u* %u263 to [1 x %union.rtunion_def]*, !dbg !5552
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i64 0, i64 5, !dbg !5552
  %rt_int266 = bitcast %union.rtunion_def* %arrayidx265 to i32*, !dbg !5552
  %142 = load i32, i32* %rt_int266, align 8, !dbg !5552
  %cmp267 = icmp eq i32 %142, 10, !dbg !5552
  br i1 %cmp267, label %if.then269, label %if.end273, !dbg !5554

if.then269:                                       ; preds = %land.lhs.true262
  %143 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5555
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1, !dbg !5555
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !5555
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 4, !dbg !5555
  %rt_bb = bitcast %union.rtunion_def* %arrayidx272 to %struct.basic_block_def**, !dbg !5555
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !5555
  store %struct.basic_block_def* %144, %struct.basic_block_def** %prev_bb, align 8, !dbg !5557
  br label %for.end279, !dbg !5558

if.end273:                                        ; preds = %land.lhs.true262, %for.body257
  br label %for.inc274, !dbg !5552

for.inc274:                                       ; preds = %if.end273
  %145 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5559
  %u275 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !5559
  %fld276 = bitcast %union.u* %u275 to [1 x %union.rtunion_def]*, !dbg !5559
  %arrayidx277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld276, i64 0, i64 1, !dbg !5559
  %rt_rtx278 = bitcast %union.rtunion_def* %arrayidx277 to %struct.rtx_def**, !dbg !5559
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx278, align 8, !dbg !5559
  store %struct.rtx_def* %146, %struct.rtx_def** %iter, align 8, !dbg !5560
  br label %for.cond255, !dbg !5561, !llvm.loop !5562

for.end279:                                       ; preds = %if.then269, %for.cond255
  br label %if.end280, !dbg !5563

if.end280:                                        ; preds = %for.end279, %if.then248
  %147 = load i32, i32* %cur_sec, align 4, !dbg !5564
  %cmp281 = icmp eq i32 %147, 0, !dbg !5566
  br i1 %cmp281, label %if.then283, label %if.else290, !dbg !5567

if.then283:                                       ; preds = %if.end280
  %148 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5568
  %149 = load i32, i32* %idx, align 4, !dbg !5570
  %idxprom284 = sext i32 %149 to i64, !dbg !5568
  %arrayidx285 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %148, i64 %idxprom284, !dbg !5568
  %150 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx285, align 8, !dbg !5568
  %151 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5571
  %call286 = call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %150, %struct.rtx_def* %151), !dbg !5572
  store %struct.rtx_def* %call286, %struct.rtx_def** %note224, align 8, !dbg !5573
  %152 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5574
  %landing_pad287 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %152, i32 0, i32 0, !dbg !5575
  %153 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad287, align 8, !dbg !5575
  %call288 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %153), !dbg !5576
  %154 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5577
  %call289 = call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %call288, %struct.rtx_def* %154), !dbg !5578
  store %struct.rtx_def* %call289, %struct.rtx_def** %jump, align 8, !dbg !5579
  br label %if.end297, !dbg !5580

if.else290:                                       ; preds = %if.end280
  %155 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5581
  %landing_pad291 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %155, i32 0, i32 0, !dbg !5583
  %156 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad291, align 8, !dbg !5583
  %call292 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %156), !dbg !5584
  %157 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5585
  %call293 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call292, %struct.rtx_def* %157), !dbg !5586
  store %struct.rtx_def* %call293, %struct.rtx_def** %jump, align 8, !dbg !5587
  %158 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5588
  %159 = load i32, i32* %idx, align 4, !dbg !5589
  %idxprom294 = sext i32 %159 to i64, !dbg !5588
  %arrayidx295 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %158, i64 %idxprom294, !dbg !5588
  %160 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx295, align 8, !dbg !5588
  %161 = load %struct.rtx_def*, %struct.rtx_def** %section_switch_note, align 8, !dbg !5590
  %call296 = call %struct.rtx_def* @emit_label_after(%struct.rtx_def* %160, %struct.rtx_def* %161), !dbg !5591
  store %struct.rtx_def* %call296, %struct.rtx_def** %note224, align 8, !dbg !5592
  br label %if.end297

if.end297:                                        ; preds = %if.else290, %if.then283
  %162 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5593
  %landing_pad298 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %162, i32 0, i32 0, !dbg !5594
  %163 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad298, align 8, !dbg !5594
  %164 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5595
  %u299 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1, !dbg !5595
  %fld300 = bitcast %union.u* %u299 to [1 x %union.rtunion_def]*, !dbg !5595
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i64 0, i64 8, !dbg !5595
  %rt_rtx302 = bitcast %union.rtunion_def* %arrayidx301 to %struct.rtx_def**, !dbg !5595
  store %struct.rtx_def* %163, %struct.rtx_def** %rt_rtx302, align 8, !dbg !5596
  %165 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5597
  call void @add_reg_note(%struct.rtx_def* %165, i32 29, %struct.rtx_def* null), !dbg !5598
  %166 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5599
  %landing_pad303 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %166, i32 0, i32 0, !dbg !5599
  %167 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad303, align 8, !dbg !5599
  %u304 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !5599
  %fld305 = bitcast %union.u* %u304 to [1 x %union.rtunion_def]*, !dbg !5599
  %arrayidx306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld305, i64 0, i64 2, !dbg !5599
  %rt_rtx307 = bitcast %union.rtunion_def* %arrayidx306 to %struct.rtx_def**, !dbg !5599
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx307, align 8, !dbg !5599
  store %struct.rtx_def* %168, %struct.rtx_def** %iter, align 8, !dbg !5600
  %169 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5601
  %tobool308 = icmp ne %struct.rtx_def* %169, null, !dbg !5601
  br i1 %tobool308, label %land.lhs.true309, label %if.else326, !dbg !5603

land.lhs.true309:                                 ; preds = %if.end297
  %170 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5604
  %171 = bitcast %struct.rtx_def* %170 to i32*, !dbg !5604
  %bf.load310 = load i32, i32* %171, align 8, !dbg !5604
  %bf.clear311 = and i32 %bf.load310, 65535, !dbg !5604
  %cmp312 = icmp eq i32 %bf.clear311, 13, !dbg !5604
  br i1 %cmp312, label %land.lhs.true314, label %if.else326, !dbg !5604

land.lhs.true314:                                 ; preds = %land.lhs.true309
  %172 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5604
  %u315 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1, !dbg !5604
  %fld316 = bitcast %union.u* %u315 to [1 x %union.rtunion_def]*, !dbg !5604
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i64 0, i64 5, !dbg !5604
  %rt_int318 = bitcast %union.rtunion_def* %arrayidx317 to i32*, !dbg !5604
  %173 = load i32, i32* %rt_int318, align 8, !dbg !5604
  %cmp319 = icmp eq i32 %173, 10, !dbg !5604
  br i1 %cmp319, label %if.then321, label %if.else326, !dbg !5605

if.then321:                                       ; preds = %land.lhs.true314
  %174 = load %struct.rtx_def*, %struct.rtx_def** %iter, align 8, !dbg !5606
  %u322 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1, !dbg !5606
  %fld323 = bitcast %union.u* %u322 to [1 x %union.rtunion_def]*, !dbg !5606
  %arrayidx324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld323, i64 0, i64 4, !dbg !5606
  %rt_bb325 = bitcast %union.rtunion_def* %arrayidx324 to %struct.basic_block_def**, !dbg !5606
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb325, align 8, !dbg !5606
  store %struct.basic_block_def* %175, %struct.basic_block_def** %padbb, align 8, !dbg !5607
  br label %if.end327, !dbg !5608

if.else326:                                       ; preds = %land.lhs.true314, %land.lhs.true309, %if.end297
  store %struct.basic_block_def* null, %struct.basic_block_def** %padbb, align 8, !dbg !5609
  br label %if.end327

if.end327:                                        ; preds = %if.else326, %if.then321
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %padbb, align 8, !dbg !5610
  %tobool328 = icmp ne %struct.basic_block_def* %176, null, !dbg !5610
  br i1 %tobool328, label %land.lhs.true329, label %if.end365, !dbg !5612

land.lhs.true329:                                 ; preds = %if.end327
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5613
  %tobool330 = icmp ne %struct.basic_block_def* %177, null, !dbg !5613
  br i1 %tobool330, label %land.lhs.true331, label %if.end365, !dbg !5614

land.lhs.true331:                                 ; preds = %land.lhs.true329
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %padbb, align 8, !dbg !5615
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 13, !dbg !5615
  %179 = load i32, i32* %flags, align 8, !dbg !5615
  %and332 = and i32 %179, 96, !dbg !5615
  %cmp333 = icmp ne i32 %and332, 0, !dbg !5616
  br i1 %cmp333, label %if.then335, label %if.end365, !dbg !5617

if.then335:                                       ; preds = %land.lhs.true331
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5618, metadata !DIExpression()), !dbg !5620
  call void @llvm.dbg.declare(metadata i32* %part, metadata !5621, metadata !DIExpression()), !dbg !5622
  %180 = load %struct.basic_block_def*, %struct.basic_block_def** %padbb, align 8, !dbg !5623
  %flags336 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %180, i32 0, i32 13, !dbg !5623
  %181 = load i32, i32* %flags336, align 8, !dbg !5623
  %and337 = and i32 %181, 96, !dbg !5623
  %cmp338 = icmp eq i32 %and337, 64, !dbg !5624
  %182 = zext i1 %cmp338 to i64, !dbg !5623
  %cond340 = select i1 %cmp338, i32 32, i32 64, !dbg !5623
  store i32 %cond340, i32* %part, align 4, !dbg !5622
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5625, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5633, metadata !DIExpression()), !dbg !5634
  %183 = load %struct.rtx_def*, %struct.rtx_def** %note224, align 8, !dbg !5635
  %184 = bitcast %struct.rtx_def* %183 to i8*, !dbg !5635
  %185 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5636
  %186 = bitcast %struct.rtx_def* %185 to i8*, !dbg !5636
  %187 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5637
  %call341 = call %struct.basic_block_def* @create_basic_block(i8* %184, i8* %186, %struct.basic_block_def* %187), !dbg !5638
  store %struct.basic_block_def* %call341, %struct.basic_block_def** %bb, align 8, !dbg !5639
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5640
  %189 = load %struct.basic_block_def*, %struct.basic_block_def** %padbb, align 8, !dbg !5641
  %call342 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %188, %struct.basic_block_def* %189, i32 8192), !dbg !5642
  br label %do.body, !dbg !5643

do.body:                                          ; preds = %if.then335
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !5644, metadata !DIExpression()), !dbg !5646
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5646
  store %struct.basic_block_def* %190, %struct.basic_block_def** %bb_, align 8, !dbg !5646
  %191 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5646
  %flags343 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %191, i32 0, i32 13, !dbg !5646
  %192 = load i32, i32* %flags343, align 8, !dbg !5646
  %and344 = and i32 %192, -97, !dbg !5646
  %193 = load i32, i32* %part, align 4, !dbg !5646
  %or = or i32 %and344, %193, !dbg !5646
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5646
  %flags345 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %194, i32 0, i32 13, !dbg !5646
  store i32 %or, i32* %flags345, align 8, !dbg !5646
  br label %do.end, !dbg !5646

do.end:                                           ; preds = %do.body
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %padbb, align 8, !dbg !5647
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 0, !dbg !5647
  %call346 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5647
  %196 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5647
  %197 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %196, i32 0, i32 0, !dbg !5647
  %198 = extractvalue { i32, %struct.VEC_edge_gc** } %call346, 0, !dbg !5647
  store i32 %198, i32* %197, align 8, !dbg !5647
  %199 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %196, i32 0, i32 1, !dbg !5647
  %200 = extractvalue { i32, %struct.VEC_edge_gc** } %call346, 1, !dbg !5647
  store %struct.VEC_edge_gc** %200, %struct.VEC_edge_gc*** %199, align 8, !dbg !5647
  %201 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5647
  %202 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5647
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 16, i1 false), !dbg !5647
  br label %for.cond347, !dbg !5649

for.cond347:                                      ; preds = %if.end359, %do.end
  %203 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5650
  %204 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %203, i32 0, i32 0, !dbg !5650
  %205 = load i32, i32* %204, align 8, !dbg !5650
  %206 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %203, i32 0, i32 1, !dbg !5650
  %207 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %206, align 8, !dbg !5650
  %call348 = call %struct.edge_def* @ei_safe_edge(i32 %205, %struct.VEC_edge_gc** %207), !dbg !5650
  store %struct.edge_def* %call348, %struct.edge_def** %e, align 8, !dbg !5652
  %tobool349 = icmp ne %struct.edge_def* %call348, null, !dbg !5653
  br i1 %tobool349, label %for.body350, label %for.end360, !dbg !5653

for.body350:                                      ; preds = %for.cond347
  %208 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5654
  %flags351 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %208, i32 0, i32 7, !dbg !5657
  %209 = load i32, i32* %flags351, align 8, !dbg !5657
  %and352 = and i32 %209, 8200, !dbg !5658
  %cmp353 = icmp eq i32 %and352, 8200, !dbg !5659
  br i1 %cmp353, label %if.then355, label %if.else358, !dbg !5660

if.then355:                                       ; preds = %for.body350
  %210 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5661
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5663
  call void @redirect_edge_succ(%struct.edge_def* %210, %struct.basic_block_def* %211), !dbg !5664
  %212 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5665
  %flags356 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %212, i32 0, i32 7, !dbg !5666
  %213 = load i32, i32* %flags356, align 8, !dbg !5667
  %and357 = and i32 %213, -8193, !dbg !5667
  store i32 %and357, i32* %flags356, align 8, !dbg !5667
  br label %if.end359, !dbg !5668

if.else358:                                       ; preds = %for.body350
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5669
  br label %if.end359

if.end359:                                        ; preds = %if.else358, %if.then355
  br label %for.cond347, !dbg !5670, !llvm.loop !5671

for.end360:                                       ; preds = %for.cond347
  %214 = load i32, i32* %cur_sec, align 4, !dbg !5673
  %cmp361 = icmp eq i32 %214, 0, !dbg !5675
  br i1 %cmp361, label %if.then363, label %if.end364, !dbg !5676

if.then363:                                       ; preds = %for.end360
  %215 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5677
  store %struct.basic_block_def* %215, %struct.basic_block_def** %prev_bb, align 8, !dbg !5678
  br label %if.end364, !dbg !5679

if.end364:                                        ; preds = %if.then363, %for.end360
  br label %if.end365, !dbg !5680

if.end365:                                        ; preds = %if.end364, %land.lhs.true331, %land.lhs.true329, %if.end327
  br label %if.end366, !dbg !5681

if.end366:                                        ; preds = %if.end365, %if.end243
  %216 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5682
  %217 = load i32, i32* %idx, align 4, !dbg !5683
  %idxprom367 = sext i32 %217 to i64, !dbg !5682
  %arrayidx368 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %216, i64 %idxprom367, !dbg !5682
  %218 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx368, align 8, !dbg !5682
  %219 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !5684
  %landing_pad369 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %219, i32 0, i32 0, !dbg !5685
  store %struct.rtx_def* %218, %struct.rtx_def** %landing_pad369, align 8, !dbg !5686
  br label %for.inc370, !dbg !5687

for.inc370:                                       ; preds = %if.end366, %if.then242, %if.then228
  %220 = load i32, i32* %i, align 4, !dbg !5688
  %inc371 = add nsw i32 %220, 1, !dbg !5688
  store i32 %inc371, i32* %i, align 4, !dbg !5688
  br label %for.cond209, !dbg !5689, !llvm.loop !5690

for.end372:                                       ; preds = %for.cond209
  br label %for.inc373, !dbg !5692

for.inc373:                                       ; preds = %for.end372
  %221 = load i32, i32* %cur_sec, align 4, !dbg !5693
  %inc374 = add nsw i32 %221, 1, !dbg !5693
  store i32 %inc374, i32* %cur_sec, align 4, !dbg !5693
  br label %for.cond194, !dbg !5694, !llvm.loop !5695

for.end375:                                       ; preds = %for.cond194
  %222 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5697
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %222, i32 0, i32 0, !dbg !5697
  %223 = load i8*, i8** %popcount, align 8, !dbg !5697
  call void @free(i8* %223), !dbg !5697
  %224 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pad_loc, align 8, !dbg !5697
  %225 = bitcast %struct.simple_bitmap_def* %224 to i8*, !dbg !5697
  call void @free(i8* %225), !dbg !5697
  %226 = load %struct.rtx_def**, %struct.rtx_def*** %pad_map, align 8, !dbg !5698
  %227 = bitcast %struct.rtx_def** %226 to i8*, !dbg !5698
  call void @free(i8* %227), !dbg !5698
  br label %if.end376, !dbg !5699

if.end376:                                        ; preds = %for.end375, %if.end191
  %228 = load %struct.htab*, %struct.htab** %ar_hash, align 8, !dbg !5700
  call void @htab_delete(%struct.htab* %228), !dbg !5701
  ret i32 0, !dbg !5702
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @output_function_exception_table(i8* %fnname) #0 !dbg !5703 {
entry:
  %fnname.addr = alloca i8*, align 8
  %personality = alloca %struct.rtx_def*, align 8
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !5706, metadata !DIExpression()), !dbg !5707
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %personality, metadata !5708, metadata !DIExpression()), !dbg !5709
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5710
  %call = call %struct.rtx_def* @get_personality_function(%union.tree_node* %0), !dbg !5711
  store %struct.rtx_def* %call, %struct.rtx_def** %personality, align 8, !dbg !5709
  %1 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 38), align 2, !dbg !5712
  %tobool = icmp ne i8 %1, 0, !dbg !5714
  br i1 %tobool, label %if.end, label %if.then, !dbg !5715

if.then:                                          ; preds = %entry
  br label %return, !dbg !5716

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %personality, align 8, !dbg !5717
  %tobool1 = icmp ne %struct.rtx_def* %2, null, !dbg !5717
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5719

if.then2:                                         ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %personality, align 8, !dbg !5720
  call void @assemble_external_libcall(%struct.rtx_def* %3), !dbg !5721
  br label %if.end3, !dbg !5721

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i8*, i8** %fnname.addr, align 8, !dbg !5722
  %5 = load %struct.rtx_def*, %struct.rtx_def** %personality, align 8, !dbg !5723
  call void @output_one_function_exception_table(i8* %4, i32 0, %struct.rtx_def* %5), !dbg !5724
  %6 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6, i64 1), align 8, !dbg !5725
  %cmp = icmp ne %struct.VEC_call_site_record_gc* %6, null, !dbg !5727
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5728

if.then4:                                         ; preds = %if.end3
  %7 = load i8*, i8** %fnname.addr, align 8, !dbg !5729
  %8 = load %struct.rtx_def*, %struct.rtx_def** %personality, align 8, !dbg !5730
  call void @output_one_function_exception_table(i8* %7, i32 1, %struct.rtx_def* %8), !dbg !5731
  br label %if.end5, !dbg !5731

if.end5:                                          ; preds = %if.then4, %if.end3
  %call6 = call %union.section* @current_function_section(), !dbg !5732
  call void @switch_to_section(%union.section* %call6), !dbg !5733
  br label %return, !dbg !5734

return:                                           ; preds = %if.end5, %if.then
  ret void, !dbg !5734
}

declare dso_local %struct.rtx_def* @get_personality_function(%union.tree_node*) #2

declare dso_local void @assemble_external_libcall(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_one_function_exception_table(i8* %fnname, i32 %section, %struct.rtx_def* %personality) #0 !dbg !5735 {
entry:
  %fnname.addr = alloca i8*, align 8
  %section.addr = alloca i32, align 4
  %personality.addr = alloca %struct.rtx_def*, align 8
  %tt_format = alloca i32, align 4
  %cs_format = alloca i32, align 4
  %lp_format = alloca i32, align 4
  %i = alloca i32, align 4
  %ttype_label = alloca [32 x i8], align 16
  %cs_after_size_label = alloca [32 x i8], align 16
  %cs_end_label = alloca [32 x i8], align 16
  %have_tt_data = alloca i32, align 4
  %tt_format_size = alloca i32, align 4
  %ttype_after_disp_label = alloca [32 x i8], align 16
  %uc = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %type150 = alloca %union.tree_node*, align 8
  %uc173 = alloca i8, align 1
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !5738, metadata !DIExpression()), !dbg !5739
  store i32 %section, i32* %section.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %section.addr, metadata !5740, metadata !DIExpression()), !dbg !5741
  store %struct.rtx_def* %personality, %struct.rtx_def** %personality.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %personality.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  call void @llvm.dbg.declare(metadata i32* %tt_format, metadata !5744, metadata !DIExpression()), !dbg !5745
  call void @llvm.dbg.declare(metadata i32* %cs_format, metadata !5746, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.declare(metadata i32* %lp_format, metadata !5748, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata [32 x i8]* %ttype_label, metadata !5752, metadata !DIExpression()), !dbg !5756
  call void @llvm.dbg.declare(metadata [32 x i8]* %cs_after_size_label, metadata !5757, metadata !DIExpression()), !dbg !5758
  call void @llvm.dbg.declare(metadata [32 x i8]* %cs_end_label, metadata !5759, metadata !DIExpression()), !dbg !5760
  call void @llvm.dbg.declare(metadata i32* %have_tt_data, metadata !5761, metadata !DIExpression()), !dbg !5762
  call void @llvm.dbg.declare(metadata i32* %tt_format_size, metadata !5763, metadata !DIExpression()), !dbg !5764
  store i32 0, i32* %tt_format_size, align 4, !dbg !5764
  %0 = load i8*, i8** %fnname.addr, align 8, !dbg !5765
  call void @switch_to_exception_section(i8* %0), !dbg !5766
  %1 = load void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 9), align 8, !dbg !5767
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5768
  call void %1(%struct._IO_FILE* %2), !dbg !5769
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5770
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5770
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !5770
  %4 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5770
  %ttype_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 4, !dbg !5770
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data, align 8, !dbg !5770
  %tobool = icmp ne %struct.VEC_tree_gc* %5, null, !dbg !5770
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5770

cond.true:                                        ; preds = %entry
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5770
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !5770
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !5770
  %7 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !5770
  %ttype_data3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 4, !dbg !5770
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data3, align 8, !dbg !5770
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i32 0, i32 0, !dbg !5770
  br label %cond.end, !dbg !5770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5770
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5770
  %tobool4 = icmp ne i32 %call, 0, !dbg !5770
  br i1 %tobool4, label %lor.end, label %lor.rhs, !dbg !5771

lor.rhs:                                          ; preds = %cond.end
  %9 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !5772
  %conv = zext i8 %9 to i32, !dbg !5773
  %tobool5 = icmp ne i32 %conv, 0, !dbg !5773
  br i1 %tobool5, label %cond.true6, label %cond.false20, !dbg !5773

cond.true6:                                       ; preds = %lor.rhs
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5774
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5774
  %eh8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 0, !dbg !5774
  %11 = load %struct.eh_status*, %struct.eh_status** %eh8, align 8, !dbg !5774
  %ehspec_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %11, i32 0, i32 5, !dbg !5774
  %arm_eabi = bitcast %union.eh_status_u* %ehspec_data to %struct.VEC_tree_gc**, !dbg !5774
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi, align 8, !dbg !5774
  %tobool9 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !5774
  br i1 %tobool9, label %cond.true10, label %cond.false16, !dbg !5774

cond.true10:                                      ; preds = %cond.true6
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5774
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5774
  %eh12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 0, !dbg !5774
  %14 = load %struct.eh_status*, %struct.eh_status** %eh12, align 8, !dbg !5774
  %ehspec_data13 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %14, i32 0, i32 5, !dbg !5774
  %arm_eabi14 = bitcast %union.eh_status_u* %ehspec_data13 to %struct.VEC_tree_gc**, !dbg !5774
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi14, align 8, !dbg !5774
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !5774
  br label %cond.end17, !dbg !5774

cond.false16:                                     ; preds = %cond.true6
  br label %cond.end17, !dbg !5774

cond.end17:                                       ; preds = %cond.false16, %cond.true10
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true10 ], [ null, %cond.false16 ], !dbg !5774
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !5774
  br label %cond.end35, !dbg !5773

cond.false20:                                     ; preds = %lor.rhs
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5775
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5775
  %eh22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 0, !dbg !5775
  %17 = load %struct.eh_status*, %struct.eh_status** %eh22, align 8, !dbg !5775
  %ehspec_data23 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %17, i32 0, i32 5, !dbg !5775
  %other = bitcast %union.eh_status_u* %ehspec_data23 to %struct.VEC_uchar_gc**, !dbg !5775
  %18 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other, align 8, !dbg !5775
  %tobool24 = icmp ne %struct.VEC_uchar_gc* %18, null, !dbg !5775
  br i1 %tobool24, label %cond.true25, label %cond.false31, !dbg !5775

cond.true25:                                      ; preds = %cond.false20
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5775
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5775
  %eh27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 0, !dbg !5775
  %20 = load %struct.eh_status*, %struct.eh_status** %eh27, align 8, !dbg !5775
  %ehspec_data28 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %20, i32 0, i32 5, !dbg !5775
  %other29 = bitcast %union.eh_status_u* %ehspec_data28 to %struct.VEC_uchar_gc**, !dbg !5775
  %21 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other29, align 8, !dbg !5775
  %base30 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %21, i32 0, i32 0, !dbg !5775
  br label %cond.end32, !dbg !5775

cond.false31:                                     ; preds = %cond.false20
  br label %cond.end32, !dbg !5775

cond.end32:                                       ; preds = %cond.false31, %cond.true25
  %cond33 = phi %struct.VEC_uchar_base* [ %base30, %cond.true25 ], [ null, %cond.false31 ], !dbg !5775
  %call34 = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond33), !dbg !5775
  br label %cond.end35, !dbg !5773

cond.end35:                                       ; preds = %cond.end32, %cond.end17
  %cond36 = phi i32 [ %call19, %cond.end17 ], [ %call34, %cond.end32 ], !dbg !5773
  %tobool37 = icmp ne i32 %cond36, 0, !dbg !5771
  br label %lor.end, !dbg !5771

lor.end:                                          ; preds = %cond.end35, %cond.end
  %22 = phi i1 [ true, %cond.end ], [ %tobool37, %cond.end35 ]
  %lor.ext = zext i1 %22 to i32, !dbg !5771
  store i32 %lor.ext, i32* %have_tt_data, align 4, !dbg !5776
  %23 = load i32, i32* %have_tt_data, align 4, !dbg !5777
  %tobool38 = icmp ne i32 %23, 0, !dbg !5777
  br i1 %tobool38, label %if.else, label %if.then, !dbg !5779

if.then:                                          ; preds = %lor.end
  store i32 255, i32* %tt_format, align 4, !dbg !5780
  br label %if.end, !dbg !5781

if.else:                                          ; preds = %lor.end
  %call39 = call i32 @asm_preferred_eh_data_format(i32 0, i32 1), !dbg !5782
  store i32 %call39, i32* %tt_format, align 4, !dbg !5784
  br label %do.body, !dbg !5785

do.body:                                          ; preds = %if.else
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_label, i64 0, i64 0, !dbg !5786
  %24 = load i32, i32* %section.addr, align 4, !dbg !5786
  %tobool40 = icmp ne i32 %24, 0, !dbg !5786
  %25 = zext i1 %tobool40 to i64, !dbg !5786
  %cond41 = select i1 %tobool40, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i64 0, i64 0), !dbg !5786
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5786
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !5786
  %funcdef_no = getelementptr inbounds %struct.function, %struct.function* %add.ptr42, i32 0, i32 14, !dbg !5786
  %27 = load i32, i32* %funcdef_no, align 4, !dbg !5786
  %call43 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* %cond41, i32 %27), !dbg !5786
  br label %do.end, !dbg !5786

do.end:                                           ; preds = %do.body
  %28 = load i32, i32* %tt_format, align 4, !dbg !5788
  %call44 = call i32 @size_of_encoded_value(i32 %28), !dbg !5789
  store i32 %call44, i32* %tt_format_size, align 4, !dbg !5790
  %29 = load i32, i32* %tt_format_size, align 4, !dbg !5791
  %mul = mul nsw i32 %29, 8, !dbg !5792
  call void @assemble_align(i32 %mul), !dbg !5793
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  %30 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !5794
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5795
  %32 = load i32, i32* %section.addr, align 4, !dbg !5796
  %tobool45 = icmp ne i32 %32, 0, !dbg !5796
  %33 = zext i1 %tobool45 to i64, !dbg !5796
  %cond46 = select i1 %tobool45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0), !dbg !5796
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5797
  %add.ptr47 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !5797
  %funcdef_no48 = getelementptr inbounds %struct.function, %struct.function* %add.ptr47, i32 0, i32 14, !dbg !5797
  %35 = load i32, i32* %funcdef_no48, align 4, !dbg !5797
  %conv49 = sext i32 %35 to i64, !dbg !5797
  call void %30(%struct._IO_FILE* %31, i8* %cond46, i64 %conv49), !dbg !5798
  store i32 255, i32* %lp_format, align 4, !dbg !5799
  %36 = load i32, i32* %lp_format, align 4, !dbg !5800
  %conv50 = sext i32 %36 to i64, !dbg !5800
  %37 = load i32, i32* %lp_format, align 4, !dbg !5801
  %call51 = call i8* @eh_data_format_name(i32 %37), !dbg !5802
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv50, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i8* %call51), !dbg !5803
  %38 = load i32, i32* %tt_format, align 4, !dbg !5804
  %conv52 = sext i32 %38 to i64, !dbg !5804
  %39 = load i32, i32* %tt_format, align 4, !dbg !5805
  %call53 = call i8* @eh_data_format_name(i32 %39), !dbg !5806
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv52, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.41, i64 0, i64 0), i8* %call53), !dbg !5807
  %40 = load i32, i32* %have_tt_data, align 4, !dbg !5808
  %tobool54 = icmp ne i32 %40, 0, !dbg !5808
  br i1 %tobool54, label %if.then55, label %if.end70, !dbg !5810

if.then55:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata [32 x i8]* %ttype_after_disp_label, metadata !5811, metadata !DIExpression()), !dbg !5813
  br label %do.body56, !dbg !5814

do.body56:                                        ; preds = %if.then55
  %arraydecay57 = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_after_disp_label, i64 0, i64 0, !dbg !5815
  %41 = load i32, i32* %section.addr, align 4, !dbg !5815
  %tobool58 = icmp ne i32 %41, 0, !dbg !5815
  %42 = zext i1 %tobool58 to i64, !dbg !5815
  %cond59 = select i1 %tobool58, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43, i64 0, i64 0), !dbg !5815
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5815
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !5815
  %funcdef_no61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 14, !dbg !5815
  %44 = load i32, i32* %funcdef_no61, align 4, !dbg !5815
  %call62 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay57, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* %cond59, i32 %44), !dbg !5815
  br label %do.end63, !dbg !5815

do.end63:                                         ; preds = %do.body56
  %arraydecay64 = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_label, i64 0, i64 0, !dbg !5817
  %arraydecay65 = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_after_disp_label, i64 0, i64 0, !dbg !5818
  call void (i8*, i8*, i8*, ...) @dw2_asm_output_delta_uleb128(i8* %arraydecay64, i8* %arraydecay65, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0)), !dbg !5819
  br label %do.body66, !dbg !5820

do.body66:                                        ; preds = %do.end63
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5821
  %arraydecay67 = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_after_disp_label, i64 0, i64 0, !dbg !5821
  call void @assemble_name(%struct._IO_FILE* %45, i8* %arraydecay67), !dbg !5821
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5821
  %call68 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i64 0, i64 0), %struct._IO_FILE* %46), !dbg !5821
  br label %do.end69, !dbg !5821

do.end69:                                         ; preds = %do.body66
  br label %if.end70, !dbg !5823

if.end70:                                         ; preds = %do.end69, %if.end
  store i32 1, i32* %cs_format, align 4, !dbg !5824
  %47 = load i32, i32* %cs_format, align 4, !dbg !5825
  %conv71 = sext i32 %47 to i64, !dbg !5825
  %48 = load i32, i32* %cs_format, align 4, !dbg !5826
  %call72 = call i8* @eh_data_format_name(i32 %48), !dbg !5827
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv71, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46, i64 0, i64 0), i8* %call72), !dbg !5828
  br label %do.body73, !dbg !5829

do.body73:                                        ; preds = %if.end70
  %arraydecay74 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_after_size_label, i64 0, i64 0, !dbg !5830
  %49 = load i32, i32* %section.addr, align 4, !dbg !5830
  %tobool75 = icmp ne i32 %49, 0, !dbg !5830
  %50 = zext i1 %tobool75 to i64, !dbg !5830
  %cond76 = select i1 %tobool75, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.48, i64 0, i64 0), !dbg !5830
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5830
  %add.ptr77 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !5830
  %funcdef_no78 = getelementptr inbounds %struct.function, %struct.function* %add.ptr77, i32 0, i32 14, !dbg !5830
  %52 = load i32, i32* %funcdef_no78, align 4, !dbg !5830
  %call79 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* %cond76, i32 %52), !dbg !5830
  br label %do.end80, !dbg !5830

do.end80:                                         ; preds = %do.body73
  br label %do.body81, !dbg !5832

do.body81:                                        ; preds = %do.end80
  %arraydecay82 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_end_label, i64 0, i64 0, !dbg !5833
  %53 = load i32, i32* %section.addr, align 4, !dbg !5833
  %tobool83 = icmp ne i32 %53, 0, !dbg !5833
  %54 = zext i1 %tobool83 to i64, !dbg !5833
  %cond84 = select i1 %tobool83, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i64 0, i64 0), !dbg !5833
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5833
  %add.ptr85 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !5833
  %funcdef_no86 = getelementptr inbounds %struct.function, %struct.function* %add.ptr85, i32 0, i32 14, !dbg !5833
  %56 = load i32, i32* %funcdef_no86, align 4, !dbg !5833
  %call87 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* %cond84, i32 %56), !dbg !5833
  br label %do.end88, !dbg !5833

do.end88:                                         ; preds = %do.body81
  %arraydecay89 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_end_label, i64 0, i64 0, !dbg !5835
  %arraydecay90 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_after_size_label, i64 0, i64 0, !dbg !5836
  call void (i8*, i8*, i8*, ...) @dw2_asm_output_delta_uleb128(i8* %arraydecay89, i8* %arraydecay90, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i64 0, i64 0)), !dbg !5837
  br label %do.body91, !dbg !5838

do.body91:                                        ; preds = %do.end88
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5839
  %arraydecay92 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_after_size_label, i64 0, i64 0, !dbg !5839
  call void @assemble_name(%struct._IO_FILE* %57, i8* %arraydecay92), !dbg !5839
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5839
  %call93 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i64 0, i64 0), %struct._IO_FILE* %58), !dbg !5839
  br label %do.end94, !dbg !5839

do.end94:                                         ; preds = %do.body91
  %59 = load i32, i32* %cs_format, align 4, !dbg !5841
  %60 = load i32, i32* %section.addr, align 4, !dbg !5843
  call void @dw2_output_call_site_table(i32 %59, i32 %60), !dbg !5844
  br label %do.body95, !dbg !5845

do.body95:                                        ; preds = %do.end94
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5846
  %arraydecay96 = getelementptr inbounds [32 x i8], [32 x i8]* %cs_end_label, i64 0, i64 0, !dbg !5846
  call void @assemble_name(%struct._IO_FILE* %61, i8* %arraydecay96), !dbg !5846
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5846
  %call97 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i64 0, i64 0), %struct._IO_FILE* %62), !dbg !5846
  br label %do.end98, !dbg !5846

do.end98:                                         ; preds = %do.body95
  call void @llvm.dbg.declare(metadata i8* %uc, metadata !5848, metadata !DIExpression()), !dbg !5850
  store i32 0, i32* %i, align 4, !dbg !5851
  br label %for.cond, !dbg !5853

for.cond:                                         ; preds = %for.inc, %do.end98
  %63 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !5854
  %tobool99 = icmp ne %struct.VEC_uchar_gc* %63, null, !dbg !5854
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !5854

cond.true100:                                     ; preds = %for.cond
  %64 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !5854
  %base101 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %64, i32 0, i32 0, !dbg !5854
  br label %cond.end103, !dbg !5854

cond.false102:                                    ; preds = %for.cond
  br label %cond.end103, !dbg !5854

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_uchar_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !5854
  %65 = load i32, i32* %i, align 4, !dbg !5854
  %call105 = call i32 @VEC_uchar_base_iterate(%struct.VEC_uchar_base* %cond104, i32 %65, i8* %uc), !dbg !5854
  %tobool106 = icmp ne i32 %call105, 0, !dbg !5856
  br i1 %tobool106, label %for.body, label %for.end, !dbg !5856

for.body:                                         ; preds = %cond.end103
  %66 = load i8, i8* %uc, align 1, !dbg !5857
  %conv107 = zext i8 %66 to i64, !dbg !5857
  %67 = load i32, i32* %i, align 4, !dbg !5858
  %tobool108 = icmp ne i32 %67, 0, !dbg !5858
  %68 = zext i1 %tobool108 to i64, !dbg !5858
  %cond109 = select i1 %tobool108, i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), !dbg !5858
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv107, i8* %cond109), !dbg !5859
  br label %for.inc, !dbg !5859

for.inc:                                          ; preds = %for.body
  %69 = load i32, i32* %i, align 4, !dbg !5860
  %inc = add nsw i32 %69, 1, !dbg !5860
  store i32 %inc, i32* %i, align 4, !dbg !5860
  br label %for.cond, !dbg !5861, !llvm.loop !5862

for.end:                                          ; preds = %cond.end103
  %70 = load i32, i32* %have_tt_data, align 4, !dbg !5864
  %tobool110 = icmp ne i32 %70, 0, !dbg !5864
  br i1 %tobool110, label %if.then111, label %if.end113, !dbg !5866

if.then111:                                       ; preds = %for.end
  %71 = load i32, i32* %tt_format_size, align 4, !dbg !5867
  %mul112 = mul nsw i32 %71, 8, !dbg !5868
  call void @assemble_align(i32 %mul112), !dbg !5869
  br label %if.end113, !dbg !5869

if.end113:                                        ; preds = %if.then111, %for.end
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5870
  %add.ptr114 = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, !dbg !5870
  %eh115 = getelementptr inbounds %struct.function, %struct.function* %add.ptr114, i32 0, i32 0, !dbg !5870
  %73 = load %struct.eh_status*, %struct.eh_status** %eh115, align 8, !dbg !5870
  %ttype_data116 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %73, i32 0, i32 4, !dbg !5870
  %74 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data116, align 8, !dbg !5870
  %tobool117 = icmp ne %struct.VEC_tree_gc* %74, null, !dbg !5870
  br i1 %tobool117, label %cond.true118, label %cond.false123, !dbg !5870

cond.true118:                                     ; preds = %if.end113
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5870
  %add.ptr119 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !5870
  %eh120 = getelementptr inbounds %struct.function, %struct.function* %add.ptr119, i32 0, i32 0, !dbg !5870
  %76 = load %struct.eh_status*, %struct.eh_status** %eh120, align 8, !dbg !5870
  %ttype_data121 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %76, i32 0, i32 4, !dbg !5870
  %77 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data121, align 8, !dbg !5870
  %base122 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %77, i32 0, i32 0, !dbg !5870
  br label %cond.end124, !dbg !5870

cond.false123:                                    ; preds = %if.end113
  br label %cond.end124, !dbg !5870

cond.end124:                                      ; preds = %cond.false123, %cond.true118
  %cond125 = phi %struct.VEC_tree_base* [ %base122, %cond.true118 ], [ null, %cond.false123 ], !dbg !5870
  %call126 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond125), !dbg !5870
  store i32 %call126, i32* %i, align 4, !dbg !5871
  br label %while.cond, !dbg !5872

while.cond:                                       ; preds = %cond.end138, %cond.end124
  %78 = load i32, i32* %i, align 4, !dbg !5873
  %dec = add nsw i32 %78, -1, !dbg !5873
  store i32 %dec, i32* %i, align 4, !dbg !5873
  %cmp = icmp sgt i32 %78, 0, !dbg !5874
  br i1 %cmp, label %while.body, label %while.end, !dbg !5872

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5875, metadata !DIExpression()), !dbg !5877
  %79 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5878
  %add.ptr128 = getelementptr inbounds %struct.function, %struct.function* %79, i64 0, !dbg !5878
  %eh129 = getelementptr inbounds %struct.function, %struct.function* %add.ptr128, i32 0, i32 0, !dbg !5878
  %80 = load %struct.eh_status*, %struct.eh_status** %eh129, align 8, !dbg !5878
  %ttype_data130 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %80, i32 0, i32 4, !dbg !5878
  %81 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data130, align 8, !dbg !5878
  %tobool131 = icmp ne %struct.VEC_tree_gc* %81, null, !dbg !5878
  br i1 %tobool131, label %cond.true132, label %cond.false137, !dbg !5878

cond.true132:                                     ; preds = %while.body
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5878
  %add.ptr133 = getelementptr inbounds %struct.function, %struct.function* %82, i64 0, !dbg !5878
  %eh134 = getelementptr inbounds %struct.function, %struct.function* %add.ptr133, i32 0, i32 0, !dbg !5878
  %83 = load %struct.eh_status*, %struct.eh_status** %eh134, align 8, !dbg !5878
  %ttype_data135 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %83, i32 0, i32 4, !dbg !5878
  %84 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data135, align 8, !dbg !5878
  %base136 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %84, i32 0, i32 0, !dbg !5878
  br label %cond.end138, !dbg !5878

cond.false137:                                    ; preds = %while.body
  br label %cond.end138, !dbg !5878

cond.end138:                                      ; preds = %cond.false137, %cond.true132
  %cond139 = phi %struct.VEC_tree_base* [ %base136, %cond.true132 ], [ null, %cond.false137 ], !dbg !5878
  %85 = load i32, i32* %i, align 4, !dbg !5878
  %call140 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond139, i32 %85), !dbg !5878
  store %union.tree_node* %call140, %union.tree_node** %type, align 8, !dbg !5877
  %86 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5879
  %87 = load i32, i32* %tt_format, align 4, !dbg !5880
  %88 = load i32, i32* %tt_format_size, align 4, !dbg !5881
  call void @output_ttype(%union.tree_node* %86, i32 %87, i32 %88), !dbg !5882
  br label %while.cond, !dbg !5872, !llvm.loop !5883

while.end:                                        ; preds = %while.cond
  %89 = load i32, i32* %have_tt_data, align 4, !dbg !5885
  %tobool141 = icmp ne i32 %89, 0, !dbg !5885
  br i1 %tobool141, label %if.then142, label %if.end147, !dbg !5887

if.then142:                                       ; preds = %while.end
  br label %do.body143, !dbg !5888

do.body143:                                       ; preds = %if.then142
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5889
  %arraydecay144 = getelementptr inbounds [32 x i8], [32 x i8]* %ttype_label, i64 0, i64 0, !dbg !5889
  call void @assemble_name(%struct._IO_FILE* %90, i8* %arraydecay144), !dbg !5889
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5889
  %call145 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !5889
  br label %do.end146, !dbg !5889

do.end146:                                        ; preds = %do.body143
  br label %if.end147, !dbg !5889

if.end147:                                        ; preds = %do.end146, %while.end
  %92 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !5891
  %tobool148 = icmp ne i8 %92, 0, !dbg !5893
  br i1 %tobool148, label %if.then149, label %if.else172, !dbg !5894

if.then149:                                       ; preds = %if.end147
  call void @llvm.dbg.declare(metadata %union.tree_node** %type150, metadata !5895, metadata !DIExpression()), !dbg !5897
  store i32 0, i32* %i, align 4, !dbg !5898
  br label %for.cond151, !dbg !5900

for.cond151:                                      ; preds = %for.inc169, %if.then149
  %93 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5901
  %add.ptr152 = getelementptr inbounds %struct.function, %struct.function* %93, i64 0, !dbg !5901
  %eh153 = getelementptr inbounds %struct.function, %struct.function* %add.ptr152, i32 0, i32 0, !dbg !5901
  %94 = load %struct.eh_status*, %struct.eh_status** %eh153, align 8, !dbg !5901
  %ehspec_data154 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %94, i32 0, i32 5, !dbg !5901
  %arm_eabi155 = bitcast %union.eh_status_u* %ehspec_data154 to %struct.VEC_tree_gc**, !dbg !5901
  %95 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi155, align 8, !dbg !5901
  %tobool156 = icmp ne %struct.VEC_tree_gc* %95, null, !dbg !5901
  br i1 %tobool156, label %cond.true157, label %cond.false163, !dbg !5901

cond.true157:                                     ; preds = %for.cond151
  %96 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5901
  %add.ptr158 = getelementptr inbounds %struct.function, %struct.function* %96, i64 0, !dbg !5901
  %eh159 = getelementptr inbounds %struct.function, %struct.function* %add.ptr158, i32 0, i32 0, !dbg !5901
  %97 = load %struct.eh_status*, %struct.eh_status** %eh159, align 8, !dbg !5901
  %ehspec_data160 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %97, i32 0, i32 5, !dbg !5901
  %arm_eabi161 = bitcast %union.eh_status_u* %ehspec_data160 to %struct.VEC_tree_gc**, !dbg !5901
  %98 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi161, align 8, !dbg !5901
  %base162 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %98, i32 0, i32 0, !dbg !5901
  br label %cond.end164, !dbg !5901

cond.false163:                                    ; preds = %for.cond151
  br label %cond.end164, !dbg !5901

cond.end164:                                      ; preds = %cond.false163, %cond.true157
  %cond165 = phi %struct.VEC_tree_base* [ %base162, %cond.true157 ], [ null, %cond.false163 ], !dbg !5901
  %99 = load i32, i32* %i, align 4, !dbg !5901
  %call166 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond165, i32 %99, %union.tree_node** %type150), !dbg !5901
  %tobool167 = icmp ne i32 %call166, 0, !dbg !5903
  br i1 %tobool167, label %for.body168, label %for.end171, !dbg !5903

for.body168:                                      ; preds = %cond.end164
  %100 = load %union.tree_node*, %union.tree_node** %type150, align 8, !dbg !5904
  %101 = load i32, i32* %tt_format, align 4, !dbg !5905
  %102 = load i32, i32* %tt_format_size, align 4, !dbg !5906
  call void @output_ttype(%union.tree_node* %100, i32 %101, i32 %102), !dbg !5907
  br label %for.inc169, !dbg !5907

for.inc169:                                       ; preds = %for.body168
  %103 = load i32, i32* %i, align 4, !dbg !5908
  %inc170 = add nsw i32 %103, 1, !dbg !5908
  store i32 %inc170, i32* %i, align 4, !dbg !5908
  br label %for.cond151, !dbg !5909, !llvm.loop !5910

for.end171:                                       ; preds = %cond.end164
  br label %if.end198, !dbg !5912

if.else172:                                       ; preds = %if.end147
  call void @llvm.dbg.declare(metadata i8* %uc173, metadata !5913, metadata !DIExpression()), !dbg !5915
  store i32 0, i32* %i, align 4, !dbg !5916
  br label %for.cond174, !dbg !5918

for.cond174:                                      ; preds = %for.inc195, %if.else172
  %104 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5919
  %add.ptr175 = getelementptr inbounds %struct.function, %struct.function* %104, i64 0, !dbg !5919
  %eh176 = getelementptr inbounds %struct.function, %struct.function* %add.ptr175, i32 0, i32 0, !dbg !5919
  %105 = load %struct.eh_status*, %struct.eh_status** %eh176, align 8, !dbg !5919
  %ehspec_data177 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %105, i32 0, i32 5, !dbg !5919
  %other178 = bitcast %union.eh_status_u* %ehspec_data177 to %struct.VEC_uchar_gc**, !dbg !5919
  %106 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other178, align 8, !dbg !5919
  %tobool179 = icmp ne %struct.VEC_uchar_gc* %106, null, !dbg !5919
  br i1 %tobool179, label %cond.true180, label %cond.false186, !dbg !5919

cond.true180:                                     ; preds = %for.cond174
  %107 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5919
  %add.ptr181 = getelementptr inbounds %struct.function, %struct.function* %107, i64 0, !dbg !5919
  %eh182 = getelementptr inbounds %struct.function, %struct.function* %add.ptr181, i32 0, i32 0, !dbg !5919
  %108 = load %struct.eh_status*, %struct.eh_status** %eh182, align 8, !dbg !5919
  %ehspec_data183 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %108, i32 0, i32 5, !dbg !5919
  %other184 = bitcast %union.eh_status_u* %ehspec_data183 to %struct.VEC_uchar_gc**, !dbg !5919
  %109 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other184, align 8, !dbg !5919
  %base185 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %109, i32 0, i32 0, !dbg !5919
  br label %cond.end187, !dbg !5919

cond.false186:                                    ; preds = %for.cond174
  br label %cond.end187, !dbg !5919

cond.end187:                                      ; preds = %cond.false186, %cond.true180
  %cond188 = phi %struct.VEC_uchar_base* [ %base185, %cond.true180 ], [ null, %cond.false186 ], !dbg !5919
  %110 = load i32, i32* %i, align 4, !dbg !5919
  %call189 = call i32 @VEC_uchar_base_iterate(%struct.VEC_uchar_base* %cond188, i32 %110, i8* %uc173), !dbg !5919
  %tobool190 = icmp ne i32 %call189, 0, !dbg !5921
  br i1 %tobool190, label %for.body191, label %for.end197, !dbg !5921

for.body191:                                      ; preds = %cond.end187
  %111 = load i8, i8* %uc173, align 1, !dbg !5922
  %conv192 = zext i8 %111 to i64, !dbg !5922
  %112 = load i32, i32* %i, align 4, !dbg !5923
  %tobool193 = icmp ne i32 %112, 0, !dbg !5923
  %113 = zext i1 %tobool193 to i64, !dbg !5923
  %cond194 = select i1 %tobool193, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.53, i64 0, i64 0), !dbg !5923
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv192, i8* %cond194), !dbg !5924
  br label %for.inc195, !dbg !5924

for.inc195:                                       ; preds = %for.body191
  %114 = load i32, i32* %i, align 4, !dbg !5925
  %inc196 = add nsw i32 %114, 1, !dbg !5925
  store i32 %inc196, i32* %i, align 4, !dbg !5925
  br label %for.cond174, !dbg !5926, !llvm.loop !5927

for.end197:                                       ; preds = %cond.end187
  br label %if.end198

if.end198:                                        ; preds = %for.end197, %for.end171
  ret void, !dbg !5929
}

declare dso_local void @switch_to_section(%union.section*) #2

declare dso_local %union.section* @current_function_section() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_eh_throw_stmt_table(%struct.function* %fun, %struct.htab* %table) #0 !dbg !5930 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %table.addr = alloca %struct.htab*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5933, metadata !DIExpression()), !dbg !5934
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !5935, metadata !DIExpression()), !dbg !5936
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5937
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5938
  %eh = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 0, !dbg !5939
  %2 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5939
  %throw_stmt_table = getelementptr inbounds %struct.eh_status, %struct.eh_status* %2, i32 0, i32 3, !dbg !5940
  store %struct.htab* %0, %struct.htab** %throw_stmt_table, align 8, !dbg !5941
  ret void, !dbg !5942
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.htab* @get_eh_throw_stmt_table(%struct.function* %fun) #0 !dbg !5943 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5946, metadata !DIExpression()), !dbg !5947
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5948
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !5949
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5949
  %throw_stmt_table = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 3, !dbg !5950
  %2 = load %struct.htab*, %struct.htab** %throw_stmt_table, align 8, !dbg !5950
  ret %struct.htab* %2, !dbg !5951
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @function_needs_eh_personality(%struct.function* %fn) #0 !dbg !5952 {
entry:
  %retval = alloca i32, align 4
  %fn.addr = alloca %struct.function*, align 8
  %kind = alloca i32, align 4
  %i = alloca %struct.eh_region_d*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5955, metadata !DIExpression()), !dbg !5956
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !5957, metadata !DIExpression()), !dbg !5958
  store i32 0, i32* %kind, align 4, !dbg !5958
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %i, metadata !5959, metadata !DIExpression()), !dbg !5960
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5961
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !5961
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5961
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !5961
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !5961
  store %struct.eh_region_d* %2, %struct.eh_region_d** %i, align 8, !dbg !5961
  br label %for.cond, !dbg !5961

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !5963
  %cmp = icmp ne %struct.eh_region_d* %3, null, !dbg !5963
  br i1 %cmp, label %for.body, label %for.end, !dbg !5961

for.body:                                         ; preds = %for.cond
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !5965
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 4, !dbg !5967
  %5 = load i32, i32* %type, align 4, !dbg !5967
  switch i32 %5, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb1
    i32 3, label %sw.bb2
  ], !dbg !5968

sw.bb:                                            ; preds = %for.body
  store i32 1, i32* %kind, align 4, !dbg !5969
  br label %sw.epilog, !dbg !5971

sw.bb1:                                           ; preds = %for.body, %for.body
  store i32 2, i32* %retval, align 4, !dbg !5972
  br label %return, !dbg !5972

sw.bb2:                                           ; preds = %for.body
  store i32 2, i32* %retval, align 4, !dbg !5973
  br label %return, !dbg !5973

sw.epilog:                                        ; preds = %for.body, %sw.bb
  br label %for.inc, !dbg !5974

for.inc:                                          ; preds = %sw.epilog
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !5963
  %call = call %struct.eh_region_d* @ehr_next(%struct.eh_region_d* %6, %struct.eh_region_d* null), !dbg !5963
  store %struct.eh_region_d* %call, %struct.eh_region_d** %i, align 8, !dbg !5963
  br label %for.cond, !dbg !5963, !llvm.loop !5975

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %kind, align 4, !dbg !5977
  store i32 %7, i32* %retval, align 4, !dbg !5978
  br label %return, !dbg !5978

return:                                           ; preds = %for.end, %sw.bb2, %sw.bb1
  %8 = load i32, i32* %retval, align 4, !dbg !5979
  ret i32 %8, !dbg !5979
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @ehr_next(%struct.eh_region_d* %r, %struct.eh_region_d* %start) #0 !dbg !5980 {
entry:
  %retval = alloca %struct.eh_region_d*, align 8
  %r.addr = alloca %struct.eh_region_d*, align 8
  %start.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %r, %struct.eh_region_d** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  store %struct.eh_region_d* %start, %struct.eh_region_d** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %start.addr, metadata !5985, metadata !DIExpression()), !dbg !5986
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !5987
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 1, !dbg !5989
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !5989
  %tobool = icmp ne %struct.eh_region_d* %1, null, !dbg !5987
  br i1 %tobool, label %if.then, label %if.else, !dbg !5990

if.then:                                          ; preds = %entry
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !5991
  %inner1 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 1, !dbg !5992
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %inner1, align 8, !dbg !5992
  store %struct.eh_region_d* %3, %struct.eh_region_d** %r.addr, align 8, !dbg !5993
  br label %if.end12, !dbg !5994

if.else:                                          ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !5995
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 2, !dbg !5997
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !5997
  %tobool2 = icmp ne %struct.eh_region_d* %5, null, !dbg !5995
  br i1 %tobool2, label %land.lhs.true, label %if.else5, !dbg !5998

land.lhs.true:                                    ; preds = %if.else
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !5999
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %start.addr, align 8, !dbg !6000
  %cmp = icmp ne %struct.eh_region_d* %6, %7, !dbg !6001
  br i1 %cmp, label %if.then3, label %if.else5, !dbg !6002

if.then3:                                         ; preds = %land.lhs.true
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6003
  %next_peer4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 2, !dbg !6004
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer4, align 8, !dbg !6004
  store %struct.eh_region_d* %9, %struct.eh_region_d** %r.addr, align 8, !dbg !6005
  br label %if.end11, !dbg !6006

if.else5:                                         ; preds = %land.lhs.true, %if.else
  br label %do.body, !dbg !6007

do.body:                                          ; preds = %do.cond, %if.else5
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6009
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 0, !dbg !6011
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !6011
  store %struct.eh_region_d* %11, %struct.eh_region_d** %r.addr, align 8, !dbg !6012
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6013
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %start.addr, align 8, !dbg !6015
  %cmp6 = icmp eq %struct.eh_region_d* %12, %13, !dbg !6016
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !6017

if.then7:                                         ; preds = %do.body
  store %struct.eh_region_d* null, %struct.eh_region_d** %retval, align 8, !dbg !6018
  br label %return, !dbg !6018

if.end:                                           ; preds = %do.body
  br label %do.cond, !dbg !6019

do.cond:                                          ; preds = %if.end
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6020
  %next_peer8 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 2, !dbg !6021
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer8, align 8, !dbg !6021
  %cmp9 = icmp eq %struct.eh_region_d* %15, null, !dbg !6022
  br i1 %cmp9, label %do.body, label %do.end, !dbg !6019, !llvm.loop !6023

do.end:                                           ; preds = %do.cond
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6025
  %next_peer10 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 2, !dbg !6026
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer10, align 8, !dbg !6026
  store %struct.eh_region_d* %17, %struct.eh_region_d** %r.addr, align 8, !dbg !6027
  br label %if.end11

if.end11:                                         ; preds = %do.end, %if.then3
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6028
  store %struct.eh_region_d* %18, %struct.eh_region_d** %retval, align 8, !dbg !6029
  br label %return, !dbg !6029

return:                                           ; preds = %if.end12, %if.then7
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %retval, align 8, !dbg !6030
  ret %struct.eh_region_d* %19, !dbg !6030
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_eh_tree(%struct._IO_FILE* %out, %struct.function* %fun) #0 !dbg !2585 {
entry:
  %out.addr = alloca %struct._IO_FILE*, align 8
  %fun.addr = alloca %struct.function*, align 8
  %i = alloca %struct.eh_region_d*, align 8
  %depth = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %lab = alloca %struct.rtx_def*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  store %struct._IO_FILE* %out, %struct._IO_FILE** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %out.addr, metadata !6031, metadata !DIExpression()), !dbg !6032
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %i, metadata !6035, metadata !DIExpression()), !dbg !6036
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !6037, metadata !DIExpression()), !dbg !6038
  store i32 0, i32* %depth, align 4, !dbg !6038
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6039
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !6040
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !6040
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !6041
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !6041
  store %struct.eh_region_d* %2, %struct.eh_region_d** %i, align 8, !dbg !6042
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6043
  %tobool = icmp ne %struct.eh_region_d* %3, null, !dbg !6043
  br i1 %tobool, label %if.end, label %if.then, !dbg !6045

if.then:                                          ; preds = %entry
  br label %return, !dbg !6046

if.end:                                           ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6047
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)), !dbg !6048
  br label %while.body, !dbg !6049

while.body:                                       ; preds = %if.end, %if.end104
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6050
  %6 = load i32, i32* %depth, align 4, !dbg !6052
  %mul = mul nsw i32 %6, 2, !dbg !6053
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6054
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %7, i32 0, i32 3, !dbg !6055
  %8 = load i32, i32* %index, align 8, !dbg !6055
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6056
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %9, i32 0, i32 4, !dbg !6057
  %10 = load i32, i32* %type, align 4, !dbg !6057
  %idxprom = sext i32 %10 to i64, !dbg !6058
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* @dump_eh_tree.type_name, i64 0, i64 %idxprom, !dbg !6058
  %11 = load i8*, i8** %arrayidx, align 8, !dbg !6058
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0), i32 %mul, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), i32 %8, i8* %11), !dbg !6059
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6060
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %12, i32 0, i32 6, !dbg !6062
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !6062
  %tobool2 = icmp ne %struct.eh_landing_pad_d* %13, null, !dbg !6060
  br i1 %tobool2, label %if.then3, label %if.end59, !dbg !6063

if.then3:                                         ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !6064, metadata !DIExpression()), !dbg !6066
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6067
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0)), !dbg !6068
  %call5 = call i32 @current_ir_type(), !dbg !6069
  %cmp = icmp eq i32 %call5, 0, !dbg !6071
  br i1 %cmp, label %if.then6, label %if.else, !dbg !6072

if.then6:                                         ; preds = %if.then3
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6073
  %landing_pads7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %15, i32 0, i32 6, !dbg !6076
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads7, align 8, !dbg !6076
  store %struct.eh_landing_pad_d* %16, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6077
  br label %for.cond, !dbg !6078

for.cond:                                         ; preds = %for.inc, %if.then6
  %17 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6079
  %tobool8 = icmp ne %struct.eh_landing_pad_d* %17, null, !dbg !6081
  br i1 %tobool8, label %for.body, label %for.end, !dbg !6081

for.body:                                         ; preds = %for.cond
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6082
  %19 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6084
  %index9 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %19, i32 0, i32 4, !dbg !6085
  %20 = load i32, i32* %index9, align 8, !dbg !6085
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i32 %20), !dbg !6086
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6087
  %22 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6088
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %22, i32 0, i32 2, !dbg !6089
  %23 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !6089
  call void @print_generic_expr(%struct._IO_FILE* %21, %union.tree_node* %23, i32 0), !dbg !6090
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6091
  %call11 = call i32 @fputc(i32 125, %struct._IO_FILE* %24), !dbg !6092
  %25 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6093
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %25, i32 0, i32 0, !dbg !6095
  %26 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !6095
  %tobool12 = icmp ne %struct.eh_landing_pad_d* %26, null, !dbg !6093
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !6096

if.then13:                                        ; preds = %for.body
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6097
  %call14 = call i32 @fputc(i32 44, %struct._IO_FILE* %27), !dbg !6098
  br label %if.end15, !dbg !6098

if.end15:                                         ; preds = %if.then13, %for.body
  br label %for.inc, !dbg !6099

for.inc:                                          ; preds = %if.end15
  %28 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6100
  %next_lp16 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %28, i32 0, i32 0, !dbg !6101
  %29 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp16, align 8, !dbg !6101
  store %struct.eh_landing_pad_d* %29, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6102
  br label %for.cond, !dbg !6103, !llvm.loop !6104

for.end:                                          ; preds = %for.cond
  br label %if.end58, !dbg !6106

if.else:                                          ; preds = %if.then3
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6107
  %landing_pads17 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %30, i32 0, i32 6, !dbg !6110
  %31 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads17, align 8, !dbg !6110
  store %struct.eh_landing_pad_d* %31, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6111
  br label %for.cond18, !dbg !6112

for.cond18:                                       ; preds = %for.inc21, %if.else
  %32 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6113
  %tobool19 = icmp ne %struct.eh_landing_pad_d* %32, null, !dbg !6115
  br i1 %tobool19, label %for.body20, label %for.end23, !dbg !6115

for.body20:                                       ; preds = %for.cond18
  br label %for.inc21, !dbg !6115

for.inc21:                                        ; preds = %for.body20
  %33 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6116
  %next_lp22 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %33, i32 0, i32 0, !dbg !6117
  %34 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp22, align 8, !dbg !6117
  store %struct.eh_landing_pad_d* %34, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6118
  br label %for.cond18, !dbg !6119, !llvm.loop !6120

for.end23:                                        ; preds = %for.cond18
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6122
  %36 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6124
  %index24 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %36, i32 0, i32 4, !dbg !6125
  %37 = load i32, i32* %index24, align 8, !dbg !6125
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i32 %37), !dbg !6126
  %38 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6127
  %landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %38, i32 0, i32 3, !dbg !6129
  %39 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !6129
  %tobool26 = icmp ne %struct.rtx_def* %39, null, !dbg !6127
  br i1 %tobool26, label %if.then27, label %if.else33, !dbg !6130

if.then27:                                        ; preds = %for.end23
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6131
  %41 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6132
  %landing_pad28 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %41, i32 0, i32 3, !dbg !6132
  %42 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad28, align 8, !dbg !6132
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6132
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6132
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6132
  %rt_int = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !6132
  %43 = load i32, i32* %rt_int, align 8, !dbg !6132
  %44 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6133
  %landing_pad30 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %44, i32 0, i32 3, !dbg !6133
  %45 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad30, align 8, !dbg !6133
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !6133
  %bf.load = load i32, i32* %46, align 8, !dbg !6133
  %bf.clear = and i32 %bf.load, 65535, !dbg !6133
  %cmp31 = icmp eq i32 %bf.clear, 13, !dbg !6133
  %47 = zext i1 %cmp31 to i64, !dbg !6133
  %cond = select i1 %cmp31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), !dbg !6133
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i32 %43, i8* %cond), !dbg !6134
  br label %if.end35, !dbg !6134

if.else33:                                        ; preds = %for.end23
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6135
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)), !dbg !6136
  br label %if.end35

if.end35:                                         ; preds = %if.else33, %if.then27
  %49 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6137
  %post_landing_pad36 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %49, i32 0, i32 2, !dbg !6139
  %50 = load %union.tree_node*, %union.tree_node** %post_landing_pad36, align 8, !dbg !6139
  %tobool37 = icmp ne %union.tree_node* %50, null, !dbg !6137
  br i1 %tobool37, label %if.then38, label %if.else50, !dbg !6140

if.then38:                                        ; preds = %if.end35
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab, metadata !6141, metadata !DIExpression()), !dbg !6143
  %51 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6144
  %post_landing_pad39 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %51, i32 0, i32 2, !dbg !6145
  %52 = load %union.tree_node*, %union.tree_node** %post_landing_pad39, align 8, !dbg !6145
  %call40 = call %struct.rtx_def* @label_rtx(%union.tree_node* %52), !dbg !6146
  store %struct.rtx_def* %call40, %struct.rtx_def** %lab, align 8, !dbg !6143
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6147
  %54 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !6148
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6148
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6148
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !6148
  %rt_int44 = bitcast %union.rtunion_def* %arrayidx43 to i32*, !dbg !6148
  %55 = load i32, i32* %rt_int44, align 8, !dbg !6148
  %56 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !6149
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !6149
  %bf.load45 = load i32, i32* %57, align 8, !dbg !6149
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !6149
  %cmp47 = icmp eq i32 %bf.clear46, 13, !dbg !6149
  %58 = zext i1 %cmp47 to i64, !dbg !6149
  %cond48 = select i1 %cmp47, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), !dbg !6149
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0), i32 %55, i8* %cond48), !dbg !6150
  br label %if.end52, !dbg !6151

if.else50:                                        ; preds = %if.end35
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6152
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0)), !dbg !6153
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then38
  %60 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6154
  %next_lp53 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %60, i32 0, i32 0, !dbg !6156
  %61 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp53, align 8, !dbg !6156
  %tobool54 = icmp ne %struct.eh_landing_pad_d* %61, null, !dbg !6154
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !6157

if.then55:                                        ; preds = %if.end52
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6158
  %call56 = call i32 @fputc(i32 44, %struct._IO_FILE* %62), !dbg !6159
  br label %if.end57, !dbg !6159

if.end57:                                         ; preds = %if.then55, %if.end52
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %for.end
  br label %if.end59, !dbg !6160

if.end59:                                         ; preds = %if.end58, %while.body
  %63 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6161
  %type60 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %63, i32 0, i32 4, !dbg !6162
  %64 = load i32, i32* %type60, align 4, !dbg !6162
  switch i32 %64, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb
    i32 1, label %sw.bb61
    i32 2, label %sw.bb82
  ], !dbg !6163

sw.bb:                                            ; preds = %if.end59, %if.end59
  br label %sw.epilog, !dbg !6164

sw.bb61:                                          ; preds = %if.end59
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !6166, metadata !DIExpression()), !dbg !6168
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6169
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0)), !dbg !6170
  %66 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6171
  %u63 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %66, i32 0, i32 5, !dbg !6173
  %eh_try = bitcast %union.eh_region_u* %u63 to %struct.eh_region_u_try*, !dbg !6174
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !6175
  %67 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !6175
  store %struct.eh_catch_d* %67, %struct.eh_catch_d** %c, align 8, !dbg !6176
  br label %for.cond64, !dbg !6177

for.cond64:                                       ; preds = %for.inc79, %sw.bb61
  %68 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6178
  %tobool65 = icmp ne %struct.eh_catch_d* %68, null, !dbg !6180
  br i1 %tobool65, label %for.body66, label %for.end81, !dbg !6180

for.body66:                                       ; preds = %for.cond64
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6181
  %call67 = call i32 @fputc(i32 123, %struct._IO_FILE* %69), !dbg !6183
  %70 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6184
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %70, i32 0, i32 4, !dbg !6186
  %71 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !6186
  %tobool68 = icmp ne %union.tree_node* %71, null, !dbg !6184
  br i1 %tobool68, label %if.then69, label %if.end73, !dbg !6187

if.then69:                                        ; preds = %for.body66
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6188
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)), !dbg !6190
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6191
  %74 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6192
  %label71 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %74, i32 0, i32 4, !dbg !6193
  %75 = load %union.tree_node*, %union.tree_node** %label71, align 8, !dbg !6193
  call void @print_generic_expr(%struct._IO_FILE* %73, %union.tree_node* %75, i32 0), !dbg !6194
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6195
  %call72 = call i32 @fputc(i32 59, %struct._IO_FILE* %76), !dbg !6196
  br label %if.end73, !dbg !6197

if.end73:                                         ; preds = %if.then69, %for.body66
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6198
  %78 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6199
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %78, i32 0, i32 2, !dbg !6200
  %79 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !6200
  call void @print_generic_expr(%struct._IO_FILE* %77, %union.tree_node* %79, i32 0), !dbg !6201
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6202
  %call74 = call i32 @fputc(i32 125, %struct._IO_FILE* %80), !dbg !6203
  %81 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6204
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %81, i32 0, i32 0, !dbg !6206
  %82 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !6206
  %tobool75 = icmp ne %struct.eh_catch_d* %82, null, !dbg !6204
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !6207

if.then76:                                        ; preds = %if.end73
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6208
  %call77 = call i32 @fputc(i32 44, %struct._IO_FILE* %83), !dbg !6209
  br label %if.end78, !dbg !6209

if.end78:                                         ; preds = %if.then76, %if.end73
  br label %for.inc79, !dbg !6210

for.inc79:                                        ; preds = %if.end78
  %84 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !6211
  %next_catch80 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %84, i32 0, i32 0, !dbg !6212
  %85 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch80, align 8, !dbg !6212
  store %struct.eh_catch_d* %85, %struct.eh_catch_d** %c, align 8, !dbg !6213
  br label %for.cond64, !dbg !6214, !llvm.loop !6215

for.end81:                                        ; preds = %for.cond64
  br label %sw.epilog, !dbg !6217

sw.bb82:                                          ; preds = %if.end59
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6218
  %87 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6219
  %u83 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %87, i32 0, i32 5, !dbg !6220
  %allowed = bitcast %union.eh_region_u* %u83 to %struct.eh_region_u_allowed*, !dbg !6221
  %filter = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 2, !dbg !6222
  %88 = load i32, i32* %filter, align 8, !dbg !6222
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0), i32 %88), !dbg !6223
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6224
  %90 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6225
  %u85 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %90, i32 0, i32 5, !dbg !6226
  %allowed86 = bitcast %union.eh_region_u* %u85 to %struct.eh_region_u_allowed*, !dbg !6227
  %type_list87 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed86, i32 0, i32 0, !dbg !6228
  %91 = load %union.tree_node*, %union.tree_node** %type_list87, align 8, !dbg !6228
  call void @print_generic_expr(%struct._IO_FILE* %89, %union.tree_node* %91, i32 0), !dbg !6229
  br label %sw.epilog, !dbg !6230

sw.epilog:                                        ; preds = %if.end59, %sw.bb82, %for.end81, %sw.bb
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %out.addr, align 8, !dbg !6231
  %call88 = call i32 @fputc(i32 10, %struct._IO_FILE* %92), !dbg !6232
  %93 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6233
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %93, i32 0, i32 1, !dbg !6235
  %94 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !6235
  %tobool89 = icmp ne %struct.eh_region_d* %94, null, !dbg !6233
  br i1 %tobool89, label %if.then90, label %if.else92, !dbg !6236

if.then90:                                        ; preds = %sw.epilog
  %95 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6237
  %inner91 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %95, i32 0, i32 1, !dbg !6238
  %96 = load %struct.eh_region_d*, %struct.eh_region_d** %inner91, align 8, !dbg !6238
  store %struct.eh_region_d* %96, %struct.eh_region_d** %i, align 8, !dbg !6239
  %97 = load i32, i32* %depth, align 4, !dbg !6240
  %inc = add nsw i32 %97, 1, !dbg !6240
  store i32 %inc, i32* %depth, align 4, !dbg !6240
  br label %if.end104, !dbg !6241

if.else92:                                        ; preds = %sw.epilog
  %98 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6242
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %98, i32 0, i32 2, !dbg !6244
  %99 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !6244
  %tobool93 = icmp ne %struct.eh_region_d* %99, null, !dbg !6242
  br i1 %tobool93, label %if.then94, label %if.else96, !dbg !6245

if.then94:                                        ; preds = %if.else92
  %100 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6246
  %next_peer95 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %100, i32 0, i32 2, !dbg !6247
  %101 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer95, align 8, !dbg !6247
  store %struct.eh_region_d* %101, %struct.eh_region_d** %i, align 8, !dbg !6248
  br label %if.end103, !dbg !6249

if.else96:                                        ; preds = %if.else92
  br label %do.body, !dbg !6250

do.body:                                          ; preds = %do.cond, %if.else96
  %102 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6252
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %102, i32 0, i32 0, !dbg !6254
  %103 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !6254
  store %struct.eh_region_d* %103, %struct.eh_region_d** %i, align 8, !dbg !6255
  %104 = load i32, i32* %depth, align 4, !dbg !6256
  %dec = add nsw i32 %104, -1, !dbg !6256
  store i32 %dec, i32* %depth, align 4, !dbg !6256
  %105 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6257
  %cmp97 = icmp eq %struct.eh_region_d* %105, null, !dbg !6259
  br i1 %cmp97, label %if.then98, label %if.end99, !dbg !6260

if.then98:                                        ; preds = %do.body
  br label %return, !dbg !6261

if.end99:                                         ; preds = %do.body
  br label %do.cond, !dbg !6262

do.cond:                                          ; preds = %if.end99
  %106 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6263
  %next_peer100 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %106, i32 0, i32 2, !dbg !6264
  %107 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer100, align 8, !dbg !6264
  %cmp101 = icmp eq %struct.eh_region_d* %107, null, !dbg !6265
  br i1 %cmp101, label %do.body, label %do.end, !dbg !6262, !llvm.loop !6266

do.end:                                           ; preds = %do.cond
  %108 = load %struct.eh_region_d*, %struct.eh_region_d** %i, align 8, !dbg !6268
  %next_peer102 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %108, i32 0, i32 2, !dbg !6269
  %109 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer102, align 8, !dbg !6269
  store %struct.eh_region_d* %109, %struct.eh_region_d** %i, align 8, !dbg !6270
  br label %if.end103

if.end103:                                        ; preds = %do.end, %if.then94
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then90
  br label %while.body, !dbg !6049, !llvm.loop !6271

return:                                           ; preds = %if.then98, %if.then
  ret void, !dbg !6273
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i32 @current_ir_type() #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

declare dso_local %struct.rtx_def* @label_rtx(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_eh_tree(%struct.function* %fn) #0 !dbg !6274 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !6277, metadata !DIExpression()), !dbg !6278
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6279
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6280
  call void @dump_eh_tree(%struct._IO_FILE* %0, %struct.function* %1), !dbg !6281
  ret void, !dbg !6282
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_eh_tree(%struct.function* %fun) #0 !dbg !6283 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %outer = alloca %struct.eh_region_d*, align 8
  %nvisited_lp = alloca i32, align 4
  %nvisited_r = alloca i32, align 4
  %count_lp = alloca i32, align 4
  %count_r = alloca i32, align 4
  %depth = alloca i32, align 4
  %i = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %err = alloca i8, align 1
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %outer, metadata !6288, metadata !DIExpression()), !dbg !6289
  call void @llvm.dbg.declare(metadata i32* %nvisited_lp, metadata !6290, metadata !DIExpression()), !dbg !6291
  call void @llvm.dbg.declare(metadata i32* %nvisited_r, metadata !6292, metadata !DIExpression()), !dbg !6293
  call void @llvm.dbg.declare(metadata i32* %count_lp, metadata !6294, metadata !DIExpression()), !dbg !6295
  call void @llvm.dbg.declare(metadata i32* %count_r, metadata !6296, metadata !DIExpression()), !dbg !6297
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !6298, metadata !DIExpression()), !dbg !6299
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6300, metadata !DIExpression()), !dbg !6301
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !6302, metadata !DIExpression()), !dbg !6303
  call void @llvm.dbg.declare(metadata i8* %err, metadata !6304, metadata !DIExpression()), !dbg !6305
  store i8 0, i8* %err, align 1, !dbg !6305
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6306
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !6308
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !6308
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !6309
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !6309
  %tobool = icmp ne %struct.eh_region_d* %2, null, !dbg !6306
  br i1 %tobool, label %if.end, label %if.then, !dbg !6310

if.then:                                          ; preds = %entry
  br label %if.end123, !dbg !6311

if.end:                                           ; preds = %entry
  store i32 0, i32* %count_r, align 4, !dbg !6312
  store i32 1, i32* %i, align 4, !dbg !6313
  br label %for.cond, !dbg !6315

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6316
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !6316
  %4 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !6316
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 1, !dbg !6316
  %5 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !6316
  %tobool2 = icmp ne %struct.VEC_eh_region_gc* %5, null, !dbg !6316
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !6316

cond.true:                                        ; preds = %for.cond
  %6 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6316
  %eh3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 0, !dbg !6316
  %7 = load %struct.eh_status*, %struct.eh_status** %eh3, align 8, !dbg !6316
  %region_array4 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 1, !dbg !6316
  %8 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array4, align 8, !dbg !6316
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %8, i32 0, i32 0, !dbg !6316
  br label %cond.end, !dbg !6316

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6316

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6316
  %9 = load i32, i32* %i, align 4, !dbg !6316
  %call = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond, i32 %9, %struct.eh_region_d** %r), !dbg !6316
  %tobool5 = icmp ne i32 %call, 0, !dbg !6318
  br i1 %tobool5, label %for.body, label %for.end, !dbg !6318

for.body:                                         ; preds = %cond.end
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6319
  %tobool6 = icmp ne %struct.eh_region_d* %10, null, !dbg !6319
  br i1 %tobool6, label %if.then7, label %if.end11, !dbg !6321

if.then7:                                         ; preds = %for.body
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6322
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %11, i32 0, i32 3, !dbg !6325
  %12 = load i32, i32* %index, align 8, !dbg !6325
  %13 = load i32, i32* %i, align 4, !dbg !6326
  %cmp = icmp eq i32 %12, %13, !dbg !6327
  br i1 %cmp, label %if.then8, label %if.else, !dbg !6328

if.then8:                                         ; preds = %if.then7
  %14 = load i32, i32* %count_r, align 4, !dbg !6329
  %inc = add nsw i32 %14, 1, !dbg !6329
  store i32 %inc, i32* %count_r, align 4, !dbg !6329
  br label %if.end10, !dbg !6330

if.else:                                          ; preds = %if.then7
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6331
  %index9 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %15, i32 0, i32 3, !dbg !6333
  %16 = load i32, i32* %index9, align 8, !dbg !6333
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i32 %16), !dbg !6334
  store i8 1, i8* %err, align 1, !dbg !6335
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then8
  br label %if.end11, !dbg !6336

if.end11:                                         ; preds = %if.end10, %for.body
  br label %for.inc, !dbg !6319

for.inc:                                          ; preds = %if.end11
  %17 = load i32, i32* %i, align 4, !dbg !6337
  %inc12 = add nsw i32 %17, 1, !dbg !6337
  store i32 %inc12, i32* %i, align 4, !dbg !6337
  br label %for.cond, !dbg !6338, !llvm.loop !6339

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %count_lp, align 4, !dbg !6341
  store i32 1, i32* %i, align 4, !dbg !6342
  br label %for.cond13, !dbg !6344

for.cond13:                                       ; preds = %for.inc36, %for.end
  %18 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6345
  %eh14 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 0, !dbg !6345
  %19 = load %struct.eh_status*, %struct.eh_status** %eh14, align 8, !dbg !6345
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %19, i32 0, i32 2, !dbg !6345
  %20 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !6345
  %tobool15 = icmp ne %struct.VEC_eh_landing_pad_gc* %20, null, !dbg !6345
  br i1 %tobool15, label %cond.true16, label %cond.false20, !dbg !6345

cond.true16:                                      ; preds = %for.cond13
  %21 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6345
  %eh17 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 0, !dbg !6345
  %22 = load %struct.eh_status*, %struct.eh_status** %eh17, align 8, !dbg !6345
  %lp_array18 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %22, i32 0, i32 2, !dbg !6345
  %23 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array18, align 8, !dbg !6345
  %base19 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %23, i32 0, i32 0, !dbg !6345
  br label %cond.end21, !dbg !6345

cond.false20:                                     ; preds = %for.cond13
  br label %cond.end21, !dbg !6345

cond.end21:                                       ; preds = %cond.false20, %cond.true16
  %cond22 = phi %struct.VEC_eh_landing_pad_base* [ %base19, %cond.true16 ], [ null, %cond.false20 ], !dbg !6345
  %24 = load i32, i32* %i, align 4, !dbg !6345
  %call23 = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond22, i32 %24, %struct.eh_landing_pad_d** %lp), !dbg !6345
  %tobool24 = icmp ne i32 %call23, 0, !dbg !6347
  br i1 %tobool24, label %for.body25, label %for.end38, !dbg !6347

for.body25:                                       ; preds = %cond.end21
  %25 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6348
  %tobool26 = icmp ne %struct.eh_landing_pad_d* %25, null, !dbg !6348
  br i1 %tobool26, label %if.then27, label %if.end35, !dbg !6350

if.then27:                                        ; preds = %for.body25
  %26 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6351
  %index28 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %26, i32 0, i32 4, !dbg !6354
  %27 = load i32, i32* %index28, align 8, !dbg !6354
  %28 = load i32, i32* %i, align 4, !dbg !6355
  %cmp29 = icmp eq i32 %27, %28, !dbg !6356
  br i1 %cmp29, label %if.then30, label %if.else32, !dbg !6357

if.then30:                                        ; preds = %if.then27
  %29 = load i32, i32* %count_lp, align 4, !dbg !6358
  %inc31 = add nsw i32 %29, 1, !dbg !6358
  store i32 %inc31, i32* %count_lp, align 4, !dbg !6358
  br label %if.end34, !dbg !6359

if.else32:                                        ; preds = %if.then27
  %30 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6360
  %index33 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %30, i32 0, i32 4, !dbg !6362
  %31 = load i32, i32* %index33, align 8, !dbg !6362
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i64 0, i64 0), i32 %31), !dbg !6363
  store i8 1, i8* %err, align 1, !dbg !6364
  br label %if.end34

if.end34:                                         ; preds = %if.else32, %if.then30
  br label %if.end35, !dbg !6365

if.end35:                                         ; preds = %if.end34, %for.body25
  br label %for.inc36, !dbg !6348

for.inc36:                                        ; preds = %if.end35
  %32 = load i32, i32* %i, align 4, !dbg !6366
  %inc37 = add nsw i32 %32, 1, !dbg !6366
  store i32 %inc37, i32* %i, align 4, !dbg !6366
  br label %for.cond13, !dbg !6367, !llvm.loop !6368

for.end38:                                        ; preds = %cond.end21
  store i32 0, i32* %nvisited_r, align 4, !dbg !6370
  store i32 0, i32* %nvisited_lp, align 4, !dbg !6371
  store i32 0, i32* %depth, align 4, !dbg !6372
  store %struct.eh_region_d* null, %struct.eh_region_d** %outer, align 8, !dbg !6373
  %33 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6374
  %eh39 = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 0, !dbg !6375
  %34 = load %struct.eh_status*, %struct.eh_status** %eh39, align 8, !dbg !6375
  %region_tree40 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %34, i32 0, i32 0, !dbg !6376
  %35 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree40, align 8, !dbg !6376
  store %struct.eh_region_d* %35, %struct.eh_region_d** %r, align 8, !dbg !6377
  br label %while.body, !dbg !6378

while.body:                                       ; preds = %for.end38, %if.end111
  %36 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6379
  %eh41 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 0, !dbg !6379
  %37 = load %struct.eh_status*, %struct.eh_status** %eh41, align 8, !dbg !6379
  %region_array42 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %37, i32 0, i32 1, !dbg !6379
  %38 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array42, align 8, !dbg !6379
  %tobool43 = icmp ne %struct.VEC_eh_region_gc* %38, null, !dbg !6379
  br i1 %tobool43, label %cond.true44, label %cond.false48, !dbg !6379

cond.true44:                                      ; preds = %while.body
  %39 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6379
  %eh45 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 0, !dbg !6379
  %40 = load %struct.eh_status*, %struct.eh_status** %eh45, align 8, !dbg !6379
  %region_array46 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %40, i32 0, i32 1, !dbg !6379
  %41 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array46, align 8, !dbg !6379
  %base47 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %41, i32 0, i32 0, !dbg !6379
  br label %cond.end49, !dbg !6379

cond.false48:                                     ; preds = %while.body
  br label %cond.end49, !dbg !6379

cond.end49:                                       ; preds = %cond.false48, %cond.true44
  %cond50 = phi %struct.VEC_eh_region_base* [ %base47, %cond.true44 ], [ null, %cond.false48 ], !dbg !6379
  %42 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6379
  %index51 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %42, i32 0, i32 3, !dbg !6379
  %43 = load i32, i32* %index51, align 8, !dbg !6379
  %call52 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond50, i32 %43), !dbg !6379
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6382
  %cmp53 = icmp ne %struct.eh_region_d* %call52, %44, !dbg !6383
  br i1 %cmp53, label %if.then54, label %if.end56, !dbg !6384

if.then54:                                        ; preds = %cond.end49
  %45 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6385
  %index55 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %45, i32 0, i32 3, !dbg !6387
  %46 = load i32, i32* %index55, align 8, !dbg !6387
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i32 %46), !dbg !6388
  store i8 1, i8* %err, align 1, !dbg !6389
  br label %if.end56, !dbg !6390

if.end56:                                         ; preds = %if.then54, %cond.end49
  %47 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6391
  %outer57 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %47, i32 0, i32 0, !dbg !6393
  %48 = load %struct.eh_region_d*, %struct.eh_region_d** %outer57, align 8, !dbg !6393
  %49 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !6394
  %cmp58 = icmp ne %struct.eh_region_d* %48, %49, !dbg !6395
  br i1 %cmp58, label %if.then59, label %if.end61, !dbg !6396

if.then59:                                        ; preds = %if.end56
  %50 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6397
  %index60 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %50, i32 0, i32 3, !dbg !6399
  %51 = load i32, i32* %index60, align 8, !dbg !6399
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.26, i64 0, i64 0), i32 %51), !dbg !6400
  store i8 1, i8* %err, align 1, !dbg !6401
  br label %if.end61, !dbg !6402

if.end61:                                         ; preds = %if.then59, %if.end56
  %52 = load i32, i32* %depth, align 4, !dbg !6403
  %cmp62 = icmp slt i32 %52, 0, !dbg !6405
  br i1 %cmp62, label %if.then63, label %if.end65, !dbg !6406

if.then63:                                        ; preds = %if.end61
  %53 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6407
  %index64 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %53, i32 0, i32 3, !dbg !6409
  %54 = load i32, i32* %index64, align 8, !dbg !6409
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i64 0, i64 0), i32 %54), !dbg !6410
  store i8 1, i8* %err, align 1, !dbg !6411
  br label %if.end65, !dbg !6412

if.end65:                                         ; preds = %if.then63, %if.end61
  %55 = load i32, i32* %nvisited_r, align 4, !dbg !6413
  %inc66 = add nsw i32 %55, 1, !dbg !6413
  store i32 %inc66, i32* %nvisited_r, align 4, !dbg !6413
  %56 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6414
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %56, i32 0, i32 6, !dbg !6416
  %57 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !6416
  store %struct.eh_landing_pad_d* %57, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6417
  br label %for.cond67, !dbg !6418

for.cond67:                                       ; preds = %for.inc91, %if.end65
  %58 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6419
  %tobool68 = icmp ne %struct.eh_landing_pad_d* %58, null, !dbg !6421
  br i1 %tobool68, label %for.body69, label %for.end92, !dbg !6421

for.body69:                                       ; preds = %for.cond67
  %59 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6422
  %eh70 = getelementptr inbounds %struct.function, %struct.function* %59, i32 0, i32 0, !dbg !6422
  %60 = load %struct.eh_status*, %struct.eh_status** %eh70, align 8, !dbg !6422
  %lp_array71 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %60, i32 0, i32 2, !dbg !6422
  %61 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array71, align 8, !dbg !6422
  %tobool72 = icmp ne %struct.VEC_eh_landing_pad_gc* %61, null, !dbg !6422
  br i1 %tobool72, label %cond.true73, label %cond.false77, !dbg !6422

cond.true73:                                      ; preds = %for.body69
  %62 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6422
  %eh74 = getelementptr inbounds %struct.function, %struct.function* %62, i32 0, i32 0, !dbg !6422
  %63 = load %struct.eh_status*, %struct.eh_status** %eh74, align 8, !dbg !6422
  %lp_array75 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %63, i32 0, i32 2, !dbg !6422
  %64 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array75, align 8, !dbg !6422
  %base76 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %64, i32 0, i32 0, !dbg !6422
  br label %cond.end78, !dbg !6422

cond.false77:                                     ; preds = %for.body69
  br label %cond.end78, !dbg !6422

cond.end78:                                       ; preds = %cond.false77, %cond.true73
  %cond79 = phi %struct.VEC_eh_landing_pad_base* [ %base76, %cond.true73 ], [ null, %cond.false77 ], !dbg !6422
  %65 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6422
  %index80 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %65, i32 0, i32 4, !dbg !6422
  %66 = load i32, i32* %index80, align 8, !dbg !6422
  %call81 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond79, i32 %66), !dbg !6422
  %67 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6425
  %cmp82 = icmp ne %struct.eh_landing_pad_d* %call81, %67, !dbg !6426
  br i1 %cmp82, label %if.then83, label %if.end85, !dbg !6427

if.then83:                                        ; preds = %cond.end78
  %68 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6428
  %index84 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %68, i32 0, i32 4, !dbg !6430
  %69 = load i32, i32* %index84, align 8, !dbg !6430
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i64 0, i64 0), i32 %69), !dbg !6431
  store i8 1, i8* %err, align 1, !dbg !6432
  br label %if.end85, !dbg !6433

if.end85:                                         ; preds = %if.then83, %cond.end78
  %70 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6434
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %70, i32 0, i32 1, !dbg !6436
  %71 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6436
  %72 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6437
  %cmp86 = icmp ne %struct.eh_region_d* %71, %72, !dbg !6438
  br i1 %cmp86, label %if.then87, label %if.end89, !dbg !6439

if.then87:                                        ; preds = %if.end85
  %73 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6440
  %index88 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %73, i32 0, i32 4, !dbg !6442
  %74 = load i32, i32* %index88, align 8, !dbg !6442
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0), i32 %74), !dbg !6443
  store i8 1, i8* %err, align 1, !dbg !6444
  br label %if.end89, !dbg !6445

if.end89:                                         ; preds = %if.then87, %if.end85
  %75 = load i32, i32* %nvisited_lp, align 4, !dbg !6446
  %inc90 = add nsw i32 %75, 1, !dbg !6446
  store i32 %inc90, i32* %nvisited_lp, align 4, !dbg !6446
  br label %for.inc91, !dbg !6447

for.inc91:                                        ; preds = %if.end89
  %76 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6448
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %76, i32 0, i32 0, !dbg !6449
  %77 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !6449
  store %struct.eh_landing_pad_d* %77, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6450
  br label %for.cond67, !dbg !6451, !llvm.loop !6452

for.end92:                                        ; preds = %for.cond67
  %78 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6454
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %78, i32 0, i32 1, !dbg !6456
  %79 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !6456
  %tobool93 = icmp ne %struct.eh_region_d* %79, null, !dbg !6454
  br i1 %tobool93, label %if.then94, label %if.else97, !dbg !6457

if.then94:                                        ; preds = %for.end92
  %80 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6458
  store %struct.eh_region_d* %80, %struct.eh_region_d** %outer, align 8, !dbg !6459
  %81 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6460
  %inner95 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %81, i32 0, i32 1, !dbg !6461
  %82 = load %struct.eh_region_d*, %struct.eh_region_d** %inner95, align 8, !dbg !6461
  store %struct.eh_region_d* %82, %struct.eh_region_d** %r, align 8, !dbg !6462
  %83 = load i32, i32* %depth, align 4, !dbg !6463
  %inc96 = add nsw i32 %83, 1, !dbg !6463
  store i32 %inc96, i32* %depth, align 4, !dbg !6463
  br label %if.end111, !dbg !6464

if.else97:                                        ; preds = %for.end92
  %84 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6465
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %84, i32 0, i32 2, !dbg !6467
  %85 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !6467
  %tobool98 = icmp ne %struct.eh_region_d* %85, null, !dbg !6465
  br i1 %tobool98, label %if.then99, label %if.else101, !dbg !6468

if.then99:                                        ; preds = %if.else97
  %86 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6469
  %next_peer100 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %86, i32 0, i32 2, !dbg !6470
  %87 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer100, align 8, !dbg !6470
  store %struct.eh_region_d* %87, %struct.eh_region_d** %r, align 8, !dbg !6471
  br label %if.end110, !dbg !6472

if.else101:                                       ; preds = %if.else97
  br label %do.body, !dbg !6473

do.body:                                          ; preds = %do.cond, %if.else101
  %88 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6475
  %outer102 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %88, i32 0, i32 0, !dbg !6477
  %89 = load %struct.eh_region_d*, %struct.eh_region_d** %outer102, align 8, !dbg !6477
  store %struct.eh_region_d* %89, %struct.eh_region_d** %r, align 8, !dbg !6478
  %90 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6479
  %cmp103 = icmp eq %struct.eh_region_d* %90, null, !dbg !6481
  br i1 %cmp103, label %if.then104, label %if.end105, !dbg !6482

if.then104:                                       ; preds = %do.body
  br label %region_done, !dbg !6483

if.end105:                                        ; preds = %do.body
  %91 = load i32, i32* %depth, align 4, !dbg !6484
  %dec = add nsw i32 %91, -1, !dbg !6484
  store i32 %dec, i32* %depth, align 4, !dbg !6484
  %92 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6485
  %outer106 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %92, i32 0, i32 0, !dbg !6486
  %93 = load %struct.eh_region_d*, %struct.eh_region_d** %outer106, align 8, !dbg !6486
  store %struct.eh_region_d* %93, %struct.eh_region_d** %outer, align 8, !dbg !6487
  br label %do.cond, !dbg !6488

do.cond:                                          ; preds = %if.end105
  %94 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6489
  %next_peer107 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %94, i32 0, i32 2, !dbg !6490
  %95 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer107, align 8, !dbg !6490
  %cmp108 = icmp eq %struct.eh_region_d* %95, null, !dbg !6491
  br i1 %cmp108, label %do.body, label %do.end, !dbg !6488, !llvm.loop !6492

do.end:                                           ; preds = %do.cond
  %96 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !6494
  %next_peer109 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %96, i32 0, i32 2, !dbg !6495
  %97 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer109, align 8, !dbg !6495
  store %struct.eh_region_d* %97, %struct.eh_region_d** %r, align 8, !dbg !6496
  br label %if.end110

if.end110:                                        ; preds = %do.end, %if.then99
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.then94
  br label %while.body, !dbg !6378, !llvm.loop !6497

region_done:                                      ; preds = %if.then104
  call void @llvm.dbg.label(metadata !6499), !dbg !6500
  %98 = load i32, i32* %depth, align 4, !dbg !6501
  %cmp112 = icmp ne i32 %98, 0, !dbg !6503
  br i1 %cmp112, label %if.then113, label %if.end114, !dbg !6504

if.then113:                                       ; preds = %region_done
  %99 = load i32, i32* %depth, align 4, !dbg !6505
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0), i32 %99), !dbg !6507
  store i8 1, i8* %err, align 1, !dbg !6508
  br label %if.end114, !dbg !6509

if.end114:                                        ; preds = %if.then113, %region_done
  %100 = load i32, i32* %count_r, align 4, !dbg !6510
  %101 = load i32, i32* %nvisited_r, align 4, !dbg !6512
  %cmp115 = icmp ne i32 %100, %101, !dbg !6513
  br i1 %cmp115, label %if.then116, label %if.end117, !dbg !6514

if.then116:                                       ; preds = %if.end114
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.30, i64 0, i64 0)), !dbg !6515
  store i8 1, i8* %err, align 1, !dbg !6517
  br label %if.end117, !dbg !6518

if.end117:                                        ; preds = %if.then116, %if.end114
  %102 = load i32, i32* %count_lp, align 4, !dbg !6519
  %103 = load i32, i32* %nvisited_lp, align 4, !dbg !6521
  %cmp118 = icmp ne i32 %102, %103, !dbg !6522
  br i1 %cmp118, label %if.then119, label %if.end120, !dbg !6523

if.then119:                                       ; preds = %if.end117
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.31, i64 0, i64 0)), !dbg !6524
  store i8 1, i8* %err, align 1, !dbg !6526
  br label %if.end120, !dbg !6527

if.end120:                                        ; preds = %if.then119, %if.end117
  %104 = load i8, i8* %err, align 1, !dbg !6528
  %tobool121 = icmp ne i8 %104, 0, !dbg !6528
  br i1 %tobool121, label %if.then122, label %if.end123, !dbg !6530

if.then122:                                       ; preds = %if.end120
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6531
  %106 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6533
  call void @dump_eh_tree(%struct._IO_FILE* %105, %struct.function* %106), !dbg !6534
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.32, i64 0, i64 0)), !dbg !6535
  br label %if.end123, !dbg !6536

if.end123:                                        ; preds = %if.then, %if.then122, %if.end120
  ret void, !dbg !6537
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @internal_error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_call_site_record_d(i8* %x_p) #0 !dbg !6538 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.call_site_record_d*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6539, metadata !DIExpression()), !dbg !6540
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %x, metadata !6541, metadata !DIExpression()), !dbg !6543
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6544
  %1 = bitcast i8* %0 to %struct.call_site_record_d*, !dbg !6545
  store %struct.call_site_record_d* %1, %struct.call_site_record_d** %x, align 8, !dbg !6543
  %2 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6546
  %cmp = icmp ne %struct.call_site_record_d* %2, null, !dbg !6546
  br i1 %cmp, label %land.lhs.true, label %if.end6, !dbg !6546

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6546
  %4 = bitcast %struct.call_site_record_d* %3 to i8*, !dbg !6546
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !6546
  br i1 %cmp1, label %land.lhs.true2, label %if.end6, !dbg !6546

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6546
  %6 = bitcast %struct.call_site_record_d* %5 to i8*, !dbg !6546
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !6546
  %tobool = icmp ne i32 %call, 0, !dbg !6546
  br i1 %tobool, label %if.end6, label %if.then, !dbg !6548

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !6549

do.body:                                          ; preds = %if.then
  %7 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6551
  %landing_pad = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %7, i32 0, i32 0, !dbg !6551
  %8 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !6551
  %cmp3 = icmp ne %struct.rtx_def* %8, null, !dbg !6551
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !6554

if.then4:                                         ; preds = %do.body
  %9 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6551
  %landing_pad5 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %9, i32 0, i32 0, !dbg !6551
  %10 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad5, align 8, !dbg !6551
  %11 = bitcast %struct.rtx_def* %10 to i8*, !dbg !6551
  call void @gt_ggc_mx_rtx_def(i8* %11), !dbg !6551
  br label %if.end, !dbg !6551

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !6554

do.end:                                           ; preds = %if.end
  br label %if.end6, !dbg !6555

if.end6:                                          ; preds = %do.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !6556
}

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_call_site_record_d(i8* %x_p) #0 !dbg !6557 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.call_site_record_d*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %x, metadata !6560, metadata !DIExpression()), !dbg !6561
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6562
  %1 = bitcast i8* %0 to %struct.call_site_record_d*, !dbg !6563
  store %struct.call_site_record_d* %1, %struct.call_site_record_d** %x, align 8, !dbg !6561
  %2 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6564
  %3 = bitcast %struct.call_site_record_d* %2 to i8*, !dbg !6564
  %4 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6566
  %5 = bitcast %struct.call_site_record_d* %4 to i8*, !dbg !6566
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_18call_site_record_d, i32 127), !dbg !6567
  %tobool = icmp ne i32 %call, 0, !dbg !6567
  br i1 %tobool, label %if.then, label %if.end3, !dbg !6568

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !6569

do.body:                                          ; preds = %if.then
  %6 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6571
  %landing_pad = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %6, i32 0, i32 0, !dbg !6571
  %7 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !6571
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !6571
  br i1 %cmp, label %if.then1, label %if.end, !dbg !6574

if.then1:                                         ; preds = %do.body
  %8 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6571
  %landing_pad2 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %8, i32 0, i32 0, !dbg !6571
  %9 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad2, align 8, !dbg !6571
  %10 = bitcast %struct.rtx_def* %9 to i8*, !dbg !6571
  call void @gt_pch_nx_rtx_def(i8* %10), !dbg !6571
  br label %if.end, !dbg !6571

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !6574

do.end:                                           ; preds = %if.end
  br label %if.end3, !dbg !6575

if.end3:                                          ; preds = %do.end, %entry
  ret void, !dbg !6576
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_18call_site_record_d(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !6577 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.call_site_record_d*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !6581, metadata !DIExpression()), !dbg !6582
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6583, metadata !DIExpression()), !dbg !6584
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !6585, metadata !DIExpression()), !dbg !6586
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %x, metadata !6589, metadata !DIExpression()), !dbg !6590
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6591
  %1 = bitcast i8* %0 to %struct.call_site_record_d*, !dbg !6592
  store %struct.call_site_record_d* %1, %struct.call_site_record_d** %x, align 8, !dbg !6590
  %2 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6593
  %3 = bitcast %struct.call_site_record_d* %2 to i8*, !dbg !6595
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !6596
  %cmp = icmp eq i8* %3, %4, !dbg !6597
  br i1 %cmp, label %if.then, label %if.end, !dbg !6598

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !6599
  %6 = load %struct.call_site_record_d*, %struct.call_site_record_d** %x, align 8, !dbg !6600
  %landing_pad = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %6, i32 0, i32 0, !dbg !6601
  %7 = bitcast %struct.rtx_def** %landing_pad to i8*, !dbg !6602
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !6603
  call void %5(i8* %7, i8* %8), !dbg !6599
  br label %if.end, !dbg !6599

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6604
}

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local void @gt_ggc_m_P9tree_node4htab(i8*) #2

declare dso_local void @gt_pch_n_P9tree_node4htab(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_gc_reserve(%struct.VEC_eh_region_gc** %vec_, i32 %alloc_) #0 !dbg !6605 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_eh_region_gc** %vec_, %struct.VEC_eh_region_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_gc*** %vec_.addr, metadata !6608, metadata !DIExpression()), !dbg !6609
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6610, metadata !DIExpression()), !dbg !6609
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6611, metadata !DIExpression()), !dbg !6609
  %0 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !6609
  %1 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %0, align 8, !dbg !6609
  %tobool = icmp ne %struct.VEC_eh_region_gc* %1, null, !dbg !6609
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6609

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !6609
  %3 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %2, align 8, !dbg !6609
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %3, i32 0, i32 0, !dbg !6609
  br label %cond.end, !dbg !6609

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6609
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6609
  %call = call i32 @VEC_eh_region_base_space(%struct.VEC_eh_region_base* %cond, i32 %4), !dbg !6609
  %tobool1 = icmp ne i32 %call, 0, !dbg !6609
  %lnot = xor i1 %tobool1, true, !dbg !6609
  %lnot.ext = zext i1 %lnot to i32, !dbg !6609
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6609
  %5 = load i32, i32* %extend, align 4, !dbg !6612
  %tobool2 = icmp ne i32 %5, 0, !dbg !6612
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6609

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !6612
  %7 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %6, align 8, !dbg !6612
  %8 = bitcast %struct.VEC_eh_region_gc* %7 to i8*, !dbg !6612
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6612
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6612
  %10 = bitcast i8* %call3 to %struct.VEC_eh_region_gc*, !dbg !6612
  %11 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !6612
  store %struct.VEC_eh_region_gc* %10, %struct.VEC_eh_region_gc** %11, align 8, !dbg !6612
  br label %if.end, !dbg !6612

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6609
  ret i32 %12, !dbg !6609
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d** @VEC_eh_region_base_quick_push(%struct.VEC_eh_region_base* %vec_, %struct.eh_region_d* %obj_) #0 !dbg !6614 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %obj_.addr = alloca %struct.eh_region_d*, align 8
  %slot_ = alloca %struct.eh_region_d**, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6617, metadata !DIExpression()), !dbg !6618
  store %struct.eh_region_d* %obj_, %struct.eh_region_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %obj_.addr, metadata !6619, metadata !DIExpression()), !dbg !6618
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %slot_, metadata !6620, metadata !DIExpression()), !dbg !6618
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6618
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %0, i32 0, i32 0, !dbg !6618
  %1 = load i32, i32* %num, align 8, !dbg !6618
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6618
  %alloc = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 1, !dbg !6618
  %3 = load i32, i32* %alloc, align 4, !dbg !6618
  %cmp = icmp ult i32 %1, %3, !dbg !6618
  %conv = zext i1 %cmp to i32, !dbg !6618
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6618
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 2, !dbg !6618
  %5 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6618
  %num1 = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %5, i32 0, i32 0, !dbg !6618
  %6 = load i32, i32* %num1, align 8, !dbg !6618
  %inc = add i32 %6, 1, !dbg !6618
  store i32 %inc, i32* %num1, align 8, !dbg !6618
  %idxprom = zext i32 %6 to i64, !dbg !6618
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !6618
  store %struct.eh_region_d** %arrayidx, %struct.eh_region_d*** %slot_, align 8, !dbg !6618
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %obj_.addr, align 8, !dbg !6618
  %8 = load %struct.eh_region_d**, %struct.eh_region_d*** %slot_, align 8, !dbg !6618
  store %struct.eh_region_d* %7, %struct.eh_region_d** %8, align 8, !dbg !6618
  %9 = load %struct.eh_region_d**, %struct.eh_region_d*** %slot_, align 8, !dbg !6618
  ret %struct.eh_region_d** %9, !dbg !6618
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_space(%struct.VEC_eh_region_base* %vec_, i32 %alloc_) #0 !dbg !6621 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6624, metadata !DIExpression()), !dbg !6625
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6626, metadata !DIExpression()), !dbg !6625
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6625
  %cmp = icmp sge i32 %0, 0, !dbg !6625
  %conv = zext i1 %cmp to i32, !dbg !6625
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6625
  %tobool = icmp ne %struct.VEC_eh_region_base* %1, null, !dbg !6625
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6625

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6625
  %alloc = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 1, !dbg !6625
  %3 = load i32, i32* %alloc, align 4, !dbg !6625
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6625
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 0, !dbg !6625
  %5 = load i32, i32* %num, align 8, !dbg !6625
  %sub = sub i32 %3, %5, !dbg !6625
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6625
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6625
  %conv2 = zext i1 %cmp1 to i32, !dbg !6625
  br label %cond.end, !dbg !6625

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6625
  %tobool3 = icmp ne i32 %7, 0, !dbg !6625
  %lnot = xor i1 %tobool3, true, !dbg !6625
  %lnot.ext = zext i1 %lnot to i32, !dbg !6625
  br label %cond.end, !dbg !6625

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6625
  ret i32 %cond, !dbg !6625
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_gc_reserve(%struct.VEC_eh_landing_pad_gc** %vec_, i32 %alloc_) #0 !dbg !6627 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_gc** %vec_, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_gc*** %vec_.addr, metadata !6630, metadata !DIExpression()), !dbg !6631
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6632, metadata !DIExpression()), !dbg !6631
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6633, metadata !DIExpression()), !dbg !6631
  %0 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6631
  %1 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %0, align 8, !dbg !6631
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %1, null, !dbg !6631
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6631

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6631
  %3 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %2, align 8, !dbg !6631
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %3, i32 0, i32 0, !dbg !6631
  br label %cond.end, !dbg !6631

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6631

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6631
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6631
  %call = call i32 @VEC_eh_landing_pad_base_space(%struct.VEC_eh_landing_pad_base* %cond, i32 %4), !dbg !6631
  %tobool1 = icmp ne i32 %call, 0, !dbg !6631
  %lnot = xor i1 %tobool1, true, !dbg !6631
  %lnot.ext = zext i1 %lnot to i32, !dbg !6631
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6631
  %5 = load i32, i32* %extend, align 4, !dbg !6634
  %tobool2 = icmp ne i32 %5, 0, !dbg !6634
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6631

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6634
  %7 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %6, align 8, !dbg !6634
  %8 = bitcast %struct.VEC_eh_landing_pad_gc* %7 to i8*, !dbg !6634
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6634
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6634
  %10 = bitcast i8* %call3 to %struct.VEC_eh_landing_pad_gc*, !dbg !6634
  %11 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6634
  store %struct.VEC_eh_landing_pad_gc* %10, %struct.VEC_eh_landing_pad_gc** %11, align 8, !dbg !6634
  br label %if.end, !dbg !6634

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6631
  ret i32 %12, !dbg !6631
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d** @VEC_eh_landing_pad_base_quick_push(%struct.VEC_eh_landing_pad_base* %vec_, %struct.eh_landing_pad_d* %obj_) #0 !dbg !6636 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %obj_.addr = alloca %struct.eh_landing_pad_d*, align 8
  %slot_ = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6639, metadata !DIExpression()), !dbg !6640
  store %struct.eh_landing_pad_d* %obj_, %struct.eh_landing_pad_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %obj_.addr, metadata !6641, metadata !DIExpression()), !dbg !6640
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %slot_, metadata !6642, metadata !DIExpression()), !dbg !6640
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6640
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %0, i32 0, i32 0, !dbg !6640
  %1 = load i32, i32* %num, align 8, !dbg !6640
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6640
  %alloc = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 1, !dbg !6640
  %3 = load i32, i32* %alloc, align 4, !dbg !6640
  %cmp = icmp ult i32 %1, %3, !dbg !6640
  %conv = zext i1 %cmp to i32, !dbg !6640
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6640
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !6640
  %5 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6640
  %num1 = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %5, i32 0, i32 0, !dbg !6640
  %6 = load i32, i32* %num1, align 8, !dbg !6640
  %inc = add i32 %6, 1, !dbg !6640
  store i32 %inc, i32* %num1, align 8, !dbg !6640
  %idxprom = zext i32 %6 to i64, !dbg !6640
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !6640
  store %struct.eh_landing_pad_d** %arrayidx, %struct.eh_landing_pad_d*** %slot_, align 8, !dbg !6640
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %obj_.addr, align 8, !dbg !6640
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %slot_, align 8, !dbg !6640
  store %struct.eh_landing_pad_d* %7, %struct.eh_landing_pad_d** %8, align 8, !dbg !6640
  %9 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %slot_, align 8, !dbg !6640
  ret %struct.eh_landing_pad_d** %9, !dbg !6640
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_space(%struct.VEC_eh_landing_pad_base* %vec_, i32 %alloc_) #0 !dbg !6643 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6646, metadata !DIExpression()), !dbg !6647
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6648, metadata !DIExpression()), !dbg !6647
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6647
  %cmp = icmp sge i32 %0, 0, !dbg !6647
  %conv = zext i1 %cmp to i32, !dbg !6647
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6647
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %1, null, !dbg !6647
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6647

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6647
  %alloc = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 1, !dbg !6647
  %3 = load i32, i32* %alloc, align 4, !dbg !6647
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6647
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 0, !dbg !6647
  %5 = load i32, i32* %num, align 8, !dbg !6647
  %sub = sub i32 %3, %5, !dbg !6647
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6647
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6647
  %conv2 = zext i1 %cmp1 to i32, !dbg !6647
  br label %cond.end, !dbg !6647

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6647
  %tobool3 = icmp ne i32 %7, 0, !dbg !6647
  %lnot = xor i1 %tobool3, true, !dbg !6647
  %lnot.ext = zext i1 %lnot to i32, !dbg !6647
  br label %cond.end, !dbg !6647

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6647
  ret i32 %cond, !dbg !6647
}

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local i32 @type_list_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6649 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6655
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6655
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6655

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6655
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6655
  %2 = load i32, i32* %num, align 8, !dbg !6655
  br label %cond.end, !dbg !6655

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6655

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6655
  ret i32 %cond, !dbg !6655
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !6656 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6660, metadata !DIExpression()), !dbg !6661
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6662, metadata !DIExpression()), !dbg !6661
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6661
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !6661
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6661
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !6661
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !6661
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6661

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6661
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !6661
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !6661
  br label %cond.end, !dbg !6661

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6661
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6661
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !6661
  ret %union.tree_node** %call1, !dbg !6661
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !6663 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6666, metadata !DIExpression()), !dbg !6667
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6668, metadata !DIExpression()), !dbg !6667
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6669, metadata !DIExpression()), !dbg !6667
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6667
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !6667
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !6667
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6667

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6667
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !6667
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !6667
  br label %cond.end, !dbg !6667

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6667

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6667
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6667
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !6667
  %tobool1 = icmp ne i32 %call, 0, !dbg !6667
  %lnot = xor i1 %tobool1, true, !dbg !6667
  %lnot.ext = zext i1 %lnot to i32, !dbg !6667
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6667
  %5 = load i32, i32* %extend, align 4, !dbg !6670
  %tobool2 = icmp ne i32 %5, 0, !dbg !6670
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6667

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6670
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !6670
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !6670
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6670
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6670
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !6670
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6670
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !6670
  br label %if.end, !dbg !6670

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6667
  ret i32 %12, !dbg !6667
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !6672 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6676, metadata !DIExpression()), !dbg !6677
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6678, metadata !DIExpression()), !dbg !6677
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !6679, metadata !DIExpression()), !dbg !6677
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6677
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !6677
  %1 = load i32, i32* %num, align 8, !dbg !6677
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6677
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6677
  %3 = load i32, i32* %alloc, align 4, !dbg !6677
  %cmp = icmp ult i32 %1, %3, !dbg !6677
  %conv = zext i1 %cmp to i32, !dbg !6677
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6677
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6677
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6677
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !6677
  %6 = load i32, i32* %num1, align 8, !dbg !6677
  %inc = add i32 %6, 1, !dbg !6677
  store i32 %inc, i32* %num1, align 8, !dbg !6677
  %idxprom = zext i32 %6 to i64, !dbg !6677
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6677
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !6677
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6677
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6677
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !6677
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6677
  ret %union.tree_node** %9, !dbg !6677
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !6680 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6683, metadata !DIExpression()), !dbg !6684
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6685, metadata !DIExpression()), !dbg !6684
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6684
  %cmp = icmp sge i32 %0, 0, !dbg !6684
  %conv = zext i1 %cmp to i32, !dbg !6684
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6684
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !6684
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6684

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6684
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6684
  %3 = load i32, i32* %alloc, align 4, !dbg !6684
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6684
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !6684
  %5 = load i32, i32* %num, align 8, !dbg !6684
  %sub = sub i32 %3, %5, !dbg !6684
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6684
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6684
  %conv2 = zext i1 %cmp1 to i32, !dbg !6684
  br label %cond.end, !dbg !6684

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6684
  %tobool3 = icmp ne i32 %7, 0, !dbg !6684
  %lnot = xor i1 %tobool3, true, !dbg !6684
  %lnot.ext = zext i1 %lnot to i32, !dbg !6684
  br label %cond.end, !dbg !6684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6684
  ret i32 %cond, !dbg !6684
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %vec_) #0 !dbg !6686 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6692
  %tobool = icmp ne %struct.VEC_uchar_base* %0, null, !dbg !6692
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6692

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6692
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %1, i32 0, i32 0, !dbg !6692
  %2 = load i32, i32* %num, align 4, !dbg !6692
  br label %cond.end, !dbg !6692

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6692

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6692
  ret i32 %cond, !dbg !6692
}

; Function Attrs: noinline nounwind uwtable
define internal void @push_uleb128(%struct.VEC_uchar_gc** %data_area, i32 %value) #0 !dbg !6693 {
entry:
  %data_area.addr = alloca %struct.VEC_uchar_gc**, align 8
  %value.addr = alloca i32, align 4
  %byte = alloca i8, align 1
  store %struct.VEC_uchar_gc** %data_area, %struct.VEC_uchar_gc*** %data_area.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %data_area.addr, metadata !6697, metadata !DIExpression()), !dbg !6698
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !6699, metadata !DIExpression()), !dbg !6700
  br label %do.body, !dbg !6701

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8* %byte, metadata !6702, metadata !DIExpression()), !dbg !6704
  %0 = load i32, i32* %value.addr, align 4, !dbg !6705
  %and = and i32 %0, 127, !dbg !6706
  %conv = trunc i32 %and to i8, !dbg !6705
  store i8 %conv, i8* %byte, align 1, !dbg !6704
  %1 = load i32, i32* %value.addr, align 4, !dbg !6707
  %shr = lshr i32 %1, 7, !dbg !6707
  store i32 %shr, i32* %value.addr, align 4, !dbg !6707
  %2 = load i32, i32* %value.addr, align 4, !dbg !6708
  %tobool = icmp ne i32 %2, 0, !dbg !6708
  br i1 %tobool, label %if.then, label %if.end, !dbg !6710

if.then:                                          ; preds = %do.body
  %3 = load i8, i8* %byte, align 1, !dbg !6711
  %conv1 = zext i8 %3 to i32, !dbg !6711
  %or = or i32 %conv1, 128, !dbg !6711
  %conv2 = trunc i32 %or to i8, !dbg !6711
  store i8 %conv2, i8* %byte, align 1, !dbg !6711
  br label %if.end, !dbg !6712

if.end:                                           ; preds = %if.then, %do.body
  %4 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %data_area.addr, align 8, !dbg !6713
  %5 = load i8, i8* %byte, align 1, !dbg !6713
  %call = call i8* @VEC_uchar_gc_safe_push(%struct.VEC_uchar_gc** %4, i8 zeroext %5), !dbg !6713
  br label %do.cond, !dbg !6714

do.cond:                                          ; preds = %if.end
  %6 = load i32, i32* %value.addr, align 4, !dbg !6715
  %tobool3 = icmp ne i32 %6, 0, !dbg !6714
  br i1 %tobool3, label %do.body, label %do.end, !dbg !6714, !llvm.loop !6716

do.end:                                           ; preds = %do.cond
  ret void, !dbg !6718
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_uchar_gc_safe_push(%struct.VEC_uchar_gc** %vec_, i8 zeroext %obj_) #0 !dbg !6719 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_gc**, align 8
  %obj_.addr = alloca i8, align 1
  store %struct.VEC_uchar_gc** %vec_, %struct.VEC_uchar_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %vec_.addr, metadata !6724, metadata !DIExpression()), !dbg !6725
  store i8 %obj_, i8* %obj_.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %obj_.addr, metadata !6726, metadata !DIExpression()), !dbg !6725
  %0 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6725
  %call = call i32 @VEC_uchar_gc_reserve(%struct.VEC_uchar_gc** %0, i32 1), !dbg !6725
  %1 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6725
  %2 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %1, align 8, !dbg !6725
  %tobool = icmp ne %struct.VEC_uchar_gc* %2, null, !dbg !6725
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6725

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6725
  %4 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %3, align 8, !dbg !6725
  %base = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %4, i32 0, i32 0, !dbg !6725
  br label %cond.end, !dbg !6725

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6725

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_uchar_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6725
  %5 = load i8, i8* %obj_.addr, align 1, !dbg !6725
  %call1 = call i8* @VEC_uchar_base_quick_push(%struct.VEC_uchar_base* %cond, i8 zeroext %5), !dbg !6725
  ret i8* %call1, !dbg !6725
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_gc_reserve(%struct.VEC_uchar_gc** %vec_, i32 %alloc_) #0 !dbg !6727 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_uchar_gc** %vec_, %struct.VEC_uchar_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %vec_.addr, metadata !6730, metadata !DIExpression()), !dbg !6731
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6732, metadata !DIExpression()), !dbg !6731
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6733, metadata !DIExpression()), !dbg !6731
  %0 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6731
  %1 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %0, align 8, !dbg !6731
  %tobool = icmp ne %struct.VEC_uchar_gc* %1, null, !dbg !6731
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6731

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6731
  %3 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %2, align 8, !dbg !6731
  %base = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %3, i32 0, i32 0, !dbg !6731
  br label %cond.end, !dbg !6731

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6731

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_uchar_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6731
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6731
  %call = call i32 @VEC_uchar_base_space(%struct.VEC_uchar_base* %cond, i32 %4), !dbg !6731
  %tobool1 = icmp ne i32 %call, 0, !dbg !6731
  %lnot = xor i1 %tobool1, true, !dbg !6731
  %lnot.ext = zext i1 %lnot to i32, !dbg !6731
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6731
  %5 = load i32, i32* %extend, align 4, !dbg !6734
  %tobool2 = icmp ne i32 %5, 0, !dbg !6734
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6731

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6734
  %7 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %6, align 8, !dbg !6734
  %8 = bitcast %struct.VEC_uchar_gc* %7 to i8*, !dbg !6734
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6734
  %call3 = call i8* @vec_gc_o_reserve(i8* %8, i32 %9, i64 8, i64 1), !dbg !6734
  %10 = bitcast i8* %call3 to %struct.VEC_uchar_gc*, !dbg !6734
  %11 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6734
  store %struct.VEC_uchar_gc* %10, %struct.VEC_uchar_gc** %11, align 8, !dbg !6734
  br label %if.end, !dbg !6734

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6731
  ret i32 %12, !dbg !6731
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_uchar_base_quick_push(%struct.VEC_uchar_base* %vec_, i8 zeroext %obj_) #0 !dbg !6736 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %obj_.addr = alloca i8, align 1
  %slot_ = alloca i8*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  store i8 %obj_, i8* %obj_.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %obj_.addr, metadata !6742, metadata !DIExpression()), !dbg !6741
  call void @llvm.dbg.declare(metadata i8** %slot_, metadata !6743, metadata !DIExpression()), !dbg !6741
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6741
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %0, i32 0, i32 0, !dbg !6741
  %1 = load i32, i32* %num, align 4, !dbg !6741
  %2 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6741
  %alloc = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %2, i32 0, i32 1, !dbg !6741
  %3 = load i32, i32* %alloc, align 4, !dbg !6741
  %cmp = icmp ult i32 %1, %3, !dbg !6741
  %conv = zext i1 %cmp to i32, !dbg !6741
  %4 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6741
  %vec = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %4, i32 0, i32 2, !dbg !6741
  %5 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6741
  %num1 = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %5, i32 0, i32 0, !dbg !6741
  %6 = load i32, i32* %num1, align 4, !dbg !6741
  %inc = add i32 %6, 1, !dbg !6741
  store i32 %inc, i32* %num1, align 4, !dbg !6741
  %idxprom = zext i32 %6 to i64, !dbg !6741
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !6741
  store i8* %arrayidx, i8** %slot_, align 8, !dbg !6741
  %7 = load i8, i8* %obj_.addr, align 1, !dbg !6741
  %8 = load i8*, i8** %slot_, align 8, !dbg !6741
  store i8 %7, i8* %8, align 1, !dbg !6741
  %9 = load i8*, i8** %slot_, align 8, !dbg !6741
  ret i8* %9, !dbg !6741
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_space(%struct.VEC_uchar_base* %vec_, i32 %alloc_) #0 !dbg !6744 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6749, metadata !DIExpression()), !dbg !6748
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6748
  %cmp = icmp sge i32 %0, 0, !dbg !6748
  %conv = zext i1 %cmp to i32, !dbg !6748
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6748
  %tobool = icmp ne %struct.VEC_uchar_base* %1, null, !dbg !6748
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6748

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6748
  %alloc = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %2, i32 0, i32 1, !dbg !6748
  %3 = load i32, i32* %alloc, align 4, !dbg !6748
  %4 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6748
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %4, i32 0, i32 0, !dbg !6748
  %5 = load i32, i32* %num, align 4, !dbg !6748
  %sub = sub i32 %3, %5, !dbg !6748
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6748
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6748
  %conv2 = zext i1 %cmp1 to i32, !dbg !6748
  br label %cond.end, !dbg !6748

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6748
  %tobool3 = icmp ne i32 %7, 0, !dbg !6748
  %lnot = xor i1 %tobool3, true, !dbg !6748
  %lnot.ext = zext i1 %lnot to i32, !dbg !6748
  br label %cond.end, !dbg !6748

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6748
  ret i32 %cond, !dbg !6748
}

declare dso_local i8* @vec_gc_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @finish_eh_generation() #0 !dbg !6750 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6751, metadata !DIExpression()), !dbg !6752
  call void @dw2_build_landing_pads(), !dbg !6753
  call void @break_superblocks(), !dbg !6755
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6756
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6756
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6756
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6756
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !6756
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6756
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %2), !dbg !6758
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 2, !dbg !6759
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !6760
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !6760
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !6758
  br i1 %tobool, label %if.then, label %if.end, !dbg !6761

if.then:                                          ; preds = %entry
  call void @commit_edge_insertions(), !dbg !6762
  br label %if.end, !dbg !6762

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6763
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6763
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6763
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6763
  %x_entry_block_ptr3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !6763
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr3, align 8, !dbg !6763
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !6763
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6763
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !6763
  br label %for.cond, !dbg !6763

for.cond:                                         ; preds = %for.inc40, %if.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6765
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6765
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6765
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !6765
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !6765
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !6765
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6765
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !6765
  br i1 %cmp, label %for.body, label %for.end42, !dbg !6763

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !6767, metadata !DIExpression()), !dbg !6769
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6770, metadata !DIExpression()), !dbg !6771
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6772, metadata !DIExpression()), !dbg !6773
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6774
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !6774
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6774
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6774
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !6774
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6774
  %call6 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_rtx(%struct.rtx_def* %14), !dbg !6775
  store %struct.eh_landing_pad_d* %call6, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6776
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6777
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !6777
  %call7 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6777
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6777
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !6777
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call7, 0, !dbg !6777
  store i32 %18, i32* %17, align 8, !dbg !6777
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !6777
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call7, 1, !dbg !6777
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !6777
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6777
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6777
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !6777
  br label %for.cond8, !dbg !6777

for.cond8:                                        ; preds = %for.inc, %for.body
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6779
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !6779
  %25 = load i32, i32* %24, align 8, !dbg !6779
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !6779
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !6779
  %call9 = call zeroext i8 @ei_cond(i32 %25, %struct.VEC_edge_gc** %27, %struct.edge_def** %e), !dbg !6779
  %tobool10 = icmp ne i8 %call9, 0, !dbg !6777
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !6777

for.body11:                                       ; preds = %for.cond8
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6781
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 7, !dbg !6783
  %29 = load i32, i32* %flags, align 8, !dbg !6783
  %and = and i32 %29, 8, !dbg !6784
  %tobool12 = icmp ne i32 %and, 0, !dbg !6784
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !6785

if.then13:                                        ; preds = %for.body11
  br label %for.end, !dbg !6786

if.end14:                                         ; preds = %for.body11
  br label %for.inc, !dbg !6787

for.inc:                                          ; preds = %if.end14
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6779
  br label %for.cond8, !dbg !6779, !llvm.loop !6788

for.end:                                          ; preds = %if.then13, %for.cond8
  %30 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6790
  %cmp15 = icmp ne %struct.eh_landing_pad_d* %30, null, !dbg !6790
  %conv = zext i1 %cmp15 to i32, !dbg !6790
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6790
  %cmp16 = icmp ne %struct.edge_def* %31, null, !dbg !6790
  %conv17 = zext i1 %cmp16 to i32, !dbg !6790
  %cmp18 = icmp eq i32 %conv, %conv17, !dbg !6790
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !6790

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1441, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6790
  br label %cond.end, !dbg !6790

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !6790

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6790
  %32 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6791
  %cmp20 = icmp ne %struct.eh_landing_pad_d* %32, null, !dbg !6793
  br i1 %cmp20, label %if.then22, label %if.end39, !dbg !6794

if.then22:                                        ; preds = %cond.end
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6795
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !6795
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6795
  %il23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 7, !dbg !6795
  %rtl24 = bitcast %union.basic_block_il_dependent* %il23 to %struct.rtl_bb_info**, !dbg !6795
  %35 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl24, align 8, !dbg !6795
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %35, i32 0, i32 0, !dbg !6795
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6795
  %37 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6795
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %37, i32 0, i32 2, !dbg !6795
  %38 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !6795
  %call25 = call %struct.rtx_def* @label_rtx(%union.tree_node* %38), !dbg !6795
  %cmp26 = icmp eq %struct.rtx_def* %36, %call25, !dbg !6795
  br i1 %cmp26, label %cond.false29, label %cond.true28, !dbg !6795

cond.true28:                                      ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1444, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6795
  br label %cond.end30, !dbg !6795

cond.false29:                                     ; preds = %if.then22
  br label %cond.end30, !dbg !6795

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !6795
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6797
  %40 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6798
  %landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %40, i32 0, i32 3, !dbg !6798
  %41 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !6798
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6798
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6798
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6798
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !6798
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6798
  call void @redirect_edge_succ(%struct.edge_def* %39, %struct.basic_block_def* %42), !dbg !6799
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6800
  %il32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !6800
  %rtl33 = bitcast %union.basic_block_il_dependent* %il32 to %struct.rtl_bb_info**, !dbg !6800
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl33, align 8, !dbg !6800
  %end_34 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 1, !dbg !6800
  %45 = load %struct.rtx_def*, %struct.rtx_def** %end_34, align 8, !dbg !6800
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !6800
  %bf.load = load i32, i32* %46, align 8, !dbg !6800
  %bf.clear = and i32 %bf.load, 65535, !dbg !6800
  %cmp35 = icmp eq i32 %bf.clear, 10, !dbg !6800
  %47 = zext i1 %cmp35 to i64, !dbg !6800
  %cond37 = select i1 %cmp35, i32 6, i32 2, !dbg !6800
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6801
  %flags38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 7, !dbg !6802
  %49 = load i32, i32* %flags38, align 8, !dbg !6803
  %or = or i32 %49, %cond37, !dbg !6803
  store i32 %or, i32* %flags38, align 8, !dbg !6803
  br label %if.end39, !dbg !6804

if.end39:                                         ; preds = %cond.end30, %cond.end
  br label %for.inc40, !dbg !6805

for.inc40:                                        ; preds = %if.end39
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6765
  %next_bb41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 6, !dbg !6765
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb41, align 8, !dbg !6765
  store %struct.basic_block_def* %51, %struct.basic_block_def** %bb, align 8, !dbg !6765
  br label %for.cond, !dbg !6765, !llvm.loop !6806

for.end42:                                        ; preds = %for.cond
  ret void, !dbg !6808
}

declare dso_local zeroext i8 @cleanup_cfg(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dw2_build_landing_pads() #0 !dbg !6809 {
entry:
  %i = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6810, metadata !DIExpression()), !dbg !6811
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !6812, metadata !DIExpression()), !dbg !6813
  store i32 1, i32* %i, align 4, !dbg !6814
  br label %for.cond, !dbg !6816

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6817
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6817
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !6817
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !6817
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 2, !dbg !6817
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !6817
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !6817
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6817

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6817
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6817
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !6817
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !6817
  %lp_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !6817
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array3, align 8, !dbg !6817
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %5, i32 0, i32 0, !dbg !6817
  br label %cond.end, !dbg !6817

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6817

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6817
  %6 = load i32, i32* %i, align 4, !dbg !6817
  %call = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond, i32 %6, %struct.eh_landing_pad_d** %lp), !dbg !6817
  %tobool4 = icmp ne i32 %call, 0, !dbg !6819
  br i1 %tobool4, label %for.body, label %for.end, !dbg !6819

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !6820, metadata !DIExpression()), !dbg !6822
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6823, metadata !DIExpression()), !dbg !6824
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6825, metadata !DIExpression()), !dbg !6826
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6827, metadata !DIExpression()), !dbg !6828
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6829
  %cmp = icmp eq %struct.eh_landing_pad_d* %7, null, !dbg !6831
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6832

lor.lhs.false:                                    ; preds = %for.body
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6833
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %8, i32 0, i32 2, !dbg !6834
  %9 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !6834
  %cmp5 = icmp eq %union.tree_node* %9, null, !dbg !6835
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6836

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !6837

if.end:                                           ; preds = %lor.lhs.false
  call void @start_sequence(), !dbg !6838
  %call6 = call %struct.rtx_def* @gen_label_rtx(), !dbg !6839
  %10 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6840
  %landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %10, i32 0, i32 3, !dbg !6841
  store %struct.rtx_def* %call6, %struct.rtx_def** %landing_pad, align 8, !dbg !6842
  %11 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6843
  %landing_pad7 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %11, i32 0, i32 3, !dbg !6844
  %12 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad7, align 8, !dbg !6844
  %call8 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %12), !dbg !6845
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6846
  %landing_pad9 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %13, i32 0, i32 3, !dbg !6846
  %14 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad9, align 8, !dbg !6846
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6846
  %bf.load = load i32, i32* %15, align 8, !dbg !6847
  %bf.clear = and i32 %bf.load, -268435457, !dbg !6847
  %bf.set = or i32 %bf.clear, 268435456, !dbg !6847
  store i32 %bf.set, i32* %15, align 8, !dbg !6847
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6848
  %region10 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %16, i32 0, i32 1, !dbg !6849
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %region10, align 8, !dbg !6849
  store %struct.eh_region_d* %17, %struct.eh_region_d** %region, align 8, !dbg !6850
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6851
  %exc_ptr_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %18, i32 0, i32 7, !dbg !6853
  %19 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg, align 8, !dbg !6853
  %tobool11 = icmp ne %struct.rtx_def* %19, null, !dbg !6851
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !6854

if.then12:                                        ; preds = %if.end
  %20 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6855
  %exc_ptr_reg13 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %20, i32 0, i32 7, !dbg !6856
  %21 = load %struct.rtx_def*, %struct.rtx_def** %exc_ptr_reg13, align 8, !dbg !6856
  %22 = load i32, i32* @ptr_mode, align 4, !dbg !6857
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 %22, i32 0), !dbg !6858
  %call15 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %21, %struct.rtx_def* %call14), !dbg !6859
  br label %if.end16, !dbg !6859

if.end16:                                         ; preds = %if.then12, %if.end
  %23 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6860
  %filter_reg = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %23, i32 0, i32 8, !dbg !6862
  %24 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg, align 8, !dbg !6862
  %tobool17 = icmp ne %struct.rtx_def* %24, null, !dbg !6860
  br i1 %tobool17, label %if.then18, label %if.end23, !dbg !6863

if.then18:                                        ; preds = %if.end16
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6864
  %filter_reg19 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %25, i32 0, i32 8, !dbg !6865
  %26 = load %struct.rtx_def*, %struct.rtx_def** %filter_reg19, align 8, !dbg !6865
  %27 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 7), align 8, !dbg !6866
  %call20 = call i32 %27(), !dbg !6867
  %call21 = call %struct.rtx_def* @gen_rtx_REG(i32 %call20, i32 1), !dbg !6868
  %call22 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %call21), !dbg !6869
  br label %if.end23, !dbg !6869

if.end23:                                         ; preds = %if.then18, %if.end16
  %call24 = call %struct.rtx_def* @get_insns(), !dbg !6870
  store %struct.rtx_def* %call24, %struct.rtx_def** %seq, align 8, !dbg !6871
  call void @end_sequence(), !dbg !6872
  %28 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6873
  %29 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !6874
  %post_landing_pad25 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %29, i32 0, i32 2, !dbg !6875
  %30 = load %union.tree_node*, %union.tree_node** %post_landing_pad25, align 8, !dbg !6875
  %call26 = call %struct.rtx_def* @label_rtx(%union.tree_node* %30), !dbg !6876
  %call27 = call %struct.basic_block_def* @emit_to_new_bb_before(%struct.rtx_def* %28, %struct.rtx_def* %call26), !dbg !6877
  store %struct.basic_block_def* %call27, %struct.basic_block_def** %bb, align 8, !dbg !6878
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6879
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6880
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 6, !dbg !6881
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6881
  %call28 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %31, %struct.basic_block_def* %33, i32 1), !dbg !6882
  store %struct.edge_def* %call28, %struct.edge_def** %e, align 8, !dbg !6883
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6884
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 8, !dbg !6885
  %35 = load i64, i64* %count, align 8, !dbg !6885
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6886
  %count29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 9, !dbg !6887
  store i64 %35, i64* %count29, align 8, !dbg !6888
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6889
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 8, !dbg !6890
  store i32 10000, i32* %probability, align 4, !dbg !6891
  br label %for.inc, !dbg !6892

for.inc:                                          ; preds = %if.end23, %if.then
  %38 = load i32, i32* %i, align 4, !dbg !6893
  %inc = add nsw i32 %38, 1, !dbg !6893
  store i32 %inc, i32* %i, align 4, !dbg !6893
  br label %for.cond, !dbg !6894, !llvm.loop !6895

for.end:                                          ; preds = %cond.end
  ret void, !dbg !6897
}

declare dso_local void @break_superblocks() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6898 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6904, metadata !DIExpression()), !dbg !6905
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6906
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6906
  %tobool = icmp ne i8 %call, 0, !dbg !6906
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6906

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6906
  br label %cond.end, !dbg !6906

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6906

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6906
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6907
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6907
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6907
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6907
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6907

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6907
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6907
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6907
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6907
  br label %cond.end5, !dbg !6907

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6907

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6907
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6907
  ret %struct.edge_def* %call7, !dbg !6908
}

declare dso_local void @commit_edge_insertions() #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6909 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6912, metadata !DIExpression()), !dbg !6913
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6914, metadata !DIExpression()), !dbg !6915
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6916
  store i32 0, i32* %index, align 8, !dbg !6917
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6918
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6919
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6920
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6921
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6921
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6921
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6922 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6926, metadata !DIExpression()), !dbg !6927
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6930
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6930
  %5 = load i32, i32* %4, align 8, !dbg !6930
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6930
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6930
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6930
  %tobool = icmp ne i8 %call, 0, !dbg !6930
  br i1 %tobool, label %if.else, label %if.then, !dbg !6932

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6933
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6933
  %10 = load i32, i32* %9, align 8, !dbg !6933
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6933
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6933
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6933
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6935
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6936
  store i8 1, i8* %retval, align 1, !dbg !6937
  br label %return, !dbg !6937

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6938
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6940
  store i8 0, i8* %retval, align 1, !dbg !6941
  br label %return, !dbg !6941

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6942
  ret i8 %15, !dbg !6942
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6943 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6947, metadata !DIExpression()), !dbg !6948
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6949
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6949
  %1 = load i32, i32* %index, align 8, !dbg !6949
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6949
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6949
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6949
  %5 = load i32, i32* %4, align 8, !dbg !6949
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6949
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6949
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6949
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6949
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6949

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6949
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6949
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6949
  %11 = load i32, i32* %10, align 8, !dbg !6949
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6949
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6949
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6949
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6949
  br label %cond.end, !dbg !6949

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6949
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6949
  %cmp = icmp ult i32 %1, %call2, !dbg !6949
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6949

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6949
  br label %cond.end5, !dbg !6949

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6949

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6949
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6950
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6951
  %15 = load i32, i32* %index7, align 8, !dbg !6952
  %inc = add i32 %15, 1, !dbg !6952
  store i32 %inc, i32* %index7, align 8, !dbg !6952
  ret void, !dbg !6953
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @emit_to_new_bb_before(%struct.rtx_def* %seq, %struct.rtx_def* %insn) #0 !dbg !6954 {
entry:
  %seq.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.rtx_def* %seq, %struct.rtx_def** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq.addr, metadata !6957, metadata !DIExpression()), !dbg !6958
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !6961, metadata !DIExpression()), !dbg !6962
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6963, metadata !DIExpression()), !dbg !6964
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6965, metadata !DIExpression()), !dbg !6966
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6967, metadata !DIExpression()), !dbg !6968
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6969
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6969
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6969
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6969
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !6969
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6969
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6969
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !6969
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6969
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !6969
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !6969
  store i32 %4, i32* %3, align 8, !dbg !6969
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !6969
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !6969
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !6969
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6969
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6969
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !6969
  br label %for.cond, !dbg !6971

for.cond:                                         ; preds = %if.end, %entry
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6972
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6972
  %11 = load i32, i32* %10, align 8, !dbg !6972
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6972
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6972
  %call1 = call %struct.edge_def* @ei_safe_edge(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6972
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !6974
  %tobool = icmp ne %struct.edge_def* %call1, null, !dbg !6975
  br i1 %tobool, label %for.body, label %for.end, !dbg !6975

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6976
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 7, !dbg !6978
  %15 = load i32, i32* %flags, align 8, !dbg !6978
  %and = and i32 %15, 1, !dbg !6979
  %tobool2 = icmp ne i32 %and, 0, !dbg !6979
  br i1 %tobool2, label %if.then, label %if.else, !dbg !6980

if.then:                                          ; preds = %for.body
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6981
  %call3 = call %struct.basic_block_def* @force_nonfallthru(%struct.edge_def* %16), !dbg !6982
  br label %if.end, !dbg !6982

if.else:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6983
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond, !dbg !6984, !llvm.loop !6985

for.end:                                          ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !6987
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6988
  %call4 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !6989
  store %struct.rtx_def* %call4, %struct.rtx_def** %last, align 8, !dbg !6990
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6991
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !6991
  %bf.load = load i32, i32* %20, align 8, !dbg !6991
  %bf.clear = and i32 %bf.load, 65535, !dbg !6991
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !6991
  br i1 %cmp, label %if.then5, label %if.end9, !dbg !6993

if.then5:                                         ; preds = %for.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6994
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6994
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !6994
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !6994
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !6994
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6994
  store %struct.rtx_def* %22, %struct.rtx_def** %last, align 8, !dbg !6995
  br label %if.end9, !dbg !6996

if.end9:                                          ; preds = %if.then5, %for.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !6997
  %24 = bitcast %struct.rtx_def* %23 to i8*, !dbg !6997
  %25 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6998
  %26 = bitcast %struct.rtx_def* %25 to i8*, !dbg !6998
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6999
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6999
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !6999
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 3, !dbg !6999
  %rt_bb13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.basic_block_def**, !dbg !6999
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb13, align 8, !dbg !6999
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 5, !dbg !7000
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !7000
  %call14 = call %struct.basic_block_def* @create_basic_block(i8* %24, i8* %26, %struct.basic_block_def* %29), !dbg !7001
  store %struct.basic_block_def* %call14, %struct.basic_block_def** %bb, align 8, !dbg !7002
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7003
  call void @update_bb_for_insn(%struct.basic_block_def* %30), !dbg !7004
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7005
  %flags15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 13, !dbg !7006
  %32 = load i32, i32* %flags15, align 8, !dbg !7007
  %or = or i32 %32, 8, !dbg !7007
  store i32 %or, i32* %flags15, align 8, !dbg !7007
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7008
  ret %struct.basic_block_def* %33, !dbg !7009
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7010 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7013, metadata !DIExpression()), !dbg !7014
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7015
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7015
  %5 = load i32, i32* %4, align 8, !dbg !7015
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7015
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7015
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7015
  %tobool = icmp ne i8 %call, 0, !dbg !7015
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7016

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7017
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7017
  %10 = load i32, i32* %9, align 8, !dbg !7017
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7017
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7017
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7017
  br label %cond.end, !dbg !7016

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7016

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !7016
  ret %struct.edge_def* %cond, !dbg !7018
}

declare dso_local %struct.basic_block_def* @force_nonfallthru(%struct.edge_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local void @update_bb_for_insn(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7019 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7022, metadata !DIExpression()), !dbg !7023
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7024
  %3 = load i32, i32* %index, align 8, !dbg !7024
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7025
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7025
  %6 = load i32, i32* %5, align 8, !dbg !7025
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7025
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7025
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7025
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7025
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7025

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7025
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7025
  %11 = load i32, i32* %10, align 8, !dbg !7025
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7025
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7025
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7025
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7025
  br label %cond.end, !dbg !7025

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7025
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7025
  %cmp = icmp eq i32 %3, %call2, !dbg !7026
  %conv = zext i1 %cmp to i32, !dbg !7026
  %conv3 = trunc i32 %conv to i8, !dbg !7027
  ret i8 %conv3, !dbg !7028
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7029 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7030, metadata !DIExpression()), !dbg !7031
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7032
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7032
  %5 = load i32, i32* %4, align 8, !dbg !7032
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7032
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7032
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7032
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7032
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7032

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7032
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7032
  %10 = load i32, i32* %9, align 8, !dbg !7032
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7032
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7032
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7032
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7032
  br label %cond.end, !dbg !7032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7032
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7032
  %13 = load i32, i32* %index, align 8, !dbg !7032
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !7032
  ret %struct.edge_def* %call2, !dbg !7033
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7034 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7039, metadata !DIExpression()), !dbg !7040
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7040
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7040
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7040

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7040
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7040
  %2 = load i32, i32* %num, align 8, !dbg !7040
  br label %cond.end, !dbg !7040

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7040

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7040
  ret i32 %cond, !dbg !7040
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7041 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7044, metadata !DIExpression()), !dbg !7045
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7046
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7046
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7046
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7046

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7046
  br label %cond.end, !dbg !7046

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7046

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7046
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7047
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7047
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7048
  ret %struct.VEC_edge_gc* %5, !dbg !7049
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7050 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7053, metadata !DIExpression()), !dbg !7054
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7055, metadata !DIExpression()), !dbg !7054
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7054
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7054
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7054

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7054
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7054
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7054
  %3 = load i32, i32* %num, align 8, !dbg !7054
  %cmp = icmp ult i32 %1, %3, !dbg !7054
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7056
  %land.ext = zext i1 %4 to i32, !dbg !7054
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7054
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7054
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7054
  %idxprom = zext i32 %6 to i64, !dbg !7054
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7054
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7054
  ret %struct.edge_def* %7, !dbg !7054
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !7057 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7060, metadata !DIExpression()), !dbg !7061
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7062
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7062
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7062
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7062
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7062

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7062
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !7062
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !7062
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7062
  br label %cond.end, !dbg !7062

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7062

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7062
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7062
  %cmp = icmp eq i32 %call, 1, !dbg !7063
  %conv = zext i1 %cmp to i32, !dbg !7063
  %conv2 = trunc i32 %conv to i8, !dbg !7062
  ret i8 %conv2, !dbg !7064
}

declare dso_local i32 @cgraph_function_body_availability(%struct.cgraph_node*) #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

declare dso_local void @cgraph_set_nothrow_flag(%struct.cgraph_node*, i8 zeroext) #2

declare dso_local i8* @current_function_name() #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @action_record_hash(i8* %pentry) #0 !dbg !7065 {
entry:
  %pentry.addr = alloca i8*, align 8
  %entry1 = alloca %struct.action_record*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !7066, metadata !DIExpression()), !dbg !7067
  call void @llvm.dbg.declare(metadata %struct.action_record** %entry1, metadata !7068, metadata !DIExpression()), !dbg !7069
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !7070
  %1 = bitcast i8* %0 to %struct.action_record*, !dbg !7071
  store %struct.action_record* %1, %struct.action_record** %entry1, align 8, !dbg !7069
  %2 = load %struct.action_record*, %struct.action_record** %entry1, align 8, !dbg !7072
  %next = getelementptr inbounds %struct.action_record, %struct.action_record* %2, i32 0, i32 2, !dbg !7073
  %3 = load i32, i32* %next, align 4, !dbg !7073
  %mul = mul nsw i32 %3, 1009, !dbg !7074
  %4 = load %struct.action_record*, %struct.action_record** %entry1, align 8, !dbg !7075
  %filter = getelementptr inbounds %struct.action_record, %struct.action_record* %4, i32 0, i32 1, !dbg !7076
  %5 = load i32, i32* %filter, align 4, !dbg !7076
  %add = add nsw i32 %mul, %5, !dbg !7077
  ret i32 %add, !dbg !7078
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @action_record_eq(i8* %pentry, i8* %pdata) #0 !dbg !7079 {
entry:
  %pentry.addr = alloca i8*, align 8
  %pdata.addr = alloca i8*, align 8
  %entry1 = alloca %struct.action_record*, align 8
  %data = alloca %struct.action_record*, align 8
  store i8* %pentry, i8** %pentry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pentry.addr, metadata !7080, metadata !DIExpression()), !dbg !7081
  store i8* %pdata, i8** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pdata.addr, metadata !7082, metadata !DIExpression()), !dbg !7083
  call void @llvm.dbg.declare(metadata %struct.action_record** %entry1, metadata !7084, metadata !DIExpression()), !dbg !7085
  %0 = load i8*, i8** %pentry.addr, align 8, !dbg !7086
  %1 = bitcast i8* %0 to %struct.action_record*, !dbg !7087
  store %struct.action_record* %1, %struct.action_record** %entry1, align 8, !dbg !7085
  call void @llvm.dbg.declare(metadata %struct.action_record** %data, metadata !7088, metadata !DIExpression()), !dbg !7089
  %2 = load i8*, i8** %pdata.addr, align 8, !dbg !7090
  %3 = bitcast i8* %2 to %struct.action_record*, !dbg !7091
  store %struct.action_record* %3, %struct.action_record** %data, align 8, !dbg !7089
  %4 = load %struct.action_record*, %struct.action_record** %entry1, align 8, !dbg !7092
  %filter = getelementptr inbounds %struct.action_record, %struct.action_record* %4, i32 0, i32 1, !dbg !7093
  %5 = load i32, i32* %filter, align 4, !dbg !7093
  %6 = load %struct.action_record*, %struct.action_record** %data, align 8, !dbg !7094
  %filter2 = getelementptr inbounds %struct.action_record, %struct.action_record* %6, i32 0, i32 1, !dbg !7095
  %7 = load i32, i32* %filter2, align 4, !dbg !7095
  %cmp = icmp eq i32 %5, %7, !dbg !7096
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7097

land.rhs:                                         ; preds = %entry
  %8 = load %struct.action_record*, %struct.action_record** %entry1, align 8, !dbg !7098
  %next = getelementptr inbounds %struct.action_record, %struct.action_record* %8, i32 0, i32 2, !dbg !7099
  %9 = load i32, i32* %next, align 4, !dbg !7099
  %10 = load %struct.action_record*, %struct.action_record** %data, align 8, !dbg !7100
  %next3 = getelementptr inbounds %struct.action_record, %struct.action_record* %10, i32 0, i32 2, !dbg !7101
  %11 = load i32, i32* %next3, align 4, !dbg !7101
  %cmp4 = icmp eq i32 %9, %11, !dbg !7102
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp4, %land.rhs ], !dbg !7103
  %land.ext = zext i1 %12 to i32, !dbg !7097
  ret i32 %land.ext, !dbg !7104
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @collect_one_action_chain(%struct.htab* %ar_hash, %struct.eh_region_d* %region) #0 !dbg !7105 {
entry:
  %retval = alloca i32, align 4
  %ar_hash.addr = alloca %struct.htab*, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %next = alloca i32, align 4
  %r = alloca %struct.eh_region_d*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %filter = alloca i32, align 4
  %flt_node = alloca %union.tree_node*, align 8
  %filter39 = alloca i32, align 4
  store %struct.htab* %ar_hash, %struct.htab** %ar_hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %ar_hash.addr, metadata !7108, metadata !DIExpression()), !dbg !7109
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !7110, metadata !DIExpression()), !dbg !7111
  call void @llvm.dbg.declare(metadata i32* %next, metadata !7112, metadata !DIExpression()), !dbg !7113
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7114
  %cmp = icmp eq %struct.eh_region_d* %0, null, !dbg !7116
  br i1 %cmp, label %if.then, label %if.end, !dbg !7117

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7118
  br label %return, !dbg !7118

if.end:                                           ; preds = %entry
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7119
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 4, !dbg !7120
  %2 = load i32, i32* %type, align 4, !dbg !7120
  switch i32 %2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb11
    i32 2, label %sw.bb52
    i32 3, label %sw.bb68
  ], !dbg !7121

sw.bb:                                            ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !7122, metadata !DIExpression()), !dbg !7125
  %3 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7126
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7127
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 0, !dbg !7128
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !7128
  %call = call i32 @collect_one_action_chain(%struct.htab* %3, %struct.eh_region_d* %5), !dbg !7129
  store i32 %call, i32* %next, align 4, !dbg !7130
  %6 = load i32, i32* %next, align 4, !dbg !7131
  %cmp1 = icmp sle i32 %6, 0, !dbg !7133
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7134

if.then2:                                         ; preds = %sw.bb
  store i32 0, i32* %retval, align 4, !dbg !7135
  br label %return, !dbg !7135

if.end3:                                          ; preds = %sw.bb
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7136
  %outer4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %7, i32 0, i32 0, !dbg !7138
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %outer4, align 8, !dbg !7138
  store %struct.eh_region_d* %8, %struct.eh_region_d** %r, align 8, !dbg !7139
  br label %for.cond, !dbg !7140

for.cond:                                         ; preds = %for.inc, %if.end3
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !7141
  %tobool = icmp ne %struct.eh_region_d* %9, null, !dbg !7143
  br i1 %tobool, label %for.body, label %for.end, !dbg !7143

for.body:                                         ; preds = %for.cond
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !7144
  %type5 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 4, !dbg !7146
  %11 = load i32, i32* %type5, align 4, !dbg !7146
  %cmp6 = icmp eq i32 %11, 0, !dbg !7147
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !7148

if.then7:                                         ; preds = %for.body
  %12 = load i32, i32* %next, align 4, !dbg !7149
  store i32 %12, i32* %retval, align 4, !dbg !7150
  br label %return, !dbg !7150

if.end8:                                          ; preds = %for.body
  br label %for.inc, !dbg !7151

for.inc:                                          ; preds = %if.end8
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !7152
  %outer9 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %13, i32 0, i32 0, !dbg !7153
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %outer9, align 8, !dbg !7153
  store %struct.eh_region_d* %14, %struct.eh_region_d** %r, align 8, !dbg !7154
  br label %for.cond, !dbg !7155, !llvm.loop !7156

for.end:                                          ; preds = %for.cond
  %15 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7158
  %16 = load i32, i32* %next, align 4, !dbg !7159
  %call10 = call i32 @add_action_record(%struct.htab* %15, i32 0, i32 %16), !dbg !7160
  store i32 %call10, i32* %retval, align 4, !dbg !7161
  br label %return, !dbg !7161

sw.bb11:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !7162, metadata !DIExpression()), !dbg !7164
  store i32 -3, i32* %next, align 4, !dbg !7165
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7166
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 5, !dbg !7168
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !7169
  %last_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 1, !dbg !7170
  %18 = load %struct.eh_catch_d*, %struct.eh_catch_d** %last_catch, align 8, !dbg !7170
  store %struct.eh_catch_d* %18, %struct.eh_catch_d** %c, align 8, !dbg !7171
  br label %for.cond12, !dbg !7172

for.cond12:                                       ; preds = %for.inc50, %sw.bb11
  %19 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !7173
  %tobool13 = icmp ne %struct.eh_catch_d* %19, null, !dbg !7175
  br i1 %tobool13, label %for.body14, label %for.end51, !dbg !7175

for.body14:                                       ; preds = %for.cond12
  %20 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !7176
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %20, i32 0, i32 2, !dbg !7179
  %21 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !7179
  %cmp15 = icmp eq %union.tree_node* %21, null, !dbg !7180
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !7181

if.then16:                                        ; preds = %for.body14
  call void @llvm.dbg.declare(metadata i32* %filter, metadata !7182, metadata !DIExpression()), !dbg !7184
  %22 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !7185
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %22, i32 0, i32 3, !dbg !7185
  %23 = load %union.tree_node*, %union.tree_node** %filter_list, align 8, !dbg !7185
  %list = bitcast %union.tree_node* %23 to %struct.tree_list*, !dbg !7185
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !7185
  %24 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7185
  %int_cst = bitcast %union.tree_node* %24 to %struct.tree_int_cst*, !dbg !7185
  %int_cst17 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7185
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst17, i32 0, i32 0, !dbg !7185
  %25 = load i64, i64* %low, align 8, !dbg !7185
  %conv = trunc i64 %25 to i32, !dbg !7185
  store i32 %conv, i32* %filter, align 4, !dbg !7184
  %26 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7186
  %27 = load i32, i32* %filter, align 4, !dbg !7187
  %call18 = call i32 @add_action_record(%struct.htab* %26, i32 %27, i32 0), !dbg !7188
  store i32 %call18, i32* %next, align 4, !dbg !7189
  br label %if.end49, !dbg !7190

if.else:                                          ; preds = %for.body14
  call void @llvm.dbg.declare(metadata %union.tree_node** %flt_node, metadata !7191, metadata !DIExpression()), !dbg !7193
  %28 = load i32, i32* %next, align 4, !dbg !7194
  %cmp19 = icmp eq i32 %28, -3, !dbg !7196
  br i1 %cmp19, label %if.then21, label %if.end34, !dbg !7197

if.then21:                                        ; preds = %if.else
  %29 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7198
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7200
  %outer22 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %30, i32 0, i32 0, !dbg !7201
  %31 = load %struct.eh_region_d*, %struct.eh_region_d** %outer22, align 8, !dbg !7201
  %call23 = call i32 @collect_one_action_chain(%struct.htab* %29, %struct.eh_region_d* %31), !dbg !7202
  store i32 %call23, i32* %next, align 4, !dbg !7203
  %32 = load i32, i32* %next, align 4, !dbg !7204
  %cmp24 = icmp eq i32 %32, -1, !dbg !7206
  br i1 %cmp24, label %if.then26, label %if.else27, !dbg !7207

if.then26:                                        ; preds = %if.then21
  store i32 0, i32* %next, align 4, !dbg !7208
  br label %if.end33, !dbg !7209

if.else27:                                        ; preds = %if.then21
  %33 = load i32, i32* %next, align 4, !dbg !7210
  %cmp28 = icmp sle i32 %33, 0, !dbg !7212
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !7213

if.then30:                                        ; preds = %if.else27
  %34 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7214
  %call31 = call i32 @add_action_record(%struct.htab* %34, i32 0, i32 0), !dbg !7215
  store i32 %call31, i32* %next, align 4, !dbg !7216
  br label %if.end32, !dbg !7217

if.end32:                                         ; preds = %if.then30, %if.else27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then26
  br label %if.end34, !dbg !7218

if.end34:                                         ; preds = %if.end33, %if.else
  %35 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !7219
  %filter_list35 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %35, i32 0, i32 3, !dbg !7220
  %36 = load %union.tree_node*, %union.tree_node** %filter_list35, align 8, !dbg !7220
  store %union.tree_node* %36, %union.tree_node** %flt_node, align 8, !dbg !7221
  br label %for.cond36, !dbg !7222

for.cond36:                                       ; preds = %for.inc47, %if.end34
  %37 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !7223
  %tobool37 = icmp ne %union.tree_node* %37, null, !dbg !7226
  br i1 %tobool37, label %for.body38, label %for.end48, !dbg !7226

for.body38:                                       ; preds = %for.cond36
  call void @llvm.dbg.declare(metadata i32* %filter39, metadata !7227, metadata !DIExpression()), !dbg !7229
  %38 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !7230
  %list40 = bitcast %union.tree_node* %38 to %struct.tree_list*, !dbg !7230
  %value41 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list40, i32 0, i32 2, !dbg !7230
  %39 = load %union.tree_node*, %union.tree_node** %value41, align 8, !dbg !7230
  %int_cst42 = bitcast %union.tree_node* %39 to %struct.tree_int_cst*, !dbg !7230
  %int_cst43 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst42, i32 0, i32 1, !dbg !7230
  %low44 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst43, i32 0, i32 0, !dbg !7230
  %40 = load i64, i64* %low44, align 8, !dbg !7230
  %conv45 = trunc i64 %40 to i32, !dbg !7230
  store i32 %conv45, i32* %filter39, align 4, !dbg !7229
  %41 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7231
  %42 = load i32, i32* %filter39, align 4, !dbg !7232
  %43 = load i32, i32* %next, align 4, !dbg !7233
  %call46 = call i32 @add_action_record(%struct.htab* %41, i32 %42, i32 %43), !dbg !7234
  store i32 %call46, i32* %next, align 4, !dbg !7235
  br label %for.inc47, !dbg !7236

for.inc47:                                        ; preds = %for.body38
  %44 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !7237
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !7237
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7237
  %45 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7237
  store %union.tree_node* %45, %union.tree_node** %flt_node, align 8, !dbg !7238
  br label %for.cond36, !dbg !7239, !llvm.loop !7240

for.end48:                                        ; preds = %for.cond36
  br label %if.end49

if.end49:                                         ; preds = %for.end48, %if.then16
  br label %for.inc50, !dbg !7242

for.inc50:                                        ; preds = %if.end49
  %46 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !7243
  %prev_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %46, i32 0, i32 1, !dbg !7244
  %47 = load %struct.eh_catch_d*, %struct.eh_catch_d** %prev_catch, align 8, !dbg !7244
  store %struct.eh_catch_d* %47, %struct.eh_catch_d** %c, align 8, !dbg !7245
  br label %for.cond12, !dbg !7246, !llvm.loop !7247

for.end51:                                        ; preds = %for.cond12
  %48 = load i32, i32* %next, align 4, !dbg !7249
  store i32 %48, i32* %retval, align 4, !dbg !7250
  br label %return, !dbg !7250

sw.bb52:                                          ; preds = %if.end
  %49 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7251
  %50 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7252
  %outer53 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %50, i32 0, i32 0, !dbg !7253
  %51 = load %struct.eh_region_d*, %struct.eh_region_d** %outer53, align 8, !dbg !7253
  %call54 = call i32 @collect_one_action_chain(%struct.htab* %49, %struct.eh_region_d* %51), !dbg !7254
  store i32 %call54, i32* %next, align 4, !dbg !7255
  %52 = load i32, i32* %next, align 4, !dbg !7256
  %cmp55 = icmp eq i32 %52, -1, !dbg !7258
  br i1 %cmp55, label %if.then57, label %if.else58, !dbg !7259

if.then57:                                        ; preds = %sw.bb52
  store i32 0, i32* %next, align 4, !dbg !7260
  br label %if.end64, !dbg !7261

if.else58:                                        ; preds = %sw.bb52
  %53 = load i32, i32* %next, align 4, !dbg !7262
  %cmp59 = icmp sle i32 %53, 0, !dbg !7264
  br i1 %cmp59, label %if.then61, label %if.end63, !dbg !7265

if.then61:                                        ; preds = %if.else58
  %54 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7266
  %call62 = call i32 @add_action_record(%struct.htab* %54, i32 0, i32 0), !dbg !7267
  store i32 %call62, i32* %next, align 4, !dbg !7268
  br label %if.end63, !dbg !7269

if.end63:                                         ; preds = %if.then61, %if.else58
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then57
  %55 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7270
  %56 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7271
  %u65 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %56, i32 0, i32 5, !dbg !7272
  %allowed = bitcast %union.eh_region_u* %u65 to %struct.eh_region_u_allowed*, !dbg !7273
  %filter66 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 2, !dbg !7274
  %57 = load i32, i32* %filter66, align 8, !dbg !7274
  %58 = load i32, i32* %next, align 4, !dbg !7275
  %call67 = call i32 @add_action_record(%struct.htab* %55, i32 %57, i32 %58), !dbg !7276
  store i32 %call67, i32* %retval, align 4, !dbg !7277
  br label %return, !dbg !7277

sw.bb68:                                          ; preds = %if.end
  store i32 -2, i32* %retval, align 4, !dbg !7278
  br label %return, !dbg !7278

sw.epilog:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2365, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7279
  store i32 0, i32* %retval, align 4, !dbg !7280
  br label %return, !dbg !7280

return:                                           ; preds = %sw.epilog, %sw.bb68, %if.end64, %for.end51, %for.end, %if.then7, %if.then2, %if.then
  %59 = load i32, i32* %retval, align 4, !dbg !7281
  ret i32 %59, !dbg !7281
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_call_site(%struct.rtx_def* %landing_pad, i32 %action, i32 %section) #0 !dbg !7282 {
entry:
  %landing_pad.addr = alloca %struct.rtx_def*, align 8
  %action.addr = alloca i32, align 4
  %section.addr = alloca i32, align 4
  %record = alloca %struct.call_site_record_d*, align 8
  store %struct.rtx_def* %landing_pad, %struct.rtx_def** %landing_pad.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %landing_pad.addr, metadata !7285, metadata !DIExpression()), !dbg !7286
  store i32 %action, i32* %action.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %action.addr, metadata !7287, metadata !DIExpression()), !dbg !7288
  store i32 %section, i32* %section.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %section.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %record, metadata !7291, metadata !DIExpression()), !dbg !7292
  %call = call i8* @ggc_alloc_stat(i64 16), !dbg !7293
  %0 = bitcast i8* %call to %struct.call_site_record_d*, !dbg !7293
  store %struct.call_site_record_d* %0, %struct.call_site_record_d** %record, align 8, !dbg !7294
  %1 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad.addr, align 8, !dbg !7295
  %2 = load %struct.call_site_record_d*, %struct.call_site_record_d** %record, align 8, !dbg !7296
  %landing_pad1 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %2, i32 0, i32 0, !dbg !7297
  store %struct.rtx_def* %1, %struct.rtx_def** %landing_pad1, align 8, !dbg !7298
  %3 = load i32, i32* %action.addr, align 4, !dbg !7299
  %4 = load %struct.call_site_record_d*, %struct.call_site_record_d** %record, align 8, !dbg !7300
  %action2 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %4, i32 0, i32 1, !dbg !7301
  store i32 %3, i32* %action2, align 8, !dbg !7302
  %5 = load i32, i32* %section.addr, align 4, !dbg !7303
  %idxprom = sext i32 %5 to i64, !dbg !7303
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom, !dbg !7303
  %6 = load %struct.call_site_record_d*, %struct.call_site_record_d** %record, align 8, !dbg !7303
  %call3 = call %struct.call_site_record_d** @VEC_call_site_record_gc_safe_push(%struct.VEC_call_site_record_gc** %arrayidx, %struct.call_site_record_d* %6), !dbg !7303
  %7 = load i32, i32* @call_site_base, align 4, !dbg !7304
  %8 = load i32, i32* %section.addr, align 4, !dbg !7305
  %idxprom4 = sext i32 %8 to i64, !dbg !7305
  %arrayidx5 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom4, !dbg !7305
  %9 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx5, align 8, !dbg !7305
  %tobool = icmp ne %struct.VEC_call_site_record_gc* %9, null, !dbg !7305
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7305

cond.true:                                        ; preds = %entry
  %10 = load i32, i32* %section.addr, align 4, !dbg !7305
  %idxprom6 = sext i32 %10 to i64, !dbg !7305
  %arrayidx7 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom6, !dbg !7305
  %11 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx7, align 8, !dbg !7305
  %base = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %11, i32 0, i32 0, !dbg !7305
  br label %cond.end, !dbg !7305

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7305

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_call_site_record_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7305
  %call8 = call i32 @VEC_call_site_record_base_length(%struct.VEC_call_site_record_base* %cond), !dbg !7305
  %add = add i32 %7, %call8, !dbg !7306
  %sub = sub i32 %add, 1, !dbg !7307
  ret i32 %sub, !dbg !7308
}

declare dso_local %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_call_site_record_base_length(%struct.VEC_call_site_record_base* %vec_) #0 !dbg !7309 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_base*, align 8
  store %struct.VEC_call_site_record_base* %vec_, %struct.VEC_call_site_record_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_base** %vec_.addr, metadata !7314, metadata !DIExpression()), !dbg !7315
  %0 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7315
  %tobool = icmp ne %struct.VEC_call_site_record_base* %0, null, !dbg !7315
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7315

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7315
  %num = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %1, i32 0, i32 0, !dbg !7315
  %2 = load i32, i32* %num, align 8, !dbg !7315
  br label %cond.end, !dbg !7315

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7315

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7315
  ret i32 %cond, !dbg !7315
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_call_site_record_gc* @VEC_call_site_record_gc_alloc(i32 %alloc_) #0 !dbg !7316 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7319, metadata !DIExpression()), !dbg !7320
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7320
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !7320
  %1 = bitcast i8* %call to %struct.VEC_call_site_record_gc*, !dbg !7320
  ret %struct.VEC_call_site_record_gc* %1, !dbg !7320
}

declare dso_local i32 @max_label_num() #2

declare dso_local i32 @get_first_label_num() #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.call_site_record_d* @VEC_call_site_record_base_index(%struct.VEC_call_site_record_base* %vec_, i32 %ix_) #0 !dbg !7321 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_call_site_record_base* %vec_, %struct.VEC_call_site_record_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_base** %vec_.addr, metadata !7324, metadata !DIExpression()), !dbg !7325
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7326, metadata !DIExpression()), !dbg !7325
  %0 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7325
  %tobool = icmp ne %struct.VEC_call_site_record_base* %0, null, !dbg !7325
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7325

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7325
  %2 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7325
  %num = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %2, i32 0, i32 0, !dbg !7325
  %3 = load i32, i32* %num, align 8, !dbg !7325
  %cmp = icmp ult i32 %1, %3, !dbg !7325
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7327
  %land.ext = zext i1 %4 to i32, !dbg !7325
  %5 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7325
  %vec = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %5, i32 0, i32 2, !dbg !7325
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7325
  %idxprom = zext i32 %6 to i64, !dbg !7325
  %arrayidx = getelementptr inbounds [1 x %struct.call_site_record_d*], [1 x %struct.call_site_record_d*]* %vec, i64 0, i64 %idxprom, !dbg !7325
  %7 = load %struct.call_site_record_d*, %struct.call_site_record_d** %arrayidx, align 8, !dbg !7325
  ret %struct.call_site_record_d* %7, !dbg !7325
}

declare dso_local %struct.rtx_def* @emit_label_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_label_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_action_record(%struct.htab* %ar_hash, i32 %filter, i32 %next) #0 !dbg !7328 {
entry:
  %ar_hash.addr = alloca %struct.htab*, align 8
  %filter.addr = alloca i32, align 4
  %next.addr = alloca i32, align 4
  %slot = alloca %struct.action_record**, align 8
  %new_ar = alloca %struct.action_record*, align 8
  %tmp = alloca %struct.action_record, align 4
  store %struct.htab* %ar_hash, %struct.htab** %ar_hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %ar_hash.addr, metadata !7331, metadata !DIExpression()), !dbg !7332
  store i32 %filter, i32* %filter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %filter.addr, metadata !7333, metadata !DIExpression()), !dbg !7334
  store i32 %next, i32* %next.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %next.addr, metadata !7335, metadata !DIExpression()), !dbg !7336
  call void @llvm.dbg.declare(metadata %struct.action_record*** %slot, metadata !7337, metadata !DIExpression()), !dbg !7338
  call void @llvm.dbg.declare(metadata %struct.action_record** %new_ar, metadata !7339, metadata !DIExpression()), !dbg !7340
  call void @llvm.dbg.declare(metadata %struct.action_record* %tmp, metadata !7341, metadata !DIExpression()), !dbg !7342
  %0 = load i32, i32* %filter.addr, align 4, !dbg !7343
  %filter1 = getelementptr inbounds %struct.action_record, %struct.action_record* %tmp, i32 0, i32 1, !dbg !7344
  store i32 %0, i32* %filter1, align 4, !dbg !7345
  %1 = load i32, i32* %next.addr, align 4, !dbg !7346
  %next2 = getelementptr inbounds %struct.action_record, %struct.action_record* %tmp, i32 0, i32 2, !dbg !7347
  store i32 %1, i32* %next2, align 4, !dbg !7348
  %2 = load %struct.htab*, %struct.htab** %ar_hash.addr, align 8, !dbg !7349
  %3 = bitcast %struct.action_record* %tmp to i8*, !dbg !7350
  %call = call i8** @htab_find_slot(%struct.htab* %2, i8* %3, i32 1), !dbg !7351
  %4 = bitcast i8** %call to %struct.action_record**, !dbg !7352
  store %struct.action_record** %4, %struct.action_record*** %slot, align 8, !dbg !7353
  %5 = load %struct.action_record**, %struct.action_record*** %slot, align 8, !dbg !7354
  %6 = load %struct.action_record*, %struct.action_record** %5, align 8, !dbg !7356
  store %struct.action_record* %6, %struct.action_record** %new_ar, align 8, !dbg !7357
  %cmp = icmp eq %struct.action_record* %6, null, !dbg !7358
  br i1 %cmp, label %if.then, label %if.end17, !dbg !7359

if.then:                                          ; preds = %entry
  %call3 = call i8* @xmalloc(i64 12), !dbg !7360
  %7 = bitcast i8* %call3 to %struct.action_record*, !dbg !7360
  store %struct.action_record* %7, %struct.action_record** %new_ar, align 8, !dbg !7362
  %8 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !7363
  %tobool = icmp ne %struct.VEC_uchar_gc* %8, null, !dbg !7363
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7363

cond.true:                                        ; preds = %if.then
  %9 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !7363
  %base = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %9, i32 0, i32 0, !dbg !7363
  br label %cond.end, !dbg !7363

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7363

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_uchar_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7363
  %call4 = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond), !dbg !7363
  %add = add i32 %call4, 1, !dbg !7364
  %10 = load %struct.action_record*, %struct.action_record** %new_ar, align 8, !dbg !7365
  %offset = getelementptr inbounds %struct.action_record, %struct.action_record* %10, i32 0, i32 0, !dbg !7366
  store i32 %add, i32* %offset, align 4, !dbg !7367
  %11 = load i32, i32* %filter.addr, align 4, !dbg !7368
  %12 = load %struct.action_record*, %struct.action_record** %new_ar, align 8, !dbg !7369
  %filter5 = getelementptr inbounds %struct.action_record, %struct.action_record* %12, i32 0, i32 1, !dbg !7370
  store i32 %11, i32* %filter5, align 4, !dbg !7371
  %13 = load i32, i32* %next.addr, align 4, !dbg !7372
  %14 = load %struct.action_record*, %struct.action_record** %new_ar, align 8, !dbg !7373
  %next6 = getelementptr inbounds %struct.action_record, %struct.action_record* %14, i32 0, i32 2, !dbg !7374
  store i32 %13, i32* %next6, align 4, !dbg !7375
  %15 = load %struct.action_record*, %struct.action_record** %new_ar, align 8, !dbg !7376
  %16 = load %struct.action_record**, %struct.action_record*** %slot, align 8, !dbg !7377
  store %struct.action_record* %15, %struct.action_record** %16, align 8, !dbg !7378
  %17 = load i32, i32* %filter.addr, align 4, !dbg !7379
  call void @push_sleb128(%struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), i32 %17), !dbg !7380
  %18 = load i32, i32* %next.addr, align 4, !dbg !7381
  %tobool7 = icmp ne i32 %18, 0, !dbg !7381
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !7383

if.then8:                                         ; preds = %cond.end
  %19 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !7384
  %tobool9 = icmp ne %struct.VEC_uchar_gc* %19, null, !dbg !7384
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !7384

cond.true10:                                      ; preds = %if.then8
  %20 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), align 8, !dbg !7384
  %base11 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %20, i32 0, i32 0, !dbg !7384
  br label %cond.end13, !dbg !7384

cond.false12:                                     ; preds = %if.then8
  br label %cond.end13, !dbg !7384

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_uchar_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !7384
  %call15 = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond14), !dbg !7384
  %add16 = add i32 %call15, 1, !dbg !7385
  %21 = load i32, i32* %next.addr, align 4, !dbg !7386
  %sub = sub i32 %21, %add16, !dbg !7386
  store i32 %sub, i32* %next.addr, align 4, !dbg !7386
  br label %if.end, !dbg !7387

if.end:                                           ; preds = %cond.end13, %cond.end
  %22 = load i32, i32* %next.addr, align 4, !dbg !7388
  call void @push_sleb128(%struct.VEC_uchar_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 5), i32 %22), !dbg !7389
  br label %if.end17, !dbg !7390

if.end17:                                         ; preds = %if.end, %entry
  %23 = load %struct.action_record*, %struct.action_record** %new_ar, align 8, !dbg !7391
  %offset18 = getelementptr inbounds %struct.action_record, %struct.action_record* %23, i32 0, i32 0, !dbg !7392
  %24 = load i32, i32* %offset18, align 4, !dbg !7392
  ret i32 %24, !dbg !7393
}

; Function Attrs: noinline nounwind uwtable
define internal void @push_sleb128(%struct.VEC_uchar_gc** %data_area, i32 %value) #0 !dbg !7394 {
entry:
  %data_area.addr = alloca %struct.VEC_uchar_gc**, align 8
  %value.addr = alloca i32, align 4
  %byte = alloca i8, align 1
  %more = alloca i32, align 4
  store %struct.VEC_uchar_gc** %data_area, %struct.VEC_uchar_gc*** %data_area.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %data_area.addr, metadata !7397, metadata !DIExpression()), !dbg !7398
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !7399, metadata !DIExpression()), !dbg !7400
  call void @llvm.dbg.declare(metadata i8* %byte, metadata !7401, metadata !DIExpression()), !dbg !7402
  call void @llvm.dbg.declare(metadata i32* %more, metadata !7403, metadata !DIExpression()), !dbg !7404
  br label %do.body, !dbg !7405

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %value.addr, align 4, !dbg !7406
  %and = and i32 %0, 127, !dbg !7408
  %conv = trunc i32 %and to i8, !dbg !7406
  store i8 %conv, i8* %byte, align 1, !dbg !7409
  %1 = load i32, i32* %value.addr, align 4, !dbg !7410
  %shr = ashr i32 %1, 7, !dbg !7410
  store i32 %shr, i32* %value.addr, align 4, !dbg !7410
  %2 = load i32, i32* %value.addr, align 4, !dbg !7411
  %cmp = icmp eq i32 %2, 0, !dbg !7412
  br i1 %cmp, label %land.lhs.true, label %lor.rhs, !dbg !7413

land.lhs.true:                                    ; preds = %do.body
  %3 = load i8, i8* %byte, align 1, !dbg !7414
  %conv2 = zext i8 %3 to i32, !dbg !7414
  %and3 = and i32 %conv2, 64, !dbg !7415
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7416
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !7417

lor.rhs:                                          ; preds = %land.lhs.true, %do.body
  %4 = load i32, i32* %value.addr, align 4, !dbg !7418
  %cmp6 = icmp eq i32 %4, -1, !dbg !7419
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !7420

land.rhs:                                         ; preds = %lor.rhs
  %5 = load i8, i8* %byte, align 1, !dbg !7421
  %conv8 = zext i8 %5 to i32, !dbg !7421
  %and9 = and i32 %conv8, 64, !dbg !7422
  %cmp10 = icmp ne i32 %and9, 0, !dbg !7423
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %cmp10, %land.rhs ], !dbg !7424
  br label %lor.end, !dbg !7417

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %7 = phi i1 [ true, %land.lhs.true ], [ %6, %land.end ]
  %lnot = xor i1 %7, true, !dbg !7425
  %lnot.ext = zext i1 %lnot to i32, !dbg !7425
  store i32 %lnot.ext, i32* %more, align 4, !dbg !7426
  %8 = load i32, i32* %more, align 4, !dbg !7427
  %tobool = icmp ne i32 %8, 0, !dbg !7427
  br i1 %tobool, label %if.then, label %if.end, !dbg !7429

if.then:                                          ; preds = %lor.end
  %9 = load i8, i8* %byte, align 1, !dbg !7430
  %conv12 = zext i8 %9 to i32, !dbg !7430
  %or = or i32 %conv12, 128, !dbg !7430
  %conv13 = trunc i32 %or to i8, !dbg !7430
  store i8 %conv13, i8* %byte, align 1, !dbg !7430
  br label %if.end, !dbg !7431

if.end:                                           ; preds = %if.then, %lor.end
  %10 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %data_area.addr, align 8, !dbg !7432
  %11 = load i8, i8* %byte, align 1, !dbg !7432
  %call = call i8* @VEC_uchar_gc_safe_push(%struct.VEC_uchar_gc** %10, i8 zeroext %11), !dbg !7432
  br label %do.cond, !dbg !7433

do.cond:                                          ; preds = %if.end
  %12 = load i32, i32* %more, align 4, !dbg !7434
  %tobool14 = icmp ne i32 %12, 0, !dbg !7433
  br i1 %tobool14, label %do.body, label %do.end, !dbg !7433, !llvm.loop !7435

do.end:                                           ; preds = %do.cond
  ret void, !dbg !7437
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.call_site_record_d** @VEC_call_site_record_gc_safe_push(%struct.VEC_call_site_record_gc** %vec_, %struct.call_site_record_d* %obj_) #0 !dbg !7438 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_gc**, align 8
  %obj_.addr = alloca %struct.call_site_record_d*, align 8
  store %struct.VEC_call_site_record_gc** %vec_, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_gc*** %vec_.addr, metadata !7443, metadata !DIExpression()), !dbg !7444
  store %struct.call_site_record_d* %obj_, %struct.call_site_record_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %obj_.addr, metadata !7445, metadata !DIExpression()), !dbg !7444
  %0 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7444
  %call = call i32 @VEC_call_site_record_gc_reserve(%struct.VEC_call_site_record_gc** %0, i32 1), !dbg !7444
  %1 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7444
  %2 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %1, align 8, !dbg !7444
  %tobool = icmp ne %struct.VEC_call_site_record_gc* %2, null, !dbg !7444
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7444

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7444
  %4 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %3, align 8, !dbg !7444
  %base = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %4, i32 0, i32 0, !dbg !7444
  br label %cond.end, !dbg !7444

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7444

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_call_site_record_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7444
  %5 = load %struct.call_site_record_d*, %struct.call_site_record_d** %obj_.addr, align 8, !dbg !7444
  %call1 = call %struct.call_site_record_d** @VEC_call_site_record_base_quick_push(%struct.VEC_call_site_record_base* %cond, %struct.call_site_record_d* %5), !dbg !7444
  ret %struct.call_site_record_d** %call1, !dbg !7444
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_call_site_record_gc_reserve(%struct.VEC_call_site_record_gc** %vec_, i32 %alloc_) #0 !dbg !7446 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_call_site_record_gc** %vec_, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_gc*** %vec_.addr, metadata !7449, metadata !DIExpression()), !dbg !7450
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7451, metadata !DIExpression()), !dbg !7450
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7452, metadata !DIExpression()), !dbg !7450
  %0 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7450
  %1 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %0, align 8, !dbg !7450
  %tobool = icmp ne %struct.VEC_call_site_record_gc* %1, null, !dbg !7450
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7450

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7450
  %3 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %2, align 8, !dbg !7450
  %base = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %3, i32 0, i32 0, !dbg !7450
  br label %cond.end, !dbg !7450

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7450

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_call_site_record_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7450
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7450
  %call = call i32 @VEC_call_site_record_base_space(%struct.VEC_call_site_record_base* %cond, i32 %4), !dbg !7450
  %tobool1 = icmp ne i32 %call, 0, !dbg !7450
  %lnot = xor i1 %tobool1, true, !dbg !7450
  %lnot.ext = zext i1 %lnot to i32, !dbg !7450
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7450
  %5 = load i32, i32* %extend, align 4, !dbg !7453
  %tobool2 = icmp ne i32 %5, 0, !dbg !7453
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7450

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7453
  %7 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %6, align 8, !dbg !7453
  %8 = bitcast %struct.VEC_call_site_record_gc* %7 to i8*, !dbg !7453
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7453
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !7453
  %10 = bitcast i8* %call3 to %struct.VEC_call_site_record_gc*, !dbg !7453
  %11 = load %struct.VEC_call_site_record_gc**, %struct.VEC_call_site_record_gc*** %vec_.addr, align 8, !dbg !7453
  store %struct.VEC_call_site_record_gc* %10, %struct.VEC_call_site_record_gc** %11, align 8, !dbg !7453
  br label %if.end, !dbg !7453

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7450
  ret i32 %12, !dbg !7450
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.call_site_record_d** @VEC_call_site_record_base_quick_push(%struct.VEC_call_site_record_base* %vec_, %struct.call_site_record_d* %obj_) #0 !dbg !7455 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_base*, align 8
  %obj_.addr = alloca %struct.call_site_record_d*, align 8
  %slot_ = alloca %struct.call_site_record_d**, align 8
  store %struct.VEC_call_site_record_base* %vec_, %struct.VEC_call_site_record_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_base** %vec_.addr, metadata !7459, metadata !DIExpression()), !dbg !7460
  store %struct.call_site_record_d* %obj_, %struct.call_site_record_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %obj_.addr, metadata !7461, metadata !DIExpression()), !dbg !7460
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d*** %slot_, metadata !7462, metadata !DIExpression()), !dbg !7460
  %0 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7460
  %num = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %0, i32 0, i32 0, !dbg !7460
  %1 = load i32, i32* %num, align 8, !dbg !7460
  %2 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7460
  %alloc = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %2, i32 0, i32 1, !dbg !7460
  %3 = load i32, i32* %alloc, align 4, !dbg !7460
  %cmp = icmp ult i32 %1, %3, !dbg !7460
  %conv = zext i1 %cmp to i32, !dbg !7460
  %4 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7460
  %vec = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %4, i32 0, i32 2, !dbg !7460
  %5 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7460
  %num1 = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %5, i32 0, i32 0, !dbg !7460
  %6 = load i32, i32* %num1, align 8, !dbg !7460
  %inc = add i32 %6, 1, !dbg !7460
  store i32 %inc, i32* %num1, align 8, !dbg !7460
  %idxprom = zext i32 %6 to i64, !dbg !7460
  %arrayidx = getelementptr inbounds [1 x %struct.call_site_record_d*], [1 x %struct.call_site_record_d*]* %vec, i64 0, i64 %idxprom, !dbg !7460
  store %struct.call_site_record_d** %arrayidx, %struct.call_site_record_d*** %slot_, align 8, !dbg !7460
  %7 = load %struct.call_site_record_d*, %struct.call_site_record_d** %obj_.addr, align 8, !dbg !7460
  %8 = load %struct.call_site_record_d**, %struct.call_site_record_d*** %slot_, align 8, !dbg !7460
  store %struct.call_site_record_d* %7, %struct.call_site_record_d** %8, align 8, !dbg !7460
  %9 = load %struct.call_site_record_d**, %struct.call_site_record_d*** %slot_, align 8, !dbg !7460
  ret %struct.call_site_record_d** %9, !dbg !7460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_call_site_record_base_space(%struct.VEC_call_site_record_base* %vec_, i32 %alloc_) #0 !dbg !7463 {
entry:
  %vec_.addr = alloca %struct.VEC_call_site_record_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_call_site_record_base* %vec_, %struct.VEC_call_site_record_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_call_site_record_base** %vec_.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7468, metadata !DIExpression()), !dbg !7467
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7467
  %cmp = icmp sge i32 %0, 0, !dbg !7467
  %conv = zext i1 %cmp to i32, !dbg !7467
  %1 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7467
  %tobool = icmp ne %struct.VEC_call_site_record_base* %1, null, !dbg !7467
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7467

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7467
  %alloc = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %2, i32 0, i32 1, !dbg !7467
  %3 = load i32, i32* %alloc, align 4, !dbg !7467
  %4 = load %struct.VEC_call_site_record_base*, %struct.VEC_call_site_record_base** %vec_.addr, align 8, !dbg !7467
  %num = getelementptr inbounds %struct.VEC_call_site_record_base, %struct.VEC_call_site_record_base* %4, i32 0, i32 0, !dbg !7467
  %5 = load i32, i32* %num, align 8, !dbg !7467
  %sub = sub i32 %3, %5, !dbg !7467
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7467
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7467
  %conv2 = zext i1 %cmp1 to i32, !dbg !7467
  br label %cond.end, !dbg !7467

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7467
  %tobool3 = icmp ne i32 %7, 0, !dbg !7467
  %lnot = xor i1 %tobool3, true, !dbg !7467
  %lnot.ext = zext i1 %lnot to i32, !dbg !7467
  br label %cond.end, !dbg !7467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7467
  ret i32 %cond, !dbg !7467
}

; Function Attrs: noinline nounwind uwtable
define internal void @switch_to_exception_section(i8* %fnname) #0 !dbg !7469 {
entry:
  %fnname.addr = alloca i8*, align 8
  %s = alloca %union.section*, align 8
  %flags = alloca i32, align 4
  %tt_format = alloca i32, align 4
  %section_name = alloca i8*, align 8
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !7470, metadata !DIExpression()), !dbg !7471
  call void @llvm.dbg.declare(metadata %union.section** %s, metadata !7472, metadata !DIExpression()), !dbg !7473
  %0 = load %union.section*, %union.section** @exception_section, align 8, !dbg !7474
  %tobool = icmp ne %union.section* %0, null, !dbg !7474
  br i1 %tobool, label %if.then, label %if.else, !dbg !7476

if.then:                                          ; preds = %entry
  %1 = load %union.section*, %union.section** @exception_section, align 8, !dbg !7477
  store %union.section* %1, %union.section** %s, align 8, !dbg !7478
  br label %if.end18, !dbg !7479

if.else:                                          ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !7480
  %tobool1 = icmp ne i8 %2, 0, !dbg !7483
  br i1 %tobool1, label %if.then2, label %if.else14, !dbg !7484

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !7485, metadata !DIExpression()), !dbg !7487
  call void @llvm.dbg.declare(metadata i32* %tt_format, metadata !7488, metadata !DIExpression()), !dbg !7491
  %call = call i32 @asm_preferred_eh_data_format(i32 0, i32 1), !dbg !7492
  store i32 %call, i32* %tt_format, align 4, !dbg !7491
  %3 = load i32, i32* @flag_pic, align 4, !dbg !7493
  %tobool3 = icmp ne i32 %3, 0, !dbg !7493
  br i1 %tobool3, label %lor.rhs, label %lor.end, !dbg !7494

lor.rhs:                                          ; preds = %if.then2
  %4 = load i32, i32* %tt_format, align 4, !dbg !7495
  %and = and i32 %4, 112, !dbg !7496
  %cmp = icmp ne i32 %and, 0, !dbg !7497
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7498

land.rhs:                                         ; preds = %lor.rhs
  %5 = load i32, i32* %tt_format, align 4, !dbg !7499
  %and4 = and i32 %5, 112, !dbg !7500
  %cmp5 = icmp ne i32 %and4, 80, !dbg !7501
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %cmp5, %land.rhs ], !dbg !7502
  br label %lor.end, !dbg !7494

lor.end:                                          ; preds = %land.end, %if.then2
  %7 = phi i1 [ true, %if.then2 ], [ %6, %land.end ]
  %8 = zext i1 %7 to i64, !dbg !7503
  %cond = select i1 %7, i32 0, i32 512, !dbg !7503
  store i32 %cond, i32* %flags, align 4, !dbg !7504
  %9 = load i32, i32* @flag_function_sections, align 4, !dbg !7505
  %tobool6 = icmp ne i32 %9, 0, !dbg !7505
  br i1 %tobool6, label %if.then7, label %if.else12, !dbg !7507

if.then7:                                         ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i8** %section_name, metadata !7508, metadata !DIExpression()), !dbg !7510
  %10 = load i8*, i8** %fnname.addr, align 8, !dbg !7511
  %call8 = call i64 @strlen(i8* %10), !dbg !7511
  %add = add i64 %call8, 32, !dbg !7511
  %mul = mul i64 1, %add, !dbg !7511
  %call9 = call i8* @xmalloc(i64 %mul), !dbg !7511
  store i8* %call9, i8** %section_name, align 8, !dbg !7510
  %11 = load i8*, i8** %section_name, align 8, !dbg !7512
  %12 = load i8*, i8** %fnname.addr, align 8, !dbg !7513
  %call10 = call i32 (i8*, i8*, ...) @sprintf(i8* %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.54, i64 0, i64 0), i8* %12), !dbg !7514
  %13 = load i8*, i8** %section_name, align 8, !dbg !7515
  %14 = load i32, i32* %flags, align 4, !dbg !7516
  %call11 = call %union.section* @get_section(i8* %13, i32 %14, %union.tree_node* null), !dbg !7517
  store %union.section* %call11, %union.section** %s, align 8, !dbg !7518
  %15 = load i8*, i8** %section_name, align 8, !dbg !7519
  call void @free(i8* %15), !dbg !7520
  br label %if.end, !dbg !7521

if.else12:                                        ; preds = %lor.end
  %16 = load i32, i32* %flags, align 4, !dbg !7522
  %call13 = call %union.section* @get_section(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i64 0, i64 0), i32 %16, %union.tree_node* null), !dbg !7523
  store %union.section* %call13, %union.section** %s, align 8, !dbg !7524
  store %union.section* %call13, %union.section** @exception_section, align 8, !dbg !7525
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then7
  br label %if.end17, !dbg !7526

if.else14:                                        ; preds = %if.else
  %17 = load i32, i32* @flag_pic, align 4, !dbg !7527
  %tobool15 = icmp ne i32 %17, 0, !dbg !7527
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !7527

cond.true:                                        ; preds = %if.else14
  %18 = load %union.section*, %union.section** @data_section, align 8, !dbg !7528
  br label %cond.end, !dbg !7527

cond.false:                                       ; preds = %if.else14
  %19 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !7529
  br label %cond.end, !dbg !7527

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond16 = phi %union.section* [ %18, %cond.true ], [ %19, %cond.false ], !dbg !7527
  store %union.section* %cond16, %union.section** %s, align 8, !dbg !7530
  store %union.section* %cond16, %union.section** @exception_section, align 8, !dbg !7531
  br label %if.end17

if.end17:                                         ; preds = %cond.end, %if.end
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %20 = load %union.section*, %union.section** %s, align 8, !dbg !7532
  call void @switch_to_section(%union.section* %20), !dbg !7533
  ret void, !dbg !7534
}

declare dso_local i32 @asm_preferred_eh_data_format(i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @size_of_encoded_value(i32) #2

declare dso_local void @assemble_align(i32) #2

declare dso_local void @dw2_asm_output_data(i32, i64, i8*, ...) #2

declare dso_local i8* @eh_data_format_name(i32) #2

declare dso_local void @dw2_asm_output_delta_uleb128(i8*, i8*, i8*, ...) #2

declare dso_local void @assemble_name(%struct._IO_FILE*, i8*) #2

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dw2_output_call_site_table(i32 %cs_format, i32 %section) #0 !dbg !7535 {
entry:
  %cs_format.addr = alloca i32, align 4
  %section.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %begin = alloca i8*, align 8
  %cs = alloca %struct.call_site_record_d*, align 8
  %reg_start_lab = alloca [32 x i8], align 16
  %reg_end_lab = alloca [32 x i8], align 16
  %landing_pad_lab = alloca [32 x i8], align 16
  store i32 %cs_format, i32* %cs_format.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cs_format.addr, metadata !7538, metadata !DIExpression()), !dbg !7539
  store i32 %section, i32* %section.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %section.addr, metadata !7540, metadata !DIExpression()), !dbg !7541
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7542, metadata !DIExpression()), !dbg !7543
  %0 = load i32, i32* %section.addr, align 4, !dbg !7544
  %idxprom = sext i32 %0 to i64, !dbg !7544
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom, !dbg !7544
  %1 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx, align 8, !dbg !7544
  %tobool = icmp ne %struct.VEC_call_site_record_gc* %1, null, !dbg !7544
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7544

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %section.addr, align 4, !dbg !7544
  %idxprom1 = sext i32 %2 to i64, !dbg !7544
  %arrayidx2 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom1, !dbg !7544
  %3 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx2, align 8, !dbg !7544
  %base = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %3, i32 0, i32 0, !dbg !7544
  br label %cond.end, !dbg !7544

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_call_site_record_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7544
  %call = call i32 @VEC_call_site_record_base_length(%struct.VEC_call_site_record_base* %cond), !dbg !7544
  store i32 %call, i32* %n, align 4, !dbg !7543
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7545, metadata !DIExpression()), !dbg !7546
  call void @llvm.dbg.declare(metadata i8** %begin, metadata !7547, metadata !DIExpression()), !dbg !7548
  %4 = load i32, i32* %section.addr, align 4, !dbg !7549
  %cmp = icmp eq i32 %4, 0, !dbg !7551
  br i1 %cmp, label %if.then, label %if.else, !dbg !7552

if.then:                                          ; preds = %cond.end
  %5 = load i8*, i8** @current_function_func_begin_label, align 8, !dbg !7553
  store i8* %5, i8** %begin, align 8, !dbg !7554
  br label %if.end6, !dbg !7555

if.else:                                          ; preds = %cond.end
  %6 = load i8, i8* @first_function_block_is_cold, align 1, !dbg !7556
  %tobool3 = icmp ne i8 %6, 0, !dbg !7556
  br i1 %tobool3, label %if.then4, label %if.else5, !dbg !7558

if.then4:                                         ; preds = %if.else
  %7 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !7559
  store i8* %7, i8** %begin, align 8, !dbg !7560
  br label %if.end, !dbg !7561

if.else5:                                         ; preds = %if.else
  %8 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 1), align 8, !dbg !7562
  store i8* %8, i8** %begin, align 8, !dbg !7563
  br label %if.end

if.end:                                           ; preds = %if.else5, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %i, align 4, !dbg !7564
  br label %for.cond, !dbg !7566

for.cond:                                         ; preds = %for.inc, %if.end6
  %9 = load i32, i32* %i, align 4, !dbg !7567
  %10 = load i32, i32* %n, align 4, !dbg !7569
  %cmp7 = icmp slt i32 %9, %10, !dbg !7570
  br i1 %cmp7, label %for.body, label %for.end, !dbg !7571

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.call_site_record_d** %cs, metadata !7572, metadata !DIExpression()), !dbg !7574
  %11 = load i32, i32* %section.addr, align 4, !dbg !7575
  %idxprom8 = sext i32 %11 to i64, !dbg !7575
  %arrayidx9 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom8, !dbg !7575
  %12 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx9, align 8, !dbg !7575
  %tobool10 = icmp ne %struct.VEC_call_site_record_gc* %12, null, !dbg !7575
  br i1 %tobool10, label %cond.true11, label %cond.false15, !dbg !7575

cond.true11:                                      ; preds = %for.body
  %13 = load i32, i32* %section.addr, align 4, !dbg !7575
  %idxprom12 = sext i32 %13 to i64, !dbg !7575
  %arrayidx13 = getelementptr inbounds [2 x %struct.VEC_call_site_record_gc*], [2 x %struct.VEC_call_site_record_gc*]* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 5, i32 6), i64 0, i64 %idxprom12, !dbg !7575
  %14 = load %struct.VEC_call_site_record_gc*, %struct.VEC_call_site_record_gc** %arrayidx13, align 8, !dbg !7575
  %base14 = getelementptr inbounds %struct.VEC_call_site_record_gc, %struct.VEC_call_site_record_gc* %14, i32 0, i32 0, !dbg !7575
  br label %cond.end16, !dbg !7575

cond.false15:                                     ; preds = %for.body
  br label %cond.end16, !dbg !7575

cond.end16:                                       ; preds = %cond.false15, %cond.true11
  %cond17 = phi %struct.VEC_call_site_record_base* [ %base14, %cond.true11 ], [ null, %cond.false15 ], !dbg !7575
  %15 = load i32, i32* %i, align 4, !dbg !7575
  %call18 = call %struct.call_site_record_d* @VEC_call_site_record_base_index(%struct.VEC_call_site_record_base* %cond17, i32 %15), !dbg !7575
  store %struct.call_site_record_d* %call18, %struct.call_site_record_d** %cs, align 8, !dbg !7574
  call void @llvm.dbg.declare(metadata [32 x i8]* %reg_start_lab, metadata !7576, metadata !DIExpression()), !dbg !7577
  call void @llvm.dbg.declare(metadata [32 x i8]* %reg_end_lab, metadata !7578, metadata !DIExpression()), !dbg !7579
  call void @llvm.dbg.declare(metadata [32 x i8]* %landing_pad_lab, metadata !7580, metadata !DIExpression()), !dbg !7581
  br label %do.body, !dbg !7582

do.body:                                          ; preds = %cond.end16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %reg_start_lab, i64 0, i64 0, !dbg !7583
  %16 = load i32, i32* @call_site_base, align 4, !dbg !7583
  %17 = load i32, i32* %i, align 4, !dbg !7583
  %add = add nsw i32 %16, %17, !dbg !7583
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i64 0, i64 0), i32 %add), !dbg !7583
  br label %do.end, !dbg !7583

do.end:                                           ; preds = %do.body
  br label %do.body20, !dbg !7585

do.body20:                                        ; preds = %do.end
  %arraydecay21 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_end_lab, i64 0, i64 0, !dbg !7586
  %18 = load i32, i32* @call_site_base, align 4, !dbg !7586
  %19 = load i32, i32* %i, align 4, !dbg !7586
  %add22 = add nsw i32 %18, %19, !dbg !7586
  %call23 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i64 0, i64 0), i32 %add22), !dbg !7586
  br label %do.end24, !dbg !7586

do.end24:                                         ; preds = %do.body20
  %20 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !7588
  %landing_pad = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %20, i32 0, i32 0, !dbg !7590
  %21 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad, align 8, !dbg !7590
  %tobool25 = icmp ne %struct.rtx_def* %21, null, !dbg !7588
  br i1 %tobool25, label %if.then26, label %if.end33, !dbg !7591

if.then26:                                        ; preds = %do.end24
  br label %do.body27, !dbg !7592

do.body27:                                        ; preds = %if.then26
  %arraydecay28 = getelementptr inbounds [32 x i8], [32 x i8]* %landing_pad_lab, i64 0, i64 0, !dbg !7593
  %22 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !7593
  %landing_pad29 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %22, i32 0, i32 0, !dbg !7593
  %23 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad29, align 8, !dbg !7593
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7593
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7593
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !7593
  %rt_int = bitcast %union.rtunion_def* %arrayidx30 to i32*, !dbg !7593
  %24 = load i32, i32* %rt_int, align 8, !dbg !7593
  %call31 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i64 0, i64 0), i32 %24), !dbg !7593
  br label %do.end32, !dbg !7593

do.end32:                                         ; preds = %do.body27
  br label %if.end33, !dbg !7593

if.end33:                                         ; preds = %do.end32, %do.end24
  %25 = load i32, i32* %cs_format.addr, align 4, !dbg !7595
  %cmp34 = icmp eq i32 %25, 1, !dbg !7597
  br i1 %cmp34, label %if.then35, label %if.else45, !dbg !7598

if.then35:                                        ; preds = %if.end33
  %arraydecay36 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_start_lab, i64 0, i64 0, !dbg !7599
  %26 = load i8*, i8** %begin, align 8, !dbg !7601
  %27 = load i32, i32* %i, align 4, !dbg !7602
  call void (i8*, i8*, i8*, ...) @dw2_asm_output_delta_uleb128(i8* %arraydecay36, i8* %26, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.59, i64 0, i64 0), i32 %27), !dbg !7603
  %arraydecay37 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_end_lab, i64 0, i64 0, !dbg !7604
  %arraydecay38 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_start_lab, i64 0, i64 0, !dbg !7605
  call void (i8*, i8*, i8*, ...) @dw2_asm_output_delta_uleb128(i8* %arraydecay37, i8* %arraydecay38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0)), !dbg !7606
  %28 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !7607
  %landing_pad39 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %28, i32 0, i32 0, !dbg !7609
  %29 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad39, align 8, !dbg !7609
  %tobool40 = icmp ne %struct.rtx_def* %29, null, !dbg !7607
  br i1 %tobool40, label %if.then41, label %if.else43, !dbg !7610

if.then41:                                        ; preds = %if.then35
  %arraydecay42 = getelementptr inbounds [32 x i8], [32 x i8]* %landing_pad_lab, i64 0, i64 0, !dbg !7611
  %30 = load i8*, i8** %begin, align 8, !dbg !7612
  call void (i8*, i8*, i8*, ...) @dw2_asm_output_delta_uleb128(i8* %arraydecay42, i8* %30, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i64 0, i64 0)), !dbg !7613
  br label %if.end44, !dbg !7613

if.else43:                                        ; preds = %if.then35
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i64 0, i64 0)), !dbg !7614
  br label %if.end44

if.end44:                                         ; preds = %if.else43, %if.then41
  br label %if.end55, !dbg !7615

if.else45:                                        ; preds = %if.end33
  %arraydecay46 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_start_lab, i64 0, i64 0, !dbg !7616
  %31 = load i8*, i8** %begin, align 8, !dbg !7618
  %32 = load i32, i32* %i, align 4, !dbg !7619
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %arraydecay46, i8* %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.59, i64 0, i64 0), i32 %32), !dbg !7620
  %arraydecay47 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_end_lab, i64 0, i64 0, !dbg !7621
  %arraydecay48 = getelementptr inbounds [32 x i8], [32 x i8]* %reg_start_lab, i64 0, i64 0, !dbg !7622
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %arraydecay47, i8* %arraydecay48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0)), !dbg !7623
  %33 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !7624
  %landing_pad49 = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %33, i32 0, i32 0, !dbg !7626
  %34 = load %struct.rtx_def*, %struct.rtx_def** %landing_pad49, align 8, !dbg !7626
  %tobool50 = icmp ne %struct.rtx_def* %34, null, !dbg !7624
  br i1 %tobool50, label %if.then51, label %if.else53, !dbg !7627

if.then51:                                        ; preds = %if.else45
  %arraydecay52 = getelementptr inbounds [32 x i8], [32 x i8]* %landing_pad_lab, i64 0, i64 0, !dbg !7628
  %35 = load i8*, i8** %begin, align 8, !dbg !7629
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %arraydecay52, i8* %35, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i64 0, i64 0)), !dbg !7630
  br label %if.end54, !dbg !7630

if.else53:                                        ; preds = %if.else45
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i64 0, i64 0)), !dbg !7631
  br label %if.end54

if.end54:                                         ; preds = %if.else53, %if.then51
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end44
  %36 = load %struct.call_site_record_d*, %struct.call_site_record_d** %cs, align 8, !dbg !7632
  %action = getelementptr inbounds %struct.call_site_record_d, %struct.call_site_record_d* %36, i32 0, i32 1, !dbg !7633
  %37 = load i32, i32* %action, align 8, !dbg !7633
  %conv = sext i32 %37 to i64, !dbg !7632
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62, i64 0, i64 0)), !dbg !7634
  br label %for.inc, !dbg !7635

for.inc:                                          ; preds = %if.end55
  %38 = load i32, i32* %i, align 4, !dbg !7636
  %inc = add nsw i32 %38, 1, !dbg !7636
  store i32 %inc, i32* %i, align 4, !dbg !7636
  br label %for.cond, !dbg !7637, !llvm.loop !7638

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* %n, align 4, !dbg !7640
  %40 = load i32, i32* @call_site_base, align 4, !dbg !7641
  %add56 = add nsw i32 %40, %39, !dbg !7641
  store i32 %add56, i32* @call_site_base, align 4, !dbg !7641
  ret void, !dbg !7642
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_iterate(%struct.VEC_uchar_base* %vec_, i32 %ix_, i8* %ptr) #0 !dbg !7643 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !7646, metadata !DIExpression()), !dbg !7647
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7648, metadata !DIExpression()), !dbg !7647
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !7649, metadata !DIExpression()), !dbg !7647
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !7650
  %tobool = icmp ne %struct.VEC_uchar_base* %0, null, !dbg !7650
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7650

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7650
  %2 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !7650
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %2, i32 0, i32 0, !dbg !7650
  %3 = load i32, i32* %num, align 4, !dbg !7650
  %cmp = icmp ult i32 %1, %3, !dbg !7650
  br i1 %cmp, label %if.then, label %if.else, !dbg !7647

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !7652
  %vec = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %4, i32 0, i32 2, !dbg !7652
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7652
  %idxprom = zext i32 %5 to i64, !dbg !7652
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !7652
  %6 = load i8, i8* %arrayidx, align 1, !dbg !7652
  %7 = load i8*, i8** %ptr.addr, align 8, !dbg !7652
  store i8 %6, i8* %7, align 1, !dbg !7652
  store i32 1, i32* %retval, align 4, !dbg !7652
  br label %return, !dbg !7652

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i8*, i8** %ptr.addr, align 8, !dbg !7654
  store i8 0, i8* %8, align 1, !dbg !7654
  store i32 0, i32* %retval, align 4, !dbg !7654
  br label %return, !dbg !7654

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7647
  ret i32 %9, !dbg !7647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !7656 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7659, metadata !DIExpression()), !dbg !7660
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7661, metadata !DIExpression()), !dbg !7660
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7660
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7660
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7660

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7660
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7660
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7660
  %3 = load i32, i32* %num, align 8, !dbg !7660
  %cmp = icmp ult i32 %1, %3, !dbg !7660
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7662
  %land.ext = zext i1 %4 to i32, !dbg !7660
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7660
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !7660
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7660
  %idxprom = zext i32 %6 to i64, !dbg !7660
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7660
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7660
  ret %union.tree_node* %7, !dbg !7660
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_ttype(%union.tree_node* %type, i32 %tt_format, i32 %tt_format_size) #0 !dbg !7663 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %tt_format.addr = alloca i32, align 4
  %tt_format_size.addr = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %is_public = alloca i8, align 1
  %node = alloca %struct.varpool_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  store i32 %tt_format, i32* %tt_format.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tt_format.addr, metadata !7668, metadata !DIExpression()), !dbg !7669
  store i32 %tt_format_size, i32* %tt_format_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tt_format_size.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !7672, metadata !DIExpression()), !dbg !7673
  call void @llvm.dbg.declare(metadata i8* %is_public, metadata !7674, metadata !DIExpression()), !dbg !7675
  store i8 1, i8* %is_public, align 1, !dbg !7675
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7676
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !7678
  br i1 %cmp, label %if.then, label %if.else, !dbg !7679

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7680
  store %struct.rtx_def* %1, %struct.rtx_def** %value, align 8, !dbg !7681
  br label %if.end34, !dbg !7682

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %node, metadata !7683, metadata !DIExpression()), !dbg !7685
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7686
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7686
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7686
  %bf.load = load i64, i64* %3, align 8, !dbg !7686
  %bf.clear = and i64 %bf.load, 65535, !dbg !7686
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7686
  %idxprom = sext i32 %bf.cast to i64, !dbg !7686
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7686
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7686
  %cmp1 = icmp eq i32 %4, 2, !dbg !7686
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !7688

if.then2:                                         ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7689
  %call = call %union.tree_node* @lookup_type_for_runtime(%union.tree_node* %5), !dbg !7690
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !7691
  br label %if.end, !dbg !7692

if.end:                                           ; preds = %if.then2, %if.else
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7693
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 4), !dbg !7694
  store %struct.rtx_def* %call3, %struct.rtx_def** %value, align 8, !dbg !7695
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7696
  %call4 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %7), !dbg !7696
  store %union.tree_node* %call4, %union.tree_node** %type.addr, align 8, !dbg !7696
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7697
  %base5 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7697
  %9 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7697
  %bf.load6 = load i64, i64* %9, align 8, !dbg !7697
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7697
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7697
  %cmp9 = icmp eq i32 %bf.cast8, 121, !dbg !7699
  br i1 %cmp9, label %if.then10, label %if.else26, !dbg !7700

if.then10:                                        ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7701
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !7701
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7701
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7701
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !7701
  store %union.tree_node* %11, %union.tree_node** %type.addr, align 8, !dbg !7703
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7704
  %base12 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7704
  %13 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7704
  %bf.load13 = load i64, i64* %13, align 8, !dbg !7704
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7704
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7704
  %cmp16 = icmp eq i32 %bf.cast15, 32, !dbg !7706
  br i1 %cmp16, label %if.then17, label %if.end25, !dbg !7707

if.then17:                                        ; preds = %if.then10
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7708
  %call18 = call %struct.varpool_node* @varpool_node(%union.tree_node* %14), !dbg !7710
  store %struct.varpool_node* %call18, %struct.varpool_node** %node, align 8, !dbg !7711
  %15 = load %struct.varpool_node*, %struct.varpool_node** %node, align 8, !dbg !7712
  %tobool = icmp ne %struct.varpool_node* %15, null, !dbg !7712
  br i1 %tobool, label %if.then19, label %if.end20, !dbg !7714

if.then19:                                        ; preds = %if.then17
  %16 = load %struct.varpool_node*, %struct.varpool_node** %node, align 8, !dbg !7715
  call void @varpool_mark_needed_node(%struct.varpool_node* %16), !dbg !7716
  br label %if.end20, !dbg !7716

if.end20:                                         ; preds = %if.then19, %if.then17
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7717
  %base21 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7717
  %18 = bitcast %struct.tree_base* %base21 to i64*, !dbg !7717
  %bf.load22 = load i64, i64* %18, align 8, !dbg !7717
  %bf.lshr = lshr i64 %bf.load22, 27, !dbg !7717
  %bf.clear23 = and i64 %bf.lshr, 1, !dbg !7717
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !7717
  %conv = trunc i32 %bf.cast24 to i8, !dbg !7717
  store i8 %conv, i8* %is_public, align 1, !dbg !7718
  br label %if.end25, !dbg !7719

if.end25:                                         ; preds = %if.end20, %if.then10
  br label %if.end33, !dbg !7720

if.else26:                                        ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7721
  %base27 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7721
  %20 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7721
  %bf.load28 = load i64, i64* %20, align 8, !dbg !7721
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7721
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7721
  %cmp31 = icmp eq i32 %bf.cast30, 23, !dbg !7721
  br i1 %cmp31, label %cond.false, label %cond.true, !dbg !7721

cond.true:                                        ; preds = %if.else26
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 2927, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7721
  br label %cond.end, !dbg !7721

cond.false:                                       ; preds = %if.else26
  br label %cond.end, !dbg !7721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7721
  br label %if.end33

if.end33:                                         ; preds = %cond.end, %if.end25
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then
  %21 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 12), align 8, !dbg !7722
  %22 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7724
  %call35 = call zeroext i8 %21(%struct.rtx_def* %22), !dbg !7725
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7725
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !7726

if.then37:                                        ; preds = %if.end34
  br label %if.end46, !dbg !7727

if.end38:                                         ; preds = %if.end34
  %23 = load i32, i32* %tt_format.addr, align 4, !dbg !7728
  %cmp39 = icmp eq i32 %23, 0, !dbg !7730
  br i1 %cmp39, label %if.then43, label %lor.lhs.false, !dbg !7731

lor.lhs.false:                                    ; preds = %if.end38
  %24 = load i32, i32* %tt_format.addr, align 4, !dbg !7732
  %cmp41 = icmp eq i32 %24, 80, !dbg !7733
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !7734

if.then43:                                        ; preds = %lor.lhs.false, %if.end38
  %25 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7735
  %26 = load i32, i32* %tt_format_size.addr, align 4, !dbg !7736
  %27 = load i32, i32* %tt_format_size.addr, align 4, !dbg !7737
  %mul = mul nsw i32 %27, 8, !dbg !7738
  %call44 = call zeroext i8 @assemble_integer(%struct.rtx_def* %25, i32 %26, i32 %mul, i32 1), !dbg !7739
  br label %if.end46, !dbg !7739

if.else45:                                        ; preds = %lor.lhs.false
  %28 = load i32, i32* %tt_format.addr, align 4, !dbg !7740
  %29 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7741
  %30 = load i8, i8* %is_public, align 1, !dbg !7742
  call void (i32, %struct.rtx_def*, i8, i8*, ...) @dw2_asm_output_encoded_addr_rtx(i32 %28, %struct.rtx_def* %29, i8 zeroext %30, i8* null), !dbg !7743
  br label %if.end46

if.end46:                                         ; preds = %if.then37, %if.else45, %if.then43
  ret void, !dbg !7744
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !7745 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7750, metadata !DIExpression()), !dbg !7749
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !7751, metadata !DIExpression()), !dbg !7749
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7752
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7752
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7752

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7752
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7752
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7752
  %3 = load i32, i32* %num, align 8, !dbg !7752
  %cmp = icmp ult i32 %1, %3, !dbg !7752
  br i1 %cmp, label %if.then, label %if.else, !dbg !7749

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7754
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7754
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7754
  %idxprom = zext i32 %5 to i64, !dbg !7754
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7754
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7754
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7754
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !7754
  store i32 1, i32* %retval, align 4, !dbg !7754
  br label %return, !dbg !7754

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7756
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !7756
  store i32 0, i32* %retval, align 4, !dbg !7756
  br label %return, !dbg !7756

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7749
  ret i32 %9, !dbg !7749
}

declare dso_local i64 @strlen(i8*) #2

declare dso_local %union.section* @get_section(i8*, i32, %union.tree_node*) #2

declare dso_local void @dw2_asm_output_data_uleb128(i64, i8*, ...) #2

declare dso_local void @dw2_asm_output_delta(i32, i8*, i8*, i8*, ...) #2

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local %struct.varpool_node* @varpool_node(%union.tree_node*) #2

declare dso_local void @varpool_mark_needed_node(%struct.varpool_node*) #2

declare dso_local zeroext i8 @assemble_integer(%struct.rtx_def*, i32, i32, i32) #2

declare dso_local void @dw2_asm_output_encoded_addr_rtx(i32, %struct.rtx_def*, i8 zeroext, i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!2675, !2676, !2677}
!llvm.ident = !{!2678}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "warned", scope: !2, file: !3, line: 220, type: !6, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "doing_eh", scope: !3, file: !3, line: 216, type: !4, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3 = !DIFile(filename: "except.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !8, retainedTypes: !1082, globals: !2550, splitDebugInlining: false, nameTableKind: None)
!8 = !{!9, !17, !145, !340, !346, !351, !356, !374, !381, !388, !393, !400, !576, !719, !753, !763, !768, !774, !995, !1009, !1017, !1039, !1055, !1069}
!9 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !10, line: 30, baseType: !11, size: 32, elements: !12)
!10 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!11 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!12 = !{!13, !14, !15, !16}
!13 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!14 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!15 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!16 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!17 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !18, line: 7, baseType: !11, size: 32, elements: !19)
!18 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!19 = !{!20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144}
!20 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!21 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!22 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!23 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!24 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!25 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!26 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!27 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!28 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!29 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!30 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!31 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!32 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!33 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!34 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!35 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!36 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!37 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!38 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!39 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!40 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!41 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!42 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!43 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!44 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!45 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!46 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!47 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!48 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!49 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!50 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!51 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!52 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!53 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!54 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!55 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!56 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!57 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!58 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!59 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!60 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!61 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!62 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!63 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!64 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!65 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!66 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!67 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!68 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!69 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!70 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!71 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!72 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!73 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!74 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!75 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!76 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!77 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!78 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!79 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!80 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!81 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!82 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!83 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!84 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!85 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!86 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!87 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!88 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!89 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!93 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!94 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!95 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!96 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!97 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!98 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!99 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!100 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!101 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!102 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!103 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!104 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!105 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!106 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!139 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!140 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!141 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!142 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!143 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!144 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !146, line: 39, baseType: !11, size: 32, elements: !147)
!146 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339}
!148 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!154 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!155 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!156 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!157 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!158 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!159 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!160 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!161 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!162 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!163 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!164 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!165 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!166 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!167 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!168 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!169 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!170 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!171 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!172 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!173 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!174 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!175 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!176 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!177 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!178 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!179 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!180 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!181 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!182 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!183 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!184 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!185 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!186 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!187 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!188 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!190 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!191 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!192 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!193 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!194 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!195 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!196 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!197 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!198 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!199 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!200 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!201 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!202 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!203 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!204 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!205 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!206 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!207 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!208 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!209 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!210 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!211 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!212 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!213 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!214 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!215 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!216 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!217 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!218 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!219 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!220 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!221 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!222 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!223 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!224 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!225 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!226 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!227 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!228 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!229 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!230 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!231 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!232 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!233 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!234 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!235 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!236 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!237 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!238 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!240 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!241 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!242 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!243 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!244 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!245 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!246 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!247 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!248 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!249 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!250 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!251 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!252 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!253 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!254 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!255 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!256 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!257 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!258 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!259 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!260 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!261 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!262 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!263 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!264 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!265 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!266 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!267 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!268 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!269 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!270 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!271 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!272 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!273 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!274 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!275 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!276 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!277 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!278 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!279 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!280 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!281 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!282 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!283 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!284 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!285 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!286 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!287 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!288 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!289 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!290 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!291 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!292 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!293 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!294 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!295 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!296 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!297 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!298 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!299 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!300 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!308 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!309 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!310 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!311 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!312 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!313 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!314 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!315 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!316 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!317 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!329 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!330 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!331 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!332 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!333 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!334 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!335 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!336 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!337 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!338 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!339 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !341, line: 363, baseType: !11, size: 32, elements: !342)
!341 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344, !345}
!343 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!345 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!346 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !341, line: 355, baseType: !11, size: 32, elements: !347)
!347 = !{!348, !349, !350}
!348 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!350 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!351 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !352, line: 474, baseType: !11, size: 32, elements: !353)
!352 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!353 = !{!354, !355}
!354 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !146, line: 280, baseType: !11, size: 32, elements: !357)
!357 = !{!358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373}
!358 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !146, line: 1817, baseType: !11, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !146, line: 1805, baseType: !11, size: 32, elements: !382)
!382 = !{!383, !384, !385, !386, !387}
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !389, line: 147, baseType: !11, size: 32, elements: !390)
!389 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!390 = !{!391, !392}
!391 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !394, line: 104, baseType: !11, size: 32, elements: !395)
!394 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!395 = !{!396, !397, !398, !399}
!396 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!397 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!398 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!399 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!400 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !401, line: 74, baseType: !11, size: 32, elements: !402)
!401 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!402 = !{!403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575}
!403 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!575 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!576 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !577, line: 45, baseType: !11, size: 32, elements: !578)
!577 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!578 = !{!579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718}
!579 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!580 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!581 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!582 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!583 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!584 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!585 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!586 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!587 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!588 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!589 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!590 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!591 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!592 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!593 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!594 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!595 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!596 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!597 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!598 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!599 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!600 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!601 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!602 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!603 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!604 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!605 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!606 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!607 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!608 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!609 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!610 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!611 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!612 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!613 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!614 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!615 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!616 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!617 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!618 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!619 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!620 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!621 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!622 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!623 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!624 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!625 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!626 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!627 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!628 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!629 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!630 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!631 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!632 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!633 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!634 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!635 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!636 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!637 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!638 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!639 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!640 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!641 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!642 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!643 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!644 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!645 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!646 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!647 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!648 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!649 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!650 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!651 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!652 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!653 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!654 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!655 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!656 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!657 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!658 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!659 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!660 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!661 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!662 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!663 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!664 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!665 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!666 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!667 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!668 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!669 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!670 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!671 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!672 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!673 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!674 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!675 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!676 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!677 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!678 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!679 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!680 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!681 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!682 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!683 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!684 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!685 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!686 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!687 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!688 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!689 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!690 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!691 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!692 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!693 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!694 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!695 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!696 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!697 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!698 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!699 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!700 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!701 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!702 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!703 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!704 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!705 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!706 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!707 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!708 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!709 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!710 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!711 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!712 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!713 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!714 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!715 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!716 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!717 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!718 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!719 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !577, line: 836, baseType: !11, size: 32, elements: !720)
!720 = !{!721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752}
!721 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!722 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!723 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!724 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!725 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!726 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!727 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!728 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!729 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!730 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!731 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!732 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!733 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!734 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!735 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!736 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!737 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!738 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!739 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!740 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!741 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!742 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!743 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!744 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!745 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!746 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!747 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!748 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!749 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!750 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!751 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!752 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!753 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !754, line: 52, baseType: !11, size: 32, elements: !755)
!754 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!755 = !{!756, !757, !758, !759, !760, !761, !762}
!756 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!757 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!758 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!759 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!760 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!761 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!762 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!763 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_personality_kind", file: !10, line: 352, baseType: !11, size: 32, elements: !764)
!764 = !{!765, !766, !767}
!765 = !DIEnumerator(name: "eh_personality_none", value: 0, isUnsigned: true)
!766 = !DIEnumerator(name: "eh_personality_any", value: 1, isUnsigned: true)
!767 = !DIEnumerator(name: "eh_personality_lang", value: 2, isUnsigned: true)
!768 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !769, line: 80, baseType: !11, size: 32, elements: !770)
!769 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!770 = !{!771, !772, !773}
!771 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!772 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!773 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!774 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !775, line: 23, baseType: !11, size: 32, elements: !776)
!775 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!776 = !{!777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994}
!777 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!778 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!779 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!780 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!781 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!782 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!783 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!784 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!785 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!786 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!787 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!788 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!789 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!790 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!791 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!792 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!793 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!794 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!795 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!796 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!797 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!798 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!799 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!800 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!801 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!802 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!803 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!804 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!805 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!806 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!807 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!808 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!809 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!810 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!811 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!812 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!813 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!814 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!815 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!816 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!817 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!818 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!819 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!820 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!821 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!822 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!823 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!824 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!825 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!826 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!827 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!828 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!829 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!830 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!831 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!832 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!833 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!834 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!835 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!836 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!837 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!838 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!839 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!840 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!841 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!842 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!843 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!844 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!845 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!846 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!847 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!848 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!849 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!850 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!851 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!852 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!853 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!854 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!855 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!856 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!857 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!858 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!859 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!860 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!861 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!862 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!863 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!864 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!865 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!866 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!867 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!868 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!869 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!870 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!871 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!872 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!873 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!874 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!875 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!876 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!877 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!878 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!879 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!880 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!881 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!882 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!883 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!884 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!885 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!886 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!887 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!888 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!889 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!890 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!891 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!892 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!893 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!894 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!895 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!896 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!897 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!898 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!899 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!900 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!901 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!902 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!903 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!904 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!905 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!906 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!907 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!908 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!909 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!910 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!911 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!912 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!913 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!914 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!915 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!916 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!917 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!918 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!919 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!920 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!921 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!922 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!923 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!924 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!925 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!926 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!927 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!928 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!929 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!930 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!931 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!932 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!933 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!934 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!935 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!936 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!937 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!938 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!939 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!940 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!941 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!942 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!943 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!944 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!945 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!946 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!947 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!948 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!949 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!950 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!951 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!952 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!953 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!954 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!955 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!956 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!957 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!958 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!959 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!960 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!961 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!962 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!963 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!964 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!965 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!966 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!967 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!968 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!969 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!970 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!971 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!972 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!973 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!974 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!975 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!976 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!977 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!978 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!979 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!980 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!981 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!982 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!983 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!984 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!985 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!986 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!987 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!988 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!989 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!990 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!991 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!992 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!993 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!994 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!995 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !341, line: 295, baseType: !11, size: 32, elements: !996)
!996 = !{!997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008}
!997 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!998 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!999 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1000 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1001 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1002 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1003 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1004 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1005 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1006 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1007 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1008 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1009 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "availability", file: !1010, line: 27, baseType: !11, size: 32, elements: !1011)
!1010 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1011 = !{!1012, !1013, !1014, !1015, !1016}
!1012 = !DIEnumerator(name: "AVAIL_UNSET", value: 0, isUnsigned: true)
!1013 = !DIEnumerator(name: "AVAIL_NOT_AVAILABLE", value: 1, isUnsigned: true)
!1014 = !DIEnumerator(name: "AVAIL_OVERWRITABLE", value: 2, isUnsigned: true)
!1015 = !DIEnumerator(name: "AVAIL_AVAILABLE", value: 3, isUnsigned: true)
!1016 = !DIEnumerator(name: "AVAIL_LOCAL", value: 4, isUnsigned: true)
!1017 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1010, line: 309, baseType: !11, size: 32, elements: !1018)
!1018 = !{!1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038}
!1019 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1020 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1021 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1022 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1023 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1024 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1025 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1026 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1027 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1028 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1029 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1030 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1031 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1032 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1033 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1034 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1035 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1036 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1037 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1038 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1039 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !577, line: 956, baseType: !11, size: 32, elements: !1040)
!1040 = !{!1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054}
!1041 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!1042 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!1043 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!1044 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!1045 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!1046 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!1047 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!1048 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!1049 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!1050 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!1051 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!1052 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!1053 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!1054 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!1055 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !577, line: 1994, baseType: !11, size: 32, elements: !1056)
!1056 = !{!1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068}
!1057 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!1058 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!1059 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!1060 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!1061 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!1062 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!1063 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!1064 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!1065 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!1066 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!1067 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!1068 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!1069 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !146, line: 58, baseType: !11, size: 32, elements: !1070)
!1070 = !{!1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081}
!1071 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1072 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1073 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1074 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1075 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1076 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1077 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1078 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1079 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1080 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1081 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1082 = !{!1083, !145, !1109, !1390, !1103, !2452, !11, !1473, !1584, !576, !1285, !17, !6, !2511, !2464, !2477, !1088, !1162, !2516, !1962, !2497, !2519, !1087, !2525, !2526, !2489, !2527, !2528, !2535, !2536, !2537, !1375, !2510, !1110, !2517}
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !10, line: 194, size: 384, elements: !1085)
!1085 = !{!1086, !2463, !2476, !2490, !2491, !2492}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1084, file: !10, line: 197, baseType: !1087, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !10, line: 182, baseType: !1088)
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1089, size: 64)
!1089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !10, line: 116, size: 704, elements: !1090)
!1090 = !{!1091, !1092, !1093, !1094, !1095, !1096, !2451, !2460, !2461, !2462}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1089, file: !10, line: 119, baseType: !1088, size: 64)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1089, file: !10, line: 122, baseType: !1088, size: 64, offset: 64)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1089, file: !10, line: 123, baseType: !1088, size: 64, offset: 128)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1089, file: !10, line: 126, baseType: !6, size: 32, offset: 192)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1089, file: !10, line: 129, baseType: !9, size: 32, offset: 224)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1089, file: !10, line: 165, baseType: !1097, size: 192, offset: 256)
!1097 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !10, line: 132, size: 192, elements: !1098)
!1098 = !{!1099, !2440, !2446}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1097, file: !10, line: 137, baseType: !1100, size: 128)
!1100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !10, line: 133, size: 128, elements: !1101)
!1101 = !{!1102, !2439}
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1100, file: !10, line: 135, baseType: !1103, size: 64)
!1103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1104, size: 64)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !10, line: 93, size: 320, elements: !1105)
!1105 = !{!1106, !1107, !1108, !2437, !2438}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1104, file: !10, line: 96, baseType: !1103, size: 64)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1104, file: !10, line: 97, baseType: !1103, size: 64, offset: 64)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1104, file: !10, line: 101, baseType: !1109, size: 64, offset: 128)
!1109 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !769, line: 56, baseType: !1110)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !146, line: 3371, size: 1792, elements: !1112)
!1112 = !{!1113, !1146, !1152, !1165, !1184, !1195, !1200, !1210, !1216, !1230, !1242, !1280, !1776, !1804, !1821, !1822, !1827, !1836, !1842, !1847, !1851, !1855, !2088, !2135, !2141, !2147, !2154, !2167, !2181, !2198, !2210, !2232, !2247, !2419}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1111, file: !146, line: 3372, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !146, line: 360, size: 64, elements: !1115)
!1115 = !{!1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1114, file: !146, line: 361, baseType: !11, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1114, file: !146, line: 363, baseType: !11, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1114, file: !146, line: 364, baseType: !11, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1114, file: !146, line: 365, baseType: !11, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1114, file: !146, line: 366, baseType: !11, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1114, file: !146, line: 367, baseType: !11, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1114, file: !146, line: 368, baseType: !11, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1114, file: !146, line: 369, baseType: !11, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1114, file: !146, line: 370, baseType: !11, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1114, file: !146, line: 372, baseType: !11, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1114, file: !146, line: 373, baseType: !11, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1114, file: !146, line: 374, baseType: !11, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1114, file: !146, line: 375, baseType: !11, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1114, file: !146, line: 376, baseType: !11, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1114, file: !146, line: 377, baseType: !11, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1114, file: !146, line: 378, baseType: !11, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1114, file: !146, line: 379, baseType: !11, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1114, file: !146, line: 381, baseType: !11, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1114, file: !146, line: 382, baseType: !11, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1114, file: !146, line: 383, baseType: !11, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1114, file: !146, line: 384, baseType: !11, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1114, file: !146, line: 385, baseType: !11, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1114, file: !146, line: 386, baseType: !11, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1114, file: !146, line: 387, baseType: !11, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1114, file: !146, line: 388, baseType: !11, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1114, file: !146, line: 390, baseType: !11, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1114, file: !146, line: 391, baseType: !11, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1114, file: !146, line: 392, baseType: !11, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1114, file: !146, line: 394, baseType: !11, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1114, file: !146, line: 399, baseType: !11, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1111, file: !146, line: 3373, baseType: !1147, size: 192)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !146, line: 402, size: 192, elements: !1148)
!1148 = !{!1149, !1150, !1151}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1147, file: !146, line: 403, baseType: !1114, size: 64)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1147, file: !146, line: 404, baseType: !1109, size: 64, offset: 64)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1147, file: !146, line: 405, baseType: !1109, size: 64, offset: 128)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1111, file: !146, line: 3374, baseType: !1153, size: 320)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !146, line: 1384, size: 320, elements: !1154)
!1154 = !{!1155, !1156}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1153, file: !146, line: 1385, baseType: !1147, size: 192)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1153, file: !146, line: 1386, baseType: !1157, size: 128, offset: 192)
!1157 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1158, line: 58, baseType: !1159)
!1158 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1158, line: 54, size: 128, elements: !1160)
!1160 = !{!1161, !1163}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1159, file: !1158, line: 56, baseType: !1162, size: 64)
!1162 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1159, file: !1158, line: 57, baseType: !1164, size: 64, offset: 64)
!1164 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1111, file: !146, line: 3375, baseType: !1166, size: 256)
!1166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !146, line: 1397, size: 256, elements: !1167)
!1167 = !{!1168, !1169}
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1166, file: !146, line: 1398, baseType: !1147, size: 192)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1166, file: !146, line: 1399, baseType: !1170, size: 64, offset: 192)
!1170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1171, size: 64)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1172, line: 52, size: 256, elements: !1173)
!1172 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1173 = !{!1174, !1175, !1176, !1177, !1178, !1179, !1180}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1171, file: !1172, line: 56, baseType: !11, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1171, file: !1172, line: 57, baseType: !11, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1171, file: !1172, line: 58, baseType: !11, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1171, file: !1172, line: 59, baseType: !11, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1171, file: !1172, line: 60, baseType: !11, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1171, file: !1172, line: 61, baseType: !11, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1171, file: !1172, line: 62, baseType: !1181, size: 192, offset: 64)
!1181 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1162, size: 192, elements: !1182)
!1182 = !{!1183}
!1183 = !DISubrange(count: 3)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1111, file: !146, line: 3376, baseType: !1185, size: 256)
!1185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !146, line: 1408, size: 256, elements: !1186)
!1186 = !{!1187, !1188}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1185, file: !146, line: 1409, baseType: !1147, size: 192)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1185, file: !146, line: 1410, baseType: !1189, size: 64, offset: 192)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1191, line: 27, size: 192, elements: !1192)
!1191 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1192 = !{!1193, !1194}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1190, file: !1191, line: 29, baseType: !1157, size: 128)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1190, file: !1191, line: 30, baseType: !17, size: 32, offset: 128)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1111, file: !146, line: 3377, baseType: !1196, size: 256)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !146, line: 1437, size: 256, elements: !1197)
!1197 = !{!1198, !1199}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1196, file: !146, line: 1438, baseType: !1147, size: 192)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1196, file: !146, line: 1439, baseType: !1109, size: 64, offset: 192)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1111, file: !146, line: 3378, baseType: !1201, size: 256)
!1201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !146, line: 1418, size: 256, elements: !1202)
!1202 = !{!1203, !1204, !1205}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1201, file: !146, line: 1419, baseType: !1147, size: 192)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1201, file: !146, line: 1420, baseType: !6, size: 32, offset: 192)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1201, file: !146, line: 1421, baseType: !1206, size: 8, offset: 224)
!1206 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1207, size: 8, elements: !1208)
!1207 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1208 = !{!1209}
!1209 = !DISubrange(count: 1)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1111, file: !146, line: 3379, baseType: !1211, size: 320)
!1211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !146, line: 1428, size: 320, elements: !1212)
!1212 = !{!1213, !1214, !1215}
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1211, file: !146, line: 1429, baseType: !1147, size: 192)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1211, file: !146, line: 1430, baseType: !1109, size: 64, offset: 192)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1211, file: !146, line: 1431, baseType: !1109, size: 64, offset: 256)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1111, file: !146, line: 3380, baseType: !1217, size: 320)
!1217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !146, line: 1460, size: 320, elements: !1218)
!1218 = !{!1219, !1220}
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1217, file: !146, line: 1461, baseType: !1147, size: 192)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1217, file: !146, line: 1462, baseType: !1221, size: 128, offset: 192)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1222, line: 31, size: 128, elements: !1223)
!1222 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1223 = !{!1224, !1228, !1229}
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1221, file: !1222, line: 32, baseType: !1225, size: 64)
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1227)
!1227 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1221, file: !1222, line: 33, baseType: !11, size: 32, offset: 64)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1221, file: !1222, line: 34, baseType: !11, size: 32, offset: 96)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1111, file: !146, line: 3381, baseType: !1231, size: 384)
!1231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !146, line: 2507, size: 384, elements: !1232)
!1232 = !{!1233, !1234, !1239, !1240, !1241}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1231, file: !146, line: 2508, baseType: !1147, size: 192)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1231, file: !146, line: 2509, baseType: !1235, size: 32, offset: 192)
!1235 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1236, line: 58, baseType: !1237)
!1236 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1237 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1238, line: 44, baseType: !11)
!1238 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1231, file: !146, line: 2510, baseType: !11, size: 32, offset: 224)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1231, file: !146, line: 2511, baseType: !1109, size: 64, offset: 256)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1231, file: !146, line: 2512, baseType: !1109, size: 64, offset: 320)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1111, file: !146, line: 3382, baseType: !1243, size: 896)
!1243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !146, line: 2652, size: 896, elements: !1244)
!1244 = !{!1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277}
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1243, file: !146, line: 2653, baseType: !1231, size: 384)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1243, file: !146, line: 2654, baseType: !1109, size: 64, offset: 384)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1243, file: !146, line: 2656, baseType: !11, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1243, file: !146, line: 2658, baseType: !11, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1243, file: !146, line: 2659, baseType: !11, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1243, file: !146, line: 2660, baseType: !11, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1243, file: !146, line: 2661, baseType: !11, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1243, file: !146, line: 2662, baseType: !11, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1243, file: !146, line: 2663, baseType: !11, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1243, file: !146, line: 2664, baseType: !11, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1243, file: !146, line: 2666, baseType: !11, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1243, file: !146, line: 2667, baseType: !11, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1243, file: !146, line: 2668, baseType: !11, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1243, file: !146, line: 2669, baseType: !11, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1243, file: !146, line: 2670, baseType: !11, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1243, file: !146, line: 2671, baseType: !11, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1243, file: !146, line: 2672, baseType: !11, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1243, file: !146, line: 2673, baseType: !11, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1243, file: !146, line: 2674, baseType: !11, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1243, file: !146, line: 2678, baseType: !11, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1243, file: !146, line: 2682, baseType: !11, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1243, file: !146, line: 2685, baseType: !11, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1243, file: !146, line: 2688, baseType: !11, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1243, file: !146, line: 2690, baseType: !11, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1243, file: !146, line: 2692, baseType: !11, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1243, file: !146, line: 2695, baseType: !11, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1243, file: !146, line: 2698, baseType: !11, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1243, file: !146, line: 2703, baseType: !11, size: 32, offset: 512)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1243, file: !146, line: 2705, baseType: !1109, size: 64, offset: 576)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1243, file: !146, line: 2706, baseType: !1109, size: 64, offset: 640)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1243, file: !146, line: 2707, baseType: !1109, size: 64, offset: 704)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1243, file: !146, line: 2708, baseType: !1109, size: 64, offset: 768)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1243, file: !146, line: 2711, baseType: !1278, size: 64, offset: 832)
!1278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1279, size: 64)
!1279 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !146, line: 2711, flags: DIFlagFwdDecl)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1111, file: !146, line: 3383, baseType: !1281, size: 960)
!1281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !146, line: 2756, size: 960, elements: !1282)
!1282 = !{!1283, !1284}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1281, file: !146, line: 2757, baseType: !1243, size: 896)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1281, file: !146, line: 2758, baseType: !1285, size: 64, offset: 896)
!1285 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !769, line: 50, baseType: !1286)
!1286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1287, size: 64)
!1287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !577, line: 240, size: 384, elements: !1288)
!1288 = !{!1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1287, file: !577, line: 242, baseType: !11, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1287, file: !577, line: 245, baseType: !11, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1287, file: !577, line: 252, baseType: !11, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1287, file: !577, line: 257, baseType: !11, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1287, file: !577, line: 265, baseType: !11, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1287, file: !577, line: 277, baseType: !11, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1287, file: !577, line: 291, baseType: !11, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1287, file: !577, line: 298, baseType: !11, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1287, file: !577, line: 305, baseType: !11, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1287, file: !577, line: 310, baseType: !11, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1287, file: !577, line: 321, baseType: !1300, size: 320, offset: 64)
!1300 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !577, line: 315, size: 320, elements: !1301)
!1301 = !{!1302, !1709, !1711, !1774, !1775}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1300, file: !577, line: 316, baseType: !1303, size: 64)
!1303 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1304, size: 64, elements: !1208)
!1304 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !577, line: 183, baseType: !1305)
!1305 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !577, line: 166, size: 64, elements: !1306)
!1306 = !{!1307, !1308, !1309, !1312, !1313, !1321, !1322, !1334, !1337, !1399, !1400, !1686, !1699, !1706}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1305, file: !577, line: 168, baseType: !6, size: 32)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1305, file: !577, line: 169, baseType: !11, size: 32)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1305, file: !577, line: 170, baseType: !1310, size: 64)
!1310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1311, size: 64)
!1311 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1207)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1305, file: !577, line: 171, baseType: !1285, size: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1305, file: !577, line: 172, baseType: !1314, size: 64)
!1314 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !769, line: 53, baseType: !1315)
!1315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1316, size: 64)
!1316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !577, line: 359, size: 128, elements: !1317)
!1317 = !{!1318, !1319}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1316, file: !577, line: 360, baseType: !6, size: 32)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1316, file: !577, line: 361, baseType: !1320, size: 64, offset: 64)
!1320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1285, size: 64, elements: !1208)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1305, file: !577, line: 173, baseType: !17, size: 32)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1305, file: !577, line: 174, baseType: !1323, size: 32)
!1323 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !577, line: 133, baseType: !1324)
!1324 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !577, line: 115, size: 32, elements: !1325)
!1325 = !{!1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333}
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1324, file: !577, line: 118, baseType: !11, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1324, file: !577, line: 120, baseType: !11, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1324, file: !577, line: 121, baseType: !11, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1324, file: !577, line: 123, baseType: !11, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1324, file: !577, line: 125, baseType: !11, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1324, file: !577, line: 127, baseType: !11, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1324, file: !577, line: 130, baseType: !11, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1324, file: !577, line: 132, baseType: !11, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1305, file: !577, line: 175, baseType: !1335, size: 64)
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1336, size: 64)
!1336 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !577, line: 175, flags: DIFlagFwdDecl)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1305, file: !577, line: 176, baseType: !1338, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1340, line: 75, size: 256, elements: !1341)
!1340 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1341 = !{!1342, !1356, !1357, !1358}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1339, file: !1340, line: 76, baseType: !1343, size: 64)
!1343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1344, size: 64)
!1344 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1340, line: 68, baseType: !1345)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1340, line: 63, size: 320, elements: !1346)
!1346 = !{!1347, !1349, !1350, !1351}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1345, file: !1340, line: 64, baseType: !1348, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1345, size: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1345, file: !1340, line: 65, baseType: !1348, size: 64, offset: 64)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1345, file: !1340, line: 66, baseType: !11, size: 32, offset: 128)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1345, file: !1340, line: 67, baseType: !1352, size: 128, offset: 192)
!1352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1353, size: 128, elements: !1354)
!1353 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1340, line: 29, baseType: !1162)
!1354 = !{!1355}
!1355 = !DISubrange(count: 2)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1339, file: !1340, line: 77, baseType: !1343, size: 64, offset: 64)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1339, file: !1340, line: 78, baseType: !11, size: 32, offset: 128)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1339, file: !1340, line: 79, baseType: !1359, size: 64, offset: 192)
!1359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!1360 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1340, line: 49, baseType: !1361)
!1361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1340, line: 45, size: 832, elements: !1362)
!1362 = !{!1363, !1364, !1365}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1361, file: !1340, line: 46, baseType: !1348, size: 64)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1361, file: !1340, line: 47, baseType: !1338, size: 64, offset: 64)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1361, file: !1340, line: 48, baseType: !1366, size: 704, offset: 128)
!1366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1367, line: 164, size: 704, elements: !1368)
!1367 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1368 = !{!1369, !1370, !1381, !1382, !1383, !1384, !1385, !1386, !1391, !1395, !1396, !1397, !1398}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1366, file: !1367, line: 166, baseType: !1164, size: 64)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1366, file: !1367, line: 167, baseType: !1371, size: 64, offset: 64)
!1371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1372, size: 64)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1367, line: 157, size: 192, elements: !1373)
!1373 = !{!1374, !1376, !1377}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1372, file: !1367, line: 159, baseType: !1375, size: 64)
!1375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1207, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1372, file: !1367, line: 160, baseType: !1371, size: 64, offset: 64)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1372, file: !1367, line: 161, baseType: !1378, size: 32, offset: 128)
!1378 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1207, size: 32, elements: !1379)
!1379 = !{!1380}
!1380 = !DISubrange(count: 4)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1366, file: !1367, line: 168, baseType: !1375, size: 64, offset: 128)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1366, file: !1367, line: 169, baseType: !1375, size: 64, offset: 192)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1366, file: !1367, line: 170, baseType: !1375, size: 64, offset: 256)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1366, file: !1367, line: 171, baseType: !1164, size: 64, offset: 320)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1366, file: !1367, line: 172, baseType: !6, size: 32, offset: 384)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1366, file: !1367, line: 176, baseType: !1387, size: 64, offset: 448)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = !DISubroutineType(types: !1389)
!1389 = !{!1371, !1390, !1164}
!1390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1366, file: !1367, line: 177, baseType: !1392, size: 64, offset: 512)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = !DISubroutineType(types: !1394)
!1394 = !{null, !1390, !1371}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1366, file: !1367, line: 178, baseType: !1390, size: 64, offset: 576)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1366, file: !1367, line: 179, baseType: !11, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1366, file: !1367, line: 180, baseType: !11, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1366, file: !1367, line: 184, baseType: !11, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1305, file: !577, line: 177, baseType: !1109, size: 64)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1305, file: !577, line: 178, baseType: !1401, size: 64)
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !341, line: 217, size: 832, elements: !1403)
!1403 = !{!1404, !1651, !1652, !1653, !1656, !1660, !1661, !1662, !1680, !1681, !1682, !1683, !1684, !1685}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1402, file: !341, line: 219, baseType: !1405, size: 64)
!1405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1406, size: 64)
!1406 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !341, line: 151, baseType: !1407)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !341, line: 151, size: 128, elements: !1408)
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1407, file: !341, line: 151, baseType: !1410, size: 128)
!1410 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !341, line: 150, baseType: !1411)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !341, line: 150, size: 128, elements: !1412)
!1412 = !{!1413, !1414, !1415}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1411, file: !341, line: 150, baseType: !11, size: 32)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1411, file: !341, line: 150, baseType: !11, size: 32, offset: 32)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1411, file: !341, line: 150, baseType: !1416, size: 64, offset: 64)
!1416 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1417, size: 64, elements: !1208)
!1417 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !769, line: 108, baseType: !1418)
!1418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1419, size: 64)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !341, line: 122, size: 512, elements: !1420)
!1420 = !{!1421, !1422, !1423, !1643, !1644, !1645, !1646, !1647, !1648, !1649}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1419, file: !341, line: 124, baseType: !1401, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1419, file: !341, line: 125, baseType: !1401, size: 64, offset: 64)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1419, file: !341, line: 131, baseType: !1424, size: 64, offset: 128)
!1424 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !341, line: 128, size: 64, elements: !1425)
!1425 = !{!1426, !1642}
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1424, file: !341, line: 129, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !769, line: 66, baseType: !1428)
!1428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1429, size: 64)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1430, line: 143, size: 192, elements: !1431)
!1430 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1431 = !{!1432, !1640, !1641}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1429, file: !1430, line: 145, baseType: !1433, size: 64)
!1433 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !769, line: 69, baseType: !1434)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1430, line: 136, size: 192, elements: !1436)
!1436 = !{!1437, !1638, !1639}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1435, file: !1430, line: 137, baseType: !1438, size: 64)
!1438 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !769, line: 58, baseType: !1439)
!1439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1440, size: 64)
!1440 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1430, line: 737, size: 768, elements: !1441)
!1441 = !{!1442, !1459, !1493, !1499, !1504, !1509, !1516, !1522, !1528, !1533, !1547, !1552, !1558, !1563, !1573, !1578, !1596, !1603, !1610, !1616, !1621, !1627, !1633}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1440, file: !1430, line: 738, baseType: !1443, size: 256)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1430, line: 271, size: 256, elements: !1444)
!1444 = !{!1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458}
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1443, file: !1430, line: 274, baseType: !11, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1443, file: !1430, line: 277, baseType: !11, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1443, file: !1430, line: 281, baseType: !11, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1443, file: !1430, line: 284, baseType: !11, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1443, file: !1430, line: 291, baseType: !11, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1443, file: !1430, line: 295, baseType: !11, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1443, file: !1430, line: 298, baseType: !11, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1443, file: !1430, line: 301, baseType: !11, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1443, file: !1430, line: 307, baseType: !11, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1443, file: !1430, line: 312, baseType: !11, size: 32, offset: 32)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1443, file: !1430, line: 316, baseType: !1235, size: 32, offset: 64)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1443, file: !1430, line: 319, baseType: !11, size: 32, offset: 96)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1443, file: !1430, line: 323, baseType: !1401, size: 64, offset: 128)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1443, file: !1430, line: 327, baseType: !1109, size: 64, offset: 192)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1440, file: !1430, line: 739, baseType: !1460, size: 448)
!1460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1430, line: 350, size: 448, elements: !1461)
!1461 = !{!1462, !1491}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1460, file: !1430, line: 353, baseType: !1463, size: 384)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1430, line: 333, size: 384, elements: !1464)
!1464 = !{!1465, !1466, !1474}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1463, file: !1430, line: 336, baseType: !1443, size: 256)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1463, file: !1430, line: 343, baseType: !1467, size: 64, offset: 256)
!1467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1468, size: 64)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1469, line: 37, size: 128, elements: !1470)
!1469 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1470 = !{!1471, !1472}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1468, file: !1469, line: 39, baseType: !1467, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1468, file: !1469, line: 40, baseType: !1473, size: 64, offset: 64)
!1473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1463, file: !1430, line: 344, baseType: !1475, size: 64, offset: 320)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1469, line: 45, size: 320, elements: !1477)
!1477 = !{!1478, !1479}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1476, file: !1469, line: 47, baseType: !1475, size: 64)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1476, file: !1469, line: 48, baseType: !1480, size: 256, offset: 64)
!1480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !146, line: 1883, size: 256, elements: !1481)
!1481 = !{!1482, !1484, !1485, !1490}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1480, file: !146, line: 1884, baseType: !1483, size: 64)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1480, size: 64)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1480, file: !146, line: 1885, baseType: !1483, size: 64, offset: 64)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1480, file: !146, line: 1891, baseType: !1486, size: 64, offset: 128)
!1486 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1480, file: !146, line: 1891, size: 64, elements: !1487)
!1487 = !{!1488, !1489}
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1486, file: !146, line: 1891, baseType: !1438, size: 64)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1486, file: !146, line: 1891, baseType: !1109, size: 64)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1480, file: !146, line: 1892, baseType: !1473, size: 64, offset: 192)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1460, file: !1430, line: 359, baseType: !1492, size: 64, offset: 384)
!1492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1109, size: 64, elements: !1208)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1440, file: !1430, line: 740, baseType: !1494, size: 512)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1430, line: 365, size: 512, elements: !1495)
!1495 = !{!1496, !1497, !1498}
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1494, file: !1430, line: 368, baseType: !1463, size: 384)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1494, file: !1430, line: 373, baseType: !1109, size: 64, offset: 384)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1494, file: !1430, line: 374, baseType: !1109, size: 64, offset: 448)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1440, file: !1430, line: 741, baseType: !1500, size: 576)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1430, line: 380, size: 576, elements: !1501)
!1501 = !{!1502, !1503}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1500, file: !1430, line: 383, baseType: !1494, size: 512)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1500, file: !1430, line: 389, baseType: !1492, size: 64, offset: 512)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1440, file: !1430, line: 742, baseType: !1505, size: 320)
!1505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1430, line: 395, size: 320, elements: !1506)
!1506 = !{!1507, !1508}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1505, file: !1430, line: 397, baseType: !1443, size: 256)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1505, file: !1430, line: 400, baseType: !1427, size: 64, offset: 256)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1440, file: !1430, line: 743, baseType: !1510, size: 448)
!1510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1430, line: 406, size: 448, elements: !1511)
!1511 = !{!1512, !1513, !1514, !1515}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1510, file: !1430, line: 408, baseType: !1443, size: 256)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1510, file: !1430, line: 412, baseType: !1109, size: 64, offset: 256)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1510, file: !1430, line: 420, baseType: !1109, size: 64, offset: 320)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1510, file: !1430, line: 423, baseType: !1427, size: 64, offset: 384)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1440, file: !1430, line: 744, baseType: !1517, size: 384)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1430, line: 429, size: 384, elements: !1518)
!1518 = !{!1519, !1520, !1521}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1517, file: !1430, line: 431, baseType: !1443, size: 256)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1517, file: !1430, line: 434, baseType: !1109, size: 64, offset: 256)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1517, file: !1430, line: 437, baseType: !1427, size: 64, offset: 320)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1440, file: !1430, line: 745, baseType: !1523, size: 384)
!1523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1430, line: 443, size: 384, elements: !1524)
!1524 = !{!1525, !1526, !1527}
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1523, file: !1430, line: 445, baseType: !1443, size: 256)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1523, file: !1430, line: 449, baseType: !1109, size: 64, offset: 256)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1523, file: !1430, line: 453, baseType: !1427, size: 64, offset: 320)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1440, file: !1430, line: 746, baseType: !1529, size: 320)
!1529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1430, line: 459, size: 320, elements: !1530)
!1530 = !{!1531, !1532}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1529, file: !1430, line: 461, baseType: !1443, size: 256)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1529, file: !1430, line: 464, baseType: !1109, size: 64, offset: 256)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1440, file: !1430, line: 747, baseType: !1534, size: 768)
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1430, line: 469, size: 768, elements: !1535)
!1535 = !{!1536, !1537, !1538, !1539, !1540}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1534, file: !1430, line: 471, baseType: !1443, size: 256)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1534, file: !1430, line: 474, baseType: !11, size: 32, offset: 256)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1534, file: !1430, line: 475, baseType: !11, size: 32, offset: 288)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1534, file: !1430, line: 478, baseType: !1109, size: 64, offset: 320)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1534, file: !1430, line: 481, baseType: !1541, size: 384, offset: 384)
!1541 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1542, size: 384, elements: !1208)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !146, line: 1917, size: 384, elements: !1543)
!1543 = !{!1544, !1545, !1546}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1542, file: !146, line: 1920, baseType: !1480, size: 256)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1542, file: !146, line: 1921, baseType: !1109, size: 64, offset: 256)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1542, file: !146, line: 1922, baseType: !1235, size: 32, offset: 320)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1440, file: !1430, line: 748, baseType: !1548, size: 320)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1430, line: 487, size: 320, elements: !1549)
!1549 = !{!1550, !1551}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1548, file: !1430, line: 490, baseType: !1443, size: 256)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1548, file: !1430, line: 494, baseType: !6, size: 32, offset: 256)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1440, file: !1430, line: 749, baseType: !1553, size: 384)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1430, line: 500, size: 384, elements: !1554)
!1554 = !{!1555, !1556, !1557}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1553, file: !1430, line: 502, baseType: !1443, size: 256)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1553, file: !1430, line: 506, baseType: !1427, size: 64, offset: 256)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1553, file: !1430, line: 510, baseType: !1427, size: 64, offset: 320)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1440, file: !1430, line: 750, baseType: !1559, size: 320)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1430, line: 529, size: 320, elements: !1560)
!1560 = !{!1561, !1562}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1559, file: !1430, line: 531, baseType: !1443, size: 256)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1559, file: !1430, line: 540, baseType: !1427, size: 64, offset: 256)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1440, file: !1430, line: 751, baseType: !1564, size: 704)
!1564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1430, line: 546, size: 704, elements: !1565)
!1565 = !{!1566, !1567, !1568, !1569, !1570, !1571, !1572}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1564, file: !1430, line: 549, baseType: !1494, size: 512)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1564, file: !1430, line: 553, baseType: !1310, size: 64, offset: 512)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1564, file: !1430, line: 557, baseType: !1227, size: 8, offset: 576)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1564, file: !1430, line: 558, baseType: !1227, size: 8, offset: 584)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1564, file: !1430, line: 559, baseType: !1227, size: 8, offset: 592)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1564, file: !1430, line: 560, baseType: !1227, size: 8, offset: 600)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1564, file: !1430, line: 566, baseType: !1492, size: 64, offset: 640)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1440, file: !1430, line: 752, baseType: !1574, size: 384)
!1574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1430, line: 571, size: 384, elements: !1575)
!1575 = !{!1576, !1577}
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1574, file: !1430, line: 573, baseType: !1505, size: 320)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1574, file: !1430, line: 577, baseType: !1109, size: 64, offset: 320)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1440, file: !1430, line: 753, baseType: !1579, size: 576)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1430, line: 600, size: 576, elements: !1580)
!1580 = !{!1581, !1582, !1583, !1586, !1595}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1579, file: !1430, line: 602, baseType: !1505, size: 320)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1579, file: !1430, line: 605, baseType: !1109, size: 64, offset: 320)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1579, file: !1430, line: 609, baseType: !1584, size: 64, offset: 384)
!1584 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1585, line: 46, baseType: !1162)
!1585 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1579, file: !1430, line: 612, baseType: !1587, size: 64, offset: 448)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1430, line: 581, size: 320, elements: !1589)
!1589 = !{!1590, !1591, !1592, !1593, !1594}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1588, file: !1430, line: 583, baseType: !145, size: 32)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1588, file: !1430, line: 586, baseType: !1109, size: 64, offset: 64)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1588, file: !1430, line: 589, baseType: !1109, size: 64, offset: 128)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1588, file: !1430, line: 592, baseType: !1109, size: 64, offset: 192)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1588, file: !1430, line: 595, baseType: !1109, size: 64, offset: 256)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1579, file: !1430, line: 616, baseType: !1427, size: 64, offset: 512)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1440, file: !1430, line: 754, baseType: !1597, size: 512)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1430, line: 622, size: 512, elements: !1598)
!1598 = !{!1599, !1600, !1601, !1602}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1597, file: !1430, line: 624, baseType: !1505, size: 320)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1597, file: !1430, line: 628, baseType: !1109, size: 64, offset: 320)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1597, file: !1430, line: 632, baseType: !1109, size: 64, offset: 384)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1597, file: !1430, line: 636, baseType: !1109, size: 64, offset: 448)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1440, file: !1430, line: 755, baseType: !1604, size: 704)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1430, line: 642, size: 704, elements: !1605)
!1605 = !{!1606, !1607, !1608, !1609}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1604, file: !1430, line: 644, baseType: !1597, size: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1604, file: !1430, line: 648, baseType: !1109, size: 64, offset: 512)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1604, file: !1430, line: 652, baseType: !1109, size: 64, offset: 576)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1604, file: !1430, line: 653, baseType: !1109, size: 64, offset: 640)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1440, file: !1430, line: 756, baseType: !1611, size: 448)
!1611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1430, line: 663, size: 448, elements: !1612)
!1612 = !{!1613, !1614, !1615}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1611, file: !1430, line: 665, baseType: !1505, size: 320)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1611, file: !1430, line: 668, baseType: !1109, size: 64, offset: 320)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1611, file: !1430, line: 673, baseType: !1109, size: 64, offset: 384)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1440, file: !1430, line: 757, baseType: !1617, size: 384)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1430, line: 694, size: 384, elements: !1618)
!1618 = !{!1619, !1620}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1617, file: !1430, line: 696, baseType: !1505, size: 320)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1617, file: !1430, line: 699, baseType: !1109, size: 64, offset: 320)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1440, file: !1430, line: 758, baseType: !1622, size: 384)
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1430, line: 681, size: 384, elements: !1623)
!1623 = !{!1624, !1625, !1626}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1622, file: !1430, line: 683, baseType: !1443, size: 256)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1622, file: !1430, line: 686, baseType: !1109, size: 64, offset: 256)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1622, file: !1430, line: 689, baseType: !1109, size: 64, offset: 320)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1440, file: !1430, line: 759, baseType: !1628, size: 384)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1430, line: 707, size: 384, elements: !1629)
!1629 = !{!1630, !1631, !1632}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1628, file: !1430, line: 709, baseType: !1443, size: 256)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1628, file: !1430, line: 712, baseType: !1109, size: 64, offset: 256)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1628, file: !1430, line: 712, baseType: !1109, size: 64, offset: 320)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1440, file: !1430, line: 760, baseType: !1634, size: 320)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1430, line: 718, size: 320, elements: !1635)
!1635 = !{!1636, !1637}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1634, file: !1430, line: 720, baseType: !1443, size: 256)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1634, file: !1430, line: 723, baseType: !1109, size: 64, offset: 256)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1435, file: !1430, line: 138, baseType: !1434, size: 64, offset: 64)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1435, file: !1430, line: 139, baseType: !1434, size: 64, offset: 128)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1429, file: !1430, line: 146, baseType: !1433, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1429, file: !1430, line: 152, baseType: !1427, size: 64, offset: 128)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1424, file: !341, line: 130, baseType: !1285, size: 64)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1419, file: !341, line: 134, baseType: !1390, size: 64, offset: 192)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1419, file: !341, line: 137, baseType: !1109, size: 64, offset: 256)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1419, file: !341, line: 138, baseType: !1235, size: 32, offset: 320)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1419, file: !341, line: 142, baseType: !11, size: 32, offset: 352)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1419, file: !341, line: 144, baseType: !6, size: 32, offset: 384)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1419, file: !341, line: 145, baseType: !6, size: 32, offset: 416)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1419, file: !341, line: 146, baseType: !1650, size: 64, offset: 448)
!1650 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !341, line: 119, baseType: !1164)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1402, file: !341, line: 220, baseType: !1405, size: 64, offset: 64)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1402, file: !341, line: 223, baseType: !1390, size: 64, offset: 128)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1402, file: !341, line: 226, baseType: !1654, size: 64, offset: 192)
!1654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1655, size: 64)
!1655 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !341, line: 185, flags: DIFlagFwdDecl)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1402, file: !341, line: 229, baseType: !1657, size: 128, offset: 256)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 128, elements: !1354)
!1658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1659, size: 64)
!1659 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !341, line: 229, flags: DIFlagFwdDecl)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1402, file: !341, line: 232, baseType: !1401, size: 64, offset: 384)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1402, file: !341, line: 233, baseType: !1401, size: 64, offset: 448)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1402, file: !341, line: 238, baseType: !1663, size: 64, offset: 512)
!1663 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !341, line: 235, size: 64, elements: !1664)
!1664 = !{!1665, !1671}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1663, file: !341, line: 236, baseType: !1666, size: 64)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !341, line: 273, size: 128, elements: !1668)
!1668 = !{!1669, !1670}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1667, file: !341, line: 275, baseType: !1427, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1667, file: !341, line: 278, baseType: !1427, size: 64, offset: 64)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1663, file: !341, line: 237, baseType: !1672, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1673, size: 64)
!1673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !341, line: 259, size: 320, elements: !1674)
!1674 = !{!1675, !1676, !1677, !1678, !1679}
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1673, file: !341, line: 261, baseType: !1285, size: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1673, file: !341, line: 262, baseType: !1285, size: 64, offset: 64)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1673, file: !341, line: 266, baseType: !1285, size: 64, offset: 128)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1673, file: !341, line: 267, baseType: !1285, size: 64, offset: 192)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1673, file: !341, line: 270, baseType: !6, size: 32, offset: 256)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1402, file: !341, line: 241, baseType: !1650, size: 64, offset: 576)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1402, file: !341, line: 244, baseType: !6, size: 32, offset: 640)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1402, file: !341, line: 247, baseType: !6, size: 32, offset: 672)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1402, file: !341, line: 250, baseType: !6, size: 32, offset: 704)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1402, file: !341, line: 253, baseType: !6, size: 32, offset: 736)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1402, file: !341, line: 256, baseType: !6, size: 32, offset: 768)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1305, file: !577, line: 179, baseType: !1687, size: 64)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !577, line: 150, baseType: !1689)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !577, line: 142, size: 320, elements: !1690)
!1690 = !{!1691, !1692, !1693, !1694, !1697, !1698}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1689, file: !577, line: 144, baseType: !1109, size: 64)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1689, file: !577, line: 145, baseType: !1285, size: 64, offset: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1689, file: !577, line: 146, baseType: !1285, size: 64, offset: 128)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1689, file: !577, line: 147, baseType: !1695, size: 32, offset: 192)
!1695 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1696, line: 31, baseType: !6)
!1696 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1689, file: !577, line: 148, baseType: !11, size: 32, offset: 224)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1689, file: !577, line: 149, baseType: !1227, size: 8, offset: 256)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1305, file: !577, line: 180, baseType: !1700, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1701, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !577, line: 162, baseType: !1702)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !577, line: 159, size: 128, elements: !1703)
!1703 = !{!1704, !1705}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1702, file: !577, line: 160, baseType: !1109, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1702, file: !577, line: 161, baseType: !1164, size: 64, offset: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1305, file: !577, line: 181, baseType: !1707, size: 64)
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1708, size: 64)
!1708 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !577, line: 181, flags: DIFlagFwdDecl)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1300, file: !577, line: 317, baseType: !1710, size: 64)
!1710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1164, size: 64, elements: !1208)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1300, file: !577, line: 318, baseType: !1712, size: 320)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !577, line: 188, size: 320, elements: !1713)
!1713 = !{!1714, !1716, !1773}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1712, file: !577, line: 190, baseType: !1715, size: 192)
!1715 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1304, size: 192, elements: !1182)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1712, file: !577, line: 193, baseType: !1717, size: 64, offset: 192)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1718, size: 64)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !577, line: 206, size: 320, elements: !1719)
!1719 = !{!1720, !1758, !1759, !1760, !1772}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1718, file: !577, line: 208, baseType: !1721, size: 64)
!1721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1722, size: 64)
!1722 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !769, line: 62, baseType: !1723)
!1723 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1724, line: 538, size: 256, elements: !1725)
!1724 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1725 = !{!1726, !1730, !1736, !1749}
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1723, file: !1724, line: 539, baseType: !1727, size: 32)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1724, line: 482, size: 32, elements: !1728)
!1728 = !{!1729}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1727, file: !1724, line: 484, baseType: !11, size: 32)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1723, file: !1724, line: 540, baseType: !1731, size: 192)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1724, line: 488, size: 192, elements: !1732)
!1732 = !{!1733, !1734, !1735}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1731, file: !1724, line: 489, baseType: !1727, size: 32)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1731, file: !1724, line: 492, baseType: !1310, size: 64, offset: 64)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1731, file: !1724, line: 496, baseType: !1109, size: 64, offset: 128)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1723, file: !1724, line: 541, baseType: !1737, size: 256)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1724, line: 504, size: 256, elements: !1738)
!1738 = !{!1739, !1740, !1747, !1748}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1737, file: !1724, line: 505, baseType: !1727, size: 32)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1737, file: !1724, line: 509, baseType: !1741, size: 64, offset: 64)
!1741 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1724, line: 501, baseType: !1742)
!1742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1743, size: 64)
!1743 = !DISubroutineType(types: !1744)
!1744 = !{null, !1745}
!1745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1746, size: 64)
!1746 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1737, file: !1724, line: 510, baseType: !1745, size: 64, offset: 128)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1737, file: !1724, line: 513, baseType: !1721, size: 64, offset: 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1723, file: !1724, line: 542, baseType: !1750, size: 128)
!1750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1724, line: 530, size: 128, elements: !1751)
!1751 = !{!1752, !1753}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1750, file: !1724, line: 531, baseType: !1727, size: 32)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1750, file: !1724, line: 534, baseType: !1754, size: 64, offset: 64)
!1754 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1724, line: 525, baseType: !1755)
!1755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1756, size: 64)
!1756 = !DISubroutineType(types: !1757)
!1757 = !{!1227, !1109, !1310, !1162, !1162}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1718, file: !577, line: 211, baseType: !11, size: 32, offset: 64)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1718, file: !577, line: 214, baseType: !1164, size: 64, offset: 128)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1718, file: !577, line: 224, baseType: !1761, size: 64, offset: 192)
!1761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64)
!1762 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !577, line: 202, baseType: !1763)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !577, line: 202, size: 128, elements: !1764)
!1764 = !{!1765}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1763, file: !577, line: 202, baseType: !1766, size: 128)
!1766 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !577, line: 200, baseType: !1767)
!1767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !577, line: 200, size: 128, elements: !1768)
!1768 = !{!1769, !1770, !1771}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1767, file: !577, line: 200, baseType: !11, size: 32)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1767, file: !577, line: 200, baseType: !11, size: 32, offset: 32)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1767, file: !577, line: 200, baseType: !1320, size: 64, offset: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1718, file: !577, line: 234, baseType: !1761, size: 64, offset: 256)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1712, file: !577, line: 197, baseType: !1164, size: 64, offset: 256)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1300, file: !577, line: 319, baseType: !1171, size: 256)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1300, file: !577, line: 320, baseType: !1190, size: 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1111, file: !146, line: 3384, baseType: !1777, size: 1472)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !146, line: 3114, size: 1472, elements: !1778)
!1778 = !{!1779, !1800, !1801, !1802, !1803}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1777, file: !146, line: 3115, baseType: !1780, size: 1216)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !146, line: 2984, size: 1216, elements: !1781)
!1781 = !{!1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1780, file: !146, line: 2985, baseType: !1281, size: 960)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1780, file: !146, line: 2986, baseType: !1109, size: 64, offset: 960)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1780, file: !146, line: 2987, baseType: !1109, size: 64, offset: 1024)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1780, file: !146, line: 2988, baseType: !1109, size: 64, offset: 1088)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1780, file: !146, line: 2991, baseType: !11, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1780, file: !146, line: 2992, baseType: !11, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1780, file: !146, line: 2993, baseType: !11, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1780, file: !146, line: 2994, baseType: !11, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1780, file: !146, line: 2995, baseType: !11, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1780, file: !146, line: 2996, baseType: !11, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1780, file: !146, line: 2998, baseType: !11, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1780, file: !146, line: 3000, baseType: !11, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1780, file: !146, line: 3002, baseType: !11, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1780, file: !146, line: 3003, baseType: !11, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1780, file: !146, line: 3004, baseType: !11, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1780, file: !146, line: 3005, baseType: !11, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1780, file: !146, line: 3007, baseType: !11, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1780, file: !146, line: 3010, baseType: !11, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1777, file: !146, line: 3117, baseType: !1109, size: 64, offset: 1216)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1777, file: !146, line: 3119, baseType: !1109, size: 64, offset: 1280)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1777, file: !146, line: 3121, baseType: !1109, size: 64, offset: 1344)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1777, file: !146, line: 3123, baseType: !1109, size: 64, offset: 1408)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1111, file: !146, line: 3385, baseType: !1805, size: 1088)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !146, line: 2874, size: 1088, elements: !1806)
!1806 = !{!1807, !1808, !1809}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1805, file: !146, line: 2875, baseType: !1281, size: 960)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1805, file: !146, line: 2876, baseType: !1285, size: 64, offset: 960)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1805, file: !146, line: 2877, baseType: !1810, size: 64, offset: 1024)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1812, line: 172, size: 128, elements: !1813)
!1812 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1813 = !{!1814, !1815, !1816, !1817, !1818, !1819, !1820}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1811, file: !1812, line: 174, baseType: !11, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1811, file: !1812, line: 178, baseType: !11, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1811, file: !1812, line: 183, baseType: !11, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1811, file: !1812, line: 187, baseType: !11, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1811, file: !1812, line: 192, baseType: !11, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1811, file: !1812, line: 195, baseType: !11, size: 32, offset: 32)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1811, file: !1812, line: 199, baseType: !1109, size: 64, offset: 64)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1111, file: !146, line: 3386, baseType: !1780, size: 1216)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1111, file: !146, line: 3387, baseType: !1823, size: 1280)
!1823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !146, line: 3093, size: 1280, elements: !1824)
!1824 = !{!1825, !1826}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1823, file: !146, line: 3094, baseType: !1780, size: 1216)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1823, file: !146, line: 3095, baseType: !1810, size: 64, offset: 1216)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1111, file: !146, line: 3388, baseType: !1828, size: 1216)
!1828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !146, line: 2824, size: 1216, elements: !1829)
!1829 = !{!1830, !1831, !1832, !1833, !1834, !1835}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1828, file: !146, line: 2825, baseType: !1243, size: 896)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1828, file: !146, line: 2827, baseType: !1109, size: 64, offset: 896)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1828, file: !146, line: 2828, baseType: !1109, size: 64, offset: 960)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1828, file: !146, line: 2829, baseType: !1109, size: 64, offset: 1024)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1828, file: !146, line: 2830, baseType: !1109, size: 64, offset: 1088)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1828, file: !146, line: 2831, baseType: !1109, size: 64, offset: 1152)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1111, file: !146, line: 3389, baseType: !1837, size: 1024)
!1837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !146, line: 2850, size: 1024, elements: !1838)
!1838 = !{!1839, !1840, !1841}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1837, file: !146, line: 2851, baseType: !1281, size: 960)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1837, file: !146, line: 2852, baseType: !6, size: 32, offset: 960)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1837, file: !146, line: 2853, baseType: !6, size: 32, offset: 992)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1111, file: !146, line: 3390, baseType: !1843, size: 1024)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !146, line: 2857, size: 1024, elements: !1844)
!1844 = !{!1845, !1846}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1843, file: !146, line: 2858, baseType: !1281, size: 960)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1843, file: !146, line: 2859, baseType: !1810, size: 64, offset: 960)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1111, file: !146, line: 3391, baseType: !1848, size: 960)
!1848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !146, line: 2862, size: 960, elements: !1849)
!1849 = !{!1850}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1848, file: !146, line: 2863, baseType: !1281, size: 960)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1111, file: !146, line: 3392, baseType: !1852, size: 1472)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !146, line: 3304, size: 1472, elements: !1853)
!1853 = !{!1854}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1852, file: !146, line: 3305, baseType: !1777, size: 1472)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1111, file: !146, line: 3393, baseType: !1856, size: 1792)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !146, line: 3248, size: 1792, elements: !1857)
!1857 = !{!1858, !1859, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1856, file: !146, line: 3249, baseType: !1777, size: 1472)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1856, file: !146, line: 3251, baseType: !1860, size: 64, offset: 1472)
!1860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1861, size: 64)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1862, line: 463, size: 1152, elements: !1863)
!1862 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1863 = !{!1864, !1865, !1896, !1897, !2008, !2011, !2012, !2013, !2014, !2015, !2016, !2040, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1861, file: !1862, line: 464, baseType: !1083, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1861, file: !1862, line: 467, baseType: !1866, size: 64, offset: 64)
!1866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1867, size: 64)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !341, line: 374, size: 640, elements: !1868)
!1868 = !{!1869, !1871, !1872, !1885, !1886, !1887, !1888, !1889, !1890, !1892, !1894, !1895}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1867, file: !341, line: 377, baseType: !1870, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !769, line: 111, baseType: !1401)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1867, file: !341, line: 378, baseType: !1870, size: 64, offset: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1867, file: !341, line: 381, baseType: !1873, size: 64, offset: 128)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !341, line: 282, baseType: !1875)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !341, line: 282, size: 128, elements: !1876)
!1876 = !{!1877}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1875, file: !341, line: 282, baseType: !1878, size: 128)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !341, line: 281, baseType: !1879)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !341, line: 281, size: 128, elements: !1880)
!1880 = !{!1881, !1882, !1883}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1879, file: !341, line: 281, baseType: !11, size: 32)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1879, file: !341, line: 281, baseType: !11, size: 32, offset: 32)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1879, file: !341, line: 281, baseType: !1884, size: 64, offset: 64)
!1884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1870, size: 64, elements: !1208)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1867, file: !341, line: 384, baseType: !6, size: 32, offset: 192)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1867, file: !341, line: 387, baseType: !6, size: 32, offset: 224)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1867, file: !341, line: 390, baseType: !6, size: 32, offset: 256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1867, file: !341, line: 394, baseType: !1873, size: 64, offset: 320)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1867, file: !341, line: 396, baseType: !340, size: 32, offset: 384)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1867, file: !341, line: 399, baseType: !1891, size: 64, offset: 416)
!1891 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 64, elements: !1354)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1867, file: !341, line: 402, baseType: !1893, size: 64, offset: 480)
!1893 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, elements: !1354)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1867, file: !341, line: 406, baseType: !6, size: 32, offset: 544)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1867, file: !341, line: 409, baseType: !6, size: 32, offset: 576)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1861, file: !1862, line: 470, baseType: !1428, size: 64, offset: 128)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1861, file: !1862, line: 473, baseType: !1898, size: 64, offset: 192)
!1898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1812, line: 39, size: 1152, elements: !1900)
!1900 = !{!1901, !1948, !1961, !1973, !1974, !1986, !1987, !1990, !1991, !1992, !1993, !1994}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1899, file: !1812, line: 41, baseType: !1902, size: 64)
!1902 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !389, line: 144, baseType: !1903)
!1903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1904, size: 64)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !389, line: 100, size: 896, elements: !1905)
!1905 = !{!1906, !1912, !1917, !1922, !1924, !1925, !1926, !1927, !1928, !1929, !1934, !1936, !1937, !1942, !1947}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1904, file: !389, line: 102, baseType: !1907, size: 64)
!1907 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !389, line: 52, baseType: !1908)
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DISubroutineType(types: !1910)
!1910 = !{!1911, !1745}
!1911 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !389, line: 47, baseType: !11)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1904, file: !389, line: 105, baseType: !1913, size: 64, offset: 64)
!1913 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !389, line: 59, baseType: !1914)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1915, size: 64)
!1915 = !DISubroutineType(types: !1916)
!1916 = !{!6, !1745, !1745}
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1904, file: !389, line: 108, baseType: !1918, size: 64, offset: 128)
!1918 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !389, line: 63, baseType: !1919)
!1919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1920, size: 64)
!1920 = !DISubroutineType(types: !1921)
!1921 = !{null, !1390}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1904, file: !389, line: 111, baseType: !1923, size: 64, offset: 192)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1390, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1904, file: !389, line: 114, baseType: !1584, size: 64, offset: 256)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1904, file: !389, line: 117, baseType: !1584, size: 64, offset: 320)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1904, file: !389, line: 120, baseType: !1584, size: 64, offset: 384)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1904, file: !389, line: 124, baseType: !11, size: 32, offset: 448)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1904, file: !389, line: 128, baseType: !11, size: 32, offset: 480)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1904, file: !389, line: 131, baseType: !1930, size: 64, offset: 512)
!1930 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !389, line: 75, baseType: !1931)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = !DISubroutineType(types: !1933)
!1933 = !{!1390, !1584, !1584}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1904, file: !389, line: 132, baseType: !1935, size: 64, offset: 576)
!1935 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !389, line: 78, baseType: !1919)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1904, file: !389, line: 135, baseType: !1390, size: 64, offset: 640)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1904, file: !389, line: 136, baseType: !1938, size: 64, offset: 704)
!1938 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !389, line: 82, baseType: !1939)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DISubroutineType(types: !1941)
!1941 = !{!1390, !1390, !1584, !1584}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1904, file: !389, line: 137, baseType: !1943, size: 64, offset: 768)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !389, line: 83, baseType: !1944)
!1944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1945, size: 64)
!1945 = !DISubroutineType(types: !1946)
!1946 = !{null, !1390, !1390}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1904, file: !389, line: 141, baseType: !11, size: 32, offset: 832)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1899, file: !1812, line: 48, baseType: !1949, size: 64, offset: 64)
!1949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1950, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1430, line: 35, baseType: !1951)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1430, line: 35, size: 128, elements: !1952)
!1952 = !{!1953}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1951, file: !1430, line: 35, baseType: !1954, size: 128)
!1954 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1430, line: 33, baseType: !1955)
!1955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1430, line: 33, size: 128, elements: !1956)
!1956 = !{!1957, !1958, !1959}
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1955, file: !1430, line: 33, baseType: !11, size: 32)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1955, file: !1430, line: 33, baseType: !11, size: 32, offset: 32)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1955, file: !1430, line: 33, baseType: !1960, size: 64, offset: 64)
!1960 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1438, size: 64, elements: !1208)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1899, file: !1812, line: 51, baseType: !1962, size: 64, offset: 128)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !146, line: 183, baseType: !1964)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !146, line: 183, size: 128, elements: !1965)
!1965 = !{!1966}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1964, file: !146, line: 183, baseType: !1967, size: 128)
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !146, line: 182, baseType: !1968)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !146, line: 182, size: 128, elements: !1969)
!1969 = !{!1970, !1971, !1972}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1968, file: !146, line: 182, baseType: !11, size: 32)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1968, file: !146, line: 182, baseType: !11, size: 32, offset: 32)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1968, file: !146, line: 182, baseType: !1492, size: 64, offset: 64)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1899, file: !1812, line: 54, baseType: !1109, size: 64, offset: 192)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1899, file: !1812, line: 57, baseType: !1975, size: 128, offset: 256)
!1975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1976, line: 31, size: 128, elements: !1977)
!1976 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1977 = !{!1978, !1979, !1980, !1981, !1982, !1983, !1984}
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1975, file: !1976, line: 35, baseType: !11, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1975, file: !1976, line: 39, baseType: !11, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1975, file: !1976, line: 42, baseType: !11, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1975, file: !1976, line: 46, baseType: !11, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1975, file: !1976, line: 50, baseType: !11, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1975, file: !1976, line: 53, baseType: !11, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1975, file: !1976, line: 56, baseType: !1985, size: 64, offset: 64)
!1985 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !769, line: 47, baseType: !1338)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1899, file: !1812, line: 60, baseType: !1975, size: 128, offset: 384)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1899, file: !1812, line: 64, baseType: !1988, size: 64, offset: 512)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1989, size: 64)
!1989 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !10, line: 27, flags: DIFlagFwdDecl)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1899, file: !1812, line: 67, baseType: !1109, size: 64, offset: 576)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1899, file: !1812, line: 73, baseType: !1902, size: 64, offset: 640)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1899, file: !1812, line: 77, baseType: !1985, size: 64, offset: 704)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1899, file: !1812, line: 80, baseType: !11, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1899, file: !1812, line: 82, baseType: !1995, size: 320, offset: 832)
!1995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1469, line: 62, size: 320, elements: !1996)
!1996 = !{!1997, !2003, !2004, !2005, !2006, !2007}
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1995, file: !1469, line: 63, baseType: !1998, size: 64)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64)
!1999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1469, line: 56, size: 128, elements: !2000)
!2000 = !{!2001, !2002}
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1999, file: !1469, line: 57, baseType: !1998, size: 64)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1999, file: !1469, line: 58, baseType: !1206, size: 8, offset: 64)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1995, file: !1469, line: 64, baseType: !11, size: 32, offset: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1995, file: !1469, line: 66, baseType: !11, size: 32, offset: 96)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1995, file: !1469, line: 68, baseType: !1227, size: 8, offset: 128)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1995, file: !1469, line: 70, baseType: !1467, size: 64, offset: 192)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1995, file: !1469, line: 71, baseType: !1475, size: 64, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1861, file: !1862, line: 476, baseType: !2009, size: 64, offset: 256)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1862, line: 476, flags: DIFlagFwdDecl)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1861, file: !1862, line: 479, baseType: !1902, size: 64, offset: 320)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1861, file: !1862, line: 484, baseType: !1109, size: 64, offset: 384)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1861, file: !1862, line: 488, baseType: !1109, size: 64, offset: 448)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1861, file: !1862, line: 493, baseType: !1109, size: 64, offset: 512)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1861, file: !1862, line: 496, baseType: !1109, size: 64, offset: 576)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1861, file: !1862, line: 501, baseType: !2017, size: 64, offset: 640)
!2017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2018, size: 64)
!2018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !352, line: 2355, size: 576, elements: !2019)
!2019 = !{!2020, !2023, !2024, !2025, !2026, !2028, !2029, !2034, !2035, !2036, !2037, !2038, !2039}
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2018, file: !352, line: 2356, baseType: !2021, size: 64)
!2021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2022, size: 64)
!2022 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !352, line: 2356, flags: DIFlagFwdDecl)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2018, file: !352, line: 2357, baseType: !1310, size: 64, offset: 64)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2018, file: !352, line: 2358, baseType: !6, size: 32, offset: 128)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2018, file: !352, line: 2359, baseType: !6, size: 32, offset: 160)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2018, file: !352, line: 2360, baseType: !2027, size: 128, offset: 192)
!2027 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 128, elements: !1379)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2018, file: !352, line: 2364, baseType: !6, size: 32, offset: 320)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2018, file: !352, line: 2367, baseType: !2030, size: 128, offset: 384)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !352, line: 2349, size: 128, elements: !2031)
!2031 = !{!2032, !2033}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2030, file: !352, line: 2351, baseType: !1285, size: 64)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2030, file: !352, line: 2352, baseType: !1164, size: 64, offset: 64)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2018, file: !352, line: 2371, baseType: !351, size: 32, offset: 512)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2018, file: !352, line: 2374, baseType: !11, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2018, file: !352, line: 2377, baseType: !11, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2018, file: !352, line: 2381, baseType: !11, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2018, file: !352, line: 2392, baseType: !11, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2018, file: !352, line: 2396, baseType: !11, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1861, file: !1862, line: 504, baseType: !2041, size: 64, offset: 704)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1862, line: 504, flags: DIFlagFwdDecl)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1861, file: !1862, line: 507, baseType: !1902, size: 64, offset: 768)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1861, file: !1862, line: 510, baseType: !6, size: 32, offset: 832)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1861, file: !1862, line: 513, baseType: !6, size: 32, offset: 864)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1861, file: !1862, line: 516, baseType: !1235, size: 32, offset: 896)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1861, file: !1862, line: 519, baseType: !1235, size: 32, offset: 928)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1861, file: !1862, line: 522, baseType: !11, size: 32, offset: 960)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1861, file: !1862, line: 523, baseType: !11, size: 32, offset: 992)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1861, file: !1862, line: 528, baseType: !1310, size: 64, offset: 1024)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1861, file: !1862, line: 535, baseType: !11, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1861, file: !1862, line: 539, baseType: !11, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1861, file: !1862, line: 543, baseType: !11, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1861, file: !1862, line: 546, baseType: !11, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1861, file: !1862, line: 550, baseType: !11, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1861, file: !1862, line: 554, baseType: !11, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1861, file: !1862, line: 559, baseType: !11, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1861, file: !1862, line: 562, baseType: !11, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1861, file: !1862, line: 571, baseType: !11, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1861, file: !1862, line: 573, baseType: !11, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1861, file: !1862, line: 574, baseType: !11, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1861, file: !1862, line: 581, baseType: !11, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1861, file: !1862, line: 585, baseType: !11, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1861, file: !1862, line: 588, baseType: !11, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1861, file: !1862, line: 592, baseType: !11, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1861, file: !1862, line: 598, baseType: !11, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1856, file: !146, line: 3254, baseType: !1109, size: 64, offset: 1536)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1856, file: !146, line: 3257, baseType: !1109, size: 64, offset: 1600)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1856, file: !146, line: 3258, baseType: !1109, size: 64, offset: 1664)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1856, file: !146, line: 3264, baseType: !11, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1856, file: !146, line: 3265, baseType: !11, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1856, file: !146, line: 3267, baseType: !11, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1856, file: !146, line: 3268, baseType: !11, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1856, file: !146, line: 3269, baseType: !11, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1856, file: !146, line: 3271, baseType: !11, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1856, file: !146, line: 3272, baseType: !11, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1856, file: !146, line: 3273, baseType: !11, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1856, file: !146, line: 3274, baseType: !11, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1856, file: !146, line: 3275, baseType: !11, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1856, file: !146, line: 3276, baseType: !11, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1856, file: !146, line: 3277, baseType: !11, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1856, file: !146, line: 3279, baseType: !11, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1856, file: !146, line: 3280, baseType: !11, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1856, file: !146, line: 3281, baseType: !11, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1856, file: !146, line: 3282, baseType: !11, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1856, file: !146, line: 3283, baseType: !11, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1856, file: !146, line: 3284, baseType: !11, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1111, file: !146, line: 3394, baseType: !2089, size: 1344)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !146, line: 2279, size: 1344, elements: !2090)
!2090 = !{!2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2089, file: !146, line: 2280, baseType: !1147, size: 192)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2089, file: !146, line: 2281, baseType: !1109, size: 64, offset: 192)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2089, file: !146, line: 2282, baseType: !1109, size: 64, offset: 256)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2089, file: !146, line: 2283, baseType: !1109, size: 64, offset: 320)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2089, file: !146, line: 2284, baseType: !1109, size: 64, offset: 384)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2089, file: !146, line: 2285, baseType: !11, size: 32, offset: 448)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2089, file: !146, line: 2287, baseType: !11, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2089, file: !146, line: 2288, baseType: !11, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2089, file: !146, line: 2289, baseType: !11, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2089, file: !146, line: 2290, baseType: !11, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2089, file: !146, line: 2291, baseType: !11, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2089, file: !146, line: 2292, baseType: !11, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2089, file: !146, line: 2294, baseType: !11, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2089, file: !146, line: 2296, baseType: !11, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2089, file: !146, line: 2297, baseType: !11, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2089, file: !146, line: 2298, baseType: !11, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2089, file: !146, line: 2299, baseType: !11, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2089, file: !146, line: 2300, baseType: !11, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2089, file: !146, line: 2301, baseType: !11, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2089, file: !146, line: 2302, baseType: !11, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2089, file: !146, line: 2303, baseType: !11, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2089, file: !146, line: 2305, baseType: !11, size: 32, offset: 512)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2089, file: !146, line: 2306, baseType: !1695, size: 32, offset: 544)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2089, file: !146, line: 2307, baseType: !1109, size: 64, offset: 576)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2089, file: !146, line: 2308, baseType: !1109, size: 64, offset: 640)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2089, file: !146, line: 2314, baseType: !2117, size: 64, offset: 704)
!2117 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !146, line: 2309, size: 64, elements: !2118)
!2118 = !{!2119, !2120, !2121}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2117, file: !146, line: 2310, baseType: !6, size: 32)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2117, file: !146, line: 2311, baseType: !1310, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2117, file: !146, line: 2312, baseType: !2122, size: 64)
!2122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2123, size: 64)
!2123 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !146, line: 2277, flags: DIFlagFwdDecl)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2089, file: !146, line: 2315, baseType: !1109, size: 64, offset: 768)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2089, file: !146, line: 2316, baseType: !1109, size: 64, offset: 832)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2089, file: !146, line: 2317, baseType: !1109, size: 64, offset: 896)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2089, file: !146, line: 2318, baseType: !1109, size: 64, offset: 960)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2089, file: !146, line: 2319, baseType: !1109, size: 64, offset: 1024)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2089, file: !146, line: 2320, baseType: !1109, size: 64, offset: 1088)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2089, file: !146, line: 2321, baseType: !1109, size: 64, offset: 1152)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2089, file: !146, line: 2322, baseType: !1109, size: 64, offset: 1216)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2089, file: !146, line: 2324, baseType: !2133, size: 64, offset: 1280)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !146, line: 2324, flags: DIFlagFwdDecl)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1111, file: !146, line: 3395, baseType: !2136, size: 320)
!2136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !146, line: 1469, size: 320, elements: !2137)
!2137 = !{!2138, !2139, !2140}
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2136, file: !146, line: 1470, baseType: !1147, size: 192)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2136, file: !146, line: 1471, baseType: !1109, size: 64, offset: 192)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2136, file: !146, line: 1472, baseType: !1109, size: 64, offset: 256)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1111, file: !146, line: 3396, baseType: !2142, size: 320)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !146, line: 1482, size: 320, elements: !2143)
!2143 = !{!2144, !2145, !2146}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2142, file: !146, line: 1483, baseType: !1147, size: 192)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2142, file: !146, line: 1484, baseType: !6, size: 32, offset: 192)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2142, file: !146, line: 1485, baseType: !1492, size: 64, offset: 256)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1111, file: !146, line: 3397, baseType: !2148, size: 384)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !146, line: 1829, size: 384, elements: !2149)
!2149 = !{!2150, !2151, !2152, !2153}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2148, file: !146, line: 1830, baseType: !1147, size: 192)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2148, file: !146, line: 1831, baseType: !1235, size: 32, offset: 192)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2148, file: !146, line: 1832, baseType: !1109, size: 64, offset: 256)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2148, file: !146, line: 1835, baseType: !1492, size: 64, offset: 320)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1111, file: !146, line: 3398, baseType: !2155, size: 704)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !146, line: 1898, size: 704, elements: !2156)
!2156 = !{!2157, !2158, !2159, !2160, !2161, !2166}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2155, file: !146, line: 1899, baseType: !1147, size: 192)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2155, file: !146, line: 1902, baseType: !1109, size: 64, offset: 192)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2155, file: !146, line: 1905, baseType: !1438, size: 64, offset: 256)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2155, file: !146, line: 1908, baseType: !11, size: 32, offset: 320)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2155, file: !146, line: 1911, baseType: !2162, size: 64, offset: 384)
!2162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2163, size: 64)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1812, line: 117, size: 128, elements: !2164)
!2164 = !{!2165}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2163, file: !1812, line: 120, baseType: !1975, size: 128)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2155, file: !146, line: 1914, baseType: !1480, size: 256, offset: 448)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1111, file: !146, line: 3399, baseType: !2168, size: 704)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !146, line: 2008, size: 704, elements: !2169)
!2169 = !{!2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2168, file: !146, line: 2009, baseType: !1147, size: 192)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2168, file: !146, line: 2011, baseType: !11, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2168, file: !146, line: 2012, baseType: !11, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2168, file: !146, line: 2014, baseType: !1235, size: 32, offset: 224)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2168, file: !146, line: 2016, baseType: !1109, size: 64, offset: 256)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2168, file: !146, line: 2017, baseType: !1962, size: 64, offset: 320)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2168, file: !146, line: 2019, baseType: !1109, size: 64, offset: 384)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2168, file: !146, line: 2020, baseType: !1109, size: 64, offset: 448)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2168, file: !146, line: 2021, baseType: !1109, size: 64, offset: 512)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2168, file: !146, line: 2022, baseType: !1109, size: 64, offset: 576)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2168, file: !146, line: 2023, baseType: !1109, size: 64, offset: 640)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1111, file: !146, line: 3400, baseType: !2182, size: 832)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !146, line: 2430, size: 832, elements: !2183)
!2183 = !{!2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2182, file: !146, line: 2431, baseType: !1147, size: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2182, file: !146, line: 2433, baseType: !1109, size: 64, offset: 192)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2182, file: !146, line: 2434, baseType: !1109, size: 64, offset: 256)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2182, file: !146, line: 2435, baseType: !1109, size: 64, offset: 320)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2182, file: !146, line: 2436, baseType: !1109, size: 64, offset: 384)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2182, file: !146, line: 2437, baseType: !1962, size: 64, offset: 448)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2182, file: !146, line: 2438, baseType: !1109, size: 64, offset: 512)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2182, file: !146, line: 2440, baseType: !1109, size: 64, offset: 576)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2182, file: !146, line: 2441, baseType: !1109, size: 64, offset: 640)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2182, file: !146, line: 2443, baseType: !2194, size: 128, offset: 704)
!2194 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !146, line: 182, baseType: !2195)
!2195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !146, line: 182, size: 128, elements: !2196)
!2196 = !{!2197}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2195, file: !146, line: 182, baseType: !1967, size: 128)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1111, file: !146, line: 3401, baseType: !2199, size: 320)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !146, line: 3327, size: 320, elements: !2200)
!2200 = !{!2201, !2202, !2209}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2199, file: !146, line: 3329, baseType: !1147, size: 192)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2199, file: !146, line: 3330, baseType: !2203, size: 64, offset: 192)
!2203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2204, size: 64)
!2204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !146, line: 3320, size: 192, elements: !2205)
!2205 = !{!2206, !2207, !2208}
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2204, file: !146, line: 3322, baseType: !2203, size: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2204, file: !146, line: 3323, baseType: !2203, size: 64, offset: 64)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2204, file: !146, line: 3324, baseType: !1109, size: 64, offset: 128)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2199, file: !146, line: 3331, baseType: !2203, size: 64, offset: 256)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1111, file: !146, line: 3402, baseType: !2211, size: 256)
!2211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !146, line: 1540, size: 256, elements: !2212)
!2212 = !{!2213, !2214}
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2211, file: !146, line: 1541, baseType: !1147, size: 192)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2211, file: !146, line: 1542, baseType: !2215, size: 64, offset: 192)
!2215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2216, size: 64)
!2216 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !146, line: 1538, baseType: !2217)
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !146, line: 1538, size: 192, elements: !2218)
!2218 = !{!2219}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2217, file: !146, line: 1538, baseType: !2220, size: 192)
!2220 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !146, line: 1537, baseType: !2221)
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !146, line: 1537, size: 192, elements: !2222)
!2222 = !{!2223, !2224, !2225}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2221, file: !146, line: 1537, baseType: !11, size: 32)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2221, file: !146, line: 1537, baseType: !11, size: 32, offset: 32)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2221, file: !146, line: 1537, baseType: !2226, size: 128, offset: 64)
!2226 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2227, size: 128, elements: !1208)
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !146, line: 1535, baseType: !2228)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !146, line: 1532, size: 128, elements: !2229)
!2229 = !{!2230, !2231}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2228, file: !146, line: 1533, baseType: !1109, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2228, file: !146, line: 1534, baseType: !1109, size: 64, offset: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1111, file: !146, line: 3403, baseType: !2233, size: 512)
!2233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !146, line: 1938, size: 512, elements: !2234)
!2234 = !{!2235, !2236, !2237, !2238, !2244, !2245, !2246}
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2233, file: !146, line: 1939, baseType: !1147, size: 192)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2233, file: !146, line: 1940, baseType: !1235, size: 32, offset: 192)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2233, file: !146, line: 1941, baseType: !356, size: 32, offset: 224)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2233, file: !146, line: 1946, baseType: !2239, size: 32, offset: 256)
!2239 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !146, line: 1942, size: 32, elements: !2240)
!2240 = !{!2241, !2242, !2243}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2239, file: !146, line: 1943, baseType: !374, size: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2239, file: !146, line: 1944, baseType: !381, size: 32)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2239, file: !146, line: 1945, baseType: !145, size: 32)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2233, file: !146, line: 1950, baseType: !1427, size: 64, offset: 320)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2233, file: !146, line: 1951, baseType: !1427, size: 64, offset: 384)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2233, file: !146, line: 1953, baseType: !1492, size: 64, offset: 448)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1111, file: !146, line: 3404, baseType: !2248, size: 1664)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !146, line: 3337, size: 1664, elements: !2249)
!2249 = !{!2250, !2251}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2248, file: !146, line: 3338, baseType: !1147, size: 192)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2248, file: !146, line: 3341, baseType: !2252, size: 1472, offset: 192)
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2253, line: 410, size: 1472, elements: !2254)
!2253 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2254 = !{!2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418}
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2252, file: !2253, line: 412, baseType: !6, size: 32)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2252, file: !2253, line: 413, baseType: !6, size: 32, offset: 32)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2252, file: !2253, line: 414, baseType: !6, size: 32, offset: 64)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2252, file: !2253, line: 415, baseType: !6, size: 32, offset: 96)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2252, file: !2253, line: 416, baseType: !6, size: 32, offset: 128)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2252, file: !2253, line: 417, baseType: !6, size: 32, offset: 160)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2252, file: !2253, line: 418, baseType: !1227, size: 8, offset: 192)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2252, file: !2253, line: 419, baseType: !1227, size: 8, offset: 200)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2252, file: !2253, line: 420, baseType: !2264, size: 8, offset: 208)
!2264 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2252, file: !2253, line: 421, baseType: !2264, size: 8, offset: 216)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2252, file: !2253, line: 422, baseType: !2264, size: 8, offset: 224)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2252, file: !2253, line: 423, baseType: !2264, size: 8, offset: 232)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2252, file: !2253, line: 424, baseType: !2264, size: 8, offset: 240)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2252, file: !2253, line: 425, baseType: !2264, size: 8, offset: 248)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2252, file: !2253, line: 426, baseType: !2264, size: 8, offset: 256)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2252, file: !2253, line: 427, baseType: !2264, size: 8, offset: 264)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2252, file: !2253, line: 428, baseType: !2264, size: 8, offset: 272)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2252, file: !2253, line: 429, baseType: !2264, size: 8, offset: 280)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2252, file: !2253, line: 430, baseType: !2264, size: 8, offset: 288)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2252, file: !2253, line: 431, baseType: !2264, size: 8, offset: 296)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2252, file: !2253, line: 432, baseType: !2264, size: 8, offset: 304)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2252, file: !2253, line: 433, baseType: !2264, size: 8, offset: 312)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2252, file: !2253, line: 434, baseType: !2264, size: 8, offset: 320)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2252, file: !2253, line: 435, baseType: !2264, size: 8, offset: 328)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2252, file: !2253, line: 436, baseType: !2264, size: 8, offset: 336)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2252, file: !2253, line: 437, baseType: !2264, size: 8, offset: 344)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2252, file: !2253, line: 438, baseType: !2264, size: 8, offset: 352)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2252, file: !2253, line: 439, baseType: !2264, size: 8, offset: 360)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2252, file: !2253, line: 440, baseType: !2264, size: 8, offset: 368)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2252, file: !2253, line: 441, baseType: !2264, size: 8, offset: 376)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2252, file: !2253, line: 442, baseType: !2264, size: 8, offset: 384)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2252, file: !2253, line: 443, baseType: !2264, size: 8, offset: 392)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2252, file: !2253, line: 444, baseType: !2264, size: 8, offset: 400)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2252, file: !2253, line: 445, baseType: !2264, size: 8, offset: 408)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2252, file: !2253, line: 446, baseType: !2264, size: 8, offset: 416)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2252, file: !2253, line: 447, baseType: !2264, size: 8, offset: 424)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2252, file: !2253, line: 448, baseType: !2264, size: 8, offset: 432)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2252, file: !2253, line: 449, baseType: !2264, size: 8, offset: 440)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2252, file: !2253, line: 450, baseType: !2264, size: 8, offset: 448)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2252, file: !2253, line: 451, baseType: !2264, size: 8, offset: 456)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2252, file: !2253, line: 452, baseType: !2264, size: 8, offset: 464)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2252, file: !2253, line: 453, baseType: !2264, size: 8, offset: 472)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2252, file: !2253, line: 454, baseType: !2264, size: 8, offset: 480)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2252, file: !2253, line: 455, baseType: !2264, size: 8, offset: 488)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2252, file: !2253, line: 456, baseType: !2264, size: 8, offset: 496)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2252, file: !2253, line: 457, baseType: !2264, size: 8, offset: 504)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2252, file: !2253, line: 458, baseType: !2264, size: 8, offset: 512)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2252, file: !2253, line: 459, baseType: !2264, size: 8, offset: 520)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2252, file: !2253, line: 460, baseType: !2264, size: 8, offset: 528)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2252, file: !2253, line: 461, baseType: !2264, size: 8, offset: 536)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2252, file: !2253, line: 462, baseType: !2264, size: 8, offset: 544)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2252, file: !2253, line: 463, baseType: !2264, size: 8, offset: 552)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2252, file: !2253, line: 464, baseType: !2264, size: 8, offset: 560)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2252, file: !2253, line: 465, baseType: !2264, size: 8, offset: 568)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2252, file: !2253, line: 466, baseType: !2264, size: 8, offset: 576)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2252, file: !2253, line: 467, baseType: !2264, size: 8, offset: 584)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2252, file: !2253, line: 468, baseType: !2264, size: 8, offset: 592)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2252, file: !2253, line: 469, baseType: !2264, size: 8, offset: 600)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2252, file: !2253, line: 470, baseType: !2264, size: 8, offset: 608)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2252, file: !2253, line: 471, baseType: !2264, size: 8, offset: 616)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2252, file: !2253, line: 472, baseType: !2264, size: 8, offset: 624)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2252, file: !2253, line: 473, baseType: !2264, size: 8, offset: 632)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2252, file: !2253, line: 474, baseType: !2264, size: 8, offset: 640)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2252, file: !2253, line: 475, baseType: !2264, size: 8, offset: 648)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2252, file: !2253, line: 476, baseType: !2264, size: 8, offset: 656)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2252, file: !2253, line: 477, baseType: !2264, size: 8, offset: 664)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2252, file: !2253, line: 478, baseType: !2264, size: 8, offset: 672)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2252, file: !2253, line: 479, baseType: !2264, size: 8, offset: 680)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2252, file: !2253, line: 480, baseType: !2264, size: 8, offset: 688)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2252, file: !2253, line: 481, baseType: !2264, size: 8, offset: 696)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2252, file: !2253, line: 482, baseType: !2264, size: 8, offset: 704)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2252, file: !2253, line: 483, baseType: !2264, size: 8, offset: 712)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2252, file: !2253, line: 484, baseType: !2264, size: 8, offset: 720)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2252, file: !2253, line: 485, baseType: !2264, size: 8, offset: 728)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2252, file: !2253, line: 486, baseType: !2264, size: 8, offset: 736)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2252, file: !2253, line: 487, baseType: !2264, size: 8, offset: 744)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2252, file: !2253, line: 488, baseType: !2264, size: 8, offset: 752)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2252, file: !2253, line: 489, baseType: !2264, size: 8, offset: 760)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2252, file: !2253, line: 490, baseType: !2264, size: 8, offset: 768)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2252, file: !2253, line: 491, baseType: !2264, size: 8, offset: 776)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2252, file: !2253, line: 492, baseType: !2264, size: 8, offset: 784)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2252, file: !2253, line: 493, baseType: !2264, size: 8, offset: 792)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2252, file: !2253, line: 494, baseType: !2264, size: 8, offset: 800)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2252, file: !2253, line: 495, baseType: !2264, size: 8, offset: 808)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2252, file: !2253, line: 496, baseType: !2264, size: 8, offset: 816)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2252, file: !2253, line: 497, baseType: !2264, size: 8, offset: 824)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2252, file: !2253, line: 498, baseType: !2264, size: 8, offset: 832)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2252, file: !2253, line: 499, baseType: !2264, size: 8, offset: 840)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2252, file: !2253, line: 500, baseType: !2264, size: 8, offset: 848)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2252, file: !2253, line: 501, baseType: !2264, size: 8, offset: 856)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2252, file: !2253, line: 502, baseType: !2264, size: 8, offset: 864)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2252, file: !2253, line: 503, baseType: !2264, size: 8, offset: 872)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2252, file: !2253, line: 504, baseType: !2264, size: 8, offset: 880)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2252, file: !2253, line: 505, baseType: !2264, size: 8, offset: 888)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2252, file: !2253, line: 506, baseType: !2264, size: 8, offset: 896)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2252, file: !2253, line: 507, baseType: !2264, size: 8, offset: 904)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2252, file: !2253, line: 508, baseType: !2264, size: 8, offset: 912)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2252, file: !2253, line: 509, baseType: !2264, size: 8, offset: 920)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2252, file: !2253, line: 510, baseType: !2264, size: 8, offset: 928)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2252, file: !2253, line: 511, baseType: !2264, size: 8, offset: 936)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2252, file: !2253, line: 512, baseType: !2264, size: 8, offset: 944)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2252, file: !2253, line: 513, baseType: !2264, size: 8, offset: 952)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2252, file: !2253, line: 514, baseType: !2264, size: 8, offset: 960)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2252, file: !2253, line: 515, baseType: !2264, size: 8, offset: 968)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2252, file: !2253, line: 516, baseType: !2264, size: 8, offset: 976)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2252, file: !2253, line: 517, baseType: !2264, size: 8, offset: 984)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2252, file: !2253, line: 518, baseType: !2264, size: 8, offset: 992)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2252, file: !2253, line: 519, baseType: !2264, size: 8, offset: 1000)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2252, file: !2253, line: 520, baseType: !2264, size: 8, offset: 1008)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2252, file: !2253, line: 521, baseType: !2264, size: 8, offset: 1016)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2252, file: !2253, line: 522, baseType: !2264, size: 8, offset: 1024)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2252, file: !2253, line: 523, baseType: !2264, size: 8, offset: 1032)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2252, file: !2253, line: 524, baseType: !2264, size: 8, offset: 1040)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2252, file: !2253, line: 525, baseType: !2264, size: 8, offset: 1048)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2252, file: !2253, line: 526, baseType: !2264, size: 8, offset: 1056)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2252, file: !2253, line: 527, baseType: !2264, size: 8, offset: 1064)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2252, file: !2253, line: 528, baseType: !2264, size: 8, offset: 1072)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2252, file: !2253, line: 529, baseType: !2264, size: 8, offset: 1080)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2252, file: !2253, line: 530, baseType: !2264, size: 8, offset: 1088)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2252, file: !2253, line: 531, baseType: !2264, size: 8, offset: 1096)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2252, file: !2253, line: 532, baseType: !2264, size: 8, offset: 1104)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2252, file: !2253, line: 533, baseType: !2264, size: 8, offset: 1112)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2252, file: !2253, line: 534, baseType: !2264, size: 8, offset: 1120)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2252, file: !2253, line: 535, baseType: !2264, size: 8, offset: 1128)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2252, file: !2253, line: 536, baseType: !2264, size: 8, offset: 1136)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2252, file: !2253, line: 537, baseType: !2264, size: 8, offset: 1144)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2252, file: !2253, line: 538, baseType: !2264, size: 8, offset: 1152)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2252, file: !2253, line: 539, baseType: !2264, size: 8, offset: 1160)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2252, file: !2253, line: 540, baseType: !2264, size: 8, offset: 1168)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2252, file: !2253, line: 541, baseType: !2264, size: 8, offset: 1176)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2252, file: !2253, line: 542, baseType: !2264, size: 8, offset: 1184)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2252, file: !2253, line: 543, baseType: !2264, size: 8, offset: 1192)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2252, file: !2253, line: 544, baseType: !2264, size: 8, offset: 1200)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2252, file: !2253, line: 545, baseType: !2264, size: 8, offset: 1208)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2252, file: !2253, line: 546, baseType: !2264, size: 8, offset: 1216)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2252, file: !2253, line: 547, baseType: !2264, size: 8, offset: 1224)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2252, file: !2253, line: 548, baseType: !2264, size: 8, offset: 1232)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2252, file: !2253, line: 549, baseType: !2264, size: 8, offset: 1240)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2252, file: !2253, line: 550, baseType: !2264, size: 8, offset: 1248)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2252, file: !2253, line: 551, baseType: !2264, size: 8, offset: 1256)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2252, file: !2253, line: 552, baseType: !2264, size: 8, offset: 1264)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2252, file: !2253, line: 553, baseType: !2264, size: 8, offset: 1272)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2252, file: !2253, line: 554, baseType: !2264, size: 8, offset: 1280)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2252, file: !2253, line: 555, baseType: !2264, size: 8, offset: 1288)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2252, file: !2253, line: 556, baseType: !2264, size: 8, offset: 1296)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2252, file: !2253, line: 557, baseType: !2264, size: 8, offset: 1304)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2252, file: !2253, line: 558, baseType: !2264, size: 8, offset: 1312)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2252, file: !2253, line: 559, baseType: !2264, size: 8, offset: 1320)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2252, file: !2253, line: 560, baseType: !2264, size: 8, offset: 1328)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2252, file: !2253, line: 561, baseType: !2264, size: 8, offset: 1336)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2252, file: !2253, line: 562, baseType: !2264, size: 8, offset: 1344)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2252, file: !2253, line: 563, baseType: !2264, size: 8, offset: 1352)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2252, file: !2253, line: 564, baseType: !2264, size: 8, offset: 1360)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2252, file: !2253, line: 565, baseType: !2264, size: 8, offset: 1368)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2252, file: !2253, line: 566, baseType: !2264, size: 8, offset: 1376)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2252, file: !2253, line: 567, baseType: !2264, size: 8, offset: 1384)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2252, file: !2253, line: 568, baseType: !2264, size: 8, offset: 1392)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2252, file: !2253, line: 569, baseType: !2264, size: 8, offset: 1400)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2252, file: !2253, line: 570, baseType: !2264, size: 8, offset: 1408)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2252, file: !2253, line: 571, baseType: !2264, size: 8, offset: 1416)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2252, file: !2253, line: 572, baseType: !2264, size: 8, offset: 1424)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2252, file: !2253, line: 573, baseType: !2264, size: 8, offset: 1432)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2252, file: !2253, line: 574, baseType: !2264, size: 8, offset: 1440)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1111, file: !146, line: 3405, baseType: !2420, size: 384)
!2420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !146, line: 3352, size: 384, elements: !2421)
!2421 = !{!2422, !2423}
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2420, file: !146, line: 3353, baseType: !1147, size: 192)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2420, file: !146, line: 3356, baseType: !2424, size: 192, offset: 192)
!2424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2253, line: 578, size: 192, elements: !2425)
!2425 = !{!2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2424, file: !2253, line: 580, baseType: !6, size: 32)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2424, file: !2253, line: 581, baseType: !6, size: 32, offset: 32)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2424, file: !2253, line: 582, baseType: !6, size: 32, offset: 64)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2424, file: !2253, line: 583, baseType: !6, size: 32, offset: 96)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2424, file: !2253, line: 584, baseType: !1227, size: 8, offset: 128)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2424, file: !2253, line: 585, baseType: !1227, size: 8, offset: 136)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2424, file: !2253, line: 586, baseType: !1227, size: 8, offset: 144)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2424, file: !2253, line: 587, baseType: !1227, size: 8, offset: 152)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2424, file: !2253, line: 588, baseType: !1227, size: 8, offset: 160)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2424, file: !2253, line: 589, baseType: !1227, size: 8, offset: 168)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2424, file: !2253, line: 590, baseType: !1227, size: 8, offset: 176)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1104, file: !10, line: 106, baseType: !1109, size: 64, offset: 192)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1104, file: !10, line: 111, baseType: !1109, size: 64, offset: 256)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1100, file: !10, line: 136, baseType: !1103, size: 64, offset: 64)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1097, file: !10, line: 151, baseType: !2441, size: 192)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !10, line: 139, size: 192, elements: !2442)
!2442 = !{!2443, !2444, !2445}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2441, file: !10, line: 141, baseType: !1109, size: 64)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2441, file: !10, line: 145, baseType: !1109, size: 64, offset: 64)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2441, file: !10, line: 150, baseType: !6, size: 32, offset: 128)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1097, file: !10, line: 164, baseType: !2447, size: 128)
!2447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !10, line: 153, size: 128, elements: !2448)
!2448 = !{!2449, !2450}
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2447, file: !10, line: 161, baseType: !1109, size: 64)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2447, file: !10, line: 163, baseType: !1235, size: 32, offset: 64)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1089, file: !10, line: 168, baseType: !2452, size: 64, offset: 448)
!2452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2453, size: 64)
!2453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !10, line: 67, size: 320, elements: !2454)
!2454 = !{!2455, !2456, !2457, !2458, !2459}
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2453, file: !10, line: 70, baseType: !2452, size: 64)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2453, file: !10, line: 73, baseType: !1088, size: 64, offset: 64)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2453, file: !10, line: 78, baseType: !1109, size: 64, offset: 128)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2453, file: !10, line: 85, baseType: !1285, size: 64, offset: 192)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2453, file: !10, line: 88, baseType: !6, size: 32, offset: 256)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1089, file: !10, line: 173, baseType: !1285, size: 64, offset: 512)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1089, file: !10, line: 173, baseType: !1285, size: 64, offset: 576)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1089, file: !10, line: 177, baseType: !1227, size: 8, offset: 640)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1084, file: !10, line: 200, baseType: !2464, size: 64, offset: 64)
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2465 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !10, line: 185, baseType: !2466)
!2466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !10, line: 185, size: 128, elements: !2467)
!2467 = !{!2468}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2466, file: !10, line: 185, baseType: !2469, size: 128)
!2469 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !10, line: 184, baseType: !2470)
!2470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !10, line: 184, size: 128, elements: !2471)
!2471 = !{!2472, !2473, !2474}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2470, file: !10, line: 184, baseType: !11, size: 32)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2470, file: !10, line: 184, baseType: !11, size: 32, offset: 32)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2470, file: !10, line: 184, baseType: !2475, size: 64, offset: 64)
!2475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1087, size: 64, elements: !1208)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1084, file: !10, line: 203, baseType: !2477, size: 64, offset: 128)
!2477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2478 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !10, line: 189, baseType: !2479)
!2479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !10, line: 189, size: 128, elements: !2480)
!2480 = !{!2481}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2479, file: !10, line: 189, baseType: !2482, size: 128)
!2482 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !10, line: 188, baseType: !2483)
!2483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !10, line: 188, size: 128, elements: !2484)
!2484 = !{!2485, !2486, !2487}
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2483, file: !10, line: 188, baseType: !11, size: 32)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2483, file: !10, line: 188, baseType: !11, size: 32, offset: 32)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2483, file: !10, line: 188, baseType: !2488, size: 64, offset: 64)
!2488 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2489, size: 64, elements: !1208)
!2489 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !10, line: 180, baseType: !2452)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1084, file: !10, line: 207, baseType: !1902, size: 64, offset: 192)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1084, file: !10, line: 211, baseType: !1962, size: 64, offset: 256)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1084, file: !10, line: 220, baseType: !2493, size: 64, offset: 320)
!2493 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !10, line: 217, size: 64, elements: !2494)
!2494 = !{!2495, !2496}
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2493, file: !10, line: 218, baseType: !1962, size: 64)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2493, file: !10, line: 219, baseType: !2497, size: 64)
!2497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2498, size: 64)
!2498 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2499, line: 29, baseType: !2500)
!2499 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2499, line: 29, size: 96, elements: !2501)
!2501 = !{!2502}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2500, file: !2499, line: 29, baseType: !2503, size: 96)
!2503 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2499, line: 27, baseType: !2504)
!2504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2499, line: 27, size: 96, elements: !2505)
!2505 = !{!2506, !2507, !2508}
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2504, file: !2499, line: 27, baseType: !11, size: 32)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2504, file: !2499, line: 27, baseType: !11, size: 32, offset: 32)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2504, file: !2499, line: 27, baseType: !2509, size: 8, offset: 64)
!2509 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2510, size: 8, elements: !1208)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2499, line: 26, baseType: !1227)
!2511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2512, size: 64)
!2512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "call_site_record_d", file: !3, line: 172, size: 128, elements: !2513)
!2513 = !{!2514, !2515}
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2512, file: !3, line: 174, baseType: !1285, size: 64)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !2512, file: !3, line: 175, baseType: !6, size: 32, offset: 64)
!2516 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !769, line: 59, baseType: !2517)
!2517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2518, size: 64)
!2518 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1111)
!2519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2520, size: 64)
!2520 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2521)
!2521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ttypes_filter", file: !3, line: 718, size: 128, elements: !2522)
!2522 = !{!2523, !2524}
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !2521, file: !3, line: 719, baseType: !1109, size: 64)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2521, file: !3, line: 720, baseType: !6, size: 32, offset: 64)
!2525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2526, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2521, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1285, size: 64)
!2528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2529, size: 64)
!2529 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2530)
!2530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "action_record", file: !3, line: 2207, size: 96, elements: !2531)
!2531 = !{!2532, !2533, !2534}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2530, file: !3, line: 2209, baseType: !6, size: 32)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2530, file: !3, line: 2210, baseType: !6, size: 32, offset: 32)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2530, file: !3, line: 2211, baseType: !6, size: 32, offset: 64)
!2535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2536, size: 64)
!2536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2538, size: 64)
!2538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_call_site_record_gc", file: !1862, line: 143, baseType: !2539)
!2539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_call_site_record_gc", file: !1862, line: 143, size: 128, elements: !2540)
!2540 = !{!2541}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2539, file: !1862, line: 143, baseType: !2542, size: 128)
!2542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_call_site_record_base", file: !1862, line: 142, baseType: !2543)
!2543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_call_site_record_base", file: !1862, line: 142, size: 128, elements: !2544)
!2544 = !{!2545, !2546, !2547}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2543, file: !1862, line: 142, baseType: !11, size: 32)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2543, file: !1862, line: 142, baseType: !11, size: 32, offset: 32)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2543, file: !1862, line: 142, baseType: !2548, size: 64, offset: 64)
!2548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2549, size: 64, elements: !1208)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_site_record", file: !1862, line: 141, baseType: !2511)
!2550 = !{!0, !2551, !2579, !2581, !2583, !2642, !2656, !2659, !2664, !2669, !2671, !2673}
!2551 = !DIGlobalVariableExpression(var: !2552, expr: !DIExpression())
!2552 = distinct !DIGlobalVariable(name: "pass_rtl_eh", scope: !7, file: !3, line: 1470, type: !2553, isLocal: false, isDefinition: true)
!2553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !394, line: 162, size: 640, elements: !2554)
!2554 = !{!2555}
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2553, file: !394, line: 164, baseType: !2556, size: 640)
!2556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !394, line: 114, size: 640, elements: !2557)
!2557 = !{!2558, !2559, !2560, !2564, !2568, !2570, !2571, !2572, !2574, !2575, !2576, !2577, !2578}
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2556, file: !394, line: 117, baseType: !393, size: 32)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2556, file: !394, line: 121, baseType: !1310, size: 64, offset: 64)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2556, file: !394, line: 125, baseType: !2561, size: 64, offset: 128)
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2562, size: 64)
!2562 = !DISubroutineType(types: !2563)
!2563 = !{!1227}
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2556, file: !394, line: 130, baseType: !2565, size: 64, offset: 192)
!2565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2566, size: 64)
!2566 = !DISubroutineType(types: !2567)
!2567 = !{!11}
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2556, file: !394, line: 133, baseType: !2569, size: 64, offset: 256)
!2569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2556, size: 64)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2556, file: !394, line: 136, baseType: !2569, size: 64, offset: 320)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2556, file: !394, line: 139, baseType: !6, size: 32, offset: 384)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2556, file: !394, line: 143, baseType: !2573, size: 32, offset: 416)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !401, line: 80, baseType: !400)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2556, file: !394, line: 146, baseType: !11, size: 32, offset: 448)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2556, file: !394, line: 147, baseType: !11, size: 32, offset: 480)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2556, file: !394, line: 148, baseType: !11, size: 32, offset: 512)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2556, file: !394, line: 151, baseType: !11, size: 32, offset: 544)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2556, file: !394, line: 152, baseType: !11, size: 32, offset: 576)
!2579 = !DIGlobalVariableExpression(var: !2580, expr: !DIExpression())
!2580 = distinct !DIGlobalVariable(name: "pass_set_nothrow_function_flags", scope: !7, file: !3, line: 1910, type: !2553, isLocal: false, isDefinition: true)
!2581 = !DIGlobalVariableExpression(var: !2582, expr: !DIExpression())
!2582 = distinct !DIGlobalVariable(name: "pass_convert_to_eh_region_ranges", scope: !7, file: !3, line: 2661, type: !2553, isLocal: false, isDefinition: true)
!2583 = !DIGlobalVariableExpression(var: !2584, expr: !DIExpression())
!2584 = distinct !DIGlobalVariable(name: "type_name", scope: !2585, file: !3, line: 3203, type: !2640, isLocal: true, isDefinition: true)
!2585 = distinct !DISubprogram(name: "dump_eh_tree", scope: !3, file: !3, line: 3199, type: !2586, scopeLine: 3200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2586 = !DISubroutineType(types: !2587)
!2587 = !{null, !2588, !1860}
!2588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2589, size: 64)
!2589 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2590, line: 7, baseType: !2591)
!2590 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2592, line: 49, size: 1728, elements: !2593)
!2592 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2593 = !{!2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2609, !2611, !2612, !2613, !2616, !2618, !2619, !2620, !2623, !2625, !2628, !2631, !2632, !2633, !2634, !2635}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2591, file: !2592, line: 51, baseType: !6, size: 32)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2591, file: !2592, line: 54, baseType: !1375, size: 64, offset: 64)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2591, file: !2592, line: 55, baseType: !1375, size: 64, offset: 128)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2591, file: !2592, line: 56, baseType: !1375, size: 64, offset: 192)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2591, file: !2592, line: 57, baseType: !1375, size: 64, offset: 256)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2591, file: !2592, line: 58, baseType: !1375, size: 64, offset: 320)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2591, file: !2592, line: 59, baseType: !1375, size: 64, offset: 384)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2591, file: !2592, line: 60, baseType: !1375, size: 64, offset: 448)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2591, file: !2592, line: 61, baseType: !1375, size: 64, offset: 512)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2591, file: !2592, line: 64, baseType: !1375, size: 64, offset: 576)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2591, file: !2592, line: 65, baseType: !1375, size: 64, offset: 640)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2591, file: !2592, line: 66, baseType: !1375, size: 64, offset: 704)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2591, file: !2592, line: 68, baseType: !2607, size: 64, offset: 768)
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2608, size: 64)
!2608 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2592, line: 36, flags: DIFlagFwdDecl)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2591, file: !2592, line: 70, baseType: !2610, size: 64, offset: 832)
!2610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2591, size: 64)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2591, file: !2592, line: 72, baseType: !6, size: 32, offset: 896)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2591, file: !2592, line: 73, baseType: !6, size: 32, offset: 928)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2591, file: !2592, line: 74, baseType: !2614, size: 64, offset: 960)
!2614 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2615, line: 152, baseType: !1164)
!2615 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2591, file: !2592, line: 77, baseType: !2617, size: 16, offset: 1024)
!2617 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2591, file: !2592, line: 78, baseType: !2264, size: 8, offset: 1040)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2591, file: !2592, line: 79, baseType: !1206, size: 8, offset: 1048)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2591, file: !2592, line: 81, baseType: !2621, size: 64, offset: 1088)
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2622 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2592, line: 43, baseType: null)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2591, file: !2592, line: 89, baseType: !2624, size: 64, offset: 1152)
!2624 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2615, line: 153, baseType: !1164)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2591, file: !2592, line: 91, baseType: !2626, size: 64, offset: 1216)
!2626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2627, size: 64)
!2627 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2592, line: 37, flags: DIFlagFwdDecl)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2591, file: !2592, line: 92, baseType: !2629, size: 64, offset: 1280)
!2629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2630, size: 64)
!2630 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2592, line: 38, flags: DIFlagFwdDecl)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2591, file: !2592, line: 93, baseType: !2610, size: 64, offset: 1344)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2591, file: !2592, line: 94, baseType: !1390, size: 64, offset: 1408)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2591, file: !2592, line: 95, baseType: !1584, size: 64, offset: 1472)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2591, file: !2592, line: 96, baseType: !6, size: 32, offset: 1536)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2591, file: !2592, line: 98, baseType: !2636, size: 160, offset: 1568)
!2636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1207, size: 160, elements: !2637)
!2637 = !{!2638}
!2638 = !DISubrange(count: 20)
!2639 = !{}
!2640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2641, size: 256, elements: !1379)
!2641 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1310)
!2642 = !DIGlobalVariableExpression(var: !2643, expr: !DIExpression())
!2643 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_except_h", scope: !7, file: !2644, line: 55, type: !2645, isLocal: false, isDefinition: true)
!2644 = !DIFile(filename: "./gt-except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2645 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2646, size: 960, elements: !1182)
!2646 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2647)
!2647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2648, line: 69, size: 320, elements: !2649)
!2648 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2649 = !{!2650, !2651, !2652, !2653, !2655}
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2647, file: !2648, line: 70, baseType: !1390, size: 64)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2647, file: !2648, line: 71, baseType: !1584, size: 64, offset: 64)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2647, file: !2648, line: 72, baseType: !1584, size: 64, offset: 128)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2647, file: !2648, line: 73, baseType: !2654, size: 64, offset: 192)
!2654 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2648, line: 65, baseType: !1919)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2647, file: !2648, line: 74, baseType: !2654, size: 64, offset: 256)
!2656 = !DIGlobalVariableExpression(var: !2657, expr: !DIExpression())
!2657 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_except_h", scope: !7, file: !2644, line: 73, type: !2658, isLocal: false, isDefinition: true)
!2658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2646, size: 640, elements: !1354)
!2659 = !DIGlobalVariableExpression(var: !2660, expr: !DIExpression())
!2660 = distinct !DIGlobalVariable(name: "lang_protect_cleanup_actions", scope: !7, file: !3, line: 154, type: !2661, isLocal: false, isDefinition: true)
!2661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2662, size: 64)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{!1109}
!2664 = !DIGlobalVariableExpression(var: !2665, expr: !DIExpression())
!2665 = distinct !DIGlobalVariable(name: "lang_eh_type_covers", scope: !7, file: !3, line: 157, type: !2666, isLocal: false, isDefinition: true)
!2666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2667, size: 64)
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!6, !1109, !1109}
!2669 = !DIGlobalVariableExpression(var: !2670, expr: !DIExpression())
!2670 = distinct !DIGlobalVariable(name: "call_site_base", scope: !7, file: !3, line: 159, type: !6, isLocal: true, isDefinition: true)
!2671 = !DIGlobalVariableExpression(var: !2672, expr: !DIExpression())
!2672 = distinct !DIGlobalVariable(name: "type_to_runtime_map", scope: !7, file: !3, line: 161, type: !1902, isLocal: true, isDefinition: true)
!2673 = !DIGlobalVariableExpression(var: !2674, expr: !DIExpression())
!2674 = distinct !DIGlobalVariable(name: "sjlj_fc_type_node", scope: !7, file: !3, line: 164, type: !1109, isLocal: true, isDefinition: true)
!2675 = !{i32 7, !"Dwarf Version", i32 4}
!2676 = !{i32 2, !"Debug Info Version", i32 3}
!2677 = !{i32 1, !"wchar_size", i32 4}
!2678 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2679 = !DILocalVariable(name: "do_warn", arg: 1, scope: !2, file: !3, line: 216, type: !6)
!2680 = !DILocation(line: 216, column: 15, scope: !2)
!2681 = !DILocation(line: 218, column: 9, scope: !2682)
!2682 = distinct !DILexicalBlock(scope: !2, file: !3, line: 218, column: 7)
!2683 = !DILocation(line: 218, column: 7, scope: !2)
!2684 = !DILocation(line: 221, column: 13, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2686, file: !3, line: 221, column: 11)
!2686 = distinct !DILexicalBlock(scope: !2682, file: !3, line: 219, column: 5)
!2687 = !DILocation(line: 221, column: 20, scope: !2685)
!2688 = !DILocation(line: 221, column: 23, scope: !2685)
!2689 = !DILocation(line: 221, column: 11, scope: !2686)
!2690 = !DILocation(line: 223, column: 4, scope: !2691)
!2691 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 222, column: 2)
!2692 = !DILocation(line: 224, column: 11, scope: !2691)
!2693 = !DILocation(line: 225, column: 2, scope: !2691)
!2694 = !DILocation(line: 226, column: 7, scope: !2686)
!2695 = !DILocation(line: 228, column: 3, scope: !2)
!2696 = !DILocation(line: 229, column: 1, scope: !2)
!2697 = distinct !DISubprogram(name: "init_eh", scope: !3, file: !3, line: 233, type: !2698, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2698 = !DISubroutineType(types: !2699)
!2699 = !{null}
!2700 = !DILocation(line: 235, column: 9, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2697, file: !3, line: 235, column: 7)
!2702 = !DILocation(line: 235, column: 7, scope: !2697)
!2703 = !DILocation(line: 236, column: 5, scope: !2701)
!2704 = !DILocation(line: 238, column: 25, scope: !2697)
!2705 = !DILocation(line: 238, column: 23, scope: !2697)
!2706 = !DILocation(line: 329, column: 1, scope: !2697)
!2707 = distinct !DISubprogram(name: "t2r_hash", scope: !3, file: !3, line: 675, type: !1909, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2708 = !DILocalVariable(name: "pentry", arg: 1, scope: !2707, file: !3, line: 675, type: !1745)
!2709 = !DILocation(line: 675, column: 23, scope: !2707)
!2710 = !DILocalVariable(name: "entry", scope: !2707, file: !3, line: 677, type: !2711)
!2711 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2516)
!2712 = !DILocation(line: 677, column: 20, scope: !2707)
!2713 = !DILocation(line: 677, column: 41, scope: !2707)
!2714 = !DILocation(line: 677, column: 28, scope: !2707)
!2715 = !DILocation(line: 678, column: 10, scope: !2707)
!2716 = !DILocation(line: 678, column: 3, scope: !2707)
!2717 = distinct !DISubprogram(name: "t2r_eq", scope: !3, file: !3, line: 666, type: !1915, scopeLine: 667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2718 = !DILocalVariable(name: "pentry", arg: 1, scope: !2717, file: !3, line: 666, type: !1745)
!2719 = !DILocation(line: 666, column: 21, scope: !2717)
!2720 = !DILocalVariable(name: "pdata", arg: 2, scope: !2717, file: !3, line: 666, type: !1745)
!2721 = !DILocation(line: 666, column: 41, scope: !2717)
!2722 = !DILocalVariable(name: "entry", scope: !2717, file: !3, line: 668, type: !2711)
!2723 = !DILocation(line: 668, column: 20, scope: !2717)
!2724 = !DILocation(line: 668, column: 41, scope: !2717)
!2725 = !DILocation(line: 668, column: 28, scope: !2717)
!2726 = !DILocalVariable(name: "data", scope: !2717, file: !3, line: 669, type: !2711)
!2727 = !DILocation(line: 669, column: 20, scope: !2717)
!2728 = !DILocation(line: 669, column: 40, scope: !2717)
!2729 = !DILocation(line: 669, column: 27, scope: !2717)
!2730 = !DILocation(line: 671, column: 10, scope: !2717)
!2731 = !DILocation(line: 671, column: 34, scope: !2717)
!2732 = !DILocation(line: 671, column: 31, scope: !2717)
!2733 = !DILocation(line: 671, column: 3, scope: !2717)
!2734 = distinct !DISubprogram(name: "init_eh_for_function", scope: !3, file: !3, line: 332, type: !2698, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2735 = !DILocation(line: 334, column: 14, scope: !2734)
!2736 = !DILocation(line: 334, column: 3, scope: !2734)
!2737 = !DILocation(line: 334, column: 9, scope: !2734)
!2738 = !DILocation(line: 334, column: 12, scope: !2734)
!2739 = !DILocation(line: 337, column: 3, scope: !2734)
!2740 = !DILocation(line: 338, column: 3, scope: !2734)
!2741 = !DILocation(line: 339, column: 1, scope: !2734)
!2742 = distinct !DISubprogram(name: "VEC_eh_region_gc_safe_push", scope: !10, file: !10, line: 185, type: !2743, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2743 = !DISubroutineType(types: !2744)
!2744 = !{!2745, !2746, !1087}
!2745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1087, size: 64)
!2746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2464, size: 64)
!2747 = !DILocalVariable(name: "vec_", arg: 1, scope: !2742, file: !10, line: 185, type: !2746)
!2748 = !DILocation(line: 185, column: 1, scope: !2742)
!2749 = !DILocalVariable(name: "obj_", arg: 2, scope: !2742, file: !10, line: 185, type: !1087)
!2750 = distinct !DISubprogram(name: "VEC_eh_landing_pad_gc_safe_push", scope: !10, file: !10, line: 189, type: !2751, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2751 = !DISubroutineType(types: !2752)
!2752 = !{!2753, !2754, !2489}
!2753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2489, size: 64)
!2754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!2755 = !DILocalVariable(name: "vec_", arg: 1, scope: !2750, file: !10, line: 189, type: !2754)
!2756 = !DILocation(line: 189, column: 1, scope: !2750)
!2757 = !DILocalVariable(name: "obj_", arg: 2, scope: !2750, file: !10, line: 189, type: !2489)
!2758 = distinct !DISubprogram(name: "gen_eh_region_cleanup", scope: !3, file: !3, line: 380, type: !2759, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2759 = !DISubroutineType(types: !2760)
!2760 = !{!1087, !1087}
!2761 = !DILocalVariable(name: "outer", arg: 1, scope: !2758, file: !3, line: 380, type: !1087)
!2762 = !DILocation(line: 380, column: 34, scope: !2758)
!2763 = !DILocation(line: 382, column: 38, scope: !2758)
!2764 = !DILocation(line: 382, column: 10, scope: !2758)
!2765 = !DILocation(line: 382, column: 3, scope: !2758)
!2766 = distinct !DISubprogram(name: "gen_eh_region", scope: !3, file: !3, line: 346, type: !2767, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2767 = !DISubroutineType(types: !2768)
!2768 = !{!1087, !9, !1087}
!2769 = !DILocalVariable(name: "type", arg: 1, scope: !2766, file: !3, line: 346, type: !9)
!2770 = !DILocation(line: 346, column: 36, scope: !2766)
!2771 = !DILocalVariable(name: "outer", arg: 2, scope: !2766, file: !3, line: 346, type: !1087)
!2772 = !DILocation(line: 346, column: 52, scope: !2766)
!2773 = !DILocalVariable(name: "new_eh", scope: !2766, file: !3, line: 348, type: !1087)
!2774 = !DILocation(line: 348, column: 13, scope: !2766)
!2775 = !DILocation(line: 355, column: 12, scope: !2766)
!2776 = !DILocation(line: 355, column: 10, scope: !2766)
!2777 = !DILocation(line: 356, column: 18, scope: !2766)
!2778 = !DILocation(line: 356, column: 3, scope: !2766)
!2779 = !DILocation(line: 356, column: 11, scope: !2766)
!2780 = !DILocation(line: 356, column: 16, scope: !2766)
!2781 = !DILocation(line: 357, column: 19, scope: !2766)
!2782 = !DILocation(line: 357, column: 3, scope: !2766)
!2783 = !DILocation(line: 357, column: 11, scope: !2766)
!2784 = !DILocation(line: 357, column: 17, scope: !2766)
!2785 = !DILocation(line: 358, column: 7, scope: !2786)
!2786 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 358, column: 7)
!2787 = !DILocation(line: 358, column: 7, scope: !2766)
!2788 = !DILocation(line: 360, column: 27, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2786, file: !3, line: 359, column: 5)
!2790 = !DILocation(line: 360, column: 34, scope: !2789)
!2791 = !DILocation(line: 360, column: 7, scope: !2789)
!2792 = !DILocation(line: 360, column: 15, scope: !2789)
!2793 = !DILocation(line: 360, column: 25, scope: !2789)
!2794 = !DILocation(line: 361, column: 22, scope: !2789)
!2795 = !DILocation(line: 361, column: 7, scope: !2789)
!2796 = !DILocation(line: 361, column: 14, scope: !2789)
!2797 = !DILocation(line: 361, column: 20, scope: !2789)
!2798 = !DILocation(line: 362, column: 5, scope: !2789)
!2799 = !DILocation(line: 365, column: 27, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2786, file: !3, line: 364, column: 5)
!2801 = !DILocation(line: 365, column: 33, scope: !2800)
!2802 = !DILocation(line: 365, column: 37, scope: !2800)
!2803 = !DILocation(line: 365, column: 7, scope: !2800)
!2804 = !DILocation(line: 365, column: 15, scope: !2800)
!2805 = !DILocation(line: 365, column: 25, scope: !2800)
!2806 = !DILocation(line: 366, column: 31, scope: !2800)
!2807 = !DILocation(line: 366, column: 7, scope: !2800)
!2808 = !DILocation(line: 366, column: 13, scope: !2800)
!2809 = !DILocation(line: 366, column: 17, scope: !2800)
!2810 = !DILocation(line: 366, column: 29, scope: !2800)
!2811 = !DILocation(line: 369, column: 19, scope: !2766)
!2812 = !DILocation(line: 369, column: 3, scope: !2766)
!2813 = !DILocation(line: 369, column: 11, scope: !2766)
!2814 = !DILocation(line: 369, column: 17, scope: !2766)
!2815 = !DILocation(line: 370, column: 3, scope: !2766)
!2816 = !DILocation(line: 373, column: 15, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 373, column: 7)
!2818 = !DILocation(line: 373, column: 7, scope: !2817)
!2819 = !DILocation(line: 373, column: 33, scope: !2817)
!2820 = !DILocation(line: 373, column: 47, scope: !2817)
!2821 = !DILocation(line: 373, column: 36, scope: !2817)
!2822 = !DILocation(line: 373, column: 7, scope: !2766)
!2823 = !DILocation(line: 374, column: 5, scope: !2817)
!2824 = !DILocation(line: 374, column: 13, scope: !2817)
!2825 = !DILocation(line: 374, column: 33, scope: !2817)
!2826 = !DILocation(line: 376, column: 10, scope: !2766)
!2827 = !DILocation(line: 376, column: 3, scope: !2766)
!2828 = distinct !DISubprogram(name: "gen_eh_region_try", scope: !3, file: !3, line: 386, type: !2759, scopeLine: 387, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2829 = !DILocalVariable(name: "outer", arg: 1, scope: !2828, file: !3, line: 386, type: !1087)
!2830 = !DILocation(line: 386, column: 30, scope: !2828)
!2831 = !DILocation(line: 388, column: 34, scope: !2828)
!2832 = !DILocation(line: 388, column: 10, scope: !2828)
!2833 = !DILocation(line: 388, column: 3, scope: !2828)
!2834 = distinct !DISubprogram(name: "gen_eh_region_catch", scope: !3, file: !3, line: 392, type: !2835, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!2837, !1087, !1109}
!2837 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_catch", file: !10, line: 181, baseType: !1103)
!2838 = !DILocalVariable(name: "t", arg: 1, scope: !2834, file: !3, line: 392, type: !1087)
!2839 = !DILocation(line: 392, column: 32, scope: !2834)
!2840 = !DILocalVariable(name: "type_or_list", arg: 2, scope: !2834, file: !3, line: 392, type: !1109)
!2841 = !DILocation(line: 392, column: 40, scope: !2834)
!2842 = !DILocalVariable(name: "c", scope: !2834, file: !3, line: 394, type: !2837)
!2843 = !DILocation(line: 394, column: 12, scope: !2834)
!2844 = !DILocalVariable(name: "l", scope: !2834, file: !3, line: 394, type: !2837)
!2845 = !DILocation(line: 394, column: 15, scope: !2834)
!2846 = !DILocalVariable(name: "type_list", scope: !2834, file: !3, line: 395, type: !1109)
!2847 = !DILocation(line: 395, column: 8, scope: !2834)
!2848 = !DILocalVariable(name: "type_node", scope: !2834, file: !3, line: 395, type: !1109)
!2849 = !DILocation(line: 395, column: 19, scope: !2834)
!2850 = !DILocation(line: 397, column: 3, scope: !2834)
!2851 = !DILocation(line: 401, column: 15, scope: !2834)
!2852 = !DILocation(line: 401, column: 13, scope: !2834)
!2853 = !DILocation(line: 402, column: 7, scope: !2854)
!2854 = distinct !DILexicalBlock(scope: !2834, file: !3, line: 402, column: 7)
!2855 = !DILocation(line: 402, column: 7, scope: !2834)
!2856 = !DILocation(line: 404, column: 11, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 404, column: 11)
!2858 = distinct !DILexicalBlock(scope: !2854, file: !3, line: 403, column: 5)
!2859 = !DILocation(line: 404, column: 36, scope: !2857)
!2860 = !DILocation(line: 404, column: 11, scope: !2858)
!2861 = !DILocation(line: 405, column: 14, scope: !2857)
!2862 = !DILocation(line: 405, column: 12, scope: !2857)
!2863 = !DILocation(line: 405, column: 2, scope: !2857)
!2864 = !DILocation(line: 407, column: 19, scope: !2858)
!2865 = !DILocation(line: 407, column: 17, scope: !2858)
!2866 = !DILocation(line: 408, column: 7, scope: !2858)
!2867 = !DILocation(line: 408, column: 14, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2869, file: !3, line: 408, column: 7)
!2869 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 408, column: 7)
!2870 = !DILocation(line: 408, column: 7, scope: !2869)
!2871 = !DILocation(line: 409, column: 24, scope: !2868)
!2872 = !DILocation(line: 409, column: 2, scope: !2868)
!2873 = !DILocation(line: 408, column: 37, scope: !2868)
!2874 = !DILocation(line: 408, column: 35, scope: !2868)
!2875 = !DILocation(line: 408, column: 7, scope: !2868)
!2876 = distinct !{!2876, !2870, !2877}
!2877 = !DILocation(line: 409, column: 46, scope: !2869)
!2878 = !DILocation(line: 410, column: 5, scope: !2858)
!2879 = !DILocation(line: 412, column: 7, scope: !2834)
!2880 = !DILocation(line: 412, column: 5, scope: !2834)
!2881 = !DILocation(line: 413, column: 18, scope: !2834)
!2882 = !DILocation(line: 413, column: 3, scope: !2834)
!2883 = !DILocation(line: 413, column: 6, scope: !2834)
!2884 = !DILocation(line: 413, column: 16, scope: !2834)
!2885 = !DILocation(line: 414, column: 7, scope: !2834)
!2886 = !DILocation(line: 414, column: 10, scope: !2834)
!2887 = !DILocation(line: 414, column: 12, scope: !2834)
!2888 = !DILocation(line: 414, column: 19, scope: !2834)
!2889 = !DILocation(line: 414, column: 5, scope: !2834)
!2890 = !DILocation(line: 415, column: 19, scope: !2834)
!2891 = !DILocation(line: 415, column: 3, scope: !2834)
!2892 = !DILocation(line: 415, column: 6, scope: !2834)
!2893 = !DILocation(line: 415, column: 17, scope: !2834)
!2894 = !DILocation(line: 416, column: 7, scope: !2895)
!2895 = distinct !DILexicalBlock(scope: !2834, file: !3, line: 416, column: 7)
!2896 = !DILocation(line: 416, column: 7, scope: !2834)
!2897 = !DILocation(line: 417, column: 21, scope: !2895)
!2898 = !DILocation(line: 417, column: 5, scope: !2895)
!2899 = !DILocation(line: 417, column: 8, scope: !2895)
!2900 = !DILocation(line: 417, column: 19, scope: !2895)
!2901 = !DILocation(line: 419, column: 31, scope: !2895)
!2902 = !DILocation(line: 419, column: 5, scope: !2895)
!2903 = !DILocation(line: 419, column: 8, scope: !2895)
!2904 = !DILocation(line: 419, column: 10, scope: !2895)
!2905 = !DILocation(line: 419, column: 17, scope: !2895)
!2906 = !DILocation(line: 419, column: 29, scope: !2895)
!2907 = !DILocation(line: 420, column: 28, scope: !2834)
!2908 = !DILocation(line: 420, column: 3, scope: !2834)
!2909 = !DILocation(line: 420, column: 6, scope: !2834)
!2910 = !DILocation(line: 420, column: 8, scope: !2834)
!2911 = !DILocation(line: 420, column: 15, scope: !2834)
!2912 = !DILocation(line: 420, column: 26, scope: !2834)
!2913 = !DILocation(line: 422, column: 10, scope: !2834)
!2914 = !DILocation(line: 422, column: 3, scope: !2834)
!2915 = distinct !DISubprogram(name: "add_type_for_runtime", scope: !3, file: !3, line: 682, type: !2916, scopeLine: 683, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2916 = !DISubroutineType(types: !2917)
!2917 = !{null, !1109}
!2918 = !DILocalVariable(name: "type", arg: 1, scope: !2915, file: !3, line: 682, type: !1109)
!2919 = !DILocation(line: 682, column: 28, scope: !2915)
!2920 = !DILocalVariable(name: "slot", scope: !2915, file: !3, line: 684, type: !1473)
!2921 = !DILocation(line: 684, column: 9, scope: !2915)
!2922 = !DILocation(line: 687, column: 7, scope: !2923)
!2923 = distinct !DILexicalBlock(scope: !2915, file: !3, line: 687, column: 7)
!2924 = !DILocation(line: 687, column: 24, scope: !2923)
!2925 = !DILocation(line: 687, column: 7, scope: !2915)
!2926 = !DILocation(line: 688, column: 5, scope: !2923)
!2927 = !DILocation(line: 690, column: 45, scope: !2915)
!2928 = !DILocation(line: 690, column: 66, scope: !2915)
!2929 = !DILocation(line: 691, column: 10, scope: !2915)
!2930 = !DILocation(line: 690, column: 19, scope: !2915)
!2931 = !DILocation(line: 690, column: 10, scope: !2915)
!2932 = !DILocation(line: 690, column: 8, scope: !2915)
!2933 = !DILocation(line: 692, column: 8, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2915, file: !3, line: 692, column: 7)
!2935 = !DILocation(line: 692, column: 7, scope: !2934)
!2936 = !DILocation(line: 692, column: 13, scope: !2934)
!2937 = !DILocation(line: 692, column: 7, scope: !2915)
!2938 = !DILocalVariable(name: "runtime", scope: !2939, file: !3, line: 694, type: !1109)
!2939 = distinct !DILexicalBlock(scope: !2934, file: !3, line: 693, column: 5)
!2940 = !DILocation(line: 694, column: 12, scope: !2939)
!2941 = !DILocation(line: 694, column: 33, scope: !2939)
!2942 = !DILocation(line: 694, column: 50, scope: !2939)
!2943 = !DILocation(line: 694, column: 22, scope: !2939)
!2944 = !DILocation(line: 695, column: 15, scope: !2939)
!2945 = !DILocation(line: 695, column: 8, scope: !2939)
!2946 = !DILocation(line: 695, column: 13, scope: !2939)
!2947 = !DILocation(line: 696, column: 5, scope: !2939)
!2948 = !DILocation(line: 697, column: 1, scope: !2915)
!2949 = distinct !DISubprogram(name: "gen_eh_region_allowed", scope: !3, file: !3, line: 426, type: !2950, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2950 = !DISubroutineType(types: !2951)
!2951 = !{!1087, !1087, !1109}
!2952 = !DILocalVariable(name: "outer", arg: 1, scope: !2949, file: !3, line: 426, type: !1087)
!2953 = !DILocation(line: 426, column: 34, scope: !2949)
!2954 = !DILocalVariable(name: "allowed", arg: 2, scope: !2949, file: !3, line: 426, type: !1109)
!2955 = !DILocation(line: 426, column: 46, scope: !2949)
!2956 = !DILocalVariable(name: "region", scope: !2949, file: !3, line: 428, type: !1087)
!2957 = !DILocation(line: 428, column: 13, scope: !2949)
!2958 = !DILocation(line: 428, column: 61, scope: !2949)
!2959 = !DILocation(line: 428, column: 22, scope: !2949)
!2960 = !DILocation(line: 429, column: 33, scope: !2949)
!2961 = !DILocation(line: 429, column: 3, scope: !2949)
!2962 = !DILocation(line: 429, column: 11, scope: !2949)
!2963 = !DILocation(line: 429, column: 13, scope: !2949)
!2964 = !DILocation(line: 429, column: 21, scope: !2949)
!2965 = !DILocation(line: 429, column: 31, scope: !2949)
!2966 = !DILocation(line: 431, column: 3, scope: !2949)
!2967 = !DILocation(line: 431, column: 10, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 431, column: 3)
!2969 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 431, column: 3)
!2970 = !DILocation(line: 431, column: 3, scope: !2969)
!2971 = !DILocation(line: 432, column: 27, scope: !2968)
!2972 = !DILocation(line: 432, column: 5, scope: !2968)
!2973 = !DILocation(line: 431, column: 30, scope: !2968)
!2974 = !DILocation(line: 431, column: 28, scope: !2968)
!2975 = !DILocation(line: 431, column: 3, scope: !2968)
!2976 = distinct !{!2976, !2970, !2977}
!2977 = !DILocation(line: 432, column: 47, scope: !2969)
!2978 = !DILocation(line: 434, column: 10, scope: !2949)
!2979 = !DILocation(line: 434, column: 3, scope: !2949)
!2980 = distinct !DISubprogram(name: "gen_eh_region_must_not_throw", scope: !3, file: !3, line: 438, type: !2759, scopeLine: 439, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2981 = !DILocalVariable(name: "outer", arg: 1, scope: !2980, file: !3, line: 438, type: !1087)
!2982 = !DILocation(line: 438, column: 41, scope: !2980)
!2983 = !DILocation(line: 440, column: 45, scope: !2980)
!2984 = !DILocation(line: 440, column: 10, scope: !2980)
!2985 = !DILocation(line: 440, column: 3, scope: !2980)
!2986 = distinct !DISubprogram(name: "gen_eh_landing_pad", scope: !3, file: !3, line: 444, type: !2987, scopeLine: 445, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{!2489, !1087}
!2989 = !DILocalVariable(name: "region", arg: 1, scope: !2986, file: !3, line: 444, type: !1087)
!2990 = !DILocation(line: 444, column: 31, scope: !2986)
!2991 = !DILocalVariable(name: "lp", scope: !2986, file: !3, line: 446, type: !2489)
!2992 = !DILocation(line: 446, column: 18, scope: !2986)
!2993 = !DILocation(line: 446, column: 23, scope: !2986)
!2994 = !DILocation(line: 448, column: 17, scope: !2986)
!2995 = !DILocation(line: 448, column: 25, scope: !2986)
!2996 = !DILocation(line: 448, column: 3, scope: !2986)
!2997 = !DILocation(line: 448, column: 7, scope: !2986)
!2998 = !DILocation(line: 448, column: 15, scope: !2986)
!2999 = !DILocation(line: 449, column: 16, scope: !2986)
!3000 = !DILocation(line: 449, column: 3, scope: !2986)
!3001 = !DILocation(line: 449, column: 7, scope: !2986)
!3002 = !DILocation(line: 449, column: 14, scope: !2986)
!3003 = !DILocation(line: 450, column: 15, scope: !2986)
!3004 = !DILocation(line: 450, column: 3, scope: !2986)
!3005 = !DILocation(line: 450, column: 7, scope: !2986)
!3006 = !DILocation(line: 450, column: 13, scope: !2986)
!3007 = !DILocation(line: 451, column: 26, scope: !2986)
!3008 = !DILocation(line: 451, column: 3, scope: !2986)
!3009 = !DILocation(line: 451, column: 11, scope: !2986)
!3010 = !DILocation(line: 451, column: 24, scope: !2986)
!3011 = !DILocation(line: 453, column: 3, scope: !2986)
!3012 = !DILocation(line: 455, column: 10, scope: !2986)
!3013 = !DILocation(line: 455, column: 3, scope: !2986)
!3014 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_length", scope: !10, file: !10, line: 188, type: !3015, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3015 = !DISubroutineType(types: !3016)
!3016 = !{!11, !3017}
!3017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3018, size: 64)
!3018 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2482)
!3019 = !DILocalVariable(name: "vec_", arg: 1, scope: !3014, file: !10, line: 188, type: !3017)
!3020 = !DILocation(line: 188, column: 1, scope: !3014)
!3021 = distinct !DISubprogram(name: "get_eh_region_from_number_fn", scope: !3, file: !3, line: 459, type: !3022, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3022 = !DISubroutineType(types: !3023)
!3023 = !{!1087, !1860, !6}
!3024 = !DILocalVariable(name: "ifun", arg: 1, scope: !3021, file: !3, line: 459, type: !1860)
!3025 = !DILocation(line: 459, column: 48, scope: !3021)
!3026 = !DILocalVariable(name: "i", arg: 2, scope: !3021, file: !3, line: 459, type: !6)
!3027 = !DILocation(line: 459, column: 58, scope: !3021)
!3028 = !DILocation(line: 461, column: 10, scope: !3021)
!3029 = !DILocation(line: 461, column: 3, scope: !3021)
!3030 = distinct !DISubprogram(name: "VEC_eh_region_base_index", scope: !10, file: !10, line: 184, type: !3031, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3031 = !DISubroutineType(types: !3032)
!3032 = !{!1087, !3033, !11}
!3033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3034, size: 64)
!3034 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2469)
!3035 = !DILocalVariable(name: "vec_", arg: 1, scope: !3030, file: !10, line: 184, type: !3033)
!3036 = !DILocation(line: 184, column: 1, scope: !3030)
!3037 = !DILocalVariable(name: "ix_", arg: 2, scope: !3030, file: !10, line: 184, type: !11)
!3038 = !DILocation(line: 0, scope: !3030)
!3039 = distinct !DISubprogram(name: "get_eh_region_from_number", scope: !3, file: !3, line: 465, type: !3040, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3040 = !DISubroutineType(types: !3041)
!3041 = !{!1087, !6}
!3042 = !DILocalVariable(name: "i", arg: 1, scope: !3039, file: !3, line: 465, type: !6)
!3043 = !DILocation(line: 465, column: 32, scope: !3039)
!3044 = !DILocation(line: 467, column: 40, scope: !3039)
!3045 = !DILocation(line: 467, column: 46, scope: !3039)
!3046 = !DILocation(line: 467, column: 10, scope: !3039)
!3047 = !DILocation(line: 467, column: 3, scope: !3039)
!3048 = distinct !DISubprogram(name: "get_eh_landing_pad_from_number_fn", scope: !3, file: !3, line: 471, type: !3049, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3049 = !DISubroutineType(types: !3050)
!3050 = !{!2489, !1860, !6}
!3051 = !DILocalVariable(name: "ifun", arg: 1, scope: !3048, file: !3, line: 471, type: !1860)
!3052 = !DILocation(line: 471, column: 53, scope: !3048)
!3053 = !DILocalVariable(name: "i", arg: 2, scope: !3048, file: !3, line: 471, type: !6)
!3054 = !DILocation(line: 471, column: 63, scope: !3048)
!3055 = !DILocation(line: 473, column: 10, scope: !3048)
!3056 = !DILocation(line: 473, column: 3, scope: !3048)
!3057 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_index", scope: !10, file: !10, line: 188, type: !3058, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3058 = !DISubroutineType(types: !3059)
!3059 = !{!2489, !3017, !11}
!3060 = !DILocalVariable(name: "vec_", arg: 1, scope: !3057, file: !10, line: 188, type: !3017)
!3061 = !DILocation(line: 188, column: 1, scope: !3057)
!3062 = !DILocalVariable(name: "ix_", arg: 2, scope: !3057, file: !10, line: 188, type: !11)
!3063 = !DILocation(line: 0, scope: !3057)
!3064 = distinct !DISubprogram(name: "get_eh_landing_pad_from_number", scope: !3, file: !3, line: 477, type: !3065, scopeLine: 478, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3065 = !DISubroutineType(types: !3066)
!3066 = !{!2489, !6}
!3067 = !DILocalVariable(name: "i", arg: 1, scope: !3064, file: !3, line: 477, type: !6)
!3068 = !DILocation(line: 477, column: 37, scope: !3064)
!3069 = !DILocation(line: 479, column: 45, scope: !3064)
!3070 = !DILocation(line: 479, column: 51, scope: !3064)
!3071 = !DILocation(line: 479, column: 10, scope: !3064)
!3072 = !DILocation(line: 479, column: 3, scope: !3064)
!3073 = distinct !DISubprogram(name: "get_eh_region_from_lp_number_fn", scope: !3, file: !3, line: 483, type: !3022, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3074 = !DILocalVariable(name: "ifun", arg: 1, scope: !3073, file: !3, line: 483, type: !1860)
!3075 = !DILocation(line: 483, column: 51, scope: !3073)
!3076 = !DILocalVariable(name: "i", arg: 2, scope: !3073, file: !3, line: 483, type: !6)
!3077 = !DILocation(line: 483, column: 61, scope: !3073)
!3078 = !DILocation(line: 485, column: 7, scope: !3079)
!3079 = distinct !DILexicalBlock(scope: !3073, file: !3, line: 485, column: 7)
!3080 = !DILocation(line: 485, column: 9, scope: !3079)
!3081 = !DILocation(line: 485, column: 7, scope: !3073)
!3082 = !DILocation(line: 486, column: 12, scope: !3079)
!3083 = !DILocation(line: 486, column: 5, scope: !3079)
!3084 = !DILocation(line: 487, column: 12, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 487, column: 12)
!3086 = !DILocation(line: 487, column: 14, scope: !3085)
!3087 = !DILocation(line: 487, column: 12, scope: !3079)
!3088 = !DILocation(line: 488, column: 5, scope: !3085)
!3089 = !DILocalVariable(name: "lp", scope: !3090, file: !3, line: 491, type: !2489)
!3090 = distinct !DILexicalBlock(scope: !3085, file: !3, line: 490, column: 5)
!3091 = !DILocation(line: 491, column: 22, scope: !3090)
!3092 = !DILocation(line: 492, column: 12, scope: !3090)
!3093 = !DILocation(line: 492, column: 10, scope: !3090)
!3094 = !DILocation(line: 493, column: 14, scope: !3090)
!3095 = !DILocation(line: 493, column: 18, scope: !3090)
!3096 = !DILocation(line: 493, column: 7, scope: !3090)
!3097 = !DILocation(line: 495, column: 1, scope: !3073)
!3098 = distinct !DISubprogram(name: "get_eh_region_from_lp_number", scope: !3, file: !3, line: 498, type: !3040, scopeLine: 499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3099 = !DILocalVariable(name: "i", arg: 1, scope: !3098, file: !3, line: 498, type: !6)
!3100 = !DILocation(line: 498, column: 35, scope: !3098)
!3101 = !DILocation(line: 500, column: 43, scope: !3098)
!3102 = !DILocation(line: 500, column: 49, scope: !3098)
!3103 = !DILocation(line: 500, column: 10, scope: !3098)
!3104 = !DILocation(line: 500, column: 3, scope: !3098)
!3105 = distinct !DISubprogram(name: "current_function_has_exception_handlers", scope: !3, file: !3, line: 506, type: !2562, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3106 = !DILocation(line: 508, column: 10, scope: !3105)
!3107 = !DILocation(line: 508, column: 16, scope: !3105)
!3108 = !DILocation(line: 508, column: 20, scope: !3105)
!3109 = !DILocation(line: 508, column: 32, scope: !3105)
!3110 = !DILocation(line: 508, column: 3, scope: !3105)
!3111 = distinct !DISubprogram(name: "duplicate_eh_regions", scope: !3, file: !3, line: 598, type: !3112, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3112 = !DISubroutineType(types: !3113)
!3113 = !{!1988, !1860, !1087, !6, !3114, !1390}
!3114 = !DIDerivedType(tag: DW_TAG_typedef, name: "duplicate_eh_regions_map", file: !10, line: 253, baseType: !3115)
!3115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3116, size: 64)
!3116 = !DISubroutineType(types: !3117)
!3117 = !{!1109, !1109, !1390}
!3118 = !DILocalVariable(name: "ifun", arg: 1, scope: !3111, file: !3, line: 598, type: !1860)
!3119 = !DILocation(line: 598, column: 40, scope: !3111)
!3120 = !DILocalVariable(name: "copy_region", arg: 2, scope: !3111, file: !3, line: 599, type: !1087)
!3121 = !DILocation(line: 599, column: 19, scope: !3111)
!3122 = !DILocalVariable(name: "outer_lp", arg: 3, scope: !3111, file: !3, line: 599, type: !6)
!3123 = !DILocation(line: 599, column: 36, scope: !3111)
!3124 = !DILocalVariable(name: "map", arg: 4, scope: !3111, file: !3, line: 600, type: !3114)
!3125 = !DILocation(line: 600, column: 34, scope: !3111)
!3126 = !DILocalVariable(name: "map_data", arg: 5, scope: !3111, file: !3, line: 600, type: !1390)
!3127 = !DILocation(line: 600, column: 45, scope: !3111)
!3128 = !DILocalVariable(name: "data", scope: !3111, file: !3, line: 602, type: !3129)
!3129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "duplicate_eh_regions_data", file: !3, line: 514, size: 192, elements: !3130)
!3130 = !{!3131, !3132, !3133}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "label_map", scope: !3129, file: !3, line: 516, baseType: !3114, size: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "label_map_data", scope: !3129, file: !3, line: 517, baseType: !1390, size: 64, offset: 64)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "eh_map", scope: !3129, file: !3, line: 518, baseType: !1988, size: 64, offset: 128)
!3134 = !DILocation(line: 602, column: 36, scope: !3111)
!3135 = !DILocalVariable(name: "outer_region", scope: !3111, file: !3, line: 603, type: !1087)
!3136 = !DILocation(line: 603, column: 13, scope: !3111)
!3137 = !DILocation(line: 609, column: 20, scope: !3111)
!3138 = !DILocation(line: 609, column: 8, scope: !3111)
!3139 = !DILocation(line: 609, column: 18, scope: !3111)
!3140 = !DILocation(line: 610, column: 25, scope: !3111)
!3141 = !DILocation(line: 610, column: 8, scope: !3111)
!3142 = !DILocation(line: 610, column: 23, scope: !3111)
!3143 = !DILocation(line: 611, column: 17, scope: !3111)
!3144 = !DILocation(line: 611, column: 8, scope: !3111)
!3145 = !DILocation(line: 611, column: 15, scope: !3111)
!3146 = !DILocation(line: 613, column: 48, scope: !3111)
!3147 = !DILocation(line: 613, column: 18, scope: !3111)
!3148 = !DILocation(line: 613, column: 16, scope: !3111)
!3149 = !DILocation(line: 616, column: 7, scope: !3150)
!3150 = distinct !DILexicalBlock(scope: !3111, file: !3, line: 616, column: 7)
!3151 = !DILocation(line: 616, column: 7, scope: !3111)
!3152 = !DILocation(line: 617, column: 36, scope: !3150)
!3153 = !DILocation(line: 617, column: 49, scope: !3150)
!3154 = !DILocation(line: 617, column: 5, scope: !3150)
!3155 = !DILocalVariable(name: "r", scope: !3156, file: !3, line: 620, type: !1087)
!3156 = distinct !DILexicalBlock(scope: !3150, file: !3, line: 619, column: 5)
!3157 = !DILocation(line: 620, column: 17, scope: !3156)
!3158 = !DILocation(line: 621, column: 16, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3156, file: !3, line: 621, column: 7)
!3160 = !DILocation(line: 621, column: 22, scope: !3159)
!3161 = !DILocation(line: 621, column: 26, scope: !3159)
!3162 = !DILocation(line: 621, column: 14, scope: !3159)
!3163 = !DILocation(line: 621, column: 12, scope: !3159)
!3164 = !DILocation(line: 621, column: 39, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !3159, file: !3, line: 621, column: 7)
!3166 = !DILocation(line: 621, column: 7, scope: !3159)
!3167 = !DILocation(line: 622, column: 33, scope: !3165)
!3168 = !DILocation(line: 622, column: 36, scope: !3165)
!3169 = !DILocation(line: 622, column: 2, scope: !3165)
!3170 = !DILocation(line: 621, column: 47, scope: !3165)
!3171 = !DILocation(line: 621, column: 50, scope: !3165)
!3172 = !DILocation(line: 621, column: 45, scope: !3165)
!3173 = !DILocation(line: 621, column: 7, scope: !3165)
!3174 = distinct !{!3174, !3166, !3175}
!3175 = !DILocation(line: 622, column: 48, scope: !3159)
!3176 = !DILocation(line: 629, column: 15, scope: !3111)
!3177 = !DILocation(line: 629, column: 3, scope: !3111)
!3178 = distinct !DISubprogram(name: "duplicate_eh_regions_1", scope: !3, file: !3, line: 522, type: !3179, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3179 = !DISubroutineType(types: !3180)
!3180 = !{null, !3181, !1087, !1087}
!3181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3129, size: 64)
!3182 = !DILocalVariable(name: "data", arg: 1, scope: !3178, file: !3, line: 522, type: !3181)
!3183 = !DILocation(line: 522, column: 59, scope: !3178)
!3184 = !DILocalVariable(name: "old_r", arg: 2, scope: !3178, file: !3, line: 523, type: !1087)
!3185 = !DILocation(line: 523, column: 14, scope: !3178)
!3186 = !DILocalVariable(name: "outer", arg: 3, scope: !3178, file: !3, line: 523, type: !1087)
!3187 = !DILocation(line: 523, column: 31, scope: !3178)
!3188 = !DILocalVariable(name: "old_lp", scope: !3178, file: !3, line: 525, type: !2489)
!3189 = !DILocation(line: 525, column: 18, scope: !3178)
!3190 = !DILocalVariable(name: "new_lp", scope: !3178, file: !3, line: 525, type: !2489)
!3191 = !DILocation(line: 525, column: 26, scope: !3178)
!3192 = !DILocalVariable(name: "new_r", scope: !3178, file: !3, line: 526, type: !1087)
!3193 = !DILocation(line: 526, column: 13, scope: !3178)
!3194 = !DILocalVariable(name: "slot", scope: !3178, file: !3, line: 527, type: !1923)
!3195 = !DILocation(line: 527, column: 10, scope: !3178)
!3196 = !DILocation(line: 529, column: 26, scope: !3178)
!3197 = !DILocation(line: 529, column: 33, scope: !3178)
!3198 = !DILocation(line: 529, column: 39, scope: !3178)
!3199 = !DILocation(line: 529, column: 11, scope: !3178)
!3200 = !DILocation(line: 529, column: 9, scope: !3178)
!3201 = !DILocation(line: 530, column: 30, scope: !3178)
!3202 = !DILocation(line: 530, column: 36, scope: !3178)
!3203 = !DILocation(line: 530, column: 52, scope: !3178)
!3204 = !DILocation(line: 530, column: 44, scope: !3178)
!3205 = !DILocation(line: 530, column: 10, scope: !3178)
!3206 = !DILocation(line: 530, column: 8, scope: !3178)
!3207 = !DILocation(line: 531, column: 3, scope: !3178)
!3208 = !DILocation(line: 532, column: 19, scope: !3178)
!3209 = !DILocation(line: 532, column: 11, scope: !3178)
!3210 = !DILocation(line: 532, column: 4, scope: !3178)
!3211 = !DILocation(line: 532, column: 9, scope: !3178)
!3212 = !DILocation(line: 534, column: 11, scope: !3178)
!3213 = !DILocation(line: 534, column: 18, scope: !3178)
!3214 = !DILocation(line: 534, column: 3, scope: !3178)
!3215 = !DILocation(line: 537, column: 7, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 535, column: 5)
!3217 = !DILocalVariable(name: "oc", scope: !3218, file: !3, line: 541, type: !2837)
!3218 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 540, column: 7)
!3219 = !DILocation(line: 541, column: 11, scope: !3218)
!3220 = !DILocalVariable(name: "nc", scope: !3218, file: !3, line: 541, type: !2837)
!3221 = !DILocation(line: 541, column: 15, scope: !3218)
!3222 = !DILocation(line: 542, column: 12, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3218, file: !3, line: 542, column: 2)
!3224 = !DILocation(line: 542, column: 19, scope: !3223)
!3225 = !DILocation(line: 542, column: 21, scope: !3223)
!3226 = !DILocation(line: 542, column: 28, scope: !3223)
!3227 = !DILocation(line: 542, column: 10, scope: !3223)
!3228 = !DILocation(line: 542, column: 7, scope: !3223)
!3229 = !DILocation(line: 542, column: 41, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3223, file: !3, line: 542, column: 2)
!3231 = !DILocation(line: 542, column: 2, scope: !3223)
!3232 = !DILocation(line: 546, column: 6, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 543, column: 4)
!3234 = !DILocation(line: 547, column: 32, scope: !3233)
!3235 = !DILocation(line: 547, column: 39, scope: !3233)
!3236 = !DILocation(line: 547, column: 43, scope: !3233)
!3237 = !DILocation(line: 547, column: 11, scope: !3233)
!3238 = !DILocation(line: 547, column: 9, scope: !3233)
!3239 = !DILocation(line: 548, column: 18, scope: !3233)
!3240 = !DILocation(line: 548, column: 24, scope: !3233)
!3241 = !DILocation(line: 548, column: 35, scope: !3233)
!3242 = !DILocation(line: 548, column: 39, scope: !3233)
!3243 = !DILocation(line: 548, column: 46, scope: !3233)
!3244 = !DILocation(line: 548, column: 52, scope: !3233)
!3245 = !DILocation(line: 548, column: 6, scope: !3233)
!3246 = !DILocation(line: 548, column: 10, scope: !3233)
!3247 = !DILocation(line: 548, column: 16, scope: !3233)
!3248 = !DILocation(line: 549, column: 4, scope: !3233)
!3249 = !DILocation(line: 542, column: 51, scope: !3230)
!3250 = !DILocation(line: 542, column: 55, scope: !3230)
!3251 = !DILocation(line: 542, column: 49, scope: !3230)
!3252 = !DILocation(line: 542, column: 2, scope: !3230)
!3253 = distinct !{!3253, !3231, !3254}
!3254 = !DILocation(line: 549, column: 4, scope: !3223)
!3255 = !DILocation(line: 551, column: 7, scope: !3216)
!3256 = !DILocation(line: 554, column: 36, scope: !3216)
!3257 = !DILocation(line: 554, column: 43, scope: !3216)
!3258 = !DILocation(line: 554, column: 45, scope: !3216)
!3259 = !DILocation(line: 554, column: 53, scope: !3216)
!3260 = !DILocation(line: 554, column: 7, scope: !3216)
!3261 = !DILocation(line: 554, column: 14, scope: !3216)
!3262 = !DILocation(line: 554, column: 16, scope: !3216)
!3263 = !DILocation(line: 554, column: 24, scope: !3216)
!3264 = !DILocation(line: 554, column: 34, scope: !3216)
!3265 = !DILocation(line: 555, column: 11, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 555, column: 11)
!3267 = !DILocation(line: 555, column: 18, scope: !3266)
!3268 = !DILocation(line: 555, column: 20, scope: !3266)
!3269 = !DILocation(line: 555, column: 28, scope: !3266)
!3270 = !DILocation(line: 555, column: 11, scope: !3216)
!3271 = !DILocation(line: 557, column: 8, scope: !3266)
!3272 = !DILocation(line: 557, column: 14, scope: !3266)
!3273 = !DILocation(line: 557, column: 25, scope: !3266)
!3274 = !DILocation(line: 557, column: 32, scope: !3266)
!3275 = !DILocation(line: 557, column: 34, scope: !3266)
!3276 = !DILocation(line: 557, column: 42, scope: !3266)
!3277 = !DILocation(line: 557, column: 49, scope: !3266)
!3278 = !DILocation(line: 557, column: 55, scope: !3266)
!3279 = !DILocation(line: 556, column: 2, scope: !3266)
!3280 = !DILocation(line: 556, column: 9, scope: !3266)
!3281 = !DILocation(line: 556, column: 11, scope: !3266)
!3282 = !DILocation(line: 556, column: 19, scope: !3266)
!3283 = !DILocation(line: 557, column: 6, scope: !3266)
!3284 = !DILocation(line: 559, column: 2, scope: !3266)
!3285 = !DILocation(line: 559, column: 9, scope: !3266)
!3286 = !DILocation(line: 559, column: 11, scope: !3266)
!3287 = !DILocation(line: 559, column: 19, scope: !3266)
!3288 = !DILocation(line: 559, column: 25, scope: !3266)
!3289 = !DILocation(line: 560, column: 7, scope: !3216)
!3290 = !DILocation(line: 563, column: 7, scope: !3216)
!3291 = !DILocation(line: 563, column: 14, scope: !3216)
!3292 = !DILocation(line: 563, column: 16, scope: !3216)
!3293 = !DILocation(line: 563, column: 33, scope: !3216)
!3294 = !DILocation(line: 563, column: 40, scope: !3216)
!3295 = !DILocation(line: 563, column: 42, scope: !3216)
!3296 = !DILocation(line: 564, column: 7, scope: !3216)
!3297 = !DILocation(line: 567, column: 17, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 567, column: 3)
!3299 = !DILocation(line: 567, column: 24, scope: !3298)
!3300 = !DILocation(line: 567, column: 15, scope: !3298)
!3301 = !DILocation(line: 567, column: 8, scope: !3298)
!3302 = !DILocation(line: 567, column: 38, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3298, file: !3, line: 567, column: 3)
!3304 = !DILocation(line: 567, column: 3, scope: !3298)
!3305 = !DILocation(line: 570, column: 11, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 570, column: 11)
!3307 = distinct !DILexicalBlock(scope: !3303, file: !3, line: 568, column: 5)
!3308 = !DILocation(line: 570, column: 19, scope: !3306)
!3309 = !DILocation(line: 570, column: 36, scope: !3306)
!3310 = !DILocation(line: 570, column: 11, scope: !3307)
!3311 = !DILocation(line: 571, column: 2, scope: !3306)
!3312 = !DILocation(line: 573, column: 36, scope: !3307)
!3313 = !DILocation(line: 573, column: 16, scope: !3307)
!3314 = !DILocation(line: 573, column: 14, scope: !3307)
!3315 = !DILocation(line: 574, column: 34, scope: !3307)
!3316 = !DILocation(line: 574, column: 40, scope: !3307)
!3317 = !DILocation(line: 574, column: 56, scope: !3307)
!3318 = !DILocation(line: 574, column: 48, scope: !3307)
!3319 = !DILocation(line: 574, column: 14, scope: !3307)
!3320 = !DILocation(line: 574, column: 12, scope: !3307)
!3321 = !DILocation(line: 575, column: 7, scope: !3307)
!3322 = !DILocation(line: 576, column: 23, scope: !3307)
!3323 = !DILocation(line: 576, column: 15, scope: !3307)
!3324 = !DILocation(line: 576, column: 8, scope: !3307)
!3325 = !DILocation(line: 576, column: 13, scope: !3307)
!3326 = !DILocation(line: 579, column: 4, scope: !3307)
!3327 = !DILocation(line: 579, column: 10, scope: !3307)
!3328 = !DILocation(line: 579, column: 21, scope: !3307)
!3329 = !DILocation(line: 579, column: 29, scope: !3307)
!3330 = !DILocation(line: 579, column: 47, scope: !3307)
!3331 = !DILocation(line: 579, column: 53, scope: !3307)
!3332 = !DILocation(line: 578, column: 7, scope: !3307)
!3333 = !DILocation(line: 578, column: 15, scope: !3307)
!3334 = !DILocation(line: 579, column: 2, scope: !3307)
!3335 = !DILocation(line: 580, column: 54, scope: !3307)
!3336 = !DILocation(line: 580, column: 62, scope: !3307)
!3337 = !DILocation(line: 580, column: 7, scope: !3307)
!3338 = !DILocation(line: 580, column: 52, scope: !3307)
!3339 = !DILocation(line: 581, column: 5, scope: !3307)
!3340 = !DILocation(line: 567, column: 56, scope: !3303)
!3341 = !DILocation(line: 567, column: 64, scope: !3303)
!3342 = !DILocation(line: 567, column: 54, scope: !3303)
!3343 = !DILocation(line: 567, column: 3, scope: !3303)
!3344 = distinct !{!3344, !3304, !3345}
!3345 = !DILocation(line: 581, column: 5, scope: !3298)
!3346 = !DILocation(line: 584, column: 32, scope: !3178)
!3347 = !DILocation(line: 584, column: 39, scope: !3178)
!3348 = !DILocation(line: 584, column: 3, scope: !3178)
!3349 = !DILocation(line: 584, column: 10, scope: !3178)
!3350 = !DILocation(line: 584, column: 30, scope: !3178)
!3351 = !DILocation(line: 586, column: 16, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 586, column: 3)
!3353 = !DILocation(line: 586, column: 23, scope: !3352)
!3354 = !DILocation(line: 586, column: 14, scope: !3352)
!3355 = !DILocation(line: 586, column: 8, scope: !3352)
!3356 = !DILocation(line: 586, column: 30, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3352, file: !3, line: 586, column: 3)
!3358 = !DILocation(line: 586, column: 3, scope: !3352)
!3359 = !DILocation(line: 587, column: 29, scope: !3357)
!3360 = !DILocation(line: 587, column: 35, scope: !3357)
!3361 = !DILocation(line: 587, column: 42, scope: !3357)
!3362 = !DILocation(line: 587, column: 5, scope: !3357)
!3363 = !DILocation(line: 586, column: 46, scope: !3357)
!3364 = !DILocation(line: 586, column: 53, scope: !3357)
!3365 = !DILocation(line: 586, column: 44, scope: !3357)
!3366 = !DILocation(line: 586, column: 3, scope: !3357)
!3367 = distinct !{!3367, !3358, !3368}
!3368 = !DILocation(line: 587, column: 47, scope: !3352)
!3369 = !DILocation(line: 588, column: 1, scope: !3178)
!3370 = distinct !DISubprogram(name: "eh_region_outermost", scope: !3, file: !3, line: 635, type: !3371, scopeLine: 637, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3371 = !DISubroutineType(types: !3372)
!3372 = !{!1087, !1860, !1087, !1087}
!3373 = !DILocalVariable(name: "ifun", arg: 1, scope: !3370, file: !3, line: 635, type: !1860)
!3374 = !DILocation(line: 635, column: 39, scope: !3370)
!3375 = !DILocalVariable(name: "region_a", arg: 2, scope: !3370, file: !3, line: 635, type: !1087)
!3376 = !DILocation(line: 635, column: 55, scope: !3370)
!3377 = !DILocalVariable(name: "region_b", arg: 3, scope: !3370, file: !3, line: 636, type: !1087)
!3378 = !DILocation(line: 636, column: 18, scope: !3370)
!3379 = !DILocalVariable(name: "b_outer", scope: !3370, file: !3, line: 638, type: !3380)
!3380 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3381, line: 45, baseType: !3382)
!3381 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3383, size: 64)
!3383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3381, line: 39, size: 192, elements: !3384)
!3384 = !{!3385, !3387, !3388, !3389}
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3383, file: !3381, line: 41, baseType: !3386, size: 64)
!3386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1227, size: 64)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3383, file: !3381, line: 42, baseType: !11, size: 32, offset: 64)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3383, file: !3381, line: 43, baseType: !11, size: 32, offset: 96)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3383, file: !3381, line: 44, baseType: !3390, size: 64, offset: 128)
!3390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1162, size: 64, elements: !1208)
!3391 = !DILocation(line: 638, column: 11, scope: !3370)
!3392 = !DILocation(line: 640, column: 3, scope: !3370)
!3393 = !DILocation(line: 641, column: 3, scope: !3370)
!3394 = !DILocation(line: 643, column: 28, scope: !3370)
!3395 = !DILocation(line: 643, column: 13, scope: !3370)
!3396 = !DILocation(line: 643, column: 11, scope: !3370)
!3397 = !DILocation(line: 644, column: 17, scope: !3370)
!3398 = !DILocation(line: 644, column: 3, scope: !3370)
!3399 = !DILocation(line: 646, column: 3, scope: !3370)
!3400 = !DILocation(line: 648, column: 16, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 647, column: 5)
!3402 = !DILocation(line: 648, column: 25, scope: !3401)
!3403 = !DILocation(line: 648, column: 35, scope: !3401)
!3404 = !DILocation(line: 648, column: 7, scope: !3401)
!3405 = !DILocation(line: 649, column: 18, scope: !3401)
!3406 = !DILocation(line: 649, column: 28, scope: !3401)
!3407 = !DILocation(line: 649, column: 16, scope: !3401)
!3408 = !DILocation(line: 650, column: 5, scope: !3401)
!3409 = !DILocation(line: 651, column: 10, scope: !3370)
!3410 = distinct !{!3410, !3399, !3411}
!3411 = !DILocation(line: 651, column: 18, scope: !3370)
!3412 = !DILocation(line: 653, column: 3, scope: !3370)
!3413 = !DILocation(line: 655, column: 11, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3415, file: !3, line: 655, column: 11)
!3415 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 654, column: 5)
!3416 = !DILocation(line: 655, column: 11, scope: !3415)
!3417 = !DILocation(line: 656, column: 2, scope: !3414)
!3418 = !DILocation(line: 657, column: 18, scope: !3415)
!3419 = !DILocation(line: 657, column: 28, scope: !3415)
!3420 = !DILocation(line: 657, column: 16, scope: !3415)
!3421 = !DILocation(line: 658, column: 5, scope: !3415)
!3422 = !DILocation(line: 659, column: 10, scope: !3370)
!3423 = distinct !{!3423, !3412, !3424}
!3424 = !DILocation(line: 659, column: 18, scope: !3370)
!3425 = !DILocation(line: 661, column: 3, scope: !3370)
!3426 = !DILocation(line: 662, column: 10, scope: !3370)
!3427 = !DILocation(line: 662, column: 3, scope: !3370)
!3428 = distinct !DISubprogram(name: "VEC_eh_region_base_length", scope: !10, file: !10, line: 184, type: !3429, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3429 = !DISubroutineType(types: !3430)
!3430 = !{!11, !3033}
!3431 = !DILocalVariable(name: "vec_", arg: 1, scope: !3428, file: !10, line: 184, type: !3033)
!3432 = !DILocation(line: 184, column: 1, scope: !3428)
!3433 = distinct !DISubprogram(name: "SET_BIT", scope: !3381, file: !3381, line: 63, type: !3434, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3434 = !DISubroutineType(types: !3435)
!3435 = !{null, !3380, !11}
!3436 = !DILocalVariable(name: "map", arg: 1, scope: !3433, file: !3381, line: 63, type: !3380)
!3437 = !DILocation(line: 63, column: 18, scope: !3433)
!3438 = !DILocalVariable(name: "bitno", arg: 2, scope: !3433, file: !3381, line: 63, type: !11)
!3439 = !DILocation(line: 63, column: 36, scope: !3433)
!3440 = !DILocation(line: 65, column: 7, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3433, file: !3381, line: 65, column: 7)
!3442 = !DILocation(line: 65, column: 12, scope: !3441)
!3443 = !DILocation(line: 65, column: 7, scope: !3433)
!3444 = !DILocalVariable(name: "oldbit", scope: !3445, file: !3381, line: 67, type: !1227)
!3445 = distinct !DILexicalBlock(scope: !3441, file: !3381, line: 66, column: 5)
!3446 = !DILocation(line: 67, column: 12, scope: !3445)
!3447 = !DILocation(line: 68, column: 16, scope: !3445)
!3448 = !DILocation(line: 68, column: 14, scope: !3445)
!3449 = !DILocation(line: 69, column: 12, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !3445, file: !3381, line: 69, column: 11)
!3451 = !DILocation(line: 69, column: 11, scope: !3445)
!3452 = !DILocation(line: 70, column: 2, scope: !3450)
!3453 = !DILocation(line: 70, column: 7, scope: !3450)
!3454 = !DILocation(line: 70, column: 16, scope: !3450)
!3455 = !DILocation(line: 70, column: 22, scope: !3450)
!3456 = !DILocation(line: 70, column: 41, scope: !3450)
!3457 = !DILocation(line: 71, column: 5, scope: !3445)
!3458 = !DILocation(line: 73, column: 33, scope: !3433)
!3459 = !DILocation(line: 73, column: 40, scope: !3433)
!3460 = !DILocation(line: 73, column: 29, scope: !3433)
!3461 = !DILocation(line: 72, column: 3, scope: !3433)
!3462 = !DILocation(line: 72, column: 8, scope: !3433)
!3463 = !DILocation(line: 72, column: 13, scope: !3433)
!3464 = !DILocation(line: 72, column: 19, scope: !3433)
!3465 = !DILocation(line: 73, column: 5, scope: !3433)
!3466 = !DILocation(line: 74, column: 1, scope: !3433)
!3467 = distinct !DISubprogram(name: "lookup_type_for_runtime", scope: !3, file: !3, line: 700, type: !3468, scopeLine: 701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3468 = !DISubroutineType(types: !3469)
!3469 = !{!1109, !1109}
!3470 = !DILocalVariable(name: "type", arg: 1, scope: !3467, file: !3, line: 700, type: !1109)
!3471 = !DILocation(line: 700, column: 31, scope: !3467)
!3472 = !DILocalVariable(name: "slot", scope: !3467, file: !3, line: 702, type: !1473)
!3473 = !DILocation(line: 702, column: 9, scope: !3467)
!3474 = !DILocation(line: 705, column: 7, scope: !3475)
!3475 = distinct !DILexicalBlock(scope: !3467, file: !3, line: 705, column: 7)
!3476 = !DILocation(line: 705, column: 24, scope: !3475)
!3477 = !DILocation(line: 705, column: 7, scope: !3467)
!3478 = !DILocation(line: 706, column: 12, scope: !3475)
!3479 = !DILocation(line: 706, column: 5, scope: !3475)
!3480 = !DILocation(line: 708, column: 45, scope: !3467)
!3481 = !DILocation(line: 708, column: 66, scope: !3467)
!3482 = !DILocation(line: 709, column: 10, scope: !3467)
!3483 = !DILocation(line: 708, column: 19, scope: !3467)
!3484 = !DILocation(line: 708, column: 10, scope: !3467)
!3485 = !DILocation(line: 708, column: 8, scope: !3467)
!3486 = !DILocation(line: 712, column: 10, scope: !3467)
!3487 = !DILocation(line: 712, column: 3, scope: !3467)
!3488 = !DILocation(line: 713, column: 1, scope: !3467)
!3489 = distinct !DISubprogram(name: "assign_filter_values", scope: !3, file: !3, line: 855, type: !2698, scopeLine: 856, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3490 = !DILocalVariable(name: "i", scope: !3489, file: !3, line: 857, type: !6)
!3491 = !DILocation(line: 857, column: 7, scope: !3489)
!3492 = !DILocalVariable(name: "ttypes", scope: !3489, file: !3, line: 858, type: !1902)
!3493 = !DILocation(line: 858, column: 10, scope: !3489)
!3494 = !DILocalVariable(name: "ehspec", scope: !3489, file: !3, line: 858, type: !1902)
!3495 = !DILocation(line: 858, column: 18, scope: !3489)
!3496 = !DILocalVariable(name: "r", scope: !3489, file: !3, line: 859, type: !1087)
!3497 = !DILocation(line: 859, column: 13, scope: !3489)
!3498 = !DILocalVariable(name: "c", scope: !3489, file: !3, line: 860, type: !2837)
!3499 = !DILocation(line: 860, column: 12, scope: !3489)
!3500 = !DILocation(line: 862, column: 26, scope: !3489)
!3501 = !DILocation(line: 862, column: 3, scope: !3489)
!3502 = !DILocation(line: 862, column: 9, scope: !3489)
!3503 = !DILocation(line: 862, column: 13, scope: !3489)
!3504 = !DILocation(line: 862, column: 24, scope: !3489)
!3505 = !DILocation(line: 863, column: 15, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 863, column: 7)
!3507 = !DILocation(line: 863, column: 7, scope: !3506)
!3508 = !DILocation(line: 863, column: 7, scope: !3489)
!3509 = !DILocation(line: 864, column: 38, scope: !3506)
!3510 = !DILocation(line: 864, column: 5, scope: !3506)
!3511 = !DILocation(line: 864, column: 11, scope: !3506)
!3512 = !DILocation(line: 864, column: 15, scope: !3506)
!3513 = !DILocation(line: 864, column: 27, scope: !3506)
!3514 = !DILocation(line: 864, column: 36, scope: !3506)
!3515 = !DILocation(line: 866, column: 35, scope: !3506)
!3516 = !DILocation(line: 866, column: 5, scope: !3506)
!3517 = !DILocation(line: 866, column: 11, scope: !3506)
!3518 = !DILocation(line: 866, column: 15, scope: !3506)
!3519 = !DILocation(line: 866, column: 27, scope: !3506)
!3520 = !DILocation(line: 866, column: 33, scope: !3506)
!3521 = !DILocation(line: 868, column: 12, scope: !3489)
!3522 = !DILocation(line: 868, column: 10, scope: !3489)
!3523 = !DILocation(line: 869, column: 12, scope: !3489)
!3524 = !DILocation(line: 869, column: 10, scope: !3489)
!3525 = !DILocation(line: 871, column: 10, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 871, column: 3)
!3527 = !DILocation(line: 871, column: 8, scope: !3526)
!3528 = !DILocation(line: 871, column: 15, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 871, column: 3)
!3530 = !DILocation(line: 871, column: 3, scope: !3526)
!3531 = !DILocation(line: 873, column: 11, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 873, column: 11)
!3533 = distinct !DILexicalBlock(scope: !3529, file: !3, line: 872, column: 5)
!3534 = !DILocation(line: 873, column: 13, scope: !3532)
!3535 = !DILocation(line: 873, column: 11, scope: !3533)
!3536 = !DILocation(line: 874, column: 2, scope: !3532)
!3537 = !DILocation(line: 876, column: 15, scope: !3533)
!3538 = !DILocation(line: 876, column: 18, scope: !3533)
!3539 = !DILocation(line: 876, column: 7, scope: !3533)
!3540 = !DILocation(line: 879, column: 13, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3542, file: !3, line: 879, column: 4)
!3542 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 877, column: 2)
!3543 = !DILocation(line: 879, column: 16, scope: !3541)
!3544 = !DILocation(line: 879, column: 18, scope: !3541)
!3545 = !DILocation(line: 879, column: 25, scope: !3541)
!3546 = !DILocation(line: 879, column: 11, scope: !3541)
!3547 = !DILocation(line: 879, column: 9, scope: !3541)
!3548 = !DILocation(line: 879, column: 38, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3541, file: !3, line: 879, column: 4)
!3550 = !DILocation(line: 879, column: 4, scope: !3541)
!3551 = !DILocation(line: 883, column: 8, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 880, column: 6)
!3553 = !DILocation(line: 883, column: 11, scope: !3552)
!3554 = !DILocation(line: 883, column: 23, scope: !3552)
!3555 = !DILocation(line: 885, column: 12, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 885, column: 12)
!3557 = !DILocation(line: 885, column: 15, scope: !3556)
!3558 = !DILocation(line: 885, column: 25, scope: !3556)
!3559 = !DILocation(line: 885, column: 12, scope: !3552)
!3560 = !DILocalVariable(name: "tp_node", scope: !3561, file: !3, line: 889, type: !1109)
!3561 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 886, column: 3)
!3562 = !DILocation(line: 889, column: 10, scope: !3561)
!3563 = !DILocation(line: 889, column: 20, scope: !3561)
!3564 = !DILocation(line: 889, column: 23, scope: !3561)
!3565 = !DILocation(line: 891, column: 5, scope: !3561)
!3566 = !DILocation(line: 891, column: 13, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3568, file: !3, line: 891, column: 5)
!3568 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 891, column: 5)
!3569 = !DILocation(line: 891, column: 5, scope: !3568)
!3570 = !DILocalVariable(name: "flt", scope: !3571, file: !3, line: 893, type: !6)
!3571 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 892, column: 7)
!3572 = !DILocation(line: 893, column: 13, scope: !3571)
!3573 = !DILocation(line: 893, column: 37, scope: !3571)
!3574 = !DILocation(line: 893, column: 45, scope: !3571)
!3575 = !DILocation(line: 893, column: 19, scope: !3571)
!3576 = !DILocalVariable(name: "flt_node", scope: !3571, file: !3, line: 894, type: !1109)
!3577 = !DILocation(line: 894, column: 14, scope: !3571)
!3578 = !DILocation(line: 894, column: 51, scope: !3571)
!3579 = !DILocation(line: 894, column: 25, scope: !3571)
!3580 = !DILocation(line: 897, column: 6, scope: !3571)
!3581 = !DILocation(line: 896, column: 9, scope: !3571)
!3582 = !DILocation(line: 896, column: 12, scope: !3571)
!3583 = !DILocation(line: 897, column: 4, scope: !3571)
!3584 = !DILocation(line: 898, column: 7, scope: !3571)
!3585 = !DILocation(line: 891, column: 32, scope: !3567)
!3586 = !DILocation(line: 891, column: 30, scope: !3567)
!3587 = !DILocation(line: 891, column: 5, scope: !3567)
!3588 = distinct !{!3588, !3569, !3589}
!3589 = !DILocation(line: 898, column: 7, scope: !3568)
!3590 = !DILocation(line: 899, column: 3, scope: !3561)
!3591 = !DILocalVariable(name: "flt", scope: !3592, file: !3, line: 904, type: !6)
!3592 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 901, column: 3)
!3593 = !DILocation(line: 904, column: 9, scope: !3592)
!3594 = !DILocation(line: 904, column: 33, scope: !3592)
!3595 = !DILocation(line: 904, column: 15, scope: !3592)
!3596 = !DILocalVariable(name: "flt_node", scope: !3592, file: !3, line: 905, type: !1109)
!3597 = !DILocation(line: 905, column: 10, scope: !3592)
!3598 = !DILocation(line: 905, column: 47, scope: !3592)
!3599 = !DILocation(line: 905, column: 21, scope: !3592)
!3600 = !DILocation(line: 908, column: 9, scope: !3592)
!3601 = !DILocation(line: 907, column: 5, scope: !3592)
!3602 = !DILocation(line: 907, column: 8, scope: !3592)
!3603 = !DILocation(line: 908, column: 7, scope: !3592)
!3604 = !DILocation(line: 910, column: 6, scope: !3552)
!3605 = !DILocation(line: 879, column: 46, scope: !3549)
!3606 = !DILocation(line: 879, column: 49, scope: !3549)
!3607 = !DILocation(line: 879, column: 44, scope: !3549)
!3608 = !DILocation(line: 879, column: 4, scope: !3549)
!3609 = distinct !{!3609, !3550, !3610}
!3610 = !DILocation(line: 910, column: 6, scope: !3541)
!3611 = !DILocation(line: 911, column: 4, scope: !3542)
!3612 = !DILocation(line: 915, column: 26, scope: !3542)
!3613 = !DILocation(line: 915, column: 34, scope: !3542)
!3614 = !DILocation(line: 915, column: 42, scope: !3542)
!3615 = !DILocation(line: 915, column: 45, scope: !3542)
!3616 = !DILocation(line: 915, column: 47, scope: !3542)
!3617 = !DILocation(line: 915, column: 55, scope: !3542)
!3618 = !DILocation(line: 915, column: 8, scope: !3542)
!3619 = !DILocation(line: 914, column: 4, scope: !3542)
!3620 = !DILocation(line: 914, column: 7, scope: !3542)
!3621 = !DILocation(line: 914, column: 9, scope: !3542)
!3622 = !DILocation(line: 914, column: 17, scope: !3542)
!3623 = !DILocation(line: 915, column: 6, scope: !3542)
!3624 = !DILocation(line: 916, column: 4, scope: !3542)
!3625 = !DILocation(line: 919, column: 4, scope: !3542)
!3626 = !DILocation(line: 921, column: 5, scope: !3533)
!3627 = !DILocation(line: 871, column: 70, scope: !3529)
!3628 = !DILocation(line: 871, column: 3, scope: !3529)
!3629 = distinct !{!3629, !3530, !3630}
!3630 = !DILocation(line: 921, column: 5, scope: !3526)
!3631 = !DILocation(line: 923, column: 16, scope: !3489)
!3632 = !DILocation(line: 923, column: 3, scope: !3489)
!3633 = !DILocation(line: 924, column: 16, scope: !3489)
!3634 = !DILocation(line: 924, column: 3, scope: !3489)
!3635 = !DILocation(line: 925, column: 1, scope: !3489)
!3636 = distinct !DISubprogram(name: "VEC_tree_gc_alloc", scope: !146, file: !146, line: 183, type: !3637, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3637 = !DISubroutineType(types: !3638)
!3638 = !{!1962, !6}
!3639 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3636, file: !146, line: 183, type: !6)
!3640 = !DILocation(line: 183, column: 1, scope: !3636)
!3641 = distinct !DISubprogram(name: "VEC_uchar_gc_alloc", scope: !2499, file: !2499, line: 29, type: !3642, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3642 = !DISubroutineType(types: !3643)
!3643 = !{!2497, !6}
!3644 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3641, file: !2499, line: 29, type: !6)
!3645 = !DILocation(line: 29, column: 1, scope: !3641)
!3646 = distinct !DISubprogram(name: "ttypes_filter_hash", scope: !3, file: !3, line: 737, type: !1909, scopeLine: 738, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3647 = !DILocalVariable(name: "pentry", arg: 1, scope: !3646, file: !3, line: 737, type: !1745)
!3648 = !DILocation(line: 737, column: 33, scope: !3646)
!3649 = !DILocalVariable(name: "entry", scope: !3646, file: !3, line: 739, type: !2519)
!3650 = !DILocation(line: 739, column: 31, scope: !3646)
!3651 = !DILocation(line: 739, column: 70, scope: !3646)
!3652 = !DILocation(line: 739, column: 39, scope: !3646)
!3653 = !DILocation(line: 740, column: 10, scope: !3646)
!3654 = !DILocation(line: 740, column: 3, scope: !3646)
!3655 = distinct !DISubprogram(name: "ttypes_filter_eq", scope: !3, file: !3, line: 727, type: !1915, scopeLine: 728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3656 = !DILocalVariable(name: "pentry", arg: 1, scope: !3655, file: !3, line: 727, type: !1745)
!3657 = !DILocation(line: 727, column: 31, scope: !3655)
!3658 = !DILocalVariable(name: "pdata", arg: 2, scope: !3655, file: !3, line: 727, type: !1745)
!3659 = !DILocation(line: 727, column: 51, scope: !3655)
!3660 = !DILocalVariable(name: "entry", scope: !3655, file: !3, line: 729, type: !3661)
!3661 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2519)
!3662 = !DILocation(line: 729, column: 37, scope: !3655)
!3663 = !DILocation(line: 730, column: 38, scope: !3655)
!3664 = !DILocation(line: 730, column: 7, scope: !3655)
!3665 = !DILocalVariable(name: "data", scope: !3655, file: !3, line: 731, type: !2711)
!3666 = !DILocation(line: 731, column: 20, scope: !3655)
!3667 = !DILocation(line: 731, column: 40, scope: !3655)
!3668 = !DILocation(line: 731, column: 27, scope: !3655)
!3669 = !DILocation(line: 733, column: 10, scope: !3655)
!3670 = !DILocation(line: 733, column: 17, scope: !3655)
!3671 = !DILocation(line: 733, column: 22, scope: !3655)
!3672 = !DILocation(line: 733, column: 19, scope: !3655)
!3673 = !DILocation(line: 733, column: 3, scope: !3655)
!3674 = distinct !DISubprogram(name: "ehspec_filter_hash", scope: !3, file: !3, line: 760, type: !1909, scopeLine: 761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3675 = !DILocalVariable(name: "pentry", arg: 1, scope: !3674, file: !3, line: 760, type: !1745)
!3676 = !DILocation(line: 760, column: 33, scope: !3674)
!3677 = !DILocalVariable(name: "entry", scope: !3674, file: !3, line: 762, type: !2519)
!3678 = !DILocation(line: 762, column: 31, scope: !3674)
!3679 = !DILocation(line: 762, column: 70, scope: !3674)
!3680 = !DILocation(line: 762, column: 39, scope: !3674)
!3681 = !DILocalVariable(name: "h", scope: !3674, file: !3, line: 763, type: !1911)
!3682 = !DILocation(line: 763, column: 13, scope: !3674)
!3683 = !DILocalVariable(name: "list", scope: !3674, file: !3, line: 764, type: !1109)
!3684 = !DILocation(line: 764, column: 8, scope: !3674)
!3685 = !DILocation(line: 766, column: 15, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !3674, file: !3, line: 766, column: 3)
!3687 = !DILocation(line: 766, column: 22, scope: !3686)
!3688 = !DILocation(line: 766, column: 13, scope: !3686)
!3689 = !DILocation(line: 766, column: 8, scope: !3686)
!3690 = !DILocation(line: 766, column: 25, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 766, column: 3)
!3692 = !DILocation(line: 766, column: 3, scope: !3686)
!3693 = !DILocation(line: 767, column: 10, scope: !3691)
!3694 = !DILocation(line: 767, column: 12, scope: !3691)
!3695 = !DILocation(line: 767, column: 21, scope: !3691)
!3696 = !DILocation(line: 767, column: 23, scope: !3691)
!3697 = !DILocation(line: 767, column: 18, scope: !3691)
!3698 = !DILocation(line: 767, column: 9, scope: !3691)
!3699 = !DILocation(line: 767, column: 32, scope: !3691)
!3700 = !DILocation(line: 767, column: 30, scope: !3691)
!3701 = !DILocation(line: 767, column: 7, scope: !3691)
!3702 = !DILocation(line: 767, column: 5, scope: !3691)
!3703 = !DILocation(line: 766, column: 39, scope: !3691)
!3704 = !DILocation(line: 766, column: 37, scope: !3691)
!3705 = !DILocation(line: 766, column: 3, scope: !3691)
!3706 = distinct !{!3706, !3692, !3707}
!3707 = !DILocation(line: 767, column: 32, scope: !3686)
!3708 = !DILocation(line: 768, column: 10, scope: !3674)
!3709 = !DILocation(line: 768, column: 3, scope: !3674)
!3710 = distinct !DISubprogram(name: "ehspec_filter_eq", scope: !3, file: !3, line: 749, type: !1915, scopeLine: 750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3711 = !DILocalVariable(name: "pentry", arg: 1, scope: !3710, file: !3, line: 749, type: !1745)
!3712 = !DILocation(line: 749, column: 31, scope: !3710)
!3713 = !DILocalVariable(name: "pdata", arg: 2, scope: !3710, file: !3, line: 749, type: !1745)
!3714 = !DILocation(line: 749, column: 51, scope: !3710)
!3715 = !DILocalVariable(name: "entry", scope: !3710, file: !3, line: 751, type: !2519)
!3716 = !DILocation(line: 751, column: 31, scope: !3710)
!3717 = !DILocation(line: 751, column: 70, scope: !3710)
!3718 = !DILocation(line: 751, column: 39, scope: !3710)
!3719 = !DILocalVariable(name: "data", scope: !3710, file: !3, line: 752, type: !2519)
!3720 = !DILocation(line: 752, column: 31, scope: !3710)
!3721 = !DILocation(line: 752, column: 69, scope: !3710)
!3722 = !DILocation(line: 752, column: 38, scope: !3710)
!3723 = !DILocation(line: 754, column: 27, scope: !3710)
!3724 = !DILocation(line: 754, column: 34, scope: !3710)
!3725 = !DILocation(line: 754, column: 37, scope: !3710)
!3726 = !DILocation(line: 754, column: 43, scope: !3710)
!3727 = !DILocation(line: 754, column: 10, scope: !3710)
!3728 = !DILocation(line: 754, column: 3, scope: !3710)
!3729 = distinct !DISubprogram(name: "VEC_eh_region_base_iterate", scope: !10, file: !10, line: 184, type: !3730, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3730 = !DISubroutineType(types: !3731)
!3731 = !{!6, !3033, !11, !2745}
!3732 = !DILocalVariable(name: "vec_", arg: 1, scope: !3729, file: !10, line: 184, type: !3033)
!3733 = !DILocation(line: 184, column: 1, scope: !3729)
!3734 = !DILocalVariable(name: "ix_", arg: 2, scope: !3729, file: !10, line: 184, type: !11)
!3735 = !DILocalVariable(name: "ptr", arg: 3, scope: !3729, file: !10, line: 184, type: !2745)
!3736 = !DILocation(line: 184, column: 1, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3729, file: !10, line: 184, column: 1)
!3738 = !DILocation(line: 184, column: 1, scope: !3739)
!3739 = distinct !DILexicalBlock(scope: !3737, file: !10, line: 184, column: 1)
!3740 = !DILocation(line: 184, column: 1, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3737, file: !10, line: 184, column: 1)
!3742 = distinct !DISubprogram(name: "add_ttypes_entry", scope: !3, file: !3, line: 775, type: !3743, scopeLine: 776, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3743 = !DISubroutineType(types: !3744)
!3744 = !{!6, !1902, !1109}
!3745 = !DILocalVariable(name: "ttypes_hash", arg: 1, scope: !3742, file: !3, line: 775, type: !1902)
!3746 = !DILocation(line: 775, column: 26, scope: !3742)
!3747 = !DILocalVariable(name: "type", arg: 2, scope: !3742, file: !3, line: 775, type: !1109)
!3748 = !DILocation(line: 775, column: 44, scope: !3742)
!3749 = !DILocalVariable(name: "slot", scope: !3742, file: !3, line: 777, type: !2525)
!3750 = !DILocation(line: 777, column: 26, scope: !3742)
!3751 = !DILocalVariable(name: "n", scope: !3742, file: !3, line: 777, type: !2526)
!3752 = !DILocation(line: 777, column: 33, scope: !3742)
!3753 = !DILocation(line: 780, column: 31, scope: !3742)
!3754 = !DILocation(line: 780, column: 44, scope: !3742)
!3755 = !DILocation(line: 780, column: 50, scope: !3742)
!3756 = !DILocation(line: 780, column: 5, scope: !3742)
!3757 = !DILocation(line: 779, column: 10, scope: !3742)
!3758 = !DILocation(line: 779, column: 8, scope: !3742)
!3759 = !DILocation(line: 782, column: 13, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3742, file: !3, line: 782, column: 7)
!3761 = !DILocation(line: 782, column: 12, scope: !3760)
!3762 = !DILocation(line: 782, column: 10, scope: !3760)
!3763 = !DILocation(line: 782, column: 19, scope: !3760)
!3764 = !DILocation(line: 782, column: 7, scope: !3742)
!3765 = !DILocation(line: 786, column: 11, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 783, column: 5)
!3767 = !DILocation(line: 786, column: 9, scope: !3766)
!3768 = !DILocation(line: 787, column: 14, scope: !3766)
!3769 = !DILocation(line: 787, column: 7, scope: !3766)
!3770 = !DILocation(line: 787, column: 10, scope: !3766)
!3771 = !DILocation(line: 787, column: 12, scope: !3766)
!3772 = !DILocation(line: 788, column: 19, scope: !3766)
!3773 = !DILocation(line: 788, column: 59, scope: !3766)
!3774 = !DILocation(line: 788, column: 7, scope: !3766)
!3775 = !DILocation(line: 788, column: 10, scope: !3766)
!3776 = !DILocation(line: 788, column: 17, scope: !3766)
!3777 = !DILocation(line: 789, column: 15, scope: !3766)
!3778 = !DILocation(line: 789, column: 8, scope: !3766)
!3779 = !DILocation(line: 789, column: 13, scope: !3766)
!3780 = !DILocation(line: 791, column: 7, scope: !3766)
!3781 = !DILocation(line: 792, column: 5, scope: !3766)
!3782 = !DILocation(line: 794, column: 10, scope: !3742)
!3783 = !DILocation(line: 794, column: 13, scope: !3742)
!3784 = !DILocation(line: 794, column: 3, scope: !3742)
!3785 = distinct !DISubprogram(name: "add_ehspec_entry", scope: !3, file: !3, line: 801, type: !3786, scopeLine: 802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3786 = !DISubroutineType(types: !3787)
!3787 = !{!6, !1902, !1902, !1109}
!3788 = !DILocalVariable(name: "ehspec_hash", arg: 1, scope: !3785, file: !3, line: 801, type: !1902)
!3789 = !DILocation(line: 801, column: 26, scope: !3785)
!3790 = !DILocalVariable(name: "ttypes_hash", arg: 2, scope: !3785, file: !3, line: 801, type: !1902)
!3791 = !DILocation(line: 801, column: 46, scope: !3785)
!3792 = !DILocalVariable(name: "list", arg: 3, scope: !3785, file: !3, line: 801, type: !1109)
!3793 = !DILocation(line: 801, column: 64, scope: !3785)
!3794 = !DILocalVariable(name: "slot", scope: !3785, file: !3, line: 803, type: !2525)
!3795 = !DILocation(line: 803, column: 26, scope: !3785)
!3796 = !DILocalVariable(name: "n", scope: !3785, file: !3, line: 803, type: !2526)
!3797 = !DILocation(line: 803, column: 33, scope: !3785)
!3798 = !DILocalVariable(name: "dummy", scope: !3785, file: !3, line: 804, type: !2521)
!3799 = !DILocation(line: 804, column: 24, scope: !3785)
!3800 = !DILocation(line: 806, column: 13, scope: !3785)
!3801 = !DILocation(line: 806, column: 9, scope: !3785)
!3802 = !DILocation(line: 806, column: 11, scope: !3785)
!3803 = !DILocation(line: 808, column: 21, scope: !3785)
!3804 = !DILocation(line: 808, column: 34, scope: !3785)
!3805 = !DILocation(line: 808, column: 5, scope: !3785)
!3806 = !DILocation(line: 807, column: 10, scope: !3785)
!3807 = !DILocation(line: 807, column: 8, scope: !3785)
!3808 = !DILocation(line: 810, column: 13, scope: !3809)
!3809 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 810, column: 7)
!3810 = !DILocation(line: 810, column: 12, scope: !3809)
!3811 = !DILocation(line: 810, column: 10, scope: !3809)
!3812 = !DILocation(line: 810, column: 19, scope: !3809)
!3813 = !DILocation(line: 810, column: 7, scope: !3785)
!3814 = !DILocalVariable(name: "len", scope: !3815, file: !3, line: 812, type: !6)
!3815 = distinct !DILexicalBlock(scope: !3809, file: !3, line: 811, column: 5)
!3816 = !DILocation(line: 812, column: 11, scope: !3815)
!3817 = !DILocation(line: 814, column: 19, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 814, column: 11)
!3819 = !DILocation(line: 814, column: 11, scope: !3818)
!3820 = !DILocation(line: 814, column: 11, scope: !3815)
!3821 = !DILocation(line: 815, column: 8, scope: !3818)
!3822 = !DILocation(line: 815, column: 6, scope: !3818)
!3823 = !DILocation(line: 815, column: 2, scope: !3818)
!3824 = !DILocation(line: 817, column: 8, scope: !3818)
!3825 = !DILocation(line: 817, column: 6, scope: !3818)
!3826 = !DILocation(line: 821, column: 11, scope: !3815)
!3827 = !DILocation(line: 821, column: 9, scope: !3815)
!3828 = !DILocation(line: 822, column: 14, scope: !3815)
!3829 = !DILocation(line: 822, column: 7, scope: !3815)
!3830 = !DILocation(line: 822, column: 10, scope: !3815)
!3831 = !DILocation(line: 822, column: 12, scope: !3815)
!3832 = !DILocation(line: 823, column: 21, scope: !3815)
!3833 = !DILocation(line: 823, column: 25, scope: !3815)
!3834 = !DILocation(line: 823, column: 19, scope: !3815)
!3835 = !DILocation(line: 823, column: 7, scope: !3815)
!3836 = !DILocation(line: 823, column: 10, scope: !3815)
!3837 = !DILocation(line: 823, column: 17, scope: !3815)
!3838 = !DILocation(line: 824, column: 15, scope: !3815)
!3839 = !DILocation(line: 824, column: 8, scope: !3815)
!3840 = !DILocation(line: 824, column: 13, scope: !3815)
!3841 = !DILocation(line: 827, column: 7, scope: !3815)
!3842 = !DILocation(line: 827, column: 14, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 827, column: 7)
!3844 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 827, column: 7)
!3845 = !DILocation(line: 827, column: 7, scope: !3844)
!3846 = !DILocation(line: 829, column: 16, scope: !3847)
!3847 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 829, column: 8)
!3848 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 828, column: 2)
!3849 = !DILocation(line: 829, column: 8, scope: !3847)
!3850 = !DILocation(line: 829, column: 8, scope: !3848)
!3851 = !DILocation(line: 830, column: 6, scope: !3847)
!3852 = !DILocation(line: 836, column: 23, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3847, file: !3, line: 833, column: 6)
!3854 = !DILocation(line: 836, column: 29, scope: !3853)
!3855 = !DILocation(line: 836, column: 33, scope: !3853)
!3856 = !DILocation(line: 836, column: 45, scope: !3853)
!3857 = !DILocation(line: 837, column: 26, scope: !3853)
!3858 = !DILocation(line: 837, column: 39, scope: !3853)
!3859 = !DILocation(line: 837, column: 8, scope: !3853)
!3860 = !DILocation(line: 836, column: 8, scope: !3853)
!3861 = !DILocation(line: 839, column: 2, scope: !3848)
!3862 = !DILocation(line: 827, column: 28, scope: !3843)
!3863 = !DILocation(line: 827, column: 26, scope: !3843)
!3864 = !DILocation(line: 827, column: 7, scope: !3843)
!3865 = distinct !{!3865, !3845, !3866}
!3866 = !DILocation(line: 839, column: 2, scope: !3844)
!3867 = !DILocation(line: 840, column: 19, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 840, column: 11)
!3869 = !DILocation(line: 840, column: 11, scope: !3868)
!3870 = !DILocation(line: 840, column: 11, scope: !3815)
!3871 = !DILocation(line: 841, column: 2, scope: !3868)
!3872 = !DILocation(line: 843, column: 2, scope: !3868)
!3873 = !DILocation(line: 844, column: 5, scope: !3815)
!3874 = !DILocation(line: 846, column: 10, scope: !3785)
!3875 = !DILocation(line: 846, column: 13, scope: !3785)
!3876 = !DILocation(line: 846, column: 3, scope: !3785)
!3877 = distinct !DISubprogram(name: "sjlj_emit_function_exit_after", scope: !3, file: !3, line: 1208, type: !3878, scopeLine: 1209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3878 = !DISubroutineType(types: !3879)
!3879 = !{null, !1285}
!3880 = !DILocalVariable(name: "after", arg: 1, scope: !3877, file: !3, line: 1208, type: !1285)
!3881 = !DILocation(line: 1208, column: 36, scope: !3877)
!3882 = !DILocation(line: 1210, column: 30, scope: !3877)
!3883 = !DILocation(line: 1210, column: 28, scope: !3877)
!3884 = !DILocation(line: 1211, column: 1, scope: !3877)
!3885 = distinct !DISubprogram(name: "gate_handle_eh", scope: !3, file: !3, line: 1455, type: !2562, scopeLine: 1456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3886 = !DILocation(line: 1458, column: 10, scope: !3885)
!3887 = !DILocation(line: 1458, column: 16, scope: !3885)
!3888 = !DILocation(line: 1458, column: 20, scope: !3885)
!3889 = !DILocation(line: 1458, column: 32, scope: !3885)
!3890 = !DILocation(line: 1458, column: 3, scope: !3885)
!3891 = distinct !DISubprogram(name: "rest_of_handle_eh", scope: !3, file: !3, line: 1463, type: !2566, scopeLine: 1464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3892 = !DILocation(line: 1465, column: 3, scope: !3891)
!3893 = !DILocation(line: 1466, column: 3, scope: !3891)
!3894 = !DILocation(line: 1467, column: 3, scope: !3891)
!3895 = distinct !DISubprogram(name: "remove_eh_landing_pad", scope: !3, file: !3, line: 1492, type: !3896, scopeLine: 1493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3896 = !DISubroutineType(types: !3897)
!3897 = !{null, !2489}
!3898 = !DILocalVariable(name: "lp", arg: 1, scope: !3895, file: !3, line: 1492, type: !2489)
!3899 = !DILocation(line: 1492, column: 39, scope: !3895)
!3900 = !DILocalVariable(name: "pp", scope: !3895, file: !3, line: 1494, type: !2753)
!3901 = !DILocation(line: 1494, column: 19, scope: !3895)
!3902 = !DILocation(line: 1496, column: 14, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1496, column: 3)
!3904 = !DILocation(line: 1496, column: 18, scope: !3903)
!3905 = !DILocation(line: 1496, column: 26, scope: !3903)
!3906 = !DILocation(line: 1496, column: 11, scope: !3903)
!3907 = !DILocation(line: 1496, column: 8, scope: !3903)
!3908 = !DILocation(line: 1496, column: 41, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 1496, column: 3)
!3910 = !DILocation(line: 1496, column: 40, scope: !3909)
!3911 = !DILocation(line: 1496, column: 47, scope: !3909)
!3912 = !DILocation(line: 1496, column: 44, scope: !3909)
!3913 = !DILocation(line: 1496, column: 3, scope: !3903)
!3914 = !DILocation(line: 1497, column: 5, scope: !3909)
!3915 = !DILocation(line: 1496, column: 59, scope: !3909)
!3916 = !DILocation(line: 1496, column: 58, scope: !3909)
!3917 = !DILocation(line: 1496, column: 64, scope: !3909)
!3918 = !DILocation(line: 1496, column: 54, scope: !3909)
!3919 = !DILocation(line: 1496, column: 3, scope: !3909)
!3920 = distinct !{!3920, !3913, !3921}
!3921 = !DILocation(line: 1497, column: 5, scope: !3903)
!3922 = !DILocation(line: 1498, column: 9, scope: !3895)
!3923 = !DILocation(line: 1498, column: 13, scope: !3895)
!3924 = !DILocation(line: 1498, column: 4, scope: !3895)
!3925 = !DILocation(line: 1498, column: 7, scope: !3895)
!3926 = !DILocation(line: 1500, column: 7, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1500, column: 7)
!3928 = !DILocation(line: 1500, column: 11, scope: !3927)
!3929 = !DILocation(line: 1500, column: 7, scope: !3895)
!3930 = !DILocation(line: 1501, column: 5, scope: !3927)
!3931 = !DILocation(line: 1501, column: 46, scope: !3927)
!3932 = !DILocation(line: 1502, column: 3, scope: !3895)
!3933 = !DILocation(line: 1503, column: 1, scope: !3895)
!3934 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_replace", scope: !10, file: !10, line: 188, type: !3935, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3935 = !DISubroutineType(types: !3936)
!3936 = !{!2489, !3937, !11, !2489}
!3937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!3938 = !DILocalVariable(name: "vec_", arg: 1, scope: !3934, file: !10, line: 188, type: !3937)
!3939 = !DILocation(line: 188, column: 1, scope: !3934)
!3940 = !DILocalVariable(name: "ix_", arg: 2, scope: !3934, file: !10, line: 188, type: !11)
!3941 = !DILocalVariable(name: "obj_", arg: 3, scope: !3934, file: !10, line: 188, type: !2489)
!3942 = !DILocalVariable(name: "old_obj_", scope: !3934, file: !10, line: 188, type: !2489)
!3943 = distinct !DISubprogram(name: "remove_eh_handler", scope: !3, file: !3, line: 1508, type: !3944, scopeLine: 1509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!3944 = !DISubroutineType(types: !3945)
!3945 = !{null, !1087}
!3946 = !DILocalVariable(name: "region", arg: 1, scope: !3943, file: !3, line: 1508, type: !1087)
!3947 = !DILocation(line: 1508, column: 30, scope: !3943)
!3948 = !DILocalVariable(name: "pp", scope: !3943, file: !3, line: 1510, type: !2745)
!3949 = !DILocation(line: 1510, column: 14, scope: !3943)
!3950 = !DILocalVariable(name: "pp_start", scope: !3943, file: !3, line: 1510, type: !2745)
!3951 = !DILocation(line: 1510, column: 19, scope: !3943)
!3952 = !DILocalVariable(name: "p", scope: !3943, file: !3, line: 1510, type: !1087)
!3953 = !DILocation(line: 1510, column: 29, scope: !3943)
!3954 = !DILocalVariable(name: "outer", scope: !3943, file: !3, line: 1510, type: !1087)
!3955 = !DILocation(line: 1510, column: 32, scope: !3943)
!3956 = !DILocalVariable(name: "lp", scope: !3943, file: !3, line: 1511, type: !2489)
!3957 = !DILocation(line: 1511, column: 18, scope: !3943)
!3958 = !DILocation(line: 1513, column: 13, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1513, column: 3)
!3960 = !DILocation(line: 1513, column: 21, scope: !3959)
!3961 = !DILocation(line: 1513, column: 11, scope: !3959)
!3962 = !DILocation(line: 1513, column: 8, scope: !3959)
!3963 = !DILocation(line: 1513, column: 35, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 1513, column: 3)
!3965 = !DILocation(line: 1513, column: 3, scope: !3959)
!3966 = !DILocation(line: 1515, column: 11, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3968, file: !3, line: 1515, column: 11)
!3968 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 1514, column: 5)
!3969 = !DILocation(line: 1515, column: 15, scope: !3967)
!3970 = !DILocation(line: 1515, column: 11, scope: !3968)
!3971 = !DILocation(line: 1516, column: 2, scope: !3967)
!3972 = !DILocation(line: 1516, column: 43, scope: !3967)
!3973 = !DILocation(line: 1517, column: 7, scope: !3968)
!3974 = !DILocation(line: 1518, column: 5, scope: !3968)
!3975 = !DILocation(line: 1513, column: 45, scope: !3964)
!3976 = !DILocation(line: 1513, column: 49, scope: !3964)
!3977 = !DILocation(line: 1513, column: 43, scope: !3964)
!3978 = !DILocation(line: 1513, column: 3, scope: !3964)
!3979 = distinct !{!3979, !3965, !3980}
!3980 = !DILocation(line: 1518, column: 5, scope: !3959)
!3981 = !DILocation(line: 1520, column: 11, scope: !3943)
!3982 = !DILocation(line: 1520, column: 19, scope: !3943)
!3983 = !DILocation(line: 1520, column: 9, scope: !3943)
!3984 = !DILocation(line: 1521, column: 7, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1521, column: 7)
!3986 = !DILocation(line: 1521, column: 7, scope: !3943)
!3987 = !DILocation(line: 1522, column: 17, scope: !3985)
!3988 = !DILocation(line: 1522, column: 24, scope: !3985)
!3989 = !DILocation(line: 1522, column: 14, scope: !3985)
!3990 = !DILocation(line: 1522, column: 5, scope: !3985)
!3991 = !DILocation(line: 1524, column: 17, scope: !3985)
!3992 = !DILocation(line: 1524, column: 23, scope: !3985)
!3993 = !DILocation(line: 1524, column: 27, scope: !3985)
!3994 = !DILocation(line: 1524, column: 14, scope: !3985)
!3995 = !DILocation(line: 1525, column: 13, scope: !3996)
!3996 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1525, column: 3)
!3997 = !DILocation(line: 1525, column: 11, scope: !3996)
!3998 = !DILocation(line: 1525, column: 28, scope: !3996)
!3999 = !DILocation(line: 1525, column: 27, scope: !3996)
!4000 = !DILocation(line: 1525, column: 25, scope: !3996)
!4001 = !DILocation(line: 1525, column: 8, scope: !3996)
!4002 = !DILocation(line: 1525, column: 32, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3996, file: !3, line: 1525, column: 3)
!4004 = !DILocation(line: 1525, column: 37, scope: !4003)
!4005 = !DILocation(line: 1525, column: 34, scope: !4003)
!4006 = !DILocation(line: 1525, column: 3, scope: !3996)
!4007 = !DILocation(line: 1526, column: 5, scope: !4003)
!4008 = !DILocation(line: 1525, column: 51, scope: !4003)
!4009 = !DILocation(line: 1525, column: 54, scope: !4003)
!4010 = !DILocation(line: 1525, column: 48, scope: !4003)
!4011 = !DILocation(line: 1525, column: 70, scope: !4003)
!4012 = !DILocation(line: 1525, column: 69, scope: !4003)
!4013 = !DILocation(line: 1525, column: 67, scope: !4003)
!4014 = !DILocation(line: 1525, column: 3, scope: !4003)
!4015 = distinct !{!4015, !4006, !4016}
!4016 = !DILocation(line: 1526, column: 5, scope: !3996)
!4017 = !DILocation(line: 1527, column: 7, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1527, column: 7)
!4019 = !DILocation(line: 1527, column: 15, scope: !4018)
!4020 = !DILocation(line: 1527, column: 7, scope: !3943)
!4021 = !DILocation(line: 1529, column: 17, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4018, file: !3, line: 1528, column: 5)
!4023 = !DILocation(line: 1529, column: 25, scope: !4022)
!4024 = !DILocation(line: 1529, column: 15, scope: !4022)
!4025 = !DILocation(line: 1529, column: 8, scope: !4022)
!4026 = !DILocation(line: 1529, column: 11, scope: !4022)
!4027 = !DILocation(line: 1530, column: 7, scope: !4022)
!4028 = !DILocation(line: 1532, column: 15, scope: !4029)
!4029 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 1531, column: 2)
!4030 = !DILocation(line: 1532, column: 4, scope: !4029)
!4031 = !DILocation(line: 1532, column: 7, scope: !4029)
!4032 = !DILocation(line: 1532, column: 13, scope: !4029)
!4033 = !DILocation(line: 1533, column: 10, scope: !4029)
!4034 = !DILocation(line: 1533, column: 13, scope: !4029)
!4035 = !DILocation(line: 1533, column: 7, scope: !4029)
!4036 = !DILocation(line: 1534, column: 9, scope: !4029)
!4037 = !DILocation(line: 1534, column: 8, scope: !4029)
!4038 = !DILocation(line: 1534, column: 6, scope: !4029)
!4039 = !DILocation(line: 1535, column: 2, scope: !4029)
!4040 = !DILocation(line: 1536, column: 14, scope: !4022)
!4041 = distinct !{!4041, !4027, !4042}
!4042 = !DILocation(line: 1536, column: 15, scope: !4022)
!4043 = !DILocation(line: 1537, column: 5, scope: !4022)
!4044 = !DILocation(line: 1538, column: 9, scope: !3943)
!4045 = !DILocation(line: 1538, column: 17, scope: !3943)
!4046 = !DILocation(line: 1538, column: 4, scope: !3943)
!4047 = !DILocation(line: 1538, column: 7, scope: !3943)
!4048 = !DILocation(line: 1540, column: 3, scope: !3943)
!4049 = !DILocation(line: 1541, column: 1, scope: !3943)
!4050 = distinct !DISubprogram(name: "VEC_eh_region_base_replace", scope: !10, file: !10, line: 184, type: !4051, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4051 = !DISubroutineType(types: !4052)
!4052 = !{!1087, !4053, !11, !1087}
!4053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2469, size: 64)
!4054 = !DILocalVariable(name: "vec_", arg: 1, scope: !4050, file: !10, line: 184, type: !4053)
!4055 = !DILocation(line: 184, column: 1, scope: !4050)
!4056 = !DILocalVariable(name: "ix_", arg: 2, scope: !4050, file: !10, line: 184, type: !11)
!4057 = !DILocalVariable(name: "obj_", arg: 3, scope: !4050, file: !10, line: 184, type: !1087)
!4058 = !DILocalVariable(name: "old_obj_", scope: !4050, file: !10, line: 184, type: !1087)
!4059 = distinct !DISubprogram(name: "for_each_eh_label", scope: !3, file: !3, line: 1547, type: !4060, scopeLine: 1548, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4060 = !DISubroutineType(types: !4061)
!4061 = !{null, !4062}
!4062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3878, size: 64)
!4063 = !DILocalVariable(name: "callback", arg: 1, scope: !4059, file: !3, line: 1547, type: !4062)
!4064 = !DILocation(line: 1547, column: 27, scope: !4059)
!4065 = !DILocalVariable(name: "lp", scope: !4059, file: !3, line: 1549, type: !2489)
!4066 = !DILocation(line: 1549, column: 18, scope: !4059)
!4067 = !DILocalVariable(name: "i", scope: !4059, file: !3, line: 1550, type: !6)
!4068 = !DILocation(line: 1550, column: 7, scope: !4059)
!4069 = !DILocation(line: 1552, column: 10, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4059, file: !3, line: 1552, column: 3)
!4071 = !DILocation(line: 1552, column: 8, scope: !4070)
!4072 = !DILocation(line: 1552, column: 15, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4070, file: !3, line: 1552, column: 3)
!4074 = !DILocation(line: 1552, column: 3, scope: !4070)
!4075 = !DILocation(line: 1554, column: 11, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4077, file: !3, line: 1554, column: 11)
!4077 = distinct !DILexicalBlock(scope: !4073, file: !3, line: 1553, column: 5)
!4078 = !DILocation(line: 1554, column: 11, scope: !4077)
!4079 = !DILocalVariable(name: "lab", scope: !4080, file: !3, line: 1556, type: !1285)
!4080 = distinct !DILexicalBlock(scope: !4076, file: !3, line: 1555, column: 2)
!4081 = !DILocation(line: 1556, column: 8, scope: !4080)
!4082 = !DILocation(line: 1556, column: 14, scope: !4080)
!4083 = !DILocation(line: 1556, column: 18, scope: !4080)
!4084 = !DILocation(line: 1557, column: 8, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 1557, column: 8)
!4086 = !DILocation(line: 1557, column: 12, scope: !4085)
!4087 = !DILocation(line: 1557, column: 15, scope: !4085)
!4088 = !DILocation(line: 1557, column: 8, scope: !4080)
!4089 = !DILocation(line: 1558, column: 8, scope: !4085)
!4090 = !DILocation(line: 1558, column: 19, scope: !4085)
!4091 = !DILocation(line: 1558, column: 6, scope: !4085)
!4092 = !DILocation(line: 1559, column: 2, scope: !4080)
!4093 = !DILocation(line: 1560, column: 5, scope: !4077)
!4094 = !DILocation(line: 1552, column: 72, scope: !4073)
!4095 = !DILocation(line: 1552, column: 3, scope: !4073)
!4096 = distinct !{!4096, !4074, !4097}
!4097 = !DILocation(line: 1560, column: 5, scope: !4070)
!4098 = !DILocation(line: 1561, column: 1, scope: !4059)
!4099 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_iterate", scope: !10, file: !10, line: 188, type: !4100, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4100 = !DISubroutineType(types: !4101)
!4101 = !{!6, !3017, !11, !2753}
!4102 = !DILocalVariable(name: "vec_", arg: 1, scope: !4099, file: !10, line: 188, type: !3017)
!4103 = !DILocation(line: 188, column: 1, scope: !4099)
!4104 = !DILocalVariable(name: "ix_", arg: 2, scope: !4099, file: !10, line: 188, type: !11)
!4105 = !DILocalVariable(name: "ptr", arg: 3, scope: !4099, file: !10, line: 188, type: !2753)
!4106 = !DILocation(line: 188, column: 1, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4099, file: !10, line: 188, column: 1)
!4108 = !DILocation(line: 188, column: 1, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4107, file: !10, line: 188, column: 1)
!4110 = !DILocation(line: 188, column: 1, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4107, file: !10, line: 188, column: 1)
!4112 = distinct !DISubprogram(name: "make_reg_eh_region_note", scope: !3, file: !3, line: 1588, type: !4113, scopeLine: 1589, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4113 = !DISubroutineType(types: !4114)
!4114 = !{null, !1285, !6, !6}
!4115 = !DILocalVariable(name: "insn", arg: 1, scope: !4112, file: !3, line: 1588, type: !1285)
!4116 = !DILocation(line: 1588, column: 30, scope: !4112)
!4117 = !DILocalVariable(name: "ecf_flags", arg: 2, scope: !4112, file: !3, line: 1588, type: !6)
!4118 = !DILocation(line: 1588, column: 40, scope: !4112)
!4119 = !DILocalVariable(name: "lp_nr", arg: 3, scope: !4112, file: !3, line: 1588, type: !6)
!4120 = !DILocation(line: 1588, column: 55, scope: !4112)
!4121 = !DILocalVariable(name: "value", scope: !4112, file: !3, line: 1590, type: !1285)
!4122 = !DILocation(line: 1590, column: 7, scope: !4112)
!4123 = !DILocation(line: 1591, column: 7, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 1591, column: 7)
!4125 = !DILocation(line: 1591, column: 17, scope: !4124)
!4126 = !DILocation(line: 1591, column: 7, scope: !4112)
!4127 = !DILocation(line: 1592, column: 13, scope: !4124)
!4128 = !DILocation(line: 1592, column: 11, scope: !4124)
!4129 = !DILocation(line: 1592, column: 5, scope: !4124)
!4130 = !DILocation(line: 1593, column: 12, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4124, file: !3, line: 1593, column: 12)
!4132 = !DILocation(line: 1593, column: 18, scope: !4131)
!4133 = !DILocation(line: 1593, column: 12, scope: !4124)
!4134 = !DILocation(line: 1594, column: 13, scope: !4131)
!4135 = !DILocation(line: 1594, column: 11, scope: !4131)
!4136 = !DILocation(line: 1594, column: 5, scope: !4131)
!4137 = !DILocation(line: 1596, column: 5, scope: !4131)
!4138 = !DILocation(line: 1597, column: 17, scope: !4112)
!4139 = !DILocation(line: 1597, column: 38, scope: !4112)
!4140 = !DILocation(line: 1597, column: 3, scope: !4112)
!4141 = !DILocation(line: 1598, column: 1, scope: !4112)
!4142 = distinct !DISubprogram(name: "make_reg_eh_region_note_nothrow_nononlocal", scope: !3, file: !3, line: 1605, type: !3878, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4143 = !DILocalVariable(name: "insn", arg: 1, scope: !4142, file: !3, line: 1605, type: !1285)
!4144 = !DILocation(line: 1605, column: 49, scope: !4142)
!4145 = !DILocalVariable(name: "note", scope: !4142, file: !3, line: 1607, type: !1285)
!4146 = !DILocation(line: 1607, column: 7, scope: !4142)
!4147 = !DILocation(line: 1607, column: 29, scope: !4142)
!4148 = !DILocation(line: 1607, column: 14, scope: !4142)
!4149 = !DILocalVariable(name: "intmin", scope: !4142, file: !3, line: 1608, type: !1285)
!4150 = !DILocation(line: 1608, column: 7, scope: !4142)
!4151 = !DILocation(line: 1608, column: 16, scope: !4142)
!4152 = !DILocation(line: 1610, column: 7, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 1610, column: 7)
!4154 = !DILocation(line: 1610, column: 12, scope: !4153)
!4155 = !DILocation(line: 1610, column: 7, scope: !4142)
!4156 = !DILocation(line: 1611, column: 22, scope: !4153)
!4157 = !DILocation(line: 1611, column: 5, scope: !4153)
!4158 = !DILocation(line: 1611, column: 20, scope: !4153)
!4159 = !DILocation(line: 1613, column: 19, scope: !4153)
!4160 = !DILocation(line: 1613, column: 40, scope: !4153)
!4161 = !DILocation(line: 1613, column: 5, scope: !4153)
!4162 = !DILocation(line: 1614, column: 1, scope: !4142)
!4163 = distinct !DISubprogram(name: "insn_could_throw_p", scope: !3, file: !3, line: 1620, type: !4164, scopeLine: 1621, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4164 = !DISubroutineType(types: !4165)
!4165 = !{!1227, !4166}
!4166 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !769, line: 51, baseType: !4167)
!4167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4168, size: 64)
!4168 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1287)
!4169 = !DILocalVariable(name: "insn", arg: 1, scope: !4163, file: !3, line: 1620, type: !4166)
!4170 = !DILocation(line: 1620, column: 31, scope: !4163)
!4171 = !DILocation(line: 1622, column: 7, scope: !4172)
!4172 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 1622, column: 7)
!4173 = !DILocation(line: 1622, column: 7, scope: !4163)
!4174 = !DILocation(line: 1623, column: 5, scope: !4172)
!4175 = !DILocation(line: 1624, column: 7, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 1624, column: 7)
!4177 = !DILocation(line: 1624, column: 21, scope: !4176)
!4178 = !DILocation(line: 1624, column: 24, scope: !4176)
!4179 = !DILocation(line: 1624, column: 7, scope: !4163)
!4180 = !DILocation(line: 1625, column: 24, scope: !4176)
!4181 = !DILocation(line: 1625, column: 12, scope: !4176)
!4182 = !DILocation(line: 1625, column: 5, scope: !4176)
!4183 = !DILocation(line: 1626, column: 3, scope: !4163)
!4184 = !DILocation(line: 1627, column: 1, scope: !4163)
!4185 = distinct !DISubprogram(name: "copy_reg_eh_region_note_forward", scope: !3, file: !3, line: 1634, type: !4186, scopeLine: 1635, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4186 = !DISubroutineType(types: !4187)
!4187 = !{null, !1285, !1285, !1285}
!4188 = !DILocalVariable(name: "note_or_insn", arg: 1, scope: !4185, file: !3, line: 1634, type: !1285)
!4189 = !DILocation(line: 1634, column: 38, scope: !4185)
!4190 = !DILocalVariable(name: "first", arg: 2, scope: !4185, file: !3, line: 1634, type: !1285)
!4191 = !DILocation(line: 1634, column: 56, scope: !4185)
!4192 = !DILocalVariable(name: "last", arg: 3, scope: !4185, file: !3, line: 1634, type: !1285)
!4193 = !DILocation(line: 1634, column: 67, scope: !4185)
!4194 = !DILocalVariable(name: "insn", scope: !4185, file: !3, line: 1636, type: !1285)
!4195 = !DILocation(line: 1636, column: 7, scope: !4185)
!4196 = !DILocalVariable(name: "note", scope: !4185, file: !3, line: 1636, type: !1285)
!4197 = !DILocation(line: 1636, column: 13, scope: !4185)
!4198 = !DILocation(line: 1636, column: 20, scope: !4185)
!4199 = !DILocation(line: 1638, column: 7, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4185, file: !3, line: 1638, column: 7)
!4201 = !DILocation(line: 1638, column: 7, scope: !4185)
!4202 = !DILocation(line: 1640, column: 29, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 1639, column: 5)
!4204 = !DILocation(line: 1640, column: 14, scope: !4203)
!4205 = !DILocation(line: 1640, column: 12, scope: !4203)
!4206 = !DILocation(line: 1641, column: 11, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 1641, column: 11)
!4208 = !DILocation(line: 1641, column: 16, scope: !4207)
!4209 = !DILocation(line: 1641, column: 11, scope: !4203)
!4210 = !DILocation(line: 1642, column: 2, scope: !4207)
!4211 = !DILocation(line: 1643, column: 5, scope: !4203)
!4212 = !DILocation(line: 1644, column: 10, scope: !4185)
!4213 = !DILocation(line: 1644, column: 8, scope: !4185)
!4214 = !DILocation(line: 1646, column: 15, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4185, file: !3, line: 1646, column: 3)
!4216 = !DILocation(line: 1646, column: 13, scope: !4215)
!4217 = !DILocation(line: 1646, column: 8, scope: !4215)
!4218 = !DILocation(line: 1646, column: 22, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 1646, column: 3)
!4220 = !DILocation(line: 1646, column: 30, scope: !4219)
!4221 = !DILocation(line: 1646, column: 27, scope: !4219)
!4222 = !DILocation(line: 1646, column: 3, scope: !4215)
!4223 = !DILocation(line: 1647, column: 25, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 1647, column: 9)
!4225 = !DILocation(line: 1647, column: 10, scope: !4224)
!4226 = !DILocation(line: 1648, column: 9, scope: !4224)
!4227 = !DILocation(line: 1648, column: 32, scope: !4224)
!4228 = !DILocation(line: 1648, column: 12, scope: !4224)
!4229 = !DILocation(line: 1647, column: 9, scope: !4219)
!4230 = !DILocation(line: 1649, column: 21, scope: !4224)
!4231 = !DILocation(line: 1649, column: 42, scope: !4224)
!4232 = !DILocation(line: 1649, column: 7, scope: !4224)
!4233 = !DILocation(line: 1648, column: 36, scope: !4224)
!4234 = !DILocation(line: 1646, column: 44, scope: !4219)
!4235 = !DILocation(line: 1646, column: 42, scope: !4219)
!4236 = !DILocation(line: 1646, column: 3, scope: !4219)
!4237 = distinct !{!4237, !4222, !4238}
!4238 = !DILocation(line: 1649, column: 46, scope: !4215)
!4239 = !DILocation(line: 1650, column: 1, scope: !4185)
!4240 = distinct !DISubprogram(name: "copy_reg_eh_region_note_backward", scope: !3, file: !3, line: 1655, type: !4186, scopeLine: 1656, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4241 = !DILocalVariable(name: "note_or_insn", arg: 1, scope: !4240, file: !3, line: 1655, type: !1285)
!4242 = !DILocation(line: 1655, column: 39, scope: !4240)
!4243 = !DILocalVariable(name: "last", arg: 2, scope: !4240, file: !3, line: 1655, type: !1285)
!4244 = !DILocation(line: 1655, column: 57, scope: !4240)
!4245 = !DILocalVariable(name: "first", arg: 3, scope: !4240, file: !3, line: 1655, type: !1285)
!4246 = !DILocation(line: 1655, column: 67, scope: !4240)
!4247 = !DILocalVariable(name: "insn", scope: !4240, file: !3, line: 1657, type: !1285)
!4248 = !DILocation(line: 1657, column: 7, scope: !4240)
!4249 = !DILocalVariable(name: "note", scope: !4240, file: !3, line: 1657, type: !1285)
!4250 = !DILocation(line: 1657, column: 13, scope: !4240)
!4251 = !DILocation(line: 1657, column: 20, scope: !4240)
!4252 = !DILocation(line: 1659, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 1659, column: 7)
!4254 = !DILocation(line: 1659, column: 7, scope: !4240)
!4255 = !DILocation(line: 1661, column: 29, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 1660, column: 5)
!4257 = !DILocation(line: 1661, column: 14, scope: !4256)
!4258 = !DILocation(line: 1661, column: 12, scope: !4256)
!4259 = !DILocation(line: 1662, column: 11, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 1662, column: 11)
!4261 = !DILocation(line: 1662, column: 16, scope: !4260)
!4262 = !DILocation(line: 1662, column: 11, scope: !4256)
!4263 = !DILocation(line: 1663, column: 2, scope: !4260)
!4264 = !DILocation(line: 1664, column: 5, scope: !4256)
!4265 = !DILocation(line: 1665, column: 10, scope: !4240)
!4266 = !DILocation(line: 1665, column: 8, scope: !4240)
!4267 = !DILocation(line: 1667, column: 15, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 1667, column: 3)
!4269 = !DILocation(line: 1667, column: 13, scope: !4268)
!4270 = !DILocation(line: 1667, column: 8, scope: !4268)
!4271 = !DILocation(line: 1667, column: 21, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 1667, column: 3)
!4273 = !DILocation(line: 1667, column: 29, scope: !4272)
!4274 = !DILocation(line: 1667, column: 26, scope: !4272)
!4275 = !DILocation(line: 1667, column: 3, scope: !4268)
!4276 = !DILocation(line: 1668, column: 29, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 1668, column: 9)
!4278 = !DILocation(line: 1668, column: 9, scope: !4277)
!4279 = !DILocation(line: 1668, column: 9, scope: !4272)
!4280 = !DILocation(line: 1669, column: 21, scope: !4277)
!4281 = !DILocation(line: 1669, column: 42, scope: !4277)
!4282 = !DILocation(line: 1669, column: 7, scope: !4277)
!4283 = !DILocation(line: 1668, column: 33, scope: !4277)
!4284 = !DILocation(line: 1667, column: 43, scope: !4272)
!4285 = !DILocation(line: 1667, column: 41, scope: !4272)
!4286 = !DILocation(line: 1667, column: 3, scope: !4272)
!4287 = distinct !{!4287, !4275, !4288}
!4288 = !DILocation(line: 1669, column: 46, scope: !4268)
!4289 = !DILocation(line: 1670, column: 1, scope: !4240)
!4290 = distinct !DISubprogram(name: "get_eh_landing_pad_from_rtx", scope: !3, file: !3, line: 1725, type: !4291, scopeLine: 1726, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4291 = !DISubroutineType(types: !4292)
!4292 = !{!2489, !4166}
!4293 = !DILocalVariable(name: "insn", arg: 1, scope: !4290, file: !3, line: 1725, type: !4166)
!4294 = !DILocation(line: 1725, column: 40, scope: !4290)
!4295 = !DILocalVariable(name: "lp", scope: !4290, file: !3, line: 1727, type: !2489)
!4296 = !DILocation(line: 1727, column: 18, scope: !4290)
!4297 = !DILocalVariable(name: "r", scope: !4290, file: !3, line: 1728, type: !1087)
!4298 = !DILocation(line: 1728, column: 13, scope: !4290)
!4299 = !DILocation(line: 1730, column: 34, scope: !4290)
!4300 = !DILocation(line: 1730, column: 3, scope: !4290)
!4301 = !DILocation(line: 1731, column: 10, scope: !4290)
!4302 = !DILocation(line: 1731, column: 3, scope: !4290)
!4303 = distinct !DISubprogram(name: "get_eh_region_and_lp_from_rtx", scope: !3, file: !3, line: 1677, type: !4304, scopeLine: 1679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4304 = !DISubroutineType(types: !4305)
!4305 = !{!1227, !4166, !2745, !2753}
!4306 = !DILocalVariable(name: "insn", arg: 1, scope: !4303, file: !3, line: 1677, type: !4166)
!4307 = !DILocation(line: 1677, column: 42, scope: !4303)
!4308 = !DILocalVariable(name: "pr", arg: 2, scope: !4303, file: !3, line: 1677, type: !2745)
!4309 = !DILocation(line: 1677, column: 59, scope: !4303)
!4310 = !DILocalVariable(name: "plp", arg: 3, scope: !4303, file: !3, line: 1678, type: !2753)
!4311 = !DILocation(line: 1678, column: 27, scope: !4303)
!4312 = !DILocalVariable(name: "lp", scope: !4303, file: !3, line: 1680, type: !2489)
!4313 = !DILocation(line: 1680, column: 18, scope: !4303)
!4314 = !DILocalVariable(name: "r", scope: !4303, file: !3, line: 1681, type: !1087)
!4315 = !DILocation(line: 1681, column: 13, scope: !4303)
!4316 = !DILocalVariable(name: "ret", scope: !4303, file: !3, line: 1682, type: !1227)
!4317 = !DILocation(line: 1682, column: 8, scope: !4303)
!4318 = !DILocalVariable(name: "note", scope: !4303, file: !3, line: 1683, type: !1285)
!4319 = !DILocation(line: 1683, column: 7, scope: !4303)
!4320 = !DILocalVariable(name: "lp_nr", scope: !4303, file: !3, line: 1684, type: !6)
!4321 = !DILocation(line: 1684, column: 7, scope: !4303)
!4322 = !DILocation(line: 1686, column: 9, scope: !4323)
!4323 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1686, column: 7)
!4324 = !DILocation(line: 1686, column: 7, scope: !4303)
!4325 = !DILocation(line: 1687, column: 5, scope: !4323)
!4326 = !DILocation(line: 1689, column: 7, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1689, column: 7)
!4328 = !DILocation(line: 1690, column: 7, scope: !4327)
!4329 = !DILocation(line: 1690, column: 10, scope: !4327)
!4330 = !DILocation(line: 1690, column: 36, scope: !4327)
!4331 = !DILocation(line: 1689, column: 7, scope: !4303)
!4332 = !DILocation(line: 1691, column: 12, scope: !4327)
!4333 = !DILocation(line: 1691, column: 10, scope: !4327)
!4334 = !DILocation(line: 1691, column: 5, scope: !4327)
!4335 = !DILocation(line: 1693, column: 25, scope: !4303)
!4336 = !DILocation(line: 1693, column: 10, scope: !4303)
!4337 = !DILocation(line: 1693, column: 8, scope: !4303)
!4338 = !DILocation(line: 1694, column: 8, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1694, column: 7)
!4340 = !DILocation(line: 1694, column: 7, scope: !4303)
!4341 = !DILocation(line: 1696, column: 34, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1695, column: 5)
!4343 = !DILocation(line: 1696, column: 14, scope: !4342)
!4344 = !DILocation(line: 1696, column: 13, scope: !4342)
!4345 = !DILocation(line: 1696, column: 11, scope: !4342)
!4346 = !DILocation(line: 1697, column: 7, scope: !4342)
!4347 = !DILocation(line: 1700, column: 11, scope: !4303)
!4348 = !DILocation(line: 1700, column: 9, scope: !4303)
!4349 = !DILocation(line: 1701, column: 7, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1701, column: 7)
!4351 = !DILocation(line: 1701, column: 13, scope: !4350)
!4352 = !DILocation(line: 1701, column: 18, scope: !4350)
!4353 = !DILocation(line: 1701, column: 21, scope: !4350)
!4354 = !DILocation(line: 1701, column: 27, scope: !4350)
!4355 = !DILocation(line: 1701, column: 7, scope: !4303)
!4356 = !DILocation(line: 1703, column: 11, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4350, file: !3, line: 1702, column: 5)
!4358 = !DILocation(line: 1704, column: 7, scope: !4357)
!4359 = !DILocation(line: 1707, column: 7, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1707, column: 7)
!4361 = !DILocation(line: 1707, column: 13, scope: !4360)
!4362 = !DILocation(line: 1707, column: 7, scope: !4303)
!4363 = !DILocation(line: 1708, column: 9, scope: !4360)
!4364 = !DILocation(line: 1708, column: 7, scope: !4360)
!4365 = !DILocation(line: 1708, column: 5, scope: !4360)
!4366 = !DILocation(line: 1711, column: 12, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4360, file: !3, line: 1710, column: 5)
!4368 = !DILocation(line: 1711, column: 10, scope: !4367)
!4369 = !DILocation(line: 1712, column: 11, scope: !4367)
!4370 = !DILocation(line: 1712, column: 15, scope: !4367)
!4371 = !DILocation(line: 1712, column: 9, scope: !4367)
!4372 = !DILocation(line: 1707, column: 15, scope: !4360)
!4373 = !DILabel(scope: !4303, name: "egress", file: !3, line: 1715)
!4374 = !DILocation(line: 1715, column: 2, scope: !4303)
!4375 = !DILocation(line: 1716, column: 10, scope: !4303)
!4376 = !DILocation(line: 1716, column: 4, scope: !4303)
!4377 = !DILocation(line: 1716, column: 8, scope: !4303)
!4378 = !DILocation(line: 1717, column: 9, scope: !4303)
!4379 = !DILocation(line: 1717, column: 4, scope: !4303)
!4380 = !DILocation(line: 1717, column: 7, scope: !4303)
!4381 = !DILocation(line: 1718, column: 10, scope: !4303)
!4382 = !DILocation(line: 1718, column: 3, scope: !4303)
!4383 = distinct !DISubprogram(name: "get_eh_region_from_rtx", scope: !3, file: !3, line: 1738, type: !4384, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4384 = !DISubroutineType(types: !4385)
!4385 = !{!1087, !4166}
!4386 = !DILocalVariable(name: "insn", arg: 1, scope: !4383, file: !3, line: 1738, type: !4166)
!4387 = !DILocation(line: 1738, column: 35, scope: !4383)
!4388 = !DILocalVariable(name: "lp", scope: !4383, file: !3, line: 1740, type: !2489)
!4389 = !DILocation(line: 1740, column: 18, scope: !4383)
!4390 = !DILocalVariable(name: "r", scope: !4383, file: !3, line: 1741, type: !1087)
!4391 = !DILocation(line: 1741, column: 13, scope: !4383)
!4392 = !DILocation(line: 1743, column: 34, scope: !4383)
!4393 = !DILocation(line: 1743, column: 3, scope: !4383)
!4394 = !DILocation(line: 1744, column: 10, scope: !4383)
!4395 = !DILocation(line: 1744, column: 3, scope: !4383)
!4396 = distinct !DISubprogram(name: "can_throw_internal", scope: !3, file: !3, line: 1750, type: !4164, scopeLine: 1751, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4397 = !DILocalVariable(name: "insn", arg: 1, scope: !4396, file: !3, line: 1750, type: !4166)
!4398 = !DILocation(line: 1750, column: 31, scope: !4396)
!4399 = !DILocation(line: 1752, column: 39, scope: !4396)
!4400 = !DILocation(line: 1752, column: 10, scope: !4396)
!4401 = !DILocation(line: 1752, column: 45, scope: !4396)
!4402 = !DILocation(line: 1752, column: 3, scope: !4396)
!4403 = distinct !DISubprogram(name: "can_throw_external", scope: !3, file: !3, line: 1758, type: !4164, scopeLine: 1759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4404 = !DILocalVariable(name: "insn", arg: 1, scope: !4403, file: !3, line: 1758, type: !4166)
!4405 = !DILocation(line: 1758, column: 31, scope: !4403)
!4406 = !DILocalVariable(name: "lp", scope: !4403, file: !3, line: 1760, type: !2489)
!4407 = !DILocation(line: 1760, column: 18, scope: !4403)
!4408 = !DILocalVariable(name: "r", scope: !4403, file: !3, line: 1761, type: !1087)
!4409 = !DILocation(line: 1761, column: 13, scope: !4403)
!4410 = !DILocalVariable(name: "nothrow", scope: !4403, file: !3, line: 1762, type: !1227)
!4411 = !DILocation(line: 1762, column: 8, scope: !4403)
!4412 = !DILocation(line: 1764, column: 9, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1764, column: 7)
!4414 = !DILocation(line: 1764, column: 7, scope: !4403)
!4415 = !DILocation(line: 1765, column: 5, scope: !4413)
!4416 = !DILocation(line: 1767, column: 7, scope: !4417)
!4417 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1767, column: 7)
!4418 = !DILocation(line: 1768, column: 7, scope: !4417)
!4419 = !DILocation(line: 1768, column: 10, scope: !4417)
!4420 = !DILocation(line: 1768, column: 36, scope: !4417)
!4421 = !DILocation(line: 1767, column: 7, scope: !4403)
!4422 = !DILocalVariable(name: "seq", scope: !4423, file: !3, line: 1770, type: !1285)
!4423 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1769, column: 5)
!4424 = !DILocation(line: 1770, column: 11, scope: !4423)
!4425 = !DILocation(line: 1770, column: 17, scope: !4423)
!4426 = !DILocalVariable(name: "i", scope: !4423, file: !3, line: 1771, type: !6)
!4427 = !DILocation(line: 1771, column: 11, scope: !4423)
!4428 = !DILocalVariable(name: "n", scope: !4423, file: !3, line: 1771, type: !6)
!4429 = !DILocation(line: 1771, column: 14, scope: !4423)
!4430 = !DILocation(line: 1771, column: 18, scope: !4423)
!4431 = !DILocation(line: 1773, column: 14, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1773, column: 7)
!4433 = !DILocation(line: 1773, column: 12, scope: !4432)
!4434 = !DILocation(line: 1773, column: 19, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 1773, column: 7)
!4436 = !DILocation(line: 1773, column: 23, scope: !4435)
!4437 = !DILocation(line: 1773, column: 21, scope: !4435)
!4438 = !DILocation(line: 1773, column: 7, scope: !4432)
!4439 = !DILocation(line: 1774, column: 26, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 1774, column: 6)
!4441 = !DILocation(line: 1774, column: 6, scope: !4440)
!4442 = !DILocation(line: 1774, column: 6, scope: !4435)
!4443 = !DILocation(line: 1775, column: 4, scope: !4440)
!4444 = !DILocation(line: 1774, column: 45, scope: !4440)
!4445 = !DILocation(line: 1773, column: 27, scope: !4435)
!4446 = !DILocation(line: 1773, column: 7, scope: !4435)
!4447 = distinct !{!4447, !4438, !4448}
!4448 = !DILocation(line: 1775, column: 11, scope: !4432)
!4449 = !DILocation(line: 1777, column: 7, scope: !4423)
!4450 = !DILocation(line: 1780, column: 44, scope: !4403)
!4451 = !DILocation(line: 1780, column: 13, scope: !4403)
!4452 = !DILocation(line: 1780, column: 11, scope: !4403)
!4453 = !DILocation(line: 1783, column: 7, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1783, column: 7)
!4455 = !DILocation(line: 1783, column: 7, scope: !4403)
!4456 = !DILocation(line: 1784, column: 5, scope: !4454)
!4457 = !DILocation(line: 1787, column: 7, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1787, column: 7)
!4459 = !DILocation(line: 1787, column: 10, scope: !4458)
!4460 = !DILocation(line: 1787, column: 7, scope: !4403)
!4461 = !DILocation(line: 1788, column: 5, scope: !4458)
!4462 = !DILocation(line: 1791, column: 7, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1791, column: 7)
!4464 = !DILocation(line: 1791, column: 9, scope: !4463)
!4465 = !DILocation(line: 1791, column: 7, scope: !4403)
!4466 = !DILocation(line: 1792, column: 5, scope: !4463)
!4467 = !DILocation(line: 1796, column: 3, scope: !4403)
!4468 = !DILocation(line: 1797, column: 3, scope: !4403)
!4469 = !DILocation(line: 1798, column: 1, scope: !4403)
!4470 = distinct !DISubprogram(name: "insn_nothrow_p", scope: !3, file: !3, line: 1803, type: !4164, scopeLine: 1804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4471 = !DILocalVariable(name: "insn", arg: 1, scope: !4470, file: !3, line: 1803, type: !4166)
!4472 = !DILocation(line: 1803, column: 27, scope: !4470)
!4473 = !DILocalVariable(name: "lp", scope: !4470, file: !3, line: 1805, type: !2489)
!4474 = !DILocation(line: 1805, column: 18, scope: !4470)
!4475 = !DILocalVariable(name: "r", scope: !4470, file: !3, line: 1806, type: !1087)
!4476 = !DILocation(line: 1806, column: 13, scope: !4470)
!4477 = !DILocation(line: 1808, column: 9, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 1808, column: 7)
!4479 = !DILocation(line: 1808, column: 7, scope: !4470)
!4480 = !DILocation(line: 1809, column: 5, scope: !4478)
!4481 = !DILocation(line: 1811, column: 7, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 1811, column: 7)
!4483 = !DILocation(line: 1812, column: 7, scope: !4482)
!4484 = !DILocation(line: 1812, column: 10, scope: !4482)
!4485 = !DILocation(line: 1812, column: 36, scope: !4482)
!4486 = !DILocation(line: 1811, column: 7, scope: !4470)
!4487 = !DILocalVariable(name: "seq", scope: !4488, file: !3, line: 1814, type: !1285)
!4488 = distinct !DILexicalBlock(scope: !4482, file: !3, line: 1813, column: 5)
!4489 = !DILocation(line: 1814, column: 11, scope: !4488)
!4490 = !DILocation(line: 1814, column: 17, scope: !4488)
!4491 = !DILocalVariable(name: "i", scope: !4488, file: !3, line: 1815, type: !6)
!4492 = !DILocation(line: 1815, column: 11, scope: !4488)
!4493 = !DILocalVariable(name: "n", scope: !4488, file: !3, line: 1815, type: !6)
!4494 = !DILocation(line: 1815, column: 14, scope: !4488)
!4495 = !DILocation(line: 1815, column: 18, scope: !4488)
!4496 = !DILocation(line: 1817, column: 14, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 1817, column: 7)
!4498 = !DILocation(line: 1817, column: 12, scope: !4497)
!4499 = !DILocation(line: 1817, column: 19, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 1817, column: 7)
!4501 = !DILocation(line: 1817, column: 23, scope: !4500)
!4502 = !DILocation(line: 1817, column: 21, scope: !4500)
!4503 = !DILocation(line: 1817, column: 7, scope: !4497)
!4504 = !DILocation(line: 1818, column: 23, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 1818, column: 6)
!4506 = !DILocation(line: 1818, column: 7, scope: !4505)
!4507 = !DILocation(line: 1818, column: 6, scope: !4500)
!4508 = !DILocation(line: 1819, column: 4, scope: !4505)
!4509 = !DILocation(line: 1818, column: 42, scope: !4505)
!4510 = !DILocation(line: 1817, column: 27, scope: !4500)
!4511 = !DILocation(line: 1817, column: 7, scope: !4500)
!4512 = distinct !{!4512, !4503, !4513}
!4513 = !DILocation(line: 1819, column: 11, scope: !4497)
!4514 = !DILocation(line: 1821, column: 7, scope: !4488)
!4515 = !DILocation(line: 1824, column: 41, scope: !4470)
!4516 = !DILocation(line: 1824, column: 10, scope: !4470)
!4517 = !DILocation(line: 1824, column: 3, scope: !4470)
!4518 = !DILocation(line: 1825, column: 1, scope: !4470)
!4519 = distinct !DISubprogram(name: "can_nonlocal_goto", scope: !3, file: !3, line: 1831, type: !4164, scopeLine: 1832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4520 = !DILocalVariable(name: "insn", arg: 1, scope: !4519, file: !3, line: 1831, type: !4166)
!4521 = !DILocation(line: 1831, column: 30, scope: !4519)
!4522 = !DILocation(line: 1833, column: 7, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 1833, column: 7)
!4524 = !DILocation(line: 1833, column: 36, scope: !4523)
!4525 = !DILocation(line: 1833, column: 39, scope: !4523)
!4526 = !DILocation(line: 1833, column: 7, scope: !4519)
!4527 = !DILocalVariable(name: "note", scope: !4528, file: !3, line: 1835, type: !1285)
!4528 = distinct !DILexicalBlock(scope: !4523, file: !3, line: 1834, column: 5)
!4529 = !DILocation(line: 1835, column: 11, scope: !4528)
!4530 = !DILocation(line: 1835, column: 33, scope: !4528)
!4531 = !DILocation(line: 1835, column: 18, scope: !4528)
!4532 = !DILocation(line: 1836, column: 12, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 1836, column: 11)
!4534 = !DILocation(line: 1836, column: 17, scope: !4533)
!4535 = !DILocation(line: 1836, column: 20, scope: !4533)
!4536 = !DILocation(line: 1836, column: 44, scope: !4533)
!4537 = !DILocation(line: 1836, column: 11, scope: !4528)
!4538 = !DILocation(line: 1837, column: 2, scope: !4533)
!4539 = !DILocation(line: 1838, column: 5, scope: !4528)
!4540 = !DILocation(line: 1839, column: 3, scope: !4519)
!4541 = !DILocation(line: 1840, column: 1, scope: !4519)
!4542 = distinct !DISubprogram(name: "set_nothrow_function_flags", scope: !3, file: !3, line: 1845, type: !2566, scopeLine: 1846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4543 = !DILocalVariable(name: "insn", scope: !4542, file: !3, line: 1847, type: !1285)
!4544 = !DILocation(line: 1847, column: 7, scope: !4542)
!4545 = !DILocation(line: 1849, column: 17, scope: !4542)
!4546 = !DILocation(line: 1857, column: 35, scope: !4542)
!4547 = !DILocation(line: 1862, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1862, column: 7)
!4549 = !DILocation(line: 1862, column: 7, scope: !4542)
!4550 = !DILocation(line: 1863, column: 5, scope: !4548)
!4551 = !DILocation(line: 1865, column: 9, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1865, column: 7)
!4553 = !DILocation(line: 1865, column: 7, scope: !4542)
!4554 = !DILocation(line: 1866, column: 5, scope: !4552)
!4555 = !DILocation(line: 1868, column: 15, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1868, column: 3)
!4557 = !DILocation(line: 1868, column: 13, scope: !4556)
!4558 = !DILocation(line: 1868, column: 8, scope: !4556)
!4559 = !DILocation(line: 1868, column: 29, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 1868, column: 3)
!4561 = !DILocation(line: 1868, column: 3, scope: !4556)
!4562 = !DILocation(line: 1869, column: 29, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 1869, column: 9)
!4564 = !DILocation(line: 1869, column: 9, scope: !4563)
!4565 = !DILocation(line: 1869, column: 9, scope: !4560)
!4566 = !DILocation(line: 1871, column: 23, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1870, column: 7)
!4568 = !DILocation(line: 1873, column: 7, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 1873, column: 6)
!4570 = !DILocation(line: 1873, column: 21, scope: !4569)
!4571 = !DILocation(line: 1873, column: 25, scope: !4569)
!4572 = !DILocation(line: 1873, column: 6, scope: !4567)
!4573 = !DILocation(line: 1875, column: 38, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 1874, column: 4)
!4575 = !DILocation(line: 1876, column: 6, scope: !4574)
!4576 = !DILocation(line: 1878, column: 7, scope: !4567)
!4577 = !DILocation(line: 1869, column: 33, scope: !4563)
!4578 = !DILocation(line: 1868, column: 42, scope: !4560)
!4579 = !DILocation(line: 1868, column: 40, scope: !4560)
!4580 = !DILocation(line: 1868, column: 3, scope: !4560)
!4581 = distinct !{!4581, !4561, !4582}
!4582 = !DILocation(line: 1878, column: 7, scope: !4556)
!4583 = !DILocation(line: 1880, column: 21, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1880, column: 3)
!4585 = !DILocation(line: 1880, column: 13, scope: !4584)
!4586 = !DILocation(line: 1880, column: 8, scope: !4584)
!4587 = !DILocation(line: 1880, column: 42, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 1880, column: 3)
!4589 = !DILocation(line: 1880, column: 3, scope: !4584)
!4590 = !DILocation(line: 1882, column: 29, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 1882, column: 9)
!4592 = !DILocation(line: 1882, column: 9, scope: !4591)
!4593 = !DILocation(line: 1882, column: 9, scope: !4588)
!4594 = !DILocation(line: 1884, column: 23, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 1883, column: 7)
!4596 = !DILocation(line: 1886, column: 7, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 1886, column: 6)
!4598 = !DILocation(line: 1886, column: 21, scope: !4597)
!4599 = !DILocation(line: 1886, column: 25, scope: !4597)
!4600 = !DILocation(line: 1886, column: 6, scope: !4595)
!4601 = !DILocation(line: 1888, column: 38, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 1887, column: 4)
!4603 = !DILocation(line: 1889, column: 6, scope: !4602)
!4604 = !DILocation(line: 1891, column: 7, scope: !4595)
!4605 = !DILocation(line: 1882, column: 33, scope: !4591)
!4606 = !DILocation(line: 1881, column: 15, scope: !4588)
!4607 = !DILocation(line: 1881, column: 13, scope: !4588)
!4608 = !DILocation(line: 1880, column: 3, scope: !4588)
!4609 = distinct !{!4609, !4589, !4610}
!4610 = !DILocation(line: 1891, column: 7, scope: !4584)
!4611 = !DILocation(line: 1892, column: 13, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1892, column: 7)
!4613 = !DILocation(line: 1892, column: 7, scope: !4612)
!4614 = !DILocation(line: 1893, column: 7, scope: !4612)
!4615 = !DILocation(line: 1894, column: 12, scope: !4612)
!4616 = !DILocation(line: 1893, column: 46, scope: !4612)
!4617 = !DILocation(line: 1893, column: 11, scope: !4612)
!4618 = !DILocation(line: 1895, column: 11, scope: !4612)
!4619 = !DILocation(line: 1892, column: 7, scope: !4542)
!4620 = !DILocalVariable(name: "node", scope: !4621, file: !3, line: 1897, type: !4622)
!4621 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 1896, column: 5)
!4622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4623, size: 64)
!4623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1010, line: 181, size: 2496, elements: !4624)
!4624 = !{!4625, !4626, !4648, !4649, !4650, !4651, !4652, !4653, !4654, !4655, !4656, !4657, !4658, !4659, !4660, !4661, !4662, !4663, !4740, !4762, !4772, !4776, !4802, !4811, !4812, !4813, !4814, !4815, !4816, !4817, !4818, !4819, !4820, !4821, !4822, !4823, !4824}
!4625 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4623, file: !1010, line: 182, baseType: !1109, size: 64)
!4626 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !4623, file: !1010, line: 183, baseType: !4627, size: 64, offset: 64)
!4627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4628, size: 64)
!4628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1010, line: 314, size: 768, elements: !4629)
!4629 = !{!4630, !4631, !4632, !4633, !4634, !4635, !4636, !4637, !4638, !4639, !4641, !4642, !4643, !4644, !4645, !4646, !4647}
!4630 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4628, file: !1010, line: 316, baseType: !1650, size: 64)
!4631 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !4628, file: !1010, line: 317, baseType: !4622, size: 64, offset: 64)
!4632 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !4628, file: !1010, line: 318, baseType: !4622, size: 64, offset: 128)
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !4628, file: !1010, line: 319, baseType: !4627, size: 64, offset: 192)
!4634 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !4628, file: !1010, line: 320, baseType: !4627, size: 64, offset: 256)
!4635 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !4628, file: !1010, line: 321, baseType: !4627, size: 64, offset: 320)
!4636 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !4628, file: !1010, line: 322, baseType: !4627, size: 64, offset: 384)
!4637 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !4628, file: !1010, line: 323, baseType: !1438, size: 64, offset: 448)
!4638 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4628, file: !1010, line: 324, baseType: !1390, size: 64, offset: 512)
!4639 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !4628, file: !1010, line: 327, baseType: !4640, size: 32, offset: 576)
!4640 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1010, line: 312, baseType: !1017)
!4641 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !4628, file: !1010, line: 330, baseType: !11, size: 32, offset: 608)
!4642 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !4628, file: !1010, line: 334, baseType: !6, size: 32, offset: 640)
!4643 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !4628, file: !1010, line: 336, baseType: !6, size: 32, offset: 672)
!4644 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !4628, file: !1010, line: 338, baseType: !2617, size: 16, offset: 704)
!4645 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !4628, file: !1010, line: 340, baseType: !11, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!4646 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !4628, file: !1010, line: 342, baseType: !11, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !4628, file: !1010, line: 344, baseType: !11, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!4648 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !4623, file: !1010, line: 184, baseType: !4627, size: 64, offset: 128)
!4649 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4623, file: !1010, line: 185, baseType: !4622, size: 64, offset: 192)
!4650 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !4623, file: !1010, line: 186, baseType: !4622, size: 64, offset: 256)
!4651 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !4623, file: !1010, line: 188, baseType: !4622, size: 64, offset: 320)
!4652 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !4623, file: !1010, line: 190, baseType: !4622, size: 64, offset: 384)
!4653 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !4623, file: !1010, line: 192, baseType: !4622, size: 64, offset: 448)
!4654 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !4623, file: !1010, line: 194, baseType: !4622, size: 64, offset: 512)
!4655 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !4623, file: !1010, line: 196, baseType: !4622, size: 64, offset: 576)
!4656 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !4623, file: !1010, line: 197, baseType: !4622, size: 64, offset: 640)
!4657 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !4623, file: !1010, line: 198, baseType: !4622, size: 64, offset: 704)
!4658 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !4623, file: !1010, line: 199, baseType: !4622, size: 64, offset: 768)
!4659 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !4623, file: !1010, line: 202, baseType: !4622, size: 64, offset: 832)
!4660 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !4623, file: !1010, line: 204, baseType: !4622, size: 64, offset: 896)
!4661 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !4623, file: !1010, line: 207, baseType: !1902, size: 64, offset: 960)
!4662 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4623, file: !1010, line: 209, baseType: !1390, size: 64, offset: 1024)
!4663 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !4623, file: !1010, line: 214, baseType: !4664, size: 64, offset: 1088)
!4664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4665, size: 64)
!4665 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1862, line: 177, baseType: !4666)
!4666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1862, line: 177, size: 128, elements: !4667)
!4667 = !{!4668}
!4668 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4666, file: !1862, line: 177, baseType: !4669, size: 128)
!4669 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1862, line: 176, baseType: !4670)
!4670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1862, line: 176, size: 128, elements: !4671)
!4671 = !{!4672, !4673, !4674}
!4672 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4670, file: !1862, line: 176, baseType: !11, size: 32)
!4673 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4670, file: !1862, line: 176, baseType: !11, size: 32, offset: 32)
!4674 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4670, file: !1862, line: 176, baseType: !4675, size: 64, offset: 64)
!4675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4676, size: 64, elements: !1208)
!4676 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1862, line: 174, baseType: !4677)
!4677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4678, size: 64)
!4678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !394, line: 173, size: 1152, elements: !4679)
!4679 = !{!4680, !4681, !4683, !4706, !4707, !4711, !4716, !4717, !4721}
!4680 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4678, file: !394, line: 175, baseType: !2556, size: 640)
!4681 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !4678, file: !394, line: 179, baseType: !4682, size: 64, offset: 640)
!4682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2698, size: 64)
!4683 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !4678, file: !394, line: 182, baseType: !4684, size: 64, offset: 704)
!4684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4685, size: 64)
!4685 = !DISubroutineType(types: !4686)
!4686 = !{null, !4687}
!4687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4688, size: 64)
!4688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !1010, line: 276, size: 192, elements: !4689)
!4689 = !{!4690, !4691, !4705}
!4690 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !4688, file: !1010, line: 278, baseType: !1902, size: 64)
!4691 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !4688, file: !1010, line: 279, baseType: !4692, size: 64, offset: 64)
!4692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4693, size: 64)
!4693 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !1010, line: 272, baseType: !4694)
!4694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !1010, line: 272, size: 128, elements: !4695)
!4695 = !{!4696}
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4694, file: !1010, line: 272, baseType: !4697, size: 128)
!4697 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !1010, line: 270, baseType: !4698)
!4698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !1010, line: 270, size: 128, elements: !4699)
!4699 = !{!4700, !4701, !4702}
!4700 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4698, file: !1010, line: 270, baseType: !11, size: 32)
!4701 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4698, file: !1010, line: 270, baseType: !11, size: 32, offset: 32)
!4702 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4698, file: !1010, line: 270, baseType: !4703, size: 64, offset: 64)
!4703 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4704, size: 64, elements: !1208)
!4704 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !1010, line: 268, baseType: !4622)
!4705 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4688, file: !1010, line: 280, baseType: !1390, size: 64, offset: 128)
!4706 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !4678, file: !394, line: 187, baseType: !4682, size: 64, offset: 768)
!4707 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !4678, file: !394, line: 188, baseType: !4708, size: 64, offset: 832)
!4708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4709, size: 64)
!4709 = !DISubroutineType(types: !4710)
!4710 = !{null, !4622}
!4711 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !4678, file: !394, line: 191, baseType: !4712, size: 64, offset: 896)
!4712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4713, size: 64)
!4713 = !DISubroutineType(types: !4714)
!4714 = !{null, !4622, !4715}
!4715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!4716 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !4678, file: !394, line: 195, baseType: !11, size: 32, offset: 960)
!4717 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !4678, file: !394, line: 196, baseType: !4718, size: 64, offset: 1024)
!4718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4719, size: 64)
!4719 = !DISubroutineType(types: !4720)
!4720 = !{!11, !4622}
!4721 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !4678, file: !394, line: 197, baseType: !4722, size: 64, offset: 1088)
!4722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4723, size: 64)
!4723 = !DISubroutineType(types: !4724)
!4724 = !{null, !4725}
!4725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4726, size: 64)
!4726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1010, line: 358, size: 320, elements: !4727)
!4727 = !{!4728, !4729, !4730, !4731, !4732, !4733, !4734, !4735, !4736, !4737, !4738, !4739}
!4728 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4726, file: !1010, line: 359, baseType: !1109, size: 64)
!4729 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4726, file: !1010, line: 361, baseType: !4725, size: 64, offset: 64)
!4730 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !4726, file: !1010, line: 363, baseType: !4725, size: 64, offset: 128)
!4731 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !4726, file: !1010, line: 366, baseType: !4725, size: 64, offset: 192)
!4732 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !4726, file: !1010, line: 368, baseType: !6, size: 32, offset: 256)
!4733 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !4726, file: !1010, line: 372, baseType: !11, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!4734 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !4726, file: !1010, line: 375, baseType: !11, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!4735 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !4726, file: !1010, line: 378, baseType: !11, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!4736 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4726, file: !1010, line: 380, baseType: !11, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!4737 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !4726, file: !1010, line: 382, baseType: !11, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!4738 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4726, file: !1010, line: 384, baseType: !11, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!4739 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4726, file: !1010, line: 387, baseType: !11, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!4740 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !4623, file: !1010, line: 216, baseType: !4741, size: 320, offset: 1152)
!4741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1010, line: 88, size: 320, elements: !4742)
!4742 = !{!4743, !4746, !4754, !4755, !4756, !4757, !4758, !4759, !4760, !4761}
!4743 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !4741, file: !1010, line: 90, baseType: !4744, size: 64)
!4744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4745, size: 64)
!4745 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1010, line: 51, flags: DIFlagFwdDecl)
!4746 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !4741, file: !1010, line: 92, baseType: !4747, size: 192, offset: 64)
!4747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1010, line: 57, size: 192, elements: !4748)
!4748 = !{!4749, !4750, !4751, !4752, !4753}
!4749 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !4747, file: !1010, line: 60, baseType: !1164, size: 64)
!4750 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !4747, file: !1010, line: 63, baseType: !6, size: 32, offset: 64)
!4751 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !4747, file: !1010, line: 65, baseType: !6, size: 32, offset: 96)
!4752 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !4747, file: !1010, line: 67, baseType: !6, size: 32, offset: 128)
!4753 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !4747, file: !1010, line: 69, baseType: !6, size: 32, offset: 160)
!4754 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !4741, file: !1010, line: 96, baseType: !11, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!4755 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4741, file: !1010, line: 99, baseType: !11, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!4756 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4741, file: !1010, line: 102, baseType: !11, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!4757 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !4741, file: !1010, line: 105, baseType: !11, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!4758 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !4741, file: !1010, line: 108, baseType: !11, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!4759 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !4741, file: !1010, line: 112, baseType: !11, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!4760 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !4741, file: !1010, line: 116, baseType: !11, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!4761 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !4741, file: !1010, line: 120, baseType: !11, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!4762 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !4623, file: !1010, line: 217, baseType: !4763, size: 320, offset: 1472)
!4763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1010, line: 126, size: 320, elements: !4764)
!4764 = !{!4765, !4766, !4767, !4768, !4769, !4770, !4771}
!4765 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !4763, file: !1010, line: 128, baseType: !1164, size: 64)
!4766 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !4763, file: !1010, line: 130, baseType: !1164, size: 64, offset: 64)
!4767 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !4763, file: !1010, line: 134, baseType: !4622, size: 64, offset: 128)
!4768 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !4763, file: !1010, line: 137, baseType: !6, size: 32, offset: 192)
!4769 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4763, file: !1010, line: 138, baseType: !6, size: 32, offset: 224)
!4770 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !4763, file: !1010, line: 141, baseType: !6, size: 32, offset: 256)
!4771 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !4763, file: !1010, line: 144, baseType: !1227, size: 8, offset: 288)
!4772 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !4623, file: !1010, line: 218, baseType: !4773, size: 32, offset: 1792)
!4773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1010, line: 150, size: 32, elements: !4774)
!4774 = !{!4775}
!4775 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !4773, file: !1010, line: 151, baseType: !11, size: 32)
!4776 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !4623, file: !1010, line: 219, baseType: !4777, size: 192, offset: 1856)
!4777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1010, line: 171, size: 192, elements: !4778)
!4778 = !{!4779, !4800, !4801}
!4779 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !4777, file: !1010, line: 173, baseType: !4780, size: 64)
!4780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4781, size: 64)
!4781 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1010, line: 169, baseType: !4782)
!4782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1010, line: 169, size: 128, elements: !4783)
!4783 = !{!4784}
!4784 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4782, file: !1010, line: 169, baseType: !4785, size: 128)
!4785 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1010, line: 168, baseType: !4786)
!4786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1010, line: 168, size: 128, elements: !4787)
!4787 = !{!4788, !4789, !4790}
!4788 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4786, file: !1010, line: 168, baseType: !11, size: 32)
!4789 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4786, file: !1010, line: 168, baseType: !11, size: 32, offset: 32)
!4790 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4786, file: !1010, line: 168, baseType: !4791, size: 64, offset: 64)
!4791 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4792, size: 64, elements: !1208)
!4792 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1010, line: 167, baseType: !4793)
!4793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4794, size: 64)
!4794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1010, line: 156, size: 192, elements: !4795)
!4795 = !{!4796, !4797, !4798, !4799}
!4796 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !4794, file: !1010, line: 159, baseType: !1109, size: 64)
!4797 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !4794, file: !1010, line: 161, baseType: !1109, size: 64, offset: 64)
!4798 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !4794, file: !1010, line: 163, baseType: !1227, size: 8, offset: 128)
!4799 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !4794, file: !1010, line: 165, baseType: !1227, size: 8, offset: 136)
!4800 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !4777, file: !1010, line: 174, baseType: !1985, size: 64, offset: 64)
!4801 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !4777, file: !1010, line: 175, baseType: !1985, size: 64, offset: 128)
!4802 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !4623, file: !1010, line: 220, baseType: !4803, size: 256, offset: 2048)
!4803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1010, line: 74, size: 256, elements: !4804)
!4804 = !{!4805, !4806, !4807, !4808, !4809, !4810}
!4805 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !4803, file: !1010, line: 76, baseType: !1164, size: 64)
!4806 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !4803, file: !1010, line: 77, baseType: !1164, size: 64, offset: 64)
!4807 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4803, file: !1010, line: 78, baseType: !1109, size: 64, offset: 128)
!4808 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !4803, file: !1010, line: 79, baseType: !1227, size: 8, offset: 192)
!4809 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !4803, file: !1010, line: 80, baseType: !1227, size: 8, offset: 200)
!4810 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !4803, file: !1010, line: 82, baseType: !1227, size: 8, offset: 208)
!4811 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4623, file: !1010, line: 223, baseType: !1650, size: 64, offset: 2304)
!4812 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !4623, file: !1010, line: 225, baseType: !6, size: 32, offset: 2368)
!4813 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !4623, file: !1010, line: 227, baseType: !6, size: 32, offset: 2400)
!4814 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !4623, file: !1010, line: 231, baseType: !6, size: 32, offset: 2432)
!4815 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !4623, file: !1010, line: 238, baseType: !11, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!4816 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !4623, file: !1010, line: 241, baseType: !11, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!4817 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !4623, file: !1010, line: 244, baseType: !11, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!4818 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !4623, file: !1010, line: 251, baseType: !11, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!4819 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !4623, file: !1010, line: 253, baseType: !11, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!4820 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !4623, file: !1010, line: 256, baseType: !11, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!4821 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !4623, file: !1010, line: 258, baseType: !11, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!4822 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4623, file: !1010, line: 260, baseType: !11, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!4823 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !4623, file: !1010, line: 262, baseType: !11, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!4824 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !4623, file: !1010, line: 265, baseType: !11, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!4825 = !DILocation(line: 1897, column: 27, scope: !4621)
!4826 = !DILocation(line: 1897, column: 47, scope: !4621)
!4827 = !DILocation(line: 1897, column: 34, scope: !4621)
!4828 = !DILocalVariable(name: "e", scope: !4621, file: !3, line: 1898, type: !4627)
!4829 = !DILocation(line: 1898, column: 27, scope: !4621)
!4830 = !DILocation(line: 1899, column: 16, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 1899, column: 7)
!4832 = !DILocation(line: 1899, column: 22, scope: !4831)
!4833 = !DILocation(line: 1899, column: 14, scope: !4831)
!4834 = !DILocation(line: 1899, column: 12, scope: !4831)
!4835 = !DILocation(line: 1899, column: 31, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 1899, column: 7)
!4837 = !DILocation(line: 1899, column: 7, scope: !4831)
!4838 = !DILocation(line: 1900, column: 9, scope: !4836)
!4839 = !DILocation(line: 1900, column: 12, scope: !4836)
!4840 = !DILocation(line: 1900, column: 31, scope: !4836)
!4841 = !DILocation(line: 1899, column: 38, scope: !4836)
!4842 = !DILocation(line: 1899, column: 41, scope: !4836)
!4843 = !DILocation(line: 1899, column: 36, scope: !4836)
!4844 = !DILocation(line: 1899, column: 7, scope: !4836)
!4845 = distinct !{!4845, !4837, !4846}
!4846 = !DILocation(line: 1900, column: 33, scope: !4831)
!4847 = !DILocation(line: 1901, column: 32, scope: !4621)
!4848 = !DILocation(line: 1901, column: 7, scope: !4621)
!4849 = !DILocation(line: 1903, column: 11, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 1903, column: 11)
!4851 = !DILocation(line: 1903, column: 11, scope: !4621)
!4852 = !DILocation(line: 1904, column: 11, scope: !4850)
!4853 = !DILocation(line: 1905, column: 4, scope: !4850)
!4854 = !DILocation(line: 1904, column: 2, scope: !4850)
!4855 = !DILocation(line: 1906, column: 5, scope: !4621)
!4856 = !DILocation(line: 1907, column: 3, scope: !4542)
!4857 = !DILocation(line: 1908, column: 1, scope: !4542)
!4858 = distinct !DISubprogram(name: "expand_builtin_eh_pointer", scope: !3, file: !3, line: 1956, type: !4859, scopeLine: 1957, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4859 = !DISubroutineType(types: !4860)
!4860 = !{!1285, !1109}
!4861 = !DILocalVariable(name: "exp", arg: 1, scope: !4858, file: !3, line: 1956, type: !1109)
!4862 = !DILocation(line: 1956, column: 33, scope: !4858)
!4863 = !DILocalVariable(name: "region", scope: !4858, file: !3, line: 1958, type: !1087)
!4864 = !DILocation(line: 1958, column: 13, scope: !4858)
!4865 = !DILocation(line: 1959, column: 33, scope: !4858)
!4866 = !DILocation(line: 1959, column: 7, scope: !4858)
!4867 = !DILocation(line: 1960, column: 7, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 1960, column: 7)
!4869 = !DILocation(line: 1960, column: 15, scope: !4868)
!4870 = !DILocation(line: 1960, column: 27, scope: !4868)
!4871 = !DILocation(line: 1960, column: 7, scope: !4858)
!4872 = !DILocation(line: 1961, column: 40, scope: !4868)
!4873 = !DILocation(line: 1961, column: 27, scope: !4868)
!4874 = !DILocation(line: 1961, column: 5, scope: !4868)
!4875 = !DILocation(line: 1961, column: 13, scope: !4868)
!4876 = !DILocation(line: 1961, column: 25, scope: !4868)
!4877 = !DILocation(line: 1962, column: 10, scope: !4858)
!4878 = !DILocation(line: 1962, column: 18, scope: !4858)
!4879 = !DILocation(line: 1962, column: 3, scope: !4858)
!4880 = distinct !DISubprogram(name: "expand_builtin_eh_common", scope: !3, file: !3, line: 1936, type: !4881, scopeLine: 1937, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4881 = !DISubroutineType(types: !4882)
!4882 = !{!1087, !1109}
!4883 = !DILocalVariable(name: "region_nr_t", arg: 1, scope: !4880, file: !3, line: 1936, type: !1109)
!4884 = !DILocation(line: 1936, column: 32, scope: !4880)
!4885 = !DILocalVariable(name: "region_nr", scope: !4880, file: !3, line: 1938, type: !1164)
!4886 = !DILocation(line: 1938, column: 17, scope: !4880)
!4887 = !DILocalVariable(name: "region", scope: !4880, file: !3, line: 1939, type: !1087)
!4888 = !DILocation(line: 1939, column: 13, scope: !4880)
!4889 = !DILocation(line: 1941, column: 3, scope: !4880)
!4890 = !DILocation(line: 1942, column: 29, scope: !4880)
!4891 = !DILocation(line: 1942, column: 15, scope: !4880)
!4892 = !DILocation(line: 1942, column: 13, scope: !4880)
!4893 = !DILocation(line: 1944, column: 12, scope: !4880)
!4894 = !DILocation(line: 1944, column: 10, scope: !4880)
!4895 = !DILocation(line: 1948, column: 3, scope: !4880)
!4896 = !DILocation(line: 1950, column: 10, scope: !4880)
!4897 = !DILocation(line: 1950, column: 3, scope: !4880)
!4898 = distinct !DISubprogram(name: "expand_builtin_eh_filter", scope: !3, file: !3, line: 1968, type: !4859, scopeLine: 1969, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4899 = !DILocalVariable(name: "exp", arg: 1, scope: !4898, file: !3, line: 1968, type: !1109)
!4900 = !DILocation(line: 1968, column: 32, scope: !4898)
!4901 = !DILocalVariable(name: "region", scope: !4898, file: !3, line: 1970, type: !1087)
!4902 = !DILocation(line: 1970, column: 13, scope: !4898)
!4903 = !DILocation(line: 1971, column: 33, scope: !4898)
!4904 = !DILocation(line: 1971, column: 7, scope: !4898)
!4905 = !DILocation(line: 1972, column: 7, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 1972, column: 7)
!4907 = !DILocation(line: 1972, column: 15, scope: !4906)
!4908 = !DILocation(line: 1972, column: 26, scope: !4906)
!4909 = !DILocation(line: 1972, column: 7, scope: !4898)
!4910 = !DILocation(line: 1973, column: 47, scope: !4906)
!4911 = !DILocation(line: 1973, column: 39, scope: !4906)
!4912 = !DILocation(line: 1973, column: 26, scope: !4906)
!4913 = !DILocation(line: 1973, column: 5, scope: !4906)
!4914 = !DILocation(line: 1973, column: 13, scope: !4906)
!4915 = !DILocation(line: 1973, column: 24, scope: !4906)
!4916 = !DILocation(line: 1974, column: 10, scope: !4898)
!4917 = !DILocation(line: 1974, column: 18, scope: !4898)
!4918 = !DILocation(line: 1974, column: 3, scope: !4898)
!4919 = distinct !DISubprogram(name: "expand_builtin_eh_copy_values", scope: !3, file: !3, line: 1981, type: !4859, scopeLine: 1982, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4920 = !DILocalVariable(name: "exp", arg: 1, scope: !4919, file: !3, line: 1981, type: !1109)
!4921 = !DILocation(line: 1981, column: 37, scope: !4919)
!4922 = !DILocalVariable(name: "dst", scope: !4919, file: !3, line: 1983, type: !1087)
!4923 = !DILocation(line: 1983, column: 13, scope: !4919)
!4924 = !DILocation(line: 1984, column: 33, scope: !4919)
!4925 = !DILocation(line: 1984, column: 7, scope: !4919)
!4926 = !DILocalVariable(name: "src", scope: !4919, file: !3, line: 1985, type: !1087)
!4927 = !DILocation(line: 1985, column: 13, scope: !4919)
!4928 = !DILocation(line: 1986, column: 33, scope: !4919)
!4929 = !DILocation(line: 1986, column: 7, scope: !4919)
!4930 = !DILocalVariable(name: "fmode", scope: !4919, file: !3, line: 1987, type: !17)
!4931 = !DILocation(line: 1987, column: 21, scope: !4919)
!4932 = !DILocation(line: 1987, column: 37, scope: !4919)
!4933 = !DILocation(line: 1987, column: 29, scope: !4919)
!4934 = !DILocation(line: 1989, column: 7, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1989, column: 7)
!4936 = !DILocation(line: 1989, column: 12, scope: !4935)
!4937 = !DILocation(line: 1989, column: 24, scope: !4935)
!4938 = !DILocation(line: 1989, column: 7, scope: !4919)
!4939 = !DILocation(line: 1990, column: 37, scope: !4935)
!4940 = !DILocation(line: 1990, column: 24, scope: !4935)
!4941 = !DILocation(line: 1990, column: 5, scope: !4935)
!4942 = !DILocation(line: 1990, column: 10, scope: !4935)
!4943 = !DILocation(line: 1990, column: 22, scope: !4935)
!4944 = !DILocation(line: 1991, column: 7, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1991, column: 7)
!4946 = !DILocation(line: 1991, column: 12, scope: !4945)
!4947 = !DILocation(line: 1991, column: 24, scope: !4945)
!4948 = !DILocation(line: 1991, column: 7, scope: !4919)
!4949 = !DILocation(line: 1992, column: 37, scope: !4945)
!4950 = !DILocation(line: 1992, column: 24, scope: !4945)
!4951 = !DILocation(line: 1992, column: 5, scope: !4945)
!4952 = !DILocation(line: 1992, column: 10, scope: !4945)
!4953 = !DILocation(line: 1992, column: 22, scope: !4945)
!4954 = !DILocation(line: 1994, column: 7, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1994, column: 7)
!4956 = !DILocation(line: 1994, column: 12, scope: !4955)
!4957 = !DILocation(line: 1994, column: 23, scope: !4955)
!4958 = !DILocation(line: 1994, column: 7, scope: !4919)
!4959 = !DILocation(line: 1995, column: 36, scope: !4955)
!4960 = !DILocation(line: 1995, column: 23, scope: !4955)
!4961 = !DILocation(line: 1995, column: 5, scope: !4955)
!4962 = !DILocation(line: 1995, column: 10, scope: !4955)
!4963 = !DILocation(line: 1995, column: 21, scope: !4955)
!4964 = !DILocation(line: 1996, column: 7, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1996, column: 7)
!4966 = !DILocation(line: 1996, column: 12, scope: !4965)
!4967 = !DILocation(line: 1996, column: 23, scope: !4965)
!4968 = !DILocation(line: 1996, column: 7, scope: !4919)
!4969 = !DILocation(line: 1997, column: 36, scope: !4965)
!4970 = !DILocation(line: 1997, column: 23, scope: !4965)
!4971 = !DILocation(line: 1997, column: 5, scope: !4965)
!4972 = !DILocation(line: 1997, column: 10, scope: !4965)
!4973 = !DILocation(line: 1997, column: 21, scope: !4965)
!4974 = !DILocation(line: 1999, column: 19, scope: !4919)
!4975 = !DILocation(line: 1999, column: 24, scope: !4919)
!4976 = !DILocation(line: 1999, column: 37, scope: !4919)
!4977 = !DILocation(line: 1999, column: 42, scope: !4919)
!4978 = !DILocation(line: 1999, column: 3, scope: !4919)
!4979 = !DILocation(line: 2000, column: 19, scope: !4919)
!4980 = !DILocation(line: 2000, column: 24, scope: !4919)
!4981 = !DILocation(line: 2000, column: 36, scope: !4919)
!4982 = !DILocation(line: 2000, column: 41, scope: !4919)
!4983 = !DILocation(line: 2000, column: 3, scope: !4919)
!4984 = !DILocation(line: 2002, column: 10, scope: !4919)
!4985 = !DILocation(line: 2002, column: 3, scope: !4919)
!4986 = distinct !DISubprogram(name: "expand_builtin_unwind_init", scope: !3, file: !3, line: 2009, type: !2698, scopeLine: 2010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4987 = !DILocation(line: 2013, column: 29, scope: !4986)
!4988 = !DILocation(line: 2016, column: 3, scope: !4986)
!4989 = !DILocation(line: 2018, column: 1, scope: !4986)
!4990 = distinct !DISubprogram(name: "expand_builtin_eh_return_data_regno", scope: !3, file: !3, line: 2025, type: !4859, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!4991 = !DILocalVariable(name: "exp", arg: 1, scope: !4990, file: !3, line: 2025, type: !1109)
!4992 = !DILocation(line: 2025, column: 43, scope: !4990)
!4993 = !DILocalVariable(name: "which", scope: !4990, file: !3, line: 2027, type: !1109)
!4994 = !DILocation(line: 2027, column: 8, scope: !4990)
!4995 = !DILocation(line: 2027, column: 16, scope: !4990)
!4996 = !DILocalVariable(name: "iwhich", scope: !4990, file: !3, line: 2028, type: !1162)
!4997 = !DILocation(line: 2028, column: 26, scope: !4990)
!4998 = !DILocation(line: 2030, column: 7, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 2030, column: 7)
!5000 = !DILocation(line: 2030, column: 25, scope: !4999)
!5001 = !DILocation(line: 2030, column: 7, scope: !4990)
!5002 = !DILocation(line: 2032, column: 7, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 2031, column: 5)
!5004 = !DILocation(line: 2033, column: 14, scope: !5003)
!5005 = !DILocation(line: 2033, column: 7, scope: !5003)
!5006 = !DILocation(line: 2036, column: 26, scope: !4990)
!5007 = !DILocation(line: 2036, column: 12, scope: !4990)
!5008 = !DILocation(line: 2036, column: 10, scope: !4990)
!5009 = !DILocation(line: 2037, column: 12, scope: !4990)
!5010 = !DILocation(line: 2037, column: 10, scope: !4990)
!5011 = !DILocation(line: 2038, column: 7, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 2038, column: 7)
!5013 = !DILocation(line: 2038, column: 14, scope: !5012)
!5014 = !DILocation(line: 2038, column: 7, scope: !4990)
!5015 = !DILocation(line: 2039, column: 12, scope: !5012)
!5016 = !DILocation(line: 2039, column: 5, scope: !5012)
!5017 = !DILocation(line: 2044, column: 12, scope: !4990)
!5018 = !DILocation(line: 2044, column: 10, scope: !4990)
!5019 = !DILocation(line: 2047, column: 10, scope: !4990)
!5020 = !DILocation(line: 2047, column: 3, scope: !4990)
!5021 = !DILocation(line: 2048, column: 1, scope: !4990)
!5022 = distinct !DISubprogram(name: "expand_builtin_extract_return_addr", scope: !3, file: !3, line: 2054, type: !4859, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5023 = !DILocalVariable(name: "addr_tree", arg: 1, scope: !5022, file: !3, line: 2054, type: !1109)
!5024 = !DILocation(line: 2054, column: 42, scope: !5022)
!5025 = !DILocalVariable(name: "addr", scope: !5022, file: !3, line: 2056, type: !1285)
!5026 = !DILocation(line: 2056, column: 7, scope: !5022)
!5027 = !DILocation(line: 2056, column: 27, scope: !5022)
!5028 = !DILocation(line: 2056, column: 14, scope: !5022)
!5029 = !DILocation(line: 2058, column: 7, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5022, file: !3, line: 2058, column: 7)
!5031 = !DILocation(line: 2058, column: 23, scope: !5030)
!5032 = !DILocation(line: 2059, column: 7, scope: !5030)
!5033 = !DILocation(line: 2059, column: 10, scope: !5030)
!5034 = !DILocation(line: 2059, column: 26, scope: !5030)
!5035 = !DILocation(line: 2058, column: 7, scope: !5022)
!5036 = !DILocation(line: 2064, column: 38, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 2060, column: 5)
!5038 = !DILocation(line: 2064, column: 14, scope: !5037)
!5039 = !DILocation(line: 2064, column: 12, scope: !5037)
!5040 = !DILocation(line: 2066, column: 5, scope: !5037)
!5041 = !DILocation(line: 2078, column: 10, scope: !5022)
!5042 = !DILocation(line: 2078, column: 3, scope: !5022)
!5043 = distinct !DISubprogram(name: "expand_expr", scope: !754, file: !754, line: 555, type: !5044, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5044 = !DISubroutineType(types: !5045)
!5045 = !{!1285, !1109, !1285, !17, !753}
!5046 = !DILocalVariable(name: "exp", arg: 1, scope: !5043, file: !754, line: 555, type: !1109)
!5047 = !DILocation(line: 555, column: 19, scope: !5043)
!5048 = !DILocalVariable(name: "target", arg: 2, scope: !5043, file: !754, line: 555, type: !1285)
!5049 = !DILocation(line: 555, column: 28, scope: !5043)
!5050 = !DILocalVariable(name: "mode", arg: 3, scope: !5043, file: !754, line: 555, type: !17)
!5051 = !DILocation(line: 555, column: 54, scope: !5043)
!5052 = !DILocalVariable(name: "modifier", arg: 4, scope: !5043, file: !754, line: 556, type: !753)
!5053 = !DILocation(line: 556, column: 28, scope: !5043)
!5054 = !DILocation(line: 558, column: 28, scope: !5043)
!5055 = !DILocation(line: 558, column: 33, scope: !5043)
!5056 = !DILocation(line: 558, column: 41, scope: !5043)
!5057 = !DILocation(line: 558, column: 47, scope: !5043)
!5058 = !DILocation(line: 558, column: 10, scope: !5043)
!5059 = !DILocation(line: 558, column: 3, scope: !5043)
!5060 = distinct !DISubprogram(name: "expand_builtin_frob_return_addr", scope: !3, file: !3, line: 2086, type: !4859, scopeLine: 2087, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5061 = !DILocalVariable(name: "addr_tree", arg: 1, scope: !5060, file: !3, line: 2086, type: !1109)
!5062 = !DILocation(line: 2086, column: 39, scope: !5060)
!5063 = !DILocalVariable(name: "addr", scope: !5060, file: !3, line: 2088, type: !1285)
!5064 = !DILocation(line: 2088, column: 7, scope: !5060)
!5065 = !DILocation(line: 2088, column: 27, scope: !5060)
!5066 = !DILocation(line: 2088, column: 48, scope: !5060)
!5067 = !DILocation(line: 2088, column: 14, scope: !5060)
!5068 = !DILocation(line: 2090, column: 10, scope: !5060)
!5069 = !DILocation(line: 2090, column: 8, scope: !5060)
!5070 = !DILocation(line: 2097, column: 10, scope: !5060)
!5071 = !DILocation(line: 2097, column: 3, scope: !5060)
!5072 = distinct !DISubprogram(name: "expand_builtin_eh_return", scope: !3, file: !3, line: 2104, type: !5073, scopeLine: 2106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5073 = !DISubroutineType(types: !5074)
!5074 = !{null, !1109, !1109}
!5075 = !DILocalVariable(name: "stackadj_tree", arg: 1, scope: !5072, file: !3, line: 2104, type: !1109)
!5076 = !DILocation(line: 2104, column: 32, scope: !5072)
!5077 = !DILocalVariable(name: "handler_tree", arg: 2, scope: !5072, file: !3, line: 2105, type: !1109)
!5078 = !DILocation(line: 2105, column: 11, scope: !5072)
!5079 = !DILocalVariable(name: "tmp", scope: !5072, file: !3, line: 2107, type: !1285)
!5080 = !DILocation(line: 2107, column: 7, scope: !5072)
!5081 = !DILocation(line: 2110, column: 22, scope: !5072)
!5082 = !DILocation(line: 2110, column: 46, scope: !5072)
!5083 = !DILocation(line: 2110, column: 9, scope: !5072)
!5084 = !DILocation(line: 2110, column: 7, scope: !5072)
!5085 = !DILocation(line: 2112, column: 9, scope: !5072)
!5086 = !DILocation(line: 2112, column: 7, scope: !5072)
!5087 = !DILocation(line: 2113, column: 17, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2113, column: 7)
!5089 = !DILocation(line: 2113, column: 8, scope: !5088)
!5090 = !DILocation(line: 2113, column: 7, scope: !5072)
!5091 = !DILocation(line: 2114, column: 42, scope: !5088)
!5092 = !DILocation(line: 2114, column: 29, scope: !5088)
!5093 = !DILocation(line: 2114, column: 27, scope: !5088)
!5094 = !DILocation(line: 2114, column: 5, scope: !5088)
!5095 = !DILocation(line: 2115, column: 12, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 2115, column: 12)
!5097 = !DILocation(line: 2115, column: 28, scope: !5096)
!5098 = !DILocation(line: 2115, column: 16, scope: !5096)
!5099 = !DILocation(line: 2115, column: 12, scope: !5088)
!5100 = !DILocation(line: 2116, column: 30, scope: !5096)
!5101 = !DILocation(line: 2116, column: 44, scope: !5096)
!5102 = !DILocation(line: 2116, column: 5, scope: !5096)
!5103 = !DILocation(line: 2119, column: 22, scope: !5072)
!5104 = !DILocation(line: 2119, column: 45, scope: !5072)
!5105 = !DILocation(line: 2119, column: 9, scope: !5072)
!5106 = !DILocation(line: 2119, column: 7, scope: !5072)
!5107 = !DILocation(line: 2121, column: 9, scope: !5072)
!5108 = !DILocation(line: 2121, column: 7, scope: !5072)
!5109 = !DILocation(line: 2122, column: 17, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2122, column: 7)
!5111 = !DILocation(line: 2122, column: 8, scope: !5110)
!5112 = !DILocation(line: 2122, column: 7, scope: !5072)
!5113 = !DILocation(line: 2123, column: 41, scope: !5110)
!5114 = !DILocation(line: 2123, column: 28, scope: !5110)
!5115 = !DILocation(line: 2123, column: 26, scope: !5110)
!5116 = !DILocation(line: 2123, column: 5, scope: !5110)
!5117 = !DILocation(line: 2124, column: 12, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 2124, column: 12)
!5119 = !DILocation(line: 2124, column: 28, scope: !5118)
!5120 = !DILocation(line: 2124, column: 16, scope: !5118)
!5121 = !DILocation(line: 2124, column: 12, scope: !5110)
!5122 = !DILocation(line: 2125, column: 30, scope: !5118)
!5123 = !DILocation(line: 2125, column: 43, scope: !5118)
!5124 = !DILocation(line: 2125, column: 5, scope: !5118)
!5125 = !DILocation(line: 2127, column: 17, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2127, column: 7)
!5127 = !DILocation(line: 2127, column: 8, scope: !5126)
!5128 = !DILocation(line: 2127, column: 7, scope: !5072)
!5129 = !DILocation(line: 2128, column: 26, scope: !5126)
!5130 = !DILocation(line: 2128, column: 24, scope: !5126)
!5131 = !DILocation(line: 2128, column: 5, scope: !5126)
!5132 = !DILocation(line: 2129, column: 23, scope: !5072)
!5133 = !DILocation(line: 2129, column: 3, scope: !5072)
!5134 = !DILocation(line: 2130, column: 1, scope: !5072)
!5135 = distinct !DISubprogram(name: "expand_eh_return", scope: !3, file: !3, line: 2137, type: !2698, scopeLine: 2138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5136 = !DILocalVariable(name: "around_label", scope: !5135, file: !3, line: 2139, type: !1285)
!5137 = !DILocation(line: 2139, column: 7, scope: !5135)
!5138 = !DILocation(line: 2141, column: 18, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 2141, column: 7)
!5140 = !DILocation(line: 2141, column: 9, scope: !5139)
!5141 = !DILocation(line: 2141, column: 7, scope: !5135)
!5142 = !DILocation(line: 2142, column: 5, scope: !5139)
!5143 = !DILocation(line: 2144, column: 25, scope: !5135)
!5144 = !DILocation(line: 2147, column: 19, scope: !5135)
!5145 = !DILocation(line: 2147, column: 43, scope: !5135)
!5146 = !DILocation(line: 2147, column: 3, scope: !5135)
!5147 = !DILocation(line: 2150, column: 18, scope: !5135)
!5148 = !DILocation(line: 2150, column: 16, scope: !5135)
!5149 = !DILocation(line: 2151, column: 14, scope: !5135)
!5150 = !DILocation(line: 2151, column: 3, scope: !5135)
!5151 = !DILocation(line: 2153, column: 24, scope: !5135)
!5152 = !DILocation(line: 2153, column: 3, scope: !5135)
!5153 = !DILocation(line: 2154, column: 3, scope: !5135)
!5154 = !DILocation(line: 2157, column: 19, scope: !5135)
!5155 = !DILocation(line: 2157, column: 52, scope: !5135)
!5156 = !DILocation(line: 2157, column: 3, scope: !5135)
!5157 = !DILocation(line: 2162, column: 40, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 2161, column: 7)
!5159 = !DILocation(line: 2162, column: 16, scope: !5158)
!5160 = !DILocation(line: 2162, column: 5, scope: !5158)
!5161 = !DILocation(line: 2173, column: 15, scope: !5135)
!5162 = !DILocation(line: 2173, column: 3, scope: !5135)
!5163 = !DILocation(line: 2174, column: 1, scope: !5135)
!5164 = distinct !DISubprogram(name: "expand_builtin_extend_pointer", scope: !3, file: !3, line: 2180, type: !4859, scopeLine: 2181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5165 = !DILocalVariable(name: "addr_tree", arg: 1, scope: !5164, file: !3, line: 2180, type: !1109)
!5166 = !DILocation(line: 2180, column: 37, scope: !5164)
!5167 = !DILocalVariable(name: "addr", scope: !5164, file: !3, line: 2182, type: !1285)
!5168 = !DILocation(line: 2182, column: 7, scope: !5164)
!5169 = !DILocation(line: 2182, column: 27, scope: !5164)
!5170 = !DILocation(line: 2182, column: 48, scope: !5164)
!5171 = !DILocation(line: 2182, column: 14, scope: !5164)
!5172 = !DILocalVariable(name: "extend", scope: !5164, file: !3, line: 2183, type: !6)
!5173 = !DILocation(line: 2183, column: 7, scope: !5164)
!5174 = !DILocation(line: 2190, column: 10, scope: !5164)
!5175 = !DILocation(line: 2193, column: 33, scope: !5164)
!5176 = !DILocation(line: 2193, column: 25, scope: !5164)
!5177 = !DILocation(line: 2193, column: 54, scope: !5164)
!5178 = !DILocation(line: 2193, column: 64, scope: !5164)
!5179 = !DILocation(line: 2193, column: 70, scope: !5164)
!5180 = !DILocation(line: 2193, column: 10, scope: !5164)
!5181 = !DILocation(line: 2193, column: 3, scope: !5164)
!5182 = distinct !DISubprogram(name: "gate_convert_to_eh_region_ranges", scope: !3, file: !3, line: 2655, type: !2562, scopeLine: 2656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5183 = !DILocation(line: 2658, column: 37, scope: !5182)
!5184 = !DILocation(line: 2658, column: 43, scope: !5182)
!5185 = !DILocation(line: 2658, column: 47, scope: !5182)
!5186 = !DILocation(line: 2658, column: 59, scope: !5182)
!5187 = !DILocation(line: 2658, column: 10, scope: !5182)
!5188 = !DILocation(line: 2658, column: 3, scope: !5182)
!5189 = distinct !DISubprogram(name: "convert_to_eh_region_ranges", scope: !3, file: !3, line: 2392, type: !2566, scopeLine: 2393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5190 = !DILocalVariable(name: "insn", scope: !5189, file: !3, line: 2394, type: !1285)
!5191 = !DILocation(line: 2394, column: 7, scope: !5189)
!5192 = !DILocalVariable(name: "iter", scope: !5189, file: !3, line: 2394, type: !1285)
!5193 = !DILocation(line: 2394, column: 13, scope: !5189)
!5194 = !DILocalVariable(name: "note", scope: !5189, file: !3, line: 2394, type: !1285)
!5195 = !DILocation(line: 2394, column: 19, scope: !5189)
!5196 = !DILocalVariable(name: "ar_hash", scope: !5189, file: !3, line: 2395, type: !1902)
!5197 = !DILocation(line: 2395, column: 10, scope: !5189)
!5198 = !DILocalVariable(name: "last_action", scope: !5189, file: !3, line: 2396, type: !6)
!5199 = !DILocation(line: 2396, column: 7, scope: !5189)
!5200 = !DILocalVariable(name: "last_action_insn", scope: !5189, file: !3, line: 2397, type: !1285)
!5201 = !DILocation(line: 2397, column: 7, scope: !5189)
!5202 = !DILocalVariable(name: "last_landing_pad", scope: !5189, file: !3, line: 2398, type: !1285)
!5203 = !DILocation(line: 2398, column: 7, scope: !5189)
!5204 = !DILocalVariable(name: "first_no_action_insn", scope: !5189, file: !3, line: 2399, type: !1285)
!5205 = !DILocation(line: 2399, column: 7, scope: !5189)
!5206 = !DILocalVariable(name: "call_site", scope: !5189, file: !3, line: 2400, type: !6)
!5207 = !DILocation(line: 2400, column: 7, scope: !5189)
!5208 = !DILocalVariable(name: "cur_sec", scope: !5189, file: !3, line: 2401, type: !6)
!5209 = !DILocation(line: 2401, column: 7, scope: !5189)
!5210 = !DILocalVariable(name: "section_switch_note", scope: !5189, file: !3, line: 2402, type: !1285)
!5211 = !DILocation(line: 2402, column: 7, scope: !5189)
!5212 = !DILocalVariable(name: "first_no_action_insn_before_switch", scope: !5189, file: !3, line: 2403, type: !1285)
!5213 = !DILocation(line: 2403, column: 7, scope: !5189)
!5214 = !DILocalVariable(name: "last_no_action_insn_before_switch", scope: !5189, file: !3, line: 2404, type: !1285)
!5215 = !DILocation(line: 2404, column: 7, scope: !5189)
!5216 = !DILocalVariable(name: "pad_map", scope: !5189, file: !3, line: 2405, type: !2527)
!5217 = !DILocation(line: 2405, column: 8, scope: !5189)
!5218 = !DILocalVariable(name: "pad_loc", scope: !5189, file: !3, line: 2406, type: !3380)
!5219 = !DILocation(line: 2406, column: 11, scope: !5189)
!5220 = !DILocalVariable(name: "min_labelno", scope: !5189, file: !3, line: 2407, type: !6)
!5221 = !DILocation(line: 2407, column: 7, scope: !5189)
!5222 = !DILocalVariable(name: "max_labelno", scope: !5189, file: !3, line: 2407, type: !6)
!5223 = !DILocation(line: 2407, column: 24, scope: !5189)
!5224 = !DILocalVariable(name: "saved_call_site_base", scope: !5189, file: !3, line: 2408, type: !6)
!5225 = !DILocation(line: 2408, column: 7, scope: !5189)
!5226 = !DILocation(line: 2408, column: 30, scope: !5189)
!5227 = !DILocation(line: 2410, column: 33, scope: !5189)
!5228 = !DILocation(line: 2410, column: 31, scope: !5189)
!5229 = !DILocation(line: 2412, column: 13, scope: !5189)
!5230 = !DILocation(line: 2412, column: 11, scope: !5189)
!5231 = !DILocation(line: 2414, column: 15, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5189, file: !3, line: 2414, column: 3)
!5233 = !DILocation(line: 2414, column: 13, scope: !5232)
!5234 = !DILocation(line: 2414, column: 8, scope: !5232)
!5235 = !DILocation(line: 2414, column: 29, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 2414, column: 3)
!5237 = !DILocation(line: 2414, column: 3, scope: !5232)
!5238 = !DILocation(line: 2415, column: 9, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 2415, column: 9)
!5240 = !DILocation(line: 2415, column: 9, scope: !5236)
!5241 = !DILocalVariable(name: "lp", scope: !5242, file: !3, line: 2417, type: !2489)
!5242 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 2416, column: 7)
!5243 = !DILocation(line: 2417, column: 17, scope: !5242)
!5244 = !DILocalVariable(name: "region", scope: !5242, file: !3, line: 2418, type: !1087)
!5245 = !DILocation(line: 2418, column: 12, scope: !5242)
!5246 = !DILocalVariable(name: "nothrow", scope: !5242, file: !3, line: 2419, type: !1227)
!5247 = !DILocation(line: 2419, column: 7, scope: !5242)
!5248 = !DILocalVariable(name: "this_action", scope: !5242, file: !3, line: 2420, type: !6)
!5249 = !DILocation(line: 2420, column: 6, scope: !5242)
!5250 = !DILocalVariable(name: "this_landing_pad", scope: !5242, file: !3, line: 2421, type: !1285)
!5251 = !DILocation(line: 2421, column: 6, scope: !5242)
!5252 = !DILocation(line: 2423, column: 9, scope: !5242)
!5253 = !DILocation(line: 2423, column: 7, scope: !5242)
!5254 = !DILocation(line: 2424, column: 6, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2424, column: 6)
!5256 = !DILocation(line: 2425, column: 6, scope: !5255)
!5257 = !DILocation(line: 2425, column: 9, scope: !5255)
!5258 = !DILocation(line: 2425, column: 35, scope: !5255)
!5259 = !DILocation(line: 2424, column: 6, scope: !5242)
!5260 = !DILocation(line: 2426, column: 11, scope: !5255)
!5261 = !DILocation(line: 2426, column: 9, scope: !5255)
!5262 = !DILocation(line: 2426, column: 4, scope: !5255)
!5263 = !DILocation(line: 2428, column: 43, scope: !5242)
!5264 = !DILocation(line: 2428, column: 12, scope: !5242)
!5265 = !DILocation(line: 2428, column: 10, scope: !5242)
!5266 = !DILocation(line: 2429, column: 6, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2429, column: 6)
!5268 = !DILocation(line: 2429, column: 6, scope: !5242)
!5269 = !DILocation(line: 2430, column: 4, scope: !5267)
!5270 = !DILocation(line: 2431, column: 6, scope: !5271)
!5271 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2431, column: 6)
!5272 = !DILocation(line: 2431, column: 6, scope: !5242)
!5273 = !DILocation(line: 2432, column: 44, scope: !5271)
!5274 = !DILocation(line: 2432, column: 53, scope: !5271)
!5275 = !DILocation(line: 2432, column: 18, scope: !5271)
!5276 = !DILocation(line: 2432, column: 16, scope: !5271)
!5277 = !DILocation(line: 2432, column: 4, scope: !5271)
!5278 = !DILocation(line: 2434, column: 16, scope: !5271)
!5279 = !DILocation(line: 2438, column: 6, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2438, column: 6)
!5281 = !DILocation(line: 2438, column: 18, scope: !5280)
!5282 = !DILocation(line: 2438, column: 6, scope: !5242)
!5283 = !DILocation(line: 2439, column: 23, scope: !5280)
!5284 = !DILocation(line: 2439, column: 4, scope: !5280)
!5285 = !DILocation(line: 2443, column: 11, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 2443, column: 11)
!5287 = !DILocation(line: 2443, column: 23, scope: !5286)
!5288 = !DILocation(line: 2443, column: 11, scope: !5280)
!5289 = !DILocation(line: 2445, column: 29, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 2444, column: 4)
!5291 = !DILocation(line: 2445, column: 27, scope: !5290)
!5292 = !DILocation(line: 2446, column: 18, scope: !5290)
!5293 = !DILocation(line: 2447, column: 4, scope: !5290)
!5294 = !DILocation(line: 2449, column: 6, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2449, column: 6)
!5296 = !DILocation(line: 2449, column: 18, scope: !5295)
!5297 = !DILocation(line: 2449, column: 6, scope: !5242)
!5298 = !DILocation(line: 2450, column: 23, scope: !5295)
!5299 = !DILocation(line: 2450, column: 27, scope: !5295)
!5300 = !DILocation(line: 2450, column: 21, scope: !5295)
!5301 = !DILocation(line: 2450, column: 4, scope: !5295)
!5302 = !DILocation(line: 2452, column: 21, scope: !5295)
!5303 = !DILocation(line: 2456, column: 6, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 2456, column: 6)
!5305 = !DILocation(line: 2456, column: 21, scope: !5304)
!5306 = !DILocation(line: 2456, column: 18, scope: !5304)
!5307 = !DILocation(line: 2457, column: 6, scope: !5304)
!5308 = !DILocation(line: 2457, column: 9, scope: !5304)
!5309 = !DILocation(line: 2457, column: 29, scope: !5304)
!5310 = !DILocation(line: 2457, column: 26, scope: !5304)
!5311 = !DILocation(line: 2456, column: 6, scope: !5242)
!5312 = !DILocation(line: 2462, column: 10, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 2462, column: 10)
!5314 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 2458, column: 4)
!5315 = !DILocation(line: 2462, column: 22, scope: !5313)
!5316 = !DILocation(line: 2462, column: 10, scope: !5314)
!5317 = !DILocation(line: 2465, column: 7, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 2465, column: 7)
!5319 = distinct !DILexicalBlock(scope: !5313, file: !3, line: 2463, column: 8)
!5320 = !DILocation(line: 2465, column: 7, scope: !5319)
!5321 = !DILocation(line: 2467, column: 19, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 2466, column: 5)
!5323 = !DILocation(line: 2467, column: 17, scope: !5322)
!5324 = !DILocation(line: 2470, column: 8, scope: !5322)
!5325 = !DILocation(line: 2469, column: 11, scope: !5322)
!5326 = !DILocation(line: 2469, column: 9, scope: !5322)
!5327 = !DILocation(line: 2471, column: 32, scope: !5322)
!5328 = !DILocation(line: 2471, column: 7, scope: !5322)
!5329 = !DILocation(line: 2471, column: 30, scope: !5322)
!5330 = !DILocation(line: 2472, column: 11, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 2472, column: 11)
!5332 = !DILocation(line: 2472, column: 11, scope: !5322)
!5333 = !DILocation(line: 2476, column: 11, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5331, file: !3, line: 2473, column: 9)
!5335 = !DILocation(line: 2475, column: 8, scope: !5334)
!5336 = !DILocation(line: 2475, column: 6, scope: !5334)
!5337 = !DILocation(line: 2477, column: 29, scope: !5334)
!5338 = !DILocation(line: 2477, column: 4, scope: !5334)
!5339 = !DILocation(line: 2477, column: 27, scope: !5334)
!5340 = !DILocation(line: 2478, column: 9, scope: !5334)
!5341 = !DILocation(line: 2480, column: 9, scope: !5331)
!5342 = !DILocation(line: 2482, column: 5, scope: !5322)
!5343 = !DILocation(line: 2483, column: 7, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 2483, column: 7)
!5345 = !DILocation(line: 2483, column: 7, scope: !5319)
!5346 = !DILocation(line: 2485, column: 47, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 2484, column: 5)
!5348 = !DILocation(line: 2485, column: 19, scope: !5347)
!5349 = !DILocation(line: 2485, column: 17, scope: !5347)
!5350 = !DILocation(line: 2487, column: 11, scope: !5347)
!5351 = !DILocation(line: 2486, column: 14, scope: !5347)
!5352 = !DILocation(line: 2486, column: 12, scope: !5347)
!5353 = !DILocation(line: 2488, column: 32, scope: !5347)
!5354 = !DILocation(line: 2488, column: 7, scope: !5347)
!5355 = !DILocation(line: 2488, column: 30, scope: !5347)
!5356 = !DILocation(line: 2489, column: 28, scope: !5347)
!5357 = !DILocation(line: 2490, column: 5, scope: !5347)
!5358 = !DILocation(line: 2493, column: 6, scope: !5319)
!5359 = !DILocation(line: 2492, column: 10, scope: !5319)
!5360 = !DILocation(line: 2492, column: 8, scope: !5319)
!5361 = !DILocation(line: 2494, column: 28, scope: !5319)
!5362 = !DILocation(line: 2494, column: 3, scope: !5319)
!5363 = !DILocation(line: 2494, column: 26, scope: !5319)
!5364 = !DILocation(line: 2495, column: 8, scope: !5319)
!5365 = !DILocation(line: 2499, column: 10, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 2499, column: 10)
!5367 = !DILocation(line: 2499, column: 22, scope: !5366)
!5368 = !DILocation(line: 2499, column: 10, scope: !5314)
!5369 = !DILocation(line: 2501, column: 30, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5366, file: !3, line: 2500, column: 8)
!5371 = !DILocation(line: 2502, column: 9, scope: !5370)
!5372 = !DILocation(line: 2502, column: 21, scope: !5370)
!5373 = !DILocation(line: 2502, column: 31, scope: !5370)
!5374 = !DILocation(line: 2503, column: 9, scope: !5370)
!5375 = !DILocation(line: 2501, column: 15, scope: !5370)
!5376 = !DILocation(line: 2501, column: 13, scope: !5370)
!5377 = !DILocation(line: 2504, column: 53, scope: !5370)
!5378 = !DILocation(line: 2504, column: 10, scope: !5370)
!5379 = !DILocation(line: 2504, column: 8, scope: !5370)
!5380 = !DILocation(line: 2505, column: 28, scope: !5370)
!5381 = !DILocation(line: 2505, column: 3, scope: !5370)
!5382 = !DILocation(line: 2505, column: 26, scope: !5370)
!5383 = !DILocation(line: 2506, column: 8, scope: !5370)
!5384 = !DILocation(line: 2508, column: 20, scope: !5314)
!5385 = !DILocation(line: 2508, column: 18, scope: !5314)
!5386 = !DILocation(line: 2509, column: 25, scope: !5314)
!5387 = !DILocation(line: 2509, column: 23, scope: !5314)
!5388 = !DILocation(line: 2510, column: 4, scope: !5314)
!5389 = !DILocation(line: 2511, column: 21, scope: !5242)
!5390 = !DILocation(line: 2511, column: 19, scope: !5242)
!5391 = !DILocation(line: 2512, column: 7, scope: !5242)
!5392 = !DILocation(line: 2513, column: 14, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 2513, column: 14)
!5394 = !DILocation(line: 2514, column: 7, scope: !5393)
!5395 = !DILocation(line: 2514, column: 10, scope: !5393)
!5396 = !DILocation(line: 2514, column: 27, scope: !5393)
!5397 = !DILocation(line: 2513, column: 14, scope: !5239)
!5398 = !DILocation(line: 2516, column: 2, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 2515, column: 7)
!5400 = !DILocation(line: 2517, column: 2, scope: !5399)
!5401 = !DILocation(line: 2518, column: 24, scope: !5399)
!5402 = !DILocation(line: 2518, column: 22, scope: !5399)
!5403 = !DILocation(line: 2519, column: 6, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5399, file: !3, line: 2519, column: 6)
!5405 = !DILocation(line: 2519, column: 6, scope: !5399)
!5406 = !DILocation(line: 2521, column: 43, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5404, file: !3, line: 2520, column: 4)
!5408 = !DILocation(line: 2521, column: 41, scope: !5407)
!5409 = !DILocation(line: 2522, column: 42, scope: !5407)
!5410 = !DILocation(line: 2522, column: 40, scope: !5407)
!5411 = !DILocation(line: 2523, column: 27, scope: !5407)
!5412 = !DILocation(line: 2524, column: 6, scope: !5407)
!5413 = !DILocation(line: 2525, column: 18, scope: !5407)
!5414 = !DILocation(line: 2526, column: 4, scope: !5407)
!5415 = !DILocation(line: 2529, column: 11, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5404, file: !3, line: 2529, column: 11)
!5417 = !DILocation(line: 2529, column: 23, scope: !5416)
!5418 = !DILocation(line: 2529, column: 11, scope: !5404)
!5419 = !DILocation(line: 2530, column: 23, scope: !5416)
!5420 = !DILocation(line: 2530, column: 21, scope: !5416)
!5421 = !DILocation(line: 2530, column: 4, scope: !5416)
!5422 = !DILocation(line: 2531, column: 20, scope: !5399)
!5423 = !DILocation(line: 2531, column: 17, scope: !5399)
!5424 = !DILocation(line: 2533, column: 9, scope: !5399)
!5425 = !DILocation(line: 2534, column: 2, scope: !5399)
!5426 = !DILocation(line: 2536, column: 6, scope: !5399)
!5427 = !DILocation(line: 2535, column: 28, scope: !5399)
!5428 = !DILocation(line: 2535, column: 2, scope: !5399)
!5429 = !DILocation(line: 2536, column: 4, scope: !5399)
!5430 = !DILocation(line: 2537, column: 16, scope: !5399)
!5431 = !DILocation(line: 2537, column: 14, scope: !5399)
!5432 = !DILocation(line: 2538, column: 16, scope: !5399)
!5433 = !DILocation(line: 2538, column: 14, scope: !5399)
!5434 = !DILocation(line: 2539, column: 12, scope: !5399)
!5435 = !DILocation(line: 2539, column: 10, scope: !5399)
!5436 = !DILocation(line: 2540, column: 27, scope: !5399)
!5437 = !DILocation(line: 2540, column: 41, scope: !5399)
!5438 = !DILocation(line: 2540, column: 39, scope: !5399)
!5439 = !DILocation(line: 2540, column: 53, scope: !5399)
!5440 = !DILocation(line: 2540, column: 12, scope: !5399)
!5441 = !DILocation(line: 2540, column: 10, scope: !5399)
!5442 = !DILocation(line: 2541, column: 7, scope: !5399)
!5443 = !DILocation(line: 2542, column: 14, scope: !5444)
!5444 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 2542, column: 14)
!5445 = !DILocation(line: 2542, column: 29, scope: !5444)
!5446 = !DILocation(line: 2542, column: 32, scope: !5444)
!5447 = !DILocation(line: 2542, column: 14, scope: !5393)
!5448 = !DILocation(line: 2543, column: 16, scope: !5444)
!5449 = !DILocation(line: 2543, column: 25, scope: !5444)
!5450 = !DILocation(line: 2543, column: 52, scope: !5444)
!5451 = !DILocation(line: 2543, column: 50, scope: !5444)
!5452 = !DILocation(line: 2543, column: 7, scope: !5444)
!5453 = !DILocation(line: 2414, column: 43, scope: !5236)
!5454 = !DILocation(line: 2414, column: 41, scope: !5236)
!5455 = !DILocation(line: 2414, column: 3, scope: !5236)
!5456 = distinct !{!5456, !5237, !5457}
!5457 = !DILocation(line: 2543, column: 63, scope: !5232)
!5458 = !DILocation(line: 2545, column: 7, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5189, file: !3, line: 2545, column: 7)
!5460 = !DILocation(line: 2545, column: 19, scope: !5459)
!5461 = !DILocation(line: 2545, column: 25, scope: !5459)
!5462 = !DILocation(line: 2545, column: 30, scope: !5459)
!5463 = !DILocation(line: 2545, column: 7, scope: !5189)
!5464 = !DILocation(line: 2547, column: 56, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 2546, column: 5)
!5466 = !DILocation(line: 2547, column: 14, scope: !5465)
!5467 = !DILocation(line: 2547, column: 12, scope: !5465)
!5468 = !DILocation(line: 2548, column: 32, scope: !5465)
!5469 = !DILocation(line: 2548, column: 7, scope: !5465)
!5470 = !DILocation(line: 2548, column: 30, scope: !5465)
!5471 = !DILocation(line: 2549, column: 5, scope: !5465)
!5472 = !DILocation(line: 2551, column: 20, scope: !5189)
!5473 = !DILocation(line: 2551, column: 18, scope: !5189)
!5474 = !DILocation(line: 2553, column: 7, scope: !5475)
!5475 = distinct !DILexicalBlock(scope: !5189, file: !3, line: 2553, column: 7)
!5476 = !DILocation(line: 2553, column: 7, scope: !5189)
!5477 = !DILocation(line: 2558, column: 20, scope: !5478)
!5478 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 2558, column: 7)
!5479 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 2554, column: 5)
!5480 = !DILocation(line: 2558, column: 12, scope: !5478)
!5481 = !DILocation(line: 2558, column: 25, scope: !5482)
!5482 = distinct !DILexicalBlock(scope: !5478, file: !3, line: 2558, column: 7)
!5483 = !DILocation(line: 2558, column: 33, scope: !5482)
!5484 = !DILocation(line: 2558, column: 7, scope: !5478)
!5485 = !DILocalVariable(name: "i", scope: !5486, file: !3, line: 2560, type: !6)
!5486 = distinct !DILexicalBlock(scope: !5482, file: !3, line: 2559, column: 2)
!5487 = !DILocation(line: 2560, column: 8, scope: !5486)
!5488 = !DILocalVariable(name: "idx", scope: !5486, file: !3, line: 2560, type: !6)
!5489 = !DILocation(line: 2560, column: 11, scope: !5486)
!5490 = !DILocalVariable(name: "n", scope: !5486, file: !3, line: 2561, type: !6)
!5491 = !DILocation(line: 2561, column: 8, scope: !5486)
!5492 = !DILocation(line: 2561, column: 12, scope: !5486)
!5493 = !DILocalVariable(name: "prev_bb", scope: !5486, file: !3, line: 2563, type: !1870)
!5494 = !DILocation(line: 2563, column: 16, scope: !5486)
!5495 = !DILocalVariable(name: "padbb", scope: !5486, file: !3, line: 2563, type: !1870)
!5496 = !DILocation(line: 2563, column: 32, scope: !5486)
!5497 = !DILocation(line: 2565, column: 11, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5486, file: !3, line: 2565, column: 4)
!5499 = !DILocation(line: 2565, column: 9, scope: !5498)
!5500 = !DILocation(line: 2565, column: 16, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 2565, column: 4)
!5502 = !DILocation(line: 2565, column: 20, scope: !5501)
!5503 = !DILocation(line: 2565, column: 18, scope: !5501)
!5504 = !DILocation(line: 2565, column: 4, scope: !5498)
!5505 = !DILocalVariable(name: "cs", scope: !5506, file: !3, line: 2567, type: !2511)
!5506 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 2566, column: 6)
!5507 = !DILocation(line: 2567, column: 35, scope: !5506)
!5508 = !DILocation(line: 2568, column: 3, scope: !5506)
!5509 = !DILocalVariable(name: "jump", scope: !5506, file: !3, line: 2570, type: !1285)
!5510 = !DILocation(line: 2570, column: 12, scope: !5506)
!5511 = !DILocalVariable(name: "note", scope: !5506, file: !3, line: 2570, type: !1285)
!5512 = !DILocation(line: 2570, column: 18, scope: !5506)
!5513 = !DILocation(line: 2572, column: 12, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 2572, column: 12)
!5515 = !DILocation(line: 2572, column: 16, scope: !5514)
!5516 = !DILocation(line: 2572, column: 28, scope: !5514)
!5517 = !DILocation(line: 2572, column: 12, scope: !5506)
!5518 = !DILocation(line: 2573, column: 3, scope: !5514)
!5519 = !DILocation(line: 2574, column: 14, scope: !5506)
!5520 = !DILocation(line: 2574, column: 52, scope: !5506)
!5521 = !DILocation(line: 2574, column: 50, scope: !5506)
!5522 = !DILocation(line: 2574, column: 12, scope: !5506)
!5523 = !DILocation(line: 2577, column: 12, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 2577, column: 12)
!5525 = !DILocation(line: 2577, column: 39, scope: !5524)
!5526 = !DILocation(line: 2577, column: 47, scope: !5524)
!5527 = !DILocation(line: 2577, column: 38, scope: !5524)
!5528 = !DILocation(line: 2577, column: 36, scope: !5524)
!5529 = !DILocation(line: 2577, column: 12, scope: !5506)
!5530 = !DILocation(line: 2578, column: 3, scope: !5524)
!5531 = !DILocation(line: 2581, column: 12, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 2581, column: 12)
!5533 = !DILocation(line: 2581, column: 20, scope: !5532)
!5534 = !DILocation(line: 2581, column: 25, scope: !5532)
!5535 = !DILocation(line: 2581, column: 12, scope: !5506)
!5536 = !DILocation(line: 2583, column: 20, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 2582, column: 3)
!5538 = !DILocation(line: 2583, column: 5, scope: !5537)
!5539 = !DILocation(line: 2583, column: 13, scope: !5537)
!5540 = !DILocation(line: 2583, column: 18, scope: !5537)
!5541 = !DILocation(line: 2584, column: 9, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2584, column: 9)
!5543 = !DILocation(line: 2584, column: 17, scope: !5542)
!5544 = !DILocation(line: 2584, column: 9, scope: !5537)
!5545 = !DILocation(line: 2585, column: 19, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 2585, column: 7)
!5547 = !DILocation(line: 2585, column: 17, scope: !5546)
!5548 = !DILocation(line: 2585, column: 12, scope: !5546)
!5549 = !DILocation(line: 2586, column: 5, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5546, file: !3, line: 2585, column: 7)
!5551 = !DILocation(line: 2585, column: 7, scope: !5546)
!5552 = !DILocation(line: 2587, column: 13, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 2587, column: 13)
!5554 = !DILocation(line: 2587, column: 13, scope: !5550)
!5555 = !DILocation(line: 2589, column: 16, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5553, file: !3, line: 2588, column: 4)
!5557 = !DILocation(line: 2589, column: 14, scope: !5556)
!5558 = !DILocation(line: 2590, column: 6, scope: !5556)
!5559 = !DILocation(line: 2586, column: 18, scope: !5550)
!5560 = !DILocation(line: 2586, column: 16, scope: !5550)
!5561 = !DILocation(line: 2585, column: 7, scope: !5550)
!5562 = distinct !{!5562, !5551, !5563}
!5563 = !DILocation(line: 2591, column: 4, scope: !5546)
!5564 = !DILocation(line: 2592, column: 9, scope: !5565)
!5565 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2592, column: 9)
!5566 = !DILocation(line: 2592, column: 17, scope: !5565)
!5567 = !DILocation(line: 2592, column: 9, scope: !5537)
!5568 = !DILocation(line: 2594, column: 35, scope: !5569)
!5569 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 2593, column: 7)
!5570 = !DILocation(line: 2594, column: 43, scope: !5569)
!5571 = !DILocation(line: 2595, column: 7, scope: !5569)
!5572 = !DILocation(line: 2594, column: 16, scope: !5569)
!5573 = !DILocation(line: 2594, column: 14, scope: !5569)
!5574 = !DILocation(line: 2596, column: 49, scope: !5569)
!5575 = !DILocation(line: 2596, column: 53, scope: !5569)
!5576 = !DILocation(line: 2596, column: 39, scope: !5569)
!5577 = !DILocation(line: 2597, column: 11, scope: !5569)
!5578 = !DILocation(line: 2596, column: 16, scope: !5569)
!5579 = !DILocation(line: 2596, column: 14, scope: !5569)
!5580 = !DILocation(line: 2598, column: 7, scope: !5569)
!5581 = !DILocation(line: 2601, column: 48, scope: !5582)
!5582 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 2600, column: 7)
!5583 = !DILocation(line: 2601, column: 52, scope: !5582)
!5584 = !DILocation(line: 2601, column: 38, scope: !5582)
!5585 = !DILocation(line: 2602, column: 10, scope: !5582)
!5586 = !DILocation(line: 2601, column: 16, scope: !5582)
!5587 = !DILocation(line: 2601, column: 14, scope: !5582)
!5588 = !DILocation(line: 2603, column: 34, scope: !5582)
!5589 = !DILocation(line: 2603, column: 42, scope: !5582)
!5590 = !DILocation(line: 2604, column: 13, scope: !5582)
!5591 = !DILocation(line: 2603, column: 16, scope: !5582)
!5592 = !DILocation(line: 2603, column: 14, scope: !5582)
!5593 = !DILocation(line: 2606, column: 25, scope: !5537)
!5594 = !DILocation(line: 2606, column: 29, scope: !5537)
!5595 = !DILocation(line: 2606, column: 5, scope: !5537)
!5596 = !DILocation(line: 2606, column: 23, scope: !5537)
!5597 = !DILocation(line: 2607, column: 19, scope: !5537)
!5598 = !DILocation(line: 2607, column: 5, scope: !5537)
!5599 = !DILocation(line: 2608, column: 12, scope: !5537)
!5600 = !DILocation(line: 2608, column: 10, scope: !5537)
!5601 = !DILocation(line: 2609, column: 9, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2609, column: 9)
!5603 = !DILocation(line: 2609, column: 14, scope: !5602)
!5604 = !DILocation(line: 2609, column: 17, scope: !5602)
!5605 = !DILocation(line: 2609, column: 9, scope: !5537)
!5606 = !DILocation(line: 2610, column: 15, scope: !5602)
!5607 = !DILocation(line: 2610, column: 13, scope: !5602)
!5608 = !DILocation(line: 2610, column: 7, scope: !5602)
!5609 = !DILocation(line: 2612, column: 13, scope: !5602)
!5610 = !DILocation(line: 2613, column: 9, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2613, column: 9)
!5612 = !DILocation(line: 2613, column: 15, scope: !5611)
!5613 = !DILocation(line: 2613, column: 18, scope: !5611)
!5614 = !DILocation(line: 2614, column: 9, scope: !5611)
!5615 = !DILocation(line: 2614, column: 12, scope: !5611)
!5616 = !DILocation(line: 2614, column: 33, scope: !5611)
!5617 = !DILocation(line: 2613, column: 9, scope: !5537)
!5618 = !DILocalVariable(name: "bb", scope: !5619, file: !3, line: 2616, type: !1870)
!5619 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 2615, column: 7)
!5620 = !DILocation(line: 2616, column: 21, scope: !5619)
!5621 = !DILocalVariable(name: "part", scope: !5619, file: !3, line: 2617, type: !6)
!5622 = !DILocation(line: 2617, column: 13, scope: !5619)
!5623 = !DILocation(line: 2618, column: 6, scope: !5619)
!5624 = !DILocation(line: 2618, column: 27, scope: !5619)
!5625 = !DILocalVariable(name: "ei", scope: !5619, file: !3, line: 2620, type: !5626)
!5626 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !341, line: 682, baseType: !5627)
!5627 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !341, line: 679, size: 128, elements: !5628)
!5628 = !{!5629, !5630}
!5629 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5627, file: !341, line: 680, baseType: !11, size: 32)
!5630 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5627, file: !341, line: 681, baseType: !5631, size: 64, offset: 64)
!5631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1405, size: 64)
!5632 = !DILocation(line: 2620, column: 23, scope: !5619)
!5633 = !DILocalVariable(name: "e", scope: !5619, file: !3, line: 2621, type: !1417)
!5634 = !DILocation(line: 2621, column: 14, scope: !5619)
!5635 = !DILocation(line: 2623, column: 34, scope: !5619)
!5636 = !DILocation(line: 2623, column: 40, scope: !5619)
!5637 = !DILocation(line: 2623, column: 46, scope: !5619)
!5638 = !DILocation(line: 2623, column: 14, scope: !5619)
!5639 = !DILocation(line: 2623, column: 12, scope: !5619)
!5640 = !DILocation(line: 2624, column: 32, scope: !5619)
!5641 = !DILocation(line: 2624, column: 36, scope: !5619)
!5642 = !DILocation(line: 2624, column: 9, scope: !5619)
!5643 = !DILocation(line: 2625, column: 9, scope: !5619)
!5644 = !DILocalVariable(name: "bb_", scope: !5645, file: !3, line: 2625, type: !1870)
!5645 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 2625, column: 9)
!5646 = !DILocation(line: 2625, column: 9, scope: !5645)
!5647 = !DILocation(line: 2626, column: 19, scope: !5648)
!5648 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 2626, column: 9)
!5649 = !DILocation(line: 2626, column: 14, scope: !5648)
!5650 = !DILocation(line: 2627, column: 12, scope: !5651)
!5651 = distinct !DILexicalBlock(scope: !5648, file: !3, line: 2626, column: 9)
!5652 = !DILocation(line: 2627, column: 10, scope: !5651)
!5653 = !DILocation(line: 2626, column: 9, scope: !5648)
!5654 = !DILocation(line: 2629, column: 11, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 2629, column: 10)
!5656 = distinct !DILexicalBlock(scope: !5651, file: !3, line: 2628, column: 4)
!5657 = !DILocation(line: 2629, column: 14, scope: !5655)
!5658 = !DILocation(line: 2629, column: 20, scope: !5655)
!5659 = !DILocation(line: 2630, column: 10, scope: !5655)
!5660 = !DILocation(line: 2629, column: 10, scope: !5656)
!5661 = !DILocation(line: 2632, column: 30, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 2631, column: 8)
!5663 = !DILocation(line: 2632, column: 33, scope: !5662)
!5664 = !DILocation(line: 2632, column: 10, scope: !5662)
!5665 = !DILocation(line: 2633, column: 10, scope: !5662)
!5666 = !DILocation(line: 2633, column: 13, scope: !5662)
!5667 = !DILocation(line: 2633, column: 19, scope: !5662)
!5668 = !DILocation(line: 2634, column: 8, scope: !5662)
!5669 = !DILocation(line: 2636, column: 8, scope: !5655)
!5670 = !DILocation(line: 2626, column: 9, scope: !5651)
!5671 = distinct !{!5671, !5653, !5672}
!5672 = !DILocation(line: 2637, column: 4, scope: !5648)
!5673 = !DILocation(line: 2638, column: 13, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 2638, column: 13)
!5675 = !DILocation(line: 2638, column: 21, scope: !5674)
!5676 = !DILocation(line: 2638, column: 13, scope: !5619)
!5677 = !DILocation(line: 2639, column: 14, scope: !5674)
!5678 = !DILocation(line: 2639, column: 12, scope: !5674)
!5679 = !DILocation(line: 2639, column: 4, scope: !5674)
!5680 = !DILocation(line: 2640, column: 7, scope: !5619)
!5681 = !DILocation(line: 2641, column: 3, scope: !5537)
!5682 = !DILocation(line: 2642, column: 26, scope: !5506)
!5683 = !DILocation(line: 2642, column: 34, scope: !5506)
!5684 = !DILocation(line: 2642, column: 8, scope: !5506)
!5685 = !DILocation(line: 2642, column: 12, scope: !5506)
!5686 = !DILocation(line: 2642, column: 24, scope: !5506)
!5687 = !DILocation(line: 2643, column: 6, scope: !5506)
!5688 = !DILocation(line: 2565, column: 23, scope: !5501)
!5689 = !DILocation(line: 2565, column: 4, scope: !5501)
!5690 = distinct !{!5690, !5504, !5691}
!5691 = !DILocation(line: 2643, column: 6, scope: !5498)
!5692 = !DILocation(line: 2644, column: 2, scope: !5486)
!5693 = !DILocation(line: 2558, column: 45, scope: !5482)
!5694 = !DILocation(line: 2558, column: 7, scope: !5482)
!5695 = distinct !{!5695, !5484, !5696}
!5696 = !DILocation(line: 2644, column: 2, scope: !5478)
!5697 = !DILocation(line: 2646, column: 7, scope: !5479)
!5698 = !DILocation(line: 2647, column: 7, scope: !5479)
!5699 = !DILocation(line: 2648, column: 5, scope: !5479)
!5700 = !DILocation(line: 2650, column: 16, scope: !5189)
!5701 = !DILocation(line: 2650, column: 3, scope: !5189)
!5702 = !DILocation(line: 2651, column: 3, scope: !5189)
!5703 = distinct !DISubprogram(name: "output_function_exception_table", scope: !3, file: !3, line: 3133, type: !5704, scopeLine: 3134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5704 = !DISubroutineType(types: !5705)
!5705 = !{null, !1310}
!5706 = !DILocalVariable(name: "fnname", arg: 1, scope: !5703, file: !3, line: 3133, type: !1310)
!5707 = !DILocation(line: 3133, column: 47, scope: !5703)
!5708 = !DILocalVariable(name: "personality", scope: !5703, file: !3, line: 3135, type: !1285)
!5709 = !DILocation(line: 3135, column: 7, scope: !5703)
!5710 = !DILocation(line: 3135, column: 47, scope: !5703)
!5711 = !DILocation(line: 3135, column: 21, scope: !5703)
!5712 = !DILocation(line: 3138, column: 15, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 3138, column: 7)
!5714 = !DILocation(line: 3138, column: 9, scope: !5713)
!5715 = !DILocation(line: 3138, column: 7, scope: !5703)
!5716 = !DILocation(line: 3139, column: 5, scope: !5713)
!5717 = !DILocation(line: 3141, column: 7, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 3141, column: 7)
!5719 = !DILocation(line: 3141, column: 7, scope: !5703)
!5720 = !DILocation(line: 3142, column: 32, scope: !5718)
!5721 = !DILocation(line: 3142, column: 5, scope: !5718)
!5722 = !DILocation(line: 3144, column: 40, scope: !5703)
!5723 = !DILocation(line: 3144, column: 51, scope: !5703)
!5724 = !DILocation(line: 3144, column: 3, scope: !5703)
!5725 = !DILocation(line: 3145, column: 7, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 3145, column: 7)
!5727 = !DILocation(line: 3145, column: 36, scope: !5726)
!5728 = !DILocation(line: 3145, column: 7, scope: !5703)
!5729 = !DILocation(line: 3146, column: 42, scope: !5726)
!5730 = !DILocation(line: 3146, column: 53, scope: !5726)
!5731 = !DILocation(line: 3146, column: 5, scope: !5726)
!5732 = !DILocation(line: 3148, column: 22, scope: !5703)
!5733 = !DILocation(line: 3148, column: 3, scope: !5703)
!5734 = !DILocation(line: 3149, column: 1, scope: !5703)
!5735 = distinct !DISubprogram(name: "output_one_function_exception_table", scope: !3, file: !3, line: 2942, type: !5736, scopeLine: 2944, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5736 = !DISubroutineType(types: !5737)
!5737 = !{null, !1310, !6, !1285}
!5738 = !DILocalVariable(name: "fnname", arg: 1, scope: !5735, file: !3, line: 2942, type: !1310)
!5739 = !DILocation(line: 2942, column: 51, scope: !5735)
!5740 = !DILocalVariable(name: "section", arg: 2, scope: !5735, file: !3, line: 2943, type: !6)
!5741 = !DILocation(line: 2943, column: 14, scope: !5735)
!5742 = !DILocalVariable(name: "personality", arg: 3, scope: !5735, file: !3, line: 2943, type: !1285)
!5743 = !DILocation(line: 2943, column: 27, scope: !5735)
!5744 = !DILocalVariable(name: "tt_format", scope: !5735, file: !3, line: 2945, type: !6)
!5745 = !DILocation(line: 2945, column: 7, scope: !5735)
!5746 = !DILocalVariable(name: "cs_format", scope: !5735, file: !3, line: 2945, type: !6)
!5747 = !DILocation(line: 2945, column: 18, scope: !5735)
!5748 = !DILocalVariable(name: "lp_format", scope: !5735, file: !3, line: 2945, type: !6)
!5749 = !DILocation(line: 2945, column: 29, scope: !5735)
!5750 = !DILocalVariable(name: "i", scope: !5735, file: !3, line: 2945, type: !6)
!5751 = !DILocation(line: 2945, column: 40, scope: !5735)
!5752 = !DILocalVariable(name: "ttype_label", scope: !5735, file: !3, line: 2947, type: !5753)
!5753 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1207, size: 256, elements: !5754)
!5754 = !{!5755}
!5755 = !DISubrange(count: 32)
!5756 = !DILocation(line: 2947, column: 8, scope: !5735)
!5757 = !DILocalVariable(name: "cs_after_size_label", scope: !5735, file: !3, line: 2948, type: !5753)
!5758 = !DILocation(line: 2948, column: 8, scope: !5735)
!5759 = !DILocalVariable(name: "cs_end_label", scope: !5735, file: !3, line: 2949, type: !5753)
!5760 = !DILocation(line: 2949, column: 8, scope: !5735)
!5761 = !DILocalVariable(name: "have_tt_data", scope: !5735, file: !3, line: 2953, type: !6)
!5762 = !DILocation(line: 2953, column: 7, scope: !5735)
!5763 = !DILocalVariable(name: "tt_format_size", scope: !5735, file: !3, line: 2954, type: !6)
!5764 = !DILocation(line: 2954, column: 7, scope: !5735)
!5765 = !DILocation(line: 2964, column: 32, scope: !5735)
!5766 = !DILocation(line: 2964, column: 3, scope: !5735)
!5767 = !DILocation(line: 2968, column: 19, scope: !5735)
!5768 = !DILocation(line: 2968, column: 39, scope: !5735)
!5769 = !DILocation(line: 2968, column: 3, scope: !5735)
!5770 = !DILocation(line: 2970, column: 19, scope: !5735)
!5771 = !DILocation(line: 2971, column: 5, scope: !5735)
!5772 = !DILocation(line: 2971, column: 17, scope: !5735)
!5773 = !DILocation(line: 2971, column: 9, scope: !5735)
!5774 = !DILocation(line: 2972, column: 11, scope: !5735)
!5775 = !DILocation(line: 2973, column: 11, scope: !5735)
!5776 = !DILocation(line: 2970, column: 16, scope: !5735)
!5777 = !DILocation(line: 2976, column: 9, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 2976, column: 7)
!5779 = !DILocation(line: 2976, column: 7, scope: !5735)
!5780 = !DILocation(line: 2977, column: 15, scope: !5778)
!5781 = !DILocation(line: 2977, column: 5, scope: !5778)
!5782 = !DILocation(line: 2980, column: 19, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 2979, column: 5)
!5784 = !DILocation(line: 2980, column: 17, scope: !5783)
!5785 = !DILocation(line: 2982, column: 7, scope: !5783)
!5786 = !DILocation(line: 2982, column: 7, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 2982, column: 7)
!5788 = !DILocation(line: 2986, column: 47, scope: !5783)
!5789 = !DILocation(line: 2986, column: 24, scope: !5783)
!5790 = !DILocation(line: 2986, column: 22, scope: !5783)
!5791 = !DILocation(line: 2988, column: 23, scope: !5783)
!5792 = !DILocation(line: 2988, column: 38, scope: !5783)
!5793 = !DILocation(line: 2988, column: 7, scope: !5783)
!5794 = !DILocation(line: 2991, column: 19, scope: !5735)
!5795 = !DILocation(line: 2991, column: 35, scope: !5735)
!5796 = !DILocation(line: 2991, column: 49, scope: !5735)
!5797 = !DILocation(line: 2992, column: 7, scope: !5735)
!5798 = !DILocation(line: 2991, column: 3, scope: !5735)
!5799 = !DILocation(line: 3002, column: 13, scope: !5735)
!5800 = !DILocation(line: 3003, column: 27, scope: !5735)
!5801 = !DILocation(line: 3004, column: 31, scope: !5735)
!5802 = !DILocation(line: 3004, column: 10, scope: !5735)
!5803 = !DILocation(line: 3003, column: 3, scope: !5735)
!5804 = !DILocation(line: 3008, column: 27, scope: !5735)
!5805 = !DILocation(line: 3009, column: 31, scope: !5735)
!5806 = !DILocation(line: 3009, column: 10, scope: !5735)
!5807 = !DILocation(line: 3008, column: 3, scope: !5735)
!5808 = !DILocation(line: 3019, column: 7, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3019, column: 7)
!5810 = !DILocation(line: 3019, column: 7, scope: !5735)
!5811 = !DILocalVariable(name: "ttype_after_disp_label", scope: !5812, file: !3, line: 3022, type: !5753)
!5812 = distinct !DILexicalBlock(scope: !5809, file: !3, line: 3020, column: 5)
!5813 = !DILocation(line: 3022, column: 12, scope: !5812)
!5814 = !DILocation(line: 3023, column: 7, scope: !5812)
!5815 = !DILocation(line: 3023, column: 7, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5812, file: !3, line: 3023, column: 7)
!5817 = !DILocation(line: 3026, column: 37, scope: !5812)
!5818 = !DILocation(line: 3026, column: 50, scope: !5812)
!5819 = !DILocation(line: 3026, column: 7, scope: !5812)
!5820 = !DILocation(line: 3028, column: 7, scope: !5812)
!5821 = !DILocation(line: 3028, column: 7, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5812, file: !3, line: 3028, column: 7)
!5823 = !DILocation(line: 3058, column: 5, scope: !5812)
!5824 = !DILocation(line: 3062, column: 13, scope: !5735)
!5825 = !DILocation(line: 3066, column: 27, scope: !5735)
!5826 = !DILocation(line: 3067, column: 31, scope: !5735)
!5827 = !DILocation(line: 3067, column: 10, scope: !5735)
!5828 = !DILocation(line: 3066, column: 3, scope: !5735)
!5829 = !DILocation(line: 3070, column: 3, scope: !5735)
!5830 = !DILocation(line: 3070, column: 3, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3070, column: 3)
!5832 = !DILocation(line: 3073, column: 3, scope: !5735)
!5833 = !DILocation(line: 3073, column: 3, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3073, column: 3)
!5835 = !DILocation(line: 3076, column: 33, scope: !5735)
!5836 = !DILocation(line: 3076, column: 47, scope: !5735)
!5837 = !DILocation(line: 3076, column: 3, scope: !5735)
!5838 = !DILocation(line: 3078, column: 3, scope: !5735)
!5839 = !DILocation(line: 3078, column: 3, scope: !5840)
!5840 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3078, column: 3)
!5841 = !DILocation(line: 3082, column: 33, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3079, column: 7)
!5843 = !DILocation(line: 3082, column: 44, scope: !5842)
!5844 = !DILocation(line: 3082, column: 5, scope: !5842)
!5845 = !DILocation(line: 3083, column: 3, scope: !5735)
!5846 = !DILocation(line: 3083, column: 3, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3083, column: 3)
!5848 = !DILocalVariable(name: "uc", scope: !5849, file: !3, line: 3094, type: !2510)
!5849 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3093, column: 3)
!5850 = !DILocation(line: 3094, column: 11, scope: !5849)
!5851 = !DILocation(line: 3095, column: 12, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 3095, column: 5)
!5853 = !DILocation(line: 3095, column: 10, scope: !5852)
!5854 = !DILocation(line: 3095, column: 17, scope: !5855)
!5855 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 3095, column: 5)
!5856 = !DILocation(line: 3095, column: 5, scope: !5852)
!5857 = !DILocation(line: 3096, column: 31, scope: !5855)
!5858 = !DILocation(line: 3096, column: 35, scope: !5855)
!5859 = !DILocation(line: 3096, column: 7, scope: !5855)
!5860 = !DILocation(line: 3095, column: 74, scope: !5855)
!5861 = !DILocation(line: 3095, column: 5, scope: !5855)
!5862 = distinct !{!5862, !5856, !5863}
!5863 = !DILocation(line: 3096, column: 67, scope: !5852)
!5864 = !DILocation(line: 3099, column: 7, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3099, column: 7)
!5866 = !DILocation(line: 3099, column: 7, scope: !5735)
!5867 = !DILocation(line: 3100, column: 21, scope: !5865)
!5868 = !DILocation(line: 3100, column: 36, scope: !5865)
!5869 = !DILocation(line: 3100, column: 5, scope: !5865)
!5870 = !DILocation(line: 3102, column: 7, scope: !5735)
!5871 = !DILocation(line: 3102, column: 5, scope: !5735)
!5872 = !DILocation(line: 3103, column: 3, scope: !5735)
!5873 = !DILocation(line: 3103, column: 11, scope: !5735)
!5874 = !DILocation(line: 3103, column: 14, scope: !5735)
!5875 = !DILocalVariable(name: "type", scope: !5876, file: !3, line: 3105, type: !1109)
!5876 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3104, column: 5)
!5877 = !DILocation(line: 3105, column: 12, scope: !5876)
!5878 = !DILocation(line: 3105, column: 19, scope: !5876)
!5879 = !DILocation(line: 3106, column: 21, scope: !5876)
!5880 = !DILocation(line: 3106, column: 27, scope: !5876)
!5881 = !DILocation(line: 3106, column: 38, scope: !5876)
!5882 = !DILocation(line: 3106, column: 7, scope: !5876)
!5883 = distinct !{!5883, !5872, !5884}
!5884 = !DILocation(line: 3107, column: 5, scope: !5735)
!5885 = !DILocation(line: 3110, column: 7, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3110, column: 7)
!5887 = !DILocation(line: 3110, column: 7, scope: !5735)
!5888 = !DILocation(line: 3111, column: 7, scope: !5886)
!5889 = !DILocation(line: 3111, column: 7, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5886, file: !3, line: 3111, column: 7)
!5891 = !DILocation(line: 3115, column: 15, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 3115, column: 7)
!5893 = !DILocation(line: 3115, column: 7, scope: !5892)
!5894 = !DILocation(line: 3115, column: 7, scope: !5735)
!5895 = !DILocalVariable(name: "type", scope: !5896, file: !3, line: 3117, type: !1109)
!5896 = distinct !DILexicalBlock(scope: !5892, file: !3, line: 3116, column: 5)
!5897 = !DILocation(line: 3117, column: 12, scope: !5896)
!5898 = !DILocation(line: 3118, column: 14, scope: !5899)
!5899 = distinct !DILexicalBlock(scope: !5896, file: !3, line: 3118, column: 7)
!5900 = !DILocation(line: 3118, column: 12, scope: !5899)
!5901 = !DILocation(line: 3119, column: 5, scope: !5902)
!5902 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 3118, column: 7)
!5903 = !DILocation(line: 3118, column: 7, scope: !5899)
!5904 = !DILocation(line: 3120, column: 16, scope: !5902)
!5905 = !DILocation(line: 3120, column: 22, scope: !5902)
!5906 = !DILocation(line: 3120, column: 33, scope: !5902)
!5907 = !DILocation(line: 3120, column: 2, scope: !5902)
!5908 = !DILocation(line: 3119, column: 66, scope: !5902)
!5909 = !DILocation(line: 3118, column: 7, scope: !5902)
!5910 = distinct !{!5910, !5903, !5911}
!5911 = !DILocation(line: 3120, column: 47, scope: !5899)
!5912 = !DILocation(line: 3121, column: 5, scope: !5896)
!5913 = !DILocalVariable(name: "uc", scope: !5914, file: !3, line: 3124, type: !2510)
!5914 = distinct !DILexicalBlock(scope: !5892, file: !3, line: 3123, column: 5)
!5915 = !DILocation(line: 3124, column: 13, scope: !5914)
!5916 = !DILocation(line: 3125, column: 14, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 3125, column: 7)
!5918 = !DILocation(line: 3125, column: 12, scope: !5917)
!5919 = !DILocation(line: 3126, column: 5, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5917, file: !3, line: 3125, column: 7)
!5921 = !DILocation(line: 3125, column: 7, scope: !5917)
!5922 = !DILocation(line: 3127, column: 26, scope: !5920)
!5923 = !DILocation(line: 3128, column: 9, scope: !5920)
!5924 = !DILocation(line: 3127, column: 2, scope: !5920)
!5925 = !DILocation(line: 3126, column: 62, scope: !5920)
!5926 = !DILocation(line: 3125, column: 7, scope: !5920)
!5927 = distinct !{!5927, !5921, !5928}
!5928 = !DILocation(line: 3128, column: 51, scope: !5917)
!5929 = !DILocation(line: 3130, column: 1, scope: !5735)
!5930 = distinct !DISubprogram(name: "set_eh_throw_stmt_table", scope: !3, file: !3, line: 3152, type: !5931, scopeLine: 3153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5931 = !DISubroutineType(types: !5932)
!5932 = !{null, !1860, !1903}
!5933 = !DILocalVariable(name: "fun", arg: 1, scope: !5930, file: !3, line: 3152, type: !1860)
!5934 = !DILocation(line: 3152, column: 43, scope: !5930)
!5935 = !DILocalVariable(name: "table", arg: 2, scope: !5930, file: !3, line: 3152, type: !1903)
!5936 = !DILocation(line: 3152, column: 61, scope: !5930)
!5937 = !DILocation(line: 3154, column: 31, scope: !5930)
!5938 = !DILocation(line: 3154, column: 3, scope: !5930)
!5939 = !DILocation(line: 3154, column: 8, scope: !5930)
!5940 = !DILocation(line: 3154, column: 12, scope: !5930)
!5941 = !DILocation(line: 3154, column: 29, scope: !5930)
!5942 = !DILocation(line: 3155, column: 1, scope: !5930)
!5943 = distinct !DISubprogram(name: "get_eh_throw_stmt_table", scope: !3, file: !3, line: 3158, type: !5944, scopeLine: 3159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5944 = !DISubroutineType(types: !5945)
!5945 = !{!1903, !1860}
!5946 = !DILocalVariable(name: "fun", arg: 1, scope: !5943, file: !3, line: 3158, type: !1860)
!5947 = !DILocation(line: 3158, column: 43, scope: !5943)
!5948 = !DILocation(line: 3160, column: 10, scope: !5943)
!5949 = !DILocation(line: 3160, column: 15, scope: !5943)
!5950 = !DILocation(line: 3160, column: 19, scope: !5943)
!5951 = !DILocation(line: 3160, column: 3, scope: !5943)
!5952 = distinct !DISubprogram(name: "function_needs_eh_personality", scope: !3, file: !3, line: 3166, type: !5953, scopeLine: 3167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5953 = !DISubroutineType(types: !5954)
!5954 = !{!763, !1860}
!5955 = !DILocalVariable(name: "fn", arg: 1, scope: !5952, file: !3, line: 3166, type: !1860)
!5956 = !DILocation(line: 3166, column: 49, scope: !5952)
!5957 = !DILocalVariable(name: "kind", scope: !5952, file: !3, line: 3168, type: !763)
!5958 = !DILocation(line: 3168, column: 28, scope: !5952)
!5959 = !DILocalVariable(name: "i", scope: !5952, file: !3, line: 3169, type: !1087)
!5960 = !DILocation(line: 3169, column: 13, scope: !5952)
!5961 = !DILocation(line: 3171, column: 3, scope: !5962)
!5962 = distinct !DILexicalBlock(scope: !5952, file: !3, line: 3171, column: 3)
!5963 = !DILocation(line: 3171, column: 3, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5962, file: !3, line: 3171, column: 3)
!5965 = !DILocation(line: 3173, column: 15, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5964, file: !3, line: 3172, column: 5)
!5967 = !DILocation(line: 3173, column: 18, scope: !5966)
!5968 = !DILocation(line: 3173, column: 7, scope: !5966)
!5969 = !DILocation(line: 3177, column: 9, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5966, file: !3, line: 3174, column: 2)
!5971 = !DILocation(line: 3178, column: 4, scope: !5970)
!5972 = !DILocation(line: 3184, column: 4, scope: !5970)
!5973 = !DILocation(line: 3189, column: 4, scope: !5970)
!5974 = !DILocation(line: 3191, column: 5, scope: !5966)
!5975 = distinct !{!5975, !5961, !5976}
!5976 = !DILocation(line: 3191, column: 5, scope: !5962)
!5977 = !DILocation(line: 3193, column: 10, scope: !5952)
!5978 = !DILocation(line: 3193, column: 3, scope: !5952)
!5979 = !DILocation(line: 3194, column: 1, scope: !5952)
!5980 = distinct !DISubprogram(name: "ehr_next", scope: !10, file: !10, line: 364, type: !5981, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!5981 = !DISubroutineType(types: !5982)
!5982 = !{!1087, !1087, !1087}
!5983 = !DILocalVariable(name: "r", arg: 1, scope: !5980, file: !10, line: 364, type: !1087)
!5984 = !DILocation(line: 364, column: 21, scope: !5980)
!5985 = !DILocalVariable(name: "start", arg: 2, scope: !5980, file: !10, line: 364, type: !1087)
!5986 = !DILocation(line: 364, column: 34, scope: !5980)
!5987 = !DILocation(line: 366, column: 7, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5980, file: !10, line: 366, column: 7)
!5989 = !DILocation(line: 366, column: 10, scope: !5988)
!5990 = !DILocation(line: 366, column: 7, scope: !5980)
!5991 = !DILocation(line: 367, column: 9, scope: !5988)
!5992 = !DILocation(line: 367, column: 12, scope: !5988)
!5993 = !DILocation(line: 367, column: 7, scope: !5988)
!5994 = !DILocation(line: 367, column: 5, scope: !5988)
!5995 = !DILocation(line: 368, column: 12, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5988, file: !10, line: 368, column: 12)
!5997 = !DILocation(line: 368, column: 15, scope: !5996)
!5998 = !DILocation(line: 368, column: 25, scope: !5996)
!5999 = !DILocation(line: 368, column: 28, scope: !5996)
!6000 = !DILocation(line: 368, column: 33, scope: !5996)
!6001 = !DILocation(line: 368, column: 30, scope: !5996)
!6002 = !DILocation(line: 368, column: 12, scope: !5988)
!6003 = !DILocation(line: 369, column: 9, scope: !5996)
!6004 = !DILocation(line: 369, column: 12, scope: !5996)
!6005 = !DILocation(line: 369, column: 7, scope: !5996)
!6006 = !DILocation(line: 369, column: 5, scope: !5996)
!6007 = !DILocation(line: 372, column: 7, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5996, file: !10, line: 371, column: 5)
!6009 = !DILocation(line: 374, column: 8, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !6008, file: !10, line: 373, column: 2)
!6011 = !DILocation(line: 374, column: 11, scope: !6010)
!6012 = !DILocation(line: 374, column: 6, scope: !6010)
!6013 = !DILocation(line: 375, column: 8, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6010, file: !10, line: 375, column: 8)
!6015 = !DILocation(line: 375, column: 13, scope: !6014)
!6016 = !DILocation(line: 375, column: 10, scope: !6014)
!6017 = !DILocation(line: 375, column: 8, scope: !6010)
!6018 = !DILocation(line: 376, column: 6, scope: !6014)
!6019 = !DILocation(line: 377, column: 2, scope: !6010)
!6020 = !DILocation(line: 378, column: 14, scope: !6008)
!6021 = !DILocation(line: 378, column: 17, scope: !6008)
!6022 = !DILocation(line: 378, column: 27, scope: !6008)
!6023 = distinct !{!6023, !6007, !6024}
!6024 = !DILocation(line: 378, column: 34, scope: !6008)
!6025 = !DILocation(line: 379, column: 11, scope: !6008)
!6026 = !DILocation(line: 379, column: 14, scope: !6008)
!6027 = !DILocation(line: 379, column: 9, scope: !6008)
!6028 = !DILocation(line: 381, column: 10, scope: !5980)
!6029 = !DILocation(line: 381, column: 3, scope: !5980)
!6030 = !DILocation(line: 382, column: 1, scope: !5980)
!6031 = !DILocalVariable(name: "out", arg: 1, scope: !2585, file: !3, line: 3199, type: !2588)
!6032 = !DILocation(line: 3199, column: 22, scope: !2585)
!6033 = !DILocalVariable(name: "fun", arg: 2, scope: !2585, file: !3, line: 3199, type: !1860)
!6034 = !DILocation(line: 3199, column: 44, scope: !2585)
!6035 = !DILocalVariable(name: "i", scope: !2585, file: !3, line: 3201, type: !1087)
!6036 = !DILocation(line: 3201, column: 13, scope: !2585)
!6037 = !DILocalVariable(name: "depth", scope: !2585, file: !3, line: 3202, type: !6)
!6038 = !DILocation(line: 3202, column: 7, scope: !2585)
!6039 = !DILocation(line: 3207, column: 7, scope: !2585)
!6040 = !DILocation(line: 3207, column: 12, scope: !2585)
!6041 = !DILocation(line: 3207, column: 16, scope: !2585)
!6042 = !DILocation(line: 3207, column: 5, scope: !2585)
!6043 = !DILocation(line: 3208, column: 8, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 3208, column: 7)
!6045 = !DILocation(line: 3208, column: 7, scope: !2585)
!6046 = !DILocation(line: 3209, column: 5, scope: !6044)
!6047 = !DILocation(line: 3211, column: 12, scope: !2585)
!6048 = !DILocation(line: 3211, column: 3, scope: !2585)
!6049 = !DILocation(line: 3212, column: 3, scope: !2585)
!6050 = !DILocation(line: 3214, column: 16, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 3213, column: 5)
!6052 = !DILocation(line: 3214, column: 36, scope: !6051)
!6053 = !DILocation(line: 3214, column: 42, scope: !6051)
!6054 = !DILocation(line: 3215, column: 9, scope: !6051)
!6055 = !DILocation(line: 3215, column: 12, scope: !6051)
!6056 = !DILocation(line: 3215, column: 35, scope: !6051)
!6057 = !DILocation(line: 3215, column: 38, scope: !6051)
!6058 = !DILocation(line: 3215, column: 19, scope: !6051)
!6059 = !DILocation(line: 3214, column: 7, scope: !6051)
!6060 = !DILocation(line: 3217, column: 11, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 3217, column: 11)
!6062 = !DILocation(line: 3217, column: 14, scope: !6061)
!6063 = !DILocation(line: 3217, column: 11, scope: !6051)
!6064 = !DILocalVariable(name: "lp", scope: !6065, file: !3, line: 3219, type: !2489)
!6065 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 3218, column: 2)
!6066 = !DILocation(line: 3219, column: 19, scope: !6065)
!6067 = !DILocation(line: 3221, column: 13, scope: !6065)
!6068 = !DILocation(line: 3221, column: 4, scope: !6065)
!6069 = !DILocation(line: 3222, column: 8, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6065, file: !3, line: 3222, column: 8)
!6071 = !DILocation(line: 3222, column: 27, scope: !6070)
!6072 = !DILocation(line: 3222, column: 8, scope: !6065)
!6073 = !DILocation(line: 3224, column: 18, scope: !6074)
!6074 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 3224, column: 8)
!6075 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 3223, column: 6)
!6076 = !DILocation(line: 3224, column: 21, scope: !6074)
!6077 = !DILocation(line: 3224, column: 16, scope: !6074)
!6078 = !DILocation(line: 3224, column: 13, scope: !6074)
!6079 = !DILocation(line: 3224, column: 35, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6074, file: !3, line: 3224, column: 8)
!6081 = !DILocation(line: 3224, column: 8, scope: !6074)
!6082 = !DILocation(line: 3226, column: 14, scope: !6083)
!6083 = distinct !DILexicalBlock(scope: !6080, file: !3, line: 3225, column: 3)
!6084 = !DILocation(line: 3226, column: 27, scope: !6083)
!6085 = !DILocation(line: 3226, column: 31, scope: !6083)
!6086 = !DILocation(line: 3226, column: 5, scope: !6083)
!6087 = !DILocation(line: 3227, column: 25, scope: !6083)
!6088 = !DILocation(line: 3227, column: 30, scope: !6083)
!6089 = !DILocation(line: 3227, column: 34, scope: !6083)
!6090 = !DILocation(line: 3227, column: 5, scope: !6083)
!6091 = !DILocation(line: 3228, column: 17, scope: !6083)
!6092 = !DILocation(line: 3228, column: 5, scope: !6083)
!6093 = !DILocation(line: 3229, column: 9, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6083, file: !3, line: 3229, column: 9)
!6095 = !DILocation(line: 3229, column: 13, scope: !6094)
!6096 = !DILocation(line: 3229, column: 9, scope: !6083)
!6097 = !DILocation(line: 3230, column: 19, scope: !6094)
!6098 = !DILocation(line: 3230, column: 7, scope: !6094)
!6099 = !DILocation(line: 3231, column: 3, scope: !6083)
!6100 = !DILocation(line: 3224, column: 45, scope: !6080)
!6101 = !DILocation(line: 3224, column: 49, scope: !6080)
!6102 = !DILocation(line: 3224, column: 43, scope: !6080)
!6103 = !DILocation(line: 3224, column: 8, scope: !6080)
!6104 = distinct !{!6104, !6081, !6105}
!6105 = !DILocation(line: 3231, column: 3, scope: !6074)
!6106 = !DILocation(line: 3232, column: 6, scope: !6075)
!6107 = !DILocation(line: 3235, column: 18, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 3235, column: 8)
!6109 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 3234, column: 6)
!6110 = !DILocation(line: 3235, column: 21, scope: !6108)
!6111 = !DILocation(line: 3235, column: 16, scope: !6108)
!6112 = !DILocation(line: 3235, column: 13, scope: !6108)
!6113 = !DILocation(line: 3235, column: 35, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 3235, column: 8)
!6115 = !DILocation(line: 3235, column: 8, scope: !6108)
!6116 = !DILocation(line: 3235, column: 45, scope: !6114)
!6117 = !DILocation(line: 3235, column: 49, scope: !6114)
!6118 = !DILocation(line: 3235, column: 43, scope: !6114)
!6119 = !DILocation(line: 3235, column: 8, scope: !6114)
!6120 = distinct !{!6120, !6115, !6121}
!6121 = !DILocation(line: 3235, column: 57, scope: !6108)
!6122 = !DILocation(line: 3237, column: 14, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 3236, column: 3)
!6124 = !DILocation(line: 3237, column: 27, scope: !6123)
!6125 = !DILocation(line: 3237, column: 31, scope: !6123)
!6126 = !DILocation(line: 3237, column: 5, scope: !6123)
!6127 = !DILocation(line: 3238, column: 9, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 3238, column: 9)
!6129 = !DILocation(line: 3238, column: 13, scope: !6128)
!6130 = !DILocation(line: 3238, column: 9, scope: !6123)
!6131 = !DILocation(line: 3239, column: 16, scope: !6128)
!6132 = !DILocation(line: 3239, column: 30, scope: !6128)
!6133 = !DILocation(line: 3240, column: 9, scope: !6128)
!6134 = !DILocation(line: 3239, column: 7, scope: !6128)
!6135 = !DILocation(line: 3242, column: 16, scope: !6128)
!6136 = !DILocation(line: 3242, column: 7, scope: !6128)
!6137 = !DILocation(line: 3243, column: 9, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 3243, column: 9)
!6139 = !DILocation(line: 3243, column: 13, scope: !6138)
!6140 = !DILocation(line: 3243, column: 9, scope: !6123)
!6141 = !DILocalVariable(name: "lab", scope: !6142, file: !3, line: 3245, type: !1285)
!6142 = distinct !DILexicalBlock(scope: !6138, file: !3, line: 3244, column: 7)
!6143 = !DILocation(line: 3245, column: 13, scope: !6142)
!6144 = !DILocation(line: 3245, column: 30, scope: !6142)
!6145 = !DILocation(line: 3245, column: 34, scope: !6142)
!6146 = !DILocation(line: 3245, column: 19, scope: !6142)
!6147 = !DILocation(line: 3246, column: 18, scope: !6142)
!6148 = !DILocation(line: 3246, column: 32, scope: !6142)
!6149 = !DILocation(line: 3247, column: 11, scope: !6142)
!6150 = !DILocation(line: 3246, column: 9, scope: !6142)
!6151 = !DILocation(line: 3248, column: 7, scope: !6142)
!6152 = !DILocation(line: 3250, column: 16, scope: !6138)
!6153 = !DILocation(line: 3250, column: 7, scope: !6138)
!6154 = !DILocation(line: 3251, column: 9, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 3251, column: 9)
!6156 = !DILocation(line: 3251, column: 13, scope: !6155)
!6157 = !DILocation(line: 3251, column: 9, scope: !6123)
!6158 = !DILocation(line: 3252, column: 19, scope: !6155)
!6159 = !DILocation(line: 3252, column: 7, scope: !6155)
!6160 = !DILocation(line: 3255, column: 2, scope: !6065)
!6161 = !DILocation(line: 3257, column: 15, scope: !6051)
!6162 = !DILocation(line: 3257, column: 18, scope: !6051)
!6163 = !DILocation(line: 3257, column: 7, scope: !6051)
!6164 = !DILocation(line: 3261, column: 4, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 3258, column: 2)
!6166 = !DILocalVariable(name: "c", scope: !6167, file: !3, line: 3265, type: !2837)
!6167 = distinct !DILexicalBlock(scope: !6165, file: !3, line: 3264, column: 4)
!6168 = !DILocation(line: 3265, column: 15, scope: !6167)
!6169 = !DILocation(line: 3266, column: 15, scope: !6167)
!6170 = !DILocation(line: 3266, column: 6, scope: !6167)
!6171 = !DILocation(line: 3267, column: 15, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6167, file: !3, line: 3267, column: 6)
!6173 = !DILocation(line: 3267, column: 18, scope: !6172)
!6174 = !DILocation(line: 3267, column: 20, scope: !6172)
!6175 = !DILocation(line: 3267, column: 27, scope: !6172)
!6176 = !DILocation(line: 3267, column: 13, scope: !6172)
!6177 = !DILocation(line: 3267, column: 11, scope: !6172)
!6178 = !DILocation(line: 3267, column: 40, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3267, column: 6)
!6180 = !DILocation(line: 3267, column: 6, scope: !6172)
!6181 = !DILocation(line: 3269, column: 15, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6179, file: !3, line: 3268, column: 8)
!6183 = !DILocation(line: 3269, column: 3, scope: !6182)
!6184 = !DILocation(line: 3270, column: 7, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6182, file: !3, line: 3270, column: 7)
!6186 = !DILocation(line: 3270, column: 10, scope: !6185)
!6187 = !DILocation(line: 3270, column: 7, scope: !6182)
!6188 = !DILocation(line: 3272, column: 16, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6185, file: !3, line: 3271, column: 5)
!6190 = !DILocation(line: 3272, column: 7, scope: !6189)
!6191 = !DILocation(line: 3273, column: 27, scope: !6189)
!6192 = !DILocation(line: 3273, column: 32, scope: !6189)
!6193 = !DILocation(line: 3273, column: 35, scope: !6189)
!6194 = !DILocation(line: 3273, column: 7, scope: !6189)
!6195 = !DILocation(line: 3274, column: 19, scope: !6189)
!6196 = !DILocation(line: 3274, column: 7, scope: !6189)
!6197 = !DILocation(line: 3275, column: 5, scope: !6189)
!6198 = !DILocation(line: 3276, column: 23, scope: !6182)
!6199 = !DILocation(line: 3276, column: 28, scope: !6182)
!6200 = !DILocation(line: 3276, column: 31, scope: !6182)
!6201 = !DILocation(line: 3276, column: 3, scope: !6182)
!6202 = !DILocation(line: 3277, column: 15, scope: !6182)
!6203 = !DILocation(line: 3277, column: 3, scope: !6182)
!6204 = !DILocation(line: 3278, column: 7, scope: !6205)
!6205 = distinct !DILexicalBlock(scope: !6182, file: !3, line: 3278, column: 7)
!6206 = !DILocation(line: 3278, column: 10, scope: !6205)
!6207 = !DILocation(line: 3278, column: 7, scope: !6182)
!6208 = !DILocation(line: 3279, column: 17, scope: !6205)
!6209 = !DILocation(line: 3279, column: 5, scope: !6205)
!6210 = !DILocation(line: 3280, column: 8, scope: !6182)
!6211 = !DILocation(line: 3267, column: 47, scope: !6179)
!6212 = !DILocation(line: 3267, column: 50, scope: !6179)
!6213 = !DILocation(line: 3267, column: 45, scope: !6179)
!6214 = !DILocation(line: 3267, column: 6, scope: !6179)
!6215 = distinct !{!6215, !6180, !6216}
!6216 = !DILocation(line: 3280, column: 8, scope: !6172)
!6217 = !DILocation(line: 3282, column: 4, scope: !6165)
!6218 = !DILocation(line: 3285, column: 13, scope: !6165)
!6219 = !DILocation(line: 3285, column: 40, scope: !6165)
!6220 = !DILocation(line: 3285, column: 43, scope: !6165)
!6221 = !DILocation(line: 3285, column: 45, scope: !6165)
!6222 = !DILocation(line: 3285, column: 53, scope: !6165)
!6223 = !DILocation(line: 3285, column: 4, scope: !6165)
!6224 = !DILocation(line: 3286, column: 24, scope: !6165)
!6225 = !DILocation(line: 3286, column: 29, scope: !6165)
!6226 = !DILocation(line: 3286, column: 32, scope: !6165)
!6227 = !DILocation(line: 3286, column: 34, scope: !6165)
!6228 = !DILocation(line: 3286, column: 42, scope: !6165)
!6229 = !DILocation(line: 3286, column: 4, scope: !6165)
!6230 = !DILocation(line: 3287, column: 4, scope: !6165)
!6231 = !DILocation(line: 3289, column: 20, scope: !6051)
!6232 = !DILocation(line: 3289, column: 7, scope: !6051)
!6233 = !DILocation(line: 3292, column: 11, scope: !6234)
!6234 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 3292, column: 11)
!6235 = !DILocation(line: 3292, column: 14, scope: !6234)
!6236 = !DILocation(line: 3292, column: 11, scope: !6051)
!6237 = !DILocation(line: 3293, column: 6, scope: !6234)
!6238 = !DILocation(line: 3293, column: 9, scope: !6234)
!6239 = !DILocation(line: 3293, column: 4, scope: !6234)
!6240 = !DILocation(line: 3293, column: 21, scope: !6234)
!6241 = !DILocation(line: 3293, column: 2, scope: !6234)
!6242 = !DILocation(line: 3295, column: 16, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 3295, column: 16)
!6244 = !DILocation(line: 3295, column: 19, scope: !6243)
!6245 = !DILocation(line: 3295, column: 16, scope: !6234)
!6246 = !DILocation(line: 3296, column: 6, scope: !6243)
!6247 = !DILocation(line: 3296, column: 9, scope: !6243)
!6248 = !DILocation(line: 3296, column: 4, scope: !6243)
!6249 = !DILocation(line: 3296, column: 2, scope: !6243)
!6250 = !DILocation(line: 3300, column: 4, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 3299, column: 2)
!6252 = !DILocation(line: 3302, column: 12, scope: !6253)
!6253 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 3301, column: 6)
!6254 = !DILocation(line: 3302, column: 15, scope: !6253)
!6255 = !DILocation(line: 3302, column: 10, scope: !6253)
!6256 = !DILocation(line: 3303, column: 13, scope: !6253)
!6257 = !DILocation(line: 3304, column: 12, scope: !6258)
!6258 = distinct !DILexicalBlock(scope: !6253, file: !3, line: 3304, column: 12)
!6259 = !DILocation(line: 3304, column: 14, scope: !6258)
!6260 = !DILocation(line: 3304, column: 12, scope: !6253)
!6261 = !DILocation(line: 3305, column: 3, scope: !6258)
!6262 = !DILocation(line: 3306, column: 6, scope: !6253)
!6263 = !DILocation(line: 3307, column: 11, scope: !6251)
!6264 = !DILocation(line: 3307, column: 14, scope: !6251)
!6265 = !DILocation(line: 3307, column: 24, scope: !6251)
!6266 = distinct !{!6266, !6250, !6267}
!6267 = !DILocation(line: 3307, column: 31, scope: !6251)
!6268 = !DILocation(line: 3308, column: 8, scope: !6251)
!6269 = !DILocation(line: 3308, column: 11, scope: !6251)
!6270 = !DILocation(line: 3308, column: 6, scope: !6251)
!6271 = distinct !{!6271, !6049, !6272}
!6272 = !DILocation(line: 3310, column: 5, scope: !2585)
!6273 = !DILocation(line: 3311, column: 1, scope: !2585)
!6274 = distinct !DISubprogram(name: "debug_eh_tree", scope: !3, file: !3, line: 3316, type: !6275, scopeLine: 3317, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6275 = !DISubroutineType(types: !6276)
!6276 = !{null, !1860}
!6277 = !DILocalVariable(name: "fn", arg: 1, scope: !6274, file: !3, line: 3316, type: !1860)
!6278 = !DILocation(line: 3316, column: 33, scope: !6274)
!6279 = !DILocation(line: 3318, column: 17, scope: !6274)
!6280 = !DILocation(line: 3318, column: 25, scope: !6274)
!6281 = !DILocation(line: 3318, column: 3, scope: !6274)
!6282 = !DILocation(line: 3319, column: 1, scope: !6274)
!6283 = distinct !DISubprogram(name: "verify_eh_tree", scope: !3, file: !3, line: 3324, type: !6275, scopeLine: 3325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6284 = !DILocalVariable(name: "fun", arg: 1, scope: !6283, file: !3, line: 3324, type: !1860)
!6285 = !DILocation(line: 3324, column: 34, scope: !6283)
!6286 = !DILocalVariable(name: "r", scope: !6283, file: !3, line: 3326, type: !1087)
!6287 = !DILocation(line: 3326, column: 13, scope: !6283)
!6288 = !DILocalVariable(name: "outer", scope: !6283, file: !3, line: 3326, type: !1087)
!6289 = !DILocation(line: 3326, column: 16, scope: !6283)
!6290 = !DILocalVariable(name: "nvisited_lp", scope: !6283, file: !3, line: 3327, type: !6)
!6291 = !DILocation(line: 3327, column: 7, scope: !6283)
!6292 = !DILocalVariable(name: "nvisited_r", scope: !6283, file: !3, line: 3327, type: !6)
!6293 = !DILocation(line: 3327, column: 20, scope: !6283)
!6294 = !DILocalVariable(name: "count_lp", scope: !6283, file: !3, line: 3328, type: !6)
!6295 = !DILocation(line: 3328, column: 7, scope: !6283)
!6296 = !DILocalVariable(name: "count_r", scope: !6283, file: !3, line: 3328, type: !6)
!6297 = !DILocation(line: 3328, column: 17, scope: !6283)
!6298 = !DILocalVariable(name: "depth", scope: !6283, file: !3, line: 3328, type: !6)
!6299 = !DILocation(line: 3328, column: 26, scope: !6283)
!6300 = !DILocalVariable(name: "i", scope: !6283, file: !3, line: 3328, type: !6)
!6301 = !DILocation(line: 3328, column: 33, scope: !6283)
!6302 = !DILocalVariable(name: "lp", scope: !6283, file: !3, line: 3329, type: !2489)
!6303 = !DILocation(line: 3329, column: 18, scope: !6283)
!6304 = !DILocalVariable(name: "err", scope: !6283, file: !3, line: 3330, type: !1227)
!6305 = !DILocation(line: 3330, column: 8, scope: !6283)
!6306 = !DILocation(line: 3332, column: 8, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3332, column: 7)
!6308 = !DILocation(line: 3332, column: 13, scope: !6307)
!6309 = !DILocation(line: 3332, column: 17, scope: !6307)
!6310 = !DILocation(line: 3332, column: 7, scope: !6283)
!6311 = !DILocation(line: 3333, column: 5, scope: !6307)
!6312 = !DILocation(line: 3335, column: 11, scope: !6283)
!6313 = !DILocation(line: 3336, column: 10, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3336, column: 3)
!6315 = !DILocation(line: 3336, column: 8, scope: !6314)
!6316 = !DILocation(line: 3336, column: 15, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 3336, column: 3)
!6318 = !DILocation(line: 3336, column: 3, scope: !6314)
!6319 = !DILocation(line: 3337, column: 9, scope: !6320)
!6320 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 3337, column: 9)
!6321 = !DILocation(line: 3337, column: 9, scope: !6317)
!6322 = !DILocation(line: 3339, column: 6, scope: !6323)
!6323 = distinct !DILexicalBlock(scope: !6324, file: !3, line: 3339, column: 6)
!6324 = distinct !DILexicalBlock(scope: !6320, file: !3, line: 3338, column: 7)
!6325 = !DILocation(line: 3339, column: 9, scope: !6323)
!6326 = !DILocation(line: 3339, column: 18, scope: !6323)
!6327 = !DILocation(line: 3339, column: 15, scope: !6323)
!6328 = !DILocation(line: 3339, column: 6, scope: !6324)
!6329 = !DILocation(line: 3340, column: 11, scope: !6323)
!6330 = !DILocation(line: 3340, column: 4, scope: !6323)
!6331 = !DILocation(line: 3343, column: 56, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 3342, column: 4)
!6333 = !DILocation(line: 3343, column: 59, scope: !6332)
!6334 = !DILocation(line: 3343, column: 6, scope: !6332)
!6335 = !DILocation(line: 3344, column: 10, scope: !6332)
!6336 = !DILocation(line: 3346, column: 7, scope: !6324)
!6337 = !DILocation(line: 3336, column: 69, scope: !6317)
!6338 = !DILocation(line: 3336, column: 3, scope: !6317)
!6339 = distinct !{!6339, !6318, !6340}
!6340 = !DILocation(line: 3346, column: 7, scope: !6314)
!6341 = !DILocation(line: 3348, column: 12, scope: !6283)
!6342 = !DILocation(line: 3349, column: 10, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3349, column: 3)
!6344 = !DILocation(line: 3349, column: 8, scope: !6343)
!6345 = !DILocation(line: 3349, column: 15, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 3349, column: 3)
!6347 = !DILocation(line: 3349, column: 3, scope: !6343)
!6348 = !DILocation(line: 3350, column: 9, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 3350, column: 9)
!6350 = !DILocation(line: 3350, column: 9, scope: !6346)
!6351 = !DILocation(line: 3352, column: 6, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6353, file: !3, line: 3352, column: 6)
!6353 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 3351, column: 7)
!6354 = !DILocation(line: 3352, column: 10, scope: !6352)
!6355 = !DILocation(line: 3352, column: 19, scope: !6352)
!6356 = !DILocation(line: 3352, column: 16, scope: !6352)
!6357 = !DILocation(line: 3352, column: 6, scope: !6353)
!6358 = !DILocation(line: 3353, column: 12, scope: !6352)
!6359 = !DILocation(line: 3353, column: 4, scope: !6352)
!6360 = !DILocation(line: 3356, column: 48, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 3355, column: 4)
!6362 = !DILocation(line: 3356, column: 52, scope: !6361)
!6363 = !DILocation(line: 3356, column: 6, scope: !6361)
!6364 = !DILocation(line: 3357, column: 10, scope: !6361)
!6365 = !DILocation(line: 3359, column: 7, scope: !6353)
!6366 = !DILocation(line: 3349, column: 71, scope: !6346)
!6367 = !DILocation(line: 3349, column: 3, scope: !6346)
!6368 = distinct !{!6368, !6347, !6369}
!6369 = !DILocation(line: 3359, column: 7, scope: !6343)
!6370 = !DILocation(line: 3361, column: 36, scope: !6283)
!6371 = !DILocation(line: 3361, column: 23, scope: !6283)
!6372 = !DILocation(line: 3361, column: 9, scope: !6283)
!6373 = !DILocation(line: 3362, column: 9, scope: !6283)
!6374 = !DILocation(line: 3363, column: 7, scope: !6283)
!6375 = !DILocation(line: 3363, column: 12, scope: !6283)
!6376 = !DILocation(line: 3363, column: 16, scope: !6283)
!6377 = !DILocation(line: 3363, column: 5, scope: !6283)
!6378 = !DILocation(line: 3364, column: 3, scope: !6283)
!6379 = !DILocation(line: 3366, column: 11, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 3366, column: 11)
!6381 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3365, column: 5)
!6382 = !DILocation(line: 3366, column: 69, scope: !6380)
!6383 = !DILocation(line: 3366, column: 66, scope: !6380)
!6384 = !DILocation(line: 3366, column: 11, scope: !6381)
!6385 = !DILocation(line: 3368, column: 54, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6380, file: !3, line: 3367, column: 2)
!6387 = !DILocation(line: 3368, column: 57, scope: !6386)
!6388 = !DILocation(line: 3368, column: 4, scope: !6386)
!6389 = !DILocation(line: 3369, column: 8, scope: !6386)
!6390 = !DILocation(line: 3370, column: 2, scope: !6386)
!6391 = !DILocation(line: 3371, column: 11, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 3371, column: 11)
!6393 = !DILocation(line: 3371, column: 14, scope: !6392)
!6394 = !DILocation(line: 3371, column: 23, scope: !6392)
!6395 = !DILocation(line: 3371, column: 20, scope: !6392)
!6396 = !DILocation(line: 3371, column: 11, scope: !6381)
!6397 = !DILocation(line: 3373, column: 48, scope: !6398)
!6398 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 3372, column: 2)
!6399 = !DILocation(line: 3373, column: 51, scope: !6398)
!6400 = !DILocation(line: 3373, column: 4, scope: !6398)
!6401 = !DILocation(line: 3374, column: 8, scope: !6398)
!6402 = !DILocation(line: 3375, column: 2, scope: !6398)
!6403 = !DILocation(line: 3376, column: 11, scope: !6404)
!6404 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 3376, column: 11)
!6405 = !DILocation(line: 3376, column: 17, scope: !6404)
!6406 = !DILocation(line: 3376, column: 11, scope: !6381)
!6407 = !DILocation(line: 3378, column: 50, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 3377, column: 2)
!6409 = !DILocation(line: 3378, column: 53, scope: !6408)
!6410 = !DILocation(line: 3378, column: 4, scope: !6408)
!6411 = !DILocation(line: 3379, column: 8, scope: !6408)
!6412 = !DILocation(line: 3380, column: 2, scope: !6408)
!6413 = !DILocation(line: 3381, column: 17, scope: !6381)
!6414 = !DILocation(line: 3383, column: 17, scope: !6415)
!6415 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 3383, column: 7)
!6416 = !DILocation(line: 3383, column: 20, scope: !6415)
!6417 = !DILocation(line: 3383, column: 15, scope: !6415)
!6418 = !DILocation(line: 3383, column: 12, scope: !6415)
!6419 = !DILocation(line: 3383, column: 34, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 3383, column: 7)
!6421 = !DILocation(line: 3383, column: 7, scope: !6415)
!6422 = !DILocation(line: 3385, column: 8, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6424, file: !3, line: 3385, column: 8)
!6424 = distinct !DILexicalBlock(scope: !6420, file: !3, line: 3384, column: 2)
!6425 = !DILocation(line: 3385, column: 68, scope: !6423)
!6426 = !DILocation(line: 3385, column: 65, scope: !6423)
!6427 = !DILocation(line: 3385, column: 8, scope: !6424)
!6428 = !DILocation(line: 3387, column: 50, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6423, file: !3, line: 3386, column: 6)
!6430 = !DILocation(line: 3387, column: 54, scope: !6429)
!6431 = !DILocation(line: 3387, column: 8, scope: !6429)
!6432 = !DILocation(line: 3388, column: 12, scope: !6429)
!6433 = !DILocation(line: 3389, column: 6, scope: !6429)
!6434 = !DILocation(line: 3390, column: 8, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6424, file: !3, line: 3390, column: 8)
!6436 = !DILocation(line: 3390, column: 12, scope: !6435)
!6437 = !DILocation(line: 3390, column: 22, scope: !6435)
!6438 = !DILocation(line: 3390, column: 19, scope: !6435)
!6439 = !DILocation(line: 3390, column: 8, scope: !6424)
!6440 = !DILocation(line: 3392, column: 43, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6435, file: !3, line: 3391, column: 6)
!6442 = !DILocation(line: 3392, column: 47, scope: !6441)
!6443 = !DILocation(line: 3392, column: 8, scope: !6441)
!6444 = !DILocation(line: 3393, column: 12, scope: !6441)
!6445 = !DILocation(line: 3394, column: 6, scope: !6441)
!6446 = !DILocation(line: 3395, column: 15, scope: !6424)
!6447 = !DILocation(line: 3396, column: 2, scope: !6424)
!6448 = !DILocation(line: 3383, column: 44, scope: !6420)
!6449 = !DILocation(line: 3383, column: 48, scope: !6420)
!6450 = !DILocation(line: 3383, column: 42, scope: !6420)
!6451 = !DILocation(line: 3383, column: 7, scope: !6420)
!6452 = distinct !{!6452, !6421, !6453}
!6453 = !DILocation(line: 3396, column: 2, scope: !6415)
!6454 = !DILocation(line: 3398, column: 11, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 3398, column: 11)
!6456 = !DILocation(line: 3398, column: 14, scope: !6455)
!6457 = !DILocation(line: 3398, column: 11, scope: !6381)
!6458 = !DILocation(line: 3399, column: 10, scope: !6455)
!6459 = !DILocation(line: 3399, column: 8, scope: !6455)
!6460 = !DILocation(line: 3399, column: 17, scope: !6455)
!6461 = !DILocation(line: 3399, column: 20, scope: !6455)
!6462 = !DILocation(line: 3399, column: 15, scope: !6455)
!6463 = !DILocation(line: 3399, column: 32, scope: !6455)
!6464 = !DILocation(line: 3399, column: 2, scope: !6455)
!6465 = !DILocation(line: 3400, column: 16, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 3400, column: 16)
!6467 = !DILocation(line: 3400, column: 19, scope: !6466)
!6468 = !DILocation(line: 3400, column: 16, scope: !6455)
!6469 = !DILocation(line: 3401, column: 6, scope: !6466)
!6470 = !DILocation(line: 3401, column: 9, scope: !6466)
!6471 = !DILocation(line: 3401, column: 4, scope: !6466)
!6472 = !DILocation(line: 3401, column: 2, scope: !6466)
!6473 = !DILocation(line: 3404, column: 4, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 3403, column: 2)
!6475 = !DILocation(line: 3406, column: 12, scope: !6476)
!6476 = distinct !DILexicalBlock(scope: !6474, file: !3, line: 3405, column: 6)
!6477 = !DILocation(line: 3406, column: 15, scope: !6476)
!6478 = !DILocation(line: 3406, column: 10, scope: !6476)
!6479 = !DILocation(line: 3407, column: 12, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 3407, column: 12)
!6481 = !DILocation(line: 3407, column: 14, scope: !6480)
!6482 = !DILocation(line: 3407, column: 12, scope: !6476)
!6483 = !DILocation(line: 3408, column: 3, scope: !6480)
!6484 = !DILocation(line: 3409, column: 13, scope: !6476)
!6485 = !DILocation(line: 3410, column: 16, scope: !6476)
!6486 = !DILocation(line: 3410, column: 19, scope: !6476)
!6487 = !DILocation(line: 3410, column: 14, scope: !6476)
!6488 = !DILocation(line: 3411, column: 6, scope: !6476)
!6489 = !DILocation(line: 3412, column: 11, scope: !6474)
!6490 = !DILocation(line: 3412, column: 14, scope: !6474)
!6491 = !DILocation(line: 3412, column: 24, scope: !6474)
!6492 = distinct !{!6492, !6473, !6493}
!6493 = !DILocation(line: 3412, column: 31, scope: !6474)
!6494 = !DILocation(line: 3413, column: 8, scope: !6474)
!6495 = !DILocation(line: 3413, column: 11, scope: !6474)
!6496 = !DILocation(line: 3413, column: 6, scope: !6474)
!6497 = distinct !{!6497, !6378, !6498}
!6498 = !DILocation(line: 3415, column: 5, scope: !6283)
!6499 = !DILabel(scope: !6283, name: "region_done", file: !3, line: 3416)
!6500 = !DILocation(line: 3416, column: 2, scope: !6283)
!6501 = !DILocation(line: 3417, column: 7, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3417, column: 7)
!6503 = !DILocation(line: 3417, column: 13, scope: !6502)
!6504 = !DILocation(line: 3417, column: 7, scope: !6283)
!6505 = !DILocation(line: 3419, column: 44, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6502, file: !3, line: 3418, column: 5)
!6507 = !DILocation(line: 3419, column: 7, scope: !6506)
!6508 = !DILocation(line: 3420, column: 11, scope: !6506)
!6509 = !DILocation(line: 3421, column: 5, scope: !6506)
!6510 = !DILocation(line: 3422, column: 7, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3422, column: 7)
!6512 = !DILocation(line: 3422, column: 18, scope: !6511)
!6513 = !DILocation(line: 3422, column: 15, scope: !6511)
!6514 = !DILocation(line: 3422, column: 7, scope: !6283)
!6515 = !DILocation(line: 3424, column: 7, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6511, file: !3, line: 3423, column: 5)
!6517 = !DILocation(line: 3425, column: 11, scope: !6516)
!6518 = !DILocation(line: 3426, column: 5, scope: !6516)
!6519 = !DILocation(line: 3427, column: 7, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3427, column: 7)
!6521 = !DILocation(line: 3427, column: 19, scope: !6520)
!6522 = !DILocation(line: 3427, column: 16, scope: !6520)
!6523 = !DILocation(line: 3427, column: 7, scope: !6283)
!6524 = !DILocation(line: 3429, column: 7, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6520, file: !3, line: 3428, column: 5)
!6526 = !DILocation(line: 3430, column: 11, scope: !6525)
!6527 = !DILocation(line: 3431, column: 5, scope: !6525)
!6528 = !DILocation(line: 3433, column: 7, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3433, column: 7)
!6530 = !DILocation(line: 3433, column: 7, scope: !6283)
!6531 = !DILocation(line: 3435, column: 21, scope: !6532)
!6532 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 3434, column: 5)
!6533 = !DILocation(line: 3435, column: 29, scope: !6532)
!6534 = !DILocation(line: 3435, column: 7, scope: !6532)
!6535 = !DILocation(line: 3436, column: 7, scope: !6532)
!6536 = !DILocation(line: 3437, column: 5, scope: !6532)
!6537 = !DILocation(line: 3438, column: 1, scope: !6283)
!6538 = distinct !DISubprogram(name: "gt_ggc_mx_call_site_record_d", scope: !2644, file: !2644, line: 23, type: !1920, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6539 = !DILocalVariable(name: "x_p", arg: 1, scope: !6538, file: !2644, line: 23, type: !1390)
!6540 = !DILocation(line: 23, column: 37, scope: !6538)
!6541 = !DILocalVariable(name: "x", scope: !6538, file: !2644, line: 25, type: !6542)
!6542 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2511)
!6543 = !DILocation(line: 25, column: 37, scope: !6538)
!6544 = !DILocation(line: 25, column: 70, scope: !6538)
!6545 = !DILocation(line: 25, column: 41, scope: !6538)
!6546 = !DILocation(line: 26, column: 7, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6538, file: !2644, line: 26, column: 7)
!6548 = !DILocation(line: 26, column: 7, scope: !6538)
!6549 = !DILocation(line: 28, column: 7, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6547, file: !2644, line: 27, column: 5)
!6551 = !DILocation(line: 28, column: 7, scope: !6552)
!6552 = distinct !DILexicalBlock(scope: !6553, file: !2644, line: 28, column: 7)
!6553 = distinct !DILexicalBlock(scope: !6550, file: !2644, line: 28, column: 7)
!6554 = !DILocation(line: 28, column: 7, scope: !6553)
!6555 = !DILocation(line: 29, column: 5, scope: !6550)
!6556 = !DILocation(line: 30, column: 1, scope: !6538)
!6557 = distinct !DISubprogram(name: "gt_pch_nx_call_site_record_d", scope: !2644, file: !2644, line: 33, type: !1920, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6558 = !DILocalVariable(name: "x_p", arg: 1, scope: !6557, file: !2644, line: 33, type: !1390)
!6559 = !DILocation(line: 33, column: 37, scope: !6557)
!6560 = !DILocalVariable(name: "x", scope: !6557, file: !2644, line: 35, type: !6542)
!6561 = !DILocation(line: 35, column: 37, scope: !6557)
!6562 = !DILocation(line: 35, column: 70, scope: !6557)
!6563 = !DILocation(line: 35, column: 41, scope: !6557)
!6564 = !DILocation(line: 36, column: 27, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6557, file: !2644, line: 36, column: 7)
!6566 = !DILocation(line: 36, column: 30, scope: !6565)
!6567 = !DILocation(line: 36, column: 7, scope: !6565)
!6568 = !DILocation(line: 36, column: 7, scope: !6557)
!6569 = !DILocation(line: 38, column: 7, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6565, file: !2644, line: 37, column: 5)
!6571 = !DILocation(line: 38, column: 7, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6573, file: !2644, line: 38, column: 7)
!6573 = distinct !DILexicalBlock(scope: !6570, file: !2644, line: 38, column: 7)
!6574 = !DILocation(line: 38, column: 7, scope: !6573)
!6575 = !DILocation(line: 39, column: 5, scope: !6570)
!6576 = !DILocation(line: 40, column: 1, scope: !6557)
!6577 = distinct !DISubprogram(name: "gt_pch_p_18call_site_record_d", scope: !2644, file: !2644, line: 43, type: !6578, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6578 = !DISubroutineType(types: !6579)
!6579 = !{null, !1390, !1390, !6580, !1390}
!6580 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !2648, line: 38, baseType: !1944)
!6581 = !DILocalVariable(name: "this_obj", arg: 1, scope: !6577, file: !2644, line: 43, type: !1390)
!6582 = !DILocation(line: 43, column: 55, scope: !6577)
!6583 = !DILocalVariable(name: "x_p", arg: 2, scope: !6577, file: !2644, line: 44, type: !1390)
!6584 = !DILocation(line: 44, column: 8, scope: !6577)
!6585 = !DILocalVariable(name: "op", arg: 3, scope: !6577, file: !2644, line: 45, type: !6580)
!6586 = !DILocation(line: 45, column: 39, scope: !6577)
!6587 = !DILocalVariable(name: "cookie", arg: 4, scope: !6577, file: !2644, line: 46, type: !1390)
!6588 = !DILocation(line: 46, column: 25, scope: !6577)
!6589 = !DILocalVariable(name: "x", scope: !6577, file: !2644, line: 48, type: !6542)
!6590 = !DILocation(line: 48, column: 37, scope: !6577)
!6591 = !DILocation(line: 48, column: 87, scope: !6577)
!6592 = !DILocation(line: 48, column: 58, scope: !6577)
!6593 = !DILocation(line: 49, column: 16, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6577, file: !2644, line: 49, column: 7)
!6595 = !DILocation(line: 49, column: 7, scope: !6594)
!6596 = !DILocation(line: 49, column: 22, scope: !6594)
!6597 = !DILocation(line: 49, column: 19, scope: !6594)
!6598 = !DILocation(line: 49, column: 7, scope: !6577)
!6599 = !DILocation(line: 50, column: 5, scope: !6594)
!6600 = !DILocation(line: 50, column: 13, scope: !6594)
!6601 = !DILocation(line: 50, column: 16, scope: !6594)
!6602 = !DILocation(line: 50, column: 9, scope: !6594)
!6603 = !DILocation(line: 50, column: 30, scope: !6594)
!6604 = !DILocation(line: 51, column: 1, scope: !6577)
!6605 = distinct !DISubprogram(name: "VEC_eh_region_gc_reserve", scope: !10, file: !10, line: 185, type: !6606, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6606 = !DISubroutineType(types: !6607)
!6607 = !{!6, !2746, !6}
!6608 = !DILocalVariable(name: "vec_", arg: 1, scope: !6605, file: !10, line: 185, type: !2746)
!6609 = !DILocation(line: 185, column: 1, scope: !6605)
!6610 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6605, file: !10, line: 185, type: !6)
!6611 = !DILocalVariable(name: "extend", scope: !6605, file: !10, line: 185, type: !6)
!6612 = !DILocation(line: 185, column: 1, scope: !6613)
!6613 = distinct !DILexicalBlock(scope: !6605, file: !10, line: 185, column: 1)
!6614 = distinct !DISubprogram(name: "VEC_eh_region_base_quick_push", scope: !10, file: !10, line: 184, type: !6615, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6615 = !DISubroutineType(types: !6616)
!6616 = !{!2745, !4053, !1087}
!6617 = !DILocalVariable(name: "vec_", arg: 1, scope: !6614, file: !10, line: 184, type: !4053)
!6618 = !DILocation(line: 184, column: 1, scope: !6614)
!6619 = !DILocalVariable(name: "obj_", arg: 2, scope: !6614, file: !10, line: 184, type: !1087)
!6620 = !DILocalVariable(name: "slot_", scope: !6614, file: !10, line: 184, type: !2745)
!6621 = distinct !DISubprogram(name: "VEC_eh_region_base_space", scope: !10, file: !10, line: 184, type: !6622, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6622 = !DISubroutineType(types: !6623)
!6623 = !{!6, !4053, !6}
!6624 = !DILocalVariable(name: "vec_", arg: 1, scope: !6621, file: !10, line: 184, type: !4053)
!6625 = !DILocation(line: 184, column: 1, scope: !6621)
!6626 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6621, file: !10, line: 184, type: !6)
!6627 = distinct !DISubprogram(name: "VEC_eh_landing_pad_gc_reserve", scope: !10, file: !10, line: 189, type: !6628, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6628 = !DISubroutineType(types: !6629)
!6629 = !{!6, !2754, !6}
!6630 = !DILocalVariable(name: "vec_", arg: 1, scope: !6627, file: !10, line: 189, type: !2754)
!6631 = !DILocation(line: 189, column: 1, scope: !6627)
!6632 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6627, file: !10, line: 189, type: !6)
!6633 = !DILocalVariable(name: "extend", scope: !6627, file: !10, line: 189, type: !6)
!6634 = !DILocation(line: 189, column: 1, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6627, file: !10, line: 189, column: 1)
!6636 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_quick_push", scope: !10, file: !10, line: 188, type: !6637, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6637 = !DISubroutineType(types: !6638)
!6638 = !{!2753, !3937, !2489}
!6639 = !DILocalVariable(name: "vec_", arg: 1, scope: !6636, file: !10, line: 188, type: !3937)
!6640 = !DILocation(line: 188, column: 1, scope: !6636)
!6641 = !DILocalVariable(name: "obj_", arg: 2, scope: !6636, file: !10, line: 188, type: !2489)
!6642 = !DILocalVariable(name: "slot_", scope: !6636, file: !10, line: 188, type: !2753)
!6643 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_space", scope: !10, file: !10, line: 188, type: !6644, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6644 = !DISubroutineType(types: !6645)
!6645 = !{!6, !3937, !6}
!6646 = !DILocalVariable(name: "vec_", arg: 1, scope: !6643, file: !10, line: 188, type: !3937)
!6647 = !DILocation(line: 188, column: 1, scope: !6643)
!6648 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6643, file: !10, line: 188, type: !6)
!6649 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !146, file: !146, line: 182, type: !6650, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6650 = !DISubroutineType(types: !6651)
!6651 = !{!11, !6652}
!6652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6653, size: 64)
!6653 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1967)
!6654 = !DILocalVariable(name: "vec_", arg: 1, scope: !6649, file: !146, line: 182, type: !6652)
!6655 = !DILocation(line: 182, column: 1, scope: !6649)
!6656 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !146, file: !146, line: 183, type: !6657, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6657 = !DISubroutineType(types: !6658)
!6658 = !{!1473, !6659, !1109}
!6659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64)
!6660 = !DILocalVariable(name: "vec_", arg: 1, scope: !6656, file: !146, line: 183, type: !6659)
!6661 = !DILocation(line: 183, column: 1, scope: !6656)
!6662 = !DILocalVariable(name: "obj_", arg: 2, scope: !6656, file: !146, line: 183, type: !1109)
!6663 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !146, file: !146, line: 183, type: !6664, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6664 = !DISubroutineType(types: !6665)
!6665 = !{!6, !6659, !6}
!6666 = !DILocalVariable(name: "vec_", arg: 1, scope: !6663, file: !146, line: 183, type: !6659)
!6667 = !DILocation(line: 183, column: 1, scope: !6663)
!6668 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6663, file: !146, line: 183, type: !6)
!6669 = !DILocalVariable(name: "extend", scope: !6663, file: !146, line: 183, type: !6)
!6670 = !DILocation(line: 183, column: 1, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !6663, file: !146, line: 183, column: 1)
!6672 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !146, file: !146, line: 182, type: !6673, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6673 = !DISubroutineType(types: !6674)
!6674 = !{!1473, !6675, !1109}
!6675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1967, size: 64)
!6676 = !DILocalVariable(name: "vec_", arg: 1, scope: !6672, file: !146, line: 182, type: !6675)
!6677 = !DILocation(line: 182, column: 1, scope: !6672)
!6678 = !DILocalVariable(name: "obj_", arg: 2, scope: !6672, file: !146, line: 182, type: !1109)
!6679 = !DILocalVariable(name: "slot_", scope: !6672, file: !146, line: 182, type: !1473)
!6680 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !146, file: !146, line: 182, type: !6681, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6681 = !DISubroutineType(types: !6682)
!6682 = !{!6, !6675, !6}
!6683 = !DILocalVariable(name: "vec_", arg: 1, scope: !6680, file: !146, line: 182, type: !6675)
!6684 = !DILocation(line: 182, column: 1, scope: !6680)
!6685 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6680, file: !146, line: 182, type: !6)
!6686 = distinct !DISubprogram(name: "VEC_uchar_base_length", scope: !2499, file: !2499, line: 27, type: !6687, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6687 = !DISubroutineType(types: !6688)
!6688 = !{!11, !6689}
!6689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6690, size: 64)
!6690 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2503)
!6691 = !DILocalVariable(name: "vec_", arg: 1, scope: !6686, file: !2499, line: 27, type: !6689)
!6692 = !DILocation(line: 27, column: 1, scope: !6686)
!6693 = distinct !DISubprogram(name: "push_uleb128", scope: !3, file: !3, line: 2681, type: !6694, scopeLine: 2682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6694 = !DISubroutineType(types: !6695)
!6695 = !{null, !6696, !11}
!6696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2497, size: 64)
!6697 = !DILocalVariable(name: "data_area", arg: 1, scope: !6693, file: !3, line: 2681, type: !6696)
!6698 = !DILocation(line: 2681, column: 33, scope: !6693)
!6699 = !DILocalVariable(name: "value", arg: 2, scope: !6693, file: !3, line: 2681, type: !11)
!6700 = !DILocation(line: 2681, column: 57, scope: !6693)
!6701 = !DILocation(line: 2683, column: 3, scope: !6693)
!6702 = !DILocalVariable(name: "byte", scope: !6703, file: !3, line: 2685, type: !1227)
!6703 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 2684, column: 5)
!6704 = !DILocation(line: 2685, column: 21, scope: !6703)
!6705 = !DILocation(line: 2685, column: 28, scope: !6703)
!6706 = !DILocation(line: 2685, column: 34, scope: !6703)
!6707 = !DILocation(line: 2686, column: 13, scope: !6703)
!6708 = !DILocation(line: 2687, column: 11, scope: !6709)
!6709 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 2687, column: 11)
!6710 = !DILocation(line: 2687, column: 11, scope: !6703)
!6711 = !DILocation(line: 2688, column: 7, scope: !6709)
!6712 = !DILocation(line: 2688, column: 2, scope: !6709)
!6713 = !DILocation(line: 2689, column: 7, scope: !6703)
!6714 = !DILocation(line: 2690, column: 5, scope: !6703)
!6715 = !DILocation(line: 2691, column: 10, scope: !6693)
!6716 = distinct !{!6716, !6701, !6717}
!6717 = !DILocation(line: 2691, column: 15, scope: !6693)
!6718 = !DILocation(line: 2692, column: 1, scope: !6693)
!6719 = distinct !DISubprogram(name: "VEC_uchar_gc_safe_push", scope: !2499, file: !2499, line: 29, type: !6720, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6720 = !DISubroutineType(types: !6721)
!6721 = !{!6722, !6696, !6723}
!6722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2510, size: 64)
!6723 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2510)
!6724 = !DILocalVariable(name: "vec_", arg: 1, scope: !6719, file: !2499, line: 29, type: !6696)
!6725 = !DILocation(line: 29, column: 1, scope: !6719)
!6726 = !DILocalVariable(name: "obj_", arg: 2, scope: !6719, file: !2499, line: 29, type: !6723)
!6727 = distinct !DISubprogram(name: "VEC_uchar_gc_reserve", scope: !2499, file: !2499, line: 29, type: !6728, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6728 = !DISubroutineType(types: !6729)
!6729 = !{!6, !6696, !6}
!6730 = !DILocalVariable(name: "vec_", arg: 1, scope: !6727, file: !2499, line: 29, type: !6696)
!6731 = !DILocation(line: 29, column: 1, scope: !6727)
!6732 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6727, file: !2499, line: 29, type: !6)
!6733 = !DILocalVariable(name: "extend", scope: !6727, file: !2499, line: 29, type: !6)
!6734 = !DILocation(line: 29, column: 1, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6727, file: !2499, line: 29, column: 1)
!6736 = distinct !DISubprogram(name: "VEC_uchar_base_quick_push", scope: !2499, file: !2499, line: 27, type: !6737, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6737 = !DISubroutineType(types: !6738)
!6738 = !{!6722, !6739, !2510}
!6739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2503, size: 64)
!6740 = !DILocalVariable(name: "vec_", arg: 1, scope: !6736, file: !2499, line: 27, type: !6739)
!6741 = !DILocation(line: 27, column: 1, scope: !6736)
!6742 = !DILocalVariable(name: "obj_", arg: 2, scope: !6736, file: !2499, line: 27, type: !2510)
!6743 = !DILocalVariable(name: "slot_", scope: !6736, file: !2499, line: 27, type: !6722)
!6744 = distinct !DISubprogram(name: "VEC_uchar_base_space", scope: !2499, file: !2499, line: 27, type: !6745, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6745 = !DISubroutineType(types: !6746)
!6746 = !{!6, !6739, !6}
!6747 = !DILocalVariable(name: "vec_", arg: 1, scope: !6744, file: !2499, line: 27, type: !6739)
!6748 = !DILocation(line: 27, column: 1, scope: !6744)
!6749 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6744, file: !2499, line: 27, type: !6)
!6750 = distinct !DISubprogram(name: "finish_eh_generation", scope: !3, file: !3, line: 1407, type: !2698, scopeLine: 1408, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6751 = !DILocalVariable(name: "bb", scope: !6750, file: !3, line: 1409, type: !1870)
!6752 = !DILocation(line: 1409, column: 15, scope: !6750)
!6753 = !DILocation(line: 1415, column: 5, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6750, file: !3, line: 1412, column: 7)
!6755 = !DILocation(line: 1416, column: 3, scope: !6750)
!6756 = !DILocation(line: 1420, column: 28, scope: !6757)
!6757 = distinct !DILexicalBlock(scope: !6750, file: !3, line: 1418, column: 7)
!6758 = !DILocation(line: 1420, column: 10, scope: !6757)
!6759 = !DILocation(line: 1420, column: 46, scope: !6757)
!6760 = !DILocation(line: 1420, column: 52, scope: !6757)
!6761 = !DILocation(line: 1418, column: 7, scope: !6750)
!6762 = !DILocation(line: 1421, column: 5, scope: !6757)
!6763 = !DILocation(line: 1424, column: 3, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6750, file: !3, line: 1424, column: 3)
!6765 = !DILocation(line: 1424, column: 3, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 1424, column: 3)
!6767 = !DILocalVariable(name: "lp", scope: !6768, file: !3, line: 1426, type: !2489)
!6768 = distinct !DILexicalBlock(scope: !6766, file: !3, line: 1425, column: 5)
!6769 = !DILocation(line: 1426, column: 22, scope: !6768)
!6770 = !DILocalVariable(name: "ei", scope: !6768, file: !3, line: 1427, type: !5626)
!6771 = !DILocation(line: 1427, column: 21, scope: !6768)
!6772 = !DILocalVariable(name: "e", scope: !6768, file: !3, line: 1428, type: !1417)
!6773 = !DILocation(line: 1428, column: 12, scope: !6768)
!6774 = !DILocation(line: 1430, column: 41, scope: !6768)
!6775 = !DILocation(line: 1430, column: 12, scope: !6768)
!6776 = !DILocation(line: 1430, column: 10, scope: !6768)
!6777 = !DILocation(line: 1432, column: 7, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6768, file: !3, line: 1432, column: 7)
!6779 = !DILocation(line: 1432, column: 7, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1432, column: 7)
!6781 = !DILocation(line: 1433, column: 6, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6780, file: !3, line: 1433, column: 6)
!6783 = !DILocation(line: 1433, column: 9, scope: !6782)
!6784 = !DILocation(line: 1433, column: 15, scope: !6782)
!6785 = !DILocation(line: 1433, column: 6, scope: !6780)
!6786 = !DILocation(line: 1434, column: 4, scope: !6782)
!6787 = !DILocation(line: 1433, column: 17, scope: !6782)
!6788 = distinct !{!6788, !6777, !6789}
!6789 = !DILocation(line: 1434, column: 4, scope: !6778)
!6790 = !DILocation(line: 1441, column: 7, scope: !6768)
!6791 = !DILocation(line: 1442, column: 11, scope: !6792)
!6792 = distinct !DILexicalBlock(scope: !6768, file: !3, line: 1442, column: 11)
!6793 = !DILocation(line: 1442, column: 14, scope: !6792)
!6794 = !DILocation(line: 1442, column: 11, scope: !6768)
!6795 = !DILocation(line: 1444, column: 4, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6792, file: !3, line: 1443, column: 2)
!6797 = !DILocation(line: 1446, column: 24, scope: !6796)
!6798 = !DILocation(line: 1446, column: 27, scope: !6796)
!6799 = !DILocation(line: 1446, column: 4, scope: !6796)
!6800 = !DILocation(line: 1447, column: 17, scope: !6796)
!6801 = !DILocation(line: 1447, column: 4, scope: !6796)
!6802 = !DILocation(line: 1447, column: 7, scope: !6796)
!6803 = !DILocation(line: 1447, column: 13, scope: !6796)
!6804 = !DILocation(line: 1450, column: 2, scope: !6796)
!6805 = !DILocation(line: 1451, column: 5, scope: !6768)
!6806 = distinct !{!6806, !6763, !6807}
!6807 = !DILocation(line: 1451, column: 5, scope: !6764)
!6808 = !DILocation(line: 1452, column: 1, scope: !6750)
!6809 = distinct !DISubprogram(name: "dw2_build_landing_pads", scope: !3, file: !3, line: 958, type: !2698, scopeLine: 959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6810 = !DILocalVariable(name: "i", scope: !6809, file: !3, line: 960, type: !6)
!6811 = !DILocation(line: 960, column: 7, scope: !6809)
!6812 = !DILocalVariable(name: "lp", scope: !6809, file: !3, line: 961, type: !2489)
!6813 = !DILocation(line: 961, column: 18, scope: !6809)
!6814 = !DILocation(line: 963, column: 10, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6809, file: !3, line: 963, column: 3)
!6816 = !DILocation(line: 963, column: 8, scope: !6815)
!6817 = !DILocation(line: 963, column: 15, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6815, file: !3, line: 963, column: 3)
!6819 = !DILocation(line: 963, column: 3, scope: !6815)
!6820 = !DILocalVariable(name: "region", scope: !6821, file: !3, line: 965, type: !1087)
!6821 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 964, column: 5)
!6822 = !DILocation(line: 965, column: 17, scope: !6821)
!6823 = !DILocalVariable(name: "bb", scope: !6821, file: !3, line: 966, type: !1870)
!6824 = !DILocation(line: 966, column: 19, scope: !6821)
!6825 = !DILocalVariable(name: "seq", scope: !6821, file: !3, line: 967, type: !1285)
!6826 = !DILocation(line: 967, column: 11, scope: !6821)
!6827 = !DILocalVariable(name: "e", scope: !6821, file: !3, line: 968, type: !1417)
!6828 = !DILocation(line: 968, column: 12, scope: !6821)
!6829 = !DILocation(line: 970, column: 11, scope: !6830)
!6830 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 970, column: 11)
!6831 = !DILocation(line: 970, column: 14, scope: !6830)
!6832 = !DILocation(line: 970, column: 22, scope: !6830)
!6833 = !DILocation(line: 970, column: 25, scope: !6830)
!6834 = !DILocation(line: 970, column: 29, scope: !6830)
!6835 = !DILocation(line: 970, column: 46, scope: !6830)
!6836 = !DILocation(line: 970, column: 11, scope: !6821)
!6837 = !DILocation(line: 971, column: 2, scope: !6830)
!6838 = !DILocation(line: 973, column: 7, scope: !6821)
!6839 = !DILocation(line: 975, column: 25, scope: !6821)
!6840 = !DILocation(line: 975, column: 7, scope: !6821)
!6841 = !DILocation(line: 975, column: 11, scope: !6821)
!6842 = !DILocation(line: 975, column: 23, scope: !6821)
!6843 = !DILocation(line: 976, column: 19, scope: !6821)
!6844 = !DILocation(line: 976, column: 23, scope: !6821)
!6845 = !DILocation(line: 976, column: 7, scope: !6821)
!6846 = !DILocation(line: 977, column: 7, scope: !6821)
!6847 = !DILocation(line: 977, column: 42, scope: !6821)
!6848 = !DILocation(line: 991, column: 16, scope: !6821)
!6849 = !DILocation(line: 991, column: 20, scope: !6821)
!6850 = !DILocation(line: 991, column: 14, scope: !6821)
!6851 = !DILocation(line: 992, column: 11, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 992, column: 11)
!6853 = !DILocation(line: 992, column: 19, scope: !6852)
!6854 = !DILocation(line: 992, column: 11, scope: !6821)
!6855 = !DILocation(line: 993, column: 18, scope: !6852)
!6856 = !DILocation(line: 993, column: 26, scope: !6852)
!6857 = !DILocation(line: 994, column: 17, scope: !6852)
!6858 = !DILocation(line: 994, column: 4, scope: !6852)
!6859 = !DILocation(line: 993, column: 2, scope: !6852)
!6860 = !DILocation(line: 995, column: 11, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 995, column: 11)
!6862 = !DILocation(line: 995, column: 19, scope: !6861)
!6863 = !DILocation(line: 995, column: 11, scope: !6821)
!6864 = !DILocation(line: 996, column: 18, scope: !6861)
!6865 = !DILocation(line: 996, column: 26, scope: !6861)
!6866 = !DILocation(line: 997, column: 25, scope: !6861)
!6867 = !DILocation(line: 997, column: 17, scope: !6861)
!6868 = !DILocation(line: 997, column: 4, scope: !6861)
!6869 = !DILocation(line: 996, column: 2, scope: !6861)
!6870 = !DILocation(line: 1000, column: 13, scope: !6821)
!6871 = !DILocation(line: 1000, column: 11, scope: !6821)
!6872 = !DILocation(line: 1001, column: 7, scope: !6821)
!6873 = !DILocation(line: 1003, column: 35, scope: !6821)
!6874 = !DILocation(line: 1003, column: 51, scope: !6821)
!6875 = !DILocation(line: 1003, column: 55, scope: !6821)
!6876 = !DILocation(line: 1003, column: 40, scope: !6821)
!6877 = !DILocation(line: 1003, column: 12, scope: !6821)
!6878 = !DILocation(line: 1003, column: 10, scope: !6821)
!6879 = !DILocation(line: 1004, column: 22, scope: !6821)
!6880 = !DILocation(line: 1004, column: 26, scope: !6821)
!6881 = !DILocation(line: 1004, column: 30, scope: !6821)
!6882 = !DILocation(line: 1004, column: 11, scope: !6821)
!6883 = !DILocation(line: 1004, column: 9, scope: !6821)
!6884 = !DILocation(line: 1005, column: 18, scope: !6821)
!6885 = !DILocation(line: 1005, column: 22, scope: !6821)
!6886 = !DILocation(line: 1005, column: 7, scope: !6821)
!6887 = !DILocation(line: 1005, column: 10, scope: !6821)
!6888 = !DILocation(line: 1005, column: 16, scope: !6821)
!6889 = !DILocation(line: 1006, column: 7, scope: !6821)
!6890 = !DILocation(line: 1006, column: 10, scope: !6821)
!6891 = !DILocation(line: 1006, column: 22, scope: !6821)
!6892 = !DILocation(line: 1007, column: 5, scope: !6821)
!6893 = !DILocation(line: 963, column: 72, scope: !6818)
!6894 = !DILocation(line: 963, column: 3, scope: !6818)
!6895 = distinct !{!6895, !6819, !6896}
!6896 = !DILocation(line: 1007, column: 5, scope: !6815)
!6897 = !DILocation(line: 1008, column: 1, scope: !6809)
!6898 = distinct !DISubprogram(name: "single_succ_edge", scope: !341, file: !341, line: 643, type: !6899, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6899 = !DISubroutineType(types: !6900)
!6900 = !{!1417, !6901}
!6901 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !769, line: 112, baseType: !6902)
!6902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6903, size: 64)
!6903 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1402)
!6904 = !DILocalVariable(name: "bb", arg: 1, scope: !6898, file: !341, line: 643, type: !6901)
!6905 = !DILocation(line: 643, column: 37, scope: !6898)
!6906 = !DILocation(line: 645, column: 3, scope: !6898)
!6907 = !DILocation(line: 646, column: 10, scope: !6898)
!6908 = !DILocation(line: 646, column: 3, scope: !6898)
!6909 = distinct !DISubprogram(name: "ei_start_1", scope: !341, file: !341, line: 696, type: !6910, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{!5626, !5631}
!6912 = !DILocalVariable(name: "ev", arg: 1, scope: !6909, file: !341, line: 696, type: !5631)
!6913 = !DILocation(line: 696, column: 28, scope: !6909)
!6914 = !DILocalVariable(name: "i", scope: !6909, file: !341, line: 698, type: !5626)
!6915 = !DILocation(line: 698, column: 17, scope: !6909)
!6916 = !DILocation(line: 700, column: 5, scope: !6909)
!6917 = !DILocation(line: 700, column: 11, scope: !6909)
!6918 = !DILocation(line: 701, column: 17, scope: !6909)
!6919 = !DILocation(line: 701, column: 5, scope: !6909)
!6920 = !DILocation(line: 701, column: 15, scope: !6909)
!6921 = !DILocation(line: 703, column: 3, scope: !6909)
!6922 = distinct !DISubprogram(name: "ei_cond", scope: !341, file: !341, line: 771, type: !6923, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6923 = !DISubroutineType(types: !6924)
!6924 = !{!1227, !5626, !6925}
!6925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1417, size: 64)
!6926 = !DILocalVariable(name: "ei", arg: 1, scope: !6922, file: !341, line: 771, type: !5626)
!6927 = !DILocation(line: 771, column: 24, scope: !6922)
!6928 = !DILocalVariable(name: "p", arg: 2, scope: !6922, file: !341, line: 771, type: !6925)
!6929 = !DILocation(line: 771, column: 34, scope: !6922)
!6930 = !DILocation(line: 773, column: 8, scope: !6931)
!6931 = distinct !DILexicalBlock(scope: !6922, file: !341, line: 773, column: 7)
!6932 = !DILocation(line: 773, column: 7, scope: !6922)
!6933 = !DILocation(line: 775, column: 12, scope: !6934)
!6934 = distinct !DILexicalBlock(scope: !6931, file: !341, line: 774, column: 5)
!6935 = !DILocation(line: 775, column: 8, scope: !6934)
!6936 = !DILocation(line: 775, column: 10, scope: !6934)
!6937 = !DILocation(line: 776, column: 7, scope: !6934)
!6938 = !DILocation(line: 780, column: 8, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6931, file: !341, line: 779, column: 5)
!6940 = !DILocation(line: 780, column: 10, scope: !6939)
!6941 = !DILocation(line: 781, column: 7, scope: !6939)
!6942 = !DILocation(line: 783, column: 1, scope: !6922)
!6943 = distinct !DISubprogram(name: "ei_next", scope: !341, file: !341, line: 736, type: !6944, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6944 = !DISubroutineType(types: !6945)
!6945 = !{null, !6946}
!6946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5626, size: 64)
!6947 = !DILocalVariable(name: "i", arg: 1, scope: !6943, file: !341, line: 736, type: !6946)
!6948 = !DILocation(line: 736, column: 25, scope: !6943)
!6949 = !DILocation(line: 738, column: 3, scope: !6943)
!6950 = !DILocation(line: 739, column: 3, scope: !6943)
!6951 = !DILocation(line: 739, column: 6, scope: !6943)
!6952 = !DILocation(line: 739, column: 11, scope: !6943)
!6953 = !DILocation(line: 740, column: 1, scope: !6943)
!6954 = distinct !DISubprogram(name: "emit_to_new_bb_before", scope: !3, file: !3, line: 931, type: !6955, scopeLine: 932, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!6955 = !DISubroutineType(types: !6956)
!6956 = !{!1870, !1285, !1285}
!6957 = !DILocalVariable(name: "seq", arg: 1, scope: !6954, file: !3, line: 931, type: !1285)
!6958 = !DILocation(line: 931, column: 28, scope: !6954)
!6959 = !DILocalVariable(name: "insn", arg: 2, scope: !6954, file: !3, line: 931, type: !1285)
!6960 = !DILocation(line: 931, column: 37, scope: !6954)
!6961 = !DILocalVariable(name: "last", scope: !6954, file: !3, line: 933, type: !1285)
!6962 = !DILocation(line: 933, column: 7, scope: !6954)
!6963 = !DILocalVariable(name: "bb", scope: !6954, file: !3, line: 934, type: !1870)
!6964 = !DILocation(line: 934, column: 15, scope: !6954)
!6965 = !DILocalVariable(name: "e", scope: !6954, file: !3, line: 935, type: !1417)
!6966 = !DILocation(line: 935, column: 8, scope: !6954)
!6967 = !DILocalVariable(name: "ei", scope: !6954, file: !3, line: 936, type: !5626)
!6968 = !DILocation(line: 936, column: 17, scope: !6954)
!6969 = !DILocation(line: 941, column: 13, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6954, file: !3, line: 941, column: 3)
!6971 = !DILocation(line: 941, column: 8, scope: !6970)
!6972 = !DILocation(line: 941, column: 59, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !6970, file: !3, line: 941, column: 3)
!6974 = !DILocation(line: 941, column: 57, scope: !6973)
!6975 = !DILocation(line: 941, column: 3, scope: !6970)
!6976 = !DILocation(line: 942, column: 9, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 942, column: 9)
!6978 = !DILocation(line: 942, column: 12, scope: !6977)
!6979 = !DILocation(line: 942, column: 18, scope: !6977)
!6980 = !DILocation(line: 942, column: 9, scope: !6973)
!6981 = !DILocation(line: 943, column: 26, scope: !6977)
!6982 = !DILocation(line: 943, column: 7, scope: !6977)
!6983 = !DILocation(line: 945, column: 7, scope: !6977)
!6984 = !DILocation(line: 941, column: 3, scope: !6973)
!6985 = distinct !{!6985, !6975, !6986}
!6986 = !DILocation(line: 945, column: 19, scope: !6970)
!6987 = !DILocation(line: 946, column: 28, scope: !6954)
!6988 = !DILocation(line: 946, column: 33, scope: !6954)
!6989 = !DILocation(line: 946, column: 10, scope: !6954)
!6990 = !DILocation(line: 946, column: 8, scope: !6954)
!6991 = !DILocation(line: 947, column: 7, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6954, file: !3, line: 947, column: 7)
!6993 = !DILocation(line: 947, column: 7, scope: !6954)
!6994 = !DILocation(line: 948, column: 12, scope: !6992)
!6995 = !DILocation(line: 948, column: 10, scope: !6992)
!6996 = !DILocation(line: 948, column: 5, scope: !6992)
!6997 = !DILocation(line: 949, column: 28, scope: !6954)
!6998 = !DILocation(line: 949, column: 33, scope: !6954)
!6999 = !DILocation(line: 949, column: 39, scope: !6954)
!7000 = !DILocation(line: 949, column: 62, scope: !6954)
!7001 = !DILocation(line: 949, column: 8, scope: !6954)
!7002 = !DILocation(line: 949, column: 6, scope: !6954)
!7003 = !DILocation(line: 950, column: 23, scope: !6954)
!7004 = !DILocation(line: 950, column: 3, scope: !6954)
!7005 = !DILocation(line: 951, column: 3, scope: !6954)
!7006 = !DILocation(line: 951, column: 7, scope: !6954)
!7007 = !DILocation(line: 951, column: 13, scope: !6954)
!7008 = !DILocation(line: 952, column: 10, scope: !6954)
!7009 = !DILocation(line: 952, column: 3, scope: !6954)
!7010 = distinct !DISubprogram(name: "ei_safe_edge", scope: !341, file: !341, line: 761, type: !7011, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7011 = !DISubroutineType(types: !7012)
!7012 = !{!1417, !5626}
!7013 = !DILocalVariable(name: "i", arg: 1, scope: !7010, file: !341, line: 761, type: !5626)
!7014 = !DILocation(line: 761, column: 29, scope: !7010)
!7015 = !DILocation(line: 763, column: 11, scope: !7010)
!7016 = !DILocation(line: 763, column: 10, scope: !7010)
!7017 = !DILocation(line: 763, column: 26, scope: !7010)
!7018 = !DILocation(line: 763, column: 3, scope: !7010)
!7019 = distinct !DISubprogram(name: "ei_end_p", scope: !341, file: !341, line: 721, type: !7020, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7020 = !DISubroutineType(types: !7021)
!7021 = !{!1227, !5626}
!7022 = !DILocalVariable(name: "i", arg: 1, scope: !7019, file: !341, line: 721, type: !5626)
!7023 = !DILocation(line: 721, column: 25, scope: !7019)
!7024 = !DILocation(line: 723, column: 13, scope: !7019)
!7025 = !DILocation(line: 723, column: 22, scope: !7019)
!7026 = !DILocation(line: 723, column: 19, scope: !7019)
!7027 = !DILocation(line: 723, column: 10, scope: !7019)
!7028 = !DILocation(line: 723, column: 3, scope: !7019)
!7029 = distinct !DISubprogram(name: "ei_edge", scope: !341, file: !341, line: 752, type: !7011, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7030 = !DILocalVariable(name: "i", arg: 1, scope: !7029, file: !341, line: 752, type: !5626)
!7031 = !DILocation(line: 752, column: 24, scope: !7029)
!7032 = !DILocation(line: 754, column: 10, scope: !7029)
!7033 = !DILocation(line: 754, column: 3, scope: !7029)
!7034 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !341, file: !341, line: 150, type: !7035, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7035 = !DISubroutineType(types: !7036)
!7036 = !{!11, !7037}
!7037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7038, size: 64)
!7038 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1410)
!7039 = !DILocalVariable(name: "vec_", arg: 1, scope: !7034, file: !341, line: 150, type: !7037)
!7040 = !DILocation(line: 150, column: 1, scope: !7034)
!7041 = distinct !DISubprogram(name: "ei_container", scope: !341, file: !341, line: 685, type: !7042, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7042 = !DISubroutineType(types: !7043)
!7043 = !{!1405, !5626}
!7044 = !DILocalVariable(name: "i", arg: 1, scope: !7041, file: !341, line: 685, type: !5626)
!7045 = !DILocation(line: 685, column: 29, scope: !7041)
!7046 = !DILocation(line: 687, column: 3, scope: !7041)
!7047 = !DILocation(line: 688, column: 13, scope: !7041)
!7048 = !DILocation(line: 688, column: 10, scope: !7041)
!7049 = !DILocation(line: 688, column: 3, scope: !7041)
!7050 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !341, file: !341, line: 150, type: !7051, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7051 = !DISubroutineType(types: !7052)
!7052 = !{!1417, !7037, !11}
!7053 = !DILocalVariable(name: "vec_", arg: 1, scope: !7050, file: !341, line: 150, type: !7037)
!7054 = !DILocation(line: 150, column: 1, scope: !7050)
!7055 = !DILocalVariable(name: "ix_", arg: 2, scope: !7050, file: !341, line: 150, type: !11)
!7056 = !DILocation(line: 0, scope: !7050)
!7057 = distinct !DISubprogram(name: "single_succ_p", scope: !341, file: !341, line: 626, type: !7058, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7058 = !DISubroutineType(types: !7059)
!7059 = !{!1227, !6901}
!7060 = !DILocalVariable(name: "bb", arg: 1, scope: !7057, file: !341, line: 626, type: !6901)
!7061 = !DILocation(line: 626, column: 34, scope: !7057)
!7062 = !DILocation(line: 628, column: 10, scope: !7057)
!7063 = !DILocation(line: 628, column: 33, scope: !7057)
!7064 = !DILocation(line: 628, column: 3, scope: !7057)
!7065 = distinct !DISubprogram(name: "action_record_hash", scope: !3, file: !3, line: 2223, type: !1909, scopeLine: 2224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7066 = !DILocalVariable(name: "pentry", arg: 1, scope: !7065, file: !3, line: 2223, type: !1745)
!7067 = !DILocation(line: 2223, column: 33, scope: !7065)
!7068 = !DILocalVariable(name: "entry", scope: !7065, file: !3, line: 2225, type: !2528)
!7069 = !DILocation(line: 2225, column: 31, scope: !7065)
!7070 = !DILocation(line: 2225, column: 70, scope: !7065)
!7071 = !DILocation(line: 2225, column: 39, scope: !7065)
!7072 = !DILocation(line: 2226, column: 10, scope: !7065)
!7073 = !DILocation(line: 2226, column: 17, scope: !7065)
!7074 = !DILocation(line: 2226, column: 22, scope: !7065)
!7075 = !DILocation(line: 2226, column: 31, scope: !7065)
!7076 = !DILocation(line: 2226, column: 38, scope: !7065)
!7077 = !DILocation(line: 2226, column: 29, scope: !7065)
!7078 = !DILocation(line: 2226, column: 3, scope: !7065)
!7079 = distinct !DISubprogram(name: "action_record_eq", scope: !3, file: !3, line: 2215, type: !1915, scopeLine: 2216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7080 = !DILocalVariable(name: "pentry", arg: 1, scope: !7079, file: !3, line: 2215, type: !1745)
!7081 = !DILocation(line: 2215, column: 31, scope: !7079)
!7082 = !DILocalVariable(name: "pdata", arg: 2, scope: !7079, file: !3, line: 2215, type: !1745)
!7083 = !DILocation(line: 2215, column: 51, scope: !7079)
!7084 = !DILocalVariable(name: "entry", scope: !7079, file: !3, line: 2217, type: !2528)
!7085 = !DILocation(line: 2217, column: 31, scope: !7079)
!7086 = !DILocation(line: 2217, column: 70, scope: !7079)
!7087 = !DILocation(line: 2217, column: 39, scope: !7079)
!7088 = !DILocalVariable(name: "data", scope: !7079, file: !3, line: 2218, type: !2528)
!7089 = !DILocation(line: 2218, column: 31, scope: !7079)
!7090 = !DILocation(line: 2218, column: 69, scope: !7079)
!7091 = !DILocation(line: 2218, column: 38, scope: !7079)
!7092 = !DILocation(line: 2219, column: 10, scope: !7079)
!7093 = !DILocation(line: 2219, column: 17, scope: !7079)
!7094 = !DILocation(line: 2219, column: 27, scope: !7079)
!7095 = !DILocation(line: 2219, column: 33, scope: !7079)
!7096 = !DILocation(line: 2219, column: 24, scope: !7079)
!7097 = !DILocation(line: 2219, column: 40, scope: !7079)
!7098 = !DILocation(line: 2219, column: 43, scope: !7079)
!7099 = !DILocation(line: 2219, column: 50, scope: !7079)
!7100 = !DILocation(line: 2219, column: 58, scope: !7079)
!7101 = !DILocation(line: 2219, column: 64, scope: !7079)
!7102 = !DILocation(line: 2219, column: 55, scope: !7079)
!7103 = !DILocation(line: 0, scope: !7079)
!7104 = !DILocation(line: 2219, column: 3, scope: !7079)
!7105 = distinct !DISubprogram(name: "collect_one_action_chain", scope: !3, file: !3, line: 2261, type: !7106, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7106 = !DISubroutineType(types: !7107)
!7107 = !{!6, !1902, !1087}
!7108 = !DILocalVariable(name: "ar_hash", arg: 1, scope: !7105, file: !3, line: 2261, type: !1902)
!7109 = !DILocation(line: 2261, column: 34, scope: !7105)
!7110 = !DILocalVariable(name: "region", arg: 2, scope: !7105, file: !3, line: 2261, type: !1087)
!7111 = !DILocation(line: 2261, column: 53, scope: !7105)
!7112 = !DILocalVariable(name: "next", scope: !7105, file: !3, line: 2263, type: !6)
!7113 = !DILocation(line: 2263, column: 7, scope: !7105)
!7114 = !DILocation(line: 2267, column: 7, scope: !7115)
!7115 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2267, column: 7)
!7116 = !DILocation(line: 2267, column: 14, scope: !7115)
!7117 = !DILocation(line: 2267, column: 7, scope: !7105)
!7118 = !DILocation(line: 2268, column: 5, scope: !7115)
!7119 = !DILocation(line: 2270, column: 11, scope: !7105)
!7120 = !DILocation(line: 2270, column: 19, scope: !7105)
!7121 = !DILocation(line: 2270, column: 3, scope: !7105)
!7122 = !DILocalVariable(name: "r", scope: !7123, file: !3, line: 2274, type: !1087)
!7123 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 2273, column: 7)
!7124 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2271, column: 5)
!7125 = !DILocation(line: 2274, column: 12, scope: !7123)
!7126 = !DILocation(line: 2281, column: 35, scope: !7123)
!7127 = !DILocation(line: 2281, column: 44, scope: !7123)
!7128 = !DILocation(line: 2281, column: 52, scope: !7123)
!7129 = !DILocation(line: 2281, column: 9, scope: !7123)
!7130 = !DILocation(line: 2281, column: 7, scope: !7123)
!7131 = !DILocation(line: 2282, column: 6, scope: !7132)
!7132 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 2282, column: 6)
!7133 = !DILocation(line: 2282, column: 11, scope: !7132)
!7134 = !DILocation(line: 2282, column: 6, scope: !7123)
!7135 = !DILocation(line: 2283, column: 4, scope: !7132)
!7136 = !DILocation(line: 2284, column: 11, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 2284, column: 2)
!7138 = !DILocation(line: 2284, column: 19, scope: !7137)
!7139 = !DILocation(line: 2284, column: 9, scope: !7137)
!7140 = !DILocation(line: 2284, column: 7, scope: !7137)
!7141 = !DILocation(line: 2284, column: 26, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2284, column: 2)
!7143 = !DILocation(line: 2284, column: 2, scope: !7137)
!7144 = !DILocation(line: 2285, column: 8, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 2285, column: 8)
!7146 = !DILocation(line: 2285, column: 11, scope: !7145)
!7147 = !DILocation(line: 2285, column: 16, scope: !7145)
!7148 = !DILocation(line: 2285, column: 8, scope: !7142)
!7149 = !DILocation(line: 2286, column: 13, scope: !7145)
!7150 = !DILocation(line: 2286, column: 6, scope: !7145)
!7151 = !DILocation(line: 2285, column: 19, scope: !7145)
!7152 = !DILocation(line: 2284, column: 34, scope: !7142)
!7153 = !DILocation(line: 2284, column: 37, scope: !7142)
!7154 = !DILocation(line: 2284, column: 32, scope: !7142)
!7155 = !DILocation(line: 2284, column: 2, scope: !7142)
!7156 = distinct !{!7156, !7143, !7157}
!7157 = !DILocation(line: 2286, column: 13, scope: !7137)
!7158 = !DILocation(line: 2287, column: 28, scope: !7123)
!7159 = !DILocation(line: 2287, column: 40, scope: !7123)
!7160 = !DILocation(line: 2287, column: 9, scope: !7123)
!7161 = !DILocation(line: 2287, column: 2, scope: !7123)
!7162 = !DILocalVariable(name: "c", scope: !7163, file: !3, line: 2292, type: !2837)
!7163 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 2291, column: 7)
!7164 = !DILocation(line: 2292, column: 11, scope: !7163)
!7165 = !DILocation(line: 2298, column: 7, scope: !7163)
!7166 = !DILocation(line: 2299, column: 11, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 2299, column: 2)
!7168 = !DILocation(line: 2299, column: 19, scope: !7167)
!7169 = !DILocation(line: 2299, column: 21, scope: !7167)
!7170 = !DILocation(line: 2299, column: 28, scope: !7167)
!7171 = !DILocation(line: 2299, column: 9, scope: !7167)
!7172 = !DILocation(line: 2299, column: 7, scope: !7167)
!7173 = !DILocation(line: 2299, column: 40, scope: !7174)
!7174 = distinct !DILexicalBlock(scope: !7167, file: !3, line: 2299, column: 2)
!7175 = !DILocation(line: 2299, column: 2, scope: !7167)
!7176 = !DILocation(line: 2301, column: 10, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !7178, file: !3, line: 2301, column: 10)
!7178 = distinct !DILexicalBlock(scope: !7174, file: !3, line: 2300, column: 4)
!7179 = !DILocation(line: 2301, column: 13, scope: !7177)
!7180 = !DILocation(line: 2301, column: 23, scope: !7177)
!7181 = !DILocation(line: 2301, column: 10, scope: !7178)
!7182 = !DILocalVariable(name: "filter", scope: !7183, file: !3, line: 2305, type: !6)
!7183 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 2302, column: 8)
!7184 = !DILocation(line: 2305, column: 7, scope: !7183)
!7185 = !DILocation(line: 2305, column: 16, scope: !7183)
!7186 = !DILocation(line: 2306, column: 29, scope: !7183)
!7187 = !DILocation(line: 2306, column: 38, scope: !7183)
!7188 = !DILocation(line: 2306, column: 10, scope: !7183)
!7189 = !DILocation(line: 2306, column: 8, scope: !7183)
!7190 = !DILocation(line: 2307, column: 8, scope: !7183)
!7191 = !DILocalVariable(name: "flt_node", scope: !7192, file: !3, line: 2312, type: !1109)
!7192 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 2309, column: 8)
!7193 = !DILocation(line: 2312, column: 8, scope: !7192)
!7194 = !DILocation(line: 2314, column: 7, scope: !7195)
!7195 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 2314, column: 7)
!7196 = !DILocation(line: 2314, column: 12, scope: !7195)
!7197 = !DILocation(line: 2314, column: 7, scope: !7192)
!7198 = !DILocation(line: 2316, column: 40, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7195, file: !3, line: 2315, column: 5)
!7200 = !DILocation(line: 2316, column: 49, scope: !7199)
!7201 = !DILocation(line: 2316, column: 57, scope: !7199)
!7202 = !DILocation(line: 2316, column: 14, scope: !7199)
!7203 = !DILocation(line: 2316, column: 12, scope: !7199)
!7204 = !DILocation(line: 2319, column: 11, scope: !7205)
!7205 = distinct !DILexicalBlock(scope: !7199, file: !3, line: 2319, column: 11)
!7206 = !DILocation(line: 2319, column: 16, scope: !7205)
!7207 = !DILocation(line: 2319, column: 11, scope: !7199)
!7208 = !DILocation(line: 2320, column: 14, scope: !7205)
!7209 = !DILocation(line: 2320, column: 9, scope: !7205)
!7210 = !DILocation(line: 2325, column: 16, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 2325, column: 16)
!7212 = !DILocation(line: 2325, column: 21, scope: !7211)
!7213 = !DILocation(line: 2325, column: 16, scope: !7205)
!7214 = !DILocation(line: 2326, column: 35, scope: !7211)
!7215 = !DILocation(line: 2326, column: 16, scope: !7211)
!7216 = !DILocation(line: 2326, column: 14, scope: !7211)
!7217 = !DILocation(line: 2326, column: 9, scope: !7211)
!7218 = !DILocation(line: 2327, column: 5, scope: !7199)
!7219 = !DILocation(line: 2329, column: 14, scope: !7192)
!7220 = !DILocation(line: 2329, column: 17, scope: !7192)
!7221 = !DILocation(line: 2329, column: 12, scope: !7192)
!7222 = !DILocation(line: 2330, column: 3, scope: !7192)
!7223 = !DILocation(line: 2330, column: 10, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 2330, column: 3)
!7225 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 2330, column: 3)
!7226 = !DILocation(line: 2330, column: 3, scope: !7225)
!7227 = !DILocalVariable(name: "filter", scope: !7228, file: !3, line: 2332, type: !6)
!7228 = distinct !DILexicalBlock(scope: !7224, file: !3, line: 2331, column: 5)
!7229 = !DILocation(line: 2332, column: 11, scope: !7228)
!7230 = !DILocation(line: 2332, column: 20, scope: !7228)
!7231 = !DILocation(line: 2333, column: 33, scope: !7228)
!7232 = !DILocation(line: 2333, column: 42, scope: !7228)
!7233 = !DILocation(line: 2333, column: 50, scope: !7228)
!7234 = !DILocation(line: 2333, column: 14, scope: !7228)
!7235 = !DILocation(line: 2333, column: 12, scope: !7228)
!7236 = !DILocation(line: 2334, column: 5, scope: !7228)
!7237 = !DILocation(line: 2330, column: 31, scope: !7224)
!7238 = !DILocation(line: 2330, column: 29, scope: !7224)
!7239 = !DILocation(line: 2330, column: 3, scope: !7224)
!7240 = distinct !{!7240, !7226, !7241}
!7241 = !DILocation(line: 2334, column: 5, scope: !7225)
!7242 = !DILocation(line: 2336, column: 4, scope: !7178)
!7243 = !DILocation(line: 2299, column: 48, scope: !7174)
!7244 = !DILocation(line: 2299, column: 51, scope: !7174)
!7245 = !DILocation(line: 2299, column: 46, scope: !7174)
!7246 = !DILocation(line: 2299, column: 2, scope: !7174)
!7247 = distinct !{!7247, !7175, !7248}
!7248 = !DILocation(line: 2336, column: 4, scope: !7167)
!7249 = !DILocation(line: 2337, column: 9, scope: !7163)
!7250 = !DILocation(line: 2337, column: 2, scope: !7163)
!7251 = !DILocation(line: 2343, column: 40, scope: !7124)
!7252 = !DILocation(line: 2343, column: 49, scope: !7124)
!7253 = !DILocation(line: 2343, column: 57, scope: !7124)
!7254 = !DILocation(line: 2343, column: 14, scope: !7124)
!7255 = !DILocation(line: 2343, column: 12, scope: !7124)
!7256 = !DILocation(line: 2346, column: 11, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 2346, column: 11)
!7258 = !DILocation(line: 2346, column: 16, scope: !7257)
!7259 = !DILocation(line: 2346, column: 11, scope: !7124)
!7260 = !DILocation(line: 2347, column: 7, scope: !7257)
!7261 = !DILocation(line: 2347, column: 2, scope: !7257)
!7262 = !DILocation(line: 2352, column: 16, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7257, file: !3, line: 2352, column: 16)
!7264 = !DILocation(line: 2352, column: 21, scope: !7263)
!7265 = !DILocation(line: 2352, column: 16, scope: !7257)
!7266 = !DILocation(line: 2353, column: 28, scope: !7263)
!7267 = !DILocation(line: 2353, column: 9, scope: !7263)
!7268 = !DILocation(line: 2353, column: 7, scope: !7263)
!7269 = !DILocation(line: 2353, column: 2, scope: !7263)
!7270 = !DILocation(line: 2355, column: 33, scope: !7124)
!7271 = !DILocation(line: 2355, column: 42, scope: !7124)
!7272 = !DILocation(line: 2355, column: 50, scope: !7124)
!7273 = !DILocation(line: 2355, column: 52, scope: !7124)
!7274 = !DILocation(line: 2355, column: 60, scope: !7124)
!7275 = !DILocation(line: 2355, column: 68, scope: !7124)
!7276 = !DILocation(line: 2355, column: 14, scope: !7124)
!7277 = !DILocation(line: 2355, column: 7, scope: !7124)
!7278 = !DILocation(line: 2362, column: 7, scope: !7124)
!7279 = !DILocation(line: 2365, column: 3, scope: !7105)
!7280 = !DILocation(line: 2367, column: 5, scope: !7105)
!7281 = !DILocation(line: 2369, column: 1, scope: !7105)
!7282 = distinct !DISubprogram(name: "add_call_site", scope: !3, file: !3, line: 2372, type: !7283, scopeLine: 2373, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7283 = !DISubroutineType(types: !7284)
!7284 = !{!6, !1285, !6, !6}
!7285 = !DILocalVariable(name: "landing_pad", arg: 1, scope: !7282, file: !3, line: 2372, type: !1285)
!7286 = !DILocation(line: 2372, column: 20, scope: !7282)
!7287 = !DILocalVariable(name: "action", arg: 2, scope: !7282, file: !3, line: 2372, type: !6)
!7288 = !DILocation(line: 2372, column: 37, scope: !7282)
!7289 = !DILocalVariable(name: "section", arg: 3, scope: !7282, file: !3, line: 2372, type: !6)
!7290 = !DILocation(line: 2372, column: 49, scope: !7282)
!7291 = !DILocalVariable(name: "record", scope: !7282, file: !3, line: 2374, type: !2549)
!7292 = !DILocation(line: 2374, column: 20, scope: !7282)
!7293 = !DILocation(line: 2376, column: 12, scope: !7282)
!7294 = !DILocation(line: 2376, column: 10, scope: !7282)
!7295 = !DILocation(line: 2377, column: 25, scope: !7282)
!7296 = !DILocation(line: 2377, column: 3, scope: !7282)
!7297 = !DILocation(line: 2377, column: 11, scope: !7282)
!7298 = !DILocation(line: 2377, column: 23, scope: !7282)
!7299 = !DILocation(line: 2378, column: 20, scope: !7282)
!7300 = !DILocation(line: 2378, column: 3, scope: !7282)
!7301 = !DILocation(line: 2378, column: 11, scope: !7282)
!7302 = !DILocation(line: 2378, column: 18, scope: !7282)
!7303 = !DILocation(line: 2380, column: 3, scope: !7282)
!7304 = !DILocation(line: 2383, column: 10, scope: !7282)
!7305 = !DILocation(line: 2383, column: 27, scope: !7282)
!7306 = !DILocation(line: 2383, column: 25, scope: !7282)
!7307 = !DILocation(line: 2384, column: 47, scope: !7282)
!7308 = !DILocation(line: 2383, column: 3, scope: !7282)
!7309 = distinct !DISubprogram(name: "VEC_call_site_record_base_length", scope: !1862, file: !1862, line: 142, type: !7310, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7310 = !DISubroutineType(types: !7311)
!7311 = !{!11, !7312}
!7312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7313, size: 64)
!7313 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2542)
!7314 = !DILocalVariable(name: "vec_", arg: 1, scope: !7309, file: !1862, line: 142, type: !7312)
!7315 = !DILocation(line: 142, column: 1, scope: !7309)
!7316 = distinct !DISubprogram(name: "VEC_call_site_record_gc_alloc", scope: !1862, file: !1862, line: 143, type: !7317, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7317 = !DISubroutineType(types: !7318)
!7318 = !{!2537, !6}
!7319 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7316, file: !1862, line: 143, type: !6)
!7320 = !DILocation(line: 143, column: 1, scope: !7316)
!7321 = distinct !DISubprogram(name: "VEC_call_site_record_base_index", scope: !1862, file: !1862, line: 142, type: !7322, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7322 = !DISubroutineType(types: !7323)
!7323 = !{!2549, !7312, !11}
!7324 = !DILocalVariable(name: "vec_", arg: 1, scope: !7321, file: !1862, line: 142, type: !7312)
!7325 = !DILocation(line: 142, column: 1, scope: !7321)
!7326 = !DILocalVariable(name: "ix_", arg: 2, scope: !7321, file: !1862, line: 142, type: !11)
!7327 = !DILocation(line: 0, scope: !7321)
!7328 = distinct !DISubprogram(name: "add_action_record", scope: !3, file: !3, line: 2230, type: !7329, scopeLine: 2231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7329 = !DISubroutineType(types: !7330)
!7330 = !{!6, !1902, !6, !6}
!7331 = !DILocalVariable(name: "ar_hash", arg: 1, scope: !7328, file: !3, line: 2230, type: !1902)
!7332 = !DILocation(line: 2230, column: 27, scope: !7328)
!7333 = !DILocalVariable(name: "filter", arg: 2, scope: !7328, file: !3, line: 2230, type: !6)
!7334 = !DILocation(line: 2230, column: 40, scope: !7328)
!7335 = !DILocalVariable(name: "next", arg: 3, scope: !7328, file: !3, line: 2230, type: !6)
!7336 = !DILocation(line: 2230, column: 52, scope: !7328)
!7337 = !DILocalVariable(name: "slot", scope: !7328, file: !3, line: 2232, type: !2535)
!7338 = !DILocation(line: 2232, column: 26, scope: !7328)
!7339 = !DILocalVariable(name: "new_ar", scope: !7328, file: !3, line: 2232, type: !2536)
!7340 = !DILocation(line: 2232, column: 33, scope: !7328)
!7341 = !DILocalVariable(name: "tmp", scope: !7328, file: !3, line: 2232, type: !2530)
!7342 = !DILocation(line: 2232, column: 41, scope: !7328)
!7343 = !DILocation(line: 2234, column: 16, scope: !7328)
!7344 = !DILocation(line: 2234, column: 7, scope: !7328)
!7345 = !DILocation(line: 2234, column: 14, scope: !7328)
!7346 = !DILocation(line: 2235, column: 14, scope: !7328)
!7347 = !DILocation(line: 2235, column: 7, scope: !7328)
!7348 = !DILocation(line: 2235, column: 12, scope: !7328)
!7349 = !DILocation(line: 2236, column: 52, scope: !7328)
!7350 = !DILocation(line: 2236, column: 61, scope: !7328)
!7351 = !DILocation(line: 2236, column: 36, scope: !7328)
!7352 = !DILocation(line: 2236, column: 10, scope: !7328)
!7353 = !DILocation(line: 2236, column: 8, scope: !7328)
!7354 = !DILocation(line: 2238, column: 18, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7328, file: !3, line: 2238, column: 7)
!7356 = !DILocation(line: 2238, column: 17, scope: !7355)
!7357 = !DILocation(line: 2238, column: 15, scope: !7355)
!7358 = !DILocation(line: 2238, column: 24, scope: !7355)
!7359 = !DILocation(line: 2238, column: 7, scope: !7328)
!7360 = !DILocation(line: 2240, column: 16, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 2239, column: 5)
!7362 = !DILocation(line: 2240, column: 14, scope: !7361)
!7363 = !DILocation(line: 2241, column: 24, scope: !7361)
!7364 = !DILocation(line: 2241, column: 72, scope: !7361)
!7365 = !DILocation(line: 2241, column: 7, scope: !7361)
!7366 = !DILocation(line: 2241, column: 15, scope: !7361)
!7367 = !DILocation(line: 2241, column: 22, scope: !7361)
!7368 = !DILocation(line: 2242, column: 24, scope: !7361)
!7369 = !DILocation(line: 2242, column: 7, scope: !7361)
!7370 = !DILocation(line: 2242, column: 15, scope: !7361)
!7371 = !DILocation(line: 2242, column: 22, scope: !7361)
!7372 = !DILocation(line: 2243, column: 22, scope: !7361)
!7373 = !DILocation(line: 2243, column: 7, scope: !7361)
!7374 = !DILocation(line: 2243, column: 15, scope: !7361)
!7375 = !DILocation(line: 2243, column: 20, scope: !7361)
!7376 = !DILocation(line: 2244, column: 15, scope: !7361)
!7377 = !DILocation(line: 2244, column: 8, scope: !7361)
!7378 = !DILocation(line: 2244, column: 13, scope: !7361)
!7379 = !DILocation(line: 2251, column: 51, scope: !7361)
!7380 = !DILocation(line: 2251, column: 7, scope: !7361)
!7381 = !DILocation(line: 2252, column: 11, scope: !7382)
!7382 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 2252, column: 11)
!7383 = !DILocation(line: 2252, column: 11, scope: !7361)
!7384 = !DILocation(line: 2253, column: 10, scope: !7382)
!7385 = !DILocation(line: 2253, column: 58, scope: !7382)
!7386 = !DILocation(line: 2253, column: 7, scope: !7382)
!7387 = !DILocation(line: 2253, column: 2, scope: !7382)
!7388 = !DILocation(line: 2254, column: 51, scope: !7361)
!7389 = !DILocation(line: 2254, column: 7, scope: !7361)
!7390 = !DILocation(line: 2255, column: 5, scope: !7361)
!7391 = !DILocation(line: 2257, column: 10, scope: !7328)
!7392 = !DILocation(line: 2257, column: 18, scope: !7328)
!7393 = !DILocation(line: 2257, column: 3, scope: !7328)
!7394 = distinct !DISubprogram(name: "push_sleb128", scope: !3, file: !3, line: 2695, type: !7395, scopeLine: 2696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7395 = !DISubroutineType(types: !7396)
!7396 = !{null, !6696, !6}
!7397 = !DILocalVariable(name: "data_area", arg: 1, scope: !7394, file: !3, line: 2695, type: !6696)
!7398 = !DILocation(line: 2695, column: 33, scope: !7394)
!7399 = !DILocalVariable(name: "value", arg: 2, scope: !7394, file: !3, line: 2695, type: !6)
!7400 = !DILocation(line: 2695, column: 48, scope: !7394)
!7401 = !DILocalVariable(name: "byte", scope: !7394, file: !3, line: 2697, type: !1227)
!7402 = !DILocation(line: 2697, column: 17, scope: !7394)
!7403 = !DILocalVariable(name: "more", scope: !7394, file: !3, line: 2698, type: !6)
!7404 = !DILocation(line: 2698, column: 7, scope: !7394)
!7405 = !DILocation(line: 2700, column: 3, scope: !7394)
!7406 = !DILocation(line: 2702, column: 14, scope: !7407)
!7407 = distinct !DILexicalBlock(scope: !7394, file: !3, line: 2701, column: 5)
!7408 = !DILocation(line: 2702, column: 20, scope: !7407)
!7409 = !DILocation(line: 2702, column: 12, scope: !7407)
!7410 = !DILocation(line: 2703, column: 13, scope: !7407)
!7411 = !DILocation(line: 2704, column: 18, scope: !7407)
!7412 = !DILocation(line: 2704, column: 24, scope: !7407)
!7413 = !DILocation(line: 2704, column: 29, scope: !7407)
!7414 = !DILocation(line: 2704, column: 33, scope: !7407)
!7415 = !DILocation(line: 2704, column: 38, scope: !7407)
!7416 = !DILocation(line: 2704, column: 46, scope: !7407)
!7417 = !DILocation(line: 2705, column: 3, scope: !7407)
!7418 = !DILocation(line: 2705, column: 7, scope: !7407)
!7419 = !DILocation(line: 2705, column: 13, scope: !7407)
!7420 = !DILocation(line: 2705, column: 19, scope: !7407)
!7421 = !DILocation(line: 2705, column: 23, scope: !7407)
!7422 = !DILocation(line: 2705, column: 28, scope: !7407)
!7423 = !DILocation(line: 2705, column: 36, scope: !7407)
!7424 = !DILocation(line: 0, scope: !7407)
!7425 = !DILocation(line: 2704, column: 14, scope: !7407)
!7426 = !DILocation(line: 2704, column: 12, scope: !7407)
!7427 = !DILocation(line: 2706, column: 11, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 2706, column: 11)
!7429 = !DILocation(line: 2706, column: 11, scope: !7407)
!7430 = !DILocation(line: 2707, column: 7, scope: !7428)
!7431 = !DILocation(line: 2707, column: 2, scope: !7428)
!7432 = !DILocation(line: 2708, column: 7, scope: !7407)
!7433 = !DILocation(line: 2709, column: 5, scope: !7407)
!7434 = !DILocation(line: 2710, column: 10, scope: !7394)
!7435 = distinct !{!7435, !7405, !7436}
!7436 = !DILocation(line: 2710, column: 14, scope: !7394)
!7437 = !DILocation(line: 2711, column: 1, scope: !7394)
!7438 = distinct !DISubprogram(name: "VEC_call_site_record_gc_safe_push", scope: !1862, file: !1862, line: 143, type: !7439, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7439 = !DISubroutineType(types: !7440)
!7440 = !{!7441, !7442, !2549}
!7441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2549, size: 64)
!7442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2537, size: 64)
!7443 = !DILocalVariable(name: "vec_", arg: 1, scope: !7438, file: !1862, line: 143, type: !7442)
!7444 = !DILocation(line: 143, column: 1, scope: !7438)
!7445 = !DILocalVariable(name: "obj_", arg: 2, scope: !7438, file: !1862, line: 143, type: !2549)
!7446 = distinct !DISubprogram(name: "VEC_call_site_record_gc_reserve", scope: !1862, file: !1862, line: 143, type: !7447, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7447 = !DISubroutineType(types: !7448)
!7448 = !{!6, !7442, !6}
!7449 = !DILocalVariable(name: "vec_", arg: 1, scope: !7446, file: !1862, line: 143, type: !7442)
!7450 = !DILocation(line: 143, column: 1, scope: !7446)
!7451 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7446, file: !1862, line: 143, type: !6)
!7452 = !DILocalVariable(name: "extend", scope: !7446, file: !1862, line: 143, type: !6)
!7453 = !DILocation(line: 143, column: 1, scope: !7454)
!7454 = distinct !DILexicalBlock(scope: !7446, file: !1862, line: 143, column: 1)
!7455 = distinct !DISubprogram(name: "VEC_call_site_record_base_quick_push", scope: !1862, file: !1862, line: 142, type: !7456, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7456 = !DISubroutineType(types: !7457)
!7457 = !{!7441, !7458, !2549}
!7458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2542, size: 64)
!7459 = !DILocalVariable(name: "vec_", arg: 1, scope: !7455, file: !1862, line: 142, type: !7458)
!7460 = !DILocation(line: 142, column: 1, scope: !7455)
!7461 = !DILocalVariable(name: "obj_", arg: 2, scope: !7455, file: !1862, line: 142, type: !2549)
!7462 = !DILocalVariable(name: "slot_", scope: !7455, file: !1862, line: 142, type: !7441)
!7463 = distinct !DISubprogram(name: "VEC_call_site_record_base_space", scope: !1862, file: !1862, line: 142, type: !7464, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7464 = !DISubroutineType(types: !7465)
!7465 = !{!6, !7458, !6}
!7466 = !DILocalVariable(name: "vec_", arg: 1, scope: !7463, file: !1862, line: 142, type: !7458)
!7467 = !DILocation(line: 142, column: 1, scope: !7463)
!7468 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7463, file: !1862, line: 142, type: !6)
!7469 = distinct !DISubprogram(name: "switch_to_exception_section", scope: !3, file: !3, line: 2836, type: !5704, scopeLine: 2837, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7470 = !DILocalVariable(name: "fnname", arg: 1, scope: !7469, file: !3, line: 2836, type: !1310)
!7471 = !DILocation(line: 2836, column: 43, scope: !7469)
!7472 = !DILocalVariable(name: "s", scope: !7469, file: !3, line: 2838, type: !1721)
!7473 = !DILocation(line: 2838, column: 12, scope: !7469)
!7474 = !DILocation(line: 2840, column: 7, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7469, file: !3, line: 2840, column: 7)
!7476 = !DILocation(line: 2840, column: 7, scope: !7469)
!7477 = !DILocation(line: 2841, column: 9, scope: !7475)
!7478 = !DILocation(line: 2841, column: 7, scope: !7475)
!7479 = !DILocation(line: 2841, column: 5, scope: !7475)
!7480 = !DILocation(line: 2846, column: 19, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 2846, column: 11)
!7482 = distinct !DILexicalBlock(scope: !7475, file: !3, line: 2843, column: 5)
!7483 = !DILocation(line: 2846, column: 11, scope: !7481)
!7484 = !DILocation(line: 2846, column: 11, scope: !7482)
!7485 = !DILocalVariable(name: "flags", scope: !7486, file: !3, line: 2848, type: !6)
!7486 = distinct !DILexicalBlock(scope: !7481, file: !3, line: 2847, column: 2)
!7487 = !DILocation(line: 2848, column: 8, scope: !7486)
!7488 = !DILocalVariable(name: "tt_format", scope: !7489, file: !3, line: 2852, type: !6)
!7489 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2851, column: 6)
!7490 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 2850, column: 8)
!7491 = !DILocation(line: 2852, column: 12, scope: !7489)
!7492 = !DILocation(line: 2853, column: 3, scope: !7489)
!7493 = !DILocation(line: 2854, column: 20, scope: !7489)
!7494 = !DILocation(line: 2855, column: 4, scope: !7489)
!7495 = !DILocation(line: 2855, column: 9, scope: !7489)
!7496 = !DILocation(line: 2855, column: 19, scope: !7489)
!7497 = !DILocation(line: 2855, column: 27, scope: !7489)
!7498 = !DILocation(line: 2856, column: 8, scope: !7489)
!7499 = !DILocation(line: 2856, column: 12, scope: !7489)
!7500 = !DILocation(line: 2856, column: 22, scope: !7489)
!7501 = !DILocation(line: 2856, column: 30, scope: !7489)
!7502 = !DILocation(line: 0, scope: !7489)
!7503 = !DILocation(line: 2854, column: 17, scope: !7489)
!7504 = !DILocation(line: 2854, column: 14, scope: !7489)
!7505 = !DILocation(line: 2863, column: 8, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 2863, column: 8)
!7507 = !DILocation(line: 2863, column: 8, scope: !7486)
!7508 = !DILocalVariable(name: "section_name", scope: !7509, file: !3, line: 2865, type: !1375)
!7509 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 2864, column: 6)
!7510 = !DILocation(line: 2865, column: 14, scope: !7509)
!7511 = !DILocation(line: 2865, column: 29, scope: !7509)
!7512 = !DILocation(line: 2866, column: 17, scope: !7509)
!7513 = !DILocation(line: 2866, column: 55, scope: !7509)
!7514 = !DILocation(line: 2866, column: 8, scope: !7509)
!7515 = !DILocation(line: 2867, column: 25, scope: !7509)
!7516 = !DILocation(line: 2867, column: 39, scope: !7509)
!7517 = !DILocation(line: 2867, column: 12, scope: !7509)
!7518 = !DILocation(line: 2867, column: 10, scope: !7509)
!7519 = !DILocation(line: 2868, column: 14, scope: !7509)
!7520 = !DILocation(line: 2868, column: 8, scope: !7509)
!7521 = !DILocation(line: 2869, column: 6, scope: !7509)
!7522 = !DILocation(line: 2873, column: 48, scope: !7506)
!7523 = !DILocation(line: 2873, column: 14, scope: !7506)
!7524 = !DILocation(line: 2873, column: 12, scope: !7506)
!7525 = !DILocation(line: 2873, column: 8, scope: !7506)
!7526 = !DILocation(line: 2874, column: 2, scope: !7486)
!7527 = !DILocation(line: 2877, column: 10, scope: !7481)
!7528 = !DILocation(line: 2877, column: 21, scope: !7481)
!7529 = !DILocation(line: 2877, column: 36, scope: !7481)
!7530 = !DILocation(line: 2877, column: 8, scope: !7481)
!7531 = !DILocation(line: 2877, column: 4, scope: !7481)
!7532 = !DILocation(line: 2880, column: 22, scope: !7469)
!7533 = !DILocation(line: 2880, column: 3, scope: !7469)
!7534 = !DILocation(line: 2881, column: 1, scope: !7469)
!7535 = distinct !DISubprogram(name: "dw2_output_call_site_table", scope: !3, file: !3, line: 2752, type: !7536, scopeLine: 2753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7536 = !DISubroutineType(types: !7537)
!7537 = !{null, !6, !6}
!7538 = !DILocalVariable(name: "cs_format", arg: 1, scope: !7535, file: !3, line: 2752, type: !6)
!7539 = !DILocation(line: 2752, column: 33, scope: !7535)
!7540 = !DILocalVariable(name: "section", arg: 2, scope: !7535, file: !3, line: 2752, type: !6)
!7541 = !DILocation(line: 2752, column: 48, scope: !7535)
!7542 = !DILocalVariable(name: "n", scope: !7535, file: !3, line: 2754, type: !6)
!7543 = !DILocation(line: 2754, column: 7, scope: !7535)
!7544 = !DILocation(line: 2754, column: 11, scope: !7535)
!7545 = !DILocalVariable(name: "i", scope: !7535, file: !3, line: 2755, type: !6)
!7546 = !DILocation(line: 2755, column: 7, scope: !7535)
!7547 = !DILocalVariable(name: "begin", scope: !7535, file: !3, line: 2756, type: !1310)
!7548 = !DILocation(line: 2756, column: 15, scope: !7535)
!7549 = !DILocation(line: 2758, column: 7, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 2758, column: 7)
!7551 = !DILocation(line: 2758, column: 15, scope: !7550)
!7552 = !DILocation(line: 2758, column: 7, scope: !7535)
!7553 = !DILocation(line: 2759, column: 13, scope: !7550)
!7554 = !DILocation(line: 2759, column: 11, scope: !7550)
!7555 = !DILocation(line: 2759, column: 5, scope: !7550)
!7556 = !DILocation(line: 2760, column: 12, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7550, file: !3, line: 2760, column: 12)
!7558 = !DILocation(line: 2760, column: 12, scope: !7550)
!7559 = !DILocation(line: 2761, column: 31, scope: !7557)
!7560 = !DILocation(line: 2761, column: 11, scope: !7557)
!7561 = !DILocation(line: 2761, column: 5, scope: !7557)
!7562 = !DILocation(line: 2763, column: 31, scope: !7557)
!7563 = !DILocation(line: 2763, column: 11, scope: !7557)
!7564 = !DILocation(line: 2765, column: 10, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 2765, column: 3)
!7566 = !DILocation(line: 2765, column: 8, scope: !7565)
!7567 = !DILocation(line: 2765, column: 15, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7565, file: !3, line: 2765, column: 3)
!7569 = !DILocation(line: 2765, column: 19, scope: !7568)
!7570 = !DILocation(line: 2765, column: 17, scope: !7568)
!7571 = !DILocation(line: 2765, column: 3, scope: !7565)
!7572 = !DILocalVariable(name: "cs", scope: !7573, file: !3, line: 2767, type: !2511)
!7573 = distinct !DILexicalBlock(scope: !7568, file: !3, line: 2766, column: 5)
!7574 = !DILocation(line: 2767, column: 34, scope: !7573)
!7575 = !DILocation(line: 2768, column: 2, scope: !7573)
!7576 = !DILocalVariable(name: "reg_start_lab", scope: !7573, file: !3, line: 2769, type: !5753)
!7577 = !DILocation(line: 2769, column: 12, scope: !7573)
!7578 = !DILocalVariable(name: "reg_end_lab", scope: !7573, file: !3, line: 2770, type: !5753)
!7579 = !DILocation(line: 2770, column: 12, scope: !7573)
!7580 = !DILocalVariable(name: "landing_pad_lab", scope: !7573, file: !3, line: 2771, type: !5753)
!7581 = !DILocation(line: 2771, column: 12, scope: !7573)
!7582 = !DILocation(line: 2773, column: 7, scope: !7573)
!7583 = !DILocation(line: 2773, column: 7, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 2773, column: 7)
!7585 = !DILocation(line: 2774, column: 7, scope: !7573)
!7586 = !DILocation(line: 2774, column: 7, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 2774, column: 7)
!7588 = !DILocation(line: 2776, column: 11, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 2776, column: 11)
!7590 = !DILocation(line: 2776, column: 15, scope: !7589)
!7591 = !DILocation(line: 2776, column: 11, scope: !7573)
!7592 = !DILocation(line: 2777, column: 2, scope: !7589)
!7593 = !DILocation(line: 2777, column: 2, scope: !7594)
!7594 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 2777, column: 2)
!7595 = !DILocation(line: 2784, column: 11, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 2784, column: 11)
!7597 = !DILocation(line: 2784, column: 21, scope: !7596)
!7598 = !DILocation(line: 2784, column: 11, scope: !7573)
!7599 = !DILocation(line: 2786, column: 34, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 2785, column: 2)
!7601 = !DILocation(line: 2786, column: 49, scope: !7600)
!7602 = !DILocation(line: 2787, column: 25, scope: !7600)
!7603 = !DILocation(line: 2786, column: 4, scope: !7600)
!7604 = !DILocation(line: 2788, column: 34, scope: !7600)
!7605 = !DILocation(line: 2788, column: 47, scope: !7600)
!7606 = !DILocation(line: 2788, column: 4, scope: !7600)
!7607 = !DILocation(line: 2790, column: 8, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 2790, column: 8)
!7609 = !DILocation(line: 2790, column: 12, scope: !7608)
!7610 = !DILocation(line: 2790, column: 8, scope: !7600)
!7611 = !DILocation(line: 2791, column: 36, scope: !7608)
!7612 = !DILocation(line: 2791, column: 53, scope: !7608)
!7613 = !DILocation(line: 2791, column: 6, scope: !7608)
!7614 = !DILocation(line: 2794, column: 6, scope: !7608)
!7615 = !DILocation(line: 2795, column: 2, scope: !7600)
!7616 = !DILocation(line: 2798, column: 29, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 2797, column: 2)
!7618 = !DILocation(line: 2798, column: 44, scope: !7617)
!7619 = !DILocation(line: 2799, column: 24, scope: !7617)
!7620 = !DILocation(line: 2798, column: 4, scope: !7617)
!7621 = !DILocation(line: 2800, column: 29, scope: !7617)
!7622 = !DILocation(line: 2800, column: 42, scope: !7617)
!7623 = !DILocation(line: 2800, column: 4, scope: !7617)
!7624 = !DILocation(line: 2801, column: 8, scope: !7625)
!7625 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 2801, column: 8)
!7626 = !DILocation(line: 2801, column: 12, scope: !7625)
!7627 = !DILocation(line: 2801, column: 8, scope: !7617)
!7628 = !DILocation(line: 2802, column: 31, scope: !7625)
!7629 = !DILocation(line: 2802, column: 48, scope: !7625)
!7630 = !DILocation(line: 2802, column: 6, scope: !7625)
!7631 = !DILocation(line: 2805, column: 6, scope: !7625)
!7632 = !DILocation(line: 2807, column: 36, scope: !7573)
!7633 = !DILocation(line: 2807, column: 40, scope: !7573)
!7634 = !DILocation(line: 2807, column: 7, scope: !7573)
!7635 = !DILocation(line: 2808, column: 5, scope: !7573)
!7636 = !DILocation(line: 2765, column: 22, scope: !7568)
!7637 = !DILocation(line: 2765, column: 3, scope: !7568)
!7638 = distinct !{!7638, !7571, !7639}
!7639 = !DILocation(line: 2808, column: 5, scope: !7565)
!7640 = !DILocation(line: 2810, column: 21, scope: !7535)
!7641 = !DILocation(line: 2810, column: 18, scope: !7535)
!7642 = !DILocation(line: 2811, column: 1, scope: !7535)
!7643 = distinct !DISubprogram(name: "VEC_uchar_base_iterate", scope: !2499, file: !2499, line: 27, type: !7644, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7644 = !DISubroutineType(types: !7645)
!7645 = !{!6, !6689, !11, !6722}
!7646 = !DILocalVariable(name: "vec_", arg: 1, scope: !7643, file: !2499, line: 27, type: !6689)
!7647 = !DILocation(line: 27, column: 1, scope: !7643)
!7648 = !DILocalVariable(name: "ix_", arg: 2, scope: !7643, file: !2499, line: 27, type: !11)
!7649 = !DILocalVariable(name: "ptr", arg: 3, scope: !7643, file: !2499, line: 27, type: !6722)
!7650 = !DILocation(line: 27, column: 1, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7643, file: !2499, line: 27, column: 1)
!7652 = !DILocation(line: 27, column: 1, scope: !7653)
!7653 = distinct !DILexicalBlock(scope: !7651, file: !2499, line: 27, column: 1)
!7654 = !DILocation(line: 27, column: 1, scope: !7655)
!7655 = distinct !DILexicalBlock(scope: !7651, file: !2499, line: 27, column: 1)
!7656 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !146, file: !146, line: 182, type: !7657, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7657 = !DISubroutineType(types: !7658)
!7658 = !{!1109, !6652, !11}
!7659 = !DILocalVariable(name: "vec_", arg: 1, scope: !7656, file: !146, line: 182, type: !6652)
!7660 = !DILocation(line: 182, column: 1, scope: !7656)
!7661 = !DILocalVariable(name: "ix_", arg: 2, scope: !7656, file: !146, line: 182, type: !11)
!7662 = !DILocation(line: 0, scope: !7656)
!7663 = distinct !DISubprogram(name: "output_ttype", scope: !3, file: !3, line: 2890, type: !7664, scopeLine: 2891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7664 = !DISubroutineType(types: !7665)
!7665 = !{null, !1109, !6, !6}
!7666 = !DILocalVariable(name: "type", arg: 1, scope: !7663, file: !3, line: 2890, type: !1109)
!7667 = !DILocation(line: 2890, column: 20, scope: !7663)
!7668 = !DILocalVariable(name: "tt_format", arg: 2, scope: !7663, file: !3, line: 2890, type: !6)
!7669 = !DILocation(line: 2890, column: 30, scope: !7663)
!7670 = !DILocalVariable(name: "tt_format_size", arg: 3, scope: !7663, file: !3, line: 2890, type: !6)
!7671 = !DILocation(line: 2890, column: 45, scope: !7663)
!7672 = !DILocalVariable(name: "value", scope: !7663, file: !3, line: 2892, type: !1285)
!7673 = !DILocation(line: 2892, column: 7, scope: !7663)
!7674 = !DILocalVariable(name: "is_public", scope: !7663, file: !3, line: 2893, type: !1227)
!7675 = !DILocation(line: 2893, column: 8, scope: !7663)
!7676 = !DILocation(line: 2895, column: 7, scope: !7677)
!7677 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2895, column: 7)
!7678 = !DILocation(line: 2895, column: 12, scope: !7677)
!7679 = !DILocation(line: 2895, column: 7, scope: !7663)
!7680 = !DILocation(line: 2896, column: 13, scope: !7677)
!7681 = !DILocation(line: 2896, column: 11, scope: !7677)
!7682 = !DILocation(line: 2896, column: 5, scope: !7677)
!7683 = !DILocalVariable(name: "node", scope: !7684, file: !3, line: 2899, type: !4725)
!7684 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 2898, column: 5)
!7685 = !DILocation(line: 2899, column: 28, scope: !7684)
!7686 = !DILocation(line: 2906, column: 11, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 2906, column: 11)
!7688 = !DILocation(line: 2906, column: 11, scope: !7684)
!7689 = !DILocation(line: 2907, column: 34, scope: !7687)
!7690 = !DILocation(line: 2907, column: 9, scope: !7687)
!7691 = !DILocation(line: 2907, column: 7, scope: !7687)
!7692 = !DILocation(line: 2907, column: 2, scope: !7687)
!7693 = !DILocation(line: 2909, column: 28, scope: !7684)
!7694 = !DILocation(line: 2909, column: 15, scope: !7684)
!7695 = !DILocation(line: 2909, column: 13, scope: !7684)
!7696 = !DILocation(line: 2914, column: 7, scope: !7684)
!7697 = !DILocation(line: 2915, column: 11, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 2915, column: 11)
!7699 = !DILocation(line: 2915, column: 28, scope: !7698)
!7700 = !DILocation(line: 2915, column: 11, scope: !7684)
!7701 = !DILocation(line: 2917, column: 11, scope: !7702)
!7702 = distinct !DILexicalBlock(scope: !7698, file: !3, line: 2916, column: 2)
!7703 = !DILocation(line: 2917, column: 9, scope: !7702)
!7704 = !DILocation(line: 2918, column: 8, scope: !7705)
!7705 = distinct !DILexicalBlock(scope: !7702, file: !3, line: 2918, column: 8)
!7706 = !DILocation(line: 2918, column: 25, scope: !7705)
!7707 = !DILocation(line: 2918, column: 8, scope: !7702)
!7708 = !DILocation(line: 2920, column: 29, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7705, file: !3, line: 2919, column: 6)
!7710 = !DILocation(line: 2920, column: 15, scope: !7709)
!7711 = !DILocation(line: 2920, column: 13, scope: !7709)
!7712 = !DILocation(line: 2921, column: 12, scope: !7713)
!7713 = distinct !DILexicalBlock(scope: !7709, file: !3, line: 2921, column: 12)
!7714 = !DILocation(line: 2921, column: 12, scope: !7709)
!7715 = !DILocation(line: 2922, column: 29, scope: !7713)
!7716 = !DILocation(line: 2922, column: 3, scope: !7713)
!7717 = !DILocation(line: 2923, column: 20, scope: !7709)
!7718 = !DILocation(line: 2923, column: 18, scope: !7709)
!7719 = !DILocation(line: 2924, column: 6, scope: !7709)
!7720 = !DILocation(line: 2925, column: 2, scope: !7702)
!7721 = !DILocation(line: 2927, column: 2, scope: !7698)
!7722 = !DILocation(line: 2931, column: 23, scope: !7723)
!7723 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2931, column: 7)
!7724 = !DILocation(line: 2931, column: 30, scope: !7723)
!7725 = !DILocation(line: 2931, column: 7, scope: !7723)
!7726 = !DILocation(line: 2931, column: 7, scope: !7663)
!7727 = !DILocation(line: 2932, column: 5, scope: !7723)
!7728 = !DILocation(line: 2934, column: 7, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2934, column: 7)
!7730 = !DILocation(line: 2934, column: 17, scope: !7729)
!7731 = !DILocation(line: 2934, column: 36, scope: !7729)
!7732 = !DILocation(line: 2934, column: 39, scope: !7729)
!7733 = !DILocation(line: 2934, column: 49, scope: !7729)
!7734 = !DILocation(line: 2934, column: 7, scope: !7663)
!7735 = !DILocation(line: 2935, column: 23, scope: !7729)
!7736 = !DILocation(line: 2935, column: 30, scope: !7729)
!7737 = !DILocation(line: 2936, column: 9, scope: !7729)
!7738 = !DILocation(line: 2936, column: 24, scope: !7729)
!7739 = !DILocation(line: 2935, column: 5, scope: !7729)
!7740 = !DILocation(line: 2938, column: 38, scope: !7729)
!7741 = !DILocation(line: 2938, column: 49, scope: !7729)
!7742 = !DILocation(line: 2938, column: 56, scope: !7729)
!7743 = !DILocation(line: 2938, column: 5, scope: !7729)
!7744 = !DILocation(line: 2939, column: 1, scope: !7663)
!7745 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !146, file: !146, line: 182, type: !7746, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, retainedNodes: !2639)
!7746 = !DISubroutineType(types: !7747)
!7747 = !{!6, !6652, !11, !1473}
!7748 = !DILocalVariable(name: "vec_", arg: 1, scope: !7745, file: !146, line: 182, type: !6652)
!7749 = !DILocation(line: 182, column: 1, scope: !7745)
!7750 = !DILocalVariable(name: "ix_", arg: 2, scope: !7745, file: !146, line: 182, type: !11)
!7751 = !DILocalVariable(name: "ptr", arg: 3, scope: !7745, file: !146, line: 182, type: !1473)
!7752 = !DILocation(line: 182, column: 1, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7745, file: !146, line: 182, column: 1)
!7754 = !DILocation(line: 182, column: 1, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7753, file: !146, line: 182, column: 1)
!7756 = !DILocation(line: 182, column: 1, scope: !7757)
!7757 = distinct !DILexicalBlock(scope: !7753, file: !146, line: 182, column: 1)
