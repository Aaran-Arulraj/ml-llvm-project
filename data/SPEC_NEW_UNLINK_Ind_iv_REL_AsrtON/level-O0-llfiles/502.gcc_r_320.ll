; ModuleID = 'tree-scalar-evolution.c'
source_filename = "tree-scalar-evolution.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.real_value = type { i32, [3 x i64] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.scev_info_str = type { %struct.basic_block_def*, %union.tree_node*, %union.tree_node* }
%struct.chrec_stats = type { i32, i32, i32, i32, i32, i32 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@chrec_dont_know = common dso_local global %union.tree_node* null, align 8, !dbg !0
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str = private unnamed_addr constant [29 x i8] c"(get_loop_exit_condition \0A  \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"(analyze_scalar_evolution \0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"  (loop_nb = %d)\0A\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"  (scalar = \00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"(instantiate_scev \0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"  (instantiate_below = %d)\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"  (evolution_loop = %d)\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"  (chrec = \00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"  (res = \00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"))\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"(number_of_iterations_in_loop\0A\00", align 1
@scalar_evolution_info = internal global %struct.htab* null, align 8, !dbg !2415
@cfun = external dso_local global %struct.function*, align 8
@flag_wrapv = external dso_local global i32, align 4
@flag_trapv = external dso_local global i32, align 4
@flag_strict_overflow = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.12 = private unnamed_addr constant [24 x i8] c"tree-scalar-evolution.c\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gt_ggc_r_gt_tree_scalar_evolution_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @scalar_evolution_info to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P13scev_info_str4htab, void (i8*)* @gt_pch_n_P13scev_info_str4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2397
@chrec_not_analyzed_yet = common dso_local global %union.tree_node* null, align 8, !dbg !2411
@chrec_known = common dso_local global %union.tree_node* null, align 8, !dbg !2413
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"(get_scalar_evolution \0A\00", align 1
@nb_get_scev = internal global i32 0, align 4, !dbg !2417
@.str.15 = private unnamed_addr constant [23 x i8] c"  (scalar_evolution = \00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.16 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.17 = private unnamed_addr constant [29 x i8] c"(analyze_initial_condition \0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"  (loop_phi_node = \0A\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"  (init_cond = \00", align 1
@.str.20 = private unnamed_addr constant [29 x i8] c"(analyze_evolution_in_loop \0A\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"  (loop_phi_node = \00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"  (evolution_function = \00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.23 = private unnamed_addr constant [20 x i8] c"(add_to_evolution \0A\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c"  (chrec_before = \00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c")\0A  (to_add = \00", align 1
@dconstm1 = external dso_local global %struct.real_value, align 8
@dconst0 = external dso_local global %struct.real_value, align 8
@.str.26 = private unnamed_addr constant [15 x i8] c"./tree-chrec.h\00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c"(set_scalar_evolution \0A\00", align 1
@.str.28 = private unnamed_addr constant [28 x i8] c"  instantiated_below = %d \0A\00", align 1
@.str.29 = private unnamed_addr constant [25 x i8] c")\0A  (scalar_evolution = \00", align 1
@nb_set_scev = internal global i32 0, align 4, !dbg !2419
@.str.30 = private unnamed_addr constant [32 x i8] c"  (set_nb_iterations_in_loop = \00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"(classify_chrec \00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"  affine_univariate\0A\00", align 1
@.str.34 = private unnamed_addr constant [23 x i8] c"  affine_multivariate\0A\00", align 1
@.str.35 = private unnamed_addr constant [28 x i8] c"  higher_degree_polynomial\0A\00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"  undetermined\0A\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"\0A(\0A\00", align 1
@.str.38 = private unnamed_addr constant [43 x i8] c"-----------------------------------------\0A\00", align 1
@.str.39 = private unnamed_addr constant [29 x i8] c"%d\09affine univariate chrecs\0A\00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"%d\09affine multivariate chrecs\0A\00", align 1
@.str.41 = private unnamed_addr constant [38 x i8] c"%d\09degree greater than 2 polynomials\0A\00", align 1
@.str.42 = private unnamed_addr constant [27 x i8] c"%d\09chrec_dont_know chrecs\0A\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"%d\09total chrecs\0A\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"%d\09with undetermined coefficients\0A\00", align 1
@.str.45 = private unnamed_addr constant [32 x i8] c"%d\09chrecs in the scev database\0A\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"%d\09sets in the scev database\0A\00", align 1
@.str.47 = private unnamed_addr constant [30 x i8] c"%d\09gets in the scev database\0A\00", align 1
@.str.48 = private unnamed_addr constant [4 x i8] c")\0A\0A\00", align 1
@.str.49 = private unnamed_addr constant [29 x i8] c"%d\09nb_chrec_dont_know_loops\0A\00", align 1
@.str.50 = private unnamed_addr constant [20 x i8] c"%d\09nb_static_loops\0A\00", align 1
@.str.51 = private unnamed_addr constant [19 x i8] c"%d\09nb_total_loops\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %chrec, i32 %loop_nb) #0 !dbg !2425 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %loop_nb.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %def = alloca %union.gimple_statement_d*, align 8
  %def_loop = alloca %struct.loop*, align 8
  %loop = alloca %struct.loop*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2430, metadata !DIExpression()), !dbg !2431
  store i32 %loop_nb, i32* %loop_nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nb.addr, metadata !2432, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2434, metadata !DIExpression()), !dbg !2435
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2436, metadata !DIExpression()), !dbg !2437
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2438
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2440
  br i1 %cmp, label %if.then, label %if.end, !dbg !2441

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2442
  br label %return, !dbg !2442

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2443
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1), !dbg !2445
  %tobool = icmp ne i8 %call, 0, !dbg !2445
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !2446

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2447
  br label %return, !dbg !2447

if.end2:                                          ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2448
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !2448
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !2448
  %bf.load = load i64, i64* %3, align 8, !dbg !2448
  %bf.clear = and i64 %bf.load, 65535, !dbg !2448
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2448
  %cmp3 = icmp eq i32 %bf.cast, 32, !dbg !2450
  br i1 %cmp3, label %if.then33, label %lor.lhs.false, !dbg !2451

lor.lhs.false:                                    ; preds = %if.end2
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2452
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !2452
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !2452
  %bf.load5 = load i64, i64* %5, align 8, !dbg !2452
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !2452
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !2452
  %cmp8 = icmp eq i32 %bf.cast7, 34, !dbg !2453
  br i1 %cmp8, label %if.then33, label %lor.lhs.false9, !dbg !2454

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2455
  %base10 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !2455
  %7 = bitcast %struct.tree_base* %base10 to i64*, !dbg !2455
  %bf.load11 = load i64, i64* %7, align 8, !dbg !2455
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !2455
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !2455
  %cmp14 = icmp eq i32 %bf.cast13, 29, !dbg !2456
  br i1 %cmp14, label %if.then33, label %lor.lhs.false15, !dbg !2457

lor.lhs.false15:                                  ; preds = %lor.lhs.false9
  %8 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2458
  %base16 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !2458
  %9 = bitcast %struct.tree_base* %base16 to i64*, !dbg !2458
  %bf.load17 = load i64, i64* %9, align 8, !dbg !2458
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !2458
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !2458
  %cmp20 = icmp eq i32 %bf.cast19, 30, !dbg !2459
  br i1 %cmp20, label %if.then33, label %lor.lhs.false21, !dbg !2460

lor.lhs.false21:                                  ; preds = %lor.lhs.false15
  %10 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2461
  %base22 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !2461
  %11 = bitcast %struct.tree_base* %base22 to i64*, !dbg !2461
  %bf.load23 = load i64, i64* %11, align 8, !dbg !2461
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !2461
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !2461
  %cmp26 = icmp eq i32 %bf.cast25, 36, !dbg !2462
  br i1 %cmp26, label %if.then33, label %lor.lhs.false27, !dbg !2463

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %12 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2464
  %base28 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !2464
  %13 = bitcast %struct.tree_base* %base28 to i64*, !dbg !2464
  %bf.load29 = load i64, i64* %13, align 8, !dbg !2464
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !2464
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !2464
  %cmp32 = icmp eq i32 %bf.cast31, 31, !dbg !2465
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !2466

if.then33:                                        ; preds = %lor.lhs.false27, %lor.lhs.false21, %lor.lhs.false15, %lor.lhs.false9, %lor.lhs.false, %if.end2
  store i8 1, i8* %retval, align 1, !dbg !2467
  br label %return, !dbg !2467

if.end34:                                         ; preds = %lor.lhs.false27
  %14 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2468
  %base35 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !2468
  %15 = bitcast %struct.tree_base* %base35 to i64*, !dbg !2468
  %bf.load36 = load i64, i64* %15, align 8, !dbg !2468
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !2468
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !2468
  %cmp39 = icmp eq i32 %bf.cast38, 141, !dbg !2470
  br i1 %cmp39, label %if.then40, label %if.end52, !dbg !2471

if.then40:                                        ; preds = %if.end34
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !2472, metadata !DIExpression()), !dbg !2474
  %16 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2475
  %ssa_name = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !2475
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !2475
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !2475
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %def, align 8, !dbg !2474
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop, metadata !2476, metadata !DIExpression()), !dbg !2477
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !2478
  %call41 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %18), !dbg !2479
  store %struct.loop* %call41, %struct.loop** %def_loop, align 8, !dbg !2477
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2480, metadata !DIExpression()), !dbg !2481
  %19 = load i32, i32* %loop_nb.addr, align 4, !dbg !2482
  %call42 = call %struct.loop* @get_loop(i32 %19), !dbg !2483
  store %struct.loop* %call42, %struct.loop** %loop, align 8, !dbg !2481
  %20 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !2484
  %cmp43 = icmp eq %struct.loop* %20, null, !dbg !2486
  br i1 %cmp43, label %if.then44, label %if.end45, !dbg !2487

if.then44:                                        ; preds = %if.then40
  store i8 0, i8* %retval, align 1, !dbg !2488
  br label %return, !dbg !2488

if.end45:                                         ; preds = %if.then40
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2489
  %22 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !2491
  %cmp46 = icmp eq %struct.loop* %21, %22, !dbg !2492
  br i1 %cmp46, label %if.then50, label %lor.lhs.false47, !dbg !2493

lor.lhs.false47:                                  ; preds = %if.end45
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2494
  %24 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !2495
  %call48 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %23, %struct.loop* %24), !dbg !2496
  %conv = zext i8 %call48 to i32, !dbg !2496
  %tobool49 = icmp ne i32 %conv, 0, !dbg !2496
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !2497

if.then50:                                        ; preds = %lor.lhs.false47, %if.end45
  store i8 1, i8* %retval, align 1, !dbg !2498
  br label %return, !dbg !2498

if.end51:                                         ; preds = %lor.lhs.false47
  store i8 0, i8* %retval, align 1, !dbg !2499
  br label %return, !dbg !2499

if.end52:                                         ; preds = %if.end34
  %25 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2500
  %call53 = call i32 @tree_operand_length(%union.tree_node* %25), !dbg !2500
  store i32 %call53, i32* %n, align 4, !dbg !2501
  store i32 0, i32* %i, align 4, !dbg !2502
  br label %for.cond, !dbg !2504

for.cond:                                         ; preds = %for.inc, %if.end52
  %26 = load i32, i32* %i, align 4, !dbg !2505
  %27 = load i32, i32* %n, align 4, !dbg !2507
  %cmp54 = icmp slt i32 %26, %27, !dbg !2508
  br i1 %cmp54, label %for.body, label %for.end, !dbg !2509

for.body:                                         ; preds = %for.cond
  %28 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2510
  %exp = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !2510
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2510
  %29 = load i32, i32* %i, align 4, !dbg !2510
  %idxprom = sext i32 %29 to i64, !dbg !2510
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !2510
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2510
  %31 = load i32, i32* %loop_nb.addr, align 4, !dbg !2512
  %call56 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %30, i32 %31), !dbg !2513
  %tobool57 = icmp ne i8 %call56, 0, !dbg !2513
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !2514

if.then58:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !2515
  br label %return, !dbg !2515

if.end59:                                         ; preds = %for.body
  br label %for.inc, !dbg !2516

for.inc:                                          ; preds = %if.end59
  %32 = load i32, i32* %i, align 4, !dbg !2517
  %inc = add nsw i32 %32, 1, !dbg !2517
  store i32 %inc, i32* %i, align 4, !dbg !2517
  br label %for.cond, !dbg !2518, !llvm.loop !2519

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !2521
  br label %return, !dbg !2521

return:                                           ; preds = %for.end, %if.then58, %if.end51, %if.then50, %if.then44, %if.then33, %if.then1, %if.then
  %33 = load i8, i8* %retval, align 1, !dbg !2522
  ret i8 %33, !dbg !2522
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !2523 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2527, metadata !DIExpression()), !dbg !2528
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2529, metadata !DIExpression()), !dbg !2530
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2531
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !2532
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !2530
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2533
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !2533
  br i1 %tobool, label %if.end, label %if.then, !dbg !2535

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !2536
  br label %return, !dbg !2536

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2537
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !2538
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2538
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !2539
  br label %return, !dbg !2539

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !2540
  ret %struct.loop* %4, !dbg !2540
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !2541 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2544, metadata !DIExpression()), !dbg !2545
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2546
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2546
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2546
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2546
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !2546
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2546
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !2546
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2546

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2546
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2546
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !2546
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !2546
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !2546
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !2546
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !2546
  br label %cond.end, !dbg !2546

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2546

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2546
  %6 = load i32, i32* %num.addr, align 4, !dbg !2546
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !2546
  ret %struct.loop* %call, !dbg !2547
}

declare dso_local zeroext i8 @flow_loop_nested_p(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !2548 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !2551, metadata !DIExpression()), !dbg !2552
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !2553
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2553
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2553
  %bf.load = load i64, i64* %1, align 8, !dbg !2553
  %bf.clear = and i64 %bf.load, 65535, !dbg !2553
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2553
  %idxprom = sext i32 %bf.cast to i64, !dbg !2553
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2553
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2553
  %cmp = icmp eq i32 %2, 9, !dbg !2553
  br i1 %cmp, label %if.then, label %if.else, !dbg !2555

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !2556
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !2556
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2556
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !2556
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !2556
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !2556
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2556
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !2556
  %5 = load i64, i64* %low, align 8, !dbg !2556
  %conv = trunc i64 %5 to i32, !dbg !2556
  store i32 %conv, i32* %retval, align 4, !dbg !2557
  br label %return, !dbg !2557

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !2558
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !2558
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !2558
  %bf.load4 = load i64, i64* %7, align 8, !dbg !2558
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !2558
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !2558
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !2558
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !2558
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !2558
  %conv9 = zext i8 %8 to i32, !dbg !2558
  store i32 %conv9, i32* %retval, align 4, !dbg !2559
  br label %return, !dbg !2559

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2560
  ret i32 %9, !dbg !2560
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %loop, %union.tree_node* %evolution_fn) #0 !dbg !2561 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %evolution_fn.addr = alloca %union.tree_node*, align 8
  %val = alloca i8, align 1
  %inner_loop = alloca %struct.loop*, align 8
  %nb_iter = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2564, metadata !DIExpression()), !dbg !2565
  store %union.tree_node* %evolution_fn, %union.tree_node** %evolution_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_fn.addr, metadata !2566, metadata !DIExpression()), !dbg !2567
  call void @llvm.dbg.declare(metadata i8* %val, metadata !2568, metadata !DIExpression()), !dbg !2569
  store i8 0, i8* %val, align 1, !dbg !2569
  %0 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2570
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2572
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !2573
  br i1 %cmp, label %if.then, label %if.else, !dbg !2574

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2575
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !2576
  br label %return, !dbg !2576

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2577
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2577
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2577
  %bf.load = load i64, i64* %4, align 8, !dbg !2577
  %bf.clear = and i64 %bf.load, 65535, !dbg !2577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2577
  %cmp1 = icmp eq i32 %bf.cast, 146, !dbg !2579
  br i1 %cmp1, label %if.then2, label %if.else19, !dbg !2580

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.loop** %inner_loop, metadata !2581, metadata !DIExpression()), !dbg !2583
  %5 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2584
  %call = call %struct.loop* @get_chrec_loop(%union.tree_node* %5), !dbg !2585
  store %struct.loop* %call, %struct.loop** %inner_loop, align 8, !dbg !2583
  %6 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !2586
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2588
  %cmp3 = icmp eq %struct.loop* %6, %7, !dbg !2589
  br i1 %cmp3, label %if.then5, label %lor.lhs.false, !dbg !2590

lor.lhs.false:                                    ; preds = %if.then2
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2591
  %9 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !2592
  %call4 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %8, %struct.loop* %9), !dbg !2593
  %conv = zext i8 %call4 to i32, !dbg !2593
  %tobool = icmp ne i32 %conv, 0, !dbg !2593
  br i1 %tobool, label %if.then5, label %if.else18, !dbg !2594

if.then5:                                         ; preds = %lor.lhs.false, %if.then2
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_iter, metadata !2595, metadata !DIExpression()), !dbg !2597
  %10 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !2598
  %call6 = call %union.tree_node* @number_of_latch_executions(%struct.loop* %10), !dbg !2599
  store %union.tree_node* %call6, %union.tree_node** %nb_iter, align 8, !dbg !2597
  %11 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !2600
  %12 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2602
  %cmp7 = icmp eq %union.tree_node* %11, %12, !dbg !2603
  br i1 %cmp7, label %if.then9, label %if.else10, !dbg !2604

if.then9:                                         ; preds = %if.then5
  %13 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2605
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !2606
  br label %return, !dbg !2606

if.else10:                                        ; preds = %if.then5
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !2607, metadata !DIExpression()), !dbg !2609
  %14 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !2610
  %num = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !2611
  %15 = load i32, i32* %num, align 8, !dbg !2611
  %16 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2612
  %17 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !2613
  %call11 = call %union.tree_node* @chrec_apply(i32 %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !2614
  store %union.tree_node* %call11, %union.tree_node** %res, align 8, !dbg !2615
  %18 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2616
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2618
  %num12 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2619
  %20 = load i32, i32* %num12, align 8, !dbg !2619
  %call13 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %18, i32 %20), !dbg !2620
  %tobool14 = icmp ne i8 %call13, 0, !dbg !2620
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !2621

if.then15:                                        ; preds = %if.else10
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2622
  %22 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2623
  %call16 = call %union.tree_node* @instantiate_parameters(%struct.loop* %21, %union.tree_node* %22), !dbg !2624
  store %union.tree_node* %call16, %union.tree_node** %res, align 8, !dbg !2625
  br label %if.end, !dbg !2626

if.end:                                           ; preds = %if.then15, %if.else10
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2627
  %24 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2628
  %call17 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %23, %union.tree_node* %24), !dbg !2629
  store %union.tree_node* %call17, %union.tree_node** %retval, align 8, !dbg !2630
  br label %return, !dbg !2630

if.else18:                                        ; preds = %lor.lhs.false
  %25 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2631
  store %union.tree_node* %25, %union.tree_node** %retval, align 8, !dbg !2632
  br label %return, !dbg !2632

if.else19:                                        ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2633
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2635
  %num20 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 0, !dbg !2636
  %28 = load i32, i32* %num20, align 8, !dbg !2636
  %call21 = call zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %26, i32 %28, i8* %val), !dbg !2637
  %conv22 = zext i8 %call21 to i32, !dbg !2637
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !2637
  br i1 %tobool23, label %land.lhs.true, label %if.else27, !dbg !2638

land.lhs.true:                                    ; preds = %if.else19
  %29 = load i8, i8* %val, align 1, !dbg !2639
  %conv24 = zext i8 %29 to i32, !dbg !2639
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !2639
  br i1 %tobool25, label %if.then26, label %if.else27, !dbg !2640

if.then26:                                        ; preds = %land.lhs.true
  %30 = load %union.tree_node*, %union.tree_node** %evolution_fn.addr, align 8, !dbg !2641
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !2642
  br label %return, !dbg !2642

if.else27:                                        ; preds = %land.lhs.true, %if.else19
  %31 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2643
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !2644
  br label %return, !dbg !2644

return:                                           ; preds = %if.else27, %if.then26, %if.else18, %if.end, %if.then9, %if.then
  %32 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2645
  ret %union.tree_node* %32, !dbg !2645
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_chrec_loop(%union.tree_node* %chrec) #0 !dbg !2646 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2650, metadata !DIExpression()), !dbg !2651
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2652
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !2652
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2652
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !2652
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2652
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !2652
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2652
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 0, !dbg !2652
  %2 = load i64, i64* %low, align 8, !dbg !2652
  %conv = trunc i64 %2 to i32, !dbg !2652
  %call = call %struct.loop* @get_loop(i32 %conv), !dbg !2653
  ret %struct.loop* %call, !dbg !2654
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @number_of_latch_executions(%struct.loop* %loop) #0 !dbg !2655 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %res = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %niter_desc = alloca %struct.tree_niter_desc, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2658, metadata !DIExpression()), !dbg !2659
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !2660, metadata !DIExpression()), !dbg !2661
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !2662, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !2664, metadata !DIExpression()), !dbg !2665
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %niter_desc, metadata !2666, metadata !DIExpression()), !dbg !2682
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2683
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 11, !dbg !2684
  %1 = load %union.tree_node*, %union.tree_node** %nb_iterations, align 8, !dbg !2684
  store %union.tree_node* %1, %union.tree_node** %res, align 8, !dbg !2685
  %2 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2686
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !2686
  br i1 %tobool, label %if.then, label %if.end, !dbg !2688

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2689
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !2690
  br label %return, !dbg !2690

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2691
  store %union.tree_node* %4, %union.tree_node** %res, align 8, !dbg !2692
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2693
  %tobool1 = icmp ne %struct._IO_FILE* %5, null, !dbg !2693
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !2695

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !2696
  %and = and i32 %6, 8, !dbg !2697
  %tobool2 = icmp ne i32 %and, 0, !dbg !2697
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !2698

if.then3:                                         ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2699
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0)), !dbg !2700
  br label %if.end4, !dbg !2700

if.end4:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2701
  %call5 = call %struct.edge_def* @single_exit(%struct.loop* %8), !dbg !2702
  store %struct.edge_def* %call5, %struct.edge_def** %exit, align 8, !dbg !2703
  %9 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2704
  %tobool6 = icmp ne %struct.edge_def* %9, null, !dbg !2704
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !2706

if.then7:                                         ; preds = %if.end4
  br label %end, !dbg !2707

if.end8:                                          ; preds = %if.end4
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2708
  %11 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2710
  %call9 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %10, %struct.edge_def* %11, %struct.tree_niter_desc* %niter_desc, i8 zeroext 0), !dbg !2711
  %tobool10 = icmp ne i8 %call9, 0, !dbg !2711
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !2712

if.then11:                                        ; preds = %if.end8
  br label %end, !dbg !2713

if.end12:                                         ; preds = %if.end8
  %niter = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 2, !dbg !2714
  %12 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !2714
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !2714
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2714
  %13 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !2714
  store %union.tree_node* %13, %union.tree_node** %type, align 8, !dbg !2715
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 1, !dbg !2716
  %14 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !2716
  %call14 = call i32 @integer_nonzerop(%union.tree_node* %14), !dbg !2718
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2718
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !2719

if.then16:                                        ; preds = %if.end12
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2720
  %call17 = call %union.tree_node* @build_int_cst(%union.tree_node* %15, i64 0), !dbg !2721
  store %union.tree_node* %call17, %union.tree_node** %res, align 8, !dbg !2722
  br label %if.end25, !dbg !2723

if.else:                                          ; preds = %if.end12
  %may_be_zero18 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 1, !dbg !2724
  %16 = load %union.tree_node*, %union.tree_node** %may_be_zero18, align 8, !dbg !2724
  %call19 = call i32 @integer_zerop(%union.tree_node* %16), !dbg !2726
  %tobool20 = icmp ne i32 %call19, 0, !dbg !2726
  br i1 %tobool20, label %if.then21, label %if.else23, !dbg !2727

if.then21:                                        ; preds = %if.else
  %niter22 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 2, !dbg !2728
  %17 = load %union.tree_node*, %union.tree_node** %niter22, align 8, !dbg !2728
  store %union.tree_node* %17, %union.tree_node** %res, align 8, !dbg !2729
  br label %if.end24, !dbg !2730

if.else23:                                        ; preds = %if.else
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2731
  store %union.tree_node* %18, %union.tree_node** %res, align 8, !dbg !2732
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %if.then21
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then16
  br label %end, !dbg !2733

end:                                              ; preds = %if.end25, %if.then11, %if.then7
  call void @llvm.dbg.label(metadata !2734), !dbg !2735
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2736
  %20 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2737
  %call26 = call %union.tree_node* @set_nb_iterations_in_loop(%struct.loop* %19, %union.tree_node* %20), !dbg !2738
  store %union.tree_node* %call26, %union.tree_node** %retval, align 8, !dbg !2739
  br label %return, !dbg !2739

return:                                           ; preds = %end, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2740
  ret %union.tree_node* %21, !dbg !2740
}

declare dso_local %union.tree_node* @chrec_apply(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !2741 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2742, metadata !DIExpression()), !dbg !2743
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2744, metadata !DIExpression()), !dbg !2745
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2746
  %call = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !2747
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2748
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2749
  %call1 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %1, %union.tree_node* %2), !dbg !2750
  ret %union.tree_node* %call1, !dbg !2751
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %chrec, i32 %loop_num, i8* %res) #0 !dbg !2752 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %loop_num.addr = alloca i32, align 4
  %res.addr = alloca i8*, align 8
  %scev = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2757, metadata !DIExpression()), !dbg !2758
  store i32 %loop_num, i32* %loop_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_num.addr, metadata !2759, metadata !DIExpression()), !dbg !2760
  store i8* %res, i8** %res.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %res.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  call void @llvm.dbg.declare(metadata %union.tree_node** %scev, metadata !2763, metadata !DIExpression()), !dbg !2764
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2765
  %1 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !2767
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !2768
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2769

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2770
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2771
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !2772
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !2773

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2774
  %5 = load i32, i32* %loop_num.addr, align 4, !dbg !2775
  %call = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %4, i32 %5), !dbg !2776
  %conv = zext i8 %call to i32, !dbg !2776
  %tobool = icmp ne i32 %conv, 0, !dbg !2776
  br i1 %tobool, label %if.then, label %if.end, !dbg !2777

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !2778
  br label %return, !dbg !2778

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2779
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %6), !dbg !2779
  store %union.tree_node* %call3, %union.tree_node** %chrec.addr, align 8, !dbg !2779
  %7 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2780
  %8 = load i32, i32* %loop_num.addr, align 4, !dbg !2781
  %call4 = call %union.tree_node* @hide_evolution_in_other_loops_than_loop(%union.tree_node* %7, i32 %8), !dbg !2782
  store %union.tree_node* %call4, %union.tree_node** %scev, align 8, !dbg !2783
  %9 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !2784
  %call5 = call zeroext i8 @tree_is_chrec(%union.tree_node* %9), !dbg !2785
  %tobool6 = icmp ne i8 %call5, 0, !dbg !2786
  %lnot = xor i1 %tobool6, true, !dbg !2786
  %lnot.ext = zext i1 %lnot to i32, !dbg !2786
  %conv7 = trunc i32 %lnot.ext to i8, !dbg !2786
  %10 = load i8*, i8** %res.addr, align 8, !dbg !2787
  store i8 %conv7, i8* %10, align 1, !dbg !2788
  store i8 1, i8* %retval, align 1, !dbg !2789
  br label %return, !dbg !2789

return:                                           ; preds = %if.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !2790
  ret i8 %11, !dbg !2790
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @chrec_is_positive(%union.tree_node* %chrec, i8* %value) #0 !dbg !2791 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca i8*, align 8
  %value0 = alloca i8, align 1
  %value1 = alloca i8, align 1
  %value2 = alloca i8, align 1
  %end_value = alloca %union.tree_node*, align 8
  %nb_iter = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2794, metadata !DIExpression()), !dbg !2795
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !2796, metadata !DIExpression()), !dbg !2797
  call void @llvm.dbg.declare(metadata i8* %value0, metadata !2798, metadata !DIExpression()), !dbg !2799
  call void @llvm.dbg.declare(metadata i8* %value1, metadata !2800, metadata !DIExpression()), !dbg !2801
  call void @llvm.dbg.declare(metadata i8* %value2, metadata !2802, metadata !DIExpression()), !dbg !2803
  call void @llvm.dbg.declare(metadata %union.tree_node** %end_value, metadata !2804, metadata !DIExpression()), !dbg !2805
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_iter, metadata !2806, metadata !DIExpression()), !dbg !2807
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2808
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2808
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2808
  %bf.load = load i64, i64* %1, align 8, !dbg !2808
  %bf.clear = and i64 %bf.load, 65535, !dbg !2808
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2808
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
    i32 23, label %sw.bb35
  ], !dbg !2809

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2810
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !2810
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2810
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !2810
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2810
  %call = call zeroext i8 @chrec_is_positive(%union.tree_node* %3, i8* %value0), !dbg !2813
  %tobool = icmp ne i8 %call, 0, !dbg !2813
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2814

lor.lhs.false:                                    ; preds = %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2815
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !2815
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !2815
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !2815
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !2815
  %call4 = call zeroext i8 @chrec_is_positive(%union.tree_node* %5, i8* %value1), !dbg !2816
  %tobool5 = icmp ne i8 %call4, 0, !dbg !2816
  br i1 %tobool5, label %if.end, label %if.then, !dbg !2817

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !2818
  br label %return, !dbg !2818

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i8, i8* %value0, align 1, !dbg !2819
  %conv = zext i8 %6 to i32, !dbg !2819
  %7 = load i8, i8* %value1, align 1, !dbg !2821
  %conv6 = zext i8 %7 to i32, !dbg !2821
  %cmp = icmp eq i32 %conv, %conv6, !dbg !2822
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !2823

if.then8:                                         ; preds = %if.end
  %8 = load i8, i8* %value0, align 1, !dbg !2824
  %9 = load i8*, i8** %value.addr, align 8, !dbg !2826
  store i8 %8, i8* %9, align 1, !dbg !2827
  store i8 1, i8* %retval, align 1, !dbg !2828
  br label %return, !dbg !2828

if.end9:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2829
  %call10 = call zeroext i8 @evolution_function_is_affine_p(%union.tree_node* %10), !dbg !2831
  %tobool11 = icmp ne i8 %call10, 0, !dbg !2831
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !2832

if.then12:                                        ; preds = %if.end9
  store i8 0, i8* %retval, align 1, !dbg !2833
  br label %return, !dbg !2833

if.end13:                                         ; preds = %if.end9
  %11 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2834
  %call14 = call %struct.loop* @get_chrec_loop(%union.tree_node* %11), !dbg !2835
  %call15 = call %union.tree_node* @number_of_latch_executions(%struct.loop* %call14), !dbg !2836
  store %union.tree_node* %call15, %union.tree_node** %nb_iter, align 8, !dbg !2837
  %12 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !2838
  %call16 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %12), !dbg !2840
  %tobool17 = icmp ne i8 %call16, 0, !dbg !2840
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !2841

if.then18:                                        ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !2842
  br label %return, !dbg !2842

if.end19:                                         ; preds = %if.end13
  %13 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2843
  %exp20 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !2843
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !2843
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !2843
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !2843
  %int_cst = bitcast %union.tree_node* %14 to %struct.tree_int_cst*, !dbg !2843
  %int_cst23 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2843
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst23, i32 0, i32 0, !dbg !2843
  %15 = load i64, i64* %low, align 8, !dbg !2843
  %conv24 = trunc i64 %15 to i32, !dbg !2843
  %16 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2844
  %17 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !2845
  %call25 = call %union.tree_node* @chrec_apply(i32 %conv24, %union.tree_node* %16, %union.tree_node* %17), !dbg !2846
  store %union.tree_node* %call25, %union.tree_node** %end_value, align 8, !dbg !2847
  %18 = load %union.tree_node*, %union.tree_node** %end_value, align 8, !dbg !2848
  %call26 = call zeroext i8 @chrec_is_positive(%union.tree_node* %18, i8* %value2), !dbg !2850
  %tobool27 = icmp ne i8 %call26, 0, !dbg !2850
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !2851

if.then28:                                        ; preds = %if.end19
  store i8 0, i8* %retval, align 1, !dbg !2852
  br label %return, !dbg !2852

if.end29:                                         ; preds = %if.end19
  %19 = load i8, i8* %value0, align 1, !dbg !2853
  %20 = load i8*, i8** %value.addr, align 8, !dbg !2854
  store i8 %19, i8* %20, align 1, !dbg !2855
  %21 = load i8, i8* %value0, align 1, !dbg !2856
  %conv30 = zext i8 %21 to i32, !dbg !2856
  %22 = load i8, i8* %value1, align 1, !dbg !2857
  %conv31 = zext i8 %22 to i32, !dbg !2857
  %cmp32 = icmp eq i32 %conv30, %conv31, !dbg !2858
  %conv33 = zext i1 %cmp32 to i32, !dbg !2858
  %conv34 = trunc i32 %conv33 to i8, !dbg !2856
  store i8 %conv34, i8* %retval, align 1, !dbg !2859
  br label %return, !dbg !2859

sw.bb35:                                          ; preds = %entry
  %23 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2860
  %call36 = call i32 @tree_int_cst_sgn(%union.tree_node* %23), !dbg !2861
  %cmp37 = icmp eq i32 %call36, 1, !dbg !2862
  %conv38 = zext i1 %cmp37 to i32, !dbg !2862
  %conv39 = trunc i32 %conv38 to i8, !dbg !2863
  %24 = load i8*, i8** %value.addr, align 8, !dbg !2864
  store i8 %conv39, i8* %24, align 1, !dbg !2865
  store i8 1, i8* %retval, align 1, !dbg !2866
  br label %return, !dbg !2866

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2867
  br label %return, !dbg !2867

return:                                           ; preds = %sw.default, %sw.bb35, %if.end29, %if.then28, %if.then18, %if.then12, %if.then8, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !2868
  ret i8 %25, !dbg !2868
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @evolution_function_is_affine_p(%union.tree_node* %chrec) #0 !dbg !2869 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !2872, metadata !DIExpression()), !dbg !2873
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2874
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2876
  br i1 %cmp, label %if.then, label %if.end, !dbg !2877

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2878
  br label %return, !dbg !2878

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2879
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2879
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2879
  %bf.load = load i64, i64* %2, align 8, !dbg !2879
  %bf.clear = and i64 %bf.load, 65535, !dbg !2879
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2879
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
  ], !dbg !2880

sw.bb:                                            ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2881
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !2881
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2881
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !2881
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2881
  %5 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2884
  %exp1 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !2884
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !2884
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !2884
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !2884
  %int_cst = bitcast %union.tree_node* %6 to %struct.tree_int_cst*, !dbg !2884
  %int_cst4 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2884
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst4, i32 0, i32 0, !dbg !2884
  %7 = load i64, i64* %low, align 8, !dbg !2884
  %conv = trunc i64 %7 to i32, !dbg !2884
  %call = call zeroext i8 @evolution_function_is_invariant_p(%union.tree_node* %4, i32 %conv), !dbg !2885
  %conv5 = zext i8 %call to i32, !dbg !2885
  %tobool = icmp ne i32 %conv5, 0, !dbg !2885
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2886

land.lhs.true:                                    ; preds = %sw.bb
  %8 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2887
  %exp6 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !2887
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !2887
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 2, !dbg !2887
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !2887
  %10 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !2888
  %exp9 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !2888
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !2888
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 0, !dbg !2888
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !2888
  %int_cst12 = bitcast %union.tree_node* %11 to %struct.tree_int_cst*, !dbg !2888
  %int_cst13 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst12, i32 0, i32 1, !dbg !2888
  %low14 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst13, i32 0, i32 0, !dbg !2888
  %12 = load i64, i64* %low14, align 8, !dbg !2888
  %conv15 = trunc i64 %12 to i32, !dbg !2888
  %call16 = call zeroext i8 @evolution_function_is_invariant_p(%union.tree_node* %9, i32 %conv15), !dbg !2889
  %conv17 = zext i8 %call16 to i32, !dbg !2889
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !2889
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !2890

if.then19:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !2891
  br label %return, !dbg !2891

if.else:                                          ; preds = %land.lhs.true, %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !2892
  br label %return, !dbg !2892

sw.default:                                       ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2893
  br label %return, !dbg !2893

return:                                           ; preds = %sw.default, %if.else, %if.then19, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !2894
  ret i8 %13, !dbg !2894
}

declare dso_local zeroext i8 @chrec_contains_undetermined(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %loop) #0 !dbg !2895 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %res = alloca %union.gimple_statement_d*, align 8
  %exit_edge = alloca %struct.edge_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2900, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %res, metadata !2902, metadata !DIExpression()), !dbg !2903
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %res, align 8, !dbg !2903
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_edge, metadata !2904, metadata !DIExpression()), !dbg !2905
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2906
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !2907
  store %struct.edge_def* %call, %struct.edge_def** %exit_edge, align 8, !dbg !2905
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2908
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !2908
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2910

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !2911
  %and = and i32 %2, 8, !dbg !2912
  %tobool1 = icmp ne i32 %and, 0, !dbg !2912
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2913

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2914
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)), !dbg !2915
  br label %if.end, !dbg !2915

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !2916
  %tobool3 = icmp ne %struct.edge_def* %4, null, !dbg !2916
  br i1 %tobool3, label %if.then4, label %if.end9, !dbg !2918

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2919, metadata !DIExpression()), !dbg !2921
  %5 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !2922
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !2923
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2923
  %call5 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %6), !dbg !2924
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !2925
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2926
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !2928
  %cmp = icmp eq i32 %call6, 1, !dbg !2929
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !2930

if.then7:                                         ; preds = %if.then4
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2931
  store %union.gimple_statement_d* %8, %union.gimple_statement_d** %res, align 8, !dbg !2932
  br label %if.end8, !dbg !2933

if.end8:                                          ; preds = %if.then7, %if.then4
  br label %if.end9, !dbg !2934

if.end9:                                          ; preds = %if.end8, %if.end
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2935
  %tobool10 = icmp ne %struct._IO_FILE* %9, null, !dbg !2935
  br i1 %tobool10, label %land.lhs.true11, label %if.end16, !dbg !2937

land.lhs.true11:                                  ; preds = %if.end9
  %10 = load i32, i32* @dump_flags, align 4, !dbg !2938
  %and12 = and i32 %10, 8, !dbg !2939
  %tobool13 = icmp ne i32 %and12, 0, !dbg !2939
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !2940

if.then14:                                        ; preds = %land.lhs.true11
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2941
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %res, align 8, !dbg !2943
  call void @print_gimple_stmt(%struct._IO_FILE* %11, %union.gimple_statement_d* %12, i32 0, i32 0), !dbg !2944
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2945
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !2946
  br label %if.end16, !dbg !2947

if.end16:                                         ; preds = %if.then14, %land.lhs.true11, %if.end9
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %res, align 8, !dbg !2948
  ret %union.gimple_statement_d* %14, !dbg !2949
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !2950 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !2954, metadata !DIExpression()), !dbg !2955
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !2956
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !2957
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2958
  %bf.load = load i32, i32* %1, align 8, !dbg !2958
  %bf.clear = and i32 %bf.load, 255, !dbg !2958
  ret i32 %bf.clear, !dbg !2959
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop* %loop, %union.tree_node* %var) #0 !dbg !2960 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2961, metadata !DIExpression()), !dbg !2962
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !2963, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !2965, metadata !DIExpression()), !dbg !2966
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2967
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2967
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2969

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !2970
  %and = and i32 %1, 8, !dbg !2971
  %tobool1 = icmp ne i32 %and, 0, !dbg !2971
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2972

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2973
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0)), !dbg !2975
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2976
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2977
  %num = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 0, !dbg !2978
  %5 = load i32, i32* %num, align 8, !dbg !2978
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %5), !dbg !2979
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2980
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)), !dbg !2981
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2982
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2983
  call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %8, i32 0), !dbg !2984
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2985
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !2986
  br label %if.end, !dbg !2987

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2988
  %call5 = call %struct.basic_block_def* @block_before_loop(%struct.loop* %10), !dbg !2989
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2990
  %call6 = call %union.tree_node* @get_scalar_evolution(%struct.basic_block_def* %call5, %union.tree_node* %11), !dbg !2991
  store %union.tree_node* %call6, %union.tree_node** %res, align 8, !dbg !2992
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2993
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2994
  %14 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !2995
  %call7 = call %union.tree_node* @analyze_scalar_evolution_1(%struct.loop* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !2996
  store %union.tree_node* %call7, %union.tree_node** %res, align 8, !dbg !2997
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2998
  %tobool8 = icmp ne %struct._IO_FILE* %15, null, !dbg !2998
  br i1 %tobool8, label %land.lhs.true9, label %if.end14, !dbg !3000

land.lhs.true9:                                   ; preds = %if.end
  %16 = load i32, i32* @dump_flags, align 4, !dbg !3001
  %and10 = and i32 %16, 8, !dbg !3002
  %tobool11 = icmp ne i32 %and10, 0, !dbg !3002
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !3003

if.then12:                                        ; preds = %land.lhs.true9
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3004
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !3005
  br label %if.end14, !dbg !3005

if.end14:                                         ; preds = %if.then12, %land.lhs.true9, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3006
  ret %union.tree_node* %18, !dbg !3007
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_scalar_evolution(%struct.basic_block_def* %instantiated_below, %union.tree_node* %scalar) #0 !dbg !3008 {
entry:
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %scalar.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !3011, metadata !DIExpression()), !dbg !3012
  store %union.tree_node* %scalar, %union.tree_node** %scalar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar.addr, metadata !3013, metadata !DIExpression()), !dbg !3014
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3015, metadata !DIExpression()), !dbg !3016
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3017
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3017
  br i1 %tobool, label %if.then, label %if.end9, !dbg !3019

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3020
  %and = and i32 %1, 8, !dbg !3023
  %tobool1 = icmp ne i32 %and, 0, !dbg !3023
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !3024

if.then2:                                         ; preds = %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3025
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0)), !dbg !3027
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3028
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)), !dbg !3029
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3030
  %5 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !3031
  call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %5, i32 0), !dbg !3032
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3033
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !3034
  br label %if.end, !dbg !3035

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3036
  %and5 = and i32 %7, 16, !dbg !3038
  %tobool6 = icmp ne i32 %and5, 0, !dbg !3038
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !3039

if.then7:                                         ; preds = %if.end
  %8 = load i32, i32* @nb_get_scev, align 4, !dbg !3040
  %inc = add i32 %8, 1, !dbg !3040
  store i32 %inc, i32* @nb_get_scev, align 4, !dbg !3040
  br label %if.end8, !dbg !3041

if.end8:                                          ; preds = %if.then7, %if.end
  br label %if.end9, !dbg !3042

if.end9:                                          ; preds = %if.end8, %entry
  %9 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !3043
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3043
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !3043
  %bf.load = load i64, i64* %10, align 8, !dbg !3043
  %bf.clear = and i64 %bf.load, 65535, !dbg !3043
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3043
  switch i32 %bf.cast, label %sw.default [
    i32 141, label %sw.bb
    i32 24, label %sw.bb11
    i32 25, label %sw.bb11
    i32 23, label %sw.bb11
  ], !dbg !3044

sw.bb:                                            ; preds = %if.end9
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !3045
  %12 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !3047
  %call10 = call %union.tree_node** @find_var_scev_info(%struct.basic_block_def* %11, %union.tree_node* %12), !dbg !3048
  %13 = load %union.tree_node*, %union.tree_node** %call10, align 8, !dbg !3049
  store %union.tree_node* %13, %union.tree_node** %res, align 8, !dbg !3050
  br label %sw.epilog, !dbg !3051

sw.bb11:                                          ; preds = %if.end9, %if.end9, %if.end9
  %14 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !3052
  store %union.tree_node* %14, %union.tree_node** %res, align 8, !dbg !3053
  br label %sw.epilog, !dbg !3054

sw.default:                                       ; preds = %if.end9
  %15 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !3055
  store %union.tree_node* %15, %union.tree_node** %res, align 8, !dbg !3056
  br label %sw.epilog, !dbg !3057

sw.epilog:                                        ; preds = %sw.default, %sw.bb11, %sw.bb
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3058
  %tobool12 = icmp ne %struct._IO_FILE* %16, null, !dbg !3058
  br i1 %tobool12, label %land.lhs.true, label %if.end18, !dbg !3060

land.lhs.true:                                    ; preds = %sw.epilog
  %17 = load i32, i32* @dump_flags, align 4, !dbg !3061
  %and13 = and i32 %17, 8, !dbg !3062
  %tobool14 = icmp ne i32 %and13, 0, !dbg !3062
  br i1 %tobool14, label %if.then15, label %if.end18, !dbg !3063

if.then15:                                        ; preds = %land.lhs.true
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3064
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0)), !dbg !3066
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3067
  %20 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3068
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %20, i32 0), !dbg !3069
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3070
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !3071
  br label %if.end18, !dbg !3072

if.end18:                                         ; preds = %if.then15, %land.lhs.true, %sw.epilog
  %22 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3073
  ret %union.tree_node* %22, !dbg !3074
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !3075 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3078, metadata !DIExpression()), !dbg !3079
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !3080, metadata !DIExpression()), !dbg !3081
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3082
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !3083
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !3081
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !3084
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !3084
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3084

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !3085
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3086
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3086
  br label %cond.end, !dbg !3084

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3087
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3087
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3087
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3087
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !3087
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3087
  br label %cond.end, !dbg !3084

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !3084
  ret %struct.basic_block_def* %cond, !dbg !3088
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @analyze_scalar_evolution_1(%struct.loop* %loop, %union.tree_node* %var, %union.tree_node* %res) #0 !dbg !3089 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %res.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %def_loop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3092, metadata !DIExpression()), !dbg !3093
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3094, metadata !DIExpression()), !dbg !3095
  store %union.tree_node* %res, %union.tree_node** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %res.addr, metadata !3096, metadata !DIExpression()), !dbg !3097
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3098, metadata !DIExpression()), !dbg !3099
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3100
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3100
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3100
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3100
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3099
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !3101, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3103, metadata !DIExpression()), !dbg !3104
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop, metadata !3105, metadata !DIExpression()), !dbg !3106
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3107
  %cmp = icmp eq %struct.loop* %2, null, !dbg !3109
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3110

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3111
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3111
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3111
  %bf.load = load i64, i64* %4, align 8, !dbg !3111
  %bf.clear = and i64 %bf.load, 65535, !dbg !3111
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3111
  %cmp2 = icmp eq i32 %bf.cast, 14, !dbg !3112
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3113

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3114
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !3115
  br label %return, !dbg !3115

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3116
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3116
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3116
  %bf.load4 = load i64, i64* %7, align 8, !dbg !3116
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3116
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3116
  %cmp7 = icmp ne i32 %bf.cast6, 141, !dbg !3118
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !3119

if.then8:                                         ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3120
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3121
  %call = call %union.tree_node* @interpret_expr(%struct.loop* %8, %union.gimple_statement_d* null, %union.tree_node* %9), !dbg !3122
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !3123
  br label %return, !dbg !3123

if.end9:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3124
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !3124
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3124
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3124
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %def, align 8, !dbg !3125
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3126
  %call10 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %12), !dbg !3127
  store %struct.basic_block_def* %call10, %struct.basic_block_def** %bb, align 8, !dbg !3128
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3129
  %tobool = icmp ne %struct.basic_block_def* %13, null, !dbg !3129
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3129

cond.true:                                        ; preds = %if.end9
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3130
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 3, !dbg !3131
  %15 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3131
  br label %cond.end, !dbg !3129

cond.false:                                       ; preds = %if.end9
  br label %cond.end, !dbg !3129

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.loop* [ %15, %cond.true ], [ null, %cond.false ], !dbg !3129
  store %struct.loop* %cond, %struct.loop** %def_loop, align 8, !dbg !3132
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3133
  %cmp11 = icmp eq %struct.basic_block_def* %16, null, !dbg !3135
  br i1 %cmp11, label %if.then15, label %lor.lhs.false12, !dbg !3136

lor.lhs.false12:                                  ; preds = %cond.end
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3137
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3138
  %call13 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %17, %struct.basic_block_def* %18), !dbg !3139
  %tobool14 = icmp ne i8 %call13, 0, !dbg !3139
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !3140

if.then15:                                        ; preds = %lor.lhs.false12, %cond.end
  %19 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3141
  store %union.tree_node* %19, %union.tree_node** %res.addr, align 8, !dbg !3143
  br label %set_and_end, !dbg !3144

if.end16:                                         ; preds = %lor.lhs.false12
  %20 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3145
  %21 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !3147
  %cmp17 = icmp ne %union.tree_node* %20, %21, !dbg !3148
  br i1 %cmp17, label %if.then18, label %if.end27, !dbg !3149

if.then18:                                        ; preds = %if.end16
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3150
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3153
  %loop_father19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 3, !dbg !3154
  %24 = load %struct.loop*, %struct.loop** %loop_father19, align 8, !dbg !3154
  %cmp20 = icmp ne %struct.loop* %22, %24, !dbg !3155
  br i1 %cmp20, label %if.then21, label %if.end26, !dbg !3156

if.then21:                                        ; preds = %if.then18
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3157
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3158
  %loop_father22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 3, !dbg !3159
  %27 = load %struct.loop*, %struct.loop** %loop_father22, align 8, !dbg !3159
  %call23 = call %struct.loop* @find_common_loop(%struct.loop* %25, %struct.loop* %27), !dbg !3160
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3161
  %loop_father24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 3, !dbg !3162
  %29 = load %struct.loop*, %struct.loop** %loop_father24, align 8, !dbg !3162
  %30 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3163
  %call25 = call %union.tree_node* @compute_scalar_evolution_in_loop(%struct.loop* %call23, %struct.loop* %29, %union.tree_node* %30), !dbg !3164
  store %union.tree_node* %call25, %union.tree_node** %res.addr, align 8, !dbg !3165
  br label %if.end26, !dbg !3166

if.end26:                                         ; preds = %if.then21, %if.then18
  br label %set_and_end, !dbg !3167

if.end27:                                         ; preds = %if.end16
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3168
  %32 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !3170
  %cmp28 = icmp ne %struct.loop* %31, %32, !dbg !3171
  br i1 %cmp28, label %if.then29, label %if.end32, !dbg !3172

if.then29:                                        ; preds = %if.end27
  %33 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !3173
  %34 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3175
  %35 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !3176
  %call30 = call %union.tree_node* @analyze_scalar_evolution_1(%struct.loop* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !3177
  store %union.tree_node* %call30, %union.tree_node** %res.addr, align 8, !dbg !3178
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3179
  %37 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !3180
  %38 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3181
  %call31 = call %union.tree_node* @compute_scalar_evolution_in_loop(%struct.loop* %36, %struct.loop* %37, %union.tree_node* %38), !dbg !3182
  store %union.tree_node* %call31, %union.tree_node** %res.addr, align 8, !dbg !3183
  br label %set_and_end, !dbg !3184

if.end32:                                         ; preds = %if.end27
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3185
  %call33 = call i32 @gimple_code(%union.gimple_statement_d* %39), !dbg !3186
  switch i32 %call33, label %sw.default [
    i32 6, label %sw.bb
    i32 16, label %sw.bb35
  ], !dbg !3187

sw.bb:                                            ; preds = %if.end32
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3188
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3190
  %call34 = call %union.tree_node* @interpret_gimple_assign(%struct.loop* %40, %union.gimple_statement_d* %41), !dbg !3191
  store %union.tree_node* %call34, %union.tree_node** %res.addr, align 8, !dbg !3192
  br label %sw.epilog, !dbg !3193

sw.bb35:                                          ; preds = %if.end32
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3194
  %call36 = call zeroext i8 @loop_phi_node_p(%union.gimple_statement_d* %42), !dbg !3196
  %tobool37 = icmp ne i8 %call36, 0, !dbg !3196
  br i1 %tobool37, label %if.then38, label %if.else, !dbg !3197

if.then38:                                        ; preds = %sw.bb35
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3198
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3199
  %call39 = call %union.tree_node* @interpret_loop_phi(%struct.loop* %43, %union.gimple_statement_d* %44), !dbg !3200
  store %union.tree_node* %call39, %union.tree_node** %res.addr, align 8, !dbg !3201
  br label %if.end41, !dbg !3202

if.else:                                          ; preds = %sw.bb35
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3203
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !3204
  %call40 = call %union.tree_node* @interpret_condition_phi(%struct.loop* %45, %union.gimple_statement_d* %46), !dbg !3205
  store %union.tree_node* %call40, %union.tree_node** %res.addr, align 8, !dbg !3206
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.then38
  br label %sw.epilog, !dbg !3207

sw.default:                                       ; preds = %if.end32
  %47 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3208
  store %union.tree_node* %47, %union.tree_node** %res.addr, align 8, !dbg !3209
  br label %sw.epilog, !dbg !3210

sw.epilog:                                        ; preds = %sw.default, %if.end41, %sw.bb
  br label %set_and_end, !dbg !3211

set_and_end:                                      ; preds = %sw.epilog, %if.then29, %if.end26, %if.then15
  call void @llvm.dbg.label(metadata !3212), !dbg !3213
  %48 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3214
  %49 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3216
  %cmp42 = icmp eq %union.tree_node* %48, %49, !dbg !3217
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !3218

if.then43:                                        ; preds = %set_and_end
  %50 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3219
  store %union.tree_node* %50, %union.tree_node** %res.addr, align 8, !dbg !3220
  br label %if.end44, !dbg !3221

if.end44:                                         ; preds = %if.then43, %set_and_end
  %51 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3222
  %52 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !3224
  %cmp45 = icmp eq %struct.loop* %51, %52, !dbg !3225
  br i1 %cmp45, label %if.then46, label %if.end48, !dbg !3226

if.then46:                                        ; preds = %if.end44
  %53 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3227
  %call47 = call %struct.basic_block_def* @block_before_loop(%struct.loop* %53), !dbg !3228
  %54 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3229
  %55 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3230
  call void @set_scalar_evolution(%struct.basic_block_def* %call47, %union.tree_node* %54, %union.tree_node* %55), !dbg !3231
  br label %if.end48, !dbg !3231

if.end48:                                         ; preds = %if.then46, %if.end44
  %56 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3232
  store %union.tree_node* %56, %union.tree_node** %retval, align 8, !dbg !3233
  br label %return, !dbg !3233

return:                                           ; preds = %if.end48, %if.then8, %if.then
  %57 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3234
  ret %union.tree_node* %57, !dbg !3234
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec) #0 !dbg !3235 {
entry:
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %cache = alloca %struct.htab*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !3240, metadata !DIExpression()), !dbg !3241
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3242, metadata !DIExpression()), !dbg !3243
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3244, metadata !DIExpression()), !dbg !3245
  call void @llvm.dbg.declare(metadata %struct.htab** %cache, metadata !3246, metadata !DIExpression()), !dbg !3247
  %call = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @hash_scev_info, i32 (i8*, i8*)* @eq_scev_info, void (i8*)* @del_scev_info), !dbg !3248
  store %struct.htab* %call, %struct.htab** %cache, align 8, !dbg !3247
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3249
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3249
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3251

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3252
  %and = and i32 %1, 8, !dbg !3253
  %tobool1 = icmp ne i32 %and, 0, !dbg !3253
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3254

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3255
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0)), !dbg !3257
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3258
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3259
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !3260
  %5 = load i32, i32* %index, align 8, !dbg !3260
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %5), !dbg !3261
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3262
  %7 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3263
  %num = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 0, !dbg !3264
  %8 = load i32, i32* %num, align 8, !dbg !3264
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 %8), !dbg !3265
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3266
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0)), !dbg !3267
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3268
  %11 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3269
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0), !dbg !3270
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3271
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !3272
  br label %if.end, !dbg !3273

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3274
  %14 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3275
  %15 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3276
  %16 = load %struct.htab*, %struct.htab** %cache, align 8, !dbg !3277
  %call7 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %13, %struct.loop* %14, %union.tree_node* %15, i8 zeroext 0, %struct.htab* %16, i32 0), !dbg !3278
  store %union.tree_node* %call7, %union.tree_node** %res, align 8, !dbg !3279
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3280
  %tobool8 = icmp ne %struct._IO_FILE* %17, null, !dbg !3280
  br i1 %tobool8, label %land.lhs.true9, label %if.end15, !dbg !3282

land.lhs.true9:                                   ; preds = %if.end
  %18 = load i32, i32* @dump_flags, align 4, !dbg !3283
  %and10 = and i32 %18, 8, !dbg !3284
  %tobool11 = icmp ne i32 %and10, 0, !dbg !3284
  br i1 %tobool11, label %if.then12, label %if.end15, !dbg !3285

if.then12:                                        ; preds = %land.lhs.true9
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3286
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)), !dbg !3288
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3289
  %21 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3290
  call void @print_generic_expr(%struct._IO_FILE* %20, %union.tree_node* %21, i32 0), !dbg !3291
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3292
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !3293
  br label %if.end15, !dbg !3294

if.end15:                                         ; preds = %if.then12, %land.lhs.true9, %if.end
  %23 = load %struct.htab*, %struct.htab** %cache, align 8, !dbg !3295
  call void @htab_delete(%struct.htab* %23), !dbg !3296
  %24 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3297
  ret %union.tree_node* %24, !dbg !3298
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_scev_info(i8* %elt) #0 !dbg !3299 {
entry:
  %elt.addr = alloca i8*, align 8
  store i8* %elt, i8** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %elt.addr, metadata !3300, metadata !DIExpression()), !dbg !3301
  %0 = load i8*, i8** %elt.addr, align 8, !dbg !3302
  %1 = bitcast i8* %0 to %struct.scev_info_str*, !dbg !3302
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %1, i32 0, i32 1, !dbg !3302
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3302
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !3302
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3302
  %3 = load i32, i32* %version, align 8, !dbg !3302
  ret i32 %3, !dbg !3303
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_scev_info(i8* %e1, i8* %e2) #0 !dbg !3304 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %elt1 = alloca %struct.scev_info_str*, align 8
  %elt2 = alloca %struct.scev_info_str*, align 8
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %elt1, metadata !3309, metadata !DIExpression()), !dbg !3310
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !3311
  %1 = bitcast i8* %0 to %struct.scev_info_str*, !dbg !3312
  store %struct.scev_info_str* %1, %struct.scev_info_str** %elt1, align 8, !dbg !3310
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %elt2, metadata !3313, metadata !DIExpression()), !dbg !3314
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !3315
  %3 = bitcast i8* %2 to %struct.scev_info_str*, !dbg !3316
  store %struct.scev_info_str* %3, %struct.scev_info_str** %elt2, align 8, !dbg !3314
  %4 = load %struct.scev_info_str*, %struct.scev_info_str** %elt1, align 8, !dbg !3317
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %4, i32 0, i32 1, !dbg !3318
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3318
  %6 = load %struct.scev_info_str*, %struct.scev_info_str** %elt2, align 8, !dbg !3319
  %var1 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %6, i32 0, i32 1, !dbg !3320
  %7 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !3320
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !3321
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3322

land.rhs:                                         ; preds = %entry
  %8 = load %struct.scev_info_str*, %struct.scev_info_str** %elt1, align 8, !dbg !3323
  %instantiated_below = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %8, i32 0, i32 0, !dbg !3324
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below, align 8, !dbg !3324
  %10 = load %struct.scev_info_str*, %struct.scev_info_str** %elt2, align 8, !dbg !3325
  %instantiated_below2 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %10, i32 0, i32 0, !dbg !3326
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below2, align 8, !dbg !3326
  %cmp3 = icmp eq %struct.basic_block_def* %9, %11, !dbg !3327
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !3328
  %land.ext = zext i1 %12 to i32, !dbg !3322
  ret i32 %land.ext, !dbg !3329
}

; Function Attrs: noinline nounwind uwtable
define internal void @del_scev_info(i8* %e) #0 !dbg !3330 {
entry:
  %e.addr = alloca i8*, align 8
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !3331, metadata !DIExpression()), !dbg !3332
  %0 = load i8*, i8** %e.addr, align 8, !dbg !3333
  call void @ggc_free(i8* %0), !dbg !3334
  ret void, !dbg !3335
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !3336 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !3339, metadata !DIExpression()), !dbg !3340
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !3341, metadata !DIExpression()), !dbg !3342
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3343, metadata !DIExpression()), !dbg !3344
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !3345, metadata !DIExpression()), !dbg !3346
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !3347, metadata !DIExpression()), !dbg !3348
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !3349, metadata !DIExpression()), !dbg !3350
  %0 = load i32, i32* %size_expr.addr, align 4, !dbg !3351
  %inc = add nsw i32 %0, 1, !dbg !3351
  store i32 %inc, i32* %size_expr.addr, align 4, !dbg !3351
  %1 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3353
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %1, i64 63, !dbg !3353
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3353
  %2 = load i32, i32* %value, align 8, !dbg !3353
  %cmp = icmp sgt i32 %0, %2, !dbg !3354
  br i1 %cmp, label %if.then, label %if.end, !dbg !3355

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3356
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3357
  br label %return, !dbg !3357

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3358
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %4), !dbg !3360
  %conv = zext i8 %call to i32, !dbg !3360
  %tobool = icmp ne i32 %conv, 0, !dbg !3360
  br i1 %tobool, label %if.then4, label %lor.lhs.false, !dbg !3361

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3362
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %5), !dbg !3363
  %conv2 = zext i8 %call1 to i32, !dbg !3363
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !3363
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !3364

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3365
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !3366
  br label %return, !dbg !3366

if.end5:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3367
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3367
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3367
  %bf.load = load i64, i64* %8, align 8, !dbg !3367
  %bf.clear = and i64 %bf.load, 65535, !dbg !3367
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3367
  switch i32 %bf.cast, label %sw.default [
    i32 141, label %sw.bb
    i32 146, label %sw.bb7
    i32 66, label %sw.bb9
    i32 63, label %sw.bb9
    i32 64, label %sw.bb9
    i32 65, label %sw.bb9
    i32 116, label %sw.bb20
    i32 113, label %sw.bb20
    i32 79, label %sw.bb25
    i32 90, label %sw.bb25
    i32 145, label %sw.bb36
    i32 144, label %sw.bb37
  ], !dbg !3368

sw.bb:                                            ; preds = %if.end5
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3369
  %10 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3371
  %11 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3372
  %12 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3373
  %13 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3374
  %14 = load i32, i32* %size_expr.addr, align 4, !dbg !3375
  %call6 = call %union.tree_node* @instantiate_scev_name(%struct.basic_block_def* %9, %struct.loop* %10, %union.tree_node* %11, i8 zeroext %12, %struct.htab* %13, i32 %14), !dbg !3376
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !3377
  br label %return, !dbg !3377

sw.bb7:                                           ; preds = %if.end5
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3378
  %16 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3379
  %17 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3380
  %18 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3381
  %19 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3382
  %20 = load i32, i32* %size_expr.addr, align 4, !dbg !3383
  %call8 = call %union.tree_node* @instantiate_scev_poly(%struct.basic_block_def* %15, %struct.loop* %16, %union.tree_node* %17, i8 zeroext %18, %struct.htab* %19, i32 %20), !dbg !3384
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !3385
  br label %return, !dbg !3385

sw.bb9:                                           ; preds = %if.end5, %if.end5, %if.end5, %if.end5
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3386
  %22 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3387
  %23 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3388
  %24 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3389
  %base10 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3389
  %25 = bitcast %struct.tree_base* %base10 to i64*, !dbg !3389
  %bf.load11 = load i64, i64* %25, align 8, !dbg !3389
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !3389
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !3389
  %26 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3390
  %call14 = call %union.tree_node* @chrec_type(%union.tree_node* %26), !dbg !3391
  %27 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3392
  %exp = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !3392
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3392
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3392
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !3392
  %29 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3393
  %exp16 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !3393
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !3393
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !3393
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !3393
  %31 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3394
  %32 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3395
  %33 = load i32, i32* %size_expr.addr, align 4, !dbg !3396
  %call19 = call %union.tree_node* @instantiate_scev_binary(%struct.basic_block_def* %21, %struct.loop* %22, %union.tree_node* %23, i32 %bf.cast13, %union.tree_node* %call14, %union.tree_node* %28, %union.tree_node* %30, i8 zeroext %31, %struct.htab* %32, i32 %33), !dbg !3397
  store %union.tree_node* %call19, %union.tree_node** %retval, align 8, !dbg !3398
  br label %return, !dbg !3398

sw.bb20:                                          ; preds = %if.end5, %if.end5
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3399
  %35 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3400
  %36 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3401
  %37 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3402
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !3402
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3402
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3402
  %39 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3403
  %exp21 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !3403
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !3403
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !3403
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !3403
  %41 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3404
  %42 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3405
  %43 = load i32, i32* %size_expr.addr, align 4, !dbg !3406
  %call24 = call %union.tree_node* @instantiate_scev_convert(%struct.basic_block_def* %34, %struct.loop* %35, %union.tree_node* %36, %union.tree_node* %38, %union.tree_node* %40, i8 zeroext %41, %struct.htab* %42, i32 %43), !dbg !3407
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !3408
  br label %return, !dbg !3408

sw.bb25:                                          ; preds = %if.end5, %if.end5
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3409
  %45 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3410
  %46 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3411
  %47 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3412
  %base26 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !3412
  %48 = bitcast %struct.tree_base* %base26 to i64*, !dbg !3412
  %bf.load27 = load i64, i64* %48, align 8, !dbg !3412
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !3412
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3412
  %49 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3413
  %common30 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !3413
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !3413
  %50 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3413
  %51 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3414
  %exp32 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !3414
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !3414
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 0, !dbg !3414
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !3414
  %53 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3415
  %54 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3416
  %55 = load i32, i32* %size_expr.addr, align 4, !dbg !3417
  %call35 = call %union.tree_node* @instantiate_scev_not(%struct.basic_block_def* %44, %struct.loop* %45, %union.tree_node* %46, i32 %bf.cast29, %union.tree_node* %50, %union.tree_node* %52, i8 zeroext %53, %struct.htab* %54, i32 %55), !dbg !3418
  store %union.tree_node* %call35, %union.tree_node** %retval, align 8, !dbg !3419
  br label %return, !dbg !3419

sw.bb36:                                          ; preds = %if.end5
  %56 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3420
  store %union.tree_node* %56, %union.tree_node** %retval, align 8, !dbg !3421
  br label %return, !dbg !3421

sw.bb37:                                          ; preds = %if.end5
  %57 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !3422
  store %union.tree_node* %57, %union.tree_node** %retval, align 8, !dbg !3423
  br label %return, !dbg !3423

sw.default:                                       ; preds = %if.end5
  br label %sw.epilog, !dbg !3424

sw.epilog:                                        ; preds = %sw.default
  %58 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3425
  %base38 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !3425
  %59 = bitcast %struct.tree_base* %base38 to i64*, !dbg !3425
  %bf.load39 = load i64, i64* %59, align 8, !dbg !3425
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !3425
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !3425
  %idxprom = sext i32 %bf.cast41 to i64, !dbg !3425
  %arrayidx42 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3425
  %60 = load i32, i32* %arrayidx42, align 4, !dbg !3425
  %cmp43 = icmp eq i32 %60, 9, !dbg !3425
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !3427

if.then45:                                        ; preds = %sw.epilog
  %61 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3428
  store %union.tree_node* %61, %union.tree_node** %retval, align 8, !dbg !3429
  br label %return, !dbg !3429

if.end46:                                         ; preds = %sw.epilog
  %62 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3430
  %base47 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !3430
  %63 = bitcast %struct.tree_base* %base47 to i64*, !dbg !3430
  %bf.load48 = load i64, i64* %63, align 8, !dbg !3430
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !3430
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !3430
  %idxprom51 = sext i32 %bf.cast50 to i64, !dbg !3430
  %arrayidx52 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom51, !dbg !3430
  %64 = load i8, i8* %arrayidx52, align 1, !dbg !3430
  %conv53 = zext i8 %64 to i32, !dbg !3430
  switch i32 %conv53, label %sw.default61 [
    i32 3, label %sw.bb54
    i32 2, label %sw.bb56
    i32 1, label %sw.bb58
    i32 0, label %sw.bb60
  ], !dbg !3431

sw.bb54:                                          ; preds = %if.end46
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3432
  %66 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3434
  %67 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3435
  %68 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3436
  %69 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3437
  %70 = load i32, i32* %size_expr.addr, align 4, !dbg !3438
  %call55 = call %union.tree_node* @instantiate_scev_3(%struct.basic_block_def* %65, %struct.loop* %66, %union.tree_node* %67, i8 zeroext %68, %struct.htab* %69, i32 %70), !dbg !3439
  store %union.tree_node* %call55, %union.tree_node** %retval, align 8, !dbg !3440
  br label %return, !dbg !3440

sw.bb56:                                          ; preds = %if.end46
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3441
  %72 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3442
  %73 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3443
  %74 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3444
  %75 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3445
  %76 = load i32, i32* %size_expr.addr, align 4, !dbg !3446
  %call57 = call %union.tree_node* @instantiate_scev_2(%struct.basic_block_def* %71, %struct.loop* %72, %union.tree_node* %73, i8 zeroext %74, %struct.htab* %75, i32 %76), !dbg !3447
  store %union.tree_node* %call57, %union.tree_node** %retval, align 8, !dbg !3448
  br label %return, !dbg !3448

sw.bb58:                                          ; preds = %if.end46
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !3449
  %78 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !3450
  %79 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3451
  %80 = load i8, i8* %fold_conversions.addr, align 1, !dbg !3452
  %81 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !3453
  %82 = load i32, i32* %size_expr.addr, align 4, !dbg !3454
  %call59 = call %union.tree_node* @instantiate_scev_1(%struct.basic_block_def* %77, %struct.loop* %78, %union.tree_node* %79, i8 zeroext %80, %struct.htab* %81, i32 %82), !dbg !3455
  store %union.tree_node* %call59, %union.tree_node** %retval, align 8, !dbg !3456
  br label %return, !dbg !3456

sw.bb60:                                          ; preds = %if.end46
  %83 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3457
  store %union.tree_node* %83, %union.tree_node** %retval, align 8, !dbg !3458
  br label %return, !dbg !3458

sw.default61:                                     ; preds = %if.end46
  br label %sw.epilog62, !dbg !3459

sw.epilog62:                                      ; preds = %sw.default61
  %84 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3460
  store %union.tree_node* %84, %union.tree_node** %retval, align 8, !dbg !3461
  br label %return, !dbg !3461

return:                                           ; preds = %sw.epilog62, %sw.bb60, %sw.bb58, %sw.bb56, %sw.bb54, %if.then45, %sw.bb37, %sw.bb36, %sw.bb25, %sw.bb20, %sw.bb9, %sw.bb7, %sw.bb, %if.then4, %if.then
  %85 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3462
  ret %union.tree_node* %85, !dbg !3462
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @resolve_mixers(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !3463 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %cache = alloca %struct.htab*, align 8
  %ret = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3464, metadata !DIExpression()), !dbg !3465
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3466, metadata !DIExpression()), !dbg !3467
  call void @llvm.dbg.declare(metadata %struct.htab** %cache, metadata !3468, metadata !DIExpression()), !dbg !3469
  %call = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @hash_scev_info, i32 (i8*, i8*)* @eq_scev_info, void (i8*)* @del_scev_info), !dbg !3470
  store %struct.htab* %call, %struct.htab** %cache, align 8, !dbg !3469
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !3471, metadata !DIExpression()), !dbg !3472
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3473
  %call1 = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !3474
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3475
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3476
  %3 = load %struct.htab*, %struct.htab** %cache, align 8, !dbg !3477
  %call2 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %call1, %struct.loop* %1, %union.tree_node* %2, i8 zeroext 1, %struct.htab* %3, i32 0), !dbg !3478
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !3472
  %4 = load %struct.htab*, %struct.htab** %cache, align 8, !dbg !3479
  call void @htab_delete(%struct.htab* %4), !dbg !3480
  %5 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3481
  ret %union.tree_node* %5, !dbg !3482
}

declare dso_local zeroext i8 @number_of_iterations_exit(%struct.loop*, %struct.edge_def*, %struct.tree_niter_desc*, i8 zeroext) #2

declare dso_local i32 @integer_nonzerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @set_nb_iterations_in_loop(%struct.loop* %loop, %union.tree_node* %res) #0 !dbg !3483 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %res.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3484, metadata !DIExpression()), !dbg !3485
  store %union.tree_node* %res, %union.tree_node** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %res.addr, metadata !3486, metadata !DIExpression()), !dbg !3487
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3488
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3488
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3490

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3491
  %and = and i32 %1, 8, !dbg !3492
  %tobool1 = icmp ne i32 %and, 0, !dbg !3492
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3493

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3494
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.30, i64 0, i64 0)), !dbg !3496
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3497
  %4 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3498
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %4, i32 0), !dbg !3499
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3500
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !3501
  br label %if.end, !dbg !3502

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3503
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3504
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 11, !dbg !3505
  store %union.tree_node* %6, %union.tree_node** %nb_iterations, align 8, !dbg !3506
  %8 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !3507
  ret %union.tree_node* %8, !dbg !3508
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @number_of_exit_cond_executions(%struct.loop* %loop) #0 !dbg !3509 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %ret = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3510, metadata !DIExpression()), !dbg !3511
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !3512, metadata !DIExpression()), !dbg !3513
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3514
  %call = call %union.tree_node* @number_of_latch_executions(%struct.loop* %0), !dbg !3515
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !3513
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3516, metadata !DIExpression()), !dbg !3517
  %1 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3518
  %call1 = call %union.tree_node* @chrec_type(%union.tree_node* %1), !dbg !3519
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !3517
  %2 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3520
  %call2 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %2), !dbg !3522
  %tobool = icmp ne i8 %call2, 0, !dbg !3522
  br i1 %tobool, label %if.then, label %if.end, !dbg !3523

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3524
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3525
  br label %return, !dbg !3525

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3526
  %5 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3527
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3528
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* %6, i64 1), !dbg !3529
  %call4 = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %call3), !dbg !3530
  store %union.tree_node* %call4, %union.tree_node** %ret, align 8, !dbg !3531
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3532
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3532
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3532
  %bf.load = load i64, i64* %8, align 8, !dbg !3532
  %bf.clear = and i64 %bf.load, 65535, !dbg !3532
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3532
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !3534
  br i1 %cmp, label %land.lhs.true, label %if.end11, !dbg !3535

land.lhs.true:                                    ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3536
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3536
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3536
  %bf.load6 = load i64, i64* %10, align 8, !dbg !3536
  %bf.lshr = lshr i64 %bf.load6, 27, !dbg !3536
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !3536
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3536
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !3536
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3537

if.then10:                                        ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3538
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !3539
  br label %return, !dbg !3539

if.end11:                                         ; preds = %land.lhs.true, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3540
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !3541
  br label %return, !dbg !3541

return:                                           ; preds = %if.end11, %if.then10, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3542
  ret %union.tree_node* %13, !dbg !3542
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @chrec_type(%union.tree_node* %chrec) #0 !dbg !3543 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3546, metadata !DIExpression()), !dbg !3547
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3548
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %0), !dbg !3550
  %tobool = icmp ne i8 %call, 0, !dbg !3550
  br i1 %tobool, label %if.then, label %if.end, !dbg !3551

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3552
  br label %return, !dbg !3552

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3553
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !3553
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3553
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3553
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !3554
  br label %return, !dbg !3554

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3555
  ret %union.tree_node* %3, !dbg !3555
}

declare dso_local %union.tree_node* @chrec_fold_plus(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gather_stats_on_scev_database() #0 !dbg !3556 {
entry:
  %stats = alloca %struct.chrec_stats, align 4
  call void @llvm.dbg.declare(metadata %struct.chrec_stats* %stats, metadata !3559, metadata !DIExpression()), !dbg !3560
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3561
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3561
  br i1 %tobool, label %if.end, label %if.then, !dbg !3563

if.then:                                          ; preds = %entry
  br label %return, !dbg !3564

if.end:                                           ; preds = %entry
  call void @reset_chrecs_counters(%struct.chrec_stats* %stats), !dbg !3565
  %1 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !3566
  %2 = bitcast %struct.chrec_stats* %stats to i8*, !dbg !3567
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @gather_stats_on_scev_database_1, i8* %2), !dbg !3568
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3569
  call void @dump_chrecs_stats(%struct._IO_FILE* %3, %struct.chrec_stats* %stats), !dbg !3570
  br label %return, !dbg !3571

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3571
}

; Function Attrs: noinline nounwind uwtable
define internal void @reset_chrecs_counters(%struct.chrec_stats* %stats) #0 !dbg !3572 {
entry:
  %stats.addr = alloca %struct.chrec_stats*, align 8
  store %struct.chrec_stats* %stats, %struct.chrec_stats** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chrec_stats** %stats.addr, metadata !3575, metadata !DIExpression()), !dbg !3576
  %0 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3577
  %nb_chrecs = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %0, i32 0, i32 0, !dbg !3578
  store i32 0, i32* %nb_chrecs, align 4, !dbg !3579
  %1 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3580
  %nb_affine = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %1, i32 0, i32 1, !dbg !3581
  store i32 0, i32* %nb_affine, align 4, !dbg !3582
  %2 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3583
  %nb_affine_multivar = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %2, i32 0, i32 2, !dbg !3584
  store i32 0, i32* %nb_affine_multivar, align 4, !dbg !3585
  %3 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3586
  %nb_higher_poly = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %3, i32 0, i32 3, !dbg !3587
  store i32 0, i32* %nb_higher_poly, align 4, !dbg !3588
  %4 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3589
  %nb_chrec_dont_know = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %4, i32 0, i32 4, !dbg !3590
  store i32 0, i32* %nb_chrec_dont_know, align 4, !dbg !3591
  %5 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3592
  %nb_undetermined = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %5, i32 0, i32 5, !dbg !3593
  store i32 0, i32* %nb_undetermined, align 4, !dbg !3594
  ret void, !dbg !3595
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gather_stats_on_scev_database_1(i8** %slot, i8* %stats) #0 !dbg !3596 {
entry:
  %slot.addr = alloca i8**, align 8
  %stats.addr = alloca i8*, align 8
  %entry1 = alloca %struct.scev_info_str*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3599, metadata !DIExpression()), !dbg !3600
  store i8* %stats, i8** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %stats.addr, metadata !3601, metadata !DIExpression()), !dbg !3602
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %entry1, metadata !3603, metadata !DIExpression()), !dbg !3604
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3605
  %1 = load i8*, i8** %0, align 8, !dbg !3606
  %2 = bitcast i8* %1 to %struct.scev_info_str*, !dbg !3607
  store %struct.scev_info_str* %2, %struct.scev_info_str** %entry1, align 8, !dbg !3604
  %3 = load %struct.scev_info_str*, %struct.scev_info_str** %entry1, align 8, !dbg !3608
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %3, i32 0, i32 2, !dbg !3609
  %4 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !3609
  %5 = load i8*, i8** %stats.addr, align 8, !dbg !3610
  %6 = bitcast i8* %5 to %struct.chrec_stats*, !dbg !3611
  call void @gather_chrec_stats(%union.tree_node* %4, %struct.chrec_stats* %6), !dbg !3612
  ret i32 1, !dbg !3613
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_chrecs_stats(%struct._IO_FILE* %file, %struct.chrec_stats* %stats) #0 !dbg !3614 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %stats.addr = alloca %struct.chrec_stats*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3668, metadata !DIExpression()), !dbg !3669
  store %struct.chrec_stats* %stats, %struct.chrec_stats** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chrec_stats** %stats.addr, metadata !3670, metadata !DIExpression()), !dbg !3671
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3672
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0)), !dbg !3673
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3674
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !3675
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3676
  %3 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3677
  %nb_affine = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %3, i32 0, i32 1, !dbg !3678
  %4 = load i32, i32* %nb_affine, align 4, !dbg !3678
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.39, i64 0, i64 0), i32 %4), !dbg !3679
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3680
  %6 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3681
  %nb_affine_multivar = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %6, i32 0, i32 2, !dbg !3682
  %7 = load i32, i32* %nb_affine_multivar, align 4, !dbg !3682
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.40, i64 0, i64 0), i32 %7), !dbg !3683
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3684
  %9 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3685
  %nb_higher_poly = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %9, i32 0, i32 3, !dbg !3686
  %10 = load i32, i32* %nb_higher_poly, align 4, !dbg !3686
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.41, i64 0, i64 0), i32 %10), !dbg !3687
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3688
  %12 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3689
  %nb_chrec_dont_know = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %12, i32 0, i32 4, !dbg !3690
  %13 = load i32, i32* %nb_chrec_dont_know, align 4, !dbg !3690
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42, i64 0, i64 0), i32 %13), !dbg !3691
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3692
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !3693
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3694
  %16 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3695
  %nb_chrecs = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %16, i32 0, i32 0, !dbg !3696
  %17 = load i32, i32* %nb_chrecs, align 4, !dbg !3696
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i64 0, i64 0), i32 %17), !dbg !3697
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3698
  %19 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !3699
  %nb_undetermined = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %19, i32 0, i32 5, !dbg !3700
  %20 = load i32, i32* %nb_undetermined, align 4, !dbg !3700
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i64 0, i64 0), i32 %20), !dbg !3701
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3702
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !3703
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3704
  %23 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !3705
  %call10 = call i64 @htab_elements(%struct.htab* %23), !dbg !3706
  %conv = trunc i64 %call10 to i32, !dbg !3707
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.45, i64 0, i64 0), i32 %conv), !dbg !3708
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3709
  %25 = load i32, i32* @nb_set_scev, align 4, !dbg !3710
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.46, i64 0, i64 0), i32 %25), !dbg !3711
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3712
  %27 = load i32, i32* @nb_get_scev, align 4, !dbg !3713
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.47, i64 0, i64 0), i32 %27), !dbg !3714
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3715
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !3716
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3717
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i64 0, i64 0)), !dbg !3718
  ret void, !dbg !3719
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scev_initialize() #0 !dbg !3720 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3721, metadata !DIExpression()), !dbg !3727
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3728, metadata !DIExpression()), !dbg !3729
  %call = call %struct.htab* @htab_create_alloc(i64 100, i32 (i8*)* @hash_scev_info, i32 (i8*, i8*)* @eq_scev_info, void (i8*)* @del_scev_info, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !3730
  store %struct.htab* %call, %struct.htab** @scalar_evolution_info, align 8, !dbg !3731
  call void @initialize_scalar_evolutions_analyzer(), !dbg !3732
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !3733
  br label %for.cond, !dbg !3733

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3735
  %tobool = icmp ne %struct.loop* %0, null, !dbg !3733
  br i1 %tobool, label %for.body, label %for.end, !dbg !3733

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3737
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 11, !dbg !3739
  store %union.tree_node* null, %union.tree_node** %nb_iterations, align 8, !dbg !3740
  br label %for.inc, !dbg !3741

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !3735
  br label %for.cond, !dbg !3735, !llvm.loop !3742

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3744
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_scalar_evolutions_analyzer() #0 !dbg !3745 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3746
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !3748
  br i1 %cmp, label %if.then, label %if.end, !dbg !3749

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !3750
  %call = call %union.tree_node* @make_node_stat(i32 145), !dbg !3752
  store %union.tree_node* %call, %union.tree_node** @chrec_dont_know, align 8, !dbg !3753
  %call1 = call %union.tree_node* @make_node_stat(i32 144), !dbg !3754
  store %union.tree_node* %call1, %union.tree_node** @chrec_known, align 8, !dbg !3755
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3756
  %2 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3757
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !3757
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3757
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3758
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3759
  %4 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !3760
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3760
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !3760
  store %union.tree_node* %3, %union.tree_node** %type3, align 8, !dbg !3761
  br label %if.end, !dbg !3762

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3763
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !3764 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3769, metadata !DIExpression()), !dbg !3770
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3771, metadata !DIExpression()), !dbg !3772
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3773, metadata !DIExpression()), !dbg !3774
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3775, metadata !DIExpression()), !dbg !3776
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3777, metadata !DIExpression()), !dbg !3778
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !3779, metadata !DIExpression()), !dbg !3780
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3781
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !3782
  store i32 0, i32* %idx, align 8, !dbg !3783
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3784
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3784
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3784
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3784
  %tobool = icmp ne %struct.loops* %2, null, !dbg !3784
  br i1 %tobool, label %if.end, label %if.then, !dbg !3786

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3787
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !3789
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3790
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3791
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !3792
  br label %return, !dbg !3793

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !3794
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !3794
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3795
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !3796
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !3797
  %6 = load i32, i32* %flags.addr, align 4, !dbg !3798
  %and = and i32 %6, 1, !dbg !3799
  %tobool3 = icmp ne i32 %and, 0, !dbg !3800
  %7 = zext i1 %tobool3 to i64, !dbg !3800
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !3800
  store i32 %cond, i32* %mn, align 4, !dbg !3801
  %8 = load i32, i32* %flags.addr, align 4, !dbg !3802
  %and4 = and i32 %8, 4, !dbg !3804
  %tobool5 = icmp ne i32 %and4, 0, !dbg !3804
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3805

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3806
  br label %for.cond, !dbg !3809

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3810
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3810
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !3810
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !3810
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !3810
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3810
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !3810
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3810

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3810
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3810
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !3810
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !3810
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !3810
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !3810
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !3810
  br label %cond.end, !dbg !3810

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3810

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3810
  %15 = load i32, i32* %i, align 4, !dbg !3810
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !3810
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3812
  br i1 %tobool15, label %for.body, label %for.end, !dbg !3812

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3813
  %cmp = icmp ne %struct.loop* %16, null, !dbg !3815
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !3816

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3817
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !3818
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3818
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !3819
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !3820

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3821
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !3822
  %20 = load i32, i32* %num, align 8, !dbg !3822
  %21 = load i32, i32* %mn, align 4, !dbg !3823
  %cmp18 = icmp sge i32 %20, %21, !dbg !3824
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !3825

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3826
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !3826
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !3826
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !3826
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3826

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3826
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !3826
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !3826
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !3826
  br label %cond.end26, !dbg !3826

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !3826

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !3826
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3826
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !3826
  %27 = load i32, i32* %num28, align 8, !dbg !3826
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !3826
  br label %if.end30, !dbg !3826

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3823

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !3827
  %inc = add i32 %28, 1, !dbg !3827
  store i32 %inc, i32* %i, align 4, !dbg !3827
  br label %for.cond, !dbg !3828, !llvm.loop !3829

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !3831

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !3832
  %and31 = and i32 %29, 2, !dbg !3834
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3834
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !3835

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3836
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3836
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !3836
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !3836
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !3839
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3839
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !3840
  br label %for.cond36, !dbg !3841

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3842
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !3844
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !3844
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !3845
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !3846

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !3847

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3848
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !3849
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !3849
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !3850
  br label %for.cond36, !dbg !3851, !llvm.loop !3852

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !3854

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3855
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !3858
  %38 = load i32, i32* %num43, align 8, !dbg !3858
  %39 = load i32, i32* %mn, align 4, !dbg !3859
  %cmp44 = icmp sge i32 %38, %39, !dbg !3860
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !3861

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3862
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !3862
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !3862
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !3862
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !3862

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3862
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !3862
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !3862
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !3862
  br label %cond.end52, !dbg !3862

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !3862

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !3862
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3862
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !3862
  %45 = load i32, i32* %num54, align 8, !dbg !3862
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !3862
  br label %if.end56, !dbg !3862

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3863
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !3865
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3865
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !3863
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !3866

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3867
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !3870
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !3870
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !3871
  br label %for.cond60, !dbg !3872

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3873
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !3875
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !3875
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !3876
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !3877

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !3878

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3879
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !3880
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !3880
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !3881
  br label %for.cond60, !dbg !3882, !llvm.loop !3883

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !3885

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3886
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !3888
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !3888
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !3889

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !3890

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3891
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !3892
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !3893
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !3854, !llvm.loop !3894

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !3896

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3897
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3897
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !3897
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !3897
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !3899
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !3899
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !3900
  br label %while.body79, !dbg !3901

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3902
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !3905
  %60 = load i32, i32* %num80, align 8, !dbg !3905
  %61 = load i32, i32* %mn, align 4, !dbg !3906
  %cmp81 = icmp sge i32 %60, %61, !dbg !3907
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !3908

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3909
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !3909
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !3909
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !3909
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !3909

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3909
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !3909
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !3909
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !3909
  br label %cond.end89, !dbg !3909

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !3909

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !3909
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3909
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !3909
  %67 = load i32, i32* %num91, align 8, !dbg !3909
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !3909
  br label %if.end93, !dbg !3909

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3910
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !3912
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !3912
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !3913
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !3914

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3915
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !3916
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !3916
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !3917
  br label %if.end110, !dbg !3918

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !3919

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3921
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !3922
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !3923

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3924
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !3925
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !3925
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !3926
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !3927
  br i1 %75, label %while.body103, label %while.end105, !dbg !3919

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3928
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !3929
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !3930
  br label %while.cond99, !dbg !3919, !llvm.loop !3931

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3933
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !3935
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !3936

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !3937

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3938
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !3939
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !3939
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !3940
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !3901, !llvm.loop !3941

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3943
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3944
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !3945
  br label %return, !dbg !3946

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !3946
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3947 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3950, metadata !DIExpression()), !dbg !3951
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3952, metadata !DIExpression()), !dbg !3953
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3954, metadata !DIExpression()), !dbg !3955
  br label %while.cond, !dbg !3956

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3957
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3957
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3957
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3957
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3957

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3957
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3957
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3957
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3957
  br label %cond.end, !dbg !3957

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3957
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3957
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3957
  %5 = load i32, i32* %idx, align 8, !dbg !3957
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3957
  %tobool2 = icmp ne i32 %call, 0, !dbg !3956
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3956

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3958
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3960
  %7 = load i32, i32* %idx3, align 8, !dbg !3961
  %inc = add i32 %7, 1, !dbg !3961
  store i32 %inc, i32* %idx3, align 8, !dbg !3961
  %8 = load i32, i32* %anum, align 4, !dbg !3962
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3963
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3964
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3965
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3966
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3968
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3968
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3969

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3970

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3956, !llvm.loop !3971

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3973
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3973
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3973
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3974
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3975
  br label %return, !dbg !3976

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3976
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scev_reset_htab() #0 !dbg !3977 {
entry:
  %0 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !3978
  %tobool = icmp ne %struct.htab* %0, null, !dbg !3978
  br i1 %tobool, label %if.end, label %if.then, !dbg !3980

if.then:                                          ; preds = %entry
  br label %return, !dbg !3981

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !3982
  call void @htab_empty(%struct.htab* %1), !dbg !3983
  br label %return, !dbg !3984

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3984
}

declare dso_local void @htab_empty(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @scev_reset() #0 !dbg !3985 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3986, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3988, metadata !DIExpression()), !dbg !3989
  call void @scev_reset_htab(), !dbg !3990
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3991
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3991
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3991
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3991
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3991
  br i1 %tobool, label %if.end, label %if.then, !dbg !3993

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !3994

if.end:                                           ; preds = %entry
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !3995
  br label %for.cond, !dbg !3995

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3997
  %tobool1 = icmp ne %struct.loop* %2, null, !dbg !3995
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3995

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3999
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 11, !dbg !4001
  store %union.tree_node* null, %union.tree_node** %nb_iterations, align 8, !dbg !4002
  br label %for.inc, !dbg !4003

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !3997
  br label %for.cond, !dbg !3997, !llvm.loop !4004

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4006
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @simple_iv(%struct.loop* %wrto_loop, %struct.loop* %use_loop, %union.tree_node* %op, %struct.affine_iv* %iv, i8 zeroext %allow_nonconstant_step) #0 !dbg !4007 {
entry:
  %retval = alloca i8, align 1
  %wrto_loop.addr = alloca %struct.loop*, align 8
  %use_loop.addr = alloca %struct.loop*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %iv.addr = alloca %struct.affine_iv*, align 8
  %allow_nonconstant_step.addr = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %ev = alloca %union.tree_node*, align 8
  %folded_casts = alloca i8, align 1
  store %struct.loop* %wrto_loop, %struct.loop** %wrto_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %wrto_loop.addr, metadata !4011, metadata !DIExpression()), !dbg !4012
  store %struct.loop* %use_loop, %struct.loop** %use_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %use_loop.addr, metadata !4013, metadata !DIExpression()), !dbg !4014
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !4015, metadata !DIExpression()), !dbg !4016
  store %struct.affine_iv* %iv, %struct.affine_iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  store i8 %allow_nonconstant_step, i8* %allow_nonconstant_step.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_nonconstant_step.addr, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev, metadata !4023, metadata !DIExpression()), !dbg !4024
  call void @llvm.dbg.declare(metadata i8* %folded_casts, metadata !4025, metadata !DIExpression()), !dbg !4026
  %0 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4027
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %0, i32 0, i32 0, !dbg !4028
  store %union.tree_node* null, %union.tree_node** %base, align 8, !dbg !4029
  %1 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4030
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %1, i32 0, i32 1, !dbg !4031
  store %union.tree_node* null, %union.tree_node** %step, align 8, !dbg !4032
  %2 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4033
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %2, i32 0, i32 2, !dbg !4034
  store i8 0, i8* %no_overflow, align 8, !dbg !4035
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !4036
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !4036
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4036
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4036
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !4037
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4038
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4038
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4038
  %bf.load = load i64, i64* %6, align 8, !dbg !4038
  %bf.clear = and i64 %bf.load, 65535, !dbg !4038
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4038
  %cmp = icmp ne i32 %bf.cast, 8, !dbg !4040
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4041

land.lhs.true:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4042
  %base3 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4042
  %8 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4042
  %bf.load4 = load i64, i64* %8, align 8, !dbg !4042
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !4042
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4042
  %cmp7 = icmp ne i32 %bf.cast6, 10, !dbg !4043
  br i1 %cmp7, label %if.then, label %if.end, !dbg !4044

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4045
  br label %return, !dbg !4045

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !4046
  %10 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4047
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !4048
  %call = call %union.tree_node* @analyze_scalar_evolution_in_loop(%struct.loop* %9, %struct.loop* %10, %union.tree_node* %11, i8* %folded_casts), !dbg !4049
  store %union.tree_node* %call, %union.tree_node** %ev, align 8, !dbg !4050
  %12 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4051
  %call8 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %12), !dbg !4053
  %conv = zext i8 %call8 to i32, !dbg !4053
  %tobool = icmp ne i32 %conv, 0, !dbg !4053
  br i1 %tobool, label %if.then12, label %lor.lhs.false, !dbg !4054

lor.lhs.false:                                    ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4055
  %14 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !4056
  %num = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !4057
  %15 = load i32, i32* %num, align 8, !dbg !4057
  %call9 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %13, i32 %15), !dbg !4058
  %conv10 = zext i8 %call9 to i32, !dbg !4058
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4058
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !4059

if.then12:                                        ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !4060
  br label %return, !dbg !4060

if.end13:                                         ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4061
  %call14 = call zeroext i8 @tree_does_not_contain_chrecs(%union.tree_node* %16), !dbg !4063
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4063
  br i1 %tobool15, label %if.then16, label %if.end23, !dbg !4064

if.then16:                                        ; preds = %if.end13
  %17 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4065
  %18 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4067
  %base17 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %18, i32 0, i32 0, !dbg !4068
  store %union.tree_node* %17, %union.tree_node** %base17, align 8, !dbg !4069
  %19 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4070
  %common18 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4070
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !4070
  %20 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !4070
  %call20 = call %union.tree_node* @build_int_cst(%union.tree_node* %20, i64 0), !dbg !4071
  %21 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4072
  %step21 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %21, i32 0, i32 1, !dbg !4073
  store %union.tree_node* %call20, %union.tree_node** %step21, align 8, !dbg !4074
  %22 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4075
  %no_overflow22 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %22, i32 0, i32 2, !dbg !4076
  store i8 1, i8* %no_overflow22, align 8, !dbg !4077
  store i8 1, i8* %retval, align 1, !dbg !4078
  br label %return, !dbg !4078

if.end23:                                         ; preds = %if.end13
  %23 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4079
  %base24 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !4079
  %24 = bitcast %struct.tree_base* %base24 to i64*, !dbg !4079
  %bf.load25 = load i64, i64* %24, align 8, !dbg !4079
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !4079
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !4079
  %cmp28 = icmp ne i32 %bf.cast27, 146, !dbg !4081
  br i1 %cmp28, label %if.then36, label %lor.lhs.false30, !dbg !4082

lor.lhs.false30:                                  ; preds = %if.end23
  %25 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4083
  %exp = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !4083
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4083
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4083
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4083
  %int_cst = bitcast %union.tree_node* %26 to %struct.tree_int_cst*, !dbg !4083
  %int_cst31 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4083
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst31, i32 0, i32 0, !dbg !4083
  %27 = load i64, i64* %low, align 8, !dbg !4083
  %28 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !4084
  %num32 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 0, !dbg !4085
  %29 = load i32, i32* %num32, align 8, !dbg !4085
  %conv33 = zext i32 %29 to i64, !dbg !4086
  %cmp34 = icmp ne i64 %27, %conv33, !dbg !4087
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4088

if.then36:                                        ; preds = %lor.lhs.false30, %if.end23
  store i8 0, i8* %retval, align 1, !dbg !4089
  br label %return, !dbg !4089

if.end37:                                         ; preds = %lor.lhs.false30
  %30 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4090
  %exp38 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !4090
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !4090
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 2, !dbg !4090
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !4090
  %32 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4091
  %step41 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %32, i32 0, i32 1, !dbg !4092
  store %union.tree_node* %31, %union.tree_node** %step41, align 8, !dbg !4093
  %33 = load i8, i8* %allow_nonconstant_step.addr, align 1, !dbg !4094
  %tobool42 = icmp ne i8 %33, 0, !dbg !4094
  br i1 %tobool42, label %lor.lhs.false51, label %land.lhs.true43, !dbg !4096

land.lhs.true43:                                  ; preds = %if.end37
  %34 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4097
  %step44 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %34, i32 0, i32 1, !dbg !4097
  %35 = load %union.tree_node*, %union.tree_node** %step44, align 8, !dbg !4097
  %base45 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4097
  %36 = bitcast %struct.tree_base* %base45 to i64*, !dbg !4097
  %bf.load46 = load i64, i64* %36, align 8, !dbg !4097
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !4097
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !4097
  %cmp49 = icmp ne i32 %bf.cast48, 23, !dbg !4098
  br i1 %cmp49, label %if.then56, label %lor.lhs.false51, !dbg !4099

lor.lhs.false51:                                  ; preds = %land.lhs.true43, %if.end37
  %37 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4100
  %step52 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %37, i32 0, i32 1, !dbg !4101
  %38 = load %union.tree_node*, %union.tree_node** %step52, align 8, !dbg !4101
  %call53 = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %38, i32* null), !dbg !4102
  %conv54 = zext i8 %call53 to i32, !dbg !4102
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !4102
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !4103

if.then56:                                        ; preds = %lor.lhs.false51, %land.lhs.true43
  store i8 0, i8* %retval, align 1, !dbg !4104
  br label %return, !dbg !4104

if.end57:                                         ; preds = %lor.lhs.false51
  %39 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4105
  %exp58 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !4105
  %operands59 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp58, i32 0, i32 3, !dbg !4105
  %arrayidx60 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands59, i64 0, i64 1, !dbg !4105
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !4105
  %41 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4106
  %base61 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %41, i32 0, i32 0, !dbg !4107
  store %union.tree_node* %40, %union.tree_node** %base61, align 8, !dbg !4108
  %42 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4109
  %base62 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %42, i32 0, i32 0, !dbg !4111
  %43 = load %union.tree_node*, %union.tree_node** %base62, align 8, !dbg !4111
  %call63 = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %43, i32* null), !dbg !4112
  %tobool64 = icmp ne i8 %call63, 0, !dbg !4112
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !4113

if.then65:                                        ; preds = %if.end57
  store i8 0, i8* %retval, align 1, !dbg !4114
  br label %return, !dbg !4114

if.end66:                                         ; preds = %if.end57
  %44 = load i8, i8* %folded_casts, align 1, !dbg !4115
  %tobool67 = icmp ne i8 %44, 0, !dbg !4115
  br i1 %tobool67, label %land.end79, label %land.rhs, !dbg !4116

land.rhs:                                         ; preds = %if.end66
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4117
  %base68 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !4117
  %46 = bitcast %struct.tree_base* %base68 to i64*, !dbg !4117
  %bf.load69 = load i64, i64* %46, align 8, !dbg !4117
  %bf.lshr = lshr i64 %bf.load69, 21, !dbg !4117
  %bf.clear70 = and i64 %bf.lshr, 1, !dbg !4117
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !4117
  %tobool72 = icmp ne i32 %bf.cast71, 0, !dbg !4117
  br i1 %tobool72, label %land.end, label %land.lhs.true73, !dbg !4117

land.lhs.true73:                                  ; preds = %land.rhs
  %47 = load i32, i32* @flag_wrapv, align 4, !dbg !4117
  %tobool74 = icmp ne i32 %47, 0, !dbg !4117
  br i1 %tobool74, label %land.end, label %land.lhs.true75, !dbg !4117

land.lhs.true75:                                  ; preds = %land.lhs.true73
  %48 = load i32, i32* @flag_trapv, align 4, !dbg !4117
  %tobool76 = icmp ne i32 %48, 0, !dbg !4117
  br i1 %tobool76, label %land.end, label %land.rhs77, !dbg !4117

land.rhs77:                                       ; preds = %land.lhs.true75
  %49 = load i32, i32* @flag_strict_overflow, align 4, !dbg !4117
  %tobool78 = icmp ne i32 %49, 0, !dbg !4117
  br label %land.end

land.end:                                         ; preds = %land.rhs77, %land.lhs.true75, %land.lhs.true73, %land.rhs
  %50 = phi i1 [ false, %land.lhs.true75 ], [ false, %land.lhs.true73 ], [ false, %land.rhs ], [ %tobool78, %land.rhs77 ], !dbg !4118
  br label %land.end79

land.end79:                                       ; preds = %land.end, %if.end66
  %51 = phi i1 [ false, %if.end66 ], [ %50, %land.end ], !dbg !4118
  %land.ext = zext i1 %51 to i32, !dbg !4116
  %conv80 = trunc i32 %land.ext to i8, !dbg !4119
  %52 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !4120
  %no_overflow81 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %52, i32 0, i32 2, !dbg !4121
  store i8 %conv80, i8* %no_overflow81, align 8, !dbg !4122
  store i8 1, i8* %retval, align 1, !dbg !4123
  br label %return, !dbg !4123

return:                                           ; preds = %land.end79, %if.then65, %if.then56, %if.then36, %if.then16, %if.then12, %if.then
  %53 = load i8, i8* %retval, align 1, !dbg !4124
  ret i8 %53, !dbg !4124
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @analyze_scalar_evolution_in_loop(%struct.loop* %wrto_loop, %struct.loop* %use_loop, %union.tree_node* %version, i8* %folded_casts) #0 !dbg !4125 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %wrto_loop.addr = alloca %struct.loop*, align 8
  %use_loop.addr = alloca %struct.loop*, align 8
  %version.addr = alloca %union.tree_node*, align 8
  %folded_casts.addr = alloca i8*, align 8
  %val = alloca i8, align 1
  %ev = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %struct.loop* %wrto_loop, %struct.loop** %wrto_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %wrto_loop.addr, metadata !4128, metadata !DIExpression()), !dbg !4129
  store %struct.loop* %use_loop, %struct.loop** %use_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %use_loop.addr, metadata !4130, metadata !DIExpression()), !dbg !4131
  store %union.tree_node* %version, %union.tree_node** %version.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %version.addr, metadata !4132, metadata !DIExpression()), !dbg !4133
  store i8* %folded_casts, i8** %folded_casts.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %folded_casts.addr, metadata !4134, metadata !DIExpression()), !dbg !4135
  call void @llvm.dbg.declare(metadata i8* %val, metadata !4136, metadata !DIExpression()), !dbg !4137
  store i8 0, i8* %val, align 1, !dbg !4137
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev, metadata !4138, metadata !DIExpression()), !dbg !4139
  %0 = load %union.tree_node*, %union.tree_node** %version.addr, align 8, !dbg !4140
  store %union.tree_node* %0, %union.tree_node** %ev, align 8, !dbg !4139
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !4141, metadata !DIExpression()), !dbg !4142
  %1 = load i8*, i8** %folded_casts.addr, align 8, !dbg !4143
  %tobool = icmp ne i8* %1, null, !dbg !4143
  br i1 %tobool, label %if.then, label %if.end, !dbg !4145

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %folded_casts.addr, align 8, !dbg !4146
  store i8 0, i8* %2, align 1, !dbg !4147
  br label %if.end, !dbg !4148

if.end:                                           ; preds = %if.then, %entry
  br label %while.body, !dbg !4149

while.body:                                       ; preds = %if.end, %if.end12
  %3 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4150
  %4 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4152
  %call = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %3, %union.tree_node* %4), !dbg !4153
  store %union.tree_node* %call, %union.tree_node** %tmp, align 8, !dbg !4154
  %5 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4155
  %6 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4156
  %call1 = call %union.tree_node* @resolve_mixers(%struct.loop* %5, %union.tree_node* %6), !dbg !4157
  store %union.tree_node* %call1, %union.tree_node** %ev, align 8, !dbg !4158
  %7 = load i8*, i8** %folded_casts.addr, align 8, !dbg !4159
  %tobool2 = icmp ne i8* %7, null, !dbg !4159
  br i1 %tobool2, label %land.lhs.true, label %if.end4, !dbg !4161

land.lhs.true:                                    ; preds = %while.body
  %8 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4162
  %9 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4163
  %cmp = icmp ne %union.tree_node* %8, %9, !dbg !4164
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4165

if.then3:                                         ; preds = %land.lhs.true
  %10 = load i8*, i8** %folded_casts.addr, align 8, !dbg !4166
  store i8 1, i8* %10, align 1, !dbg !4167
  br label %if.end4, !dbg !4168

if.end4:                                          ; preds = %if.then3, %land.lhs.true, %while.body
  %11 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4169
  %12 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !4171
  %cmp5 = icmp eq %struct.loop* %11, %12, !dbg !4172
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4173

if.then6:                                         ; preds = %if.end4
  %13 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4174
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !4175
  br label %return, !dbg !4175

if.end7:                                          ; preds = %if.end4
  %14 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4176
  %15 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4178
  %num = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 0, !dbg !4179
  %16 = load i32, i32* %num, align 8, !dbg !4179
  %call8 = call zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %14, i32 %16, i8* %val), !dbg !4180
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4180
  br i1 %tobool9, label %lor.lhs.false, label %if.then11, !dbg !4181

lor.lhs.false:                                    ; preds = %if.end7
  %17 = load i8, i8* %val, align 1, !dbg !4182
  %tobool10 = icmp ne i8 %17, 0, !dbg !4182
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !4183

if.then11:                                        ; preds = %lor.lhs.false, %if.end7
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4184
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !4185
  br label %return, !dbg !4185

if.end12:                                         ; preds = %lor.lhs.false
  %19 = load %struct.loop*, %struct.loop** %use_loop.addr, align 8, !dbg !4186
  %call13 = call %struct.loop* @loop_outer(%struct.loop* %19), !dbg !4187
  store %struct.loop* %call13, %struct.loop** %use_loop.addr, align 8, !dbg !4188
  br label %while.body, !dbg !4149, !llvm.loop !4189

return:                                           ; preds = %if.then11, %if.then6
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4191
  ret %union.tree_node* %20, !dbg !4191
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_does_not_contain_chrecs(%union.tree_node* %expr) #0 !dbg !4192 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4195
  %call = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %0, i32* null), !dbg !4196
  %tobool = icmp ne i8 %call, 0, !dbg !4197
  %lnot = xor i1 %tobool, true, !dbg !4197
  %lnot.ext = zext i1 %lnot to i32, !dbg !4197
  %conv = trunc i32 %lnot.ext to i8, !dbg !4197
  ret i8 %conv, !dbg !4198
}

declare dso_local zeroext i8 @tree_contains_chrecs(%union.tree_node*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @scev_analysis() #0 !dbg !4199 {
entry:
  %exit_conditions = alloca %struct.VEC_gimple_heap*, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %exit_conditions, metadata !4200, metadata !DIExpression()), !dbg !4201
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 37), !dbg !4202
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %exit_conditions, align 8, !dbg !4203
  call void @select_loops_exit_conditions(%struct.VEC_gimple_heap** %exit_conditions), !dbg !4204
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4205
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4205
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4207

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !4208
  %and = and i32 %1, 16, !dbg !4209
  %tobool1 = icmp ne i32 %and, 0, !dbg !4209
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4210

if.then:                                          ; preds = %land.lhs.true
  call void @analyze_scalar_evolution_for_all_loop_phi_nodes(%struct.VEC_gimple_heap** %exit_conditions), !dbg !4211
  br label %if.end, !dbg !4211

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @number_of_iterations_for_all_loops(%struct.VEC_gimple_heap** %exit_conditions), !dbg !4212
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %exit_conditions), !dbg !4213
  ret void, !dbg !4214
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !4215 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4218, metadata !DIExpression()), !dbg !4219
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4219
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4219
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !4219
  ret %struct.VEC_gimple_heap* %1, !dbg !4219
}

; Function Attrs: noinline nounwind uwtable
define internal void @select_loops_exit_conditions(%struct.VEC_gimple_heap** %exit_conditions) #0 !dbg !4220 {
entry:
  %exit_conditions.addr = alloca %struct.VEC_gimple_heap**, align 8
  %function_body = alloca %struct.loop*, align 8
  store %struct.VEC_gimple_heap** %exit_conditions, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %exit_conditions.addr, metadata !4224, metadata !DIExpression()), !dbg !4225
  call void @llvm.dbg.declare(metadata %struct.loop** %function_body, metadata !4226, metadata !DIExpression()), !dbg !4227
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4228
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4228
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4228
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4228
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 3, !dbg !4229
  %2 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4229
  store %struct.loop* %2, %struct.loop** %function_body, align 8, !dbg !4227
  %3 = load %struct.loop*, %struct.loop** %function_body, align 8, !dbg !4230
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 8, !dbg !4231
  %4 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4231
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !4232
  call void @get_exit_conditions_rec(%struct.loop* %4, %struct.VEC_gimple_heap** %5), !dbg !4233
  ret void, !dbg !4234
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_scalar_evolution_for_all_loop_phi_nodes(%struct.VEC_gimple_heap** %exit_conditions) #0 !dbg !4235 {
entry:
  %exit_conditions.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %stats = alloca %struct.chrec_stats, align 4
  %cond = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %chrec = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.VEC_gimple_heap** %exit_conditions, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %exit_conditions.addr, metadata !4236, metadata !DIExpression()), !dbg !4237
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4238, metadata !DIExpression()), !dbg !4239
  call void @llvm.dbg.declare(metadata %struct.chrec_stats* %stats, metadata !4240, metadata !DIExpression()), !dbg !4241
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond, metadata !4242, metadata !DIExpression()), !dbg !4243
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4244, metadata !DIExpression()), !dbg !4245
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !4246, metadata !DIExpression()), !dbg !4253
  call void @reset_chrecs_counters(%struct.chrec_stats* %stats), !dbg !4254
  store i32 0, i32* %i, align 4, !dbg !4255
  br label %for.cond, !dbg !4257

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !4258
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !4258
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !4258
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4258

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !4258
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !4258
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !4258
  br label %cond.end, !dbg !4258

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4258

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4258
  %4 = load i32, i32* %i, align 4, !dbg !4258
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond1, i32 %4, %union.gimple_statement_d** %cond), !dbg !4258
  %tobool2 = icmp ne i32 %call, 0, !dbg !4260
  br i1 %tobool2, label %for.body, label %for.end22, !dbg !4260

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4261, metadata !DIExpression()), !dbg !4263
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4264, metadata !DIExpression()), !dbg !4265
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec, metadata !4266, metadata !DIExpression()), !dbg !4267
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4268
  %call3 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %5), !dbg !4269
  store %struct.loop* %call3, %struct.loop** %loop, align 8, !dbg !4270
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4271
  %header = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 2, !dbg !4272
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4272
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !4273
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4274
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4276
  %9 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4276
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4276
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4276
  br label %for.cond4, !dbg !4277

for.cond4:                                        ; preds = %for.inc, %for.body
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4278
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4280
  %lnot = xor i1 %tobool6, true, !dbg !4280
  br i1 %lnot, label %for.body7, label %for.end, !dbg !4281

for.body7:                                        ; preds = %for.cond4
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4282
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %phi, align 8, !dbg !4284
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4285
  %call9 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %11), !dbg !4285
  %call10 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call9), !dbg !4285
  %call11 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call10), !dbg !4287
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4287
  br i1 %tobool12, label %if.then, label %if.end20, !dbg !4288

if.then:                                          ; preds = %for.body7
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4289
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4291
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4292
  %call13 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %14), !dbg !4292
  %call14 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call13), !dbg !4292
  %call15 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %13, %union.tree_node* %call14), !dbg !4293
  %call16 = call %union.tree_node* @instantiate_parameters(%struct.loop* %12, %union.tree_node* %call15), !dbg !4294
  store %union.tree_node* %call16, %union.tree_node** %chrec, align 8, !dbg !4295
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4296
  %tobool17 = icmp ne %struct._IO_FILE* %15, null, !dbg !4296
  br i1 %tobool17, label %land.lhs.true, label %if.end, !dbg !4298

land.lhs.true:                                    ; preds = %if.then
  %16 = load i32, i32* @dump_flags, align 4, !dbg !4299
  %and = and i32 %16, 16, !dbg !4300
  %tobool18 = icmp ne i32 %and, 0, !dbg !4300
  br i1 %tobool18, label %if.then19, label %if.end, !dbg !4301

if.then19:                                        ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !4302
  call void @gather_chrec_stats(%union.tree_node* %17, %struct.chrec_stats* %stats), !dbg !4303
  br label %if.end, !dbg !4303

if.end:                                           ; preds = %if.then19, %land.lhs.true, %if.then
  br label %if.end20, !dbg !4304

if.end20:                                         ; preds = %if.end, %for.body7
  br label %for.inc, !dbg !4305

for.inc:                                          ; preds = %if.end20
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4306
  br label %for.cond4, !dbg !4307, !llvm.loop !4308

for.end:                                          ; preds = %for.cond4
  br label %for.inc21, !dbg !4310

for.inc21:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !4311
  %inc = add i32 %18, 1, !dbg !4311
  store i32 %inc, i32* %i, align 4, !dbg !4311
  br label %for.cond, !dbg !4312, !llvm.loop !4313

for.end22:                                        ; preds = %cond.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4315
  %tobool23 = icmp ne %struct._IO_FILE* %19, null, !dbg !4315
  br i1 %tobool23, label %land.lhs.true24, label %if.end28, !dbg !4317

land.lhs.true24:                                  ; preds = %for.end22
  %20 = load i32, i32* @dump_flags, align 4, !dbg !4318
  %and25 = and i32 %20, 16, !dbg !4319
  %tobool26 = icmp ne i32 %and25, 0, !dbg !4319
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !4320

if.then27:                                        ; preds = %land.lhs.true24
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4321
  call void @dump_chrecs_stats(%struct._IO_FILE* %21, %struct.chrec_stats* %stats), !dbg !4322
  br label %if.end28, !dbg !4322

if.end28:                                         ; preds = %if.then27, %land.lhs.true24, %for.end22
  ret void, !dbg !4323
}

; Function Attrs: noinline nounwind uwtable
define internal void @number_of_iterations_for_all_loops(%struct.VEC_gimple_heap** %exit_conditions) #0 !dbg !4324 {
entry:
  %exit_conditions.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %nb_chrec_dont_know_loops = alloca i32, align 4
  %nb_static_loops = alloca i32, align 4
  %cond = alloca %union.gimple_statement_d*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.VEC_gimple_heap** %exit_conditions, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %exit_conditions.addr, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4327, metadata !DIExpression()), !dbg !4328
  call void @llvm.dbg.declare(metadata i32* %nb_chrec_dont_know_loops, metadata !4329, metadata !DIExpression()), !dbg !4330
  store i32 0, i32* %nb_chrec_dont_know_loops, align 4, !dbg !4330
  call void @llvm.dbg.declare(metadata i32* %nb_static_loops, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i32 0, i32* %nb_static_loops, align 4, !dbg !4332
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond, metadata !4333, metadata !DIExpression()), !dbg !4334
  store i32 0, i32* %i, align 4, !dbg !4335
  br label %for.cond, !dbg !4337

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !4338
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !4338
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !4338
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4338

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !4338
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !4338
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !4338
  br label %cond.end, !dbg !4338

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4338

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4338
  %4 = load i32, i32* %i, align 4, !dbg !4338
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond1, i32 %4, %union.gimple_statement_d** %cond), !dbg !4338
  %tobool2 = icmp ne i32 %call, 0, !dbg !4340
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4340

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !4341, metadata !DIExpression()), !dbg !4343
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4344
  %call3 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %5), !dbg !4345
  %call4 = call %union.tree_node* @number_of_latch_executions(%struct.loop* %call3), !dbg !4346
  store %union.tree_node* %call4, %union.tree_node** %res, align 8, !dbg !4343
  %6 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4347
  %call5 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %6), !dbg !4349
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4349
  br i1 %tobool6, label %if.then, label %if.else, !dbg !4350

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %nb_chrec_dont_know_loops, align 4, !dbg !4351
  %inc = add i32 %7, 1, !dbg !4351
  store i32 %inc, i32* %nb_chrec_dont_know_loops, align 4, !dbg !4351
  br label %if.end, !dbg !4352

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %nb_static_loops, align 4, !dbg !4353
  %inc7 = add i32 %8, 1, !dbg !4353
  store i32 %inc7, i32* %nb_static_loops, align 4, !dbg !4353
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !4354

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !4355
  %inc8 = add i32 %9, 1, !dbg !4355
  store i32 %inc8, i32* %i, align 4, !dbg !4355
  br label %for.cond, !dbg !4356, !llvm.loop !4357

for.end:                                          ; preds = %cond.end
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4359
  %tobool9 = icmp ne %struct._IO_FILE* %10, null, !dbg !4359
  br i1 %tobool9, label %if.then10, label %if.end19, !dbg !4361

if.then10:                                        ; preds = %for.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4362
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0)), !dbg !4364
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4365
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !4366
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4367
  %14 = load i32, i32* %nb_chrec_dont_know_loops, align 4, !dbg !4368
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i64 0, i64 0), i32 %14), !dbg !4369
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4370
  %16 = load i32, i32* %nb_static_loops, align 4, !dbg !4371
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i64 0, i64 0), i32 %16), !dbg !4372
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4373
  %call15 = call i32 @number_of_loops(), !dbg !4374
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.51, i64 0, i64 0), i32 %call15), !dbg !4375
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4376
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !4377
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4378
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i64 0, i64 0)), !dbg !4379
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4380
  call void @print_loops(%struct._IO_FILE* %20, i32 3), !dbg !4381
  br label %if.end19, !dbg !4382

if.end19:                                         ; preds = %if.then10, %for.end
  ret void, !dbg !4383
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !4384 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !4385, metadata !DIExpression()), !dbg !4386
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !4387
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !4387
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !4387
  br i1 %tobool, label %if.then, label %if.end, !dbg !4386

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !4387
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !4387
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !4387
  call void @free(i8* %4), !dbg !4387
  br label %if.end, !dbg !4387

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !4386
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !4386
  ret void, !dbg !4386
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scev_finalize() #0 !dbg !4389 {
entry:
  %0 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !4390
  %tobool = icmp ne %struct.htab* %0, null, !dbg !4390
  br i1 %tobool, label %if.end, label %if.then, !dbg !4392

if.then:                                          ; preds = %entry
  br label %return, !dbg !4393

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !4394
  call void @htab_delete(%struct.htab* %1), !dbg !4395
  store %struct.htab* null, %struct.htab** @scalar_evolution_info, align 8, !dbg !4396
  br label %return, !dbg !4397

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4397
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expression_expensive_p(%union.tree_node* %expr) #0 !dbg !4398 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4401, metadata !DIExpression()), !dbg !4402
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4403, metadata !DIExpression()), !dbg !4404
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4405
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %0), !dbg !4407
  %tobool = icmp ne i8 %call, 0, !dbg !4407
  br i1 %tobool, label %if.then, label %if.end, !dbg !4408

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4409
  br label %return, !dbg !4409

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4410
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4410
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4410
  %bf.load = load i64, i64* %2, align 8, !dbg !4410
  %bf.clear = and i64 %bf.load, 65535, !dbg !4410
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4410
  store i32 %bf.cast, i32* %code, align 4, !dbg !4411
  %3 = load i32, i32* %code, align 4, !dbg !4412
  %cmp = icmp eq i32 %3, 67, !dbg !4414
  br i1 %cmp, label %if.then16, label %lor.lhs.false, !dbg !4415

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %code, align 4, !dbg !4416
  %cmp1 = icmp eq i32 %4, 68, !dbg !4417
  br i1 %cmp1, label %if.then16, label %lor.lhs.false2, !dbg !4418

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !4419
  %cmp3 = icmp eq i32 %5, 69, !dbg !4420
  br i1 %cmp3, label %if.then16, label %lor.lhs.false4, !dbg !4421

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load i32, i32* %code, align 4, !dbg !4422
  %cmp5 = icmp eq i32 %6, 70, !dbg !4423
  br i1 %cmp5, label %if.then16, label %lor.lhs.false6, !dbg !4424

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %7 = load i32, i32* %code, align 4, !dbg !4425
  %cmp7 = icmp eq i32 %7, 71, !dbg !4426
  br i1 %cmp7, label %if.then16, label %lor.lhs.false8, !dbg !4427

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %8 = load i32, i32* %code, align 4, !dbg !4428
  %cmp9 = icmp eq i32 %8, 72, !dbg !4429
  br i1 %cmp9, label %if.then16, label %lor.lhs.false10, !dbg !4430

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %9 = load i32, i32* %code, align 4, !dbg !4431
  %cmp11 = icmp eq i32 %9, 73, !dbg !4432
  br i1 %cmp11, label %if.then16, label %lor.lhs.false12, !dbg !4433

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %10 = load i32, i32* %code, align 4, !dbg !4434
  %cmp13 = icmp eq i32 %10, 74, !dbg !4435
  br i1 %cmp13, label %if.then16, label %lor.lhs.false14, !dbg !4436

lor.lhs.false14:                                  ; preds = %lor.lhs.false12
  %11 = load i32, i32* %code, align 4, !dbg !4437
  %cmp15 = icmp eq i32 %11, 76, !dbg !4438
  br i1 %cmp15, label %if.then16, label %if.end21, !dbg !4439

if.then16:                                        ; preds = %lor.lhs.false14, %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false8, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4440
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !4440
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4440
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4440
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4440
  %call17 = call i32 @integer_pow2p(%union.tree_node* %13), !dbg !4443
  %tobool18 = icmp ne i32 %call17, 0, !dbg !4443
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !4444

if.then19:                                        ; preds = %if.then16
  store i8 1, i8* %retval, align 1, !dbg !4445
  br label %return, !dbg !4445

if.end20:                                         ; preds = %if.then16
  br label %if.end21, !dbg !4446

if.end21:                                         ; preds = %if.end20, %lor.lhs.false14
  %14 = load i32, i32* %code, align 4, !dbg !4447
  %idxprom = sext i32 %14 to i64, !dbg !4447
  %arrayidx22 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4447
  %15 = load i32, i32* %arrayidx22, align 4, !dbg !4447
  switch i32 %15, label %sw.default [
    i32 7, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb30
  ], !dbg !4448

sw.bb:                                            ; preds = %if.end21, %if.end21
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4449
  %exp23 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !4449
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !4449
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 1, !dbg !4449
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !4449
  %call26 = call zeroext i8 @expression_expensive_p(%union.tree_node* %17), !dbg !4452
  %tobool27 = icmp ne i8 %call26, 0, !dbg !4452
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !4453

if.then28:                                        ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !4454
  br label %return, !dbg !4454

if.end29:                                         ; preds = %sw.bb
  br label %sw.bb30, !dbg !4455

sw.bb30:                                          ; preds = %if.end21, %if.end29
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4456
  %exp31 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !4456
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !4456
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !4456
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !4456
  %call34 = call zeroext i8 @expression_expensive_p(%union.tree_node* %19), !dbg !4457
  store i8 %call34, i8* %retval, align 1, !dbg !4458
  br label %return, !dbg !4458

sw.default:                                       ; preds = %if.end21
  store i8 1, i8* %retval, align 1, !dbg !4459
  br label %return, !dbg !4459

return:                                           ; preds = %sw.default, %sw.bb30, %if.then28, %if.then19, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !4460
  ret i8 %20, !dbg !4460
}

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

declare dso_local i32 @integer_pow2p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @scev_const_prop() #0 !dbg !4461 {
entry:
  %retval = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %name = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %ev = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %ass = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %ex_loop = alloca %struct.loop*, align 8
  %ssa_names_to_remove = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %li = alloca %struct.loop_iterator, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %psi66 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp81 = alloca %struct.gimple_stmt_iterator, align 8
  %exit = alloca %struct.edge_def*, align 8
  %def = alloca %union.tree_node*, align 8
  %rslt = alloca %union.tree_node*, align 8
  %niter = alloca %union.tree_node*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp101 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp107 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4464, metadata !DIExpression()), !dbg !4465
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4466, metadata !DIExpression()), !dbg !4467
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4468, metadata !DIExpression()), !dbg !4469
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev, metadata !4470, metadata !DIExpression()), !dbg !4471
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4472, metadata !DIExpression()), !dbg !4473
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ass, metadata !4474, metadata !DIExpression()), !dbg !4475
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4476, metadata !DIExpression()), !dbg !4477
  call void @llvm.dbg.declare(metadata %struct.loop** %ex_loop, metadata !4478, metadata !DIExpression()), !dbg !4479
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %ssa_names_to_remove, metadata !4480, metadata !DIExpression()), !dbg !4481
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4481
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4482, metadata !DIExpression()), !dbg !4483
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !4484, metadata !DIExpression()), !dbg !4485
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !4486, metadata !DIExpression()), !dbg !4487
  %call = call i32 @number_of_loops(), !dbg !4488
  %cmp = icmp ule i32 %call, 1, !dbg !4490
  br i1 %cmp, label %if.then, label %if.end, !dbg !4491

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4492
  br label %return, !dbg !4492

if.end:                                           ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4493
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4493
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4493
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4493
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4493
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4493
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4493
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4493
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4493
  br label %for.cond, !dbg !4493

for.cond:                                         ; preds = %for.inc57, %if.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4495
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4495
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4495
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4495
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4495
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4495
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4495
  %cmp3 = icmp ne %struct.basic_block_def* %4, %7, !dbg !4495
  br i1 %cmp3, label %for.body, label %for.end59, !dbg !4493

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4497
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 3, !dbg !4499
  %9 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4499
  store %struct.loop* %9, %struct.loop** %loop, align 8, !dbg !4500
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4501
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %10), !dbg !4503
  %11 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4503
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4503
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !4503
  br label %for.cond4, !dbg !4504

for.cond4:                                        ; preds = %for.inc, %for.body
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4505
  %tobool = icmp ne i8 %call5, 0, !dbg !4507
  %lnot = xor i1 %tobool, true, !dbg !4507
  br i1 %lnot, label %for.body6, label %for.end, !dbg !4508

for.body6:                                        ; preds = %for.cond4
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4509
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %phi, align 8, !dbg !4511
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4512
  %call8 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %13), !dbg !4512
  %call9 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call8), !dbg !4512
  store %union.tree_node* %call9, %union.tree_node** %name, align 8, !dbg !4513
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4514
  %call10 = call zeroext i8 @is_gimple_reg(%union.tree_node* %14), !dbg !4516
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4516
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !4517

if.then12:                                        ; preds = %for.body6
  br label %for.inc, !dbg !4518

if.end13:                                         ; preds = %for.body6
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4519
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4519
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4519
  %16 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !4519
  store %union.tree_node* %16, %union.tree_node** %type, align 8, !dbg !4520
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4521
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4521
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !4521
  %bf.load = load i64, i64* %18, align 8, !dbg !4521
  %bf.clear = and i64 %bf.load, 65535, !dbg !4521
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4521
  %cmp15 = icmp eq i32 %bf.cast, 10, !dbg !4521
  br i1 %cmp15, label %if.end39, label %lor.lhs.false, !dbg !4521

lor.lhs.false:                                    ; preds = %if.end13
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4521
  %base16 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4521
  %20 = bitcast %struct.tree_base* %base16 to i64*, !dbg !4521
  %bf.load17 = load i64, i64* %20, align 8, !dbg !4521
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !4521
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !4521
  %cmp20 = icmp eq i32 %bf.cast19, 12, !dbg !4521
  br i1 %cmp20, label %if.end39, label %land.lhs.true, !dbg !4523

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4524
  %base21 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4524
  %22 = bitcast %struct.tree_base* %base21 to i64*, !dbg !4524
  %bf.load22 = load i64, i64* %22, align 8, !dbg !4524
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !4524
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !4524
  %cmp25 = icmp eq i32 %bf.cast24, 6, !dbg !4524
  br i1 %cmp25, label %if.end39, label %lor.lhs.false26, !dbg !4524

lor.lhs.false26:                                  ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4524
  %base27 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !4524
  %24 = bitcast %struct.tree_base* %base27 to i64*, !dbg !4524
  %bf.load28 = load i64, i64* %24, align 8, !dbg !4524
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !4524
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !4524
  %cmp31 = icmp eq i32 %bf.cast30, 7, !dbg !4524
  br i1 %cmp31, label %if.end39, label %lor.lhs.false32, !dbg !4524

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4524
  %base33 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4524
  %26 = bitcast %struct.tree_base* %base33 to i64*, !dbg !4524
  %bf.load34 = load i64, i64* %26, align 8, !dbg !4524
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !4524
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !4524
  %cmp37 = icmp eq i32 %bf.cast36, 8, !dbg !4524
  br i1 %cmp37, label %if.end39, label %if.then38, !dbg !4525

if.then38:                                        ; preds = %lor.lhs.false32
  br label %for.inc, !dbg !4526

if.end39:                                         ; preds = %lor.lhs.false32, %lor.lhs.false26, %land.lhs.true, %lor.lhs.false, %if.end13
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4527
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4528
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4529
  %call40 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %28, %union.tree_node* %29), !dbg !4530
  %call41 = call %union.tree_node* @resolve_mixers(%struct.loop* %27, %union.tree_node* %call40), !dbg !4531
  store %union.tree_node* %call41, %union.tree_node** %ev, align 8, !dbg !4532
  %30 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4533
  %call42 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %30), !dbg !4535
  %tobool43 = icmp ne i8 %call42, 0, !dbg !4535
  br i1 %tobool43, label %lor.lhs.false44, label %if.then47, !dbg !4536

lor.lhs.false44:                                  ; preds = %if.end39
  %31 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4537
  %32 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4538
  %call45 = call zeroext i8 @may_propagate_copy(%union.tree_node* %31, %union.tree_node* %32), !dbg !4539
  %tobool46 = icmp ne i8 %call45, 0, !dbg !4539
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !4540

if.then47:                                        ; preds = %lor.lhs.false44, %if.end39
  br label %for.inc, !dbg !4541

if.end48:                                         ; preds = %lor.lhs.false44
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4542
  %34 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4544
  %cmp49 = icmp ne %union.tree_node* %33, %34, !dbg !4545
  br i1 %cmp49, label %if.then50, label %if.end51, !dbg !4546

if.then50:                                        ; preds = %if.end48
  %35 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4547
  %36 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !4548
  call void @replace_uses_by(%union.tree_node* %35, %union.tree_node* %36), !dbg !4549
  br label %if.end51, !dbg !4549

if.end51:                                         ; preds = %if.then50, %if.end48
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4550
  %tobool52 = icmp ne %struct.bitmap_head_def* %37, null, !dbg !4550
  br i1 %tobool52, label %if.end55, label %if.then53, !dbg !4552

if.then53:                                        ; preds = %if.end51
  %call54 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4553
  store %struct.bitmap_head_def* %call54, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4554
  br label %if.end55, !dbg !4555

if.end55:                                         ; preds = %if.then53, %if.end51
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4556
  %39 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4557
  %ssa_name = bitcast %union.tree_node* %39 to %struct.tree_ssa_name*, !dbg !4557
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4557
  %40 = load i32, i32* %version, align 8, !dbg !4557
  %call56 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %38, i32 %40), !dbg !4558
  br label %for.inc, !dbg !4559

for.inc:                                          ; preds = %if.end55, %if.then47, %if.then38, %if.then12
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4560
  br label %for.cond4, !dbg !4561, !llvm.loop !4562

for.end:                                          ; preds = %for.cond4
  br label %for.inc57, !dbg !4564

for.inc57:                                        ; preds = %for.end
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4495
  %next_bb58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 6, !dbg !4495
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb58, align 8, !dbg !4495
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !4495
  br label %for.cond, !dbg !4495, !llvm.loop !4565

for.end59:                                        ; preds = %for.cond
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4567
  %tobool60 = icmp ne %struct.bitmap_head_def* %43, null, !dbg !4567
  br i1 %tobool60, label %if.then61, label %if.end84, !dbg !4569

if.then61:                                        ; preds = %for.end59
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4570, metadata !DIExpression()), !dbg !4579
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4580
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %44, i32 0, i32* %i), !dbg !4580
  br label %for.cond62, !dbg !4580

for.cond62:                                       ; preds = %for.inc82, %if.then61
  %call63 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4582
  %tobool64 = icmp ne i8 %call63, 0, !dbg !4580
  br i1 %tobool64, label %for.body65, label %for.end83, !dbg !4580

for.body65:                                       ; preds = %for.cond62
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi66, metadata !4584, metadata !DIExpression()), !dbg !4586
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4587
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !4587
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 3, !dbg !4587
  %46 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4587
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %46, i32 0, i32 2, !dbg !4587
  %47 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4587
  %tobool68 = icmp ne %struct.VEC_tree_gc* %47, null, !dbg !4587
  br i1 %tobool68, label %cond.true, label %cond.false, !dbg !4587

cond.true:                                        ; preds = %for.body65
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4587
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !4587
  %gimple_df70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 3, !dbg !4587
  %49 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df70, align 8, !dbg !4587
  %ssa_names71 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %49, i32 0, i32 2, !dbg !4587
  %50 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names71, align 8, !dbg !4587
  %base72 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %50, i32 0, i32 0, !dbg !4587
  br label %cond.end, !dbg !4587

cond.false:                                       ; preds = %for.body65
  br label %cond.end, !dbg !4587

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base72, %cond.true ], [ null, %cond.false ], !dbg !4587
  %51 = load i32, i32* %i, align 4, !dbg !4587
  %call73 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %51), !dbg !4587
  store %union.tree_node* %call73, %union.tree_node** %name, align 8, !dbg !4588
  %52 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4589
  %ssa_name74 = bitcast %union.tree_node* %52 to %struct.tree_ssa_name*, !dbg !4589
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name74, i32 0, i32 2, !dbg !4589
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4589
  store %union.gimple_statement_d* %53, %union.gimple_statement_d** %phi, align 8, !dbg !4590
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4591
  %call75 = call i32 @gimple_code(%union.gimple_statement_d* %54), !dbg !4591
  %cmp76 = icmp eq i32 %call75, 16, !dbg !4591
  br i1 %cmp76, label %cond.false78, label %cond.true77, !dbg !4591

cond.true77:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 3277, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !4591
  br label %cond.end79, !dbg !4591

cond.false78:                                     ; preds = %cond.end
  br label %cond.end79, !dbg !4591

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !4591
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4592
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp81, %union.gimple_statement_d* %55), !dbg !4593
  %56 = bitcast %struct.gimple_stmt_iterator* %psi66 to i8*, !dbg !4593
  %57 = bitcast %struct.gimple_stmt_iterator* %tmp81 to i8*, !dbg !4593
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false), !dbg !4593
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi66, i8 zeroext 1), !dbg !4594
  br label %for.inc82, !dbg !4595

for.inc82:                                        ; preds = %cond.end79
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4582
  br label %for.cond62, !dbg !4582, !llvm.loop !4596

for.end83:                                        ; preds = %for.cond62
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4598
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %58), !dbg !4598
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %ssa_names_to_remove, align 8, !dbg !4598
  call void @scev_reset(), !dbg !4599
  br label %if.end84, !dbg !4600

if.end84:                                         ; preds = %for.end83, %for.end59
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !4601
  br label %for.cond85, !dbg !4601

for.cond85:                                       ; preds = %for.inc185, %if.end84
  %59 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4603
  %tobool86 = icmp ne %struct.loop* %59, null, !dbg !4601
  br i1 %tobool86, label %for.body87, label %for.end186, !dbg !4601

for.body87:                                       ; preds = %for.cond85
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !4605, metadata !DIExpression()), !dbg !4607
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4608, metadata !DIExpression()), !dbg !4609
  call void @llvm.dbg.declare(metadata %union.tree_node** %rslt, metadata !4610, metadata !DIExpression()), !dbg !4611
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !4612, metadata !DIExpression()), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4614, metadata !DIExpression()), !dbg !4615
  %60 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4616
  %call88 = call %struct.edge_def* @single_exit(%struct.loop* %60), !dbg !4617
  store %struct.edge_def* %call88, %struct.edge_def** %exit, align 8, !dbg !4618
  %61 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4619
  %tobool89 = icmp ne %struct.edge_def* %61, null, !dbg !4619
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !4621

if.then90:                                        ; preds = %for.body87
  br label %for.inc185, !dbg !4622

if.end91:                                         ; preds = %for.body87
  %62 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4623
  %call92 = call %union.tree_node* @number_of_latch_executions(%struct.loop* %62), !dbg !4624
  store %union.tree_node* %call92, %union.tree_node** %niter, align 8, !dbg !4625
  %63 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4626
  %64 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4628
  %cmp93 = icmp eq %union.tree_node* %63, %64, !dbg !4629
  br i1 %cmp93, label %if.then94, label %if.end95, !dbg !4630

if.then94:                                        ; preds = %if.end91
  br label %for.inc185, !dbg !4631

if.end95:                                         ; preds = %if.end91
  %65 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4632
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 1, !dbg !4634
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4634
  %call96 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %66), !dbg !4635
  %tobool97 = icmp ne i8 %call96, 0, !dbg !4635
  br i1 %tobool97, label %if.end100, label %if.then98, !dbg !4636

if.then98:                                        ; preds = %if.end95
  %67 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4637
  %call99 = call %struct.basic_block_def* @split_loop_exit_edge(%struct.edge_def* %67), !dbg !4638
  br label %if.end100, !dbg !4638

if.end100:                                        ; preds = %if.then98, %if.end95
  %68 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4639
  %dest102 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 1, !dbg !4640
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %dest102, align 8, !dbg !4640
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp101, %struct.basic_block_def* %69), !dbg !4641
  %70 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4641
  %71 = bitcast %struct.gimple_stmt_iterator* %tmp101 to i8*, !dbg !4641
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 24, i1 false), !dbg !4641
  %72 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4642
  %73 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4643
  %dest103 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 1, !dbg !4644
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %dest103, align 8, !dbg !4644
  %loop_father104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 3, !dbg !4645
  %75 = load %struct.loop*, %struct.loop** %loop_father104, align 8, !dbg !4645
  %call105 = call i32 @loop_depth(%struct.loop* %75), !dbg !4646
  %add = add i32 %call105, 1, !dbg !4647
  %call106 = call %struct.loop* @superloop_at_depth(%struct.loop* %72, i32 %add), !dbg !4648
  store %struct.loop* %call106, %struct.loop** %ex_loop, align 8, !dbg !4649
  %76 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4650
  %dest108 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 1, !dbg !4652
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %dest108, align 8, !dbg !4652
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp107, %struct.basic_block_def* %77), !dbg !4653
  %78 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4653
  %79 = bitcast %struct.gimple_stmt_iterator* %tmp107 to i8*, !dbg !4653
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false), !dbg !4653
  br label %for.cond109, !dbg !4654

for.cond109:                                      ; preds = %if.end180, %if.then179, %if.then162, %if.then121, %if.end100
  %call110 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4655
  %tobool111 = icmp ne i8 %call110, 0, !dbg !4657
  %lnot112 = xor i1 %tobool111, true, !dbg !4657
  br i1 %lnot112, label %for.body113, label %for.end184, !dbg !4658

for.body113:                                      ; preds = %for.cond109
  %call114 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4659
  store %union.gimple_statement_d* %call114, %union.gimple_statement_d** %phi, align 8, !dbg !4661
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4662
  %call115 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %80), !dbg !4662
  %call116 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call115), !dbg !4662
  store %union.tree_node* %call116, %union.tree_node** %rslt, align 8, !dbg !4663
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4664
  %82 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4664
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 6, !dbg !4664
  %83 = load i32, i32* %dest_idx, align 4, !dbg !4664
  %call117 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %81, i32 %83), !dbg !4664
  %call118 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call117), !dbg !4664
  store %union.tree_node* %call118, %union.tree_node** %def, align 8, !dbg !4665
  %84 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4666
  %call119 = call zeroext i8 @is_gimple_reg(%union.tree_node* %84), !dbg !4668
  %tobool120 = icmp ne i8 %call119, 0, !dbg !4668
  br i1 %tobool120, label %if.end122, label %if.then121, !dbg !4669

if.then121:                                       ; preds = %for.body113
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4670
  br label %for.cond109, !dbg !4672, !llvm.loop !4673

if.end122:                                        ; preds = %for.body113
  %85 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4675
  %common123 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !4675
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 2, !dbg !4675
  %86 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !4675
  %base125 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !4675
  %87 = bitcast %struct.tree_base* %base125 to i64*, !dbg !4675
  %bf.load126 = load i64, i64* %87, align 8, !dbg !4675
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !4675
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !4675
  %cmp129 = icmp eq i32 %bf.cast128, 10, !dbg !4675
  br i1 %cmp129, label %if.end163, label %lor.lhs.false130, !dbg !4675

lor.lhs.false130:                                 ; preds = %if.end122
  %88 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4675
  %common131 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !4675
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !4675
  %89 = load %union.tree_node*, %union.tree_node** %type132, align 8, !dbg !4675
  %base133 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4675
  %90 = bitcast %struct.tree_base* %base133 to i64*, !dbg !4675
  %bf.load134 = load i64, i64* %90, align 8, !dbg !4675
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !4675
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !4675
  %cmp137 = icmp eq i32 %bf.cast136, 12, !dbg !4675
  br i1 %cmp137, label %if.end163, label %land.lhs.true138, !dbg !4677

land.lhs.true138:                                 ; preds = %lor.lhs.false130
  %91 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4678
  %common139 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !4678
  %type140 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common139, i32 0, i32 2, !dbg !4678
  %92 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !4678
  %base141 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !4678
  %93 = bitcast %struct.tree_base* %base141 to i64*, !dbg !4678
  %bf.load142 = load i64, i64* %93, align 8, !dbg !4678
  %bf.clear143 = and i64 %bf.load142, 65535, !dbg !4678
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !4678
  %cmp145 = icmp eq i32 %bf.cast144, 6, !dbg !4678
  br i1 %cmp145, label %if.end163, label %lor.lhs.false146, !dbg !4678

lor.lhs.false146:                                 ; preds = %land.lhs.true138
  %94 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4678
  %common147 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !4678
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !4678
  %95 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !4678
  %base149 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !4678
  %96 = bitcast %struct.tree_base* %base149 to i64*, !dbg !4678
  %bf.load150 = load i64, i64* %96, align 8, !dbg !4678
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !4678
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !4678
  %cmp153 = icmp eq i32 %bf.cast152, 7, !dbg !4678
  br i1 %cmp153, label %if.end163, label %lor.lhs.false154, !dbg !4678

lor.lhs.false154:                                 ; preds = %lor.lhs.false146
  %97 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4678
  %common155 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !4678
  %type156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common155, i32 0, i32 2, !dbg !4678
  %98 = load %union.tree_node*, %union.tree_node** %type156, align 8, !dbg !4678
  %base157 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !4678
  %99 = bitcast %struct.tree_base* %base157 to i64*, !dbg !4678
  %bf.load158 = load i64, i64* %99, align 8, !dbg !4678
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !4678
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !4678
  %cmp161 = icmp eq i32 %bf.cast160, 8, !dbg !4678
  br i1 %cmp161, label %if.end163, label %if.then162, !dbg !4679

if.then162:                                       ; preds = %lor.lhs.false154
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4680
  br label %for.cond109, !dbg !4682, !llvm.loop !4673

if.end163:                                        ; preds = %lor.lhs.false154, %lor.lhs.false146, %land.lhs.true138, %lor.lhs.false130, %if.end122
  %100 = load %struct.loop*, %struct.loop** %ex_loop, align 8, !dbg !4683
  %101 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4684
  %102 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4685
  %call164 = call %union.tree_node* @analyze_scalar_evolution_in_loop(%struct.loop* %100, %struct.loop* %101, %union.tree_node* %102, i8* null), !dbg !4686
  store %union.tree_node* %call164, %union.tree_node** %def, align 8, !dbg !4687
  %103 = load %struct.loop*, %struct.loop** %ex_loop, align 8, !dbg !4688
  %104 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4689
  %call165 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %103, %union.tree_node* %104), !dbg !4690
  store %union.tree_node* %call165, %union.tree_node** %def, align 8, !dbg !4691
  %105 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4692
  %call166 = call zeroext i8 @tree_does_not_contain_chrecs(%union.tree_node* %105), !dbg !4694
  %tobool167 = icmp ne i8 %call166, 0, !dbg !4694
  br i1 %tobool167, label %lor.lhs.false168, label %if.then179, !dbg !4695

lor.lhs.false168:                                 ; preds = %if.end163
  %106 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4696
  %107 = load %struct.loop*, %struct.loop** %ex_loop, align 8, !dbg !4697
  %num = getelementptr inbounds %struct.loop, %struct.loop* %107, i32 0, i32 0, !dbg !4698
  %108 = load i32, i32* %num, align 8, !dbg !4698
  %call169 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %106, i32 %108), !dbg !4699
  %conv = zext i8 %call169 to i32, !dbg !4699
  %tobool170 = icmp ne i32 %conv, 0, !dbg !4699
  br i1 %tobool170, label %if.then179, label %lor.lhs.false171, !dbg !4700

lor.lhs.false171:                                 ; preds = %lor.lhs.false168
  %109 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4701
  %call172 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %109), !dbg !4702
  %conv173 = zext i8 %call172 to i32, !dbg !4702
  %tobool174 = icmp ne i32 %conv173, 0, !dbg !4702
  br i1 %tobool174, label %if.then179, label %lor.lhs.false175, !dbg !4703

lor.lhs.false175:                                 ; preds = %lor.lhs.false171
  %110 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4704
  %call176 = call zeroext i8 @expression_expensive_p(%union.tree_node* %110), !dbg !4705
  %conv177 = zext i8 %call176 to i32, !dbg !4705
  %tobool178 = icmp ne i32 %conv177, 0, !dbg !4705
  br i1 %tobool178, label %if.then179, label %if.end180, !dbg !4706

if.then179:                                       ; preds = %lor.lhs.false175, %lor.lhs.false171, %lor.lhs.false168, %if.end163
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4707
  br label %for.cond109, !dbg !4709, !llvm.loop !4673

if.end180:                                        ; preds = %lor.lhs.false175
  %111 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4710
  %call181 = call %union.tree_node* @unshare_expr(%union.tree_node* %111), !dbg !4711
  store %union.tree_node* %call181, %union.tree_node** %def, align 8, !dbg !4712
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 0), !dbg !4713
  %112 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4714
  %call182 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %112, i8 zeroext 0, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4715
  store %union.tree_node* %call182, %union.tree_node** %def, align 8, !dbg !4716
  %113 = load %union.tree_node*, %union.tree_node** %rslt, align 8, !dbg !4717
  %114 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4717
  %call183 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %113, %union.tree_node* %114), !dbg !4717
  store %union.gimple_statement_d* %call183, %union.gimple_statement_d** %ass, align 8, !dbg !4718
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ass, align 8, !dbg !4719
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %115, i32 1), !dbg !4720
  br label %for.cond109, !dbg !4721, !llvm.loop !4673

for.end184:                                       ; preds = %for.cond109
  br label %for.inc185, !dbg !4722

for.inc185:                                       ; preds = %for.end184, %if.then94, %if.then90
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4603
  br label %for.cond85, !dbg !4603, !llvm.loop !4723

for.end186:                                       ; preds = %for.cond85
  store i32 0, i32* %retval, align 4, !dbg !4725
  br label %return, !dbg !4725

return:                                           ; preds = %for.end186, %if.then
  %116 = load i32, i32* %retval, align 4, !dbg !4726
  ret i32 %116, !dbg !4726
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !4727 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4728
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4728
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4728
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4728
  %tobool = icmp ne %struct.loops* %1, null, !dbg !4728
  br i1 %tobool, label %if.end, label %if.then, !dbg !4730

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4731
  br label %return, !dbg !4731

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4732
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4732
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4732
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4732
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !4732
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !4732
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !4732
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4732

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4732
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4732
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !4732
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !4732
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !4732
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !4732
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !4732
  br label %cond.end, !dbg !4732

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4732
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4732
  store i32 %call, i32* %retval, align 4, !dbg !4733
  br label %return, !dbg !4733

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !4734
  ret i32 %8, !dbg !4734
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4735 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4738, metadata !DIExpression()), !dbg !4739
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4740
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4740
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4741
  %conv = zext i1 %cmp to i32, !dbg !4741
  %conv1 = trunc i32 %conv to i8, !dbg !4742
  ret i8 %conv1, !dbg !4743
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4744 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4747, metadata !DIExpression()), !dbg !4748
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4749
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4749
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4750
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4750
  ret %union.gimple_statement_d* %1, !dbg !4751
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !4752 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !4756, metadata !DIExpression()), !dbg !4757
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !4758
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4759
  ret %union.tree_node* %1, !dbg !4760
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !4761 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4766
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !4767
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !4768
  ret %union.tree_node** %result, !dbg !4769
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local zeroext i8 @may_propagate_copy(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @replace_uses_by(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4770 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4776
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4777
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4777
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4778
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4778
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4779
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4780
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4781
  ret void, !dbg !4782
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4783 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4793, metadata !DIExpression()), !dbg !4794
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4795, metadata !DIExpression()), !dbg !4796
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4797, metadata !DIExpression()), !dbg !4798
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4799
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4800
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4800
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4801
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4802
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4803
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4804
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4805
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4806
  br label %while.body, !dbg !4807

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4808
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4811
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4811
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4808
  br i1 %tobool, label %if.end, label %if.then, !dbg !4812

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4813
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4815
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4816
  br label %while.end, !dbg !4817

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4818
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4820
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4820
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4821
  %9 = load i32, i32* %indx, align 8, !dbg !4821
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4822
  %div = udiv i32 %10, 128, !dbg !4823
  %cmp = icmp uge i32 %9, %div, !dbg !4824
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4825

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4826

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4827
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4828
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4828
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4829
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4829
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4830
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4831
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4832
  br label %while.body, !dbg !4807, !llvm.loop !4833

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4835
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4837
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4837
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4838
  %17 = load i32, i32* %indx9, align 8, !dbg !4838
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4839
  %div10 = udiv i32 %18, 128, !dbg !4840
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4841
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4842

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4843
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4844
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4844
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4845
  %21 = load i32, i32* %indx14, align 8, !dbg !4845
  %mul = mul i32 %21, 128, !dbg !4846
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4847
  br label %if.end15, !dbg !4848

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4849
  %div16 = udiv i32 %22, 64, !dbg !4850
  %rem = urem i32 %div16, 2, !dbg !4851
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4852
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4853
  store i32 %rem, i32* %word_no, align 8, !dbg !4854
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4855
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4856
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4856
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4857
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4858
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4859
  %27 = load i32, i32* %word_no18, align 8, !dbg !4859
  %idxprom = zext i32 %27 to i64, !dbg !4855
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4855
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4855
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4860
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4861
  store i64 %28, i64* %bits19, align 8, !dbg !4862
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4863
  %rem20 = urem i32 %30, 64, !dbg !4864
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4865
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4866
  %32 = load i64, i64* %bits21, align 8, !dbg !4867
  %sh_prom = zext i32 %rem20 to i64, !dbg !4867
  %shr = lshr i64 %32, %sh_prom, !dbg !4867
  store i64 %shr, i64* %bits21, align 8, !dbg !4867
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4868
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4869
  %34 = load i64, i64* %bits22, align 8, !dbg !4869
  %tobool23 = icmp ne i64 %34, 0, !dbg !4870
  %lnot = xor i1 %tobool23, true, !dbg !4870
  %lnot.ext = zext i1 %lnot to i32, !dbg !4870
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4871
  %add = add i32 %35, %lnot.ext, !dbg !4871
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4871
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4872
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4873
  store i32 %36, i32* %37, align 4, !dbg !4874
  ret void, !dbg !4875
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4876 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4879, metadata !DIExpression()), !dbg !4880
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4881, metadata !DIExpression()), !dbg !4882
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4883
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4885
  %1 = load i64, i64* %bits, align 8, !dbg !4885
  %tobool = icmp ne i64 %1, 0, !dbg !4883
  br i1 %tobool, label %if.then, label %if.end, !dbg !4886

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4887

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4888), !dbg !4890
  br label %while.cond, !dbg !4891

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4892
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4893
  %3 = load i64, i64* %bits1, align 8, !dbg !4893
  %and = and i64 %3, 1, !dbg !4894
  %tobool2 = icmp ne i64 %and, 0, !dbg !4895
  %lnot = xor i1 %tobool2, true, !dbg !4895
  br i1 %lnot, label %while.body, label %while.end, !dbg !4891

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4896
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4898
  %5 = load i64, i64* %bits3, align 8, !dbg !4899
  %shr = lshr i64 %5, 1, !dbg !4899
  store i64 %shr, i64* %bits3, align 8, !dbg !4899
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4900
  %7 = load i32, i32* %6, align 4, !dbg !4901
  %add = add i32 %7, 1, !dbg !4901
  store i32 %add, i32* %6, align 4, !dbg !4901
  br label %while.cond, !dbg !4891, !llvm.loop !4902

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4904
  br label %return, !dbg !4904

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4905
  %9 = load i32, i32* %8, align 4, !dbg !4906
  %add4 = add i32 %9, 64, !dbg !4907
  %sub = sub i32 %add4, 1, !dbg !4908
  %div = udiv i32 %sub, 64, !dbg !4909
  %mul = mul i32 %div, 64, !dbg !4910
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4911
  store i32 %mul, i32* %10, align 4, !dbg !4912
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4913
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4914
  %12 = load i32, i32* %word_no, align 8, !dbg !4915
  %inc = add i32 %12, 1, !dbg !4915
  store i32 %inc, i32* %word_no, align 8, !dbg !4915
  br label %while.body6, !dbg !4916

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4917

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4919
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4920
  %14 = load i32, i32* %word_no8, align 8, !dbg !4920
  %cmp = icmp ne i32 %14, 2, !dbg !4921
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4917

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4922
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4924
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4924
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4925
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4926
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4927
  %18 = load i32, i32* %word_no11, align 8, !dbg !4927
  %idxprom = zext i32 %18 to i64, !dbg !4922
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4922
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4922
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4928
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4929
  store i64 %19, i64* %bits12, align 8, !dbg !4930
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4931
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4933
  %22 = load i64, i64* %bits13, align 8, !dbg !4933
  %tobool14 = icmp ne i64 %22, 0, !dbg !4931
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4934

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4935

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4936
  %24 = load i32, i32* %23, align 4, !dbg !4937
  %add17 = add i32 %24, 64, !dbg !4937
  store i32 %add17, i32* %23, align 4, !dbg !4937
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4938
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4939
  %26 = load i32, i32* %word_no18, align 8, !dbg !4940
  %inc19 = add i32 %26, 1, !dbg !4940
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4940
  br label %while.cond7, !dbg !4917, !llvm.loop !4941

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4943
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4944
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4944
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4945
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4945
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4946
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4947
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4948
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4949
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4951
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4951
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4949
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4952

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4953
  br label %return, !dbg !4953

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4954
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4955
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4955
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4956
  %35 = load i32, i32* %indx, align 8, !dbg !4956
  %mul28 = mul i32 %35, 128, !dbg !4957
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4958
  store i32 %mul28, i32* %36, align 4, !dbg !4959
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4960
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4961
  store i32 0, i32* %word_no29, align 8, !dbg !4962
  br label %while.body6, !dbg !4916, !llvm.loop !4963

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4965
  ret i8 %38, !dbg !4965
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !4966 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4971, metadata !DIExpression()), !dbg !4972
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4973, metadata !DIExpression()), !dbg !4972
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4972
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4972
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4972

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4972
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4972
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4972
  %3 = load i32, i32* %num, align 8, !dbg !4972
  %cmp = icmp ult i32 %1, %3, !dbg !4972
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4974
  %land.ext = zext i1 %4 to i32, !dbg !4972
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4972
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !4972
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4972
  %idxprom = zext i32 %6 to i64, !dbg !4972
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4972
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4972
  ret %union.tree_node* %7, !dbg !4972
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4975 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4978, metadata !DIExpression()), !dbg !4979
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4980, metadata !DIExpression()), !dbg !4981
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4982
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4983
  %1 = load i64, i64* %bits, align 8, !dbg !4984
  %shr = lshr i64 %1, 1, !dbg !4984
  store i64 %shr, i64* %bits, align 8, !dbg !4984
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4985
  %3 = load i32, i32* %2, align 4, !dbg !4986
  %add = add i32 %3, 1, !dbg !4986
  store i32 %add, i32* %2, align 4, !dbg !4986
  ret void, !dbg !4987
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !4988 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4994, metadata !DIExpression()), !dbg !4995
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4996
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !4996
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4996
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4996
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4996

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4996
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !4996
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !4996
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4996
  br label %cond.end, !dbg !4996

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4996

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4996
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4996
  %cmp = icmp eq i32 %call, 1, !dbg !4997
  %conv = zext i1 %cmp to i32, !dbg !4997
  %conv2 = trunc i32 %conv to i8, !dbg !4996
  ret i8 %conv2, !dbg !4998
}

declare dso_local %struct.basic_block_def* @split_loop_exit_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4999 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5002, metadata !DIExpression()), !dbg !5003
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5004, metadata !DIExpression()), !dbg !5005
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5006
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !5007
  br label %while.cond, !dbg !5008

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5009
  %tobool = icmp ne i8 %call, 0, !dbg !5009
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5010

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5011
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !5012
  %cmp = icmp eq i32 %call2, 4, !dbg !5013
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !5014
  br i1 %1, label %while.body, label %while.end, !dbg !5008

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !5015
  br label %while.cond, !dbg !5008, !llvm.loop !5016

while.end:                                        ; preds = %land.end
  ret void, !dbg !5018
}

declare dso_local %struct.loop* @superloop_at_depth(%struct.loop*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !5019 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5022, metadata !DIExpression()), !dbg !5023
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5024
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !5024
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !5024
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !5024
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5024

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5024
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !5024
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !5024
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !5024
  br label %cond.end, !dbg !5024

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5024

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5024
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5024
  ret i32 %call, !dbg !5025
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5026 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5032, metadata !DIExpression()), !dbg !5033
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5034
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5035
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5035
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5036
  ret %union.tree_node* %2, !dbg !5037
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5038 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5041, metadata !DIExpression()), !dbg !5042
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5043, metadata !DIExpression()), !dbg !5044
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5045
  %1 = load i32, i32* %i.addr, align 4, !dbg !5046
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !5047
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !5048
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !5049
}

declare dso_local zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_scev_info_str(i8* %x_p) #0 !dbg !5050 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.scev_info_str*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5051, metadata !DIExpression()), !dbg !5052
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %x, metadata !5053, metadata !DIExpression()), !dbg !5055
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5056
  %1 = bitcast i8* %0 to %struct.scev_info_str*, !dbg !5057
  store %struct.scev_info_str* %1, %struct.scev_info_str** %x, align 8, !dbg !5055
  %2 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5058
  %cmp = icmp ne %struct.scev_info_str* %2, null, !dbg !5058
  br i1 %cmp, label %land.lhs.true, label %if.end18, !dbg !5058

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5058
  %4 = bitcast %struct.scev_info_str* %3 to i8*, !dbg !5058
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !5058
  br i1 %cmp1, label %land.lhs.true2, label %if.end18, !dbg !5058

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5058
  %6 = bitcast %struct.scev_info_str* %5 to i8*, !dbg !5058
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !5058
  %tobool = icmp ne i32 %call, 0, !dbg !5058
  br i1 %tobool, label %if.end18, label %if.then, !dbg !5060

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !5061

do.body:                                          ; preds = %if.then
  %7 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5063
  %instantiated_below = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %7, i32 0, i32 0, !dbg !5063
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below, align 8, !dbg !5063
  %cmp3 = icmp ne %struct.basic_block_def* %8, null, !dbg !5063
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !5066

if.then4:                                         ; preds = %do.body
  %9 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5063
  %instantiated_below5 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %9, i32 0, i32 0, !dbg !5063
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below5, align 8, !dbg !5063
  %11 = bitcast %struct.basic_block_def* %10 to i8*, !dbg !5063
  call void @gt_ggc_mx_basic_block_def(i8* %11), !dbg !5063
  br label %if.end, !dbg !5063

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !5066

do.end:                                           ; preds = %if.end
  br label %do.body6, !dbg !5067

do.body6:                                         ; preds = %do.end
  %12 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5068
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %12, i32 0, i32 1, !dbg !5068
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5068
  %cmp7 = icmp ne %union.tree_node* %13, null, !dbg !5068
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !5071

if.then8:                                         ; preds = %do.body6
  %14 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5068
  %var9 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %14, i32 0, i32 1, !dbg !5068
  %15 = load %union.tree_node*, %union.tree_node** %var9, align 8, !dbg !5068
  %16 = bitcast %union.tree_node* %15 to i8*, !dbg !5068
  call void @gt_ggc_mx_lang_tree_node(i8* %16), !dbg !5068
  br label %if.end10, !dbg !5068

if.end10:                                         ; preds = %if.then8, %do.body6
  br label %do.end11, !dbg !5071

do.end11:                                         ; preds = %if.end10
  br label %do.body12, !dbg !5072

do.body12:                                        ; preds = %do.end11
  %17 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5073
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %17, i32 0, i32 2, !dbg !5073
  %18 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !5073
  %cmp13 = icmp ne %union.tree_node* %18, null, !dbg !5073
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !5076

if.then14:                                        ; preds = %do.body12
  %19 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5073
  %chrec15 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %19, i32 0, i32 2, !dbg !5073
  %20 = load %union.tree_node*, %union.tree_node** %chrec15, align 8, !dbg !5073
  %21 = bitcast %union.tree_node* %20 to i8*, !dbg !5073
  call void @gt_ggc_mx_lang_tree_node(i8* %21), !dbg !5073
  br label %if.end16, !dbg !5073

if.end16:                                         ; preds = %if.then14, %do.body12
  br label %do.end17, !dbg !5076

do.end17:                                         ; preds = %if.end16
  br label %if.end18, !dbg !5077

if.end18:                                         ; preds = %do.end17, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !5078
}

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_ggc_mx_basic_block_def(i8*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_m_P13scev_info_str4htab(i8* %x_p) #0 !dbg !5079 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5080, metadata !DIExpression()), !dbg !5081
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !5082, metadata !DIExpression()), !dbg !5084
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5085
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !5086
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !5084
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5087
  %cmp = icmp ne %struct.htab* %2, null, !dbg !5087
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !5087

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5087
  %4 = bitcast %struct.htab* %3 to i8*, !dbg !5087
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !5087
  br i1 %cmp1, label %land.lhs.true2, label %if.end21, !dbg !5087

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5087
  %6 = bitcast %struct.htab* %5 to i8*, !dbg !5087
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !5087
  %tobool = icmp ne i32 %call, 0, !dbg !5087
  br i1 %tobool, label %if.end21, label %if.then, !dbg !5089

if.then:                                          ; preds = %land.lhs.true2
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5090
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !5093
  %8 = load i8**, i8*** %entries, align 8, !dbg !5093
  %cmp3 = icmp ne i8** %8, null, !dbg !5094
  br i1 %cmp3, label %if.then4, label %if.end20, !dbg !5095

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !5096, metadata !DIExpression()), !dbg !5098
  store i64 0, i64* %i0, align 8, !dbg !5099
  br label %for.cond, !dbg !5101

for.cond:                                         ; preds = %for.inc, %if.then4
  %9 = load i64, i64* %i0, align 8, !dbg !5102
  %10 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5104
  %size = getelementptr inbounds %struct.htab, %struct.htab* %10, i32 0, i32 4, !dbg !5105
  %11 = load i64, i64* %size, align 8, !dbg !5105
  %cmp5 = icmp ne i64 %9, %11, !dbg !5106
  br i1 %cmp5, label %for.body, label %for.end, !dbg !5107

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !5108

do.body:                                          ; preds = %for.body
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5110
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !5110
  %13 = load i8**, i8*** %entries6, align 8, !dbg !5110
  %14 = load i64, i64* %i0, align 8, !dbg !5110
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !5110
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !5110
  %cmp7 = icmp ne i8* %15, null, !dbg !5110
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !5113

if.then8:                                         ; preds = %do.body
  %16 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5110
  %entries9 = getelementptr inbounds %struct.htab, %struct.htab* %16, i32 0, i32 3, !dbg !5110
  %17 = load i8**, i8*** %entries9, align 8, !dbg !5110
  %18 = load i64, i64* %i0, align 8, !dbg !5110
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i64 %18, !dbg !5110
  %19 = load i8*, i8** %arrayidx10, align 8, !dbg !5110
  call void @gt_ggc_mx_scev_info_str(i8* %19), !dbg !5110
  br label %if.end, !dbg !5110

if.end:                                           ; preds = %if.then8, %do.body
  br label %do.end, !dbg !5113

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !5114

for.inc:                                          ; preds = %do.end
  %20 = load i64, i64* %i0, align 8, !dbg !5115
  %inc = add i64 %20, 1, !dbg !5115
  store i64 %inc, i64* %i0, align 8, !dbg !5115
  br label %for.cond, !dbg !5116, !llvm.loop !5117

for.end:                                          ; preds = %for.cond
  br label %do.body11, !dbg !5119

do.body11:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !5120, metadata !DIExpression()), !dbg !5123
  %21 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5123
  %entries12 = getelementptr inbounds %struct.htab, %struct.htab* %21, i32 0, i32 3, !dbg !5123
  %22 = load i8**, i8*** %entries12, align 8, !dbg !5123
  %23 = bitcast i8** %22 to i8*, !dbg !5123
  store i8* %23, i8** %a__, align 8, !dbg !5123
  %24 = load i8*, i8** %a__, align 8, !dbg !5124
  %cmp13 = icmp ne i8* %24, null, !dbg !5124
  br i1 %cmp13, label %land.lhs.true14, label %if.end18, !dbg !5124

land.lhs.true14:                                  ; preds = %do.body11
  %25 = load i8*, i8** %a__, align 8, !dbg !5124
  %cmp15 = icmp ne i8* %25, inttoptr (i64 1 to i8*), !dbg !5124
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !5123

if.then16:                                        ; preds = %land.lhs.true14
  %26 = load i8*, i8** %a__, align 8, !dbg !5124
  %call17 = call i32 @ggc_set_mark(i8* %26), !dbg !5124
  br label %if.end18, !dbg !5124

if.end18:                                         ; preds = %if.then16, %land.lhs.true14, %do.body11
  br label %do.end19, !dbg !5123

do.end19:                                         ; preds = %if.end18
  br label %if.end20, !dbg !5126

if.end20:                                         ; preds = %do.end19, %if.then
  br label %if.end21, !dbg !5127

if.end21:                                         ; preds = %if.end20, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !5128
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_scev_info_str(i8* %x_p) #0 !dbg !5129 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.scev_info_str*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5130, metadata !DIExpression()), !dbg !5131
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %x, metadata !5132, metadata !DIExpression()), !dbg !5133
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5134
  %1 = bitcast i8* %0 to %struct.scev_info_str*, !dbg !5135
  store %struct.scev_info_str* %1, %struct.scev_info_str** %x, align 8, !dbg !5133
  %2 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5136
  %3 = bitcast %struct.scev_info_str* %2 to i8*, !dbg !5136
  %4 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5138
  %5 = bitcast %struct.scev_info_str* %4 to i8*, !dbg !5138
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_13scev_info_str, i32 57), !dbg !5139
  %tobool = icmp ne i32 %call, 0, !dbg !5139
  br i1 %tobool, label %if.then, label %if.end15, !dbg !5140

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !5141

do.body:                                          ; preds = %if.then
  %6 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5143
  %instantiated_below = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %6, i32 0, i32 0, !dbg !5143
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below, align 8, !dbg !5143
  %cmp = icmp ne %struct.basic_block_def* %7, null, !dbg !5143
  br i1 %cmp, label %if.then1, label %if.end, !dbg !5146

if.then1:                                         ; preds = %do.body
  %8 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5143
  %instantiated_below2 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %8, i32 0, i32 0, !dbg !5143
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below2, align 8, !dbg !5143
  %10 = bitcast %struct.basic_block_def* %9 to i8*, !dbg !5143
  call void @gt_pch_nx_basic_block_def(i8* %10), !dbg !5143
  br label %if.end, !dbg !5143

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !5146

do.end:                                           ; preds = %if.end
  br label %do.body3, !dbg !5147

do.body3:                                         ; preds = %do.end
  %11 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5148
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %11, i32 0, i32 1, !dbg !5148
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5148
  %cmp4 = icmp ne %union.tree_node* %12, null, !dbg !5148
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !5151

if.then5:                                         ; preds = %do.body3
  %13 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5148
  %var6 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %13, i32 0, i32 1, !dbg !5148
  %14 = load %union.tree_node*, %union.tree_node** %var6, align 8, !dbg !5148
  %15 = bitcast %union.tree_node* %14 to i8*, !dbg !5148
  call void @gt_pch_nx_lang_tree_node(i8* %15), !dbg !5148
  br label %if.end7, !dbg !5148

if.end7:                                          ; preds = %if.then5, %do.body3
  br label %do.end8, !dbg !5151

do.end8:                                          ; preds = %if.end7
  br label %do.body9, !dbg !5152

do.body9:                                         ; preds = %do.end8
  %16 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5153
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %16, i32 0, i32 2, !dbg !5153
  %17 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !5153
  %cmp10 = icmp ne %union.tree_node* %17, null, !dbg !5153
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !5156

if.then11:                                        ; preds = %do.body9
  %18 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5153
  %chrec12 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %18, i32 0, i32 2, !dbg !5153
  %19 = load %union.tree_node*, %union.tree_node** %chrec12, align 8, !dbg !5153
  %20 = bitcast %union.tree_node* %19 to i8*, !dbg !5153
  call void @gt_pch_nx_lang_tree_node(i8* %20), !dbg !5153
  br label %if.end13, !dbg !5153

if.end13:                                         ; preds = %if.then11, %do.body9
  br label %do.end14, !dbg !5156

do.end14:                                         ; preds = %if.end13
  br label %if.end15, !dbg !5157

if.end15:                                         ; preds = %do.end14, %entry
  ret void, !dbg !5158
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_13scev_info_str(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !5159 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.scev_info_str*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !5163, metadata !DIExpression()), !dbg !5164
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5165, metadata !DIExpression()), !dbg !5166
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !5167, metadata !DIExpression()), !dbg !5168
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !5169, metadata !DIExpression()), !dbg !5170
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %x, metadata !5171, metadata !DIExpression()), !dbg !5172
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5173
  %1 = bitcast i8* %0 to %struct.scev_info_str*, !dbg !5174
  store %struct.scev_info_str* %1, %struct.scev_info_str** %x, align 8, !dbg !5172
  %2 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5175
  %3 = bitcast %struct.scev_info_str* %2 to i8*, !dbg !5177
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !5178
  %cmp = icmp eq i8* %3, %4, !dbg !5179
  br i1 %cmp, label %if.then, label %if.end, !dbg !5180

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !5181
  %6 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5182
  %instantiated_below = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %6, i32 0, i32 0, !dbg !5183
  %7 = bitcast %struct.basic_block_def** %instantiated_below to i8*, !dbg !5184
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !5185
  call void %5(i8* %7, i8* %8), !dbg !5181
  br label %if.end, !dbg !5181

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5186
  %10 = bitcast %struct.scev_info_str* %9 to i8*, !dbg !5188
  %11 = load i8*, i8** %this_obj.addr, align 8, !dbg !5189
  %cmp1 = icmp eq i8* %10, %11, !dbg !5190
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !5191

if.then2:                                         ; preds = %if.end
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !5192
  %13 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5193
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %13, i32 0, i32 1, !dbg !5194
  %14 = bitcast %union.tree_node** %var to i8*, !dbg !5195
  %15 = load i8*, i8** %cookie.addr, align 8, !dbg !5196
  call void %12(i8* %14, i8* %15), !dbg !5192
  br label %if.end3, !dbg !5192

if.end3:                                          ; preds = %if.then2, %if.end
  %16 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5197
  %17 = bitcast %struct.scev_info_str* %16 to i8*, !dbg !5199
  %18 = load i8*, i8** %this_obj.addr, align 8, !dbg !5200
  %cmp4 = icmp eq i8* %17, %18, !dbg !5201
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !5202

if.then5:                                         ; preds = %if.end3
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !5203
  %20 = load %struct.scev_info_str*, %struct.scev_info_str** %x, align 8, !dbg !5204
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %20, i32 0, i32 2, !dbg !5205
  %21 = bitcast %union.tree_node** %chrec to i8*, !dbg !5206
  %22 = load i8*, i8** %cookie.addr, align 8, !dbg !5207
  call void %19(i8* %21, i8* %22), !dbg !5203
  br label %if.end6, !dbg !5203

if.end6:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !5208
}

declare dso_local void @gt_pch_nx_basic_block_def(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_n_P13scev_info_str4htab(i8* %x_p) #0 !dbg !5209 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5214
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !5215
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !5213
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5216
  %3 = bitcast %struct.htab* %2 to i8*, !dbg !5216
  %4 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5218
  %5 = bitcast %struct.htab* %4 to i8*, !dbg !5218
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P13scev_info_str4htab, i32 190), !dbg !5219
  %tobool = icmp ne i32 %call, 0, !dbg !5219
  br i1 %tobool, label %if.then, label %if.end11, !dbg !5220

if.then:                                          ; preds = %entry
  %6 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5221
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %6, i32 0, i32 3, !dbg !5224
  %7 = load i8**, i8*** %entries, align 8, !dbg !5224
  %cmp = icmp ne i8** %7, null, !dbg !5225
  br i1 %cmp, label %if.then1, label %if.end10, !dbg !5226

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !5227, metadata !DIExpression()), !dbg !5229
  store i64 0, i64* %i0, align 8, !dbg !5230
  br label %for.cond, !dbg !5232

for.cond:                                         ; preds = %for.inc, %if.then1
  %8 = load i64, i64* %i0, align 8, !dbg !5233
  %9 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5235
  %size = getelementptr inbounds %struct.htab, %struct.htab* %9, i32 0, i32 4, !dbg !5236
  %10 = load i64, i64* %size, align 8, !dbg !5236
  %cmp2 = icmp ne i64 %8, %10, !dbg !5237
  br i1 %cmp2, label %for.body, label %for.end, !dbg !5238

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !5239

do.body:                                          ; preds = %for.body
  %11 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5241
  %entries3 = getelementptr inbounds %struct.htab, %struct.htab* %11, i32 0, i32 3, !dbg !5241
  %12 = load i8**, i8*** %entries3, align 8, !dbg !5241
  %13 = load i64, i64* %i0, align 8, !dbg !5241
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !5241
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !5241
  %cmp4 = icmp ne i8* %14, null, !dbg !5241
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !5244

if.then5:                                         ; preds = %do.body
  %15 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5241
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %15, i32 0, i32 3, !dbg !5241
  %16 = load i8**, i8*** %entries6, align 8, !dbg !5241
  %17 = load i64, i64* %i0, align 8, !dbg !5241
  %arrayidx7 = getelementptr inbounds i8*, i8** %16, i64 %17, !dbg !5241
  %18 = load i8*, i8** %arrayidx7, align 8, !dbg !5241
  call void @gt_pch_nx_scev_info_str(i8* %18), !dbg !5241
  br label %if.end, !dbg !5241

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !5244

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !5245

for.inc:                                          ; preds = %do.end
  %19 = load i64, i64* %i0, align 8, !dbg !5246
  %inc = add i64 %19, 1, !dbg !5246
  store i64 %inc, i64* %i0, align 8, !dbg !5246
  br label %for.cond, !dbg !5247, !llvm.loop !5248

for.end:                                          ; preds = %for.cond
  %20 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5250
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %20, i32 0, i32 3, !dbg !5251
  %21 = load i8**, i8*** %entries8, align 8, !dbg !5251
  %22 = bitcast i8** %21 to i8*, !dbg !5252
  %23 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5253
  %24 = bitcast %struct.htab* %23 to i8*, !dbg !5253
  %call9 = call i32 @gt_pch_note_object(i8* %22, i8* %24, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P13scev_info_str4htab, i32 217), !dbg !5254
  br label %if.end10, !dbg !5255

if.end10:                                         ; preds = %for.end, %if.then
  br label %if.end11, !dbg !5256

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !5257
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_P13scev_info_str4htab(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !5258 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !5259, metadata !DIExpression()), !dbg !5260
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5261, metadata !DIExpression()), !dbg !5262
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !5263, metadata !DIExpression()), !dbg !5264
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !5265, metadata !DIExpression()), !dbg !5266
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !5267, metadata !DIExpression()), !dbg !5268
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5269
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !5270
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !5268
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5271
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !5273
  %3 = load i8**, i8*** %entries, align 8, !dbg !5273
  %cmp = icmp ne i8** %3, null, !dbg !5274
  br i1 %cmp, label %if.then, label %if.end10, !dbg !5275

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !5276, metadata !DIExpression()), !dbg !5278
  store i64 0, i64* %i0, align 8, !dbg !5279
  br label %for.cond, !dbg !5281

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i64, i64* %i0, align 8, !dbg !5282
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5284
  %size = getelementptr inbounds %struct.htab, %struct.htab* %5, i32 0, i32 4, !dbg !5285
  %6 = load i64, i64* %size, align 8, !dbg !5285
  %cmp1 = icmp ne i64 %4, %6, !dbg !5286
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5287

for.body:                                         ; preds = %for.cond
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5288
  %entries2 = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !5291
  %8 = load i8**, i8*** %entries2, align 8, !dbg !5291
  %9 = bitcast i8** %8 to i8*, !dbg !5292
  %10 = load i8*, i8** %this_obj.addr, align 8, !dbg !5293
  %cmp3 = icmp eq i8* %9, %10, !dbg !5294
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !5295

if.then4:                                         ; preds = %for.body
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !5296
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5297
  %entries5 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !5298
  %13 = load i8**, i8*** %entries5, align 8, !dbg !5298
  %14 = load i64, i64* %i0, align 8, !dbg !5299
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !5300
  %15 = bitcast i8** %arrayidx to i8*, !dbg !5301
  %16 = load i8*, i8** %cookie.addr, align 8, !dbg !5302
  call void %11(i8* %15, i8* %16), !dbg !5296
  br label %if.end, !dbg !5296

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !5303

for.inc:                                          ; preds = %if.end
  %17 = load i64, i64* %i0, align 8, !dbg !5304
  %inc = add i64 %17, 1, !dbg !5304
  store i64 %inc, i64* %i0, align 8, !dbg !5304
  br label %for.cond, !dbg !5305, !llvm.loop !5306

for.end:                                          ; preds = %for.cond
  %18 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5308
  %19 = bitcast %struct.htab* %18 to i8*, !dbg !5310
  %20 = load i8*, i8** %this_obj.addr, align 8, !dbg !5311
  %cmp6 = icmp eq i8* %19, %20, !dbg !5312
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !5313

if.then7:                                         ; preds = %for.end
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !5314
  %22 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !5315
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %22, i32 0, i32 3, !dbg !5316
  %23 = bitcast i8*** %entries8 to i8*, !dbg !5317
  %24 = load i8*, i8** %cookie.addr, align 8, !dbg !5318
  call void %21(i8* %23, i8* %24), !dbg !5314
  br label %if.end9, !dbg !5314

if.end9:                                          ; preds = %if.then7, %for.end
  br label %if.end10, !dbg !5319

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !5320
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5321 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5324, metadata !DIExpression()), !dbg !5325
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5326
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5327
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5328
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5328
  ret %struct.basic_block_def* %1, !dbg !5329
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !5330 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5335, metadata !DIExpression()), !dbg !5336
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5337, metadata !DIExpression()), !dbg !5336
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5336
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5336
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5336

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5336
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5336
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5336
  %3 = load i32, i32* %num, align 8, !dbg !5336
  %cmp = icmp ult i32 %1, %3, !dbg !5336
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5338
  %land.ext = zext i1 %4 to i32, !dbg !5336
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5336
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !5336
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5336
  %idxprom = zext i32 %6 to i64, !dbg !5336
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5336
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5336
  ret %struct.loop* %7, !dbg !5336
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local %union.tree_node* @hide_evolution_in_other_loops_than_loop(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_is_chrec(%union.tree_node* %expr) #0 !dbg !5339 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5340, metadata !DIExpression()), !dbg !5341
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5342
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5342
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5342
  %bf.load = load i64, i64* %1, align 8, !dbg !5342
  %bf.clear = and i64 %bf.load, 65535, !dbg !5342
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5342
  %cmp = icmp eq i32 %bf.cast, 146, !dbg !5344
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5345

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5346
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %2), !dbg !5347
  %conv = zext i8 %call to i32, !dbg !5347
  %tobool = icmp ne i32 %conv, 0, !dbg !5347
  br i1 %tobool, label %if.then, label %if.else, !dbg !5348

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !5349
  br label %return, !dbg !5349

if.else:                                          ; preds = %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !5350
  br label %return, !dbg !5350

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !5351
  ret i8 %3, !dbg !5351
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %chrec) #0 !dbg !5352 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !5353, metadata !DIExpression()), !dbg !5354
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5355
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5356
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !5357
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5358

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5359
  %3 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !5360
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !5361
  br label %lor.end, !dbg !5358

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !5358
  %conv = trunc i32 %lor.ext to i8, !dbg !5362
  ret i8 %conv, !dbg !5363
}

declare dso_local zeroext i8 @evolution_function_is_invariant_p(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @find_var_scev_info(%struct.basic_block_def* %instantiated_below, %union.tree_node* %var) #0 !dbg !5364 {
entry:
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %res = alloca %struct.scev_info_str*, align 8
  %tmp = alloca %struct.scev_info_str, align 8
  %slot = alloca i8**, align 8
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !5367, metadata !DIExpression()), !dbg !5368
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5369, metadata !DIExpression()), !dbg !5370
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %res, metadata !5371, metadata !DIExpression()), !dbg !5372
  call void @llvm.dbg.declare(metadata %struct.scev_info_str* %tmp, metadata !5373, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5375, metadata !DIExpression()), !dbg !5376
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5377
  %var1 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %tmp, i32 0, i32 1, !dbg !5378
  store %union.tree_node* %0, %union.tree_node** %var1, align 8, !dbg !5379
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !5380
  %instantiated_below2 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %tmp, i32 0, i32 0, !dbg !5381
  store %struct.basic_block_def* %1, %struct.basic_block_def** %instantiated_below2, align 8, !dbg !5382
  %2 = load %struct.htab*, %struct.htab** @scalar_evolution_info, align 8, !dbg !5383
  %3 = bitcast %struct.scev_info_str* %tmp to i8*, !dbg !5384
  %call = call i8** @htab_find_slot(%struct.htab* %2, i8* %3, i32 1), !dbg !5385
  store i8** %call, i8*** %slot, align 8, !dbg !5386
  %4 = load i8**, i8*** %slot, align 8, !dbg !5387
  %5 = load i8*, i8** %4, align 8, !dbg !5389
  %tobool = icmp ne i8* %5, null, !dbg !5389
  br i1 %tobool, label %if.end, label %if.then, !dbg !5390

if.then:                                          ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !5391
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5392
  %call3 = call %struct.scev_info_str* @new_scev_info_str(%struct.basic_block_def* %6, %union.tree_node* %7), !dbg !5393
  %8 = bitcast %struct.scev_info_str* %call3 to i8*, !dbg !5393
  %9 = load i8**, i8*** %slot, align 8, !dbg !5394
  store i8* %8, i8** %9, align 8, !dbg !5395
  br label %if.end, !dbg !5396

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8**, i8*** %slot, align 8, !dbg !5397
  %11 = load i8*, i8** %10, align 8, !dbg !5398
  %12 = bitcast i8* %11 to %struct.scev_info_str*, !dbg !5399
  store %struct.scev_info_str* %12, %struct.scev_info_str** %res, align 8, !dbg !5400
  %13 = load %struct.scev_info_str*, %struct.scev_info_str** %res, align 8, !dbg !5401
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %13, i32 0, i32 2, !dbg !5402
  ret %union.tree_node** %chrec, !dbg !5403
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.scev_info_str* @new_scev_info_str(%struct.basic_block_def* %instantiated_below, %union.tree_node* %var) #0 !dbg !5404 {
entry:
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %res = alloca %struct.scev_info_str*, align 8
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !5407, metadata !DIExpression()), !dbg !5408
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5409, metadata !DIExpression()), !dbg !5410
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %res, metadata !5411, metadata !DIExpression()), !dbg !5412
  %call = call i8* @ggc_alloc_stat(i64 24), !dbg !5413
  %0 = bitcast i8* %call to %struct.scev_info_str*, !dbg !5413
  store %struct.scev_info_str* %0, %struct.scev_info_str** %res, align 8, !dbg !5414
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5415
  %2 = load %struct.scev_info_str*, %struct.scev_info_str** %res, align 8, !dbg !5416
  %var1 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %2, i32 0, i32 1, !dbg !5417
  store %union.tree_node* %1, %union.tree_node** %var1, align 8, !dbg !5418
  %3 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !5419
  %4 = load %struct.scev_info_str*, %struct.scev_info_str** %res, align 8, !dbg !5420
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %4, i32 0, i32 2, !dbg !5421
  store %union.tree_node* %3, %union.tree_node** %chrec, align 8, !dbg !5422
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !5423
  %6 = load %struct.scev_info_str*, %struct.scev_info_str** %res, align 8, !dbg !5424
  %instantiated_below2 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %6, i32 0, i32 0, !dbg !5425
  store %struct.basic_block_def* %5, %struct.basic_block_def** %instantiated_below2, align 8, !dbg !5426
  %7 = load %struct.scev_info_str*, %struct.scev_info_str** %res, align 8, !dbg !5427
  ret %struct.scev_info_str* %7, !dbg !5428
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @interpret_expr(%struct.loop* %loop, %union.gimple_statement_d* %at_stmt, %union.tree_node* %expr) #0 !dbg !5429 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5432, metadata !DIExpression()), !dbg !5433
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !5434, metadata !DIExpression()), !dbg !5435
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5436, metadata !DIExpression()), !dbg !5437
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5438, metadata !DIExpression()), !dbg !5439
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5440, metadata !DIExpression()), !dbg !5441
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5442
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5442
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5442
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5442
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !5441
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5443, metadata !DIExpression()), !dbg !5444
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5445, metadata !DIExpression()), !dbg !5446
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5447
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %2), !dbg !5449
  %tobool = icmp ne i8 %call, 0, !dbg !5449
  br i1 %tobool, label %if.then, label %if.end, !dbg !5450

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5451
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5452
  br label %return, !dbg !5452

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5453
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5453
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5453
  %bf.load = load i64, i64* %5, align 8, !dbg !5453
  %bf.clear = and i64 %bf.load, 65535, !dbg !5453
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5453
  %cmp = icmp eq i32 %bf.cast, 146, !dbg !5455
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !5456

if.then2:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5457
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !5458
  br label %return, !dbg !5458

if.end3:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5459
  call void @extract_ops_from_tree(%union.tree_node* %7, i32* %code, %union.tree_node** %op0, %union.tree_node** %op1), !dbg !5460
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5461
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5462
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5463
  %11 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5464
  %12 = load i32, i32* %code, align 4, !dbg !5465
  %13 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5466
  %call4 = call %union.tree_node* @interpret_rhs_expr(%struct.loop* %8, %union.gimple_statement_d* %9, %union.tree_node* %10, %union.tree_node* %11, i32 %12, %union.tree_node* %13), !dbg !5467
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !5468
  br label %return, !dbg !5468

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5469
  ret %union.tree_node* %14, !dbg !5469
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compute_scalar_evolution_in_loop(%struct.loop* %wrto_loop, %struct.loop* %def_loop, %union.tree_node* %ev) #0 !dbg !5470 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %wrto_loop.addr = alloca %struct.loop*, align 8
  %def_loop.addr = alloca %struct.loop*, align 8
  %ev.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.loop* %wrto_loop, %struct.loop** %wrto_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %wrto_loop.addr, metadata !5473, metadata !DIExpression()), !dbg !5474
  store %struct.loop* %def_loop, %struct.loop** %def_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop.addr, metadata !5475, metadata !DIExpression()), !dbg !5476
  store %union.tree_node* %ev, %union.tree_node** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev.addr, metadata !5477, metadata !DIExpression()), !dbg !5478
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5479, metadata !DIExpression()), !dbg !5480
  %0 = load %struct.loop*, %struct.loop** %def_loop.addr, align 8, !dbg !5481
  %1 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !5483
  %cmp = icmp eq %struct.loop* %0, %1, !dbg !5484
  br i1 %cmp, label %if.then, label %if.end, !dbg !5485

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %ev.addr, align 8, !dbg !5486
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5487
  br label %return, !dbg !5487

if.end:                                           ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %def_loop.addr, align 8, !dbg !5488
  %4 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !5489
  %call = call i32 @loop_depth(%struct.loop* %4), !dbg !5490
  %add = add i32 %call, 1, !dbg !5491
  %call1 = call %struct.loop* @superloop_at_depth(%struct.loop* %3, i32 %add), !dbg !5492
  store %struct.loop* %call1, %struct.loop** %def_loop.addr, align 8, !dbg !5493
  %5 = load %struct.loop*, %struct.loop** %def_loop.addr, align 8, !dbg !5494
  %6 = load %union.tree_node*, %union.tree_node** %ev.addr, align 8, !dbg !5495
  %call2 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %5, %union.tree_node* %6), !dbg !5496
  store %union.tree_node* %call2, %union.tree_node** %res, align 8, !dbg !5497
  %7 = load %struct.loop*, %struct.loop** %wrto_loop.addr, align 8, !dbg !5498
  %8 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5499
  %9 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !5500
  %call3 = call %union.tree_node* @analyze_scalar_evolution_1(%struct.loop* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !5501
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !5502
  br label %return, !dbg !5502

return:                                           ; preds = %if.end, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5503
  ret %union.tree_node* %10, !dbg !5503
}

declare dso_local %struct.loop* @find_common_loop(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @interpret_gimple_assign(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !5504 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5507, metadata !DIExpression()), !dbg !5508
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5511, metadata !DIExpression()), !dbg !5512
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5513
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !5513
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !5513
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5513
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5513
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !5512
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5514, metadata !DIExpression()), !dbg !5515
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5516
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !5517
  store i32 %call2, i32* %code, align 4, !dbg !5515
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5518
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5519
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5520
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5521
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !5522
  %7 = load i32, i32* %code, align 4, !dbg !5523
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5524
  %call4 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %8), !dbg !5525
  %call5 = call %union.tree_node* @interpret_rhs_expr(%struct.loop* %3, %union.gimple_statement_d* %4, %union.tree_node* %5, %union.tree_node* %call3, i32 %7, %union.tree_node* %call4), !dbg !5526
  ret %union.tree_node* %call5, !dbg !5527
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_phi_node_p(%union.gimple_statement_d* %phi) #0 !dbg !5528 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !5531, metadata !DIExpression()), !dbg !5532
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5533
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %0), !dbg !5534
  %header = getelementptr inbounds %struct.loop, %struct.loop* %call, i32 0, i32 2, !dbg !5535
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5535
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5536
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !5537
  %cmp = icmp eq %struct.basic_block_def* %1, %call1, !dbg !5538
  %conv = zext i1 %cmp to i32, !dbg !5538
  %conv2 = trunc i32 %conv to i8, !dbg !5534
  ret i8 %conv2, !dbg !5539
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @interpret_loop_phi(%struct.loop* %loop, %union.gimple_statement_d* %loop_phi_node) #0 !dbg !5540 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %loop_phi_node.addr = alloca %union.gimple_statement_d*, align 8
  %res = alloca %union.tree_node*, align 8
  %phi_loop = alloca %struct.loop*, align 8
  %init_cond = alloca %union.tree_node*, align 8
  %subloop = alloca %struct.loop*, align 8
  %evolution_fn = alloca %union.tree_node*, align 8
  %new_init = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5541, metadata !DIExpression()), !dbg !5542
  store %union.gimple_statement_d* %loop_phi_node, %union.gimple_statement_d** %loop_phi_node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %loop_phi_node.addr, metadata !5543, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5545, metadata !DIExpression()), !dbg !5546
  call void @llvm.dbg.declare(metadata %struct.loop** %phi_loop, metadata !5547, metadata !DIExpression()), !dbg !5548
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !5549
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %0), !dbg !5550
  store %struct.loop* %call, %struct.loop** %phi_loop, align 8, !dbg !5548
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_cond, metadata !5551, metadata !DIExpression()), !dbg !5552
  %1 = load %struct.loop*, %struct.loop** %phi_loop, align 8, !dbg !5553
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5555
  %cmp = icmp ne %struct.loop* %1, %2, !dbg !5556
  br i1 %cmp, label %if.then, label %if.end, !dbg !5557

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.loop** %subloop, metadata !5558, metadata !DIExpression()), !dbg !5560
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_fn, metadata !5561, metadata !DIExpression()), !dbg !5562
  %3 = load %struct.loop*, %struct.loop** %phi_loop, align 8, !dbg !5563
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !5564
  %call1 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %4), !dbg !5564
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call1), !dbg !5564
  %call3 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %3, %union.tree_node* %call2), !dbg !5565
  store %union.tree_node* %call3, %union.tree_node** %evolution_fn, align 8, !dbg !5562
  %5 = load %struct.loop*, %struct.loop** %phi_loop, align 8, !dbg !5566
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5567
  %call4 = call i32 @loop_depth(%struct.loop* %6), !dbg !5568
  %add = add i32 %call4, 1, !dbg !5569
  %call5 = call %struct.loop* @superloop_at_depth(%struct.loop* %5, i32 %add), !dbg !5570
  store %struct.loop* %call5, %struct.loop** %subloop, align 8, !dbg !5571
  %7 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !5572
  %8 = load %union.tree_node*, %union.tree_node** %evolution_fn, align 8, !dbg !5573
  %call6 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %7, %union.tree_node* %8), !dbg !5574
  store %union.tree_node* %call6, %union.tree_node** %res, align 8, !dbg !5575
  %9 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5576
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !5577
  br label %return, !dbg !5577

if.end:                                           ; preds = %entry
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !5578
  %call7 = call %union.tree_node* @analyze_initial_condition(%union.gimple_statement_d* %10), !dbg !5579
  store %union.tree_node* %call7, %union.tree_node** %init_cond, align 8, !dbg !5580
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !5581
  %12 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !5582
  %call8 = call %union.tree_node* @analyze_evolution_in_loop(%union.gimple_statement_d* %11, %union.tree_node* %12), !dbg !5583
  store %union.tree_node* %call8, %union.tree_node** %res, align 8, !dbg !5584
  %13 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5585
  %14 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5587
  %cmp9 = icmp ne %union.tree_node* %13, %14, !dbg !5588
  br i1 %cmp9, label %if.then10, label %if.end50, !dbg !5589

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_init, metadata !5590, metadata !DIExpression()), !dbg !5592
  %15 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5593
  store %union.tree_node* %15, %union.tree_node** %new_init, align 8, !dbg !5592
  %16 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5594
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5594
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !5594
  %bf.load = load i64, i64* %17, align 8, !dbg !5594
  %bf.clear = and i64 %bf.load, 65535, !dbg !5594
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5594
  %cmp11 = icmp eq i32 %bf.cast, 116, !dbg !5594
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false, !dbg !5594

lor.lhs.false:                                    ; preds = %if.then10
  %18 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5594
  %base12 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5594
  %19 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5594
  %bf.load13 = load i64, i64* %19, align 8, !dbg !5594
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5594
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5594
  %cmp16 = icmp eq i32 %bf.cast15, 113, !dbg !5594
  br i1 %cmp16, label %land.lhs.true, label %if.else, !dbg !5596

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then10
  %20 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5597
  %exp = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !5597
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5597
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5597
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5597
  %base17 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5597
  %22 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5597
  %bf.load18 = load i64, i64* %22, align 8, !dbg !5597
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !5597
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !5597
  %cmp21 = icmp eq i32 %bf.cast20, 146, !dbg !5598
  br i1 %cmp21, label %if.then22, label %if.else, !dbg !5599

if.then22:                                        ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5600
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5600
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5600
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5600
  %25 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5600
  %exp23 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !5600
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !5600
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !5600
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !5600
  %exp26 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !5600
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !5600
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 1, !dbg !5600
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !5600
  %call29 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* %27), !dbg !5600
  store %union.tree_node* %call29, %union.tree_node** %new_init, align 8, !dbg !5601
  br label %if.end40, !dbg !5602

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %28 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5603
  %base30 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5603
  %29 = bitcast %struct.tree_base* %base30 to i64*, !dbg !5603
  %bf.load31 = load i64, i64* %29, align 8, !dbg !5603
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !5603
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5603
  %cmp34 = icmp eq i32 %bf.cast33, 146, !dbg !5605
  br i1 %cmp34, label %if.then35, label %if.end39, !dbg !5606

if.then35:                                        ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5607
  %exp36 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !5607
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !5607
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 1, !dbg !5607
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !5607
  store %union.tree_node* %31, %union.tree_node** %new_init, align 8, !dbg !5608
  br label %if.end39, !dbg !5609

if.end39:                                         ; preds = %if.then35, %if.else
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then22
  %32 = load %union.tree_node*, %union.tree_node** %new_init, align 8, !dbg !5610
  %call41 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %32), !dbg !5610
  store %union.tree_node* %call41, %union.tree_node** %new_init, align 8, !dbg !5610
  %33 = load %union.tree_node*, %union.tree_node** %new_init, align 8, !dbg !5611
  %base42 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !5611
  %34 = bitcast %struct.tree_base* %base42 to i64*, !dbg !5611
  %bf.load43 = load i64, i64* %34, align 8, !dbg !5611
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !5611
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !5611
  %cmp46 = icmp ne i32 %bf.cast45, 146, !dbg !5611
  br i1 %cmp46, label %cond.false, label %cond.true, !dbg !5611

cond.true:                                        ; preds = %if.end40
  call void @fancy_abort(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 1657, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5611
  br label %cond.end, !dbg !5611

cond.false:                                       ; preds = %if.end40
  br label %cond.end, !dbg !5611

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5611
  %35 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !5612
  %36 = load %union.tree_node*, %union.tree_node** %new_init, align 8, !dbg !5614
  %call47 = call i32 @operand_equal_p(%union.tree_node* %35, %union.tree_node* %36, i32 0), !dbg !5615
  %tobool = icmp ne i32 %call47, 0, !dbg !5615
  br i1 %tobool, label %if.end49, label %if.then48, !dbg !5616

if.then48:                                        ; preds = %cond.end
  %37 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5617
  store %union.tree_node* %37, %union.tree_node** %retval, align 8, !dbg !5618
  br label %return, !dbg !5618

if.end49:                                         ; preds = %cond.end
  br label %if.end50, !dbg !5619

if.end50:                                         ; preds = %if.end49, %if.end
  %38 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5620
  store %union.tree_node* %38, %union.tree_node** %retval, align 8, !dbg !5621
  br label %return, !dbg !5621

return:                                           ; preds = %if.end50, %if.then48, %if.then
  %39 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5622
  ret %union.tree_node* %39, !dbg !5622
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @interpret_condition_phi(%struct.loop* %loop, %union.gimple_statement_d* %condition_phi) #0 !dbg !5623 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %condition_phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %res = alloca %union.tree_node*, align 8
  %branch_chrec = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5624, metadata !DIExpression()), !dbg !5625
  store %union.gimple_statement_d* %condition_phi, %union.gimple_statement_d** %condition_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %condition_phi.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5628, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5630, metadata !DIExpression()), !dbg !5631
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !5632
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !5633
  store i32 %call, i32* %n, align 4, !dbg !5631
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5634, metadata !DIExpression()), !dbg !5635
  %1 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !5636
  store %union.tree_node* %1, %union.tree_node** %res, align 8, !dbg !5635
  store i32 0, i32* %i, align 4, !dbg !5637
  br label %for.cond, !dbg !5639

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !5640
  %3 = load i32, i32* %n, align 4, !dbg !5642
  %cmp = icmp slt i32 %2, %3, !dbg !5643
  br i1 %cmp, label %for.body, label %for.end, !dbg !5644

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %branch_chrec, metadata !5645, metadata !DIExpression()), !dbg !5647
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !5648
  %5 = load i32, i32* %i, align 4, !dbg !5650
  %call1 = call zeroext i8 @backedge_phi_arg_p(%union.gimple_statement_d* %4, i32 %5), !dbg !5651
  %tobool = icmp ne i8 %call1, 0, !dbg !5651
  br i1 %tobool, label %if.then, label %if.end, !dbg !5652

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5653
  store %union.tree_node* %6, %union.tree_node** %res, align 8, !dbg !5655
  br label %for.end, !dbg !5656

if.end:                                           ; preds = %for.body
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5657
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !5658
  %9 = load i32, i32* %i, align 4, !dbg !5658
  %call2 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %8, i32 %9), !dbg !5658
  %call3 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call2), !dbg !5658
  %call4 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %7, %union.tree_node* %call3), !dbg !5659
  store %union.tree_node* %call4, %union.tree_node** %branch_chrec, align 8, !dbg !5660
  %10 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5661
  %11 = load %union.tree_node*, %union.tree_node** %branch_chrec, align 8, !dbg !5662
  %call5 = call %union.tree_node* @chrec_merge(%union.tree_node* %10, %union.tree_node* %11), !dbg !5663
  store %union.tree_node* %call5, %union.tree_node** %res, align 8, !dbg !5664
  br label %for.inc, !dbg !5665

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !5666
  %inc = add nsw i32 %12, 1, !dbg !5666
  store i32 %inc, i32* %i, align 4, !dbg !5666
  br label %for.cond, !dbg !5667, !llvm.loop !5668

for.end:                                          ; preds = %if.then, %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5670
  ret %union.tree_node* %13, !dbg !5671
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_scalar_evolution(%struct.basic_block_def* %instantiated_below, %union.tree_node* %scalar, %union.tree_node* %chrec) #0 !dbg !5672 {
entry:
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %scalar.addr = alloca %union.tree_node*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %scalar_info = alloca %union.tree_node**, align 8
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !5675, metadata !DIExpression()), !dbg !5676
  store %union.tree_node* %scalar, %union.tree_node** %scalar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar.addr, metadata !5677, metadata !DIExpression()), !dbg !5678
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !5679, metadata !DIExpression()), !dbg !5680
  call void @llvm.dbg.declare(metadata %union.tree_node*** %scalar_info, metadata !5681, metadata !DIExpression()), !dbg !5682
  %0 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !5683
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5683
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5683
  %bf.load = load i64, i64* %1, align 8, !dbg !5683
  %bf.clear = and i64 %bf.load, 65535, !dbg !5683
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5683
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5685
  br i1 %cmp, label %if.then, label %if.end, !dbg !5686

if.then:                                          ; preds = %entry
  br label %return, !dbg !5687

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !5688
  %3 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !5689
  %call = call %union.tree_node** @find_var_scev_info(%struct.basic_block_def* %2, %union.tree_node* %3), !dbg !5690
  store %union.tree_node** %call, %union.tree_node*** %scalar_info, align 8, !dbg !5691
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5692
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !5692
  br i1 %tobool, label %if.then1, label %if.end14, !dbg !5694

if.then1:                                         ; preds = %if.end
  %5 = load i32, i32* @dump_flags, align 4, !dbg !5695
  %and = and i32 %5, 8, !dbg !5698
  %tobool2 = icmp ne i32 %and, 0, !dbg !5698
  br i1 %tobool2, label %if.then3, label %if.end9, !dbg !5699

if.then3:                                         ; preds = %if.then1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5700
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0)), !dbg !5702
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5703
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !5704
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !5705
  %9 = load i32, i32* %index, align 8, !dbg !5705
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.28, i64 0, i64 0), i32 %9), !dbg !5706
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5707
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)), !dbg !5708
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5709
  %12 = load %union.tree_node*, %union.tree_node** %scalar.addr, align 8, !dbg !5710
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* %12, i32 0), !dbg !5711
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5712
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.29, i64 0, i64 0)), !dbg !5713
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5714
  %15 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5715
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %15, i32 0), !dbg !5716
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5717
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !5718
  br label %if.end9, !dbg !5719

if.end9:                                          ; preds = %if.then3, %if.then1
  %17 = load i32, i32* @dump_flags, align 4, !dbg !5720
  %and10 = and i32 %17, 16, !dbg !5722
  %tobool11 = icmp ne i32 %and10, 0, !dbg !5722
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5723

if.then12:                                        ; preds = %if.end9
  %18 = load i32, i32* @nb_set_scev, align 4, !dbg !5724
  %inc = add i32 %18, 1, !dbg !5724
  store i32 %inc, i32* @nb_set_scev, align 4, !dbg !5724
  br label %if.end13, !dbg !5725

if.end13:                                         ; preds = %if.then12, %if.end9
  br label %if.end14, !dbg !5726

if.end14:                                         ; preds = %if.end13, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5727
  %20 = load %union.tree_node**, %union.tree_node*** %scalar_info, align 8, !dbg !5728
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !dbg !5729
  br label %return, !dbg !5730

return:                                           ; preds = %if.end14, %if.then
  ret void, !dbg !5730
}

declare dso_local void @extract_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @interpret_rhs_expr(%struct.loop* %loop, %union.gimple_statement_d* %at_stmt, %union.tree_node* %type, %union.tree_node* %rhs1, i32 %code, %union.tree_node* %rhs2) #0 !dbg !5731 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %rhs1.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %rhs2.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %chrec1 = alloca %union.tree_node*, align 8
  %chrec2 = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5734, metadata !DIExpression()), !dbg !5735
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !5736, metadata !DIExpression()), !dbg !5737
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5738, metadata !DIExpression()), !dbg !5739
  store %union.tree_node* %rhs1, %union.tree_node** %rhs1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1.addr, metadata !5740, metadata !DIExpression()), !dbg !5741
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  store %union.tree_node* %rhs2, %union.tree_node** %rhs2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2.addr, metadata !5744, metadata !DIExpression()), !dbg !5745
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5746, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec1, metadata !5748, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec2, metadata !5750, metadata !DIExpression()), !dbg !5751
  %0 = load i32, i32* %code.addr, align 4, !dbg !5752
  %call = call i32 @get_gimple_rhs_class(i32 %0), !dbg !5754
  %cmp = icmp eq i32 %call, 3, !dbg !5755
  br i1 %cmp, label %if.then, label %if.end14, !dbg !5756

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5757
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1), !dbg !5760
  %tobool = icmp ne i8 %call1, 0, !dbg !5760
  br i1 %tobool, label %if.then2, label %if.end, !dbg !5761

if.then2:                                         ; preds = %if.then
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5762
  %3 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5763
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5764
  %call3 = call %union.tree_node* @chrec_convert(%union.tree_node* %2, %union.tree_node* %3, %union.gimple_statement_d* %4), !dbg !5765
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !5766
  br label %return, !dbg !5766

if.end:                                           ; preds = %if.then
  %5 = load i32, i32* %code.addr, align 4, !dbg !5767
  %cmp4 = icmp eq i32 %5, 141, !dbg !5769
  br i1 %cmp4, label %if.then5, label %if.end8, !dbg !5770

if.then5:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5771
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5772
  %8 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5773
  %call6 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %7, %union.tree_node* %8), !dbg !5774
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5775
  %call7 = call %union.tree_node* @chrec_convert(%union.tree_node* %6, %union.tree_node* %call6, %union.gimple_statement_d* %9), !dbg !5776
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !5777
  br label %return, !dbg !5777

if.end8:                                          ; preds = %if.end
  %10 = load i32, i32* %code.addr, align 4, !dbg !5778
  %cmp9 = icmp eq i32 %10, 148, !dbg !5780
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !5781

if.then10:                                        ; preds = %if.end8
  %11 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5782
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !5782
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5782
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5782
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5782
  store %union.tree_node* %12, %union.tree_node** %rhs1.addr, align 8, !dbg !5784
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5785
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5786
  %15 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5787
  %call11 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %14, %union.tree_node* %15), !dbg !5788
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5789
  %call12 = call %union.tree_node* @chrec_convert(%union.tree_node* %13, %union.tree_node* %call11, %union.gimple_statement_d* %16), !dbg !5790
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !5791
  br label %return, !dbg !5791

if.end13:                                         ; preds = %if.end8
  %17 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5792
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !5793
  br label %return, !dbg !5793

if.end14:                                         ; preds = %entry
  %18 = load i32, i32* %code.addr, align 4, !dbg !5794
  switch i32 %18, label %sw.default [
    i32 66, label %sw.bb
    i32 63, label %sw.bb20
    i32 64, label %sw.bb26
    i32 79, label %sw.bb32
    i32 90, label %sw.bb37
    i32 65, label %sw.bb42
    i32 116, label %sw.bb48
    i32 113, label %sw.bb48
  ], !dbg !5795

sw.bb:                                            ; preds = %if.end14
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5796
  %20 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5798
  %call15 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %19, %union.tree_node* %20), !dbg !5799
  store %union.tree_node* %call15, %union.tree_node** %chrec1, align 8, !dbg !5800
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5801
  %22 = load %union.tree_node*, %union.tree_node** %rhs2.addr, align 8, !dbg !5802
  %call16 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %21, %union.tree_node* %22), !dbg !5803
  store %union.tree_node* %call16, %union.tree_node** %chrec2, align 8, !dbg !5804
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5805
  %24 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5806
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5807
  %call17 = call %union.tree_node* @chrec_convert(%union.tree_node* %23, %union.tree_node* %24, %union.gimple_statement_d* %25), !dbg !5808
  store %union.tree_node* %call17, %union.tree_node** %chrec1, align 8, !dbg !5809
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5810
  %27 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5811
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5812
  %call18 = call %union.tree_node* @chrec_convert(%union.tree_node* %26, %union.tree_node* %27, %union.gimple_statement_d* %28), !dbg !5813
  store %union.tree_node* %call18, %union.tree_node** %chrec2, align 8, !dbg !5814
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5815
  %30 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5816
  %31 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5817
  %call19 = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !5818
  store %union.tree_node* %call19, %union.tree_node** %res, align 8, !dbg !5819
  br label %sw.epilog, !dbg !5820

sw.bb20:                                          ; preds = %if.end14
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5821
  %33 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5822
  %call21 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %32, %union.tree_node* %33), !dbg !5823
  store %union.tree_node* %call21, %union.tree_node** %chrec1, align 8, !dbg !5824
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5825
  %35 = load %union.tree_node*, %union.tree_node** %rhs2.addr, align 8, !dbg !5826
  %call22 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %34, %union.tree_node* %35), !dbg !5827
  store %union.tree_node* %call22, %union.tree_node** %chrec2, align 8, !dbg !5828
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5829
  %37 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5830
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5831
  %call23 = call %union.tree_node* @chrec_convert(%union.tree_node* %36, %union.tree_node* %37, %union.gimple_statement_d* %38), !dbg !5832
  store %union.tree_node* %call23, %union.tree_node** %chrec1, align 8, !dbg !5833
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5834
  %40 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5835
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5836
  %call24 = call %union.tree_node* @chrec_convert(%union.tree_node* %39, %union.tree_node* %40, %union.gimple_statement_d* %41), !dbg !5837
  store %union.tree_node* %call24, %union.tree_node** %chrec2, align 8, !dbg !5838
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5839
  %43 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5840
  %44 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5841
  %call25 = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %42, %union.tree_node* %43, %union.tree_node* %44), !dbg !5842
  store %union.tree_node* %call25, %union.tree_node** %res, align 8, !dbg !5843
  br label %sw.epilog, !dbg !5844

sw.bb26:                                          ; preds = %if.end14
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5845
  %46 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5846
  %call27 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %45, %union.tree_node* %46), !dbg !5847
  store %union.tree_node* %call27, %union.tree_node** %chrec1, align 8, !dbg !5848
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5849
  %48 = load %union.tree_node*, %union.tree_node** %rhs2.addr, align 8, !dbg !5850
  %call28 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %47, %union.tree_node* %48), !dbg !5851
  store %union.tree_node* %call28, %union.tree_node** %chrec2, align 8, !dbg !5852
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5853
  %50 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5854
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5855
  %call29 = call %union.tree_node* @chrec_convert(%union.tree_node* %49, %union.tree_node* %50, %union.gimple_statement_d* %51), !dbg !5856
  store %union.tree_node* %call29, %union.tree_node** %chrec1, align 8, !dbg !5857
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5858
  %53 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5859
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5860
  %call30 = call %union.tree_node* @chrec_convert(%union.tree_node* %52, %union.tree_node* %53, %union.gimple_statement_d* %54), !dbg !5861
  store %union.tree_node* %call30, %union.tree_node** %chrec2, align 8, !dbg !5862
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5863
  %56 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5864
  %57 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5865
  %call31 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %55, %union.tree_node* %56, %union.tree_node* %57), !dbg !5866
  store %union.tree_node* %call31, %union.tree_node** %res, align 8, !dbg !5867
  br label %sw.epilog, !dbg !5868

sw.bb32:                                          ; preds = %if.end14
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5869
  %59 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5870
  %call33 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %58, %union.tree_node* %59), !dbg !5871
  store %union.tree_node* %call33, %union.tree_node** %chrec1, align 8, !dbg !5872
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5873
  %61 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5874
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5875
  %call34 = call %union.tree_node* @chrec_convert(%union.tree_node* %60, %union.tree_node* %61, %union.gimple_statement_d* %62), !dbg !5876
  store %union.tree_node* %call34, %union.tree_node** %chrec1, align 8, !dbg !5877
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5878
  %64 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5879
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5880
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !5880
  %call35 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %65, %union.tree_node* %66), !dbg !5880
  %call36 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %63, %union.tree_node* %64, %union.tree_node* %call35), !dbg !5881
  store %union.tree_node* %call36, %union.tree_node** %res, align 8, !dbg !5882
  br label %sw.epilog, !dbg !5883

sw.bb37:                                          ; preds = %if.end14
  %67 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5884
  %68 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5885
  %call38 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %67, %union.tree_node* %68), !dbg !5886
  store %union.tree_node* %call38, %union.tree_node** %chrec1, align 8, !dbg !5887
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5888
  %70 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5889
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5890
  %call39 = call %union.tree_node* @chrec_convert(%union.tree_node* %69, %union.tree_node* %70, %union.gimple_statement_d* %71), !dbg !5891
  store %union.tree_node* %call39, %union.tree_node** %chrec1, align 8, !dbg !5892
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5893
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5894
  %74 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !5894
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %73, %union.tree_node* %74), !dbg !5894
  %75 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5895
  %call41 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %72, %union.tree_node* %call40, %union.tree_node* %75), !dbg !5896
  store %union.tree_node* %call41, %union.tree_node** %res, align 8, !dbg !5897
  br label %sw.epilog, !dbg !5898

sw.bb42:                                          ; preds = %if.end14
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5899
  %77 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5900
  %call43 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %76, %union.tree_node* %77), !dbg !5901
  store %union.tree_node* %call43, %union.tree_node** %chrec1, align 8, !dbg !5902
  %78 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5903
  %79 = load %union.tree_node*, %union.tree_node** %rhs2.addr, align 8, !dbg !5904
  %call44 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %78, %union.tree_node* %79), !dbg !5905
  store %union.tree_node* %call44, %union.tree_node** %chrec2, align 8, !dbg !5906
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5907
  %81 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5908
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5909
  %call45 = call %union.tree_node* @chrec_convert(%union.tree_node* %80, %union.tree_node* %81, %union.gimple_statement_d* %82), !dbg !5910
  store %union.tree_node* %call45, %union.tree_node** %chrec1, align 8, !dbg !5911
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5912
  %84 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5913
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5914
  %call46 = call %union.tree_node* @chrec_convert(%union.tree_node* %83, %union.tree_node* %84, %union.gimple_statement_d* %85), !dbg !5915
  store %union.tree_node* %call46, %union.tree_node** %chrec2, align 8, !dbg !5916
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5917
  %87 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5918
  %88 = load %union.tree_node*, %union.tree_node** %chrec2, align 8, !dbg !5919
  %call47 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %86, %union.tree_node* %87, %union.tree_node* %88), !dbg !5920
  store %union.tree_node* %call47, %union.tree_node** %res, align 8, !dbg !5921
  br label %sw.epilog, !dbg !5922

sw.bb48:                                          ; preds = %if.end14, %if.end14
  %89 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5923
  %90 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !5924
  %call49 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %89, %union.tree_node* %90), !dbg !5925
  store %union.tree_node* %call49, %union.tree_node** %chrec1, align 8, !dbg !5926
  %91 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5927
  %92 = load %union.tree_node*, %union.tree_node** %chrec1, align 8, !dbg !5928
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5929
  %call50 = call %union.tree_node* @chrec_convert(%union.tree_node* %91, %union.tree_node* %92, %union.gimple_statement_d* %93), !dbg !5930
  store %union.tree_node* %call50, %union.tree_node** %res, align 8, !dbg !5931
  br label %sw.epilog, !dbg !5932

sw.default:                                       ; preds = %if.end14
  %94 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5933
  store %union.tree_node* %94, %union.tree_node** %res, align 8, !dbg !5934
  br label %sw.epilog, !dbg !5935

sw.epilog:                                        ; preds = %sw.default, %sw.bb48, %sw.bb42, %sw.bb37, %sw.bb32, %sw.bb26, %sw.bb20, %sw.bb
  %95 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5936
  store %union.tree_node* %95, %union.tree_node** %retval, align 8, !dbg !5937
  br label %return, !dbg !5937

return:                                           ; preds = %sw.epilog, %if.end13, %if.then10, %if.then5, %if.then2
  %96 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5938
  ret %union.tree_node* %96, !dbg !5938
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !5939 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5942, metadata !DIExpression()), !dbg !5943
  %0 = load i32, i32* %code.addr, align 4, !dbg !5944
  %idxprom = sext i32 %0 to i64, !dbg !5945
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5945
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5945
  %conv = zext i8 %1 to i32, !dbg !5946
  ret i32 %conv, !dbg !5947
}

declare dso_local %union.tree_node* @chrec_convert(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @chrec_fold_minus(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @chrec_fold_multiply(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5948 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5951, metadata !DIExpression()), !dbg !5952
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5953
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5954
  ret %union.tree_node* %call, !dbg !5955
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !5956 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5961, metadata !DIExpression()), !dbg !5962
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5963
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !5964
  store i32 %call, i32* %code, align 4, !dbg !5965
  %1 = load i32, i32* %code, align 4, !dbg !5966
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !5968
  %cmp = icmp eq i32 %call1, 3, !dbg !5969
  br i1 %cmp, label %if.then, label %if.end, !dbg !5970

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5971
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5971
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5971
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5971
  %bf.load = load i64, i64* %3, align 8, !dbg !5971
  %bf.clear = and i64 %bf.load, 65535, !dbg !5971
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5971
  store i32 %bf.cast, i32* %code, align 4, !dbg !5972
  br label %if.end, !dbg !5973

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5974
  ret i32 %4, !dbg !5975
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5976 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5977, metadata !DIExpression()), !dbg !5978
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5979
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5980
  ret %union.tree_node* %call, !dbg !5981
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !5982 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5985
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5987
  %cmp = icmp uge i32 %call, 3, !dbg !5988
  br i1 %cmp, label %if.then, label %if.else, !dbg !5989

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5990
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !5991
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !5992
  br label %return, !dbg !5992

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5993
  br label %return, !dbg !5993

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5994
  ret %union.tree_node* %2, !dbg !5994
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5995 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6000, metadata !DIExpression()), !dbg !6001
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6002
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6004
  %tobool = icmp ne i8 %call, 0, !dbg !6004
  br i1 %tobool, label %if.then, label %if.else, !dbg !6005

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6006
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6008
  %2 = load i32, i32* %i.addr, align 4, !dbg !6009
  %idxprom = zext i32 %2 to i64, !dbg !6008
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6008
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6008
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6010
  br label %return, !dbg !6010

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6011
  br label %return, !dbg !6011

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6012
  ret %union.tree_node* %4, !dbg !6012
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6013 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6016, metadata !DIExpression()), !dbg !6017
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6018
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6019
  %cmp = icmp uge i32 %call, 1, !dbg !6020
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6021

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6022
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6023
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6024
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6025
  %land.ext = zext i1 %2 to i32, !dbg !6021
  %conv = trunc i32 %land.ext to i8, !dbg !6019
  ret i8 %conv, !dbg !6026
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6027 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6030, metadata !DIExpression()), !dbg !6031
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6032
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6033
  %idxprom = zext i32 %call to i64, !dbg !6034
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6034
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6034
  store i64 %1, i64* %off, align 8, !dbg !6035
  %2 = load i64, i64* %off, align 8, !dbg !6036
  %cmp = icmp ne i64 %2, 0, !dbg !6036
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6036

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6036
  br label %cond.end, !dbg !6036

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6036

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6036
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6037
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6038
  %5 = load i64, i64* %off, align 8, !dbg !6039
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6040
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6041
  ret %union.tree_node** %6, !dbg !6042
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6043 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6046, metadata !DIExpression()), !dbg !6047
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6048
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6049
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6050
  ret i32 %call1, !dbg !6051
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6052 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6055, metadata !DIExpression()), !dbg !6056
  %0 = load i32, i32* %code.addr, align 4, !dbg !6057
  %idxprom = zext i32 %0 to i64, !dbg !6058
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6058
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6058
  ret i32 %1, !dbg !6059
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6060 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6063, metadata !DIExpression()), !dbg !6064
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6065
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6066
  store i32 %call, i32* %code, align 4, !dbg !6064
  %1 = load i32, i32* %code, align 4, !dbg !6067
  %cmp = icmp eq i32 %1, 6, !dbg !6069
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6070

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6071
  %cmp1 = icmp eq i32 %2, 1, !dbg !6072
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6073

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6074
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6075
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6076
  %bf.load = load i32, i32* %4, align 8, !dbg !6076
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6076
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6077
  br label %return, !dbg !6077

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6078
  %cmp2 = icmp eq i32 %5, 8, !dbg !6080
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6081

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6082
  br label %return, !dbg !6082

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6083
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6084
  br label %return, !dbg !6084

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6085
  ret i32 %6, !dbg !6085
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6086 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6091
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6092
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6093
  %1 = load i32, i32* %num_ops, align 4, !dbg !6093
  ret i32 %1, !dbg !6094
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @analyze_initial_condition(%union.gimple_statement_d* %loop_phi_node) #0 !dbg !6095 {
entry:
  %loop_phi_node.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %init_cond = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %branch = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %res = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %loop_phi_node, %union.gimple_statement_d** %loop_phi_node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %loop_phi_node.addr, metadata !6098, metadata !DIExpression()), !dbg !6099
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6100, metadata !DIExpression()), !dbg !6101
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6102, metadata !DIExpression()), !dbg !6103
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_cond, metadata !6104, metadata !DIExpression()), !dbg !6105
  %0 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !6106
  store %union.tree_node* %0, %union.tree_node** %init_cond, align 8, !dbg !6105
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6107, metadata !DIExpression()), !dbg !6108
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6109
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %1), !dbg !6110
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !6108
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6111
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !6111
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6113

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !6114
  %and = and i32 %3, 8, !dbg !6115
  %tobool1 = icmp ne i32 %and, 0, !dbg !6115
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6116

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6117
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0)), !dbg !6119
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6120
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)), !dbg !6121
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6122
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6123
  call void @print_gimple_stmt(%struct._IO_FILE* %6, %union.gimple_statement_d* %7, i32 0, i32 0), !dbg !6124
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6125
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !6126
  br label %if.end, !dbg !6127

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6128
  %call5 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %9), !dbg !6129
  store i32 %call5, i32* %n, align 4, !dbg !6130
  store i32 0, i32* %i, align 4, !dbg !6131
  br label %for.cond, !dbg !6133

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !6134
  %11 = load i32, i32* %n, align 4, !dbg !6136
  %cmp = icmp slt i32 %10, %11, !dbg !6137
  br i1 %cmp, label %for.body, label %for.end, !dbg !6138

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %branch, metadata !6139, metadata !DIExpression()), !dbg !6141
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6142
  %13 = load i32, i32* %i, align 4, !dbg !6142
  %call6 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %12, i32 %13), !dbg !6142
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call6), !dbg !6142
  store %union.tree_node* %call7, %union.tree_node** %branch, align 8, !dbg !6141
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6143, metadata !DIExpression()), !dbg !6144
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6145
  %15 = load i32, i32* %i, align 4, !dbg !6146
  %conv = sext i32 %15 to i64, !dbg !6146
  %call8 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %14, i64 %conv), !dbg !6147
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 0, !dbg !6148
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6148
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !6144
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6149
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6151
  %call9 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %17, %struct.basic_block_def* %18), !dbg !6152
  %tobool10 = icmp ne i8 %call9, 0, !dbg !6152
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !6153

if.then11:                                        ; preds = %for.body
  br label %for.inc, !dbg !6154

if.end12:                                         ; preds = %for.body
  %19 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6155
  %20 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !6157
  %cmp13 = icmp eq %union.tree_node* %19, %20, !dbg !6158
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !6159

if.then15:                                        ; preds = %if.end12
  %21 = load %union.tree_node*, %union.tree_node** %branch, align 8, !dbg !6160
  store %union.tree_node* %21, %union.tree_node** %init_cond, align 8, !dbg !6162
  br label %for.inc, !dbg !6163

if.end16:                                         ; preds = %if.end12
  %22 = load %union.tree_node*, %union.tree_node** %branch, align 8, !dbg !6164
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6164
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !6164
  %bf.load = load i64, i64* %23, align 8, !dbg !6164
  %bf.clear = and i64 %bf.load, 65535, !dbg !6164
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6164
  %cmp17 = icmp eq i32 %bf.cast, 141, !dbg !6166
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !6167

if.then19:                                        ; preds = %if.end16
  %24 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6168
  store %union.tree_node* %24, %union.tree_node** %init_cond, align 8, !dbg !6170
  br label %for.end, !dbg !6171

if.end20:                                         ; preds = %if.end16
  %25 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6172
  %26 = load %union.tree_node*, %union.tree_node** %branch, align 8, !dbg !6173
  %call21 = call %union.tree_node* @chrec_merge(%union.tree_node* %25, %union.tree_node* %26), !dbg !6174
  store %union.tree_node* %call21, %union.tree_node** %init_cond, align 8, !dbg !6175
  br label %for.inc, !dbg !6176

for.inc:                                          ; preds = %if.end20, %if.then15, %if.then11
  %27 = load i32, i32* %i, align 4, !dbg !6177
  %inc = add nsw i32 %27, 1, !dbg !6177
  store i32 %inc, i32* %i, align 4, !dbg !6177
  br label %for.cond, !dbg !6178, !llvm.loop !6179

for.end:                                          ; preds = %if.then19, %for.cond
  %28 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6181
  %29 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !6183
  %cmp22 = icmp eq %union.tree_node* %28, %29, !dbg !6184
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !6185

if.then24:                                        ; preds = %for.end
  %30 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6186
  store %union.tree_node* %30, %union.tree_node** %init_cond, align 8, !dbg !6187
  br label %if.end25, !dbg !6188

if.end25:                                         ; preds = %if.then24, %for.end
  %31 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6189
  %base26 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6189
  %32 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6189
  %bf.load27 = load i64, i64* %32, align 8, !dbg !6189
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6189
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6189
  %cmp30 = icmp eq i32 %bf.cast29, 141, !dbg !6191
  br i1 %cmp30, label %if.then32, label %if.end46, !dbg !6192

if.then32:                                        ; preds = %if.end25
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !6193, metadata !DIExpression()), !dbg !6195
  %33 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6196
  %ssa_name = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !6196
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6196
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6196
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %def, align 8, !dbg !6195
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !6197, metadata !DIExpression()), !dbg !6198
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6199
  %call33 = call i32 @gimple_code(%union.gimple_statement_d* %35), !dbg !6201
  %cmp34 = icmp eq i32 %call33, 16, !dbg !6202
  br i1 %cmp34, label %land.lhs.true36, label %if.end45, !dbg !6203

land.lhs.true36:                                  ; preds = %if.then32
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6204
  %call37 = call %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d* %36), !dbg !6205
  store %union.tree_node* %call37, %union.tree_node** %res, align 8, !dbg !6206
  %cmp38 = icmp ne %union.tree_node* %call37, null, !dbg !6207
  br i1 %cmp38, label %land.lhs.true40, label %if.end45, !dbg !6208

land.lhs.true40:                                  ; preds = %land.lhs.true36
  %37 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6209
  %call41 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %37), !dbg !6210
  %conv42 = zext i8 %call41 to i32, !dbg !6210
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !6210
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !6211

if.then44:                                        ; preds = %land.lhs.true40
  %38 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6212
  store %union.tree_node* %38, %union.tree_node** %init_cond, align 8, !dbg !6213
  br label %if.end45, !dbg !6214

if.end45:                                         ; preds = %if.then44, %land.lhs.true40, %land.lhs.true36, %if.then32
  br label %if.end46, !dbg !6215

if.end46:                                         ; preds = %if.end45, %if.end25
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6216
  %tobool47 = icmp ne %struct._IO_FILE* %39, null, !dbg !6216
  br i1 %tobool47, label %land.lhs.true48, label %if.end54, !dbg !6218

land.lhs.true48:                                  ; preds = %if.end46
  %40 = load i32, i32* @dump_flags, align 4, !dbg !6219
  %and49 = and i32 %40, 8, !dbg !6220
  %tobool50 = icmp ne i32 %and49, 0, !dbg !6220
  br i1 %tobool50, label %if.then51, label %if.end54, !dbg !6221

if.then51:                                        ; preds = %land.lhs.true48
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6222
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0)), !dbg !6224
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6225
  %43 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6226
  call void @print_generic_expr(%struct._IO_FILE* %42, %union.tree_node* %43, i32 0), !dbg !6227
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6228
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !6229
  br label %if.end54, !dbg !6230

if.end54:                                         ; preds = %if.then51, %land.lhs.true48, %if.end46
  %45 = load %union.tree_node*, %union.tree_node** %init_cond, align 8, !dbg !6231
  ret %union.tree_node* %45, !dbg !6232
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @analyze_evolution_in_loop(%union.gimple_statement_d* %loop_phi_node, %union.tree_node* %init_cond) #0 !dbg !6233 {
entry:
  %loop_phi_node.addr = alloca %union.gimple_statement_d*, align 8
  %init_cond.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %evolution_function = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %ssa_chain = alloca %union.gimple_statement_d*, align 8
  %ev_fn = alloca %union.tree_node*, align 8
  %res = alloca i32, align 4
  %val = alloca i8, align 1
  store %union.gimple_statement_d* %loop_phi_node, %union.gimple_statement_d** %loop_phi_node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %loop_phi_node.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  store %union.tree_node* %init_cond, %union.tree_node** %init_cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_cond.addr, metadata !6238, metadata !DIExpression()), !dbg !6239
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6240, metadata !DIExpression()), !dbg !6241
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6242, metadata !DIExpression()), !dbg !6243
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6244
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !6245
  store i32 %call, i32* %n, align 4, !dbg !6243
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_function, metadata !6246, metadata !DIExpression()), !dbg !6247
  %1 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !6248
  store %union.tree_node* %1, %union.tree_node** %evolution_function, align 8, !dbg !6247
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6249, metadata !DIExpression()), !dbg !6250
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6251
  %call1 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %2), !dbg !6252
  store %struct.loop* %call1, %struct.loop** %loop, align 8, !dbg !6250
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6253, metadata !DIExpression()), !dbg !6254
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6255
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !6255
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6257

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !6258
  %and = and i32 %4, 8, !dbg !6259
  %tobool2 = icmp ne i32 %and, 0, !dbg !6259
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6260

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6261
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i64 0, i64 0)), !dbg !6263
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6264
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0)), !dbg !6265
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6266
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6267
  call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %8, i32 0, i32 0), !dbg !6268
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6269
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !6270
  br label %if.end, !dbg !6271

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i32 0, i32* %i, align 4, !dbg !6272
  br label %for.cond, !dbg !6274

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !6275
  %11 = load i32, i32* %n, align 4, !dbg !6277
  %cmp = icmp slt i32 %10, %11, !dbg !6278
  br i1 %cmp, label %for.body, label %for.end, !dbg !6279

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6280, metadata !DIExpression()), !dbg !6282
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6283
  %13 = load i32, i32* %i, align 4, !dbg !6283
  %call6 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %12, i32 %13), !dbg !6283
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call6), !dbg !6283
  store %union.tree_node* %call7, %union.tree_node** %arg, align 8, !dbg !6282
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ssa_chain, metadata !6284, metadata !DIExpression()), !dbg !6285
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev_fn, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6288, metadata !DIExpression()), !dbg !6290
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6291
  %15 = load i32, i32* %i, align 4, !dbg !6292
  %conv = sext i32 %15 to i64, !dbg !6292
  %call8 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %14, i64 %conv), !dbg !6293
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 0, !dbg !6294
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6294
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !6295
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6296
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6298
  %call9 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %17, %struct.basic_block_def* %18), !dbg !6299
  %tobool10 = icmp ne i8 %call9, 0, !dbg !6299
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !6300

if.then11:                                        ; preds = %for.body
  br label %for.inc, !dbg !6301

if.end12:                                         ; preds = %for.body
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6302
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6302
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !6302
  %bf.load = load i64, i64* %20, align 8, !dbg !6302
  %bf.clear = and i64 %bf.load, 65535, !dbg !6302
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6302
  %cmp13 = icmp eq i32 %bf.cast, 141, !dbg !6304
  br i1 %cmp13, label %if.then15, label %if.else, !dbg !6305

if.then15:                                        ; preds = %if.end12
  call void @llvm.dbg.declare(metadata i8* %val, metadata !6306, metadata !DIExpression()), !dbg !6308
  store i8 0, i8* %val, align 1, !dbg !6308
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6309
  %ssa_name = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !6309
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6309
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6309
  store %union.gimple_statement_d* %22, %union.gimple_statement_d** %ssa_chain, align 8, !dbg !6310
  %23 = load %union.tree_node*, %union.tree_node** %init_cond.addr, align 8, !dbg !6311
  store %union.tree_node* %23, %union.tree_node** %ev_fn, align 8, !dbg !6312
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6313
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ssa_chain, align 8, !dbg !6314
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6315
  %call16 = call i32 @follow_ssa_edge(%struct.loop* %24, %union.gimple_statement_d* %25, %union.gimple_statement_d* %26, %union.tree_node** %ev_fn, i32 0), !dbg !6316
  store i32 %call16, i32* %res, align 4, !dbg !6317
  %27 = load %union.tree_node*, %union.tree_node** %ev_fn, align 8, !dbg !6318
  %base17 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6318
  %28 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6318
  %bf.load18 = load i64, i64* %28, align 8, !dbg !6318
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6318
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6318
  %cmp21 = icmp ne i32 %bf.cast20, 146, !dbg !6320
  br i1 %cmp21, label %land.lhs.true23, label %if.end34, !dbg !6321

land.lhs.true23:                                  ; preds = %if.then15
  %29 = load %union.tree_node*, %union.tree_node** %ev_fn, align 8, !dbg !6322
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6323
  %num = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 0, !dbg !6324
  %31 = load i32, i32* %num, align 8, !dbg !6324
  %call24 = call zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %29, i32 %31, i8* %val), !dbg !6325
  %conv25 = zext i8 %call24 to i32, !dbg !6325
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !6325
  br i1 %tobool26, label %land.lhs.true27, label %if.end34, !dbg !6326

land.lhs.true27:                                  ; preds = %land.lhs.true23
  %32 = load i8, i8* %val, align 1, !dbg !6327
  %conv28 = zext i8 %32 to i32, !dbg !6327
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !6327
  br i1 %tobool29, label %land.lhs.true30, label %if.end34, !dbg !6328

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %33 = load %union.tree_node*, %union.tree_node** %init_cond.addr, align 8, !dbg !6329
  %34 = load %union.tree_node*, %union.tree_node** %ev_fn, align 8, !dbg !6330
  %call31 = call i32 @operand_equal_p(%union.tree_node* %33, %union.tree_node* %34, i32 0), !dbg !6331
  %tobool32 = icmp ne i32 %call31, 0, !dbg !6331
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !6332

if.then33:                                        ; preds = %land.lhs.true30
  %35 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6333
  store %union.tree_node* %35, %union.tree_node** %ev_fn, align 8, !dbg !6334
  br label %if.end34, !dbg !6335

if.end34:                                         ; preds = %if.then33, %land.lhs.true30, %land.lhs.true27, %land.lhs.true23, %if.then15
  br label %if.end35, !dbg !6336

if.else:                                          ; preds = %if.end12
  store i32 0, i32* %res, align 4, !dbg !6337
  br label %if.end35

if.end35:                                         ; preds = %if.else, %if.end34
  %36 = load i32, i32* %res, align 4, !dbg !6338
  %cmp36 = icmp ne i32 %36, 1, !dbg !6340
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !6341

if.then38:                                        ; preds = %if.end35
  %37 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6342
  store %union.tree_node* %37, %union.tree_node** %ev_fn, align 8, !dbg !6343
  br label %if.end39, !dbg !6344

if.end39:                                         ; preds = %if.then38, %if.end35
  %38 = load %union.tree_node*, %union.tree_node** %evolution_function, align 8, !dbg !6345
  %39 = load %union.tree_node*, %union.tree_node** %ev_fn, align 8, !dbg !6346
  %call40 = call %union.tree_node* @chrec_merge(%union.tree_node* %38, %union.tree_node* %39), !dbg !6347
  store %union.tree_node* %call40, %union.tree_node** %evolution_function, align 8, !dbg !6348
  br label %for.inc, !dbg !6349

for.inc:                                          ; preds = %if.end39, %if.then11
  %40 = load i32, i32* %i, align 4, !dbg !6350
  %inc = add nsw i32 %40, 1, !dbg !6350
  store i32 %inc, i32* %i, align 4, !dbg !6350
  br label %for.cond, !dbg !6351, !llvm.loop !6352

for.end:                                          ; preds = %for.cond
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6354
  %tobool41 = icmp ne %struct._IO_FILE* %41, null, !dbg !6354
  br i1 %tobool41, label %land.lhs.true42, label %if.end48, !dbg !6356

land.lhs.true42:                                  ; preds = %for.end
  %42 = load i32, i32* @dump_flags, align 4, !dbg !6357
  %and43 = and i32 %42, 8, !dbg !6358
  %tobool44 = icmp ne i32 %and43, 0, !dbg !6358
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !6359

if.then45:                                        ; preds = %land.lhs.true42
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6360
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0)), !dbg !6362
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6363
  %45 = load %union.tree_node*, %union.tree_node** %evolution_function, align 8, !dbg !6364
  call void @print_generic_expr(%struct._IO_FILE* %44, %union.tree_node* %45, i32 0), !dbg !6365
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6366
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !6367
  br label %if.end48, !dbg !6368

if.end48:                                         ; preds = %if.then45, %land.lhs.true42, %for.end
  %47 = load %union.tree_node*, %union.tree_node** %evolution_function, align 8, !dbg !6369
  ret %union.tree_node* %47, !dbg !6370
}

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6371 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6372, metadata !DIExpression()), !dbg !6373
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6374
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6375
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6376
  %1 = load i32, i32* %nargs, align 4, !dbg !6376
  ret i32 %1, !dbg !6377
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6378 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6381, metadata !DIExpression()), !dbg !6382
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6383, metadata !DIExpression()), !dbg !6384
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6385
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6385
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !6385
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6385
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6385

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6385
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !6385
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !6385
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !6385
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6385
  br label %cond.end, !dbg !6385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6385
  %4 = load i64, i64* %i.addr, align 8, !dbg !6385
  %conv = trunc i64 %4 to i32, !dbg !6385
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !6385
  ret %struct.edge_def* %call3, !dbg !6386
}

declare dso_local %union.tree_node* @chrec_merge(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6387 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6392, metadata !DIExpression()), !dbg !6393
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6394, metadata !DIExpression()), !dbg !6393
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6393
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6393
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6393

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6393
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6393
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6393
  %3 = load i32, i32* %num, align 8, !dbg !6393
  %cmp = icmp ult i32 %1, %3, !dbg !6393
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6395
  %land.ext = zext i1 %4 to i32, !dbg !6393
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6393
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6393
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6393
  %idxprom = zext i32 %6 to i64, !dbg !6393
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6393
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6393
  ret %struct.edge_def* %7, !dbg !6393
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge(%struct.loop* %loop, %union.gimple_statement_d* %def, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6396 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %def.addr = alloca %union.gimple_statement_d*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %def_loop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  store %union.gimple_statement_d* %def, %union.gimple_statement_d** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def.addr, metadata !6401, metadata !DIExpression()), !dbg !6402
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6403, metadata !DIExpression()), !dbg !6404
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6405, metadata !DIExpression()), !dbg !6406
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6407, metadata !DIExpression()), !dbg !6408
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop, metadata !6409, metadata !DIExpression()), !dbg !6410
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6411
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %0), !dbg !6413
  %tobool = icmp ne i8 %call, 0, !dbg !6413
  br i1 %tobool, label %if.then, label %if.end, !dbg !6414

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6415
  br label %return, !dbg !6415

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %limit.addr, align 4, !dbg !6416
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6418
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 63, !dbg !6418
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !6418
  %3 = load i32, i32* %value, align 8, !dbg !6418
  %cmp = icmp sgt i32 %1, %3, !dbg !6419
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !6420

if.then1:                                         ; preds = %if.end
  store i32 2, i32* %retval, align 4, !dbg !6421
  br label %return, !dbg !6421

if.end2:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6422
  %call3 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %4), !dbg !6423
  store %struct.loop* %call3, %struct.loop** %def_loop, align 8, !dbg !6424
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6425
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6426
  switch i32 %call4, label %sw.default [
    i32 16, label %sw.bb
    i32 6, label %sw.bb21
  ], !dbg !6427

sw.bb:                                            ; preds = %if.end2
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6428
  %call5 = call zeroext i8 @loop_phi_node_p(%union.gimple_statement_d* %6), !dbg !6431
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6431
  br i1 %tobool6, label %if.end9, label %if.then7, !dbg !6432

if.then7:                                         ; preds = %sw.bb
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6433
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6434
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6435
  %10 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6436
  %11 = load i32, i32* %limit.addr, align 4, !dbg !6437
  %call8 = call i32 @follow_ssa_edge_in_condition_phi(%struct.loop* %7, %union.gimple_statement_d* %8, %union.gimple_statement_d* %9, %union.tree_node** %10, i32 %11), !dbg !6438
  store i32 %call8, i32* %retval, align 4, !dbg !6439
  br label %return, !dbg !6439

if.end9:                                          ; preds = %sw.bb
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6440
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6442
  %cmp10 = icmp eq %union.gimple_statement_d* %12, %13, !dbg !6443
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !6444

if.then11:                                        ; preds = %if.end9
  store i32 1, i32* %retval, align 4, !dbg !6445
  br label %return, !dbg !6445

if.end12:                                         ; preds = %if.end9
  %14 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !6446
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6448
  %cmp13 = icmp eq %struct.loop* %14, %15, !dbg !6449
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !6450

if.then14:                                        ; preds = %if.end12
  store i32 0, i32* %retval, align 4, !dbg !6451
  br label %return, !dbg !6451

if.end15:                                         ; preds = %if.end12
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6452
  %17 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !6454
  %call16 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %16, %struct.loop* %17), !dbg !6455
  %tobool17 = icmp ne i8 %call16, 0, !dbg !6455
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !6456

if.then18:                                        ; preds = %if.end15
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6457
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6458
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6459
  %21 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6460
  %22 = load i32, i32* %limit.addr, align 4, !dbg !6461
  %add = add nsw i32 %22, 1, !dbg !6462
  %call19 = call i32 @follow_ssa_edge_inner_loop_phi(%struct.loop* %18, %union.gimple_statement_d* %19, %union.gimple_statement_d* %20, %union.tree_node** %21, i32 %add), !dbg !6463
  store i32 %call19, i32* %retval, align 4, !dbg !6464
  br label %return, !dbg !6464

if.end20:                                         ; preds = %if.end15
  store i32 0, i32* %retval, align 4, !dbg !6465
  br label %return, !dbg !6465

sw.bb21:                                          ; preds = %if.end2
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6466
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def.addr, align 8, !dbg !6467
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6468
  %26 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6469
  %27 = load i32, i32* %limit.addr, align 4, !dbg !6470
  %call22 = call i32 @follow_ssa_edge_in_rhs(%struct.loop* %23, %union.gimple_statement_d* %24, %union.gimple_statement_d* %25, %union.tree_node** %26, i32 %27), !dbg !6471
  store i32 %call22, i32* %retval, align 4, !dbg !6472
  br label %return, !dbg !6472

sw.default:                                       ; preds = %if.end2
  store i32 0, i32* %retval, align 4, !dbg !6473
  br label %return, !dbg !6473

return:                                           ; preds = %sw.default, %sw.bb21, %if.end20, %if.then18, %if.then14, %if.then11, %if.then7, %if.then1, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !6474
  ret i32 %28, !dbg !6474
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !6475 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6476, metadata !DIExpression()), !dbg !6477
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6478
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6479
  %cmp = icmp eq i32 %call, 18, !dbg !6480
  %conv = zext i1 %cmp to i32, !dbg !6480
  %conv1 = trunc i32 %conv to i8, !dbg !6479
  ret i8 %conv1, !dbg !6481
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_in_condition_phi(%struct.loop* %loop, %union.gimple_statement_d* %condition_phi, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6482 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %condition_phi.addr = alloca %union.gimple_statement_d*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %init = alloca %union.tree_node*, align 8
  %evolution_of_branch = alloca %union.tree_node*, align 8
  %res = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6483, metadata !DIExpression()), !dbg !6484
  store %union.gimple_statement_d* %condition_phi, %union.gimple_statement_d** %condition_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %condition_phi.addr, metadata !6485, metadata !DIExpression()), !dbg !6486
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6487, metadata !DIExpression()), !dbg !6488
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6489, metadata !DIExpression()), !dbg !6490
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6491, metadata !DIExpression()), !dbg !6492
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6493, metadata !DIExpression()), !dbg !6494
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6495, metadata !DIExpression()), !dbg !6496
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !6497, metadata !DIExpression()), !dbg !6498
  %0 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6499
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6500
  store %union.tree_node* %1, %union.tree_node** %init, align 8, !dbg !6498
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_of_branch, metadata !6501, metadata !DIExpression()), !dbg !6502
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6503, metadata !DIExpression()), !dbg !6504
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6505
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !6506
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6507
  %5 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !6508
  %6 = load i32, i32* %limit.addr, align 4, !dbg !6509
  %call = call i32 @follow_ssa_edge_in_condition_phi_branch(i32 0, %struct.loop* %2, %union.gimple_statement_d* %3, %union.gimple_statement_d* %4, %union.tree_node** %evolution_of_branch, %union.tree_node* %5, i32 %6), !dbg !6510
  store i32 %call, i32* %res, align 4, !dbg !6504
  %7 = load i32, i32* %res, align 4, !dbg !6511
  %cmp = icmp eq i32 %7, 0, !dbg !6513
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6514

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32, i32* %res, align 4, !dbg !6515
  %cmp1 = icmp eq i32 %8, 2, !dbg !6516
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6517

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load i32, i32* %res, align 4, !dbg !6518
  store i32 %9, i32* %retval, align 4, !dbg !6519
  br label %return, !dbg !6519

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %evolution_of_branch, align 8, !dbg !6520
  %11 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6521
  store %union.tree_node* %10, %union.tree_node** %11, align 8, !dbg !6522
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !6523
  %call2 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %12), !dbg !6524
  store i32 %call2, i32* %n, align 4, !dbg !6525
  store i32 1, i32* %i, align 4, !dbg !6526
  br label %for.cond, !dbg !6528

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %i, align 4, !dbg !6529
  %14 = load i32, i32* %n, align 4, !dbg !6531
  %cmp3 = icmp slt i32 %13, %14, !dbg !6532
  br i1 %cmp3, label %for.body, label %for.end, !dbg !6533

for.body:                                         ; preds = %for.cond
  %15 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6534
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !6537
  %17 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6538
  %cmp4 = icmp eq %union.tree_node* %16, %17, !dbg !6539
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6540

if.then5:                                         ; preds = %for.body
  store i32 1, i32* %retval, align 4, !dbg !6541
  br label %return, !dbg !6541

if.end6:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !6542
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6543
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !6544
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6545
  %22 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !6546
  %23 = load i32, i32* %limit.addr, align 4, !dbg !6547
  %24 = load i32, i32* %i, align 4, !dbg !6548
  %add = add nsw i32 %23, %24, !dbg !6549
  %call7 = call i32 @follow_ssa_edge_in_condition_phi_branch(i32 %18, %struct.loop* %19, %union.gimple_statement_d* %20, %union.gimple_statement_d* %21, %union.tree_node** %evolution_of_branch, %union.tree_node* %22, i32 %add), !dbg !6550
  store i32 %call7, i32* %res, align 4, !dbg !6551
  %25 = load i32, i32* %res, align 4, !dbg !6552
  %cmp8 = icmp eq i32 %25, 0, !dbg !6554
  br i1 %cmp8, label %if.then11, label %lor.lhs.false9, !dbg !6555

lor.lhs.false9:                                   ; preds = %if.end6
  %26 = load i32, i32* %res, align 4, !dbg !6556
  %cmp10 = icmp eq i32 %26, 2, !dbg !6557
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !6558

if.then11:                                        ; preds = %lor.lhs.false9, %if.end6
  %27 = load i32, i32* %res, align 4, !dbg !6559
  store i32 %27, i32* %retval, align 4, !dbg !6560
  br label %return, !dbg !6560

if.end12:                                         ; preds = %lor.lhs.false9
  %28 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6561
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !6562
  %30 = load %union.tree_node*, %union.tree_node** %evolution_of_branch, align 8, !dbg !6563
  %call13 = call %union.tree_node* @chrec_merge(%union.tree_node* %29, %union.tree_node* %30), !dbg !6564
  %31 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6565
  store %union.tree_node* %call13, %union.tree_node** %31, align 8, !dbg !6566
  br label %for.inc, !dbg !6567

for.inc:                                          ; preds = %if.end12
  %32 = load i32, i32* %i, align 4, !dbg !6568
  %inc = add nsw i32 %32, 1, !dbg !6568
  store i32 %inc, i32* %i, align 4, !dbg !6568
  br label %for.cond, !dbg !6569, !llvm.loop !6570

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !6572
  br label %return, !dbg !6572

return:                                           ; preds = %for.end, %if.then11, %if.then5, %if.then
  %33 = load i32, i32* %retval, align 4, !dbg !6573
  ret i32 %33, !dbg !6573
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_inner_loop_phi(%struct.loop* %outer_loop, %union.gimple_statement_d* %loop_phi_node, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6574 {
entry:
  %retval = alloca i32, align 4
  %outer_loop.addr = alloca %struct.loop*, align 8
  %loop_phi_node.addr = alloca %union.gimple_statement_d*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %ev = alloca %union.tree_node*, align 8
  %res = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %outer_loop, %struct.loop** %outer_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %outer_loop.addr, metadata !6575, metadata !DIExpression()), !dbg !6576
  store %union.gimple_statement_d* %loop_phi_node, %union.gimple_statement_d** %loop_phi_node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %loop_phi_node.addr, metadata !6577, metadata !DIExpression()), !dbg !6578
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6579, metadata !DIExpression()), !dbg !6580
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6581, metadata !DIExpression()), !dbg !6582
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6583, metadata !DIExpression()), !dbg !6584
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6585, metadata !DIExpression()), !dbg !6586
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6587
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %0), !dbg !6588
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !6586
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev, metadata !6589, metadata !DIExpression()), !dbg !6590
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6591
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6592
  %call1 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %2), !dbg !6592
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call1), !dbg !6592
  %call3 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %1, %union.tree_node* %call2), !dbg !6593
  store %union.tree_node* %call3, %union.tree_node** %ev, align 8, !dbg !6590
  %3 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !6594
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6596
  %call4 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %4), !dbg !6596
  %call5 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call4), !dbg !6596
  %cmp = icmp eq %union.tree_node* %3, %call5, !dbg !6597
  br i1 %cmp, label %if.then, label %if.end22, !dbg !6598

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6599, metadata !DIExpression()), !dbg !6601
  store i32 0, i32* %res, align 4, !dbg !6601
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6602, metadata !DIExpression()), !dbg !6603
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6604, metadata !DIExpression()), !dbg !6605
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6606
  %call6 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %5), !dbg !6607
  store i32 %call6, i32* %n, align 4, !dbg !6605
  store i32 0, i32* %i, align 4, !dbg !6608
  br label %for.cond, !dbg !6610

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %i, align 4, !dbg !6611
  %7 = load i32, i32* %n, align 4, !dbg !6613
  %cmp7 = icmp slt i32 %6, %7, !dbg !6614
  br i1 %cmp7, label %for.body, label %for.end, !dbg !6615

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6616, metadata !DIExpression()), !dbg !6618
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6619
  %9 = load i32, i32* %i, align 4, !dbg !6619
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %8, i32 %9), !dbg !6619
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call8), !dbg !6619
  store %union.tree_node* %call9, %union.tree_node** %arg, align 8, !dbg !6618
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6620, metadata !DIExpression()), !dbg !6621
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6622
  %11 = load i32, i32* %i, align 4, !dbg !6623
  %conv = sext i32 %11 to i64, !dbg !6623
  %call10 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %10, i64 %conv), !dbg !6624
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call10, i32 0, i32 0, !dbg !6625
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6625
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !6626
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6627
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6629
  %call11 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %13, %struct.basic_block_def* %14), !dbg !6630
  %tobool = icmp ne i8 %call11, 0, !dbg !6630
  br i1 %tobool, label %if.end, label %if.then12, !dbg !6631

if.then12:                                        ; preds = %for.body
  %15 = load %struct.loop*, %struct.loop** %outer_loop.addr, align 8, !dbg !6632
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6633
  %17 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6634
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6635
  %19 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6636
  %20 = load i32, i32* %limit.addr, align 4, !dbg !6637
  %call13 = call i32 @follow_ssa_edge_expr(%struct.loop* %15, %union.gimple_statement_d* %16, %union.tree_node* %17, %union.gimple_statement_d* %18, %union.tree_node** %19, i32 %20), !dbg !6638
  store i32 %call13, i32* %res, align 4, !dbg !6639
  br label %if.end, !dbg !6640

if.end:                                           ; preds = %if.then12, %for.body
  %21 = load i32, i32* %res, align 4, !dbg !6641
  %cmp14 = icmp eq i32 %21, 1, !dbg !6643
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !6644

if.then16:                                        ; preds = %if.end
  br label %for.end, !dbg !6645

if.end17:                                         ; preds = %if.end
  br label %for.inc, !dbg !6646

for.inc:                                          ; preds = %if.end17
  %22 = load i32, i32* %i, align 4, !dbg !6647
  %inc = add nsw i32 %22, 1, !dbg !6647
  store i32 %inc, i32* %i, align 4, !dbg !6647
  br label %for.cond, !dbg !6648, !llvm.loop !6649

for.end:                                          ; preds = %if.then16, %for.cond
  %23 = load i32, i32* %res, align 4, !dbg !6651
  %cmp18 = icmp eq i32 %23, 1, !dbg !6653
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !6654

if.then20:                                        ; preds = %for.end
  %24 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6655
  %25 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6656
  store %union.tree_node* %24, %union.tree_node** %25, align 8, !dbg !6657
  br label %if.end21, !dbg !6658

if.end21:                                         ; preds = %if.then20, %for.end
  %26 = load i32, i32* %res, align 4, !dbg !6659
  store i32 %26, i32* %retval, align 4, !dbg !6660
  br label %return, !dbg !6660

if.end22:                                         ; preds = %entry
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6661
  %28 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !6662
  %call23 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %27, %union.tree_node* %28), !dbg !6663
  store %union.tree_node* %call23, %union.tree_node** %ev, align 8, !dbg !6664
  %29 = load %struct.loop*, %struct.loop** %outer_loop.addr, align 8, !dbg !6665
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_phi_node.addr, align 8, !dbg !6666
  %31 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !6667
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6668
  %33 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6669
  %34 = load i32, i32* %limit.addr, align 4, !dbg !6670
  %call24 = call i32 @follow_ssa_edge_expr(%struct.loop* %29, %union.gimple_statement_d* %30, %union.tree_node* %31, %union.gimple_statement_d* %32, %union.tree_node** %33, i32 %34), !dbg !6671
  store i32 %call24, i32* %retval, align 4, !dbg !6672
  br label %return, !dbg !6672

return:                                           ; preds = %if.end22, %if.end21
  %35 = load i32, i32* %retval, align 4, !dbg !6673
  ret i32 %35, !dbg !6673
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_in_rhs(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6674 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %res = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6677, metadata !DIExpression()), !dbg !6678
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6679, metadata !DIExpression()), !dbg !6680
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6681, metadata !DIExpression()), !dbg !6682
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6683, metadata !DIExpression()), !dbg !6684
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6685, metadata !DIExpression()), !dbg !6686
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6687
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !6688
  store i32 %call, i32* %code, align 4, !dbg !6686
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6689, metadata !DIExpression()), !dbg !6690
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6691
  %call1 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %1), !dbg !6692
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !6690
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !6693, metadata !DIExpression()), !dbg !6694
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !6695, metadata !DIExpression()), !dbg !6696
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6697, metadata !DIExpression()), !dbg !6698
  %2 = load i32, i32* %code, align 4, !dbg !6699
  switch i32 %2, label %sw.default [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 66, label %sw.bb5
    i32 63, label %sw.bb5
    i32 64, label %sw.bb5
  ], !dbg !6700

sw.bb:                                            ; preds = %entry, %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6701
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6703
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6704
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !6705
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6706
  %7 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6707
  %8 = load i32, i32* %limit.addr, align 4, !dbg !6708
  %call3 = call i32 @follow_ssa_edge_expr(%struct.loop* %3, %union.gimple_statement_d* %4, %union.tree_node* %call2, %union.gimple_statement_d* %6, %union.tree_node** %7, i32 %8), !dbg !6709
  store i32 %call3, i32* %res, align 4, !dbg !6710
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6711
  %10 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6712
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !6713
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6714
  %call4 = call %union.tree_node* @chrec_convert(%union.tree_node* %9, %union.tree_node* %11, %union.gimple_statement_d* %12), !dbg !6715
  %13 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6716
  store %union.tree_node* %call4, %union.tree_node** %13, align 8, !dbg !6717
  br label %sw.epilog, !dbg !6718

sw.bb5:                                           ; preds = %entry, %entry, %entry
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6719
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %14), !dbg !6720
  store %union.tree_node* %call6, %union.tree_node** %rhs1, align 8, !dbg !6721
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6722
  %call7 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %15), !dbg !6723
  store %union.tree_node* %call7, %union.tree_node** %rhs2, align 8, !dbg !6724
  %16 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !6725
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !6725
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6725
  %17 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !6725
  store %union.tree_node* %17, %union.tree_node** %type, align 8, !dbg !6726
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6727
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6728
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6729
  %21 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !6730
  %22 = load i32, i32* %code, align 4, !dbg !6731
  %23 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !6732
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6733
  %25 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6734
  %26 = load i32, i32* %limit.addr, align 4, !dbg !6735
  %call9 = call i32 @follow_ssa_edge_binary(%struct.loop* %18, %union.gimple_statement_d* %19, %union.tree_node* %20, %union.tree_node* %21, i32 %22, %union.tree_node* %23, %union.gimple_statement_d* %24, %union.tree_node** %25, i32 %26), !dbg !6736
  store i32 %call9, i32* %res, align 4, !dbg !6737
  br label %sw.epilog, !dbg !6738

sw.default:                                       ; preds = %entry
  %27 = load i32, i32* %code, align 4, !dbg !6739
  %call10 = call i32 @get_gimple_rhs_class(i32 %27), !dbg !6741
  %cmp = icmp eq i32 %call10, 3, !dbg !6742
  br i1 %cmp, label %if.then, label %if.else, !dbg !6743

if.then:                                          ; preds = %sw.default
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6744
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6745
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6746
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !6747
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6748
  %32 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6749
  %33 = load i32, i32* %limit.addr, align 4, !dbg !6750
  %call12 = call i32 @follow_ssa_edge_expr(%struct.loop* %28, %union.gimple_statement_d* %29, %union.tree_node* %call11, %union.gimple_statement_d* %31, %union.tree_node** %32, i32 %33), !dbg !6751
  store i32 %call12, i32* %res, align 4, !dbg !6752
  br label %if.end, !dbg !6753

if.else:                                          ; preds = %sw.default
  store i32 0, i32* %res, align 4, !dbg !6754
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !6755

sw.epilog:                                        ; preds = %if.end, %sw.bb5, %sw.bb
  %34 = load i32, i32* %res, align 4, !dbg !6756
  ret i32 %34, !dbg !6757
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_in_condition_phi_branch(i32 %i, %struct.loop* %loop, %union.gimple_statement_d* %condition_phi, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_branch, %union.tree_node* %init_cond, i32 %limit) #0 !dbg !6758 {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %condition_phi.addr = alloca %union.gimple_statement_d*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_branch.addr = alloca %union.tree_node**, align 8
  %init_cond.addr = alloca %union.tree_node*, align 8
  %limit.addr = alloca i32, align 4
  %branch = alloca %union.tree_node*, align 8
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6761, metadata !DIExpression()), !dbg !6762
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6763, metadata !DIExpression()), !dbg !6764
  store %union.gimple_statement_d* %condition_phi, %union.gimple_statement_d** %condition_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %condition_phi.addr, metadata !6765, metadata !DIExpression()), !dbg !6766
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6767, metadata !DIExpression()), !dbg !6768
  store %union.tree_node** %evolution_of_branch, %union.tree_node*** %evolution_of_branch.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_branch.addr, metadata !6769, metadata !DIExpression()), !dbg !6770
  store %union.tree_node* %init_cond, %union.tree_node** %init_cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_cond.addr, metadata !6771, metadata !DIExpression()), !dbg !6772
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  call void @llvm.dbg.declare(metadata %union.tree_node** %branch, metadata !6775, metadata !DIExpression()), !dbg !6776
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !6777
  %1 = load i32, i32* %i.addr, align 4, !dbg !6777
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %0, i32 %1), !dbg !6777
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call), !dbg !6777
  store %union.tree_node* %call1, %union.tree_node** %branch, align 8, !dbg !6776
  %2 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6778
  %3 = load %union.tree_node**, %union.tree_node*** %evolution_of_branch.addr, align 8, !dbg !6779
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !dbg !6780
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condition_phi.addr, align 8, !dbg !6781
  %5 = load i32, i32* %i.addr, align 4, !dbg !6783
  %call2 = call zeroext i8 @backedge_phi_arg_p(%union.gimple_statement_d* %4, i32 %5), !dbg !6784
  %tobool = icmp ne i8 %call2, 0, !dbg !6784
  br i1 %tobool, label %if.then, label %if.end, !dbg !6785

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6786
  br label %return, !dbg !6786

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %branch, align 8, !dbg !6787
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6787
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6787
  %bf.load = load i64, i64* %7, align 8, !dbg !6787
  %bf.clear = and i64 %bf.load, 65535, !dbg !6787
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6787
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6789
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !6790

if.then3:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %init_cond.addr, align 8, !dbg !6791
  %9 = load %union.tree_node**, %union.tree_node*** %evolution_of_branch.addr, align 8, !dbg !6793
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !dbg !6794
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6795
  %11 = load %union.tree_node*, %union.tree_node** %branch, align 8, !dbg !6796
  %ssa_name = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !6796
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6796
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6796
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6797
  %14 = load %union.tree_node**, %union.tree_node*** %evolution_of_branch.addr, align 8, !dbg !6798
  %15 = load i32, i32* %limit.addr, align 4, !dbg !6799
  %call4 = call i32 @follow_ssa_edge(%struct.loop* %10, %union.gimple_statement_d* %12, %union.gimple_statement_d* %13, %union.tree_node** %14, i32 %15), !dbg !6800
  store i32 %call4, i32* %retval, align 4, !dbg !6801
  br label %return, !dbg !6801

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6802
  br label %return, !dbg !6802

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6803
  ret i32 %16, !dbg !6803
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @backedge_phi_arg_p(%union.gimple_statement_d* %phi, i32 %i) #0 !dbg !6804 {
entry:
  %retval = alloca i8, align 1
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6807, metadata !DIExpression()), !dbg !6808
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6809, metadata !DIExpression()), !dbg !6810
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6811, metadata !DIExpression()), !dbg !6815
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6816
  %1 = load i32, i32* %i.addr, align 4, !dbg !6817
  %conv = sext i32 %1 to i64, !dbg !6817
  %call = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %0, i64 %conv), !dbg !6818
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !6815
  %2 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6819
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 7, !dbg !6821
  %3 = load i32, i32* %flags, align 8, !dbg !6821
  %and = and i32 %3, 128, !dbg !6822
  %tobool = icmp ne i32 %and, 0, !dbg !6822
  br i1 %tobool, label %if.then, label %if.end, !dbg !6823

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6824
  br label %return, !dbg !6824

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6825
  br label %return, !dbg !6825

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !6826
  ret i8 %4, !dbg !6826
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_expr(%struct.loop* %loop, %union.gimple_statement_d* %at_stmt, %union.tree_node* %expr, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6827 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %rhs0 = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %res = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6830, metadata !DIExpression()), !dbg !6831
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !6832, metadata !DIExpression()), !dbg !6833
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6844
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6844
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6844
  %bf.load = load i64, i64* %1, align 8, !dbg !6844
  %bf.clear = and i64 %bf.load, 65535, !dbg !6844
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6844
  store i32 %bf.cast, i32* %code, align 4, !dbg !6843
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6845, metadata !DIExpression()), !dbg !6846
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6847
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6847
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6847
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6847
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !6846
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs0, metadata !6848, metadata !DIExpression()), !dbg !6849
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !6850, metadata !DIExpression()), !dbg !6851
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6852, metadata !DIExpression()), !dbg !6853
  %4 = load i32, i32* %code, align 4, !dbg !6854
  switch i32 %4, label %sw.default [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 23, label %sw.bb3
    i32 141, label %sw.bb4
    i32 66, label %sw.bb6
    i32 63, label %sw.bb6
    i32 64, label %sw.bb6
    i32 148, label %sw.bb18
  ], !dbg !6855

sw.bb:                                            ; preds = %entry, %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6856
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !6858
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6859
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !6859
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6859
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6859
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6859
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6860
  %10 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6861
  %11 = load i32, i32* %limit.addr, align 4, !dbg !6862
  %call = call i32 @follow_ssa_edge_expr(%struct.loop* %5, %union.gimple_statement_d* %6, %union.tree_node* %8, %union.gimple_statement_d* %9, %union.tree_node** %10, i32 %11), !dbg !6863
  store i32 %call, i32* %res, align 4, !dbg !6864
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6865
  %13 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6866
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !6867
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !6868
  %call2 = call %union.tree_node* @chrec_convert(%union.tree_node* %12, %union.tree_node* %14, %union.gimple_statement_d* %15), !dbg !6869
  %16 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6870
  store %union.tree_node* %call2, %union.tree_node** %16, align 8, !dbg !6871
  br label %sw.epilog, !dbg !6872

sw.bb3:                                           ; preds = %entry
  store i32 0, i32* %res, align 4, !dbg !6873
  br label %sw.epilog, !dbg !6874

sw.bb4:                                           ; preds = %entry
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6875
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6876
  %ssa_name = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !6876
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6876
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6876
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6877
  %21 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6878
  %22 = load i32, i32* %limit.addr, align 4, !dbg !6879
  %call5 = call i32 @follow_ssa_edge(%struct.loop* %17, %union.gimple_statement_d* %19, %union.gimple_statement_d* %20, %union.tree_node** %21, i32 %22), !dbg !6880
  store i32 %call5, i32* %res, align 4, !dbg !6881
  br label %sw.epilog, !dbg !6882

sw.bb6:                                           ; preds = %entry, %entry, %entry
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6883
  %exp7 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !6883
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !6883
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !6883
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !6883
  store %union.tree_node* %24, %union.tree_node** %rhs0, align 8, !dbg !6884
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6885
  %exp10 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !6885
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !6885
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !6885
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6885
  store %union.tree_node* %26, %union.tree_node** %rhs1, align 8, !dbg !6886
  %27 = load %union.tree_node*, %union.tree_node** %rhs0, align 8, !dbg !6887
  %common13 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !6887
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !6887
  %28 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !6887
  store %union.tree_node* %28, %union.tree_node** %type, align 8, !dbg !6888
  %29 = load %union.tree_node*, %union.tree_node** %rhs0, align 8, !dbg !6889
  %call15 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %29), !dbg !6889
  store %union.tree_node* %call15, %union.tree_node** %rhs0, align 8, !dbg !6889
  %30 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !6890
  %call16 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %30), !dbg !6890
  store %union.tree_node* %call16, %union.tree_node** %rhs1, align 8, !dbg !6890
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6891
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !6892
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6893
  %34 = load %union.tree_node*, %union.tree_node** %rhs0, align 8, !dbg !6894
  %35 = load i32, i32* %code, align 4, !dbg !6895
  %36 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !6896
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6897
  %38 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6898
  %39 = load i32, i32* %limit.addr, align 4, !dbg !6899
  %call17 = call i32 @follow_ssa_edge_binary(%struct.loop* %31, %union.gimple_statement_d* %32, %union.tree_node* %33, %union.tree_node* %34, i32 %35, %union.tree_node* %36, %union.gimple_statement_d* %37, %union.tree_node** %38, i32 %39), !dbg !6900
  store i32 %call17, i32* %res, align 4, !dbg !6901
  br label %sw.epilog, !dbg !6902

sw.bb18:                                          ; preds = %entry
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6903
  %exp19 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !6903
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !6903
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !6903
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !6903
  store %union.tree_node* %41, %union.tree_node** %rhs0, align 8, !dbg !6904
  %42 = load %union.tree_node*, %union.tree_node** %rhs0, align 8, !dbg !6905
  %base22 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6905
  %43 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6905
  %bf.load23 = load i64, i64* %43, align 8, !dbg !6905
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6905
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6905
  %cmp = icmp eq i32 %bf.cast25, 141, !dbg !6907
  br i1 %cmp, label %if.then, label %if.else, !dbg !6908

if.then:                                          ; preds = %sw.bb18
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6909
  %45 = load %union.tree_node*, %union.tree_node** %rhs0, align 8, !dbg !6910
  %ssa_name26 = bitcast %union.tree_node* %45 to %struct.tree_ssa_name*, !dbg !6910
  %def_stmt27 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name26, i32 0, i32 2, !dbg !6910
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt27, align 8, !dbg !6910
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6911
  %48 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6912
  %49 = load i32, i32* %limit.addr, align 4, !dbg !6913
  %call28 = call i32 @follow_ssa_edge(%struct.loop* %44, %union.gimple_statement_d* %46, %union.gimple_statement_d* %47, %union.tree_node** %48, i32 %49), !dbg !6914
  store i32 %call28, i32* %res, align 4, !dbg !6915
  br label %if.end, !dbg !6916

if.else:                                          ; preds = %sw.bb18
  store i32 0, i32* %res, align 4, !dbg !6917
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !6918

sw.default:                                       ; preds = %entry
  store i32 0, i32* %res, align 4, !dbg !6919
  br label %sw.epilog, !dbg !6920

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb6, %sw.bb4, %sw.bb3, %sw.bb
  %50 = load i32, i32* %res, align 4, !dbg !6921
  ret i32 %50, !dbg !6922
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @follow_ssa_edge_binary(%struct.loop* %loop, %union.gimple_statement_d* %at_stmt, %union.tree_node* %type, %union.tree_node* %rhs0, i32 %code, %union.tree_node* %rhs1, %union.gimple_statement_d* %halting_phi, %union.tree_node** %evolution_of_loop, i32 %limit) #0 !dbg !6923 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %rhs0.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %rhs1.addr = alloca %union.tree_node*, align 8
  %halting_phi.addr = alloca %union.gimple_statement_d*, align 8
  %evolution_of_loop.addr = alloca %union.tree_node**, align 8
  %limit.addr = alloca i32, align 4
  %res = alloca i32, align 4
  %evol = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6926, metadata !DIExpression()), !dbg !6927
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6930, metadata !DIExpression()), !dbg !6931
  store %union.tree_node* %rhs0, %union.tree_node** %rhs0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs0.addr, metadata !6932, metadata !DIExpression()), !dbg !6933
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6934, metadata !DIExpression()), !dbg !6935
  store %union.tree_node* %rhs1, %union.tree_node** %rhs1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1.addr, metadata !6936, metadata !DIExpression()), !dbg !6937
  store %union.gimple_statement_d* %halting_phi, %union.gimple_statement_d** %halting_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %halting_phi.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  store %union.tree_node** %evolution_of_loop, %union.tree_node*** %evolution_of_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %evolution_of_loop.addr, metadata !6940, metadata !DIExpression()), !dbg !6941
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6944, metadata !DIExpression()), !dbg !6945
  store i32 0, i32* %res, align 4, !dbg !6945
  call void @llvm.dbg.declare(metadata %union.tree_node** %evol, metadata !6946, metadata !DIExpression()), !dbg !6947
  %0 = load i32, i32* %code.addr, align 4, !dbg !6948
  switch i32 %0, label %sw.default [
    i32 66, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb69
  ], !dbg !6949

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !6950
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6950
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6950
  %bf.load = load i64, i64* %2, align 8, !dbg !6950
  %bf.clear = and i64 %bf.load, 65535, !dbg !6950
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6950
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6953
  br i1 %cmp, label %if.then, label %if.else46, !dbg !6954

if.then:                                          ; preds = %sw.bb
  %3 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !6955
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6955
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6955
  %bf.load2 = load i64, i64* %4, align 8, !dbg !6955
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6955
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6955
  %cmp5 = icmp eq i32 %bf.cast4, 141, !dbg !6958
  br i1 %cmp5, label %if.then6, label %if.else31, !dbg !6959

if.then6:                                         ; preds = %if.then
  %5 = load i32, i32* %limit.addr, align 4, !dbg !6960
  %inc = add nsw i32 %5, 1, !dbg !6960
  store i32 %inc, i32* %limit.addr, align 4, !dbg !6960
  %6 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6962
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6963
  store %union.tree_node* %7, %union.tree_node** %evol, align 8, !dbg !6964
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6965
  %9 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !6966
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !6966
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6966
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6966
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6967
  %12 = load i32, i32* %limit.addr, align 4, !dbg !6968
  %call = call i32 @follow_ssa_edge(%struct.loop* %8, %union.gimple_statement_d* %10, %union.gimple_statement_d* %11, %union.tree_node** %evol, i32 %12), !dbg !6969
  store i32 %call, i32* %res, align 4, !dbg !6970
  %13 = load i32, i32* %res, align 4, !dbg !6971
  %cmp7 = icmp eq i32 %13, 1, !dbg !6973
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !6974

if.then8:                                         ; preds = %if.then6
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6975
  %num = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !6976
  %15 = load i32, i32* %num, align 8, !dbg !6976
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6977
  %17 = load %union.tree_node*, %union.tree_node** %evol, align 8, !dbg !6978
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !6979
  %call9 = call %union.tree_node* @chrec_convert(%union.tree_node* %16, %union.tree_node* %17, %union.gimple_statement_d* %18), !dbg !6980
  %19 = load i32, i32* %code.addr, align 4, !dbg !6981
  %20 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !6982
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !6983
  %call10 = call %union.tree_node* @add_to_evolution(i32 %15, %union.tree_node* %call9, i32 %19, %union.tree_node* %20, %union.gimple_statement_d* %21), !dbg !6984
  %22 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6985
  store %union.tree_node* %call10, %union.tree_node** %22, align 8, !dbg !6986
  br label %if.end30, !dbg !6987

if.else:                                          ; preds = %if.then6
  %23 = load i32, i32* %res, align 4, !dbg !6988
  %cmp11 = icmp eq i32 %23, 0, !dbg !6990
  br i1 %cmp11, label %if.then12, label %if.else25, !dbg !6991

if.then12:                                        ; preds = %if.else
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6992
  %25 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !6994
  %ssa_name13 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !6994
  %def_stmt14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name13, i32 0, i32 2, !dbg !6994
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt14, align 8, !dbg !6994
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !6995
  %28 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !6996
  %29 = load i32, i32* %limit.addr, align 4, !dbg !6997
  %call15 = call i32 @follow_ssa_edge(%struct.loop* %24, %union.gimple_statement_d* %26, %union.gimple_statement_d* %27, %union.tree_node** %28, i32 %29), !dbg !6998
  store i32 %call15, i32* %res, align 4, !dbg !6999
  %30 = load i32, i32* %res, align 4, !dbg !7000
  %cmp16 = icmp eq i32 %30, 1, !dbg !7002
  br i1 %cmp16, label %if.then17, label %if.else21, !dbg !7003

if.then17:                                        ; preds = %if.then12
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7004
  %num18 = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 0, !dbg !7005
  %32 = load i32, i32* %num18, align 8, !dbg !7005
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7006
  %34 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7007
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !7008
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7009
  %call19 = call %union.tree_node* @chrec_convert(%union.tree_node* %33, %union.tree_node* %35, %union.gimple_statement_d* %36), !dbg !7010
  %37 = load i32, i32* %code.addr, align 4, !dbg !7011
  %38 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !7012
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7013
  %call20 = call %union.tree_node* @add_to_evolution(i32 %32, %union.tree_node* %call19, i32 %37, %union.tree_node* %38, %union.gimple_statement_d* %39), !dbg !7014
  %40 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7015
  store %union.tree_node* %call20, %union.tree_node** %40, align 8, !dbg !7016
  br label %if.end24, !dbg !7017

if.else21:                                        ; preds = %if.then12
  %41 = load i32, i32* %res, align 4, !dbg !7018
  %cmp22 = icmp eq i32 %41, 2, !dbg !7020
  br i1 %cmp22, label %if.then23, label %if.end, !dbg !7021

if.then23:                                        ; preds = %if.else21
  %42 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7022
  %43 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7023
  store %union.tree_node* %42, %union.tree_node** %43, align 8, !dbg !7024
  br label %if.end, !dbg !7025

if.end:                                           ; preds = %if.then23, %if.else21
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then17
  br label %if.end29, !dbg !7026

if.else25:                                        ; preds = %if.else
  %44 = load i32, i32* %res, align 4, !dbg !7027
  %cmp26 = icmp eq i32 %44, 2, !dbg !7029
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !7030

if.then27:                                        ; preds = %if.else25
  %45 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7031
  %46 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7032
  store %union.tree_node* %45, %union.tree_node** %46, align 8, !dbg !7033
  br label %if.end28, !dbg !7034

if.end28:                                         ; preds = %if.then27, %if.else25
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end24
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then8
  br label %if.end45, !dbg !7035

if.else31:                                        ; preds = %if.then
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7036
  %48 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !7038
  %ssa_name32 = bitcast %union.tree_node* %48 to %struct.tree_ssa_name*, !dbg !7038
  %def_stmt33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 2, !dbg !7038
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt33, align 8, !dbg !7038
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !7039
  %51 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7040
  %52 = load i32, i32* %limit.addr, align 4, !dbg !7041
  %call34 = call i32 @follow_ssa_edge(%struct.loop* %47, %union.gimple_statement_d* %49, %union.gimple_statement_d* %50, %union.tree_node** %51, i32 %52), !dbg !7042
  store i32 %call34, i32* %res, align 4, !dbg !7043
  %53 = load i32, i32* %res, align 4, !dbg !7044
  %cmp35 = icmp eq i32 %53, 1, !dbg !7046
  br i1 %cmp35, label %if.then36, label %if.else40, !dbg !7047

if.then36:                                        ; preds = %if.else31
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7048
  %num37 = getelementptr inbounds %struct.loop, %struct.loop* %54, i32 0, i32 0, !dbg !7049
  %55 = load i32, i32* %num37, align 8, !dbg !7049
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7050
  %57 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7051
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !7052
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7053
  %call38 = call %union.tree_node* @chrec_convert(%union.tree_node* %56, %union.tree_node* %58, %union.gimple_statement_d* %59), !dbg !7054
  %60 = load i32, i32* %code.addr, align 4, !dbg !7055
  %61 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !7056
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7057
  %call39 = call %union.tree_node* @add_to_evolution(i32 %55, %union.tree_node* %call38, i32 %60, %union.tree_node* %61, %union.gimple_statement_d* %62), !dbg !7058
  %63 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7059
  store %union.tree_node* %call39, %union.tree_node** %63, align 8, !dbg !7060
  br label %if.end44, !dbg !7061

if.else40:                                        ; preds = %if.else31
  %64 = load i32, i32* %res, align 4, !dbg !7062
  %cmp41 = icmp eq i32 %64, 2, !dbg !7064
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !7065

if.then42:                                        ; preds = %if.else40
  %65 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7066
  %66 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7067
  store %union.tree_node* %65, %union.tree_node** %66, align 8, !dbg !7068
  br label %if.end43, !dbg !7069

if.end43:                                         ; preds = %if.then42, %if.else40
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then36
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end30
  br label %if.end68, !dbg !7070

if.else46:                                        ; preds = %sw.bb
  %67 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !7071
  %base47 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !7071
  %68 = bitcast %struct.tree_base* %base47 to i64*, !dbg !7071
  %bf.load48 = load i64, i64* %68, align 8, !dbg !7071
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !7071
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !7071
  %cmp51 = icmp eq i32 %bf.cast50, 141, !dbg !7073
  br i1 %cmp51, label %if.then52, label %if.else66, !dbg !7074

if.then52:                                        ; preds = %if.else46
  %69 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7075
  %70 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !7077
  %ssa_name53 = bitcast %union.tree_node* %70 to %struct.tree_ssa_name*, !dbg !7077
  %def_stmt54 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name53, i32 0, i32 2, !dbg !7077
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt54, align 8, !dbg !7077
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !7078
  %73 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7079
  %74 = load i32, i32* %limit.addr, align 4, !dbg !7080
  %call55 = call i32 @follow_ssa_edge(%struct.loop* %69, %union.gimple_statement_d* %71, %union.gimple_statement_d* %72, %union.tree_node** %73, i32 %74), !dbg !7081
  store i32 %call55, i32* %res, align 4, !dbg !7082
  %75 = load i32, i32* %res, align 4, !dbg !7083
  %cmp56 = icmp eq i32 %75, 1, !dbg !7085
  br i1 %cmp56, label %if.then57, label %if.else61, !dbg !7086

if.then57:                                        ; preds = %if.then52
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7087
  %num58 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 0, !dbg !7088
  %77 = load i32, i32* %num58, align 8, !dbg !7088
  %78 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7089
  %79 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7090
  %80 = load %union.tree_node*, %union.tree_node** %79, align 8, !dbg !7091
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7092
  %call59 = call %union.tree_node* @chrec_convert(%union.tree_node* %78, %union.tree_node* %80, %union.gimple_statement_d* %81), !dbg !7093
  %82 = load i32, i32* %code.addr, align 4, !dbg !7094
  %83 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !7095
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7096
  %call60 = call %union.tree_node* @add_to_evolution(i32 %77, %union.tree_node* %call59, i32 %82, %union.tree_node* %83, %union.gimple_statement_d* %84), !dbg !7097
  %85 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7098
  store %union.tree_node* %call60, %union.tree_node** %85, align 8, !dbg !7099
  br label %if.end65, !dbg !7100

if.else61:                                        ; preds = %if.then52
  %86 = load i32, i32* %res, align 4, !dbg !7101
  %cmp62 = icmp eq i32 %86, 2, !dbg !7103
  br i1 %cmp62, label %if.then63, label %if.end64, !dbg !7104

if.then63:                                        ; preds = %if.else61
  %87 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7105
  %88 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7106
  store %union.tree_node* %87, %union.tree_node** %88, align 8, !dbg !7107
  br label %if.end64, !dbg !7108

if.end64:                                         ; preds = %if.then63, %if.else61
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then57
  br label %if.end67, !dbg !7109

if.else66:                                        ; preds = %if.else46
  store i32 0, i32* %res, align 4, !dbg !7110
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.end65
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end45
  br label %sw.epilog, !dbg !7111

sw.bb69:                                          ; preds = %entry
  %89 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !7112
  %base70 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !7112
  %90 = bitcast %struct.tree_base* %base70 to i64*, !dbg !7112
  %bf.load71 = load i64, i64* %90, align 8, !dbg !7112
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !7112
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !7112
  %cmp74 = icmp eq i32 %bf.cast73, 141, !dbg !7114
  br i1 %cmp74, label %if.then75, label %if.else97, !dbg !7115

if.then75:                                        ; preds = %sw.bb69
  %91 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !7116
  %base76 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !7116
  %92 = bitcast %struct.tree_base* %base76 to i64*, !dbg !7116
  %bf.load77 = load i64, i64* %92, align 8, !dbg !7116
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !7116
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !7116
  %cmp80 = icmp eq i32 %bf.cast79, 141, !dbg !7119
  br i1 %cmp80, label %if.then81, label %if.end83, !dbg !7120

if.then81:                                        ; preds = %if.then75
  %93 = load i32, i32* %limit.addr, align 4, !dbg !7121
  %inc82 = add nsw i32 %93, 1, !dbg !7121
  store i32 %inc82, i32* %limit.addr, align 4, !dbg !7121
  br label %if.end83, !dbg !7122

if.end83:                                         ; preds = %if.then81, %if.then75
  %94 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7123
  %95 = load %union.tree_node*, %union.tree_node** %rhs0.addr, align 8, !dbg !7124
  %ssa_name84 = bitcast %union.tree_node* %95 to %struct.tree_ssa_name*, !dbg !7124
  %def_stmt85 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name84, i32 0, i32 2, !dbg !7124
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt85, align 8, !dbg !7124
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %halting_phi.addr, align 8, !dbg !7125
  %98 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7126
  %99 = load i32, i32* %limit.addr, align 4, !dbg !7127
  %call86 = call i32 @follow_ssa_edge(%struct.loop* %94, %union.gimple_statement_d* %96, %union.gimple_statement_d* %97, %union.tree_node** %98, i32 %99), !dbg !7128
  store i32 %call86, i32* %res, align 4, !dbg !7129
  %100 = load i32, i32* %res, align 4, !dbg !7130
  %cmp87 = icmp eq i32 %100, 1, !dbg !7132
  br i1 %cmp87, label %if.then88, label %if.else92, !dbg !7133

if.then88:                                        ; preds = %if.end83
  %101 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7134
  %num89 = getelementptr inbounds %struct.loop, %struct.loop* %101, i32 0, i32 0, !dbg !7135
  %102 = load i32, i32* %num89, align 8, !dbg !7135
  %103 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7136
  %104 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7137
  %105 = load %union.tree_node*, %union.tree_node** %104, align 8, !dbg !7138
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7139
  %call90 = call %union.tree_node* @chrec_convert(%union.tree_node* %103, %union.tree_node* %105, %union.gimple_statement_d* %106), !dbg !7140
  %107 = load %union.tree_node*, %union.tree_node** %rhs1.addr, align 8, !dbg !7141
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7142
  %call91 = call %union.tree_node* @add_to_evolution(i32 %102, %union.tree_node* %call90, i32 64, %union.tree_node* %107, %union.gimple_statement_d* %108), !dbg !7143
  %109 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7144
  store %union.tree_node* %call91, %union.tree_node** %109, align 8, !dbg !7145
  br label %if.end96, !dbg !7146

if.else92:                                        ; preds = %if.end83
  %110 = load i32, i32* %res, align 4, !dbg !7147
  %cmp93 = icmp eq i32 %110, 2, !dbg !7149
  br i1 %cmp93, label %if.then94, label %if.end95, !dbg !7150

if.then94:                                        ; preds = %if.else92
  %111 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7151
  %112 = load %union.tree_node**, %union.tree_node*** %evolution_of_loop.addr, align 8, !dbg !7152
  store %union.tree_node* %111, %union.tree_node** %112, align 8, !dbg !7153
  br label %if.end95, !dbg !7154

if.end95:                                         ; preds = %if.then94, %if.else92
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then88
  br label %if.end98, !dbg !7155

if.else97:                                        ; preds = %sw.bb69
  store i32 0, i32* %res, align 4, !dbg !7156
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.end96
  br label %sw.epilog, !dbg !7157

sw.default:                                       ; preds = %entry
  store i32 0, i32* %res, align 4, !dbg !7158
  br label %sw.epilog, !dbg !7159

sw.epilog:                                        ; preds = %sw.default, %if.end98, %if.end68
  %113 = load i32, i32* %res, align 4, !dbg !7160
  ret i32 %113, !dbg !7161
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @add_to_evolution(i32 %loop_nb, %union.tree_node* %chrec_before, i32 %code, %union.tree_node* %to_add, %union.gimple_statement_d* %at_stmt) #0 !dbg !7162 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop_nb.addr = alloca i32, align 4
  %chrec_before.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %to_add.addr = alloca %union.tree_node*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store i32 %loop_nb, i32* %loop_nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nb.addr, metadata !7165, metadata !DIExpression()), !dbg !7166
  store %union.tree_node* %chrec_before, %union.tree_node** %chrec_before.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_before.addr, metadata !7167, metadata !DIExpression()), !dbg !7168
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  store %union.tree_node* %to_add, %union.tree_node** %to_add.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_add.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !7173, metadata !DIExpression()), !dbg !7174
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7175, metadata !DIExpression()), !dbg !7176
  %0 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7177
  %call = call %union.tree_node* @chrec_type(%union.tree_node* %0), !dbg !7178
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !7176
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7179, metadata !DIExpression()), !dbg !7180
  store %union.tree_node* null, %union.tree_node** %res, align 8, !dbg !7180
  %1 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7181
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !7183
  br i1 %cmp, label %if.then, label %if.end, !dbg !7184

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7185
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7186
  br label %return, !dbg !7186

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7187
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7187
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7187
  %bf.load = load i64, i64* %4, align 8, !dbg !7187
  %bf.clear = and i64 %bf.load, 65535, !dbg !7187
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7187
  %cmp1 = icmp eq i32 %bf.cast, 146, !dbg !7189
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7190

if.then2:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7191
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !7192
  br label %return, !dbg !7192

if.end3:                                          ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7193
  %tobool = icmp ne %struct._IO_FILE* %6, null, !dbg !7193
  br i1 %tobool, label %land.lhs.true, label %if.end11, !dbg !7195

land.lhs.true:                                    ; preds = %if.end3
  %7 = load i32, i32* @dump_flags, align 4, !dbg !7196
  %and = and i32 %7, 8, !dbg !7197
  %tobool4 = icmp ne i32 %and, 0, !dbg !7197
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !7198

if.then5:                                         ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7199
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0)), !dbg !7201
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7202
  %10 = load i32, i32* %loop_nb.addr, align 4, !dbg !7203
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %10), !dbg !7204
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7205
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i64 0, i64 0)), !dbg !7206
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7207
  %13 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7208
  call void @print_generic_expr(%struct._IO_FILE* %12, %union.tree_node* %13, i32 0), !dbg !7209
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7210
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i64 0, i64 0)), !dbg !7211
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7212
  %16 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7213
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %16, i32 0), !dbg !7214
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7215
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !7216
  br label %if.end11, !dbg !7217

if.end11:                                         ; preds = %if.then5, %land.lhs.true, %if.end3
  %18 = load i32, i32* %code.addr, align 4, !dbg !7218
  %cmp12 = icmp eq i32 %18, 64, !dbg !7220
  br i1 %cmp12, label %if.then13, label %if.end22, !dbg !7221

if.then13:                                        ; preds = %if.end11
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7222
  %20 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7223
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7224
  %base14 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7224
  %22 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7224
  %bf.load15 = load i64, i64* %22, align 8, !dbg !7224
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7224
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7224
  %cmp18 = icmp eq i32 %bf.cast17, 9, !dbg !7224
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !7224

cond.true:                                        ; preds = %if.then13
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7225
  %call19 = call %union.tree_node* @build_real(%union.tree_node* %23, %struct.real_value* byval(%struct.real_value) align 8 @dconstm1), !dbg !7226
  br label %cond.end, !dbg !7224

cond.false:                                       ; preds = %if.then13
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7227
  %call20 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %24, i64 -1), !dbg !7228
  br label %cond.end, !dbg !7224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call19, %cond.true ], [ %call20, %cond.false ], !dbg !7224
  %call21 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %cond), !dbg !7229
  store %union.tree_node* %call21, %union.tree_node** %to_add.addr, align 8, !dbg !7230
  br label %if.end22, !dbg !7231

if.end22:                                         ; preds = %cond.end, %if.end11
  %25 = load i32, i32* %loop_nb.addr, align 4, !dbg !7232
  %26 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7233
  %27 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7234
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7235
  %call23 = call %union.tree_node* @add_to_evolution_1(i32 %25, %union.tree_node* %26, %union.tree_node* %27, %union.gimple_statement_d* %28), !dbg !7236
  store %union.tree_node* %call23, %union.tree_node** %res, align 8, !dbg !7237
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7238
  %tobool24 = icmp ne %struct._IO_FILE* %29, null, !dbg !7238
  br i1 %tobool24, label %land.lhs.true25, label %if.end31, !dbg !7240

land.lhs.true25:                                  ; preds = %if.end22
  %30 = load i32, i32* @dump_flags, align 4, !dbg !7241
  %and26 = and i32 %30, 8, !dbg !7242
  %tobool27 = icmp ne i32 %and26, 0, !dbg !7242
  br i1 %tobool27, label %if.then28, label %if.end31, !dbg !7243

if.then28:                                        ; preds = %land.lhs.true25
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7244
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)), !dbg !7246
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7247
  %33 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7248
  call void @print_generic_expr(%struct._IO_FILE* %32, %union.tree_node* %33, i32 0), !dbg !7249
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7250
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)), !dbg !7251
  br label %if.end31, !dbg !7252

if.end31:                                         ; preds = %if.then28, %land.lhs.true25, %if.end22
  %35 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7253
  store %union.tree_node* %35, %union.tree_node** %retval, align 8, !dbg !7254
  br label %return, !dbg !7254

return:                                           ; preds = %if.end31, %if.then2, %if.then
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7255
  ret %union.tree_node* %36, !dbg !7255
}

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @add_to_evolution_1(i32 %loop_nb, %union.tree_node* %chrec_before, %union.tree_node* %to_add, %union.gimple_statement_d* %at_stmt) #0 !dbg !7256 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop_nb.addr = alloca i32, align 4
  %chrec_before.addr = alloca %union.tree_node*, align 8
  %to_add.addr = alloca %union.tree_node*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %left = alloca %union.tree_node*, align 8
  %right = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %chloop = alloca %struct.loop*, align 8
  %var = alloca i32, align 4
  store i32 %loop_nb, i32* %loop_nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nb.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  store %union.tree_node* %chrec_before, %union.tree_node** %chrec_before.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_before.addr, metadata !7261, metadata !DIExpression()), !dbg !7262
  store %union.tree_node* %to_add, %union.tree_node** %to_add.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_add.addr, metadata !7263, metadata !DIExpression()), !dbg !7264
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7267, metadata !DIExpression()), !dbg !7268
  call void @llvm.dbg.declare(metadata %union.tree_node** %left, metadata !7269, metadata !DIExpression()), !dbg !7270
  call void @llvm.dbg.declare(metadata %union.tree_node** %right, metadata !7271, metadata !DIExpression()), !dbg !7272
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !7273, metadata !DIExpression()), !dbg !7274
  %0 = load i32, i32* %loop_nb.addr, align 4, !dbg !7275
  %call = call %struct.loop* @get_loop(i32 %0), !dbg !7276
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !7274
  call void @llvm.dbg.declare(metadata %struct.loop** %chloop, metadata !7277, metadata !DIExpression()), !dbg !7278
  %1 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7279
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7279
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7279
  %bf.load = load i64, i64* %2, align 8, !dbg !7279
  %bf.clear = and i64 %bf.load, 65535, !dbg !7279
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7279
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
  ], !dbg !7280

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7281
  %call1 = call %struct.loop* @get_chrec_loop(%union.tree_node* %3), !dbg !7283
  store %struct.loop* %call1, %struct.loop** %chloop, align 8, !dbg !7284
  %4 = load %struct.loop*, %struct.loop** %chloop, align 8, !dbg !7285
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7287
  %cmp = icmp eq %struct.loop* %4, %5, !dbg !7288
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7289

lor.lhs.false:                                    ; preds = %sw.bb
  %6 = load %struct.loop*, %struct.loop** %chloop, align 8, !dbg !7290
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7291
  %call2 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %6, %struct.loop* %7), !dbg !7292
  %conv = zext i8 %call2 to i32, !dbg !7292
  %tobool = icmp ne i32 %conv, 0, !dbg !7292
  br i1 %tobool, label %if.then, label %if.else28, !dbg !7293

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  call void @llvm.dbg.declare(metadata i32* %var, metadata !7294, metadata !DIExpression()), !dbg !7296
  %8 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7297
  %call3 = call %union.tree_node* @chrec_type(%union.tree_node* %8), !dbg !7298
  store %union.tree_node* %call3, %union.tree_node** %type, align 8, !dbg !7299
  %9 = load %struct.loop*, %struct.loop** %chloop, align 8, !dbg !7300
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7302
  %cmp4 = icmp ne %struct.loop* %9, %10, !dbg !7303
  br i1 %cmp4, label %if.then6, label %if.else, !dbg !7304

if.then6:                                         ; preds = %if.then
  %11 = load i32, i32* %loop_nb.addr, align 4, !dbg !7305
  store i32 %11, i32* %var, align 4, !dbg !7307
  %12 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7308
  store %union.tree_node* %12, %union.tree_node** %left, align 8, !dbg !7309
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7310
  %base7 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7310
  %14 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7310
  %bf.load8 = load i64, i64* %14, align 8, !dbg !7310
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7310
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7310
  %cmp11 = icmp eq i32 %bf.cast10, 9, !dbg !7310
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !7310

cond.true:                                        ; preds = %if.then6
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7311
  %call13 = call %union.tree_node* @build_real(%union.tree_node* %15, %struct.real_value* byval(%struct.real_value) align 8 @dconst0), !dbg !7312
  br label %cond.end, !dbg !7310

cond.false:                                       ; preds = %if.then6
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7313
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* %16, i64 0), !dbg !7314
  br label %cond.end, !dbg !7310

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call13, %cond.true ], [ %call14, %cond.false ], !dbg !7310
  store %union.tree_node* %cond, %union.tree_node** %right, align 8, !dbg !7315
  br label %if.end, !dbg !7316

if.else:                                          ; preds = %if.then
  %17 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7317
  %exp = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !7317
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7317
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7317
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7317
  %int_cst = bitcast %union.tree_node* %18 to %struct.tree_int_cst*, !dbg !7317
  %int_cst15 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7317
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst15, i32 0, i32 0, !dbg !7317
  %19 = load i64, i64* %low, align 8, !dbg !7317
  %conv16 = trunc i64 %19 to i32, !dbg !7317
  store i32 %conv16, i32* %var, align 4, !dbg !7319
  %20 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7320
  %exp17 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !7320
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !7320
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 1, !dbg !7320
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !7320
  store %union.tree_node* %21, %union.tree_node** %left, align 8, !dbg !7321
  %22 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7322
  %exp20 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !7322
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !7322
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 2, !dbg !7322
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !7322
  store %union.tree_node* %23, %union.tree_node** %right, align 8, !dbg !7323
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7324
  %25 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7325
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7326
  %call23 = call %union.tree_node* @chrec_convert(%union.tree_node* %24, %union.tree_node* %25, %union.gimple_statement_d* %26), !dbg !7327
  store %union.tree_node* %call23, %union.tree_node** %to_add.addr, align 8, !dbg !7328
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7329
  %28 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7330
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7331
  %call24 = call %union.tree_node* @chrec_convert_rhs(%union.tree_node* %27, %union.tree_node* %28, %union.gimple_statement_d* %29), !dbg !7332
  store %union.tree_node* %call24, %union.tree_node** %right, align 8, !dbg !7333
  %30 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7334
  %call25 = call %union.tree_node* @chrec_type(%union.tree_node* %30), !dbg !7335
  %31 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7336
  %32 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7337
  %call26 = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %call25, %union.tree_node* %31, %union.tree_node* %32), !dbg !7338
  store %union.tree_node* %call26, %union.tree_node** %right, align 8, !dbg !7339
  %33 = load i32, i32* %var, align 4, !dbg !7340
  %34 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !7341
  %35 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7342
  %call27 = call %union.tree_node* @build_polynomial_chrec(i32 %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !7343
  store %union.tree_node* %call27, %union.tree_node** %retval, align 8, !dbg !7344
  br label %return, !dbg !7344

if.else28:                                        ; preds = %lor.lhs.false
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7345
  %37 = load %struct.loop*, %struct.loop** %chloop, align 8, !dbg !7345
  %call29 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %36, %struct.loop* %37), !dbg !7345
  %tobool30 = icmp ne i8 %call29, 0, !dbg !7345
  br i1 %tobool30, label %cond.false32, label %cond.true31, !dbg !7345

cond.true31:                                      ; preds = %if.else28
  call void @fancy_abort(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 705, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7345
  br label %cond.end33, !dbg !7345

cond.false32:                                     ; preds = %if.else28
  br label %cond.end33, !dbg !7345

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !7345
  %38 = load i32, i32* %loop_nb.addr, align 4, !dbg !7347
  %39 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7348
  %exp35 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !7348
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !7348
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 1, !dbg !7348
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !7348
  %41 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7349
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7350
  %call38 = call %union.tree_node* @add_to_evolution_1(i32 %38, %union.tree_node* %40, %union.tree_node* %41, %union.gimple_statement_d* %42), !dbg !7351
  store %union.tree_node* %call38, %union.tree_node** %left, align 8, !dbg !7352
  %43 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7353
  %exp39 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !7353
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !7353
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 2, !dbg !7353
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !7353
  store %union.tree_node* %44, %union.tree_node** %right, align 8, !dbg !7354
  %45 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !7355
  %call42 = call %union.tree_node* @chrec_type(%union.tree_node* %45), !dbg !7356
  %46 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7357
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7358
  %call43 = call %union.tree_node* @chrec_convert_rhs(%union.tree_node* %call42, %union.tree_node* %46, %union.gimple_statement_d* %47), !dbg !7359
  store %union.tree_node* %call43, %union.tree_node** %right, align 8, !dbg !7360
  %48 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7361
  %exp44 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !7361
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !7361
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 0, !dbg !7361
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !7361
  %int_cst47 = bitcast %union.tree_node* %49 to %struct.tree_int_cst*, !dbg !7361
  %int_cst48 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst47, i32 0, i32 1, !dbg !7361
  %low49 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst48, i32 0, i32 0, !dbg !7361
  %50 = load i64, i64* %low49, align 8, !dbg !7361
  %conv50 = trunc i64 %50 to i32, !dbg !7361
  %51 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !7362
  %52 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7363
  %call51 = call %union.tree_node* @build_polynomial_chrec(i32 %conv50, %union.tree_node* %51, %union.tree_node* %52), !dbg !7364
  store %union.tree_node* %call51, %union.tree_node** %retval, align 8, !dbg !7365
  br label %return, !dbg !7365

sw.default:                                       ; preds = %entry
  %53 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7366
  %54 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7368
  %cmp52 = icmp eq %union.tree_node* %53, %54, !dbg !7369
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !7370

if.then54:                                        ; preds = %sw.default
  %55 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7371
  store %union.tree_node* %55, %union.tree_node** %retval, align 8, !dbg !7372
  br label %return, !dbg !7372

if.end55:                                         ; preds = %sw.default
  %56 = load %union.tree_node*, %union.tree_node** %chrec_before.addr, align 8, !dbg !7373
  store %union.tree_node* %56, %union.tree_node** %left, align 8, !dbg !7374
  %57 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !7375
  %call56 = call %union.tree_node* @chrec_type(%union.tree_node* %57), !dbg !7376
  %58 = load %union.tree_node*, %union.tree_node** %to_add.addr, align 8, !dbg !7377
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !7378
  %call57 = call %union.tree_node* @chrec_convert_rhs(%union.tree_node* %call56, %union.tree_node* %58, %union.gimple_statement_d* %59), !dbg !7379
  store %union.tree_node* %call57, %union.tree_node** %right, align 8, !dbg !7380
  %60 = load i32, i32* %loop_nb.addr, align 4, !dbg !7381
  %61 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !7382
  %62 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !7383
  %call58 = call %union.tree_node* @build_polynomial_chrec(i32 %60, %union.tree_node* %61, %union.tree_node* %62), !dbg !7384
  store %union.tree_node* %call58, %union.tree_node** %retval, align 8, !dbg !7385
  br label %return, !dbg !7385

return:                                           ; preds = %if.end55, %if.then54, %cond.end33, %if.end
  %63 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7386
  ret %union.tree_node* %63, !dbg !7386
}

declare dso_local %union.tree_node* @chrec_convert_rhs(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_polynomial_chrec(i32 %loop_num, %union.tree_node* %left, %union.tree_node* %right) #0 !dbg !7387 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop_num.addr = alloca i32, align 4
  %left.addr = alloca %union.tree_node*, align 8
  %right.addr = alloca %union.tree_node*, align 8
  %val = alloca i8, align 1
  store i32 %loop_num, i32* %loop_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_num.addr, metadata !7390, metadata !DIExpression()), !dbg !7391
  store %union.tree_node* %left, %union.tree_node** %left.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %left.addr, metadata !7392, metadata !DIExpression()), !dbg !7393
  store %union.tree_node* %right, %union.tree_node** %right.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %right.addr, metadata !7394, metadata !DIExpression()), !dbg !7395
  call void @llvm.dbg.declare(metadata i8* %val, metadata !7396, metadata !DIExpression()), !dbg !7397
  %0 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7398
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7400
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !7401
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7402

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7403
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7404
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !7405
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7406

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7407
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !7408
  br label %return, !dbg !7408

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7409
  %6 = load i32, i32* %loop_num.addr, align 4, !dbg !7411
  %call = call zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %5, i32 %6, i8* %val), !dbg !7412
  %tobool = icmp ne i8 %call, 0, !dbg !7412
  br i1 %tobool, label %lor.lhs.false2, label %if.then4, !dbg !7413

lor.lhs.false2:                                   ; preds = %if.end
  %7 = load i8, i8* %val, align 1, !dbg !7414
  %tobool3 = icmp ne i8 %7, 0, !dbg !7414
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !7415

if.then4:                                         ; preds = %lor.lhs.false2, %if.end
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7416
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7417
  br label %return, !dbg !7417

if.end5:                                          ; preds = %lor.lhs.false2
  %9 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7418
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !7418
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7418
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7418
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7418
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !7418
  %bf.load = load i64, i64* %11, align 8, !dbg !7418
  %bf.clear = and i64 %bf.load, 65535, !dbg !7418
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7418
  %cmp6 = icmp eq i32 %bf.cast, 10, !dbg !7418
  br i1 %cmp6, label %cond.true, label %lor.lhs.false7, !dbg !7418

lor.lhs.false7:                                   ; preds = %if.end5
  %12 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7418
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !7418
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !7418
  %13 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !7418
  %base10 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7418
  %14 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7418
  %bf.load11 = load i64, i64* %14, align 8, !dbg !7418
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !7418
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !7418
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !7418
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !7418

cond.true:                                        ; preds = %lor.lhs.false7, %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i64 0, i64 0), i32 143, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7418
  br label %cond.end, !dbg !7418

cond.false:                                       ; preds = %lor.lhs.false7
  br label %cond.end, !dbg !7418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7418
  %15 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7419
  %common15 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7419
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !7419
  %16 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !7419
  %base17 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7419
  %17 = bitcast %struct.tree_base* %base17 to i64*, !dbg !7419
  %bf.load18 = load i64, i64* %17, align 8, !dbg !7419
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !7419
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7419
  %cmp21 = icmp eq i32 %bf.cast20, 10, !dbg !7419
  br i1 %cmp21, label %if.then30, label %lor.lhs.false22, !dbg !7419

lor.lhs.false22:                                  ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7419
  %common23 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !7419
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !7419
  %19 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !7419
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7419
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !7419
  %bf.load26 = load i64, i64* %20, align 8, !dbg !7419
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !7419
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !7419
  %cmp29 = icmp eq i32 %bf.cast28, 12, !dbg !7419
  br i1 %cmp29, label %if.then30, label %if.else, !dbg !7421

if.then30:                                        ; preds = %lor.lhs.false22, %cond.end
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7422
  %22 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7422
  %common31 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !7422
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !7422
  %23 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !7422
  %cmp33 = icmp eq %union.tree_node* %21, %23, !dbg !7422
  br i1 %cmp33, label %cond.false35, label %cond.true34, !dbg !7422

cond.true34:                                      ; preds = %if.then30
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i64 0, i64 0), i32 147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7422
  br label %cond.end36, !dbg !7422

cond.false35:                                     ; preds = %if.then30
  br label %cond.end36, !dbg !7422

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !7422
  br label %if.end47, !dbg !7422

if.else:                                          ; preds = %lor.lhs.false22
  %24 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7423
  %common38 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !7423
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !7423
  %25 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !7423
  %26 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7423
  %common40 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7423
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7423
  %27 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7423
  %cmp42 = icmp eq %union.tree_node* %25, %27, !dbg !7423
  br i1 %cmp42, label %cond.false44, label %cond.true43, !dbg !7423

cond.true43:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i64 0, i64 0), i32 149, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7423
  br label %cond.end45, !dbg !7423

cond.false44:                                     ; preds = %if.else
  br label %cond.end45, !dbg !7423

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !7423
  br label %if.end47

if.end47:                                         ; preds = %cond.end45, %cond.end36
  %28 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7424
  %call48 = call zeroext i8 @chrec_zerop(%union.tree_node* %28), !dbg !7426
  %tobool49 = icmp ne i8 %call48, 0, !dbg !7426
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !7427

if.then50:                                        ; preds = %if.end47
  %29 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7428
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !7429
  br label %return, !dbg !7429

if.end51:                                         ; preds = %if.end47
  %30 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7430
  %common52 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !7430
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !7430
  %31 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !7430
  %32 = load i32, i32* %loop_num.addr, align 4, !dbg !7430
  %conv = zext i32 %32 to i64, !dbg !7430
  %call54 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !7430
  %33 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !7430
  %34 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !7430
  %call55 = call %union.tree_node* @build3_stat(i32 146, %union.tree_node* %31, %union.tree_node* %call54, %union.tree_node* %33, %union.tree_node* %34), !dbg !7430
  store %union.tree_node* %call55, %union.tree_node** %retval, align 8, !dbg !7431
  br label %return, !dbg !7431

return:                                           ; preds = %if.end51, %if.then50, %if.then4, %if.then
  %35 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7432
  ret %union.tree_node* %35, !dbg !7432
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @chrec_zerop(%union.tree_node* %chrec) #0 !dbg !7433 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7434, metadata !DIExpression()), !dbg !7435
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7436
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !7438
  br i1 %cmp, label %if.then, label %if.end, !dbg !7439

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7440
  br label %return, !dbg !7440

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7441
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7441
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7441
  %bf.load = load i64, i64* %2, align 8, !dbg !7441
  %bf.clear = and i64 %bf.load, 65535, !dbg !7441
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7441
  %cmp1 = icmp eq i32 %bf.cast, 23, !dbg !7443
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7444

if.then2:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7445
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !7446
  %conv = trunc i32 %call to i8, !dbg !7446
  store i8 %conv, i8* %retval, align 1, !dbg !7447
  br label %return, !dbg !7447

if.end3:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7448
  br label %return, !dbg !7448

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !7449
  ret i8 %4, !dbg !7449
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !7450 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7451, metadata !DIExpression()), !dbg !7452
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7453, metadata !DIExpression()), !dbg !7454
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7455
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7456
  store i32 %call, i32* %code, align 4, !dbg !7454
  %1 = load i32, i32* %code, align 4, !dbg !7457
  %cmp = icmp eq i32 %1, 6, !dbg !7459
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7460

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7461
  %cmp1 = icmp eq i32 %2, 8, !dbg !7462
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !7463

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7464, metadata !DIExpression()), !dbg !7466
  %3 = load i32, i32* %code, align 4, !dbg !7467
  %cmp2 = icmp eq i32 %3, 8, !dbg !7469
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7470

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7471
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !7472
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !7473
  br label %if.end, !dbg !7474

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7475
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7476
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !7477

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7478
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7478
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !7478
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7478
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7478
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !7480
  br label %sw.epilog, !dbg !7481

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7482
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !7482
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !7482
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7482
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7482
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !7483
  br label %sw.epilog, !dbg !7484

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7485
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7486
  br label %return, !dbg !7486

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !7487
  %cmp12 = icmp eq i32 %11, 1, !dbg !7489
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !7490

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7491
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !7492
  br label %return, !dbg !7492

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7493
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7494
  br label %return, !dbg !7494

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7495
  ret %union.tree_node* %14, !dbg !7495
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7496 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7497, metadata !DIExpression()), !dbg !7498
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7499, metadata !DIExpression()), !dbg !7500
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7501
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7502
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7500
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7503, metadata !DIExpression()), !dbg !7504
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7505
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7505
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7505
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7505
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7504
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7506
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7506
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7506
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7506
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7507
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7508
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7508
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7508
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7508
  ret %union.tree_node* %6, !dbg !7509
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7510 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7511, metadata !DIExpression()), !dbg !7512
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7513
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7514
  ret %union.tree_node* %call, !dbg !7515
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_name(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7516 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %res = alloca %union.tree_node*, align 8
  %def_loop = alloca %struct.loop*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7517, metadata !DIExpression()), !dbg !7518
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7519, metadata !DIExpression()), !dbg !7520
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7521, metadata !DIExpression()), !dbg !7522
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7523, metadata !DIExpression()), !dbg !7524
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7525, metadata !DIExpression()), !dbg !7526
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7527, metadata !DIExpression()), !dbg !7528
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7529, metadata !DIExpression()), !dbg !7530
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop, metadata !7531, metadata !DIExpression()), !dbg !7532
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !7533, metadata !DIExpression()), !dbg !7534
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7535
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !7535
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7535
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7535
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !7536
  store %struct.basic_block_def* %call, %struct.basic_block_def** %def_bb, align 8, !dbg !7534
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7537
  %tobool = icmp ne %struct.basic_block_def* %2, null, !dbg !7537
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7539

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7540
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 3, !dbg !7541
  %4 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !7541
  %call1 = call i32 @loop_depth(%struct.loop* %4), !dbg !7542
  %cmp = icmp eq i32 %call1, 0, !dbg !7543
  br i1 %cmp, label %if.then, label %lor.lhs.false2, !dbg !7544

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7545
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7546
  %call3 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %5, %struct.basic_block_def* %6), !dbg !7547
  %conv = zext i8 %call3 to i32, !dbg !7547
  %tobool4 = icmp ne i32 %conv, 0, !dbg !7547
  br i1 %tobool4, label %if.then, label %if.end, !dbg !7548

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %7 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7549
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !7550
  br label %return, !dbg !7550

if.end:                                           ; preds = %lor.lhs.false2
  %8 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7551
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7552
  %10 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7553
  %call5 = call %union.tree_node* @get_instantiated_value(%struct.htab* %8, %struct.basic_block_def* %9, %union.tree_node* %10), !dbg !7554
  store %union.tree_node* %call5, %union.tree_node** %res, align 8, !dbg !7555
  %11 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7556
  %tobool6 = icmp ne %union.tree_node* %11, null, !dbg !7556
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7558

if.then7:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7559
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !7560
  br label %return, !dbg !7560

if.end8:                                          ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7561
  store %union.tree_node* %13, %union.tree_node** %res, align 8, !dbg !7562
  %14 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7563
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7564
  %16 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7565
  %17 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7566
  call void @set_instantiated_value(%struct.htab* %14, %struct.basic_block_def* %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !7567
  %18 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7568
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7569
  %loop_father9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 3, !dbg !7570
  %20 = load %struct.loop*, %struct.loop** %loop_father9, align 8, !dbg !7570
  %call10 = call %struct.loop* @find_common_loop(%struct.loop* %18, %struct.loop* %20), !dbg !7571
  store %struct.loop* %call10, %struct.loop** %def_loop, align 8, !dbg !7572
  %21 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !7573
  %22 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7574
  %call11 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %21, %union.tree_node* %22), !dbg !7575
  store %union.tree_node* %call11, %union.tree_node** %res, align 8, !dbg !7576
  %23 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7577
  %base = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7577
  %24 = bitcast %struct.tree_base* %base to i64*, !dbg !7577
  %bf.load = load i64, i64* %24, align 8, !dbg !7577
  %bf.clear = and i64 %bf.load, 65535, !dbg !7577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7577
  %cmp12 = icmp eq i32 %bf.cast, 141, !dbg !7579
  br i1 %cmp12, label %land.lhs.true, label %if.else43, !dbg !7580

land.lhs.true:                                    ; preds = %if.end8
  %25 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7581
  %ssa_name14 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !7581
  %def_stmt15 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name14, i32 0, i32 2, !dbg !7581
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt15, align 8, !dbg !7581
  %call16 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %26), !dbg !7582
  %cmp17 = icmp eq %struct.loop* %call16, null, !dbg !7583
  br i1 %cmp17, label %if.then27, label %lor.lhs.false19, !dbg !7584

lor.lhs.false19:                                  ; preds = %land.lhs.true
  %27 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7585
  %ssa_name20 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !7585
  %def_stmt21 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name20, i32 0, i32 2, !dbg !7585
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt21, align 8, !dbg !7585
  %call22 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %28), !dbg !7586
  %call23 = call i32 @loop_depth(%struct.loop* %call22), !dbg !7587
  %29 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !7588
  %call24 = call i32 @loop_depth(%struct.loop* %29), !dbg !7589
  %cmp25 = icmp ugt i32 %call23, %call24, !dbg !7590
  br i1 %cmp25, label %if.then27, label %if.else43, !dbg !7591

if.then27:                                        ; preds = %lor.lhs.false19, %land.lhs.true
  %30 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7592
  %31 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7595
  %cmp28 = icmp eq %union.tree_node* %30, %31, !dbg !7596
  br i1 %cmp28, label %if.then30, label %if.else, !dbg !7597

if.then30:                                        ; preds = %if.then27
  %32 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7598
  %call31 = call %union.tree_node* @loop_closed_phi_def(%union.tree_node* %32), !dbg !7599
  store %union.tree_node* %call31, %union.tree_node** %res, align 8, !dbg !7600
  br label %if.end32, !dbg !7601

if.else:                                          ; preds = %if.then27
  %33 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7602
  store %union.tree_node* %33, %union.tree_node** %res, align 8, !dbg !7603
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then30
  %34 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7604
  %cmp33 = icmp eq %union.tree_node* %34, null, !dbg !7606
  br i1 %cmp33, label %if.then41, label %lor.lhs.false35, !dbg !7607

lor.lhs.false35:                                  ; preds = %if.end32
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7608
  %36 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7609
  %ssa_name36 = bitcast %union.tree_node* %36 to %struct.tree_ssa_name*, !dbg !7609
  %def_stmt37 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name36, i32 0, i32 2, !dbg !7609
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt37, align 8, !dbg !7609
  %call38 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %37), !dbg !7610
  %call39 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %35, %struct.basic_block_def* %call38), !dbg !7611
  %tobool40 = icmp ne i8 %call39, 0, !dbg !7611
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !7612

if.then41:                                        ; preds = %lor.lhs.false35, %if.end32
  %38 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7613
  store %union.tree_node* %38, %union.tree_node** %res, align 8, !dbg !7614
  br label %if.end42, !dbg !7615

if.end42:                                         ; preds = %if.then41, %lor.lhs.false35
  br label %if.end49, !dbg !7616

if.else43:                                        ; preds = %lor.lhs.false19, %if.end8
  %39 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7617
  %40 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7619
  %cmp44 = icmp ne %union.tree_node* %39, %40, !dbg !7620
  br i1 %cmp44, label %if.then46, label %if.end48, !dbg !7621

if.then46:                                        ; preds = %if.else43
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7622
  %42 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7623
  %43 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7624
  %44 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7625
  %45 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7626
  %46 = load i32, i32* %size_expr.addr, align 4, !dbg !7627
  %call47 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %41, %struct.loop* %42, %union.tree_node* %43, i8 zeroext %44, %struct.htab* %45, i32 %46), !dbg !7628
  store %union.tree_node* %call47, %union.tree_node** %res, align 8, !dbg !7629
  br label %if.end48, !dbg !7630

if.end48:                                         ; preds = %if.then46, %if.else43
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end42
  %47 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7631
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7632
  %49 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7633
  %50 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7634
  call void @set_instantiated_value(%struct.htab* %47, %struct.basic_block_def* %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !7635
  %51 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7636
  store %union.tree_node* %51, %union.tree_node** %retval, align 8, !dbg !7637
  br label %return, !dbg !7637

return:                                           ; preds = %if.end49, %if.then7, %if.then
  %52 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7638
  ret %union.tree_node* %52, !dbg !7638
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_poly(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7639 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %var = alloca i32, align 4
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7640, metadata !DIExpression()), !dbg !7641
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7642, metadata !DIExpression()), !dbg !7643
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7644, metadata !DIExpression()), !dbg !7645
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7646, metadata !DIExpression()), !dbg !7647
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7648, metadata !DIExpression()), !dbg !7649
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7650, metadata !DIExpression()), !dbg !7651
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7652, metadata !DIExpression()), !dbg !7653
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7654, metadata !DIExpression()), !dbg !7655
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7656
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7657
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7658
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7658
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7658
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7658
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7658
  %4 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7659
  %5 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7660
  %6 = load i32, i32* %size_expr.addr, align 4, !dbg !7661
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %3, i8 zeroext %4, %struct.htab* %5, i32 %6), !dbg !7662
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !7655
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7663
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7665
  %cmp = icmp eq %union.tree_node* %7, %8, !dbg !7666
  br i1 %cmp, label %if.then, label %if.end, !dbg !7667

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7668
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !7669
  br label %return, !dbg !7669

if.end:                                           ; preds = %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7670
  %11 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7671
  %12 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7672
  %exp1 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !7672
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7672
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !7672
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7672
  %14 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7673
  %15 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7674
  %16 = load i32, i32* %size_expr.addr, align 4, !dbg !7675
  %call4 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %10, %struct.loop* %11, %union.tree_node* %13, i8 zeroext %14, %struct.htab* %15, i32 %16), !dbg !7676
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !7677
  %17 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7678
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7680
  %cmp5 = icmp eq %union.tree_node* %17, %18, !dbg !7681
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !7682

if.then6:                                         ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7683
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !7684
  br label %return, !dbg !7684

if.end7:                                          ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7685
  %exp8 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !7685
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !7685
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !7685
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !7685
  %22 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7687
  %cmp11 = icmp ne %union.tree_node* %21, %22, !dbg !7688
  br i1 %cmp11, label %if.then16, label %lor.lhs.false, !dbg !7689

lor.lhs.false:                                    ; preds = %if.end7
  %23 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7690
  %exp12 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !7690
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !7690
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 2, !dbg !7690
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !7690
  %25 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7691
  %cmp15 = icmp ne %union.tree_node* %24, %25, !dbg !7692
  br i1 %cmp15, label %if.then16, label %if.end51, !dbg !7693

if.then16:                                        ; preds = %lor.lhs.false, %if.end7
  call void @llvm.dbg.declare(metadata i32* %var, metadata !7694, metadata !DIExpression()), !dbg !7696
  %26 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7697
  %exp17 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !7697
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !7697
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !7697
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !7697
  %int_cst = bitcast %union.tree_node* %27 to %struct.tree_int_cst*, !dbg !7697
  %int_cst20 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7697
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst20, i32 0, i32 0, !dbg !7697
  %28 = load i64, i64* %low, align 8, !dbg !7697
  %conv = trunc i64 %28 to i32, !dbg !7697
  store i32 %conv, i32* %var, align 4, !dbg !7696
  %29 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7698
  %call21 = call zeroext i8 @tree_is_chrec(%union.tree_node* %29), !dbg !7700
  %conv22 = zext i8 %call21 to i32, !dbg !7700
  %tobool = icmp ne i32 %conv22, 0, !dbg !7700
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false32, !dbg !7701

land.lhs.true:                                    ; preds = %if.then16
  %30 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7702
  %exp23 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !7702
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !7702
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !7702
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !7702
  %int_cst26 = bitcast %union.tree_node* %31 to %struct.tree_int_cst*, !dbg !7702
  %int_cst27 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst26, i32 0, i32 1, !dbg !7702
  %low28 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst27, i32 0, i32 0, !dbg !7702
  %32 = load i64, i64* %low28, align 8, !dbg !7702
  %33 = load i32, i32* %var, align 4, !dbg !7703
  %conv29 = zext i32 %33 to i64, !dbg !7703
  %cmp30 = icmp ugt i64 %32, %conv29, !dbg !7704
  br i1 %cmp30, label %if.then46, label %lor.lhs.false32, !dbg !7705

lor.lhs.false32:                                  ; preds = %land.lhs.true, %if.then16
  %34 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7706
  %call33 = call zeroext i8 @tree_is_chrec(%union.tree_node* %34), !dbg !7707
  %conv34 = zext i8 %call33 to i32, !dbg !7707
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !7707
  br i1 %tobool35, label %land.lhs.true36, label %if.end47, !dbg !7708

land.lhs.true36:                                  ; preds = %lor.lhs.false32
  %35 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7709
  %exp37 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !7709
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !7709
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 0, !dbg !7709
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !7709
  %int_cst40 = bitcast %union.tree_node* %36 to %struct.tree_int_cst*, !dbg !7709
  %int_cst41 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst40, i32 0, i32 1, !dbg !7709
  %low42 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst41, i32 0, i32 0, !dbg !7709
  %37 = load i64, i64* %low42, align 8, !dbg !7709
  %38 = load i32, i32* %var, align 4, !dbg !7710
  %conv43 = zext i32 %38 to i64, !dbg !7710
  %cmp44 = icmp ugt i64 %37, %conv43, !dbg !7711
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !7712

if.then46:                                        ; preds = %land.lhs.true36, %land.lhs.true
  %39 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7713
  store %union.tree_node* %39, %union.tree_node** %retval, align 8, !dbg !7714
  br label %return, !dbg !7714

if.end47:                                         ; preds = %land.lhs.true36, %lor.lhs.false32
  %40 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7715
  %call48 = call %union.tree_node* @chrec_type(%union.tree_node* %40), !dbg !7716
  %41 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7717
  %call49 = call %union.tree_node* @chrec_convert_rhs(%union.tree_node* %call48, %union.tree_node* %41, %union.gimple_statement_d* null), !dbg !7718
  store %union.tree_node* %call49, %union.tree_node** %op1, align 8, !dbg !7719
  %42 = load i32, i32* %var, align 4, !dbg !7720
  %43 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7721
  %44 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7722
  %call50 = call %union.tree_node* @build_polynomial_chrec(i32 %42, %union.tree_node* %43, %union.tree_node* %44), !dbg !7723
  store %union.tree_node* %call50, %union.tree_node** %chrec.addr, align 8, !dbg !7724
  br label %if.end51, !dbg !7725

if.end51:                                         ; preds = %if.end47, %lor.lhs.false
  %45 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7726
  store %union.tree_node* %45, %union.tree_node** %retval, align 8, !dbg !7727
  br label %return, !dbg !7727

return:                                           ; preds = %if.end51, %if.then46, %if.then6, %if.then
  %46 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7728
  ret %union.tree_node* %46, !dbg !7728
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_binary(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i32 %code, %union.tree_node* %type, %union.tree_node* %c0, %union.tree_node* %c1, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7729 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %c0.addr = alloca %union.tree_node*, align 8
  %c1.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7734, metadata !DIExpression()), !dbg !7735
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7736, metadata !DIExpression()), !dbg !7737
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7738, metadata !DIExpression()), !dbg !7739
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7740, metadata !DIExpression()), !dbg !7741
  store %union.tree_node* %c0, %union.tree_node** %c0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c0.addr, metadata !7742, metadata !DIExpression()), !dbg !7743
  store %union.tree_node* %c1, %union.tree_node** %c1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1.addr, metadata !7744, metadata !DIExpression()), !dbg !7745
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7746, metadata !DIExpression()), !dbg !7747
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7750, metadata !DIExpression()), !dbg !7751
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7752, metadata !DIExpression()), !dbg !7753
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7754, metadata !DIExpression()), !dbg !7755
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7756
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7757
  %2 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7758
  %3 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7759
  %4 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7760
  %5 = load i32, i32* %size_expr.addr, align 4, !dbg !7761
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %2, i8 zeroext %3, %struct.htab* %4, i32 %5), !dbg !7762
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !7755
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7763
  %7 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7765
  %cmp = icmp eq %union.tree_node* %6, %7, !dbg !7766
  br i1 %cmp, label %if.then, label %if.end, !dbg !7767

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7768
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7769
  br label %return, !dbg !7769

if.end:                                           ; preds = %entry
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7770
  %10 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7771
  %11 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7772
  %12 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7773
  %13 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7774
  %14 = load i32, i32* %size_expr.addr, align 4, !dbg !7775
  %call1 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %9, %struct.loop* %10, %union.tree_node* %11, i8 zeroext %12, %struct.htab* %13, i32 %14), !dbg !7776
  store %union.tree_node* %call1, %union.tree_node** %op1, align 8, !dbg !7777
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7778
  %16 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7780
  %cmp2 = icmp eq %union.tree_node* %15, %16, !dbg !7781
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !7782

if.then3:                                         ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7783
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !7784
  br label %return, !dbg !7784

if.end4:                                          ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7785
  %19 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7787
  %cmp5 = icmp ne %union.tree_node* %18, %19, !dbg !7788
  br i1 %cmp5, label %if.then7, label %lor.lhs.false, !dbg !7789

lor.lhs.false:                                    ; preds = %if.end4
  %20 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7790
  %21 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7791
  %cmp6 = icmp ne %union.tree_node* %20, %21, !dbg !7792
  br i1 %cmp6, label %if.then7, label %if.end15, !dbg !7793

if.then7:                                         ; preds = %lor.lhs.false, %if.end4
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7794
  %23 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7796
  %call8 = call %union.tree_node* @chrec_convert(%union.tree_node* %22, %union.tree_node* %23, %union.gimple_statement_d* null), !dbg !7797
  store %union.tree_node* %call8, %union.tree_node** %op0, align 8, !dbg !7798
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7799
  %25 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7800
  %call9 = call %union.tree_node* @chrec_convert_rhs(%union.tree_node* %24, %union.tree_node* %25, %union.gimple_statement_d* null), !dbg !7801
  store %union.tree_node* %call9, %union.tree_node** %op1, align 8, !dbg !7802
  %26 = load i32, i32* %code.addr, align 4, !dbg !7803
  switch i32 %26, label %sw.default [
    i32 66, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb11
    i32 65, label %sw.bb13
  ], !dbg !7804

sw.bb:                                            ; preds = %if.then7, %if.then7
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7805
  %28 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7807
  %29 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7808
  %call10 = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %27, %union.tree_node* %28, %union.tree_node* %29), !dbg !7809
  store %union.tree_node* %call10, %union.tree_node** %retval, align 8, !dbg !7810
  br label %return, !dbg !7810

sw.bb11:                                          ; preds = %if.then7
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7811
  %31 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7812
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7813
  %call12 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !7814
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !7815
  br label %return, !dbg !7815

sw.bb13:                                          ; preds = %if.then7
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7816
  %34 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7817
  %35 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7818
  %call14 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !7819
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !7820
  br label %return, !dbg !7820

sw.default:                                       ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 2316, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7821
  br label %sw.epilog, !dbg !7822

sw.epilog:                                        ; preds = %sw.default
  br label %if.end15, !dbg !7823

if.end15:                                         ; preds = %sw.epilog, %lor.lhs.false
  %36 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7824
  %tobool = icmp ne %union.tree_node* %36, null, !dbg !7824
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7824

cond.true:                                        ; preds = %if.end15
  %37 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7825
  br label %cond.end, !dbg !7824

cond.false:                                       ; preds = %if.end15
  %38 = load i32, i32* %code.addr, align 4, !dbg !7826
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7826
  %40 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7826
  %41 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7826
  %call16 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %38, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41), !dbg !7826
  br label %cond.end, !dbg !7824

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %37, %cond.true ], [ %call16, %cond.false ], !dbg !7824
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !7827
  br label %return, !dbg !7827

return:                                           ; preds = %cond.end, %sw.bb13, %sw.bb11, %sw.bb, %if.then3, %if.then
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7828
  ret %union.tree_node* %42, !dbg !7828
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_convert(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, %union.tree_node* %type, %union.tree_node* %op, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7829 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7832, metadata !DIExpression()), !dbg !7833
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7834, metadata !DIExpression()), !dbg !7835
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7836, metadata !DIExpression()), !dbg !7837
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7838, metadata !DIExpression()), !dbg !7839
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7840, metadata !DIExpression()), !dbg !7841
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7844, metadata !DIExpression()), !dbg !7845
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7846, metadata !DIExpression()), !dbg !7847
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7848, metadata !DIExpression()), !dbg !7849
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7850
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7851
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7852
  %3 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7853
  %4 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7854
  %5 = load i32, i32* %size_expr.addr, align 4, !dbg !7855
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %2, i8 zeroext %3, %struct.htab* %4, i32 %5), !dbg !7856
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !7849
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7857
  %7 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7859
  %cmp = icmp eq %union.tree_node* %6, %7, !dbg !7860
  br i1 %cmp, label %if.then, label %if.end, !dbg !7861

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7862
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7863
  br label %return, !dbg !7863

if.end:                                           ; preds = %entry
  %9 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7864
  %tobool = icmp ne i8 %9, 0, !dbg !7864
  br i1 %tobool, label %if.then1, label %if.end6, !dbg !7866

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !7867, metadata !DIExpression()), !dbg !7869
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7870
  %11 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7871
  %call2 = call %union.tree_node* @chrec_convert_aggressive(%union.tree_node* %10, %union.tree_node* %11), !dbg !7872
  store %union.tree_node* %call2, %union.tree_node** %tmp, align 8, !dbg !7869
  %12 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7873
  %tobool3 = icmp ne %union.tree_node* %12, null, !dbg !7873
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !7875

if.then4:                                         ; preds = %if.then1
  %13 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7876
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7877
  br label %return, !dbg !7877

if.end5:                                          ; preds = %if.then1
  br label %if.end6, !dbg !7878

if.end6:                                          ; preds = %if.end5, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7879
  %tobool7 = icmp ne %union.tree_node* %14, null, !dbg !7879
  br i1 %tobool7, label %land.lhs.true, label %if.end10, !dbg !7881

land.lhs.true:                                    ; preds = %if.end6
  %15 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7882
  %16 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7883
  %cmp8 = icmp eq %union.tree_node* %15, %16, !dbg !7884
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !7885

if.then9:                                         ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7886
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !7887
  br label %return, !dbg !7887

if.end10:                                         ; preds = %land.lhs.true, %if.end6
  %18 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7888
  %tobool11 = icmp ne i8 %18, 0, !dbg !7888
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !7890

if.then12:                                        ; preds = %if.end10
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7891
  %20 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7891
  %call13 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %19, %union.tree_node* %20), !dbg !7891
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !7892
  br label %return, !dbg !7892

if.end14:                                         ; preds = %if.end10
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7893
  %22 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7894
  %call15 = call %union.tree_node* @chrec_convert(%union.tree_node* %21, %union.tree_node* %22, %union.gimple_statement_d* null), !dbg !7895
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !7896
  br label %return, !dbg !7896

return:                                           ; preds = %if.end14, %if.then12, %if.then9, %if.then4, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7897
  ret %union.tree_node* %23, !dbg !7897
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_not(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i32 %code, %union.tree_node* %type, %union.tree_node* %op, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7898 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7901, metadata !DIExpression()), !dbg !7902
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7903, metadata !DIExpression()), !dbg !7904
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7905, metadata !DIExpression()), !dbg !7906
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7907, metadata !DIExpression()), !dbg !7908
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7909, metadata !DIExpression()), !dbg !7910
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7911, metadata !DIExpression()), !dbg !7912
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7913, metadata !DIExpression()), !dbg !7914
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7915, metadata !DIExpression()), !dbg !7916
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7917, metadata !DIExpression()), !dbg !7918
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7919, metadata !DIExpression()), !dbg !7920
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7921
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7922
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7923
  %3 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7924
  %4 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7925
  %5 = load i32, i32* %size_expr.addr, align 4, !dbg !7926
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %2, i8 zeroext %3, %struct.htab* %4, i32 %5), !dbg !7927
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !7920
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7928
  %7 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7930
  %cmp = icmp eq %union.tree_node* %6, %7, !dbg !7931
  br i1 %cmp, label %if.then, label %if.end, !dbg !7932

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7933
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7934
  br label %return, !dbg !7934

if.end:                                           ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7935
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7937
  %cmp1 = icmp ne %union.tree_node* %9, %10, !dbg !7938
  br i1 %cmp1, label %if.then2, label %if.end9, !dbg !7939

if.then2:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7940
  %12 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7942
  %call3 = call %union.tree_node* @chrec_convert(%union.tree_node* %11, %union.tree_node* %12, %union.gimple_statement_d* null), !dbg !7943
  store %union.tree_node* %call3, %union.tree_node** %op0, align 8, !dbg !7944
  %13 = load i32, i32* %code.addr, align 4, !dbg !7945
  switch i32 %13, label %sw.default [
    i32 90, label %sw.bb
    i32 79, label %sw.bb6
  ], !dbg !7946

sw.bb:                                            ; preds = %if.then2
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7947
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7949
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !7949
  %call4 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %15, %union.tree_node* %16), !dbg !7949
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7950
  %call5 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %14, %union.tree_node* %call4, %union.tree_node* %17), !dbg !7951
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !7952
  br label %return, !dbg !7952

sw.bb6:                                           ; preds = %if.then2
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7953
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7954
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !7954
  %call7 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %19, %union.tree_node* %20), !dbg !7954
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7955
  %call8 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %18, %union.tree_node* %call7, %union.tree_node* %21), !dbg !7956
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !7957
  br label %return, !dbg !7957

sw.default:                                       ; preds = %if.then2
  call void @fancy_abort(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 2412, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7958
  br label %sw.epilog, !dbg !7959

sw.epilog:                                        ; preds = %sw.default
  br label %if.end9, !dbg !7960

if.end9:                                          ; preds = %sw.epilog, %if.end
  %22 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7961
  %tobool = icmp ne %union.tree_node* %22, null, !dbg !7961
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7961

cond.true:                                        ; preds = %if.end9
  %23 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7962
  br label %cond.end, !dbg !7961

cond.false:                                       ; preds = %if.end9
  %24 = load i32, i32* %code.addr, align 4, !dbg !7963
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7963
  %26 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7963
  %call10 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !7963
  br label %cond.end, !dbg !7961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %23, %cond.true ], [ %call10, %cond.false ], !dbg !7961
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !7964
  br label %return, !dbg !7964

return:                                           ; preds = %cond.end, %sw.bb6, %sw.bb, %if.then
  %27 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7965
  ret %union.tree_node* %27, !dbg !7965
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_3(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !7966 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !7967, metadata !DIExpression()), !dbg !7968
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !7969, metadata !DIExpression()), !dbg !7970
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7971, metadata !DIExpression()), !dbg !7972
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !7973, metadata !DIExpression()), !dbg !7974
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !7977, metadata !DIExpression()), !dbg !7978
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7979, metadata !DIExpression()), !dbg !7980
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !7981, metadata !DIExpression()), !dbg !7982
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7983, metadata !DIExpression()), !dbg !7984
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7985
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !7986
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7987
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7987
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7987
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7987
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7987
  %4 = load i8, i8* %fold_conversions.addr, align 1, !dbg !7988
  %5 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !7989
  %6 = load i32, i32* %size_expr.addr, align 4, !dbg !7990
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %3, i8 zeroext %4, %struct.htab* %5, i32 %6), !dbg !7991
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !7984
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7992
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7994
  %cmp = icmp eq %union.tree_node* %7, %8, !dbg !7995
  br i1 %cmp, label %if.then, label %if.end, !dbg !7996

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !7997
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !7998
  br label %return, !dbg !7998

if.end:                                           ; preds = %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !7999
  %11 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !8000
  %12 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8001
  %exp1 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !8001
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8001
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !8001
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8001
  %14 = load i8, i8* %fold_conversions.addr, align 1, !dbg !8002
  %15 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8003
  %16 = load i32, i32* %size_expr.addr, align 4, !dbg !8004
  %call4 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %10, %struct.loop* %11, %union.tree_node* %13, i8 zeroext %14, %struct.htab* %15, i32 %16), !dbg !8005
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !8006
  %17 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8007
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8009
  %cmp5 = icmp eq %union.tree_node* %17, %18, !dbg !8010
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8011

if.then6:                                         ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8012
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !8013
  br label %return, !dbg !8013

if.end7:                                          ; preds = %if.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !8014
  %21 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !8015
  %22 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8016
  %exp8 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !8016
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !8016
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 2, !dbg !8016
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !8016
  %24 = load i8, i8* %fold_conversions.addr, align 1, !dbg !8017
  %25 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8018
  %26 = load i32, i32* %size_expr.addr, align 4, !dbg !8019
  %call11 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %20, %struct.loop* %21, %union.tree_node* %23, i8 zeroext %24, %struct.htab* %25, i32 %26), !dbg !8020
  store %union.tree_node* %call11, %union.tree_node** %op2, align 8, !dbg !8021
  %27 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !8022
  %28 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8024
  %cmp12 = icmp eq %union.tree_node* %27, %28, !dbg !8025
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !8026

if.then13:                                        ; preds = %if.end7
  %29 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8027
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !8028
  br label %return, !dbg !8028

if.end14:                                         ; preds = %if.end7
  %30 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8029
  %31 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8031
  %exp15 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !8031
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !8031
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !8031
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !8031
  %cmp18 = icmp eq %union.tree_node* %30, %32, !dbg !8032
  br i1 %cmp18, label %land.lhs.true, label %if.end29, !dbg !8033

land.lhs.true:                                    ; preds = %if.end14
  %33 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8034
  %34 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8035
  %exp19 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !8035
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !8035
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 1, !dbg !8035
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !8035
  %cmp22 = icmp eq %union.tree_node* %33, %35, !dbg !8036
  br i1 %cmp22, label %land.lhs.true23, label %if.end29, !dbg !8037

land.lhs.true23:                                  ; preds = %land.lhs.true
  %36 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !8038
  %37 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8039
  %exp24 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !8039
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !8039
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 2, !dbg !8039
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !8039
  %cmp27 = icmp eq %union.tree_node* %36, %38, !dbg !8040
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !8041

if.then28:                                        ; preds = %land.lhs.true23
  %39 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8042
  store %union.tree_node* %39, %union.tree_node** %retval, align 8, !dbg !8043
  br label %return, !dbg !8043

if.end29:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.end14
  %40 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8044
  %base = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !8044
  %41 = bitcast %struct.tree_base* %base to i64*, !dbg !8044
  %bf.load = load i64, i64* %41, align 8, !dbg !8044
  %bf.clear = and i64 %bf.load, 65535, !dbg !8044
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8044
  %42 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8044
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !8044
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8044
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8044
  %44 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8044
  %45 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8044
  %46 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !8044
  %call30 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 %bf.cast, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45, %union.tree_node* %46), !dbg !8044
  store %union.tree_node* %call30, %union.tree_node** %retval, align 8, !dbg !8045
  br label %return, !dbg !8045

return:                                           ; preds = %if.end29, %if.then28, %if.then13, %if.then6, %if.then
  %47 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8046
  ret %union.tree_node* %47, !dbg !8046
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_2(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !8047 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !8048, metadata !DIExpression()), !dbg !8049
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !8050, metadata !DIExpression()), !dbg !8051
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !8052, metadata !DIExpression()), !dbg !8053
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !8054, metadata !DIExpression()), !dbg !8055
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !8056, metadata !DIExpression()), !dbg !8057
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !8058, metadata !DIExpression()), !dbg !8059
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !8060, metadata !DIExpression()), !dbg !8061
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8062, metadata !DIExpression()), !dbg !8063
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !8064
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !8065
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8066
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8066
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8066
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8066
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8066
  %4 = load i8, i8* %fold_conversions.addr, align 1, !dbg !8067
  %5 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8068
  %6 = load i32, i32* %size_expr.addr, align 4, !dbg !8069
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %3, i8 zeroext %4, %struct.htab* %5, i32 %6), !dbg !8070
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !8063
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8071
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8073
  %cmp = icmp eq %union.tree_node* %7, %8, !dbg !8074
  br i1 %cmp, label %if.then, label %if.end, !dbg !8075

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8076
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !8077
  br label %return, !dbg !8077

if.end:                                           ; preds = %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !8078
  %11 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !8079
  %12 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8080
  %exp1 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !8080
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8080
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !8080
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8080
  %14 = load i8, i8* %fold_conversions.addr, align 1, !dbg !8081
  %15 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8082
  %16 = load i32, i32* %size_expr.addr, align 4, !dbg !8083
  %call4 = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %10, %struct.loop* %11, %union.tree_node* %13, i8 zeroext %14, %struct.htab* %15, i32 %16), !dbg !8084
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !8085
  %17 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8086
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8088
  %cmp5 = icmp eq %union.tree_node* %17, %18, !dbg !8089
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8090

if.then6:                                         ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8091
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !8092
  br label %return, !dbg !8092

if.end7:                                          ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8093
  %21 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8095
  %exp8 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !8095
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !8095
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !8095
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !8095
  %cmp11 = icmp eq %union.tree_node* %20, %22, !dbg !8096
  br i1 %cmp11, label %land.lhs.true, label %if.end17, !dbg !8097

land.lhs.true:                                    ; preds = %if.end7
  %23 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8098
  %24 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8099
  %exp12 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !8099
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !8099
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !8099
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !8099
  %cmp15 = icmp eq %union.tree_node* %23, %25, !dbg !8100
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !8101

if.then16:                                        ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8102
  store %union.tree_node* %26, %union.tree_node** %retval, align 8, !dbg !8103
  br label %return, !dbg !8103

if.end17:                                         ; preds = %land.lhs.true, %if.end7
  %27 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8104
  %base = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8104
  %28 = bitcast %struct.tree_base* %base to i64*, !dbg !8104
  %bf.load = load i64, i64* %28, align 8, !dbg !8104
  %bf.clear = and i64 %bf.load, 65535, !dbg !8104
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8104
  %29 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8104
  %common = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !8104
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8104
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8104
  %31 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8104
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8104
  %call18 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %bf.cast, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !8104
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !8105
  br label %return, !dbg !8105

return:                                           ; preds = %if.end17, %if.then16, %if.then6, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8106
  ret %union.tree_node* %33, !dbg !8106
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_scev_1(%struct.basic_block_def* %instantiate_below, %struct.loop* %evolution_loop, %union.tree_node* %chrec, i8 zeroext %fold_conversions, %struct.htab* %cache, i32 %size_expr) #0 !dbg !8107 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %instantiate_below.addr = alloca %struct.basic_block_def*, align 8
  %evolution_loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %fold_conversions.addr = alloca i8, align 1
  %cache.addr = alloca %struct.htab*, align 8
  %size_expr.addr = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %instantiate_below, %struct.basic_block_def** %instantiate_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiate_below.addr, metadata !8108, metadata !DIExpression()), !dbg !8109
  store %struct.loop* %evolution_loop, %struct.loop** %evolution_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %evolution_loop.addr, metadata !8110, metadata !DIExpression()), !dbg !8111
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !8112, metadata !DIExpression()), !dbg !8113
  store i8 %fold_conversions, i8* %fold_conversions.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_conversions.addr, metadata !8114, metadata !DIExpression()), !dbg !8115
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !8116, metadata !DIExpression()), !dbg !8117
  store i32 %size_expr, i32* %size_expr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_expr.addr, metadata !8118, metadata !DIExpression()), !dbg !8119
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8120, metadata !DIExpression()), !dbg !8121
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiate_below.addr, align 8, !dbg !8122
  %1 = load %struct.loop*, %struct.loop** %evolution_loop.addr, align 8, !dbg !8123
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8124
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8124
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8124
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8124
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8124
  %4 = load i8, i8* %fold_conversions.addr, align 1, !dbg !8125
  %5 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8126
  %6 = load i32, i32* %size_expr.addr, align 4, !dbg !8127
  %call = call %union.tree_node* @instantiate_scev_r(%struct.basic_block_def* %0, %struct.loop* %1, %union.tree_node* %3, i8 zeroext %4, %struct.htab* %5, i32 %6), !dbg !8128
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !8121
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8129
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8131
  %cmp = icmp eq %union.tree_node* %7, %8, !dbg !8132
  br i1 %cmp, label %if.then, label %if.end, !dbg !8133

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8134
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !8135
  br label %return, !dbg !8135

if.end:                                           ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8136
  %11 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8138
  %exp1 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !8138
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8138
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !8138
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8138
  %cmp4 = icmp eq %union.tree_node* %10, %12, !dbg !8139
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !8140

if.then5:                                         ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8141
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !8142
  br label %return, !dbg !8142

if.end6:                                          ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8143
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !8143
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !8143
  %bf.load = load i64, i64* %15, align 8, !dbg !8143
  %bf.clear = and i64 %bf.load, 65535, !dbg !8143
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8143
  %16 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8143
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !8143
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8143
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8143
  %18 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8143
  %call7 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %bf.cast, %union.tree_node* %17, %union.tree_node* %18), !dbg !8143
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !8144
  br label %return, !dbg !8144

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8145
  ret %union.tree_node* %19, !dbg !8145
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_instantiated_value(%struct.htab* %cache, %struct.basic_block_def* %instantiated_below, %union.tree_node* %version) #0 !dbg !8146 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %cache.addr = alloca %struct.htab*, align 8
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %version.addr = alloca %union.tree_node*, align 8
  %info = alloca %struct.scev_info_str*, align 8
  %pattern = alloca %struct.scev_info_str, align 8
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !8149, metadata !DIExpression()), !dbg !8150
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !8151, metadata !DIExpression()), !dbg !8152
  store %union.tree_node* %version, %union.tree_node** %version.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %version.addr, metadata !8153, metadata !DIExpression()), !dbg !8154
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %info, metadata !8155, metadata !DIExpression()), !dbg !8156
  call void @llvm.dbg.declare(metadata %struct.scev_info_str* %pattern, metadata !8157, metadata !DIExpression()), !dbg !8158
  %0 = load %union.tree_node*, %union.tree_node** %version.addr, align 8, !dbg !8159
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %pattern, i32 0, i32 1, !dbg !8160
  store %union.tree_node* %0, %union.tree_node** %var, align 8, !dbg !8161
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !8162
  %instantiated_below1 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %pattern, i32 0, i32 0, !dbg !8163
  store %struct.basic_block_def* %1, %struct.basic_block_def** %instantiated_below1, align 8, !dbg !8164
  %2 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8165
  %3 = bitcast %struct.scev_info_str* %pattern to i8*, !dbg !8166
  %call = call i8* @htab_find(%struct.htab* %2, i8* %3), !dbg !8167
  %4 = bitcast i8* %call to %struct.scev_info_str*, !dbg !8168
  store %struct.scev_info_str* %4, %struct.scev_info_str** %info, align 8, !dbg !8169
  %5 = load %struct.scev_info_str*, %struct.scev_info_str** %info, align 8, !dbg !8170
  %tobool = icmp ne %struct.scev_info_str* %5, null, !dbg !8170
  br i1 %tobool, label %if.then, label %if.else, !dbg !8172

if.then:                                          ; preds = %entry
  %6 = load %struct.scev_info_str*, %struct.scev_info_str** %info, align 8, !dbg !8173
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %6, i32 0, i32 2, !dbg !8174
  %7 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !8174
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !8175
  br label %return, !dbg !8175

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8176
  br label %return, !dbg !8176

return:                                           ; preds = %if.else, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8177
  ret %union.tree_node* %8, !dbg !8177
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_instantiated_value(%struct.htab* %cache, %struct.basic_block_def* %instantiated_below, %union.tree_node* %version, %union.tree_node* %val) #0 !dbg !8178 {
entry:
  %cache.addr = alloca %struct.htab*, align 8
  %instantiated_below.addr = alloca %struct.basic_block_def*, align 8
  %version.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %info = alloca %struct.scev_info_str*, align 8
  %pattern = alloca %struct.scev_info_str, align 8
  %slot = alloca i8**, align 8
  store %struct.htab* %cache, %struct.htab** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %cache.addr, metadata !8181, metadata !DIExpression()), !dbg !8182
  store %struct.basic_block_def* %instantiated_below, %struct.basic_block_def** %instantiated_below.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %instantiated_below.addr, metadata !8183, metadata !DIExpression()), !dbg !8184
  store %union.tree_node* %version, %union.tree_node** %version.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %version.addr, metadata !8185, metadata !DIExpression()), !dbg !8186
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !8187, metadata !DIExpression()), !dbg !8188
  call void @llvm.dbg.declare(metadata %struct.scev_info_str** %info, metadata !8189, metadata !DIExpression()), !dbg !8190
  call void @llvm.dbg.declare(metadata %struct.scev_info_str* %pattern, metadata !8191, metadata !DIExpression()), !dbg !8192
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8193, metadata !DIExpression()), !dbg !8194
  %0 = load %union.tree_node*, %union.tree_node** %version.addr, align 8, !dbg !8195
  %var = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %pattern, i32 0, i32 1, !dbg !8196
  store %union.tree_node* %0, %union.tree_node** %var, align 8, !dbg !8197
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !8198
  %instantiated_below1 = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %pattern, i32 0, i32 0, !dbg !8199
  store %struct.basic_block_def* %1, %struct.basic_block_def** %instantiated_below1, align 8, !dbg !8200
  %2 = load %struct.htab*, %struct.htab** %cache.addr, align 8, !dbg !8201
  %3 = bitcast %struct.scev_info_str* %pattern to i8*, !dbg !8202
  %call = call i8** @htab_find_slot(%struct.htab* %2, i8* %3, i32 1), !dbg !8203
  store i8** %call, i8*** %slot, align 8, !dbg !8204
  %4 = load i8**, i8*** %slot, align 8, !dbg !8205
  %5 = load i8*, i8** %4, align 8, !dbg !8207
  %tobool = icmp ne i8* %5, null, !dbg !8207
  br i1 %tobool, label %if.end, label %if.then, !dbg !8208

if.then:                                          ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %instantiated_below.addr, align 8, !dbg !8209
  %7 = load %union.tree_node*, %union.tree_node** %version.addr, align 8, !dbg !8210
  %call2 = call %struct.scev_info_str* @new_scev_info_str(%struct.basic_block_def* %6, %union.tree_node* %7), !dbg !8211
  %8 = bitcast %struct.scev_info_str* %call2 to i8*, !dbg !8211
  %9 = load i8**, i8*** %slot, align 8, !dbg !8212
  store i8* %8, i8** %9, align 8, !dbg !8213
  br label %if.end, !dbg !8214

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8**, i8*** %slot, align 8, !dbg !8215
  %11 = load i8*, i8** %10, align 8, !dbg !8216
  %12 = bitcast i8* %11 to %struct.scev_info_str*, !dbg !8217
  store %struct.scev_info_str* %12, %struct.scev_info_str** %info, align 8, !dbg !8218
  %13 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !8219
  %14 = load %struct.scev_info_str*, %struct.scev_info_str** %info, align 8, !dbg !8220
  %chrec = getelementptr inbounds %struct.scev_info_str, %struct.scev_info_str* %14, i32 0, i32 2, !dbg !8221
  store %union.tree_node* %13, %union.tree_node** %chrec, align 8, !dbg !8222
  ret void, !dbg !8223
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @loop_closed_phi_def(%union.tree_node* %var) #0 !dbg !8224 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8227, metadata !DIExpression()), !dbg !8228
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !8229, metadata !DIExpression()), !dbg !8230
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !8231, metadata !DIExpression()), !dbg !8232
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8233, metadata !DIExpression()), !dbg !8234
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !8235, metadata !DIExpression()), !dbg !8236
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8237
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !8239
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8240

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8241
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8241
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8241
  %bf.load = load i64, i64* %2, align 8, !dbg !8241
  %bf.clear = and i64 %bf.load, 65535, !dbg !8241
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8241
  %cmp1 = icmp ne i32 %bf.cast, 141, !dbg !8242
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8243

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8244
  br label %return, !dbg !8244

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8245
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !8245
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8245
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8245
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %4), !dbg !8246
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !8247
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8248
  %call2 = call %struct.edge_def* @single_exit(%struct.loop* %5), !dbg !8249
  store %struct.edge_def* %call2, %struct.edge_def** %exit, align 8, !dbg !8250
  %6 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !8251
  %tobool = icmp ne %struct.edge_def* %6, null, !dbg !8251
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !8253

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8254
  br label %return, !dbg !8254

if.end4:                                          ; preds = %if.end
  %7 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !8255
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 1, !dbg !8257
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8257
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !8258
  %9 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !8258
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !8258
  br label %for.cond, !dbg !8259

for.cond:                                         ; preds = %for.inc, %if.end4
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8260
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8262
  %lnot = xor i1 %tobool6, true, !dbg !8262
  br i1 %lnot, label %for.body, label %for.end, !dbg !8263

for.body:                                         ; preds = %for.cond
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8264
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %phi, align 8, !dbg !8266
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8267
  %12 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !8267
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 6, !dbg !8267
  %13 = load i32, i32* %dest_idx, align 4, !dbg !8267
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %11, i32 %13), !dbg !8267
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call8), !dbg !8267
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8269
  %cmp10 = icmp eq %union.tree_node* %call9, %14, !dbg !8270
  br i1 %cmp10, label %if.then11, label %if.end14, !dbg !8271

if.then11:                                        ; preds = %for.body
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8272
  %call12 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %15), !dbg !8272
  %call13 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call12), !dbg !8272
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !8273
  br label %return, !dbg !8273

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !8274

for.inc:                                          ; preds = %if.end14
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !8275
  br label %for.cond, !dbg !8276, !llvm.loop !8277

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8279
  br label %return, !dbg !8279

return:                                           ; preds = %for.end, %if.then11, %if.then3, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8280
  ret %union.tree_node* %16, !dbg !8280
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @chrec_convert_aggressive(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gather_chrec_stats(%union.tree_node* %chrec, %struct.chrec_stats* %stats) #0 !dbg !8281 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  %stats.addr = alloca %struct.chrec_stats*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !8284, metadata !DIExpression()), !dbg !8285
  store %struct.chrec_stats* %stats, %struct.chrec_stats** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chrec_stats** %stats.addr, metadata !8286, metadata !DIExpression()), !dbg !8287
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8288
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !8288
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8290

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !8291
  %and = and i32 %1, 16, !dbg !8292
  %tobool1 = icmp ne i32 %and, 0, !dbg !8292
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8293

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8294
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i64 0, i64 0)), !dbg !8296
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8297
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8298
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %4, i32 0), !dbg !8299
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8300
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8301
  br label %if.end, !dbg !8302

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8303
  %nb_chrecs = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %6, i32 0, i32 0, !dbg !8304
  %7 = load i32, i32* %nb_chrecs, align 4, !dbg !8305
  %inc = add i32 %7, 1, !dbg !8305
  store i32 %inc, i32* %nb_chrecs, align 4, !dbg !8305
  %8 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8306
  %cmp = icmp eq %union.tree_node* %8, null, !dbg !8308
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !8309

if.then3:                                         ; preds = %if.end
  %9 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8310
  %nb_undetermined = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %9, i32 0, i32 5, !dbg !8312
  %10 = load i32, i32* %nb_undetermined, align 4, !dbg !8313
  %inc4 = add i32 %10, 1, !dbg !8313
  store i32 %inc4, i32* %nb_undetermined, align 4, !dbg !8313
  br label %if.end58, !dbg !8314

if.end5:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8315
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8315
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !8315
  %bf.load = load i64, i64* %12, align 8, !dbg !8315
  %bf.clear = and i64 %bf.load, 65535, !dbg !8315
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8315
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
  ], !dbg !8316

sw.bb:                                            ; preds = %if.end5
  %13 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8317
  %call6 = call zeroext i8 @evolution_function_is_affine_p(%union.tree_node* %13), !dbg !8320
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8320
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !8321

if.then8:                                         ; preds = %sw.bb
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8322
  %tobool9 = icmp ne %struct._IO_FILE* %14, null, !dbg !8322
  br i1 %tobool9, label %land.lhs.true10, label %if.end15, !dbg !8325

land.lhs.true10:                                  ; preds = %if.then8
  %15 = load i32, i32* @dump_flags, align 4, !dbg !8326
  %and11 = and i32 %15, 16, !dbg !8327
  %tobool12 = icmp ne i32 %and11, 0, !dbg !8327
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !8328

if.then13:                                        ; preds = %land.lhs.true10
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8329
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)), !dbg !8330
  br label %if.end15, !dbg !8330

if.end15:                                         ; preds = %if.then13, %land.lhs.true10, %if.then8
  %17 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8331
  %nb_affine = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %17, i32 0, i32 1, !dbg !8332
  %18 = load i32, i32* %nb_affine, align 4, !dbg !8333
  %inc16 = add i32 %18, 1, !dbg !8333
  store i32 %inc16, i32* %nb_affine, align 4, !dbg !8333
  br label %if.end38, !dbg !8334

if.else:                                          ; preds = %sw.bb
  %19 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8335
  %call17 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %19, i32 0), !dbg !8337
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8337
  br i1 %tobool18, label %if.then19, label %if.else28, !dbg !8338

if.then19:                                        ; preds = %if.else
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8339
  %tobool20 = icmp ne %struct._IO_FILE* %20, null, !dbg !8339
  br i1 %tobool20, label %land.lhs.true21, label %if.end26, !dbg !8342

land.lhs.true21:                                  ; preds = %if.then19
  %21 = load i32, i32* @dump_flags, align 4, !dbg !8343
  %and22 = and i32 %21, 16, !dbg !8344
  %tobool23 = icmp ne i32 %and22, 0, !dbg !8344
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !8345

if.then24:                                        ; preds = %land.lhs.true21
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8346
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0)), !dbg !8347
  br label %if.end26, !dbg !8347

if.end26:                                         ; preds = %if.then24, %land.lhs.true21, %if.then19
  %23 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8348
  %nb_affine_multivar = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %23, i32 0, i32 2, !dbg !8349
  %24 = load i32, i32* %nb_affine_multivar, align 4, !dbg !8350
  %inc27 = add i32 %24, 1, !dbg !8350
  store i32 %inc27, i32* %nb_affine_multivar, align 4, !dbg !8350
  br label %if.end37, !dbg !8351

if.else28:                                        ; preds = %if.else
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8352
  %tobool29 = icmp ne %struct._IO_FILE* %25, null, !dbg !8352
  br i1 %tobool29, label %land.lhs.true30, label %if.end35, !dbg !8355

land.lhs.true30:                                  ; preds = %if.else28
  %26 = load i32, i32* @dump_flags, align 4, !dbg !8356
  %and31 = and i32 %26, 16, !dbg !8357
  %tobool32 = icmp ne i32 %and31, 0, !dbg !8357
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !8358

if.then33:                                        ; preds = %land.lhs.true30
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8359
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.35, i64 0, i64 0)), !dbg !8360
  br label %if.end35, !dbg !8360

if.end35:                                         ; preds = %if.then33, %land.lhs.true30, %if.else28
  %28 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8361
  %nb_higher_poly = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %28, i32 0, i32 3, !dbg !8362
  %29 = load i32, i32* %nb_higher_poly, align 4, !dbg !8363
  %inc36 = add i32 %29, 1, !dbg !8363
  store i32 %inc36, i32* %nb_higher_poly, align 4, !dbg !8363
  br label %if.end37

if.end37:                                         ; preds = %if.end35, %if.end26
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end15
  br label %sw.epilog, !dbg !8364

sw.default:                                       ; preds = %if.end5
  br label %sw.epilog, !dbg !8365

sw.epilog:                                        ; preds = %sw.default, %if.end38
  %30 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8366
  %call39 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %30), !dbg !8368
  %tobool40 = icmp ne i8 %call39, 0, !dbg !8368
  br i1 %tobool40, label %if.then41, label %if.end51, !dbg !8369

if.then41:                                        ; preds = %sw.epilog
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8370
  %tobool42 = icmp ne %struct._IO_FILE* %31, null, !dbg !8370
  br i1 %tobool42, label %land.lhs.true43, label %if.end48, !dbg !8373

land.lhs.true43:                                  ; preds = %if.then41
  %32 = load i32, i32* @dump_flags, align 4, !dbg !8374
  %and44 = and i32 %32, 16, !dbg !8375
  %tobool45 = icmp ne i32 %and44, 0, !dbg !8375
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !8376

if.then46:                                        ; preds = %land.lhs.true43
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8377
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0)), !dbg !8378
  br label %if.end48, !dbg !8378

if.end48:                                         ; preds = %if.then46, %land.lhs.true43, %if.then41
  %34 = load %struct.chrec_stats*, %struct.chrec_stats** %stats.addr, align 8, !dbg !8379
  %nb_undetermined49 = getelementptr inbounds %struct.chrec_stats, %struct.chrec_stats* %34, i32 0, i32 5, !dbg !8380
  %35 = load i32, i32* %nb_undetermined49, align 4, !dbg !8381
  %inc50 = add i32 %35, 1, !dbg !8381
  store i32 %inc50, i32* %nb_undetermined49, align 4, !dbg !8381
  br label %if.end51, !dbg !8382

if.end51:                                         ; preds = %if.end48, %sw.epilog
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8383
  %tobool52 = icmp ne %struct._IO_FILE* %36, null, !dbg !8383
  br i1 %tobool52, label %land.lhs.true53, label %if.end58, !dbg !8385

land.lhs.true53:                                  ; preds = %if.end51
  %37 = load i32, i32* @dump_flags, align 4, !dbg !8386
  %and54 = and i32 %37, 16, !dbg !8387
  %tobool55 = icmp ne i32 %and54, 0, !dbg !8387
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !8388

if.then56:                                        ; preds = %land.lhs.true53
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8389
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !8390
  br label %if.end58, !dbg !8390

if.end58:                                         ; preds = %if.then3, %if.then56, %land.lhs.true53, %if.end51
  ret void, !dbg !8391
}

declare dso_local zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node*, i32) #2

declare dso_local i64 @htab_elements(%struct.htab*) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !8392 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8395, metadata !DIExpression()), !dbg !8396
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8396
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !8396
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !8396
  ret %struct.VEC_int_heap* %1, !dbg !8396
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !8397 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !8400, metadata !DIExpression()), !dbg !8401
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8402, metadata !DIExpression()), !dbg !8401
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !8403, metadata !DIExpression()), !dbg !8401
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8404
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !8404
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8404

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8404
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8404
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !8404
  %3 = load i32, i32* %num, align 8, !dbg !8404
  %cmp = icmp ult i32 %1, %3, !dbg !8404
  br i1 %cmp, label %if.then, label %if.else, !dbg !8401

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8406
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !8406
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8406
  %idxprom = zext i32 %5 to i64, !dbg !8406
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !8406
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !8406
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !8406
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !8406
  store i32 1, i32* %retval, align 4, !dbg !8406
  br label %return, !dbg !8406

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !8408
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !8408
  store i32 0, i32* %retval, align 4, !dbg !8408
  br label %return, !dbg !8408

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8401
  ret i32 %9, !dbg !8401
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !8410 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8415, metadata !DIExpression()), !dbg !8416
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !8417, metadata !DIExpression()), !dbg !8416
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !8418, metadata !DIExpression()), !dbg !8416
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8416
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !8416
  %1 = load i32, i32* %num, align 4, !dbg !8416
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8416
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !8416
  %3 = load i32, i32* %alloc, align 4, !dbg !8416
  %cmp = icmp ult i32 %1, %3, !dbg !8416
  %conv = zext i1 %cmp to i32, !dbg !8416
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8416
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !8416
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8416
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !8416
  %6 = load i32, i32* %num1, align 4, !dbg !8416
  %inc = add i32 %6, 1, !dbg !8416
  store i32 %inc, i32* %num1, align 4, !dbg !8416
  %idxprom = zext i32 %6 to i64, !dbg !8416
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8416
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !8416
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !8416
  %8 = load i32*, i32** %slot_, align 8, !dbg !8416
  store i32 %7, i32* %8, align 4, !dbg !8416
  %9 = load i32*, i32** %slot_, align 8, !dbg !8416
  ret i32* %9, !dbg !8416
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !8419 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8422, metadata !DIExpression()), !dbg !8423
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8424, metadata !DIExpression()), !dbg !8425
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8426
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !8426
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !8426
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !8426
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8426

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8426
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !8426
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !8426
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !8426
  br label %cond.end, !dbg !8426

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8426
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !8426
  store i32 %call, i32* %n, align 4, !dbg !8425
  %4 = load i32, i32* %n, align 4, !dbg !8427
  %cmp = icmp eq i32 %4, 0, !dbg !8429
  br i1 %cmp, label %if.then, label %if.end, !dbg !8430

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !8431
  br label %return, !dbg !8431

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8432
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !8432
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !8432
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !8432
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !8432

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8432
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !8432
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !8432
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !8432
  br label %cond.end8, !dbg !8432

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !8432

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !8432
  %9 = load i32, i32* %n, align 4, !dbg !8432
  %sub = sub i32 %9, 1, !dbg !8432
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !8432
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !8433
  br label %return, !dbg !8433

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !8434
  ret %struct.loop* %10, !dbg !8434
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !8435 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !8438, metadata !DIExpression()), !dbg !8439
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8439
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !8439
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8439

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8439
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !8439
  %2 = load i32, i32* %num, align 8, !dbg !8439
  br label %cond.end, !dbg !8439

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8439
  ret i32 %cond, !dbg !8439
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !8440 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8445, metadata !DIExpression()), !dbg !8446
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8447, metadata !DIExpression()), !dbg !8446
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !8448, metadata !DIExpression()), !dbg !8446
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8449
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !8449
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8449

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8449
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8449
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !8449
  %3 = load i32, i32* %num, align 4, !dbg !8449
  %cmp = icmp ult i32 %1, %3, !dbg !8449
  br i1 %cmp, label %if.then, label %if.else, !dbg !8446

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8451
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !8451
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8451
  %idxprom = zext i32 %5 to i64, !dbg !8451
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8451
  %6 = load i32, i32* %arrayidx, align 4, !dbg !8451
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !8451
  store i32 %6, i32* %7, align 4, !dbg !8451
  store i32 1, i32* %retval, align 4, !dbg !8451
  br label %return, !dbg !8451

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !8453
  store i32 0, i32* %8, align 4, !dbg !8453
  store i32 0, i32* %retval, align 4, !dbg !8453
  br label %return, !dbg !8453

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8446
  ret i32 %9, !dbg !8446
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !8455 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !8459, metadata !DIExpression()), !dbg !8460
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8461
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !8461
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !8461
  br i1 %tobool, label %if.then, label %if.end, !dbg !8460

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8461
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !8461
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !8461
  call void @free(i8* %4), !dbg !8461
  br label %if.end, !dbg !8461

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8460
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !8460
  ret void, !dbg !8460
}

declare dso_local void @free(i8*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @get_exit_conditions_rec(%struct.loop* %loop, %struct.VEC_gimple_heap** %exit_conditions) #0 !dbg !8463 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exit_conditions.addr = alloca %struct.VEC_gimple_heap**, align 8
  %loop_condition = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8466, metadata !DIExpression()), !dbg !8467
  store %struct.VEC_gimple_heap** %exit_conditions, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %exit_conditions.addr, metadata !8468, metadata !DIExpression()), !dbg !8469
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8470
  %tobool = icmp ne %struct.loop* %0, null, !dbg !8470
  br i1 %tobool, label %if.end, label %if.then, !dbg !8472

if.then:                                          ; preds = %entry
  br label %if.end8, !dbg !8473

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8474
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 8, !dbg !8475
  %2 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !8475
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !8476
  call void @get_exit_conditions_rec(%struct.loop* %2, %struct.VEC_gimple_heap** %3), !dbg !8477
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8478
  %next = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 9, !dbg !8479
  %5 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !8479
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !8480
  call void @get_exit_conditions_rec(%struct.loop* %5, %struct.VEC_gimple_heap** %6), !dbg !8481
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8482
  %call = call %struct.edge_def* @single_exit(%struct.loop* %7), !dbg !8484
  %tobool1 = icmp ne %struct.edge_def* %call, null, !dbg !8484
  br i1 %tobool1, label %if.then2, label %if.end8, !dbg !8485

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %loop_condition, metadata !8486, metadata !DIExpression()), !dbg !8488
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8489
  %call3 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %8), !dbg !8490
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %loop_condition, align 8, !dbg !8488
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_condition, align 8, !dbg !8491
  %tobool4 = icmp ne %union.gimple_statement_d* %9, null, !dbg !8491
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !8493

if.then5:                                         ; preds = %if.then2
  %10 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %exit_conditions.addr, align 8, !dbg !8494
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %loop_condition, align 8, !dbg !8494
  %call6 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %10, %union.gimple_statement_d* %11), !dbg !8494
  br label %if.end7, !dbg !8494

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end8, !dbg !8495

if.end8:                                          ; preds = %if.then, %if.end7, %if.end
  ret void, !dbg !8496
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !8497 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !8501, metadata !DIExpression()), !dbg !8502
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !8503, metadata !DIExpression()), !dbg !8502
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8502
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !8502
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8502
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !8502
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !8502
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8502

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8502
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !8502
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !8502
  br label %cond.end, !dbg !8502

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8502

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8502
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !8502
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !8502
  ret %union.gimple_statement_d** %call1, !dbg !8502
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !8504 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !8507, metadata !DIExpression()), !dbg !8508
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8509, metadata !DIExpression()), !dbg !8508
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8510, metadata !DIExpression()), !dbg !8508
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8508
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !8508
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !8508
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8508

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8508
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !8508
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !8508
  br label %cond.end, !dbg !8508

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8508

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8508
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8508
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !8508
  %tobool1 = icmp ne i32 %call, 0, !dbg !8508
  %lnot = xor i1 %tobool1, true, !dbg !8508
  %lnot.ext = zext i1 %lnot to i32, !dbg !8508
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8508
  %5 = load i32, i32* %extend, align 4, !dbg !8511
  %tobool2 = icmp ne i32 %5, 0, !dbg !8511
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8508

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8511
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !8511
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !8511
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8511
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8511
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !8511
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8511
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !8511
  br label %if.end, !dbg !8511

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8508
  ret i32 %12, !dbg !8508
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !8513 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8517, metadata !DIExpression()), !dbg !8518
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !8519, metadata !DIExpression()), !dbg !8518
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !8520, metadata !DIExpression()), !dbg !8518
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8518
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !8518
  %1 = load i32, i32* %num, align 8, !dbg !8518
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8518
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !8518
  %3 = load i32, i32* %alloc, align 4, !dbg !8518
  %cmp = icmp ult i32 %1, %3, !dbg !8518
  %conv = zext i1 %cmp to i32, !dbg !8518
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8518
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !8518
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8518
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !8518
  %6 = load i32, i32* %num1, align 8, !dbg !8518
  %inc = add i32 %6, 1, !dbg !8518
  store i32 %inc, i32* %num1, align 8, !dbg !8518
  %idxprom = zext i32 %6 to i64, !dbg !8518
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !8518
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !8518
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !8518
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !8518
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !8518
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !8518
  ret %union.gimple_statement_d** %9, !dbg !8518
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !8521 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8524, metadata !DIExpression()), !dbg !8525
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8526, metadata !DIExpression()), !dbg !8525
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8525
  %cmp = icmp sge i32 %0, 0, !dbg !8525
  %conv = zext i1 %cmp to i32, !dbg !8525
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8525
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !8525
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8525

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8525
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !8525
  %3 = load i32, i32* %alloc, align 4, !dbg !8525
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8525
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !8525
  %5 = load i32, i32* %num, align 8, !dbg !8525
  %sub = sub i32 %3, %5, !dbg !8525
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8525
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8525
  %conv2 = zext i1 %cmp1 to i32, !dbg !8525
  br label %cond.end, !dbg !8525

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8525
  %tobool3 = icmp ne i32 %7, 0, !dbg !8525
  %lnot = xor i1 %tobool3, true, !dbg !8525
  %lnot.ext = zext i1 %lnot to i32, !dbg !8525
  br label %cond.end, !dbg !8525

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8525
  ret i32 %cond, !dbg !8525
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !8527 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8532, metadata !DIExpression()), !dbg !8533
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8534, metadata !DIExpression()), !dbg !8533
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !8535, metadata !DIExpression()), !dbg !8533
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8536
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !8536
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8536

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8536
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8536
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !8536
  %3 = load i32, i32* %num, align 8, !dbg !8536
  %cmp = icmp ult i32 %1, %3, !dbg !8536
  br i1 %cmp, label %if.then, label %if.else, !dbg !8533

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8538
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !8538
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8538
  %idxprom = zext i32 %5 to i64, !dbg !8538
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !8538
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8538
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !8538
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !8538
  store i32 1, i32* %retval, align 4, !dbg !8538
  br label %return, !dbg !8538

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !8540
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !8540
  store i32 0, i32* %retval, align 4, !dbg !8540
  br label %return, !dbg !8540

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8533
  ret i32 %9, !dbg !8533
}

declare dso_local void @print_loops(%struct._IO_FILE*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !8542 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8545, metadata !DIExpression()), !dbg !8546
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8546
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8546
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8546

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8546
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !8546
  %2 = load i32, i32* %num, align 8, !dbg !8546
  br label %cond.end, !dbg !8546

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8546

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8546
  ret i32 %cond, !dbg !8546
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !8547 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8548, metadata !DIExpression()), !dbg !8549
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8550, metadata !DIExpression()), !dbg !8551
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !8552, metadata !DIExpression()), !dbg !8553
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8554
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !8555
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !8556
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8557
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !8558
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8559
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8560
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8561
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8562
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !8563
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8564
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8565
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !8566
  ret void, !dbg !8567
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !8568 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8571, metadata !DIExpression()), !dbg !8572
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8573
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !8574
  %1 = load i32, i32* %flags, align 8, !dbg !8574
  %and = and i32 %1, 512, !dbg !8575
  %tobool = icmp ne i32 %and, 0, !dbg !8575
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !8576

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8577
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8578
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8579
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8579
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8577
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8580

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8581
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8582
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8583
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8583
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !8584
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8584
  br label %cond.end, !dbg !8580

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8580

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !8580
  ret %struct.gimple_seq_d* %cond, !dbg !8585
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !8586 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8592, metadata !DIExpression()), !dbg !8593
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8594
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8594
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8594

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8595
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !8596
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !8596
  br label %cond.end, !dbg !8594

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8594

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8594
  ret %struct.gimple_seq_node_d* %cond, !dbg !8597
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8598 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8602, metadata !DIExpression()), !dbg !8603
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8604, metadata !DIExpression()), !dbg !8605
  %0 = load i32, i32* %index.addr, align 4, !dbg !8606
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8606
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !8606
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !8606
  %2 = load i32, i32* %capacity, align 8, !dbg !8606
  %cmp = icmp ule i32 %0, %2, !dbg !8606
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8606

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !8606
  br label %cond.end, !dbg !8606

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8606
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8607
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !8608
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !8609
  %4 = load i32, i32* %index.addr, align 4, !dbg !8610
  %idxprom = zext i32 %4 to i64, !dbg !8607
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !8607
  ret %struct.phi_arg_d* %arrayidx, !dbg !8611
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2421, !2422, !2423}
!llvm.ident = !{!2424}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "chrec_dont_know", scope: !2, file: !3, line: 304, type: !998, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !997, globals: !2396, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-scalar-evolution.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !429, !434, !439, !660, !673, !678, !684, !691, !825, !851, !856, !979, !983}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !391, line: 51, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428}
!393 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!428 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!429 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !330, line: 498, baseType: !7, size: 32, elements: !430)
!430 = !{!431, !432, !433}
!431 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!432 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!433 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!434 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !391, line: 4603, baseType: !7, size: 32, elements: !435)
!435 = !{!436, !437, !438}
!436 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!437 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!438 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!439 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !440, line: 23, baseType: !7, size: 32, elements: !441)
!440 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!441 = !{!442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659}
!442 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!443 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!444 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!445 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!446 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!447 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!448 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!449 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!450 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!451 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!452 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!453 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!454 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!455 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!456 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!457 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!458 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!459 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!460 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!461 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!462 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!463 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!464 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!465 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!466 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!467 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!468 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!469 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!470 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!471 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!472 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!473 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!474 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!475 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!476 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!477 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!478 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!479 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!480 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!481 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!482 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!483 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!484 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!485 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!486 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!487 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!488 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!489 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!490 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!491 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!492 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!493 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!494 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!495 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!496 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!497 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!498 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!499 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!500 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!501 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!502 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!503 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!504 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!505 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!506 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!507 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!508 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!509 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!510 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!511 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!512 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!513 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!514 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!515 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!516 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!517 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!518 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!519 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!520 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!521 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!522 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!523 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!524 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!525 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!526 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!527 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!528 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!529 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!530 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!531 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!532 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!533 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!534 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!535 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!536 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!537 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!538 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!539 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!540 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!541 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!542 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!543 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!544 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!545 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!546 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!547 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!548 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!549 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!550 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!551 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!552 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!553 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!554 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!555 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!556 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!557 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!558 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!559 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!560 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!561 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!562 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!563 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!564 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!565 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!566 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!567 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!568 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!569 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!570 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!571 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!572 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!573 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!574 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!575 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!576 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!577 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!578 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!579 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!580 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!581 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!582 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!583 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!584 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!585 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!586 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!587 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!588 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!589 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!590 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!591 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!592 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!593 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!594 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!595 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!596 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!597 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!598 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!599 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!600 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!601 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!602 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!603 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!604 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!605 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!606 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!607 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!608 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!609 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!610 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!611 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!612 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!613 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!614 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!615 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!616 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!617 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!618 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!619 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!620 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!621 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!622 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!623 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!624 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!625 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!626 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!627 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!628 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!629 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!630 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!631 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!632 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!633 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!634 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!635 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!636 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!637 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!638 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!639 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!640 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!641 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!642 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!643 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!644 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!645 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!646 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!647 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!648 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!649 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!650 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!651 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!652 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!653 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!654 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!655 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!656 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!657 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!658 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!659 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!660 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !661)
!661 = !{!662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672}
!662 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!663 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!664 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!665 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!666 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!667 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!668 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!669 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!670 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!671 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!672 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!673 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !674, line: 147, baseType: !7, size: 32, elements: !675)
!674 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!675 = !{!676, !677}
!676 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!677 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!678 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !391, line: 80, baseType: !7, size: 32, elements: !679)
!679 = !{!680, !681, !682, !683}
!680 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!681 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!682 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!683 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!684 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !685)
!685 = !{!686, !687, !688, !689, !690}
!686 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!687 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!688 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!689 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!690 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!691 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !692)
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824}
!693 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!809 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!810 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!811 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!812 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!813 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!814 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!815 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!816 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!817 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!818 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!819 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!820 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!821 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!822 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!823 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!824 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!825 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !391, line: 727, baseType: !7, size: 32, elements: !826)
!826 = !{!827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850}
!827 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!828 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!829 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!830 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!831 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!832 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!833 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!834 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!835 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!836 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!837 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!838 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!839 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!840 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!841 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!842 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!843 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!844 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!845 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!846 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!847 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!848 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!849 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!850 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!851 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "t_bool", file: !3, line: 995, baseType: !7, size: 32, elements: !852)
!852 = !{!853, !854, !855}
!853 = !DIEnumerator(name: "t_false", value: 0, isUnsigned: true)
!854 = !DIEnumerator(name: "t_true", value: 1, isUnsigned: true)
!855 = !DIEnumerator(name: "t_dont_know", value: 2, isUnsigned: true)
!856 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !857, line: 82, baseType: !7, size: 32, elements: !858)
!857 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!858 = !{!859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978}
!859 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!860 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!861 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!862 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!863 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!864 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!865 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!866 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!867 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!868 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!869 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!870 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!871 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!872 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!873 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!874 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!875 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!876 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!877 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!878 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!879 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!880 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!881 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!882 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!883 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!884 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!885 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!886 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!887 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!888 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!889 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!890 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!891 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!892 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!893 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!894 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!895 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!896 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!897 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!898 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!899 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!900 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!901 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!902 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!903 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!904 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!905 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!906 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!907 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!908 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!909 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!910 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!911 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!912 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!913 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!914 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!915 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!916 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!917 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!918 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!919 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!920 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!921 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!922 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!923 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!924 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!925 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!926 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!927 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!928 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!929 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!930 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!931 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!932 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!933 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!934 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!935 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!936 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!937 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!938 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!939 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!940 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!941 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!942 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!943 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!944 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!945 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!946 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!947 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!948 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!949 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!950 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!951 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!952 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!953 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!954 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!955 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!956 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!957 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!958 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!959 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!960 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!961 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!962 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!963 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!964 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!965 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!966 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!967 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!968 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!969 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!970 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!971 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!972 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!973 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!974 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!975 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!976 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!977 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!978 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!979 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !980)
!980 = !{!981, !982}
!981 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!982 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!983 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !343, line: 295, baseType: !7, size: 32, elements: !984)
!984 = !{!985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996}
!985 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!986 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!987 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!988 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!989 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!990 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!991 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!992 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!993 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!994 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!995 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!996 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!997 = !{!998, !1282, !134, !7, !1095, !1899, !2357, !1815, !1475, !1000, !2363, !1128, !678, !1330, !2365, !1364, !1267, !2367, !2369, !2378, !1572, !2391, !1329}
!998 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !999, line: 56, baseType: !1000)
!999 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64)
!1001 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1002)
!1002 = !{!1003, !1036, !1042, !1055, !1074, !1085, !1090, !1101, !1107, !1121, !1133, !1171, !1686, !1714, !1731, !1732, !1737, !1746, !1752, !1757, !1761, !1765, !2008, !2055, !2061, !2067, !2074, !2087, !2101, !2118, !2130, !2152, !2167, !2339}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1001, file: !135, line: 3372, baseType: !1004, size: 64)
!1004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1005)
!1005 = !{!1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1004, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1004, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1004, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1004, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1004, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1004, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1004, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1004, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1004, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1004, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1004, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1004, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1004, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1004, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1004, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1004, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1004, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1004, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1004, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1004, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1004, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1004, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1004, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1004, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1004, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1004, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1004, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1004, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1004, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1004, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1001, file: !135, line: 3373, baseType: !1037, size: 192)
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1038)
!1038 = !{!1039, !1040, !1041}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1037, file: !135, line: 403, baseType: !1004, size: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1037, file: !135, line: 404, baseType: !998, size: 64, offset: 64)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1037, file: !135, line: 405, baseType: !998, size: 64, offset: 128)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1001, file: !135, line: 3374, baseType: !1043, size: 320)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1044)
!1044 = !{!1045, !1046}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1043, file: !135, line: 1385, baseType: !1037, size: 192)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1043, file: !135, line: 1386, baseType: !1047, size: 128, offset: 192)
!1047 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1048, line: 58, baseType: !1049)
!1048 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1049 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1048, line: 54, size: 128, elements: !1050)
!1050 = !{!1051, !1053}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1049, file: !1048, line: 56, baseType: !1052, size: 64)
!1052 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1049, file: !1048, line: 57, baseType: !1054, size: 64, offset: 64)
!1054 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1001, file: !135, line: 3375, baseType: !1056, size: 256)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1057)
!1057 = !{!1058, !1059}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1056, file: !135, line: 1398, baseType: !1037, size: 192)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1056, file: !135, line: 1399, baseType: !1060, size: 64, offset: 192)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1062, line: 52, size: 256, elements: !1063)
!1062 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1063 = !{!1064, !1065, !1066, !1067, !1068, !1069, !1070}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1061, file: !1062, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1061, file: !1062, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1061, file: !1062, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1061, file: !1062, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1061, file: !1062, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1061, file: !1062, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1061, file: !1062, line: 62, baseType: !1071, size: 192, offset: 64)
!1071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1052, size: 192, elements: !1072)
!1072 = !{!1073}
!1073 = !DISubrange(count: 3)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1001, file: !135, line: 3376, baseType: !1075, size: 256)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1076)
!1076 = !{!1077, !1078}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1075, file: !135, line: 1409, baseType: !1037, size: 192)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1075, file: !135, line: 1410, baseType: !1079, size: 64, offset: 192)
!1079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1080, size: 64)
!1080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1081, line: 27, size: 192, elements: !1082)
!1081 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1082 = !{!1083, !1084}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1080, file: !1081, line: 29, baseType: !1047, size: 128)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1080, file: !1081, line: 30, baseType: !5, size: 32, offset: 128)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1001, file: !135, line: 3377, baseType: !1086, size: 256)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1087)
!1087 = !{!1088, !1089}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1086, file: !135, line: 1438, baseType: !1037, size: 192)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1086, file: !135, line: 1439, baseType: !998, size: 64, offset: 192)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1001, file: !135, line: 3378, baseType: !1091, size: 256)
!1091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1092)
!1092 = !{!1093, !1094, !1096}
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1091, file: !135, line: 1419, baseType: !1037, size: 192)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1091, file: !135, line: 1420, baseType: !1095, size: 32, offset: 192)
!1095 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1091, file: !135, line: 1421, baseType: !1097, size: 8, offset: 224)
!1097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1098, size: 8, elements: !1099)
!1098 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1099 = !{!1100}
!1100 = !DISubrange(count: 1)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1001, file: !135, line: 3379, baseType: !1102, size: 320)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1103)
!1103 = !{!1104, !1105, !1106}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1102, file: !135, line: 1429, baseType: !1037, size: 192)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1102, file: !135, line: 1430, baseType: !998, size: 64, offset: 192)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1102, file: !135, line: 1431, baseType: !998, size: 64, offset: 256)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1001, file: !135, line: 3380, baseType: !1108, size: 320)
!1108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1109)
!1109 = !{!1110, !1111}
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1108, file: !135, line: 1461, baseType: !1037, size: 192)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1108, file: !135, line: 1462, baseType: !1112, size: 128, offset: 192)
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1113, line: 31, size: 128, elements: !1114)
!1113 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1114 = !{!1115, !1119, !1120}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1112, file: !1113, line: 32, baseType: !1116, size: 64)
!1116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1117, size: 64)
!1117 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1118)
!1118 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1112, file: !1113, line: 33, baseType: !7, size: 32, offset: 64)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1112, file: !1113, line: 34, baseType: !7, size: 32, offset: 96)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1001, file: !135, line: 3381, baseType: !1122, size: 384)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1123)
!1123 = !{!1124, !1125, !1130, !1131, !1132}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1122, file: !135, line: 2508, baseType: !1037, size: 192)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1122, file: !135, line: 2509, baseType: !1126, size: 32, offset: 192)
!1126 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1127, line: 58, baseType: !1128)
!1127 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1128 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1129, line: 44, baseType: !7)
!1129 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1122, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1122, file: !135, line: 2511, baseType: !998, size: 64, offset: 256)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1122, file: !135, line: 2512, baseType: !998, size: 64, offset: 320)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1001, file: !135, line: 3382, baseType: !1134, size: 896)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1135)
!1135 = !{!1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1134, file: !135, line: 2653, baseType: !1122, size: 384)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1134, file: !135, line: 2654, baseType: !998, size: 64, offset: 384)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1134, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1134, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1134, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1134, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1134, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1134, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1134, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1134, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1134, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1134, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1134, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1134, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1134, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1134, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1134, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1134, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1134, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1134, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1134, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1134, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1134, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1134, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1134, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1134, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1134, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1134, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1134, file: !135, line: 2705, baseType: !998, size: 64, offset: 576)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1134, file: !135, line: 2706, baseType: !998, size: 64, offset: 640)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1134, file: !135, line: 2707, baseType: !998, size: 64, offset: 704)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1134, file: !135, line: 2708, baseType: !998, size: 64, offset: 768)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1134, file: !135, line: 2711, baseType: !1169, size: 64, offset: 832)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1001, file: !135, line: 3383, baseType: !1172, size: 960)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1173)
!1173 = !{!1174, !1175}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1172, file: !135, line: 2757, baseType: !1134, size: 896)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1172, file: !135, line: 2758, baseType: !1176, size: 64, offset: 896)
!1176 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !999, line: 50, baseType: !1177)
!1177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1178, size: 64)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1179, line: 240, size: 384, elements: !1180)
!1179 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1180 = !{!1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1178, file: !1179, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1178, file: !1179, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1178, file: !1179, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1178, file: !1179, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1178, file: !1179, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1178, file: !1179, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1178, file: !1179, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1178, file: !1179, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1178, file: !1179, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1178, file: !1179, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1178, file: !1179, line: 321, baseType: !1192, size: 320, offset: 64)
!1192 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1179, line: 315, size: 320, elements: !1193)
!1193 = !{!1194, !1653, !1655, !1684, !1685}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1192, file: !1179, line: 316, baseType: !1195, size: 64)
!1195 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1196, size: 64, elements: !1099)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1179, line: 183, baseType: !1197)
!1197 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1179, line: 166, size: 64, elements: !1198)
!1198 = !{!1199, !1200, !1201, !1204, !1205, !1213, !1214, !1226, !1229, !1291, !1292, !1630, !1643, !1650}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1197, file: !1179, line: 168, baseType: !1095, size: 32)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1197, file: !1179, line: 169, baseType: !7, size: 32)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1197, file: !1179, line: 170, baseType: !1202, size: 64)
!1202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1203, size: 64)
!1203 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1098)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1197, file: !1179, line: 171, baseType: !1176, size: 64)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1197, file: !1179, line: 172, baseType: !1206, size: 64)
!1206 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !999, line: 53, baseType: !1207)
!1207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1179, line: 359, size: 128, elements: !1209)
!1209 = !{!1210, !1211}
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1208, file: !1179, line: 360, baseType: !1095, size: 32)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1208, file: !1179, line: 361, baseType: !1212, size: 64, offset: 64)
!1212 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1176, size: 64, elements: !1099)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1197, file: !1179, line: 173, baseType: !5, size: 32)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1197, file: !1179, line: 174, baseType: !1215, size: 32)
!1215 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1179, line: 133, baseType: !1216)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1179, line: 115, size: 32, elements: !1217)
!1217 = !{!1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1216, file: !1179, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1216, file: !1179, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1216, file: !1179, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1216, file: !1179, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1216, file: !1179, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1216, file: !1179, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1216, file: !1179, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1216, file: !1179, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1197, file: !1179, line: 175, baseType: !1227, size: 64)
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1228, size: 64)
!1228 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1179, line: 175, flags: DIFlagFwdDecl)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1197, file: !1179, line: 176, baseType: !1230, size: 64)
!1230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1231, size: 64)
!1231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1232, line: 75, size: 256, elements: !1233)
!1232 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1233 = !{!1234, !1248, !1249, !1250}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1231, file: !1232, line: 76, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1236, size: 64)
!1236 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1232, line: 68, baseType: !1237)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1232, line: 63, size: 320, elements: !1238)
!1238 = !{!1239, !1241, !1242, !1243}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1237, file: !1232, line: 64, baseType: !1240, size: 64)
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1237, size: 64)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1237, file: !1232, line: 65, baseType: !1240, size: 64, offset: 64)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1237, file: !1232, line: 66, baseType: !7, size: 32, offset: 128)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1237, file: !1232, line: 67, baseType: !1244, size: 128, offset: 192)
!1244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1245, size: 128, elements: !1246)
!1245 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1232, line: 29, baseType: !1052)
!1246 = !{!1247}
!1247 = !DISubrange(count: 2)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1231, file: !1232, line: 77, baseType: !1235, size: 64, offset: 64)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1231, file: !1232, line: 78, baseType: !7, size: 32, offset: 128)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1231, file: !1232, line: 79, baseType: !1251, size: 64, offset: 192)
!1251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1252, size: 64)
!1252 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1232, line: 49, baseType: !1253)
!1253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1232, line: 45, size: 832, elements: !1254)
!1254 = !{!1255, !1256, !1257}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1253, file: !1232, line: 46, baseType: !1240, size: 64)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1253, file: !1232, line: 47, baseType: !1230, size: 64, offset: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1253, file: !1232, line: 48, baseType: !1258, size: 704, offset: 128)
!1258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1259, line: 164, size: 704, elements: !1260)
!1259 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1260 = !{!1261, !1262, !1273, !1274, !1275, !1276, !1277, !1278, !1283, !1287, !1288, !1289, !1290}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1258, file: !1259, line: 166, baseType: !1054, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1258, file: !1259, line: 167, baseType: !1263, size: 64, offset: 64)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1259, line: 157, size: 192, elements: !1265)
!1265 = !{!1266, !1268, !1269}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1264, file: !1259, line: 159, baseType: !1267, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1264, file: !1259, line: 160, baseType: !1263, size: 64, offset: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1264, file: !1259, line: 161, baseType: !1270, size: 32, offset: 128)
!1270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1098, size: 32, elements: !1271)
!1271 = !{!1272}
!1272 = !DISubrange(count: 4)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1258, file: !1259, line: 168, baseType: !1267, size: 64, offset: 128)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1258, file: !1259, line: 169, baseType: !1267, size: 64, offset: 192)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1258, file: !1259, line: 170, baseType: !1267, size: 64, offset: 256)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1258, file: !1259, line: 171, baseType: !1054, size: 64, offset: 320)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1258, file: !1259, line: 172, baseType: !1095, size: 32, offset: 384)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1258, file: !1259, line: 176, baseType: !1279, size: 64, offset: 448)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = !DISubroutineType(types: !1281)
!1281 = !{!1263, !1282, !1054}
!1282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1258, file: !1259, line: 177, baseType: !1284, size: 64, offset: 512)
!1284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1285, size: 64)
!1285 = !DISubroutineType(types: !1286)
!1286 = !{null, !1282, !1263}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1258, file: !1259, line: 178, baseType: !1282, size: 64, offset: 576)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1258, file: !1259, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1258, file: !1259, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1258, file: !1259, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1197, file: !1179, line: 177, baseType: !998, size: 64)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1197, file: !1179, line: 178, baseType: !1293, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1294, size: 64)
!1294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !1295)
!1295 = !{!1296, !1542, !1543, !1544, !1600, !1604, !1605, !1606, !1624, !1625, !1626, !1627, !1628, !1629}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1294, file: !343, line: 219, baseType: !1297, size: 64)
!1297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1298, size: 64)
!1298 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !1299)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !1300)
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1299, file: !343, line: 151, baseType: !1302, size: 128)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !1303)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !1304)
!1304 = !{!1305, !1306, !1307}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1303, file: !343, line: 150, baseType: !7, size: 32)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1303, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1303, file: !343, line: 150, baseType: !1308, size: 64, offset: 64)
!1308 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1309, size: 64, elements: !1099)
!1309 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !999, line: 108, baseType: !1310)
!1310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1311, size: 64)
!1311 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !1312)
!1312 = !{!1313, !1314, !1315, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1311, file: !343, line: 124, baseType: !1293, size: 64)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1311, file: !343, line: 125, baseType: !1293, size: 64, offset: 64)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1311, file: !343, line: 131, baseType: !1316, size: 64, offset: 128)
!1316 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1317)
!1317 = !{!1318, !1533}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1316, file: !343, line: 129, baseType: !1319, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !999, line: 66, baseType: !1320)
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !391, line: 143, size: 192, elements: !1322)
!1322 = !{!1323, !1531, !1532}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1321, file: !391, line: 145, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !999, line: 69, baseType: !1325)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !391, line: 136, size: 192, elements: !1327)
!1327 = !{!1328, !1529, !1530}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1326, file: !391, line: 137, baseType: !1329, size: 64)
!1329 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !999, line: 58, baseType: !1330)
!1330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1331, size: 64)
!1331 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !391, line: 737, size: 768, elements: !1332)
!1332 = !{!1333, !1350, !1384, !1390, !1395, !1400, !1407, !1413, !1419, !1424, !1438, !1443, !1449, !1454, !1464, !1469, !1487, !1494, !1501, !1507, !1512, !1518, !1524}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1331, file: !391, line: 738, baseType: !1334, size: 256)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !391, line: 271, size: 256, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1334, file: !391, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1334, file: !391, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1334, file: !391, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1334, file: !391, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1334, file: !391, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1334, file: !391, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1334, file: !391, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1334, file: !391, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1334, file: !391, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1334, file: !391, line: 312, baseType: !7, size: 32, offset: 32)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1334, file: !391, line: 316, baseType: !1126, size: 32, offset: 64)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1334, file: !391, line: 319, baseType: !7, size: 32, offset: 96)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1334, file: !391, line: 323, baseType: !1293, size: 64, offset: 128)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1334, file: !391, line: 327, baseType: !998, size: 64, offset: 192)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1331, file: !391, line: 739, baseType: !1351, size: 448)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !391, line: 350, size: 448, elements: !1352)
!1352 = !{!1353, !1382}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1351, file: !391, line: 353, baseType: !1354, size: 384)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !391, line: 333, size: 384, elements: !1355)
!1355 = !{!1356, !1357, !1365}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1354, file: !391, line: 336, baseType: !1334, size: 256)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1354, file: !391, line: 343, baseType: !1358, size: 64, offset: 256)
!1358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1359, size: 64)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1360, line: 37, size: 128, elements: !1361)
!1360 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1361 = !{!1362, !1363}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1359, file: !1360, line: 39, baseType: !1358, size: 64)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1359, file: !1360, line: 40, baseType: !1364, size: 64, offset: 64)
!1364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1354, file: !391, line: 344, baseType: !1366, size: 64, offset: 320)
!1366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1367, size: 64)
!1367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1360, line: 45, size: 320, elements: !1368)
!1368 = !{!1369, !1370}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1367, file: !1360, line: 47, baseType: !1366, size: 64)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1367, file: !1360, line: 48, baseType: !1371, size: 256, offset: 64)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1372)
!1372 = !{!1373, !1375, !1376, !1381}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1371, file: !135, line: 1884, baseType: !1374, size: 64)
!1374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1371, size: 64)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1371, file: !135, line: 1885, baseType: !1374, size: 64, offset: 64)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1371, file: !135, line: 1891, baseType: !1377, size: 64, offset: 128)
!1377 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1371, file: !135, line: 1891, size: 64, elements: !1378)
!1378 = !{!1379, !1380}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1377, file: !135, line: 1891, baseType: !1329, size: 64)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1377, file: !135, line: 1891, baseType: !998, size: 64)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1371, file: !135, line: 1892, baseType: !1364, size: 64, offset: 192)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1351, file: !391, line: 359, baseType: !1383, size: 64, offset: 384)
!1383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !998, size: 64, elements: !1099)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1331, file: !391, line: 740, baseType: !1385, size: 512)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !391, line: 365, size: 512, elements: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1385, file: !391, line: 368, baseType: !1354, size: 384)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1385, file: !391, line: 373, baseType: !998, size: 64, offset: 384)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1385, file: !391, line: 374, baseType: !998, size: 64, offset: 448)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1331, file: !391, line: 741, baseType: !1391, size: 576)
!1391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !391, line: 380, size: 576, elements: !1392)
!1392 = !{!1393, !1394}
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1391, file: !391, line: 383, baseType: !1385, size: 512)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1391, file: !391, line: 389, baseType: !1383, size: 64, offset: 512)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1331, file: !391, line: 742, baseType: !1396, size: 320)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !391, line: 395, size: 320, elements: !1397)
!1397 = !{!1398, !1399}
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1396, file: !391, line: 397, baseType: !1334, size: 256)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1396, file: !391, line: 400, baseType: !1319, size: 64, offset: 256)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1331, file: !391, line: 743, baseType: !1401, size: 448)
!1401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !391, line: 406, size: 448, elements: !1402)
!1402 = !{!1403, !1404, !1405, !1406}
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1401, file: !391, line: 408, baseType: !1334, size: 256)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1401, file: !391, line: 412, baseType: !998, size: 64, offset: 256)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1401, file: !391, line: 420, baseType: !998, size: 64, offset: 320)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1401, file: !391, line: 423, baseType: !1319, size: 64, offset: 384)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1331, file: !391, line: 744, baseType: !1408, size: 384)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !391, line: 429, size: 384, elements: !1409)
!1409 = !{!1410, !1411, !1412}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1408, file: !391, line: 431, baseType: !1334, size: 256)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1408, file: !391, line: 434, baseType: !998, size: 64, offset: 256)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1408, file: !391, line: 437, baseType: !1319, size: 64, offset: 320)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1331, file: !391, line: 745, baseType: !1414, size: 384)
!1414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !391, line: 443, size: 384, elements: !1415)
!1415 = !{!1416, !1417, !1418}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1414, file: !391, line: 445, baseType: !1334, size: 256)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1414, file: !391, line: 449, baseType: !998, size: 64, offset: 256)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1414, file: !391, line: 453, baseType: !1319, size: 64, offset: 320)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1331, file: !391, line: 746, baseType: !1420, size: 320)
!1420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !391, line: 459, size: 320, elements: !1421)
!1421 = !{!1422, !1423}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1420, file: !391, line: 461, baseType: !1334, size: 256)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1420, file: !391, line: 464, baseType: !998, size: 64, offset: 256)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1331, file: !391, line: 747, baseType: !1425, size: 768)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !391, line: 469, size: 768, elements: !1426)
!1426 = !{!1427, !1428, !1429, !1430, !1431}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1425, file: !391, line: 471, baseType: !1334, size: 256)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1425, file: !391, line: 474, baseType: !7, size: 32, offset: 256)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1425, file: !391, line: 475, baseType: !7, size: 32, offset: 288)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1425, file: !391, line: 478, baseType: !998, size: 64, offset: 320)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1425, file: !391, line: 481, baseType: !1432, size: 384, offset: 384)
!1432 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1433, size: 384, elements: !1099)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1434)
!1434 = !{!1435, !1436, !1437}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1433, file: !135, line: 1920, baseType: !1371, size: 256)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1433, file: !135, line: 1921, baseType: !998, size: 64, offset: 256)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1433, file: !135, line: 1922, baseType: !1126, size: 32, offset: 320)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1331, file: !391, line: 748, baseType: !1439, size: 320)
!1439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !391, line: 487, size: 320, elements: !1440)
!1440 = !{!1441, !1442}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1439, file: !391, line: 490, baseType: !1334, size: 256)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1439, file: !391, line: 494, baseType: !1095, size: 32, offset: 256)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1331, file: !391, line: 749, baseType: !1444, size: 384)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !391, line: 500, size: 384, elements: !1445)
!1445 = !{!1446, !1447, !1448}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1444, file: !391, line: 502, baseType: !1334, size: 256)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1444, file: !391, line: 506, baseType: !1319, size: 64, offset: 256)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1444, file: !391, line: 510, baseType: !1319, size: 64, offset: 320)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1331, file: !391, line: 750, baseType: !1450, size: 320)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !391, line: 529, size: 320, elements: !1451)
!1451 = !{!1452, !1453}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1450, file: !391, line: 531, baseType: !1334, size: 256)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1450, file: !391, line: 540, baseType: !1319, size: 64, offset: 256)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1331, file: !391, line: 751, baseType: !1455, size: 704)
!1455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !391, line: 546, size: 704, elements: !1456)
!1456 = !{!1457, !1458, !1459, !1460, !1461, !1462, !1463}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1455, file: !391, line: 549, baseType: !1385, size: 512)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1455, file: !391, line: 553, baseType: !1202, size: 64, offset: 512)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1455, file: !391, line: 557, baseType: !1118, size: 8, offset: 576)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1455, file: !391, line: 558, baseType: !1118, size: 8, offset: 584)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1455, file: !391, line: 559, baseType: !1118, size: 8, offset: 592)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1455, file: !391, line: 560, baseType: !1118, size: 8, offset: 600)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1455, file: !391, line: 566, baseType: !1383, size: 64, offset: 640)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1331, file: !391, line: 752, baseType: !1465, size: 384)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !391, line: 571, size: 384, elements: !1466)
!1466 = !{!1467, !1468}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1465, file: !391, line: 573, baseType: !1396, size: 320)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1465, file: !391, line: 577, baseType: !998, size: 64, offset: 320)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1331, file: !391, line: 753, baseType: !1470, size: 576)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !391, line: 600, size: 576, elements: !1471)
!1471 = !{!1472, !1473, !1474, !1477, !1486}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1470, file: !391, line: 602, baseType: !1396, size: 320)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1470, file: !391, line: 605, baseType: !998, size: 64, offset: 320)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1470, file: !391, line: 609, baseType: !1475, size: 64, offset: 384)
!1475 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1476, line: 46, baseType: !1052)
!1476 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1470, file: !391, line: 612, baseType: !1478, size: 64, offset: 448)
!1478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1479, size: 64)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !391, line: 581, size: 320, elements: !1480)
!1480 = !{!1481, !1482, !1483, !1484, !1485}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1479, file: !391, line: 583, baseType: !134, size: 32)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1479, file: !391, line: 586, baseType: !998, size: 64, offset: 64)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1479, file: !391, line: 589, baseType: !998, size: 64, offset: 128)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1479, file: !391, line: 592, baseType: !998, size: 64, offset: 192)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1479, file: !391, line: 595, baseType: !998, size: 64, offset: 256)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1470, file: !391, line: 616, baseType: !1319, size: 64, offset: 512)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1331, file: !391, line: 754, baseType: !1488, size: 512)
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !391, line: 622, size: 512, elements: !1489)
!1489 = !{!1490, !1491, !1492, !1493}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1488, file: !391, line: 624, baseType: !1396, size: 320)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1488, file: !391, line: 628, baseType: !998, size: 64, offset: 320)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1488, file: !391, line: 632, baseType: !998, size: 64, offset: 384)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1488, file: !391, line: 636, baseType: !998, size: 64, offset: 448)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1331, file: !391, line: 755, baseType: !1495, size: 704)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !391, line: 642, size: 704, elements: !1496)
!1496 = !{!1497, !1498, !1499, !1500}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1495, file: !391, line: 644, baseType: !1488, size: 512)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1495, file: !391, line: 648, baseType: !998, size: 64, offset: 512)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1495, file: !391, line: 652, baseType: !998, size: 64, offset: 576)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1495, file: !391, line: 653, baseType: !998, size: 64, offset: 640)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1331, file: !391, line: 756, baseType: !1502, size: 448)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !391, line: 663, size: 448, elements: !1503)
!1503 = !{!1504, !1505, !1506}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1502, file: !391, line: 665, baseType: !1396, size: 320)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1502, file: !391, line: 668, baseType: !998, size: 64, offset: 320)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1502, file: !391, line: 673, baseType: !998, size: 64, offset: 384)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1331, file: !391, line: 757, baseType: !1508, size: 384)
!1508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !391, line: 694, size: 384, elements: !1509)
!1509 = !{!1510, !1511}
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1508, file: !391, line: 696, baseType: !1396, size: 320)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1508, file: !391, line: 699, baseType: !998, size: 64, offset: 320)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1331, file: !391, line: 758, baseType: !1513, size: 384)
!1513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !391, line: 681, size: 384, elements: !1514)
!1514 = !{!1515, !1516, !1517}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1513, file: !391, line: 683, baseType: !1334, size: 256)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1513, file: !391, line: 686, baseType: !998, size: 64, offset: 256)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1513, file: !391, line: 689, baseType: !998, size: 64, offset: 320)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1331, file: !391, line: 759, baseType: !1519, size: 384)
!1519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !391, line: 707, size: 384, elements: !1520)
!1520 = !{!1521, !1522, !1523}
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1519, file: !391, line: 709, baseType: !1334, size: 256)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1519, file: !391, line: 712, baseType: !998, size: 64, offset: 256)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1519, file: !391, line: 712, baseType: !998, size: 64, offset: 320)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1331, file: !391, line: 760, baseType: !1525, size: 320)
!1525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !391, line: 718, size: 320, elements: !1526)
!1526 = !{!1527, !1528}
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1525, file: !391, line: 720, baseType: !1334, size: 256)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1525, file: !391, line: 723, baseType: !998, size: 64, offset: 256)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1326, file: !391, line: 138, baseType: !1325, size: 64, offset: 64)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1326, file: !391, line: 139, baseType: !1325, size: 64, offset: 128)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1321, file: !391, line: 146, baseType: !1324, size: 64, offset: 64)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1321, file: !391, line: 152, baseType: !1319, size: 64, offset: 128)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1316, file: !343, line: 130, baseType: !1176, size: 64)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1311, file: !343, line: 134, baseType: !1282, size: 64, offset: 192)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1311, file: !343, line: 137, baseType: !998, size: 64, offset: 256)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1311, file: !343, line: 138, baseType: !1126, size: 32, offset: 320)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1311, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1311, file: !343, line: 144, baseType: !1095, size: 32, offset: 384)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1311, file: !343, line: 145, baseType: !1095, size: 32, offset: 416)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1311, file: !343, line: 146, baseType: !1541, size: 64, offset: 448)
!1541 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !1054)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1294, file: !343, line: 220, baseType: !1297, size: 64, offset: 64)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1294, file: !343, line: 223, baseType: !1282, size: 64, offset: 128)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1294, file: !343, line: 226, baseType: !1545, size: 64, offset: 192)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1547)
!1547 = !{!1548, !1549, !1550, !1551, !1552, !1557, !1558, !1559, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1590, !1598, !1599}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1546, file: !330, line: 102, baseType: !1095, size: 32)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1546, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1546, file: !330, line: 108, baseType: !1293, size: 64, offset: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1546, file: !330, line: 111, baseType: !1293, size: 64, offset: 128)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1546, file: !330, line: 114, baseType: !1553, size: 64, offset: 192)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1554)
!1554 = !{!1555, !1556}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1553, file: !330, line: 42, baseType: !329, size: 32)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1553, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1546, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1546, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1546, file: !330, line: 123, baseType: !1560, size: 64, offset: 320)
!1560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1561 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1562)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1563)
!1563 = !{!1564}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1562, file: !330, line: 87, baseType: !1565, size: 128)
!1565 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1566)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1567)
!1567 = !{!1568, !1569, !1570}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1566, file: !330, line: 85, baseType: !7, size: 32)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1566, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1566, file: !330, line: 85, baseType: !1571, size: 64, offset: 64)
!1571 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1572, size: 64, elements: !1099)
!1572 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1545)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1546, file: !330, line: 126, baseType: !1545, size: 64, offset: 384)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1546, file: !330, line: 129, baseType: !1545, size: 64, offset: 448)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1546, file: !330, line: 132, baseType: !1282, size: 64, offset: 512)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1546, file: !330, line: 139, baseType: !998, size: 64, offset: 576)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1546, file: !330, line: 143, baseType: !1047, size: 128, offset: 640)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1546, file: !330, line: 146, baseType: !1047, size: 128, offset: 768)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1546, file: !330, line: 148, baseType: !1118, size: 8, offset: 896)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1546, file: !330, line: 149, baseType: !1118, size: 8, offset: 904)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1546, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1546, file: !330, line: 156, baseType: !1583, size: 64, offset: 960)
!1583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1584, size: 64)
!1584 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1585)
!1585 = !{!1586, !1587, !1588, !1589}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1584, file: !330, line: 50, baseType: !1329, size: 64)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1584, file: !330, line: 59, baseType: !1047, size: 128, offset: 64)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1584, file: !330, line: 64, baseType: !1118, size: 8, offset: 192)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1584, file: !330, line: 67, baseType: !1583, size: 64, offset: 256)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1546, file: !330, line: 159, baseType: !1591, size: 64, offset: 1024)
!1591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1592, size: 64)
!1592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1593)
!1593 = !{!1594, !1595, !1596, !1597}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1592, file: !330, line: 74, baseType: !1310, size: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1592, file: !330, line: 77, baseType: !1591, size: 64, offset: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1592, file: !330, line: 78, baseType: !1591, size: 64, offset: 128)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1592, file: !330, line: 81, baseType: !1591, size: 64, offset: 192)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1546, file: !330, line: 162, baseType: !1118, size: 8, offset: 1088)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1546, file: !330, line: 166, baseType: !998, size: 64, offset: 1152)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1294, file: !343, line: 229, baseType: !1601, size: 128, offset: 256)
!1601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1602, size: 128, elements: !1246)
!1602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1603, size: 64)
!1603 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1294, file: !343, line: 232, baseType: !1293, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1294, file: !343, line: 233, baseType: !1293, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1294, file: !343, line: 238, baseType: !1607, size: 64, offset: 512)
!1607 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !1608)
!1608 = !{!1609, !1615}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1607, file: !343, line: 236, baseType: !1610, size: 64)
!1610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1611, size: 64)
!1611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !1612)
!1612 = !{!1613, !1614}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1611, file: !343, line: 275, baseType: !1319, size: 64)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1611, file: !343, line: 278, baseType: !1319, size: 64, offset: 64)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1607, file: !343, line: 237, baseType: !1616, size: 64)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !1618)
!1618 = !{!1619, !1620, !1621, !1622, !1623}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1617, file: !343, line: 261, baseType: !1176, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1617, file: !343, line: 262, baseType: !1176, size: 64, offset: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1617, file: !343, line: 266, baseType: !1176, size: 64, offset: 128)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1617, file: !343, line: 267, baseType: !1176, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1617, file: !343, line: 270, baseType: !1095, size: 32, offset: 256)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1294, file: !343, line: 241, baseType: !1541, size: 64, offset: 576)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1294, file: !343, line: 244, baseType: !1095, size: 32, offset: 640)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1294, file: !343, line: 247, baseType: !1095, size: 32, offset: 672)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1294, file: !343, line: 250, baseType: !1095, size: 32, offset: 704)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1294, file: !343, line: 253, baseType: !1095, size: 32, offset: 736)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1294, file: !343, line: 256, baseType: !1095, size: 32, offset: 768)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1197, file: !1179, line: 179, baseType: !1631, size: 64)
!1631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1632, size: 64)
!1632 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1179, line: 150, baseType: !1633)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1179, line: 142, size: 320, elements: !1634)
!1634 = !{!1635, !1636, !1637, !1638, !1641, !1642}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1633, file: !1179, line: 144, baseType: !998, size: 64)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1633, file: !1179, line: 145, baseType: !1176, size: 64, offset: 64)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1633, file: !1179, line: 146, baseType: !1176, size: 64, offset: 128)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1633, file: !1179, line: 147, baseType: !1639, size: 32, offset: 192)
!1639 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1640, line: 31, baseType: !1095)
!1640 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1633, file: !1179, line: 148, baseType: !7, size: 32, offset: 224)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1633, file: !1179, line: 149, baseType: !1118, size: 8, offset: 256)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1197, file: !1179, line: 180, baseType: !1644, size: 64)
!1644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1645, size: 64)
!1645 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1179, line: 162, baseType: !1646)
!1646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1179, line: 159, size: 128, elements: !1647)
!1647 = !{!1648, !1649}
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1646, file: !1179, line: 160, baseType: !998, size: 64)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1646, file: !1179, line: 161, baseType: !1054, size: 64, offset: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1197, file: !1179, line: 181, baseType: !1651, size: 64)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64)
!1652 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1179, line: 181, flags: DIFlagFwdDecl)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1192, file: !1179, line: 317, baseType: !1654, size: 64)
!1654 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1054, size: 64, elements: !1099)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1192, file: !1179, line: 318, baseType: !1656, size: 320)
!1656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1179, line: 188, size: 320, elements: !1657)
!1657 = !{!1658, !1660, !1683}
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1656, file: !1179, line: 190, baseType: !1659, size: 192)
!1659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1196, size: 192, elements: !1072)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1656, file: !1179, line: 193, baseType: !1661, size: 64, offset: 192)
!1661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1662, size: 64)
!1662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1179, line: 206, size: 320, elements: !1663)
!1663 = !{!1664, !1668, !1669, !1670, !1682}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1662, file: !1179, line: 208, baseType: !1665, size: 64)
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1666, size: 64)
!1666 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !999, line: 62, baseType: !1667)
!1667 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !999, line: 61, flags: DIFlagFwdDecl)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1662, file: !1179, line: 211, baseType: !7, size: 32, offset: 64)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1662, file: !1179, line: 214, baseType: !1054, size: 64, offset: 128)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1662, file: !1179, line: 224, baseType: !1671, size: 64, offset: 192)
!1671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1179, line: 202, baseType: !1673)
!1673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1179, line: 202, size: 128, elements: !1674)
!1674 = !{!1675}
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1673, file: !1179, line: 202, baseType: !1676, size: 128)
!1676 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1179, line: 200, baseType: !1677)
!1677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1179, line: 200, size: 128, elements: !1678)
!1678 = !{!1679, !1680, !1681}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1677, file: !1179, line: 200, baseType: !7, size: 32)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1677, file: !1179, line: 200, baseType: !7, size: 32, offset: 32)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1677, file: !1179, line: 200, baseType: !1212, size: 64, offset: 64)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1662, file: !1179, line: 234, baseType: !1671, size: 64, offset: 256)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1656, file: !1179, line: 197, baseType: !1054, size: 64, offset: 256)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1192, file: !1179, line: 319, baseType: !1061, size: 256)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1192, file: !1179, line: 320, baseType: !1080, size: 192)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1001, file: !135, line: 3384, baseType: !1687, size: 1472)
!1687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1688)
!1688 = !{!1689, !1710, !1711, !1712, !1713}
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1687, file: !135, line: 3115, baseType: !1690, size: 1216)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1691)
!1691 = !{!1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1690, file: !135, line: 2985, baseType: !1172, size: 960)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1690, file: !135, line: 2986, baseType: !998, size: 64, offset: 960)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1690, file: !135, line: 2987, baseType: !998, size: 64, offset: 1024)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1690, file: !135, line: 2988, baseType: !998, size: 64, offset: 1088)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1690, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1690, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1690, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1690, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1690, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1690, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1690, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1690, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1690, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1690, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1690, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1690, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1690, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1690, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1687, file: !135, line: 3117, baseType: !998, size: 64, offset: 1216)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1687, file: !135, line: 3119, baseType: !998, size: 64, offset: 1280)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1687, file: !135, line: 3121, baseType: !998, size: 64, offset: 1344)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1687, file: !135, line: 3123, baseType: !998, size: 64, offset: 1408)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1001, file: !135, line: 3385, baseType: !1715, size: 1088)
!1715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1716)
!1716 = !{!1717, !1718, !1719}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1715, file: !135, line: 2875, baseType: !1172, size: 960)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1715, file: !135, line: 2876, baseType: !1176, size: 64, offset: 960)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1715, file: !135, line: 2877, baseType: !1720, size: 64, offset: 1024)
!1720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1721, size: 64)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1722, line: 172, size: 128, elements: !1723)
!1722 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1723 = !{!1724, !1725, !1726, !1727, !1728, !1729, !1730}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1721, file: !1722, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1721, file: !1722, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1721, file: !1722, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1721, file: !1722, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1721, file: !1722, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1721, file: !1722, line: 195, baseType: !7, size: 32, offset: 32)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1721, file: !1722, line: 199, baseType: !998, size: 64, offset: 64)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1001, file: !135, line: 3386, baseType: !1690, size: 1216)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1001, file: !135, line: 3387, baseType: !1733, size: 1280)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1734)
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1733, file: !135, line: 3094, baseType: !1690, size: 1216)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1733, file: !135, line: 3095, baseType: !1720, size: 64, offset: 1216)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1001, file: !135, line: 3388, baseType: !1738, size: 1216)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1739)
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1738, file: !135, line: 2825, baseType: !1134, size: 896)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1738, file: !135, line: 2827, baseType: !998, size: 64, offset: 896)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1738, file: !135, line: 2828, baseType: !998, size: 64, offset: 960)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1738, file: !135, line: 2829, baseType: !998, size: 64, offset: 1024)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1738, file: !135, line: 2830, baseType: !998, size: 64, offset: 1088)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1738, file: !135, line: 2831, baseType: !998, size: 64, offset: 1152)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1001, file: !135, line: 3389, baseType: !1747, size: 1024)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1748)
!1748 = !{!1749, !1750, !1751}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1747, file: !135, line: 2851, baseType: !1172, size: 960)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1747, file: !135, line: 2852, baseType: !1095, size: 32, offset: 960)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1747, file: !135, line: 2853, baseType: !1095, size: 32, offset: 992)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1001, file: !135, line: 3390, baseType: !1753, size: 1024)
!1753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1754)
!1754 = !{!1755, !1756}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1753, file: !135, line: 2858, baseType: !1172, size: 960)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1753, file: !135, line: 2859, baseType: !1720, size: 64, offset: 960)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1001, file: !135, line: 3391, baseType: !1758, size: 960)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1759)
!1759 = !{!1760}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1758, file: !135, line: 2863, baseType: !1172, size: 960)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1001, file: !135, line: 3392, baseType: !1762, size: 1472)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1763)
!1763 = !{!1764}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1762, file: !135, line: 3305, baseType: !1687, size: 1472)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1001, file: !135, line: 3393, baseType: !1766, size: 1792)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1767)
!1767 = !{!1768, !1769, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1766, file: !135, line: 3249, baseType: !1687, size: 1472)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1766, file: !135, line: 3251, baseType: !1770, size: 64, offset: 1472)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1772, line: 463, size: 1152, elements: !1773)
!1772 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1773 = !{!1774, !1777, !1808, !1809, !1923, !1931, !1932, !1933, !1934, !1935, !1936, !1960, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1771, file: !1772, line: 464, baseType: !1775, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!1776 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1772, line: 464, flags: DIFlagFwdDecl)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1771, file: !1772, line: 467, baseType: !1778, size: 64, offset: 64)
!1778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !1780)
!1780 = !{!1781, !1783, !1784, !1797, !1798, !1799, !1800, !1801, !1802, !1804, !1806, !1807}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1779, file: !343, line: 377, baseType: !1782, size: 64)
!1782 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !999, line: 111, baseType: !1293)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1779, file: !343, line: 378, baseType: !1782, size: 64, offset: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1779, file: !343, line: 381, baseType: !1785, size: 64, offset: 128)
!1785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1786, size: 64)
!1786 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !1787)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !1788)
!1788 = !{!1789}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1787, file: !343, line: 282, baseType: !1790, size: 128)
!1790 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !1791)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !1792)
!1792 = !{!1793, !1794, !1795}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1791, file: !343, line: 281, baseType: !7, size: 32)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1791, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1791, file: !343, line: 281, baseType: !1796, size: 64, offset: 64)
!1796 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1782, size: 64, elements: !1099)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1779, file: !343, line: 384, baseType: !1095, size: 32, offset: 192)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1779, file: !343, line: 387, baseType: !1095, size: 32, offset: 224)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1779, file: !343, line: 390, baseType: !1095, size: 32, offset: 256)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1779, file: !343, line: 394, baseType: !1785, size: 64, offset: 320)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1779, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1779, file: !343, line: 399, baseType: !1803, size: 64, offset: 416)
!1803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1246)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1779, file: !343, line: 402, baseType: !1805, size: 64, offset: 480)
!1805 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1246)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1779, file: !343, line: 406, baseType: !1095, size: 32, offset: 544)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1779, file: !343, line: 409, baseType: !1095, size: 32, offset: 576)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1771, file: !1772, line: 470, baseType: !1320, size: 64, offset: 128)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1771, file: !1772, line: 473, baseType: !1810, size: 64, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1722, line: 39, size: 1152, elements: !1812)
!1812 = !{!1813, !1862, !1875, !1887, !1888, !1900, !1901, !1905, !1906, !1907, !1908, !1909}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1811, file: !1722, line: 41, baseType: !1814, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !674, line: 144, baseType: !1815)
!1815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1816, size: 64)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !674, line: 100, size: 896, elements: !1817)
!1817 = !{!1818, !1826, !1831, !1836, !1838, !1839, !1840, !1841, !1842, !1843, !1848, !1850, !1851, !1856, !1861}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1816, file: !674, line: 102, baseType: !1819, size: 64)
!1819 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !674, line: 52, baseType: !1820)
!1820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1821, size: 64)
!1821 = !DISubroutineType(types: !1822)
!1822 = !{!1823, !1824}
!1823 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !674, line: 47, baseType: !7)
!1824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1825, size: 64)
!1825 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1816, file: !674, line: 105, baseType: !1827, size: 64, offset: 64)
!1827 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !674, line: 59, baseType: !1828)
!1828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1829, size: 64)
!1829 = !DISubroutineType(types: !1830)
!1830 = !{!1095, !1824, !1824}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1816, file: !674, line: 108, baseType: !1832, size: 64, offset: 128)
!1832 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !674, line: 63, baseType: !1833)
!1833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1834, size: 64)
!1834 = !DISubroutineType(types: !1835)
!1835 = !{null, !1282}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1816, file: !674, line: 111, baseType: !1837, size: 64, offset: 192)
!1837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1282, size: 64)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1816, file: !674, line: 114, baseType: !1475, size: 64, offset: 256)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1816, file: !674, line: 117, baseType: !1475, size: 64, offset: 320)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1816, file: !674, line: 120, baseType: !1475, size: 64, offset: 384)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1816, file: !674, line: 124, baseType: !7, size: 32, offset: 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1816, file: !674, line: 128, baseType: !7, size: 32, offset: 480)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1816, file: !674, line: 131, baseType: !1844, size: 64, offset: 512)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !674, line: 75, baseType: !1845)
!1845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1846, size: 64)
!1846 = !DISubroutineType(types: !1847)
!1847 = !{!1282, !1475, !1475}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1816, file: !674, line: 132, baseType: !1849, size: 64, offset: 576)
!1849 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !674, line: 78, baseType: !1833)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1816, file: !674, line: 135, baseType: !1282, size: 64, offset: 640)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1816, file: !674, line: 136, baseType: !1852, size: 64, offset: 704)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !674, line: 82, baseType: !1853)
!1853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1854, size: 64)
!1854 = !DISubroutineType(types: !1855)
!1855 = !{!1282, !1282, !1475, !1475}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1816, file: !674, line: 137, baseType: !1857, size: 64, offset: 768)
!1857 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !674, line: 83, baseType: !1858)
!1858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1859, size: 64)
!1859 = !DISubroutineType(types: !1860)
!1860 = !{null, !1282, !1282}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1816, file: !674, line: 141, baseType: !7, size: 32, offset: 832)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1811, file: !1722, line: 48, baseType: !1863, size: 64, offset: 64)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !391, line: 35, baseType: !1865)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !391, line: 35, size: 128, elements: !1866)
!1866 = !{!1867}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1865, file: !391, line: 35, baseType: !1868, size: 128)
!1868 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !391, line: 33, baseType: !1869)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !391, line: 33, size: 128, elements: !1870)
!1870 = !{!1871, !1872, !1873}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1869, file: !391, line: 33, baseType: !7, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1869, file: !391, line: 33, baseType: !7, size: 32, offset: 32)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1869, file: !391, line: 33, baseType: !1874, size: 64, offset: 64)
!1874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1329, size: 64, elements: !1099)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1811, file: !1722, line: 51, baseType: !1876, size: 64, offset: 128)
!1876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1877, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1878)
!1878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1879)
!1879 = !{!1880}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1878, file: !135, line: 183, baseType: !1881, size: 128)
!1881 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1882)
!1882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1883)
!1883 = !{!1884, !1885, !1886}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1882, file: !135, line: 182, baseType: !7, size: 32)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1882, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1882, file: !135, line: 182, baseType: !1383, size: 64, offset: 64)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1811, file: !1722, line: 54, baseType: !998, size: 64, offset: 192)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1811, file: !1722, line: 57, baseType: !1889, size: 128, offset: 256)
!1889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1890, line: 31, size: 128, elements: !1891)
!1890 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1891 = !{!1892, !1893, !1894, !1895, !1896, !1897, !1898}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1889, file: !1890, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1889, file: !1890, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1889, file: !1890, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1889, file: !1890, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1889, file: !1890, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1889, file: !1890, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1889, file: !1890, line: 56, baseType: !1899, size: 64, offset: 64)
!1899 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !999, line: 47, baseType: !1230)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1811, file: !1722, line: 60, baseType: !1889, size: 128, offset: 384)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1811, file: !1722, line: 64, baseType: !1902, size: 64, offset: 512)
!1902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1903, size: 64)
!1903 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1904, line: 33, flags: DIFlagFwdDecl)
!1904 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1811, file: !1722, line: 67, baseType: !998, size: 64, offset: 576)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1811, file: !1722, line: 73, baseType: !1814, size: 64, offset: 640)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1811, file: !1722, line: 77, baseType: !1899, size: 64, offset: 704)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1811, file: !1722, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1811, file: !1722, line: 82, baseType: !1910, size: 320, offset: 832)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1360, line: 62, size: 320, elements: !1911)
!1911 = !{!1912, !1918, !1919, !1920, !1921, !1922}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1910, file: !1360, line: 63, baseType: !1913, size: 64)
!1913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1914, size: 64)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1360, line: 56, size: 128, elements: !1915)
!1915 = !{!1916, !1917}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1914, file: !1360, line: 57, baseType: !1913, size: 64)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1914, file: !1360, line: 58, baseType: !1097, size: 8, offset: 64)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1910, file: !1360, line: 64, baseType: !7, size: 32, offset: 64)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1910, file: !1360, line: 66, baseType: !7, size: 32, offset: 96)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1910, file: !1360, line: 68, baseType: !1118, size: 8, offset: 128)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1910, file: !1360, line: 70, baseType: !1358, size: 64, offset: 192)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1910, file: !1360, line: 71, baseType: !1366, size: 64, offset: 256)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1771, file: !1772, line: 476, baseType: !1924, size: 64, offset: 256)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !1926)
!1926 = !{!1927, !1928, !1929, !1930}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1925, file: !330, line: 189, baseType: !1095, size: 32)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1925, file: !330, line: 192, baseType: !1560, size: 64, offset: 64)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1925, file: !330, line: 197, baseType: !1814, size: 64, offset: 128)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1925, file: !330, line: 200, baseType: !1545, size: 64, offset: 192)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1771, file: !1772, line: 479, baseType: !1814, size: 64, offset: 320)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1771, file: !1772, line: 484, baseType: !998, size: 64, offset: 384)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1771, file: !1772, line: 488, baseType: !998, size: 64, offset: 448)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1771, file: !1772, line: 493, baseType: !998, size: 64, offset: 512)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1771, file: !1772, line: 496, baseType: !998, size: 64, offset: 576)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1771, file: !1772, line: 501, baseType: !1937, size: 64, offset: 640)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1938, size: 64)
!1938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !1939)
!1939 = !{!1940, !1943, !1944, !1945, !1946, !1948, !1949, !1954, !1955, !1956, !1957, !1958, !1959}
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1938, file: !354, line: 2356, baseType: !1941, size: 64)
!1941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1942, size: 64)
!1942 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1938, file: !354, line: 2357, baseType: !1202, size: 64, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1938, file: !354, line: 2358, baseType: !1095, size: 32, offset: 128)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1938, file: !354, line: 2359, baseType: !1095, size: 32, offset: 160)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1938, file: !354, line: 2360, baseType: !1947, size: 128, offset: 192)
!1947 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1095, size: 128, elements: !1271)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1938, file: !354, line: 2364, baseType: !1095, size: 32, offset: 320)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1938, file: !354, line: 2367, baseType: !1950, size: 128, offset: 384)
!1950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !1951)
!1951 = !{!1952, !1953}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1950, file: !354, line: 2351, baseType: !1176, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1950, file: !354, line: 2352, baseType: !1054, size: 64, offset: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1938, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1938, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1938, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1938, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1938, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1938, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1771, file: !1772, line: 504, baseType: !1961, size: 64, offset: 704)
!1961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64)
!1962 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1772, line: 504, flags: DIFlagFwdDecl)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1771, file: !1772, line: 507, baseType: !1814, size: 64, offset: 768)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1771, file: !1772, line: 510, baseType: !1095, size: 32, offset: 832)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1771, file: !1772, line: 513, baseType: !1095, size: 32, offset: 864)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1771, file: !1772, line: 516, baseType: !1126, size: 32, offset: 896)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1771, file: !1772, line: 519, baseType: !1126, size: 32, offset: 928)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1771, file: !1772, line: 522, baseType: !7, size: 32, offset: 960)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1771, file: !1772, line: 523, baseType: !7, size: 32, offset: 992)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1771, file: !1772, line: 528, baseType: !1202, size: 64, offset: 1024)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1771, file: !1772, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1771, file: !1772, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1771, file: !1772, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1771, file: !1772, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1771, file: !1772, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1771, file: !1772, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1771, file: !1772, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1771, file: !1772, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1771, file: !1772, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1771, file: !1772, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1771, file: !1772, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1771, file: !1772, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1771, file: !1772, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1771, file: !1772, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1771, file: !1772, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1771, file: !1772, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1766, file: !135, line: 3254, baseType: !998, size: 64, offset: 1536)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1766, file: !135, line: 3257, baseType: !998, size: 64, offset: 1600)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1766, file: !135, line: 3258, baseType: !998, size: 64, offset: 1664)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1766, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1766, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1766, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1766, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1766, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1766, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1766, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1766, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1766, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1766, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1766, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1766, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1766, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1766, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1766, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1766, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1766, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1766, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1001, file: !135, line: 3394, baseType: !2009, size: 1344)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2010)
!2010 = !{!2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2009, file: !135, line: 2280, baseType: !1037, size: 192)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2009, file: !135, line: 2281, baseType: !998, size: 64, offset: 192)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2009, file: !135, line: 2282, baseType: !998, size: 64, offset: 256)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2009, file: !135, line: 2283, baseType: !998, size: 64, offset: 320)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2009, file: !135, line: 2284, baseType: !998, size: 64, offset: 384)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2009, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2009, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2009, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2009, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2009, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2009, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2009, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2009, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2009, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2009, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2009, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2009, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2009, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2009, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2009, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2009, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2009, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2009, file: !135, line: 2306, baseType: !1639, size: 32, offset: 544)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2009, file: !135, line: 2307, baseType: !998, size: 64, offset: 576)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2009, file: !135, line: 2308, baseType: !998, size: 64, offset: 640)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2009, file: !135, line: 2314, baseType: !2037, size: 64, offset: 704)
!2037 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2038)
!2038 = !{!2039, !2040, !2041}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2037, file: !135, line: 2310, baseType: !1095, size: 32)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2037, file: !135, line: 2311, baseType: !1202, size: 64)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2037, file: !135, line: 2312, baseType: !2042, size: 64)
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2043 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2009, file: !135, line: 2315, baseType: !998, size: 64, offset: 768)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2009, file: !135, line: 2316, baseType: !998, size: 64, offset: 832)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2009, file: !135, line: 2317, baseType: !998, size: 64, offset: 896)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2009, file: !135, line: 2318, baseType: !998, size: 64, offset: 960)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2009, file: !135, line: 2319, baseType: !998, size: 64, offset: 1024)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2009, file: !135, line: 2320, baseType: !998, size: 64, offset: 1088)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2009, file: !135, line: 2321, baseType: !998, size: 64, offset: 1152)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2009, file: !135, line: 2322, baseType: !998, size: 64, offset: 1216)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2009, file: !135, line: 2324, baseType: !2053, size: 64, offset: 1280)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1001, file: !135, line: 3395, baseType: !2056, size: 320)
!2056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2057)
!2057 = !{!2058, !2059, !2060}
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2056, file: !135, line: 1470, baseType: !1037, size: 192)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2056, file: !135, line: 1471, baseType: !998, size: 64, offset: 192)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2056, file: !135, line: 1472, baseType: !998, size: 64, offset: 256)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1001, file: !135, line: 3396, baseType: !2062, size: 320)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2063)
!2063 = !{!2064, !2065, !2066}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2062, file: !135, line: 1483, baseType: !1037, size: 192)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2062, file: !135, line: 1484, baseType: !1095, size: 32, offset: 192)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2062, file: !135, line: 1485, baseType: !1383, size: 64, offset: 256)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1001, file: !135, line: 3397, baseType: !2068, size: 384)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2069)
!2069 = !{!2070, !2071, !2072, !2073}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2068, file: !135, line: 1830, baseType: !1037, size: 192)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2068, file: !135, line: 1831, baseType: !1126, size: 32, offset: 192)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2068, file: !135, line: 1832, baseType: !998, size: 64, offset: 256)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2068, file: !135, line: 1835, baseType: !1383, size: 64, offset: 320)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1001, file: !135, line: 3398, baseType: !2075, size: 704)
!2075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2076)
!2076 = !{!2077, !2078, !2079, !2080, !2081, !2086}
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2075, file: !135, line: 1899, baseType: !1037, size: 192)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2075, file: !135, line: 1902, baseType: !998, size: 64, offset: 192)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2075, file: !135, line: 1905, baseType: !1329, size: 64, offset: 256)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2075, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2075, file: !135, line: 1911, baseType: !2082, size: 64, offset: 384)
!2082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2083, size: 64)
!2083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1722, line: 117, size: 128, elements: !2084)
!2084 = !{!2085}
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2083, file: !1722, line: 120, baseType: !1889, size: 128)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2075, file: !135, line: 1914, baseType: !1371, size: 256, offset: 448)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1001, file: !135, line: 3399, baseType: !2088, size: 704)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2089)
!2089 = !{!2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2088, file: !135, line: 2009, baseType: !1037, size: 192)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2088, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2088, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2088, file: !135, line: 2014, baseType: !1126, size: 32, offset: 224)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2088, file: !135, line: 2016, baseType: !998, size: 64, offset: 256)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2088, file: !135, line: 2017, baseType: !1876, size: 64, offset: 320)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2088, file: !135, line: 2019, baseType: !998, size: 64, offset: 384)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2088, file: !135, line: 2020, baseType: !998, size: 64, offset: 448)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2088, file: !135, line: 2021, baseType: !998, size: 64, offset: 512)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2088, file: !135, line: 2022, baseType: !998, size: 64, offset: 576)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2088, file: !135, line: 2023, baseType: !998, size: 64, offset: 640)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1001, file: !135, line: 3400, baseType: !2102, size: 832)
!2102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2103)
!2103 = !{!2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113}
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2102, file: !135, line: 2431, baseType: !1037, size: 192)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2102, file: !135, line: 2433, baseType: !998, size: 64, offset: 192)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2102, file: !135, line: 2434, baseType: !998, size: 64, offset: 256)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2102, file: !135, line: 2435, baseType: !998, size: 64, offset: 320)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2102, file: !135, line: 2436, baseType: !998, size: 64, offset: 384)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2102, file: !135, line: 2437, baseType: !1876, size: 64, offset: 448)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2102, file: !135, line: 2438, baseType: !998, size: 64, offset: 512)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2102, file: !135, line: 2440, baseType: !998, size: 64, offset: 576)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2102, file: !135, line: 2441, baseType: !998, size: 64, offset: 640)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2102, file: !135, line: 2443, baseType: !2114, size: 128, offset: 704)
!2114 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2115)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2116)
!2116 = !{!2117}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2115, file: !135, line: 182, baseType: !1881, size: 128)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1001, file: !135, line: 3401, baseType: !2119, size: 320)
!2119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2120)
!2120 = !{!2121, !2122, !2129}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2119, file: !135, line: 3329, baseType: !1037, size: 192)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2119, file: !135, line: 3330, baseType: !2123, size: 64, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2124, size: 64)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2125)
!2125 = !{!2126, !2127, !2128}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2124, file: !135, line: 3322, baseType: !2123, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2124, file: !135, line: 3323, baseType: !2123, size: 64, offset: 64)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2124, file: !135, line: 3324, baseType: !998, size: 64, offset: 128)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2119, file: !135, line: 3331, baseType: !2123, size: 64, offset: 256)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1001, file: !135, line: 3402, baseType: !2131, size: 256)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2132)
!2132 = !{!2133, !2134}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2131, file: !135, line: 1541, baseType: !1037, size: 192)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2131, file: !135, line: 1542, baseType: !2135, size: 64, offset: 192)
!2135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2136, size: 64)
!2136 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2137)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2138)
!2138 = !{!2139}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2137, file: !135, line: 1538, baseType: !2140, size: 192)
!2140 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2141)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2142)
!2142 = !{!2143, !2144, !2145}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2141, file: !135, line: 1537, baseType: !7, size: 32)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2141, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2141, file: !135, line: 1537, baseType: !2146, size: 128, offset: 64)
!2146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2147, size: 128, elements: !1099)
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2148)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2149)
!2149 = !{!2150, !2151}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2148, file: !135, line: 1533, baseType: !998, size: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2148, file: !135, line: 1534, baseType: !998, size: 64, offset: 64)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1001, file: !135, line: 3403, baseType: !2153, size: 512)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2154)
!2154 = !{!2155, !2156, !2157, !2158, !2164, !2165, !2166}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2153, file: !135, line: 1939, baseType: !1037, size: 192)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2153, file: !135, line: 1940, baseType: !1126, size: 32, offset: 192)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2153, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2153, file: !135, line: 1946, baseType: !2159, size: 32, offset: 256)
!2159 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2160)
!2160 = !{!2161, !2162, !2163}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2159, file: !135, line: 1943, baseType: !376, size: 32)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2159, file: !135, line: 1944, baseType: !383, size: 32)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2159, file: !135, line: 1945, baseType: !134, size: 32)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2153, file: !135, line: 1950, baseType: !1319, size: 64, offset: 320)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2153, file: !135, line: 1951, baseType: !1319, size: 64, offset: 384)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2153, file: !135, line: 1953, baseType: !1383, size: 64, offset: 448)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1001, file: !135, line: 3404, baseType: !2168, size: 1664)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2169)
!2169 = !{!2170, !2171}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2168, file: !135, line: 3338, baseType: !1037, size: 192)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2168, file: !135, line: 3341, baseType: !2172, size: 1472, offset: 192)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2173, line: 410, size: 1472, elements: !2174)
!2173 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2174 = !{!2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2172, file: !2173, line: 412, baseType: !1095, size: 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2172, file: !2173, line: 413, baseType: !1095, size: 32, offset: 32)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2172, file: !2173, line: 414, baseType: !1095, size: 32, offset: 64)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2172, file: !2173, line: 415, baseType: !1095, size: 32, offset: 96)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2172, file: !2173, line: 416, baseType: !1095, size: 32, offset: 128)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2172, file: !2173, line: 417, baseType: !1095, size: 32, offset: 160)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2172, file: !2173, line: 418, baseType: !1118, size: 8, offset: 192)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2172, file: !2173, line: 419, baseType: !1118, size: 8, offset: 200)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2172, file: !2173, line: 420, baseType: !2184, size: 8, offset: 208)
!2184 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2172, file: !2173, line: 421, baseType: !2184, size: 8, offset: 216)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2172, file: !2173, line: 422, baseType: !2184, size: 8, offset: 224)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2172, file: !2173, line: 423, baseType: !2184, size: 8, offset: 232)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2172, file: !2173, line: 424, baseType: !2184, size: 8, offset: 240)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2172, file: !2173, line: 425, baseType: !2184, size: 8, offset: 248)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2172, file: !2173, line: 426, baseType: !2184, size: 8, offset: 256)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2172, file: !2173, line: 427, baseType: !2184, size: 8, offset: 264)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2172, file: !2173, line: 428, baseType: !2184, size: 8, offset: 272)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2172, file: !2173, line: 429, baseType: !2184, size: 8, offset: 280)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2172, file: !2173, line: 430, baseType: !2184, size: 8, offset: 288)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2172, file: !2173, line: 431, baseType: !2184, size: 8, offset: 296)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2172, file: !2173, line: 432, baseType: !2184, size: 8, offset: 304)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2172, file: !2173, line: 433, baseType: !2184, size: 8, offset: 312)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2172, file: !2173, line: 434, baseType: !2184, size: 8, offset: 320)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2172, file: !2173, line: 435, baseType: !2184, size: 8, offset: 328)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2172, file: !2173, line: 436, baseType: !2184, size: 8, offset: 336)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2172, file: !2173, line: 437, baseType: !2184, size: 8, offset: 344)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2172, file: !2173, line: 438, baseType: !2184, size: 8, offset: 352)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2172, file: !2173, line: 439, baseType: !2184, size: 8, offset: 360)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2172, file: !2173, line: 440, baseType: !2184, size: 8, offset: 368)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2172, file: !2173, line: 441, baseType: !2184, size: 8, offset: 376)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2172, file: !2173, line: 442, baseType: !2184, size: 8, offset: 384)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2172, file: !2173, line: 443, baseType: !2184, size: 8, offset: 392)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2172, file: !2173, line: 444, baseType: !2184, size: 8, offset: 400)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2172, file: !2173, line: 445, baseType: !2184, size: 8, offset: 408)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2172, file: !2173, line: 446, baseType: !2184, size: 8, offset: 416)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2172, file: !2173, line: 447, baseType: !2184, size: 8, offset: 424)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2172, file: !2173, line: 448, baseType: !2184, size: 8, offset: 432)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2172, file: !2173, line: 449, baseType: !2184, size: 8, offset: 440)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2172, file: !2173, line: 450, baseType: !2184, size: 8, offset: 448)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2172, file: !2173, line: 451, baseType: !2184, size: 8, offset: 456)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2172, file: !2173, line: 452, baseType: !2184, size: 8, offset: 464)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2172, file: !2173, line: 453, baseType: !2184, size: 8, offset: 472)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2172, file: !2173, line: 454, baseType: !2184, size: 8, offset: 480)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2172, file: !2173, line: 455, baseType: !2184, size: 8, offset: 488)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2172, file: !2173, line: 456, baseType: !2184, size: 8, offset: 496)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2172, file: !2173, line: 457, baseType: !2184, size: 8, offset: 504)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2172, file: !2173, line: 458, baseType: !2184, size: 8, offset: 512)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2172, file: !2173, line: 459, baseType: !2184, size: 8, offset: 520)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2172, file: !2173, line: 460, baseType: !2184, size: 8, offset: 528)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2172, file: !2173, line: 461, baseType: !2184, size: 8, offset: 536)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2172, file: !2173, line: 462, baseType: !2184, size: 8, offset: 544)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2172, file: !2173, line: 463, baseType: !2184, size: 8, offset: 552)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2172, file: !2173, line: 464, baseType: !2184, size: 8, offset: 560)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2172, file: !2173, line: 465, baseType: !2184, size: 8, offset: 568)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2172, file: !2173, line: 466, baseType: !2184, size: 8, offset: 576)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2172, file: !2173, line: 467, baseType: !2184, size: 8, offset: 584)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2172, file: !2173, line: 468, baseType: !2184, size: 8, offset: 592)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2172, file: !2173, line: 469, baseType: !2184, size: 8, offset: 600)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2172, file: !2173, line: 470, baseType: !2184, size: 8, offset: 608)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2172, file: !2173, line: 471, baseType: !2184, size: 8, offset: 616)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2172, file: !2173, line: 472, baseType: !2184, size: 8, offset: 624)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2172, file: !2173, line: 473, baseType: !2184, size: 8, offset: 632)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2172, file: !2173, line: 474, baseType: !2184, size: 8, offset: 640)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2172, file: !2173, line: 475, baseType: !2184, size: 8, offset: 648)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2172, file: !2173, line: 476, baseType: !2184, size: 8, offset: 656)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2172, file: !2173, line: 477, baseType: !2184, size: 8, offset: 664)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2172, file: !2173, line: 478, baseType: !2184, size: 8, offset: 672)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2172, file: !2173, line: 479, baseType: !2184, size: 8, offset: 680)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2172, file: !2173, line: 480, baseType: !2184, size: 8, offset: 688)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2172, file: !2173, line: 481, baseType: !2184, size: 8, offset: 696)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2172, file: !2173, line: 482, baseType: !2184, size: 8, offset: 704)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2172, file: !2173, line: 483, baseType: !2184, size: 8, offset: 712)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2172, file: !2173, line: 484, baseType: !2184, size: 8, offset: 720)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2172, file: !2173, line: 485, baseType: !2184, size: 8, offset: 728)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2172, file: !2173, line: 486, baseType: !2184, size: 8, offset: 736)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2172, file: !2173, line: 487, baseType: !2184, size: 8, offset: 744)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2172, file: !2173, line: 488, baseType: !2184, size: 8, offset: 752)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2172, file: !2173, line: 489, baseType: !2184, size: 8, offset: 760)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2172, file: !2173, line: 490, baseType: !2184, size: 8, offset: 768)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2172, file: !2173, line: 491, baseType: !2184, size: 8, offset: 776)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2172, file: !2173, line: 492, baseType: !2184, size: 8, offset: 784)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2172, file: !2173, line: 493, baseType: !2184, size: 8, offset: 792)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2172, file: !2173, line: 494, baseType: !2184, size: 8, offset: 800)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2172, file: !2173, line: 495, baseType: !2184, size: 8, offset: 808)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2172, file: !2173, line: 496, baseType: !2184, size: 8, offset: 816)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2172, file: !2173, line: 497, baseType: !2184, size: 8, offset: 824)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2172, file: !2173, line: 498, baseType: !2184, size: 8, offset: 832)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2172, file: !2173, line: 499, baseType: !2184, size: 8, offset: 840)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2172, file: !2173, line: 500, baseType: !2184, size: 8, offset: 848)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2172, file: !2173, line: 501, baseType: !2184, size: 8, offset: 856)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2172, file: !2173, line: 502, baseType: !2184, size: 8, offset: 864)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2172, file: !2173, line: 503, baseType: !2184, size: 8, offset: 872)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2172, file: !2173, line: 504, baseType: !2184, size: 8, offset: 880)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2172, file: !2173, line: 505, baseType: !2184, size: 8, offset: 888)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2172, file: !2173, line: 506, baseType: !2184, size: 8, offset: 896)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2172, file: !2173, line: 507, baseType: !2184, size: 8, offset: 904)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2172, file: !2173, line: 508, baseType: !2184, size: 8, offset: 912)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2172, file: !2173, line: 509, baseType: !2184, size: 8, offset: 920)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2172, file: !2173, line: 510, baseType: !2184, size: 8, offset: 928)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2172, file: !2173, line: 511, baseType: !2184, size: 8, offset: 936)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2172, file: !2173, line: 512, baseType: !2184, size: 8, offset: 944)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2172, file: !2173, line: 513, baseType: !2184, size: 8, offset: 952)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2172, file: !2173, line: 514, baseType: !2184, size: 8, offset: 960)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2172, file: !2173, line: 515, baseType: !2184, size: 8, offset: 968)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2172, file: !2173, line: 516, baseType: !2184, size: 8, offset: 976)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2172, file: !2173, line: 517, baseType: !2184, size: 8, offset: 984)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2172, file: !2173, line: 518, baseType: !2184, size: 8, offset: 992)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2172, file: !2173, line: 519, baseType: !2184, size: 8, offset: 1000)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2172, file: !2173, line: 520, baseType: !2184, size: 8, offset: 1008)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2172, file: !2173, line: 521, baseType: !2184, size: 8, offset: 1016)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2172, file: !2173, line: 522, baseType: !2184, size: 8, offset: 1024)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2172, file: !2173, line: 523, baseType: !2184, size: 8, offset: 1032)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2172, file: !2173, line: 524, baseType: !2184, size: 8, offset: 1040)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2172, file: !2173, line: 525, baseType: !2184, size: 8, offset: 1048)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2172, file: !2173, line: 526, baseType: !2184, size: 8, offset: 1056)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2172, file: !2173, line: 527, baseType: !2184, size: 8, offset: 1064)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2172, file: !2173, line: 528, baseType: !2184, size: 8, offset: 1072)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2172, file: !2173, line: 529, baseType: !2184, size: 8, offset: 1080)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2172, file: !2173, line: 530, baseType: !2184, size: 8, offset: 1088)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2172, file: !2173, line: 531, baseType: !2184, size: 8, offset: 1096)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2172, file: !2173, line: 532, baseType: !2184, size: 8, offset: 1104)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2172, file: !2173, line: 533, baseType: !2184, size: 8, offset: 1112)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2172, file: !2173, line: 534, baseType: !2184, size: 8, offset: 1120)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2172, file: !2173, line: 535, baseType: !2184, size: 8, offset: 1128)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2172, file: !2173, line: 536, baseType: !2184, size: 8, offset: 1136)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2172, file: !2173, line: 537, baseType: !2184, size: 8, offset: 1144)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2172, file: !2173, line: 538, baseType: !2184, size: 8, offset: 1152)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2172, file: !2173, line: 539, baseType: !2184, size: 8, offset: 1160)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2172, file: !2173, line: 540, baseType: !2184, size: 8, offset: 1168)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2172, file: !2173, line: 541, baseType: !2184, size: 8, offset: 1176)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2172, file: !2173, line: 542, baseType: !2184, size: 8, offset: 1184)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2172, file: !2173, line: 543, baseType: !2184, size: 8, offset: 1192)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2172, file: !2173, line: 544, baseType: !2184, size: 8, offset: 1200)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2172, file: !2173, line: 545, baseType: !2184, size: 8, offset: 1208)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2172, file: !2173, line: 546, baseType: !2184, size: 8, offset: 1216)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2172, file: !2173, line: 547, baseType: !2184, size: 8, offset: 1224)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2172, file: !2173, line: 548, baseType: !2184, size: 8, offset: 1232)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2172, file: !2173, line: 549, baseType: !2184, size: 8, offset: 1240)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2172, file: !2173, line: 550, baseType: !2184, size: 8, offset: 1248)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2172, file: !2173, line: 551, baseType: !2184, size: 8, offset: 1256)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2172, file: !2173, line: 552, baseType: !2184, size: 8, offset: 1264)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2172, file: !2173, line: 553, baseType: !2184, size: 8, offset: 1272)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2172, file: !2173, line: 554, baseType: !2184, size: 8, offset: 1280)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2172, file: !2173, line: 555, baseType: !2184, size: 8, offset: 1288)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2172, file: !2173, line: 556, baseType: !2184, size: 8, offset: 1296)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2172, file: !2173, line: 557, baseType: !2184, size: 8, offset: 1304)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2172, file: !2173, line: 558, baseType: !2184, size: 8, offset: 1312)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2172, file: !2173, line: 559, baseType: !2184, size: 8, offset: 1320)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2172, file: !2173, line: 560, baseType: !2184, size: 8, offset: 1328)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2172, file: !2173, line: 561, baseType: !2184, size: 8, offset: 1336)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2172, file: !2173, line: 562, baseType: !2184, size: 8, offset: 1344)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2172, file: !2173, line: 563, baseType: !2184, size: 8, offset: 1352)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2172, file: !2173, line: 564, baseType: !2184, size: 8, offset: 1360)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2172, file: !2173, line: 565, baseType: !2184, size: 8, offset: 1368)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2172, file: !2173, line: 566, baseType: !2184, size: 8, offset: 1376)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2172, file: !2173, line: 567, baseType: !2184, size: 8, offset: 1384)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2172, file: !2173, line: 568, baseType: !2184, size: 8, offset: 1392)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2172, file: !2173, line: 569, baseType: !2184, size: 8, offset: 1400)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2172, file: !2173, line: 570, baseType: !2184, size: 8, offset: 1408)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2172, file: !2173, line: 571, baseType: !2184, size: 8, offset: 1416)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2172, file: !2173, line: 572, baseType: !2184, size: 8, offset: 1424)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2172, file: !2173, line: 573, baseType: !2184, size: 8, offset: 1432)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2172, file: !2173, line: 574, baseType: !2184, size: 8, offset: 1440)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1001, file: !135, line: 3405, baseType: !2340, size: 384)
!2340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2341)
!2341 = !{!2342, !2343}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2340, file: !135, line: 3353, baseType: !1037, size: 192)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2340, file: !135, line: 3356, baseType: !2344, size: 192, offset: 192)
!2344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2173, line: 578, size: 192, elements: !2345)
!2345 = !{!2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356}
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2344, file: !2173, line: 580, baseType: !1095, size: 32)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2344, file: !2173, line: 581, baseType: !1095, size: 32, offset: 32)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2344, file: !2173, line: 582, baseType: !1095, size: 32, offset: 64)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2344, file: !2173, line: 583, baseType: !1095, size: 32, offset: 96)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2344, file: !2173, line: 584, baseType: !1118, size: 8, offset: 128)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2344, file: !2173, line: 585, baseType: !1118, size: 8, offset: 136)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2344, file: !2173, line: 586, baseType: !1118, size: 8, offset: 144)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2344, file: !2173, line: 587, baseType: !1118, size: 8, offset: 152)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2344, file: !2173, line: 588, baseType: !1118, size: 8, offset: 160)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2344, file: !2173, line: 589, baseType: !1118, size: 8, offset: 168)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2344, file: !2173, line: 590, baseType: !1118, size: 8, offset: 176)
!2357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2358, size: 64)
!2358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "scev_info_str", file: !3, line: 285, size: 192, elements: !2359)
!2359 = !{!2360, !2361, !2362}
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "instantiated_below", scope: !2358, file: !3, line: 286, baseType: !1782, size: 64)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2358, file: !3, line: 287, baseType: !998, size: 64, offset: 64)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "chrec", scope: !2358, file: !3, line: 288, baseType: !998, size: 64, offset: 128)
!2363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2364, size: 64)
!2364 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1001)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1331)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2368, size: 64)
!2368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2358)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "chrec_stats", file: !3, line: 2809, size: 192, elements: !2371)
!2371 = !{!2372, !2373, !2374, !2375, !2376, !2377}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "nb_chrecs", scope: !2370, file: !3, line: 2811, baseType: !7, size: 32)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "nb_affine", scope: !2370, file: !3, line: 2812, baseType: !7, size: 32, offset: 32)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "nb_affine_multivar", scope: !2370, file: !3, line: 2813, baseType: !7, size: 32, offset: 64)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "nb_higher_poly", scope: !2370, file: !3, line: 2814, baseType: !7, size: 32, offset: 96)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "nb_chrec_dont_know", scope: !2370, file: !3, line: 2815, baseType: !7, size: 32, offset: 128)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "nb_undetermined", scope: !2370, file: !3, line: 2816, baseType: !7, size: 32, offset: 160)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2380, line: 32, baseType: !2381)
!2380 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2380, line: 32, size: 96, elements: !2382)
!2382 = !{!2383}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2381, file: !2380, line: 32, baseType: !2384, size: 96)
!2384 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2380, line: 31, baseType: !2385)
!2385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2380, line: 31, size: 96, elements: !2386)
!2386 = !{!2387, !2388, !2389}
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2385, file: !2380, line: 31, baseType: !7, size: 32)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2385, file: !2380, line: 31, baseType: !7, size: 32, offset: 32)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2385, file: !2380, line: 31, baseType: !2390, size: 32, offset: 64)
!2390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1095, size: 32, elements: !1099)
!2391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2392, size: 64)
!2392 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !391, line: 34, baseType: !2393)
!2393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !391, line: 34, size: 128, elements: !2394)
!2394 = !{!2395}
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2393, file: !391, line: 34, baseType: !1868, size: 128)
!2396 = !{!2397, !2411, !0, !2413, !2415, !2417, !2419}
!2397 = !DIGlobalVariableExpression(var: !2398, expr: !DIExpression())
!2398 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_tree_scalar_evolution_h", scope: !2, file: !2399, line: 113, type: !2400, isLocal: false, isDefinition: true)
!2399 = !DIFile(filename: "./gt-tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2401, size: 640, elements: !1246)
!2401 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2402)
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2403, line: 69, size: 320, elements: !2404)
!2403 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2404 = !{!2405, !2406, !2407, !2408, !2410}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2402, file: !2403, line: 70, baseType: !1282, size: 64)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2402, file: !2403, line: 71, baseType: !1475, size: 64, offset: 64)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2402, file: !2403, line: 72, baseType: !1475, size: 64, offset: 128)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2402, file: !2403, line: 73, baseType: !2409, size: 64, offset: 192)
!2409 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2403, line: 65, baseType: !1833)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2402, file: !2403, line: 74, baseType: !2409, size: 64, offset: 256)
!2411 = !DIGlobalVariableExpression(var: !2412, expr: !DIExpression())
!2412 = distinct !DIGlobalVariable(name: "chrec_not_analyzed_yet", scope: !2, file: !3, line: 300, type: !998, isLocal: false, isDefinition: true)
!2413 = !DIGlobalVariableExpression(var: !2414, expr: !DIExpression())
!2414 = distinct !DIGlobalVariable(name: "chrec_known", scope: !2, file: !3, line: 308, type: !998, isLocal: false, isDefinition: true)
!2415 = !DIGlobalVariableExpression(var: !2416, expr: !DIExpression())
!2416 = distinct !DIGlobalVariable(name: "scalar_evolution_info", scope: !2, file: !3, line: 310, type: !1814, isLocal: true, isDefinition: true)
!2417 = !DIGlobalVariableExpression(var: !2418, expr: !DIExpression())
!2418 = distinct !DIGlobalVariable(name: "nb_get_scev", scope: !2, file: !3, line: 293, type: !7, isLocal: true, isDefinition: true)
!2419 = !DIGlobalVariableExpression(var: !2420, expr: !DIExpression())
!2420 = distinct !DIGlobalVariable(name: "nb_set_scev", scope: !2, file: !3, line: 292, type: !7, isLocal: true, isDefinition: true)
!2421 = !{i32 7, !"Dwarf Version", i32 4}
!2422 = !{i32 2, !"Debug Info Version", i32 3}
!2423 = !{i32 1, !"wchar_size", i32 4}
!2424 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2425 = distinct !DISubprogram(name: "chrec_contains_symbols_defined_in_loop", scope: !3, file: !3, line: 381, type: !2426, scopeLine: 382, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2426 = !DISubroutineType(types: !2427)
!2427 = !{!1118, !2428, !7}
!2428 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !999, line: 59, baseType: !2363)
!2429 = !{}
!2430 = !DILocalVariable(name: "chrec", arg: 1, scope: !2425, file: !3, line: 381, type: !2428)
!2431 = !DILocation(line: 381, column: 52, scope: !2425)
!2432 = !DILocalVariable(name: "loop_nb", arg: 2, scope: !2425, file: !3, line: 381, type: !7)
!2433 = !DILocation(line: 381, column: 68, scope: !2425)
!2434 = !DILocalVariable(name: "i", scope: !2425, file: !3, line: 383, type: !1095)
!2435 = !DILocation(line: 383, column: 7, scope: !2425)
!2436 = !DILocalVariable(name: "n", scope: !2425, file: !3, line: 383, type: !1095)
!2437 = !DILocation(line: 383, column: 10, scope: !2425)
!2438 = !DILocation(line: 385, column: 7, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 385, column: 7)
!2440 = !DILocation(line: 385, column: 13, scope: !2439)
!2441 = !DILocation(line: 385, column: 7, scope: !2425)
!2442 = !DILocation(line: 386, column: 5, scope: !2439)
!2443 = !DILocation(line: 388, column: 32, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 388, column: 7)
!2445 = !DILocation(line: 388, column: 7, scope: !2444)
!2446 = !DILocation(line: 388, column: 7, scope: !2425)
!2447 = !DILocation(line: 389, column: 5, scope: !2444)
!2448 = !DILocation(line: 391, column: 7, scope: !2449)
!2449 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 391, column: 7)
!2450 = !DILocation(line: 391, column: 25, scope: !2449)
!2451 = !DILocation(line: 392, column: 7, scope: !2449)
!2452 = !DILocation(line: 392, column: 10, scope: !2449)
!2453 = !DILocation(line: 392, column: 28, scope: !2449)
!2454 = !DILocation(line: 393, column: 7, scope: !2449)
!2455 = !DILocation(line: 393, column: 10, scope: !2449)
!2456 = !DILocation(line: 393, column: 28, scope: !2449)
!2457 = !DILocation(line: 394, column: 7, scope: !2449)
!2458 = !DILocation(line: 394, column: 10, scope: !2449)
!2459 = !DILocation(line: 394, column: 28, scope: !2449)
!2460 = !DILocation(line: 395, column: 7, scope: !2449)
!2461 = !DILocation(line: 395, column: 10, scope: !2449)
!2462 = !DILocation(line: 395, column: 28, scope: !2449)
!2463 = !DILocation(line: 396, column: 7, scope: !2449)
!2464 = !DILocation(line: 396, column: 10, scope: !2449)
!2465 = !DILocation(line: 396, column: 28, scope: !2449)
!2466 = !DILocation(line: 391, column: 7, scope: !2425)
!2467 = !DILocation(line: 397, column: 5, scope: !2449)
!2468 = !DILocation(line: 399, column: 7, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 399, column: 7)
!2470 = !DILocation(line: 399, column: 25, scope: !2469)
!2471 = !DILocation(line: 399, column: 7, scope: !2425)
!2472 = !DILocalVariable(name: "def", scope: !2473, file: !3, line: 401, type: !1329)
!2473 = distinct !DILexicalBlock(scope: !2469, file: !3, line: 400, column: 5)
!2474 = !DILocation(line: 401, column: 14, scope: !2473)
!2475 = !DILocation(line: 401, column: 20, scope: !2473)
!2476 = !DILocalVariable(name: "def_loop", scope: !2473, file: !3, line: 402, type: !1545)
!2477 = !DILocation(line: 402, column: 20, scope: !2473)
!2478 = !DILocation(line: 402, column: 53, scope: !2473)
!2479 = !DILocation(line: 402, column: 31, scope: !2473)
!2480 = !DILocalVariable(name: "loop", scope: !2473, file: !3, line: 403, type: !1545)
!2481 = !DILocation(line: 403, column: 20, scope: !2473)
!2482 = !DILocation(line: 403, column: 37, scope: !2473)
!2483 = !DILocation(line: 403, column: 27, scope: !2473)
!2484 = !DILocation(line: 405, column: 11, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2473, file: !3, line: 405, column: 11)
!2486 = !DILocation(line: 405, column: 20, scope: !2485)
!2487 = !DILocation(line: 405, column: 11, scope: !2473)
!2488 = !DILocation(line: 406, column: 2, scope: !2485)
!2489 = !DILocation(line: 408, column: 11, scope: !2490)
!2490 = distinct !DILexicalBlock(scope: !2473, file: !3, line: 408, column: 11)
!2491 = !DILocation(line: 408, column: 19, scope: !2490)
!2492 = !DILocation(line: 408, column: 16, scope: !2490)
!2493 = !DILocation(line: 408, column: 28, scope: !2490)
!2494 = !DILocation(line: 408, column: 51, scope: !2490)
!2495 = !DILocation(line: 408, column: 57, scope: !2490)
!2496 = !DILocation(line: 408, column: 31, scope: !2490)
!2497 = !DILocation(line: 408, column: 11, scope: !2473)
!2498 = !DILocation(line: 409, column: 2, scope: !2490)
!2499 = !DILocation(line: 411, column: 7, scope: !2473)
!2500 = !DILocation(line: 414, column: 7, scope: !2425)
!2501 = !DILocation(line: 414, column: 5, scope: !2425)
!2502 = !DILocation(line: 415, column: 10, scope: !2503)
!2503 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 415, column: 3)
!2504 = !DILocation(line: 415, column: 8, scope: !2503)
!2505 = !DILocation(line: 415, column: 15, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 415, column: 3)
!2507 = !DILocation(line: 415, column: 19, scope: !2506)
!2508 = !DILocation(line: 415, column: 17, scope: !2506)
!2509 = !DILocation(line: 415, column: 3, scope: !2503)
!2510 = !DILocation(line: 416, column: 49, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2506, file: !3, line: 416, column: 9)
!2512 = !DILocation(line: 417, column: 7, scope: !2511)
!2513 = !DILocation(line: 416, column: 9, scope: !2511)
!2514 = !DILocation(line: 416, column: 9, scope: !2506)
!2515 = !DILocation(line: 418, column: 7, scope: !2511)
!2516 = !DILocation(line: 417, column: 14, scope: !2511)
!2517 = !DILocation(line: 415, column: 23, scope: !2506)
!2518 = !DILocation(line: 415, column: 3, scope: !2506)
!2519 = distinct !{!2519, !2509, !2520}
!2520 = !DILocation(line: 418, column: 14, scope: !2503)
!2521 = !DILocation(line: 419, column: 3, scope: !2425)
!2522 = !DILocation(line: 420, column: 1, scope: !2425)
!2523 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !2524, file: !2524, line: 617, type: !2525, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2524 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2525 = !DISubroutineType(types: !2526)
!2526 = !{!1545, !1329}
!2527 = !DILocalVariable(name: "stmt", arg: 1, scope: !2523, file: !2524, line: 617, type: !1329)
!2528 = !DILocation(line: 617, column: 30, scope: !2523)
!2529 = !DILocalVariable(name: "bb", scope: !2523, file: !2524, line: 619, type: !1782)
!2530 = !DILocation(line: 619, column: 15, scope: !2523)
!2531 = !DILocation(line: 619, column: 31, scope: !2523)
!2532 = !DILocation(line: 619, column: 20, scope: !2523)
!2533 = !DILocation(line: 620, column: 8, scope: !2534)
!2534 = distinct !DILexicalBlock(scope: !2523, file: !2524, line: 620, column: 7)
!2535 = !DILocation(line: 620, column: 7, scope: !2523)
!2536 = !DILocation(line: 621, column: 5, scope: !2534)
!2537 = !DILocation(line: 623, column: 10, scope: !2523)
!2538 = !DILocation(line: 623, column: 14, scope: !2523)
!2539 = !DILocation(line: 623, column: 3, scope: !2523)
!2540 = !DILocation(line: 624, column: 1, scope: !2523)
!2541 = distinct !DISubprogram(name: "get_loop", scope: !330, file: !330, line: 417, type: !2542, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2542 = !DISubroutineType(types: !2543)
!2543 = !{!1545, !7}
!2544 = !DILocalVariable(name: "num", arg: 1, scope: !2541, file: !330, line: 417, type: !7)
!2545 = !DILocation(line: 417, column: 20, scope: !2541)
!2546 = !DILocation(line: 419, column: 10, scope: !2541)
!2547 = !DILocation(line: 419, column: 3, scope: !2541)
!2548 = distinct !DISubprogram(name: "tree_operand_length", scope: !135, file: !135, line: 5347, type: !2549, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2549 = !DISubroutineType(types: !2550)
!2550 = !{!1095, !2428}
!2551 = !DILocalVariable(name: "node", arg: 1, scope: !2548, file: !135, line: 5347, type: !2428)
!2552 = !DILocation(line: 5347, column: 33, scope: !2548)
!2553 = !DILocation(line: 5349, column: 7, scope: !2554)
!2554 = distinct !DILexicalBlock(scope: !2548, file: !135, line: 5349, column: 7)
!2555 = !DILocation(line: 5349, column: 7, scope: !2548)
!2556 = !DILocation(line: 5350, column: 12, scope: !2554)
!2557 = !DILocation(line: 5350, column: 5, scope: !2554)
!2558 = !DILocation(line: 5352, column: 12, scope: !2554)
!2559 = !DILocation(line: 5352, column: 5, scope: !2554)
!2560 = !DILocation(line: 5353, column: 1, scope: !2548)
!2561 = distinct !DISubprogram(name: "compute_overall_effect_of_inner_loop", scope: !3, file: !3, line: 470, type: !2562, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2562 = !DISubroutineType(types: !2563)
!2563 = !{!998, !1545, !998}
!2564 = !DILocalVariable(name: "loop", arg: 1, scope: !2561, file: !3, line: 470, type: !1545)
!2565 = !DILocation(line: 470, column: 52, scope: !2561)
!2566 = !DILocalVariable(name: "evolution_fn", arg: 2, scope: !2561, file: !3, line: 470, type: !998)
!2567 = !DILocation(line: 470, column: 63, scope: !2561)
!2568 = !DILocalVariable(name: "val", scope: !2561, file: !3, line: 472, type: !1118)
!2569 = !DILocation(line: 472, column: 8, scope: !2561)
!2570 = !DILocation(line: 474, column: 7, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2561, file: !3, line: 474, column: 7)
!2572 = !DILocation(line: 474, column: 23, scope: !2571)
!2573 = !DILocation(line: 474, column: 20, scope: !2571)
!2574 = !DILocation(line: 474, column: 7, scope: !2561)
!2575 = !DILocation(line: 475, column: 12, scope: !2571)
!2576 = !DILocation(line: 475, column: 5, scope: !2571)
!2577 = !DILocation(line: 477, column: 12, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2571, file: !3, line: 477, column: 12)
!2579 = !DILocation(line: 477, column: 37, scope: !2578)
!2580 = !DILocation(line: 477, column: 12, scope: !2571)
!2581 = !DILocalVariable(name: "inner_loop", scope: !2582, file: !3, line: 479, type: !1545)
!2582 = distinct !DILexicalBlock(scope: !2578, file: !3, line: 478, column: 5)
!2583 = !DILocation(line: 479, column: 20, scope: !2582)
!2584 = !DILocation(line: 479, column: 49, scope: !2582)
!2585 = !DILocation(line: 479, column: 33, scope: !2582)
!2586 = !DILocation(line: 481, column: 11, scope: !2587)
!2587 = distinct !DILexicalBlock(scope: !2582, file: !3, line: 481, column: 11)
!2588 = !DILocation(line: 481, column: 25, scope: !2587)
!2589 = !DILocation(line: 481, column: 22, scope: !2587)
!2590 = !DILocation(line: 482, column: 4, scope: !2587)
!2591 = !DILocation(line: 482, column: 27, scope: !2587)
!2592 = !DILocation(line: 482, column: 33, scope: !2587)
!2593 = !DILocation(line: 482, column: 7, scope: !2587)
!2594 = !DILocation(line: 481, column: 11, scope: !2582)
!2595 = !DILocalVariable(name: "nb_iter", scope: !2596, file: !3, line: 484, type: !998)
!2596 = distinct !DILexicalBlock(scope: !2587, file: !3, line: 483, column: 2)
!2597 = !DILocation(line: 484, column: 9, scope: !2596)
!2598 = !DILocation(line: 484, column: 47, scope: !2596)
!2599 = !DILocation(line: 484, column: 19, scope: !2596)
!2600 = !DILocation(line: 486, column: 8, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 486, column: 8)
!2602 = !DILocation(line: 486, column: 19, scope: !2601)
!2603 = !DILocation(line: 486, column: 16, scope: !2601)
!2604 = !DILocation(line: 486, column: 8, scope: !2596)
!2605 = !DILocation(line: 487, column: 13, scope: !2601)
!2606 = !DILocation(line: 487, column: 6, scope: !2601)
!2607 = !DILocalVariable(name: "res", scope: !2608, file: !3, line: 490, type: !998)
!2608 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 489, column: 6)
!2609 = !DILocation(line: 490, column: 13, scope: !2608)
!2610 = !DILocation(line: 494, column: 27, scope: !2608)
!2611 = !DILocation(line: 494, column: 39, scope: !2608)
!2612 = !DILocation(line: 494, column: 44, scope: !2608)
!2613 = !DILocation(line: 494, column: 58, scope: !2608)
!2614 = !DILocation(line: 494, column: 14, scope: !2608)
!2615 = !DILocation(line: 494, column: 12, scope: !2608)
!2616 = !DILocation(line: 496, column: 52, scope: !2617)
!2617 = distinct !DILexicalBlock(scope: !2608, file: !3, line: 496, column: 12)
!2618 = !DILocation(line: 496, column: 57, scope: !2617)
!2619 = !DILocation(line: 496, column: 63, scope: !2617)
!2620 = !DILocation(line: 496, column: 12, scope: !2617)
!2621 = !DILocation(line: 496, column: 12, scope: !2608)
!2622 = !DILocation(line: 497, column: 33, scope: !2617)
!2623 = !DILocation(line: 497, column: 39, scope: !2617)
!2624 = !DILocation(line: 497, column: 9, scope: !2617)
!2625 = !DILocation(line: 497, column: 7, scope: !2617)
!2626 = !DILocation(line: 497, column: 3, scope: !2617)
!2627 = !DILocation(line: 500, column: 53, scope: !2608)
!2628 = !DILocation(line: 500, column: 59, scope: !2608)
!2629 = !DILocation(line: 500, column: 15, scope: !2608)
!2630 = !DILocation(line: 500, column: 8, scope: !2608)
!2631 = !DILocation(line: 504, column: 9, scope: !2587)
!2632 = !DILocation(line: 504, column: 2, scope: !2587)
!2633 = !DILocation(line: 508, column: 36, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2578, file: !3, line: 508, column: 12)
!2635 = !DILocation(line: 508, column: 50, scope: !2634)
!2636 = !DILocation(line: 508, column: 56, scope: !2634)
!2637 = !DILocation(line: 508, column: 12, scope: !2634)
!2638 = !DILocation(line: 508, column: 67, scope: !2634)
!2639 = !DILocation(line: 508, column: 70, scope: !2634)
!2640 = !DILocation(line: 508, column: 12, scope: !2578)
!2641 = !DILocation(line: 509, column: 12, scope: !2634)
!2642 = !DILocation(line: 509, column: 5, scope: !2634)
!2643 = !DILocation(line: 512, column: 12, scope: !2634)
!2644 = !DILocation(line: 512, column: 5, scope: !2634)
!2645 = !DILocation(line: 513, column: 1, scope: !2561)
!2646 = distinct !DISubprogram(name: "get_chrec_loop", scope: !2647, file: !2647, line: 65, type: !2648, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2647 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2648 = !DISubroutineType(types: !2649)
!2649 = !{!1545, !2428}
!2650 = !DILocalVariable(name: "chrec", arg: 1, scope: !2646, file: !2647, line: 65, type: !2428)
!2651 = !DILocation(line: 65, column: 28, scope: !2646)
!2652 = !DILocation(line: 67, column: 20, scope: !2646)
!2653 = !DILocation(line: 67, column: 10, scope: !2646)
!2654 = !DILocation(line: 67, column: 3, scope: !2646)
!2655 = distinct !DISubprogram(name: "number_of_latch_executions", scope: !3, file: !3, line: 2708, type: !2656, scopeLine: 2709, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2656 = !DISubroutineType(types: !2657)
!2657 = !{!998, !1545}
!2658 = !DILocalVariable(name: "loop", arg: 1, scope: !2655, file: !3, line: 2708, type: !1545)
!2659 = !DILocation(line: 2708, column: 42, scope: !2655)
!2660 = !DILocalVariable(name: "res", scope: !2655, file: !3, line: 2710, type: !998)
!2661 = !DILocation(line: 2710, column: 8, scope: !2655)
!2662 = !DILocalVariable(name: "type", scope: !2655, file: !3, line: 2710, type: !998)
!2663 = !DILocation(line: 2710, column: 13, scope: !2655)
!2664 = !DILocalVariable(name: "exit", scope: !2655, file: !3, line: 2711, type: !1309)
!2665 = !DILocation(line: 2711, column: 8, scope: !2655)
!2666 = !DILocalVariable(name: "niter_desc", scope: !2655, file: !3, line: 2712, type: !2667)
!2667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1722, line: 657, size: 640, elements: !2668)
!2668 = !{!2669, !2670, !2671, !2672, !2673, !2680, !2681}
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !2667, file: !1722, line: 659, baseType: !998, size: 64)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !2667, file: !1722, line: 663, baseType: !998, size: 64, offset: 64)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !2667, file: !1722, line: 667, baseType: !998, size: 64, offset: 128)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !2667, file: !1722, line: 671, baseType: !1047, size: 128, offset: 192)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2667, file: !1722, line: 679, baseType: !2674, size: 192, offset: 320)
!2674 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1722, line: 651, baseType: !2675)
!2675 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1722, line: 644, size: 192, elements: !2676)
!2676 = !{!2677, !2678, !2679}
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2675, file: !1722, line: 647, baseType: !998, size: 64)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2675, file: !1722, line: 647, baseType: !998, size: 64, offset: 64)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !2675, file: !1722, line: 650, baseType: !1118, size: 8, offset: 128)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2667, file: !1722, line: 680, baseType: !998, size: 64, offset: 512)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !2667, file: !1722, line: 681, baseType: !134, size: 32, offset: 576)
!2682 = !DILocation(line: 2712, column: 26, scope: !2655)
!2683 = !DILocation(line: 2716, column: 9, scope: !2655)
!2684 = !DILocation(line: 2716, column: 15, scope: !2655)
!2685 = !DILocation(line: 2716, column: 7, scope: !2655)
!2686 = !DILocation(line: 2717, column: 7, scope: !2687)
!2687 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2717, column: 7)
!2688 = !DILocation(line: 2717, column: 7, scope: !2655)
!2689 = !DILocation(line: 2718, column: 12, scope: !2687)
!2690 = !DILocation(line: 2718, column: 5, scope: !2687)
!2691 = !DILocation(line: 2719, column: 9, scope: !2655)
!2692 = !DILocation(line: 2719, column: 7, scope: !2655)
!2693 = !DILocation(line: 2721, column: 7, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2721, column: 7)
!2695 = !DILocation(line: 2721, column: 17, scope: !2694)
!2696 = !DILocation(line: 2721, column: 21, scope: !2694)
!2697 = !DILocation(line: 2721, column: 32, scope: !2694)
!2698 = !DILocation(line: 2721, column: 7, scope: !2655)
!2699 = !DILocation(line: 2722, column: 14, scope: !2694)
!2700 = !DILocation(line: 2722, column: 5, scope: !2694)
!2701 = !DILocation(line: 2724, column: 23, scope: !2655)
!2702 = !DILocation(line: 2724, column: 10, scope: !2655)
!2703 = !DILocation(line: 2724, column: 8, scope: !2655)
!2704 = !DILocation(line: 2725, column: 8, scope: !2705)
!2705 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2725, column: 7)
!2706 = !DILocation(line: 2725, column: 7, scope: !2655)
!2707 = !DILocation(line: 2726, column: 5, scope: !2705)
!2708 = !DILocation(line: 2728, column: 35, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2728, column: 7)
!2710 = !DILocation(line: 2728, column: 41, scope: !2709)
!2711 = !DILocation(line: 2728, column: 8, scope: !2709)
!2712 = !DILocation(line: 2728, column: 7, scope: !2655)
!2713 = !DILocation(line: 2729, column: 5, scope: !2709)
!2714 = !DILocation(line: 2731, column: 10, scope: !2655)
!2715 = !DILocation(line: 2731, column: 8, scope: !2655)
!2716 = !DILocation(line: 2732, column: 36, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 2732, column: 7)
!2718 = !DILocation(line: 2732, column: 7, scope: !2717)
!2719 = !DILocation(line: 2732, column: 7, scope: !2655)
!2720 = !DILocation(line: 2733, column: 26, scope: !2717)
!2721 = !DILocation(line: 2733, column: 11, scope: !2717)
!2722 = !DILocation(line: 2733, column: 9, scope: !2717)
!2723 = !DILocation(line: 2733, column: 5, scope: !2717)
!2724 = !DILocation(line: 2734, column: 38, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2734, column: 12)
!2726 = !DILocation(line: 2734, column: 12, scope: !2725)
!2727 = !DILocation(line: 2734, column: 12, scope: !2717)
!2728 = !DILocation(line: 2735, column: 22, scope: !2725)
!2729 = !DILocation(line: 2735, column: 9, scope: !2725)
!2730 = !DILocation(line: 2735, column: 5, scope: !2725)
!2731 = !DILocation(line: 2737, column: 11, scope: !2725)
!2732 = !DILocation(line: 2737, column: 9, scope: !2725)
!2733 = !DILocation(line: 2732, column: 47, scope: !2717)
!2734 = !DILabel(scope: !2655, name: "end", file: !3, line: 2739)
!2735 = !DILocation(line: 2739, column: 1, scope: !2655)
!2736 = !DILocation(line: 2740, column: 37, scope: !2655)
!2737 = !DILocation(line: 2740, column: 43, scope: !2655)
!2738 = !DILocation(line: 2740, column: 10, scope: !2655)
!2739 = !DILocation(line: 2740, column: 3, scope: !2655)
!2740 = !DILocation(line: 2741, column: 1, scope: !2655)
!2741 = distinct !DISubprogram(name: "instantiate_parameters", scope: !2647, file: !2647, line: 57, type: !2562, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2742 = !DILocalVariable(name: "loop", arg: 1, scope: !2741, file: !2647, line: 57, type: !1545)
!2743 = !DILocation(line: 57, column: 38, scope: !2741)
!2744 = !DILocalVariable(name: "chrec", arg: 2, scope: !2741, file: !2647, line: 57, type: !998)
!2745 = !DILocation(line: 57, column: 49, scope: !2741)
!2746 = !DILocation(line: 59, column: 47, scope: !2741)
!2747 = !DILocation(line: 59, column: 28, scope: !2741)
!2748 = !DILocation(line: 59, column: 54, scope: !2741)
!2749 = !DILocation(line: 59, column: 60, scope: !2741)
!2750 = !DILocation(line: 59, column: 10, scope: !2741)
!2751 = !DILocation(line: 59, column: 3, scope: !2741)
!2752 = distinct !DISubprogram(name: "no_evolution_in_loop_p", scope: !2753, file: !2753, line: 109, type: !2754, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2753 = !DIFile(filename: "./tree-chrec.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2754 = !DISubroutineType(types: !2755)
!2755 = !{!1118, !998, !7, !2756}
!2756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1118, size: 64)
!2757 = !DILocalVariable(name: "chrec", arg: 1, scope: !2752, file: !2753, line: 109, type: !998)
!2758 = !DILocation(line: 109, column: 30, scope: !2752)
!2759 = !DILocalVariable(name: "loop_num", arg: 2, scope: !2752, file: !2753, line: 109, type: !7)
!2760 = !DILocation(line: 109, column: 46, scope: !2752)
!2761 = !DILocalVariable(name: "res", arg: 3, scope: !2752, file: !2753, line: 109, type: !2756)
!2762 = !DILocation(line: 109, column: 62, scope: !2752)
!2763 = !DILocalVariable(name: "scev", scope: !2752, file: !2753, line: 111, type: !998)
!2764 = !DILocation(line: 111, column: 8, scope: !2752)
!2765 = !DILocation(line: 113, column: 7, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2752, file: !2753, line: 113, column: 7)
!2767 = !DILocation(line: 113, column: 16, scope: !2766)
!2768 = !DILocation(line: 113, column: 13, scope: !2766)
!2769 = !DILocation(line: 114, column: 7, scope: !2766)
!2770 = !DILocation(line: 114, column: 10, scope: !2766)
!2771 = !DILocation(line: 114, column: 19, scope: !2766)
!2772 = !DILocation(line: 114, column: 16, scope: !2766)
!2773 = !DILocation(line: 115, column: 7, scope: !2766)
!2774 = !DILocation(line: 115, column: 50, scope: !2766)
!2775 = !DILocation(line: 115, column: 57, scope: !2766)
!2776 = !DILocation(line: 115, column: 10, scope: !2766)
!2777 = !DILocation(line: 113, column: 7, scope: !2752)
!2778 = !DILocation(line: 116, column: 5, scope: !2766)
!2779 = !DILocation(line: 118, column: 3, scope: !2752)
!2780 = !DILocation(line: 119, column: 51, scope: !2752)
!2781 = !DILocation(line: 119, column: 58, scope: !2752)
!2782 = !DILocation(line: 119, column: 10, scope: !2752)
!2783 = !DILocation(line: 119, column: 8, scope: !2752)
!2784 = !DILocation(line: 120, column: 26, scope: !2752)
!2785 = !DILocation(line: 120, column: 11, scope: !2752)
!2786 = !DILocation(line: 120, column: 10, scope: !2752)
!2787 = !DILocation(line: 120, column: 4, scope: !2752)
!2788 = !DILocation(line: 120, column: 8, scope: !2752)
!2789 = !DILocation(line: 121, column: 3, scope: !2752)
!2790 = !DILocation(line: 122, column: 1, scope: !2752)
!2791 = distinct !DISubprogram(name: "chrec_is_positive", scope: !3, file: !3, line: 520, type: !2792, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2792 = !DISubroutineType(types: !2793)
!2793 = !{!1118, !998, !2756}
!2794 = !DILocalVariable(name: "chrec", arg: 1, scope: !2791, file: !3, line: 520, type: !998)
!2795 = !DILocation(line: 520, column: 25, scope: !2791)
!2796 = !DILocalVariable(name: "value", arg: 2, scope: !2791, file: !3, line: 520, type: !2756)
!2797 = !DILocation(line: 520, column: 38, scope: !2791)
!2798 = !DILocalVariable(name: "value0", scope: !2791, file: !3, line: 522, type: !1118)
!2799 = !DILocation(line: 522, column: 8, scope: !2791)
!2800 = !DILocalVariable(name: "value1", scope: !2791, file: !3, line: 522, type: !1118)
!2801 = !DILocation(line: 522, column: 16, scope: !2791)
!2802 = !DILocalVariable(name: "value2", scope: !2791, file: !3, line: 522, type: !1118)
!2803 = !DILocation(line: 522, column: 24, scope: !2791)
!2804 = !DILocalVariable(name: "end_value", scope: !2791, file: !3, line: 523, type: !998)
!2805 = !DILocation(line: 523, column: 8, scope: !2791)
!2806 = !DILocalVariable(name: "nb_iter", scope: !2791, file: !3, line: 523, type: !998)
!2807 = !DILocation(line: 523, column: 19, scope: !2791)
!2808 = !DILocation(line: 525, column: 11, scope: !2791)
!2809 = !DILocation(line: 525, column: 3, scope: !2791)
!2810 = !DILocation(line: 528, column: 31, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 528, column: 11)
!2812 = distinct !DILexicalBlock(scope: !2791, file: !3, line: 526, column: 5)
!2813 = !DILocation(line: 528, column: 12, scope: !2811)
!2814 = !DILocation(line: 529, column: 4, scope: !2811)
!2815 = !DILocation(line: 529, column: 27, scope: !2811)
!2816 = !DILocation(line: 529, column: 8, scope: !2811)
!2817 = !DILocation(line: 528, column: 11, scope: !2812)
!2818 = !DILocation(line: 530, column: 2, scope: !2811)
!2819 = !DILocation(line: 533, column: 11, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 533, column: 11)
!2821 = !DILocation(line: 533, column: 21, scope: !2820)
!2822 = !DILocation(line: 533, column: 18, scope: !2820)
!2823 = !DILocation(line: 533, column: 11, scope: !2812)
!2824 = !DILocation(line: 535, column: 13, scope: !2825)
!2825 = distinct !DILexicalBlock(scope: !2820, file: !3, line: 534, column: 2)
!2826 = !DILocation(line: 535, column: 5, scope: !2825)
!2827 = !DILocation(line: 535, column: 11, scope: !2825)
!2828 = !DILocation(line: 536, column: 4, scope: !2825)
!2829 = !DILocation(line: 543, column: 44, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 543, column: 11)
!2831 = !DILocation(line: 543, column: 12, scope: !2830)
!2832 = !DILocation(line: 543, column: 11, scope: !2812)
!2833 = !DILocation(line: 544, column: 2, scope: !2830)
!2834 = !DILocation(line: 546, column: 61, scope: !2812)
!2835 = !DILocation(line: 546, column: 45, scope: !2812)
!2836 = !DILocation(line: 546, column: 17, scope: !2812)
!2837 = !DILocation(line: 546, column: 15, scope: !2812)
!2838 = !DILocation(line: 547, column: 40, scope: !2839)
!2839 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 547, column: 11)
!2840 = !DILocation(line: 547, column: 11, scope: !2839)
!2841 = !DILocation(line: 547, column: 11, scope: !2812)
!2842 = !DILocation(line: 548, column: 2, scope: !2839)
!2843 = !DILocation(line: 557, column: 32, scope: !2812)
!2844 = !DILocation(line: 557, column: 56, scope: !2812)
!2845 = !DILocation(line: 557, column: 63, scope: !2812)
!2846 = !DILocation(line: 557, column: 19, scope: !2812)
!2847 = !DILocation(line: 557, column: 17, scope: !2812)
!2848 = !DILocation(line: 559, column: 31, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 559, column: 11)
!2850 = !DILocation(line: 559, column: 12, scope: !2849)
!2851 = !DILocation(line: 559, column: 11, scope: !2812)
!2852 = !DILocation(line: 560, column: 2, scope: !2849)
!2853 = !DILocation(line: 562, column: 16, scope: !2812)
!2854 = !DILocation(line: 562, column: 8, scope: !2812)
!2855 = !DILocation(line: 562, column: 14, scope: !2812)
!2856 = !DILocation(line: 563, column: 14, scope: !2812)
!2857 = !DILocation(line: 563, column: 24, scope: !2812)
!2858 = !DILocation(line: 563, column: 21, scope: !2812)
!2859 = !DILocation(line: 563, column: 7, scope: !2812)
!2860 = !DILocation(line: 566, column: 35, scope: !2812)
!2861 = !DILocation(line: 566, column: 17, scope: !2812)
!2862 = !DILocation(line: 566, column: 42, scope: !2812)
!2863 = !DILocation(line: 566, column: 16, scope: !2812)
!2864 = !DILocation(line: 566, column: 8, scope: !2812)
!2865 = !DILocation(line: 566, column: 14, scope: !2812)
!2866 = !DILocation(line: 567, column: 7, scope: !2812)
!2867 = !DILocation(line: 570, column: 7, scope: !2812)
!2868 = !DILocation(line: 572, column: 1, scope: !2791)
!2869 = distinct !DISubprogram(name: "evolution_function_is_affine_p", scope: !2753, file: !2753, line: 202, type: !2870, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2870 = !DISubroutineType(types: !2871)
!2871 = !{!1118, !2428}
!2872 = !DILocalVariable(name: "chrec", arg: 1, scope: !2869, file: !2753, line: 202, type: !2428)
!2873 = !DILocation(line: 202, column: 44, scope: !2869)
!2874 = !DILocation(line: 204, column: 7, scope: !2875)
!2875 = distinct !DILexicalBlock(scope: !2869, file: !2753, line: 204, column: 7)
!2876 = !DILocation(line: 204, column: 13, scope: !2875)
!2877 = !DILocation(line: 204, column: 7, scope: !2869)
!2878 = !DILocation(line: 205, column: 5, scope: !2875)
!2879 = !DILocation(line: 207, column: 11, scope: !2869)
!2880 = !DILocation(line: 207, column: 3, scope: !2869)
!2881 = !DILocation(line: 210, column: 46, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2883, file: !2753, line: 210, column: 11)
!2883 = distinct !DILexicalBlock(scope: !2869, file: !2753, line: 208, column: 5)
!2884 = !DILocation(line: 211, column: 11, scope: !2882)
!2885 = !DILocation(line: 210, column: 11, scope: !2882)
!2886 = !DILocation(line: 212, column: 4, scope: !2882)
!2887 = !DILocation(line: 212, column: 42, scope: !2882)
!2888 = !DILocation(line: 213, column: 7, scope: !2882)
!2889 = !DILocation(line: 212, column: 7, scope: !2882)
!2890 = !DILocation(line: 210, column: 11, scope: !2883)
!2891 = !DILocation(line: 214, column: 2, scope: !2882)
!2892 = !DILocation(line: 216, column: 2, scope: !2882)
!2893 = !DILocation(line: 219, column: 7, scope: !2883)
!2894 = !DILocation(line: 221, column: 1, scope: !2869)
!2895 = distinct !DISubprogram(name: "get_loop_exit_condition", scope: !3, file: !3, line: 933, type: !2896, scopeLine: 934, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2896 = !DISubroutineType(types: !2897)
!2897 = !{!1329, !2898}
!2898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2899, size: 64)
!2899 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1546)
!2900 = !DILocalVariable(name: "loop", arg: 1, scope: !2895, file: !3, line: 933, type: !2898)
!2901 = !DILocation(line: 933, column: 45, scope: !2895)
!2902 = !DILocalVariable(name: "res", scope: !2895, file: !3, line: 935, type: !1329)
!2903 = !DILocation(line: 935, column: 10, scope: !2895)
!2904 = !DILocalVariable(name: "exit_edge", scope: !2895, file: !3, line: 936, type: !1309)
!2905 = !DILocation(line: 936, column: 8, scope: !2895)
!2906 = !DILocation(line: 936, column: 33, scope: !2895)
!2907 = !DILocation(line: 936, column: 20, scope: !2895)
!2908 = !DILocation(line: 938, column: 7, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2895, file: !3, line: 938, column: 7)
!2910 = !DILocation(line: 938, column: 17, scope: !2909)
!2911 = !DILocation(line: 938, column: 21, scope: !2909)
!2912 = !DILocation(line: 938, column: 32, scope: !2909)
!2913 = !DILocation(line: 938, column: 7, scope: !2895)
!2914 = !DILocation(line: 939, column: 14, scope: !2909)
!2915 = !DILocation(line: 939, column: 5, scope: !2909)
!2916 = !DILocation(line: 941, column: 7, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2895, file: !3, line: 941, column: 7)
!2918 = !DILocation(line: 941, column: 7, scope: !2895)
!2919 = !DILocalVariable(name: "stmt", scope: !2920, file: !3, line: 943, type: !1329)
!2920 = distinct !DILexicalBlock(scope: !2917, file: !3, line: 942, column: 5)
!2921 = !DILocation(line: 943, column: 14, scope: !2920)
!2922 = !DILocation(line: 945, column: 25, scope: !2920)
!2923 = !DILocation(line: 945, column: 36, scope: !2920)
!2924 = !DILocation(line: 945, column: 14, scope: !2920)
!2925 = !DILocation(line: 945, column: 12, scope: !2920)
!2926 = !DILocation(line: 946, column: 24, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2920, file: !3, line: 946, column: 11)
!2928 = !DILocation(line: 946, column: 11, scope: !2927)
!2929 = !DILocation(line: 946, column: 30, scope: !2927)
!2930 = !DILocation(line: 946, column: 11, scope: !2920)
!2931 = !DILocation(line: 947, column: 8, scope: !2927)
!2932 = !DILocation(line: 947, column: 6, scope: !2927)
!2933 = !DILocation(line: 947, column: 2, scope: !2927)
!2934 = !DILocation(line: 948, column: 5, scope: !2920)
!2935 = !DILocation(line: 950, column: 7, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2895, file: !3, line: 950, column: 7)
!2937 = !DILocation(line: 950, column: 17, scope: !2936)
!2938 = !DILocation(line: 950, column: 21, scope: !2936)
!2939 = !DILocation(line: 950, column: 32, scope: !2936)
!2940 = !DILocation(line: 950, column: 7, scope: !2895)
!2941 = !DILocation(line: 952, column: 26, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2936, file: !3, line: 951, column: 5)
!2943 = !DILocation(line: 952, column: 37, scope: !2942)
!2944 = !DILocation(line: 952, column: 7, scope: !2942)
!2945 = !DILocation(line: 953, column: 16, scope: !2942)
!2946 = !DILocation(line: 953, column: 7, scope: !2942)
!2947 = !DILocation(line: 954, column: 5, scope: !2942)
!2948 = !DILocation(line: 956, column: 10, scope: !2895)
!2949 = !DILocation(line: 956, column: 3, scope: !2895)
!2950 = distinct !DISubprogram(name: "gimple_code", scope: !391, file: !391, line: 1052, type: !2951, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2951 = !DISubroutineType(types: !2952)
!2952 = !{!390, !2953}
!2953 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !999, line: 60, baseType: !2365)
!2954 = !DILocalVariable(name: "g", arg: 1, scope: !2950, file: !391, line: 1052, type: !2953)
!2955 = !DILocation(line: 1052, column: 27, scope: !2950)
!2956 = !DILocation(line: 1054, column: 10, scope: !2950)
!2957 = !DILocation(line: 1054, column: 13, scope: !2950)
!2958 = !DILocation(line: 1054, column: 20, scope: !2950)
!2959 = !DILocation(line: 1054, column: 3, scope: !2950)
!2960 = distinct !DISubprogram(name: "analyze_scalar_evolution", scope: !3, file: !3, line: 1938, type: !2562, scopeLine: 1939, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!2961 = !DILocalVariable(name: "loop", arg: 1, scope: !2960, file: !3, line: 1938, type: !1545)
!2962 = !DILocation(line: 1938, column: 40, scope: !2960)
!2963 = !DILocalVariable(name: "var", arg: 2, scope: !2960, file: !3, line: 1938, type: !998)
!2964 = !DILocation(line: 1938, column: 51, scope: !2960)
!2965 = !DILocalVariable(name: "res", scope: !2960, file: !3, line: 1940, type: !998)
!2966 = !DILocation(line: 1940, column: 8, scope: !2960)
!2967 = !DILocation(line: 1942, column: 7, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 1942, column: 7)
!2969 = !DILocation(line: 1942, column: 17, scope: !2968)
!2970 = !DILocation(line: 1942, column: 21, scope: !2968)
!2971 = !DILocation(line: 1942, column: 32, scope: !2968)
!2972 = !DILocation(line: 1942, column: 7, scope: !2960)
!2973 = !DILocation(line: 1944, column: 16, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 1943, column: 5)
!2975 = !DILocation(line: 1944, column: 7, scope: !2974)
!2976 = !DILocation(line: 1945, column: 16, scope: !2974)
!2977 = !DILocation(line: 1945, column: 49, scope: !2974)
!2978 = !DILocation(line: 1945, column: 55, scope: !2974)
!2979 = !DILocation(line: 1945, column: 7, scope: !2974)
!2980 = !DILocation(line: 1946, column: 16, scope: !2974)
!2981 = !DILocation(line: 1946, column: 7, scope: !2974)
!2982 = !DILocation(line: 1947, column: 27, scope: !2974)
!2983 = !DILocation(line: 1947, column: 38, scope: !2974)
!2984 = !DILocation(line: 1947, column: 7, scope: !2974)
!2985 = !DILocation(line: 1948, column: 16, scope: !2974)
!2986 = !DILocation(line: 1948, column: 7, scope: !2974)
!2987 = !DILocation(line: 1949, column: 5, scope: !2974)
!2988 = !DILocation(line: 1951, column: 50, scope: !2960)
!2989 = !DILocation(line: 1951, column: 31, scope: !2960)
!2990 = !DILocation(line: 1951, column: 57, scope: !2960)
!2991 = !DILocation(line: 1951, column: 9, scope: !2960)
!2992 = !DILocation(line: 1951, column: 7, scope: !2960)
!2993 = !DILocation(line: 1952, column: 37, scope: !2960)
!2994 = !DILocation(line: 1952, column: 43, scope: !2960)
!2995 = !DILocation(line: 1952, column: 48, scope: !2960)
!2996 = !DILocation(line: 1952, column: 9, scope: !2960)
!2997 = !DILocation(line: 1952, column: 7, scope: !2960)
!2998 = !DILocation(line: 1954, column: 7, scope: !2999)
!2999 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 1954, column: 7)
!3000 = !DILocation(line: 1954, column: 17, scope: !2999)
!3001 = !DILocation(line: 1954, column: 21, scope: !2999)
!3002 = !DILocation(line: 1954, column: 32, scope: !2999)
!3003 = !DILocation(line: 1954, column: 7, scope: !2960)
!3004 = !DILocation(line: 1955, column: 14, scope: !2999)
!3005 = !DILocation(line: 1955, column: 5, scope: !2999)
!3006 = !DILocation(line: 1957, column: 10, scope: !2960)
!3007 = !DILocation(line: 1957, column: 3, scope: !2960)
!3008 = distinct !DISubprogram(name: "get_scalar_evolution", scope: !3, file: !3, line: 610, type: !3009, scopeLine: 611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3009 = !DISubroutineType(types: !3010)
!3010 = !{!998, !1782, !998}
!3011 = !DILocalVariable(name: "instantiated_below", arg: 1, scope: !3008, file: !3, line: 610, type: !1782)
!3012 = !DILocation(line: 610, column: 35, scope: !3008)
!3013 = !DILocalVariable(name: "scalar", arg: 2, scope: !3008, file: !3, line: 610, type: !998)
!3014 = !DILocation(line: 610, column: 60, scope: !3008)
!3015 = !DILocalVariable(name: "res", scope: !3008, file: !3, line: 612, type: !998)
!3016 = !DILocation(line: 612, column: 8, scope: !3008)
!3017 = !DILocation(line: 614, column: 7, scope: !3018)
!3018 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 614, column: 7)
!3019 = !DILocation(line: 614, column: 7, scope: !3008)
!3020 = !DILocation(line: 616, column: 11, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 616, column: 11)
!3022 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 615, column: 5)
!3023 = !DILocation(line: 616, column: 22, scope: !3021)
!3024 = !DILocation(line: 616, column: 11, scope: !3022)
!3025 = !DILocation(line: 618, column: 13, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3021, file: !3, line: 617, column: 2)
!3027 = !DILocation(line: 618, column: 4, scope: !3026)
!3028 = !DILocation(line: 619, column: 13, scope: !3026)
!3029 = !DILocation(line: 619, column: 4, scope: !3026)
!3030 = !DILocation(line: 620, column: 24, scope: !3026)
!3031 = !DILocation(line: 620, column: 35, scope: !3026)
!3032 = !DILocation(line: 620, column: 4, scope: !3026)
!3033 = !DILocation(line: 621, column: 13, scope: !3026)
!3034 = !DILocation(line: 621, column: 4, scope: !3026)
!3035 = !DILocation(line: 622, column: 2, scope: !3026)
!3036 = !DILocation(line: 623, column: 11, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 623, column: 11)
!3038 = !DILocation(line: 623, column: 22, scope: !3037)
!3039 = !DILocation(line: 623, column: 11, scope: !3022)
!3040 = !DILocation(line: 624, column: 13, scope: !3037)
!3041 = !DILocation(line: 624, column: 2, scope: !3037)
!3042 = !DILocation(line: 625, column: 5, scope: !3022)
!3043 = !DILocation(line: 627, column: 11, scope: !3008)
!3044 = !DILocation(line: 627, column: 3, scope: !3008)
!3045 = !DILocation(line: 630, column: 34, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 628, column: 5)
!3047 = !DILocation(line: 630, column: 54, scope: !3046)
!3048 = !DILocation(line: 630, column: 14, scope: !3046)
!3049 = !DILocation(line: 630, column: 13, scope: !3046)
!3050 = !DILocation(line: 630, column: 11, scope: !3046)
!3051 = !DILocation(line: 631, column: 7, scope: !3046)
!3052 = !DILocation(line: 636, column: 13, scope: !3046)
!3053 = !DILocation(line: 636, column: 11, scope: !3046)
!3054 = !DILocation(line: 637, column: 7, scope: !3046)
!3055 = !DILocation(line: 640, column: 13, scope: !3046)
!3056 = !DILocation(line: 640, column: 11, scope: !3046)
!3057 = !DILocation(line: 641, column: 7, scope: !3046)
!3058 = !DILocation(line: 644, column: 7, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 644, column: 7)
!3060 = !DILocation(line: 644, column: 17, scope: !3059)
!3061 = !DILocation(line: 644, column: 21, scope: !3059)
!3062 = !DILocation(line: 644, column: 32, scope: !3059)
!3063 = !DILocation(line: 644, column: 7, scope: !3008)
!3064 = !DILocation(line: 646, column: 16, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 645, column: 5)
!3066 = !DILocation(line: 646, column: 7, scope: !3065)
!3067 = !DILocation(line: 647, column: 27, scope: !3065)
!3068 = !DILocation(line: 647, column: 38, scope: !3065)
!3069 = !DILocation(line: 647, column: 7, scope: !3065)
!3070 = !DILocation(line: 648, column: 16, scope: !3065)
!3071 = !DILocation(line: 648, column: 7, scope: !3065)
!3072 = !DILocation(line: 649, column: 5, scope: !3065)
!3073 = !DILocation(line: 651, column: 10, scope: !3008)
!3074 = !DILocation(line: 651, column: 3, scope: !3008)
!3075 = distinct !DISubprogram(name: "block_before_loop", scope: !2647, file: !2647, line: 46, type: !3076, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3076 = !DISubroutineType(types: !3077)
!3077 = !{!1782, !1572}
!3078 = !DILocalVariable(name: "loop", arg: 1, scope: !3075, file: !2647, line: 46, type: !1572)
!3079 = !DILocation(line: 46, column: 27, scope: !3075)
!3080 = !DILocalVariable(name: "preheader", scope: !3075, file: !2647, line: 48, type: !1309)
!3081 = !DILocation(line: 48, column: 8, scope: !3075)
!3082 = !DILocation(line: 48, column: 41, scope: !3075)
!3083 = !DILocation(line: 48, column: 20, scope: !3075)
!3084 = !DILocation(line: 49, column: 11, scope: !3075)
!3085 = !DILocation(line: 49, column: 23, scope: !3075)
!3086 = !DILocation(line: 49, column: 34, scope: !3075)
!3087 = !DILocation(line: 49, column: 40, scope: !3075)
!3088 = !DILocation(line: 49, column: 3, scope: !3075)
!3089 = distinct !DISubprogram(name: "analyze_scalar_evolution_1", scope: !3, file: !3, line: 1852, type: !3090, scopeLine: 1853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3090 = !DISubroutineType(types: !3091)
!3091 = !{!998, !1545, !998, !998}
!3092 = !DILocalVariable(name: "loop", arg: 1, scope: !3089, file: !3, line: 1852, type: !1545)
!3093 = !DILocation(line: 1852, column: 42, scope: !3089)
!3094 = !DILocalVariable(name: "var", arg: 2, scope: !3089, file: !3, line: 1852, type: !998)
!3095 = !DILocation(line: 1852, column: 53, scope: !3089)
!3096 = !DILocalVariable(name: "res", arg: 3, scope: !3089, file: !3, line: 1852, type: !998)
!3097 = !DILocation(line: 1852, column: 63, scope: !3089)
!3098 = !DILocalVariable(name: "type", scope: !3089, file: !3, line: 1854, type: !998)
!3099 = !DILocation(line: 1854, column: 8, scope: !3089)
!3100 = !DILocation(line: 1854, column: 15, scope: !3089)
!3101 = !DILocalVariable(name: "def", scope: !3089, file: !3, line: 1855, type: !1329)
!3102 = !DILocation(line: 1855, column: 10, scope: !3089)
!3103 = !DILocalVariable(name: "bb", scope: !3089, file: !3, line: 1856, type: !1782)
!3104 = !DILocation(line: 1856, column: 15, scope: !3089)
!3105 = !DILocalVariable(name: "def_loop", scope: !3089, file: !3, line: 1857, type: !1545)
!3106 = !DILocation(line: 1857, column: 16, scope: !3089)
!3107 = !DILocation(line: 1859, column: 7, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1859, column: 7)
!3109 = !DILocation(line: 1859, column: 12, scope: !3108)
!3110 = !DILocation(line: 1859, column: 20, scope: !3108)
!3111 = !DILocation(line: 1859, column: 23, scope: !3108)
!3112 = !DILocation(line: 1859, column: 40, scope: !3108)
!3113 = !DILocation(line: 1859, column: 7, scope: !3089)
!3114 = !DILocation(line: 1860, column: 12, scope: !3108)
!3115 = !DILocation(line: 1860, column: 5, scope: !3108)
!3116 = !DILocation(line: 1862, column: 7, scope: !3117)
!3117 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1862, column: 7)
!3118 = !DILocation(line: 1862, column: 23, scope: !3117)
!3119 = !DILocation(line: 1862, column: 7, scope: !3089)
!3120 = !DILocation(line: 1863, column: 28, scope: !3117)
!3121 = !DILocation(line: 1863, column: 40, scope: !3117)
!3122 = !DILocation(line: 1863, column: 12, scope: !3117)
!3123 = !DILocation(line: 1863, column: 5, scope: !3117)
!3124 = !DILocation(line: 1865, column: 9, scope: !3089)
!3125 = !DILocation(line: 1865, column: 7, scope: !3089)
!3126 = !DILocation(line: 1866, column: 19, scope: !3089)
!3127 = !DILocation(line: 1866, column: 8, scope: !3089)
!3128 = !DILocation(line: 1866, column: 6, scope: !3089)
!3129 = !DILocation(line: 1867, column: 14, scope: !3089)
!3130 = !DILocation(line: 1867, column: 19, scope: !3089)
!3131 = !DILocation(line: 1867, column: 23, scope: !3089)
!3132 = !DILocation(line: 1867, column: 12, scope: !3089)
!3133 = !DILocation(line: 1869, column: 7, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1869, column: 7)
!3135 = !DILocation(line: 1869, column: 10, scope: !3134)
!3136 = !DILocation(line: 1870, column: 7, scope: !3134)
!3137 = !DILocation(line: 1870, column: 34, scope: !3134)
!3138 = !DILocation(line: 1870, column: 40, scope: !3134)
!3139 = !DILocation(line: 1870, column: 11, scope: !3134)
!3140 = !DILocation(line: 1869, column: 7, scope: !3089)
!3141 = !DILocation(line: 1873, column: 13, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3134, file: !3, line: 1871, column: 5)
!3143 = !DILocation(line: 1873, column: 11, scope: !3142)
!3144 = !DILocation(line: 1874, column: 7, scope: !3142)
!3145 = !DILocation(line: 1877, column: 7, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1877, column: 7)
!3147 = !DILocation(line: 1877, column: 14, scope: !3146)
!3148 = !DILocation(line: 1877, column: 11, scope: !3146)
!3149 = !DILocation(line: 1877, column: 7, scope: !3089)
!3150 = !DILocation(line: 1879, column: 11, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !3152, file: !3, line: 1879, column: 11)
!3152 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 1878, column: 5)
!3153 = !DILocation(line: 1879, column: 19, scope: !3151)
!3154 = !DILocation(line: 1879, column: 23, scope: !3151)
!3155 = !DILocation(line: 1879, column: 16, scope: !3151)
!3156 = !DILocation(line: 1879, column: 11, scope: !3152)
!3157 = !DILocation(line: 1881, column: 25, scope: !3151)
!3158 = !DILocation(line: 1881, column: 31, scope: !3151)
!3159 = !DILocation(line: 1881, column: 35, scope: !3151)
!3160 = !DILocation(line: 1881, column: 7, scope: !3151)
!3161 = !DILocation(line: 1881, column: 49, scope: !3151)
!3162 = !DILocation(line: 1881, column: 53, scope: !3151)
!3163 = !DILocation(line: 1881, column: 66, scope: !3151)
!3164 = !DILocation(line: 1880, column: 8, scope: !3151)
!3165 = !DILocation(line: 1880, column: 6, scope: !3151)
!3166 = !DILocation(line: 1880, column: 2, scope: !3151)
!3167 = !DILocation(line: 1883, column: 7, scope: !3152)
!3168 = !DILocation(line: 1886, column: 7, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1886, column: 7)
!3170 = !DILocation(line: 1886, column: 15, scope: !3169)
!3171 = !DILocation(line: 1886, column: 12, scope: !3169)
!3172 = !DILocation(line: 1886, column: 7, scope: !3089)
!3173 = !DILocation(line: 1888, column: 41, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 1887, column: 5)
!3175 = !DILocation(line: 1888, column: 51, scope: !3174)
!3176 = !DILocation(line: 1888, column: 56, scope: !3174)
!3177 = !DILocation(line: 1888, column: 13, scope: !3174)
!3178 = !DILocation(line: 1888, column: 11, scope: !3174)
!3179 = !DILocation(line: 1889, column: 47, scope: !3174)
!3180 = !DILocation(line: 1889, column: 53, scope: !3174)
!3181 = !DILocation(line: 1889, column: 63, scope: !3174)
!3182 = !DILocation(line: 1889, column: 13, scope: !3174)
!3183 = !DILocation(line: 1889, column: 11, scope: !3174)
!3184 = !DILocation(line: 1891, column: 7, scope: !3174)
!3185 = !DILocation(line: 1894, column: 24, scope: !3089)
!3186 = !DILocation(line: 1894, column: 11, scope: !3089)
!3187 = !DILocation(line: 1894, column: 3, scope: !3089)
!3188 = !DILocation(line: 1897, column: 38, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1895, column: 5)
!3190 = !DILocation(line: 1897, column: 44, scope: !3189)
!3191 = !DILocation(line: 1897, column: 13, scope: !3189)
!3192 = !DILocation(line: 1897, column: 11, scope: !3189)
!3193 = !DILocation(line: 1898, column: 7, scope: !3189)
!3194 = !DILocation(line: 1901, column: 28, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3189, file: !3, line: 1901, column: 11)
!3196 = !DILocation(line: 1901, column: 11, scope: !3195)
!3197 = !DILocation(line: 1901, column: 11, scope: !3189)
!3198 = !DILocation(line: 1902, column: 28, scope: !3195)
!3199 = !DILocation(line: 1902, column: 34, scope: !3195)
!3200 = !DILocation(line: 1902, column: 8, scope: !3195)
!3201 = !DILocation(line: 1902, column: 6, scope: !3195)
!3202 = !DILocation(line: 1902, column: 2, scope: !3195)
!3203 = !DILocation(line: 1904, column: 33, scope: !3195)
!3204 = !DILocation(line: 1904, column: 39, scope: !3195)
!3205 = !DILocation(line: 1904, column: 8, scope: !3195)
!3206 = !DILocation(line: 1904, column: 6, scope: !3195)
!3207 = !DILocation(line: 1905, column: 7, scope: !3189)
!3208 = !DILocation(line: 1908, column: 13, scope: !3189)
!3209 = !DILocation(line: 1908, column: 11, scope: !3189)
!3210 = !DILocation(line: 1909, column: 7, scope: !3189)
!3211 = !DILocation(line: 1910, column: 5, scope: !3189)
!3212 = !DILabel(scope: !3089, name: "set_and_end", file: !3, line: 1912)
!3213 = !DILocation(line: 1912, column: 2, scope: !3089)
!3214 = !DILocation(line: 1915, column: 7, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1915, column: 7)
!3216 = !DILocation(line: 1915, column: 14, scope: !3215)
!3217 = !DILocation(line: 1915, column: 11, scope: !3215)
!3218 = !DILocation(line: 1915, column: 7, scope: !3089)
!3219 = !DILocation(line: 1916, column: 11, scope: !3215)
!3220 = !DILocation(line: 1916, column: 9, scope: !3215)
!3221 = !DILocation(line: 1916, column: 5, scope: !3215)
!3222 = !DILocation(line: 1918, column: 7, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 1918, column: 7)
!3224 = !DILocation(line: 1918, column: 15, scope: !3223)
!3225 = !DILocation(line: 1918, column: 12, scope: !3223)
!3226 = !DILocation(line: 1918, column: 7, scope: !3089)
!3227 = !DILocation(line: 1919, column: 46, scope: !3223)
!3228 = !DILocation(line: 1919, column: 27, scope: !3223)
!3229 = !DILocation(line: 1919, column: 53, scope: !3223)
!3230 = !DILocation(line: 1919, column: 58, scope: !3223)
!3231 = !DILocation(line: 1919, column: 5, scope: !3223)
!3232 = !DILocation(line: 1921, column: 10, scope: !3089)
!3233 = !DILocation(line: 1921, column: 3, scope: !3089)
!3234 = !DILocation(line: 1922, column: 1, scope: !3089)
!3235 = distinct !DISubprogram(name: "instantiate_scev", scope: !3, file: !3, line: 2641, type: !3236, scopeLine: 2643, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3236 = !DISubroutineType(types: !3237)
!3237 = !{!998, !1782, !1545, !998}
!3238 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !3235, file: !3, line: 2641, type: !1782)
!3239 = !DILocation(line: 2641, column: 31, scope: !3235)
!3240 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !3235, file: !3, line: 2641, type: !1545)
!3241 = !DILocation(line: 2641, column: 63, scope: !3235)
!3242 = !DILocalVariable(name: "chrec", arg: 3, scope: !3235, file: !3, line: 2642, type: !998)
!3243 = !DILocation(line: 2642, column: 10, scope: !3235)
!3244 = !DILocalVariable(name: "res", scope: !3235, file: !3, line: 2644, type: !998)
!3245 = !DILocation(line: 2644, column: 8, scope: !3235)
!3246 = !DILocalVariable(name: "cache", scope: !3235, file: !3, line: 2645, type: !1814)
!3247 = !DILocation(line: 2645, column: 10, scope: !3235)
!3248 = !DILocation(line: 2645, column: 18, scope: !3235)
!3249 = !DILocation(line: 2647, column: 7, scope: !3250)
!3250 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 2647, column: 7)
!3251 = !DILocation(line: 2647, column: 17, scope: !3250)
!3252 = !DILocation(line: 2647, column: 21, scope: !3250)
!3253 = !DILocation(line: 2647, column: 32, scope: !3250)
!3254 = !DILocation(line: 2647, column: 7, scope: !3235)
!3255 = !DILocation(line: 2649, column: 16, scope: !3256)
!3256 = distinct !DILexicalBlock(scope: !3250, file: !3, line: 2648, column: 5)
!3257 = !DILocation(line: 2649, column: 7, scope: !3256)
!3258 = !DILocation(line: 2650, column: 16, scope: !3256)
!3259 = !DILocation(line: 2650, column: 59, scope: !3256)
!3260 = !DILocation(line: 2650, column: 78, scope: !3256)
!3261 = !DILocation(line: 2650, column: 7, scope: !3256)
!3262 = !DILocation(line: 2651, column: 16, scope: !3256)
!3263 = !DILocation(line: 2651, column: 56, scope: !3256)
!3264 = !DILocation(line: 2651, column: 72, scope: !3256)
!3265 = !DILocation(line: 2651, column: 7, scope: !3256)
!3266 = !DILocation(line: 2652, column: 16, scope: !3256)
!3267 = !DILocation(line: 2652, column: 7, scope: !3256)
!3268 = !DILocation(line: 2653, column: 27, scope: !3256)
!3269 = !DILocation(line: 2653, column: 38, scope: !3256)
!3270 = !DILocation(line: 2653, column: 7, scope: !3256)
!3271 = !DILocation(line: 2654, column: 16, scope: !3256)
!3272 = !DILocation(line: 2654, column: 7, scope: !3256)
!3273 = !DILocation(line: 2655, column: 5, scope: !3256)
!3274 = !DILocation(line: 2657, column: 29, scope: !3235)
!3275 = !DILocation(line: 2657, column: 48, scope: !3235)
!3276 = !DILocation(line: 2657, column: 64, scope: !3235)
!3277 = !DILocation(line: 2658, column: 8, scope: !3235)
!3278 = !DILocation(line: 2657, column: 9, scope: !3235)
!3279 = !DILocation(line: 2657, column: 7, scope: !3235)
!3280 = !DILocation(line: 2660, column: 7, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 2660, column: 7)
!3282 = !DILocation(line: 2660, column: 17, scope: !3281)
!3283 = !DILocation(line: 2660, column: 21, scope: !3281)
!3284 = !DILocation(line: 2660, column: 32, scope: !3281)
!3285 = !DILocation(line: 2660, column: 7, scope: !3235)
!3286 = !DILocation(line: 2662, column: 16, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3281, file: !3, line: 2661, column: 5)
!3288 = !DILocation(line: 2662, column: 7, scope: !3287)
!3289 = !DILocation(line: 2663, column: 27, scope: !3287)
!3290 = !DILocation(line: 2663, column: 38, scope: !3287)
!3291 = !DILocation(line: 2663, column: 7, scope: !3287)
!3292 = !DILocation(line: 2664, column: 16, scope: !3287)
!3293 = !DILocation(line: 2664, column: 7, scope: !3287)
!3294 = !DILocation(line: 2665, column: 5, scope: !3287)
!3295 = !DILocation(line: 2667, column: 16, scope: !3235)
!3296 = !DILocation(line: 2667, column: 3, scope: !3235)
!3297 = !DILocation(line: 2669, column: 10, scope: !3235)
!3298 = !DILocation(line: 2669, column: 3, scope: !3235)
!3299 = distinct !DISubprogram(name: "hash_scev_info", scope: !3, file: !3, line: 331, type: !1821, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3300 = !DILocalVariable(name: "elt", arg: 1, scope: !3299, file: !3, line: 331, type: !1824)
!3301 = !DILocation(line: 331, column: 29, scope: !3299)
!3302 = !DILocation(line: 333, column: 10, scope: !3299)
!3303 = !DILocation(line: 333, column: 3, scope: !3299)
!3304 = distinct !DISubprogram(name: "eq_scev_info", scope: !3, file: !3, line: 339, type: !1829, scopeLine: 340, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3305 = !DILocalVariable(name: "e1", arg: 1, scope: !3304, file: !3, line: 339, type: !1824)
!3306 = !DILocation(line: 339, column: 27, scope: !3304)
!3307 = !DILocalVariable(name: "e2", arg: 2, scope: !3304, file: !3, line: 339, type: !1824)
!3308 = !DILocation(line: 339, column: 43, scope: !3304)
!3309 = !DILocalVariable(name: "elt1", scope: !3304, file: !3, line: 341, type: !2367)
!3310 = !DILocation(line: 341, column: 31, scope: !3304)
!3311 = !DILocation(line: 341, column: 69, scope: !3304)
!3312 = !DILocation(line: 341, column: 38, scope: !3304)
!3313 = !DILocalVariable(name: "elt2", scope: !3304, file: !3, line: 342, type: !2367)
!3314 = !DILocation(line: 342, column: 31, scope: !3304)
!3315 = !DILocation(line: 342, column: 69, scope: !3304)
!3316 = !DILocation(line: 342, column: 38, scope: !3304)
!3317 = !DILocation(line: 344, column: 11, scope: !3304)
!3318 = !DILocation(line: 344, column: 17, scope: !3304)
!3319 = !DILocation(line: 344, column: 24, scope: !3304)
!3320 = !DILocation(line: 344, column: 30, scope: !3304)
!3321 = !DILocation(line: 344, column: 21, scope: !3304)
!3322 = !DILocation(line: 345, column: 4, scope: !3304)
!3323 = !DILocation(line: 345, column: 7, scope: !3304)
!3324 = !DILocation(line: 345, column: 13, scope: !3304)
!3325 = !DILocation(line: 345, column: 35, scope: !3304)
!3326 = !DILocation(line: 345, column: 41, scope: !3304)
!3327 = !DILocation(line: 345, column: 32, scope: !3304)
!3328 = !DILocation(line: 0, scope: !3304)
!3329 = !DILocation(line: 344, column: 3, scope: !3304)
!3330 = distinct !DISubprogram(name: "del_scev_info", scope: !3, file: !3, line: 351, type: !1834, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3331 = !DILocalVariable(name: "e", arg: 1, scope: !3330, file: !3, line: 351, type: !1282)
!3332 = !DILocation(line: 351, column: 22, scope: !3330)
!3333 = !DILocation(line: 353, column: 13, scope: !3330)
!3334 = !DILocation(line: 353, column: 3, scope: !3330)
!3335 = !DILocation(line: 354, column: 1, scope: !3330)
!3336 = distinct !DISubprogram(name: "instantiate_scev_r", scope: !3, file: !3, line: 2552, type: !3337, scopeLine: 2555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3337 = !DISubroutineType(types: !3338)
!3338 = !{!998, !1782, !1545, !998, !1118, !1814, !1095}
!3339 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !3336, file: !3, line: 2552, type: !1782)
!3340 = !DILocation(line: 2552, column: 33, scope: !3336)
!3341 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !3336, file: !3, line: 2553, type: !1545)
!3342 = !DILocation(line: 2553, column: 20, scope: !3336)
!3343 = !DILocalVariable(name: "chrec", arg: 3, scope: !3336, file: !3, line: 2553, type: !998)
!3344 = !DILocation(line: 2553, column: 41, scope: !3336)
!3345 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !3336, file: !3, line: 2554, type: !1118)
!3346 = !DILocation(line: 2554, column: 12, scope: !3336)
!3347 = !DILocalVariable(name: "cache", arg: 5, scope: !3336, file: !3, line: 2554, type: !1814)
!3348 = !DILocation(line: 2554, column: 37, scope: !3336)
!3349 = !DILocalVariable(name: "size_expr", arg: 6, scope: !3336, file: !3, line: 2554, type: !1095)
!3350 = !DILocation(line: 2554, column: 48, scope: !3336)
!3351 = !DILocation(line: 2557, column: 16, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2557, column: 7)
!3353 = !DILocation(line: 2557, column: 21, scope: !3352)
!3354 = !DILocation(line: 2557, column: 19, scope: !3352)
!3355 = !DILocation(line: 2557, column: 7, scope: !3336)
!3356 = !DILocation(line: 2558, column: 12, scope: !3352)
!3357 = !DILocation(line: 2558, column: 5, scope: !3352)
!3358 = !DILocation(line: 2560, column: 40, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2560, column: 7)
!3360 = !DILocation(line: 2560, column: 7, scope: !3359)
!3361 = !DILocation(line: 2561, column: 7, scope: !3359)
!3362 = !DILocation(line: 2561, column: 35, scope: !3359)
!3363 = !DILocation(line: 2561, column: 10, scope: !3359)
!3364 = !DILocation(line: 2560, column: 7, scope: !3336)
!3365 = !DILocation(line: 2562, column: 12, scope: !3359)
!3366 = !DILocation(line: 2562, column: 5, scope: !3359)
!3367 = !DILocation(line: 2564, column: 11, scope: !3336)
!3368 = !DILocation(line: 2564, column: 3, scope: !3336)
!3369 = !DILocation(line: 2567, column: 37, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2565, column: 5)
!3371 = !DILocation(line: 2567, column: 56, scope: !3370)
!3372 = !DILocation(line: 2567, column: 72, scope: !3370)
!3373 = !DILocation(line: 2568, column: 9, scope: !3370)
!3374 = !DILocation(line: 2568, column: 27, scope: !3370)
!3375 = !DILocation(line: 2568, column: 34, scope: !3370)
!3376 = !DILocation(line: 2567, column: 14, scope: !3370)
!3377 = !DILocation(line: 2567, column: 7, scope: !3370)
!3378 = !DILocation(line: 2571, column: 37, scope: !3370)
!3379 = !DILocation(line: 2571, column: 56, scope: !3370)
!3380 = !DILocation(line: 2571, column: 72, scope: !3370)
!3381 = !DILocation(line: 2572, column: 9, scope: !3370)
!3382 = !DILocation(line: 2572, column: 27, scope: !3370)
!3383 = !DILocation(line: 2572, column: 34, scope: !3370)
!3384 = !DILocation(line: 2571, column: 14, scope: !3370)
!3385 = !DILocation(line: 2571, column: 7, scope: !3370)
!3386 = !DILocation(line: 2578, column: 39, scope: !3370)
!3387 = !DILocation(line: 2578, column: 58, scope: !3370)
!3388 = !DILocation(line: 2578, column: 74, scope: !3370)
!3389 = !DILocation(line: 2579, column: 11, scope: !3370)
!3390 = !DILocation(line: 2579, column: 42, scope: !3370)
!3391 = !DILocation(line: 2579, column: 30, scope: !3370)
!3392 = !DILocation(line: 2580, column: 11, scope: !3370)
!3393 = !DILocation(line: 2581, column: 11, scope: !3370)
!3394 = !DILocation(line: 2582, column: 11, scope: !3370)
!3395 = !DILocation(line: 2582, column: 29, scope: !3370)
!3396 = !DILocation(line: 2582, column: 36, scope: !3370)
!3397 = !DILocation(line: 2578, column: 14, scope: !3370)
!3398 = !DILocation(line: 2578, column: 7, scope: !3370)
!3399 = !DILocation(line: 2585, column: 40, scope: !3370)
!3400 = !DILocation(line: 2585, column: 59, scope: !3370)
!3401 = !DILocation(line: 2585, column: 75, scope: !3370)
!3402 = !DILocation(line: 2586, column: 12, scope: !3370)
!3403 = !DILocation(line: 2586, column: 31, scope: !3370)
!3404 = !DILocation(line: 2587, column: 12, scope: !3370)
!3405 = !DILocation(line: 2587, column: 30, scope: !3370)
!3406 = !DILocation(line: 2587, column: 37, scope: !3370)
!3407 = !DILocation(line: 2585, column: 14, scope: !3370)
!3408 = !DILocation(line: 2585, column: 7, scope: !3370)
!3409 = !DILocation(line: 2591, column: 36, scope: !3370)
!3410 = !DILocation(line: 2591, column: 55, scope: !3370)
!3411 = !DILocation(line: 2591, column: 71, scope: !3370)
!3412 = !DILocation(line: 2592, column: 8, scope: !3370)
!3413 = !DILocation(line: 2592, column: 27, scope: !3370)
!3414 = !DILocation(line: 2593, column: 8, scope: !3370)
!3415 = !DILocation(line: 2594, column: 8, scope: !3370)
!3416 = !DILocation(line: 2594, column: 26, scope: !3370)
!3417 = !DILocation(line: 2594, column: 33, scope: !3370)
!3418 = !DILocation(line: 2591, column: 14, scope: !3370)
!3419 = !DILocation(line: 2591, column: 7, scope: !3370)
!3420 = !DILocation(line: 2597, column: 14, scope: !3370)
!3421 = !DILocation(line: 2597, column: 7, scope: !3370)
!3422 = !DILocation(line: 2600, column: 14, scope: !3370)
!3423 = !DILocation(line: 2600, column: 7, scope: !3370)
!3424 = !DILocation(line: 2603, column: 7, scope: !3370)
!3425 = !DILocation(line: 2606, column: 7, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2606, column: 7)
!3427 = !DILocation(line: 2606, column: 7, scope: !3336)
!3428 = !DILocation(line: 2607, column: 12, scope: !3426)
!3429 = !DILocation(line: 2607, column: 5, scope: !3426)
!3430 = !DILocation(line: 2609, column: 11, scope: !3336)
!3431 = !DILocation(line: 2609, column: 3, scope: !3336)
!3432 = !DILocation(line: 2612, column: 34, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2610, column: 5)
!3434 = !DILocation(line: 2612, column: 53, scope: !3433)
!3435 = !DILocation(line: 2612, column: 69, scope: !3433)
!3436 = !DILocation(line: 2613, column: 6, scope: !3433)
!3437 = !DILocation(line: 2613, column: 24, scope: !3433)
!3438 = !DILocation(line: 2613, column: 31, scope: !3433)
!3439 = !DILocation(line: 2612, column: 14, scope: !3433)
!3440 = !DILocation(line: 2612, column: 7, scope: !3433)
!3441 = !DILocation(line: 2616, column: 34, scope: !3433)
!3442 = !DILocation(line: 2616, column: 53, scope: !3433)
!3443 = !DILocation(line: 2616, column: 69, scope: !3433)
!3444 = !DILocation(line: 2617, column: 6, scope: !3433)
!3445 = !DILocation(line: 2617, column: 24, scope: !3433)
!3446 = !DILocation(line: 2617, column: 31, scope: !3433)
!3447 = !DILocation(line: 2616, column: 14, scope: !3433)
!3448 = !DILocation(line: 2616, column: 7, scope: !3433)
!3449 = !DILocation(line: 2620, column: 34, scope: !3433)
!3450 = !DILocation(line: 2620, column: 53, scope: !3433)
!3451 = !DILocation(line: 2620, column: 69, scope: !3433)
!3452 = !DILocation(line: 2621, column: 6, scope: !3433)
!3453 = !DILocation(line: 2621, column: 24, scope: !3433)
!3454 = !DILocation(line: 2621, column: 31, scope: !3433)
!3455 = !DILocation(line: 2620, column: 14, scope: !3433)
!3456 = !DILocation(line: 2620, column: 7, scope: !3433)
!3457 = !DILocation(line: 2624, column: 14, scope: !3433)
!3458 = !DILocation(line: 2624, column: 7, scope: !3433)
!3459 = !DILocation(line: 2627, column: 7, scope: !3433)
!3460 = !DILocation(line: 2631, column: 10, scope: !3336)
!3461 = !DILocation(line: 2631, column: 3, scope: !3336)
!3462 = !DILocation(line: 2632, column: 1, scope: !3336)
!3463 = distinct !DISubprogram(name: "resolve_mixers", scope: !3, file: !3, line: 2678, type: !2562, scopeLine: 2679, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3464 = !DILocalVariable(name: "loop", arg: 1, scope: !3463, file: !3, line: 2678, type: !1545)
!3465 = !DILocation(line: 2678, column: 30, scope: !3463)
!3466 = !DILocalVariable(name: "chrec", arg: 2, scope: !3463, file: !3, line: 2678, type: !998)
!3467 = !DILocation(line: 2678, column: 41, scope: !3463)
!3468 = !DILocalVariable(name: "cache", scope: !3463, file: !3, line: 2680, type: !1814)
!3469 = !DILocation(line: 2680, column: 10, scope: !3463)
!3470 = !DILocation(line: 2680, column: 18, scope: !3463)
!3471 = !DILocalVariable(name: "ret", scope: !3463, file: !3, line: 2681, type: !998)
!3472 = !DILocation(line: 2681, column: 8, scope: !3463)
!3473 = !DILocation(line: 2681, column: 53, scope: !3463)
!3474 = !DILocation(line: 2681, column: 34, scope: !3463)
!3475 = !DILocation(line: 2681, column: 60, scope: !3463)
!3476 = !DILocation(line: 2681, column: 66, scope: !3463)
!3477 = !DILocation(line: 2682, column: 6, scope: !3463)
!3478 = !DILocation(line: 2681, column: 14, scope: !3463)
!3479 = !DILocation(line: 2683, column: 16, scope: !3463)
!3480 = !DILocation(line: 2683, column: 3, scope: !3463)
!3481 = !DILocation(line: 2684, column: 10, scope: !3463)
!3482 = !DILocation(line: 2684, column: 3, scope: !3463)
!3483 = distinct !DISubprogram(name: "set_nb_iterations_in_loop", scope: !3, file: !3, line: 908, type: !2562, scopeLine: 910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3484 = !DILocalVariable(name: "loop", arg: 1, scope: !3483, file: !3, line: 908, type: !1545)
!3485 = !DILocation(line: 908, column: 41, scope: !3483)
!3486 = !DILocalVariable(name: "res", arg: 2, scope: !3483, file: !3, line: 909, type: !998)
!3487 = !DILocation(line: 909, column: 12, scope: !3483)
!3488 = !DILocation(line: 911, column: 7, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3483, file: !3, line: 911, column: 7)
!3490 = !DILocation(line: 911, column: 17, scope: !3489)
!3491 = !DILocation(line: 911, column: 21, scope: !3489)
!3492 = !DILocation(line: 911, column: 32, scope: !3489)
!3493 = !DILocation(line: 911, column: 7, scope: !3483)
!3494 = !DILocation(line: 913, column: 16, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 912, column: 5)
!3496 = !DILocation(line: 913, column: 7, scope: !3495)
!3497 = !DILocation(line: 914, column: 27, scope: !3495)
!3498 = !DILocation(line: 914, column: 38, scope: !3495)
!3499 = !DILocation(line: 914, column: 7, scope: !3495)
!3500 = !DILocation(line: 915, column: 16, scope: !3495)
!3501 = !DILocation(line: 915, column: 7, scope: !3495)
!3502 = !DILocation(line: 916, column: 5, scope: !3495)
!3503 = !DILocation(line: 918, column: 25, scope: !3483)
!3504 = !DILocation(line: 918, column: 3, scope: !3483)
!3505 = !DILocation(line: 918, column: 9, scope: !3483)
!3506 = !DILocation(line: 918, column: 23, scope: !3483)
!3507 = !DILocation(line: 919, column: 10, scope: !3483)
!3508 = !DILocation(line: 919, column: 3, scope: !3483)
!3509 = distinct !DISubprogram(name: "number_of_exit_cond_executions", scope: !3, file: !3, line: 2754, type: !2656, scopeLine: 2755, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3510 = !DILocalVariable(name: "loop", arg: 1, scope: !3509, file: !3, line: 2754, type: !1545)
!3511 = !DILocation(line: 2754, column: 46, scope: !3509)
!3512 = !DILocalVariable(name: "ret", scope: !3509, file: !3, line: 2756, type: !998)
!3513 = !DILocation(line: 2756, column: 8, scope: !3509)
!3514 = !DILocation(line: 2756, column: 42, scope: !3509)
!3515 = !DILocation(line: 2756, column: 14, scope: !3509)
!3516 = !DILocalVariable(name: "type", scope: !3509, file: !3, line: 2757, type: !998)
!3517 = !DILocation(line: 2757, column: 8, scope: !3509)
!3518 = !DILocation(line: 2757, column: 27, scope: !3509)
!3519 = !DILocation(line: 2757, column: 15, scope: !3509)
!3520 = !DILocation(line: 2759, column: 36, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3509, file: !3, line: 2759, column: 7)
!3522 = !DILocation(line: 2759, column: 7, scope: !3521)
!3523 = !DILocation(line: 2759, column: 7, scope: !3509)
!3524 = !DILocation(line: 2760, column: 12, scope: !3521)
!3525 = !DILocation(line: 2760, column: 5, scope: !3521)
!3526 = !DILocation(line: 2762, column: 26, scope: !3509)
!3527 = !DILocation(line: 2762, column: 32, scope: !3509)
!3528 = !DILocation(line: 2762, column: 52, scope: !3509)
!3529 = !DILocation(line: 2762, column: 37, scope: !3509)
!3530 = !DILocation(line: 2762, column: 9, scope: !3509)
!3531 = !DILocation(line: 2762, column: 7, scope: !3509)
!3532 = !DILocation(line: 2763, column: 7, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3509, file: !3, line: 2763, column: 7)
!3534 = !DILocation(line: 2763, column: 23, scope: !3533)
!3535 = !DILocation(line: 2764, column: 7, scope: !3533)
!3536 = !DILocation(line: 2764, column: 10, scope: !3533)
!3537 = !DILocation(line: 2763, column: 7, scope: !3509)
!3538 = !DILocation(line: 2765, column: 12, scope: !3533)
!3539 = !DILocation(line: 2765, column: 5, scope: !3533)
!3540 = !DILocation(line: 2767, column: 10, scope: !3509)
!3541 = !DILocation(line: 2767, column: 3, scope: !3509)
!3542 = !DILocation(line: 2768, column: 1, scope: !3509)
!3543 = distinct !DISubprogram(name: "chrec_type", scope: !2753, file: !2753, line: 234, type: !3544, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3544 = !DISubroutineType(types: !3545)
!3545 = !{!998, !2428}
!3546 = !DILocalVariable(name: "chrec", arg: 1, scope: !3543, file: !2753, line: 234, type: !2428)
!3547 = !DILocation(line: 234, column: 24, scope: !3543)
!3548 = !DILocation(line: 236, column: 40, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3543, file: !2753, line: 236, column: 7)
!3550 = !DILocation(line: 236, column: 7, scope: !3549)
!3551 = !DILocation(line: 236, column: 7, scope: !3543)
!3552 = !DILocation(line: 237, column: 5, scope: !3549)
!3553 = !DILocation(line: 239, column: 10, scope: !3543)
!3554 = !DILocation(line: 239, column: 3, scope: !3543)
!3555 = !DILocation(line: 240, column: 1, scope: !3543)
!3556 = distinct !DISubprogram(name: "gather_stats_on_scev_database", scope: !3, file: !3, line: 2980, type: !3557, scopeLine: 2981, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3557 = !DISubroutineType(types: !3558)
!3558 = !{null}
!3559 = !DILocalVariable(name: "stats", scope: !3556, file: !3, line: 2982, type: !2370)
!3560 = !DILocation(line: 2982, column: 22, scope: !3556)
!3561 = !DILocation(line: 2984, column: 8, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 2984, column: 7)
!3563 = !DILocation(line: 2984, column: 7, scope: !3556)
!3564 = !DILocation(line: 2985, column: 5, scope: !3562)
!3565 = !DILocation(line: 2987, column: 3, scope: !3556)
!3566 = !DILocation(line: 2989, column: 18, scope: !3556)
!3567 = !DILocation(line: 2990, column: 4, scope: !3556)
!3568 = !DILocation(line: 2989, column: 3, scope: !3556)
!3569 = !DILocation(line: 2992, column: 22, scope: !3556)
!3570 = !DILocation(line: 2992, column: 3, scope: !3556)
!3571 = !DILocation(line: 2993, column: 1, scope: !3556)
!3572 = distinct !DISubprogram(name: "reset_chrecs_counters", scope: !3, file: !3, line: 2822, type: !3573, scopeLine: 2823, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3573 = !DISubroutineType(types: !3574)
!3574 = !{null, !2369}
!3575 = !DILocalVariable(name: "stats", arg: 1, scope: !3572, file: !3, line: 2822, type: !2369)
!3576 = !DILocation(line: 2822, column: 44, scope: !3572)
!3577 = !DILocation(line: 2824, column: 3, scope: !3572)
!3578 = !DILocation(line: 2824, column: 10, scope: !3572)
!3579 = !DILocation(line: 2824, column: 20, scope: !3572)
!3580 = !DILocation(line: 2825, column: 3, scope: !3572)
!3581 = !DILocation(line: 2825, column: 10, scope: !3572)
!3582 = !DILocation(line: 2825, column: 20, scope: !3572)
!3583 = !DILocation(line: 2826, column: 3, scope: !3572)
!3584 = !DILocation(line: 2826, column: 10, scope: !3572)
!3585 = !DILocation(line: 2826, column: 29, scope: !3572)
!3586 = !DILocation(line: 2827, column: 3, scope: !3572)
!3587 = !DILocation(line: 2827, column: 10, scope: !3572)
!3588 = !DILocation(line: 2827, column: 25, scope: !3572)
!3589 = !DILocation(line: 2828, column: 3, scope: !3572)
!3590 = !DILocation(line: 2828, column: 10, scope: !3572)
!3591 = !DILocation(line: 2828, column: 29, scope: !3572)
!3592 = !DILocation(line: 2829, column: 3, scope: !3572)
!3593 = !DILocation(line: 2829, column: 10, scope: !3572)
!3594 = !DILocation(line: 2829, column: 26, scope: !3572)
!3595 = !DILocation(line: 2830, column: 1, scope: !3572)
!3596 = distinct !DISubprogram(name: "gather_stats_on_scev_database_1", scope: !3, file: !3, line: 2968, type: !3597, scopeLine: 2969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3597 = !DISubroutineType(types: !3598)
!3598 = !{!1095, !1837, !1282}
!3599 = !DILocalVariable(name: "slot", arg: 1, scope: !3596, file: !3, line: 2968, type: !1837)
!3600 = !DILocation(line: 2968, column: 41, scope: !3596)
!3601 = !DILocalVariable(name: "stats", arg: 2, scope: !3596, file: !3, line: 2968, type: !1282)
!3602 = !DILocation(line: 2968, column: 53, scope: !3596)
!3603 = !DILocalVariable(name: "entry", scope: !3596, file: !3, line: 2970, type: !2357)
!3604 = !DILocation(line: 2970, column: 25, scope: !3596)
!3605 = !DILocation(line: 2970, column: 59, scope: !3596)
!3606 = !DILocation(line: 2970, column: 58, scope: !3596)
!3607 = !DILocation(line: 2970, column: 33, scope: !3596)
!3608 = !DILocation(line: 2972, column: 23, scope: !3596)
!3609 = !DILocation(line: 2972, column: 30, scope: !3596)
!3610 = !DILocation(line: 2972, column: 60, scope: !3596)
!3611 = !DILocation(line: 2972, column: 37, scope: !3596)
!3612 = !DILocation(line: 2972, column: 3, scope: !3596)
!3613 = !DILocation(line: 2974, column: 3, scope: !3596)
!3614 = distinct !DISubprogram(name: "dump_chrecs_stats", scope: !3, file: !3, line: 2835, type: !3615, scopeLine: 2836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3615 = !DISubroutineType(types: !3616)
!3616 = !{null, !3617, !2369}
!3617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3618, size: 64)
!3618 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3619, line: 7, baseType: !3620)
!3619 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3621, line: 49, size: 1728, elements: !3622)
!3621 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3622 = !{!3623, !3624, !3625, !3626, !3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634, !3635, !3638, !3640, !3641, !3642, !3645, !3647, !3648, !3649, !3652, !3654, !3657, !3660, !3661, !3662, !3663, !3664}
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3620, file: !3621, line: 51, baseType: !1095, size: 32)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3620, file: !3621, line: 54, baseType: !1267, size: 64, offset: 64)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3620, file: !3621, line: 55, baseType: !1267, size: 64, offset: 128)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3620, file: !3621, line: 56, baseType: !1267, size: 64, offset: 192)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3620, file: !3621, line: 57, baseType: !1267, size: 64, offset: 256)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3620, file: !3621, line: 58, baseType: !1267, size: 64, offset: 320)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3620, file: !3621, line: 59, baseType: !1267, size: 64, offset: 384)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3620, file: !3621, line: 60, baseType: !1267, size: 64, offset: 448)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3620, file: !3621, line: 61, baseType: !1267, size: 64, offset: 512)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3620, file: !3621, line: 64, baseType: !1267, size: 64, offset: 576)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3620, file: !3621, line: 65, baseType: !1267, size: 64, offset: 640)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3620, file: !3621, line: 66, baseType: !1267, size: 64, offset: 704)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3620, file: !3621, line: 68, baseType: !3636, size: 64, offset: 768)
!3636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3637, size: 64)
!3637 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3621, line: 36, flags: DIFlagFwdDecl)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3620, file: !3621, line: 70, baseType: !3639, size: 64, offset: 832)
!3639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3620, size: 64)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3620, file: !3621, line: 72, baseType: !1095, size: 32, offset: 896)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3620, file: !3621, line: 73, baseType: !1095, size: 32, offset: 928)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3620, file: !3621, line: 74, baseType: !3643, size: 64, offset: 960)
!3643 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3644, line: 152, baseType: !1054)
!3644 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3620, file: !3621, line: 77, baseType: !3646, size: 16, offset: 1024)
!3646 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3620, file: !3621, line: 78, baseType: !2184, size: 8, offset: 1040)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3620, file: !3621, line: 79, baseType: !1097, size: 8, offset: 1048)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3620, file: !3621, line: 81, baseType: !3650, size: 64, offset: 1088)
!3650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3651, size: 64)
!3651 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3621, line: 43, baseType: null)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3620, file: !3621, line: 89, baseType: !3653, size: 64, offset: 1152)
!3653 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3644, line: 153, baseType: !1054)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3620, file: !3621, line: 91, baseType: !3655, size: 64, offset: 1216)
!3655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3656, size: 64)
!3656 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3621, line: 37, flags: DIFlagFwdDecl)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3620, file: !3621, line: 92, baseType: !3658, size: 64, offset: 1280)
!3658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3659, size: 64)
!3659 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3621, line: 38, flags: DIFlagFwdDecl)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3620, file: !3621, line: 93, baseType: !3639, size: 64, offset: 1344)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3620, file: !3621, line: 94, baseType: !1282, size: 64, offset: 1408)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3620, file: !3621, line: 95, baseType: !1475, size: 64, offset: 1472)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3620, file: !3621, line: 96, baseType: !1095, size: 32, offset: 1536)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3620, file: !3621, line: 98, baseType: !3665, size: 160, offset: 1568)
!3665 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1098, size: 160, elements: !3666)
!3666 = !{!3667}
!3667 = !DISubrange(count: 20)
!3668 = !DILocalVariable(name: "file", arg: 1, scope: !3614, file: !3, line: 2835, type: !3617)
!3669 = !DILocation(line: 2835, column: 26, scope: !3614)
!3670 = !DILocalVariable(name: "stats", arg: 2, scope: !3614, file: !3, line: 2835, type: !2369)
!3671 = !DILocation(line: 2835, column: 52, scope: !3614)
!3672 = !DILocation(line: 2837, column: 12, scope: !3614)
!3673 = !DILocation(line: 2837, column: 3, scope: !3614)
!3674 = !DILocation(line: 2838, column: 12, scope: !3614)
!3675 = !DILocation(line: 2838, column: 3, scope: !3614)
!3676 = !DILocation(line: 2839, column: 12, scope: !3614)
!3677 = !DILocation(line: 2839, column: 52, scope: !3614)
!3678 = !DILocation(line: 2839, column: 59, scope: !3614)
!3679 = !DILocation(line: 2839, column: 3, scope: !3614)
!3680 = !DILocation(line: 2840, column: 12, scope: !3614)
!3681 = !DILocation(line: 2840, column: 54, scope: !3614)
!3682 = !DILocation(line: 2840, column: 61, scope: !3614)
!3683 = !DILocation(line: 2840, column: 3, scope: !3614)
!3684 = !DILocation(line: 2841, column: 12, scope: !3614)
!3685 = !DILocation(line: 2842, column: 5, scope: !3614)
!3686 = !DILocation(line: 2842, column: 12, scope: !3614)
!3687 = !DILocation(line: 2841, column: 3, scope: !3614)
!3688 = !DILocation(line: 2843, column: 12, scope: !3614)
!3689 = !DILocation(line: 2843, column: 50, scope: !3614)
!3690 = !DILocation(line: 2843, column: 57, scope: !3614)
!3691 = !DILocation(line: 2843, column: 3, scope: !3614)
!3692 = !DILocation(line: 2844, column: 12, scope: !3614)
!3693 = !DILocation(line: 2844, column: 3, scope: !3614)
!3694 = !DILocation(line: 2845, column: 12, scope: !3614)
!3695 = !DILocation(line: 2845, column: 40, scope: !3614)
!3696 = !DILocation(line: 2845, column: 47, scope: !3614)
!3697 = !DILocation(line: 2845, column: 3, scope: !3614)
!3698 = !DILocation(line: 2846, column: 12, scope: !3614)
!3699 = !DILocation(line: 2847, column: 5, scope: !3614)
!3700 = !DILocation(line: 2847, column: 12, scope: !3614)
!3701 = !DILocation(line: 2846, column: 3, scope: !3614)
!3702 = !DILocation(line: 2848, column: 12, scope: !3614)
!3703 = !DILocation(line: 2848, column: 3, scope: !3614)
!3704 = !DILocation(line: 2849, column: 12, scope: !3614)
!3705 = !DILocation(line: 2850, column: 26, scope: !3614)
!3706 = !DILocation(line: 2850, column: 11, scope: !3614)
!3707 = !DILocation(line: 2850, column: 5, scope: !3614)
!3708 = !DILocation(line: 2849, column: 3, scope: !3614)
!3709 = !DILocation(line: 2851, column: 12, scope: !3614)
!3710 = !DILocation(line: 2851, column: 53, scope: !3614)
!3711 = !DILocation(line: 2851, column: 3, scope: !3614)
!3712 = !DILocation(line: 2852, column: 12, scope: !3614)
!3713 = !DILocation(line: 2852, column: 53, scope: !3614)
!3714 = !DILocation(line: 2852, column: 3, scope: !3614)
!3715 = !DILocation(line: 2853, column: 12, scope: !3614)
!3716 = !DILocation(line: 2853, column: 3, scope: !3614)
!3717 = !DILocation(line: 2854, column: 12, scope: !3614)
!3718 = !DILocation(line: 2854, column: 3, scope: !3614)
!3719 = !DILocation(line: 2855, column: 1, scope: !3614)
!3720 = distinct !DISubprogram(name: "scev_initialize", scope: !3, file: !3, line: 3016, type: !3557, scopeLine: 3017, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3721 = !DILocalVariable(name: "li", scope: !3720, file: !3, line: 3018, type: !3722)
!3722 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !330, line: 515, baseType: !3723)
!3723 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !330, line: 508, size: 128, elements: !3724)
!3724 = !{!3725, !3726}
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !3723, file: !330, line: 511, baseType: !2378, size: 64)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !3723, file: !330, line: 514, baseType: !7, size: 32, offset: 64)
!3727 = !DILocation(line: 3018, column: 17, scope: !3720)
!3728 = !DILocalVariable(name: "loop", scope: !3720, file: !3, line: 3019, type: !1545)
!3729 = !DILocation(line: 3019, column: 16, scope: !3720)
!3730 = !DILocation(line: 3021, column: 27, scope: !3720)
!3731 = !DILocation(line: 3021, column: 25, scope: !3720)
!3732 = !DILocation(line: 3028, column: 3, scope: !3720)
!3733 = !DILocation(line: 3030, column: 3, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 3030, column: 3)
!3735 = !DILocation(line: 3030, column: 3, scope: !3736)
!3736 = distinct !DILexicalBlock(scope: !3734, file: !3, line: 3030, column: 3)
!3737 = !DILocation(line: 3032, column: 7, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 3031, column: 5)
!3739 = !DILocation(line: 3032, column: 13, scope: !3738)
!3740 = !DILocation(line: 3032, column: 27, scope: !3738)
!3741 = !DILocation(line: 3033, column: 5, scope: !3738)
!3742 = distinct !{!3742, !3733, !3743}
!3743 = !DILocation(line: 3033, column: 5, scope: !3734)
!3744 = !DILocation(line: 3034, column: 1, scope: !3720)
!3745 = distinct !DISubprogram(name: "initialize_scalar_evolutions_analyzer", scope: !3, file: !3, line: 3000, type: !3557, scopeLine: 3001, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3746 = !DILocation(line: 3003, column: 7, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3745, file: !3, line: 3003, column: 7)
!3748 = !DILocation(line: 3003, column: 23, scope: !3747)
!3749 = !DILocation(line: 3003, column: 7, scope: !3745)
!3750 = !DILocation(line: 3005, column: 30, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3747, file: !3, line: 3004, column: 5)
!3752 = !DILocation(line: 3006, column: 25, scope: !3751)
!3753 = !DILocation(line: 3006, column: 23, scope: !3751)
!3754 = !DILocation(line: 3007, column: 21, scope: !3751)
!3755 = !DILocation(line: 3007, column: 19, scope: !3751)
!3756 = !DILocation(line: 3008, column: 37, scope: !3751)
!3757 = !DILocation(line: 3008, column: 7, scope: !3751)
!3758 = !DILocation(line: 3008, column: 35, scope: !3751)
!3759 = !DILocation(line: 3009, column: 33, scope: !3751)
!3760 = !DILocation(line: 3009, column: 7, scope: !3751)
!3761 = !DILocation(line: 3009, column: 31, scope: !3751)
!3762 = !DILocation(line: 3010, column: 5, scope: !3751)
!3763 = !DILocation(line: 3011, column: 1, scope: !3745)
!3764 = distinct !DISubprogram(name: "fel_init", scope: !330, file: !330, line: 535, type: !3765, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3765 = !DISubroutineType(types: !3766)
!3766 = !{null, !3767, !3768, !7}
!3767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3722, size: 64)
!3768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1572, size: 64)
!3769 = !DILocalVariable(name: "li", arg: 1, scope: !3764, file: !330, line: 535, type: !3767)
!3770 = !DILocation(line: 535, column: 26, scope: !3764)
!3771 = !DILocalVariable(name: "loop", arg: 2, scope: !3764, file: !330, line: 535, type: !3768)
!3772 = !DILocation(line: 535, column: 38, scope: !3764)
!3773 = !DILocalVariable(name: "flags", arg: 3, scope: !3764, file: !330, line: 535, type: !7)
!3774 = !DILocation(line: 535, column: 53, scope: !3764)
!3775 = !DILocalVariable(name: "aloop", scope: !3764, file: !330, line: 537, type: !1545)
!3776 = !DILocation(line: 537, column: 16, scope: !3764)
!3777 = !DILocalVariable(name: "i", scope: !3764, file: !330, line: 538, type: !7)
!3778 = !DILocation(line: 538, column: 12, scope: !3764)
!3779 = !DILocalVariable(name: "mn", scope: !3764, file: !330, line: 539, type: !1095)
!3780 = !DILocation(line: 539, column: 7, scope: !3764)
!3781 = !DILocation(line: 541, column: 3, scope: !3764)
!3782 = !DILocation(line: 541, column: 7, scope: !3764)
!3783 = !DILocation(line: 541, column: 11, scope: !3764)
!3784 = !DILocation(line: 542, column: 8, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3764, file: !330, line: 542, column: 7)
!3786 = !DILocation(line: 542, column: 7, scope: !3764)
!3787 = !DILocation(line: 544, column: 7, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3785, file: !330, line: 543, column: 5)
!3789 = !DILocation(line: 544, column: 11, scope: !3788)
!3790 = !DILocation(line: 544, column: 20, scope: !3788)
!3791 = !DILocation(line: 545, column: 8, scope: !3788)
!3792 = !DILocation(line: 545, column: 13, scope: !3788)
!3793 = !DILocation(line: 546, column: 7, scope: !3788)
!3794 = !DILocation(line: 549, column: 18, scope: !3764)
!3795 = !DILocation(line: 549, column: 3, scope: !3764)
!3796 = !DILocation(line: 549, column: 7, scope: !3764)
!3797 = !DILocation(line: 549, column: 16, scope: !3764)
!3798 = !DILocation(line: 550, column: 9, scope: !3764)
!3799 = !DILocation(line: 550, column: 15, scope: !3764)
!3800 = !DILocation(line: 550, column: 8, scope: !3764)
!3801 = !DILocation(line: 550, column: 6, scope: !3764)
!3802 = !DILocation(line: 552, column: 7, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3764, file: !330, line: 552, column: 7)
!3804 = !DILocation(line: 552, column: 13, scope: !3803)
!3805 = !DILocation(line: 552, column: 7, scope: !3764)
!3806 = !DILocation(line: 554, column: 14, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3808, file: !330, line: 554, column: 7)
!3808 = distinct !DILexicalBlock(scope: !3803, file: !330, line: 553, column: 5)
!3809 = !DILocation(line: 554, column: 12, scope: !3807)
!3810 = !DILocation(line: 554, column: 19, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3807, file: !330, line: 554, column: 7)
!3812 = !DILocation(line: 554, column: 7, scope: !3807)
!3813 = !DILocation(line: 555, column: 6, scope: !3814)
!3814 = distinct !DILexicalBlock(scope: !3811, file: !330, line: 555, column: 6)
!3815 = !DILocation(line: 555, column: 12, scope: !3814)
!3816 = !DILocation(line: 556, column: 6, scope: !3814)
!3817 = !DILocation(line: 556, column: 9, scope: !3814)
!3818 = !DILocation(line: 556, column: 16, scope: !3814)
!3819 = !DILocation(line: 556, column: 22, scope: !3814)
!3820 = !DILocation(line: 557, column: 6, scope: !3814)
!3821 = !DILocation(line: 557, column: 9, scope: !3814)
!3822 = !DILocation(line: 557, column: 16, scope: !3814)
!3823 = !DILocation(line: 557, column: 23, scope: !3814)
!3824 = !DILocation(line: 557, column: 20, scope: !3814)
!3825 = !DILocation(line: 555, column: 6, scope: !3811)
!3826 = !DILocation(line: 558, column: 4, scope: !3814)
!3827 = !DILocation(line: 554, column: 75, scope: !3811)
!3828 = !DILocation(line: 554, column: 7, scope: !3811)
!3829 = distinct !{!3829, !3812, !3830}
!3830 = !DILocation(line: 558, column: 4, scope: !3807)
!3831 = !DILocation(line: 559, column: 5, scope: !3808)
!3832 = !DILocation(line: 560, column: 12, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3803, file: !330, line: 560, column: 12)
!3834 = !DILocation(line: 560, column: 18, scope: !3833)
!3835 = !DILocation(line: 560, column: 12, scope: !3803)
!3836 = !DILocation(line: 563, column: 20, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3838, file: !330, line: 563, column: 7)
!3838 = distinct !DILexicalBlock(scope: !3833, file: !330, line: 561, column: 5)
!3839 = !DILocation(line: 563, column: 35, scope: !3837)
!3840 = !DILocation(line: 563, column: 18, scope: !3837)
!3841 = !DILocation(line: 563, column: 12, scope: !3837)
!3842 = !DILocation(line: 564, column: 5, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3837, file: !330, line: 563, column: 7)
!3844 = !DILocation(line: 564, column: 12, scope: !3843)
!3845 = !DILocation(line: 564, column: 18, scope: !3843)
!3846 = !DILocation(line: 563, column: 7, scope: !3837)
!3847 = !DILocation(line: 566, column: 2, scope: !3843)
!3848 = !DILocation(line: 565, column: 13, scope: !3843)
!3849 = !DILocation(line: 565, column: 20, scope: !3843)
!3850 = !DILocation(line: 565, column: 11, scope: !3843)
!3851 = !DILocation(line: 563, column: 7, scope: !3843)
!3852 = distinct !{!3852, !3846, !3853}
!3853 = !DILocation(line: 566, column: 2, scope: !3837)
!3854 = !DILocation(line: 568, column: 7, scope: !3838)
!3855 = !DILocation(line: 570, column: 8, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3857, file: !330, line: 570, column: 8)
!3857 = distinct !DILexicalBlock(scope: !3838, file: !330, line: 569, column: 2)
!3858 = !DILocation(line: 570, column: 15, scope: !3856)
!3859 = !DILocation(line: 570, column: 22, scope: !3856)
!3860 = !DILocation(line: 570, column: 19, scope: !3856)
!3861 = !DILocation(line: 570, column: 8, scope: !3857)
!3862 = !DILocation(line: 571, column: 6, scope: !3856)
!3863 = !DILocation(line: 573, column: 8, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3857, file: !330, line: 573, column: 8)
!3865 = !DILocation(line: 573, column: 15, scope: !3864)
!3866 = !DILocation(line: 573, column: 8, scope: !3857)
!3867 = !DILocation(line: 575, column: 21, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3869, file: !330, line: 575, column: 8)
!3869 = distinct !DILexicalBlock(scope: !3864, file: !330, line: 574, column: 6)
!3870 = !DILocation(line: 575, column: 28, scope: !3868)
!3871 = !DILocation(line: 575, column: 19, scope: !3868)
!3872 = !DILocation(line: 575, column: 13, scope: !3868)
!3873 = !DILocation(line: 576, column: 6, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3868, file: !330, line: 575, column: 8)
!3875 = !DILocation(line: 576, column: 13, scope: !3874)
!3876 = !DILocation(line: 576, column: 19, scope: !3874)
!3877 = !DILocation(line: 575, column: 8, scope: !3868)
!3878 = !DILocation(line: 578, column: 3, scope: !3874)
!3879 = !DILocation(line: 577, column: 14, scope: !3874)
!3880 = !DILocation(line: 577, column: 21, scope: !3874)
!3881 = !DILocation(line: 577, column: 12, scope: !3874)
!3882 = !DILocation(line: 575, column: 8, scope: !3874)
!3883 = distinct !{!3883, !3877, !3884}
!3884 = !DILocation(line: 578, column: 3, scope: !3868)
!3885 = !DILocation(line: 579, column: 6, scope: !3869)
!3886 = !DILocation(line: 580, column: 26, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3864, file: !330, line: 580, column: 13)
!3888 = !DILocation(line: 580, column: 14, scope: !3887)
!3889 = !DILocation(line: 580, column: 13, scope: !3864)
!3890 = !DILocation(line: 581, column: 6, scope: !3887)
!3891 = !DILocation(line: 583, column: 26, scope: !3887)
!3892 = !DILocation(line: 583, column: 14, scope: !3887)
!3893 = !DILocation(line: 583, column: 12, scope: !3887)
!3894 = distinct !{!3894, !3854, !3895}
!3895 = !DILocation(line: 584, column: 2, scope: !3838)
!3896 = !DILocation(line: 585, column: 5, scope: !3838)
!3897 = !DILocation(line: 589, column: 15, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3833, file: !330, line: 587, column: 5)
!3899 = !DILocation(line: 589, column: 30, scope: !3898)
!3900 = !DILocation(line: 589, column: 13, scope: !3898)
!3901 = !DILocation(line: 590, column: 7, scope: !3898)
!3902 = !DILocation(line: 592, column: 8, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3904, file: !330, line: 592, column: 8)
!3904 = distinct !DILexicalBlock(scope: !3898, file: !330, line: 591, column: 2)
!3905 = !DILocation(line: 592, column: 15, scope: !3903)
!3906 = !DILocation(line: 592, column: 22, scope: !3903)
!3907 = !DILocation(line: 592, column: 19, scope: !3903)
!3908 = !DILocation(line: 592, column: 8, scope: !3904)
!3909 = !DILocation(line: 593, column: 6, scope: !3903)
!3910 = !DILocation(line: 595, column: 8, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3904, file: !330, line: 595, column: 8)
!3912 = !DILocation(line: 595, column: 15, scope: !3911)
!3913 = !DILocation(line: 595, column: 21, scope: !3911)
!3914 = !DILocation(line: 595, column: 8, scope: !3904)
!3915 = !DILocation(line: 596, column: 14, scope: !3911)
!3916 = !DILocation(line: 596, column: 21, scope: !3911)
!3917 = !DILocation(line: 596, column: 12, scope: !3911)
!3918 = !DILocation(line: 596, column: 6, scope: !3911)
!3919 = !DILocation(line: 599, column: 8, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3911, file: !330, line: 598, column: 6)
!3921 = !DILocation(line: 599, column: 15, scope: !3920)
!3922 = !DILocation(line: 599, column: 21, scope: !3920)
!3923 = !DILocation(line: 599, column: 29, scope: !3920)
!3924 = !DILocation(line: 599, column: 32, scope: !3920)
!3925 = !DILocation(line: 599, column: 39, scope: !3920)
!3926 = !DILocation(line: 599, column: 44, scope: !3920)
!3927 = !DILocation(line: 0, scope: !3920)
!3928 = !DILocation(line: 600, column: 23, scope: !3920)
!3929 = !DILocation(line: 600, column: 11, scope: !3920)
!3930 = !DILocation(line: 600, column: 9, scope: !3920)
!3931 = distinct !{!3931, !3919, !3932}
!3932 = !DILocation(line: 600, column: 28, scope: !3920)
!3933 = !DILocation(line: 601, column: 12, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3920, file: !330, line: 601, column: 12)
!3935 = !DILocation(line: 601, column: 18, scope: !3934)
!3936 = !DILocation(line: 601, column: 12, scope: !3920)
!3937 = !DILocation(line: 602, column: 3, scope: !3934)
!3938 = !DILocation(line: 603, column: 16, scope: !3920)
!3939 = !DILocation(line: 603, column: 23, scope: !3920)
!3940 = !DILocation(line: 603, column: 14, scope: !3920)
!3941 = distinct !{!3941, !3901, !3942}
!3942 = !DILocation(line: 605, column: 2, scope: !3898)
!3943 = !DILocation(line: 608, column: 13, scope: !3764)
!3944 = !DILocation(line: 608, column: 17, scope: !3764)
!3945 = !DILocation(line: 608, column: 3, scope: !3764)
!3946 = !DILocation(line: 609, column: 1, scope: !3764)
!3947 = distinct !DISubprogram(name: "fel_next", scope: !330, file: !330, line: 518, type: !3948, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3948 = !DISubroutineType(types: !3949)
!3949 = !{null, !3767, !3768}
!3950 = !DILocalVariable(name: "li", arg: 1, scope: !3947, file: !330, line: 518, type: !3767)
!3951 = !DILocation(line: 518, column: 26, scope: !3947)
!3952 = !DILocalVariable(name: "loop", arg: 2, scope: !3947, file: !330, line: 518, type: !3768)
!3953 = !DILocation(line: 518, column: 38, scope: !3947)
!3954 = !DILocalVariable(name: "anum", scope: !3947, file: !330, line: 520, type: !1095)
!3955 = !DILocation(line: 520, column: 7, scope: !3947)
!3956 = !DILocation(line: 522, column: 3, scope: !3947)
!3957 = !DILocation(line: 522, column: 10, scope: !3947)
!3958 = !DILocation(line: 524, column: 7, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3947, file: !330, line: 523, column: 5)
!3960 = !DILocation(line: 524, column: 11, scope: !3959)
!3961 = !DILocation(line: 524, column: 14, scope: !3959)
!3962 = !DILocation(line: 525, column: 25, scope: !3959)
!3963 = !DILocation(line: 525, column: 15, scope: !3959)
!3964 = !DILocation(line: 525, column: 8, scope: !3959)
!3965 = !DILocation(line: 525, column: 13, scope: !3959)
!3966 = !DILocation(line: 526, column: 12, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3959, file: !330, line: 526, column: 11)
!3968 = !DILocation(line: 526, column: 11, scope: !3967)
!3969 = !DILocation(line: 526, column: 11, scope: !3959)
!3970 = !DILocation(line: 527, column: 2, scope: !3967)
!3971 = distinct !{!3971, !3956, !3972}
!3972 = !DILocation(line: 528, column: 5, scope: !3947)
!3973 = !DILocation(line: 530, column: 3, scope: !3947)
!3974 = !DILocation(line: 531, column: 4, scope: !3947)
!3975 = !DILocation(line: 531, column: 9, scope: !3947)
!3976 = !DILocation(line: 532, column: 1, scope: !3947)
!3977 = distinct !DISubprogram(name: "scev_reset_htab", scope: !3, file: !3, line: 3040, type: !3557, scopeLine: 3041, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3978 = !DILocation(line: 3042, column: 8, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3977, file: !3, line: 3042, column: 7)
!3980 = !DILocation(line: 3042, column: 7, scope: !3977)
!3981 = !DILocation(line: 3043, column: 5, scope: !3979)
!3982 = !DILocation(line: 3045, column: 15, scope: !3977)
!3983 = !DILocation(line: 3045, column: 3, scope: !3977)
!3984 = !DILocation(line: 3046, column: 1, scope: !3977)
!3985 = distinct !DISubprogram(name: "scev_reset", scope: !3, file: !3, line: 3052, type: !3557, scopeLine: 3053, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!3986 = !DILocalVariable(name: "li", scope: !3985, file: !3, line: 3054, type: !3722)
!3987 = !DILocation(line: 3054, column: 17, scope: !3985)
!3988 = !DILocalVariable(name: "loop", scope: !3985, file: !3, line: 3055, type: !1545)
!3989 = !DILocation(line: 3055, column: 16, scope: !3985)
!3990 = !DILocation(line: 3057, column: 3, scope: !3985)
!3991 = !DILocation(line: 3059, column: 8, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 3059, column: 7)
!3993 = !DILocation(line: 3059, column: 7, scope: !3985)
!3994 = !DILocation(line: 3060, column: 5, scope: !3992)
!3995 = !DILocation(line: 3062, column: 3, scope: !3996)
!3996 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 3062, column: 3)
!3997 = !DILocation(line: 3062, column: 3, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3996, file: !3, line: 3062, column: 3)
!3999 = !DILocation(line: 3064, column: 7, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 3063, column: 5)
!4001 = !DILocation(line: 3064, column: 13, scope: !4000)
!4002 = !DILocation(line: 3064, column: 27, scope: !4000)
!4003 = !DILocation(line: 3065, column: 5, scope: !4000)
!4004 = distinct !{!4004, !3995, !4005}
!4005 = !DILocation(line: 3065, column: 5, scope: !3996)
!4006 = !DILocation(line: 3066, column: 1, scope: !3985)
!4007 = distinct !DISubprogram(name: "simple_iv", scope: !3, file: !3, line: 3090, type: !4008, scopeLine: 3092, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4008 = !DISubroutineType(types: !4009)
!4009 = !{!1118, !1545, !1545, !998, !4010, !1118}
!4010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2674, size: 64)
!4011 = !DILocalVariable(name: "wrto_loop", arg: 1, scope: !4007, file: !3, line: 3090, type: !1545)
!4012 = !DILocation(line: 3090, column: 25, scope: !4007)
!4013 = !DILocalVariable(name: "use_loop", arg: 2, scope: !4007, file: !3, line: 3090, type: !1545)
!4014 = !DILocation(line: 3090, column: 49, scope: !4007)
!4015 = !DILocalVariable(name: "op", arg: 3, scope: !4007, file: !3, line: 3090, type: !998)
!4016 = !DILocation(line: 3090, column: 64, scope: !4007)
!4017 = !DILocalVariable(name: "iv", arg: 4, scope: !4007, file: !3, line: 3091, type: !4010)
!4018 = !DILocation(line: 3091, column: 16, scope: !4007)
!4019 = !DILocalVariable(name: "allow_nonconstant_step", arg: 5, scope: !4007, file: !3, line: 3091, type: !1118)
!4020 = !DILocation(line: 3091, column: 25, scope: !4007)
!4021 = !DILocalVariable(name: "type", scope: !4007, file: !3, line: 3093, type: !998)
!4022 = !DILocation(line: 3093, column: 8, scope: !4007)
!4023 = !DILocalVariable(name: "ev", scope: !4007, file: !3, line: 3093, type: !998)
!4024 = !DILocation(line: 3093, column: 14, scope: !4007)
!4025 = !DILocalVariable(name: "folded_casts", scope: !4007, file: !3, line: 3094, type: !1118)
!4026 = !DILocation(line: 3094, column: 8, scope: !4007)
!4027 = !DILocation(line: 3096, column: 3, scope: !4007)
!4028 = !DILocation(line: 3096, column: 7, scope: !4007)
!4029 = !DILocation(line: 3096, column: 12, scope: !4007)
!4030 = !DILocation(line: 3097, column: 3, scope: !4007)
!4031 = !DILocation(line: 3097, column: 7, scope: !4007)
!4032 = !DILocation(line: 3097, column: 12, scope: !4007)
!4033 = !DILocation(line: 3098, column: 3, scope: !4007)
!4034 = !DILocation(line: 3098, column: 7, scope: !4007)
!4035 = !DILocation(line: 3098, column: 19, scope: !4007)
!4036 = !DILocation(line: 3100, column: 10, scope: !4007)
!4037 = !DILocation(line: 3100, column: 8, scope: !4007)
!4038 = !DILocation(line: 3101, column: 7, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3101, column: 7)
!4040 = !DILocation(line: 3101, column: 24, scope: !4039)
!4041 = !DILocation(line: 3102, column: 7, scope: !4039)
!4042 = !DILocation(line: 3102, column: 10, scope: !4039)
!4043 = !DILocation(line: 3102, column: 27, scope: !4039)
!4044 = !DILocation(line: 3101, column: 7, scope: !4007)
!4045 = !DILocation(line: 3103, column: 5, scope: !4039)
!4046 = !DILocation(line: 3105, column: 42, scope: !4007)
!4047 = !DILocation(line: 3105, column: 53, scope: !4007)
!4048 = !DILocation(line: 3105, column: 63, scope: !4007)
!4049 = !DILocation(line: 3105, column: 8, scope: !4007)
!4050 = !DILocation(line: 3105, column: 6, scope: !4007)
!4051 = !DILocation(line: 3107, column: 36, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3107, column: 7)
!4053 = !DILocation(line: 3107, column: 7, scope: !4052)
!4054 = !DILocation(line: 3108, column: 7, scope: !4052)
!4055 = !DILocation(line: 3108, column: 50, scope: !4052)
!4056 = !DILocation(line: 3108, column: 54, scope: !4052)
!4057 = !DILocation(line: 3108, column: 65, scope: !4052)
!4058 = !DILocation(line: 3108, column: 10, scope: !4052)
!4059 = !DILocation(line: 3107, column: 7, scope: !4007)
!4060 = !DILocation(line: 3109, column: 5, scope: !4052)
!4061 = !DILocation(line: 3111, column: 37, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3111, column: 7)
!4063 = !DILocation(line: 3111, column: 7, scope: !4062)
!4064 = !DILocation(line: 3111, column: 7, scope: !4007)
!4065 = !DILocation(line: 3113, column: 18, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 3112, column: 5)
!4067 = !DILocation(line: 3113, column: 7, scope: !4066)
!4068 = !DILocation(line: 3113, column: 11, scope: !4066)
!4069 = !DILocation(line: 3113, column: 16, scope: !4066)
!4070 = !DILocation(line: 3114, column: 33, scope: !4066)
!4071 = !DILocation(line: 3114, column: 18, scope: !4066)
!4072 = !DILocation(line: 3114, column: 7, scope: !4066)
!4073 = !DILocation(line: 3114, column: 11, scope: !4066)
!4074 = !DILocation(line: 3114, column: 16, scope: !4066)
!4075 = !DILocation(line: 3115, column: 7, scope: !4066)
!4076 = !DILocation(line: 3115, column: 11, scope: !4066)
!4077 = !DILocation(line: 3115, column: 23, scope: !4066)
!4078 = !DILocation(line: 3116, column: 7, scope: !4066)
!4079 = !DILocation(line: 3119, column: 7, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3119, column: 7)
!4081 = !DILocation(line: 3119, column: 22, scope: !4080)
!4082 = !DILocation(line: 3120, column: 7, scope: !4080)
!4083 = !DILocation(line: 3120, column: 10, scope: !4080)
!4084 = !DILocation(line: 3120, column: 44, scope: !4080)
!4085 = !DILocation(line: 3120, column: 55, scope: !4080)
!4086 = !DILocation(line: 3120, column: 33, scope: !4080)
!4087 = !DILocation(line: 3120, column: 30, scope: !4080)
!4088 = !DILocation(line: 3119, column: 7, scope: !4007)
!4089 = !DILocation(line: 3121, column: 5, scope: !4080)
!4090 = !DILocation(line: 3123, column: 14, scope: !4007)
!4091 = !DILocation(line: 3123, column: 3, scope: !4007)
!4092 = !DILocation(line: 3123, column: 7, scope: !4007)
!4093 = !DILocation(line: 3123, column: 12, scope: !4007)
!4094 = !DILocation(line: 3124, column: 9, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3124, column: 7)
!4096 = !DILocation(line: 3124, column: 32, scope: !4095)
!4097 = !DILocation(line: 3124, column: 35, scope: !4095)
!4098 = !DILocation(line: 3124, column: 56, scope: !4095)
!4099 = !DILocation(line: 3125, column: 7, scope: !4095)
!4100 = !DILocation(line: 3125, column: 32, scope: !4095)
!4101 = !DILocation(line: 3125, column: 36, scope: !4095)
!4102 = !DILocation(line: 3125, column: 10, scope: !4095)
!4103 = !DILocation(line: 3124, column: 7, scope: !4007)
!4104 = !DILocation(line: 3126, column: 5, scope: !4095)
!4105 = !DILocation(line: 3128, column: 14, scope: !4007)
!4106 = !DILocation(line: 3128, column: 3, scope: !4007)
!4107 = !DILocation(line: 3128, column: 7, scope: !4007)
!4108 = !DILocation(line: 3128, column: 12, scope: !4007)
!4109 = !DILocation(line: 3129, column: 29, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 3129, column: 7)
!4111 = !DILocation(line: 3129, column: 33, scope: !4110)
!4112 = !DILocation(line: 3129, column: 7, scope: !4110)
!4113 = !DILocation(line: 3129, column: 7, scope: !4007)
!4114 = !DILocation(line: 3130, column: 5, scope: !4110)
!4115 = !DILocation(line: 3132, column: 22, scope: !4007)
!4116 = !DILocation(line: 3132, column: 35, scope: !4007)
!4117 = !DILocation(line: 3132, column: 38, scope: !4007)
!4118 = !DILocation(line: 0, scope: !4007)
!4119 = !DILocation(line: 3132, column: 21, scope: !4007)
!4120 = !DILocation(line: 3132, column: 3, scope: !4007)
!4121 = !DILocation(line: 3132, column: 7, scope: !4007)
!4122 = !DILocation(line: 3132, column: 19, scope: !4007)
!4123 = !DILocation(line: 3134, column: 3, scope: !4007)
!4124 = !DILocation(line: 3135, column: 1, scope: !4007)
!4125 = distinct !DISubprogram(name: "analyze_scalar_evolution_in_loop", scope: !3, file: !3, line: 2011, type: !4126, scopeLine: 2013, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!998, !1545, !1545, !998, !2756}
!4128 = !DILocalVariable(name: "wrto_loop", arg: 1, scope: !4125, file: !3, line: 2011, type: !1545)
!4129 = !DILocation(line: 2011, column: 48, scope: !4125)
!4130 = !DILocalVariable(name: "use_loop", arg: 2, scope: !4125, file: !3, line: 2011, type: !1545)
!4131 = !DILocation(line: 2011, column: 72, scope: !4125)
!4132 = !DILocalVariable(name: "version", arg: 3, scope: !4125, file: !3, line: 2012, type: !998)
!4133 = !DILocation(line: 2012, column: 12, scope: !4125)
!4134 = !DILocalVariable(name: "folded_casts", arg: 4, scope: !4125, file: !3, line: 2012, type: !2756)
!4135 = !DILocation(line: 2012, column: 27, scope: !4125)
!4136 = !DILocalVariable(name: "val", scope: !4125, file: !3, line: 2014, type: !1118)
!4137 = !DILocation(line: 2014, column: 8, scope: !4125)
!4138 = !DILocalVariable(name: "ev", scope: !4125, file: !3, line: 2015, type: !998)
!4139 = !DILocation(line: 2015, column: 8, scope: !4125)
!4140 = !DILocation(line: 2015, column: 13, scope: !4125)
!4141 = !DILocalVariable(name: "tmp", scope: !4125, file: !3, line: 2015, type: !998)
!4142 = !DILocation(line: 2015, column: 22, scope: !4125)
!4143 = !DILocation(line: 2036, column: 7, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 2036, column: 7)
!4145 = !DILocation(line: 2036, column: 7, scope: !4125)
!4146 = !DILocation(line: 2037, column: 6, scope: !4144)
!4147 = !DILocation(line: 2037, column: 19, scope: !4144)
!4148 = !DILocation(line: 2037, column: 5, scope: !4144)
!4149 = !DILocation(line: 2038, column: 3, scope: !4125)
!4150 = !DILocation(line: 2040, column: 39, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 2039, column: 5)
!4152 = !DILocation(line: 2040, column: 49, scope: !4151)
!4153 = !DILocation(line: 2040, column: 13, scope: !4151)
!4154 = !DILocation(line: 2040, column: 11, scope: !4151)
!4155 = !DILocation(line: 2041, column: 28, scope: !4151)
!4156 = !DILocation(line: 2041, column: 38, scope: !4151)
!4157 = !DILocation(line: 2041, column: 12, scope: !4151)
!4158 = !DILocation(line: 2041, column: 10, scope: !4151)
!4159 = !DILocation(line: 2043, column: 11, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 2043, column: 11)
!4161 = !DILocation(line: 2043, column: 24, scope: !4160)
!4162 = !DILocation(line: 2043, column: 27, scope: !4160)
!4163 = !DILocation(line: 2043, column: 34, scope: !4160)
!4164 = !DILocation(line: 2043, column: 31, scope: !4160)
!4165 = !DILocation(line: 2043, column: 11, scope: !4151)
!4166 = !DILocation(line: 2044, column: 3, scope: !4160)
!4167 = !DILocation(line: 2044, column: 16, scope: !4160)
!4168 = !DILocation(line: 2044, column: 2, scope: !4160)
!4169 = !DILocation(line: 2046, column: 11, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 2046, column: 11)
!4171 = !DILocation(line: 2046, column: 23, scope: !4170)
!4172 = !DILocation(line: 2046, column: 20, scope: !4170)
!4173 = !DILocation(line: 2046, column: 11, scope: !4151)
!4174 = !DILocation(line: 2047, column: 9, scope: !4170)
!4175 = !DILocation(line: 2047, column: 2, scope: !4170)
!4176 = !DILocation(line: 2052, column: 36, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 2052, column: 11)
!4178 = !DILocation(line: 2052, column: 40, scope: !4177)
!4179 = !DILocation(line: 2052, column: 50, scope: !4177)
!4180 = !DILocation(line: 2052, column: 12, scope: !4177)
!4181 = !DILocation(line: 2053, column: 4, scope: !4177)
!4182 = !DILocation(line: 2053, column: 8, scope: !4177)
!4183 = !DILocation(line: 2052, column: 11, scope: !4151)
!4184 = !DILocation(line: 2054, column: 9, scope: !4177)
!4185 = !DILocation(line: 2054, column: 2, scope: !4177)
!4186 = !DILocation(line: 2056, column: 30, scope: !4151)
!4187 = !DILocation(line: 2056, column: 18, scope: !4151)
!4188 = !DILocation(line: 2056, column: 16, scope: !4151)
!4189 = distinct !{!4189, !4149, !4190}
!4190 = !DILocation(line: 2057, column: 5, scope: !4125)
!4191 = !DILocation(line: 2058, column: 1, scope: !4125)
!4192 = distinct !DISubprogram(name: "tree_does_not_contain_chrecs", scope: !2753, file: !2753, line: 226, type: !2870, scopeLine: 227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4193 = !DILocalVariable(name: "expr", arg: 1, scope: !4192, file: !2753, line: 226, type: !2428)
!4194 = !DILocation(line: 226, column: 42, scope: !4192)
!4195 = !DILocation(line: 228, column: 33, scope: !4192)
!4196 = !DILocation(line: 228, column: 11, scope: !4192)
!4197 = !DILocation(line: 228, column: 10, scope: !4192)
!4198 = !DILocation(line: 228, column: 3, scope: !4192)
!4199 = distinct !DISubprogram(name: "scev_analysis", scope: !3, file: !3, line: 3140, type: !3557, scopeLine: 3141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4200 = !DILocalVariable(name: "exit_conditions", scope: !4199, file: !3, line: 3142, type: !2391)
!4201 = !DILocation(line: 3142, column: 21, scope: !4199)
!4202 = !DILocation(line: 3144, column: 21, scope: !4199)
!4203 = !DILocation(line: 3144, column: 19, scope: !4199)
!4204 = !DILocation(line: 3145, column: 3, scope: !4199)
!4205 = !DILocation(line: 3147, column: 7, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 3147, column: 7)
!4207 = !DILocation(line: 3147, column: 17, scope: !4206)
!4208 = !DILocation(line: 3147, column: 21, scope: !4206)
!4209 = !DILocation(line: 3147, column: 32, scope: !4206)
!4210 = !DILocation(line: 3147, column: 7, scope: !4199)
!4211 = !DILocation(line: 3148, column: 5, scope: !4206)
!4212 = !DILocation(line: 3150, column: 3, scope: !4199)
!4213 = !DILocation(line: 3151, column: 3, scope: !4199)
!4214 = !DILocation(line: 3152, column: 1, scope: !4199)
!4215 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !391, file: !391, line: 34, type: !4216, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4216 = !DISubroutineType(types: !4217)
!4217 = !{!2391, !1095}
!4218 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4215, file: !391, line: 34, type: !1095)
!4219 = !DILocation(line: 34, column: 1, scope: !4215)
!4220 = distinct !DISubprogram(name: "select_loops_exit_conditions", scope: !3, file: !3, line: 985, type: !4221, scopeLine: 986, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4221 = !DISubroutineType(types: !4222)
!4222 = !{null, !4223}
!4223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2391, size: 64)
!4224 = !DILocalVariable(name: "exit_conditions", arg: 1, scope: !4220, file: !3, line: 985, type: !4223)
!4225 = !DILocation(line: 985, column: 50, scope: !4220)
!4226 = !DILocalVariable(name: "function_body", scope: !4220, file: !3, line: 987, type: !1545)
!4227 = !DILocation(line: 987, column: 16, scope: !4220)
!4228 = !DILocation(line: 987, column: 32, scope: !4220)
!4229 = !DILocation(line: 987, column: 47, scope: !4220)
!4230 = !DILocation(line: 989, column: 28, scope: !4220)
!4231 = !DILocation(line: 989, column: 43, scope: !4220)
!4232 = !DILocation(line: 989, column: 50, scope: !4220)
!4233 = !DILocation(line: 989, column: 3, scope: !4220)
!4234 = !DILocation(line: 990, column: 1, scope: !4220)
!4235 = distinct !DISubprogram(name: "analyze_scalar_evolution_for_all_loop_phi_nodes", scope: !3, file: !3, line: 2927, type: !4221, scopeLine: 2928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4236 = !DILocalVariable(name: "exit_conditions", arg: 1, scope: !4235, file: !3, line: 2927, type: !4223)
!4237 = !DILocation(line: 2927, column: 69, scope: !4235)
!4238 = !DILocalVariable(name: "i", scope: !4235, file: !3, line: 2929, type: !7)
!4239 = !DILocation(line: 2929, column: 16, scope: !4235)
!4240 = !DILocalVariable(name: "stats", scope: !4235, file: !3, line: 2930, type: !2370)
!4241 = !DILocation(line: 2930, column: 22, scope: !4235)
!4242 = !DILocalVariable(name: "cond", scope: !4235, file: !3, line: 2931, type: !1329)
!4243 = !DILocation(line: 2931, column: 10, scope: !4235)
!4244 = !DILocalVariable(name: "phi", scope: !4235, file: !3, line: 2931, type: !1329)
!4245 = !DILocation(line: 2931, column: 16, scope: !4235)
!4246 = !DILocalVariable(name: "psi", scope: !4235, file: !3, line: 2932, type: !4247)
!4247 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !391, line: 265, baseType: !4248)
!4248 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !391, line: 254, size: 192, elements: !4249)
!4249 = !{!4250, !4251, !4252}
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4248, file: !391, line: 257, baseType: !1324, size: 64)
!4251 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4248, file: !391, line: 263, baseType: !1319, size: 64, offset: 64)
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4248, file: !391, line: 264, baseType: !1782, size: 64, offset: 128)
!4253 = !DILocation(line: 2932, column: 24, scope: !4235)
!4254 = !DILocation(line: 2934, column: 3, scope: !4235)
!4255 = !DILocation(line: 2936, column: 10, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 2936, column: 3)
!4257 = !DILocation(line: 2936, column: 8, scope: !4256)
!4258 = !DILocation(line: 2936, column: 15, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 2936, column: 3)
!4260 = !DILocation(line: 2936, column: 3, scope: !4256)
!4261 = !DILocalVariable(name: "loop", scope: !4262, file: !3, line: 2938, type: !1545)
!4262 = distinct !DILexicalBlock(scope: !4259, file: !3, line: 2937, column: 5)
!4263 = !DILocation(line: 2938, column: 20, scope: !4262)
!4264 = !DILocalVariable(name: "bb", scope: !4262, file: !3, line: 2939, type: !1782)
!4265 = !DILocation(line: 2939, column: 19, scope: !4262)
!4266 = !DILocalVariable(name: "chrec", scope: !4262, file: !3, line: 2940, type: !998)
!4267 = !DILocation(line: 2940, column: 12, scope: !4262)
!4268 = !DILocation(line: 2942, column: 36, scope: !4262)
!4269 = !DILocation(line: 2942, column: 14, scope: !4262)
!4270 = !DILocation(line: 2942, column: 12, scope: !4262)
!4271 = !DILocation(line: 2943, column: 12, scope: !4262)
!4272 = !DILocation(line: 2943, column: 18, scope: !4262)
!4273 = !DILocation(line: 2943, column: 10, scope: !4262)
!4274 = !DILocation(line: 2945, column: 34, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 2945, column: 7)
!4276 = !DILocation(line: 2945, column: 18, scope: !4275)
!4277 = !DILocation(line: 2945, column: 12, scope: !4275)
!4278 = !DILocation(line: 2945, column: 40, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 2945, column: 7)
!4280 = !DILocation(line: 2945, column: 39, scope: !4279)
!4281 = !DILocation(line: 2945, column: 7, scope: !4275)
!4282 = !DILocation(line: 2947, column: 10, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 2946, column: 2)
!4284 = !DILocation(line: 2947, column: 8, scope: !4283)
!4285 = !DILocation(line: 2948, column: 23, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4283, file: !3, line: 2948, column: 8)
!4287 = !DILocation(line: 2948, column: 8, scope: !4286)
!4288 = !DILocation(line: 2948, column: 8, scope: !4283)
!4289 = !DILocation(line: 2951, column: 12, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 2949, column: 6)
!4291 = !DILocation(line: 2952, column: 31, scope: !4290)
!4292 = !DILocation(line: 2952, column: 37, scope: !4290)
!4293 = !DILocation(line: 2952, column: 5, scope: !4290)
!4294 = !DILocation(line: 2950, column: 16, scope: !4290)
!4295 = !DILocation(line: 2950, column: 14, scope: !4290)
!4296 = !DILocation(line: 2954, column: 12, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 2954, column: 12)
!4298 = !DILocation(line: 2954, column: 22, scope: !4297)
!4299 = !DILocation(line: 2954, column: 26, scope: !4297)
!4300 = !DILocation(line: 2954, column: 37, scope: !4297)
!4301 = !DILocation(line: 2954, column: 12, scope: !4290)
!4302 = !DILocation(line: 2955, column: 23, scope: !4297)
!4303 = !DILocation(line: 2955, column: 3, scope: !4297)
!4304 = !DILocation(line: 2956, column: 6, scope: !4290)
!4305 = !DILocation(line: 2957, column: 2, scope: !4283)
!4306 = !DILocation(line: 2945, column: 57, scope: !4279)
!4307 = !DILocation(line: 2945, column: 7, scope: !4279)
!4308 = distinct !{!4308, !4281, !4309}
!4309 = !DILocation(line: 2957, column: 2, scope: !4275)
!4310 = !DILocation(line: 2958, column: 5, scope: !4262)
!4311 = !DILocation(line: 2936, column: 65, scope: !4259)
!4312 = !DILocation(line: 2936, column: 3, scope: !4259)
!4313 = distinct !{!4313, !4260, !4314}
!4314 = !DILocation(line: 2958, column: 5, scope: !4256)
!4315 = !DILocation(line: 2960, column: 7, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 2960, column: 7)
!4317 = !DILocation(line: 2960, column: 17, scope: !4316)
!4318 = !DILocation(line: 2960, column: 21, scope: !4316)
!4319 = !DILocation(line: 2960, column: 32, scope: !4316)
!4320 = !DILocation(line: 2960, column: 7, scope: !4235)
!4321 = !DILocation(line: 2961, column: 24, scope: !4316)
!4322 = !DILocation(line: 2961, column: 5, scope: !4316)
!4323 = !DILocation(line: 2962, column: 1, scope: !4235)
!4324 = distinct !DISubprogram(name: "number_of_iterations_for_all_loops", scope: !3, file: !3, line: 2775, type: !4221, scopeLine: 2776, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4325 = !DILocalVariable(name: "exit_conditions", arg: 1, scope: !4324, file: !3, line: 2775, type: !4223)
!4326 = !DILocation(line: 2775, column: 56, scope: !4324)
!4327 = !DILocalVariable(name: "i", scope: !4324, file: !3, line: 2777, type: !7)
!4328 = !DILocation(line: 2777, column: 16, scope: !4324)
!4329 = !DILocalVariable(name: "nb_chrec_dont_know_loops", scope: !4324, file: !3, line: 2778, type: !7)
!4330 = !DILocation(line: 2778, column: 12, scope: !4324)
!4331 = !DILocalVariable(name: "nb_static_loops", scope: !4324, file: !3, line: 2779, type: !7)
!4332 = !DILocation(line: 2779, column: 12, scope: !4324)
!4333 = !DILocalVariable(name: "cond", scope: !4324, file: !3, line: 2780, type: !1329)
!4334 = !DILocation(line: 2780, column: 10, scope: !4324)
!4335 = !DILocation(line: 2782, column: 10, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4324, file: !3, line: 2782, column: 3)
!4337 = !DILocation(line: 2782, column: 8, scope: !4336)
!4338 = !DILocation(line: 2782, column: 15, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 2782, column: 3)
!4340 = !DILocation(line: 2782, column: 3, scope: !4336)
!4341 = !DILocalVariable(name: "res", scope: !4342, file: !3, line: 2784, type: !998)
!4342 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 2783, column: 5)
!4343 = !DILocation(line: 2784, column: 12, scope: !4342)
!4344 = !DILocation(line: 2784, column: 68, scope: !4342)
!4345 = !DILocation(line: 2784, column: 46, scope: !4342)
!4346 = !DILocation(line: 2784, column: 18, scope: !4342)
!4347 = !DILocation(line: 2785, column: 40, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 2785, column: 11)
!4349 = !DILocation(line: 2785, column: 11, scope: !4348)
!4350 = !DILocation(line: 2785, column: 11, scope: !4342)
!4351 = !DILocation(line: 2786, column: 26, scope: !4348)
!4352 = !DILocation(line: 2786, column: 2, scope: !4348)
!4353 = !DILocation(line: 2788, column: 17, scope: !4348)
!4354 = !DILocation(line: 2789, column: 5, scope: !4342)
!4355 = !DILocation(line: 2782, column: 65, scope: !4339)
!4356 = !DILocation(line: 2782, column: 3, scope: !4339)
!4357 = distinct !{!4357, !4340, !4358}
!4358 = !DILocation(line: 2789, column: 5, scope: !4336)
!4359 = !DILocation(line: 2791, column: 7, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4324, file: !3, line: 2791, column: 7)
!4361 = !DILocation(line: 2791, column: 7, scope: !4324)
!4362 = !DILocation(line: 2793, column: 16, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4360, file: !3, line: 2792, column: 5)
!4364 = !DILocation(line: 2793, column: 7, scope: !4363)
!4365 = !DILocation(line: 2794, column: 16, scope: !4363)
!4366 = !DILocation(line: 2794, column: 7, scope: !4363)
!4367 = !DILocation(line: 2795, column: 16, scope: !4363)
!4368 = !DILocation(line: 2795, column: 61, scope: !4363)
!4369 = !DILocation(line: 2795, column: 7, scope: !4363)
!4370 = !DILocation(line: 2796, column: 16, scope: !4363)
!4371 = !DILocation(line: 2796, column: 52, scope: !4363)
!4372 = !DILocation(line: 2796, column: 7, scope: !4363)
!4373 = !DILocation(line: 2797, column: 16, scope: !4363)
!4374 = !DILocation(line: 2797, column: 51, scope: !4363)
!4375 = !DILocation(line: 2797, column: 7, scope: !4363)
!4376 = !DILocation(line: 2798, column: 16, scope: !4363)
!4377 = !DILocation(line: 2798, column: 7, scope: !4363)
!4378 = !DILocation(line: 2799, column: 16, scope: !4363)
!4379 = !DILocation(line: 2799, column: 7, scope: !4363)
!4380 = !DILocation(line: 2801, column: 20, scope: !4363)
!4381 = !DILocation(line: 2801, column: 7, scope: !4363)
!4382 = !DILocation(line: 2802, column: 5, scope: !4363)
!4383 = !DILocation(line: 2803, column: 1, scope: !4324)
!4384 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !391, file: !391, line: 34, type: !4221, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4385 = !DILocalVariable(name: "vec_", arg: 1, scope: !4384, file: !391, line: 34, type: !4223)
!4386 = !DILocation(line: 34, column: 1, scope: !4384)
!4387 = !DILocation(line: 34, column: 1, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4384, file: !391, line: 34, column: 1)
!4389 = distinct !DISubprogram(name: "scev_finalize", scope: !3, file: !3, line: 3157, type: !3557, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4390 = !DILocation(line: 3159, column: 8, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 3159, column: 7)
!4392 = !DILocation(line: 3159, column: 7, scope: !4389)
!4393 = !DILocation(line: 3160, column: 5, scope: !4391)
!4394 = !DILocation(line: 3161, column: 16, scope: !4389)
!4395 = !DILocation(line: 3161, column: 3, scope: !4389)
!4396 = !DILocation(line: 3162, column: 25, scope: !4389)
!4397 = !DILocation(line: 3163, column: 1, scope: !4389)
!4398 = distinct !DISubprogram(name: "expression_expensive_p", scope: !3, file: !3, line: 3169, type: !4399, scopeLine: 3170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4399 = !DISubroutineType(types: !4400)
!4400 = !{!1118, !998}
!4401 = !DILocalVariable(name: "expr", arg: 1, scope: !4398, file: !3, line: 3169, type: !998)
!4402 = !DILocation(line: 3169, column: 30, scope: !4398)
!4403 = !DILocalVariable(name: "code", scope: !4398, file: !3, line: 3171, type: !134)
!4404 = !DILocation(line: 3171, column: 18, scope: !4398)
!4405 = !DILocation(line: 3173, column: 22, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 3173, column: 7)
!4407 = !DILocation(line: 3173, column: 7, scope: !4406)
!4408 = !DILocation(line: 3173, column: 7, scope: !4398)
!4409 = !DILocation(line: 3174, column: 5, scope: !4406)
!4410 = !DILocation(line: 3176, column: 10, scope: !4398)
!4411 = !DILocation(line: 3176, column: 8, scope: !4398)
!4412 = !DILocation(line: 3177, column: 7, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 3177, column: 7)
!4414 = !DILocation(line: 3177, column: 12, scope: !4413)
!4415 = !DILocation(line: 3178, column: 7, scope: !4413)
!4416 = !DILocation(line: 3178, column: 10, scope: !4413)
!4417 = !DILocation(line: 3178, column: 15, scope: !4413)
!4418 = !DILocation(line: 3179, column: 7, scope: !4413)
!4419 = !DILocation(line: 3179, column: 10, scope: !4413)
!4420 = !DILocation(line: 3179, column: 15, scope: !4413)
!4421 = !DILocation(line: 3180, column: 7, scope: !4413)
!4422 = !DILocation(line: 3180, column: 10, scope: !4413)
!4423 = !DILocation(line: 3180, column: 15, scope: !4413)
!4424 = !DILocation(line: 3181, column: 7, scope: !4413)
!4425 = !DILocation(line: 3181, column: 10, scope: !4413)
!4426 = !DILocation(line: 3181, column: 15, scope: !4413)
!4427 = !DILocation(line: 3182, column: 7, scope: !4413)
!4428 = !DILocation(line: 3182, column: 10, scope: !4413)
!4429 = !DILocation(line: 3182, column: 15, scope: !4413)
!4430 = !DILocation(line: 3183, column: 7, scope: !4413)
!4431 = !DILocation(line: 3183, column: 10, scope: !4413)
!4432 = !DILocation(line: 3183, column: 15, scope: !4413)
!4433 = !DILocation(line: 3184, column: 7, scope: !4413)
!4434 = !DILocation(line: 3184, column: 10, scope: !4413)
!4435 = !DILocation(line: 3184, column: 15, scope: !4413)
!4436 = !DILocation(line: 3185, column: 7, scope: !4413)
!4437 = !DILocation(line: 3185, column: 10, scope: !4413)
!4438 = !DILocation(line: 3185, column: 15, scope: !4413)
!4439 = !DILocation(line: 3177, column: 7, scope: !4398)
!4440 = !DILocation(line: 3189, column: 27, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 3189, column: 11)
!4442 = distinct !DILexicalBlock(scope: !4413, file: !3, line: 3186, column: 5)
!4443 = !DILocation(line: 3189, column: 12, scope: !4441)
!4444 = !DILocation(line: 3189, column: 11, scope: !4442)
!4445 = !DILocation(line: 3190, column: 2, scope: !4441)
!4446 = !DILocation(line: 3191, column: 5, scope: !4442)
!4447 = !DILocation(line: 3193, column: 11, scope: !4398)
!4448 = !DILocation(line: 3193, column: 3, scope: !4398)
!4449 = !DILocation(line: 3197, column: 35, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4451, file: !3, line: 3197, column: 11)
!4451 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 3194, column: 5)
!4452 = !DILocation(line: 3197, column: 11, scope: !4450)
!4453 = !DILocation(line: 3197, column: 11, scope: !4451)
!4454 = !DILocation(line: 3198, column: 2, scope: !4450)
!4455 = !DILocation(line: 3197, column: 57, scope: !4450)
!4456 = !DILocation(line: 3202, column: 38, scope: !4451)
!4457 = !DILocation(line: 3202, column: 14, scope: !4451)
!4458 = !DILocation(line: 3202, column: 7, scope: !4451)
!4459 = !DILocation(line: 3205, column: 7, scope: !4451)
!4460 = !DILocation(line: 3207, column: 1, scope: !4398)
!4461 = distinct !DISubprogram(name: "scev_const_prop", scope: !3, file: !3, line: 3217, type: !4462, scopeLine: 3218, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4462 = !DISubroutineType(types: !4463)
!4463 = !{!7}
!4464 = !DILocalVariable(name: "bb", scope: !4461, file: !3, line: 3219, type: !1782)
!4465 = !DILocation(line: 3219, column: 15, scope: !4461)
!4466 = !DILocalVariable(name: "name", scope: !4461, file: !3, line: 3220, type: !998)
!4467 = !DILocation(line: 3220, column: 8, scope: !4461)
!4468 = !DILocalVariable(name: "type", scope: !4461, file: !3, line: 3220, type: !998)
!4469 = !DILocation(line: 3220, column: 14, scope: !4461)
!4470 = !DILocalVariable(name: "ev", scope: !4461, file: !3, line: 3220, type: !998)
!4471 = !DILocation(line: 3220, column: 20, scope: !4461)
!4472 = !DILocalVariable(name: "phi", scope: !4461, file: !3, line: 3221, type: !1329)
!4473 = !DILocation(line: 3221, column: 10, scope: !4461)
!4474 = !DILocalVariable(name: "ass", scope: !4461, file: !3, line: 3221, type: !1329)
!4475 = !DILocation(line: 3221, column: 15, scope: !4461)
!4476 = !DILocalVariable(name: "loop", scope: !4461, file: !3, line: 3222, type: !1545)
!4477 = !DILocation(line: 3222, column: 16, scope: !4461)
!4478 = !DILocalVariable(name: "ex_loop", scope: !4461, file: !3, line: 3222, type: !1545)
!4479 = !DILocation(line: 3222, column: 23, scope: !4461)
!4480 = !DILocalVariable(name: "ssa_names_to_remove", scope: !4461, file: !3, line: 3223, type: !1899)
!4481 = !DILocation(line: 3223, column: 10, scope: !4461)
!4482 = !DILocalVariable(name: "i", scope: !4461, file: !3, line: 3224, type: !7)
!4483 = !DILocation(line: 3224, column: 12, scope: !4461)
!4484 = !DILocalVariable(name: "li", scope: !4461, file: !3, line: 3225, type: !3722)
!4485 = !DILocation(line: 3225, column: 17, scope: !4461)
!4486 = !DILocalVariable(name: "psi", scope: !4461, file: !3, line: 3226, type: !4247)
!4487 = !DILocation(line: 3226, column: 24, scope: !4461)
!4488 = !DILocation(line: 3228, column: 7, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 3228, column: 7)
!4490 = !DILocation(line: 3228, column: 26, scope: !4489)
!4491 = !DILocation(line: 3228, column: 7, scope: !4461)
!4492 = !DILocation(line: 3229, column: 5, scope: !4489)
!4493 = !DILocation(line: 3231, column: 3, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 3231, column: 3)
!4495 = !DILocation(line: 3231, column: 3, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 3231, column: 3)
!4497 = !DILocation(line: 3233, column: 14, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 3232, column: 5)
!4499 = !DILocation(line: 3233, column: 18, scope: !4498)
!4500 = !DILocation(line: 3233, column: 12, scope: !4498)
!4501 = !DILocation(line: 3235, column: 34, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 3235, column: 7)
!4503 = !DILocation(line: 3235, column: 18, scope: !4502)
!4504 = !DILocation(line: 3235, column: 12, scope: !4502)
!4505 = !DILocation(line: 3235, column: 40, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3235, column: 7)
!4507 = !DILocation(line: 3235, column: 39, scope: !4506)
!4508 = !DILocation(line: 3235, column: 7, scope: !4502)
!4509 = !DILocation(line: 3237, column: 10, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 3236, column: 2)
!4511 = !DILocation(line: 3237, column: 8, scope: !4510)
!4512 = !DILocation(line: 3238, column: 11, scope: !4510)
!4513 = !DILocation(line: 3238, column: 9, scope: !4510)
!4514 = !DILocation(line: 3240, column: 24, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3240, column: 8)
!4516 = !DILocation(line: 3240, column: 9, scope: !4515)
!4517 = !DILocation(line: 3240, column: 8, scope: !4510)
!4518 = !DILocation(line: 3241, column: 6, scope: !4515)
!4519 = !DILocation(line: 3243, column: 11, scope: !4510)
!4520 = !DILocation(line: 3243, column: 9, scope: !4510)
!4521 = !DILocation(line: 3245, column: 9, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3245, column: 8)
!4523 = !DILocation(line: 3246, column: 8, scope: !4522)
!4524 = !DILocation(line: 3246, column: 12, scope: !4522)
!4525 = !DILocation(line: 3245, column: 8, scope: !4510)
!4526 = !DILocation(line: 3247, column: 6, scope: !4522)
!4527 = !DILocation(line: 3249, column: 25, scope: !4510)
!4528 = !DILocation(line: 3249, column: 57, scope: !4510)
!4529 = !DILocation(line: 3249, column: 63, scope: !4510)
!4530 = !DILocation(line: 3249, column: 31, scope: !4510)
!4531 = !DILocation(line: 3249, column: 9, scope: !4510)
!4532 = !DILocation(line: 3249, column: 7, scope: !4510)
!4533 = !DILocation(line: 3250, column: 34, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3250, column: 8)
!4535 = !DILocation(line: 3250, column: 9, scope: !4534)
!4536 = !DILocation(line: 3251, column: 8, scope: !4534)
!4537 = !DILocation(line: 3251, column: 32, scope: !4534)
!4538 = !DILocation(line: 3251, column: 38, scope: !4534)
!4539 = !DILocation(line: 3251, column: 12, scope: !4534)
!4540 = !DILocation(line: 3250, column: 8, scope: !4510)
!4541 = !DILocation(line: 3252, column: 6, scope: !4534)
!4542 = !DILocation(line: 3255, column: 8, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3255, column: 8)
!4544 = !DILocation(line: 3255, column: 16, scope: !4543)
!4545 = !DILocation(line: 3255, column: 13, scope: !4543)
!4546 = !DILocation(line: 3255, column: 8, scope: !4510)
!4547 = !DILocation(line: 3256, column: 23, scope: !4543)
!4548 = !DILocation(line: 3256, column: 29, scope: !4543)
!4549 = !DILocation(line: 3256, column: 6, scope: !4543)
!4550 = !DILocation(line: 3258, column: 9, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3258, column: 8)
!4552 = !DILocation(line: 3258, column: 8, scope: !4510)
!4553 = !DILocation(line: 3259, column: 28, scope: !4551)
!4554 = !DILocation(line: 3259, column: 26, scope: !4551)
!4555 = !DILocation(line: 3259, column: 6, scope: !4551)
!4556 = !DILocation(line: 3260, column: 20, scope: !4510)
!4557 = !DILocation(line: 3260, column: 41, scope: !4510)
!4558 = !DILocation(line: 3260, column: 4, scope: !4510)
!4559 = !DILocation(line: 3261, column: 2, scope: !4510)
!4560 = !DILocation(line: 3235, column: 57, scope: !4506)
!4561 = !DILocation(line: 3235, column: 7, scope: !4506)
!4562 = distinct !{!4562, !4508, !4563}
!4563 = !DILocation(line: 3261, column: 2, scope: !4502)
!4564 = !DILocation(line: 3262, column: 5, scope: !4498)
!4565 = distinct !{!4565, !4493, !4566}
!4566 = !DILocation(line: 3262, column: 5, scope: !4494)
!4567 = !DILocation(line: 3267, column: 7, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 3267, column: 7)
!4569 = !DILocation(line: 3267, column: 7, scope: !4461)
!4570 = !DILocalVariable(name: "bi", scope: !4571, file: !3, line: 3269, type: !4572)
!4571 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 3268, column: 5)
!4572 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1232, line: 218, baseType: !4573)
!4573 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1232, line: 203, size: 256, elements: !4574)
!4574 = !{!4575, !4576, !4577, !4578}
!4575 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4573, file: !1232, line: 206, baseType: !1235, size: 64)
!4576 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4573, file: !1232, line: 209, baseType: !1235, size: 64, offset: 64)
!4577 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4573, file: !1232, line: 212, baseType: !7, size: 32, offset: 128)
!4578 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4573, file: !1232, line: 217, baseType: !1245, size: 64, offset: 192)
!4579 = !DILocation(line: 3269, column: 23, scope: !4571)
!4580 = !DILocation(line: 3271, column: 7, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 3271, column: 7)
!4582 = !DILocation(line: 3271, column: 7, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 3271, column: 7)
!4584 = !DILocalVariable(name: "psi", scope: !4585, file: !3, line: 3273, type: !4247)
!4585 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 3272, column: 2)
!4586 = !DILocation(line: 3273, column: 25, scope: !4585)
!4587 = !DILocation(line: 3274, column: 11, scope: !4585)
!4588 = !DILocation(line: 3274, column: 9, scope: !4585)
!4589 = !DILocation(line: 3275, column: 10, scope: !4585)
!4590 = !DILocation(line: 3275, column: 8, scope: !4585)
!4591 = !DILocation(line: 3277, column: 4, scope: !4585)
!4592 = !DILocation(line: 3278, column: 24, scope: !4585)
!4593 = !DILocation(line: 3278, column: 10, scope: !4585)
!4594 = !DILocation(line: 3279, column: 4, scope: !4585)
!4595 = !DILocation(line: 3280, column: 2, scope: !4585)
!4596 = distinct !{!4596, !4580, !4597}
!4597 = !DILocation(line: 3280, column: 2, scope: !4581)
!4598 = !DILocation(line: 3282, column: 7, scope: !4571)
!4599 = !DILocation(line: 3283, column: 7, scope: !4571)
!4600 = !DILocation(line: 3284, column: 5, scope: !4571)
!4601 = !DILocation(line: 3287, column: 3, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 3287, column: 3)
!4603 = !DILocation(line: 3287, column: 3, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 3287, column: 3)
!4605 = !DILocalVariable(name: "exit", scope: !4606, file: !3, line: 3289, type: !1309)
!4606 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 3288, column: 5)
!4607 = !DILocation(line: 3289, column: 12, scope: !4606)
!4608 = !DILocalVariable(name: "def", scope: !4606, file: !3, line: 3290, type: !998)
!4609 = !DILocation(line: 3290, column: 12, scope: !4606)
!4610 = !DILocalVariable(name: "rslt", scope: !4606, file: !3, line: 3290, type: !998)
!4611 = !DILocation(line: 3290, column: 17, scope: !4606)
!4612 = !DILocalVariable(name: "niter", scope: !4606, file: !3, line: 3290, type: !998)
!4613 = !DILocation(line: 3290, column: 23, scope: !4606)
!4614 = !DILocalVariable(name: "bsi", scope: !4606, file: !3, line: 3291, type: !4247)
!4615 = !DILocation(line: 3291, column: 28, scope: !4606)
!4616 = !DILocation(line: 3295, column: 27, scope: !4606)
!4617 = !DILocation(line: 3295, column: 14, scope: !4606)
!4618 = !DILocation(line: 3295, column: 12, scope: !4606)
!4619 = !DILocation(line: 3296, column: 12, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 3296, column: 11)
!4621 = !DILocation(line: 3296, column: 11, scope: !4606)
!4622 = !DILocation(line: 3297, column: 2, scope: !4620)
!4623 = !DILocation(line: 3299, column: 43, scope: !4606)
!4624 = !DILocation(line: 3299, column: 15, scope: !4606)
!4625 = !DILocation(line: 3299, column: 13, scope: !4606)
!4626 = !DILocation(line: 3300, column: 11, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 3300, column: 11)
!4628 = !DILocation(line: 3300, column: 20, scope: !4627)
!4629 = !DILocation(line: 3300, column: 17, scope: !4627)
!4630 = !DILocation(line: 3300, column: 11, scope: !4606)
!4631 = !DILocation(line: 3301, column: 2, scope: !4627)
!4632 = !DILocation(line: 3304, column: 27, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 3304, column: 11)
!4634 = !DILocation(line: 3304, column: 33, scope: !4633)
!4635 = !DILocation(line: 3304, column: 12, scope: !4633)
!4636 = !DILocation(line: 3304, column: 11, scope: !4606)
!4637 = !DILocation(line: 3305, column: 24, scope: !4633)
!4638 = !DILocation(line: 3305, column: 2, scope: !4633)
!4639 = !DILocation(line: 3306, column: 31, scope: !4606)
!4640 = !DILocation(line: 3306, column: 37, scope: !4606)
!4641 = !DILocation(line: 3306, column: 13, scope: !4606)
!4642 = !DILocation(line: 3308, column: 37, scope: !4606)
!4643 = !DILocation(line: 3309, column: 21, scope: !4606)
!4644 = !DILocation(line: 3309, column: 27, scope: !4606)
!4645 = !DILocation(line: 3309, column: 33, scope: !4606)
!4646 = !DILocation(line: 3309, column: 9, scope: !4606)
!4647 = !DILocation(line: 3309, column: 46, scope: !4606)
!4648 = !DILocation(line: 3308, column: 17, scope: !4606)
!4649 = !DILocation(line: 3308, column: 15, scope: !4606)
!4650 = !DILocation(line: 3311, column: 34, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 3311, column: 7)
!4652 = !DILocation(line: 3311, column: 40, scope: !4651)
!4653 = !DILocation(line: 3311, column: 18, scope: !4651)
!4654 = !DILocation(line: 3311, column: 12, scope: !4651)
!4655 = !DILocation(line: 3311, column: 48, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 3311, column: 7)
!4657 = !DILocation(line: 3311, column: 47, scope: !4656)
!4658 = !DILocation(line: 3311, column: 7, scope: !4651)
!4659 = !DILocation(line: 3313, column: 10, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 3312, column: 2)
!4661 = !DILocation(line: 3313, column: 8, scope: !4660)
!4662 = !DILocation(line: 3314, column: 11, scope: !4660)
!4663 = !DILocation(line: 3314, column: 9, scope: !4660)
!4664 = !DILocation(line: 3315, column: 10, scope: !4660)
!4665 = !DILocation(line: 3315, column: 8, scope: !4660)
!4666 = !DILocation(line: 3316, column: 24, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 3316, column: 8)
!4668 = !DILocation(line: 3316, column: 9, scope: !4667)
!4669 = !DILocation(line: 3316, column: 8, scope: !4660)
!4670 = !DILocation(line: 3318, column: 8, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 3317, column: 6)
!4672 = !DILocation(line: 3319, column: 8, scope: !4671)
!4673 = distinct !{!4673, !4658, !4674}
!4674 = !DILocation(line: 3359, column: 2, scope: !4651)
!4675 = !DILocation(line: 3322, column: 9, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 3322, column: 8)
!4677 = !DILocation(line: 3323, column: 8, scope: !4676)
!4678 = !DILocation(line: 3323, column: 12, scope: !4676)
!4679 = !DILocation(line: 3322, column: 8, scope: !4660)
!4680 = !DILocation(line: 3325, column: 8, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 3324, column: 6)
!4682 = !DILocation(line: 3326, column: 8, scope: !4681)
!4683 = !DILocation(line: 3329, column: 44, scope: !4660)
!4684 = !DILocation(line: 3329, column: 53, scope: !4660)
!4685 = !DILocation(line: 3329, column: 59, scope: !4660)
!4686 = !DILocation(line: 3329, column: 10, scope: !4660)
!4687 = !DILocation(line: 3329, column: 8, scope: !4660)
!4688 = !DILocation(line: 3330, column: 48, scope: !4660)
!4689 = !DILocation(line: 3330, column: 57, scope: !4660)
!4690 = !DILocation(line: 3330, column: 10, scope: !4660)
!4691 = !DILocation(line: 3330, column: 8, scope: !4660)
!4692 = !DILocation(line: 3331, column: 39, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 3331, column: 8)
!4694 = !DILocation(line: 3331, column: 9, scope: !4693)
!4695 = !DILocation(line: 3332, column: 8, scope: !4693)
!4696 = !DILocation(line: 3332, column: 51, scope: !4693)
!4697 = !DILocation(line: 3332, column: 56, scope: !4693)
!4698 = !DILocation(line: 3332, column: 65, scope: !4693)
!4699 = !DILocation(line: 3332, column: 11, scope: !4693)
!4700 = !DILocation(line: 3336, column: 8, scope: !4693)
!4701 = !DILocation(line: 3336, column: 41, scope: !4693)
!4702 = !DILocation(line: 3336, column: 11, scope: !4693)
!4703 = !DILocation(line: 3344, column: 8, scope: !4693)
!4704 = !DILocation(line: 3344, column: 35, scope: !4693)
!4705 = !DILocation(line: 3344, column: 11, scope: !4693)
!4706 = !DILocation(line: 3331, column: 8, scope: !4660)
!4707 = !DILocation(line: 3346, column: 8, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 3345, column: 6)
!4709 = !DILocation(line: 3347, column: 8, scope: !4708)
!4710 = !DILocation(line: 3352, column: 24, scope: !4660)
!4711 = !DILocation(line: 3352, column: 10, scope: !4660)
!4712 = !DILocation(line: 3352, column: 8, scope: !4660)
!4713 = !DILocation(line: 3353, column: 4, scope: !4660)
!4714 = !DILocation(line: 3355, column: 42, scope: !4660)
!4715 = !DILocation(line: 3355, column: 10, scope: !4660)
!4716 = !DILocation(line: 3355, column: 8, scope: !4660)
!4717 = !DILocation(line: 3357, column: 10, scope: !4660)
!4718 = !DILocation(line: 3357, column: 8, scope: !4660)
!4719 = !DILocation(line: 3358, column: 29, scope: !4660)
!4720 = !DILocation(line: 3358, column: 4, scope: !4660)
!4721 = !DILocation(line: 3311, column: 7, scope: !4656)
!4722 = !DILocation(line: 3360, column: 5, scope: !4606)
!4723 = distinct !{!4723, !4601, !4724}
!4724 = !DILocation(line: 3360, column: 5, scope: !4602)
!4725 = !DILocation(line: 3361, column: 3, scope: !4461)
!4726 = !DILocation(line: 3362, column: 1, scope: !4461)
!4727 = distinct !DISubprogram(name: "number_of_loops", scope: !330, file: !330, line: 459, type: !4462, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4728 = !DILocation(line: 461, column: 8, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4727, file: !330, line: 461, column: 7)
!4730 = !DILocation(line: 461, column: 7, scope: !4727)
!4731 = !DILocation(line: 462, column: 5, scope: !4729)
!4732 = !DILocation(line: 464, column: 10, scope: !4727)
!4733 = !DILocation(line: 464, column: 3, scope: !4727)
!4734 = !DILocation(line: 465, column: 1, scope: !4727)
!4735 = distinct !DISubprogram(name: "gsi_end_p", scope: !391, file: !391, line: 4467, type: !4736, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4736 = !DISubroutineType(types: !4737)
!4737 = !{!1118, !4247}
!4738 = !DILocalVariable(name: "i", arg: 1, scope: !4735, file: !391, line: 4467, type: !4247)
!4739 = !DILocation(line: 4467, column: 33, scope: !4735)
!4740 = !DILocation(line: 4469, column: 12, scope: !4735)
!4741 = !DILocation(line: 4469, column: 16, scope: !4735)
!4742 = !DILocation(line: 4469, column: 10, scope: !4735)
!4743 = !DILocation(line: 4469, column: 3, scope: !4735)
!4744 = distinct !DISubprogram(name: "gsi_stmt", scope: !391, file: !391, line: 4501, type: !4745, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4745 = !DISubroutineType(types: !4746)
!4746 = !{!1329, !4247}
!4747 = !DILocalVariable(name: "i", arg: 1, scope: !4744, file: !391, line: 4501, type: !4247)
!4748 = !DILocation(line: 4501, column: 32, scope: !4744)
!4749 = !DILocation(line: 4503, column: 12, scope: !4744)
!4750 = !DILocation(line: 4503, column: 17, scope: !4744)
!4751 = !DILocation(line: 4503, column: 3, scope: !4744)
!4752 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2524, file: !2524, line: 434, type: !4753, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4753 = !DISubroutineType(types: !4754)
!4754 = !{!998, !4755}
!4755 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1360, line: 27, baseType: !1364)
!4756 = !DILocalVariable(name: "def", arg: 1, scope: !4752, file: !2524, line: 434, type: !4755)
!4757 = !DILocation(line: 434, column: 33, scope: !4752)
!4758 = !DILocation(line: 436, column: 11, scope: !4752)
!4759 = !DILocation(line: 436, column: 10, scope: !4752)
!4760 = !DILocation(line: 436, column: 3, scope: !4752)
!4761 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !391, file: !391, line: 3080, type: !4762, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4762 = !DISubroutineType(types: !4763)
!4763 = !{!1364, !1329}
!4764 = !DILocalVariable(name: "gs", arg: 1, scope: !4761, file: !391, line: 3080, type: !1329)
!4765 = !DILocation(line: 3080, column: 31, scope: !4761)
!4766 = !DILocation(line: 3083, column: 11, scope: !4761)
!4767 = !DILocation(line: 3083, column: 15, scope: !4761)
!4768 = !DILocation(line: 3083, column: 26, scope: !4761)
!4769 = !DILocation(line: 3083, column: 3, scope: !4761)
!4770 = distinct !DISubprogram(name: "gsi_next", scope: !391, file: !391, line: 4485, type: !4771, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4771 = !DISubroutineType(types: !4772)
!4772 = !{null, !4773}
!4773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4247, size: 64)
!4774 = !DILocalVariable(name: "i", arg: 1, scope: !4770, file: !391, line: 4485, type: !4773)
!4775 = !DILocation(line: 4485, column: 33, scope: !4770)
!4776 = !DILocation(line: 4487, column: 12, scope: !4770)
!4777 = !DILocation(line: 4487, column: 15, scope: !4770)
!4778 = !DILocation(line: 4487, column: 20, scope: !4770)
!4779 = !DILocation(line: 4487, column: 3, scope: !4770)
!4780 = !DILocation(line: 4487, column: 6, scope: !4770)
!4781 = !DILocation(line: 4487, column: 10, scope: !4770)
!4782 = !DILocation(line: 4488, column: 1, scope: !4770)
!4783 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1232, file: !1232, line: 224, type: !4784, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4784 = !DISubroutineType(types: !4785)
!4785 = !{null, !4786, !4787, !7, !4790}
!4786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4572, size: 64)
!4787 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !999, line: 48, baseType: !4788)
!4788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4789, size: 64)
!4789 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1231)
!4790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4791 = !DILocalVariable(name: "bi", arg: 1, scope: !4783, file: !1232, line: 224, type: !4786)
!4792 = !DILocation(line: 224, column: 37, scope: !4783)
!4793 = !DILocalVariable(name: "map", arg: 2, scope: !4783, file: !1232, line: 224, type: !4787)
!4794 = !DILocation(line: 224, column: 54, scope: !4783)
!4795 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4783, file: !1232, line: 225, type: !7)
!4796 = !DILocation(line: 225, column: 15, scope: !4783)
!4797 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4783, file: !1232, line: 225, type: !4790)
!4798 = !DILocation(line: 225, column: 36, scope: !4783)
!4799 = !DILocation(line: 227, column: 14, scope: !4783)
!4800 = !DILocation(line: 227, column: 19, scope: !4783)
!4801 = !DILocation(line: 227, column: 3, scope: !4783)
!4802 = !DILocation(line: 227, column: 7, scope: !4783)
!4803 = !DILocation(line: 227, column: 12, scope: !4783)
!4804 = !DILocation(line: 228, column: 3, scope: !4783)
!4805 = !DILocation(line: 228, column: 7, scope: !4783)
!4806 = !DILocation(line: 228, column: 12, scope: !4783)
!4807 = !DILocation(line: 231, column: 3, scope: !4783)
!4808 = !DILocation(line: 233, column: 12, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4810, file: !1232, line: 233, column: 11)
!4810 = distinct !DILexicalBlock(scope: !4783, file: !1232, line: 232, column: 5)
!4811 = !DILocation(line: 233, column: 16, scope: !4809)
!4812 = !DILocation(line: 233, column: 11, scope: !4810)
!4813 = !DILocation(line: 235, column: 4, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4809, file: !1232, line: 234, column: 2)
!4815 = !DILocation(line: 235, column: 8, scope: !4814)
!4816 = !DILocation(line: 235, column: 13, scope: !4814)
!4817 = !DILocation(line: 236, column: 4, scope: !4814)
!4818 = !DILocation(line: 239, column: 11, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4810, file: !1232, line: 239, column: 11)
!4820 = !DILocation(line: 239, column: 15, scope: !4819)
!4821 = !DILocation(line: 239, column: 21, scope: !4819)
!4822 = !DILocation(line: 239, column: 29, scope: !4819)
!4823 = !DILocation(line: 239, column: 39, scope: !4819)
!4824 = !DILocation(line: 239, column: 26, scope: !4819)
!4825 = !DILocation(line: 239, column: 11, scope: !4810)
!4826 = !DILocation(line: 240, column: 2, scope: !4819)
!4827 = !DILocation(line: 241, column: 18, scope: !4810)
!4828 = !DILocation(line: 241, column: 22, scope: !4810)
!4829 = !DILocation(line: 241, column: 28, scope: !4810)
!4830 = !DILocation(line: 241, column: 7, scope: !4810)
!4831 = !DILocation(line: 241, column: 11, scope: !4810)
!4832 = !DILocation(line: 241, column: 16, scope: !4810)
!4833 = distinct !{!4833, !4807, !4834}
!4834 = !DILocation(line: 242, column: 5, scope: !4783)
!4835 = !DILocation(line: 245, column: 7, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4783, file: !1232, line: 245, column: 7)
!4837 = !DILocation(line: 245, column: 11, scope: !4836)
!4838 = !DILocation(line: 245, column: 17, scope: !4836)
!4839 = !DILocation(line: 245, column: 25, scope: !4836)
!4840 = !DILocation(line: 245, column: 35, scope: !4836)
!4841 = !DILocation(line: 245, column: 22, scope: !4836)
!4842 = !DILocation(line: 245, column: 7, scope: !4783)
!4843 = !DILocation(line: 246, column: 17, scope: !4836)
!4844 = !DILocation(line: 246, column: 21, scope: !4836)
!4845 = !DILocation(line: 246, column: 27, scope: !4836)
!4846 = !DILocation(line: 246, column: 32, scope: !4836)
!4847 = !DILocation(line: 246, column: 15, scope: !4836)
!4848 = !DILocation(line: 246, column: 5, scope: !4836)
!4849 = !DILocation(line: 249, column: 17, scope: !4783)
!4850 = !DILocation(line: 249, column: 27, scope: !4783)
!4851 = !DILocation(line: 249, column: 46, scope: !4783)
!4852 = !DILocation(line: 249, column: 3, scope: !4783)
!4853 = !DILocation(line: 249, column: 7, scope: !4783)
!4854 = !DILocation(line: 249, column: 15, scope: !4783)
!4855 = !DILocation(line: 250, column: 14, scope: !4783)
!4856 = !DILocation(line: 250, column: 18, scope: !4783)
!4857 = !DILocation(line: 250, column: 24, scope: !4783)
!4858 = !DILocation(line: 250, column: 29, scope: !4783)
!4859 = !DILocation(line: 250, column: 33, scope: !4783)
!4860 = !DILocation(line: 250, column: 3, scope: !4783)
!4861 = !DILocation(line: 250, column: 7, scope: !4783)
!4862 = !DILocation(line: 250, column: 12, scope: !4783)
!4863 = !DILocation(line: 251, column: 16, scope: !4783)
!4864 = !DILocation(line: 251, column: 26, scope: !4783)
!4865 = !DILocation(line: 251, column: 3, scope: !4783)
!4866 = !DILocation(line: 251, column: 7, scope: !4783)
!4867 = !DILocation(line: 251, column: 12, scope: !4783)
!4868 = !DILocation(line: 257, column: 17, scope: !4783)
!4869 = !DILocation(line: 257, column: 21, scope: !4783)
!4870 = !DILocation(line: 257, column: 16, scope: !4783)
!4871 = !DILocation(line: 257, column: 13, scope: !4783)
!4872 = !DILocation(line: 259, column: 13, scope: !4783)
!4873 = !DILocation(line: 259, column: 4, scope: !4783)
!4874 = !DILocation(line: 259, column: 11, scope: !4783)
!4875 = !DILocation(line: 260, column: 1, scope: !4783)
!4876 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1232, file: !1232, line: 393, type: !4877, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4877 = !DISubroutineType(types: !4878)
!4878 = !{!1118, !4786, !4790}
!4879 = !DILocalVariable(name: "bi", arg: 1, scope: !4876, file: !1232, line: 393, type: !4786)
!4880 = !DILocation(line: 393, column: 32, scope: !4876)
!4881 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4876, file: !1232, line: 393, type: !4790)
!4882 = !DILocation(line: 393, column: 46, scope: !4876)
!4883 = !DILocation(line: 396, column: 7, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4876, file: !1232, line: 396, column: 7)
!4885 = !DILocation(line: 396, column: 11, scope: !4884)
!4886 = !DILocation(line: 396, column: 7, scope: !4876)
!4887 = !DILocation(line: 397, column: 5, scope: !4884)
!4888 = !DILabel(scope: !4889, name: "next_bit", file: !1232, line: 398)
!4889 = distinct !DILexicalBlock(scope: !4884, file: !1232, line: 397, column: 5)
!4890 = !DILocation(line: 398, column: 5, scope: !4889)
!4891 = !DILocation(line: 399, column: 7, scope: !4889)
!4892 = !DILocation(line: 399, column: 16, scope: !4889)
!4893 = !DILocation(line: 399, column: 20, scope: !4889)
!4894 = !DILocation(line: 399, column: 25, scope: !4889)
!4895 = !DILocation(line: 399, column: 14, scope: !4889)
!4896 = !DILocation(line: 401, column: 4, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4889, file: !1232, line: 400, column: 2)
!4898 = !DILocation(line: 401, column: 8, scope: !4897)
!4899 = !DILocation(line: 401, column: 13, scope: !4897)
!4900 = !DILocation(line: 402, column: 5, scope: !4897)
!4901 = !DILocation(line: 402, column: 12, scope: !4897)
!4902 = distinct !{!4902, !4891, !4903}
!4903 = !DILocation(line: 403, column: 2, scope: !4889)
!4904 = !DILocation(line: 404, column: 7, scope: !4889)
!4905 = !DILocation(line: 410, column: 16, scope: !4876)
!4906 = !DILocation(line: 410, column: 15, scope: !4876)
!4907 = !DILocation(line: 410, column: 23, scope: !4876)
!4908 = !DILocation(line: 410, column: 42, scope: !4876)
!4909 = !DILocation(line: 411, column: 7, scope: !4876)
!4910 = !DILocation(line: 411, column: 26, scope: !4876)
!4911 = !DILocation(line: 410, column: 4, scope: !4876)
!4912 = !DILocation(line: 410, column: 11, scope: !4876)
!4913 = !DILocation(line: 412, column: 3, scope: !4876)
!4914 = !DILocation(line: 412, column: 7, scope: !4876)
!4915 = !DILocation(line: 412, column: 14, scope: !4876)
!4916 = !DILocation(line: 414, column: 3, scope: !4876)
!4917 = !DILocation(line: 417, column: 7, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4876, file: !1232, line: 415, column: 5)
!4919 = !DILocation(line: 417, column: 14, scope: !4918)
!4920 = !DILocation(line: 417, column: 18, scope: !4918)
!4921 = !DILocation(line: 417, column: 26, scope: !4918)
!4922 = !DILocation(line: 419, column: 15, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4918, file: !1232, line: 418, column: 2)
!4924 = !DILocation(line: 419, column: 19, scope: !4923)
!4925 = !DILocation(line: 419, column: 25, scope: !4923)
!4926 = !DILocation(line: 419, column: 30, scope: !4923)
!4927 = !DILocation(line: 419, column: 34, scope: !4923)
!4928 = !DILocation(line: 419, column: 4, scope: !4923)
!4929 = !DILocation(line: 419, column: 8, scope: !4923)
!4930 = !DILocation(line: 419, column: 13, scope: !4923)
!4931 = !DILocation(line: 420, column: 8, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4923, file: !1232, line: 420, column: 8)
!4933 = !DILocation(line: 420, column: 12, scope: !4932)
!4934 = !DILocation(line: 420, column: 8, scope: !4923)
!4935 = !DILocation(line: 421, column: 6, scope: !4932)
!4936 = !DILocation(line: 422, column: 5, scope: !4923)
!4937 = !DILocation(line: 422, column: 12, scope: !4923)
!4938 = !DILocation(line: 423, column: 4, scope: !4923)
!4939 = !DILocation(line: 423, column: 8, scope: !4923)
!4940 = !DILocation(line: 423, column: 15, scope: !4923)
!4941 = distinct !{!4941, !4917, !4942}
!4942 = !DILocation(line: 424, column: 2, scope: !4918)
!4943 = !DILocation(line: 427, column: 18, scope: !4918)
!4944 = !DILocation(line: 427, column: 22, scope: !4918)
!4945 = !DILocation(line: 427, column: 28, scope: !4918)
!4946 = !DILocation(line: 427, column: 7, scope: !4918)
!4947 = !DILocation(line: 427, column: 11, scope: !4918)
!4948 = !DILocation(line: 427, column: 16, scope: !4918)
!4949 = !DILocation(line: 428, column: 12, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4918, file: !1232, line: 428, column: 11)
!4951 = !DILocation(line: 428, column: 16, scope: !4950)
!4952 = !DILocation(line: 428, column: 11, scope: !4918)
!4953 = !DILocation(line: 429, column: 2, scope: !4950)
!4954 = !DILocation(line: 430, column: 17, scope: !4918)
!4955 = !DILocation(line: 430, column: 21, scope: !4918)
!4956 = !DILocation(line: 430, column: 27, scope: !4918)
!4957 = !DILocation(line: 430, column: 32, scope: !4918)
!4958 = !DILocation(line: 430, column: 8, scope: !4918)
!4959 = !DILocation(line: 430, column: 15, scope: !4918)
!4960 = !DILocation(line: 431, column: 7, scope: !4918)
!4961 = !DILocation(line: 431, column: 11, scope: !4918)
!4962 = !DILocation(line: 431, column: 19, scope: !4918)
!4963 = distinct !{!4963, !4916, !4964}
!4964 = !DILocation(line: 432, column: 5, scope: !4876)
!4965 = !DILocation(line: 433, column: 1, scope: !4876)
!4966 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !4967, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4967 = !DISubroutineType(types: !4968)
!4968 = !{!998, !4969, !7}
!4969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4970, size: 64)
!4970 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1881)
!4971 = !DILocalVariable(name: "vec_", arg: 1, scope: !4966, file: !135, line: 182, type: !4969)
!4972 = !DILocation(line: 182, column: 1, scope: !4966)
!4973 = !DILocalVariable(name: "ix_", arg: 2, scope: !4966, file: !135, line: 182, type: !7)
!4974 = !DILocation(line: 0, scope: !4966)
!4975 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1232, file: !1232, line: 382, type: !4976, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4976 = !DISubroutineType(types: !4977)
!4977 = !{null, !4786, !4790}
!4978 = !DILocalVariable(name: "bi", arg: 1, scope: !4975, file: !1232, line: 382, type: !4786)
!4979 = !DILocation(line: 382, column: 33, scope: !4975)
!4980 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4975, file: !1232, line: 382, type: !4790)
!4981 = !DILocation(line: 382, column: 47, scope: !4975)
!4982 = !DILocation(line: 384, column: 3, scope: !4975)
!4983 = !DILocation(line: 384, column: 7, scope: !4975)
!4984 = !DILocation(line: 384, column: 12, scope: !4975)
!4985 = !DILocation(line: 385, column: 4, scope: !4975)
!4986 = !DILocation(line: 385, column: 11, scope: !4975)
!4987 = !DILocation(line: 386, column: 1, scope: !4975)
!4988 = distinct !DISubprogram(name: "single_pred_p", scope: !343, file: !343, line: 634, type: !4989, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!4989 = !DISubroutineType(types: !4990)
!4990 = !{!1118, !4991}
!4991 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !999, line: 112, baseType: !4992)
!4992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4993, size: 64)
!4993 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1294)
!4994 = !DILocalVariable(name: "bb", arg: 1, scope: !4988, file: !343, line: 634, type: !4991)
!4995 = !DILocation(line: 634, column: 34, scope: !4988)
!4996 = !DILocation(line: 636, column: 10, scope: !4988)
!4997 = !DILocation(line: 636, column: 33, scope: !4988)
!4998 = !DILocation(line: 636, column: 3, scope: !4988)
!4999 = distinct !DISubprogram(name: "gsi_after_labels", scope: !391, file: !391, line: 4510, type: !5000, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5000 = !DISubroutineType(types: !5001)
!5001 = !{!4247, !1782}
!5002 = !DILocalVariable(name: "bb", arg: 1, scope: !4999, file: !391, line: 4510, type: !1782)
!5003 = !DILocation(line: 4510, column: 31, scope: !4999)
!5004 = !DILocalVariable(name: "gsi", scope: !4999, file: !391, line: 4512, type: !4247)
!5005 = !DILocation(line: 4512, column: 24, scope: !4999)
!5006 = !DILocation(line: 4512, column: 44, scope: !4999)
!5007 = !DILocation(line: 4512, column: 30, scope: !4999)
!5008 = !DILocation(line: 4514, column: 3, scope: !4999)
!5009 = !DILocation(line: 4514, column: 11, scope: !4999)
!5010 = !DILocation(line: 4514, column: 27, scope: !4999)
!5011 = !DILocation(line: 4514, column: 43, scope: !4999)
!5012 = !DILocation(line: 4514, column: 30, scope: !4999)
!5013 = !DILocation(line: 4514, column: 59, scope: !4999)
!5014 = !DILocation(line: 0, scope: !4999)
!5015 = !DILocation(line: 4515, column: 5, scope: !4999)
!5016 = distinct !{!5016, !5008, !5017}
!5017 = !DILocation(line: 4515, column: 19, scope: !4999)
!5018 = !DILocation(line: 4517, column: 3, scope: !4999)
!5019 = distinct !DISubprogram(name: "loop_depth", scope: !330, file: !330, line: 425, type: !5020, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5020 = !DISubroutineType(types: !5021)
!5021 = !{!7, !2898}
!5022 = !DILocalVariable(name: "loop", arg: 1, scope: !5019, file: !330, line: 425, type: !2898)
!5023 = !DILocation(line: 425, column: 32, scope: !5019)
!5024 = !DILocation(line: 427, column: 10, scope: !5019)
!5025 = !DILocation(line: 427, column: 3, scope: !5019)
!5026 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2524, file: !2524, line: 427, type: !5027, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5027 = !DISubroutineType(types: !5028)
!5028 = !{!998, !5029}
!5029 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1360, line: 30, baseType: !5030)
!5030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5031, size: 64)
!5031 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1371)
!5032 = !DILocalVariable(name: "use", arg: 1, scope: !5026, file: !2524, line: 427, type: !5029)
!5033 = !DILocation(line: 427, column: 33, scope: !5026)
!5034 = !DILocation(line: 429, column: 12, scope: !5026)
!5035 = !DILocation(line: 429, column: 17, scope: !5026)
!5036 = !DILocation(line: 429, column: 10, scope: !5026)
!5037 = !DILocation(line: 429, column: 3, scope: !5026)
!5038 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2524, file: !2524, line: 442, type: !5039, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5039 = !DISubroutineType(types: !5040)
!5040 = !{!5029, !1329, !1095}
!5041 = !DILocalVariable(name: "gs", arg: 1, scope: !5038, file: !2524, line: 442, type: !1329)
!5042 = !DILocation(line: 442, column: 36, scope: !5038)
!5043 = !DILocalVariable(name: "i", arg: 2, scope: !5038, file: !2524, line: 442, type: !1095)
!5044 = !DILocation(line: 442, column: 44, scope: !5038)
!5045 = !DILocation(line: 444, column: 27, scope: !5038)
!5046 = !DILocation(line: 444, column: 31, scope: !5038)
!5047 = !DILocation(line: 444, column: 11, scope: !5038)
!5048 = !DILocation(line: 444, column: 35, scope: !5038)
!5049 = !DILocation(line: 444, column: 3, scope: !5038)
!5050 = distinct !DISubprogram(name: "gt_ggc_mx_scev_info_str", scope: !2399, file: !2399, line: 23, type: !1834, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5051 = !DILocalVariable(name: "x_p", arg: 1, scope: !5050, file: !2399, line: 23, type: !1282)
!5052 = !DILocation(line: 23, column: 32, scope: !5050)
!5053 = !DILocalVariable(name: "x", scope: !5050, file: !2399, line: 25, type: !5054)
!5054 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2357)
!5055 = !DILocation(line: 25, column: 32, scope: !5050)
!5056 = !DILocation(line: 25, column: 60, scope: !5050)
!5057 = !DILocation(line: 25, column: 36, scope: !5050)
!5058 = !DILocation(line: 26, column: 7, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5050, file: !2399, line: 26, column: 7)
!5060 = !DILocation(line: 26, column: 7, scope: !5050)
!5061 = !DILocation(line: 28, column: 7, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5059, file: !2399, line: 27, column: 5)
!5063 = !DILocation(line: 28, column: 7, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5065, file: !2399, line: 28, column: 7)
!5065 = distinct !DILexicalBlock(scope: !5062, file: !2399, line: 28, column: 7)
!5066 = !DILocation(line: 28, column: 7, scope: !5065)
!5067 = !DILocation(line: 29, column: 7, scope: !5062)
!5068 = !DILocation(line: 29, column: 7, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !5070, file: !2399, line: 29, column: 7)
!5070 = distinct !DILexicalBlock(scope: !5062, file: !2399, line: 29, column: 7)
!5071 = !DILocation(line: 29, column: 7, scope: !5070)
!5072 = !DILocation(line: 30, column: 7, scope: !5062)
!5073 = !DILocation(line: 30, column: 7, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5075, file: !2399, line: 30, column: 7)
!5075 = distinct !DILexicalBlock(scope: !5062, file: !2399, line: 30, column: 7)
!5076 = !DILocation(line: 30, column: 7, scope: !5075)
!5077 = !DILocation(line: 31, column: 5, scope: !5062)
!5078 = !DILocation(line: 32, column: 1, scope: !5050)
!5079 = distinct !DISubprogram(name: "gt_ggc_m_P13scev_info_str4htab", scope: !2399, file: !2399, line: 35, type: !1834, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5080 = !DILocalVariable(name: "x_p", arg: 1, scope: !5079, file: !2399, line: 35, type: !1282)
!5081 = !DILocation(line: 35, column: 39, scope: !5079)
!5082 = !DILocalVariable(name: "x", scope: !5079, file: !2399, line: 37, type: !5083)
!5083 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1815)
!5084 = !DILocation(line: 37, column: 23, scope: !5079)
!5085 = !DILocation(line: 37, column: 42, scope: !5079)
!5086 = !DILocation(line: 37, column: 27, scope: !5079)
!5087 = !DILocation(line: 38, column: 7, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5079, file: !2399, line: 38, column: 7)
!5089 = !DILocation(line: 38, column: 7, scope: !5079)
!5090 = !DILocation(line: 40, column: 13, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5092, file: !2399, line: 40, column: 11)
!5092 = distinct !DILexicalBlock(scope: !5088, file: !2399, line: 39, column: 5)
!5093 = !DILocation(line: 40, column: 16, scope: !5091)
!5094 = !DILocation(line: 40, column: 24, scope: !5091)
!5095 = !DILocation(line: 40, column: 11, scope: !5092)
!5096 = !DILocalVariable(name: "i0", scope: !5097, file: !2399, line: 41, type: !1475)
!5097 = distinct !DILexicalBlock(scope: !5091, file: !2399, line: 40, column: 33)
!5098 = !DILocation(line: 41, column: 16, scope: !5097)
!5099 = !DILocation(line: 42, column: 17, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5097, file: !2399, line: 42, column: 9)
!5101 = !DILocation(line: 42, column: 14, scope: !5100)
!5102 = !DILocation(line: 42, column: 22, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5100, file: !2399, line: 42, column: 9)
!5104 = !DILocation(line: 42, column: 40, scope: !5103)
!5105 = !DILocation(line: 42, column: 44, scope: !5103)
!5106 = !DILocation(line: 42, column: 25, scope: !5103)
!5107 = !DILocation(line: 42, column: 9, scope: !5100)
!5108 = !DILocation(line: 43, column: 11, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5103, file: !2399, line: 42, column: 57)
!5110 = !DILocation(line: 43, column: 11, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5112, file: !2399, line: 43, column: 11)
!5112 = distinct !DILexicalBlock(scope: !5109, file: !2399, line: 43, column: 11)
!5113 = !DILocation(line: 43, column: 11, scope: !5112)
!5114 = !DILocation(line: 44, column: 9, scope: !5109)
!5115 = !DILocation(line: 42, column: 53, scope: !5103)
!5116 = !DILocation(line: 42, column: 9, scope: !5103)
!5117 = distinct !{!5117, !5107, !5118}
!5118 = !DILocation(line: 44, column: 9, scope: !5100)
!5119 = !DILocation(line: 45, column: 9, scope: !5097)
!5120 = !DILocalVariable(name: "a__", scope: !5121, file: !2399, line: 45, type: !5122)
!5121 = distinct !DILexicalBlock(scope: !5097, file: !2399, line: 45, column: 9)
!5122 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1824)
!5123 = !DILocation(line: 45, column: 9, scope: !5121)
!5124 = !DILocation(line: 45, column: 9, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5121, file: !2399, line: 45, column: 9)
!5126 = !DILocation(line: 46, column: 7, scope: !5097)
!5127 = !DILocation(line: 47, column: 5, scope: !5092)
!5128 = !DILocation(line: 48, column: 1, scope: !5079)
!5129 = distinct !DISubprogram(name: "gt_pch_nx_scev_info_str", scope: !2399, file: !2399, line: 51, type: !1834, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5130 = !DILocalVariable(name: "x_p", arg: 1, scope: !5129, file: !2399, line: 51, type: !1282)
!5131 = !DILocation(line: 51, column: 32, scope: !5129)
!5132 = !DILocalVariable(name: "x", scope: !5129, file: !2399, line: 53, type: !5054)
!5133 = !DILocation(line: 53, column: 32, scope: !5129)
!5134 = !DILocation(line: 53, column: 60, scope: !5129)
!5135 = !DILocation(line: 53, column: 36, scope: !5129)
!5136 = !DILocation(line: 54, column: 27, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5129, file: !2399, line: 54, column: 7)
!5138 = !DILocation(line: 54, column: 30, scope: !5137)
!5139 = !DILocation(line: 54, column: 7, scope: !5137)
!5140 = !DILocation(line: 54, column: 7, scope: !5129)
!5141 = !DILocation(line: 56, column: 7, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5137, file: !2399, line: 55, column: 5)
!5143 = !DILocation(line: 56, column: 7, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5145, file: !2399, line: 56, column: 7)
!5145 = distinct !DILexicalBlock(scope: !5142, file: !2399, line: 56, column: 7)
!5146 = !DILocation(line: 56, column: 7, scope: !5145)
!5147 = !DILocation(line: 57, column: 7, scope: !5142)
!5148 = !DILocation(line: 57, column: 7, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5150, file: !2399, line: 57, column: 7)
!5150 = distinct !DILexicalBlock(scope: !5142, file: !2399, line: 57, column: 7)
!5151 = !DILocation(line: 57, column: 7, scope: !5150)
!5152 = !DILocation(line: 58, column: 7, scope: !5142)
!5153 = !DILocation(line: 58, column: 7, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5155, file: !2399, line: 58, column: 7)
!5155 = distinct !DILexicalBlock(scope: !5142, file: !2399, line: 58, column: 7)
!5156 = !DILocation(line: 58, column: 7, scope: !5155)
!5157 = !DILocation(line: 59, column: 5, scope: !5142)
!5158 = !DILocation(line: 60, column: 1, scope: !5129)
!5159 = distinct !DISubprogram(name: "gt_pch_p_13scev_info_str", scope: !2399, file: !2399, line: 79, type: !5160, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{null, !1282, !1282, !5162, !1282}
!5162 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !2403, line: 38, baseType: !1858)
!5163 = !DILocalVariable(name: "this_obj", arg: 1, scope: !5159, file: !2399, line: 79, type: !1282)
!5164 = !DILocation(line: 79, column: 50, scope: !5159)
!5165 = !DILocalVariable(name: "x_p", arg: 2, scope: !5159, file: !2399, line: 80, type: !1282)
!5166 = !DILocation(line: 80, column: 8, scope: !5159)
!5167 = !DILocalVariable(name: "op", arg: 3, scope: !5159, file: !2399, line: 81, type: !5162)
!5168 = !DILocation(line: 81, column: 39, scope: !5159)
!5169 = !DILocalVariable(name: "cookie", arg: 4, scope: !5159, file: !2399, line: 82, type: !1282)
!5170 = !DILocation(line: 82, column: 25, scope: !5159)
!5171 = !DILocalVariable(name: "x", scope: !5159, file: !2399, line: 84, type: !5054)
!5172 = !DILocation(line: 84, column: 32, scope: !5159)
!5173 = !DILocation(line: 84, column: 77, scope: !5159)
!5174 = !DILocation(line: 84, column: 53, scope: !5159)
!5175 = !DILocation(line: 85, column: 16, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5159, file: !2399, line: 85, column: 7)
!5177 = !DILocation(line: 85, column: 7, scope: !5176)
!5178 = !DILocation(line: 85, column: 22, scope: !5176)
!5179 = !DILocation(line: 85, column: 19, scope: !5176)
!5180 = !DILocation(line: 85, column: 7, scope: !5159)
!5181 = !DILocation(line: 86, column: 5, scope: !5176)
!5182 = !DILocation(line: 86, column: 13, scope: !5176)
!5183 = !DILocation(line: 86, column: 16, scope: !5176)
!5184 = !DILocation(line: 86, column: 9, scope: !5176)
!5185 = !DILocation(line: 86, column: 37, scope: !5176)
!5186 = !DILocation(line: 87, column: 16, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5159, file: !2399, line: 87, column: 7)
!5188 = !DILocation(line: 87, column: 7, scope: !5187)
!5189 = !DILocation(line: 87, column: 22, scope: !5187)
!5190 = !DILocation(line: 87, column: 19, scope: !5187)
!5191 = !DILocation(line: 87, column: 7, scope: !5159)
!5192 = !DILocation(line: 88, column: 5, scope: !5187)
!5193 = !DILocation(line: 88, column: 13, scope: !5187)
!5194 = !DILocation(line: 88, column: 16, scope: !5187)
!5195 = !DILocation(line: 88, column: 9, scope: !5187)
!5196 = !DILocation(line: 88, column: 22, scope: !5187)
!5197 = !DILocation(line: 89, column: 16, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5159, file: !2399, line: 89, column: 7)
!5199 = !DILocation(line: 89, column: 7, scope: !5198)
!5200 = !DILocation(line: 89, column: 22, scope: !5198)
!5201 = !DILocation(line: 89, column: 19, scope: !5198)
!5202 = !DILocation(line: 89, column: 7, scope: !5159)
!5203 = !DILocation(line: 90, column: 5, scope: !5198)
!5204 = !DILocation(line: 90, column: 13, scope: !5198)
!5205 = !DILocation(line: 90, column: 16, scope: !5198)
!5206 = !DILocation(line: 90, column: 9, scope: !5198)
!5207 = !DILocation(line: 90, column: 24, scope: !5198)
!5208 = !DILocation(line: 91, column: 1, scope: !5159)
!5209 = distinct !DISubprogram(name: "gt_pch_n_P13scev_info_str4htab", scope: !2399, file: !2399, line: 63, type: !1834, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5210 = !DILocalVariable(name: "x_p", arg: 1, scope: !5209, file: !2399, line: 63, type: !1282)
!5211 = !DILocation(line: 63, column: 39, scope: !5209)
!5212 = !DILocalVariable(name: "x", scope: !5209, file: !2399, line: 65, type: !5083)
!5213 = !DILocation(line: 65, column: 23, scope: !5209)
!5214 = !DILocation(line: 65, column: 42, scope: !5209)
!5215 = !DILocation(line: 65, column: 27, scope: !5209)
!5216 = !DILocation(line: 66, column: 27, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5209, file: !2399, line: 66, column: 7)
!5218 = !DILocation(line: 66, column: 30, scope: !5217)
!5219 = !DILocation(line: 66, column: 7, scope: !5217)
!5220 = !DILocation(line: 66, column: 7, scope: !5209)
!5221 = !DILocation(line: 68, column: 13, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5223, file: !2399, line: 68, column: 11)
!5223 = distinct !DILexicalBlock(scope: !5217, file: !2399, line: 67, column: 5)
!5224 = !DILocation(line: 68, column: 16, scope: !5222)
!5225 = !DILocation(line: 68, column: 24, scope: !5222)
!5226 = !DILocation(line: 68, column: 11, scope: !5223)
!5227 = !DILocalVariable(name: "i0", scope: !5228, file: !2399, line: 69, type: !1475)
!5228 = distinct !DILexicalBlock(scope: !5222, file: !2399, line: 68, column: 33)
!5229 = !DILocation(line: 69, column: 16, scope: !5228)
!5230 = !DILocation(line: 70, column: 17, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5228, file: !2399, line: 70, column: 9)
!5232 = !DILocation(line: 70, column: 14, scope: !5231)
!5233 = !DILocation(line: 70, column: 22, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !5231, file: !2399, line: 70, column: 9)
!5235 = !DILocation(line: 70, column: 40, scope: !5234)
!5236 = !DILocation(line: 70, column: 44, scope: !5234)
!5237 = !DILocation(line: 70, column: 25, scope: !5234)
!5238 = !DILocation(line: 70, column: 9, scope: !5231)
!5239 = !DILocation(line: 71, column: 11, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5234, file: !2399, line: 70, column: 57)
!5241 = !DILocation(line: 71, column: 11, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5243, file: !2399, line: 71, column: 11)
!5243 = distinct !DILexicalBlock(scope: !5240, file: !2399, line: 71, column: 11)
!5244 = !DILocation(line: 71, column: 11, scope: !5243)
!5245 = !DILocation(line: 72, column: 9, scope: !5240)
!5246 = !DILocation(line: 70, column: 53, scope: !5234)
!5247 = !DILocation(line: 70, column: 9, scope: !5234)
!5248 = distinct !{!5248, !5238, !5249}
!5249 = !DILocation(line: 72, column: 9, scope: !5231)
!5250 = !DILocation(line: 73, column: 31, scope: !5228)
!5251 = !DILocation(line: 73, column: 34, scope: !5228)
!5252 = !DILocation(line: 73, column: 29, scope: !5228)
!5253 = !DILocation(line: 73, column: 43, scope: !5228)
!5254 = !DILocation(line: 73, column: 9, scope: !5228)
!5255 = !DILocation(line: 74, column: 7, scope: !5228)
!5256 = !DILocation(line: 75, column: 5, scope: !5223)
!5257 = !DILocation(line: 76, column: 1, scope: !5209)
!5258 = distinct !DISubprogram(name: "gt_pch_p_P13scev_info_str4htab", scope: !2399, file: !2399, line: 94, type: !5160, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5259 = !DILocalVariable(name: "this_obj", arg: 1, scope: !5258, file: !2399, line: 94, type: !1282)
!5260 = !DILocation(line: 94, column: 56, scope: !5258)
!5261 = !DILocalVariable(name: "x_p", arg: 2, scope: !5258, file: !2399, line: 95, type: !1282)
!5262 = !DILocation(line: 95, column: 8, scope: !5258)
!5263 = !DILocalVariable(name: "op", arg: 3, scope: !5258, file: !2399, line: 96, type: !5162)
!5264 = !DILocation(line: 96, column: 39, scope: !5258)
!5265 = !DILocalVariable(name: "cookie", arg: 4, scope: !5258, file: !2399, line: 97, type: !1282)
!5266 = !DILocation(line: 97, column: 25, scope: !5258)
!5267 = !DILocalVariable(name: "x", scope: !5258, file: !2399, line: 99, type: !5083)
!5268 = !DILocation(line: 99, column: 23, scope: !5258)
!5269 = !DILocation(line: 99, column: 59, scope: !5258)
!5270 = !DILocation(line: 99, column: 44, scope: !5258)
!5271 = !DILocation(line: 100, column: 9, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5258, file: !2399, line: 100, column: 7)
!5273 = !DILocation(line: 100, column: 12, scope: !5272)
!5274 = !DILocation(line: 100, column: 20, scope: !5272)
!5275 = !DILocation(line: 100, column: 7, scope: !5258)
!5276 = !DILocalVariable(name: "i0", scope: !5277, file: !2399, line: 101, type: !1475)
!5277 = distinct !DILexicalBlock(scope: !5272, file: !2399, line: 100, column: 29)
!5278 = !DILocation(line: 101, column: 12, scope: !5277)
!5279 = !DILocation(line: 102, column: 13, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5277, file: !2399, line: 102, column: 5)
!5281 = !DILocation(line: 102, column: 10, scope: !5280)
!5282 = !DILocation(line: 102, column: 18, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5280, file: !2399, line: 102, column: 5)
!5284 = !DILocation(line: 102, column: 36, scope: !5283)
!5285 = !DILocation(line: 102, column: 40, scope: !5283)
!5286 = !DILocation(line: 102, column: 21, scope: !5283)
!5287 = !DILocation(line: 102, column: 5, scope: !5280)
!5288 = !DILocation(line: 103, column: 22, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5290, file: !2399, line: 103, column: 11)
!5290 = distinct !DILexicalBlock(scope: !5283, file: !2399, line: 102, column: 53)
!5291 = !DILocation(line: 103, column: 25, scope: !5289)
!5292 = !DILocation(line: 103, column: 11, scope: !5289)
!5293 = !DILocation(line: 103, column: 37, scope: !5289)
!5294 = !DILocation(line: 103, column: 34, scope: !5289)
!5295 = !DILocation(line: 103, column: 11, scope: !5290)
!5296 = !DILocation(line: 104, column: 9, scope: !5289)
!5297 = !DILocation(line: 104, column: 17, scope: !5289)
!5298 = !DILocation(line: 104, column: 20, scope: !5289)
!5299 = !DILocation(line: 104, column: 28, scope: !5289)
!5300 = !DILocation(line: 104, column: 15, scope: !5289)
!5301 = !DILocation(line: 104, column: 13, scope: !5289)
!5302 = !DILocation(line: 104, column: 34, scope: !5289)
!5303 = !DILocation(line: 105, column: 5, scope: !5290)
!5304 = !DILocation(line: 102, column: 49, scope: !5283)
!5305 = !DILocation(line: 102, column: 5, scope: !5283)
!5306 = distinct !{!5306, !5287, !5307}
!5307 = !DILocation(line: 105, column: 5, scope: !5280)
!5308 = !DILocation(line: 106, column: 18, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5277, file: !2399, line: 106, column: 9)
!5310 = !DILocation(line: 106, column: 9, scope: !5309)
!5311 = !DILocation(line: 106, column: 24, scope: !5309)
!5312 = !DILocation(line: 106, column: 21, scope: !5309)
!5313 = !DILocation(line: 106, column: 9, scope: !5277)
!5314 = !DILocation(line: 107, column: 7, scope: !5309)
!5315 = !DILocation(line: 107, column: 15, scope: !5309)
!5316 = !DILocation(line: 107, column: 18, scope: !5309)
!5317 = !DILocation(line: 107, column: 11, scope: !5309)
!5318 = !DILocation(line: 107, column: 28, scope: !5309)
!5319 = !DILocation(line: 108, column: 3, scope: !5277)
!5320 = !DILocation(line: 109, column: 1, scope: !5258)
!5321 = distinct !DISubprogram(name: "gimple_bb", scope: !391, file: !391, line: 1112, type: !5322, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5322 = !DISubroutineType(types: !5323)
!5323 = !{!1293, !2953}
!5324 = !DILocalVariable(name: "g", arg: 1, scope: !5321, file: !391, line: 1112, type: !2953)
!5325 = !DILocation(line: 1112, column: 25, scope: !5321)
!5326 = !DILocation(line: 1114, column: 10, scope: !5321)
!5327 = !DILocation(line: 1114, column: 13, scope: !5321)
!5328 = !DILocation(line: 1114, column: 20, scope: !5321)
!5329 = !DILocation(line: 1114, column: 3, scope: !5321)
!5330 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !330, file: !330, line: 85, type: !5331, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5331 = !DISubroutineType(types: !5332)
!5332 = !{!1572, !5333, !7}
!5333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5334, size: 64)
!5334 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1565)
!5335 = !DILocalVariable(name: "vec_", arg: 1, scope: !5330, file: !330, line: 85, type: !5333)
!5336 = !DILocation(line: 85, column: 1, scope: !5330)
!5337 = !DILocalVariable(name: "ix_", arg: 2, scope: !5330, file: !330, line: 85, type: !7)
!5338 = !DILocation(line: 0, scope: !5330)
!5339 = distinct !DISubprogram(name: "tree_is_chrec", scope: !2753, file: !2753, line: 46, type: !2870, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5340 = !DILocalVariable(name: "expr", arg: 1, scope: !5339, file: !2753, line: 46, type: !2428)
!5341 = !DILocation(line: 46, column: 27, scope: !5339)
!5342 = !DILocation(line: 48, column: 7, scope: !5343)
!5343 = distinct !DILexicalBlock(scope: !5339, file: !2753, line: 48, column: 7)
!5344 = !DILocation(line: 48, column: 24, scope: !5343)
!5345 = !DILocation(line: 49, column: 7, scope: !5343)
!5346 = !DILocation(line: 49, column: 43, scope: !5343)
!5347 = !DILocation(line: 49, column: 10, scope: !5343)
!5348 = !DILocation(line: 48, column: 7, scope: !5339)
!5349 = !DILocation(line: 50, column: 5, scope: !5343)
!5350 = !DILocation(line: 52, column: 5, scope: !5343)
!5351 = !DILocation(line: 53, column: 1, scope: !5339)
!5352 = distinct !DISubprogram(name: "automatically_generated_chrec_p", scope: !2753, file: !2753, line: 37, type: !2870, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5353 = !DILocalVariable(name: "chrec", arg: 1, scope: !5352, file: !2753, line: 37, type: !2428)
!5354 = !DILocation(line: 37, column: 45, scope: !5352)
!5355 = !DILocation(line: 39, column: 11, scope: !5352)
!5356 = !DILocation(line: 39, column: 20, scope: !5352)
!5357 = !DILocation(line: 39, column: 17, scope: !5352)
!5358 = !DILocation(line: 40, column: 4, scope: !5352)
!5359 = !DILocation(line: 40, column: 7, scope: !5352)
!5360 = !DILocation(line: 40, column: 16, scope: !5352)
!5361 = !DILocation(line: 40, column: 13, scope: !5352)
!5362 = !DILocation(line: 39, column: 10, scope: !5352)
!5363 = !DILocation(line: 39, column: 3, scope: !5352)
!5364 = distinct !DISubprogram(name: "find_var_scev_info", scope: !3, file: !3, line: 360, type: !5365, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5365 = !DISubroutineType(types: !5366)
!5366 = !{!1364, !1782, !998}
!5367 = !DILocalVariable(name: "instantiated_below", arg: 1, scope: !5364, file: !3, line: 360, type: !1782)
!5368 = !DILocation(line: 360, column: 33, scope: !5364)
!5369 = !DILocalVariable(name: "var", arg: 2, scope: !5364, file: !3, line: 360, type: !998)
!5370 = !DILocation(line: 360, column: 58, scope: !5364)
!5371 = !DILocalVariable(name: "res", scope: !5364, file: !3, line: 362, type: !2357)
!5372 = !DILocation(line: 362, column: 25, scope: !5364)
!5373 = !DILocalVariable(name: "tmp", scope: !5364, file: !3, line: 363, type: !2358)
!5374 = !DILocation(line: 363, column: 24, scope: !5364)
!5375 = !DILocalVariable(name: "slot", scope: !5364, file: !3, line: 364, type: !1837)
!5376 = !DILocation(line: 364, column: 8, scope: !5364)
!5377 = !DILocation(line: 366, column: 13, scope: !5364)
!5378 = !DILocation(line: 366, column: 7, scope: !5364)
!5379 = !DILocation(line: 366, column: 11, scope: !5364)
!5380 = !DILocation(line: 367, column: 28, scope: !5364)
!5381 = !DILocation(line: 367, column: 7, scope: !5364)
!5382 = !DILocation(line: 367, column: 26, scope: !5364)
!5383 = !DILocation(line: 368, column: 26, scope: !5364)
!5384 = !DILocation(line: 368, column: 49, scope: !5364)
!5385 = !DILocation(line: 368, column: 10, scope: !5364)
!5386 = !DILocation(line: 368, column: 8, scope: !5364)
!5387 = !DILocation(line: 370, column: 9, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5364, file: !3, line: 370, column: 7)
!5389 = !DILocation(line: 370, column: 8, scope: !5388)
!5390 = !DILocation(line: 370, column: 7, scope: !5364)
!5391 = !DILocation(line: 371, column: 32, scope: !5388)
!5392 = !DILocation(line: 371, column: 52, scope: !5388)
!5393 = !DILocation(line: 371, column: 13, scope: !5388)
!5394 = !DILocation(line: 371, column: 6, scope: !5388)
!5395 = !DILocation(line: 371, column: 11, scope: !5388)
!5396 = !DILocation(line: 371, column: 5, scope: !5388)
!5397 = !DILocation(line: 372, column: 35, scope: !5364)
!5398 = !DILocation(line: 372, column: 34, scope: !5364)
!5399 = !DILocation(line: 372, column: 9, scope: !5364)
!5400 = !DILocation(line: 372, column: 7, scope: !5364)
!5401 = !DILocation(line: 374, column: 11, scope: !5364)
!5402 = !DILocation(line: 374, column: 16, scope: !5364)
!5403 = !DILocation(line: 374, column: 3, scope: !5364)
!5404 = distinct !DISubprogram(name: "new_scev_info_str", scope: !3, file: !3, line: 316, type: !5405, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5405 = !DISubroutineType(types: !5406)
!5406 = !{!2357, !1782, !998}
!5407 = !DILocalVariable(name: "instantiated_below", arg: 1, scope: !5404, file: !3, line: 316, type: !1782)
!5408 = !DILocation(line: 316, column: 32, scope: !5404)
!5409 = !DILocalVariable(name: "var", arg: 2, scope: !5404, file: !3, line: 316, type: !998)
!5410 = !DILocation(line: 316, column: 57, scope: !5404)
!5411 = !DILocalVariable(name: "res", scope: !5404, file: !3, line: 318, type: !2357)
!5412 = !DILocation(line: 318, column: 25, scope: !5404)
!5413 = !DILocation(line: 320, column: 9, scope: !5404)
!5414 = !DILocation(line: 320, column: 7, scope: !5404)
!5415 = !DILocation(line: 321, column: 14, scope: !5404)
!5416 = !DILocation(line: 321, column: 3, scope: !5404)
!5417 = !DILocation(line: 321, column: 8, scope: !5404)
!5418 = !DILocation(line: 321, column: 12, scope: !5404)
!5419 = !DILocation(line: 322, column: 16, scope: !5404)
!5420 = !DILocation(line: 322, column: 3, scope: !5404)
!5421 = !DILocation(line: 322, column: 8, scope: !5404)
!5422 = !DILocation(line: 322, column: 14, scope: !5404)
!5423 = !DILocation(line: 323, column: 29, scope: !5404)
!5424 = !DILocation(line: 323, column: 3, scope: !5404)
!5425 = !DILocation(line: 323, column: 8, scope: !5404)
!5426 = !DILocation(line: 323, column: 27, scope: !5404)
!5427 = !DILocation(line: 325, column: 10, scope: !5404)
!5428 = !DILocation(line: 325, column: 3, scope: !5404)
!5429 = distinct !DISubprogram(name: "interpret_expr", scope: !3, file: !3, line: 1793, type: !5430, scopeLine: 1794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5430 = !DISubroutineType(types: !5431)
!5431 = !{!998, !1545, !1329, !998}
!5432 = !DILocalVariable(name: "loop", arg: 1, scope: !5429, file: !3, line: 1793, type: !1545)
!5433 = !DILocation(line: 1793, column: 30, scope: !5429)
!5434 = !DILocalVariable(name: "at_stmt", arg: 2, scope: !5429, file: !3, line: 1793, type: !1329)
!5435 = !DILocation(line: 1793, column: 43, scope: !5429)
!5436 = !DILocalVariable(name: "expr", arg: 3, scope: !5429, file: !3, line: 1793, type: !998)
!5437 = !DILocation(line: 1793, column: 57, scope: !5429)
!5438 = !DILocalVariable(name: "code", scope: !5429, file: !3, line: 1795, type: !134)
!5439 = !DILocation(line: 1795, column: 18, scope: !5429)
!5440 = !DILocalVariable(name: "type", scope: !5429, file: !3, line: 1796, type: !998)
!5441 = !DILocation(line: 1796, column: 8, scope: !5429)
!5442 = !DILocation(line: 1796, column: 15, scope: !5429)
!5443 = !DILocalVariable(name: "op0", scope: !5429, file: !3, line: 1796, type: !998)
!5444 = !DILocation(line: 1796, column: 33, scope: !5429)
!5445 = !DILocalVariable(name: "op1", scope: !5429, file: !3, line: 1796, type: !998)
!5446 = !DILocation(line: 1796, column: 38, scope: !5429)
!5447 = !DILocation(line: 1798, column: 40, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 1798, column: 7)
!5449 = !DILocation(line: 1798, column: 7, scope: !5448)
!5450 = !DILocation(line: 1798, column: 7, scope: !5429)
!5451 = !DILocation(line: 1799, column: 12, scope: !5448)
!5452 = !DILocation(line: 1799, column: 5, scope: !5448)
!5453 = !DILocation(line: 1801, column: 7, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 1801, column: 7)
!5455 = !DILocation(line: 1801, column: 24, scope: !5454)
!5456 = !DILocation(line: 1801, column: 7, scope: !5429)
!5457 = !DILocation(line: 1802, column: 12, scope: !5454)
!5458 = !DILocation(line: 1802, column: 5, scope: !5454)
!5459 = !DILocation(line: 1804, column: 26, scope: !5429)
!5460 = !DILocation(line: 1804, column: 3, scope: !5429)
!5461 = !DILocation(line: 1806, column: 30, scope: !5429)
!5462 = !DILocation(line: 1806, column: 36, scope: !5429)
!5463 = !DILocation(line: 1806, column: 45, scope: !5429)
!5464 = !DILocation(line: 1807, column: 9, scope: !5429)
!5465 = !DILocation(line: 1807, column: 14, scope: !5429)
!5466 = !DILocation(line: 1807, column: 20, scope: !5429)
!5467 = !DILocation(line: 1806, column: 10, scope: !5429)
!5468 = !DILocation(line: 1806, column: 3, scope: !5429)
!5469 = !DILocation(line: 1808, column: 1, scope: !5429)
!5470 = distinct !DISubprogram(name: "compute_scalar_evolution_in_loop", scope: !3, file: !3, line: 1835, type: !5471, scopeLine: 1838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5471 = !DISubroutineType(types: !5472)
!5472 = !{!998, !1545, !1545, !998}
!5473 = !DILocalVariable(name: "wrto_loop", arg: 1, scope: !5470, file: !3, line: 1835, type: !1545)
!5474 = !DILocation(line: 1835, column: 48, scope: !5470)
!5475 = !DILocalVariable(name: "def_loop", arg: 2, scope: !5470, file: !3, line: 1836, type: !1545)
!5476 = !DILocation(line: 1836, column: 20, scope: !5470)
!5477 = !DILocalVariable(name: "ev", arg: 3, scope: !5470, file: !3, line: 1837, type: !998)
!5478 = !DILocation(line: 1837, column: 12, scope: !5470)
!5479 = !DILocalVariable(name: "res", scope: !5470, file: !3, line: 1839, type: !998)
!5480 = !DILocation(line: 1839, column: 8, scope: !5470)
!5481 = !DILocation(line: 1840, column: 7, scope: !5482)
!5482 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 1840, column: 7)
!5483 = !DILocation(line: 1840, column: 19, scope: !5482)
!5484 = !DILocation(line: 1840, column: 16, scope: !5482)
!5485 = !DILocation(line: 1840, column: 7, scope: !5470)
!5486 = !DILocation(line: 1841, column: 12, scope: !5482)
!5487 = !DILocation(line: 1841, column: 5, scope: !5482)
!5488 = !DILocation(line: 1843, column: 34, scope: !5470)
!5489 = !DILocation(line: 1843, column: 56, scope: !5470)
!5490 = !DILocation(line: 1843, column: 44, scope: !5470)
!5491 = !DILocation(line: 1843, column: 67, scope: !5470)
!5492 = !DILocation(line: 1843, column: 14, scope: !5470)
!5493 = !DILocation(line: 1843, column: 12, scope: !5470)
!5494 = !DILocation(line: 1844, column: 47, scope: !5470)
!5495 = !DILocation(line: 1844, column: 57, scope: !5470)
!5496 = !DILocation(line: 1844, column: 9, scope: !5470)
!5497 = !DILocation(line: 1844, column: 7, scope: !5470)
!5498 = !DILocation(line: 1846, column: 38, scope: !5470)
!5499 = !DILocation(line: 1846, column: 49, scope: !5470)
!5500 = !DILocation(line: 1846, column: 54, scope: !5470)
!5501 = !DILocation(line: 1846, column: 10, scope: !5470)
!5502 = !DILocation(line: 1846, column: 3, scope: !5470)
!5503 = !DILocation(line: 1847, column: 1, scope: !5470)
!5504 = distinct !DISubprogram(name: "interpret_gimple_assign", scope: !3, file: !3, line: 1813, type: !5505, scopeLine: 1814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5505 = !DISubroutineType(types: !5506)
!5506 = !{!998, !1545, !1329}
!5507 = !DILocalVariable(name: "loop", arg: 1, scope: !5504, file: !3, line: 1813, type: !1545)
!5508 = !DILocation(line: 1813, column: 39, scope: !5504)
!5509 = !DILocalVariable(name: "stmt", arg: 2, scope: !5504, file: !3, line: 1813, type: !1329)
!5510 = !DILocation(line: 1813, column: 52, scope: !5504)
!5511 = !DILocalVariable(name: "type", scope: !5504, file: !3, line: 1815, type: !998)
!5512 = !DILocation(line: 1815, column: 8, scope: !5504)
!5513 = !DILocation(line: 1815, column: 15, scope: !5504)
!5514 = !DILocalVariable(name: "code", scope: !5504, file: !3, line: 1816, type: !134)
!5515 = !DILocation(line: 1816, column: 18, scope: !5504)
!5516 = !DILocation(line: 1816, column: 49, scope: !5504)
!5517 = !DILocation(line: 1816, column: 25, scope: !5504)
!5518 = !DILocation(line: 1818, column: 30, scope: !5504)
!5519 = !DILocation(line: 1818, column: 36, scope: !5504)
!5520 = !DILocation(line: 1818, column: 42, scope: !5504)
!5521 = !DILocation(line: 1819, column: 29, scope: !5504)
!5522 = !DILocation(line: 1819, column: 9, scope: !5504)
!5523 = !DILocation(line: 1819, column: 36, scope: !5504)
!5524 = !DILocation(line: 1820, column: 29, scope: !5504)
!5525 = !DILocation(line: 1820, column: 9, scope: !5504)
!5526 = !DILocation(line: 1818, column: 10, scope: !5504)
!5527 = !DILocation(line: 1818, column: 3, scope: !5504)
!5528 = distinct !DISubprogram(name: "loop_phi_node_p", scope: !3, file: !3, line: 425, type: !5529, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5529 = !DISubroutineType(types: !5530)
!5530 = !{!1118, !1329}
!5531 = !DILocalVariable(name: "phi", arg: 1, scope: !5528, file: !3, line: 425, type: !1329)
!5532 = !DILocation(line: 425, column: 25, scope: !5528)
!5533 = !DILocation(line: 431, column: 32, scope: !5528)
!5534 = !DILocation(line: 431, column: 10, scope: !5528)
!5535 = !DILocation(line: 431, column: 38, scope: !5528)
!5536 = !DILocation(line: 431, column: 59, scope: !5528)
!5537 = !DILocation(line: 431, column: 48, scope: !5528)
!5538 = !DILocation(line: 431, column: 45, scope: !5528)
!5539 = !DILocation(line: 431, column: 3, scope: !5528)
!5540 = distinct !DISubprogram(name: "interpret_loop_phi", scope: !3, file: !3, line: 1621, type: !5505, scopeLine: 1622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5541 = !DILocalVariable(name: "loop", arg: 1, scope: !5540, file: !3, line: 1621, type: !1545)
!5542 = !DILocation(line: 1621, column: 34, scope: !5540)
!5543 = !DILocalVariable(name: "loop_phi_node", arg: 2, scope: !5540, file: !3, line: 1621, type: !1329)
!5544 = !DILocation(line: 1621, column: 47, scope: !5540)
!5545 = !DILocalVariable(name: "res", scope: !5540, file: !3, line: 1623, type: !998)
!5546 = !DILocation(line: 1623, column: 8, scope: !5540)
!5547 = !DILocalVariable(name: "phi_loop", scope: !5540, file: !3, line: 1624, type: !1545)
!5548 = !DILocation(line: 1624, column: 16, scope: !5540)
!5549 = !DILocation(line: 1624, column: 49, scope: !5540)
!5550 = !DILocation(line: 1624, column: 27, scope: !5540)
!5551 = !DILocalVariable(name: "init_cond", scope: !5540, file: !3, line: 1625, type: !998)
!5552 = !DILocation(line: 1625, column: 8, scope: !5540)
!5553 = !DILocation(line: 1627, column: 7, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5540, file: !3, line: 1627, column: 7)
!5555 = !DILocation(line: 1627, column: 19, scope: !5554)
!5556 = !DILocation(line: 1627, column: 16, scope: !5554)
!5557 = !DILocation(line: 1627, column: 7, scope: !5540)
!5558 = !DILocalVariable(name: "subloop", scope: !5559, file: !3, line: 1629, type: !1545)
!5559 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 1628, column: 5)
!5560 = !DILocation(line: 1629, column: 20, scope: !5559)
!5561 = !DILocalVariable(name: "evolution_fn", scope: !5559, file: !3, line: 1630, type: !998)
!5562 = !DILocation(line: 1630, column: 12, scope: !5559)
!5563 = !DILocation(line: 1631, column: 3, scope: !5559)
!5564 = !DILocation(line: 1631, column: 13, scope: !5559)
!5565 = !DILocation(line: 1630, column: 27, scope: !5559)
!5566 = !DILocation(line: 1634, column: 37, scope: !5559)
!5567 = !DILocation(line: 1634, column: 59, scope: !5559)
!5568 = !DILocation(line: 1634, column: 47, scope: !5559)
!5569 = !DILocation(line: 1634, column: 65, scope: !5559)
!5570 = !DILocation(line: 1634, column: 17, scope: !5559)
!5571 = !DILocation(line: 1634, column: 15, scope: !5559)
!5572 = !DILocation(line: 1637, column: 51, scope: !5559)
!5573 = !DILocation(line: 1637, column: 60, scope: !5559)
!5574 = !DILocation(line: 1637, column: 13, scope: !5559)
!5575 = !DILocation(line: 1637, column: 11, scope: !5559)
!5576 = !DILocation(line: 1638, column: 14, scope: !5559)
!5577 = !DILocation(line: 1638, column: 7, scope: !5559)
!5578 = !DILocation(line: 1642, column: 42, scope: !5540)
!5579 = !DILocation(line: 1642, column: 15, scope: !5540)
!5580 = !DILocation(line: 1642, column: 13, scope: !5540)
!5581 = !DILocation(line: 1643, column: 36, scope: !5540)
!5582 = !DILocation(line: 1643, column: 51, scope: !5540)
!5583 = !DILocation(line: 1643, column: 9, scope: !5540)
!5584 = !DILocation(line: 1643, column: 7, scope: !5540)
!5585 = !DILocation(line: 1647, column: 7, scope: !5586)
!5586 = distinct !DILexicalBlock(scope: !5540, file: !3, line: 1647, column: 7)
!5587 = !DILocation(line: 1647, column: 14, scope: !5586)
!5588 = !DILocation(line: 1647, column: 11, scope: !5586)
!5589 = !DILocation(line: 1647, column: 7, scope: !5540)
!5590 = !DILocalVariable(name: "new_init", scope: !5591, file: !3, line: 1649, type: !998)
!5591 = distinct !DILexicalBlock(scope: !5586, file: !3, line: 1648, column: 5)
!5592 = !DILocation(line: 1649, column: 12, scope: !5591)
!5593 = !DILocation(line: 1649, column: 23, scope: !5591)
!5594 = !DILocation(line: 1650, column: 11, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 1650, column: 11)
!5596 = !DILocation(line: 1651, column: 4, scope: !5595)
!5597 = !DILocation(line: 1651, column: 7, scope: !5595)
!5598 = !DILocation(line: 1651, column: 41, scope: !5595)
!5599 = !DILocation(line: 1650, column: 11, scope: !5591)
!5600 = !DILocation(line: 1652, column: 13, scope: !5595)
!5601 = !DILocation(line: 1652, column: 11, scope: !5595)
!5602 = !DILocation(line: 1652, column: 2, scope: !5595)
!5603 = !DILocation(line: 1654, column: 16, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1654, column: 16)
!5605 = !DILocation(line: 1654, column: 32, scope: !5604)
!5606 = !DILocation(line: 1654, column: 16, scope: !5595)
!5607 = !DILocation(line: 1655, column: 13, scope: !5604)
!5608 = !DILocation(line: 1655, column: 11, scope: !5604)
!5609 = !DILocation(line: 1655, column: 2, scope: !5604)
!5610 = !DILocation(line: 1656, column: 7, scope: !5591)
!5611 = !DILocation(line: 1657, column: 7, scope: !5591)
!5612 = !DILocation(line: 1658, column: 29, scope: !5613)
!5613 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 1658, column: 11)
!5614 = !DILocation(line: 1658, column: 40, scope: !5613)
!5615 = !DILocation(line: 1658, column: 12, scope: !5613)
!5616 = !DILocation(line: 1658, column: 11, scope: !5591)
!5617 = !DILocation(line: 1659, column: 9, scope: !5613)
!5618 = !DILocation(line: 1659, column: 2, scope: !5613)
!5619 = !DILocation(line: 1660, column: 5, scope: !5591)
!5620 = !DILocation(line: 1662, column: 10, scope: !5540)
!5621 = !DILocation(line: 1662, column: 3, scope: !5540)
!5622 = !DILocation(line: 1663, column: 1, scope: !5540)
!5623 = distinct !DISubprogram(name: "interpret_condition_phi", scope: !3, file: !3, line: 1670, type: !5505, scopeLine: 1671, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5624 = !DILocalVariable(name: "loop", arg: 1, scope: !5623, file: !3, line: 1670, type: !1545)
!5625 = !DILocation(line: 1670, column: 39, scope: !5623)
!5626 = !DILocalVariable(name: "condition_phi", arg: 2, scope: !5623, file: !3, line: 1670, type: !1329)
!5627 = !DILocation(line: 1670, column: 52, scope: !5623)
!5628 = !DILocalVariable(name: "i", scope: !5623, file: !3, line: 1672, type: !1095)
!5629 = !DILocation(line: 1672, column: 7, scope: !5623)
!5630 = !DILocalVariable(name: "n", scope: !5623, file: !3, line: 1672, type: !1095)
!5631 = !DILocation(line: 1672, column: 10, scope: !5623)
!5632 = !DILocation(line: 1672, column: 35, scope: !5623)
!5633 = !DILocation(line: 1672, column: 14, scope: !5623)
!5634 = !DILocalVariable(name: "res", scope: !5623, file: !3, line: 1673, type: !998)
!5635 = !DILocation(line: 1673, column: 8, scope: !5623)
!5636 = !DILocation(line: 1673, column: 14, scope: !5623)
!5637 = !DILocation(line: 1675, column: 10, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5623, file: !3, line: 1675, column: 3)
!5639 = !DILocation(line: 1675, column: 8, scope: !5638)
!5640 = !DILocation(line: 1675, column: 15, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 1675, column: 3)
!5642 = !DILocation(line: 1675, column: 19, scope: !5641)
!5643 = !DILocation(line: 1675, column: 17, scope: !5641)
!5644 = !DILocation(line: 1675, column: 3, scope: !5638)
!5645 = !DILocalVariable(name: "branch_chrec", scope: !5646, file: !3, line: 1677, type: !998)
!5646 = distinct !DILexicalBlock(scope: !5641, file: !3, line: 1676, column: 5)
!5647 = !DILocation(line: 1677, column: 12, scope: !5646)
!5648 = !DILocation(line: 1679, column: 31, scope: !5649)
!5649 = distinct !DILexicalBlock(scope: !5646, file: !3, line: 1679, column: 11)
!5650 = !DILocation(line: 1679, column: 46, scope: !5649)
!5651 = !DILocation(line: 1679, column: 11, scope: !5649)
!5652 = !DILocation(line: 1679, column: 11, scope: !5646)
!5653 = !DILocation(line: 1681, column: 10, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 1680, column: 2)
!5655 = !DILocation(line: 1681, column: 8, scope: !5654)
!5656 = !DILocation(line: 1682, column: 4, scope: !5654)
!5657 = !DILocation(line: 1686, column: 3, scope: !5646)
!5658 = !DILocation(line: 1686, column: 9, scope: !5646)
!5659 = !DILocation(line: 1685, column: 22, scope: !5646)
!5660 = !DILocation(line: 1685, column: 20, scope: !5646)
!5661 = !DILocation(line: 1688, column: 26, scope: !5646)
!5662 = !DILocation(line: 1688, column: 31, scope: !5646)
!5663 = !DILocation(line: 1688, column: 13, scope: !5646)
!5664 = !DILocation(line: 1688, column: 11, scope: !5646)
!5665 = !DILocation(line: 1689, column: 5, scope: !5646)
!5666 = !DILocation(line: 1675, column: 23, scope: !5641)
!5667 = !DILocation(line: 1675, column: 3, scope: !5641)
!5668 = distinct !{!5668, !5644, !5669}
!5669 = !DILocation(line: 1689, column: 5, scope: !5638)
!5670 = !DILocation(line: 1691, column: 10, scope: !5623)
!5671 = !DILocation(line: 1691, column: 3, scope: !5623)
!5672 = distinct !DISubprogram(name: "set_scalar_evolution", scope: !3, file: !3, line: 577, type: !5673, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5673 = !DISubroutineType(types: !5674)
!5674 = !{null, !1782, !998, !998}
!5675 = !DILocalVariable(name: "instantiated_below", arg: 1, scope: !5672, file: !3, line: 577, type: !1782)
!5676 = !DILocation(line: 577, column: 35, scope: !5672)
!5677 = !DILocalVariable(name: "scalar", arg: 2, scope: !5672, file: !3, line: 577, type: !998)
!5678 = !DILocation(line: 577, column: 60, scope: !5672)
!5679 = !DILocalVariable(name: "chrec", arg: 3, scope: !5672, file: !3, line: 577, type: !998)
!5680 = !DILocation(line: 577, column: 73, scope: !5672)
!5681 = !DILocalVariable(name: "scalar_info", scope: !5672, file: !3, line: 579, type: !1364)
!5682 = !DILocation(line: 579, column: 9, scope: !5672)
!5683 = !DILocation(line: 581, column: 7, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 581, column: 7)
!5685 = !DILocation(line: 581, column: 26, scope: !5684)
!5686 = !DILocation(line: 581, column: 7, scope: !5672)
!5687 = !DILocation(line: 582, column: 5, scope: !5684)
!5688 = !DILocation(line: 584, column: 37, scope: !5672)
!5689 = !DILocation(line: 584, column: 57, scope: !5672)
!5690 = !DILocation(line: 584, column: 17, scope: !5672)
!5691 = !DILocation(line: 584, column: 15, scope: !5672)
!5692 = !DILocation(line: 586, column: 7, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 586, column: 7)
!5694 = !DILocation(line: 586, column: 7, scope: !5672)
!5695 = !DILocation(line: 588, column: 11, scope: !5696)
!5696 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 588, column: 11)
!5697 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 587, column: 5)
!5698 = !DILocation(line: 588, column: 22, scope: !5696)
!5699 = !DILocation(line: 588, column: 11, scope: !5697)
!5700 = !DILocation(line: 590, column: 13, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5696, file: !3, line: 589, column: 2)
!5702 = !DILocation(line: 590, column: 4, scope: !5701)
!5703 = !DILocation(line: 591, column: 13, scope: !5701)
!5704 = !DILocation(line: 592, column: 6, scope: !5701)
!5705 = !DILocation(line: 592, column: 26, scope: !5701)
!5706 = !DILocation(line: 591, column: 4, scope: !5701)
!5707 = !DILocation(line: 593, column: 13, scope: !5701)
!5708 = !DILocation(line: 593, column: 4, scope: !5701)
!5709 = !DILocation(line: 594, column: 24, scope: !5701)
!5710 = !DILocation(line: 594, column: 35, scope: !5701)
!5711 = !DILocation(line: 594, column: 4, scope: !5701)
!5712 = !DILocation(line: 595, column: 13, scope: !5701)
!5713 = !DILocation(line: 595, column: 4, scope: !5701)
!5714 = !DILocation(line: 596, column: 24, scope: !5701)
!5715 = !DILocation(line: 596, column: 35, scope: !5701)
!5716 = !DILocation(line: 596, column: 4, scope: !5701)
!5717 = !DILocation(line: 597, column: 13, scope: !5701)
!5718 = !DILocation(line: 597, column: 4, scope: !5701)
!5719 = !DILocation(line: 598, column: 2, scope: !5701)
!5720 = !DILocation(line: 599, column: 11, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 599, column: 11)
!5722 = !DILocation(line: 599, column: 22, scope: !5721)
!5723 = !DILocation(line: 599, column: 11, scope: !5697)
!5724 = !DILocation(line: 600, column: 13, scope: !5721)
!5725 = !DILocation(line: 600, column: 2, scope: !5721)
!5726 = !DILocation(line: 601, column: 5, scope: !5697)
!5727 = !DILocation(line: 603, column: 18, scope: !5672)
!5728 = !DILocation(line: 603, column: 4, scope: !5672)
!5729 = !DILocation(line: 603, column: 16, scope: !5672)
!5730 = !DILocation(line: 604, column: 1, scope: !5672)
!5731 = distinct !DISubprogram(name: "interpret_rhs_expr", scope: !3, file: !3, line: 1702, type: !5732, scopeLine: 1704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5732 = !DISubroutineType(types: !5733)
!5733 = !{!998, !1545, !1329, !998, !998, !134, !998}
!5734 = !DILocalVariable(name: "loop", arg: 1, scope: !5731, file: !3, line: 1702, type: !1545)
!5735 = !DILocation(line: 1702, column: 34, scope: !5731)
!5736 = !DILocalVariable(name: "at_stmt", arg: 2, scope: !5731, file: !3, line: 1702, type: !1329)
!5737 = !DILocation(line: 1702, column: 47, scope: !5731)
!5738 = !DILocalVariable(name: "type", arg: 3, scope: !5731, file: !3, line: 1703, type: !998)
!5739 = !DILocation(line: 1703, column: 12, scope: !5731)
!5740 = !DILocalVariable(name: "rhs1", arg: 4, scope: !5731, file: !3, line: 1703, type: !998)
!5741 = !DILocation(line: 1703, column: 23, scope: !5731)
!5742 = !DILocalVariable(name: "code", arg: 5, scope: !5731, file: !3, line: 1703, type: !134)
!5743 = !DILocation(line: 1703, column: 44, scope: !5731)
!5744 = !DILocalVariable(name: "rhs2", arg: 6, scope: !5731, file: !3, line: 1703, type: !998)
!5745 = !DILocation(line: 1703, column: 55, scope: !5731)
!5746 = !DILocalVariable(name: "res", scope: !5731, file: !3, line: 1705, type: !998)
!5747 = !DILocation(line: 1705, column: 8, scope: !5731)
!5748 = !DILocalVariable(name: "chrec1", scope: !5731, file: !3, line: 1705, type: !998)
!5749 = !DILocation(line: 1705, column: 13, scope: !5731)
!5750 = !DILocalVariable(name: "chrec2", scope: !5731, file: !3, line: 1705, type: !998)
!5751 = !DILocation(line: 1705, column: 21, scope: !5731)
!5752 = !DILocation(line: 1707, column: 29, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5731, file: !3, line: 1707, column: 7)
!5754 = !DILocation(line: 1707, column: 7, scope: !5753)
!5755 = !DILocation(line: 1707, column: 35, scope: !5753)
!5756 = !DILocation(line: 1707, column: 7, scope: !5731)
!5757 = !DILocation(line: 1709, column: 36, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 1709, column: 11)
!5759 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 1708, column: 5)
!5760 = !DILocation(line: 1709, column: 11, scope: !5758)
!5761 = !DILocation(line: 1709, column: 11, scope: !5759)
!5762 = !DILocation(line: 1710, column: 24, scope: !5758)
!5763 = !DILocation(line: 1710, column: 30, scope: !5758)
!5764 = !DILocation(line: 1710, column: 36, scope: !5758)
!5765 = !DILocation(line: 1710, column: 9, scope: !5758)
!5766 = !DILocation(line: 1710, column: 2, scope: !5758)
!5767 = !DILocation(line: 1712, column: 11, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 1712, column: 11)
!5769 = !DILocation(line: 1712, column: 16, scope: !5768)
!5770 = !DILocation(line: 1712, column: 11, scope: !5759)
!5771 = !DILocation(line: 1713, column: 24, scope: !5768)
!5772 = !DILocation(line: 1713, column: 56, scope: !5768)
!5773 = !DILocation(line: 1713, column: 62, scope: !5768)
!5774 = !DILocation(line: 1713, column: 30, scope: !5768)
!5775 = !DILocation(line: 1714, column: 10, scope: !5768)
!5776 = !DILocation(line: 1713, column: 9, scope: !5768)
!5777 = !DILocation(line: 1713, column: 2, scope: !5768)
!5778 = !DILocation(line: 1716, column: 11, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 1716, column: 11)
!5780 = !DILocation(line: 1716, column: 16, scope: !5779)
!5781 = !DILocation(line: 1716, column: 11, scope: !5759)
!5782 = !DILocation(line: 1718, column: 11, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1717, column: 2)
!5784 = !DILocation(line: 1718, column: 9, scope: !5783)
!5785 = !DILocation(line: 1719, column: 26, scope: !5783)
!5786 = !DILocation(line: 1719, column: 58, scope: !5783)
!5787 = !DILocation(line: 1719, column: 64, scope: !5783)
!5788 = !DILocation(line: 1719, column: 32, scope: !5783)
!5789 = !DILocation(line: 1720, column: 5, scope: !5783)
!5790 = !DILocation(line: 1719, column: 11, scope: !5783)
!5791 = !DILocation(line: 1719, column: 4, scope: !5783)
!5792 = !DILocation(line: 1723, column: 14, scope: !5759)
!5793 = !DILocation(line: 1723, column: 7, scope: !5759)
!5794 = !DILocation(line: 1726, column: 11, scope: !5731)
!5795 = !DILocation(line: 1726, column: 3, scope: !5731)
!5796 = !DILocation(line: 1729, column: 42, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5731, file: !3, line: 1727, column: 5)
!5798 = !DILocation(line: 1729, column: 48, scope: !5797)
!5799 = !DILocation(line: 1729, column: 16, scope: !5797)
!5800 = !DILocation(line: 1729, column: 14, scope: !5797)
!5801 = !DILocation(line: 1730, column: 42, scope: !5797)
!5802 = !DILocation(line: 1730, column: 48, scope: !5797)
!5803 = !DILocation(line: 1730, column: 16, scope: !5797)
!5804 = !DILocation(line: 1730, column: 14, scope: !5797)
!5805 = !DILocation(line: 1731, column: 31, scope: !5797)
!5806 = !DILocation(line: 1731, column: 37, scope: !5797)
!5807 = !DILocation(line: 1731, column: 45, scope: !5797)
!5808 = !DILocation(line: 1731, column: 16, scope: !5797)
!5809 = !DILocation(line: 1731, column: 14, scope: !5797)
!5810 = !DILocation(line: 1732, column: 31, scope: !5797)
!5811 = !DILocation(line: 1732, column: 41, scope: !5797)
!5812 = !DILocation(line: 1732, column: 49, scope: !5797)
!5813 = !DILocation(line: 1732, column: 16, scope: !5797)
!5814 = !DILocation(line: 1732, column: 14, scope: !5797)
!5815 = !DILocation(line: 1733, column: 30, scope: !5797)
!5816 = !DILocation(line: 1733, column: 36, scope: !5797)
!5817 = !DILocation(line: 1733, column: 44, scope: !5797)
!5818 = !DILocation(line: 1733, column: 13, scope: !5797)
!5819 = !DILocation(line: 1733, column: 11, scope: !5797)
!5820 = !DILocation(line: 1734, column: 7, scope: !5797)
!5821 = !DILocation(line: 1737, column: 42, scope: !5797)
!5822 = !DILocation(line: 1737, column: 48, scope: !5797)
!5823 = !DILocation(line: 1737, column: 16, scope: !5797)
!5824 = !DILocation(line: 1737, column: 14, scope: !5797)
!5825 = !DILocation(line: 1738, column: 42, scope: !5797)
!5826 = !DILocation(line: 1738, column: 48, scope: !5797)
!5827 = !DILocation(line: 1738, column: 16, scope: !5797)
!5828 = !DILocation(line: 1738, column: 14, scope: !5797)
!5829 = !DILocation(line: 1739, column: 31, scope: !5797)
!5830 = !DILocation(line: 1739, column: 37, scope: !5797)
!5831 = !DILocation(line: 1739, column: 45, scope: !5797)
!5832 = !DILocation(line: 1739, column: 16, scope: !5797)
!5833 = !DILocation(line: 1739, column: 14, scope: !5797)
!5834 = !DILocation(line: 1740, column: 31, scope: !5797)
!5835 = !DILocation(line: 1740, column: 37, scope: !5797)
!5836 = !DILocation(line: 1740, column: 45, scope: !5797)
!5837 = !DILocation(line: 1740, column: 16, scope: !5797)
!5838 = !DILocation(line: 1740, column: 14, scope: !5797)
!5839 = !DILocation(line: 1741, column: 30, scope: !5797)
!5840 = !DILocation(line: 1741, column: 36, scope: !5797)
!5841 = !DILocation(line: 1741, column: 44, scope: !5797)
!5842 = !DILocation(line: 1741, column: 13, scope: !5797)
!5843 = !DILocation(line: 1741, column: 11, scope: !5797)
!5844 = !DILocation(line: 1742, column: 7, scope: !5797)
!5845 = !DILocation(line: 1745, column: 42, scope: !5797)
!5846 = !DILocation(line: 1745, column: 48, scope: !5797)
!5847 = !DILocation(line: 1745, column: 16, scope: !5797)
!5848 = !DILocation(line: 1745, column: 14, scope: !5797)
!5849 = !DILocation(line: 1746, column: 42, scope: !5797)
!5850 = !DILocation(line: 1746, column: 48, scope: !5797)
!5851 = !DILocation(line: 1746, column: 16, scope: !5797)
!5852 = !DILocation(line: 1746, column: 14, scope: !5797)
!5853 = !DILocation(line: 1747, column: 31, scope: !5797)
!5854 = !DILocation(line: 1747, column: 37, scope: !5797)
!5855 = !DILocation(line: 1747, column: 45, scope: !5797)
!5856 = !DILocation(line: 1747, column: 16, scope: !5797)
!5857 = !DILocation(line: 1747, column: 14, scope: !5797)
!5858 = !DILocation(line: 1748, column: 31, scope: !5797)
!5859 = !DILocation(line: 1748, column: 37, scope: !5797)
!5860 = !DILocation(line: 1748, column: 45, scope: !5797)
!5861 = !DILocation(line: 1748, column: 16, scope: !5797)
!5862 = !DILocation(line: 1748, column: 14, scope: !5797)
!5863 = !DILocation(line: 1749, column: 31, scope: !5797)
!5864 = !DILocation(line: 1749, column: 37, scope: !5797)
!5865 = !DILocation(line: 1749, column: 45, scope: !5797)
!5866 = !DILocation(line: 1749, column: 13, scope: !5797)
!5867 = !DILocation(line: 1749, column: 11, scope: !5797)
!5868 = !DILocation(line: 1750, column: 7, scope: !5797)
!5869 = !DILocation(line: 1753, column: 42, scope: !5797)
!5870 = !DILocation(line: 1753, column: 48, scope: !5797)
!5871 = !DILocation(line: 1753, column: 16, scope: !5797)
!5872 = !DILocation(line: 1753, column: 14, scope: !5797)
!5873 = !DILocation(line: 1754, column: 31, scope: !5797)
!5874 = !DILocation(line: 1754, column: 37, scope: !5797)
!5875 = !DILocation(line: 1754, column: 45, scope: !5797)
!5876 = !DILocation(line: 1754, column: 16, scope: !5797)
!5877 = !DILocation(line: 1754, column: 14, scope: !5797)
!5878 = !DILocation(line: 1756, column: 34, scope: !5797)
!5879 = !DILocation(line: 1756, column: 40, scope: !5797)
!5880 = !DILocation(line: 1757, column: 6, scope: !5797)
!5881 = !DILocation(line: 1756, column: 13, scope: !5797)
!5882 = !DILocation(line: 1756, column: 11, scope: !5797)
!5883 = !DILocation(line: 1758, column: 7, scope: !5797)
!5884 = !DILocation(line: 1762, column: 42, scope: !5797)
!5885 = !DILocation(line: 1762, column: 48, scope: !5797)
!5886 = !DILocation(line: 1762, column: 16, scope: !5797)
!5887 = !DILocation(line: 1762, column: 14, scope: !5797)
!5888 = !DILocation(line: 1763, column: 31, scope: !5797)
!5889 = !DILocation(line: 1763, column: 37, scope: !5797)
!5890 = !DILocation(line: 1763, column: 45, scope: !5797)
!5891 = !DILocation(line: 1763, column: 16, scope: !5797)
!5892 = !DILocation(line: 1763, column: 14, scope: !5797)
!5893 = !DILocation(line: 1764, column: 31, scope: !5797)
!5894 = !DILocation(line: 1765, column: 10, scope: !5797)
!5895 = !DILocation(line: 1766, column: 10, scope: !5797)
!5896 = !DILocation(line: 1764, column: 13, scope: !5797)
!5897 = !DILocation(line: 1764, column: 11, scope: !5797)
!5898 = !DILocation(line: 1767, column: 7, scope: !5797)
!5899 = !DILocation(line: 1770, column: 42, scope: !5797)
!5900 = !DILocation(line: 1770, column: 48, scope: !5797)
!5901 = !DILocation(line: 1770, column: 16, scope: !5797)
!5902 = !DILocation(line: 1770, column: 14, scope: !5797)
!5903 = !DILocation(line: 1771, column: 42, scope: !5797)
!5904 = !DILocation(line: 1771, column: 48, scope: !5797)
!5905 = !DILocation(line: 1771, column: 16, scope: !5797)
!5906 = !DILocation(line: 1771, column: 14, scope: !5797)
!5907 = !DILocation(line: 1772, column: 31, scope: !5797)
!5908 = !DILocation(line: 1772, column: 37, scope: !5797)
!5909 = !DILocation(line: 1772, column: 45, scope: !5797)
!5910 = !DILocation(line: 1772, column: 16, scope: !5797)
!5911 = !DILocation(line: 1772, column: 14, scope: !5797)
!5912 = !DILocation(line: 1773, column: 31, scope: !5797)
!5913 = !DILocation(line: 1773, column: 37, scope: !5797)
!5914 = !DILocation(line: 1773, column: 45, scope: !5797)
!5915 = !DILocation(line: 1773, column: 16, scope: !5797)
!5916 = !DILocation(line: 1773, column: 14, scope: !5797)
!5917 = !DILocation(line: 1774, column: 34, scope: !5797)
!5918 = !DILocation(line: 1774, column: 40, scope: !5797)
!5919 = !DILocation(line: 1774, column: 48, scope: !5797)
!5920 = !DILocation(line: 1774, column: 13, scope: !5797)
!5921 = !DILocation(line: 1774, column: 11, scope: !5797)
!5922 = !DILocation(line: 1775, column: 7, scope: !5797)
!5923 = !DILocation(line: 1778, column: 42, scope: !5797)
!5924 = !DILocation(line: 1778, column: 48, scope: !5797)
!5925 = !DILocation(line: 1778, column: 16, scope: !5797)
!5926 = !DILocation(line: 1778, column: 14, scope: !5797)
!5927 = !DILocation(line: 1779, column: 28, scope: !5797)
!5928 = !DILocation(line: 1779, column: 34, scope: !5797)
!5929 = !DILocation(line: 1779, column: 42, scope: !5797)
!5930 = !DILocation(line: 1779, column: 13, scope: !5797)
!5931 = !DILocation(line: 1779, column: 11, scope: !5797)
!5932 = !DILocation(line: 1780, column: 7, scope: !5797)
!5933 = !DILocation(line: 1783, column: 13, scope: !5797)
!5934 = !DILocation(line: 1783, column: 11, scope: !5797)
!5935 = !DILocation(line: 1784, column: 7, scope: !5797)
!5936 = !DILocation(line: 1787, column: 10, scope: !5731)
!5937 = !DILocation(line: 1787, column: 3, scope: !5731)
!5938 = !DILocation(line: 1788, column: 1, scope: !5731)
!5939 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !391, file: !391, line: 1686, type: !5940, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5940 = !DISubroutineType(types: !5941)
!5941 = !{!678, !134}
!5942 = !DILocalVariable(name: "code", arg: 1, scope: !5939, file: !391, line: 1686, type: !134)
!5943 = !DILocation(line: 1686, column: 38, scope: !5939)
!5944 = !DILocation(line: 1688, column: 63, scope: !5939)
!5945 = !DILocation(line: 1688, column: 34, scope: !5939)
!5946 = !DILocation(line: 1688, column: 10, scope: !5939)
!5947 = !DILocation(line: 1688, column: 3, scope: !5939)
!5948 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !391, file: !391, line: 1694, type: !5949, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5949 = !DISubroutineType(types: !5950)
!5950 = !{!998, !2953}
!5951 = !DILocalVariable(name: "gs", arg: 1, scope: !5948, file: !391, line: 1694, type: !2953)
!5952 = !DILocation(line: 1694, column: 33, scope: !5948)
!5953 = !DILocation(line: 1697, column: 21, scope: !5948)
!5954 = !DILocation(line: 1697, column: 10, scope: !5948)
!5955 = !DILocation(line: 1697, column: 3, scope: !5948)
!5956 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !391, file: !391, line: 1815, type: !5957, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5957 = !DISubroutineType(types: !5958)
!5958 = !{!134, !2953}
!5959 = !DILocalVariable(name: "gs", arg: 1, scope: !5956, file: !391, line: 1815, type: !2953)
!5960 = !DILocation(line: 1815, column: 38, scope: !5956)
!5961 = !DILocalVariable(name: "code", scope: !5956, file: !391, line: 1817, type: !134)
!5962 = !DILocation(line: 1817, column: 18, scope: !5956)
!5963 = !DILocation(line: 1820, column: 28, scope: !5956)
!5964 = !DILocation(line: 1820, column: 10, scope: !5956)
!5965 = !DILocation(line: 1820, column: 8, scope: !5956)
!5966 = !DILocation(line: 1821, column: 29, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5956, file: !391, line: 1821, column: 7)
!5968 = !DILocation(line: 1821, column: 7, scope: !5967)
!5969 = !DILocation(line: 1821, column: 35, scope: !5967)
!5970 = !DILocation(line: 1821, column: 7, scope: !5956)
!5971 = !DILocation(line: 1822, column: 12, scope: !5967)
!5972 = !DILocation(line: 1822, column: 10, scope: !5967)
!5973 = !DILocation(line: 1822, column: 5, scope: !5967)
!5974 = !DILocation(line: 1824, column: 10, scope: !5956)
!5975 = !DILocation(line: 1824, column: 3, scope: !5956)
!5976 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !391, file: !391, line: 1727, type: !5949, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5977 = !DILocalVariable(name: "gs", arg: 1, scope: !5976, file: !391, line: 1727, type: !2953)
!5978 = !DILocation(line: 1727, column: 34, scope: !5976)
!5979 = !DILocation(line: 1730, column: 21, scope: !5976)
!5980 = !DILocation(line: 1730, column: 10, scope: !5976)
!5981 = !DILocation(line: 1730, column: 3, scope: !5976)
!5982 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !391, file: !391, line: 1759, type: !5949, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5983 = !DILocalVariable(name: "gs", arg: 1, scope: !5982, file: !391, line: 1759, type: !2953)
!5984 = !DILocation(line: 1759, column: 34, scope: !5982)
!5985 = !DILocation(line: 1763, column: 23, scope: !5986)
!5986 = distinct !DILexicalBlock(scope: !5982, file: !391, line: 1763, column: 7)
!5987 = !DILocation(line: 1763, column: 7, scope: !5986)
!5988 = !DILocation(line: 1763, column: 27, scope: !5986)
!5989 = !DILocation(line: 1763, column: 7, scope: !5982)
!5990 = !DILocation(line: 1764, column: 23, scope: !5986)
!5991 = !DILocation(line: 1764, column: 12, scope: !5986)
!5992 = !DILocation(line: 1764, column: 5, scope: !5986)
!5993 = !DILocation(line: 1766, column: 5, scope: !5986)
!5994 = !DILocation(line: 1767, column: 1, scope: !5982)
!5995 = distinct !DISubprogram(name: "gimple_op", scope: !391, file: !391, line: 1631, type: !5996, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!5996 = !DISubroutineType(types: !5997)
!5997 = !{!998, !2953, !7}
!5998 = !DILocalVariable(name: "gs", arg: 1, scope: !5995, file: !391, line: 1631, type: !2953)
!5999 = !DILocation(line: 1631, column: 25, scope: !5995)
!6000 = !DILocalVariable(name: "i", arg: 2, scope: !5995, file: !391, line: 1631, type: !7)
!6001 = !DILocation(line: 1631, column: 38, scope: !5995)
!6002 = !DILocation(line: 1633, column: 23, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5995, file: !391, line: 1633, column: 7)
!6004 = !DILocation(line: 1633, column: 7, scope: !6003)
!6005 = !DILocation(line: 1633, column: 7, scope: !5995)
!6006 = !DILocation(line: 1638, column: 26, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !6003, file: !391, line: 1634, column: 5)
!6008 = !DILocation(line: 1638, column: 14, scope: !6007)
!6009 = !DILocation(line: 1638, column: 50, scope: !6007)
!6010 = !DILocation(line: 1638, column: 7, scope: !6007)
!6011 = !DILocation(line: 1641, column: 5, scope: !6003)
!6012 = !DILocation(line: 1642, column: 1, scope: !5995)
!6013 = distinct !DISubprogram(name: "gimple_has_ops", scope: !391, file: !391, line: 1274, type: !6014, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6014 = !DISubroutineType(types: !6015)
!6015 = !{!1118, !2953}
!6016 = !DILocalVariable(name: "g", arg: 1, scope: !6013, file: !391, line: 1274, type: !2953)
!6017 = !DILocation(line: 1274, column: 30, scope: !6013)
!6018 = !DILocation(line: 1276, column: 23, scope: !6013)
!6019 = !DILocation(line: 1276, column: 10, scope: !6013)
!6020 = !DILocation(line: 1276, column: 26, scope: !6013)
!6021 = !DILocation(line: 1276, column: 41, scope: !6013)
!6022 = !DILocation(line: 1276, column: 57, scope: !6013)
!6023 = !DILocation(line: 1276, column: 44, scope: !6013)
!6024 = !DILocation(line: 1276, column: 60, scope: !6013)
!6025 = !DILocation(line: 0, scope: !6013)
!6026 = !DILocation(line: 1276, column: 3, scope: !6013)
!6027 = distinct !DISubprogram(name: "gimple_ops", scope: !391, file: !391, line: 1614, type: !4762, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6028 = !DILocalVariable(name: "gs", arg: 1, scope: !6027, file: !391, line: 1614, type: !1329)
!6029 = !DILocation(line: 1614, column: 20, scope: !6027)
!6030 = !DILocalVariable(name: "off", scope: !6027, file: !391, line: 1616, type: !1475)
!6031 = !DILocation(line: 1616, column: 10, scope: !6027)
!6032 = !DILocation(line: 1621, column: 56, scope: !6027)
!6033 = !DILocation(line: 1621, column: 28, scope: !6027)
!6034 = !DILocation(line: 1621, column: 9, scope: !6027)
!6035 = !DILocation(line: 1621, column: 7, scope: !6027)
!6036 = !DILocation(line: 1622, column: 3, scope: !6027)
!6037 = !DILocation(line: 1624, column: 29, scope: !6027)
!6038 = !DILocation(line: 1624, column: 20, scope: !6027)
!6039 = !DILocation(line: 1624, column: 34, scope: !6027)
!6040 = !DILocation(line: 1624, column: 32, scope: !6027)
!6041 = !DILocation(line: 1624, column: 10, scope: !6027)
!6042 = !DILocation(line: 1624, column: 3, scope: !6027)
!6043 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !391, file: !391, line: 1073, type: !6044, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6044 = !DISubroutineType(types: !6045)
!6045 = !{!825, !1329}
!6046 = !DILocalVariable(name: "gs", arg: 1, scope: !6043, file: !391, line: 1073, type: !1329)
!6047 = !DILocation(line: 1073, column: 36, scope: !6043)
!6048 = !DILocation(line: 1075, column: 37, scope: !6043)
!6049 = !DILocation(line: 1075, column: 24, scope: !6043)
!6050 = !DILocation(line: 1075, column: 10, scope: !6043)
!6051 = !DILocation(line: 1075, column: 3, scope: !6043)
!6052 = distinct !DISubprogram(name: "gss_for_code", scope: !391, file: !391, line: 1061, type: !6053, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6053 = !DISubroutineType(types: !6054)
!6054 = !{!825, !390}
!6055 = !DILocalVariable(name: "code", arg: 1, scope: !6052, file: !391, line: 1061, type: !390)
!6056 = !DILocation(line: 1061, column: 32, scope: !6052)
!6057 = !DILocation(line: 1066, column: 24, scope: !6052)
!6058 = !DILocation(line: 1066, column: 10, scope: !6052)
!6059 = !DILocation(line: 1066, column: 3, scope: !6052)
!6060 = distinct !DISubprogram(name: "gimple_expr_code", scope: !391, file: !391, line: 1438, type: !5957, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6061 = !DILocalVariable(name: "stmt", arg: 1, scope: !6060, file: !391, line: 1438, type: !2953)
!6062 = !DILocation(line: 1438, column: 32, scope: !6060)
!6063 = !DILocalVariable(name: "code", scope: !6060, file: !391, line: 1440, type: !390)
!6064 = !DILocation(line: 1440, column: 20, scope: !6060)
!6065 = !DILocation(line: 1440, column: 40, scope: !6060)
!6066 = !DILocation(line: 1440, column: 27, scope: !6060)
!6067 = !DILocation(line: 1441, column: 7, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6060, file: !391, line: 1441, column: 7)
!6069 = !DILocation(line: 1441, column: 12, scope: !6068)
!6070 = !DILocation(line: 1441, column: 29, scope: !6068)
!6071 = !DILocation(line: 1441, column: 32, scope: !6068)
!6072 = !DILocation(line: 1441, column: 37, scope: !6068)
!6073 = !DILocation(line: 1441, column: 7, scope: !6060)
!6074 = !DILocation(line: 1442, column: 29, scope: !6068)
!6075 = !DILocation(line: 1442, column: 35, scope: !6068)
!6076 = !DILocation(line: 1442, column: 42, scope: !6068)
!6077 = !DILocation(line: 1442, column: 5, scope: !6068)
!6078 = !DILocation(line: 1443, column: 12, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6068, file: !391, line: 1443, column: 12)
!6080 = !DILocation(line: 1443, column: 17, scope: !6079)
!6081 = !DILocation(line: 1443, column: 12, scope: !6068)
!6082 = !DILocation(line: 1444, column: 5, scope: !6079)
!6083 = !DILocation(line: 1446, column: 5, scope: !6079)
!6084 = !DILocation(line: 1448, column: 5, scope: !6060)
!6085 = !DILocation(line: 1450, column: 1, scope: !6060)
!6086 = distinct !DISubprogram(name: "gimple_num_ops", scope: !391, file: !391, line: 1596, type: !6087, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6087 = !DISubroutineType(types: !6088)
!6088 = !{!7, !2953}
!6089 = !DILocalVariable(name: "gs", arg: 1, scope: !6086, file: !391, line: 1596, type: !2953)
!6090 = !DILocation(line: 1596, column: 30, scope: !6086)
!6091 = !DILocation(line: 1598, column: 10, scope: !6086)
!6092 = !DILocation(line: 1598, column: 14, scope: !6086)
!6093 = !DILocation(line: 1598, column: 21, scope: !6086)
!6094 = !DILocation(line: 1598, column: 3, scope: !6086)
!6095 = distinct !DISubprogram(name: "analyze_initial_condition", scope: !3, file: !3, line: 1550, type: !6096, scopeLine: 1551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6096 = !DISubroutineType(types: !6097)
!6097 = !{!998, !1329}
!6098 = !DILocalVariable(name: "loop_phi_node", arg: 1, scope: !6095, file: !3, line: 1550, type: !1329)
!6099 = !DILocation(line: 1550, column: 35, scope: !6095)
!6100 = !DILocalVariable(name: "i", scope: !6095, file: !3, line: 1552, type: !1095)
!6101 = !DILocation(line: 1552, column: 7, scope: !6095)
!6102 = !DILocalVariable(name: "n", scope: !6095, file: !3, line: 1552, type: !1095)
!6103 = !DILocation(line: 1552, column: 10, scope: !6095)
!6104 = !DILocalVariable(name: "init_cond", scope: !6095, file: !3, line: 1553, type: !998)
!6105 = !DILocation(line: 1553, column: 8, scope: !6095)
!6106 = !DILocation(line: 1553, column: 20, scope: !6095)
!6107 = !DILocalVariable(name: "loop", scope: !6095, file: !3, line: 1554, type: !1545)
!6108 = !DILocation(line: 1554, column: 16, scope: !6095)
!6109 = !DILocation(line: 1554, column: 45, scope: !6095)
!6110 = !DILocation(line: 1554, column: 23, scope: !6095)
!6111 = !DILocation(line: 1556, column: 7, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1556, column: 7)
!6113 = !DILocation(line: 1556, column: 17, scope: !6112)
!6114 = !DILocation(line: 1556, column: 21, scope: !6112)
!6115 = !DILocation(line: 1556, column: 32, scope: !6112)
!6116 = !DILocation(line: 1556, column: 7, scope: !6095)
!6117 = !DILocation(line: 1558, column: 16, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 1557, column: 5)
!6119 = !DILocation(line: 1558, column: 7, scope: !6118)
!6120 = !DILocation(line: 1559, column: 16, scope: !6118)
!6121 = !DILocation(line: 1559, column: 7, scope: !6118)
!6122 = !DILocation(line: 1560, column: 26, scope: !6118)
!6123 = !DILocation(line: 1560, column: 37, scope: !6118)
!6124 = !DILocation(line: 1560, column: 7, scope: !6118)
!6125 = !DILocation(line: 1561, column: 16, scope: !6118)
!6126 = !DILocation(line: 1561, column: 7, scope: !6118)
!6127 = !DILocation(line: 1562, column: 5, scope: !6118)
!6128 = !DILocation(line: 1564, column: 28, scope: !6095)
!6129 = !DILocation(line: 1564, column: 7, scope: !6095)
!6130 = !DILocation(line: 1564, column: 5, scope: !6095)
!6131 = !DILocation(line: 1565, column: 10, scope: !6132)
!6132 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1565, column: 3)
!6133 = !DILocation(line: 1565, column: 8, scope: !6132)
!6134 = !DILocation(line: 1565, column: 15, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 1565, column: 3)
!6136 = !DILocation(line: 1565, column: 19, scope: !6135)
!6137 = !DILocation(line: 1565, column: 17, scope: !6135)
!6138 = !DILocation(line: 1565, column: 3, scope: !6132)
!6139 = !DILocalVariable(name: "branch", scope: !6140, file: !3, line: 1567, type: !998)
!6140 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1566, column: 5)
!6141 = !DILocation(line: 1567, column: 12, scope: !6140)
!6142 = !DILocation(line: 1567, column: 21, scope: !6140)
!6143 = !DILocalVariable(name: "bb", scope: !6140, file: !3, line: 1568, type: !1782)
!6144 = !DILocation(line: 1568, column: 19, scope: !6140)
!6145 = !DILocation(line: 1568, column: 45, scope: !6140)
!6146 = !DILocation(line: 1568, column: 60, scope: !6140)
!6147 = !DILocation(line: 1568, column: 24, scope: !6140)
!6148 = !DILocation(line: 1568, column: 64, scope: !6140)
!6149 = !DILocation(line: 1572, column: 34, scope: !6150)
!6150 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 1572, column: 11)
!6151 = !DILocation(line: 1572, column: 40, scope: !6150)
!6152 = !DILocation(line: 1572, column: 11, scope: !6150)
!6153 = !DILocation(line: 1572, column: 11, scope: !6140)
!6154 = !DILocation(line: 1573, column: 9, scope: !6150)
!6155 = !DILocation(line: 1575, column: 11, scope: !6156)
!6156 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 1575, column: 11)
!6157 = !DILocation(line: 1575, column: 24, scope: !6156)
!6158 = !DILocation(line: 1575, column: 21, scope: !6156)
!6159 = !DILocation(line: 1575, column: 11, scope: !6140)
!6160 = !DILocation(line: 1577, column: 16, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 1576, column: 2)
!6162 = !DILocation(line: 1577, column: 14, scope: !6161)
!6163 = !DILocation(line: 1578, column: 4, scope: !6161)
!6164 = !DILocation(line: 1581, column: 11, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 1581, column: 11)
!6166 = !DILocation(line: 1581, column: 30, scope: !6165)
!6167 = !DILocation(line: 1581, column: 11, scope: !6140)
!6168 = !DILocation(line: 1583, column: 16, scope: !6169)
!6169 = distinct !DILexicalBlock(scope: !6165, file: !3, line: 1582, column: 2)
!6170 = !DILocation(line: 1583, column: 14, scope: !6169)
!6171 = !DILocation(line: 1584, column: 10, scope: !6169)
!6172 = !DILocation(line: 1587, column: 32, scope: !6140)
!6173 = !DILocation(line: 1587, column: 43, scope: !6140)
!6174 = !DILocation(line: 1587, column: 19, scope: !6140)
!6175 = !DILocation(line: 1587, column: 17, scope: !6140)
!6176 = !DILocation(line: 1588, column: 5, scope: !6140)
!6177 = !DILocation(line: 1565, column: 23, scope: !6135)
!6178 = !DILocation(line: 1565, column: 3, scope: !6135)
!6179 = distinct !{!6179, !6138, !6180}
!6180 = !DILocation(line: 1588, column: 5, scope: !6132)
!6181 = !DILocation(line: 1591, column: 7, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1591, column: 7)
!6183 = !DILocation(line: 1591, column: 20, scope: !6182)
!6184 = !DILocation(line: 1591, column: 17, scope: !6182)
!6185 = !DILocation(line: 1591, column: 7, scope: !6095)
!6186 = !DILocation(line: 1592, column: 17, scope: !6182)
!6187 = !DILocation(line: 1592, column: 15, scope: !6182)
!6188 = !DILocation(line: 1592, column: 5, scope: !6182)
!6189 = !DILocation(line: 1596, column: 7, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1596, column: 7)
!6191 = !DILocation(line: 1596, column: 29, scope: !6190)
!6192 = !DILocation(line: 1596, column: 7, scope: !6095)
!6193 = !DILocalVariable(name: "def", scope: !6194, file: !3, line: 1598, type: !1329)
!6194 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 1597, column: 5)
!6195 = !DILocation(line: 1598, column: 14, scope: !6194)
!6196 = !DILocation(line: 1598, column: 20, scope: !6194)
!6197 = !DILocalVariable(name: "res", scope: !6194, file: !3, line: 1599, type: !998)
!6198 = !DILocation(line: 1599, column: 12, scope: !6194)
!6199 = !DILocation(line: 1600, column: 24, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 1600, column: 11)
!6201 = !DILocation(line: 1600, column: 11, scope: !6200)
!6202 = !DILocation(line: 1600, column: 29, scope: !6200)
!6203 = !DILocation(line: 1601, column: 4, scope: !6200)
!6204 = !DILocation(line: 1601, column: 37, scope: !6200)
!6205 = !DILocation(line: 1601, column: 14, scope: !6200)
!6206 = !DILocation(line: 1601, column: 12, scope: !6200)
!6207 = !DILocation(line: 1601, column: 43, scope: !6200)
!6208 = !DILocation(line: 1604, column: 4, scope: !6200)
!6209 = !DILocation(line: 1604, column: 32, scope: !6200)
!6210 = !DILocation(line: 1604, column: 7, scope: !6200)
!6211 = !DILocation(line: 1600, column: 11, scope: !6194)
!6212 = !DILocation(line: 1605, column: 14, scope: !6200)
!6213 = !DILocation(line: 1605, column: 12, scope: !6200)
!6214 = !DILocation(line: 1605, column: 2, scope: !6200)
!6215 = !DILocation(line: 1606, column: 5, scope: !6194)
!6216 = !DILocation(line: 1608, column: 7, scope: !6217)
!6217 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1608, column: 7)
!6218 = !DILocation(line: 1608, column: 17, scope: !6217)
!6219 = !DILocation(line: 1608, column: 21, scope: !6217)
!6220 = !DILocation(line: 1608, column: 32, scope: !6217)
!6221 = !DILocation(line: 1608, column: 7, scope: !6095)
!6222 = !DILocation(line: 1610, column: 16, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 1609, column: 5)
!6224 = !DILocation(line: 1610, column: 7, scope: !6223)
!6225 = !DILocation(line: 1611, column: 27, scope: !6223)
!6226 = !DILocation(line: 1611, column: 38, scope: !6223)
!6227 = !DILocation(line: 1611, column: 7, scope: !6223)
!6228 = !DILocation(line: 1612, column: 16, scope: !6223)
!6229 = !DILocation(line: 1612, column: 7, scope: !6223)
!6230 = !DILocation(line: 1613, column: 5, scope: !6223)
!6231 = !DILocation(line: 1615, column: 10, scope: !6095)
!6232 = !DILocation(line: 1615, column: 3, scope: !6095)
!6233 = distinct !DISubprogram(name: "analyze_evolution_in_loop", scope: !3, file: !3, line: 1468, type: !6234, scopeLine: 1470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6234 = !DISubroutineType(types: !6235)
!6235 = !{!998, !1329, !998}
!6236 = !DILocalVariable(name: "loop_phi_node", arg: 1, scope: !6233, file: !3, line: 1468, type: !1329)
!6237 = !DILocation(line: 1468, column: 35, scope: !6233)
!6238 = !DILocalVariable(name: "init_cond", arg: 2, scope: !6233, file: !3, line: 1469, type: !998)
!6239 = !DILocation(line: 1469, column: 12, scope: !6233)
!6240 = !DILocalVariable(name: "i", scope: !6233, file: !3, line: 1471, type: !1095)
!6241 = !DILocation(line: 1471, column: 7, scope: !6233)
!6242 = !DILocalVariable(name: "n", scope: !6233, file: !3, line: 1471, type: !1095)
!6243 = !DILocation(line: 1471, column: 10, scope: !6233)
!6244 = !DILocation(line: 1471, column: 35, scope: !6233)
!6245 = !DILocation(line: 1471, column: 14, scope: !6233)
!6246 = !DILocalVariable(name: "evolution_function", scope: !6233, file: !3, line: 1472, type: !998)
!6247 = !DILocation(line: 1472, column: 8, scope: !6233)
!6248 = !DILocation(line: 1472, column: 29, scope: !6233)
!6249 = !DILocalVariable(name: "loop", scope: !6233, file: !3, line: 1473, type: !1545)
!6250 = !DILocation(line: 1473, column: 16, scope: !6233)
!6251 = !DILocation(line: 1473, column: 45, scope: !6233)
!6252 = !DILocation(line: 1473, column: 23, scope: !6233)
!6253 = !DILocalVariable(name: "bb", scope: !6233, file: !3, line: 1474, type: !1782)
!6254 = !DILocation(line: 1474, column: 15, scope: !6233)
!6255 = !DILocation(line: 1476, column: 7, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 1476, column: 7)
!6257 = !DILocation(line: 1476, column: 17, scope: !6256)
!6258 = !DILocation(line: 1476, column: 21, scope: !6256)
!6259 = !DILocation(line: 1476, column: 32, scope: !6256)
!6260 = !DILocation(line: 1476, column: 7, scope: !6233)
!6261 = !DILocation(line: 1478, column: 16, scope: !6262)
!6262 = distinct !DILexicalBlock(scope: !6256, file: !3, line: 1477, column: 5)
!6263 = !DILocation(line: 1478, column: 7, scope: !6262)
!6264 = !DILocation(line: 1479, column: 16, scope: !6262)
!6265 = !DILocation(line: 1479, column: 7, scope: !6262)
!6266 = !DILocation(line: 1480, column: 26, scope: !6262)
!6267 = !DILocation(line: 1480, column: 37, scope: !6262)
!6268 = !DILocation(line: 1480, column: 7, scope: !6262)
!6269 = !DILocation(line: 1481, column: 16, scope: !6262)
!6270 = !DILocation(line: 1481, column: 7, scope: !6262)
!6271 = !DILocation(line: 1482, column: 5, scope: !6262)
!6272 = !DILocation(line: 1484, column: 10, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 1484, column: 3)
!6274 = !DILocation(line: 1484, column: 8, scope: !6273)
!6275 = !DILocation(line: 1484, column: 15, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 1484, column: 3)
!6277 = !DILocation(line: 1484, column: 19, scope: !6276)
!6278 = !DILocation(line: 1484, column: 17, scope: !6276)
!6279 = !DILocation(line: 1484, column: 3, scope: !6273)
!6280 = !DILocalVariable(name: "arg", scope: !6281, file: !3, line: 1486, type: !998)
!6281 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 1485, column: 5)
!6282 = !DILocation(line: 1486, column: 12, scope: !6281)
!6283 = !DILocation(line: 1486, column: 18, scope: !6281)
!6284 = !DILocalVariable(name: "ssa_chain", scope: !6281, file: !3, line: 1487, type: !1329)
!6285 = !DILocation(line: 1487, column: 14, scope: !6281)
!6286 = !DILocalVariable(name: "ev_fn", scope: !6281, file: !3, line: 1488, type: !998)
!6287 = !DILocation(line: 1488, column: 12, scope: !6281)
!6288 = !DILocalVariable(name: "res", scope: !6281, file: !3, line: 1489, type: !6289)
!6289 = !DIDerivedType(tag: DW_TAG_typedef, name: "t_bool", file: !3, line: 999, baseType: !851)
!6290 = !DILocation(line: 1489, column: 14, scope: !6281)
!6291 = !DILocation(line: 1492, column: 33, scope: !6281)
!6292 = !DILocation(line: 1492, column: 48, scope: !6281)
!6293 = !DILocation(line: 1492, column: 12, scope: !6281)
!6294 = !DILocation(line: 1492, column: 52, scope: !6281)
!6295 = !DILocation(line: 1492, column: 10, scope: !6281)
!6296 = !DILocation(line: 1493, column: 35, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 1493, column: 11)
!6298 = !DILocation(line: 1493, column: 41, scope: !6297)
!6299 = !DILocation(line: 1493, column: 12, scope: !6297)
!6300 = !DILocation(line: 1493, column: 11, scope: !6281)
!6301 = !DILocation(line: 1494, column: 2, scope: !6297)
!6302 = !DILocation(line: 1496, column: 11, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 1496, column: 11)
!6304 = !DILocation(line: 1496, column: 27, scope: !6303)
!6305 = !DILocation(line: 1496, column: 11, scope: !6281)
!6306 = !DILocalVariable(name: "val", scope: !6307, file: !3, line: 1498, type: !1118)
!6307 = distinct !DILexicalBlock(scope: !6303, file: !3, line: 1497, column: 2)
!6308 = !DILocation(line: 1498, column: 9, scope: !6307)
!6309 = !DILocation(line: 1500, column: 16, scope: !6307)
!6310 = !DILocation(line: 1500, column: 14, scope: !6307)
!6311 = !DILocation(line: 1503, column: 12, scope: !6307)
!6312 = !DILocation(line: 1503, column: 10, scope: !6307)
!6313 = !DILocation(line: 1504, column: 27, scope: !6307)
!6314 = !DILocation(line: 1504, column: 33, scope: !6307)
!6315 = !DILocation(line: 1504, column: 44, scope: !6307)
!6316 = !DILocation(line: 1504, column: 10, scope: !6307)
!6317 = !DILocation(line: 1504, column: 8, scope: !6307)
!6318 = !DILocation(line: 1510, column: 8, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6307, file: !3, line: 1510, column: 8)
!6320 = !DILocation(line: 1510, column: 26, scope: !6319)
!6321 = !DILocation(line: 1511, column: 8, scope: !6319)
!6322 = !DILocation(line: 1511, column: 35, scope: !6319)
!6323 = !DILocation(line: 1511, column: 42, scope: !6319)
!6324 = !DILocation(line: 1511, column: 48, scope: !6319)
!6325 = !DILocation(line: 1511, column: 11, scope: !6319)
!6326 = !DILocation(line: 1511, column: 59, scope: !6319)
!6327 = !DILocation(line: 1511, column: 62, scope: !6319)
!6328 = !DILocation(line: 1512, column: 8, scope: !6319)
!6329 = !DILocation(line: 1512, column: 29, scope: !6319)
!6330 = !DILocation(line: 1512, column: 40, scope: !6319)
!6331 = !DILocation(line: 1512, column: 12, scope: !6319)
!6332 = !DILocation(line: 1510, column: 8, scope: !6307)
!6333 = !DILocation(line: 1513, column: 14, scope: !6319)
!6334 = !DILocation(line: 1513, column: 12, scope: !6319)
!6335 = !DILocation(line: 1513, column: 6, scope: !6319)
!6336 = !DILocation(line: 1514, column: 2, scope: !6307)
!6337 = !DILocation(line: 1516, column: 6, scope: !6303)
!6338 = !DILocation(line: 1524, column: 11, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 1524, column: 11)
!6340 = !DILocation(line: 1524, column: 15, scope: !6339)
!6341 = !DILocation(line: 1524, column: 11, scope: !6281)
!6342 = !DILocation(line: 1525, column: 10, scope: !6339)
!6343 = !DILocation(line: 1525, column: 8, scope: !6339)
!6344 = !DILocation(line: 1525, column: 2, scope: !6339)
!6345 = !DILocation(line: 1529, column: 41, scope: !6281)
!6346 = !DILocation(line: 1529, column: 61, scope: !6281)
!6347 = !DILocation(line: 1529, column: 28, scope: !6281)
!6348 = !DILocation(line: 1529, column: 26, scope: !6281)
!6349 = !DILocation(line: 1530, column: 5, scope: !6281)
!6350 = !DILocation(line: 1484, column: 23, scope: !6276)
!6351 = !DILocation(line: 1484, column: 3, scope: !6276)
!6352 = distinct !{!6352, !6279, !6353}
!6353 = !DILocation(line: 1530, column: 5, scope: !6273)
!6354 = !DILocation(line: 1532, column: 7, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 1532, column: 7)
!6356 = !DILocation(line: 1532, column: 17, scope: !6355)
!6357 = !DILocation(line: 1532, column: 21, scope: !6355)
!6358 = !DILocation(line: 1532, column: 32, scope: !6355)
!6359 = !DILocation(line: 1532, column: 7, scope: !6233)
!6360 = !DILocation(line: 1534, column: 16, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 1533, column: 5)
!6362 = !DILocation(line: 1534, column: 7, scope: !6361)
!6363 = !DILocation(line: 1535, column: 27, scope: !6361)
!6364 = !DILocation(line: 1535, column: 38, scope: !6361)
!6365 = !DILocation(line: 1535, column: 7, scope: !6361)
!6366 = !DILocation(line: 1536, column: 16, scope: !6361)
!6367 = !DILocation(line: 1536, column: 7, scope: !6361)
!6368 = !DILocation(line: 1537, column: 5, scope: !6361)
!6369 = !DILocation(line: 1539, column: 10, scope: !6233)
!6370 = !DILocation(line: 1539, column: 3, scope: !6233)
!6371 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !391, file: !391, line: 3061, type: !6087, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6372 = !DILocalVariable(name: "gs", arg: 1, scope: !6371, file: !391, line: 3061, type: !2953)
!6373 = !DILocation(line: 3061, column: 35, scope: !6371)
!6374 = !DILocation(line: 3064, column: 10, scope: !6371)
!6375 = !DILocation(line: 3064, column: 14, scope: !6371)
!6376 = !DILocation(line: 3064, column: 25, scope: !6371)
!6377 = !DILocation(line: 3064, column: 3, scope: !6371)
!6378 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !2524, file: !2524, line: 467, type: !6379, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6379 = !DISubroutineType(types: !6380)
!6380 = !{!1309, !1329, !1475}
!6381 = !DILocalVariable(name: "gs", arg: 1, scope: !6378, file: !2524, line: 467, type: !1329)
!6382 = !DILocation(line: 467, column: 29, scope: !6378)
!6383 = !DILocalVariable(name: "i", arg: 2, scope: !6378, file: !2524, line: 467, type: !1475)
!6384 = !DILocation(line: 467, column: 40, scope: !6378)
!6385 = !DILocation(line: 469, column: 10, scope: !6378)
!6386 = !DILocation(line: 469, column: 3, scope: !6378)
!6387 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !6388, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6388 = !DISubroutineType(types: !6389)
!6389 = !{!1309, !6390, !7}
!6390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6391, size: 64)
!6391 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1302)
!6392 = !DILocalVariable(name: "vec_", arg: 1, scope: !6387, file: !343, line: 150, type: !6390)
!6393 = !DILocation(line: 150, column: 1, scope: !6387)
!6394 = !DILocalVariable(name: "ix_", arg: 2, scope: !6387, file: !343, line: 150, type: !7)
!6395 = !DILocation(line: 0, scope: !6387)
!6396 = distinct !DISubprogram(name: "follow_ssa_edge", scope: !3, file: !3, line: 1405, type: !6397, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6397 = !DISubroutineType(types: !6398)
!6398 = !{!6289, !1545, !1329, !1329, !1364, !1095}
!6399 = !DILocalVariable(name: "loop", arg: 1, scope: !6396, file: !3, line: 1405, type: !1545)
!6400 = !DILocation(line: 1405, column: 31, scope: !6396)
!6401 = !DILocalVariable(name: "def", arg: 2, scope: !6396, file: !3, line: 1405, type: !1329)
!6402 = !DILocation(line: 1405, column: 44, scope: !6396)
!6403 = !DILocalVariable(name: "halting_phi", arg: 3, scope: !6396, file: !3, line: 1405, type: !1329)
!6404 = !DILocation(line: 1405, column: 56, scope: !6396)
!6405 = !DILocalVariable(name: "evolution_of_loop", arg: 4, scope: !6396, file: !3, line: 1406, type: !1364)
!6406 = !DILocation(line: 1406, column: 10, scope: !6396)
!6407 = !DILocalVariable(name: "limit", arg: 5, scope: !6396, file: !3, line: 1406, type: !1095)
!6408 = !DILocation(line: 1406, column: 33, scope: !6396)
!6409 = !DILocalVariable(name: "def_loop", scope: !6396, file: !3, line: 1408, type: !1545)
!6410 = !DILocation(line: 1408, column: 16, scope: !6396)
!6411 = !DILocation(line: 1410, column: 21, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1410, column: 7)
!6413 = !DILocation(line: 1410, column: 7, scope: !6412)
!6414 = !DILocation(line: 1410, column: 7, scope: !6396)
!6415 = !DILocation(line: 1411, column: 5, scope: !6412)
!6416 = !DILocation(line: 1414, column: 7, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1414, column: 7)
!6418 = !DILocation(line: 1414, column: 15, scope: !6417)
!6419 = !DILocation(line: 1414, column: 13, scope: !6417)
!6420 = !DILocation(line: 1414, column: 7, scope: !6396)
!6421 = !DILocation(line: 1415, column: 5, scope: !6417)
!6422 = !DILocation(line: 1417, column: 36, scope: !6396)
!6423 = !DILocation(line: 1417, column: 14, scope: !6396)
!6424 = !DILocation(line: 1417, column: 12, scope: !6396)
!6425 = !DILocation(line: 1419, column: 24, scope: !6396)
!6426 = !DILocation(line: 1419, column: 11, scope: !6396)
!6427 = !DILocation(line: 1419, column: 3, scope: !6396)
!6428 = !DILocation(line: 1422, column: 29, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 1422, column: 11)
!6430 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1420, column: 5)
!6431 = !DILocation(line: 1422, column: 12, scope: !6429)
!6432 = !DILocation(line: 1422, column: 11, scope: !6430)
!6433 = !DILocation(line: 1428, column: 5, scope: !6429)
!6434 = !DILocation(line: 1428, column: 11, scope: !6429)
!6435 = !DILocation(line: 1428, column: 16, scope: !6429)
!6436 = !DILocation(line: 1428, column: 29, scope: !6429)
!6437 = !DILocation(line: 1428, column: 48, scope: !6429)
!6438 = !DILocation(line: 1427, column: 9, scope: !6429)
!6439 = !DILocation(line: 1427, column: 2, scope: !6429)
!6440 = !DILocation(line: 1433, column: 11, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 1433, column: 11)
!6442 = !DILocation(line: 1433, column: 18, scope: !6441)
!6443 = !DILocation(line: 1433, column: 15, scope: !6441)
!6444 = !DILocation(line: 1433, column: 11, scope: !6430)
!6445 = !DILocation(line: 1434, column: 2, scope: !6441)
!6446 = !DILocation(line: 1439, column: 11, scope: !6447)
!6447 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 1439, column: 11)
!6448 = !DILocation(line: 1439, column: 23, scope: !6447)
!6449 = !DILocation(line: 1439, column: 20, scope: !6447)
!6450 = !DILocation(line: 1439, column: 11, scope: !6430)
!6451 = !DILocation(line: 1440, column: 2, scope: !6447)
!6452 = !DILocation(line: 1443, column: 31, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 1443, column: 11)
!6454 = !DILocation(line: 1443, column: 37, scope: !6453)
!6455 = !DILocation(line: 1443, column: 11, scope: !6453)
!6456 = !DILocation(line: 1443, column: 11, scope: !6430)
!6457 = !DILocation(line: 1445, column: 5, scope: !6453)
!6458 = !DILocation(line: 1445, column: 11, scope: !6453)
!6459 = !DILocation(line: 1445, column: 16, scope: !6453)
!6460 = !DILocation(line: 1445, column: 29, scope: !6453)
!6461 = !DILocation(line: 1445, column: 48, scope: !6453)
!6462 = !DILocation(line: 1445, column: 54, scope: !6453)
!6463 = !DILocation(line: 1444, column: 9, scope: !6453)
!6464 = !DILocation(line: 1444, column: 2, scope: !6453)
!6465 = !DILocation(line: 1448, column: 7, scope: !6430)
!6466 = !DILocation(line: 1451, column: 38, scope: !6430)
!6467 = !DILocation(line: 1451, column: 44, scope: !6430)
!6468 = !DILocation(line: 1451, column: 49, scope: !6430)
!6469 = !DILocation(line: 1452, column: 10, scope: !6430)
!6470 = !DILocation(line: 1452, column: 29, scope: !6430)
!6471 = !DILocation(line: 1451, column: 14, scope: !6430)
!6472 = !DILocation(line: 1451, column: 7, scope: !6430)
!6473 = !DILocation(line: 1458, column: 7, scope: !6430)
!6474 = !DILocation(line: 1460, column: 1, scope: !6396)
!6475 = distinct !DISubprogram(name: "gimple_nop_p", scope: !391, file: !391, line: 4304, type: !6014, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6476 = !DILocalVariable(name: "g", arg: 1, scope: !6475, file: !391, line: 4304, type: !2953)
!6477 = !DILocation(line: 4304, column: 28, scope: !6475)
!6478 = !DILocation(line: 4306, column: 23, scope: !6475)
!6479 = !DILocation(line: 4306, column: 10, scope: !6475)
!6480 = !DILocation(line: 4306, column: 26, scope: !6475)
!6481 = !DILocation(line: 4306, column: 3, scope: !6475)
!6482 = distinct !DISubprogram(name: "follow_ssa_edge_in_condition_phi", scope: !3, file: !3, line: 1311, type: !6397, scopeLine: 1315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6483 = !DILocalVariable(name: "loop", arg: 1, scope: !6482, file: !3, line: 1311, type: !1545)
!6484 = !DILocation(line: 1311, column: 48, scope: !6482)
!6485 = !DILocalVariable(name: "condition_phi", arg: 2, scope: !6482, file: !3, line: 1312, type: !1329)
!6486 = !DILocation(line: 1312, column: 14, scope: !6482)
!6487 = !DILocalVariable(name: "halting_phi", arg: 3, scope: !6482, file: !3, line: 1313, type: !1329)
!6488 = !DILocation(line: 1313, column: 14, scope: !6482)
!6489 = !DILocalVariable(name: "evolution_of_loop", arg: 4, scope: !6482, file: !3, line: 1314, type: !1364)
!6490 = !DILocation(line: 1314, column: 13, scope: !6482)
!6491 = !DILocalVariable(name: "limit", arg: 5, scope: !6482, file: !3, line: 1314, type: !1095)
!6492 = !DILocation(line: 1314, column: 36, scope: !6482)
!6493 = !DILocalVariable(name: "i", scope: !6482, file: !3, line: 1316, type: !1095)
!6494 = !DILocation(line: 1316, column: 7, scope: !6482)
!6495 = !DILocalVariable(name: "n", scope: !6482, file: !3, line: 1316, type: !1095)
!6496 = !DILocation(line: 1316, column: 10, scope: !6482)
!6497 = !DILocalVariable(name: "init", scope: !6482, file: !3, line: 1317, type: !998)
!6498 = !DILocation(line: 1317, column: 8, scope: !6482)
!6499 = !DILocation(line: 1317, column: 16, scope: !6482)
!6500 = !DILocation(line: 1317, column: 15, scope: !6482)
!6501 = !DILocalVariable(name: "evolution_of_branch", scope: !6482, file: !3, line: 1318, type: !998)
!6502 = !DILocation(line: 1318, column: 8, scope: !6482)
!6503 = !DILocalVariable(name: "res", scope: !6482, file: !3, line: 1319, type: !6289)
!6504 = !DILocation(line: 1319, column: 10, scope: !6482)
!6505 = !DILocation(line: 1319, column: 60, scope: !6482)
!6506 = !DILocation(line: 1319, column: 66, scope: !6482)
!6507 = !DILocation(line: 1320, column: 8, scope: !6482)
!6508 = !DILocation(line: 1322, column: 8, scope: !6482)
!6509 = !DILocation(line: 1322, column: 14, scope: !6482)
!6510 = !DILocation(line: 1319, column: 16, scope: !6482)
!6511 = !DILocation(line: 1323, column: 7, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 1323, column: 7)
!6513 = !DILocation(line: 1323, column: 11, scope: !6512)
!6514 = !DILocation(line: 1323, column: 22, scope: !6512)
!6515 = !DILocation(line: 1323, column: 25, scope: !6512)
!6516 = !DILocation(line: 1323, column: 29, scope: !6512)
!6517 = !DILocation(line: 1323, column: 7, scope: !6482)
!6518 = !DILocation(line: 1324, column: 12, scope: !6512)
!6519 = !DILocation(line: 1324, column: 5, scope: !6512)
!6520 = !DILocation(line: 1326, column: 24, scope: !6482)
!6521 = !DILocation(line: 1326, column: 4, scope: !6482)
!6522 = !DILocation(line: 1326, column: 22, scope: !6482)
!6523 = !DILocation(line: 1328, column: 28, scope: !6482)
!6524 = !DILocation(line: 1328, column: 7, scope: !6482)
!6525 = !DILocation(line: 1328, column: 5, scope: !6482)
!6526 = !DILocation(line: 1329, column: 10, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 1329, column: 3)
!6528 = !DILocation(line: 1329, column: 8, scope: !6527)
!6529 = !DILocation(line: 1329, column: 15, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 1329, column: 3)
!6531 = !DILocation(line: 1329, column: 19, scope: !6530)
!6532 = !DILocation(line: 1329, column: 17, scope: !6530)
!6533 = !DILocation(line: 1329, column: 3, scope: !6527)
!6534 = !DILocation(line: 1333, column: 12, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 1333, column: 11)
!6536 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 1330, column: 5)
!6537 = !DILocation(line: 1333, column: 11, scope: !6535)
!6538 = !DILocation(line: 1333, column: 33, scope: !6535)
!6539 = !DILocation(line: 1333, column: 30, scope: !6535)
!6540 = !DILocation(line: 1333, column: 11, scope: !6536)
!6541 = !DILocation(line: 1334, column: 2, scope: !6535)
!6542 = !DILocation(line: 1338, column: 54, scope: !6536)
!6543 = !DILocation(line: 1338, column: 57, scope: !6536)
!6544 = !DILocation(line: 1338, column: 63, scope: !6536)
!6545 = !DILocation(line: 1339, column: 12, scope: !6536)
!6546 = !DILocation(line: 1341, column: 12, scope: !6536)
!6547 = !DILocation(line: 1341, column: 18, scope: !6536)
!6548 = !DILocation(line: 1341, column: 26, scope: !6536)
!6549 = !DILocation(line: 1341, column: 24, scope: !6536)
!6550 = !DILocation(line: 1338, column: 13, scope: !6536)
!6551 = !DILocation(line: 1338, column: 11, scope: !6536)
!6552 = !DILocation(line: 1342, column: 11, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 1342, column: 11)
!6554 = !DILocation(line: 1342, column: 15, scope: !6553)
!6555 = !DILocation(line: 1342, column: 26, scope: !6553)
!6556 = !DILocation(line: 1342, column: 29, scope: !6553)
!6557 = !DILocation(line: 1342, column: 33, scope: !6553)
!6558 = !DILocation(line: 1342, column: 11, scope: !6536)
!6559 = !DILocation(line: 1343, column: 9, scope: !6553)
!6560 = !DILocation(line: 1343, column: 2, scope: !6553)
!6561 = !DILocation(line: 1345, column: 42, scope: !6536)
!6562 = !DILocation(line: 1345, column: 41, scope: !6536)
!6563 = !DILocation(line: 1346, column: 6, scope: !6536)
!6564 = !DILocation(line: 1345, column: 28, scope: !6536)
!6565 = !DILocation(line: 1345, column: 8, scope: !6536)
!6566 = !DILocation(line: 1345, column: 26, scope: !6536)
!6567 = !DILocation(line: 1347, column: 5, scope: !6536)
!6568 = !DILocation(line: 1329, column: 23, scope: !6530)
!6569 = !DILocation(line: 1329, column: 3, scope: !6530)
!6570 = distinct !{!6570, !6533, !6571}
!6571 = !DILocation(line: 1347, column: 5, scope: !6527)
!6572 = !DILocation(line: 1349, column: 3, scope: !6482)
!6573 = !DILocation(line: 1350, column: 1, scope: !6482)
!6574 = distinct !DISubprogram(name: "follow_ssa_edge_inner_loop_phi", scope: !3, file: !3, line: 1358, type: !6397, scopeLine: 1362, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6575 = !DILocalVariable(name: "outer_loop", arg: 1, scope: !6574, file: !3, line: 1358, type: !1545)
!6576 = !DILocation(line: 1358, column: 46, scope: !6574)
!6577 = !DILocalVariable(name: "loop_phi_node", arg: 2, scope: !6574, file: !3, line: 1359, type: !1329)
!6578 = !DILocation(line: 1359, column: 12, scope: !6574)
!6579 = !DILocalVariable(name: "halting_phi", arg: 3, scope: !6574, file: !3, line: 1360, type: !1329)
!6580 = !DILocation(line: 1360, column: 12, scope: !6574)
!6581 = !DILocalVariable(name: "evolution_of_loop", arg: 4, scope: !6574, file: !3, line: 1361, type: !1364)
!6582 = !DILocation(line: 1361, column: 11, scope: !6574)
!6583 = !DILocalVariable(name: "limit", arg: 5, scope: !6574, file: !3, line: 1361, type: !1095)
!6584 = !DILocation(line: 1361, column: 34, scope: !6574)
!6585 = !DILocalVariable(name: "loop", scope: !6574, file: !3, line: 1363, type: !1545)
!6586 = !DILocation(line: 1363, column: 16, scope: !6574)
!6587 = !DILocation(line: 1363, column: 45, scope: !6574)
!6588 = !DILocation(line: 1363, column: 23, scope: !6574)
!6589 = !DILocalVariable(name: "ev", scope: !6574, file: !3, line: 1364, type: !998)
!6590 = !DILocation(line: 1364, column: 8, scope: !6574)
!6591 = !DILocation(line: 1364, column: 39, scope: !6574)
!6592 = !DILocation(line: 1364, column: 45, scope: !6574)
!6593 = !DILocation(line: 1364, column: 13, scope: !6574)
!6594 = !DILocation(line: 1368, column: 7, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 1368, column: 7)
!6596 = !DILocation(line: 1368, column: 13, scope: !6595)
!6597 = !DILocation(line: 1368, column: 10, scope: !6595)
!6598 = !DILocation(line: 1368, column: 7, scope: !6574)
!6599 = !DILocalVariable(name: "res", scope: !6600, file: !3, line: 1370, type: !6289)
!6600 = distinct !DILexicalBlock(scope: !6595, file: !3, line: 1369, column: 5)
!6601 = !DILocation(line: 1370, column: 14, scope: !6600)
!6602 = !DILocalVariable(name: "i", scope: !6600, file: !3, line: 1371, type: !1095)
!6603 = !DILocation(line: 1371, column: 11, scope: !6600)
!6604 = !DILocalVariable(name: "n", scope: !6600, file: !3, line: 1371, type: !1095)
!6605 = !DILocation(line: 1371, column: 14, scope: !6600)
!6606 = !DILocation(line: 1371, column: 39, scope: !6600)
!6607 = !DILocation(line: 1371, column: 18, scope: !6600)
!6608 = !DILocation(line: 1373, column: 14, scope: !6609)
!6609 = distinct !DILexicalBlock(scope: !6600, file: !3, line: 1373, column: 7)
!6610 = !DILocation(line: 1373, column: 12, scope: !6609)
!6611 = !DILocation(line: 1373, column: 19, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 1373, column: 7)
!6613 = !DILocation(line: 1373, column: 23, scope: !6612)
!6614 = !DILocation(line: 1373, column: 21, scope: !6612)
!6615 = !DILocation(line: 1373, column: 7, scope: !6609)
!6616 = !DILocalVariable(name: "arg", scope: !6617, file: !3, line: 1375, type: !998)
!6617 = distinct !DILexicalBlock(scope: !6612, file: !3, line: 1374, column: 2)
!6618 = !DILocation(line: 1375, column: 9, scope: !6617)
!6619 = !DILocation(line: 1375, column: 15, scope: !6617)
!6620 = !DILocalVariable(name: "bb", scope: !6617, file: !3, line: 1376, type: !1782)
!6621 = !DILocation(line: 1376, column: 16, scope: !6617)
!6622 = !DILocation(line: 1379, column: 30, scope: !6617)
!6623 = !DILocation(line: 1379, column: 45, scope: !6617)
!6624 = !DILocation(line: 1379, column: 9, scope: !6617)
!6625 = !DILocation(line: 1379, column: 49, scope: !6617)
!6626 = !DILocation(line: 1379, column: 7, scope: !6617)
!6627 = !DILocation(line: 1380, column: 32, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1380, column: 8)
!6629 = !DILocation(line: 1380, column: 38, scope: !6628)
!6630 = !DILocation(line: 1380, column: 9, scope: !6628)
!6631 = !DILocation(line: 1380, column: 8, scope: !6617)
!6632 = !DILocation(line: 1381, column: 34, scope: !6628)
!6633 = !DILocation(line: 1381, column: 46, scope: !6628)
!6634 = !DILocation(line: 1382, column: 6, scope: !6628)
!6635 = !DILocation(line: 1382, column: 11, scope: !6628)
!6636 = !DILocation(line: 1383, column: 6, scope: !6628)
!6637 = !DILocation(line: 1383, column: 25, scope: !6628)
!6638 = !DILocation(line: 1381, column: 12, scope: !6628)
!6639 = !DILocation(line: 1381, column: 10, scope: !6628)
!6640 = !DILocation(line: 1381, column: 6, scope: !6628)
!6641 = !DILocation(line: 1384, column: 8, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1384, column: 8)
!6643 = !DILocation(line: 1384, column: 12, scope: !6642)
!6644 = !DILocation(line: 1384, column: 8, scope: !6617)
!6645 = !DILocation(line: 1385, column: 6, scope: !6642)
!6646 = !DILocation(line: 1386, column: 2, scope: !6617)
!6647 = !DILocation(line: 1373, column: 27, scope: !6612)
!6648 = !DILocation(line: 1373, column: 7, scope: !6612)
!6649 = distinct !{!6649, !6615, !6650}
!6650 = !DILocation(line: 1386, column: 2, scope: !6609)
!6651 = !DILocation(line: 1389, column: 11, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6600, file: !3, line: 1389, column: 11)
!6653 = !DILocation(line: 1389, column: 15, scope: !6652)
!6654 = !DILocation(line: 1389, column: 11, scope: !6600)
!6655 = !DILocation(line: 1390, column: 23, scope: !6652)
!6656 = !DILocation(line: 1390, column: 3, scope: !6652)
!6657 = !DILocation(line: 1390, column: 21, scope: !6652)
!6658 = !DILocation(line: 1390, column: 2, scope: !6652)
!6659 = !DILocation(line: 1392, column: 14, scope: !6600)
!6660 = !DILocation(line: 1392, column: 7, scope: !6600)
!6661 = !DILocation(line: 1396, column: 46, scope: !6574)
!6662 = !DILocation(line: 1396, column: 52, scope: !6574)
!6663 = !DILocation(line: 1396, column: 8, scope: !6574)
!6664 = !DILocation(line: 1396, column: 6, scope: !6574)
!6665 = !DILocation(line: 1397, column: 32, scope: !6574)
!6666 = !DILocation(line: 1397, column: 44, scope: !6574)
!6667 = !DILocation(line: 1397, column: 59, scope: !6574)
!6668 = !DILocation(line: 1397, column: 63, scope: !6574)
!6669 = !DILocation(line: 1398, column: 11, scope: !6574)
!6670 = !DILocation(line: 1398, column: 30, scope: !6574)
!6671 = !DILocation(line: 1397, column: 10, scope: !6574)
!6672 = !DILocation(line: 1397, column: 3, scope: !6574)
!6673 = !DILocation(line: 1399, column: 1, scope: !6574)
!6674 = distinct !DISubprogram(name: "follow_ssa_edge_in_rhs", scope: !3, file: !3, line: 1216, type: !6397, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6675 = !DILocalVariable(name: "loop", arg: 1, scope: !6674, file: !3, line: 1216, type: !1545)
!6676 = !DILocation(line: 1216, column: 38, scope: !6674)
!6677 = !DILocalVariable(name: "stmt", arg: 2, scope: !6674, file: !3, line: 1216, type: !1329)
!6678 = !DILocation(line: 1216, column: 51, scope: !6674)
!6679 = !DILocalVariable(name: "halting_phi", arg: 3, scope: !6674, file: !3, line: 1217, type: !1329)
!6680 = !DILocation(line: 1217, column: 11, scope: !6674)
!6681 = !DILocalVariable(name: "evolution_of_loop", arg: 4, scope: !6674, file: !3, line: 1217, type: !1364)
!6682 = !DILocation(line: 1217, column: 30, scope: !6674)
!6683 = !DILocalVariable(name: "limit", arg: 5, scope: !6674, file: !3, line: 1217, type: !1095)
!6684 = !DILocation(line: 1217, column: 53, scope: !6674)
!6685 = !DILocalVariable(name: "code", scope: !6674, file: !3, line: 1219, type: !134)
!6686 = !DILocation(line: 1219, column: 18, scope: !6674)
!6687 = !DILocation(line: 1219, column: 49, scope: !6674)
!6688 = !DILocation(line: 1219, column: 25, scope: !6674)
!6689 = !DILocalVariable(name: "type", scope: !6674, file: !3, line: 1220, type: !998)
!6690 = !DILocation(line: 1220, column: 8, scope: !6674)
!6691 = !DILocation(line: 1220, column: 33, scope: !6674)
!6692 = !DILocation(line: 1220, column: 15, scope: !6674)
!6693 = !DILocalVariable(name: "rhs1", scope: !6674, file: !3, line: 1220, type: !998)
!6694 = !DILocation(line: 1220, column: 40, scope: !6674)
!6695 = !DILocalVariable(name: "rhs2", scope: !6674, file: !3, line: 1220, type: !998)
!6696 = !DILocation(line: 1220, column: 46, scope: !6674)
!6697 = !DILocalVariable(name: "res", scope: !6674, file: !3, line: 1221, type: !6289)
!6698 = !DILocation(line: 1221, column: 10, scope: !6674)
!6699 = !DILocation(line: 1223, column: 11, scope: !6674)
!6700 = !DILocation(line: 1223, column: 3, scope: !6674)
!6701 = !DILocation(line: 1227, column: 35, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 1224, column: 5)
!6703 = !DILocation(line: 1227, column: 41, scope: !6702)
!6704 = !DILocation(line: 1227, column: 67, scope: !6702)
!6705 = !DILocation(line: 1227, column: 47, scope: !6702)
!6706 = !DILocation(line: 1228, column: 7, scope: !6702)
!6707 = !DILocation(line: 1228, column: 20, scope: !6702)
!6708 = !DILocation(line: 1228, column: 39, scope: !6702)
!6709 = !DILocation(line: 1227, column: 13, scope: !6702)
!6710 = !DILocation(line: 1227, column: 11, scope: !6702)
!6711 = !DILocation(line: 1229, column: 43, scope: !6702)
!6712 = !DILocation(line: 1229, column: 50, scope: !6702)
!6713 = !DILocation(line: 1229, column: 49, scope: !6702)
!6714 = !DILocation(line: 1229, column: 69, scope: !6702)
!6715 = !DILocation(line: 1229, column: 28, scope: !6702)
!6716 = !DILocation(line: 1229, column: 8, scope: !6702)
!6717 = !DILocation(line: 1229, column: 26, scope: !6702)
!6718 = !DILocation(line: 1230, column: 7, scope: !6702)
!6719 = !DILocation(line: 1235, column: 34, scope: !6702)
!6720 = !DILocation(line: 1235, column: 14, scope: !6702)
!6721 = !DILocation(line: 1235, column: 12, scope: !6702)
!6722 = !DILocation(line: 1236, column: 34, scope: !6702)
!6723 = !DILocation(line: 1236, column: 14, scope: !6702)
!6724 = !DILocation(line: 1236, column: 12, scope: !6702)
!6725 = !DILocation(line: 1237, column: 14, scope: !6702)
!6726 = !DILocation(line: 1237, column: 12, scope: !6702)
!6727 = !DILocation(line: 1238, column: 37, scope: !6702)
!6728 = !DILocation(line: 1238, column: 43, scope: !6702)
!6729 = !DILocation(line: 1238, column: 49, scope: !6702)
!6730 = !DILocation(line: 1238, column: 55, scope: !6702)
!6731 = !DILocation(line: 1238, column: 61, scope: !6702)
!6732 = !DILocation(line: 1238, column: 67, scope: !6702)
!6733 = !DILocation(line: 1239, column: 9, scope: !6702)
!6734 = !DILocation(line: 1239, column: 22, scope: !6702)
!6735 = !DILocation(line: 1239, column: 41, scope: !6702)
!6736 = !DILocation(line: 1238, column: 13, scope: !6702)
!6737 = !DILocation(line: 1238, column: 11, scope: !6702)
!6738 = !DILocation(line: 1240, column: 7, scope: !6702)
!6739 = !DILocation(line: 1243, column: 33, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 1243, column: 11)
!6741 = !DILocation(line: 1243, column: 11, scope: !6740)
!6742 = !DILocation(line: 1243, column: 39, scope: !6740)
!6743 = !DILocation(line: 1243, column: 11, scope: !6702)
!6744 = !DILocation(line: 1244, column: 30, scope: !6740)
!6745 = !DILocation(line: 1244, column: 36, scope: !6740)
!6746 = !DILocation(line: 1244, column: 62, scope: !6740)
!6747 = !DILocation(line: 1244, column: 42, scope: !6740)
!6748 = !DILocation(line: 1245, column: 9, scope: !6740)
!6749 = !DILocation(line: 1245, column: 22, scope: !6740)
!6750 = !DILocation(line: 1245, column: 41, scope: !6740)
!6751 = !DILocation(line: 1244, column: 8, scope: !6740)
!6752 = !DILocation(line: 1244, column: 6, scope: !6740)
!6753 = !DILocation(line: 1244, column: 2, scope: !6740)
!6754 = !DILocation(line: 1247, column: 6, scope: !6740)
!6755 = !DILocation(line: 1248, column: 7, scope: !6702)
!6756 = !DILocation(line: 1251, column: 10, scope: !6674)
!6757 = !DILocation(line: 1251, column: 3, scope: !6674)
!6758 = distinct !DISubprogram(name: "follow_ssa_edge_in_condition_phi_branch", scope: !3, file: !3, line: 1275, type: !6759, scopeLine: 1281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6759 = !DISubroutineType(types: !6760)
!6760 = !{!6289, !1095, !1545, !1329, !1329, !1364, !998, !1095}
!6761 = !DILocalVariable(name: "i", arg: 1, scope: !6758, file: !3, line: 1275, type: !1095)
!6762 = !DILocation(line: 1275, column: 46, scope: !6758)
!6763 = !DILocalVariable(name: "loop", arg: 2, scope: !6758, file: !3, line: 1276, type: !1545)
!6764 = !DILocation(line: 1276, column: 20, scope: !6758)
!6765 = !DILocalVariable(name: "condition_phi", arg: 3, scope: !6758, file: !3, line: 1277, type: !1329)
!6766 = !DILocation(line: 1277, column: 14, scope: !6758)
!6767 = !DILocalVariable(name: "halting_phi", arg: 4, scope: !6758, file: !3, line: 1278, type: !1329)
!6768 = !DILocation(line: 1278, column: 14, scope: !6758)
!6769 = !DILocalVariable(name: "evolution_of_branch", arg: 5, scope: !6758, file: !3, line: 1279, type: !1364)
!6770 = !DILocation(line: 1279, column: 13, scope: !6758)
!6771 = !DILocalVariable(name: "init_cond", arg: 6, scope: !6758, file: !3, line: 1280, type: !998)
!6772 = !DILocation(line: 1280, column: 12, scope: !6758)
!6773 = !DILocalVariable(name: "limit", arg: 7, scope: !6758, file: !3, line: 1280, type: !1095)
!6774 = !DILocation(line: 1280, column: 27, scope: !6758)
!6775 = !DILocalVariable(name: "branch", scope: !6758, file: !3, line: 1282, type: !998)
!6776 = !DILocation(line: 1282, column: 8, scope: !6758)
!6777 = !DILocation(line: 1282, column: 17, scope: !6758)
!6778 = !DILocation(line: 1283, column: 26, scope: !6758)
!6779 = !DILocation(line: 1283, column: 4, scope: !6758)
!6780 = !DILocation(line: 1283, column: 24, scope: !6758)
!6781 = !DILocation(line: 1287, column: 27, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6758, file: !3, line: 1287, column: 7)
!6783 = !DILocation(line: 1287, column: 42, scope: !6782)
!6784 = !DILocation(line: 1287, column: 7, scope: !6782)
!6785 = !DILocation(line: 1287, column: 7, scope: !6758)
!6786 = !DILocation(line: 1288, column: 5, scope: !6782)
!6787 = !DILocation(line: 1290, column: 7, scope: !6788)
!6788 = distinct !DILexicalBlock(scope: !6758, file: !3, line: 1290, column: 7)
!6789 = !DILocation(line: 1290, column: 26, scope: !6788)
!6790 = !DILocation(line: 1290, column: 7, scope: !6758)
!6791 = !DILocation(line: 1292, column: 30, scope: !6792)
!6792 = distinct !DILexicalBlock(scope: !6788, file: !3, line: 1291, column: 5)
!6793 = !DILocation(line: 1292, column: 8, scope: !6792)
!6794 = !DILocation(line: 1292, column: 28, scope: !6792)
!6795 = !DILocation(line: 1293, column: 31, scope: !6792)
!6796 = !DILocation(line: 1293, column: 37, scope: !6792)
!6797 = !DILocation(line: 1293, column: 65, scope: !6792)
!6798 = !DILocation(line: 1294, column: 10, scope: !6792)
!6799 = !DILocation(line: 1294, column: 31, scope: !6792)
!6800 = !DILocation(line: 1293, column: 14, scope: !6792)
!6801 = !DILocation(line: 1293, column: 7, scope: !6792)
!6802 = !DILocation(line: 1304, column: 3, scope: !6758)
!6803 = !DILocation(line: 1305, column: 1, scope: !6758)
!6804 = distinct !DISubprogram(name: "backedge_phi_arg_p", scope: !3, file: !3, line: 1257, type: !6805, scopeLine: 1258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6805 = !DISubroutineType(types: !6806)
!6806 = !{!1118, !1329, !1095}
!6807 = !DILocalVariable(name: "phi", arg: 1, scope: !6804, file: !3, line: 1257, type: !1329)
!6808 = !DILocation(line: 1257, column: 28, scope: !6804)
!6809 = !DILocalVariable(name: "i", arg: 2, scope: !6804, file: !3, line: 1257, type: !1095)
!6810 = !DILocation(line: 1257, column: 37, scope: !6804)
!6811 = !DILocalVariable(name: "e", scope: !6804, file: !3, line: 1259, type: !6812)
!6812 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !999, line: 109, baseType: !6813)
!6813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6814, size: 64)
!6814 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1311)
!6815 = !DILocation(line: 1259, column: 14, scope: !6804)
!6816 = !DILocation(line: 1259, column: 39, scope: !6804)
!6817 = !DILocation(line: 1259, column: 44, scope: !6804)
!6818 = !DILocation(line: 1259, column: 18, scope: !6804)
!6819 = !DILocation(line: 1264, column: 7, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6804, file: !3, line: 1264, column: 7)
!6821 = !DILocation(line: 1264, column: 10, scope: !6820)
!6822 = !DILocation(line: 1264, column: 16, scope: !6820)
!6823 = !DILocation(line: 1264, column: 7, scope: !6804)
!6824 = !DILocation(line: 1265, column: 5, scope: !6820)
!6825 = !DILocation(line: 1267, column: 3, scope: !6804)
!6826 = !DILocation(line: 1268, column: 1, scope: !6804)
!6827 = distinct !DISubprogram(name: "follow_ssa_edge_expr", scope: !3, file: !3, line: 1144, type: !6828, scopeLine: 1146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6828 = !DISubroutineType(types: !6829)
!6829 = !{!6289, !1545, !1329, !998, !1329, !1364, !1095}
!6830 = !DILocalVariable(name: "loop", arg: 1, scope: !6827, file: !3, line: 1144, type: !1545)
!6831 = !DILocation(line: 1144, column: 36, scope: !6827)
!6832 = !DILocalVariable(name: "at_stmt", arg: 2, scope: !6827, file: !3, line: 1144, type: !1329)
!6833 = !DILocation(line: 1144, column: 49, scope: !6827)
!6834 = !DILocalVariable(name: "expr", arg: 3, scope: !6827, file: !3, line: 1144, type: !998)
!6835 = !DILocation(line: 1144, column: 63, scope: !6827)
!6836 = !DILocalVariable(name: "halting_phi", arg: 4, scope: !6827, file: !3, line: 1145, type: !1329)
!6837 = !DILocation(line: 1145, column: 16, scope: !6827)
!6838 = !DILocalVariable(name: "evolution_of_loop", arg: 5, scope: !6827, file: !3, line: 1145, type: !1364)
!6839 = !DILocation(line: 1145, column: 35, scope: !6827)
!6840 = !DILocalVariable(name: "limit", arg: 6, scope: !6827, file: !3, line: 1145, type: !1095)
!6841 = !DILocation(line: 1145, column: 58, scope: !6827)
!6842 = !DILocalVariable(name: "code", scope: !6827, file: !3, line: 1147, type: !134)
!6843 = !DILocation(line: 1147, column: 18, scope: !6827)
!6844 = !DILocation(line: 1147, column: 25, scope: !6827)
!6845 = !DILocalVariable(name: "type", scope: !6827, file: !3, line: 1148, type: !998)
!6846 = !DILocation(line: 1148, column: 8, scope: !6827)
!6847 = !DILocation(line: 1148, column: 15, scope: !6827)
!6848 = !DILocalVariable(name: "rhs0", scope: !6827, file: !3, line: 1148, type: !998)
!6849 = !DILocation(line: 1148, column: 33, scope: !6827)
!6850 = !DILocalVariable(name: "rhs1", scope: !6827, file: !3, line: 1148, type: !998)
!6851 = !DILocation(line: 1148, column: 39, scope: !6827)
!6852 = !DILocalVariable(name: "res", scope: !6827, file: !3, line: 1149, type: !6289)
!6853 = !DILocation(line: 1149, column: 10, scope: !6827)
!6854 = !DILocation(line: 1160, column: 11, scope: !6827)
!6855 = !DILocation(line: 1160, column: 3, scope: !6827)
!6856 = !DILocation(line: 1164, column: 35, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 1161, column: 5)
!6858 = !DILocation(line: 1164, column: 41, scope: !6857)
!6859 = !DILocation(line: 1164, column: 50, scope: !6857)
!6860 = !DILocation(line: 1165, column: 7, scope: !6857)
!6861 = !DILocation(line: 1165, column: 20, scope: !6857)
!6862 = !DILocation(line: 1165, column: 39, scope: !6857)
!6863 = !DILocation(line: 1164, column: 13, scope: !6857)
!6864 = !DILocation(line: 1164, column: 11, scope: !6857)
!6865 = !DILocation(line: 1166, column: 43, scope: !6857)
!6866 = !DILocation(line: 1166, column: 50, scope: !6857)
!6867 = !DILocation(line: 1166, column: 49, scope: !6857)
!6868 = !DILocation(line: 1166, column: 69, scope: !6857)
!6869 = !DILocation(line: 1166, column: 28, scope: !6857)
!6870 = !DILocation(line: 1166, column: 8, scope: !6857)
!6871 = !DILocation(line: 1166, column: 26, scope: !6857)
!6872 = !DILocation(line: 1167, column: 7, scope: !6857)
!6873 = !DILocation(line: 1171, column: 11, scope: !6857)
!6874 = !DILocation(line: 1172, column: 7, scope: !6857)
!6875 = !DILocation(line: 1177, column: 3, scope: !6857)
!6876 = !DILocation(line: 1177, column: 9, scope: !6857)
!6877 = !DILocation(line: 1177, column: 35, scope: !6857)
!6878 = !DILocation(line: 1177, column: 48, scope: !6857)
!6879 = !DILocation(line: 1177, column: 67, scope: !6857)
!6880 = !DILocation(line: 1176, column: 13, scope: !6857)
!6881 = !DILocation(line: 1176, column: 11, scope: !6857)
!6882 = !DILocation(line: 1178, column: 7, scope: !6857)
!6883 = !DILocation(line: 1184, column: 14, scope: !6857)
!6884 = !DILocation(line: 1184, column: 12, scope: !6857)
!6885 = !DILocation(line: 1185, column: 14, scope: !6857)
!6886 = !DILocation(line: 1185, column: 12, scope: !6857)
!6887 = !DILocation(line: 1186, column: 14, scope: !6857)
!6888 = !DILocation(line: 1186, column: 12, scope: !6857)
!6889 = !DILocation(line: 1187, column: 7, scope: !6857)
!6890 = !DILocation(line: 1188, column: 7, scope: !6857)
!6891 = !DILocation(line: 1189, column: 37, scope: !6857)
!6892 = !DILocation(line: 1189, column: 43, scope: !6857)
!6893 = !DILocation(line: 1189, column: 52, scope: !6857)
!6894 = !DILocation(line: 1189, column: 58, scope: !6857)
!6895 = !DILocation(line: 1189, column: 64, scope: !6857)
!6896 = !DILocation(line: 1189, column: 70, scope: !6857)
!6897 = !DILocation(line: 1190, column: 9, scope: !6857)
!6898 = !DILocation(line: 1190, column: 22, scope: !6857)
!6899 = !DILocation(line: 1190, column: 41, scope: !6857)
!6900 = !DILocation(line: 1189, column: 13, scope: !6857)
!6901 = !DILocation(line: 1189, column: 11, scope: !6857)
!6902 = !DILocation(line: 1191, column: 7, scope: !6857)
!6903 = !DILocation(line: 1196, column: 14, scope: !6857)
!6904 = !DILocation(line: 1196, column: 12, scope: !6857)
!6905 = !DILocation(line: 1197, column: 11, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 1197, column: 11)
!6907 = !DILocation(line: 1197, column: 28, scope: !6906)
!6908 = !DILocation(line: 1197, column: 11, scope: !6857)
!6909 = !DILocation(line: 1198, column: 25, scope: !6906)
!6910 = !DILocation(line: 1198, column: 31, scope: !6906)
!6911 = !DILocation(line: 1199, column: 11, scope: !6906)
!6912 = !DILocation(line: 1199, column: 24, scope: !6906)
!6913 = !DILocation(line: 1199, column: 43, scope: !6906)
!6914 = !DILocation(line: 1198, column: 8, scope: !6906)
!6915 = !DILocation(line: 1198, column: 6, scope: !6906)
!6916 = !DILocation(line: 1198, column: 2, scope: !6906)
!6917 = !DILocation(line: 1201, column: 6, scope: !6906)
!6918 = !DILocation(line: 1202, column: 7, scope: !6857)
!6919 = !DILocation(line: 1205, column: 11, scope: !6857)
!6920 = !DILocation(line: 1206, column: 7, scope: !6857)
!6921 = !DILocation(line: 1209, column: 10, scope: !6827)
!6922 = !DILocation(line: 1209, column: 3, scope: !6827)
!6923 = distinct !DISubprogram(name: "follow_ssa_edge_binary", scope: !3, file: !3, line: 1008, type: !6924, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!6924 = !DISubroutineType(types: !6925)
!6925 = !{!6289, !1545, !1329, !998, !998, !134, !998, !1329, !1364, !1095}
!6926 = !DILocalVariable(name: "loop", arg: 1, scope: !6923, file: !3, line: 1008, type: !1545)
!6927 = !DILocation(line: 1008, column: 38, scope: !6923)
!6928 = !DILocalVariable(name: "at_stmt", arg: 2, scope: !6923, file: !3, line: 1008, type: !1329)
!6929 = !DILocation(line: 1008, column: 51, scope: !6923)
!6930 = !DILocalVariable(name: "type", arg: 3, scope: !6923, file: !3, line: 1009, type: !998)
!6931 = !DILocation(line: 1009, column: 9, scope: !6923)
!6932 = !DILocalVariable(name: "rhs0", arg: 4, scope: !6923, file: !3, line: 1009, type: !998)
!6933 = !DILocation(line: 1009, column: 20, scope: !6923)
!6934 = !DILocalVariable(name: "code", arg: 5, scope: !6923, file: !3, line: 1009, type: !134)
!6935 = !DILocation(line: 1009, column: 41, scope: !6923)
!6936 = !DILocalVariable(name: "rhs1", arg: 6, scope: !6923, file: !3, line: 1009, type: !998)
!6937 = !DILocation(line: 1009, column: 52, scope: !6923)
!6938 = !DILocalVariable(name: "halting_phi", arg: 7, scope: !6923, file: !3, line: 1010, type: !1329)
!6939 = !DILocation(line: 1010, column: 11, scope: !6923)
!6940 = !DILocalVariable(name: "evolution_of_loop", arg: 8, scope: !6923, file: !3, line: 1010, type: !1364)
!6941 = !DILocation(line: 1010, column: 30, scope: !6923)
!6942 = !DILocalVariable(name: "limit", arg: 9, scope: !6923, file: !3, line: 1010, type: !1095)
!6943 = !DILocation(line: 1010, column: 53, scope: !6923)
!6944 = !DILocalVariable(name: "res", scope: !6923, file: !3, line: 1012, type: !6289)
!6945 = !DILocation(line: 1012, column: 10, scope: !6923)
!6946 = !DILocalVariable(name: "evol", scope: !6923, file: !3, line: 1013, type: !998)
!6947 = !DILocation(line: 1013, column: 8, scope: !6923)
!6948 = !DILocation(line: 1015, column: 11, scope: !6923)
!6949 = !DILocation(line: 1015, column: 3, scope: !6923)
!6950 = !DILocation(line: 1019, column: 11, scope: !6951)
!6951 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1019, column: 11)
!6952 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 1016, column: 5)
!6953 = !DILocation(line: 1019, column: 28, scope: !6951)
!6954 = !DILocation(line: 1019, column: 11, scope: !6952)
!6955 = !DILocation(line: 1021, column: 8, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 1021, column: 8)
!6957 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 1020, column: 2)
!6958 = !DILocation(line: 1021, column: 25, scope: !6956)
!6959 = !DILocation(line: 1021, column: 8, scope: !6957)
!6960 = !DILocation(line: 1029, column: 13, scope: !6961)
!6961 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 1022, column: 6)
!6962 = !DILocation(line: 1031, column: 16, scope: !6961)
!6963 = !DILocation(line: 1031, column: 15, scope: !6961)
!6964 = !DILocation(line: 1031, column: 13, scope: !6961)
!6965 = !DILocation(line: 1033, column: 4, scope: !6961)
!6966 = !DILocation(line: 1033, column: 10, scope: !6961)
!6967 = !DILocation(line: 1033, column: 36, scope: !6961)
!6968 = !DILocation(line: 1033, column: 56, scope: !6961)
!6969 = !DILocation(line: 1032, column: 14, scope: !6961)
!6970 = !DILocation(line: 1032, column: 12, scope: !6961)
!6971 = !DILocation(line: 1035, column: 12, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 1035, column: 12)
!6973 = !DILocation(line: 1035, column: 16, scope: !6972)
!6974 = !DILocation(line: 1035, column: 12, scope: !6961)
!6975 = !DILocation(line: 1037, column: 6, scope: !6972)
!6976 = !DILocation(line: 1037, column: 12, scope: !6972)
!6977 = !DILocation(line: 1038, column: 21, scope: !6972)
!6978 = !DILocation(line: 1038, column: 27, scope: !6972)
!6979 = !DILocation(line: 1038, column: 33, scope: !6972)
!6980 = !DILocation(line: 1038, column: 6, scope: !6972)
!6981 = !DILocation(line: 1039, column: 6, scope: !6972)
!6982 = !DILocation(line: 1039, column: 12, scope: !6972)
!6983 = !DILocation(line: 1039, column: 18, scope: !6972)
!6984 = !DILocation(line: 1036, column: 24, scope: !6972)
!6985 = !DILocation(line: 1036, column: 4, scope: !6972)
!6986 = !DILocation(line: 1036, column: 22, scope: !6972)
!6987 = !DILocation(line: 1036, column: 3, scope: !6972)
!6988 = !DILocation(line: 1041, column: 17, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 1041, column: 17)
!6990 = !DILocation(line: 1041, column: 21, scope: !6989)
!6991 = !DILocation(line: 1041, column: 17, scope: !6972)
!6992 = !DILocation(line: 1044, column: 8, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 1042, column: 3)
!6994 = !DILocation(line: 1044, column: 14, scope: !6993)
!6995 = !DILocation(line: 1044, column: 40, scope: !6993)
!6996 = !DILocation(line: 1045, column: 8, scope: !6993)
!6997 = !DILocation(line: 1045, column: 27, scope: !6993)
!6998 = !DILocation(line: 1043, column: 11, scope: !6993)
!6999 = !DILocation(line: 1043, column: 9, scope: !6993)
!7000 = !DILocation(line: 1047, column: 9, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1047, column: 9)
!7002 = !DILocation(line: 1047, column: 13, scope: !7001)
!7003 = !DILocation(line: 1047, column: 9, scope: !6993)
!7004 = !DILocation(line: 1049, column: 10, scope: !7001)
!7005 = !DILocation(line: 1049, column: 16, scope: !7001)
!7006 = !DILocation(line: 1050, column: 25, scope: !7001)
!7007 = !DILocation(line: 1050, column: 32, scope: !7001)
!7008 = !DILocation(line: 1050, column: 31, scope: !7001)
!7009 = !DILocation(line: 1050, column: 51, scope: !7001)
!7010 = !DILocation(line: 1050, column: 10, scope: !7001)
!7011 = !DILocation(line: 1051, column: 10, scope: !7001)
!7012 = !DILocation(line: 1051, column: 16, scope: !7001)
!7013 = !DILocation(line: 1051, column: 22, scope: !7001)
!7014 = !DILocation(line: 1048, column: 28, scope: !7001)
!7015 = !DILocation(line: 1048, column: 8, scope: !7001)
!7016 = !DILocation(line: 1048, column: 26, scope: !7001)
!7017 = !DILocation(line: 1048, column: 7, scope: !7001)
!7018 = !DILocation(line: 1053, column: 14, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 1053, column: 14)
!7020 = !DILocation(line: 1053, column: 18, scope: !7019)
!7021 = !DILocation(line: 1053, column: 14, scope: !7001)
!7022 = !DILocation(line: 1054, column: 28, scope: !7019)
!7023 = !DILocation(line: 1054, column: 8, scope: !7019)
!7024 = !DILocation(line: 1054, column: 26, scope: !7019)
!7025 = !DILocation(line: 1054, column: 7, scope: !7019)
!7026 = !DILocation(line: 1055, column: 3, scope: !6993)
!7027 = !DILocation(line: 1057, column: 17, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 1057, column: 17)
!7029 = !DILocation(line: 1057, column: 21, scope: !7028)
!7030 = !DILocation(line: 1057, column: 17, scope: !6989)
!7031 = !DILocation(line: 1058, column: 24, scope: !7028)
!7032 = !DILocation(line: 1058, column: 4, scope: !7028)
!7033 = !DILocation(line: 1058, column: 22, scope: !7028)
!7034 = !DILocation(line: 1058, column: 3, scope: !7028)
!7035 = !DILocation(line: 1059, column: 6, scope: !6961)
!7036 = !DILocation(line: 1066, column: 4, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 1062, column: 6)
!7038 = !DILocation(line: 1066, column: 10, scope: !7037)
!7039 = !DILocation(line: 1066, column: 36, scope: !7037)
!7040 = !DILocation(line: 1067, column: 4, scope: !7037)
!7041 = !DILocation(line: 1067, column: 23, scope: !7037)
!7042 = !DILocation(line: 1065, column: 14, scope: !7037)
!7043 = !DILocation(line: 1065, column: 12, scope: !7037)
!7044 = !DILocation(line: 1068, column: 12, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 1068, column: 12)
!7046 = !DILocation(line: 1068, column: 16, scope: !7045)
!7047 = !DILocation(line: 1068, column: 12, scope: !7037)
!7048 = !DILocation(line: 1070, column: 6, scope: !7045)
!7049 = !DILocation(line: 1070, column: 12, scope: !7045)
!7050 = !DILocation(line: 1070, column: 32, scope: !7045)
!7051 = !DILocation(line: 1070, column: 39, scope: !7045)
!7052 = !DILocation(line: 1070, column: 38, scope: !7045)
!7053 = !DILocation(line: 1071, column: 11, scope: !7045)
!7054 = !DILocation(line: 1070, column: 17, scope: !7045)
!7055 = !DILocation(line: 1072, column: 6, scope: !7045)
!7056 = !DILocation(line: 1072, column: 12, scope: !7045)
!7057 = !DILocation(line: 1072, column: 18, scope: !7045)
!7058 = !DILocation(line: 1069, column: 24, scope: !7045)
!7059 = !DILocation(line: 1069, column: 4, scope: !7045)
!7060 = !DILocation(line: 1069, column: 22, scope: !7045)
!7061 = !DILocation(line: 1069, column: 3, scope: !7045)
!7062 = !DILocation(line: 1074, column: 17, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1074, column: 17)
!7064 = !DILocation(line: 1074, column: 21, scope: !7063)
!7065 = !DILocation(line: 1074, column: 17, scope: !7045)
!7066 = !DILocation(line: 1075, column: 24, scope: !7063)
!7067 = !DILocation(line: 1075, column: 4, scope: !7063)
!7068 = !DILocation(line: 1075, column: 22, scope: !7063)
!7069 = !DILocation(line: 1075, column: 3, scope: !7063)
!7070 = !DILocation(line: 1077, column: 2, scope: !6957)
!7071 = !DILocation(line: 1079, column: 16, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 1079, column: 16)
!7073 = !DILocation(line: 1079, column: 33, scope: !7072)
!7074 = !DILocation(line: 1079, column: 16, scope: !6951)
!7075 = !DILocation(line: 1084, column: 7, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7072, file: !3, line: 1080, column: 2)
!7077 = !DILocation(line: 1084, column: 13, scope: !7076)
!7078 = !DILocation(line: 1084, column: 39, scope: !7076)
!7079 = !DILocation(line: 1085, column: 7, scope: !7076)
!7080 = !DILocation(line: 1085, column: 26, scope: !7076)
!7081 = !DILocation(line: 1083, column: 10, scope: !7076)
!7082 = !DILocation(line: 1083, column: 8, scope: !7076)
!7083 = !DILocation(line: 1086, column: 8, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 1086, column: 8)
!7085 = !DILocation(line: 1086, column: 12, scope: !7084)
!7086 = !DILocation(line: 1086, column: 8, scope: !7076)
!7087 = !DILocation(line: 1088, column: 9, scope: !7084)
!7088 = !DILocation(line: 1088, column: 15, scope: !7084)
!7089 = !DILocation(line: 1088, column: 35, scope: !7084)
!7090 = !DILocation(line: 1088, column: 42, scope: !7084)
!7091 = !DILocation(line: 1088, column: 41, scope: !7084)
!7092 = !DILocation(line: 1089, column: 7, scope: !7084)
!7093 = !DILocation(line: 1088, column: 20, scope: !7084)
!7094 = !DILocation(line: 1090, column: 9, scope: !7084)
!7095 = !DILocation(line: 1090, column: 15, scope: !7084)
!7096 = !DILocation(line: 1090, column: 21, scope: !7084)
!7097 = !DILocation(line: 1087, column: 27, scope: !7084)
!7098 = !DILocation(line: 1087, column: 7, scope: !7084)
!7099 = !DILocation(line: 1087, column: 25, scope: !7084)
!7100 = !DILocation(line: 1087, column: 6, scope: !7084)
!7101 = !DILocation(line: 1092, column: 13, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7084, file: !3, line: 1092, column: 13)
!7103 = !DILocation(line: 1092, column: 17, scope: !7102)
!7104 = !DILocation(line: 1092, column: 13, scope: !7084)
!7105 = !DILocation(line: 1093, column: 27, scope: !7102)
!7106 = !DILocation(line: 1093, column: 7, scope: !7102)
!7107 = !DILocation(line: 1093, column: 25, scope: !7102)
!7108 = !DILocation(line: 1093, column: 6, scope: !7102)
!7109 = !DILocation(line: 1094, column: 2, scope: !7076)
!7110 = !DILocation(line: 1100, column: 6, scope: !7072)
!7111 = !DILocation(line: 1101, column: 7, scope: !6952)
!7112 = !DILocation(line: 1105, column: 11, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1105, column: 11)
!7114 = !DILocation(line: 1105, column: 28, scope: !7113)
!7115 = !DILocation(line: 1105, column: 11, scope: !6952)
!7116 = !DILocation(line: 1113, column: 8, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 1113, column: 8)
!7118 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 1106, column: 2)
!7119 = !DILocation(line: 1113, column: 25, scope: !7117)
!7120 = !DILocation(line: 1113, column: 8, scope: !7118)
!7121 = !DILocation(line: 1114, column: 11, scope: !7117)
!7122 = !DILocation(line: 1114, column: 6, scope: !7117)
!7123 = !DILocation(line: 1116, column: 27, scope: !7118)
!7124 = !DILocation(line: 1116, column: 33, scope: !7118)
!7125 = !DILocation(line: 1116, column: 59, scope: !7118)
!7126 = !DILocation(line: 1117, column: 6, scope: !7118)
!7127 = !DILocation(line: 1117, column: 25, scope: !7118)
!7128 = !DILocation(line: 1116, column: 10, scope: !7118)
!7129 = !DILocation(line: 1116, column: 8, scope: !7118)
!7130 = !DILocation(line: 1118, column: 8, scope: !7131)
!7131 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 1118, column: 8)
!7132 = !DILocation(line: 1118, column: 12, scope: !7131)
!7133 = !DILocation(line: 1118, column: 8, scope: !7118)
!7134 = !DILocation(line: 1120, column: 9, scope: !7131)
!7135 = !DILocation(line: 1120, column: 15, scope: !7131)
!7136 = !DILocation(line: 1120, column: 35, scope: !7131)
!7137 = !DILocation(line: 1120, column: 42, scope: !7131)
!7138 = !DILocation(line: 1120, column: 41, scope: !7131)
!7139 = !DILocation(line: 1120, column: 61, scope: !7131)
!7140 = !DILocation(line: 1120, column: 20, scope: !7131)
!7141 = !DILocation(line: 1121, column: 21, scope: !7131)
!7142 = !DILocation(line: 1121, column: 27, scope: !7131)
!7143 = !DILocation(line: 1119, column: 27, scope: !7131)
!7144 = !DILocation(line: 1119, column: 7, scope: !7131)
!7145 = !DILocation(line: 1119, column: 25, scope: !7131)
!7146 = !DILocation(line: 1119, column: 6, scope: !7131)
!7147 = !DILocation(line: 1123, column: 13, scope: !7148)
!7148 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 1123, column: 13)
!7149 = !DILocation(line: 1123, column: 17, scope: !7148)
!7150 = !DILocation(line: 1123, column: 13, scope: !7131)
!7151 = !DILocation(line: 1124, column: 27, scope: !7148)
!7152 = !DILocation(line: 1124, column: 7, scope: !7148)
!7153 = !DILocation(line: 1124, column: 25, scope: !7148)
!7154 = !DILocation(line: 1124, column: 6, scope: !7148)
!7155 = !DILocation(line: 1125, column: 2, scope: !7118)
!7156 = !DILocation(line: 1130, column: 6, scope: !7113)
!7157 = !DILocation(line: 1131, column: 7, scope: !6952)
!7158 = !DILocation(line: 1134, column: 11, scope: !6952)
!7159 = !DILocation(line: 1135, column: 5, scope: !6952)
!7160 = !DILocation(line: 1137, column: 10, scope: !6923)
!7161 = !DILocation(line: 1137, column: 3, scope: !6923)
!7162 = distinct !DISubprogram(name: "add_to_evolution", scope: !3, file: !3, line: 862, type: !7163, scopeLine: 864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7163 = !DISubroutineType(types: !7164)
!7164 = !{!998, !7, !998, !134, !998, !1329}
!7165 = !DILocalVariable(name: "loop_nb", arg: 1, scope: !7162, file: !3, line: 862, type: !7)
!7166 = !DILocation(line: 862, column: 28, scope: !7162)
!7167 = !DILocalVariable(name: "chrec_before", arg: 2, scope: !7162, file: !3, line: 862, type: !998)
!7168 = !DILocation(line: 862, column: 42, scope: !7162)
!7169 = !DILocalVariable(name: "code", arg: 3, scope: !7162, file: !3, line: 862, type: !134)
!7170 = !DILocation(line: 862, column: 71, scope: !7162)
!7171 = !DILocalVariable(name: "to_add", arg: 4, scope: !7162, file: !3, line: 863, type: !998)
!7172 = !DILocation(line: 863, column: 10, scope: !7162)
!7173 = !DILocalVariable(name: "at_stmt", arg: 5, scope: !7162, file: !3, line: 863, type: !1329)
!7174 = !DILocation(line: 863, column: 25, scope: !7162)
!7175 = !DILocalVariable(name: "type", scope: !7162, file: !3, line: 865, type: !998)
!7176 = !DILocation(line: 865, column: 8, scope: !7162)
!7177 = !DILocation(line: 865, column: 27, scope: !7162)
!7178 = !DILocation(line: 865, column: 15, scope: !7162)
!7179 = !DILocalVariable(name: "res", scope: !7162, file: !3, line: 866, type: !998)
!7180 = !DILocation(line: 866, column: 8, scope: !7162)
!7181 = !DILocation(line: 868, column: 7, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 868, column: 7)
!7183 = !DILocation(line: 868, column: 14, scope: !7182)
!7184 = !DILocation(line: 868, column: 7, scope: !7162)
!7185 = !DILocation(line: 869, column: 12, scope: !7182)
!7186 = !DILocation(line: 869, column: 5, scope: !7182)
!7187 = !DILocation(line: 873, column: 7, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 873, column: 7)
!7189 = !DILocation(line: 873, column: 26, scope: !7188)
!7190 = !DILocation(line: 873, column: 7, scope: !7162)
!7191 = !DILocation(line: 875, column: 12, scope: !7188)
!7192 = !DILocation(line: 875, column: 5, scope: !7188)
!7193 = !DILocation(line: 877, column: 7, scope: !7194)
!7194 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 877, column: 7)
!7195 = !DILocation(line: 877, column: 17, scope: !7194)
!7196 = !DILocation(line: 877, column: 21, scope: !7194)
!7197 = !DILocation(line: 877, column: 32, scope: !7194)
!7198 = !DILocation(line: 877, column: 7, scope: !7162)
!7199 = !DILocation(line: 879, column: 16, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7194, file: !3, line: 878, column: 5)
!7201 = !DILocation(line: 879, column: 7, scope: !7200)
!7202 = !DILocation(line: 880, column: 16, scope: !7200)
!7203 = !DILocation(line: 880, column: 49, scope: !7200)
!7204 = !DILocation(line: 880, column: 7, scope: !7200)
!7205 = !DILocation(line: 881, column: 16, scope: !7200)
!7206 = !DILocation(line: 881, column: 7, scope: !7200)
!7207 = !DILocation(line: 882, column: 27, scope: !7200)
!7208 = !DILocation(line: 882, column: 38, scope: !7200)
!7209 = !DILocation(line: 882, column: 7, scope: !7200)
!7210 = !DILocation(line: 883, column: 16, scope: !7200)
!7211 = !DILocation(line: 883, column: 7, scope: !7200)
!7212 = !DILocation(line: 884, column: 27, scope: !7200)
!7213 = !DILocation(line: 884, column: 38, scope: !7200)
!7214 = !DILocation(line: 884, column: 7, scope: !7200)
!7215 = !DILocation(line: 885, column: 16, scope: !7200)
!7216 = !DILocation(line: 885, column: 7, scope: !7200)
!7217 = !DILocation(line: 886, column: 5, scope: !7200)
!7218 = !DILocation(line: 888, column: 7, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 888, column: 7)
!7220 = !DILocation(line: 888, column: 12, scope: !7219)
!7221 = !DILocation(line: 888, column: 7, scope: !7162)
!7222 = !DILocation(line: 889, column: 35, scope: !7219)
!7223 = !DILocation(line: 889, column: 41, scope: !7219)
!7224 = !DILocation(line: 889, column: 49, scope: !7219)
!7225 = !DILocation(line: 890, column: 21, scope: !7219)
!7226 = !DILocation(line: 890, column: 9, scope: !7219)
!7227 = !DILocation(line: 891, column: 29, scope: !7219)
!7228 = !DILocation(line: 891, column: 9, scope: !7219)
!7229 = !DILocation(line: 889, column: 14, scope: !7219)
!7230 = !DILocation(line: 889, column: 12, scope: !7219)
!7231 = !DILocation(line: 889, column: 5, scope: !7219)
!7232 = !DILocation(line: 893, column: 29, scope: !7162)
!7233 = !DILocation(line: 893, column: 38, scope: !7162)
!7234 = !DILocation(line: 893, column: 52, scope: !7162)
!7235 = !DILocation(line: 893, column: 60, scope: !7162)
!7236 = !DILocation(line: 893, column: 9, scope: !7162)
!7237 = !DILocation(line: 893, column: 7, scope: !7162)
!7238 = !DILocation(line: 895, column: 7, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 895, column: 7)
!7240 = !DILocation(line: 895, column: 17, scope: !7239)
!7241 = !DILocation(line: 895, column: 21, scope: !7239)
!7242 = !DILocation(line: 895, column: 32, scope: !7239)
!7243 = !DILocation(line: 895, column: 7, scope: !7162)
!7244 = !DILocation(line: 897, column: 16, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 896, column: 5)
!7246 = !DILocation(line: 897, column: 7, scope: !7245)
!7247 = !DILocation(line: 898, column: 27, scope: !7245)
!7248 = !DILocation(line: 898, column: 38, scope: !7245)
!7249 = !DILocation(line: 898, column: 7, scope: !7245)
!7250 = !DILocation(line: 899, column: 16, scope: !7245)
!7251 = !DILocation(line: 899, column: 7, scope: !7245)
!7252 = !DILocation(line: 900, column: 5, scope: !7245)
!7253 = !DILocation(line: 902, column: 10, scope: !7162)
!7254 = !DILocation(line: 902, column: 3, scope: !7162)
!7255 = !DILocation(line: 903, column: 1, scope: !7162)
!7256 = distinct !DISubprogram(name: "add_to_evolution_1", scope: !3, file: !3, line: 665, type: !7257, scopeLine: 667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7257 = !DISubroutineType(types: !7258)
!7258 = !{!998, !7, !998, !998, !1329}
!7259 = !DILocalVariable(name: "loop_nb", arg: 1, scope: !7256, file: !3, line: 665, type: !7)
!7260 = !DILocation(line: 665, column: 30, scope: !7256)
!7261 = !DILocalVariable(name: "chrec_before", arg: 2, scope: !7256, file: !3, line: 665, type: !998)
!7262 = !DILocation(line: 665, column: 44, scope: !7256)
!7263 = !DILocalVariable(name: "to_add", arg: 3, scope: !7256, file: !3, line: 665, type: !998)
!7264 = !DILocation(line: 665, column: 63, scope: !7256)
!7265 = !DILocalVariable(name: "at_stmt", arg: 4, scope: !7256, file: !3, line: 666, type: !1329)
!7266 = !DILocation(line: 666, column: 14, scope: !7256)
!7267 = !DILocalVariable(name: "type", scope: !7256, file: !3, line: 668, type: !998)
!7268 = !DILocation(line: 668, column: 8, scope: !7256)
!7269 = !DILocalVariable(name: "left", scope: !7256, file: !3, line: 668, type: !998)
!7270 = !DILocation(line: 668, column: 14, scope: !7256)
!7271 = !DILocalVariable(name: "right", scope: !7256, file: !3, line: 668, type: !998)
!7272 = !DILocation(line: 668, column: 20, scope: !7256)
!7273 = !DILocalVariable(name: "loop", scope: !7256, file: !3, line: 669, type: !1545)
!7274 = !DILocation(line: 669, column: 16, scope: !7256)
!7275 = !DILocation(line: 669, column: 33, scope: !7256)
!7276 = !DILocation(line: 669, column: 23, scope: !7256)
!7277 = !DILocalVariable(name: "chloop", scope: !7256, file: !3, line: 669, type: !1545)
!7278 = !DILocation(line: 669, column: 44, scope: !7256)
!7279 = !DILocation(line: 671, column: 11, scope: !7256)
!7280 = !DILocation(line: 671, column: 3, scope: !7256)
!7281 = !DILocation(line: 674, column: 32, scope: !7282)
!7282 = distinct !DILexicalBlock(scope: !7256, file: !3, line: 672, column: 5)
!7283 = !DILocation(line: 674, column: 16, scope: !7282)
!7284 = !DILocation(line: 674, column: 14, scope: !7282)
!7285 = !DILocation(line: 675, column: 11, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7282, file: !3, line: 675, column: 11)
!7287 = !DILocation(line: 675, column: 21, scope: !7286)
!7288 = !DILocation(line: 675, column: 18, scope: !7286)
!7289 = !DILocation(line: 676, column: 4, scope: !7286)
!7290 = !DILocation(line: 676, column: 27, scope: !7286)
!7291 = !DILocation(line: 676, column: 35, scope: !7286)
!7292 = !DILocation(line: 676, column: 7, scope: !7286)
!7293 = !DILocation(line: 675, column: 11, scope: !7282)
!7294 = !DILocalVariable(name: "var", scope: !7295, file: !3, line: 678, type: !7)
!7295 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 677, column: 2)
!7296 = !DILocation(line: 678, column: 13, scope: !7295)
!7297 = !DILocation(line: 680, column: 23, scope: !7295)
!7298 = !DILocation(line: 680, column: 11, scope: !7295)
!7299 = !DILocation(line: 680, column: 9, scope: !7295)
!7300 = !DILocation(line: 683, column: 8, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 683, column: 8)
!7302 = !DILocation(line: 683, column: 18, scope: !7301)
!7303 = !DILocation(line: 683, column: 15, scope: !7301)
!7304 = !DILocation(line: 683, column: 8, scope: !7295)
!7305 = !DILocation(line: 685, column: 14, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7301, file: !3, line: 684, column: 6)
!7307 = !DILocation(line: 685, column: 12, scope: !7306)
!7308 = !DILocation(line: 686, column: 15, scope: !7306)
!7309 = !DILocation(line: 686, column: 13, scope: !7306)
!7310 = !DILocation(line: 687, column: 16, scope: !7306)
!7311 = !DILocation(line: 688, column: 17, scope: !7306)
!7312 = !DILocation(line: 688, column: 5, scope: !7306)
!7313 = !DILocation(line: 689, column: 20, scope: !7306)
!7314 = !DILocation(line: 689, column: 5, scope: !7306)
!7315 = !DILocation(line: 687, column: 14, scope: !7306)
!7316 = !DILocation(line: 690, column: 6, scope: !7306)
!7317 = !DILocation(line: 693, column: 14, scope: !7318)
!7318 = distinct !DILexicalBlock(scope: !7301, file: !3, line: 692, column: 6)
!7319 = !DILocation(line: 693, column: 12, scope: !7318)
!7320 = !DILocation(line: 694, column: 15, scope: !7318)
!7321 = !DILocation(line: 694, column: 13, scope: !7318)
!7322 = !DILocation(line: 695, column: 16, scope: !7318)
!7323 = !DILocation(line: 695, column: 14, scope: !7318)
!7324 = !DILocation(line: 698, column: 28, scope: !7295)
!7325 = !DILocation(line: 698, column: 34, scope: !7295)
!7326 = !DILocation(line: 698, column: 42, scope: !7295)
!7327 = !DILocation(line: 698, column: 13, scope: !7295)
!7328 = !DILocation(line: 698, column: 11, scope: !7295)
!7329 = !DILocation(line: 699, column: 31, scope: !7295)
!7330 = !DILocation(line: 699, column: 37, scope: !7295)
!7331 = !DILocation(line: 699, column: 44, scope: !7295)
!7332 = !DILocation(line: 699, column: 12, scope: !7295)
!7333 = !DILocation(line: 699, column: 10, scope: !7295)
!7334 = !DILocation(line: 700, column: 41, scope: !7295)
!7335 = !DILocation(line: 700, column: 29, scope: !7295)
!7336 = !DILocation(line: 700, column: 49, scope: !7295)
!7337 = !DILocation(line: 700, column: 56, scope: !7295)
!7338 = !DILocation(line: 700, column: 12, scope: !7295)
!7339 = !DILocation(line: 700, column: 10, scope: !7295)
!7340 = !DILocation(line: 701, column: 35, scope: !7295)
!7341 = !DILocation(line: 701, column: 40, scope: !7295)
!7342 = !DILocation(line: 701, column: 46, scope: !7295)
!7343 = !DILocation(line: 701, column: 11, scope: !7295)
!7344 = !DILocation(line: 701, column: 4, scope: !7295)
!7345 = !DILocation(line: 705, column: 4, scope: !7346)
!7346 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 704, column: 2)
!7347 = !DILocation(line: 708, column: 31, scope: !7346)
!7348 = !DILocation(line: 708, column: 40, scope: !7346)
!7349 = !DILocation(line: 709, column: 10, scope: !7346)
!7350 = !DILocation(line: 709, column: 18, scope: !7346)
!7351 = !DILocation(line: 708, column: 11, scope: !7346)
!7352 = !DILocation(line: 708, column: 9, scope: !7346)
!7353 = !DILocation(line: 710, column: 12, scope: !7346)
!7354 = !DILocation(line: 710, column: 10, scope: !7346)
!7355 = !DILocation(line: 711, column: 43, scope: !7346)
!7356 = !DILocation(line: 711, column: 31, scope: !7346)
!7357 = !DILocation(line: 711, column: 50, scope: !7346)
!7358 = !DILocation(line: 711, column: 57, scope: !7346)
!7359 = !DILocation(line: 711, column: 12, scope: !7346)
!7360 = !DILocation(line: 711, column: 10, scope: !7346)
!7361 = !DILocation(line: 712, column: 35, scope: !7346)
!7362 = !DILocation(line: 713, column: 7, scope: !7346)
!7363 = !DILocation(line: 713, column: 13, scope: !7346)
!7364 = !DILocation(line: 712, column: 11, scope: !7346)
!7365 = !DILocation(line: 712, column: 4, scope: !7346)
!7366 = !DILocation(line: 718, column: 11, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7282, file: !3, line: 718, column: 11)
!7368 = !DILocation(line: 718, column: 27, scope: !7367)
!7369 = !DILocation(line: 718, column: 24, scope: !7367)
!7370 = !DILocation(line: 718, column: 11, scope: !7282)
!7371 = !DILocation(line: 719, column: 9, scope: !7367)
!7372 = !DILocation(line: 719, column: 2, scope: !7367)
!7373 = !DILocation(line: 721, column: 14, scope: !7282)
!7374 = !DILocation(line: 721, column: 12, scope: !7282)
!7375 = !DILocation(line: 722, column: 46, scope: !7282)
!7376 = !DILocation(line: 722, column: 34, scope: !7282)
!7377 = !DILocation(line: 722, column: 53, scope: !7282)
!7378 = !DILocation(line: 722, column: 61, scope: !7282)
!7379 = !DILocation(line: 722, column: 15, scope: !7282)
!7380 = !DILocation(line: 722, column: 13, scope: !7282)
!7381 = !DILocation(line: 723, column: 38, scope: !7282)
!7382 = !DILocation(line: 723, column: 47, scope: !7282)
!7383 = !DILocation(line: 723, column: 53, scope: !7282)
!7384 = !DILocation(line: 723, column: 14, scope: !7282)
!7385 = !DILocation(line: 723, column: 7, scope: !7282)
!7386 = !DILocation(line: 725, column: 1, scope: !7256)
!7387 = distinct !DISubprogram(name: "build_polynomial_chrec", scope: !2753, file: !2753, line: 127, type: !7388, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7388 = !DISubroutineType(types: !7389)
!7389 = !{!998, !7, !998, !998}
!7390 = !DILocalVariable(name: "loop_num", arg: 1, scope: !7387, file: !2753, line: 127, type: !7)
!7391 = !DILocation(line: 127, column: 34, scope: !7387)
!7392 = !DILocalVariable(name: "left", arg: 2, scope: !7387, file: !2753, line: 128, type: !998)
!7393 = !DILocation(line: 128, column: 9, scope: !7387)
!7394 = !DILocalVariable(name: "right", arg: 3, scope: !7387, file: !2753, line: 129, type: !998)
!7395 = !DILocation(line: 129, column: 9, scope: !7387)
!7396 = !DILocalVariable(name: "val", scope: !7387, file: !2753, line: 131, type: !1118)
!7397 = !DILocation(line: 131, column: 8, scope: !7387)
!7398 = !DILocation(line: 133, column: 7, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7387, file: !2753, line: 133, column: 7)
!7400 = !DILocation(line: 133, column: 15, scope: !7399)
!7401 = !DILocation(line: 133, column: 12, scope: !7399)
!7402 = !DILocation(line: 134, column: 7, scope: !7399)
!7403 = !DILocation(line: 134, column: 10, scope: !7399)
!7404 = !DILocation(line: 134, column: 19, scope: !7399)
!7405 = !DILocation(line: 134, column: 16, scope: !7399)
!7406 = !DILocation(line: 133, column: 7, scope: !7387)
!7407 = !DILocation(line: 135, column: 12, scope: !7399)
!7408 = !DILocation(line: 135, column: 5, scope: !7399)
!7409 = !DILocation(line: 137, column: 32, scope: !7410)
!7410 = distinct !DILexicalBlock(scope: !7387, file: !2753, line: 137, column: 7)
!7411 = !DILocation(line: 137, column: 38, scope: !7410)
!7412 = !DILocation(line: 137, column: 8, scope: !7410)
!7413 = !DILocation(line: 138, column: 7, scope: !7410)
!7414 = !DILocation(line: 138, column: 11, scope: !7410)
!7415 = !DILocation(line: 137, column: 7, scope: !7387)
!7416 = !DILocation(line: 139, column: 12, scope: !7410)
!7417 = !DILocation(line: 139, column: 5, scope: !7410)
!7418 = !DILocation(line: 143, column: 3, scope: !7387)
!7419 = !DILocation(line: 146, column: 7, scope: !7420)
!7420 = distinct !DILexicalBlock(scope: !7387, file: !2753, line: 146, column: 7)
!7421 = !DILocation(line: 146, column: 7, scope: !7387)
!7422 = !DILocation(line: 147, column: 5, scope: !7420)
!7423 = !DILocation(line: 149, column: 5, scope: !7420)
!7424 = !DILocation(line: 151, column: 20, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !7387, file: !2753, line: 151, column: 7)
!7426 = !DILocation(line: 151, column: 7, scope: !7425)
!7427 = !DILocation(line: 151, column: 7, scope: !7387)
!7428 = !DILocation(line: 152, column: 12, scope: !7425)
!7429 = !DILocation(line: 152, column: 5, scope: !7425)
!7430 = !DILocation(line: 154, column: 10, scope: !7387)
!7431 = !DILocation(line: 154, column: 3, scope: !7387)
!7432 = !DILocation(line: 156, column: 1, scope: !7387)
!7433 = distinct !DISubprogram(name: "chrec_zerop", scope: !2753, file: !2753, line: 94, type: !2870, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7434 = !DILocalVariable(name: "chrec", arg: 1, scope: !7433, file: !2753, line: 94, type: !2428)
!7435 = !DILocation(line: 94, column: 25, scope: !7433)
!7436 = !DILocation(line: 96, column: 7, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7433, file: !2753, line: 96, column: 7)
!7438 = !DILocation(line: 96, column: 13, scope: !7437)
!7439 = !DILocation(line: 96, column: 7, scope: !7433)
!7440 = !DILocation(line: 97, column: 5, scope: !7437)
!7441 = !DILocation(line: 99, column: 7, scope: !7442)
!7442 = distinct !DILexicalBlock(scope: !7433, file: !2753, line: 99, column: 7)
!7443 = !DILocation(line: 99, column: 25, scope: !7442)
!7444 = !DILocation(line: 99, column: 7, scope: !7433)
!7445 = !DILocation(line: 100, column: 27, scope: !7442)
!7446 = !DILocation(line: 100, column: 12, scope: !7442)
!7447 = !DILocation(line: 100, column: 5, scope: !7442)
!7448 = !DILocation(line: 102, column: 3, scope: !7433)
!7449 = !DILocation(line: 103, column: 1, scope: !7433)
!7450 = distinct !DISubprogram(name: "gimple_expr_type", scope: !391, file: !391, line: 4366, type: !5949, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7451 = !DILocalVariable(name: "stmt", arg: 1, scope: !7450, file: !391, line: 4366, type: !2953)
!7452 = !DILocation(line: 4366, column: 32, scope: !7450)
!7453 = !DILocalVariable(name: "code", scope: !7450, file: !391, line: 4368, type: !390)
!7454 = !DILocation(line: 4368, column: 20, scope: !7450)
!7455 = !DILocation(line: 4368, column: 40, scope: !7450)
!7456 = !DILocation(line: 4368, column: 27, scope: !7450)
!7457 = !DILocation(line: 4370, column: 7, scope: !7458)
!7458 = distinct !DILexicalBlock(scope: !7450, file: !391, line: 4370, column: 7)
!7459 = !DILocation(line: 4370, column: 12, scope: !7458)
!7460 = !DILocation(line: 4370, column: 29, scope: !7458)
!7461 = !DILocation(line: 4370, column: 32, scope: !7458)
!7462 = !DILocation(line: 4370, column: 37, scope: !7458)
!7463 = !DILocation(line: 4370, column: 7, scope: !7450)
!7464 = !DILocalVariable(name: "type", scope: !7465, file: !391, line: 4372, type: !998)
!7465 = distinct !DILexicalBlock(scope: !7458, file: !391, line: 4371, column: 5)
!7466 = !DILocation(line: 4372, column: 12, scope: !7465)
!7467 = !DILocation(line: 4377, column: 11, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7465, file: !391, line: 4377, column: 11)
!7469 = !DILocation(line: 4377, column: 16, scope: !7468)
!7470 = !DILocation(line: 4377, column: 11, scope: !7465)
!7471 = !DILocation(line: 4378, column: 34, scope: !7468)
!7472 = !DILocation(line: 4378, column: 9, scope: !7468)
!7473 = !DILocation(line: 4378, column: 7, scope: !7468)
!7474 = !DILocation(line: 4378, column: 2, scope: !7468)
!7475 = !DILocation(line: 4380, column: 34, scope: !7468)
!7476 = !DILocation(line: 4380, column: 10, scope: !7468)
!7477 = !DILocation(line: 4380, column: 2, scope: !7468)
!7478 = !DILocation(line: 4383, column: 13, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7468, file: !391, line: 4381, column: 4)
!7480 = !DILocation(line: 4383, column: 11, scope: !7479)
!7481 = !DILocation(line: 4384, column: 6, scope: !7479)
!7482 = !DILocation(line: 4388, column: 13, scope: !7479)
!7483 = !DILocation(line: 4388, column: 11, scope: !7479)
!7484 = !DILocation(line: 4389, column: 6, scope: !7479)
!7485 = !DILocation(line: 4391, column: 14, scope: !7465)
!7486 = !DILocation(line: 4391, column: 7, scope: !7465)
!7487 = !DILocation(line: 4393, column: 12, scope: !7488)
!7488 = distinct !DILexicalBlock(scope: !7458, file: !391, line: 4393, column: 12)
!7489 = !DILocation(line: 4393, column: 17, scope: !7488)
!7490 = !DILocation(line: 4393, column: 12, scope: !7458)
!7491 = !DILocation(line: 4394, column: 12, scope: !7488)
!7492 = !DILocation(line: 4394, column: 5, scope: !7488)
!7493 = !DILocation(line: 4396, column: 12, scope: !7488)
!7494 = !DILocation(line: 4396, column: 5, scope: !7488)
!7495 = !DILocation(line: 4397, column: 1, scope: !7450)
!7496 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !391, file: !391, line: 1966, type: !5949, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7497 = !DILocalVariable(name: "gs", arg: 1, scope: !7496, file: !391, line: 1966, type: !2953)
!7498 = !DILocation(line: 1966, column: 39, scope: !7496)
!7499 = !DILocalVariable(name: "fn", scope: !7496, file: !391, line: 1968, type: !998)
!7500 = !DILocation(line: 1968, column: 8, scope: !7496)
!7501 = !DILocation(line: 1968, column: 29, scope: !7496)
!7502 = !DILocation(line: 1968, column: 13, scope: !7496)
!7503 = !DILocalVariable(name: "type", scope: !7496, file: !391, line: 1969, type: !998)
!7504 = !DILocation(line: 1969, column: 8, scope: !7496)
!7505 = !DILocation(line: 1969, column: 15, scope: !7496)
!7506 = !DILocation(line: 1972, column: 10, scope: !7496)
!7507 = !DILocation(line: 1972, column: 8, scope: !7496)
!7508 = !DILocation(line: 1976, column: 10, scope: !7496)
!7509 = !DILocation(line: 1976, column: 3, scope: !7496)
!7510 = distinct !DISubprogram(name: "gimple_call_fn", scope: !391, file: !391, line: 1911, type: !5949, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7511 = !DILocalVariable(name: "gs", arg: 1, scope: !7510, file: !391, line: 1911, type: !2953)
!7512 = !DILocation(line: 1911, column: 30, scope: !7510)
!7513 = !DILocation(line: 1914, column: 21, scope: !7510)
!7514 = !DILocation(line: 1914, column: 10, scope: !7510)
!7515 = !DILocation(line: 1914, column: 3, scope: !7510)
!7516 = distinct !DISubprogram(name: "instantiate_scev_name", scope: !3, file: !3, line: 2147, type: !3337, scopeLine: 2150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7517 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7516, file: !3, line: 2147, type: !1782)
!7518 = !DILocation(line: 2147, column: 36, scope: !7516)
!7519 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7516, file: !3, line: 2148, type: !1545)
!7520 = !DILocation(line: 2148, column: 23, scope: !7516)
!7521 = !DILocalVariable(name: "chrec", arg: 3, scope: !7516, file: !3, line: 2148, type: !998)
!7522 = !DILocation(line: 2148, column: 44, scope: !7516)
!7523 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !7516, file: !3, line: 2149, type: !1118)
!7524 = !DILocation(line: 2149, column: 15, scope: !7516)
!7525 = !DILocalVariable(name: "cache", arg: 5, scope: !7516, file: !3, line: 2149, type: !1814)
!7526 = !DILocation(line: 2149, column: 40, scope: !7516)
!7527 = !DILocalVariable(name: "size_expr", arg: 6, scope: !7516, file: !3, line: 2149, type: !1095)
!7528 = !DILocation(line: 2149, column: 51, scope: !7516)
!7529 = !DILocalVariable(name: "res", scope: !7516, file: !3, line: 2151, type: !998)
!7530 = !DILocation(line: 2151, column: 8, scope: !7516)
!7531 = !DILocalVariable(name: "def_loop", scope: !7516, file: !3, line: 2152, type: !1545)
!7532 = !DILocation(line: 2152, column: 16, scope: !7516)
!7533 = !DILocalVariable(name: "def_bb", scope: !7516, file: !3, line: 2153, type: !1782)
!7534 = !DILocation(line: 2153, column: 15, scope: !7516)
!7535 = !DILocation(line: 2153, column: 35, scope: !7516)
!7536 = !DILocation(line: 2153, column: 24, scope: !7516)
!7537 = !DILocation(line: 2157, column: 8, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 2157, column: 7)
!7539 = !DILocation(line: 2158, column: 7, scope: !7538)
!7540 = !DILocation(line: 2158, column: 22, scope: !7538)
!7541 = !DILocation(line: 2158, column: 30, scope: !7538)
!7542 = !DILocation(line: 2158, column: 10, scope: !7538)
!7543 = !DILocation(line: 2158, column: 43, scope: !7538)
!7544 = !DILocation(line: 2159, column: 7, scope: !7538)
!7545 = !DILocation(line: 2159, column: 42, scope: !7538)
!7546 = !DILocation(line: 2159, column: 61, scope: !7538)
!7547 = !DILocation(line: 2159, column: 10, scope: !7538)
!7548 = !DILocation(line: 2157, column: 7, scope: !7516)
!7549 = !DILocation(line: 2160, column: 12, scope: !7538)
!7550 = !DILocation(line: 2160, column: 5, scope: !7538)
!7551 = !DILocation(line: 2171, column: 33, scope: !7516)
!7552 = !DILocation(line: 2171, column: 40, scope: !7516)
!7553 = !DILocation(line: 2171, column: 59, scope: !7516)
!7554 = !DILocation(line: 2171, column: 9, scope: !7516)
!7555 = !DILocation(line: 2171, column: 7, scope: !7516)
!7556 = !DILocation(line: 2172, column: 7, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 2172, column: 7)
!7558 = !DILocation(line: 2172, column: 7, scope: !7516)
!7559 = !DILocation(line: 2173, column: 12, scope: !7557)
!7560 = !DILocation(line: 2173, column: 5, scope: !7557)
!7561 = !DILocation(line: 2175, column: 9, scope: !7516)
!7562 = !DILocation(line: 2175, column: 7, scope: !7516)
!7563 = !DILocation(line: 2176, column: 27, scope: !7516)
!7564 = !DILocation(line: 2176, column: 34, scope: !7516)
!7565 = !DILocation(line: 2176, column: 53, scope: !7516)
!7566 = !DILocation(line: 2176, column: 60, scope: !7516)
!7567 = !DILocation(line: 2176, column: 3, scope: !7516)
!7568 = !DILocation(line: 2178, column: 32, scope: !7516)
!7569 = !DILocation(line: 2178, column: 48, scope: !7516)
!7570 = !DILocation(line: 2178, column: 56, scope: !7516)
!7571 = !DILocation(line: 2178, column: 14, scope: !7516)
!7572 = !DILocation(line: 2178, column: 12, scope: !7516)
!7573 = !DILocation(line: 2182, column: 35, scope: !7516)
!7574 = !DILocation(line: 2182, column: 45, scope: !7516)
!7575 = !DILocation(line: 2182, column: 9, scope: !7516)
!7576 = !DILocation(line: 2182, column: 7, scope: !7516)
!7577 = !DILocation(line: 2185, column: 7, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 2185, column: 7)
!7579 = !DILocation(line: 2185, column: 23, scope: !7578)
!7580 = !DILocation(line: 2186, column: 7, scope: !7578)
!7581 = !DILocation(line: 2186, column: 33, scope: !7578)
!7582 = !DILocation(line: 2186, column: 11, scope: !7578)
!7583 = !DILocation(line: 2186, column: 58, scope: !7578)
!7584 = !DILocation(line: 2187, column: 4, scope: !7578)
!7585 = !DILocation(line: 2187, column: 42, scope: !7578)
!7586 = !DILocation(line: 2187, column: 20, scope: !7578)
!7587 = !DILocation(line: 2187, column: 8, scope: !7578)
!7588 = !DILocation(line: 2188, column: 22, scope: !7578)
!7589 = !DILocation(line: 2188, column: 10, scope: !7578)
!7590 = !DILocation(line: 2188, column: 8, scope: !7578)
!7591 = !DILocation(line: 2185, column: 7, scope: !7516)
!7592 = !DILocation(line: 2190, column: 11, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 2190, column: 11)
!7594 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2189, column: 5)
!7595 = !DILocation(line: 2190, column: 18, scope: !7593)
!7596 = !DILocation(line: 2190, column: 15, scope: !7593)
!7597 = !DILocation(line: 2190, column: 11, scope: !7594)
!7598 = !DILocation(line: 2191, column: 29, scope: !7593)
!7599 = !DILocation(line: 2191, column: 8, scope: !7593)
!7600 = !DILocation(line: 2191, column: 6, scope: !7593)
!7601 = !DILocation(line: 2191, column: 2, scope: !7593)
!7602 = !DILocation(line: 2193, column: 8, scope: !7593)
!7603 = !DILocation(line: 2193, column: 6, scope: !7593)
!7604 = !DILocation(line: 2195, column: 11, scope: !7605)
!7605 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 2195, column: 11)
!7606 = !DILocation(line: 2195, column: 15, scope: !7605)
!7607 = !DILocation(line: 2196, column: 4, scope: !7605)
!7608 = !DILocation(line: 2196, column: 40, scope: !7605)
!7609 = !DILocation(line: 2197, column: 21, scope: !7605)
!7610 = !DILocation(line: 2197, column: 10, scope: !7605)
!7611 = !DILocation(line: 2196, column: 8, scope: !7605)
!7612 = !DILocation(line: 2195, column: 11, scope: !7594)
!7613 = !DILocation(line: 2198, column: 8, scope: !7605)
!7614 = !DILocation(line: 2198, column: 6, scope: !7605)
!7615 = !DILocation(line: 2198, column: 2, scope: !7605)
!7616 = !DILocation(line: 2199, column: 5, scope: !7594)
!7617 = !DILocation(line: 2201, column: 12, scope: !7618)
!7618 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2201, column: 12)
!7619 = !DILocation(line: 2201, column: 19, scope: !7618)
!7620 = !DILocation(line: 2201, column: 16, scope: !7618)
!7621 = !DILocation(line: 2201, column: 12, scope: !7578)
!7622 = !DILocation(line: 2202, column: 31, scope: !7618)
!7623 = !DILocation(line: 2202, column: 50, scope: !7618)
!7624 = !DILocation(line: 2202, column: 66, scope: !7618)
!7625 = !DILocation(line: 2203, column: 10, scope: !7618)
!7626 = !DILocation(line: 2203, column: 28, scope: !7618)
!7627 = !DILocation(line: 2203, column: 35, scope: !7618)
!7628 = !DILocation(line: 2202, column: 11, scope: !7618)
!7629 = !DILocation(line: 2202, column: 9, scope: !7618)
!7630 = !DILocation(line: 2202, column: 5, scope: !7618)
!7631 = !DILocation(line: 2206, column: 27, scope: !7516)
!7632 = !DILocation(line: 2206, column: 34, scope: !7516)
!7633 = !DILocation(line: 2206, column: 53, scope: !7516)
!7634 = !DILocation(line: 2206, column: 60, scope: !7516)
!7635 = !DILocation(line: 2206, column: 3, scope: !7516)
!7636 = !DILocation(line: 2207, column: 10, scope: !7516)
!7637 = !DILocation(line: 2207, column: 3, scope: !7516)
!7638 = !DILocation(line: 2209, column: 1, scope: !7516)
!7639 = distinct !DISubprogram(name: "instantiate_scev_poly", scope: !3, file: !3, line: 2226, type: !3337, scopeLine: 2229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7640 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7639, file: !3, line: 2226, type: !1782)
!7641 = !DILocation(line: 2226, column: 36, scope: !7639)
!7642 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7639, file: !3, line: 2227, type: !1545)
!7643 = !DILocation(line: 2227, column: 23, scope: !7639)
!7644 = !DILocalVariable(name: "chrec", arg: 3, scope: !7639, file: !3, line: 2227, type: !998)
!7645 = !DILocation(line: 2227, column: 44, scope: !7639)
!7646 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !7639, file: !3, line: 2228, type: !1118)
!7647 = !DILocation(line: 2228, column: 15, scope: !7639)
!7648 = !DILocalVariable(name: "cache", arg: 5, scope: !7639, file: !3, line: 2228, type: !1814)
!7649 = !DILocation(line: 2228, column: 40, scope: !7639)
!7650 = !DILocalVariable(name: "size_expr", arg: 6, scope: !7639, file: !3, line: 2228, type: !1095)
!7651 = !DILocation(line: 2228, column: 51, scope: !7639)
!7652 = !DILocalVariable(name: "op1", scope: !7639, file: !3, line: 2230, type: !998)
!7653 = !DILocation(line: 2230, column: 8, scope: !7639)
!7654 = !DILocalVariable(name: "op0", scope: !7639, file: !3, line: 2231, type: !998)
!7655 = !DILocation(line: 2231, column: 8, scope: !7639)
!7656 = !DILocation(line: 2231, column: 34, scope: !7639)
!7657 = !DILocation(line: 2231, column: 53, scope: !7639)
!7658 = !DILocation(line: 2232, column: 6, scope: !7639)
!7659 = !DILocation(line: 2232, column: 26, scope: !7639)
!7660 = !DILocation(line: 2232, column: 44, scope: !7639)
!7661 = !DILocation(line: 2233, column: 6, scope: !7639)
!7662 = !DILocation(line: 2231, column: 14, scope: !7639)
!7663 = !DILocation(line: 2234, column: 7, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 2234, column: 7)
!7665 = !DILocation(line: 2234, column: 14, scope: !7664)
!7666 = !DILocation(line: 2234, column: 11, scope: !7664)
!7667 = !DILocation(line: 2234, column: 7, scope: !7639)
!7668 = !DILocation(line: 2235, column: 12, scope: !7664)
!7669 = !DILocation(line: 2235, column: 5, scope: !7664)
!7670 = !DILocation(line: 2237, column: 29, scope: !7639)
!7671 = !DILocation(line: 2237, column: 48, scope: !7639)
!7672 = !DILocation(line: 2238, column: 8, scope: !7639)
!7673 = !DILocation(line: 2238, column: 29, scope: !7639)
!7674 = !DILocation(line: 2238, column: 47, scope: !7639)
!7675 = !DILocation(line: 2239, column: 8, scope: !7639)
!7676 = !DILocation(line: 2237, column: 9, scope: !7639)
!7677 = !DILocation(line: 2237, column: 7, scope: !7639)
!7678 = !DILocation(line: 2240, column: 7, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 2240, column: 7)
!7680 = !DILocation(line: 2240, column: 14, scope: !7679)
!7681 = !DILocation(line: 2240, column: 11, scope: !7679)
!7682 = !DILocation(line: 2240, column: 7, scope: !7639)
!7683 = !DILocation(line: 2241, column: 12, scope: !7679)
!7684 = !DILocation(line: 2241, column: 5, scope: !7679)
!7685 = !DILocation(line: 2243, column: 7, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 2243, column: 7)
!7687 = !DILocation(line: 2243, column: 29, scope: !7686)
!7688 = !DILocation(line: 2243, column: 26, scope: !7686)
!7689 = !DILocation(line: 2244, column: 7, scope: !7686)
!7690 = !DILocation(line: 2244, column: 10, scope: !7686)
!7691 = !DILocation(line: 2244, column: 33, scope: !7686)
!7692 = !DILocation(line: 2244, column: 30, scope: !7686)
!7693 = !DILocation(line: 2243, column: 7, scope: !7639)
!7694 = !DILocalVariable(name: "var", scope: !7695, file: !3, line: 2246, type: !7)
!7695 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 2245, column: 5)
!7696 = !DILocation(line: 2246, column: 16, scope: !7695)
!7697 = !DILocation(line: 2246, column: 22, scope: !7695)
!7698 = !DILocation(line: 2253, column: 27, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 2253, column: 11)
!7700 = !DILocation(line: 2253, column: 12, scope: !7699)
!7701 = !DILocation(line: 2253, column: 32, scope: !7699)
!7702 = !DILocation(line: 2253, column: 35, scope: !7699)
!7703 = !DILocation(line: 2253, column: 58, scope: !7699)
!7704 = !DILocation(line: 2253, column: 56, scope: !7699)
!7705 = !DILocation(line: 2254, column: 4, scope: !7699)
!7706 = !DILocation(line: 2254, column: 23, scope: !7699)
!7707 = !DILocation(line: 2254, column: 8, scope: !7699)
!7708 = !DILocation(line: 2254, column: 28, scope: !7699)
!7709 = !DILocation(line: 2254, column: 31, scope: !7699)
!7710 = !DILocation(line: 2254, column: 54, scope: !7699)
!7711 = !DILocation(line: 2254, column: 52, scope: !7699)
!7712 = !DILocation(line: 2253, column: 11, scope: !7695)
!7713 = !DILocation(line: 2255, column: 9, scope: !7699)
!7714 = !DILocation(line: 2255, column: 2, scope: !7699)
!7715 = !DILocation(line: 2257, column: 44, scope: !7695)
!7716 = !DILocation(line: 2257, column: 32, scope: !7695)
!7717 = !DILocation(line: 2257, column: 50, scope: !7695)
!7718 = !DILocation(line: 2257, column: 13, scope: !7695)
!7719 = !DILocation(line: 2257, column: 11, scope: !7695)
!7720 = !DILocation(line: 2258, column: 39, scope: !7695)
!7721 = !DILocation(line: 2258, column: 44, scope: !7695)
!7722 = !DILocation(line: 2258, column: 49, scope: !7695)
!7723 = !DILocation(line: 2258, column: 15, scope: !7695)
!7724 = !DILocation(line: 2258, column: 13, scope: !7695)
!7725 = !DILocation(line: 2259, column: 5, scope: !7695)
!7726 = !DILocation(line: 2261, column: 10, scope: !7639)
!7727 = !DILocation(line: 2261, column: 3, scope: !7639)
!7728 = !DILocation(line: 2262, column: 1, scope: !7639)
!7729 = distinct !DISubprogram(name: "instantiate_scev_binary", scope: !3, file: !3, line: 2279, type: !7730, scopeLine: 2283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7730 = !DISubroutineType(types: !7731)
!7731 = !{!998, !1782, !1545, !998, !134, !998, !998, !998, !1118, !1814, !1095}
!7732 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7729, file: !3, line: 2279, type: !1782)
!7733 = !DILocation(line: 2279, column: 38, scope: !7729)
!7734 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7729, file: !3, line: 2280, type: !1545)
!7735 = !DILocation(line: 2280, column: 18, scope: !7729)
!7736 = !DILocalVariable(name: "chrec", arg: 3, scope: !7729, file: !3, line: 2280, type: !998)
!7737 = !DILocation(line: 2280, column: 39, scope: !7729)
!7738 = !DILocalVariable(name: "code", arg: 4, scope: !7729, file: !3, line: 2280, type: !134)
!7739 = !DILocation(line: 2280, column: 61, scope: !7729)
!7740 = !DILocalVariable(name: "type", arg: 5, scope: !7729, file: !3, line: 2281, type: !998)
!7741 = !DILocation(line: 2281, column: 10, scope: !7729)
!7742 = !DILocalVariable(name: "c0", arg: 6, scope: !7729, file: !3, line: 2281, type: !998)
!7743 = !DILocation(line: 2281, column: 21, scope: !7729)
!7744 = !DILocalVariable(name: "c1", arg: 7, scope: !7729, file: !3, line: 2281, type: !998)
!7745 = !DILocation(line: 2281, column: 30, scope: !7729)
!7746 = !DILocalVariable(name: "fold_conversions", arg: 8, scope: !7729, file: !3, line: 2282, type: !1118)
!7747 = !DILocation(line: 2282, column: 10, scope: !7729)
!7748 = !DILocalVariable(name: "cache", arg: 9, scope: !7729, file: !3, line: 2282, type: !1814)
!7749 = !DILocation(line: 2282, column: 35, scope: !7729)
!7750 = !DILocalVariable(name: "size_expr", arg: 10, scope: !7729, file: !3, line: 2282, type: !1095)
!7751 = !DILocation(line: 2282, column: 46, scope: !7729)
!7752 = !DILocalVariable(name: "op1", scope: !7729, file: !3, line: 2284, type: !998)
!7753 = !DILocation(line: 2284, column: 8, scope: !7729)
!7754 = !DILocalVariable(name: "op0", scope: !7729, file: !3, line: 2285, type: !998)
!7755 = !DILocation(line: 2285, column: 8, scope: !7729)
!7756 = !DILocation(line: 2285, column: 34, scope: !7729)
!7757 = !DILocation(line: 2285, column: 53, scope: !7729)
!7758 = !DILocation(line: 2286, column: 6, scope: !7729)
!7759 = !DILocation(line: 2286, column: 10, scope: !7729)
!7760 = !DILocation(line: 2286, column: 28, scope: !7729)
!7761 = !DILocation(line: 2287, column: 6, scope: !7729)
!7762 = !DILocation(line: 2285, column: 14, scope: !7729)
!7763 = !DILocation(line: 2288, column: 7, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2288, column: 7)
!7765 = !DILocation(line: 2288, column: 14, scope: !7764)
!7766 = !DILocation(line: 2288, column: 11, scope: !7764)
!7767 = !DILocation(line: 2288, column: 7, scope: !7729)
!7768 = !DILocation(line: 2289, column: 12, scope: !7764)
!7769 = !DILocation(line: 2289, column: 5, scope: !7764)
!7770 = !DILocation(line: 2291, column: 29, scope: !7729)
!7771 = !DILocation(line: 2291, column: 48, scope: !7729)
!7772 = !DILocation(line: 2292, column: 8, scope: !7729)
!7773 = !DILocation(line: 2292, column: 12, scope: !7729)
!7774 = !DILocation(line: 2292, column: 30, scope: !7729)
!7775 = !DILocation(line: 2293, column: 8, scope: !7729)
!7776 = !DILocation(line: 2291, column: 9, scope: !7729)
!7777 = !DILocation(line: 2291, column: 7, scope: !7729)
!7778 = !DILocation(line: 2294, column: 7, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2294, column: 7)
!7780 = !DILocation(line: 2294, column: 14, scope: !7779)
!7781 = !DILocation(line: 2294, column: 11, scope: !7779)
!7782 = !DILocation(line: 2294, column: 7, scope: !7729)
!7783 = !DILocation(line: 2295, column: 12, scope: !7779)
!7784 = !DILocation(line: 2295, column: 5, scope: !7779)
!7785 = !DILocation(line: 2297, column: 7, scope: !7786)
!7786 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2297, column: 7)
!7787 = !DILocation(line: 2297, column: 13, scope: !7786)
!7788 = !DILocation(line: 2297, column: 10, scope: !7786)
!7789 = !DILocation(line: 2298, column: 7, scope: !7786)
!7790 = !DILocation(line: 2298, column: 10, scope: !7786)
!7791 = !DILocation(line: 2298, column: 16, scope: !7786)
!7792 = !DILocation(line: 2298, column: 13, scope: !7786)
!7793 = !DILocation(line: 2297, column: 7, scope: !7729)
!7794 = !DILocation(line: 2300, column: 28, scope: !7795)
!7795 = distinct !DILexicalBlock(scope: !7786, file: !3, line: 2299, column: 5)
!7796 = !DILocation(line: 2300, column: 34, scope: !7795)
!7797 = !DILocation(line: 2300, column: 13, scope: !7795)
!7798 = !DILocation(line: 2300, column: 11, scope: !7795)
!7799 = !DILocation(line: 2301, column: 32, scope: !7795)
!7800 = !DILocation(line: 2301, column: 38, scope: !7795)
!7801 = !DILocation(line: 2301, column: 13, scope: !7795)
!7802 = !DILocation(line: 2301, column: 11, scope: !7795)
!7803 = !DILocation(line: 2303, column: 15, scope: !7795)
!7804 = !DILocation(line: 2303, column: 7, scope: !7795)
!7805 = !DILocation(line: 2307, column: 28, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7795, file: !3, line: 2304, column: 2)
!7807 = !DILocation(line: 2307, column: 34, scope: !7806)
!7808 = !DILocation(line: 2307, column: 39, scope: !7806)
!7809 = !DILocation(line: 2307, column: 11, scope: !7806)
!7810 = !DILocation(line: 2307, column: 4, scope: !7806)
!7811 = !DILocation(line: 2310, column: 29, scope: !7806)
!7812 = !DILocation(line: 2310, column: 35, scope: !7806)
!7813 = !DILocation(line: 2310, column: 40, scope: !7806)
!7814 = !DILocation(line: 2310, column: 11, scope: !7806)
!7815 = !DILocation(line: 2310, column: 4, scope: !7806)
!7816 = !DILocation(line: 2313, column: 32, scope: !7806)
!7817 = !DILocation(line: 2313, column: 38, scope: !7806)
!7818 = !DILocation(line: 2313, column: 43, scope: !7806)
!7819 = !DILocation(line: 2313, column: 11, scope: !7806)
!7820 = !DILocation(line: 2313, column: 4, scope: !7806)
!7821 = !DILocation(line: 2316, column: 4, scope: !7806)
!7822 = !DILocation(line: 2317, column: 2, scope: !7806)
!7823 = !DILocation(line: 2318, column: 5, scope: !7795)
!7824 = !DILocation(line: 2320, column: 10, scope: !7729)
!7825 = !DILocation(line: 2320, column: 18, scope: !7729)
!7826 = !DILocation(line: 2320, column: 26, scope: !7729)
!7827 = !DILocation(line: 2320, column: 3, scope: !7729)
!7828 = !DILocation(line: 2321, column: 1, scope: !7729)
!7829 = distinct !DISubprogram(name: "instantiate_scev_convert", scope: !3, file: !3, line: 2339, type: !7830, scopeLine: 2343, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7830 = !DISubroutineType(types: !7831)
!7831 = !{!998, !1782, !1545, !998, !998, !998, !1118, !1814, !1095}
!7832 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7829, file: !3, line: 2339, type: !1782)
!7833 = !DILocation(line: 2339, column: 39, scope: !7829)
!7834 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7829, file: !3, line: 2340, type: !1545)
!7835 = !DILocation(line: 2340, column: 19, scope: !7829)
!7836 = !DILocalVariable(name: "chrec", arg: 3, scope: !7829, file: !3, line: 2340, type: !998)
!7837 = !DILocation(line: 2340, column: 40, scope: !7829)
!7838 = !DILocalVariable(name: "type", arg: 4, scope: !7829, file: !3, line: 2341, type: !998)
!7839 = !DILocation(line: 2341, column: 11, scope: !7829)
!7840 = !DILocalVariable(name: "op", arg: 5, scope: !7829, file: !3, line: 2341, type: !998)
!7841 = !DILocation(line: 2341, column: 22, scope: !7829)
!7842 = !DILocalVariable(name: "fold_conversions", arg: 6, scope: !7829, file: !3, line: 2342, type: !1118)
!7843 = !DILocation(line: 2342, column: 11, scope: !7829)
!7844 = !DILocalVariable(name: "cache", arg: 7, scope: !7829, file: !3, line: 2342, type: !1814)
!7845 = !DILocation(line: 2342, column: 36, scope: !7829)
!7846 = !DILocalVariable(name: "size_expr", arg: 8, scope: !7829, file: !3, line: 2342, type: !1095)
!7847 = !DILocation(line: 2342, column: 47, scope: !7829)
!7848 = !DILocalVariable(name: "op0", scope: !7829, file: !3, line: 2344, type: !998)
!7849 = !DILocation(line: 2344, column: 8, scope: !7829)
!7850 = !DILocation(line: 2344, column: 34, scope: !7829)
!7851 = !DILocation(line: 2344, column: 53, scope: !7829)
!7852 = !DILocation(line: 2344, column: 69, scope: !7829)
!7853 = !DILocation(line: 2345, column: 6, scope: !7829)
!7854 = !DILocation(line: 2345, column: 24, scope: !7829)
!7855 = !DILocation(line: 2345, column: 31, scope: !7829)
!7856 = !DILocation(line: 2344, column: 14, scope: !7829)
!7857 = !DILocation(line: 2347, column: 7, scope: !7858)
!7858 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 2347, column: 7)
!7859 = !DILocation(line: 2347, column: 14, scope: !7858)
!7860 = !DILocation(line: 2347, column: 11, scope: !7858)
!7861 = !DILocation(line: 2347, column: 7, scope: !7829)
!7862 = !DILocation(line: 2348, column: 12, scope: !7858)
!7863 = !DILocation(line: 2348, column: 5, scope: !7858)
!7864 = !DILocation(line: 2350, column: 7, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 2350, column: 7)
!7866 = !DILocation(line: 2350, column: 7, scope: !7829)
!7867 = !DILocalVariable(name: "tmp", scope: !7868, file: !3, line: 2352, type: !998)
!7868 = distinct !DILexicalBlock(scope: !7865, file: !3, line: 2351, column: 5)
!7869 = !DILocation(line: 2352, column: 12, scope: !7868)
!7870 = !DILocation(line: 2352, column: 44, scope: !7868)
!7871 = !DILocation(line: 2352, column: 50, scope: !7868)
!7872 = !DILocation(line: 2352, column: 18, scope: !7868)
!7873 = !DILocation(line: 2353, column: 11, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7868, file: !3, line: 2353, column: 11)
!7875 = !DILocation(line: 2353, column: 11, scope: !7868)
!7876 = !DILocation(line: 2354, column: 9, scope: !7874)
!7877 = !DILocation(line: 2354, column: 2, scope: !7874)
!7878 = !DILocation(line: 2355, column: 5, scope: !7868)
!7879 = !DILocation(line: 2357, column: 7, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 2357, column: 7)
!7881 = !DILocation(line: 2357, column: 13, scope: !7880)
!7882 = !DILocation(line: 2357, column: 16, scope: !7880)
!7883 = !DILocation(line: 2357, column: 23, scope: !7880)
!7884 = !DILocation(line: 2357, column: 20, scope: !7880)
!7885 = !DILocation(line: 2357, column: 7, scope: !7829)
!7886 = !DILocation(line: 2358, column: 12, scope: !7880)
!7887 = !DILocation(line: 2358, column: 5, scope: !7880)
!7888 = !DILocation(line: 2363, column: 7, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 2363, column: 7)
!7890 = !DILocation(line: 2363, column: 7, scope: !7829)
!7891 = !DILocation(line: 2364, column: 12, scope: !7889)
!7892 = !DILocation(line: 2364, column: 5, scope: !7889)
!7893 = !DILocation(line: 2366, column: 25, scope: !7829)
!7894 = !DILocation(line: 2366, column: 31, scope: !7829)
!7895 = !DILocation(line: 2366, column: 10, scope: !7829)
!7896 = !DILocation(line: 2366, column: 3, scope: !7829)
!7897 = !DILocation(line: 2367, column: 1, scope: !7829)
!7898 = distinct !DISubprogram(name: "instantiate_scev_not", scope: !3, file: !3, line: 2386, type: !7899, scopeLine: 2390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7899 = !DISubroutineType(types: !7900)
!7900 = !{!998, !1782, !1545, !998, !134, !998, !998, !1118, !1814, !1095}
!7901 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7898, file: !3, line: 2386, type: !1782)
!7902 = !DILocation(line: 2386, column: 35, scope: !7898)
!7903 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7898, file: !3, line: 2387, type: !1545)
!7904 = !DILocation(line: 2387, column: 22, scope: !7898)
!7905 = !DILocalVariable(name: "chrec", arg: 3, scope: !7898, file: !3, line: 2387, type: !998)
!7906 = !DILocation(line: 2387, column: 43, scope: !7898)
!7907 = !DILocalVariable(name: "code", arg: 4, scope: !7898, file: !3, line: 2388, type: !134)
!7908 = !DILocation(line: 2388, column: 24, scope: !7898)
!7909 = !DILocalVariable(name: "type", arg: 5, scope: !7898, file: !3, line: 2388, type: !998)
!7910 = !DILocation(line: 2388, column: 35, scope: !7898)
!7911 = !DILocalVariable(name: "op", arg: 6, scope: !7898, file: !3, line: 2388, type: !998)
!7912 = !DILocation(line: 2388, column: 46, scope: !7898)
!7913 = !DILocalVariable(name: "fold_conversions", arg: 7, scope: !7898, file: !3, line: 2389, type: !1118)
!7914 = !DILocation(line: 2389, column: 14, scope: !7898)
!7915 = !DILocalVariable(name: "cache", arg: 8, scope: !7898, file: !3, line: 2389, type: !1814)
!7916 = !DILocation(line: 2389, column: 39, scope: !7898)
!7917 = !DILocalVariable(name: "size_expr", arg: 9, scope: !7898, file: !3, line: 2389, type: !1095)
!7918 = !DILocation(line: 2389, column: 50, scope: !7898)
!7919 = !DILocalVariable(name: "op0", scope: !7898, file: !3, line: 2391, type: !998)
!7920 = !DILocation(line: 2391, column: 8, scope: !7898)
!7921 = !DILocation(line: 2391, column: 34, scope: !7898)
!7922 = !DILocation(line: 2391, column: 53, scope: !7898)
!7923 = !DILocation(line: 2391, column: 69, scope: !7898)
!7924 = !DILocation(line: 2392, column: 6, scope: !7898)
!7925 = !DILocation(line: 2392, column: 24, scope: !7898)
!7926 = !DILocation(line: 2392, column: 31, scope: !7898)
!7927 = !DILocation(line: 2391, column: 14, scope: !7898)
!7928 = !DILocation(line: 2394, column: 7, scope: !7929)
!7929 = distinct !DILexicalBlock(scope: !7898, file: !3, line: 2394, column: 7)
!7930 = !DILocation(line: 2394, column: 14, scope: !7929)
!7931 = !DILocation(line: 2394, column: 11, scope: !7929)
!7932 = !DILocation(line: 2394, column: 7, scope: !7898)
!7933 = !DILocation(line: 2395, column: 12, scope: !7929)
!7934 = !DILocation(line: 2395, column: 5, scope: !7929)
!7935 = !DILocation(line: 2397, column: 7, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7898, file: !3, line: 2397, column: 7)
!7937 = !DILocation(line: 2397, column: 13, scope: !7936)
!7938 = !DILocation(line: 2397, column: 10, scope: !7936)
!7939 = !DILocation(line: 2397, column: 7, scope: !7898)
!7940 = !DILocation(line: 2399, column: 28, scope: !7941)
!7941 = distinct !DILexicalBlock(scope: !7936, file: !3, line: 2398, column: 5)
!7942 = !DILocation(line: 2399, column: 34, scope: !7941)
!7943 = !DILocation(line: 2399, column: 13, scope: !7941)
!7944 = !DILocation(line: 2399, column: 11, scope: !7941)
!7945 = !DILocation(line: 2401, column: 15, scope: !7941)
!7946 = !DILocation(line: 2401, column: 7, scope: !7941)
!7947 = !DILocation(line: 2405, column: 7, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7941, file: !3, line: 2402, column: 2)
!7949 = !DILocation(line: 2405, column: 13, scope: !7948)
!7950 = !DILocation(line: 2405, column: 58, scope: !7948)
!7951 = !DILocation(line: 2404, column: 11, scope: !7948)
!7952 = !DILocation(line: 2404, column: 4, scope: !7948)
!7953 = !DILocation(line: 2409, column: 7, scope: !7948)
!7954 = !DILocation(line: 2409, column: 13, scope: !7948)
!7955 = !DILocation(line: 2409, column: 58, scope: !7948)
!7956 = !DILocation(line: 2408, column: 11, scope: !7948)
!7957 = !DILocation(line: 2408, column: 4, scope: !7948)
!7958 = !DILocation(line: 2412, column: 4, scope: !7948)
!7959 = !DILocation(line: 2413, column: 2, scope: !7948)
!7960 = !DILocation(line: 2414, column: 5, scope: !7941)
!7961 = !DILocation(line: 2416, column: 10, scope: !7898)
!7962 = !DILocation(line: 2416, column: 18, scope: !7898)
!7963 = !DILocation(line: 2416, column: 26, scope: !7898)
!7964 = !DILocation(line: 2416, column: 3, scope: !7898)
!7965 = !DILocation(line: 2417, column: 1, scope: !7898)
!7966 = distinct !DISubprogram(name: "instantiate_scev_3", scope: !3, file: !3, line: 2434, type: !3337, scopeLine: 2437, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!7967 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !7966, file: !3, line: 2434, type: !1782)
!7968 = !DILocation(line: 2434, column: 33, scope: !7966)
!7969 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !7966, file: !3, line: 2435, type: !1545)
!7970 = !DILocation(line: 2435, column: 20, scope: !7966)
!7971 = !DILocalVariable(name: "chrec", arg: 3, scope: !7966, file: !3, line: 2435, type: !998)
!7972 = !DILocation(line: 2435, column: 41, scope: !7966)
!7973 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !7966, file: !3, line: 2436, type: !1118)
!7974 = !DILocation(line: 2436, column: 12, scope: !7966)
!7975 = !DILocalVariable(name: "cache", arg: 5, scope: !7966, file: !3, line: 2436, type: !1814)
!7976 = !DILocation(line: 2436, column: 37, scope: !7966)
!7977 = !DILocalVariable(name: "size_expr", arg: 6, scope: !7966, file: !3, line: 2436, type: !1095)
!7978 = !DILocation(line: 2436, column: 48, scope: !7966)
!7979 = !DILocalVariable(name: "op1", scope: !7966, file: !3, line: 2438, type: !998)
!7980 = !DILocation(line: 2438, column: 8, scope: !7966)
!7981 = !DILocalVariable(name: "op2", scope: !7966, file: !3, line: 2438, type: !998)
!7982 = !DILocation(line: 2438, column: 13, scope: !7966)
!7983 = !DILocalVariable(name: "op0", scope: !7966, file: !3, line: 2439, type: !998)
!7984 = !DILocation(line: 2439, column: 8, scope: !7966)
!7985 = !DILocation(line: 2439, column: 34, scope: !7966)
!7986 = !DILocation(line: 2439, column: 53, scope: !7966)
!7987 = !DILocation(line: 2440, column: 6, scope: !7966)
!7988 = !DILocation(line: 2441, column: 6, scope: !7966)
!7989 = !DILocation(line: 2441, column: 24, scope: !7966)
!7990 = !DILocation(line: 2441, column: 31, scope: !7966)
!7991 = !DILocation(line: 2439, column: 14, scope: !7966)
!7992 = !DILocation(line: 2442, column: 7, scope: !7993)
!7993 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2442, column: 7)
!7994 = !DILocation(line: 2442, column: 14, scope: !7993)
!7995 = !DILocation(line: 2442, column: 11, scope: !7993)
!7996 = !DILocation(line: 2442, column: 7, scope: !7966)
!7997 = !DILocation(line: 2443, column: 12, scope: !7993)
!7998 = !DILocation(line: 2443, column: 5, scope: !7993)
!7999 = !DILocation(line: 2445, column: 29, scope: !7966)
!8000 = !DILocation(line: 2445, column: 48, scope: !7966)
!8001 = !DILocation(line: 2446, column: 8, scope: !7966)
!8002 = !DILocation(line: 2447, column: 8, scope: !7966)
!8003 = !DILocation(line: 2447, column: 26, scope: !7966)
!8004 = !DILocation(line: 2447, column: 33, scope: !7966)
!8005 = !DILocation(line: 2445, column: 9, scope: !7966)
!8006 = !DILocation(line: 2445, column: 7, scope: !7966)
!8007 = !DILocation(line: 2448, column: 7, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2448, column: 7)
!8009 = !DILocation(line: 2448, column: 14, scope: !8008)
!8010 = !DILocation(line: 2448, column: 11, scope: !8008)
!8011 = !DILocation(line: 2448, column: 7, scope: !7966)
!8012 = !DILocation(line: 2449, column: 12, scope: !8008)
!8013 = !DILocation(line: 2449, column: 5, scope: !8008)
!8014 = !DILocation(line: 2451, column: 29, scope: !7966)
!8015 = !DILocation(line: 2451, column: 48, scope: !7966)
!8016 = !DILocation(line: 2452, column: 8, scope: !7966)
!8017 = !DILocation(line: 2453, column: 8, scope: !7966)
!8018 = !DILocation(line: 2453, column: 26, scope: !7966)
!8019 = !DILocation(line: 2453, column: 33, scope: !7966)
!8020 = !DILocation(line: 2451, column: 9, scope: !7966)
!8021 = !DILocation(line: 2451, column: 7, scope: !7966)
!8022 = !DILocation(line: 2454, column: 7, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2454, column: 7)
!8024 = !DILocation(line: 2454, column: 14, scope: !8023)
!8025 = !DILocation(line: 2454, column: 11, scope: !8023)
!8026 = !DILocation(line: 2454, column: 7, scope: !7966)
!8027 = !DILocation(line: 2455, column: 12, scope: !8023)
!8028 = !DILocation(line: 2455, column: 5, scope: !8023)
!8029 = !DILocation(line: 2457, column: 7, scope: !8030)
!8030 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2457, column: 7)
!8031 = !DILocation(line: 2457, column: 14, scope: !8030)
!8032 = !DILocation(line: 2457, column: 11, scope: !8030)
!8033 = !DILocation(line: 2458, column: 7, scope: !8030)
!8034 = !DILocation(line: 2458, column: 10, scope: !8030)
!8035 = !DILocation(line: 2458, column: 17, scope: !8030)
!8036 = !DILocation(line: 2458, column: 14, scope: !8030)
!8037 = !DILocation(line: 2459, column: 7, scope: !8030)
!8038 = !DILocation(line: 2459, column: 10, scope: !8030)
!8039 = !DILocation(line: 2459, column: 17, scope: !8030)
!8040 = !DILocation(line: 2459, column: 14, scope: !8030)
!8041 = !DILocation(line: 2457, column: 7, scope: !7966)
!8042 = !DILocation(line: 2460, column: 12, scope: !8030)
!8043 = !DILocation(line: 2460, column: 5, scope: !8030)
!8044 = !DILocation(line: 2462, column: 10, scope: !7966)
!8045 = !DILocation(line: 2462, column: 3, scope: !7966)
!8046 = !DILocation(line: 2464, column: 1, scope: !7966)
!8047 = distinct !DISubprogram(name: "instantiate_scev_2", scope: !3, file: !3, line: 2481, type: !3337, scopeLine: 2484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8048 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !8047, file: !3, line: 2481, type: !1782)
!8049 = !DILocation(line: 2481, column: 33, scope: !8047)
!8050 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !8047, file: !3, line: 2482, type: !1545)
!8051 = !DILocation(line: 2482, column: 20, scope: !8047)
!8052 = !DILocalVariable(name: "chrec", arg: 3, scope: !8047, file: !3, line: 2482, type: !998)
!8053 = !DILocation(line: 2482, column: 41, scope: !8047)
!8054 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !8047, file: !3, line: 2483, type: !1118)
!8055 = !DILocation(line: 2483, column: 12, scope: !8047)
!8056 = !DILocalVariable(name: "cache", arg: 5, scope: !8047, file: !3, line: 2483, type: !1814)
!8057 = !DILocation(line: 2483, column: 37, scope: !8047)
!8058 = !DILocalVariable(name: "size_expr", arg: 6, scope: !8047, file: !3, line: 2483, type: !1095)
!8059 = !DILocation(line: 2483, column: 48, scope: !8047)
!8060 = !DILocalVariable(name: "op1", scope: !8047, file: !3, line: 2485, type: !998)
!8061 = !DILocation(line: 2485, column: 8, scope: !8047)
!8062 = !DILocalVariable(name: "op0", scope: !8047, file: !3, line: 2486, type: !998)
!8063 = !DILocation(line: 2486, column: 8, scope: !8047)
!8064 = !DILocation(line: 2486, column: 34, scope: !8047)
!8065 = !DILocation(line: 2486, column: 53, scope: !8047)
!8066 = !DILocation(line: 2487, column: 6, scope: !8047)
!8067 = !DILocation(line: 2488, column: 6, scope: !8047)
!8068 = !DILocation(line: 2488, column: 24, scope: !8047)
!8069 = !DILocation(line: 2488, column: 31, scope: !8047)
!8070 = !DILocation(line: 2486, column: 14, scope: !8047)
!8071 = !DILocation(line: 2489, column: 7, scope: !8072)
!8072 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 2489, column: 7)
!8073 = !DILocation(line: 2489, column: 14, scope: !8072)
!8074 = !DILocation(line: 2489, column: 11, scope: !8072)
!8075 = !DILocation(line: 2489, column: 7, scope: !8047)
!8076 = !DILocation(line: 2490, column: 12, scope: !8072)
!8077 = !DILocation(line: 2490, column: 5, scope: !8072)
!8078 = !DILocation(line: 2492, column: 29, scope: !8047)
!8079 = !DILocation(line: 2492, column: 48, scope: !8047)
!8080 = !DILocation(line: 2493, column: 8, scope: !8047)
!8081 = !DILocation(line: 2494, column: 8, scope: !8047)
!8082 = !DILocation(line: 2494, column: 26, scope: !8047)
!8083 = !DILocation(line: 2494, column: 33, scope: !8047)
!8084 = !DILocation(line: 2492, column: 9, scope: !8047)
!8085 = !DILocation(line: 2492, column: 7, scope: !8047)
!8086 = !DILocation(line: 2495, column: 7, scope: !8087)
!8087 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 2495, column: 7)
!8088 = !DILocation(line: 2495, column: 14, scope: !8087)
!8089 = !DILocation(line: 2495, column: 11, scope: !8087)
!8090 = !DILocation(line: 2495, column: 7, scope: !8047)
!8091 = !DILocation(line: 2496, column: 12, scope: !8087)
!8092 = !DILocation(line: 2496, column: 5, scope: !8087)
!8093 = !DILocation(line: 2498, column: 7, scope: !8094)
!8094 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 2498, column: 7)
!8095 = !DILocation(line: 2498, column: 14, scope: !8094)
!8096 = !DILocation(line: 2498, column: 11, scope: !8094)
!8097 = !DILocation(line: 2499, column: 7, scope: !8094)
!8098 = !DILocation(line: 2499, column: 10, scope: !8094)
!8099 = !DILocation(line: 2499, column: 17, scope: !8094)
!8100 = !DILocation(line: 2499, column: 14, scope: !8094)
!8101 = !DILocation(line: 2498, column: 7, scope: !8047)
!8102 = !DILocation(line: 2500, column: 12, scope: !8094)
!8103 = !DILocation(line: 2500, column: 5, scope: !8094)
!8104 = !DILocation(line: 2502, column: 10, scope: !8047)
!8105 = !DILocation(line: 2502, column: 3, scope: !8047)
!8106 = !DILocation(line: 2503, column: 1, scope: !8047)
!8107 = distinct !DISubprogram(name: "instantiate_scev_1", scope: !3, file: !3, line: 2520, type: !3337, scopeLine: 2523, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8108 = !DILocalVariable(name: "instantiate_below", arg: 1, scope: !8107, file: !3, line: 2520, type: !1782)
!8109 = !DILocation(line: 2520, column: 33, scope: !8107)
!8110 = !DILocalVariable(name: "evolution_loop", arg: 2, scope: !8107, file: !3, line: 2521, type: !1545)
!8111 = !DILocation(line: 2521, column: 20, scope: !8107)
!8112 = !DILocalVariable(name: "chrec", arg: 3, scope: !8107, file: !3, line: 2521, type: !998)
!8113 = !DILocation(line: 2521, column: 41, scope: !8107)
!8114 = !DILocalVariable(name: "fold_conversions", arg: 4, scope: !8107, file: !3, line: 2522, type: !1118)
!8115 = !DILocation(line: 2522, column: 12, scope: !8107)
!8116 = !DILocalVariable(name: "cache", arg: 5, scope: !8107, file: !3, line: 2522, type: !1814)
!8117 = !DILocation(line: 2522, column: 37, scope: !8107)
!8118 = !DILocalVariable(name: "size_expr", arg: 6, scope: !8107, file: !3, line: 2522, type: !1095)
!8119 = !DILocation(line: 2522, column: 48, scope: !8107)
!8120 = !DILocalVariable(name: "op0", scope: !8107, file: !3, line: 2524, type: !998)
!8121 = !DILocation(line: 2524, column: 8, scope: !8107)
!8122 = !DILocation(line: 2524, column: 34, scope: !8107)
!8123 = !DILocation(line: 2524, column: 53, scope: !8107)
!8124 = !DILocation(line: 2525, column: 6, scope: !8107)
!8125 = !DILocation(line: 2526, column: 6, scope: !8107)
!8126 = !DILocation(line: 2526, column: 24, scope: !8107)
!8127 = !DILocation(line: 2526, column: 31, scope: !8107)
!8128 = !DILocation(line: 2524, column: 14, scope: !8107)
!8129 = !DILocation(line: 2528, column: 7, scope: !8130)
!8130 = distinct !DILexicalBlock(scope: !8107, file: !3, line: 2528, column: 7)
!8131 = !DILocation(line: 2528, column: 14, scope: !8130)
!8132 = !DILocation(line: 2528, column: 11, scope: !8130)
!8133 = !DILocation(line: 2528, column: 7, scope: !8107)
!8134 = !DILocation(line: 2529, column: 12, scope: !8130)
!8135 = !DILocation(line: 2529, column: 5, scope: !8130)
!8136 = !DILocation(line: 2531, column: 7, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8107, file: !3, line: 2531, column: 7)
!8138 = !DILocation(line: 2531, column: 14, scope: !8137)
!8139 = !DILocation(line: 2531, column: 11, scope: !8137)
!8140 = !DILocation(line: 2531, column: 7, scope: !8107)
!8141 = !DILocation(line: 2532, column: 12, scope: !8137)
!8142 = !DILocation(line: 2532, column: 5, scope: !8137)
!8143 = !DILocation(line: 2534, column: 10, scope: !8107)
!8144 = !DILocation(line: 2534, column: 3, scope: !8107)
!8145 = !DILocation(line: 2535, column: 1, scope: !8107)
!8146 = distinct !DISubprogram(name: "get_instantiated_value", scope: !3, file: !3, line: 2064, type: !8147, scopeLine: 2066, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8147 = !DISubroutineType(types: !8148)
!8148 = !{!998, !1814, !1782, !998}
!8149 = !DILocalVariable(name: "cache", arg: 1, scope: !8146, file: !3, line: 2064, type: !1814)
!8150 = !DILocation(line: 2064, column: 32, scope: !8146)
!8151 = !DILocalVariable(name: "instantiated_below", arg: 2, scope: !8146, file: !3, line: 2064, type: !1782)
!8152 = !DILocation(line: 2064, column: 51, scope: !8146)
!8153 = !DILocalVariable(name: "version", arg: 3, scope: !8146, file: !3, line: 2065, type: !998)
!8154 = !DILocation(line: 2065, column: 9, scope: !8146)
!8155 = !DILocalVariable(name: "info", scope: !8146, file: !3, line: 2067, type: !2357)
!8156 = !DILocation(line: 2067, column: 25, scope: !8146)
!8157 = !DILocalVariable(name: "pattern", scope: !8146, file: !3, line: 2067, type: !2358)
!8158 = !DILocation(line: 2067, column: 31, scope: !8146)
!8159 = !DILocation(line: 2069, column: 17, scope: !8146)
!8160 = !DILocation(line: 2069, column: 11, scope: !8146)
!8161 = !DILocation(line: 2069, column: 15, scope: !8146)
!8162 = !DILocation(line: 2070, column: 32, scope: !8146)
!8163 = !DILocation(line: 2070, column: 11, scope: !8146)
!8164 = !DILocation(line: 2070, column: 30, scope: !8146)
!8165 = !DILocation(line: 2071, column: 46, scope: !8146)
!8166 = !DILocation(line: 2071, column: 53, scope: !8146)
!8167 = !DILocation(line: 2071, column: 35, scope: !8146)
!8168 = !DILocation(line: 2071, column: 10, scope: !8146)
!8169 = !DILocation(line: 2071, column: 8, scope: !8146)
!8170 = !DILocation(line: 2073, column: 7, scope: !8171)
!8171 = distinct !DILexicalBlock(scope: !8146, file: !3, line: 2073, column: 7)
!8172 = !DILocation(line: 2073, column: 7, scope: !8146)
!8173 = !DILocation(line: 2074, column: 12, scope: !8171)
!8174 = !DILocation(line: 2074, column: 18, scope: !8171)
!8175 = !DILocation(line: 2074, column: 5, scope: !8171)
!8176 = !DILocation(line: 2076, column: 5, scope: !8171)
!8177 = !DILocation(line: 2077, column: 1, scope: !8146)
!8178 = distinct !DISubprogram(name: "set_instantiated_value", scope: !3, file: !3, line: 2083, type: !8179, scopeLine: 2085, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8179 = !DISubroutineType(types: !8180)
!8180 = !{null, !1814, !1782, !998, !998}
!8181 = !DILocalVariable(name: "cache", arg: 1, scope: !8178, file: !3, line: 2083, type: !1814)
!8182 = !DILocation(line: 2083, column: 32, scope: !8178)
!8183 = !DILocalVariable(name: "instantiated_below", arg: 2, scope: !8178, file: !3, line: 2083, type: !1782)
!8184 = !DILocation(line: 2083, column: 51, scope: !8178)
!8185 = !DILocalVariable(name: "version", arg: 3, scope: !8178, file: !3, line: 2084, type: !998)
!8186 = !DILocation(line: 2084, column: 9, scope: !8178)
!8187 = !DILocalVariable(name: "val", arg: 4, scope: !8178, file: !3, line: 2084, type: !998)
!8188 = !DILocation(line: 2084, column: 23, scope: !8178)
!8189 = !DILocalVariable(name: "info", scope: !8178, file: !3, line: 2086, type: !2357)
!8190 = !DILocation(line: 2086, column: 25, scope: !8178)
!8191 = !DILocalVariable(name: "pattern", scope: !8178, file: !3, line: 2086, type: !2358)
!8192 = !DILocation(line: 2086, column: 31, scope: !8178)
!8193 = !DILocalVariable(name: "slot", scope: !8178, file: !3, line: 2087, type: !1837)
!8194 = !DILocation(line: 2087, column: 8, scope: !8178)
!8195 = !DILocation(line: 2089, column: 17, scope: !8178)
!8196 = !DILocation(line: 2089, column: 11, scope: !8178)
!8197 = !DILocation(line: 2089, column: 15, scope: !8178)
!8198 = !DILocation(line: 2090, column: 32, scope: !8178)
!8199 = !DILocation(line: 2090, column: 11, scope: !8178)
!8200 = !DILocation(line: 2090, column: 30, scope: !8178)
!8201 = !DILocation(line: 2091, column: 26, scope: !8178)
!8202 = !DILocation(line: 2091, column: 33, scope: !8178)
!8203 = !DILocation(line: 2091, column: 10, scope: !8178)
!8204 = !DILocation(line: 2091, column: 8, scope: !8178)
!8205 = !DILocation(line: 2093, column: 9, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 2093, column: 7)
!8207 = !DILocation(line: 2093, column: 8, scope: !8206)
!8208 = !DILocation(line: 2093, column: 7, scope: !8178)
!8209 = !DILocation(line: 2094, column: 32, scope: !8206)
!8210 = !DILocation(line: 2094, column: 52, scope: !8206)
!8211 = !DILocation(line: 2094, column: 13, scope: !8206)
!8212 = !DILocation(line: 2094, column: 6, scope: !8206)
!8213 = !DILocation(line: 2094, column: 11, scope: !8206)
!8214 = !DILocation(line: 2094, column: 5, scope: !8206)
!8215 = !DILocation(line: 2095, column: 36, scope: !8178)
!8216 = !DILocation(line: 2095, column: 35, scope: !8178)
!8217 = !DILocation(line: 2095, column: 10, scope: !8178)
!8218 = !DILocation(line: 2095, column: 8, scope: !8178)
!8219 = !DILocation(line: 2096, column: 17, scope: !8178)
!8220 = !DILocation(line: 2096, column: 3, scope: !8178)
!8221 = !DILocation(line: 2096, column: 9, scope: !8178)
!8222 = !DILocation(line: 2096, column: 15, scope: !8178)
!8223 = !DILocation(line: 2097, column: 1, scope: !8178)
!8224 = distinct !DISubprogram(name: "loop_closed_phi_def", scope: !3, file: !3, line: 2103, type: !8225, scopeLine: 2104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8225 = !DISubroutineType(types: !8226)
!8226 = !{!998, !998}
!8227 = !DILocalVariable(name: "var", arg: 1, scope: !8224, file: !3, line: 2103, type: !998)
!8228 = !DILocation(line: 2103, column: 27, scope: !8224)
!8229 = !DILocalVariable(name: "loop", scope: !8224, file: !3, line: 2105, type: !1545)
!8230 = !DILocation(line: 2105, column: 16, scope: !8224)
!8231 = !DILocalVariable(name: "exit", scope: !8224, file: !3, line: 2106, type: !1309)
!8232 = !DILocation(line: 2106, column: 8, scope: !8224)
!8233 = !DILocalVariable(name: "phi", scope: !8224, file: !3, line: 2107, type: !1329)
!8234 = !DILocation(line: 2107, column: 10, scope: !8224)
!8235 = !DILocalVariable(name: "psi", scope: !8224, file: !3, line: 2108, type: !4247)
!8236 = !DILocation(line: 2108, column: 24, scope: !8224)
!8237 = !DILocation(line: 2110, column: 7, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 2110, column: 7)
!8239 = !DILocation(line: 2110, column: 11, scope: !8238)
!8240 = !DILocation(line: 2111, column: 7, scope: !8238)
!8241 = !DILocation(line: 2111, column: 10, scope: !8238)
!8242 = !DILocation(line: 2111, column: 26, scope: !8238)
!8243 = !DILocation(line: 2110, column: 7, scope: !8224)
!8244 = !DILocation(line: 2112, column: 5, scope: !8238)
!8245 = !DILocation(line: 2114, column: 32, scope: !8224)
!8246 = !DILocation(line: 2114, column: 10, scope: !8224)
!8247 = !DILocation(line: 2114, column: 8, scope: !8224)
!8248 = !DILocation(line: 2115, column: 23, scope: !8224)
!8249 = !DILocation(line: 2115, column: 10, scope: !8224)
!8250 = !DILocation(line: 2115, column: 8, scope: !8224)
!8251 = !DILocation(line: 2116, column: 8, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 2116, column: 7)
!8253 = !DILocation(line: 2116, column: 7, scope: !8224)
!8254 = !DILocation(line: 2117, column: 5, scope: !8252)
!8255 = !DILocation(line: 2119, column: 30, scope: !8256)
!8256 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 2119, column: 3)
!8257 = !DILocation(line: 2119, column: 36, scope: !8256)
!8258 = !DILocation(line: 2119, column: 14, scope: !8256)
!8259 = !DILocation(line: 2119, column: 8, scope: !8256)
!8260 = !DILocation(line: 2119, column: 44, scope: !8261)
!8261 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 2119, column: 3)
!8262 = !DILocation(line: 2119, column: 43, scope: !8261)
!8263 = !DILocation(line: 2119, column: 3, scope: !8256)
!8264 = !DILocation(line: 2121, column: 13, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8261, file: !3, line: 2120, column: 5)
!8266 = !DILocation(line: 2121, column: 11, scope: !8265)
!8267 = !DILocation(line: 2122, column: 11, scope: !8268)
!8268 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 2122, column: 11)
!8269 = !DILocation(line: 2122, column: 48, scope: !8268)
!8270 = !DILocation(line: 2122, column: 45, scope: !8268)
!8271 = !DILocation(line: 2122, column: 11, scope: !8265)
!8272 = !DILocation(line: 2123, column: 9, scope: !8268)
!8273 = !DILocation(line: 2123, column: 2, scope: !8268)
!8274 = !DILocation(line: 2124, column: 5, scope: !8265)
!8275 = !DILocation(line: 2119, column: 61, scope: !8261)
!8276 = !DILocation(line: 2119, column: 3, scope: !8261)
!8277 = distinct !{!8277, !8263, !8278}
!8278 = !DILocation(line: 2124, column: 5, scope: !8256)
!8279 = !DILocation(line: 2126, column: 3, scope: !8224)
!8280 = !DILocation(line: 2127, column: 1, scope: !8224)
!8281 = distinct !DISubprogram(name: "gather_chrec_stats", scope: !3, file: !3, line: 2860, type: !8282, scopeLine: 2861, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8282 = !DISubroutineType(types: !8283)
!8283 = !{null, !998, !2369}
!8284 = !DILocalVariable(name: "chrec", arg: 1, scope: !8281, file: !3, line: 2860, type: !998)
!8285 = !DILocation(line: 2860, column: 26, scope: !8281)
!8286 = !DILocalVariable(name: "stats", arg: 2, scope: !8281, file: !3, line: 2860, type: !2369)
!8287 = !DILocation(line: 2860, column: 53, scope: !8281)
!8288 = !DILocation(line: 2862, column: 7, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 2862, column: 7)
!8290 = !DILocation(line: 2862, column: 17, scope: !8289)
!8291 = !DILocation(line: 2862, column: 21, scope: !8289)
!8292 = !DILocation(line: 2862, column: 32, scope: !8289)
!8293 = !DILocation(line: 2862, column: 7, scope: !8281)
!8294 = !DILocation(line: 2864, column: 16, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 2863, column: 5)
!8296 = !DILocation(line: 2864, column: 7, scope: !8295)
!8297 = !DILocation(line: 2865, column: 27, scope: !8295)
!8298 = !DILocation(line: 2865, column: 38, scope: !8295)
!8299 = !DILocation(line: 2865, column: 7, scope: !8295)
!8300 = !DILocation(line: 2866, column: 16, scope: !8295)
!8301 = !DILocation(line: 2866, column: 7, scope: !8295)
!8302 = !DILocation(line: 2867, column: 5, scope: !8295)
!8303 = !DILocation(line: 2869, column: 3, scope: !8281)
!8304 = !DILocation(line: 2869, column: 10, scope: !8281)
!8305 = !DILocation(line: 2869, column: 19, scope: !8281)
!8306 = !DILocation(line: 2871, column: 7, scope: !8307)
!8307 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 2871, column: 7)
!8308 = !DILocation(line: 2871, column: 13, scope: !8307)
!8309 = !DILocation(line: 2871, column: 7, scope: !8281)
!8310 = !DILocation(line: 2873, column: 7, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8307, file: !3, line: 2872, column: 5)
!8312 = !DILocation(line: 2873, column: 14, scope: !8311)
!8313 = !DILocation(line: 2873, column: 29, scope: !8311)
!8314 = !DILocation(line: 2874, column: 7, scope: !8311)
!8315 = !DILocation(line: 2877, column: 11, scope: !8281)
!8316 = !DILocation(line: 2877, column: 3, scope: !8281)
!8317 = !DILocation(line: 2880, column: 43, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8319, file: !3, line: 2880, column: 11)
!8319 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 2878, column: 5)
!8320 = !DILocation(line: 2880, column: 11, scope: !8318)
!8321 = !DILocation(line: 2880, column: 11, scope: !8319)
!8322 = !DILocation(line: 2882, column: 8, scope: !8323)
!8323 = distinct !DILexicalBlock(scope: !8324, file: !3, line: 2882, column: 8)
!8324 = distinct !DILexicalBlock(scope: !8318, file: !3, line: 2881, column: 2)
!8325 = !DILocation(line: 2882, column: 18, scope: !8323)
!8326 = !DILocation(line: 2882, column: 22, scope: !8323)
!8327 = !DILocation(line: 2882, column: 33, scope: !8323)
!8328 = !DILocation(line: 2882, column: 8, scope: !8324)
!8329 = !DILocation(line: 2883, column: 15, scope: !8323)
!8330 = !DILocation(line: 2883, column: 6, scope: !8323)
!8331 = !DILocation(line: 2884, column: 4, scope: !8324)
!8332 = !DILocation(line: 2884, column: 11, scope: !8324)
!8333 = !DILocation(line: 2884, column: 20, scope: !8324)
!8334 = !DILocation(line: 2885, column: 2, scope: !8324)
!8335 = !DILocation(line: 2886, column: 61, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8318, file: !3, line: 2886, column: 16)
!8337 = !DILocation(line: 2886, column: 16, scope: !8336)
!8338 = !DILocation(line: 2886, column: 16, scope: !8318)
!8339 = !DILocation(line: 2888, column: 8, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 2888, column: 8)
!8341 = distinct !DILexicalBlock(scope: !8336, file: !3, line: 2887, column: 2)
!8342 = !DILocation(line: 2888, column: 18, scope: !8340)
!8343 = !DILocation(line: 2888, column: 22, scope: !8340)
!8344 = !DILocation(line: 2888, column: 33, scope: !8340)
!8345 = !DILocation(line: 2888, column: 8, scope: !8341)
!8346 = !DILocation(line: 2889, column: 15, scope: !8340)
!8347 = !DILocation(line: 2889, column: 6, scope: !8340)
!8348 = !DILocation(line: 2890, column: 4, scope: !8341)
!8349 = !DILocation(line: 2890, column: 11, scope: !8341)
!8350 = !DILocation(line: 2890, column: 29, scope: !8341)
!8351 = !DILocation(line: 2891, column: 2, scope: !8341)
!8352 = !DILocation(line: 2894, column: 8, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 2894, column: 8)
!8354 = distinct !DILexicalBlock(scope: !8336, file: !3, line: 2893, column: 2)
!8355 = !DILocation(line: 2894, column: 18, scope: !8353)
!8356 = !DILocation(line: 2894, column: 22, scope: !8353)
!8357 = !DILocation(line: 2894, column: 33, scope: !8353)
!8358 = !DILocation(line: 2894, column: 8, scope: !8354)
!8359 = !DILocation(line: 2895, column: 15, scope: !8353)
!8360 = !DILocation(line: 2895, column: 6, scope: !8353)
!8361 = !DILocation(line: 2896, column: 4, scope: !8354)
!8362 = !DILocation(line: 2896, column: 11, scope: !8354)
!8363 = !DILocation(line: 2896, column: 25, scope: !8354)
!8364 = !DILocation(line: 2899, column: 7, scope: !8319)
!8365 = !DILocation(line: 2902, column: 7, scope: !8319)
!8366 = !DILocation(line: 2905, column: 36, scope: !8367)
!8367 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 2905, column: 7)
!8368 = !DILocation(line: 2905, column: 7, scope: !8367)
!8369 = !DILocation(line: 2905, column: 7, scope: !8281)
!8370 = !DILocation(line: 2907, column: 11, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8372, file: !3, line: 2907, column: 11)
!8372 = distinct !DILexicalBlock(scope: !8367, file: !3, line: 2906, column: 5)
!8373 = !DILocation(line: 2907, column: 21, scope: !8371)
!8374 = !DILocation(line: 2907, column: 25, scope: !8371)
!8375 = !DILocation(line: 2907, column: 36, scope: !8371)
!8376 = !DILocation(line: 2907, column: 11, scope: !8372)
!8377 = !DILocation(line: 2908, column: 11, scope: !8371)
!8378 = !DILocation(line: 2908, column: 2, scope: !8371)
!8379 = !DILocation(line: 2909, column: 7, scope: !8372)
!8380 = !DILocation(line: 2909, column: 14, scope: !8372)
!8381 = !DILocation(line: 2909, column: 29, scope: !8372)
!8382 = !DILocation(line: 2910, column: 5, scope: !8372)
!8383 = !DILocation(line: 2912, column: 7, scope: !8384)
!8384 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 2912, column: 7)
!8385 = !DILocation(line: 2912, column: 17, scope: !8384)
!8386 = !DILocation(line: 2912, column: 21, scope: !8384)
!8387 = !DILocation(line: 2912, column: 32, scope: !8384)
!8388 = !DILocation(line: 2912, column: 7, scope: !8281)
!8389 = !DILocation(line: 2913, column: 14, scope: !8384)
!8390 = !DILocation(line: 2913, column: 5, scope: !8384)
!8391 = !DILocation(line: 2914, column: 1, scope: !8281)
!8392 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2380, file: !2380, line: 32, type: !8393, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8393 = !DISubroutineType(types: !8394)
!8394 = !{!2378, !1095}
!8395 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8392, file: !2380, line: 32, type: !1095)
!8396 = !DILocation(line: 32, column: 1, scope: !8392)
!8397 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !330, file: !330, line: 85, type: !8398, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8398 = !DISubroutineType(types: !8399)
!8399 = !{!1095, !5333, !7, !3768}
!8400 = !DILocalVariable(name: "vec_", arg: 1, scope: !8397, file: !330, line: 85, type: !5333)
!8401 = !DILocation(line: 85, column: 1, scope: !8397)
!8402 = !DILocalVariable(name: "ix_", arg: 2, scope: !8397, file: !330, line: 85, type: !7)
!8403 = !DILocalVariable(name: "ptr", arg: 3, scope: !8397, file: !330, line: 85, type: !3768)
!8404 = !DILocation(line: 85, column: 1, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8397, file: !330, line: 85, column: 1)
!8406 = !DILocation(line: 85, column: 1, scope: !8407)
!8407 = distinct !DILexicalBlock(scope: !8405, file: !330, line: 85, column: 1)
!8408 = !DILocation(line: 85, column: 1, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8405, file: !330, line: 85, column: 1)
!8410 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2380, file: !2380, line: 31, type: !8411, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8411 = !DISubroutineType(types: !8412)
!8412 = !{!8413, !8414, !1095}
!8413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1095, size: 64)
!8414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2384, size: 64)
!8415 = !DILocalVariable(name: "vec_", arg: 1, scope: !8410, file: !2380, line: 31, type: !8414)
!8416 = !DILocation(line: 31, column: 1, scope: !8410)
!8417 = !DILocalVariable(name: "obj_", arg: 2, scope: !8410, file: !2380, line: 31, type: !1095)
!8418 = !DILocalVariable(name: "slot_", scope: !8410, file: !2380, line: 31, type: !8413)
!8419 = distinct !DISubprogram(name: "loop_outer", scope: !330, file: !330, line: 434, type: !8420, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8420 = !DISubroutineType(types: !8421)
!8421 = !{!1545, !2898}
!8422 = !DILocalVariable(name: "loop", arg: 1, scope: !8419, file: !330, line: 434, type: !2898)
!8423 = !DILocation(line: 434, column: 32, scope: !8419)
!8424 = !DILocalVariable(name: "n", scope: !8419, file: !330, line: 436, type: !7)
!8425 = !DILocation(line: 436, column: 12, scope: !8419)
!8426 = !DILocation(line: 436, column: 16, scope: !8419)
!8427 = !DILocation(line: 438, column: 7, scope: !8428)
!8428 = distinct !DILexicalBlock(scope: !8419, file: !330, line: 438, column: 7)
!8429 = !DILocation(line: 438, column: 9, scope: !8428)
!8430 = !DILocation(line: 438, column: 7, scope: !8419)
!8431 = !DILocation(line: 439, column: 5, scope: !8428)
!8432 = !DILocation(line: 441, column: 10, scope: !8419)
!8433 = !DILocation(line: 441, column: 3, scope: !8419)
!8434 = !DILocation(line: 442, column: 1, scope: !8419)
!8435 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !330, file: !330, line: 85, type: !8436, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8436 = !DISubroutineType(types: !8437)
!8437 = !{!7, !5333}
!8438 = !DILocalVariable(name: "vec_", arg: 1, scope: !8435, file: !330, line: 85, type: !5333)
!8439 = !DILocation(line: 85, column: 1, scope: !8435)
!8440 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2380, file: !2380, line: 31, type: !8441, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8441 = !DISubroutineType(types: !8442)
!8442 = !{!1095, !8443, !7, !8413}
!8443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8444, size: 64)
!8444 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2384)
!8445 = !DILocalVariable(name: "vec_", arg: 1, scope: !8440, file: !2380, line: 31, type: !8443)
!8446 = !DILocation(line: 31, column: 1, scope: !8440)
!8447 = !DILocalVariable(name: "ix_", arg: 2, scope: !8440, file: !2380, line: 31, type: !7)
!8448 = !DILocalVariable(name: "ptr", arg: 3, scope: !8440, file: !2380, line: 31, type: !8413)
!8449 = !DILocation(line: 31, column: 1, scope: !8450)
!8450 = distinct !DILexicalBlock(scope: !8440, file: !2380, line: 31, column: 1)
!8451 = !DILocation(line: 31, column: 1, scope: !8452)
!8452 = distinct !DILexicalBlock(scope: !8450, file: !2380, line: 31, column: 1)
!8453 = !DILocation(line: 31, column: 1, scope: !8454)
!8454 = distinct !DILexicalBlock(scope: !8450, file: !2380, line: 31, column: 1)
!8455 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2380, file: !2380, line: 32, type: !8456, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8456 = !DISubroutineType(types: !8457)
!8457 = !{null, !8458}
!8458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2378, size: 64)
!8459 = !DILocalVariable(name: "vec_", arg: 1, scope: !8455, file: !2380, line: 32, type: !8458)
!8460 = !DILocation(line: 32, column: 1, scope: !8455)
!8461 = !DILocation(line: 32, column: 1, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8455, file: !2380, line: 32, column: 1)
!8463 = distinct !DISubprogram(name: "get_exit_conditions_rec", scope: !3, file: !3, line: 962, type: !8464, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8464 = !DISubroutineType(types: !8465)
!8465 = !{null, !1545, !4223}
!8466 = !DILocalVariable(name: "loop", arg: 1, scope: !8463, file: !3, line: 962, type: !1545)
!8467 = !DILocation(line: 962, column: 39, scope: !8463)
!8468 = !DILocalVariable(name: "exit_conditions", arg: 2, scope: !8463, file: !3, line: 963, type: !4223)
!8469 = !DILocation(line: 963, column: 24, scope: !8463)
!8470 = !DILocation(line: 965, column: 8, scope: !8471)
!8471 = distinct !DILexicalBlock(scope: !8463, file: !3, line: 965, column: 7)
!8472 = !DILocation(line: 965, column: 7, scope: !8463)
!8473 = !DILocation(line: 966, column: 5, scope: !8471)
!8474 = !DILocation(line: 969, column: 28, scope: !8463)
!8475 = !DILocation(line: 969, column: 34, scope: !8463)
!8476 = !DILocation(line: 969, column: 41, scope: !8463)
!8477 = !DILocation(line: 969, column: 3, scope: !8463)
!8478 = !DILocation(line: 970, column: 28, scope: !8463)
!8479 = !DILocation(line: 970, column: 34, scope: !8463)
!8480 = !DILocation(line: 970, column: 40, scope: !8463)
!8481 = !DILocation(line: 970, column: 3, scope: !8463)
!8482 = !DILocation(line: 972, column: 20, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8463, file: !3, line: 972, column: 7)
!8484 = !DILocation(line: 972, column: 7, scope: !8483)
!8485 = !DILocation(line: 972, column: 7, scope: !8463)
!8486 = !DILocalVariable(name: "loop_condition", scope: !8487, file: !3, line: 974, type: !1329)
!8487 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 973, column: 5)
!8488 = !DILocation(line: 974, column: 14, scope: !8487)
!8489 = !DILocation(line: 974, column: 56, scope: !8487)
!8490 = !DILocation(line: 974, column: 31, scope: !8487)
!8491 = !DILocation(line: 976, column: 11, scope: !8492)
!8492 = distinct !DILexicalBlock(scope: !8487, file: !3, line: 976, column: 11)
!8493 = !DILocation(line: 976, column: 11, scope: !8487)
!8494 = !DILocation(line: 977, column: 2, scope: !8492)
!8495 = !DILocation(line: 978, column: 5, scope: !8487)
!8496 = !DILocation(line: 979, column: 1, scope: !8463)
!8497 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !391, file: !391, line: 34, type: !8498, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8498 = !DISubroutineType(types: !8499)
!8499 = !{!8500, !4223, !1329}
!8500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1329, size: 64)
!8501 = !DILocalVariable(name: "vec_", arg: 1, scope: !8497, file: !391, line: 34, type: !4223)
!8502 = !DILocation(line: 34, column: 1, scope: !8497)
!8503 = !DILocalVariable(name: "obj_", arg: 2, scope: !8497, file: !391, line: 34, type: !1329)
!8504 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !391, file: !391, line: 34, type: !8505, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8505 = !DISubroutineType(types: !8506)
!8506 = !{!1095, !4223, !1095}
!8507 = !DILocalVariable(name: "vec_", arg: 1, scope: !8504, file: !391, line: 34, type: !4223)
!8508 = !DILocation(line: 34, column: 1, scope: !8504)
!8509 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8504, file: !391, line: 34, type: !1095)
!8510 = !DILocalVariable(name: "extend", scope: !8504, file: !391, line: 34, type: !1095)
!8511 = !DILocation(line: 34, column: 1, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8504, file: !391, line: 34, column: 1)
!8513 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !391, file: !391, line: 33, type: !8514, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8514 = !DISubroutineType(types: !8515)
!8515 = !{!8500, !8516, !1329}
!8516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!8517 = !DILocalVariable(name: "vec_", arg: 1, scope: !8513, file: !391, line: 33, type: !8516)
!8518 = !DILocation(line: 33, column: 1, scope: !8513)
!8519 = !DILocalVariable(name: "obj_", arg: 2, scope: !8513, file: !391, line: 33, type: !1329)
!8520 = !DILocalVariable(name: "slot_", scope: !8513, file: !391, line: 33, type: !8500)
!8521 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !391, file: !391, line: 33, type: !8522, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8522 = !DISubroutineType(types: !8523)
!8523 = !{!1095, !8516, !1095}
!8524 = !DILocalVariable(name: "vec_", arg: 1, scope: !8521, file: !391, line: 33, type: !8516)
!8525 = !DILocation(line: 33, column: 1, scope: !8521)
!8526 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8521, file: !391, line: 33, type: !1095)
!8527 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !391, file: !391, line: 33, type: !8528, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8528 = !DISubroutineType(types: !8529)
!8529 = !{!1095, !8530, !7, !8500}
!8530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8531, size: 64)
!8531 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1868)
!8532 = !DILocalVariable(name: "vec_", arg: 1, scope: !8527, file: !391, line: 33, type: !8530)
!8533 = !DILocation(line: 33, column: 1, scope: !8527)
!8534 = !DILocalVariable(name: "ix_", arg: 2, scope: !8527, file: !391, line: 33, type: !7)
!8535 = !DILocalVariable(name: "ptr", arg: 3, scope: !8527, file: !391, line: 33, type: !8500)
!8536 = !DILocation(line: 33, column: 1, scope: !8537)
!8537 = distinct !DILexicalBlock(scope: !8527, file: !391, line: 33, column: 1)
!8538 = !DILocation(line: 33, column: 1, scope: !8539)
!8539 = distinct !DILexicalBlock(scope: !8537, file: !391, line: 33, column: 1)
!8540 = !DILocation(line: 33, column: 1, scope: !8541)
!8541 = distinct !DILexicalBlock(scope: !8537, file: !391, line: 33, column: 1)
!8542 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !8543, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8543 = !DISubroutineType(types: !8544)
!8544 = !{!7, !6390}
!8545 = !DILocalVariable(name: "vec_", arg: 1, scope: !8542, file: !343, line: 150, type: !6390)
!8546 = !DILocation(line: 150, column: 1, scope: !8542)
!8547 = distinct !DISubprogram(name: "gsi_start_bb", scope: !391, file: !391, line: 4418, type: !5000, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8548 = !DILocalVariable(name: "bb", arg: 1, scope: !8547, file: !391, line: 4418, type: !1782)
!8549 = !DILocation(line: 4418, column: 27, scope: !8547)
!8550 = !DILocalVariable(name: "i", scope: !8547, file: !391, line: 4420, type: !4247)
!8551 = !DILocation(line: 4420, column: 24, scope: !8547)
!8552 = !DILocalVariable(name: "seq", scope: !8547, file: !391, line: 4421, type: !1319)
!8553 = !DILocation(line: 4421, column: 14, scope: !8547)
!8554 = !DILocation(line: 4423, column: 17, scope: !8547)
!8555 = !DILocation(line: 4423, column: 9, scope: !8547)
!8556 = !DILocation(line: 4423, column: 7, scope: !8547)
!8557 = !DILocation(line: 4424, column: 29, scope: !8547)
!8558 = !DILocation(line: 4424, column: 11, scope: !8547)
!8559 = !DILocation(line: 4424, column: 5, scope: !8547)
!8560 = !DILocation(line: 4424, column: 9, scope: !8547)
!8561 = !DILocation(line: 4425, column: 11, scope: !8547)
!8562 = !DILocation(line: 4425, column: 5, scope: !8547)
!8563 = !DILocation(line: 4425, column: 9, scope: !8547)
!8564 = !DILocation(line: 4426, column: 10, scope: !8547)
!8565 = !DILocation(line: 4426, column: 5, scope: !8547)
!8566 = !DILocation(line: 4426, column: 8, scope: !8547)
!8567 = !DILocation(line: 4428, column: 3, scope: !8547)
!8568 = distinct !DISubprogram(name: "bb_seq", scope: !391, file: !391, line: 237, type: !8569, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8569 = !DISubroutineType(types: !8570)
!8570 = !{!1319, !4991}
!8571 = !DILocalVariable(name: "bb", arg: 1, scope: !8568, file: !391, line: 237, type: !4991)
!8572 = !DILocation(line: 237, column: 27, scope: !8568)
!8573 = !DILocation(line: 239, column: 13, scope: !8568)
!8574 = !DILocation(line: 239, column: 17, scope: !8568)
!8575 = !DILocation(line: 239, column: 23, scope: !8568)
!8576 = !DILocation(line: 239, column: 33, scope: !8568)
!8577 = !DILocation(line: 239, column: 36, scope: !8568)
!8578 = !DILocation(line: 239, column: 40, scope: !8568)
!8579 = !DILocation(line: 239, column: 43, scope: !8568)
!8580 = !DILocation(line: 239, column: 10, scope: !8568)
!8581 = !DILocation(line: 239, column: 53, scope: !8568)
!8582 = !DILocation(line: 239, column: 57, scope: !8568)
!8583 = !DILocation(line: 239, column: 60, scope: !8568)
!8584 = !DILocation(line: 239, column: 68, scope: !8568)
!8585 = !DILocation(line: 239, column: 3, scope: !8568)
!8586 = distinct !DISubprogram(name: "gimple_seq_first", scope: !391, file: !391, line: 159, type: !8587, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8587 = !DISubroutineType(types: !8588)
!8588 = !{!1324, !8589}
!8589 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !999, line: 67, baseType: !8590)
!8590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8591, size: 64)
!8591 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1321)
!8592 = !DILocalVariable(name: "s", arg: 1, scope: !8586, file: !391, line: 159, type: !8589)
!8593 = !DILocation(line: 159, column: 36, scope: !8586)
!8594 = !DILocation(line: 161, column: 10, scope: !8586)
!8595 = !DILocation(line: 161, column: 14, scope: !8586)
!8596 = !DILocation(line: 161, column: 17, scope: !8586)
!8597 = !DILocation(line: 161, column: 3, scope: !8586)
!8598 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !391, file: !391, line: 3100, type: !8599, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2429)
!8599 = !DISubroutineType(types: !8600)
!8600 = !{!8601, !1329, !7}
!8601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!8602 = !DILocalVariable(name: "gs", arg: 1, scope: !8598, file: !391, line: 3100, type: !1329)
!8603 = !DILocation(line: 3100, column: 24, scope: !8598)
!8604 = !DILocalVariable(name: "index", arg: 2, scope: !8598, file: !391, line: 3100, type: !7)
!8605 = !DILocation(line: 3100, column: 37, scope: !8598)
!8606 = !DILocation(line: 3103, column: 3, scope: !8598)
!8607 = !DILocation(line: 3104, column: 12, scope: !8598)
!8608 = !DILocation(line: 3104, column: 16, scope: !8598)
!8609 = !DILocation(line: 3104, column: 27, scope: !8598)
!8610 = !DILocation(line: 3104, column: 32, scope: !8598)
!8611 = !DILocation(line: 3104, column: 3, scope: !8598)
