; ModuleID = 'alias.c'
source_filename = "alias.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.VEC_alias_set_entry_gc = type { %struct.VEC_alias_set_entry_base }
%struct.VEC_alias_set_entry_base = type { i32, i32, [1 x %struct.alias_set_entry_d*] }
%struct.alias_set_entry_d = type { i32, i32, %struct.splay_tree_s* }
%struct.splay_tree_s = type { %struct.splay_tree_node_s*, i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8* }
%struct.splay_tree_node_s = type { i64, i64, %struct.splay_tree_node_s*, %struct.splay_tree_node_s* }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.cselib_val_struct = type { i32, i32, %struct.rtx_def*, %struct.elt_loc_list*, %struct.elt_list*, %struct.cselib_val_struct* }
%struct.elt_loc_list = type { %struct.elt_loc_list*, %struct.rtx_def*, %struct.rtx_def* }
%struct.elt_list = type { %struct.elt_list*, %struct.cselib_val_struct* }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.ao_ref_s = type { %union.tree_node*, %union.tree_node*, i64, i64, i64, i32, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }

@tree_code_type = external dso_local constant [0 x i32], align 4
@flag_strict_aliasing = external dso_local global i32, align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str = private unnamed_addr constant [8 x i8] c"alias.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@alias_sets = internal global %struct.VEC_alias_set_entry_gc* null, align 8, !dbg !0
@frame_set = internal global i32 -1, align 4, !dbg !2656
@reg_known_value_size = internal global i32 0, align 4, !dbg !2644
@reg_known_value = internal global %struct.rtx_def** null, align 8, !dbg !2642
@reg_known_equiv_p = internal global i8* null, align 8, !dbg !2646
@reg_base_value = internal global %struct.VEC_rtx_gc* null, align 8, !dbg !2631
@mode_size = external dso_local global [87 x i8], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@pic_offset_table_rtx = external dso_local global %struct.rtx_def*, align 8
@flag_argument_noalias = external dso_local global i32, align 4
@static_reg_base_value = internal global [53 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2637
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@memory_modified = internal global i8 0, align 1, !dbg !2654
@timevar_enable = external dso_local global i8, align 1
@old_reg_base_value = internal global %struct.VEC_rtx_gc* null, align 8, !dbg !2635
@new_reg_base_value = internal global %struct.rtx_def** null, align 8, !dbg !2633
@reg_seen = internal global i8* null, align 8, !dbg !2650
@unique_id = internal global i32 0, align 4, !dbg !2652
@copying_arguments = internal global i8 0, align 1, !dbg !2648
@reload_completed = external dso_local global i32, align 4
@df = external dso_local global %struct.df*, align 8
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@gt_ggc_r_gt_alias_h = dso_local constant [5 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.VEC_alias_set_entry_gc** @alias_sets to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_VEC_alias_set_entry_gc, void (i8*)* @gt_pch_nx_VEC_alias_set_entry_gc }, %struct.ggc_root_tab { i8* bitcast (%struct.rtx_def*** @reg_known_value to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_ma_reg_known_value, void (i8*)* @gt_pch_na_reg_known_value }, %struct.ggc_root_tab { i8* bitcast ([53 x %struct.rtx_def*]* @static_reg_base_value to i8*), i64 53, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { i8* bitcast (%struct.VEC_rtx_gc** @reg_base_value to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_VEC_rtx_gc, void (i8*)* @gt_pch_nx_VEC_rtx_gc }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2609
@gt_ggc_rd_gt_alias_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.VEC_rtx_gc** @old_reg_base_value to i8*), i64 1, i64 8, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2625
@varargs_set = internal global i32 -1, align 4, !dbg !2658
@gt_pch_rs_gt_alias_h = dso_local constant [4 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @frame_set to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @varargs_set to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @reg_known_value_size to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2628
@flag_expensive_optimizations = external dso_local global i32, align 4
@mode_inner = external dso_local constant [87 x i8], align 16
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@cfun = external dso_local global %struct.function*, align 8
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@fixed_regs = external dso_local global [53 x i8], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @alias_set_subset_of(i32 %set1, i32 %set2) #0 !dbg !2664 {
entry:
  %retval = alloca i8, align 1
  %set1.addr = alloca i32, align 4
  %set2.addr = alloca i32, align 4
  %ase = alloca %struct.alias_set_entry_d*, align 8
  store i32 %set1, i32* %set1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set1.addr, metadata !2668, metadata !DIExpression()), !dbg !2669
  store i32 %set2, i32* %set2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set2.addr, metadata !2670, metadata !DIExpression()), !dbg !2671
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %ase, metadata !2672, metadata !DIExpression()), !dbg !2673
  %0 = load i32, i32* %set2.addr, align 4, !dbg !2674
  %cmp = icmp eq i32 %0, 0, !dbg !2676
  br i1 %cmp, label %if.then, label %if.end, !dbg !2677

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !2678
  br label %return, !dbg !2678

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %set2.addr, align 4, !dbg !2679
  %call = call %struct.alias_set_entry_d* @get_alias_set_entry(i32 %1), !dbg !2680
  store %struct.alias_set_entry_d* %call, %struct.alias_set_entry_d** %ase, align 8, !dbg !2681
  %2 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2682
  %cmp1 = icmp ne %struct.alias_set_entry_d* %2, null, !dbg !2684
  br i1 %cmp1, label %land.lhs.true, label %if.end7, !dbg !2685

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2686
  %has_zero_child = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %3, i32 0, i32 1, !dbg !2687
  %4 = load i32, i32* %has_zero_child, align 4, !dbg !2687
  %tobool = icmp ne i32 %4, 0, !dbg !2686
  br i1 %tobool, label %land.lhs.true2, label %lor.lhs.false, !dbg !2688

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load i32, i32* %set1.addr, align 4, !dbg !2689
  %cmp3 = icmp eq i32 %5, 0, !dbg !2690
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !2691

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true
  %6 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2692
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %6, i32 0, i32 2, !dbg !2693
  %7 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children, align 8, !dbg !2693
  %8 = load i32, i32* %set1.addr, align 4, !dbg !2694
  %conv = sext i32 %8 to i64, !dbg !2695
  %call4 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %7, i64 %conv), !dbg !2696
  %tobool5 = icmp ne %struct.splay_tree_node_s* %call4, null, !dbg !2696
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !2697

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true2
  store i8 1, i8* %retval, align 1, !dbg !2698
  br label %return, !dbg !2698

if.end7:                                          ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !2699
  br label %return, !dbg !2699

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !2700
  ret i8 %9, !dbg !2700
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_set_entry_d* @get_alias_set_entry(i32 %alias_set) #0 !dbg !2701 {
entry:
  %alias_set.addr = alloca i32, align 4
  store i32 %alias_set, i32* %alias_set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alias_set.addr, metadata !2704, metadata !DIExpression()), !dbg !2705
  %0 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !2706
  %tobool = icmp ne %struct.VEC_alias_set_entry_gc* %0, null, !dbg !2706
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2706

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !2706
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %1, i32 0, i32 0, !dbg !2706
  br label %cond.end, !dbg !2706

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2706

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_set_entry_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2706
  %2 = load i32, i32* %alias_set.addr, align 4, !dbg !2706
  %call = call %struct.alias_set_entry_d* @VEC_alias_set_entry_base_index(%struct.VEC_alias_set_entry_base* %cond, i32 %2), !dbg !2706
  ret %struct.alias_set_entry_d* %call, !dbg !2707
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alias_sets_conflict_p(i32 %set1, i32 %set2) #0 !dbg !2708 {
entry:
  %retval = alloca i32, align 4
  %set1.addr = alloca i32, align 4
  %set2.addr = alloca i32, align 4
  %ase = alloca %struct.alias_set_entry_d*, align 8
  store i32 %set1, i32* %set1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set1.addr, metadata !2711, metadata !DIExpression()), !dbg !2712
  store i32 %set2, i32* %set2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set2.addr, metadata !2713, metadata !DIExpression()), !dbg !2714
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %ase, metadata !2715, metadata !DIExpression()), !dbg !2716
  %0 = load i32, i32* %set1.addr, align 4, !dbg !2717
  %1 = load i32, i32* %set2.addr, align 4, !dbg !2719
  %call = call i32 @alias_sets_must_conflict_p(i32 %0, i32 %1), !dbg !2720
  %tobool = icmp ne i32 %call, 0, !dbg !2720
  br i1 %tobool, label %if.then, label %if.end, !dbg !2721

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !2722
  br label %return, !dbg !2722

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %set1.addr, align 4, !dbg !2723
  %call1 = call %struct.alias_set_entry_d* @get_alias_set_entry(i32 %2), !dbg !2724
  store %struct.alias_set_entry_d* %call1, %struct.alias_set_entry_d** %ase, align 8, !dbg !2725
  %3 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2726
  %cmp = icmp ne %struct.alias_set_entry_d* %3, null, !dbg !2728
  br i1 %cmp, label %land.lhs.true, label %if.end6, !dbg !2729

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2730
  %has_zero_child = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %4, i32 0, i32 1, !dbg !2731
  %5 = load i32, i32* %has_zero_child, align 4, !dbg !2731
  %tobool2 = icmp ne i32 %5, 0, !dbg !2730
  br i1 %tobool2, label %if.then5, label %lor.lhs.false, !dbg !2732

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2733
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %6, i32 0, i32 2, !dbg !2734
  %7 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children, align 8, !dbg !2734
  %8 = load i32, i32* %set2.addr, align 4, !dbg !2735
  %conv = sext i32 %8 to i64, !dbg !2736
  %call3 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %7, i64 %conv), !dbg !2737
  %tobool4 = icmp ne %struct.splay_tree_node_s* %call3, null, !dbg !2737
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2738

if.then5:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !2739
  br label %return, !dbg !2739

if.end6:                                          ; preds = %lor.lhs.false, %if.end
  %9 = load i32, i32* %set2.addr, align 4, !dbg !2740
  %call7 = call %struct.alias_set_entry_d* @get_alias_set_entry(i32 %9), !dbg !2741
  store %struct.alias_set_entry_d* %call7, %struct.alias_set_entry_d** %ase, align 8, !dbg !2742
  %10 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2743
  %cmp8 = icmp ne %struct.alias_set_entry_d* %10, null, !dbg !2745
  br i1 %cmp8, label %land.lhs.true10, label %if.end19, !dbg !2746

land.lhs.true10:                                  ; preds = %if.end6
  %11 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2747
  %has_zero_child11 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %11, i32 0, i32 1, !dbg !2748
  %12 = load i32, i32* %has_zero_child11, align 4, !dbg !2748
  %tobool12 = icmp ne i32 %12, 0, !dbg !2747
  br i1 %tobool12, label %if.then18, label %lor.lhs.false13, !dbg !2749

lor.lhs.false13:                                  ; preds = %land.lhs.true10
  %13 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %ase, align 8, !dbg !2750
  %children14 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %13, i32 0, i32 2, !dbg !2751
  %14 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children14, align 8, !dbg !2751
  %15 = load i32, i32* %set1.addr, align 4, !dbg !2752
  %conv15 = sext i32 %15 to i64, !dbg !2753
  %call16 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %14, i64 %conv15), !dbg !2754
  %tobool17 = icmp ne %struct.splay_tree_node_s* %call16, null, !dbg !2754
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !2755

if.then18:                                        ; preds = %lor.lhs.false13, %land.lhs.true10
  store i32 1, i32* %retval, align 4, !dbg !2756
  br label %return, !dbg !2756

if.end19:                                         ; preds = %lor.lhs.false13, %if.end6
  store i32 0, i32* %retval, align 4, !dbg !2757
  br label %return, !dbg !2757

return:                                           ; preds = %if.end19, %if.then18, %if.then5, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !2758
  ret i32 %16, !dbg !2758
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alias_sets_must_conflict_p(i32 %set1, i32 %set2) #0 !dbg !2759 {
entry:
  %retval = alloca i32, align 4
  %set1.addr = alloca i32, align 4
  %set2.addr = alloca i32, align 4
  store i32 %set1, i32* %set1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set1.addr, metadata !2760, metadata !DIExpression()), !dbg !2761
  store i32 %set2, i32* %set2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set2.addr, metadata !2762, metadata !DIExpression()), !dbg !2763
  %0 = load i32, i32* %set1.addr, align 4, !dbg !2764
  %cmp = icmp eq i32 %0, 0, !dbg !2766
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2767

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %set2.addr, align 4, !dbg !2768
  %cmp1 = icmp eq i32 %1, 0, !dbg !2769
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !2770

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %set1.addr, align 4, !dbg !2771
  %3 = load i32, i32* %set2.addr, align 4, !dbg !2772
  %cmp3 = icmp eq i32 %2, %3, !dbg !2773
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2774

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !2775
  br label %return, !dbg !2775

if.end:                                           ; preds = %lor.lhs.false2
  store i32 0, i32* %retval, align 4, !dbg !2776
  br label %return, !dbg !2776

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !2777
  ret i32 %4, !dbg !2777
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @insn_alias_sets_conflict_p(%struct.rtx_def* %insn1, %struct.rtx_def* %insn2) #0 !dbg !2778 {
entry:
  %insn1.addr = alloca %struct.rtx_def*, align 8
  %insn2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn1, %struct.rtx_def** %insn1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn1.addr, metadata !2781, metadata !DIExpression()), !dbg !2782
  store %struct.rtx_def* %insn2, %struct.rtx_def** %insn2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2.addr, metadata !2783, metadata !DIExpression()), !dbg !2784
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !2785
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2785
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2785
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !2785
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2785
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !2786
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !2786
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !2786
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !2786
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !2786
  %2 = bitcast %struct.rtx_def** %rt_rtx4 to i8*, !dbg !2787
  %call = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx, i32 (%struct.rtx_def**, i8*)* bitcast (i32 (%struct.rtx_def**, %struct.rtx_def**)* @walk_mems_1 to i32 (%struct.rtx_def**, i8*)*), i8* %2), !dbg !2788
  %conv = trunc i32 %call to i8, !dbg !2788
  ret i8 %conv, !dbg !2789
}

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @walk_mems_1(%struct.rtx_def** %x, %struct.rtx_def** %pat) #0 !dbg !2790 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def**, align 8
  %pat.addr = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def** %x, %struct.rtx_def*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %x.addr, metadata !2793, metadata !DIExpression()), !dbg !2794
  store %struct.rtx_def** %pat, %struct.rtx_def*** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %pat.addr, metadata !2795, metadata !DIExpression()), !dbg !2796
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !2797
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !2797
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !2797
  %bf.load = load i32, i32* %2, align 8, !dbg !2797
  %bf.clear = and i32 %bf.load, 65535, !dbg !2797
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !2797
  br i1 %cmp, label %if.then, label %if.end2, !dbg !2799

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !2800
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !2803
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8, !dbg !2804
  %6 = bitcast %struct.rtx_def* %5 to i8*, !dbg !2804
  %call = call i32 @for_each_rtx(%struct.rtx_def** %3, i32 (%struct.rtx_def**, i8*)* bitcast (i32 (%struct.rtx_def**, %struct.rtx_def*)* @walk_mems_2 to i32 (%struct.rtx_def**, i8*)*), i8* %6), !dbg !2805
  %tobool = icmp ne i32 %call, 0, !dbg !2805
  br i1 %tobool, label %if.then1, label %if.end, !dbg !2806

if.then1:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !2807
  br label %return, !dbg !2807

if.end:                                           ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !2808
  br label %return, !dbg !2808

if.end2:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2809
  br label %return, !dbg !2809

return:                                           ; preds = %if.end2, %if.end, %if.then1
  %7 = load i32, i32* %retval, align 4, !dbg !2810
  ret i32 %7, !dbg !2810
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @objects_must_conflict_p(%union.tree_node* %t1, %union.tree_node* %t2) #0 !dbg !2811 {
entry:
  %retval = alloca i32, align 4
  %t1.addr = alloca %union.tree_node*, align 8
  %t2.addr = alloca %union.tree_node*, align 8
  %set1 = alloca i32, align 4
  %set2 = alloca i32, align 4
  store %union.tree_node* %t1, %union.tree_node** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1.addr, metadata !2814, metadata !DIExpression()), !dbg !2815
  store %union.tree_node* %t2, %union.tree_node** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2.addr, metadata !2816, metadata !DIExpression()), !dbg !2817
  call void @llvm.dbg.declare(metadata i32* %set1, metadata !2818, metadata !DIExpression()), !dbg !2819
  call void @llvm.dbg.declare(metadata i32* %set2, metadata !2820, metadata !DIExpression()), !dbg !2821
  %0 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2822
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2824
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2825

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2826
  %cmp1 = icmp eq %union.tree_node* %1, null, !dbg !2827
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2828

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !2829
  br label %return, !dbg !2829

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2830
  %3 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2832
  %cmp2 = icmp eq %union.tree_node* %2, %3, !dbg !2833
  br i1 %cmp2, label %if.then14, label %lor.lhs.false, !dbg !2834

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2835
  %cmp3 = icmp ne %union.tree_node* %4, null, !dbg !2836
  br i1 %cmp3, label %land.lhs.true4, label %if.end15, !dbg !2837

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2838
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2838
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !2838
  %bf.load = load i64, i64* %6, align 8, !dbg !2838
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !2838
  %bf.clear = and i64 %bf.lshr, 1, !dbg !2838
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2838
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !2838
  br i1 %tobool, label %land.lhs.true5, label %if.end15, !dbg !2839

land.lhs.true5:                                   ; preds = %land.lhs.true4
  %7 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2840
  %cmp6 = icmp ne %union.tree_node* %7, null, !dbg !2841
  br i1 %cmp6, label %land.lhs.true7, label %if.end15, !dbg !2842

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %8 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2843
  %base8 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !2843
  %9 = bitcast %struct.tree_base* %base8 to i64*, !dbg !2843
  %bf.load9 = load i64, i64* %9, align 8, !dbg !2843
  %bf.lshr10 = lshr i64 %bf.load9, 19, !dbg !2843
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !2843
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !2843
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !2843
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !2844

if.then14:                                        ; preds = %land.lhs.true7, %if.end
  store i32 1, i32* %retval, align 4, !dbg !2845
  br label %return, !dbg !2845

if.end15:                                         ; preds = %land.lhs.true7, %land.lhs.true5, %land.lhs.true4, %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2846
  %tobool16 = icmp ne %union.tree_node* %10, null, !dbg !2846
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !2846

cond.true:                                        ; preds = %if.end15
  %11 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !2847
  %call = call i32 @get_alias_set(%union.tree_node* %11), !dbg !2848
  br label %cond.end, !dbg !2846

cond.false:                                       ; preds = %if.end15
  br label %cond.end, !dbg !2846

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 0, %cond.false ], !dbg !2846
  store i32 %cond, i32* %set1, align 4, !dbg !2849
  %12 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2850
  %tobool17 = icmp ne %union.tree_node* %12, null, !dbg !2850
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !2850

cond.true18:                                      ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !2851
  %call19 = call i32 @get_alias_set(%union.tree_node* %13), !dbg !2852
  br label %cond.end21, !dbg !2850

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21, !dbg !2850

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %call19, %cond.true18 ], [ 0, %cond.false20 ], !dbg !2850
  store i32 %cond22, i32* %set2, align 4, !dbg !2853
  %14 = load i32, i32* %set1, align 4, !dbg !2854
  %15 = load i32, i32* %set2, align 4, !dbg !2855
  %call23 = call i32 @alias_sets_must_conflict_p(i32 %14, i32 %15), !dbg !2856
  store i32 %call23, i32* %retval, align 4, !dbg !2857
  br label %return, !dbg !2857

return:                                           ; preds = %cond.end21, %if.then14, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !2858
  ret i32 %16, !dbg !2858
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_alias_set(%union.tree_node* %t) #0 !dbg !2859 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %set = alloca i32, align 4
  %inner = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !2862, metadata !DIExpression()), !dbg !2863
  call void @llvm.dbg.declare(metadata i32* %set, metadata !2864, metadata !DIExpression()), !dbg !2865
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !2866
  %tobool = icmp ne i32 %0, 0, !dbg !2866
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2868

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2869
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !2870
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !2871
  br i1 %cmp, label %if.then, label %lor.lhs.false1, !dbg !2872

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2873
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2873
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2873
  %bf.load = load i64, i64* %4, align 8, !dbg !2873
  %bf.clear = and i64 %bf.load, 65535, !dbg !2873
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2873
  %idxprom = sext i32 %bf.cast to i64, !dbg !2873
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2873
  %5 = load i32, i32* %arrayidx, align 4, !dbg !2873
  %cmp2 = icmp eq i32 %5, 2, !dbg !2873
  br i1 %cmp2, label %if.end, label %land.lhs.true, !dbg !2874

land.lhs.true:                                    ; preds = %lor.lhs.false1
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2875
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !2875
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2875
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2875
  %cmp3 = icmp eq %union.tree_node* %7, null, !dbg !2876
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !2877

lor.lhs.false4:                                   ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2878
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !2878
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !2878
  %9 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !2878
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !2879
  %cmp7 = icmp eq %union.tree_node* %9, %10, !dbg !2880
  br i1 %cmp7, label %if.then, label %if.end, !dbg !2881

if.then:                                          ; preds = %lor.lhs.false4, %land.lhs.true, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !2882
  br label %return, !dbg !2882

if.end:                                           ; preds = %lor.lhs.false4, %lor.lhs.false1
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2883
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !2883
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !2883
  %bf.load9 = load i64, i64* %12, align 8, !dbg !2883
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !2883
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !2883
  %idxprom12 = sext i32 %bf.cast11 to i64, !dbg !2883
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom12, !dbg !2883
  %13 = load i32, i32* %arrayidx13, align 4, !dbg !2883
  %cmp14 = icmp eq i32 %13, 2, !dbg !2883
  br i1 %cmp14, label %if.end135, label %if.then15, !dbg !2885

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !2886, metadata !DIExpression()), !dbg !2888
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2889
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %14), !dbg !2889
  store %union.tree_node* %call, %union.tree_node** %t.addr, align 8, !dbg !2889
  %15 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 13), align 8, !dbg !2890
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2891
  %call16 = call i32 %15(%union.tree_node* %16), !dbg !2892
  store i32 %call16, i32* %set, align 4, !dbg !2893
  %17 = load i32, i32* %set, align 4, !dbg !2894
  %cmp17 = icmp ne i32 %17, -1, !dbg !2896
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !2897

if.then18:                                        ; preds = %if.then15
  %18 = load i32, i32* %set, align 4, !dbg !2898
  store i32 %18, i32* %retval, align 4, !dbg !2899
  br label %return, !dbg !2899

if.end19:                                         ; preds = %if.then15
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2900
  %base20 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !2900
  %20 = bitcast %struct.tree_base* %base20 to i64*, !dbg !2900
  %bf.load21 = load i64, i64* %20, align 8, !dbg !2900
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !2900
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !2900
  %cmp24 = icmp eq i32 %bf.cast23, 152, !dbg !2902
  br i1 %cmp24, label %if.then25, label %if.end27, !dbg !2903

if.then25:                                        ; preds = %if.end19
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2904
  %exp = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !2904
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2904
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 5, !dbg !2904
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !2904
  store %union.tree_node* %22, %union.tree_node** %t.addr, align 8, !dbg !2905
  br label %if.end27, !dbg !2906

if.end27:                                         ; preds = %if.then25, %if.end19
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2907
  store %union.tree_node* %23, %union.tree_node** %inner, align 8, !dbg !2908
  br label %while.cond, !dbg !2909

while.cond:                                       ; preds = %while.body, %if.end27
  %24 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2910
  %call28 = call zeroext i8 @handled_component_p(%union.tree_node* %24), !dbg !2911
  %tobool29 = icmp ne i8 %call28, 0, !dbg !2909
  br i1 %tobool29, label %while.body, label %while.end, !dbg !2909

while.body:                                       ; preds = %while.cond
  %25 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2912
  %exp30 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !2912
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !2912
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 0, !dbg !2912
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !2912
  store %union.tree_node* %26, %union.tree_node** %inner, align 8, !dbg !2914
  %27 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2915
  %call33 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %27), !dbg !2915
  store %union.tree_node* %call33, %union.tree_node** %inner, align 8, !dbg !2915
  br label %while.cond, !dbg !2909, !llvm.loop !2916

while.end:                                        ; preds = %while.cond
  %28 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2918
  %base34 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !2918
  %29 = bitcast %struct.tree_base* %base34 to i64*, !dbg !2918
  %bf.load35 = load i64, i64* %29, align 8, !dbg !2918
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !2918
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !2918
  %cmp38 = icmp eq i32 %bf.cast37, 47, !dbg !2918
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39, !dbg !2918

lor.lhs.false39:                                  ; preds = %while.end
  %30 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2918
  %base40 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !2918
  %31 = bitcast %struct.tree_base* %base40 to i64*, !dbg !2918
  %bf.load41 = load i64, i64* %31, align 8, !dbg !2918
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !2918
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !2918
  %cmp44 = icmp eq i32 %bf.cast43, 48, !dbg !2918
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45, !dbg !2918

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %32 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2918
  %base46 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !2918
  %33 = bitcast %struct.tree_base* %base46 to i64*, !dbg !2918
  %bf.load47 = load i64, i64* %33, align 8, !dbg !2918
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !2918
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !2918
  %cmp50 = icmp eq i32 %bf.cast49, 49, !dbg !2918
  br i1 %cmp50, label %if.then51, label %if.end59, !dbg !2920

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %while.end
  %34 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !2921
  %exp52 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !2921
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 3, !dbg !2921
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i64 0, i64 0, !dbg !2921
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8, !dbg !2921
  %call55 = call i32 @get_deref_alias_set_1(%union.tree_node* %35), !dbg !2923
  store i32 %call55, i32* %set, align 4, !dbg !2924
  %36 = load i32, i32* %set, align 4, !dbg !2925
  %cmp56 = icmp ne i32 %36, -1, !dbg !2927
  br i1 %cmp56, label %if.then57, label %if.end58, !dbg !2928

if.then57:                                        ; preds = %if.then51
  %37 = load i32, i32* %set, align 4, !dbg !2929
  store i32 %37, i32* %retval, align 4, !dbg !2930
  br label %return, !dbg !2930

if.end58:                                         ; preds = %if.then51
  br label %if.end59, !dbg !2931

if.end59:                                         ; preds = %if.end58, %lor.lhs.false45
  br label %while.cond60, !dbg !2932

while.cond60:                                     ; preds = %while.body63, %if.end59
  %38 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2933
  %call61 = call zeroext i8 @component_uses_parent_alias_set(%union.tree_node* %38), !dbg !2934
  %tobool62 = icmp ne i8 %call61, 0, !dbg !2932
  br i1 %tobool62, label %while.body63, label %while.end68, !dbg !2932

while.body63:                                     ; preds = %while.cond60
  %39 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2935
  %exp64 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !2935
  %operands65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp64, i32 0, i32 3, !dbg !2935
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands65, i64 0, i64 0, !dbg !2935
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx66, align 8, !dbg !2935
  store %union.tree_node* %40, %union.tree_node** %t.addr, align 8, !dbg !2937
  %41 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2938
  %call67 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %41), !dbg !2938
  store %union.tree_node* %call67, %union.tree_node** %t.addr, align 8, !dbg !2938
  br label %while.cond60, !dbg !2932, !llvm.loop !2939

while.end68:                                      ; preds = %while.cond60
  %42 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2941
  %base69 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !2941
  %43 = bitcast %struct.tree_base* %base69 to i64*, !dbg !2941
  %bf.load70 = load i64, i64* %43, align 8, !dbg !2941
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !2941
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !2941
  %cmp73 = icmp eq i32 %bf.cast72, 32, !dbg !2943
  br i1 %cmp73, label %land.lhs.true74, label %if.end132, !dbg !2944

land.lhs.true74:                                  ; preds = %while.end68
  %44 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2945
  %base75 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !2945
  %45 = bitcast %struct.tree_base* %base75 to i64*, !dbg !2945
  %bf.load76 = load i64, i64* %45, align 8, !dbg !2945
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !2945
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !2945
  %idxprom79 = zext i32 %bf.cast78 to i64, !dbg !2945
  %arrayidx80 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom79, !dbg !2945
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx80, i64 0, i64 11, !dbg !2945
  %46 = load i8, i8* %arrayidx81, align 1, !dbg !2945
  %conv = zext i8 %46 to i32, !dbg !2945
  %tobool82 = icmp ne i32 %conv, 0, !dbg !2945
  br i1 %tobool82, label %land.lhs.true83, label %if.end132, !dbg !2945

land.lhs.true83:                                  ; preds = %land.lhs.true74
  %47 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2945
  %decl_with_rtl = bitcast %union.tree_node* %47 to %struct.tree_decl_with_rtl*, !dbg !2945
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !2945
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !2945
  %cmp84 = icmp ne %struct.rtx_def* %48, null, !dbg !2945
  br i1 %cmp84, label %land.lhs.true86, label %if.end132, !dbg !2946

land.lhs.true86:                                  ; preds = %land.lhs.true83
  %49 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2947
  %decl_with_rtl87 = bitcast %union.tree_node* %49 to %struct.tree_decl_with_rtl*, !dbg !2947
  %rtl88 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl87, i32 0, i32 1, !dbg !2947
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtl88, align 8, !dbg !2947
  %tobool89 = icmp ne %struct.rtx_def* %50, null, !dbg !2947
  br i1 %tobool89, label %cond.true, label %cond.false, !dbg !2947

cond.true:                                        ; preds = %land.lhs.true86
  %51 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2947
  %decl_with_rtl90 = bitcast %union.tree_node* %51 to %struct.tree_decl_with_rtl*, !dbg !2947
  %rtl91 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl90, i32 0, i32 1, !dbg !2947
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtl91, align 8, !dbg !2947
  br label %cond.end, !dbg !2947

cond.false:                                       ; preds = %land.lhs.true86
  %53 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2947
  call void @make_decl_rtl(%union.tree_node* %53), !dbg !2947
  %54 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2947
  %decl_with_rtl92 = bitcast %union.tree_node* %54 to %struct.tree_decl_with_rtl*, !dbg !2947
  %rtl93 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl92, i32 0, i32 1, !dbg !2947
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl93, align 8, !dbg !2947
  br label %cond.end, !dbg !2947

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %52, %cond.true ], [ %55, %cond.false ], !dbg !2947
  %56 = bitcast %struct.rtx_def* %cond to i32*, !dbg !2947
  %bf.load94 = load i32, i32* %56, align 8, !dbg !2947
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !2947
  %cmp96 = icmp eq i32 %bf.clear95, 43, !dbg !2947
  br i1 %cmp96, label %if.then98, label %if.end132, !dbg !2948

if.then98:                                        ; preds = %cond.end
  %57 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl99 = bitcast %union.tree_node* %57 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl100 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl99, i32 0, i32 1, !dbg !2949
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl100, align 8, !dbg !2949
  %tobool101 = icmp ne %struct.rtx_def* %58, null, !dbg !2949
  br i1 %tobool101, label %cond.true102, label %cond.false105, !dbg !2949

cond.true102:                                     ; preds = %if.then98
  %59 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl103 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl104 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl103, i32 0, i32 1, !dbg !2949
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl104, align 8, !dbg !2949
  br label %cond.end108, !dbg !2949

cond.false105:                                    ; preds = %if.then98
  %61 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  call void @make_decl_rtl(%union.tree_node* %61), !dbg !2949
  %62 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl106 = bitcast %union.tree_node* %62 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl107 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl106, i32 0, i32 1, !dbg !2949
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtl107, align 8, !dbg !2949
  br label %cond.end108, !dbg !2949

cond.end108:                                      ; preds = %cond.false105, %cond.true102
  %cond109 = phi %struct.rtx_def* [ %60, %cond.true102 ], [ %63, %cond.false105 ], !dbg !2949
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond109, i32 0, i32 1, !dbg !2949
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2949
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2949
  %rt_mem = bitcast %union.rtunion_def* %arrayidx110 to %struct.mem_attrs**, !dbg !2949
  %64 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !2949
  %cmp111 = icmp eq %struct.mem_attrs* %64, null, !dbg !2949
  br i1 %cmp111, label %cond.true113, label %cond.false114, !dbg !2949

cond.true113:                                     ; preds = %cond.end108
  br label %cond.end130, !dbg !2949

cond.false114:                                    ; preds = %cond.end108
  %65 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl115 = bitcast %union.tree_node* %65 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl116 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl115, i32 0, i32 1, !dbg !2949
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtl116, align 8, !dbg !2949
  %tobool117 = icmp ne %struct.rtx_def* %66, null, !dbg !2949
  br i1 %tobool117, label %cond.true118, label %cond.false121, !dbg !2949

cond.true118:                                     ; preds = %cond.false114
  %67 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl119 = bitcast %union.tree_node* %67 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl120 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl119, i32 0, i32 1, !dbg !2949
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtl120, align 8, !dbg !2949
  br label %cond.end124, !dbg !2949

cond.false121:                                    ; preds = %cond.false114
  %69 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  call void @make_decl_rtl(%union.tree_node* %69), !dbg !2949
  %70 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2949
  %decl_with_rtl122 = bitcast %union.tree_node* %70 to %struct.tree_decl_with_rtl*, !dbg !2949
  %rtl123 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl122, i32 0, i32 1, !dbg !2949
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtl123, align 8, !dbg !2949
  br label %cond.end124, !dbg !2949

cond.end124:                                      ; preds = %cond.false121, %cond.true118
  %cond125 = phi %struct.rtx_def* [ %68, %cond.true118 ], [ %71, %cond.false121 ], !dbg !2949
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond125, i32 0, i32 1, !dbg !2949
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !2949
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 1, !dbg !2949
  %rt_mem129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.mem_attrs**, !dbg !2949
  %72 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem129, align 8, !dbg !2949
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %72, i32 0, i32 3, !dbg !2949
  %73 = load i32, i32* %alias, align 8, !dbg !2949
  br label %cond.end130, !dbg !2949

cond.end130:                                      ; preds = %cond.end124, %cond.true113
  %cond131 = phi i32 [ 0, %cond.true113 ], [ %73, %cond.end124 ], !dbg !2949
  store i32 %cond131, i32* %retval, align 4, !dbg !2950
  br label %return, !dbg !2950

if.end132:                                        ; preds = %cond.end, %land.lhs.true83, %land.lhs.true74, %while.end68
  %74 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2951
  %common133 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !2951
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !2951
  %75 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !2951
  store %union.tree_node* %75, %union.tree_node** %t.addr, align 8, !dbg !2952
  br label %if.end135, !dbg !2953

if.end135:                                        ; preds = %if.end132, %if.end
  %76 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2954
  %type136 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !2954
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type136, i32 0, i32 16, !dbg !2954
  %77 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2954
  store %union.tree_node* %77, %union.tree_node** %t.addr, align 8, !dbg !2955
  %78 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2956
  %type137 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !2956
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type137, i32 0, i32 19, !dbg !2956
  %79 = load %union.tree_node*, %union.tree_node** %canonical, align 8, !dbg !2956
  %cmp138 = icmp eq %union.tree_node* %79, null, !dbg !2956
  br i1 %cmp138, label %if.then140, label %if.end146, !dbg !2958

if.then140:                                       ; preds = %if.end135
  %80 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 13), align 8, !dbg !2959
  %81 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2961
  %call141 = call i32 %80(%union.tree_node* %81), !dbg !2962
  store i32 %call141, i32* %set, align 4, !dbg !2963
  %82 = load i32, i32* %set, align 4, !dbg !2964
  %cmp142 = icmp ne i32 %82, -1, !dbg !2966
  br i1 %cmp142, label %if.then144, label %if.end145, !dbg !2967

if.then144:                                       ; preds = %if.then140
  %83 = load i32, i32* %set, align 4, !dbg !2968
  store i32 %83, i32* %retval, align 4, !dbg !2969
  br label %return, !dbg !2969

if.end145:                                        ; preds = %if.then140
  store i32 0, i32* %retval, align 4, !dbg !2970
  br label %return, !dbg !2970

if.end146:                                        ; preds = %if.end135
  %84 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2971
  %type147 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !2971
  %canonical148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type147, i32 0, i32 19, !dbg !2971
  %85 = load %union.tree_node*, %union.tree_node** %canonical148, align 8, !dbg !2971
  store %union.tree_node* %85, %union.tree_node** %t.addr, align 8, !dbg !2972
  %86 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2973
  %type149 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !2973
  %canonical150 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type149, i32 0, i32 19, !dbg !2973
  %87 = load %union.tree_node*, %union.tree_node** %canonical150, align 8, !dbg !2973
  %cmp151 = icmp eq %union.tree_node* %87, null, !dbg !2973
  br i1 %cmp151, label %cond.true158, label %land.lhs.true153, !dbg !2973

land.lhs.true153:                                 ; preds = %if.end146
  %88 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2973
  %type154 = bitcast %union.tree_node* %88 to %struct.tree_type*, !dbg !2973
  %canonical155 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type154, i32 0, i32 19, !dbg !2973
  %89 = load %union.tree_node*, %union.tree_node** %canonical155, align 8, !dbg !2973
  %90 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2973
  %cmp156 = icmp eq %union.tree_node* %89, %90, !dbg !2973
  br i1 %cmp156, label %cond.false159, label %cond.true158, !dbg !2973

cond.true158:                                     ; preds = %land.lhs.true153, %if.end146
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2973
  br label %cond.end160, !dbg !2973

cond.false159:                                    ; preds = %land.lhs.true153
  br label %cond.end160, !dbg !2973

cond.end160:                                      ; preds = %cond.false159, %cond.true158
  %cond161 = phi i32 [ 0, %cond.true158 ], [ 0, %cond.false159 ], !dbg !2973
  %91 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2974
  %type162 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !2974
  %alias_set = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type162, i32 0, i32 8, !dbg !2974
  %92 = load i32, i32* %alias_set, align 4, !dbg !2974
  %cmp163 = icmp ne i32 %92, -1, !dbg !2974
  br i1 %cmp163, label %if.then165, label %if.end168, !dbg !2976

if.then165:                                       ; preds = %cond.end160
  %93 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2977
  %type166 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !2977
  %alias_set167 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type166, i32 0, i32 8, !dbg !2977
  %94 = load i32, i32* %alias_set167, align 4, !dbg !2977
  store i32 %94, i32* %retval, align 4, !dbg !2978
  br label %return, !dbg !2978

if.end168:                                        ; preds = %cond.end160
  %95 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2979
  %type169 = bitcast %union.tree_node* %95 to %struct.tree_type*, !dbg !2979
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type169, i32 0, i32 2, !dbg !2979
  %96 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !2979
  %cmp170 = icmp ne %union.tree_node* %96, null, !dbg !2979
  br i1 %cmp170, label %if.end184, label %if.then172, !dbg !2981

if.then172:                                       ; preds = %if.end168
  %97 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2982
  %base173 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !2982
  %98 = bitcast %struct.tree_base* %base173 to i64*, !dbg !2982
  %bf.load174 = load i64, i64* %98, align 8, !dbg !2982
  %bf.clear175 = and i64 %bf.load174, 65535, !dbg !2982
  %bf.cast176 = trunc i64 %bf.clear175 to i32, !dbg !2982
  %cmp177 = icmp eq i32 %bf.cast176, 15, !dbg !2985
  br i1 %cmp177, label %if.then179, label %if.end183, !dbg !2986

if.then179:                                       ; preds = %if.then172
  %99 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2987
  %common180 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !2987
  %type181 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common180, i32 0, i32 2, !dbg !2987
  %100 = load %union.tree_node*, %union.tree_node** %type181, align 8, !dbg !2987
  %call182 = call i32 @get_alias_set(%union.tree_node* %100), !dbg !2988
  store i32 %call182, i32* %retval, align 4, !dbg !2989
  br label %return, !dbg !2989

if.end183:                                        ; preds = %if.then172
  store i32 0, i32* %retval, align 4, !dbg !2990
  br label %return, !dbg !2990

if.end184:                                        ; preds = %if.end168
  %101 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 13), align 8, !dbg !2991
  %102 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2992
  %call185 = call i32 %101(%union.tree_node* %102), !dbg !2993
  store i32 %call185, i32* %set, align 4, !dbg !2994
  %103 = load i32, i32* %set, align 4, !dbg !2995
  %cmp186 = icmp ne i32 %103, -1, !dbg !2997
  br i1 %cmp186, label %if.then188, label %if.else, !dbg !2998

if.then188:                                       ; preds = %if.end184
  %104 = load i32, i32* %set, align 4, !dbg !2999
  store i32 %104, i32* %retval, align 4, !dbg !3000
  br label %return, !dbg !3000

if.else:                                          ; preds = %if.end184
  %105 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3001
  %base189 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !3001
  %106 = bitcast %struct.tree_base* %base189 to i64*, !dbg !3001
  %bf.load190 = load i64, i64* %106, align 8, !dbg !3001
  %bf.clear191 = and i64 %bf.load190, 65535, !dbg !3001
  %bf.cast192 = trunc i64 %bf.clear191 to i32, !dbg !3001
  %cmp193 = icmp eq i32 %bf.cast192, 20, !dbg !3003
  br i1 %cmp193, label %if.then202, label %lor.lhs.false195, !dbg !3004

lor.lhs.false195:                                 ; preds = %if.else
  %107 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3005
  %base196 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !3005
  %108 = bitcast %struct.tree_base* %base196 to i64*, !dbg !3005
  %bf.load197 = load i64, i64* %108, align 8, !dbg !3005
  %bf.clear198 = and i64 %bf.load197, 65535, !dbg !3005
  %bf.cast199 = trunc i64 %bf.clear198 to i32, !dbg !3005
  %cmp200 = icmp eq i32 %bf.cast199, 21, !dbg !3006
  br i1 %cmp200, label %if.then202, label %if.else203, !dbg !3007

if.then202:                                       ; preds = %lor.lhs.false195, %if.else
  store i32 0, i32* %set, align 4, !dbg !3008
  br label %if.end234, !dbg !3009

if.else203:                                       ; preds = %lor.lhs.false195
  %109 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3010
  %base204 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !3010
  %110 = bitcast %struct.tree_base* %base204 to i64*, !dbg !3010
  %bf.load205 = load i64, i64* %110, align 8, !dbg !3010
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !3010
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !3010
  %cmp208 = icmp eq i32 %bf.cast207, 14, !dbg !3012
  br i1 %cmp208, label %if.then210, label %if.else214, !dbg !3013

if.then210:                                       ; preds = %if.else203
  %111 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3014
  %common211 = bitcast %union.tree_node* %111 to %struct.tree_common*, !dbg !3014
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !3014
  %112 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !3014
  %call213 = call i32 @get_alias_set(%union.tree_node* %112), !dbg !3015
  store i32 %call213, i32* %set, align 4, !dbg !3016
  br label %if.end233, !dbg !3017

if.else214:                                       ; preds = %if.else203
  %113 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3018
  %base215 = bitcast %union.tree_node* %113 to %struct.tree_base*, !dbg !3018
  %114 = bitcast %struct.tree_base* %base215 to i64*, !dbg !3018
  %bf.load216 = load i64, i64* %114, align 8, !dbg !3018
  %bf.clear217 = and i64 %bf.load216, 65535, !dbg !3018
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !3018
  %cmp219 = icmp eq i32 %bf.cast218, 15, !dbg !3020
  br i1 %cmp219, label %land.lhs.true221, label %if.else230, !dbg !3021

land.lhs.true221:                                 ; preds = %if.else214
  %115 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3022
  %type222 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !3022
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type222, i32 0, i32 6, !dbg !3022
  %bf.load223 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !3022
  %bf.lshr = lshr i32 %bf.load223, 12, !dbg !3022
  %bf.clear224 = and i32 %bf.lshr, 1, !dbg !3022
  %tobool225 = icmp ne i32 %bf.clear224, 0, !dbg !3022
  br i1 %tobool225, label %if.else230, label %if.then226, !dbg !3023

if.then226:                                       ; preds = %land.lhs.true221
  %116 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3024
  %common227 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !3024
  %type228 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common227, i32 0, i32 2, !dbg !3024
  %117 = load %union.tree_node*, %union.tree_node** %type228, align 8, !dbg !3024
  %call229 = call i32 @get_alias_set(%union.tree_node* %117), !dbg !3025
  store i32 %call229, i32* %set, align 4, !dbg !3026
  br label %if.end232, !dbg !3027

if.else230:                                       ; preds = %land.lhs.true221, %if.else214
  %call231 = call i32 @new_alias_set(), !dbg !3028
  store i32 %call231, i32* %set, align 4, !dbg !3029
  br label %if.end232

if.end232:                                        ; preds = %if.else230, %if.then226
  br label %if.end233

if.end233:                                        ; preds = %if.end232, %if.then210
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %if.then202
  br label %if.end235

if.end235:                                        ; preds = %if.end234
  %118 = load i32, i32* %set, align 4, !dbg !3030
  %119 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3031
  %type236 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !3031
  %alias_set237 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type236, i32 0, i32 8, !dbg !3031
  store i32 %118, i32* %alias_set237, align 4, !dbg !3032
  %120 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3033
  %base238 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !3033
  %121 = bitcast %struct.tree_base* %base238 to i64*, !dbg !3033
  %bf.load239 = load i64, i64* %121, align 8, !dbg !3033
  %bf.clear240 = and i64 %bf.load239, 65535, !dbg !3033
  %bf.cast241 = trunc i64 %bf.clear240 to i32, !dbg !3033
  %cmp242 = icmp eq i32 %bf.cast241, 15, !dbg !3033
  br i1 %cmp242, label %if.then272, label %lor.lhs.false244, !dbg !3033

lor.lhs.false244:                                 ; preds = %if.end235
  %122 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3033
  %base245 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !3033
  %123 = bitcast %struct.tree_base* %base245 to i64*, !dbg !3033
  %bf.load246 = load i64, i64* %123, align 8, !dbg !3033
  %bf.clear247 = and i64 %bf.load246, 65535, !dbg !3033
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !3033
  %cmp249 = icmp eq i32 %bf.cast248, 16, !dbg !3033
  br i1 %cmp249, label %if.then272, label %lor.lhs.false251, !dbg !3033

lor.lhs.false251:                                 ; preds = %lor.lhs.false244
  %124 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3033
  %base252 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !3033
  %125 = bitcast %struct.tree_base* %base252 to i64*, !dbg !3033
  %bf.load253 = load i64, i64* %125, align 8, !dbg !3033
  %bf.clear254 = and i64 %bf.load253, 65535, !dbg !3033
  %bf.cast255 = trunc i64 %bf.clear254 to i32, !dbg !3033
  %cmp256 = icmp eq i32 %bf.cast255, 17, !dbg !3033
  br i1 %cmp256, label %if.then272, label %lor.lhs.false258, !dbg !3033

lor.lhs.false258:                                 ; preds = %lor.lhs.false251
  %126 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3033
  %base259 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !3033
  %127 = bitcast %struct.tree_base* %base259 to i64*, !dbg !3033
  %bf.load260 = load i64, i64* %127, align 8, !dbg !3033
  %bf.clear261 = and i64 %bf.load260, 65535, !dbg !3033
  %bf.cast262 = trunc i64 %bf.clear261 to i32, !dbg !3033
  %cmp263 = icmp eq i32 %bf.cast262, 18, !dbg !3033
  br i1 %cmp263, label %if.then272, label %lor.lhs.false265, !dbg !3035

lor.lhs.false265:                                 ; preds = %lor.lhs.false258
  %128 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3036
  %base266 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !3036
  %129 = bitcast %struct.tree_base* %base266 to i64*, !dbg !3036
  %bf.load267 = load i64, i64* %129, align 8, !dbg !3036
  %bf.clear268 = and i64 %bf.load267, 65535, !dbg !3036
  %bf.cast269 = trunc i64 %bf.clear268 to i32, !dbg !3036
  %cmp270 = icmp eq i32 %bf.cast269, 13, !dbg !3037
  br i1 %cmp270, label %if.then272, label %if.end273, !dbg !3038

if.then272:                                       ; preds = %lor.lhs.false265, %lor.lhs.false258, %lor.lhs.false251, %lor.lhs.false244, %if.end235
  %130 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3039
  call void @record_component_aliases(%union.tree_node* %130), !dbg !3040
  br label %if.end273, !dbg !3040

if.end273:                                        ; preds = %if.then272, %lor.lhs.false265
  %131 = load i32, i32* %set, align 4, !dbg !3041
  store i32 %131, i32* %retval, align 4, !dbg !3042
  br label %return, !dbg !3042

return:                                           ; preds = %if.end273, %if.then188, %if.end183, %if.then179, %if.then165, %if.end145, %if.then144, %cond.end130, %if.then57, %if.then18, %if.then
  %132 = load i32, i32* %retval, align 4, !dbg !3043
  ret i32 %132, !dbg !3043
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @component_uses_parent_alias_set(%union.tree_node* %t) #0 !dbg !3044 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3048, metadata !DIExpression()), !dbg !3049
  br label %while.body, !dbg !3050

while.body:                                       ; preds = %entry, %if.end26
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3051
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !3054
  %tobool = icmp ne i8 %call, 0, !dbg !3054
  br i1 %tobool, label %if.end, label %if.then, !dbg !3055

if.then:                                          ; preds = %while.body
  store i8 0, i8* %retval, align 1, !dbg !3056
  br label %return, !dbg !3056

if.end:                                           ; preds = %while.body
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3057
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3057
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3057
  %bf.load = load i64, i64* %2, align 8, !dbg !3057
  %bf.clear = and i64 %bf.load, 65535, !dbg !3057
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3057
  switch i32 %bf.cast, label %sw.default [
    i32 41, label %sw.bb
    i32 45, label %sw.bb7
    i32 46, label %sw.bb7
    i32 43, label %sw.bb18
    i32 44, label %sw.bb18
  ], !dbg !3058

sw.bb:                                            ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3059
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3059
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3059
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3059
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3059
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !3059
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3059
  %5 = bitcast i40* %decl_flag_2 to i64*, !dbg !3059
  %bf.load1 = load i64, i64* %5, align 8, !dbg !3059
  %bf.lshr = lshr i64 %bf.load1, 26, !dbg !3059
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !3059
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !3059
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !3059
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !3062

if.then5:                                         ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !3063
  br label %return, !dbg !3063

if.end6:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !3064

sw.bb7:                                           ; preds = %if.end, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3065
  %exp8 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3065
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !3065
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !3065
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !3065
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3065
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3065
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3065
  %type11 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !3065
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !3065
  %bf.load12 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !3065
  %bf.lshr13 = lshr i32 %bf.load12, 12, !dbg !3065
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !3065
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !3065
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !3067

if.then16:                                        ; preds = %sw.bb7
  store i8 1, i8* %retval, align 1, !dbg !3068
  br label %return, !dbg !3068

if.end17:                                         ; preds = %sw.bb7
  br label %sw.epilog, !dbg !3069

sw.bb18:                                          ; preds = %if.end, %if.end
  br label %sw.epilog, !dbg !3070

sw.default:                                       ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !3071
  br label %return, !dbg !3071

sw.epilog:                                        ; preds = %sw.bb18, %if.end17, %if.end6
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3072
  %exp19 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !3072
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !3072
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !3072
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !3072
  store %union.tree_node* %10, %union.tree_node** %t.addr, align 8, !dbg !3073
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3074
  %common22 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3074
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !3074
  %12 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !3074
  %call24 = call i32 @get_alias_set(%union.tree_node* %12), !dbg !3076
  %cmp = icmp eq i32 %call24, 0, !dbg !3077
  br i1 %cmp, label %if.then25, label %if.end26, !dbg !3078

if.then25:                                        ; preds = %sw.epilog
  store i8 1, i8* %retval, align 1, !dbg !3079
  br label %return, !dbg !3079

if.end26:                                         ; preds = %sw.epilog
  br label %while.body, !dbg !3050, !llvm.loop !3080

return:                                           ; preds = %if.then25, %sw.default, %if.then16, %if.then5, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !3082
  ret i8 %13, !dbg !3082
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !3083 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3084, metadata !DIExpression()), !dbg !3085
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3086
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3086
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3086
  %bf.load = load i64, i64* %1, align 8, !dbg !3086
  %bf.clear = and i64 %bf.load, 65535, !dbg !3086
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3086
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !3087

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !3088
  br label %return, !dbg !3088

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3090
  br label %return, !dbg !3090

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !3091
  ret i8 %2, !dbg !3091
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_deref_alias_set(%union.tree_node* %t) #0 !dbg !3092 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %set = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3093, metadata !DIExpression()), !dbg !3094
  call void @llvm.dbg.declare(metadata i32* %set, metadata !3095, metadata !DIExpression()), !dbg !3096
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3097
  %call = call i32 @get_deref_alias_set_1(%union.tree_node* %0), !dbg !3098
  store i32 %call, i32* %set, align 4, !dbg !3096
  %1 = load i32, i32* %set, align 4, !dbg !3099
  %cmp = icmp eq i32 %1, -1, !dbg !3101
  br i1 %cmp, label %if.then, label %if.end6, !dbg !3102

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3103
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3103
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3103
  %bf.load = load i64, i64* %3, align 8, !dbg !3103
  %bf.clear = and i64 %bf.load, 65535, !dbg !3103
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3103
  %idxprom = sext i32 %bf.cast to i64, !dbg !3103
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3103
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3103
  %cmp1 = icmp eq i32 %4, 2, !dbg !3103
  br i1 %cmp1, label %if.end, label %if.then2, !dbg !3106

if.then2:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3107
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !3107
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3107
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3107
  store %union.tree_node* %6, %union.tree_node** %t.addr, align 8, !dbg !3108
  br label %if.end, !dbg !3109

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3110
  %common3 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3110
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !3110
  %8 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3110
  %call5 = call i32 @get_alias_set(%union.tree_node* %8), !dbg !3111
  store i32 %call5, i32* %set, align 4, !dbg !3112
  br label %if.end6, !dbg !3113

if.end6:                                          ; preds = %if.end, %entry
  %9 = load i32, i32* %set, align 4, !dbg !3114
  ret i32 %9, !dbg !3115
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_deref_alias_set_1(%union.tree_node* %t) #0 !dbg !3116 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3117, metadata !DIExpression()), !dbg !3118
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !3119
  %tobool = icmp ne i32 %0, 0, !dbg !3119
  br i1 %tobool, label %if.end, label %if.then, !dbg !3121

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3122
  br label %return, !dbg !3122

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3123
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3123
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3123
  %bf.load = load i64, i64* %2, align 8, !dbg !3123
  %bf.clear = and i64 %bf.load, 65535, !dbg !3123
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3123
  %idxprom = sext i32 %bf.cast to i64, !dbg !3123
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3123
  %3 = load i32, i32* %arrayidx, align 4, !dbg !3123
  %cmp = icmp eq i32 %3, 2, !dbg !3123
  br i1 %cmp, label %if.end2, label %if.then1, !dbg !3125

if.then1:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3126
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3126
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3126
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3126
  store %union.tree_node* %5, %union.tree_node** %t.addr, align 8, !dbg !3127
  br label %if.end2, !dbg !3128

if.end2:                                          ; preds = %if.then1, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3129
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !3129
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !3129
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3129
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3129
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3129
  %bf.load6 = load i64, i64* %8, align 8, !dbg !3129
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !3129
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3129
  %cmp9 = icmp eq i32 %bf.cast8, 19, !dbg !3131
  br i1 %cmp9, label %if.then15, label %lor.lhs.false, !dbg !3132

lor.lhs.false:                                    ; preds = %if.end2
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3133
  %base10 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3133
  %10 = bitcast %struct.tree_base* %base10 to i64*, !dbg !3133
  %bf.load11 = load i64, i64* %10, align 8, !dbg !3133
  %bf.lshr = lshr i64 %bf.load11, 26, !dbg !3133
  %bf.clear12 = and i64 %bf.lshr, 1, !dbg !3133
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !3133
  %tobool14 = icmp ne i32 %bf.cast13, 0, !dbg !3133
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3134

if.then15:                                        ; preds = %lor.lhs.false, %if.end2
  store i32 0, i32* %retval, align 4, !dbg !3135
  br label %return, !dbg !3135

if.end16:                                         ; preds = %lor.lhs.false
  store i32 -1, i32* %retval, align 4, !dbg !3136
  br label %return, !dbg !3136

return:                                           ; preds = %if.end16, %if.then15, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !3137
  ret i32 %11, !dbg !3137
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @new_alias_set() #0 !dbg !3138 {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !3141
  %tobool = icmp ne i32 %0, 0, !dbg !3141
  br i1 %tobool, label %if.then, label %if.else, !dbg !3143

if.then:                                          ; preds = %entry
  %1 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !3144
  %cmp = icmp eq %struct.VEC_alias_set_entry_gc* %1, null, !dbg !3147
  br i1 %cmp, label %if.then1, label %if.end, !dbg !3148

if.then1:                                         ; preds = %if.then
  %call = call %struct.alias_set_entry_d** @VEC_alias_set_entry_gc_safe_push(%struct.VEC_alias_set_entry_gc** @alias_sets, %struct.alias_set_entry_d* null), !dbg !3149
  br label %if.end, !dbg !3149

if.end:                                           ; preds = %if.then1, %if.then
  %call2 = call %struct.alias_set_entry_d** @VEC_alias_set_entry_gc_safe_push(%struct.VEC_alias_set_entry_gc** @alias_sets, %struct.alias_set_entry_d* null), !dbg !3150
  %2 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !3151
  %tobool3 = icmp ne %struct.VEC_alias_set_entry_gc* %2, null, !dbg !3151
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3151

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !3151
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %3, i32 0, i32 0, !dbg !3151
  br label %cond.end, !dbg !3151

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_set_entry_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3151
  %call4 = call i32 @VEC_alias_set_entry_base_length(%struct.VEC_alias_set_entry_base* %cond), !dbg !3151
  %sub = sub i32 %call4, 1, !dbg !3152
  store i32 %sub, i32* %retval, align 4, !dbg !3153
  br label %return, !dbg !3153

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3154
  br label %return, !dbg !3154

return:                                           ; preds = %if.else, %cond.end
  %4 = load i32, i32* %retval, align 4, !dbg !3155
  ret i32 %4, !dbg !3155
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @record_component_aliases(%union.tree_node* %type) #0 !dbg !3156 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %superset = alloca i32, align 4
  %field = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %binfo3 = alloca %union.tree_node*, align 8
  %base_binfo = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3159, metadata !DIExpression()), !dbg !3160
  call void @llvm.dbg.declare(metadata i32* %superset, metadata !3161, metadata !DIExpression()), !dbg !3162
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3163
  %call = call i32 @get_alias_set(%union.tree_node* %0), !dbg !3164
  store i32 %call, i32* %superset, align 4, !dbg !3162
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3165, metadata !DIExpression()), !dbg !3166
  %1 = load i32, i32* %superset, align 4, !dbg !3167
  %cmp = icmp eq i32 %1, 0, !dbg !3169
  br i1 %cmp, label %if.then, label %if.end, !dbg !3170

if.then:                                          ; preds = %entry
  br label %sw.epilog, !dbg !3171

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3172
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3172
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3172
  %bf.load = load i64, i64* %3, align 8, !dbg !3172
  %bf.clear = and i64 %bf.load, 65535, !dbg !3172
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3172
  switch i32 %bf.cast, label %sw.default [
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 13, label %sw.bb37
  ], !dbg !3173

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3174
  %type1 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !3174
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 17, !dbg !3174
  %5 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3174
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !3174
  br i1 %tobool, label %if.then2, label %if.end15, !dbg !3177

if.then2:                                         ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3178, metadata !DIExpression()), !dbg !3180
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo3, metadata !3181, metadata !DIExpression()), !dbg !3182
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_binfo, metadata !3183, metadata !DIExpression()), !dbg !3184
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3185
  %type4 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !3185
  %binfo5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 17, !dbg !3185
  %7 = load %union.tree_node*, %union.tree_node** %binfo5, align 8, !dbg !3185
  store %union.tree_node* %7, %union.tree_node** %binfo3, align 8, !dbg !3187
  store i32 0, i32* %i, align 4, !dbg !3188
  br label %for.cond, !dbg !3189

for.cond:                                         ; preds = %for.inc, %if.then2
  %8 = load %union.tree_node*, %union.tree_node** %binfo3, align 8, !dbg !3190
  %binfo6 = bitcast %union.tree_node* %8 to %struct.tree_binfo*, !dbg !3190
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo6, i32 0, i32 9, !dbg !3190
  %tobool7 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !3190
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !3190

cond.true:                                        ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %binfo3, align 8, !dbg !3190
  %binfo8 = bitcast %union.tree_node* %9 to %struct.tree_binfo*, !dbg !3190
  %base_binfos9 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo8, i32 0, i32 9, !dbg !3190
  %base10 = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos9, i32 0, i32 0, !dbg !3190
  br label %cond.end, !dbg !3190

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3190

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base10, %cond.true ], [ null, %cond.false ], !dbg !3190
  %10 = load i32, i32* %i, align 4, !dbg !3190
  %call11 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %10, %union.tree_node** %base_binfo), !dbg !3190
  %tobool12 = icmp ne i32 %call11, 0, !dbg !3192
  br i1 %tobool12, label %for.body, label %for.end, !dbg !3192

for.body:                                         ; preds = %cond.end
  %11 = load i32, i32* %superset, align 4, !dbg !3193
  %12 = load %union.tree_node*, %union.tree_node** %base_binfo, align 8, !dbg !3194
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !3194
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3194
  %13 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !3194
  %call14 = call i32 @get_alias_set(%union.tree_node* %13), !dbg !3195
  call void @record_alias_subset(i32 %11, i32 %call14), !dbg !3196
  br label %for.inc, !dbg !3196

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !3197
  %inc = add nsw i32 %14, 1, !dbg !3197
  store i32 %inc, i32* %i, align 4, !dbg !3197
  br label %for.cond, !dbg !3198, !llvm.loop !3199

for.end:                                          ; preds = %cond.end
  br label %if.end15, !dbg !3201

if.end15:                                         ; preds = %for.end, %sw.bb
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3202
  %type16 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !3202
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 1, !dbg !3202
  %16 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !3202
  store %union.tree_node* %16, %union.tree_node** %field, align 8, !dbg !3204
  br label %for.cond17, !dbg !3205

for.cond17:                                       ; preds = %for.inc34, %if.end15
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3206
  %cmp18 = icmp ne %union.tree_node* %17, null, !dbg !3208
  br i1 %cmp18, label %for.body19, label %for.end36, !dbg !3209

for.body19:                                       ; preds = %for.cond17
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3210
  %base20 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3210
  %19 = bitcast %struct.tree_base* %base20 to i64*, !dbg !3210
  %bf.load21 = load i64, i64* %19, align 8, !dbg !3210
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !3210
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !3210
  %cmp24 = icmp eq i32 %bf.cast23, 31, !dbg !3212
  br i1 %cmp24, label %land.lhs.true, label %if.end33, !dbg !3213

land.lhs.true:                                    ; preds = %for.body19
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3214
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !3214
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3214
  %21 = bitcast i40* %decl_flag_2 to i64*, !dbg !3214
  %bf.load25 = load i64, i64* %21, align 8, !dbg !3214
  %bf.lshr = lshr i64 %bf.load25, 26, !dbg !3214
  %bf.clear26 = and i64 %bf.lshr, 1, !dbg !3214
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !3214
  %tobool28 = icmp ne i32 %bf.cast27, 0, !dbg !3214
  br i1 %tobool28, label %if.end33, label %if.then29, !dbg !3215

if.then29:                                        ; preds = %land.lhs.true
  %22 = load i32, i32* %superset, align 4, !dbg !3216
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3217
  %common30 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !3217
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !3217
  %24 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3217
  %call32 = call i32 @get_alias_set(%union.tree_node* %24), !dbg !3218
  call void @record_alias_subset(i32 %22, i32 %call32), !dbg !3219
  br label %if.end33, !dbg !3219

if.end33:                                         ; preds = %if.then29, %land.lhs.true, %for.body19
  br label %for.inc34, !dbg !3214

for.inc34:                                        ; preds = %if.end33
  %25 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3220
  %common35 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !3220
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !3220
  %26 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3220
  store %union.tree_node* %26, %union.tree_node** %field, align 8, !dbg !3221
  br label %for.cond17, !dbg !3222, !llvm.loop !3223

for.end36:                                        ; preds = %for.cond17
  br label %sw.epilog, !dbg !3225

sw.bb37:                                          ; preds = %if.end
  %27 = load i32, i32* %superset, align 4, !dbg !3226
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3227
  %common38 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !3227
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !3227
  %29 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !3227
  %call40 = call i32 @get_alias_set(%union.tree_node* %29), !dbg !3228
  call void @record_alias_subset(i32 %27, i32 %call40), !dbg !3229
  br label %sw.epilog, !dbg !3230

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !3231

sw.epilog:                                        ; preds = %if.then, %sw.default, %sw.bb37, %for.end36
  ret void, !dbg !3232
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_set_entry_d** @VEC_alias_set_entry_gc_safe_push(%struct.VEC_alias_set_entry_gc** %vec_, %struct.alias_set_entry_d* %obj_) #0 !dbg !3233 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_gc**, align 8
  %obj_.addr = alloca %struct.alias_set_entry_d*, align 8
  store %struct.VEC_alias_set_entry_gc** %vec_, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_gc*** %vec_.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  store %struct.alias_set_entry_d* %obj_, %struct.alias_set_entry_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %obj_.addr, metadata !3240, metadata !DIExpression()), !dbg !3239
  %0 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !3239
  %call = call i32 @VEC_alias_set_entry_gc_reserve(%struct.VEC_alias_set_entry_gc** %0, i32 1), !dbg !3239
  %1 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !3239
  %2 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %1, align 8, !dbg !3239
  %tobool = icmp ne %struct.VEC_alias_set_entry_gc* %2, null, !dbg !3239
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3239

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !3239
  %4 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %3, align 8, !dbg !3239
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %4, i32 0, i32 0, !dbg !3239
  br label %cond.end, !dbg !3239

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3239

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_set_entry_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3239
  %5 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %obj_.addr, align 8, !dbg !3239
  %call1 = call %struct.alias_set_entry_d** @VEC_alias_set_entry_base_quick_push(%struct.VEC_alias_set_entry_base* %cond, %struct.alias_set_entry_d* %5), !dbg !3239
  ret %struct.alias_set_entry_d** %call1, !dbg !3239
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_set_entry_base_length(%struct.VEC_alias_set_entry_base* %vec_) #0 !dbg !3241 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_base*, align 8
  store %struct.VEC_alias_set_entry_base* %vec_, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_base** %vec_.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  %0 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !3247
  %tobool = icmp ne %struct.VEC_alias_set_entry_base* %0, null, !dbg !3247
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3247

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !3247
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %1, i32 0, i32 0, !dbg !3247
  %2 = load i32, i32* %num, align 8, !dbg !3247
  br label %cond.end, !dbg !3247

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3247

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3247
  ret i32 %cond, !dbg !3247
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @record_alias_subset(i32 %superset, i32 %subset) #0 !dbg !3248 {
entry:
  %superset.addr = alloca i32, align 4
  %subset.addr = alloca i32, align 4
  %superset_entry = alloca %struct.alias_set_entry_d*, align 8
  %subset_entry = alloca %struct.alias_set_entry_d*, align 8
  store i32 %superset, i32* %superset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %superset.addr, metadata !3251, metadata !DIExpression()), !dbg !3252
  store i32 %subset, i32* %subset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subset.addr, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %superset_entry, metadata !3255, metadata !DIExpression()), !dbg !3256
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %subset_entry, metadata !3257, metadata !DIExpression()), !dbg !3258
  %0 = load i32, i32* %superset.addr, align 4, !dbg !3259
  %1 = load i32, i32* %subset.addr, align 4, !dbg !3261
  %cmp = icmp eq i32 %0, %1, !dbg !3262
  br i1 %cmp, label %if.then, label %if.end, !dbg !3263

if.then:                                          ; preds = %entry
  br label %if.end29, !dbg !3264

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %superset.addr, align 4, !dbg !3265
  %tobool = icmp ne i32 %2, 0, !dbg !3265
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3265

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 813, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3265
  br label %cond.end, !dbg !3265

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3265
  %3 = load i32, i32* %superset.addr, align 4, !dbg !3266
  %call = call %struct.alias_set_entry_d* @get_alias_set_entry(i32 %3), !dbg !3267
  store %struct.alias_set_entry_d* %call, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3268
  %4 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3269
  %cmp1 = icmp eq %struct.alias_set_entry_d* %4, null, !dbg !3271
  br i1 %cmp1, label %if.then2, label %if.end11, !dbg !3272

if.then2:                                         ; preds = %cond.end
  %call3 = call i8* @ggc_alloc_stat(i64 16), !dbg !3273
  %5 = bitcast i8* %call3 to %struct.alias_set_entry_d*, !dbg !3273
  store %struct.alias_set_entry_d* %5, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3275
  %6 = load i32, i32* %superset.addr, align 4, !dbg !3276
  %7 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3277
  %alias_set = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %7, i32 0, i32 0, !dbg !3278
  store i32 %6, i32* %alias_set, align 8, !dbg !3279
  %call4 = call %struct.splay_tree_s* @splay_tree_new_with_allocator(i32 (i64, i64)* @splay_tree_compare_ints, void (i64)* null, void (i64)* null, i8* (i32, i8*)* @ggc_splay_alloc, void (i8*, i8*)* @ggc_splay_dont_free, i8* null), !dbg !3280
  %8 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3281
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %8, i32 0, i32 2, !dbg !3282
  store %struct.splay_tree_s* %call4, %struct.splay_tree_s** %children, align 8, !dbg !3283
  %9 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3284
  %has_zero_child = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %9, i32 0, i32 1, !dbg !3285
  store i32 0, i32* %has_zero_child, align 4, !dbg !3286
  %10 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !3287
  %tobool5 = icmp ne %struct.VEC_alias_set_entry_gc* %10, null, !dbg !3287
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !3287

cond.true6:                                       ; preds = %if.then2
  %11 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** @alias_sets, align 8, !dbg !3287
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %11, i32 0, i32 0, !dbg !3287
  br label %cond.end8, !dbg !3287

cond.false7:                                      ; preds = %if.then2
  br label %cond.end8, !dbg !3287

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi %struct.VEC_alias_set_entry_base* [ %base, %cond.true6 ], [ null, %cond.false7 ], !dbg !3287
  %12 = load i32, i32* %superset.addr, align 4, !dbg !3287
  %13 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3287
  %call10 = call %struct.alias_set_entry_d* @VEC_alias_set_entry_base_replace(%struct.VEC_alias_set_entry_base* %cond9, i32 %12, %struct.alias_set_entry_d* %13), !dbg !3287
  br label %if.end11, !dbg !3288

if.end11:                                         ; preds = %cond.end8, %cond.end
  %14 = load i32, i32* %subset.addr, align 4, !dbg !3289
  %cmp12 = icmp eq i32 %14, 0, !dbg !3291
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !3292

if.then13:                                        ; preds = %if.end11
  %15 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3293
  %has_zero_child14 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %15, i32 0, i32 1, !dbg !3294
  store i32 1, i32* %has_zero_child14, align 4, !dbg !3295
  br label %if.end29, !dbg !3293

if.else:                                          ; preds = %if.end11
  %16 = load i32, i32* %subset.addr, align 4, !dbg !3296
  %call15 = call %struct.alias_set_entry_d* @get_alias_set_entry(i32 %16), !dbg !3298
  store %struct.alias_set_entry_d* %call15, %struct.alias_set_entry_d** %subset_entry, align 8, !dbg !3299
  %17 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %subset_entry, align 8, !dbg !3300
  %tobool16 = icmp ne %struct.alias_set_entry_d* %17, null, !dbg !3300
  br i1 %tobool16, label %if.then17, label %if.end26, !dbg !3302

if.then17:                                        ; preds = %if.else
  %18 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %subset_entry, align 8, !dbg !3303
  %has_zero_child18 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %18, i32 0, i32 1, !dbg !3306
  %19 = load i32, i32* %has_zero_child18, align 4, !dbg !3306
  %tobool19 = icmp ne i32 %19, 0, !dbg !3303
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !3307

if.then20:                                        ; preds = %if.then17
  %20 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3308
  %has_zero_child21 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %20, i32 0, i32 1, !dbg !3309
  store i32 1, i32* %has_zero_child21, align 4, !dbg !3310
  br label %if.end22, !dbg !3308

if.end22:                                         ; preds = %if.then20, %if.then17
  %21 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %subset_entry, align 8, !dbg !3311
  %children23 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %21, i32 0, i32 2, !dbg !3312
  %22 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children23, align 8, !dbg !3312
  %23 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3313
  %children24 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %23, i32 0, i32 2, !dbg !3314
  %24 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children24, align 8, !dbg !3314
  %25 = bitcast %struct.splay_tree_s* %24 to i8*, !dbg !3313
  %call25 = call i32 @splay_tree_foreach(%struct.splay_tree_s* %22, i32 (%struct.splay_tree_node_s*, i8*)* @insert_subset_children, i8* %25), !dbg !3315
  br label %if.end26, !dbg !3316

if.end26:                                         ; preds = %if.end22, %if.else
  %26 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %superset_entry, align 8, !dbg !3317
  %children27 = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %26, i32 0, i32 2, !dbg !3318
  %27 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children27, align 8, !dbg !3318
  %28 = load i32, i32* %subset.addr, align 4, !dbg !3319
  %conv = sext i32 %28 to i64, !dbg !3320
  %call28 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %27, i64 %conv, i64 0), !dbg !3321
  br label %if.end29

if.end29:                                         ; preds = %if.then, %if.end26, %if.then13
  ret void, !dbg !3322
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local %struct.splay_tree_s* @splay_tree_new_with_allocator(i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8*) #2

declare dso_local i32 @splay_tree_compare_ints(i64, i64) #2

declare dso_local i8* @ggc_splay_alloc(i32, i8*) #2

declare dso_local void @ggc_splay_dont_free(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_set_entry_d* @VEC_alias_set_entry_base_replace(%struct.VEC_alias_set_entry_base* %vec_, i32 %ix_, %struct.alias_set_entry_d* %obj_) #0 !dbg !3323 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.alias_set_entry_d*, align 8
  %old_obj_ = alloca %struct.alias_set_entry_d*, align 8
  store %struct.VEC_alias_set_entry_base* %vec_, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_base** %vec_.addr, metadata !3327, metadata !DIExpression()), !dbg !3328
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3329, metadata !DIExpression()), !dbg !3328
  store %struct.alias_set_entry_d* %obj_, %struct.alias_set_entry_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %obj_.addr, metadata !3330, metadata !DIExpression()), !dbg !3328
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %old_obj_, metadata !3331, metadata !DIExpression()), !dbg !3328
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3328
  %1 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !3328
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %1, i32 0, i32 0, !dbg !3328
  %2 = load i32, i32* %num, align 8, !dbg !3328
  %cmp = icmp ult i32 %0, %2, !dbg !3328
  %conv = zext i1 %cmp to i32, !dbg !3328
  %3 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !3328
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %3, i32 0, i32 2, !dbg !3328
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3328
  %idxprom = zext i32 %4 to i64, !dbg !3328
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %idxprom, !dbg !3328
  %5 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx, align 8, !dbg !3328
  store %struct.alias_set_entry_d* %5, %struct.alias_set_entry_d** %old_obj_, align 8, !dbg !3328
  %6 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %obj_.addr, align 8, !dbg !3328
  %7 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !3328
  %vec1 = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %7, i32 0, i32 2, !dbg !3328
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3328
  %idxprom2 = zext i32 %8 to i64, !dbg !3328
  %arrayidx3 = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !3328
  store %struct.alias_set_entry_d* %6, %struct.alias_set_entry_d** %arrayidx3, align 8, !dbg !3328
  %9 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %old_obj_, align 8, !dbg !3328
  ret %struct.alias_set_entry_d* %9, !dbg !3328
}

declare dso_local i32 @splay_tree_foreach(%struct.splay_tree_s*, i32 (%struct.splay_tree_node_s*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @insert_subset_children(%struct.splay_tree_node_s* %node, i8* %data) #0 !dbg !3332 {
entry:
  %node.addr = alloca %struct.splay_tree_node_s*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.splay_tree_node_s* %node, %struct.splay_tree_node_s** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %node.addr, metadata !3335, metadata !DIExpression()), !dbg !3336
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3337, metadata !DIExpression()), !dbg !3338
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3339
  %1 = bitcast i8* %0 to %struct.splay_tree_s*, !dbg !3340
  %2 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %node.addr, align 8, !dbg !3341
  %key = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %2, i32 0, i32 0, !dbg !3342
  %3 = load i64, i64* %key, align 8, !dbg !3342
  %4 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %node.addr, align 8, !dbg !3343
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %4, i32 0, i32 1, !dbg !3344
  %5 = load i64, i64* %value, align 8, !dbg !3344
  %call = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %1, i64 %3, i64 %5), !dbg !3345
  ret i32 0, !dbg !3346
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !3347 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3352, metadata !DIExpression()), !dbg !3353
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3354, metadata !DIExpression()), !dbg !3353
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !3355, metadata !DIExpression()), !dbg !3353
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3356
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3356
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3356

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3356
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3356
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !3356
  %3 = load i32, i32* %num, align 8, !dbg !3356
  %cmp = icmp ult i32 %1, %3, !dbg !3356
  br i1 %cmp, label %if.then, label %if.else, !dbg !3353

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3358
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !3358
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3358
  %idxprom = zext i32 %5 to i64, !dbg !3358
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3358
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3358
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3358
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !3358
  store i32 1, i32* %retval, align 4, !dbg !3358
  br label %return, !dbg !3358

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3360
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !3360
  store i32 0, i32* %retval, align 4, !dbg !3360
  br label %return, !dbg !3360

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3353
  ret i32 %9, !dbg !3353
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_varargs_alias_set() #0 !dbg !3362 {
entry:
  ret i32 0, !dbg !3363
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_frame_alias_set() #0 !dbg !3364 {
entry:
  %0 = load i32, i32* @frame_set, align 4, !dbg !3365
  %cmp = icmp eq i32 %0, -1, !dbg !3367
  br i1 %cmp, label %if.then, label %if.end, !dbg !3368

if.then:                                          ; preds = %entry
  %call = call i32 @new_alias_set(), !dbg !3369
  store i32 %call, i32* @frame_set, align 4, !dbg !3370
  br label %if.end, !dbg !3371

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @frame_set, align 4, !dbg !3372
  ret i32 %1, !dbg !3373
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_reg_known_value(i32 %regno) #0 !dbg !3374 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3377, metadata !DIExpression()), !dbg !3378
  %0 = load i32, i32* %regno.addr, align 4, !dbg !3379
  %cmp = icmp uge i32 %0, 53, !dbg !3381
  br i1 %cmp, label %if.then, label %if.end3, !dbg !3382

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !3383
  %sub = sub i32 %1, 53, !dbg !3383
  store i32 %sub, i32* %regno.addr, align 4, !dbg !3383
  %2 = load i32, i32* %regno.addr, align 4, !dbg !3385
  %3 = load i32, i32* @reg_known_value_size, align 4, !dbg !3387
  %cmp1 = icmp ult i32 %2, %3, !dbg !3388
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !3389

if.then2:                                         ; preds = %if.then
  %4 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !3390
  %5 = load i32, i32* %regno.addr, align 4, !dbg !3391
  %idxprom = zext i32 %5 to i64, !dbg !3390
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 %idxprom, !dbg !3390
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !3390
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !3392
  br label %return, !dbg !3392

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !3393

if.end3:                                          ; preds = %if.end, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3394
  br label %return, !dbg !3394

return:                                           ; preds = %if.end3, %if.then2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3395
  ret %struct.rtx_def* %7, !dbg !3395
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @get_reg_known_equiv_p(i32 %regno) #0 !dbg !3396 {
entry:
  %retval = alloca i8, align 1
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3399, metadata !DIExpression()), !dbg !3400
  %0 = load i32, i32* %regno.addr, align 4, !dbg !3401
  %cmp = icmp uge i32 %0, 53, !dbg !3403
  br i1 %cmp, label %if.then, label %if.end3, !dbg !3404

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !3405
  %sub = sub i32 %1, 53, !dbg !3405
  store i32 %sub, i32* %regno.addr, align 4, !dbg !3405
  %2 = load i32, i32* %regno.addr, align 4, !dbg !3407
  %3 = load i32, i32* @reg_known_value_size, align 4, !dbg !3409
  %cmp1 = icmp ult i32 %2, %3, !dbg !3410
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !3411

if.then2:                                         ; preds = %if.then
  %4 = load i8*, i8** @reg_known_equiv_p, align 8, !dbg !3412
  %5 = load i32, i32* %regno.addr, align 4, !dbg !3413
  %idxprom = zext i32 %5 to i64, !dbg !3412
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !3412
  %6 = load i8, i8* %arrayidx, align 1, !dbg !3412
  store i8 %6, i8* %retval, align 1, !dbg !3414
  br label %return, !dbg !3414

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !3415

if.end3:                                          ; preds = %if.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !3416
  br label %return, !dbg !3416

return:                                           ; preds = %if.end3, %if.then2
  %7 = load i8, i8* %retval, align 1, !dbg !3417
  ret i8 %7, !dbg !3417
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @canon_rtx(%struct.rtx_def* %x) #0 !dbg !3418 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  %x0 = alloca %struct.rtx_def*, align 8
  %x1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3421, metadata !DIExpression()), !dbg !3422
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3423
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3423
  %bf.load = load i32, i32* %1, align 8, !dbg !3423
  %bf.clear = and i32 %bf.load, 65535, !dbg !3423
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !3423
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !3425

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3426
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !3426
  %cmp1 = icmp uge i32 %call, 53, !dbg !3427
  br i1 %cmp1, label %if.then, label %if.end9, !dbg !3428

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !3429, metadata !DIExpression()), !dbg !3431
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3432
  %call2 = call i32 @rhs_regno(%struct.rtx_def* %3), !dbg !3432
  %call3 = call %struct.rtx_def* @get_reg_known_value(i32 %call2), !dbg !3433
  store %struct.rtx_def* %call3, %struct.rtx_def** %t, align 8, !dbg !3431
  %4 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !3434
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3436
  %cmp4 = icmp eq %struct.rtx_def* %4, %5, !dbg !3437
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !3438

if.then5:                                         ; preds = %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3439
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !3440
  br label %return, !dbg !3440

if.end:                                           ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !3441
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !3441
  br i1 %tobool, label %if.then6, label %if.end8, !dbg !3443

if.then6:                                         ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !3444
  %call7 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %8), !dbg !3445
  store %struct.rtx_def* %call7, %struct.rtx_def** %retval, align 8, !dbg !3446
  br label %return, !dbg !3446

if.end8:                                          ; preds = %if.end
  br label %if.end9, !dbg !3447

if.end9:                                          ; preds = %if.end8, %land.lhs.true, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3448
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3448
  %bf.load10 = load i32, i32* %10, align 8, !dbg !3448
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !3448
  %cmp12 = icmp eq i32 %bf.clear11, 49, !dbg !3450
  br i1 %cmp12, label %if.then13, label %if.else52, !dbg !3451

if.then13:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x0, metadata !3452, metadata !DIExpression()), !dbg !3454
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3455
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3455
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3455
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3455
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3455
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3455
  %call14 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %12), !dbg !3456
  store %struct.rtx_def* %call14, %struct.rtx_def** %x0, align 8, !dbg !3454
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x1, metadata !3457, metadata !DIExpression()), !dbg !3458
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3459
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3459
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !3459
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !3459
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !3459
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !3459
  %call19 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %14), !dbg !3460
  store %struct.rtx_def* %call19, %struct.rtx_def** %x1, align 8, !dbg !3458
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !3461
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3463
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !3463
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3463
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !3463
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !3463
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !3463
  %cmp24 = icmp ne %struct.rtx_def* %15, %17, !dbg !3464
  br i1 %cmp24, label %if.then30, label %lor.lhs.false, !dbg !3465

lor.lhs.false:                                    ; preds = %if.then13
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !3466
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3467
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3467
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !3467
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !3467
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !3467
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !3467
  %cmp29 = icmp ne %struct.rtx_def* %18, %20, !dbg !3468
  br i1 %cmp29, label %if.then30, label %if.end51, !dbg !3469

if.then30:                                        ; preds = %lor.lhs.false, %if.then13
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !3470
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !3470
  %bf.load31 = load i32, i32* %22, align 8, !dbg !3470
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !3470
  %cmp33 = icmp eq i32 %bf.clear32, 30, !dbg !3470
  br i1 %cmp33, label %if.then34, label %if.else, !dbg !3473

if.then34:                                        ; preds = %if.then30
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !3474
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !3475
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !3475
  %hwint = bitcast %union.u* %u35 to [1 x i64]*, !dbg !3475
  %arrayidx36 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3475
  %25 = load i64, i64* %arrayidx36, align 8, !dbg !3475
  %call37 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %23, i64 %25), !dbg !3476
  store %struct.rtx_def* %call37, %struct.rtx_def** %retval, align 8, !dbg !3477
  br label %return, !dbg !3477

if.else:                                          ; preds = %if.then30
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !3478
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !3478
  %bf.load38 = load i32, i32* %27, align 8, !dbg !3478
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !3478
  %cmp40 = icmp eq i32 %bf.clear39, 30, !dbg !3478
  br i1 %cmp40, label %if.then41, label %if.end46, !dbg !3480

if.then41:                                        ; preds = %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !3481
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !3482
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !3482
  %hwint43 = bitcast %union.u* %u42 to [1 x i64]*, !dbg !3482
  %arrayidx44 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint43, i64 0, i64 0, !dbg !3482
  %30 = load i64, i64* %arrayidx44, align 8, !dbg !3482
  %call45 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %28, i64 %30), !dbg !3483
  store %struct.rtx_def* %call45, %struct.rtx_def** %retval, align 8, !dbg !3484
  br label %return, !dbg !3484

if.end46:                                         ; preds = %if.else
  br label %if.end47

if.end47:                                         ; preds = %if.end46
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3485
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !3485
  %bf.load48 = load i32, i32* %32, align 8, !dbg !3485
  %bf.lshr = lshr i32 %bf.load48, 16, !dbg !3485
  %bf.clear49 = and i32 %bf.lshr, 255, !dbg !3485
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !3485
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !3485
  %call50 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %bf.clear49, %struct.rtx_def* %33, %struct.rtx_def* %34), !dbg !3485
  store %struct.rtx_def* %call50, %struct.rtx_def** %retval, align 8, !dbg !3486
  br label %return, !dbg !3486

if.end51:                                         ; preds = %lor.lhs.false
  br label %if.end64, !dbg !3487

if.else52:                                        ; preds = %if.end9
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3488
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !3488
  %bf.load53 = load i32, i32* %36, align 8, !dbg !3488
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !3488
  %cmp55 = icmp eq i32 %bf.clear54, 43, !dbg !3488
  br i1 %cmp55, label %if.then56, label %if.end63, !dbg !3490

if.then56:                                        ; preds = %if.else52
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3491
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3492
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !3492
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !3492
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !3492
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !3492
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !3492
  %call61 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %39), !dbg !3493
  %call62 = call %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %37, %struct.rtx_def* %call61), !dbg !3494
  store %struct.rtx_def* %call62, %struct.rtx_def** %x.addr, align 8, !dbg !3495
  br label %if.end63, !dbg !3496

if.end63:                                         ; preds = %if.then56, %if.else52
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.end51
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3497
  store %struct.rtx_def* %40, %struct.rtx_def** %retval, align 8, !dbg !3498
  br label %return, !dbg !3498

return:                                           ; preds = %if.end64, %if.end47, %if.then41, %if.then34, %if.then6, %if.then5
  %41 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3499
  ret %struct.rtx_def* %41, !dbg !3499
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !3500 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3503, metadata !DIExpression()), !dbg !3504
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3505
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3505
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3505
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3505
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3505
  %1 = load i32, i32* %rt_uint, align 8, !dbg !3505
  ret i32 %1, !dbg !3506
}

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @find_base_term(%struct.rtx_def* %x) #0 !dbg !3507 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.cselib_val_struct*, align 8
  %l = alloca %struct.elt_loc_list*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %tmp1 = alloca %struct.rtx_def*, align 8
  %tmp2 = alloca %struct.rtx_def*, align 8
  %base117 = alloca %struct.rtx_def*, align 8
  %base133 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3508, metadata !DIExpression()), !dbg !3509
  call void @llvm.dbg.declare(metadata %struct.cselib_val_struct** %val, metadata !3510, metadata !DIExpression()), !dbg !3511
  call void @llvm.dbg.declare(metadata %struct.elt_loc_list** %l, metadata !3512, metadata !DIExpression()), !dbg !3513
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3514
  %call = call %struct.rtx_def* @ix86_find_base_term(%struct.rtx_def* %0), !dbg !3514
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8, !dbg !3515
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3516
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3516
  %bf.load = load i32, i32* %2, align 8, !dbg !3516
  %bf.clear = and i32 %bf.load, 65535, !dbg !3516
  switch i32 %bf.clear, label %sw.default [
    i32 37, label %sw.bb
    i32 100, label %sw.bb15
    i32 121, label %sw.bb27
    i32 75, label %sw.bb27
    i32 74, label %sw.bb27
    i32 77, label %sw.bb27
    i32 76, label %sw.bb27
    i32 78, label %sw.bb27
    i32 79, label %sw.bb27
    i32 99, label %sw.bb30
    i32 98, label %sw.bb30
    i32 1, label %sw.bb51
    i32 122, label %sw.bb64
    i32 35, label %sw.bb70
    i32 49, label %sw.bb86
    i32 50, label %sw.bb86
    i32 61, label %sw.bb190
    i32 45, label %sw.bb215
    i32 44, label %sw.bb215
  ], !dbg !3517

sw.bb:                                            ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3518
  %call1 = call i32 @rhs_regno(%struct.rtx_def* %3), !dbg !3518
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !3518
  %tobool = icmp ne %struct.VEC_rtx_gc* %4, null, !dbg !3518
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3518

cond.true:                                        ; preds = %sw.bb
  %5 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !3518
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %5, i32 0, i32 0, !dbg !3518
  br label %cond.end, !dbg !3518

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !3518

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3518
  %call2 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !3518
  %cmp = icmp ult i32 %call1, %call2, !dbg !3518
  br i1 %cmp, label %cond.true3, label %cond.false12, !dbg !3518

cond.true3:                                       ; preds = %cond.end
  %6 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !3518
  %tobool4 = icmp ne %struct.VEC_rtx_gc* %6, null, !dbg !3518
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3518

cond.true5:                                       ; preds = %cond.true3
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !3518
  %base6 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %7, i32 0, i32 0, !dbg !3518
  br label %cond.end8, !dbg !3518

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !3518

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_rtx_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3518
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3518
  %call10 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !3518
  %call11 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond9, i32 %call10), !dbg !3518
  br label %cond.end13, !dbg !3518

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !3518

cond.end13:                                       ; preds = %cond.false12, %cond.end8
  %cond14 = phi %struct.rtx_def* [ %call11, %cond.end8 ], [ null, %cond.false12 ], !dbg !3518
  store %struct.rtx_def* %cond14, %struct.rtx_def** %retval, align 8, !dbg !3520
  br label %return, !dbg !3520

sw.bb15:                                          ; preds = %entry
  %call16 = call zeroext i8 @target_default_pointer_address_modes_p(), !dbg !3521
  %tobool17 = icmp ne i8 %call16, 0, !dbg !3521
  br i1 %tobool17, label %if.end, label %if.then, !dbg !3523

if.then:                                          ; preds = %sw.bb15
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3524
  br label %return, !dbg !3524

if.end:                                           ; preds = %sw.bb15
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3525
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3525
  %bf.load18 = load i32, i32* %10, align 8, !dbg !3525
  %bf.lshr = lshr i32 %bf.load18, 16, !dbg !3525
  %bf.clear19 = and i32 %bf.lshr, 255, !dbg !3525
  %idxprom = zext i32 %bf.clear19 to i64, !dbg !3525
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3525
  %11 = load i8, i8* %arrayidx, align 1, !dbg !3525
  %conv = zext i8 %11 to i16, !dbg !3525
  %conv20 = zext i16 %conv to i32, !dbg !3525
  %12 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !3527
  %conv21 = zext i8 %12 to i16, !dbg !3527
  %conv22 = zext i16 %conv21 to i32, !dbg !3527
  %cmp23 = icmp slt i32 %conv20, %conv22, !dbg !3528
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !3529

if.then25:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3530
  br label %return, !dbg !3530

if.end26:                                         ; preds = %if.end
  br label %sw.bb27, !dbg !3527

sw.bb27:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %if.end26
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3531
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3531
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3531
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3531
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !3531
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3531
  %call29 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %14), !dbg !3532
  store %struct.rtx_def* %call29, %struct.rtx_def** %retval, align 8, !dbg !3533
  br label %return, !dbg !3533

sw.bb30:                                          ; preds = %entry, %entry
  %call31 = call zeroext i8 @target_default_pointer_address_modes_p(), !dbg !3534
  %tobool32 = icmp ne i8 %call31, 0, !dbg !3534
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !3536

if.then33:                                        ; preds = %sw.bb30
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3537
  br label %return, !dbg !3537

if.end34:                                         ; preds = %sw.bb30
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !3538, metadata !DIExpression()), !dbg !3540
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3541
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3541
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !3541
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !3541
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !3541
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !3541
  %call39 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %16), !dbg !3542
  store %struct.rtx_def* %call39, %struct.rtx_def** %temp, align 8, !dbg !3540
  %17 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !3543
  %cmp40 = icmp ne %struct.rtx_def* %17, null, !dbg !3545
  br i1 %cmp40, label %land.lhs.true, label %if.end50, !dbg !3546

land.lhs.true:                                    ; preds = %if.end34
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !3547
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3547
  %bf.load42 = load i32, i32* %19, align 8, !dbg !3547
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !3547
  %idxprom44 = sext i32 %bf.clear43 to i64, !dbg !3547
  %arrayidx45 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom44, !dbg !3547
  %20 = load i32, i32* %arrayidx45, align 4, !dbg !3547
  %cmp46 = icmp eq i32 %20, 9, !dbg !3547
  br i1 %cmp46, label %if.then48, label %if.end50, !dbg !3548

if.then48:                                        ; preds = %land.lhs.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !3549
  %call49 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %21, i8 zeroext 0), !dbg !3549
  store %struct.rtx_def* %call49, %struct.rtx_def** %temp, align 8, !dbg !3550
  br label %if.end50, !dbg !3551

if.end50:                                         ; preds = %if.then48, %land.lhs.true, %if.end34
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !3552
  store %struct.rtx_def* %22, %struct.rtx_def** %retval, align 8, !dbg !3553
  br label %return, !dbg !3553

sw.bb51:                                          ; preds = %entry
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3554
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !3554
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !3554
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !3554
  %rt_cselib = bitcast %union.rtunion_def* %arrayidx54 to %struct.cselib_val_struct**, !dbg !3554
  %24 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %rt_cselib, align 8, !dbg !3554
  store %struct.cselib_val_struct* %24, %struct.cselib_val_struct** %val, align 8, !dbg !3555
  %25 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %val, align 8, !dbg !3556
  %tobool55 = icmp ne %struct.cselib_val_struct* %25, null, !dbg !3556
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !3558

if.then56:                                        ; preds = %sw.bb51
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3559
  br label %return, !dbg !3559

if.end57:                                         ; preds = %sw.bb51
  %26 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %val, align 8, !dbg !3560
  %locs = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %26, i32 0, i32 3, !dbg !3562
  %27 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs, align 8, !dbg !3562
  store %struct.elt_loc_list* %27, %struct.elt_loc_list** %l, align 8, !dbg !3563
  br label %for.cond, !dbg !3564

for.cond:                                         ; preds = %for.inc, %if.end57
  %28 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3565
  %tobool58 = icmp ne %struct.elt_loc_list* %28, null, !dbg !3567
  br i1 %tobool58, label %for.body, label %for.end, !dbg !3567

for.body:                                         ; preds = %for.cond
  %29 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3568
  %loc = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %29, i32 0, i32 1, !dbg !3570
  %30 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8, !dbg !3570
  %call59 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %30), !dbg !3571
  store %struct.rtx_def* %call59, %struct.rtx_def** %x.addr, align 8, !dbg !3572
  %cmp60 = icmp ne %struct.rtx_def* %call59, null, !dbg !3573
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !3574

if.then62:                                        ; preds = %for.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3575
  store %struct.rtx_def* %31, %struct.rtx_def** %retval, align 8, !dbg !3576
  br label %return, !dbg !3576

if.end63:                                         ; preds = %for.body
  br label %for.inc, !dbg !3577

for.inc:                                          ; preds = %if.end63
  %32 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3578
  %next = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %32, i32 0, i32 0, !dbg !3579
  %33 = load %struct.elt_loc_list*, %struct.elt_loc_list** %next, align 8, !dbg !3579
  store %struct.elt_loc_list* %33, %struct.elt_loc_list** %l, align 8, !dbg !3580
  br label %for.cond, !dbg !3581, !llvm.loop !3582

for.end:                                          ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3584
  br label %return, !dbg !3584

sw.bb64:                                          ; preds = %entry
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3585
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !3585
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !3585
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 1, !dbg !3585
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !3585
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !3585
  %call69 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %35), !dbg !3586
  store %struct.rtx_def* %call69, %struct.rtx_def** %retval, align 8, !dbg !3587
  br label %return, !dbg !3587

sw.bb70:                                          ; preds = %entry
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3588
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !3588
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !3588
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !3588
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !3588
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !3588
  store %struct.rtx_def* %37, %struct.rtx_def** %x.addr, align 8, !dbg !3589
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3590
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !3590
  %bf.load75 = load i32, i32* %39, align 8, !dbg !3590
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !3590
  %cmp77 = icmp ne i32 %bf.clear76, 49, !dbg !3592
  br i1 %cmp77, label %land.lhs.true79, label %if.end85, !dbg !3593

land.lhs.true79:                                  ; preds = %sw.bb70
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3594
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !3594
  %bf.load80 = load i32, i32* %41, align 8, !dbg !3594
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !3594
  %cmp82 = icmp ne i32 %bf.clear81, 50, !dbg !3595
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !3596

if.then84:                                        ; preds = %land.lhs.true79
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3597
  br label %return, !dbg !3597

if.end85:                                         ; preds = %land.lhs.true79, %sw.bb70
  br label %sw.bb86, !dbg !3598

sw.bb86:                                          ; preds = %entry, %entry, %if.end85
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp1, metadata !3599, metadata !DIExpression()), !dbg !3601
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3602
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !3602
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !3602
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !3602
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !3602
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !3602
  store %struct.rtx_def* %43, %struct.rtx_def** %tmp1, align 8, !dbg !3601
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp2, metadata !3603, metadata !DIExpression()), !dbg !3604
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3605
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !3605
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !3605
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !3605
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !3605
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !3605
  store %struct.rtx_def* %45, %struct.rtx_def** %tmp2, align 8, !dbg !3604
  %46 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3606
  %47 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8, !dbg !3608
  %cmp95 = icmp eq %struct.rtx_def* %46, %47, !dbg !3609
  br i1 %cmp95, label %land.lhs.true97, label %if.end106, !dbg !3610

land.lhs.true97:                                  ; preds = %sw.bb86
  %48 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3611
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !3611
  %bf.load98 = load i32, i32* %49, align 8, !dbg !3611
  %bf.clear99 = and i32 %bf.load98, 65535, !dbg !3611
  %idxprom100 = sext i32 %bf.clear99 to i64, !dbg !3611
  %arrayidx101 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom100, !dbg !3611
  %50 = load i32, i32* %arrayidx101, align 4, !dbg !3611
  %cmp102 = icmp eq i32 %50, 9, !dbg !3611
  br i1 %cmp102, label %if.then104, label %if.end106, !dbg !3612

if.then104:                                       ; preds = %land.lhs.true97
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3613
  %call105 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %51), !dbg !3614
  store %struct.rtx_def* %call105, %struct.rtx_def** %retval, align 8, !dbg !3615
  br label %return, !dbg !3615

if.end106:                                        ; preds = %land.lhs.true97, %sw.bb86
  %52 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3616
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !3616
  %bf.load107 = load i32, i32* %53, align 8, !dbg !3616
  %bf.clear108 = and i32 %bf.load107, 65535, !dbg !3616
  %cmp109 = icmp eq i32 %bf.clear108, 37, !dbg !3616
  br i1 %cmp109, label %land.lhs.true111, label %if.end122, !dbg !3618

land.lhs.true111:                                 ; preds = %if.end106
  %54 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3619
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !3619
  %bf.load112 = load i32, i32* %55, align 8, !dbg !3619
  %bf.lshr113 = lshr i32 %bf.load112, 30, !dbg !3619
  %bf.clear114 = and i32 %bf.lshr113, 1, !dbg !3619
  %tobool115 = icmp ne i32 %bf.clear114, 0, !dbg !3619
  br i1 %tobool115, label %if.then116, label %if.end122, !dbg !3620

if.then116:                                       ; preds = %land.lhs.true111
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %base117, metadata !3621, metadata !DIExpression()), !dbg !3623
  %56 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3624
  %call118 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %56), !dbg !3625
  store %struct.rtx_def* %call118, %struct.rtx_def** %base117, align 8, !dbg !3623
  %57 = load %struct.rtx_def*, %struct.rtx_def** %base117, align 8, !dbg !3626
  %tobool119 = icmp ne %struct.rtx_def* %57, null, !dbg !3626
  br i1 %tobool119, label %if.then120, label %if.end121, !dbg !3628

if.then120:                                       ; preds = %if.then116
  %58 = load %struct.rtx_def*, %struct.rtx_def** %base117, align 8, !dbg !3629
  store %struct.rtx_def* %58, %struct.rtx_def** %retval, align 8, !dbg !3630
  br label %return, !dbg !3630

if.end121:                                        ; preds = %if.then116
  br label %if.end122, !dbg !3631

if.end122:                                        ; preds = %if.end121, %land.lhs.true111, %if.end106
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3632
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !3632
  %bf.load123 = load i32, i32* %60, align 8, !dbg !3632
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !3632
  %cmp125 = icmp eq i32 %bf.clear124, 37, !dbg !3632
  br i1 %cmp125, label %land.lhs.true127, label %if.end138, !dbg !3634

land.lhs.true127:                                 ; preds = %if.end122
  %61 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3635
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !3635
  %bf.load128 = load i32, i32* %62, align 8, !dbg !3635
  %bf.lshr129 = lshr i32 %bf.load128, 30, !dbg !3635
  %bf.clear130 = and i32 %bf.lshr129, 1, !dbg !3635
  %tobool131 = icmp ne i32 %bf.clear130, 0, !dbg !3635
  br i1 %tobool131, label %if.then132, label %if.end138, !dbg !3636

if.then132:                                       ; preds = %land.lhs.true127
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %base133, metadata !3637, metadata !DIExpression()), !dbg !3639
  %63 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3640
  %call134 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %63), !dbg !3641
  store %struct.rtx_def* %call134, %struct.rtx_def** %base133, align 8, !dbg !3639
  %64 = load %struct.rtx_def*, %struct.rtx_def** %base133, align 8, !dbg !3642
  %tobool135 = icmp ne %struct.rtx_def* %64, null, !dbg !3642
  br i1 %tobool135, label %if.then136, label %if.end137, !dbg !3644

if.then136:                                       ; preds = %if.then132
  %65 = load %struct.rtx_def*, %struct.rtx_def** %base133, align 8, !dbg !3645
  store %struct.rtx_def* %65, %struct.rtx_def** %retval, align 8, !dbg !3646
  br label %return, !dbg !3646

if.end137:                                        ; preds = %if.then132
  br label %if.end138, !dbg !3647

if.end138:                                        ; preds = %if.end137, %land.lhs.true127, %if.end122
  %66 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3648
  %call139 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %66), !dbg !3649
  store %struct.rtx_def* %call139, %struct.rtx_def** %tmp1, align 8, !dbg !3650
  %67 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3651
  %call140 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %67), !dbg !3652
  store %struct.rtx_def* %call140, %struct.rtx_def** %tmp2, align 8, !dbg !3653
  %68 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3654
  %cmp141 = icmp ne %struct.rtx_def* %68, null, !dbg !3656
  br i1 %cmp141, label %land.lhs.true143, label %if.end164, !dbg !3657

land.lhs.true143:                                 ; preds = %if.end138
  %69 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3658
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !3658
  %bf.load144 = load i32, i32* %70, align 8, !dbg !3658
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !3658
  %cmp146 = icmp eq i32 %bf.clear145, 45, !dbg !3659
  br i1 %cmp146, label %if.then163, label %lor.lhs.false, !dbg !3660

lor.lhs.false:                                    ; preds = %land.lhs.true143
  %71 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3661
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !3661
  %bf.load148 = load i32, i32* %72, align 8, !dbg !3661
  %bf.clear149 = and i32 %bf.load148, 65535, !dbg !3661
  %cmp150 = icmp eq i32 %bf.clear149, 44, !dbg !3662
  br i1 %cmp150, label %if.then163, label %lor.lhs.false152, !dbg !3663

lor.lhs.false152:                                 ; preds = %lor.lhs.false
  %73 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3664
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !3664
  %bf.load153 = load i32, i32* %74, align 8, !dbg !3664
  %bf.clear154 = and i32 %bf.load153, 65535, !dbg !3664
  %cmp155 = icmp eq i32 %bf.clear154, 6, !dbg !3665
  br i1 %cmp155, label %land.lhs.true157, label %if.end164, !dbg !3666

land.lhs.true157:                                 ; preds = %lor.lhs.false152
  %75 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3667
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !3667
  %bf.load158 = load i32, i32* %76, align 8, !dbg !3667
  %bf.lshr159 = lshr i32 %bf.load158, 16, !dbg !3667
  %bf.clear160 = and i32 %bf.lshr159, 255, !dbg !3667
  %cmp161 = icmp ne i32 %bf.clear160, 0, !dbg !3668
  br i1 %cmp161, label %if.then163, label %if.end164, !dbg !3669

if.then163:                                       ; preds = %land.lhs.true157, %lor.lhs.false, %land.lhs.true143
  %77 = load %struct.rtx_def*, %struct.rtx_def** %tmp1, align 8, !dbg !3670
  store %struct.rtx_def* %77, %struct.rtx_def** %retval, align 8, !dbg !3671
  br label %return, !dbg !3671

if.end164:                                        ; preds = %land.lhs.true157, %lor.lhs.false152, %if.end138
  %78 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3672
  %cmp165 = icmp ne %struct.rtx_def* %78, null, !dbg !3674
  br i1 %cmp165, label %land.lhs.true167, label %if.end189, !dbg !3675

land.lhs.true167:                                 ; preds = %if.end164
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3676
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !3676
  %bf.load168 = load i32, i32* %80, align 8, !dbg !3676
  %bf.clear169 = and i32 %bf.load168, 65535, !dbg !3676
  %cmp170 = icmp eq i32 %bf.clear169, 45, !dbg !3677
  br i1 %cmp170, label %if.then188, label %lor.lhs.false172, !dbg !3678

lor.lhs.false172:                                 ; preds = %land.lhs.true167
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3679
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !3679
  %bf.load173 = load i32, i32* %82, align 8, !dbg !3679
  %bf.clear174 = and i32 %bf.load173, 65535, !dbg !3679
  %cmp175 = icmp eq i32 %bf.clear174, 44, !dbg !3680
  br i1 %cmp175, label %if.then188, label %lor.lhs.false177, !dbg !3681

lor.lhs.false177:                                 ; preds = %lor.lhs.false172
  %83 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3682
  %84 = bitcast %struct.rtx_def* %83 to i32*, !dbg !3682
  %bf.load178 = load i32, i32* %84, align 8, !dbg !3682
  %bf.clear179 = and i32 %bf.load178, 65535, !dbg !3682
  %cmp180 = icmp eq i32 %bf.clear179, 6, !dbg !3683
  br i1 %cmp180, label %land.lhs.true182, label %if.end189, !dbg !3684

land.lhs.true182:                                 ; preds = %lor.lhs.false177
  %85 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3685
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !3685
  %bf.load183 = load i32, i32* %86, align 8, !dbg !3685
  %bf.lshr184 = lshr i32 %bf.load183, 16, !dbg !3685
  %bf.clear185 = and i32 %bf.lshr184, 255, !dbg !3685
  %cmp186 = icmp ne i32 %bf.clear185, 0, !dbg !3686
  br i1 %cmp186, label %if.then188, label %if.end189, !dbg !3687

if.then188:                                       ; preds = %land.lhs.true182, %lor.lhs.false172, %land.lhs.true167
  %87 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8, !dbg !3688
  store %struct.rtx_def* %87, %struct.rtx_def** %retval, align 8, !dbg !3689
  br label %return, !dbg !3689

if.end189:                                        ; preds = %land.lhs.true182, %lor.lhs.false177, %if.end164
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3690
  br label %return, !dbg !3690

sw.bb190:                                         ; preds = %entry
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3691
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !3691
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !3691
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 1, !dbg !3691
  %rt_rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**, !dbg !3691
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx194, align 8, !dbg !3691
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !3691
  %bf.load195 = load i32, i32* %90, align 8, !dbg !3691
  %bf.clear196 = and i32 %bf.load195, 65535, !dbg !3691
  %cmp197 = icmp eq i32 %bf.clear196, 30, !dbg !3691
  br i1 %cmp197, label %land.lhs.true199, label %if.end214, !dbg !3693

land.lhs.true199:                                 ; preds = %sw.bb190
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3694
  %u200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !3694
  %fld201 = bitcast %union.u* %u200 to [1 x %union.rtunion_def]*, !dbg !3694
  %arrayidx202 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld201, i64 0, i64 1, !dbg !3694
  %rt_rtx203 = bitcast %union.rtunion_def* %arrayidx202 to %struct.rtx_def**, !dbg !3694
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx203, align 8, !dbg !3694
  %u204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !3694
  %hwint = bitcast %union.u* %u204 to [1 x i64]*, !dbg !3694
  %arrayidx205 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3694
  %93 = load i64, i64* %arrayidx205, align 8, !dbg !3694
  %cmp206 = icmp ne i64 %93, 0, !dbg !3695
  br i1 %cmp206, label %if.then208, label %if.end214, !dbg !3696

if.then208:                                       ; preds = %land.lhs.true199
  %94 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3697
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3697
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !3697
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 0, !dbg !3697
  %rt_rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**, !dbg !3697
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx212, align 8, !dbg !3697
  %call213 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %95), !dbg !3698
  store %struct.rtx_def* %call213, %struct.rtx_def** %retval, align 8, !dbg !3699
  br label %return, !dbg !3699

if.end214:                                        ; preds = %land.lhs.true199, %sw.bb190
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3700
  br label %return, !dbg !3700

sw.bb215:                                         ; preds = %entry, %entry
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3701
  store %struct.rtx_def* %96, %struct.rtx_def** %retval, align 8, !dbg !3702
  br label %return, !dbg !3702

sw.default:                                       ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3703
  br label %return, !dbg !3703

return:                                           ; preds = %sw.default, %sw.bb215, %if.end214, %if.then208, %if.end189, %if.then188, %if.then163, %if.then136, %if.then120, %if.then104, %if.then84, %sw.bb64, %for.end, %if.then62, %if.then56, %if.end50, %if.then33, %sw.bb27, %if.then25, %if.then, %cond.end13
  %97 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3704
  ret %struct.rtx_def* %97, !dbg !3704
}

declare dso_local %struct.rtx_def* @ix86_find_base_term(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %vec_) #0 !dbg !3705 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !3710, metadata !DIExpression()), !dbg !3711
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !3711
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !3711
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3711

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !3711
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !3711
  %2 = load i32, i32* %num, align 8, !dbg !3711
  br label %cond.end, !dbg !3711

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3711

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3711
  ret i32 %cond, !dbg !3711
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %vec_, i32 %ix_) #0 !dbg !3712 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !3715, metadata !DIExpression()), !dbg !3716
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3717, metadata !DIExpression()), !dbg !3716
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !3716
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !3716
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3716

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3716
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !3716
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !3716
  %3 = load i32, i32* %num, align 8, !dbg !3716
  %cmp = icmp ult i32 %1, %3, !dbg !3716
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3718
  %land.ext = zext i1 %4 to i32, !dbg !3716
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !3716
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 2, !dbg !3716
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3716
  %idxprom = zext i32 %6 to i64, !dbg !3716
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !3716
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !3716
  ret %struct.rtx_def* %7, !dbg !3716
}

declare dso_local zeroext i8 @target_default_pointer_address_modes_p() #2

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_addr(%struct.rtx_def* %x) #0 !dbg !3719 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.cselib_val_struct*, align 8
  %l = alloca %struct.elt_loc_list*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  call void @llvm.dbg.declare(metadata %struct.cselib_val_struct** %v, metadata !3722, metadata !DIExpression()), !dbg !3723
  call void @llvm.dbg.declare(metadata %struct.elt_loc_list** %l, metadata !3724, metadata !DIExpression()), !dbg !3725
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3726
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3726
  %bf.load = load i32, i32* %1, align 8, !dbg !3726
  %bf.clear = and i32 %bf.load, 65535, !dbg !3726
  %cmp = icmp ne i32 %bf.clear, 1, !dbg !3728
  br i1 %cmp, label %if.then, label %if.end, !dbg !3729

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3730
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !3731
  br label %return, !dbg !3731

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3732
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !3732
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3732
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3732
  %rt_cselib = bitcast %union.rtunion_def* %arrayidx to %struct.cselib_val_struct**, !dbg !3732
  %4 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %rt_cselib, align 8, !dbg !3732
  store %struct.cselib_val_struct* %4, %struct.cselib_val_struct** %v, align 8, !dbg !3733
  %5 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %v, align 8, !dbg !3734
  %tobool = icmp ne %struct.cselib_val_struct* %5, null, !dbg !3734
  br i1 %tobool, label %if.then1, label %if.end34, !dbg !3736

if.then1:                                         ; preds = %if.end
  %6 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %v, align 8, !dbg !3737
  %locs = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %6, i32 0, i32 3, !dbg !3740
  %7 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs, align 8, !dbg !3740
  store %struct.elt_loc_list* %7, %struct.elt_loc_list** %l, align 8, !dbg !3741
  br label %for.cond, !dbg !3742

for.cond:                                         ; preds = %for.inc, %if.then1
  %8 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3743
  %tobool2 = icmp ne %struct.elt_loc_list* %8, null, !dbg !3745
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3745

for.body:                                         ; preds = %for.cond
  %9 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3746
  %loc = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %9, i32 0, i32 1, !dbg !3746
  %10 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8, !dbg !3746
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3746
  %bf.load3 = load i32, i32* %11, align 8, !dbg !3746
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !3746
  %idxprom = sext i32 %bf.clear4 to i64, !dbg !3746
  %arrayidx5 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !3746
  %12 = load i32, i32* %arrayidx5, align 4, !dbg !3746
  %cmp6 = icmp eq i32 %12, 9, !dbg !3746
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !3748

if.then7:                                         ; preds = %for.body
  %13 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3749
  %loc8 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %13, i32 0, i32 1, !dbg !3750
  %14 = load %struct.rtx_def*, %struct.rtx_def** %loc8, align 8, !dbg !3750
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !3751
  br label %return, !dbg !3751

if.end9:                                          ; preds = %for.body
  br label %for.inc, !dbg !3746

for.inc:                                          ; preds = %if.end9
  %15 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3752
  %next = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %15, i32 0, i32 0, !dbg !3753
  %16 = load %struct.elt_loc_list*, %struct.elt_loc_list** %next, align 8, !dbg !3753
  store %struct.elt_loc_list* %16, %struct.elt_loc_list** %l, align 8, !dbg !3754
  br label %for.cond, !dbg !3755, !llvm.loop !3756

for.end:                                          ; preds = %for.cond
  %17 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %v, align 8, !dbg !3758
  %locs10 = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %17, i32 0, i32 3, !dbg !3760
  %18 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs10, align 8, !dbg !3760
  store %struct.elt_loc_list* %18, %struct.elt_loc_list** %l, align 8, !dbg !3761
  br label %for.cond11, !dbg !3762

for.cond11:                                       ; preds = %for.inc25, %for.end
  %19 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3763
  %tobool12 = icmp ne %struct.elt_loc_list* %19, null, !dbg !3765
  br i1 %tobool12, label %for.body13, label %for.end27, !dbg !3765

for.body13:                                       ; preds = %for.cond11
  %20 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3766
  %loc14 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %20, i32 0, i32 1, !dbg !3766
  %21 = load %struct.rtx_def*, %struct.rtx_def** %loc14, align 8, !dbg !3766
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !3766
  %bf.load15 = load i32, i32* %22, align 8, !dbg !3766
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !3766
  %cmp17 = icmp eq i32 %bf.clear16, 37, !dbg !3766
  br i1 %cmp17, label %if.end24, label %land.lhs.true, !dbg !3768

land.lhs.true:                                    ; preds = %for.body13
  %23 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3769
  %loc18 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %23, i32 0, i32 1, !dbg !3769
  %24 = load %struct.rtx_def*, %struct.rtx_def** %loc18, align 8, !dbg !3769
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !3769
  %bf.load19 = load i32, i32* %25, align 8, !dbg !3769
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !3769
  %cmp21 = icmp eq i32 %bf.clear20, 43, !dbg !3769
  br i1 %cmp21, label %if.end24, label %if.then22, !dbg !3770

if.then22:                                        ; preds = %land.lhs.true
  %26 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3771
  %loc23 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %26, i32 0, i32 1, !dbg !3772
  %27 = load %struct.rtx_def*, %struct.rtx_def** %loc23, align 8, !dbg !3772
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !3773
  br label %return, !dbg !3773

if.end24:                                         ; preds = %land.lhs.true, %for.body13
  br label %for.inc25, !dbg !3769

for.inc25:                                        ; preds = %if.end24
  %28 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !3774
  %next26 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %28, i32 0, i32 0, !dbg !3775
  %29 = load %struct.elt_loc_list*, %struct.elt_loc_list** %next26, align 8, !dbg !3775
  store %struct.elt_loc_list* %29, %struct.elt_loc_list** %l, align 8, !dbg !3776
  br label %for.cond11, !dbg !3777, !llvm.loop !3778

for.end27:                                        ; preds = %for.cond11
  %30 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %v, align 8, !dbg !3780
  %locs28 = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %30, i32 0, i32 3, !dbg !3782
  %31 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs28, align 8, !dbg !3782
  %tobool29 = icmp ne %struct.elt_loc_list* %31, null, !dbg !3780
  br i1 %tobool29, label %if.then30, label %if.end33, !dbg !3783

if.then30:                                        ; preds = %for.end27
  %32 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %v, align 8, !dbg !3784
  %locs31 = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %32, i32 0, i32 3, !dbg !3785
  %33 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs31, align 8, !dbg !3785
  %loc32 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %33, i32 0, i32 1, !dbg !3786
  %34 = load %struct.rtx_def*, %struct.rtx_def** %loc32, align 8, !dbg !3786
  store %struct.rtx_def* %34, %struct.rtx_def** %retval, align 8, !dbg !3787
  br label %return, !dbg !3787

if.end33:                                         ; preds = %for.end27
  br label %if.end34, !dbg !3788

if.end34:                                         ; preds = %if.end33, %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3789
  store %struct.rtx_def* %35, %struct.rtx_def** %retval, align 8, !dbg !3790
  br label %return, !dbg !3790

return:                                           ; preds = %if.end34, %if.then30, %if.then22, %if.then7, %if.then
  %36 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3791
  ret %struct.rtx_def* %36, !dbg !3791
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @read_dependence(%struct.rtx_def* %mem, %struct.rtx_def* %x) #0 !dbg !3792 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !3795, metadata !DIExpression()), !dbg !3796
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3797, metadata !DIExpression()), !dbg !3798
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3799
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3799
  %bf.load = load i32, i32* %1, align 8, !dbg !3799
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !3799
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3799
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !3799
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3800

land.rhs:                                         ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !3801
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3801
  %bf.load1 = load i32, i32* %3, align 8, !dbg !3801
  %bf.lshr2 = lshr i32 %bf.load1, 27, !dbg !3801
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !3801
  %tobool4 = icmp ne i32 %bf.clear3, 0, !dbg !3800
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool4, %land.rhs ], !dbg !3802
  %land.ext = zext i1 %4 to i32, !dbg !3800
  ret i32 %land.ext, !dbg !3803
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @nonoverlapping_memrefs_p(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !3804 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %exprx = alloca %union.tree_node*, align 8
  %expry = alloca %union.tree_node*, align 8
  %rtlx = alloca %struct.rtx_def*, align 8
  %rtly = alloca %struct.rtx_def*, align 8
  %basex = alloca %struct.rtx_def*, align 8
  %basey = alloca %struct.rtx_def*, align 8
  %moffsetx = alloca %struct.rtx_def*, align 8
  %moffsety = alloca %struct.rtx_def*, align 8
  %offsetx = alloca i64, align 8
  %offsety = alloca i64, align 8
  %sizex = alloca i64, align 8
  %sizey = alloca i64, align 8
  %tem = alloca i64, align 8
  %field = alloca %union.tree_node*, align 8
  %fieldcontext = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %field206 = alloca %union.tree_node*, align 8
  %fieldcontext210 = alloca %union.tree_node*, align 8
  %t220 = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3805, metadata !DIExpression()), !dbg !3806
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !3807, metadata !DIExpression()), !dbg !3808
  call void @llvm.dbg.declare(metadata %union.tree_node** %exprx, metadata !3809, metadata !DIExpression()), !dbg !3810
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3811
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3811
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3811
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3811
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !3811
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !3811
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !3811
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3811

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !3811

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3811
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3811
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3811
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !3811
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !3811
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !3811
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 0, !dbg !3811
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3811
  br label %cond.end, !dbg !3811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %4, %cond.false ], !dbg !3811
  store %union.tree_node* %cond, %union.tree_node** %exprx, align 8, !dbg !3810
  call void @llvm.dbg.declare(metadata %union.tree_node** %expry, metadata !3812, metadata !DIExpression()), !dbg !3813
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3814
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3814
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !3814
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !3814
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !3814
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !3814
  %cmp9 = icmp eq %struct.mem_attrs* %6, null, !dbg !3814
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !3814

cond.true10:                                      ; preds = %cond.end
  br label %cond.end17, !dbg !3814

cond.false11:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3814
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !3814
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !3814
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !3814
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !3814
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !3814
  %expr16 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 0, !dbg !3814
  %9 = load %union.tree_node*, %union.tree_node** %expr16, align 8, !dbg !3814
  br label %cond.end17, !dbg !3814

cond.end17:                                       ; preds = %cond.false11, %cond.true10
  %cond18 = phi %union.tree_node* [ null, %cond.true10 ], [ %9, %cond.false11 ], !dbg !3814
  store %union.tree_node* %cond18, %union.tree_node** %expry, align 8, !dbg !3813
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtlx, metadata !3815, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtly, metadata !3817, metadata !DIExpression()), !dbg !3818
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %basex, metadata !3819, metadata !DIExpression()), !dbg !3820
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %basey, metadata !3821, metadata !DIExpression()), !dbg !3822
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %moffsetx, metadata !3823, metadata !DIExpression()), !dbg !3824
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %moffsety, metadata !3825, metadata !DIExpression()), !dbg !3826
  call void @llvm.dbg.declare(metadata i64* %offsetx, metadata !3827, metadata !DIExpression()), !dbg !3828
  store i64 0, i64* %offsetx, align 8, !dbg !3828
  call void @llvm.dbg.declare(metadata i64* %offsety, metadata !3829, metadata !DIExpression()), !dbg !3830
  store i64 0, i64* %offsety, align 8, !dbg !3830
  call void @llvm.dbg.declare(metadata i64* %sizex, metadata !3831, metadata !DIExpression()), !dbg !3832
  call void @llvm.dbg.declare(metadata i64* %sizey, metadata !3833, metadata !DIExpression()), !dbg !3834
  call void @llvm.dbg.declare(metadata i64* %tem, metadata !3835, metadata !DIExpression()), !dbg !3836
  %10 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3837
  %cmp19 = icmp eq %union.tree_node* %10, null, !dbg !3839
  br i1 %cmp19, label %if.then, label %lor.lhs.false, !dbg !3840

lor.lhs.false:                                    ; preds = %cond.end17
  %11 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3841
  %cmp20 = icmp eq %union.tree_node* %11, null, !dbg !3842
  br i1 %cmp20, label %if.then, label %if.end, !dbg !3843

if.then:                                          ; preds = %lor.lhs.false, %cond.end17
  store i32 0, i32* %retval, align 4, !dbg !3844
  br label %return, !dbg !3844

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3845
  %call = call %union.tree_node* @get_spill_slot_decl(i8 zeroext 0), !dbg !3847
  %cmp21 = icmp eq %union.tree_node* %12, %call, !dbg !3848
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false33, !dbg !3849

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3850
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3850
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !3850
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !3850
  %rt_mem25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.mem_attrs**, !dbg !3850
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem25, align 8, !dbg !3850
  %cmp26 = icmp eq %struct.mem_attrs* %14, null, !dbg !3850
  br i1 %cmp26, label %cond.true27, label %cond.false28, !dbg !3851

cond.true27:                                      ; preds = %land.lhs.true
  br i1 false, label %lor.lhs.false33, label %if.then50, !dbg !3850

cond.false28:                                     ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3850
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3850
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !3850
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !3850
  %rt_mem32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.mem_attrs**, !dbg !3850
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem32, align 8, !dbg !3850
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %16, i32 0, i32 1, !dbg !3850
  %17 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !3850
  %tobool = icmp ne %struct.rtx_def* %17, null, !dbg !3850
  br i1 %tobool, label %lor.lhs.false33, label %if.then50, !dbg !3851

lor.lhs.false33:                                  ; preds = %cond.false28, %cond.true27, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3852
  %call34 = call %union.tree_node* @get_spill_slot_decl(i8 zeroext 0), !dbg !3853
  %cmp35 = icmp eq %union.tree_node* %18, %call34, !dbg !3854
  br i1 %cmp35, label %land.lhs.true36, label %if.end51, !dbg !3855

land.lhs.true36:                                  ; preds = %lor.lhs.false33
  %19 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3856
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3856
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !3856
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !3856
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !3856
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !3856
  %cmp41 = icmp eq %struct.mem_attrs* %20, null, !dbg !3856
  br i1 %cmp41, label %cond.true42, label %cond.false43, !dbg !3857

cond.true42:                                      ; preds = %land.lhs.true36
  br i1 false, label %if.end51, label %if.then50, !dbg !3856

cond.false43:                                     ; preds = %land.lhs.true36
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3856
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !3856
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !3856
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !3856
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !3856
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !3856
  %offset48 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 1, !dbg !3856
  %23 = load %struct.rtx_def*, %struct.rtx_def** %offset48, align 8, !dbg !3856
  %tobool49 = icmp ne %struct.rtx_def* %23, null, !dbg !3856
  br i1 %tobool49, label %if.end51, label %if.then50, !dbg !3857

if.then50:                                        ; preds = %cond.false43, %cond.true42, %cond.false28, %cond.true27
  store i32 0, i32* %retval, align 4, !dbg !3858
  br label %return, !dbg !3858

if.end51:                                         ; preds = %cond.false43, %cond.true42, %lor.lhs.false33
  %24 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3859
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3859
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !3859
  %bf.load = load i64, i64* %25, align 8, !dbg !3859
  %bf.clear = and i64 %bf.load, 65535, !dbg !3859
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3859
  %cmp52 = icmp eq i32 %bf.cast, 41, !dbg !3861
  br i1 %cmp52, label %land.lhs.true53, label %if.end63, !dbg !3862

land.lhs.true53:                                  ; preds = %if.end51
  %26 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3863
  %base54 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3863
  %27 = bitcast %struct.tree_base* %base54 to i64*, !dbg !3863
  %bf.load55 = load i64, i64* %27, align 8, !dbg !3863
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !3863
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !3863
  %cmp58 = icmp eq i32 %bf.cast57, 41, !dbg !3864
  br i1 %cmp58, label %land.lhs.true59, label %if.end63, !dbg !3865

land.lhs.true59:                                  ; preds = %land.lhs.true53
  %28 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3866
  %29 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3867
  %call60 = call zeroext i8 @nonoverlapping_component_refs_p(%union.tree_node* %28, %union.tree_node* %29), !dbg !3868
  %conv = zext i8 %call60 to i32, !dbg !3868
  %tobool61 = icmp ne i32 %conv, 0, !dbg !3868
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !3869

if.then62:                                        ; preds = %land.lhs.true59
  store i32 1, i32* %retval, align 4, !dbg !3870
  br label %return, !dbg !3870

if.end63:                                         ; preds = %land.lhs.true59, %land.lhs.true53, %if.end51
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3871
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !3871
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !3871
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 1, !dbg !3871
  %rt_mem67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.mem_attrs**, !dbg !3871
  %31 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem67, align 8, !dbg !3871
  %cmp68 = icmp eq %struct.mem_attrs* %31, null, !dbg !3871
  br i1 %cmp68, label %cond.true70, label %cond.false71, !dbg !3871

cond.true70:                                      ; preds = %if.end63
  br label %cond.end77, !dbg !3871

cond.false71:                                     ; preds = %if.end63
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3871
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !3871
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !3871
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 1, !dbg !3871
  %rt_mem75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.mem_attrs**, !dbg !3871
  %33 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem75, align 8, !dbg !3871
  %offset76 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %33, i32 0, i32 1, !dbg !3871
  %34 = load %struct.rtx_def*, %struct.rtx_def** %offset76, align 8, !dbg !3871
  br label %cond.end77, !dbg !3871

cond.end77:                                       ; preds = %cond.false71, %cond.true70
  %cond78 = phi %struct.rtx_def* [ null, %cond.true70 ], [ %34, %cond.false71 ], !dbg !3871
  store %struct.rtx_def* %cond78, %struct.rtx_def** %moffsetx, align 8, !dbg !3872
  %35 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3873
  %base79 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3873
  %36 = bitcast %struct.tree_base* %base79 to i64*, !dbg !3873
  %bf.load80 = load i64, i64* %36, align 8, !dbg !3873
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !3873
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !3873
  %cmp83 = icmp eq i32 %bf.cast82, 41, !dbg !3875
  br i1 %cmp83, label %if.then85, label %if.else, !dbg !3876

if.then85:                                        ; preds = %cond.end77
  %37 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3877
  %base86 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !3877
  %38 = bitcast %struct.tree_base* %base86 to i64*, !dbg !3877
  %bf.load87 = load i64, i64* %38, align 8, !dbg !3877
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !3877
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !3877
  %cmp90 = icmp eq i32 %bf.cast89, 32, !dbg !3880
  br i1 %cmp90, label %land.lhs.true92, label %if.end116, !dbg !3881

land.lhs.true92:                                  ; preds = %if.then85
  %39 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3882
  %common = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !3882
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3882
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3882
  %base93 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3882
  %41 = bitcast %struct.tree_base* %base93 to i64*, !dbg !3882
  %bf.load94 = load i64, i64* %41, align 8, !dbg !3882
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !3882
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !3882
  %cmp97 = icmp eq i32 %bf.cast96, 10, !dbg !3882
  br i1 %cmp97, label %if.then108, label %lor.lhs.false99, !dbg !3882

lor.lhs.false99:                                  ; preds = %land.lhs.true92
  %42 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3882
  %common100 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3882
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !3882
  %43 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !3882
  %base102 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !3882
  %44 = bitcast %struct.tree_base* %base102 to i64*, !dbg !3882
  %bf.load103 = load i64, i64* %44, align 8, !dbg !3882
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !3882
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !3882
  %cmp106 = icmp eq i32 %bf.cast105, 12, !dbg !3882
  br i1 %cmp106, label %if.then108, label %if.end116, !dbg !3883

if.then108:                                       ; preds = %lor.lhs.false99, %land.lhs.true92
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3884, metadata !DIExpression()), !dbg !3886
  %45 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3887
  %exp = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !3887
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3887
  %arrayidx109 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3887
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8, !dbg !3887
  store %union.tree_node* %46, %union.tree_node** %field, align 8, !dbg !3886
  call void @llvm.dbg.declare(metadata %union.tree_node** %fieldcontext, metadata !3888, metadata !DIExpression()), !dbg !3889
  %47 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3890
  %decl_minimal = bitcast %union.tree_node* %47 to %struct.tree_decl_minimal*, !dbg !3890
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3890
  %48 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3890
  store %union.tree_node* %48, %union.tree_node** %fieldcontext, align 8, !dbg !3889
  %49 = load %union.tree_node*, %union.tree_node** %fieldcontext, align 8, !dbg !3891
  %50 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3893
  %common110 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !3893
  %type111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2, !dbg !3893
  %51 = load %union.tree_node*, %union.tree_node** %type111, align 8, !dbg !3893
  %call112 = call zeroext i8 @ipa_type_escape_field_does_not_clobber_p(%union.tree_node* %49, %union.tree_node* %51), !dbg !3894
  %tobool113 = icmp ne i8 %call112, 0, !dbg !3894
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !3895

if.then114:                                       ; preds = %if.then108
  store i32 1, i32* %retval, align 4, !dbg !3896
  br label %return, !dbg !3896

if.end115:                                        ; preds = %if.then108
  br label %if.end116, !dbg !3897

if.end116:                                        ; preds = %if.end115, %lor.lhs.false99, %if.then85
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3898, metadata !DIExpression()), !dbg !3900
  %52 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3901
  %call117 = call %union.tree_node* @decl_for_component_ref(%union.tree_node* %52), !dbg !3902
  store %union.tree_node* %call117, %union.tree_node** %t, align 8, !dbg !3900
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3903
  %tobool118 = icmp ne %union.tree_node* %53, null, !dbg !3903
  br i1 %tobool118, label %if.end120, label %if.then119, !dbg !3905

if.then119:                                       ; preds = %if.end116
  store i32 0, i32* %retval, align 4, !dbg !3906
  br label %return, !dbg !3906

if.end120:                                        ; preds = %if.end116
  %54 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3907
  %55 = load %struct.rtx_def*, %struct.rtx_def** %moffsetx, align 8, !dbg !3908
  %call121 = call %struct.rtx_def* @adjust_offset_for_component_ref(%union.tree_node* %54, %struct.rtx_def* %55), !dbg !3909
  store %struct.rtx_def* %call121, %struct.rtx_def** %moffsetx, align 8, !dbg !3910
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3911
  store %union.tree_node* %56, %union.tree_node** %exprx, align 8, !dbg !3912
  br label %if.end158, !dbg !3913

if.else:                                          ; preds = %cond.end77
  %57 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3914
  %base122 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !3914
  %58 = bitcast %struct.tree_base* %base122 to i64*, !dbg !3914
  %bf.load123 = load i64, i64* %58, align 8, !dbg !3914
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !3914
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !3914
  %cmp126 = icmp eq i32 %bf.cast125, 47, !dbg !3914
  br i1 %cmp126, label %if.then142, label %lor.lhs.false128, !dbg !3914

lor.lhs.false128:                                 ; preds = %if.else
  %59 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3914
  %base129 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !3914
  %60 = bitcast %struct.tree_base* %base129 to i64*, !dbg !3914
  %bf.load130 = load i64, i64* %60, align 8, !dbg !3914
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !3914
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !3914
  %cmp133 = icmp eq i32 %bf.cast132, 48, !dbg !3914
  br i1 %cmp133, label %if.then142, label %lor.lhs.false135, !dbg !3914

lor.lhs.false135:                                 ; preds = %lor.lhs.false128
  %61 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3914
  %base136 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3914
  %62 = bitcast %struct.tree_base* %base136 to i64*, !dbg !3914
  %bf.load137 = load i64, i64* %62, align 8, !dbg !3914
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !3914
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !3914
  %cmp140 = icmp eq i32 %bf.cast139, 49, !dbg !3914
  br i1 %cmp140, label %if.then142, label %if.end157, !dbg !3916

if.then142:                                       ; preds = %lor.lhs.false135, %lor.lhs.false128, %if.else
  %63 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3917
  %exp143 = bitcast %union.tree_node* %63 to %struct.tree_exp*, !dbg !3917
  %operands144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 3, !dbg !3917
  %arrayidx145 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands144, i64 0, i64 0, !dbg !3917
  %64 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8, !dbg !3917
  store %union.tree_node* %64, %union.tree_node** %exprx, align 8, !dbg !3919
  %65 = load i32, i32* @flag_argument_noalias, align 4, !dbg !3920
  %cmp146 = icmp slt i32 %65, 2, !dbg !3922
  br i1 %cmp146, label %if.then155, label %lor.lhs.false148, !dbg !3923

lor.lhs.false148:                                 ; preds = %if.then142
  %66 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3924
  %base149 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !3924
  %67 = bitcast %struct.tree_base* %base149 to i64*, !dbg !3924
  %bf.load150 = load i64, i64* %67, align 8, !dbg !3924
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !3924
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !3924
  %cmp153 = icmp ne i32 %bf.cast152, 34, !dbg !3925
  br i1 %cmp153, label %if.then155, label %if.end156, !dbg !3926

if.then155:                                       ; preds = %lor.lhs.false148, %if.then142
  store i32 0, i32* %retval, align 4, !dbg !3927
  br label %return, !dbg !3927

if.end156:                                        ; preds = %lor.lhs.false148
  br label %if.end157, !dbg !3928

if.end157:                                        ; preds = %if.end156, %lor.lhs.false135
  br label %if.end158

if.end158:                                        ; preds = %if.end157, %if.end120
  %68 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3929
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !3929
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !3929
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 1, !dbg !3929
  %rt_mem162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.mem_attrs**, !dbg !3929
  %69 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem162, align 8, !dbg !3929
  %cmp163 = icmp eq %struct.mem_attrs* %69, null, !dbg !3929
  br i1 %cmp163, label %cond.true165, label %cond.false166, !dbg !3929

cond.true165:                                     ; preds = %if.end158
  br label %cond.end172, !dbg !3929

cond.false166:                                    ; preds = %if.end158
  %70 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !3929
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !3929
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !3929
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 1, !dbg !3929
  %rt_mem170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.mem_attrs**, !dbg !3929
  %71 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem170, align 8, !dbg !3929
  %offset171 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %71, i32 0, i32 1, !dbg !3929
  %72 = load %struct.rtx_def*, %struct.rtx_def** %offset171, align 8, !dbg !3929
  br label %cond.end172, !dbg !3929

cond.end172:                                      ; preds = %cond.false166, %cond.true165
  %cond173 = phi %struct.rtx_def* [ null, %cond.true165 ], [ %72, %cond.false166 ], !dbg !3929
  store %struct.rtx_def* %cond173, %struct.rtx_def** %moffsety, align 8, !dbg !3930
  %73 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3931
  %base174 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !3931
  %74 = bitcast %struct.tree_base* %base174 to i64*, !dbg !3931
  %bf.load175 = load i64, i64* %74, align 8, !dbg !3931
  %bf.clear176 = and i64 %bf.load175, 65535, !dbg !3931
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !3931
  %cmp178 = icmp eq i32 %bf.cast177, 41, !dbg !3933
  br i1 %cmp178, label %if.then180, label %if.else226, !dbg !3934

if.then180:                                       ; preds = %cond.end172
  %75 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3935
  %base181 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !3935
  %76 = bitcast %struct.tree_base* %base181 to i64*, !dbg !3935
  %bf.load182 = load i64, i64* %76, align 8, !dbg !3935
  %bf.clear183 = and i64 %bf.load182, 65535, !dbg !3935
  %bf.cast184 = trunc i64 %bf.clear183 to i32, !dbg !3935
  %cmp185 = icmp eq i32 %bf.cast184, 32, !dbg !3938
  br i1 %cmp185, label %land.lhs.true187, label %if.end219, !dbg !3939

land.lhs.true187:                                 ; preds = %if.then180
  %77 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3940
  %common188 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !3940
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !3940
  %78 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !3940
  %base190 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !3940
  %79 = bitcast %struct.tree_base* %base190 to i64*, !dbg !3940
  %bf.load191 = load i64, i64* %79, align 8, !dbg !3940
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !3940
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !3940
  %cmp194 = icmp eq i32 %bf.cast193, 10, !dbg !3940
  br i1 %cmp194, label %if.then205, label %lor.lhs.false196, !dbg !3940

lor.lhs.false196:                                 ; preds = %land.lhs.true187
  %80 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3940
  %common197 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !3940
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !3940
  %81 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !3940
  %base199 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !3940
  %82 = bitcast %struct.tree_base* %base199 to i64*, !dbg !3940
  %bf.load200 = load i64, i64* %82, align 8, !dbg !3940
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !3940
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !3940
  %cmp203 = icmp eq i32 %bf.cast202, 12, !dbg !3940
  br i1 %cmp203, label %if.then205, label %if.end219, !dbg !3941

if.then205:                                       ; preds = %lor.lhs.false196, %land.lhs.true187
  call void @llvm.dbg.declare(metadata %union.tree_node** %field206, metadata !3942, metadata !DIExpression()), !dbg !3944
  %83 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3945
  %exp207 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !3945
  %operands208 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp207, i32 0, i32 3, !dbg !3945
  %arrayidx209 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands208, i64 0, i64 1, !dbg !3945
  %84 = load %union.tree_node*, %union.tree_node** %arrayidx209, align 8, !dbg !3945
  store %union.tree_node* %84, %union.tree_node** %field206, align 8, !dbg !3944
  call void @llvm.dbg.declare(metadata %union.tree_node** %fieldcontext210, metadata !3946, metadata !DIExpression()), !dbg !3947
  %85 = load %union.tree_node*, %union.tree_node** %field206, align 8, !dbg !3948
  %decl_minimal211 = bitcast %union.tree_node* %85 to %struct.tree_decl_minimal*, !dbg !3948
  %context212 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal211, i32 0, i32 4, !dbg !3948
  %86 = load %union.tree_node*, %union.tree_node** %context212, align 8, !dbg !3948
  store %union.tree_node* %86, %union.tree_node** %fieldcontext210, align 8, !dbg !3947
  %87 = load %union.tree_node*, %union.tree_node** %fieldcontext210, align 8, !dbg !3949
  %88 = load %union.tree_node*, %union.tree_node** %field206, align 8, !dbg !3951
  %common213 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !3951
  %type214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2, !dbg !3951
  %89 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !3951
  %call215 = call zeroext i8 @ipa_type_escape_field_does_not_clobber_p(%union.tree_node* %87, %union.tree_node* %89), !dbg !3952
  %tobool216 = icmp ne i8 %call215, 0, !dbg !3952
  br i1 %tobool216, label %if.then217, label %if.end218, !dbg !3953

if.then217:                                       ; preds = %if.then205
  store i32 1, i32* %retval, align 4, !dbg !3954
  br label %return, !dbg !3954

if.end218:                                        ; preds = %if.then205
  br label %if.end219, !dbg !3955

if.end219:                                        ; preds = %if.end218, %lor.lhs.false196, %if.then180
  call void @llvm.dbg.declare(metadata %union.tree_node** %t220, metadata !3956, metadata !DIExpression()), !dbg !3958
  %90 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3959
  %call221 = call %union.tree_node* @decl_for_component_ref(%union.tree_node* %90), !dbg !3960
  store %union.tree_node* %call221, %union.tree_node** %t220, align 8, !dbg !3958
  %91 = load %union.tree_node*, %union.tree_node** %t220, align 8, !dbg !3961
  %tobool222 = icmp ne %union.tree_node* %91, null, !dbg !3961
  br i1 %tobool222, label %if.end224, label %if.then223, !dbg !3963

if.then223:                                       ; preds = %if.end219
  store i32 0, i32* %retval, align 4, !dbg !3964
  br label %return, !dbg !3964

if.end224:                                        ; preds = %if.end219
  %92 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3965
  %93 = load %struct.rtx_def*, %struct.rtx_def** %moffsety, align 8, !dbg !3966
  %call225 = call %struct.rtx_def* @adjust_offset_for_component_ref(%union.tree_node* %92, %struct.rtx_def* %93), !dbg !3967
  store %struct.rtx_def* %call225, %struct.rtx_def** %moffsety, align 8, !dbg !3968
  %94 = load %union.tree_node*, %union.tree_node** %t220, align 8, !dbg !3969
  store %union.tree_node* %94, %union.tree_node** %expry, align 8, !dbg !3970
  br label %if.end263, !dbg !3971

if.else226:                                       ; preds = %cond.end172
  %95 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3972
  %base227 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !3972
  %96 = bitcast %struct.tree_base* %base227 to i64*, !dbg !3972
  %bf.load228 = load i64, i64* %96, align 8, !dbg !3972
  %bf.clear229 = and i64 %bf.load228, 65535, !dbg !3972
  %bf.cast230 = trunc i64 %bf.clear229 to i32, !dbg !3972
  %cmp231 = icmp eq i32 %bf.cast230, 47, !dbg !3972
  br i1 %cmp231, label %if.then247, label %lor.lhs.false233, !dbg !3972

lor.lhs.false233:                                 ; preds = %if.else226
  %97 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3972
  %base234 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !3972
  %98 = bitcast %struct.tree_base* %base234 to i64*, !dbg !3972
  %bf.load235 = load i64, i64* %98, align 8, !dbg !3972
  %bf.clear236 = and i64 %bf.load235, 65535, !dbg !3972
  %bf.cast237 = trunc i64 %bf.clear236 to i32, !dbg !3972
  %cmp238 = icmp eq i32 %bf.cast237, 48, !dbg !3972
  br i1 %cmp238, label %if.then247, label %lor.lhs.false240, !dbg !3972

lor.lhs.false240:                                 ; preds = %lor.lhs.false233
  %99 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3972
  %base241 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !3972
  %100 = bitcast %struct.tree_base* %base241 to i64*, !dbg !3972
  %bf.load242 = load i64, i64* %100, align 8, !dbg !3972
  %bf.clear243 = and i64 %bf.load242, 65535, !dbg !3972
  %bf.cast244 = trunc i64 %bf.clear243 to i32, !dbg !3972
  %cmp245 = icmp eq i32 %bf.cast244, 49, !dbg !3972
  br i1 %cmp245, label %if.then247, label %if.end262, !dbg !3974

if.then247:                                       ; preds = %lor.lhs.false240, %lor.lhs.false233, %if.else226
  %101 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3975
  %exp248 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !3975
  %operands249 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp248, i32 0, i32 3, !dbg !3975
  %arrayidx250 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands249, i64 0, i64 0, !dbg !3975
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx250, align 8, !dbg !3975
  store %union.tree_node* %102, %union.tree_node** %expry, align 8, !dbg !3977
  %103 = load i32, i32* @flag_argument_noalias, align 4, !dbg !3978
  %cmp251 = icmp slt i32 %103, 2, !dbg !3980
  br i1 %cmp251, label %if.then260, label %lor.lhs.false253, !dbg !3981

lor.lhs.false253:                                 ; preds = %if.then247
  %104 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3982
  %base254 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !3982
  %105 = bitcast %struct.tree_base* %base254 to i64*, !dbg !3982
  %bf.load255 = load i64, i64* %105, align 8, !dbg !3982
  %bf.clear256 = and i64 %bf.load255, 65535, !dbg !3982
  %bf.cast257 = trunc i64 %bf.clear256 to i32, !dbg !3982
  %cmp258 = icmp ne i32 %bf.cast257, 34, !dbg !3983
  br i1 %cmp258, label %if.then260, label %if.end261, !dbg !3984

if.then260:                                       ; preds = %lor.lhs.false253, %if.then247
  store i32 0, i32* %retval, align 4, !dbg !3985
  br label %return, !dbg !3985

if.end261:                                        ; preds = %lor.lhs.false253
  br label %if.end262, !dbg !3986

if.end262:                                        ; preds = %if.end261, %lor.lhs.false240
  br label %if.end263

if.end263:                                        ; preds = %if.end262, %if.end224
  %106 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3987
  %base264 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !3987
  %107 = bitcast %struct.tree_base* %base264 to i64*, !dbg !3987
  %bf.load265 = load i64, i64* %107, align 8, !dbg !3987
  %bf.clear266 = and i64 %bf.load265, 65535, !dbg !3987
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !3987
  %idxprom = sext i32 %bf.cast267 to i64, !dbg !3987
  %arrayidx268 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3987
  %108 = load i32, i32* %arrayidx268, align 4, !dbg !3987
  %cmp269 = icmp eq i32 %108, 3, !dbg !3987
  br i1 %cmp269, label %lor.lhs.false271, label %if.then280, !dbg !3989

lor.lhs.false271:                                 ; preds = %if.end263
  %109 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3990
  %base272 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !3990
  %110 = bitcast %struct.tree_base* %base272 to i64*, !dbg !3990
  %bf.load273 = load i64, i64* %110, align 8, !dbg !3990
  %bf.clear274 = and i64 %bf.load273, 65535, !dbg !3990
  %bf.cast275 = trunc i64 %bf.clear274 to i32, !dbg !3990
  %idxprom276 = sext i32 %bf.cast275 to i64, !dbg !3990
  %arrayidx277 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom276, !dbg !3990
  %111 = load i32, i32* %arrayidx277, align 4, !dbg !3990
  %cmp278 = icmp eq i32 %111, 3, !dbg !3990
  br i1 %cmp278, label %if.end281, label %if.then280, !dbg !3991

if.then280:                                       ; preds = %lor.lhs.false271, %if.end263
  store i32 0, i32* %retval, align 4, !dbg !3992
  br label %return, !dbg !3992

if.end281:                                        ; preds = %lor.lhs.false271
  %112 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !3993
  %base282 = bitcast %union.tree_node* %112 to %struct.tree_base*, !dbg !3993
  %113 = bitcast %struct.tree_base* %base282 to i64*, !dbg !3993
  %bf.load283 = load i64, i64* %113, align 8, !dbg !3993
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !3993
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !3993
  %cmp286 = icmp eq i32 %bf.cast285, 33, !dbg !3995
  br i1 %cmp286, label %if.then295, label %lor.lhs.false288, !dbg !3996

lor.lhs.false288:                                 ; preds = %if.end281
  %114 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !3997
  %base289 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !3997
  %115 = bitcast %struct.tree_base* %base289 to i64*, !dbg !3997
  %bf.load290 = load i64, i64* %115, align 8, !dbg !3997
  %bf.clear291 = and i64 %bf.load290, 65535, !dbg !3997
  %bf.cast292 = trunc i64 %bf.clear291 to i32, !dbg !3997
  %cmp293 = icmp eq i32 %bf.cast292, 33, !dbg !3998
  br i1 %cmp293, label %if.then295, label %if.end296, !dbg !3999

if.then295:                                       ; preds = %lor.lhs.false288, %if.end281
  store i32 1, i32* %retval, align 4, !dbg !4000
  br label %return, !dbg !4000

if.end296:                                        ; preds = %lor.lhs.false288
  %116 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !4001
  %decl_with_rtl = bitcast %union.tree_node* %116 to %struct.tree_decl_with_rtl*, !dbg !4001
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4001
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4001
  %tobool297 = icmp ne %struct.rtx_def* %117, null, !dbg !4001
  br i1 %tobool297, label %cond.true298, label %cond.false301, !dbg !4001

cond.true298:                                     ; preds = %if.end296
  %118 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !4001
  %decl_with_rtl299 = bitcast %union.tree_node* %118 to %struct.tree_decl_with_rtl*, !dbg !4001
  %rtl300 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl299, i32 0, i32 1, !dbg !4001
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtl300, align 8, !dbg !4001
  br label %cond.end304, !dbg !4001

cond.false301:                                    ; preds = %if.end296
  %120 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !4001
  call void @make_decl_rtl(%union.tree_node* %120), !dbg !4001
  %121 = load %union.tree_node*, %union.tree_node** %exprx, align 8, !dbg !4001
  %decl_with_rtl302 = bitcast %union.tree_node* %121 to %struct.tree_decl_with_rtl*, !dbg !4001
  %rtl303 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl302, i32 0, i32 1, !dbg !4001
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rtl303, align 8, !dbg !4001
  br label %cond.end304, !dbg !4001

cond.end304:                                      ; preds = %cond.false301, %cond.true298
  %cond305 = phi %struct.rtx_def* [ %119, %cond.true298 ], [ %122, %cond.false301 ], !dbg !4001
  store %struct.rtx_def* %cond305, %struct.rtx_def** %rtlx, align 8, !dbg !4002
  %123 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !4003
  %decl_with_rtl306 = bitcast %union.tree_node* %123 to %struct.tree_decl_with_rtl*, !dbg !4003
  %rtl307 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl306, i32 0, i32 1, !dbg !4003
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtl307, align 8, !dbg !4003
  %tobool308 = icmp ne %struct.rtx_def* %124, null, !dbg !4003
  br i1 %tobool308, label %cond.true309, label %cond.false312, !dbg !4003

cond.true309:                                     ; preds = %cond.end304
  %125 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !4003
  %decl_with_rtl310 = bitcast %union.tree_node* %125 to %struct.tree_decl_with_rtl*, !dbg !4003
  %rtl311 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl310, i32 0, i32 1, !dbg !4003
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtl311, align 8, !dbg !4003
  br label %cond.end315, !dbg !4003

cond.false312:                                    ; preds = %cond.end304
  %127 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !4003
  call void @make_decl_rtl(%union.tree_node* %127), !dbg !4003
  %128 = load %union.tree_node*, %union.tree_node** %expry, align 8, !dbg !4003
  %decl_with_rtl313 = bitcast %union.tree_node* %128 to %struct.tree_decl_with_rtl*, !dbg !4003
  %rtl314 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl313, i32 0, i32 1, !dbg !4003
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtl314, align 8, !dbg !4003
  br label %cond.end315, !dbg !4003

cond.end315:                                      ; preds = %cond.false312, %cond.true309
  %cond316 = phi %struct.rtx_def* [ %126, %cond.true309 ], [ %129, %cond.false312 ], !dbg !4003
  store %struct.rtx_def* %cond316, %struct.rtx_def** %rtly, align 8, !dbg !4004
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4005
  %131 = bitcast %struct.rtx_def* %130 to i32*, !dbg !4005
  %bf.load317 = load i32, i32* %131, align 8, !dbg !4005
  %bf.clear318 = and i32 %bf.load317, 65535, !dbg !4005
  %cmp319 = icmp eq i32 %bf.clear318, 43, !dbg !4005
  br i1 %cmp319, label %lor.lhs.false321, label %land.lhs.true326, !dbg !4007

lor.lhs.false321:                                 ; preds = %cond.end315
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4008
  %133 = bitcast %struct.rtx_def* %132 to i32*, !dbg !4008
  %bf.load322 = load i32, i32* %133, align 8, !dbg !4008
  %bf.clear323 = and i32 %bf.load322, 65535, !dbg !4008
  %cmp324 = icmp eq i32 %bf.clear323, 43, !dbg !4008
  br i1 %cmp324, label %if.end330, label %land.lhs.true326, !dbg !4009

land.lhs.true326:                                 ; preds = %lor.lhs.false321, %cond.end315
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4010
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4011
  %call327 = call i32 @rtx_equal_p(%struct.rtx_def* %134, %struct.rtx_def* %135), !dbg !4012
  %tobool328 = icmp ne i32 %call327, 0, !dbg !4012
  br i1 %tobool328, label %if.end330, label %if.then329, !dbg !4013

if.then329:                                       ; preds = %land.lhs.true326
  store i32 1, i32* %retval, align 4, !dbg !4014
  br label %return, !dbg !4014

if.end330:                                        ; preds = %land.lhs.true326, %lor.lhs.false321
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4015
  %137 = bitcast %struct.rtx_def* %136 to i32*, !dbg !4015
  %bf.load331 = load i32, i32* %137, align 8, !dbg !4015
  %bf.clear332 = and i32 %bf.load331, 65535, !dbg !4015
  %cmp333 = icmp eq i32 %bf.clear332, 43, !dbg !4015
  br i1 %cmp333, label %land.lhs.true335, label %if.end375, !dbg !4017

land.lhs.true335:                                 ; preds = %if.end330
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4018
  %139 = bitcast %struct.rtx_def* %138 to i32*, !dbg !4018
  %bf.load336 = load i32, i32* %139, align 8, !dbg !4018
  %bf.clear337 = and i32 %bf.load336, 65535, !dbg !4018
  %cmp338 = icmp eq i32 %bf.clear337, 43, !dbg !4018
  br i1 %cmp338, label %land.lhs.true340, label %if.end375, !dbg !4019

land.lhs.true340:                                 ; preds = %land.lhs.true335
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4020
  %u341 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !4020
  %fld342 = bitcast %union.u* %u341 to [1 x %union.rtunion_def]*, !dbg !4020
  %arrayidx343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld342, i64 0, i64 1, !dbg !4020
  %rt_mem344 = bitcast %union.rtunion_def* %arrayidx343 to %struct.mem_attrs**, !dbg !4020
  %141 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem344, align 8, !dbg !4020
  %cmp345 = icmp eq %struct.mem_attrs* %141, null, !dbg !4020
  br i1 %cmp345, label %cond.true347, label %cond.false348, !dbg !4020

cond.true347:                                     ; preds = %land.lhs.true340
  br label %cond.end354, !dbg !4020

cond.false348:                                    ; preds = %land.lhs.true340
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4020
  %u349 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1, !dbg !4020
  %fld350 = bitcast %union.u* %u349 to [1 x %union.rtunion_def]*, !dbg !4020
  %arrayidx351 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld350, i64 0, i64 1, !dbg !4020
  %rt_mem352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.mem_attrs**, !dbg !4020
  %143 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem352, align 8, !dbg !4020
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %143, i32 0, i32 5, !dbg !4020
  %144 = load i8, i8* %addrspace, align 8, !dbg !4020
  %conv353 = zext i8 %144 to i32, !dbg !4020
  br label %cond.end354, !dbg !4020

cond.end354:                                      ; preds = %cond.false348, %cond.true347
  %cond355 = phi i32 [ 0, %cond.true347 ], [ %conv353, %cond.false348 ], !dbg !4020
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4021
  %u356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !4021
  %fld357 = bitcast %union.u* %u356 to [1 x %union.rtunion_def]*, !dbg !4021
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i64 0, i64 1, !dbg !4021
  %rt_mem359 = bitcast %union.rtunion_def* %arrayidx358 to %struct.mem_attrs**, !dbg !4021
  %146 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem359, align 8, !dbg !4021
  %cmp360 = icmp eq %struct.mem_attrs* %146, null, !dbg !4021
  br i1 %cmp360, label %cond.true362, label %cond.false363, !dbg !4021

cond.true362:                                     ; preds = %cond.end354
  br label %cond.end370, !dbg !4021

cond.false363:                                    ; preds = %cond.end354
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4021
  %u364 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !4021
  %fld365 = bitcast %union.u* %u364 to [1 x %union.rtunion_def]*, !dbg !4021
  %arrayidx366 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld365, i64 0, i64 1, !dbg !4021
  %rt_mem367 = bitcast %union.rtunion_def* %arrayidx366 to %struct.mem_attrs**, !dbg !4021
  %148 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem367, align 8, !dbg !4021
  %addrspace368 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %148, i32 0, i32 5, !dbg !4021
  %149 = load i8, i8* %addrspace368, align 8, !dbg !4021
  %conv369 = zext i8 %149 to i32, !dbg !4021
  br label %cond.end370, !dbg !4021

cond.end370:                                      ; preds = %cond.false363, %cond.true362
  %cond371 = phi i32 [ 0, %cond.true362 ], [ %conv369, %cond.false363 ], !dbg !4021
  %cmp372 = icmp ne i32 %cond355, %cond371, !dbg !4022
  br i1 %cmp372, label %if.then374, label %if.end375, !dbg !4023

if.then374:                                       ; preds = %cond.end370
  store i32 0, i32* %retval, align 4, !dbg !4024
  br label %return, !dbg !4024

if.end375:                                        ; preds = %cond.end370, %land.lhs.true335, %if.end330
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4025
  %151 = bitcast %struct.rtx_def* %150 to i32*, !dbg !4025
  %bf.load376 = load i32, i32* %151, align 8, !dbg !4025
  %bf.clear377 = and i32 %bf.load376, 65535, !dbg !4025
  %cmp378 = icmp eq i32 %bf.clear377, 43, !dbg !4025
  br i1 %cmp378, label %cond.true380, label %cond.false384, !dbg !4025

cond.true380:                                     ; preds = %if.end375
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4026
  %u381 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !4026
  %fld382 = bitcast %union.u* %u381 to [1 x %union.rtunion_def]*, !dbg !4026
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i64 0, i64 0, !dbg !4026
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtx_def**, !dbg !4026
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4026
  br label %cond.end385, !dbg !4025

cond.false384:                                    ; preds = %if.end375
  %154 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4027
  br label %cond.end385, !dbg !4025

cond.end385:                                      ; preds = %cond.false384, %cond.true380
  %cond386 = phi %struct.rtx_def* [ %153, %cond.true380 ], [ %154, %cond.false384 ], !dbg !4025
  store %struct.rtx_def* %cond386, %struct.rtx_def** %basex, align 8, !dbg !4028
  %155 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4029
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !4029
  %bf.load387 = load i32, i32* %156, align 8, !dbg !4029
  %bf.clear388 = and i32 %bf.load387, 65535, !dbg !4029
  %cmp389 = icmp eq i32 %bf.clear388, 49, !dbg !4031
  br i1 %cmp389, label %land.lhs.true391, label %if.end411, !dbg !4032

land.lhs.true391:                                 ; preds = %cond.end385
  %157 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4033
  %u392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1, !dbg !4033
  %fld393 = bitcast %union.u* %u392 to [1 x %union.rtunion_def]*, !dbg !4033
  %arrayidx394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld393, i64 0, i64 1, !dbg !4033
  %rt_rtx395 = bitcast %union.rtunion_def* %arrayidx394 to %struct.rtx_def**, !dbg !4033
  %158 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx395, align 8, !dbg !4033
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !4033
  %bf.load396 = load i32, i32* %159, align 8, !dbg !4033
  %bf.clear397 = and i32 %bf.load396, 65535, !dbg !4033
  %cmp398 = icmp eq i32 %bf.clear397, 30, !dbg !4033
  br i1 %cmp398, label %if.then400, label %if.end411, !dbg !4034

if.then400:                                       ; preds = %land.lhs.true391
  %160 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4035
  %u401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1, !dbg !4035
  %fld402 = bitcast %union.u* %u401 to [1 x %union.rtunion_def]*, !dbg !4035
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i64 0, i64 1, !dbg !4035
  %rt_rtx404 = bitcast %union.rtunion_def* %arrayidx403 to %struct.rtx_def**, !dbg !4035
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx404, align 8, !dbg !4035
  %u405 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1, !dbg !4035
  %hwint = bitcast %union.u* %u405 to [1 x i64]*, !dbg !4035
  %arrayidx406 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4035
  %162 = load i64, i64* %arrayidx406, align 8, !dbg !4035
  store i64 %162, i64* %offsetx, align 8, !dbg !4036
  %163 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4037
  %u407 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1, !dbg !4037
  %fld408 = bitcast %union.u* %u407 to [1 x %union.rtunion_def]*, !dbg !4037
  %arrayidx409 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld408, i64 0, i64 0, !dbg !4037
  %rt_rtx410 = bitcast %union.rtunion_def* %arrayidx409 to %struct.rtx_def**, !dbg !4037
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx410, align 8, !dbg !4037
  store %struct.rtx_def* %164, %struct.rtx_def** %basex, align 8, !dbg !4038
  br label %if.end411, !dbg !4039

if.end411:                                        ; preds = %if.then400, %land.lhs.true391, %cond.end385
  %165 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4040
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !4040
  %bf.load412 = load i32, i32* %166, align 8, !dbg !4040
  %bf.clear413 = and i32 %bf.load412, 65535, !dbg !4040
  %cmp414 = icmp eq i32 %bf.clear413, 43, !dbg !4040
  br i1 %cmp414, label %cond.true416, label %cond.false421, !dbg !4040

cond.true416:                                     ; preds = %if.end411
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4041
  %u417 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !4041
  %fld418 = bitcast %union.u* %u417 to [1 x %union.rtunion_def]*, !dbg !4041
  %arrayidx419 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld418, i64 0, i64 0, !dbg !4041
  %rt_rtx420 = bitcast %union.rtunion_def* %arrayidx419 to %struct.rtx_def**, !dbg !4041
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx420, align 8, !dbg !4041
  br label %cond.end422, !dbg !4040

cond.false421:                                    ; preds = %if.end411
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4042
  br label %cond.end422, !dbg !4040

cond.end422:                                      ; preds = %cond.false421, %cond.true416
  %cond423 = phi %struct.rtx_def* [ %168, %cond.true416 ], [ %169, %cond.false421 ], !dbg !4040
  store %struct.rtx_def* %cond423, %struct.rtx_def** %basey, align 8, !dbg !4043
  %170 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4044
  %171 = bitcast %struct.rtx_def* %170 to i32*, !dbg !4044
  %bf.load424 = load i32, i32* %171, align 8, !dbg !4044
  %bf.clear425 = and i32 %bf.load424, 65535, !dbg !4044
  %cmp426 = icmp eq i32 %bf.clear425, 49, !dbg !4046
  br i1 %cmp426, label %land.lhs.true428, label %if.end449, !dbg !4047

land.lhs.true428:                                 ; preds = %cond.end422
  %172 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4048
  %u429 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1, !dbg !4048
  %fld430 = bitcast %union.u* %u429 to [1 x %union.rtunion_def]*, !dbg !4048
  %arrayidx431 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld430, i64 0, i64 1, !dbg !4048
  %rt_rtx432 = bitcast %union.rtunion_def* %arrayidx431 to %struct.rtx_def**, !dbg !4048
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx432, align 8, !dbg !4048
  %174 = bitcast %struct.rtx_def* %173 to i32*, !dbg !4048
  %bf.load433 = load i32, i32* %174, align 8, !dbg !4048
  %bf.clear434 = and i32 %bf.load433, 65535, !dbg !4048
  %cmp435 = icmp eq i32 %bf.clear434, 30, !dbg !4048
  br i1 %cmp435, label %if.then437, label %if.end449, !dbg !4049

if.then437:                                       ; preds = %land.lhs.true428
  %175 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4050
  %u438 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1, !dbg !4050
  %fld439 = bitcast %union.u* %u438 to [1 x %union.rtunion_def]*, !dbg !4050
  %arrayidx440 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld439, i64 0, i64 1, !dbg !4050
  %rt_rtx441 = bitcast %union.rtunion_def* %arrayidx440 to %struct.rtx_def**, !dbg !4050
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx441, align 8, !dbg !4050
  %u442 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1, !dbg !4050
  %hwint443 = bitcast %union.u* %u442 to [1 x i64]*, !dbg !4050
  %arrayidx444 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint443, i64 0, i64 0, !dbg !4050
  %177 = load i64, i64* %arrayidx444, align 8, !dbg !4050
  store i64 %177, i64* %offsety, align 8, !dbg !4051
  %178 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4052
  %u445 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !4052
  %fld446 = bitcast %union.u* %u445 to [1 x %union.rtunion_def]*, !dbg !4052
  %arrayidx447 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld446, i64 0, i64 0, !dbg !4052
  %rt_rtx448 = bitcast %union.rtunion_def* %arrayidx447 to %struct.rtx_def**, !dbg !4052
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx448, align 8, !dbg !4052
  store %struct.rtx_def* %179, %struct.rtx_def** %basey, align 8, !dbg !4053
  br label %if.end449, !dbg !4054

if.end449:                                        ; preds = %if.then437, %land.lhs.true428, %cond.end422
  %180 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4055
  %181 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4057
  %call450 = call i32 @rtx_equal_p(%struct.rtx_def* %180, %struct.rtx_def* %181), !dbg !4058
  %tobool451 = icmp ne i32 %call450, 0, !dbg !4058
  br i1 %tobool451, label %if.end538, label %if.then452, !dbg !4059

if.then452:                                       ; preds = %if.end449
  %182 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4060
  %183 = bitcast %struct.rtx_def* %182 to i32*, !dbg !4060
  %bf.load453 = load i32, i32* %183, align 8, !dbg !4060
  %bf.clear454 = and i32 %bf.load453, 65535, !dbg !4060
  %idxprom455 = sext i32 %bf.clear454 to i64, !dbg !4060
  %arrayidx456 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom455, !dbg !4060
  %184 = load i32, i32* %arrayidx456, align 4, !dbg !4060
  %cmp457 = icmp eq i32 %184, 9, !dbg !4060
  br i1 %cmp457, label %land.lhs.true459, label %lor.lhs.false466, !dbg !4061

land.lhs.true459:                                 ; preds = %if.then452
  %185 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4062
  %186 = bitcast %struct.rtx_def* %185 to i32*, !dbg !4062
  %bf.load460 = load i32, i32* %186, align 8, !dbg !4062
  %bf.clear461 = and i32 %bf.load460, 65535, !dbg !4062
  %idxprom462 = sext i32 %bf.clear461 to i64, !dbg !4062
  %arrayidx463 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom462, !dbg !4062
  %187 = load i32, i32* %arrayidx463, align 4, !dbg !4062
  %cmp464 = icmp eq i32 %187, 9, !dbg !4062
  br i1 %cmp464, label %lor.end537, label %lor.lhs.false466, !dbg !4063

lor.lhs.false466:                                 ; preds = %land.lhs.true459, %if.then452
  %188 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4064
  %189 = bitcast %struct.rtx_def* %188 to i32*, !dbg !4064
  %bf.load467 = load i32, i32* %189, align 8, !dbg !4064
  %bf.clear468 = and i32 %bf.load467, 65535, !dbg !4064
  %idxprom469 = sext i32 %bf.clear468 to i64, !dbg !4064
  %arrayidx470 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom469, !dbg !4064
  %190 = load i32, i32* %arrayidx470, align 4, !dbg !4064
  %cmp471 = icmp eq i32 %190, 9, !dbg !4064
  br i1 %cmp471, label %land.lhs.true473, label %lor.rhs, !dbg !4065

land.lhs.true473:                                 ; preds = %lor.lhs.false466
  %191 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4066
  %192 = bitcast %struct.rtx_def* %191 to i32*, !dbg !4066
  %bf.load474 = load i32, i32* %192, align 8, !dbg !4066
  %bf.clear475 = and i32 %bf.load474, 65535, !dbg !4066
  %cmp476 = icmp eq i32 %bf.clear475, 37, !dbg !4066
  br i1 %cmp476, label %land.lhs.true478, label %lor.rhs, !dbg !4067

land.lhs.true478:                                 ; preds = %land.lhs.true473
  %193 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call479 = call i32 @rhs_regno(%struct.rtx_def* %193), !dbg !4068
  %cmp480 = icmp eq i32 %call479, 7, !dbg !4068
  br i1 %cmp480, label %lor.end537, label %lor.lhs.false482, !dbg !4068

lor.lhs.false482:                                 ; preds = %land.lhs.true478
  %194 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call483 = call i32 @rhs_regno(%struct.rtx_def* %194), !dbg !4068
  %cmp484 = icmp eq i32 %call483, 20, !dbg !4068
  br i1 %cmp484, label %lor.end537, label %lor.lhs.false486, !dbg !4068

lor.lhs.false486:                                 ; preds = %lor.lhs.false482
  %195 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call487 = call i32 @rhs_regno(%struct.rtx_def* %195), !dbg !4068
  %cmp488 = icmp eq i32 %call487, 6, !dbg !4068
  br i1 %cmp488, label %lor.end537, label %lor.lhs.false490, !dbg !4068

lor.lhs.false490:                                 ; preds = %lor.lhs.false486
  %196 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call491 = call i32 @rhs_regno(%struct.rtx_def* %196), !dbg !4068
  %cmp492 = icmp eq i32 %call491, 16, !dbg !4068
  br i1 %cmp492, label %lor.end537, label %lor.lhs.false494, !dbg !4068

lor.lhs.false494:                                 ; preds = %lor.lhs.false490
  %197 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call495 = call i32 @rhs_regno(%struct.rtx_def* %197), !dbg !4068
  %cmp496 = icmp uge i32 %call495, 53, !dbg !4068
  br i1 %cmp496, label %land.lhs.true498, label %lor.rhs, !dbg !4068

land.lhs.true498:                                 ; preds = %lor.lhs.false494
  %198 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4068
  %call499 = call i32 @rhs_regno(%struct.rtx_def* %198), !dbg !4068
  %cmp500 = icmp ule i32 %call499, 57, !dbg !4068
  br i1 %cmp500, label %lor.end537, label %lor.rhs, !dbg !4069

lor.rhs:                                          ; preds = %land.lhs.true498, %lor.lhs.false494, %land.lhs.true473, %lor.lhs.false466
  %199 = load %struct.rtx_def*, %struct.rtx_def** %basey, align 8, !dbg !4070
  %200 = bitcast %struct.rtx_def* %199 to i32*, !dbg !4070
  %bf.load502 = load i32, i32* %200, align 8, !dbg !4070
  %bf.clear503 = and i32 %bf.load502, 65535, !dbg !4070
  %idxprom504 = sext i32 %bf.clear503 to i64, !dbg !4070
  %arrayidx505 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom504, !dbg !4070
  %201 = load i32, i32* %arrayidx505, align 4, !dbg !4070
  %cmp506 = icmp eq i32 %201, 9, !dbg !4070
  br i1 %cmp506, label %land.lhs.true508, label %land.end536, !dbg !4071

land.lhs.true508:                                 ; preds = %lor.rhs
  %202 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4072
  %203 = bitcast %struct.rtx_def* %202 to i32*, !dbg !4072
  %bf.load509 = load i32, i32* %203, align 8, !dbg !4072
  %bf.clear510 = and i32 %bf.load509, 65535, !dbg !4072
  %cmp511 = icmp eq i32 %bf.clear510, 37, !dbg !4072
  br i1 %cmp511, label %land.rhs, label %land.end536, !dbg !4073

land.rhs:                                         ; preds = %land.lhs.true508
  %204 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call513 = call i32 @rhs_regno(%struct.rtx_def* %204), !dbg !4074
  %cmp514 = icmp eq i32 %call513, 7, !dbg !4074
  br i1 %cmp514, label %lor.end, label %lor.lhs.false516, !dbg !4074

lor.lhs.false516:                                 ; preds = %land.rhs
  %205 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call517 = call i32 @rhs_regno(%struct.rtx_def* %205), !dbg !4074
  %cmp518 = icmp eq i32 %call517, 20, !dbg !4074
  br i1 %cmp518, label %lor.end, label %lor.lhs.false520, !dbg !4074

lor.lhs.false520:                                 ; preds = %lor.lhs.false516
  %206 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call521 = call i32 @rhs_regno(%struct.rtx_def* %206), !dbg !4074
  %cmp522 = icmp eq i32 %call521, 6, !dbg !4074
  br i1 %cmp522, label %lor.end, label %lor.lhs.false524, !dbg !4074

lor.lhs.false524:                                 ; preds = %lor.lhs.false520
  %207 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call525 = call i32 @rhs_regno(%struct.rtx_def* %207), !dbg !4074
  %cmp526 = icmp eq i32 %call525, 16, !dbg !4074
  br i1 %cmp526, label %lor.end, label %lor.rhs528, !dbg !4074

lor.rhs528:                                       ; preds = %lor.lhs.false524
  %208 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call529 = call i32 @rhs_regno(%struct.rtx_def* %208), !dbg !4074
  %cmp530 = icmp uge i32 %call529, 53, !dbg !4074
  br i1 %cmp530, label %land.rhs532, label %land.end, !dbg !4074

land.rhs532:                                      ; preds = %lor.rhs528
  %209 = load %struct.rtx_def*, %struct.rtx_def** %basex, align 8, !dbg !4074
  %call533 = call i32 @rhs_regno(%struct.rtx_def* %209), !dbg !4074
  %cmp534 = icmp ule i32 %call533, 57, !dbg !4074
  br label %land.end

land.end:                                         ; preds = %land.rhs532, %lor.rhs528
  %210 = phi i1 [ false, %lor.rhs528 ], [ %cmp534, %land.rhs532 ], !dbg !4075
  br label %lor.end, !dbg !4074

lor.end:                                          ; preds = %land.end, %lor.lhs.false524, %lor.lhs.false520, %lor.lhs.false516, %land.rhs
  %211 = phi i1 [ true, %lor.lhs.false524 ], [ true, %lor.lhs.false520 ], [ true, %lor.lhs.false516 ], [ true, %land.rhs ], [ %210, %land.end ]
  br label %land.end536

land.end536:                                      ; preds = %lor.end, %land.lhs.true508, %lor.rhs
  %212 = phi i1 [ false, %land.lhs.true508 ], [ false, %lor.rhs ], [ %211, %lor.end ], !dbg !4075
  br label %lor.end537, !dbg !4069

lor.end537:                                       ; preds = %land.end536, %land.lhs.true498, %lor.lhs.false490, %lor.lhs.false486, %lor.lhs.false482, %land.lhs.true478, %land.lhs.true459
  %213 = phi i1 [ true, %land.lhs.true498 ], [ true, %lor.lhs.false490 ], [ true, %lor.lhs.false486 ], [ true, %lor.lhs.false482 ], [ true, %land.lhs.true478 ], [ true, %land.lhs.true459 ], [ %212, %land.end536 ]
  %lor.ext = zext i1 %213 to i32, !dbg !4069
  store i32 %lor.ext, i32* %retval, align 4, !dbg !4076
  br label %return, !dbg !4076

if.end538:                                        ; preds = %if.end449
  %214 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4077
  %215 = bitcast %struct.rtx_def* %214 to i32*, !dbg !4077
  %bf.load539 = load i32, i32* %215, align 8, !dbg !4077
  %bf.clear540 = and i32 %bf.load539, 65535, !dbg !4077
  %cmp541 = icmp eq i32 %bf.clear540, 43, !dbg !4077
  br i1 %cmp541, label %cond.false551, label %cond.true543, !dbg !4078

cond.true543:                                     ; preds = %if.end538
  %216 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4079
  %217 = bitcast %struct.rtx_def* %216 to i32*, !dbg !4079
  %bf.load544 = load i32, i32* %217, align 8, !dbg !4079
  %bf.lshr = lshr i32 %bf.load544, 16, !dbg !4079
  %bf.clear545 = and i32 %bf.lshr, 255, !dbg !4079
  %idxprom546 = zext i32 %bf.clear545 to i64, !dbg !4079
  %arrayidx547 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom546, !dbg !4079
  %218 = load i8, i8* %arrayidx547, align 1, !dbg !4079
  %conv548 = zext i8 %218 to i16, !dbg !4079
  %conv549 = zext i16 %conv548 to i32, !dbg !4080
  %conv550 = sext i32 %conv549 to i64, !dbg !4080
  br label %cond.end620, !dbg !4078

cond.false551:                                    ; preds = %if.end538
  %219 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4081
  %u552 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1, !dbg !4081
  %fld553 = bitcast %union.u* %u552 to [1 x %union.rtunion_def]*, !dbg !4081
  %arrayidx554 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld553, i64 0, i64 1, !dbg !4081
  %rt_mem555 = bitcast %union.rtunion_def* %arrayidx554 to %struct.mem_attrs**, !dbg !4081
  %220 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem555, align 8, !dbg !4081
  %cmp556 = icmp ne %struct.mem_attrs* %220, null, !dbg !4081
  br i1 %cmp556, label %cond.true558, label %cond.false564, !dbg !4081

cond.true558:                                     ; preds = %cond.false551
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4081
  %u559 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %221, i32 0, i32 1, !dbg !4081
  %fld560 = bitcast %union.u* %u559 to [1 x %union.rtunion_def]*, !dbg !4081
  %arrayidx561 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld560, i64 0, i64 1, !dbg !4081
  %rt_mem562 = bitcast %union.rtunion_def* %arrayidx561 to %struct.mem_attrs**, !dbg !4081
  %222 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem562, align 8, !dbg !4081
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %222, i32 0, i32 2, !dbg !4081
  %223 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !4081
  %tobool563 = icmp ne %struct.rtx_def* %223, null, !dbg !4081
  br i1 %tobool563, label %cond.true581, label %cond.false617, !dbg !4081

cond.false564:                                    ; preds = %cond.false551
  %224 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4081
  %225 = bitcast %struct.rtx_def* %224 to i32*, !dbg !4081
  %bf.load565 = load i32, i32* %225, align 8, !dbg !4081
  %bf.lshr566 = lshr i32 %bf.load565, 16, !dbg !4081
  %bf.clear567 = and i32 %bf.lshr566, 255, !dbg !4081
  %cmp568 = icmp ne i32 %bf.clear567, 1, !dbg !4081
  br i1 %cmp568, label %cond.true570, label %cond.false580, !dbg !4081

cond.true570:                                     ; preds = %cond.false564
  %226 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4081
  %227 = bitcast %struct.rtx_def* %226 to i32*, !dbg !4081
  %bf.load571 = load i32, i32* %227, align 8, !dbg !4081
  %bf.lshr572 = lshr i32 %bf.load571, 16, !dbg !4081
  %bf.clear573 = and i32 %bf.lshr572, 255, !dbg !4081
  %idxprom574 = zext i32 %bf.clear573 to i64, !dbg !4081
  %arrayidx575 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom574, !dbg !4081
  %228 = load i8, i8* %arrayidx575, align 1, !dbg !4081
  %conv576 = zext i8 %228 to i16, !dbg !4081
  %conv577 = zext i16 %conv576 to i64, !dbg !4081
  %call578 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv577), !dbg !4081
  %tobool579 = icmp ne %struct.rtx_def* %call578, null, !dbg !4081
  br i1 %tobool579, label %cond.true581, label %cond.false617, !dbg !4081

cond.false580:                                    ; preds = %cond.false564
  br i1 false, label %cond.true581, label %cond.false617, !dbg !4081

cond.true581:                                     ; preds = %cond.false580, %cond.true570, %cond.true558
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4082
  %u582 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1, !dbg !4082
  %fld583 = bitcast %union.u* %u582 to [1 x %union.rtunion_def]*, !dbg !4082
  %arrayidx584 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld583, i64 0, i64 1, !dbg !4082
  %rt_mem585 = bitcast %union.rtunion_def* %arrayidx584 to %struct.mem_attrs**, !dbg !4082
  %230 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem585, align 8, !dbg !4082
  %cmp586 = icmp ne %struct.mem_attrs* %230, null, !dbg !4082
  br i1 %cmp586, label %cond.true588, label %cond.false594, !dbg !4082

cond.true588:                                     ; preds = %cond.true581
  %231 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4082
  %u589 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1, !dbg !4082
  %fld590 = bitcast %union.u* %u589 to [1 x %union.rtunion_def]*, !dbg !4082
  %arrayidx591 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld590, i64 0, i64 1, !dbg !4082
  %rt_mem592 = bitcast %union.rtunion_def* %arrayidx591 to %struct.mem_attrs**, !dbg !4082
  %232 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem592, align 8, !dbg !4082
  %size593 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %232, i32 0, i32 2, !dbg !4082
  %233 = load %struct.rtx_def*, %struct.rtx_def** %size593, align 8, !dbg !4082
  br label %cond.end612, !dbg !4082

cond.false594:                                    ; preds = %cond.true581
  %234 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4082
  %235 = bitcast %struct.rtx_def* %234 to i32*, !dbg !4082
  %bf.load595 = load i32, i32* %235, align 8, !dbg !4082
  %bf.lshr596 = lshr i32 %bf.load595, 16, !dbg !4082
  %bf.clear597 = and i32 %bf.lshr596, 255, !dbg !4082
  %cmp598 = icmp ne i32 %bf.clear597, 1, !dbg !4082
  br i1 %cmp598, label %cond.true600, label %cond.false609, !dbg !4082

cond.true600:                                     ; preds = %cond.false594
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rtlx, align 8, !dbg !4082
  %237 = bitcast %struct.rtx_def* %236 to i32*, !dbg !4082
  %bf.load601 = load i32, i32* %237, align 8, !dbg !4082
  %bf.lshr602 = lshr i32 %bf.load601, 16, !dbg !4082
  %bf.clear603 = and i32 %bf.lshr602, 255, !dbg !4082
  %idxprom604 = zext i32 %bf.clear603 to i64, !dbg !4082
  %arrayidx605 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom604, !dbg !4082
  %238 = load i8, i8* %arrayidx605, align 1, !dbg !4082
  %conv606 = zext i8 %238 to i16, !dbg !4082
  %conv607 = zext i16 %conv606 to i64, !dbg !4082
  %call608 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv607), !dbg !4082
  br label %cond.end610, !dbg !4082

cond.false609:                                    ; preds = %cond.false594
  br label %cond.end610, !dbg !4082

cond.end610:                                      ; preds = %cond.false609, %cond.true600
  %cond611 = phi %struct.rtx_def* [ %call608, %cond.true600 ], [ null, %cond.false609 ], !dbg !4082
  br label %cond.end612, !dbg !4082

cond.end612:                                      ; preds = %cond.end610, %cond.true588
  %cond613 = phi %struct.rtx_def* [ %233, %cond.true588 ], [ %cond611, %cond.end610 ], !dbg !4082
  %u614 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond613, i32 0, i32 1, !dbg !4082
  %hwint615 = bitcast %union.u* %u614 to [1 x i64]*, !dbg !4082
  %arrayidx616 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint615, i64 0, i64 0, !dbg !4082
  %239 = load i64, i64* %arrayidx616, align 8, !dbg !4082
  br label %cond.end618, !dbg !4081

cond.false617:                                    ; preds = %cond.false580, %cond.true570, %cond.true558
  br label %cond.end618, !dbg !4081

cond.end618:                                      ; preds = %cond.false617, %cond.end612
  %cond619 = phi i64 [ %239, %cond.end612 ], [ -1, %cond.false617 ], !dbg !4081
  br label %cond.end620, !dbg !4078

cond.end620:                                      ; preds = %cond.end618, %cond.true543
  %cond621 = phi i64 [ %conv550, %cond.true543 ], [ %cond619, %cond.end618 ], !dbg !4078
  store i64 %cond621, i64* %sizex, align 8, !dbg !4083
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4084
  %241 = bitcast %struct.rtx_def* %240 to i32*, !dbg !4084
  %bf.load622 = load i32, i32* %241, align 8, !dbg !4084
  %bf.clear623 = and i32 %bf.load622, 65535, !dbg !4084
  %cmp624 = icmp eq i32 %bf.clear623, 43, !dbg !4084
  br i1 %cmp624, label %cond.false635, label %cond.true626, !dbg !4085

cond.true626:                                     ; preds = %cond.end620
  %242 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4086
  %243 = bitcast %struct.rtx_def* %242 to i32*, !dbg !4086
  %bf.load627 = load i32, i32* %243, align 8, !dbg !4086
  %bf.lshr628 = lshr i32 %bf.load627, 16, !dbg !4086
  %bf.clear629 = and i32 %bf.lshr628, 255, !dbg !4086
  %idxprom630 = zext i32 %bf.clear629 to i64, !dbg !4086
  %arrayidx631 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom630, !dbg !4086
  %244 = load i8, i8* %arrayidx631, align 1, !dbg !4086
  %conv632 = zext i8 %244 to i16, !dbg !4086
  %conv633 = zext i16 %conv632 to i32, !dbg !4087
  %conv634 = sext i32 %conv633 to i64, !dbg !4087
  br label %cond.end705, !dbg !4085

cond.false635:                                    ; preds = %cond.end620
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4088
  %u636 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1, !dbg !4088
  %fld637 = bitcast %union.u* %u636 to [1 x %union.rtunion_def]*, !dbg !4088
  %arrayidx638 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld637, i64 0, i64 1, !dbg !4088
  %rt_mem639 = bitcast %union.rtunion_def* %arrayidx638 to %struct.mem_attrs**, !dbg !4088
  %246 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem639, align 8, !dbg !4088
  %cmp640 = icmp ne %struct.mem_attrs* %246, null, !dbg !4088
  br i1 %cmp640, label %cond.true642, label %cond.false649, !dbg !4088

cond.true642:                                     ; preds = %cond.false635
  %247 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4088
  %u643 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1, !dbg !4088
  %fld644 = bitcast %union.u* %u643 to [1 x %union.rtunion_def]*, !dbg !4088
  %arrayidx645 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld644, i64 0, i64 1, !dbg !4088
  %rt_mem646 = bitcast %union.rtunion_def* %arrayidx645 to %struct.mem_attrs**, !dbg !4088
  %248 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem646, align 8, !dbg !4088
  %size647 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %248, i32 0, i32 2, !dbg !4088
  %249 = load %struct.rtx_def*, %struct.rtx_def** %size647, align 8, !dbg !4088
  %tobool648 = icmp ne %struct.rtx_def* %249, null, !dbg !4088
  br i1 %tobool648, label %cond.true666, label %cond.false702, !dbg !4088

cond.false649:                                    ; preds = %cond.false635
  %250 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4088
  %251 = bitcast %struct.rtx_def* %250 to i32*, !dbg !4088
  %bf.load650 = load i32, i32* %251, align 8, !dbg !4088
  %bf.lshr651 = lshr i32 %bf.load650, 16, !dbg !4088
  %bf.clear652 = and i32 %bf.lshr651, 255, !dbg !4088
  %cmp653 = icmp ne i32 %bf.clear652, 1, !dbg !4088
  br i1 %cmp653, label %cond.true655, label %cond.false665, !dbg !4088

cond.true655:                                     ; preds = %cond.false649
  %252 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4088
  %253 = bitcast %struct.rtx_def* %252 to i32*, !dbg !4088
  %bf.load656 = load i32, i32* %253, align 8, !dbg !4088
  %bf.lshr657 = lshr i32 %bf.load656, 16, !dbg !4088
  %bf.clear658 = and i32 %bf.lshr657, 255, !dbg !4088
  %idxprom659 = zext i32 %bf.clear658 to i64, !dbg !4088
  %arrayidx660 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom659, !dbg !4088
  %254 = load i8, i8* %arrayidx660, align 1, !dbg !4088
  %conv661 = zext i8 %254 to i16, !dbg !4088
  %conv662 = zext i16 %conv661 to i64, !dbg !4088
  %call663 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv662), !dbg !4088
  %tobool664 = icmp ne %struct.rtx_def* %call663, null, !dbg !4088
  br i1 %tobool664, label %cond.true666, label %cond.false702, !dbg !4088

cond.false665:                                    ; preds = %cond.false649
  br i1 false, label %cond.true666, label %cond.false702, !dbg !4088

cond.true666:                                     ; preds = %cond.false665, %cond.true655, %cond.true642
  %255 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4089
  %u667 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %255, i32 0, i32 1, !dbg !4089
  %fld668 = bitcast %union.u* %u667 to [1 x %union.rtunion_def]*, !dbg !4089
  %arrayidx669 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld668, i64 0, i64 1, !dbg !4089
  %rt_mem670 = bitcast %union.rtunion_def* %arrayidx669 to %struct.mem_attrs**, !dbg !4089
  %256 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem670, align 8, !dbg !4089
  %cmp671 = icmp ne %struct.mem_attrs* %256, null, !dbg !4089
  br i1 %cmp671, label %cond.true673, label %cond.false679, !dbg !4089

cond.true673:                                     ; preds = %cond.true666
  %257 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4089
  %u674 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %257, i32 0, i32 1, !dbg !4089
  %fld675 = bitcast %union.u* %u674 to [1 x %union.rtunion_def]*, !dbg !4089
  %arrayidx676 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld675, i64 0, i64 1, !dbg !4089
  %rt_mem677 = bitcast %union.rtunion_def* %arrayidx676 to %struct.mem_attrs**, !dbg !4089
  %258 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem677, align 8, !dbg !4089
  %size678 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %258, i32 0, i32 2, !dbg !4089
  %259 = load %struct.rtx_def*, %struct.rtx_def** %size678, align 8, !dbg !4089
  br label %cond.end697, !dbg !4089

cond.false679:                                    ; preds = %cond.true666
  %260 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4089
  %261 = bitcast %struct.rtx_def* %260 to i32*, !dbg !4089
  %bf.load680 = load i32, i32* %261, align 8, !dbg !4089
  %bf.lshr681 = lshr i32 %bf.load680, 16, !dbg !4089
  %bf.clear682 = and i32 %bf.lshr681, 255, !dbg !4089
  %cmp683 = icmp ne i32 %bf.clear682, 1, !dbg !4089
  br i1 %cmp683, label %cond.true685, label %cond.false694, !dbg !4089

cond.true685:                                     ; preds = %cond.false679
  %262 = load %struct.rtx_def*, %struct.rtx_def** %rtly, align 8, !dbg !4089
  %263 = bitcast %struct.rtx_def* %262 to i32*, !dbg !4089
  %bf.load686 = load i32, i32* %263, align 8, !dbg !4089
  %bf.lshr687 = lshr i32 %bf.load686, 16, !dbg !4089
  %bf.clear688 = and i32 %bf.lshr687, 255, !dbg !4089
  %idxprom689 = zext i32 %bf.clear688 to i64, !dbg !4089
  %arrayidx690 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom689, !dbg !4089
  %264 = load i8, i8* %arrayidx690, align 1, !dbg !4089
  %conv691 = zext i8 %264 to i16, !dbg !4089
  %conv692 = zext i16 %conv691 to i64, !dbg !4089
  %call693 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv692), !dbg !4089
  br label %cond.end695, !dbg !4089

cond.false694:                                    ; preds = %cond.false679
  br label %cond.end695, !dbg !4089

cond.end695:                                      ; preds = %cond.false694, %cond.true685
  %cond696 = phi %struct.rtx_def* [ %call693, %cond.true685 ], [ null, %cond.false694 ], !dbg !4089
  br label %cond.end697, !dbg !4089

cond.end697:                                      ; preds = %cond.end695, %cond.true673
  %cond698 = phi %struct.rtx_def* [ %259, %cond.true673 ], [ %cond696, %cond.end695 ], !dbg !4089
  %u699 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond698, i32 0, i32 1, !dbg !4089
  %hwint700 = bitcast %union.u* %u699 to [1 x i64]*, !dbg !4089
  %arrayidx701 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint700, i64 0, i64 0, !dbg !4089
  %265 = load i64, i64* %arrayidx701, align 8, !dbg !4089
  br label %cond.end703, !dbg !4088

cond.false702:                                    ; preds = %cond.false665, %cond.true655, %cond.true642
  br label %cond.end703, !dbg !4088

cond.end703:                                      ; preds = %cond.false702, %cond.end697
  %cond704 = phi i64 [ %265, %cond.end697 ], [ -1, %cond.false702 ], !dbg !4088
  br label %cond.end705, !dbg !4085

cond.end705:                                      ; preds = %cond.end703, %cond.true626
  %cond706 = phi i64 [ %conv634, %cond.true626 ], [ %cond704, %cond.end703 ], !dbg !4085
  store i64 %cond706, i64* %sizey, align 8, !dbg !4090
  %266 = load %struct.rtx_def*, %struct.rtx_def** %moffsetx, align 8, !dbg !4091
  %tobool707 = icmp ne %struct.rtx_def* %266, null, !dbg !4091
  br i1 %tobool707, label %if.then708, label %if.end715, !dbg !4093

if.then708:                                       ; preds = %cond.end705
  %267 = load %struct.rtx_def*, %struct.rtx_def** %moffsetx, align 8, !dbg !4094
  %u709 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1, !dbg !4094
  %hwint710 = bitcast %union.u* %u709 to [1 x i64]*, !dbg !4094
  %arrayidx711 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint710, i64 0, i64 0, !dbg !4094
  %268 = load i64, i64* %arrayidx711, align 8, !dbg !4094
  %269 = load i64, i64* %offsetx, align 8, !dbg !4095
  %add = add nsw i64 %269, %268, !dbg !4095
  store i64 %add, i64* %offsetx, align 8, !dbg !4095
  %270 = load %struct.rtx_def*, %struct.rtx_def** %moffsetx, align 8, !dbg !4096
  %u712 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %270, i32 0, i32 1, !dbg !4096
  %hwint713 = bitcast %union.u* %u712 to [1 x i64]*, !dbg !4096
  %arrayidx714 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint713, i64 0, i64 0, !dbg !4096
  %271 = load i64, i64* %arrayidx714, align 8, !dbg !4096
  %272 = load i64, i64* %sizex, align 8, !dbg !4097
  %sub = sub nsw i64 %272, %271, !dbg !4097
  store i64 %sub, i64* %sizex, align 8, !dbg !4097
  br label %if.end715, !dbg !4098

if.end715:                                        ; preds = %if.then708, %cond.end705
  %273 = load %struct.rtx_def*, %struct.rtx_def** %moffsety, align 8, !dbg !4099
  %tobool716 = icmp ne %struct.rtx_def* %273, null, !dbg !4099
  br i1 %tobool716, label %if.then717, label %if.end726, !dbg !4101

if.then717:                                       ; preds = %if.end715
  %274 = load %struct.rtx_def*, %struct.rtx_def** %moffsety, align 8, !dbg !4102
  %u718 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %274, i32 0, i32 1, !dbg !4102
  %hwint719 = bitcast %union.u* %u718 to [1 x i64]*, !dbg !4102
  %arrayidx720 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint719, i64 0, i64 0, !dbg !4102
  %275 = load i64, i64* %arrayidx720, align 8, !dbg !4102
  %276 = load i64, i64* %offsety, align 8, !dbg !4103
  %add721 = add nsw i64 %276, %275, !dbg !4103
  store i64 %add721, i64* %offsety, align 8, !dbg !4103
  %277 = load %struct.rtx_def*, %struct.rtx_def** %moffsety, align 8, !dbg !4104
  %u722 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %277, i32 0, i32 1, !dbg !4104
  %hwint723 = bitcast %union.u* %u722 to [1 x i64]*, !dbg !4104
  %arrayidx724 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint723, i64 0, i64 0, !dbg !4104
  %278 = load i64, i64* %arrayidx724, align 8, !dbg !4104
  %279 = load i64, i64* %sizey, align 8, !dbg !4105
  %sub725 = sub nsw i64 %279, %278, !dbg !4105
  store i64 %sub725, i64* %sizey, align 8, !dbg !4105
  br label %if.end726, !dbg !4106

if.end726:                                        ; preds = %if.then717, %if.end715
  %280 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4107
  %u727 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %280, i32 0, i32 1, !dbg !4107
  %fld728 = bitcast %union.u* %u727 to [1 x %union.rtunion_def]*, !dbg !4107
  %arrayidx729 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld728, i64 0, i64 1, !dbg !4107
  %rt_mem730 = bitcast %union.rtunion_def* %arrayidx729 to %struct.mem_attrs**, !dbg !4107
  %281 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem730, align 8, !dbg !4107
  %cmp731 = icmp ne %struct.mem_attrs* %281, null, !dbg !4107
  br i1 %cmp731, label %cond.true733, label %cond.false740, !dbg !4109

cond.true733:                                     ; preds = %if.end726
  %282 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4107
  %u734 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %282, i32 0, i32 1, !dbg !4107
  %fld735 = bitcast %union.u* %u734 to [1 x %union.rtunion_def]*, !dbg !4107
  %arrayidx736 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld735, i64 0, i64 1, !dbg !4107
  %rt_mem737 = bitcast %union.rtunion_def* %arrayidx736 to %struct.mem_attrs**, !dbg !4107
  %283 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem737, align 8, !dbg !4107
  %size738 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %283, i32 0, i32 2, !dbg !4107
  %284 = load %struct.rtx_def*, %struct.rtx_def** %size738, align 8, !dbg !4107
  %tobool739 = icmp ne %struct.rtx_def* %284, null, !dbg !4107
  br i1 %tobool739, label %land.lhs.true757, label %if.end795, !dbg !4107

cond.false740:                                    ; preds = %if.end726
  %285 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4107
  %286 = bitcast %struct.rtx_def* %285 to i32*, !dbg !4107
  %bf.load741 = load i32, i32* %286, align 8, !dbg !4107
  %bf.lshr742 = lshr i32 %bf.load741, 16, !dbg !4107
  %bf.clear743 = and i32 %bf.lshr742, 255, !dbg !4107
  %cmp744 = icmp ne i32 %bf.clear743, 1, !dbg !4107
  br i1 %cmp744, label %cond.true746, label %cond.false756, !dbg !4109

cond.true746:                                     ; preds = %cond.false740
  %287 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4107
  %288 = bitcast %struct.rtx_def* %287 to i32*, !dbg !4107
  %bf.load747 = load i32, i32* %288, align 8, !dbg !4107
  %bf.lshr748 = lshr i32 %bf.load747, 16, !dbg !4107
  %bf.clear749 = and i32 %bf.lshr748, 255, !dbg !4107
  %idxprom750 = zext i32 %bf.clear749 to i64, !dbg !4107
  %arrayidx751 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom750, !dbg !4107
  %289 = load i8, i8* %arrayidx751, align 1, !dbg !4107
  %conv752 = zext i8 %289 to i16, !dbg !4107
  %conv753 = zext i16 %conv752 to i64, !dbg !4107
  %call754 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv753), !dbg !4107
  %tobool755 = icmp ne %struct.rtx_def* %call754, null, !dbg !4107
  br i1 %tobool755, label %land.lhs.true757, label %if.end795, !dbg !4107

cond.false756:                                    ; preds = %cond.false740
  br i1 false, label %land.lhs.true757, label %if.end795, !dbg !4109

land.lhs.true757:                                 ; preds = %cond.false756, %cond.true746, %cond.true733
  %290 = load %struct.rtx_def*, %struct.rtx_def** %moffsetx, align 8, !dbg !4110
  %tobool758 = icmp ne %struct.rtx_def* %290, null, !dbg !4110
  br i1 %tobool758, label %if.then759, label %if.end795, !dbg !4111

if.then759:                                       ; preds = %land.lhs.true757
  %291 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4112
  %u760 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %291, i32 0, i32 1, !dbg !4112
  %fld761 = bitcast %union.u* %u760 to [1 x %union.rtunion_def]*, !dbg !4112
  %arrayidx762 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld761, i64 0, i64 1, !dbg !4112
  %rt_mem763 = bitcast %union.rtunion_def* %arrayidx762 to %struct.mem_attrs**, !dbg !4112
  %292 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem763, align 8, !dbg !4112
  %cmp764 = icmp ne %struct.mem_attrs* %292, null, !dbg !4112
  br i1 %cmp764, label %cond.true766, label %cond.false772, !dbg !4112

cond.true766:                                     ; preds = %if.then759
  %293 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4112
  %u767 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %293, i32 0, i32 1, !dbg !4112
  %fld768 = bitcast %union.u* %u767 to [1 x %union.rtunion_def]*, !dbg !4112
  %arrayidx769 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld768, i64 0, i64 1, !dbg !4112
  %rt_mem770 = bitcast %union.rtunion_def* %arrayidx769 to %struct.mem_attrs**, !dbg !4112
  %294 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem770, align 8, !dbg !4112
  %size771 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %294, i32 0, i32 2, !dbg !4112
  %295 = load %struct.rtx_def*, %struct.rtx_def** %size771, align 8, !dbg !4112
  br label %cond.end790, !dbg !4112

cond.false772:                                    ; preds = %if.then759
  %296 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4112
  %297 = bitcast %struct.rtx_def* %296 to i32*, !dbg !4112
  %bf.load773 = load i32, i32* %297, align 8, !dbg !4112
  %bf.lshr774 = lshr i32 %bf.load773, 16, !dbg !4112
  %bf.clear775 = and i32 %bf.lshr774, 255, !dbg !4112
  %cmp776 = icmp ne i32 %bf.clear775, 1, !dbg !4112
  br i1 %cmp776, label %cond.true778, label %cond.false787, !dbg !4112

cond.true778:                                     ; preds = %cond.false772
  %298 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4112
  %299 = bitcast %struct.rtx_def* %298 to i32*, !dbg !4112
  %bf.load779 = load i32, i32* %299, align 8, !dbg !4112
  %bf.lshr780 = lshr i32 %bf.load779, 16, !dbg !4112
  %bf.clear781 = and i32 %bf.lshr780, 255, !dbg !4112
  %idxprom782 = zext i32 %bf.clear781 to i64, !dbg !4112
  %arrayidx783 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom782, !dbg !4112
  %300 = load i8, i8* %arrayidx783, align 1, !dbg !4112
  %conv784 = zext i8 %300 to i16, !dbg !4112
  %conv785 = zext i16 %conv784 to i64, !dbg !4112
  %call786 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv785), !dbg !4112
  br label %cond.end788, !dbg !4112

cond.false787:                                    ; preds = %cond.false772
  br label %cond.end788, !dbg !4112

cond.end788:                                      ; preds = %cond.false787, %cond.true778
  %cond789 = phi %struct.rtx_def* [ %call786, %cond.true778 ], [ null, %cond.false787 ], !dbg !4112
  br label %cond.end790, !dbg !4112

cond.end790:                                      ; preds = %cond.end788, %cond.true766
  %cond791 = phi %struct.rtx_def* [ %295, %cond.true766 ], [ %cond789, %cond.end788 ], !dbg !4112
  %u792 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond791, i32 0, i32 1, !dbg !4112
  %hwint793 = bitcast %union.u* %u792 to [1 x i64]*, !dbg !4112
  %arrayidx794 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint793, i64 0, i64 0, !dbg !4112
  %301 = load i64, i64* %arrayidx794, align 8, !dbg !4112
  store i64 %301, i64* %sizex, align 8, !dbg !4113
  br label %if.end795, !dbg !4114

if.end795:                                        ; preds = %cond.end790, %land.lhs.true757, %cond.false756, %cond.true746, %cond.true733
  %302 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4115
  %u796 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %302, i32 0, i32 1, !dbg !4115
  %fld797 = bitcast %union.u* %u796 to [1 x %union.rtunion_def]*, !dbg !4115
  %arrayidx798 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld797, i64 0, i64 1, !dbg !4115
  %rt_mem799 = bitcast %union.rtunion_def* %arrayidx798 to %struct.mem_attrs**, !dbg !4115
  %303 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem799, align 8, !dbg !4115
  %cmp800 = icmp ne %struct.mem_attrs* %303, null, !dbg !4115
  br i1 %cmp800, label %cond.true802, label %cond.false809, !dbg !4117

cond.true802:                                     ; preds = %if.end795
  %304 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4115
  %u803 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %304, i32 0, i32 1, !dbg !4115
  %fld804 = bitcast %union.u* %u803 to [1 x %union.rtunion_def]*, !dbg !4115
  %arrayidx805 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld804, i64 0, i64 1, !dbg !4115
  %rt_mem806 = bitcast %union.rtunion_def* %arrayidx805 to %struct.mem_attrs**, !dbg !4115
  %305 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem806, align 8, !dbg !4115
  %size807 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %305, i32 0, i32 2, !dbg !4115
  %306 = load %struct.rtx_def*, %struct.rtx_def** %size807, align 8, !dbg !4115
  %tobool808 = icmp ne %struct.rtx_def* %306, null, !dbg !4115
  br i1 %tobool808, label %land.lhs.true826, label %if.end864, !dbg !4115

cond.false809:                                    ; preds = %if.end795
  %307 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4115
  %308 = bitcast %struct.rtx_def* %307 to i32*, !dbg !4115
  %bf.load810 = load i32, i32* %308, align 8, !dbg !4115
  %bf.lshr811 = lshr i32 %bf.load810, 16, !dbg !4115
  %bf.clear812 = and i32 %bf.lshr811, 255, !dbg !4115
  %cmp813 = icmp ne i32 %bf.clear812, 1, !dbg !4115
  br i1 %cmp813, label %cond.true815, label %cond.false825, !dbg !4117

cond.true815:                                     ; preds = %cond.false809
  %309 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4115
  %310 = bitcast %struct.rtx_def* %309 to i32*, !dbg !4115
  %bf.load816 = load i32, i32* %310, align 8, !dbg !4115
  %bf.lshr817 = lshr i32 %bf.load816, 16, !dbg !4115
  %bf.clear818 = and i32 %bf.lshr817, 255, !dbg !4115
  %idxprom819 = zext i32 %bf.clear818 to i64, !dbg !4115
  %arrayidx820 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom819, !dbg !4115
  %311 = load i8, i8* %arrayidx820, align 1, !dbg !4115
  %conv821 = zext i8 %311 to i16, !dbg !4115
  %conv822 = zext i16 %conv821 to i64, !dbg !4115
  %call823 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv822), !dbg !4115
  %tobool824 = icmp ne %struct.rtx_def* %call823, null, !dbg !4115
  br i1 %tobool824, label %land.lhs.true826, label %if.end864, !dbg !4115

cond.false825:                                    ; preds = %cond.false809
  br i1 false, label %land.lhs.true826, label %if.end864, !dbg !4117

land.lhs.true826:                                 ; preds = %cond.false825, %cond.true815, %cond.true802
  %312 = load %struct.rtx_def*, %struct.rtx_def** %moffsety, align 8, !dbg !4118
  %tobool827 = icmp ne %struct.rtx_def* %312, null, !dbg !4118
  br i1 %tobool827, label %if.then828, label %if.end864, !dbg !4119

if.then828:                                       ; preds = %land.lhs.true826
  %313 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4120
  %u829 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %313, i32 0, i32 1, !dbg !4120
  %fld830 = bitcast %union.u* %u829 to [1 x %union.rtunion_def]*, !dbg !4120
  %arrayidx831 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld830, i64 0, i64 1, !dbg !4120
  %rt_mem832 = bitcast %union.rtunion_def* %arrayidx831 to %struct.mem_attrs**, !dbg !4120
  %314 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem832, align 8, !dbg !4120
  %cmp833 = icmp ne %struct.mem_attrs* %314, null, !dbg !4120
  br i1 %cmp833, label %cond.true835, label %cond.false841, !dbg !4120

cond.true835:                                     ; preds = %if.then828
  %315 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4120
  %u836 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %315, i32 0, i32 1, !dbg !4120
  %fld837 = bitcast %union.u* %u836 to [1 x %union.rtunion_def]*, !dbg !4120
  %arrayidx838 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld837, i64 0, i64 1, !dbg !4120
  %rt_mem839 = bitcast %union.rtunion_def* %arrayidx838 to %struct.mem_attrs**, !dbg !4120
  %316 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem839, align 8, !dbg !4120
  %size840 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %316, i32 0, i32 2, !dbg !4120
  %317 = load %struct.rtx_def*, %struct.rtx_def** %size840, align 8, !dbg !4120
  br label %cond.end859, !dbg !4120

cond.false841:                                    ; preds = %if.then828
  %318 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4120
  %319 = bitcast %struct.rtx_def* %318 to i32*, !dbg !4120
  %bf.load842 = load i32, i32* %319, align 8, !dbg !4120
  %bf.lshr843 = lshr i32 %bf.load842, 16, !dbg !4120
  %bf.clear844 = and i32 %bf.lshr843, 255, !dbg !4120
  %cmp845 = icmp ne i32 %bf.clear844, 1, !dbg !4120
  br i1 %cmp845, label %cond.true847, label %cond.false856, !dbg !4120

cond.true847:                                     ; preds = %cond.false841
  %320 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4120
  %321 = bitcast %struct.rtx_def* %320 to i32*, !dbg !4120
  %bf.load848 = load i32, i32* %321, align 8, !dbg !4120
  %bf.lshr849 = lshr i32 %bf.load848, 16, !dbg !4120
  %bf.clear850 = and i32 %bf.lshr849, 255, !dbg !4120
  %idxprom851 = zext i32 %bf.clear850 to i64, !dbg !4120
  %arrayidx852 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom851, !dbg !4120
  %322 = load i8, i8* %arrayidx852, align 1, !dbg !4120
  %conv853 = zext i8 %322 to i16, !dbg !4120
  %conv854 = zext i16 %conv853 to i64, !dbg !4120
  %call855 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv854), !dbg !4120
  br label %cond.end857, !dbg !4120

cond.false856:                                    ; preds = %cond.false841
  br label %cond.end857, !dbg !4120

cond.end857:                                      ; preds = %cond.false856, %cond.true847
  %cond858 = phi %struct.rtx_def* [ %call855, %cond.true847 ], [ null, %cond.false856 ], !dbg !4120
  br label %cond.end859, !dbg !4120

cond.end859:                                      ; preds = %cond.end857, %cond.true835
  %cond860 = phi %struct.rtx_def* [ %317, %cond.true835 ], [ %cond858, %cond.end857 ], !dbg !4120
  %u861 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond860, i32 0, i32 1, !dbg !4120
  %hwint862 = bitcast %union.u* %u861 to [1 x i64]*, !dbg !4120
  %arrayidx863 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint862, i64 0, i64 0, !dbg !4120
  %323 = load i64, i64* %arrayidx863, align 8, !dbg !4120
  store i64 %323, i64* %sizey, align 8, !dbg !4121
  br label %if.end864, !dbg !4122

if.end864:                                        ; preds = %cond.end859, %land.lhs.true826, %cond.false825, %cond.true815, %cond.true802
  %324 = load i64, i64* %offsetx, align 8, !dbg !4123
  %325 = load i64, i64* %offsety, align 8, !dbg !4125
  %cmp865 = icmp sgt i64 %324, %325, !dbg !4126
  br i1 %cmp865, label %if.then867, label %if.end868, !dbg !4127

if.then867:                                       ; preds = %if.end864
  %326 = load i64, i64* %offsetx, align 8, !dbg !4128
  store i64 %326, i64* %tem, align 8, !dbg !4130
  %327 = load i64, i64* %offsety, align 8, !dbg !4131
  store i64 %327, i64* %offsetx, align 8, !dbg !4132
  %328 = load i64, i64* %tem, align 8, !dbg !4133
  store i64 %328, i64* %offsety, align 8, !dbg !4134
  %329 = load i64, i64* %sizex, align 8, !dbg !4135
  store i64 %329, i64* %tem, align 8, !dbg !4136
  %330 = load i64, i64* %sizey, align 8, !dbg !4137
  store i64 %330, i64* %sizex, align 8, !dbg !4138
  %331 = load i64, i64* %tem, align 8, !dbg !4139
  store i64 %331, i64* %sizey, align 8, !dbg !4140
  br label %if.end868, !dbg !4141

if.end868:                                        ; preds = %if.then867, %if.end864
  %332 = load i64, i64* %sizex, align 8, !dbg !4142
  %cmp869 = icmp sge i64 %332, 0, !dbg !4143
  br i1 %cmp869, label %land.rhs871, label %land.end875, !dbg !4144

land.rhs871:                                      ; preds = %if.end868
  %333 = load i64, i64* %offsety, align 8, !dbg !4145
  %334 = load i64, i64* %offsetx, align 8, !dbg !4146
  %335 = load i64, i64* %sizex, align 8, !dbg !4147
  %add872 = add nsw i64 %334, %335, !dbg !4148
  %cmp873 = icmp sge i64 %333, %add872, !dbg !4149
  br label %land.end875

land.end875:                                      ; preds = %land.rhs871, %if.end868
  %336 = phi i1 [ false, %if.end868 ], [ %cmp873, %land.rhs871 ], !dbg !4150
  %land.ext = zext i1 %336 to i32, !dbg !4144
  store i32 %land.ext, i32* %retval, align 4, !dbg !4151
  br label %return, !dbg !4151

return:                                           ; preds = %land.end875, %lor.end537, %if.then374, %if.then329, %if.then295, %if.then280, %if.then260, %if.then223, %if.then217, %if.then155, %if.then119, %if.then114, %if.then62, %if.then50, %if.then
  %337 = load i32, i32* %retval, align 4, !dbg !4152
  ret i32 %337, !dbg !4152
}

declare dso_local %union.tree_node* @get_spill_slot_decl(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @nonoverlapping_component_refs_p(%union.tree_node* %x, %union.tree_node* %y) #0 !dbg !4153 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %union.tree_node*, align 8
  %y.addr = alloca %union.tree_node*, align 8
  %fieldx = alloca %union.tree_node*, align 8
  %fieldy = alloca %union.tree_node*, align 8
  %typex = alloca %union.tree_node*, align 8
  %typey = alloca %union.tree_node*, align 8
  %orig_y = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !4156, metadata !DIExpression()), !dbg !4157
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !4158, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.declare(metadata %union.tree_node** %fieldx, metadata !4160, metadata !DIExpression()), !dbg !4161
  call void @llvm.dbg.declare(metadata %union.tree_node** %fieldy, metadata !4162, metadata !DIExpression()), !dbg !4163
  call void @llvm.dbg.declare(metadata %union.tree_node** %typex, metadata !4164, metadata !DIExpression()), !dbg !4165
  call void @llvm.dbg.declare(metadata %union.tree_node** %typey, metadata !4166, metadata !DIExpression()), !dbg !4167
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_y, metadata !4168, metadata !DIExpression()), !dbg !4169
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !4170
  %tobool = icmp ne i32 %0, 0, !dbg !4170
  br i1 %tobool, label %if.end, label %if.then, !dbg !4172

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4173
  br label %return, !dbg !4173

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !4174

do.body:                                          ; preds = %land.end60, %if.end
  %1 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4175
  store %union.tree_node* %1, %union.tree_node** %orig_y, align 8, !dbg !4177
  br label %do.body1, !dbg !4178

do.body1:                                         ; preds = %land.end28, %do.body
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4179
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !4179
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4179
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4179
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4179
  store %union.tree_node* %3, %union.tree_node** %fieldx, align 8, !dbg !4181
  %4 = load %union.tree_node*, %union.tree_node** %fieldx, align 8, !dbg !4182
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !4182
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4182
  %5 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4182
  %type = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !4182
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 16, !dbg !4182
  %6 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4182
  store %union.tree_node* %6, %union.tree_node** %typex, align 8, !dbg !4183
  %7 = load %union.tree_node*, %union.tree_node** %orig_y, align 8, !dbg !4184
  store %union.tree_node* %7, %union.tree_node** %y.addr, align 8, !dbg !4185
  br label %do.body2, !dbg !4186

do.body2:                                         ; preds = %land.end, %do.body1
  %8 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4187
  %exp3 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4187
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !4187
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 1, !dbg !4187
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !4187
  store %union.tree_node* %9, %union.tree_node** %fieldy, align 8, !dbg !4189
  %10 = load %union.tree_node*, %union.tree_node** %fieldy, align 8, !dbg !4190
  %decl_minimal6 = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !4190
  %context7 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal6, i32 0, i32 4, !dbg !4190
  %11 = load %union.tree_node*, %union.tree_node** %context7, align 8, !dbg !4190
  %type8 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4190
  %main_variant9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 16, !dbg !4190
  %12 = load %union.tree_node*, %union.tree_node** %main_variant9, align 8, !dbg !4190
  store %union.tree_node* %12, %union.tree_node** %typey, align 8, !dbg !4191
  %13 = load %union.tree_node*, %union.tree_node** %typex, align 8, !dbg !4192
  %14 = load %union.tree_node*, %union.tree_node** %typey, align 8, !dbg !4194
  %cmp = icmp eq %union.tree_node* %13, %14, !dbg !4195
  br i1 %cmp, label %if.then10, label %if.end11, !dbg !4196

if.then10:                                        ; preds = %do.body2
  br label %found, !dbg !4197

if.end11:                                         ; preds = %do.body2
  %15 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4198
  %exp12 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !4198
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !4198
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 0, !dbg !4198
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !4198
  store %union.tree_node* %16, %union.tree_node** %y.addr, align 8, !dbg !4199
  br label %do.cond, !dbg !4200

do.cond:                                          ; preds = %if.end11
  %17 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4201
  %tobool15 = icmp ne %union.tree_node* %17, null, !dbg !4201
  br i1 %tobool15, label %land.rhs, label %land.end, !dbg !4202

land.rhs:                                         ; preds = %do.cond
  %18 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4203
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4203
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !4203
  %bf.load = load i64, i64* %19, align 8, !dbg !4203
  %bf.clear = and i64 %bf.load, 65535, !dbg !4203
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4203
  %cmp16 = icmp eq i32 %bf.cast, 41, !dbg !4204
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp16, %land.rhs ], !dbg !4205
  br i1 %20, label %do.body2, label %do.end, !dbg !4200, !llvm.loop !4206

do.end:                                           ; preds = %land.end
  %21 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4208
  %exp17 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !4208
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !4208
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !4208
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !4208
  store %union.tree_node* %22, %union.tree_node** %x.addr, align 8, !dbg !4209
  br label %do.cond20, !dbg !4210

do.cond20:                                        ; preds = %do.end
  %23 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4211
  %tobool21 = icmp ne %union.tree_node* %23, null, !dbg !4211
  br i1 %tobool21, label %land.rhs22, label %land.end28, !dbg !4212

land.rhs22:                                       ; preds = %do.cond20
  %24 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4213
  %base23 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4213
  %25 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4213
  %bf.load24 = load i64, i64* %25, align 8, !dbg !4213
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !4213
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4213
  %cmp27 = icmp eq i32 %bf.cast26, 41, !dbg !4214
  br label %land.end28

land.end28:                                       ; preds = %land.rhs22, %do.cond20
  %26 = phi i1 [ false, %do.cond20 ], [ %cmp27, %land.rhs22 ], !dbg !4215
  br i1 %26, label %do.body1, label %do.end29, !dbg !4210, !llvm.loop !4216

do.end29:                                         ; preds = %land.end28
  store i8 0, i8* %retval, align 1, !dbg !4218
  br label %return, !dbg !4218

found:                                            ; preds = %if.then10
  call void @llvm.dbg.label(metadata !4219), !dbg !4220
  %27 = load %union.tree_node*, %union.tree_node** %typex, align 8, !dbg !4221
  %base30 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !4221
  %28 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4221
  %bf.load31 = load i64, i64* %28, align 8, !dbg !4221
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4221
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4221
  %cmp34 = icmp eq i32 %bf.cast33, 16, !dbg !4223
  br i1 %cmp34, label %land.lhs.true, label %if.end37, !dbg !4224

land.lhs.true:                                    ; preds = %found
  %29 = load %union.tree_node*, %union.tree_node** %fieldx, align 8, !dbg !4225
  %30 = load %union.tree_node*, %union.tree_node** %fieldy, align 8, !dbg !4226
  %cmp35 = icmp ne %union.tree_node* %29, %30, !dbg !4227
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !4228

if.then36:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4229
  br label %return, !dbg !4229

if.end37:                                         ; preds = %land.lhs.true, %found
  %31 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4230
  %exp38 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !4230
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !4230
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 0, !dbg !4230
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !4230
  store %union.tree_node* %32, %union.tree_node** %x.addr, align 8, !dbg !4231
  %33 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4232
  %exp41 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !4232
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !4232
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !4232
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !4232
  store %union.tree_node* %34, %union.tree_node** %y.addr, align 8, !dbg !4233
  br label %do.cond44, !dbg !4234

do.cond44:                                        ; preds = %if.end37
  %35 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4235
  %tobool45 = icmp ne %union.tree_node* %35, null, !dbg !4235
  br i1 %tobool45, label %land.lhs.true46, label %land.end60, !dbg !4236

land.lhs.true46:                                  ; preds = %do.cond44
  %36 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4237
  %tobool47 = icmp ne %union.tree_node* %36, null, !dbg !4237
  br i1 %tobool47, label %land.lhs.true48, label %land.end60, !dbg !4238

land.lhs.true48:                                  ; preds = %land.lhs.true46
  %37 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4239
  %base49 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4239
  %38 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4239
  %bf.load50 = load i64, i64* %38, align 8, !dbg !4239
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4239
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4239
  %cmp53 = icmp eq i32 %bf.cast52, 41, !dbg !4240
  br i1 %cmp53, label %land.rhs54, label %land.end60, !dbg !4241

land.rhs54:                                       ; preds = %land.lhs.true48
  %39 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !4242
  %base55 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4242
  %40 = bitcast %struct.tree_base* %base55 to i64*, !dbg !4242
  %bf.load56 = load i64, i64* %40, align 8, !dbg !4242
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !4242
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !4242
  %cmp59 = icmp eq i32 %bf.cast58, 41, !dbg !4243
  br label %land.end60

land.end60:                                       ; preds = %land.rhs54, %land.lhs.true48, %land.lhs.true46, %do.cond44
  %41 = phi i1 [ false, %land.lhs.true48 ], [ false, %land.lhs.true46 ], [ false, %do.cond44 ], [ %cmp59, %land.rhs54 ], !dbg !4244
  br i1 %41, label %do.body, label %do.end61, !dbg !4234, !llvm.loop !4245

do.end61:                                         ; preds = %land.end60
  store i8 0, i8* %retval, align 1, !dbg !4247
  br label %return, !dbg !4247

return:                                           ; preds = %do.end61, %if.then36, %do.end29, %if.then
  %42 = load i8, i8* %retval, align 1, !dbg !4248
  ret i8 %42, !dbg !4248
}

declare dso_local zeroext i8 @ipa_type_escape_field_does_not_clobber_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @decl_for_component_ref(%union.tree_node* %x) #0 !dbg !4249 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !4252, metadata !DIExpression()), !dbg !4253
  br label %do.body, !dbg !4254

do.body:                                          ; preds = %land.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4255
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !4255
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4255
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4255
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4255
  store %union.tree_node* %1, %union.tree_node** %x.addr, align 8, !dbg !4257
  br label %do.cond, !dbg !4258

do.cond:                                          ; preds = %do.body
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4259
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4259
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4260

land.rhs:                                         ; preds = %do.cond
  %3 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4261
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4261
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4261
  %bf.load = load i64, i64* %4, align 8, !dbg !4261
  %bf.clear = and i64 %bf.load, 65535, !dbg !4261
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4261
  %cmp = icmp eq i32 %bf.cast, 41, !dbg !4262
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %5 = phi i1 [ false, %do.cond ], [ %cmp, %land.rhs ], !dbg !4263
  br i1 %5, label %do.body, label %do.end, !dbg !4258, !llvm.loop !4264

do.end:                                           ; preds = %land.end
  %6 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4266
  %tobool1 = icmp ne %union.tree_node* %6, null, !dbg !4266
  br i1 %tobool1, label %land.lhs.true, label %cond.false, !dbg !4267

land.lhs.true:                                    ; preds = %do.end
  %7 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4268
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4268
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4268
  %bf.load3 = load i64, i64* %8, align 8, !dbg !4268
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4268
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4268
  %idxprom = sext i32 %bf.cast5 to i64, !dbg !4268
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4268
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !4268
  %cmp7 = icmp eq i32 %9, 3, !dbg !4268
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !4266

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4269
  br label %cond.end, !dbg !4266

cond.false:                                       ; preds = %land.lhs.true, %do.end
  br label %cond.end, !dbg !4266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %10, %cond.true ], [ null, %cond.false ], !dbg !4266
  ret %union.tree_node* %cond, !dbg !4270
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @adjust_offset_for_component_ref(%union.tree_node* %x, %struct.rtx_def* %offset) #0 !dbg !4271 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %struct.rtx_def*, align 8
  %ioffset = alloca i64, align 8
  %offset1 = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  store %struct.rtx_def* %offset, %struct.rtx_def** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  call void @llvm.dbg.declare(metadata i64* %ioffset, metadata !4278, metadata !DIExpression()), !dbg !4279
  %0 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !4280
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !4280
  br i1 %tobool, label %if.end, label %if.then, !dbg !4282

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4283
  br label %return, !dbg !4283

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %offset.addr, align 8, !dbg !4284
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !4284
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !4284
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4284
  %2 = load i64, i64* %arrayidx, align 8, !dbg !4284
  store i64 %2, i64* %ioffset, align 8, !dbg !4285
  br label %do.body, !dbg !4286

do.body:                                          ; preds = %land.end, %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset1, metadata !4287, metadata !DIExpression()), !dbg !4289
  %3 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4290
  %call = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %3), !dbg !4291
  store %union.tree_node* %call, %union.tree_node** %offset1, align 8, !dbg !4289
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4292, metadata !DIExpression()), !dbg !4293
  %4 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4294
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !4294
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4294
  %arrayidx2 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4294
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx2, align 8, !dbg !4294
  store %union.tree_node* %5, %union.tree_node** %field, align 8, !dbg !4293
  %6 = load %union.tree_node*, %union.tree_node** %offset1, align 8, !dbg !4295
  %call3 = call i32 @host_integerp(%union.tree_node* %6, i32 1), !dbg !4297
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4297
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !4298

if.then5:                                         ; preds = %do.body
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4299
  br label %return, !dbg !4299

if.end6:                                          ; preds = %do.body
  %7 = load %union.tree_node*, %union.tree_node** %offset1, align 8, !dbg !4300
  %call7 = call i64 @tree_low_cst(%union.tree_node* %7, i32 1), !dbg !4301
  %8 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4302
  %field_decl = bitcast %union.tree_node* %8 to %struct.tree_field_decl*, !dbg !4302
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 4, !dbg !4302
  %9 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !4302
  %call8 = call i64 @tree_low_cst(%union.tree_node* %9, i32 1), !dbg !4303
  %div = sdiv i64 %call8, 8, !dbg !4304
  %add = add nsw i64 %call7, %div, !dbg !4305
  %10 = load i64, i64* %ioffset, align 8, !dbg !4306
  %add9 = add nsw i64 %10, %add, !dbg !4306
  store i64 %add9, i64* %ioffset, align 8, !dbg !4306
  %11 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4307
  %exp10 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !4307
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !4307
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !4307
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !4307
  store %union.tree_node* %12, %union.tree_node** %x.addr, align 8, !dbg !4308
  br label %do.cond, !dbg !4309

do.cond:                                          ; preds = %if.end6
  %13 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4310
  %tobool13 = icmp ne %union.tree_node* %13, null, !dbg !4310
  br i1 %tobool13, label %land.rhs, label %land.end, !dbg !4311

land.rhs:                                         ; preds = %do.cond
  %14 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4312
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4312
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !4312
  %bf.load = load i64, i64* %15, align 8, !dbg !4312
  %bf.clear = and i64 %bf.load, 65535, !dbg !4312
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4312
  %cmp = icmp eq i32 %bf.cast, 41, !dbg !4313
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %16 = phi i1 [ false, %do.cond ], [ %cmp, %land.rhs ], !dbg !4314
  br i1 %16, label %do.body, label %do.end, !dbg !4309, !llvm.loop !4315

do.end:                                           ; preds = %land.end
  %17 = load i64, i64* %ioffset, align 8, !dbg !4317
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %17), !dbg !4317
  store %struct.rtx_def* %call14, %struct.rtx_def** %retval, align 8, !dbg !4318
  br label %return, !dbg !4318

return:                                           ; preds = %do.end, %if.then5, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4319
  ret %struct.rtx_def* %18, !dbg !4319
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @true_dependence(%struct.rtx_def* %mem, i32 %mem_mode, %struct.rtx_def* %x, i8 (%struct.rtx_def*, i8)* %varies) #0 !dbg !4320 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def*, align 8
  %mem_mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %varies.addr = alloca i8 (%struct.rtx_def*, i8)*, align 8
  %x_addr = alloca %struct.rtx_def*, align 8
  %mem_addr = alloca %struct.rtx_def*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %ret = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !4326, metadata !DIExpression()), !dbg !4327
  store i32 %mem_mode, i32* %mem_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mem_mode.addr, metadata !4328, metadata !DIExpression()), !dbg !4329
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4330, metadata !DIExpression()), !dbg !4331
  store i8 (%struct.rtx_def*, i8)* %varies, i8 (%struct.rtx_def*, i8)** %varies.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.rtx_def*, i8)** %varies.addr, metadata !4332, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x_addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem_addr, metadata !4336, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %base, metadata !4338, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4340, metadata !DIExpression()), !dbg !4341
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4342
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4342
  %bf.load = load i32, i32* %1, align 8, !dbg !4342
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !4342
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4342
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !4342
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4344

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4345
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4345
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4345
  %bf.lshr2 = lshr i32 %bf.load1, 27, !dbg !4345
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !4345
  %tobool4 = icmp ne i32 %bf.clear3, 0, !dbg !4345
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4346

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4347
  br label %return, !dbg !4347

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4348
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4348
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4348
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !4348
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !4348
  %cmp = icmp eq i32 %bf.clear7, 1, !dbg !4350
  br i1 %cmp, label %land.lhs.true8, label %if.end13, !dbg !4351

land.lhs.true8:                                   ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4352
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4352
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4352
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4352
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4352
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4352
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4352
  %bf.load9 = load i32, i32* %8, align 8, !dbg !4352
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4352
  %cmp11 = icmp eq i32 %bf.clear10, 38, !dbg !4353
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !4354

if.then12:                                        ; preds = %land.lhs.true8
  store i32 1, i32* %retval, align 4, !dbg !4355
  br label %return, !dbg !4355

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4356
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4356
  %bf.load14 = load i32, i32* %10, align 8, !dbg !4356
  %bf.lshr15 = lshr i32 %bf.load14, 16, !dbg !4356
  %bf.clear16 = and i32 %bf.lshr15, 255, !dbg !4356
  %cmp17 = icmp eq i32 %bf.clear16, 1, !dbg !4358
  br i1 %cmp17, label %land.lhs.true18, label %if.end27, !dbg !4359

land.lhs.true18:                                  ; preds = %if.end13
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4360
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4360
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4360
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !4360
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4360
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4360
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4360
  %bf.load23 = load i32, i32* %13, align 8, !dbg !4360
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !4360
  %cmp25 = icmp eq i32 %bf.clear24, 38, !dbg !4361
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !4362

if.then26:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %retval, align 4, !dbg !4363
  br label %return, !dbg !4363

if.end27:                                         ; preds = %land.lhs.true18, %if.end13
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4364
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4364
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4364
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !4364
  %rt_mem = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !4364
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4364
  %cmp31 = icmp eq %struct.mem_attrs* %15, null, !dbg !4364
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !4364

cond.true:                                        ; preds = %if.end27
  br label %cond.end, !dbg !4364

cond.false:                                       ; preds = %if.end27
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4364
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4364
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4364
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !4364
  %rt_mem35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.mem_attrs**, !dbg !4364
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem35, align 8, !dbg !4364
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %17, i32 0, i32 3, !dbg !4364
  %18 = load i32, i32* %alias, align 8, !dbg !4364
  br label %cond.end, !dbg !4364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %18, %cond.false ], !dbg !4364
  %cmp36 = icmp eq i32 %cond, -1, !dbg !4366
  br i1 %cmp36, label %if.then52, label %lor.lhs.false, !dbg !4367

lor.lhs.false:                                    ; preds = %cond.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4368
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4368
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !4368
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !4368
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !4368
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !4368
  %cmp41 = icmp eq %struct.mem_attrs* %20, null, !dbg !4368
  br i1 %cmp41, label %cond.true42, label %cond.false43, !dbg !4368

cond.true42:                                      ; preds = %lor.lhs.false
  br label %cond.end49, !dbg !4368

cond.false43:                                     ; preds = %lor.lhs.false
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4368
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4368
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !4368
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !4368
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !4368
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !4368
  %alias48 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 3, !dbg !4368
  %23 = load i32, i32* %alias48, align 8, !dbg !4368
  br label %cond.end49, !dbg !4368

cond.end49:                                       ; preds = %cond.false43, %cond.true42
  %cond50 = phi i32 [ 0, %cond.true42 ], [ %23, %cond.false43 ], !dbg !4368
  %cmp51 = icmp eq i32 %cond50, -1, !dbg !4369
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !4370

if.then52:                                        ; preds = %cond.end49, %cond.end
  store i32 1, i32* %retval, align 4, !dbg !4371
  br label %return, !dbg !4371

if.end53:                                         ; preds = %cond.end49
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4372
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4372
  %bf.load54 = load i32, i32* %25, align 8, !dbg !4372
  %bf.lshr55 = lshr i32 %bf.load54, 26, !dbg !4372
  %bf.clear56 = and i32 %bf.lshr55, 1, !dbg !4372
  %tobool57 = icmp ne i32 %bf.clear56, 0, !dbg !4372
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !4374

if.then58:                                        ; preds = %if.end53
  store i32 0, i32* %retval, align 4, !dbg !4375
  br label %return, !dbg !4375

if.end59:                                         ; preds = %if.end53
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4376
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !4376
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !4376
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !4376
  %rt_mem63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.mem_attrs**, !dbg !4376
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem63, align 8, !dbg !4376
  %cmp64 = icmp eq %struct.mem_attrs* %27, null, !dbg !4376
  br i1 %cmp64, label %cond.true65, label %cond.false66, !dbg !4376

cond.true65:                                      ; preds = %if.end59
  br label %cond.end71, !dbg !4376

cond.false66:                                     ; preds = %if.end59
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4376
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4376
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !4376
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 1, !dbg !4376
  %rt_mem70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.mem_attrs**, !dbg !4376
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem70, align 8, !dbg !4376
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !4376
  %30 = load i8, i8* %addrspace, align 8, !dbg !4376
  %conv = zext i8 %30 to i32, !dbg !4376
  br label %cond.end71, !dbg !4376

cond.end71:                                       ; preds = %cond.false66, %cond.true65
  %cond72 = phi i32 [ 0, %cond.true65 ], [ %conv, %cond.false66 ], !dbg !4376
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4378
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !4378
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !4378
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !4378
  %rt_mem76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.mem_attrs**, !dbg !4378
  %32 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem76, align 8, !dbg !4378
  %cmp77 = icmp eq %struct.mem_attrs* %32, null, !dbg !4378
  br i1 %cmp77, label %cond.true79, label %cond.false80, !dbg !4378

cond.true79:                                      ; preds = %cond.end71
  br label %cond.end87, !dbg !4378

cond.false80:                                     ; preds = %cond.end71
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4378
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4378
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !4378
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 1, !dbg !4378
  %rt_mem84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.mem_attrs**, !dbg !4378
  %34 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem84, align 8, !dbg !4378
  %addrspace85 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %34, i32 0, i32 5, !dbg !4378
  %35 = load i8, i8* %addrspace85, align 8, !dbg !4378
  %conv86 = zext i8 %35 to i32, !dbg !4378
  br label %cond.end87, !dbg !4378

cond.end87:                                       ; preds = %cond.false80, %cond.true79
  %cond88 = phi i32 [ 0, %cond.true79 ], [ %conv86, %cond.false80 ], !dbg !4378
  %cmp89 = icmp ne i32 %cond72, %cond88, !dbg !4379
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !4380

if.then91:                                        ; preds = %cond.end87
  store i32 1, i32* %retval, align 4, !dbg !4381
  br label %return, !dbg !4381

if.end92:                                         ; preds = %cond.end87
  %36 = load i32, i32* %mem_mode.addr, align 4, !dbg !4382
  %cmp93 = icmp eq i32 %36, 0, !dbg !4384
  br i1 %cmp93, label %if.then95, label %if.end99, !dbg !4385

if.then95:                                        ; preds = %if.end92
  %37 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4386
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4386
  %bf.load96 = load i32, i32* %38, align 8, !dbg !4386
  %bf.lshr97 = lshr i32 %bf.load96, 16, !dbg !4386
  %bf.clear98 = and i32 %bf.lshr97, 255, !dbg !4386
  store i32 %bf.clear98, i32* %mem_mode.addr, align 4, !dbg !4387
  br label %if.end99, !dbg !4388

if.end99:                                         ; preds = %if.then95, %if.end92
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4389
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4389
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !4389
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 0, !dbg !4389
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !4389
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !4389
  %call = call %struct.rtx_def* @get_addr(%struct.rtx_def* %40), !dbg !4390
  store %struct.rtx_def* %call, %struct.rtx_def** %x_addr, align 8, !dbg !4391
  %41 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4392
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4392
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !4392
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 0, !dbg !4392
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !4392
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !4392
  %call108 = call %struct.rtx_def* @get_addr(%struct.rtx_def* %42), !dbg !4393
  store %struct.rtx_def* %call108, %struct.rtx_def** %mem_addr, align 8, !dbg !4394
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !4395
  %call109 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %43), !dbg !4396
  store %struct.rtx_def* %call109, %struct.rtx_def** %base, align 8, !dbg !4397
  %44 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !4398
  %tobool110 = icmp ne %struct.rtx_def* %44, null, !dbg !4398
  br i1 %tobool110, label %land.lhs.true111, label %if.end127, !dbg !4400

land.lhs.true111:                                 ; preds = %if.end99
  %45 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !4401
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !4401
  %bf.load112 = load i32, i32* %46, align 8, !dbg !4401
  %bf.clear113 = and i32 %bf.load112, 65535, !dbg !4401
  %cmp114 = icmp eq i32 %bf.clear113, 44, !dbg !4402
  br i1 %cmp114, label %if.then126, label %lor.lhs.false116, !dbg !4403

lor.lhs.false116:                                 ; preds = %land.lhs.true111
  %47 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !4404
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !4404
  %bf.load117 = load i32, i32* %48, align 8, !dbg !4404
  %bf.clear118 = and i32 %bf.load117, 65535, !dbg !4404
  %cmp119 = icmp eq i32 %bf.clear118, 45, !dbg !4405
  br i1 %cmp119, label %land.lhs.true121, label %if.end127, !dbg !4406

land.lhs.true121:                                 ; preds = %lor.lhs.false116
  %49 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !4407
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4407
  %bf.load122 = load i32, i32* %50, align 8, !dbg !4407
  %bf.lshr123 = lshr i32 %bf.load122, 26, !dbg !4407
  %bf.clear124 = and i32 %bf.lshr123, 1, !dbg !4407
  %tobool125 = icmp ne i32 %bf.clear124, 0, !dbg !4407
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !4408

if.then126:                                       ; preds = %land.lhs.true121, %land.lhs.true111
  store i32 0, i32* %retval, align 4, !dbg !4409
  br label %return, !dbg !4409

if.end127:                                        ; preds = %land.lhs.true121, %lor.lhs.false116, %if.end99
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !4410
  %52 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !4412
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4413
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !4413
  %bf.load128 = load i32, i32* %54, align 8, !dbg !4413
  %bf.lshr129 = lshr i32 %bf.load128, 16, !dbg !4413
  %bf.clear130 = and i32 %bf.lshr129, 255, !dbg !4413
  %55 = load i32, i32* %mem_mode.addr, align 4, !dbg !4414
  %call131 = call i32 @base_alias_check(%struct.rtx_def* %51, %struct.rtx_def* %52, i32 %bf.clear130, i32 %55), !dbg !4415
  %tobool132 = icmp ne i32 %call131, 0, !dbg !4415
  br i1 %tobool132, label %if.end134, label %if.then133, !dbg !4416

if.then133:                                       ; preds = %if.end127
  store i32 0, i32* %retval, align 4, !dbg !4417
  br label %return, !dbg !4417

if.end134:                                        ; preds = %if.end127
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !4418
  %call135 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %56), !dbg !4419
  store %struct.rtx_def* %call135, %struct.rtx_def** %x_addr, align 8, !dbg !4420
  %57 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !4421
  %call136 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %57), !dbg !4422
  store %struct.rtx_def* %call136, %struct.rtx_def** %mem_addr, align 8, !dbg !4423
  %58 = load i32, i32* %mem_mode.addr, align 4, !dbg !4424
  %idxprom = zext i32 %58 to i64, !dbg !4424
  %arrayidx137 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4424
  %59 = load i8, i8* %arrayidx137, align 1, !dbg !4424
  %conv138 = zext i8 %59 to i16, !dbg !4424
  %conv139 = zext i16 %conv138 to i32, !dbg !4424
  %60 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !4426
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4427
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !4427
  %bf.load140 = load i32, i32* %62, align 8, !dbg !4427
  %bf.lshr141 = lshr i32 %bf.load140, 16, !dbg !4427
  %bf.clear142 = and i32 %bf.lshr141, 255, !dbg !4427
  %idxprom143 = zext i32 %bf.clear142 to i64, !dbg !4427
  %arrayidx144 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom143, !dbg !4427
  %63 = load i8, i8* %arrayidx144, align 1, !dbg !4427
  %conv145 = zext i8 %63 to i16, !dbg !4427
  %conv146 = zext i16 %conv145 to i32, !dbg !4427
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !4428
  %call147 = call i32 @memrefs_conflict_p(i32 %conv139, %struct.rtx_def* %60, i32 %conv146, %struct.rtx_def* %64, i64 0), !dbg !4429
  store i32 %call147, i32* %ret, align 4, !dbg !4430
  %cmp148 = icmp ne i32 %call147, -1, !dbg !4431
  br i1 %cmp148, label %if.then150, label %if.end151, !dbg !4432

if.then150:                                       ; preds = %if.end134
  %65 = load i32, i32* %ret, align 4, !dbg !4433
  store i32 %65, i32* %retval, align 4, !dbg !4434
  br label %return, !dbg !4434

if.end151:                                        ; preds = %if.end134
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4435
  %67 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4435
  %call152 = call i32 @mems_in_disjoint_alias_sets_p(%struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !4435
  %tobool153 = icmp ne i32 %call152, 0, !dbg !4435
  br i1 %tobool153, label %if.then154, label %if.end155, !dbg !4437

if.then154:                                       ; preds = %if.end151
  store i32 0, i32* %retval, align 4, !dbg !4438
  br label %return, !dbg !4438

if.end155:                                        ; preds = %if.end151
  %68 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4439
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4441
  %call156 = call i32 @nonoverlapping_memrefs_p(%struct.rtx_def* %68, %struct.rtx_def* %69), !dbg !4442
  %tobool157 = icmp ne i32 %call156, 0, !dbg !4442
  br i1 %tobool157, label %if.then158, label %if.end159, !dbg !4443

if.then158:                                       ; preds = %if.end155
  store i32 0, i32* %retval, align 4, !dbg !4444
  br label %return, !dbg !4444

if.end159:                                        ; preds = %if.end155
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4445
  %call160 = call i32 @aliases_everything_p(%struct.rtx_def* %70), !dbg !4447
  %tobool161 = icmp ne i32 %call160, 0, !dbg !4447
  br i1 %tobool161, label %if.then162, label %if.end163, !dbg !4448

if.then162:                                       ; preds = %if.end159
  store i32 1, i32* %retval, align 4, !dbg !4449
  br label %return, !dbg !4449

if.end163:                                        ; preds = %if.end159
  %71 = load i32, i32* %mem_mode.addr, align 4, !dbg !4450
  %cmp164 = icmp eq i32 %71, 14, !dbg !4452
  br i1 %cmp164, label %if.then171, label %lor.lhs.false166, !dbg !4453

lor.lhs.false166:                                 ; preds = %if.end163
  %72 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !4454
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !4454
  %bf.load167 = load i32, i32* %73, align 8, !dbg !4454
  %bf.clear168 = and i32 %bf.load167, 65535, !dbg !4454
  %cmp169 = icmp eq i32 %bf.clear168, 61, !dbg !4455
  br i1 %cmp169, label %if.then171, label %if.end172, !dbg !4456

if.then171:                                       ; preds = %lor.lhs.false166, %if.end163
  store i32 1, i32* %retval, align 4, !dbg !4457
  br label %return, !dbg !4457

if.end172:                                        ; preds = %lor.lhs.false166
  %74 = load i32, i32* %mem_mode.addr, align 4, !dbg !4458
  %cmp173 = icmp eq i32 %74, 1, !dbg !4460
  br i1 %cmp173, label %if.then181, label %lor.lhs.false175, !dbg !4461

lor.lhs.false175:                                 ; preds = %if.end172
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4462
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !4462
  %bf.load176 = load i32, i32* %76, align 8, !dbg !4462
  %bf.lshr177 = lshr i32 %bf.load176, 16, !dbg !4462
  %bf.clear178 = and i32 %bf.lshr177, 255, !dbg !4462
  %cmp179 = icmp eq i32 %bf.clear178, 1, !dbg !4463
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !4464

if.then181:                                       ; preds = %lor.lhs.false175, %if.end172
  store i32 1, i32* %retval, align 4, !dbg !4465
  br label %return, !dbg !4465

if.end182:                                        ; preds = %lor.lhs.false175
  %77 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4466
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4468
  %79 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !4469
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !4470
  %81 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies.addr, align 8, !dbg !4471
  %call183 = call %struct.rtx_def* @fixed_scalar_and_varying_struct_p(%struct.rtx_def* %77, %struct.rtx_def* %78, %struct.rtx_def* %79, %struct.rtx_def* %80, i8 (%struct.rtx_def*, i8)* %81), !dbg !4472
  %tobool184 = icmp ne %struct.rtx_def* %call183, null, !dbg !4472
  br i1 %tobool184, label %if.then185, label %if.end186, !dbg !4473

if.then185:                                       ; preds = %if.end182
  store i32 0, i32* %retval, align 4, !dbg !4474
  br label %return, !dbg !4474

if.end186:                                        ; preds = %if.end182
  %82 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4475
  %83 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !4476
  %call187 = call zeroext i8 @rtx_refs_may_alias_p(%struct.rtx_def* %82, %struct.rtx_def* %83, i8 zeroext 1), !dbg !4477
  %conv188 = zext i8 %call187 to i32, !dbg !4477
  store i32 %conv188, i32* %retval, align 4, !dbg !4478
  br label %return, !dbg !4478

return:                                           ; preds = %if.end186, %if.then185, %if.then181, %if.then171, %if.then162, %if.then158, %if.then154, %if.then150, %if.then133, %if.then126, %if.then91, %if.then58, %if.then52, %if.then26, %if.then12, %if.then
  %84 = load i32, i32* %retval, align 4, !dbg !4479
  ret i32 %84, !dbg !4479
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @base_alias_check(%struct.rtx_def* %x, %struct.rtx_def* %y, i32 %x_mode, i32 %y_mode) #0 !dbg !4480 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %x_mode.addr = alloca i32, align 4
  %y_mode.addr = alloca i32, align 4
  %x_base = alloca %struct.rtx_def*, align 8
  %y_base = alloca %struct.rtx_def*, align 8
  %x_c = alloca %struct.rtx_def*, align 8
  %y_c = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4483, metadata !DIExpression()), !dbg !4484
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !4485, metadata !DIExpression()), !dbg !4486
  store i32 %x_mode, i32* %x_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x_mode.addr, metadata !4487, metadata !DIExpression()), !dbg !4488
  store i32 %y_mode, i32* %y_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %y_mode.addr, metadata !4489, metadata !DIExpression()), !dbg !4490
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x_base, metadata !4491, metadata !DIExpression()), !dbg !4492
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4493
  %call = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %0), !dbg !4494
  store %struct.rtx_def* %call, %struct.rtx_def** %x_base, align 8, !dbg !4492
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y_base, metadata !4495, metadata !DIExpression()), !dbg !4496
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4497
  %call1 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %1), !dbg !4498
  store %struct.rtx_def* %call1, %struct.rtx_def** %y_base, align 8, !dbg !4496
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4499
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !4501
  br i1 %cmp, label %if.then, label %if.end9, !dbg !4502

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x_c, metadata !4503, metadata !DIExpression()), !dbg !4505
  %3 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !4506
  %tobool = icmp ne i32 %3, 0, !dbg !4506
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !4508

lor.lhs.false:                                    ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4509
  %call2 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %4), !dbg !4510
  store %struct.rtx_def* %call2, %struct.rtx_def** %x_c, align 8, !dbg !4511
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4512
  %cmp3 = icmp eq %struct.rtx_def* %call2, %5, !dbg !4513
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !4514

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, i32* %retval, align 4, !dbg !4515
  br label %return, !dbg !4515

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x_c, align 8, !dbg !4516
  %call5 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %6), !dbg !4517
  store %struct.rtx_def* %call5, %struct.rtx_def** %x_base, align 8, !dbg !4518
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4519
  %cmp6 = icmp eq %struct.rtx_def* %7, null, !dbg !4521
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !4522

if.then7:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !4523
  br label %return, !dbg !4523

if.end8:                                          ; preds = %if.end
  br label %if.end9, !dbg !4524

if.end9:                                          ; preds = %if.end8, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4525
  %cmp10 = icmp eq %struct.rtx_def* %8, null, !dbg !4527
  br i1 %cmp10, label %if.then11, label %if.end22, !dbg !4528

if.then11:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y_c, metadata !4529, metadata !DIExpression()), !dbg !4531
  %9 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !4532
  %tobool12 = icmp ne i32 %9, 0, !dbg !4532
  br i1 %tobool12, label %lor.lhs.false13, label %if.then16, !dbg !4534

lor.lhs.false13:                                  ; preds = %if.then11
  %10 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4535
  %call14 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %10), !dbg !4536
  store %struct.rtx_def* %call14, %struct.rtx_def** %y_c, align 8, !dbg !4537
  %11 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4538
  %cmp15 = icmp eq %struct.rtx_def* %call14, %11, !dbg !4539
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !4540

if.then16:                                        ; preds = %lor.lhs.false13, %if.then11
  store i32 1, i32* %retval, align 4, !dbg !4541
  br label %return, !dbg !4541

if.end17:                                         ; preds = %lor.lhs.false13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %y_c, align 8, !dbg !4542
  %call18 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %12), !dbg !4543
  store %struct.rtx_def* %call18, %struct.rtx_def** %y_base, align 8, !dbg !4544
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4545
  %cmp19 = icmp eq %struct.rtx_def* %13, null, !dbg !4547
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4548

if.then20:                                        ; preds = %if.end17
  store i32 1, i32* %retval, align 4, !dbg !4549
  br label %return, !dbg !4549

if.end21:                                         ; preds = %if.end17
  br label %if.end22, !dbg !4550

if.end22:                                         ; preds = %if.end21, %if.end9
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4551
  %15 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4553
  %call23 = call i32 @rtx_equal_p(%struct.rtx_def* %14, %struct.rtx_def* %15), !dbg !4554
  %tobool24 = icmp ne i32 %call23, 0, !dbg !4554
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !4555

if.then25:                                        ; preds = %if.end22
  store i32 1, i32* %retval, align 4, !dbg !4556
  br label %return, !dbg !4556

if.end26:                                         ; preds = %if.end22
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4557
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4557
  %bf.load = load i32, i32* %17, align 8, !dbg !4557
  %bf.clear = and i32 %bf.load, 65535, !dbg !4557
  %cmp27 = icmp eq i32 %bf.clear, 61, !dbg !4559
  br i1 %cmp27, label %land.lhs.true, label %if.end32, !dbg !4560

land.lhs.true:                                    ; preds = %if.end26
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4561
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !4561
  %bf.load28 = load i32, i32* %19, align 8, !dbg !4561
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !4561
  %cmp30 = icmp eq i32 %bf.clear29, 61, !dbg !4562
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !4563

if.then31:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4564
  br label %return, !dbg !4564

if.end32:                                         ; preds = %land.lhs.true, %if.end26
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4565
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4565
  %bf.load33 = load i32, i32* %21, align 8, !dbg !4565
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !4565
  %cmp35 = icmp eq i32 %bf.clear34, 61, !dbg !4567
  br i1 %cmp35, label %land.lhs.true36, label %if.end65, !dbg !4568

land.lhs.true36:                                  ; preds = %if.end32
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4569
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4569
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4569
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4569
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4569
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4569
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4569
  %bf.load37 = load i32, i32* %24, align 8, !dbg !4569
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !4569
  %cmp39 = icmp eq i32 %bf.clear38, 30, !dbg !4569
  br i1 %cmp39, label %lor.lhs.false40, label %if.then64, !dbg !4570

lor.lhs.false40:                                  ; preds = %land.lhs.true36
  %25 = load i32, i32* %y_mode.addr, align 4, !dbg !4571
  %idxprom = zext i32 %25 to i64, !dbg !4571
  %arrayidx41 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom, !dbg !4571
  %26 = load i8, i8* %arrayidx41, align 1, !dbg !4571
  %conv = zext i8 %26 to i32, !dbg !4571
  %cmp42 = icmp eq i32 %conv, 0, !dbg !4571
  br i1 %cmp42, label %cond.true, label %cond.false, !dbg !4571

cond.true:                                        ; preds = %lor.lhs.false40
  %27 = load i32, i32* %y_mode.addr, align 4, !dbg !4571
  %idxprom44 = zext i32 %27 to i64, !dbg !4571
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom44, !dbg !4571
  %28 = load i8, i8* %arrayidx45, align 1, !dbg !4571
  %conv46 = zext i8 %28 to i16, !dbg !4571
  %conv47 = zext i16 %conv46 to i32, !dbg !4571
  br label %cond.end, !dbg !4571

cond.false:                                       ; preds = %lor.lhs.false40
  %29 = load i32, i32* %y_mode.addr, align 4, !dbg !4571
  %idxprom48 = zext i32 %29 to i64, !dbg !4571
  %arrayidx49 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom48, !dbg !4571
  %30 = load i8, i8* %arrayidx49, align 1, !dbg !4571
  %conv50 = zext i8 %30 to i32, !dbg !4571
  %idxprom51 = zext i32 %conv50 to i64, !dbg !4571
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom51, !dbg !4571
  %31 = load i8, i8* %arrayidx52, align 1, !dbg !4571
  %conv53 = zext i8 %31 to i16, !dbg !4571
  %conv54 = zext i16 %conv53 to i32, !dbg !4571
  br label %cond.end, !dbg !4571

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv47, %cond.true ], [ %conv54, %cond.false ], !dbg !4571
  %conv55 = sext i32 %cond to i64, !dbg !4572
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4573
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !4573
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !4573
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 1, !dbg !4573
  %rt_rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !4573
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx59, align 8, !dbg !4573
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4573
  %hwint = bitcast %union.u* %u60 to [1 x i64]*, !dbg !4573
  %arrayidx61 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4573
  %34 = load i64, i64* %arrayidx61, align 8, !dbg !4573
  %sub = sub nsw i64 0, %34, !dbg !4574
  %cmp62 = icmp slt i64 %conv55, %sub, !dbg !4575
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !4576

if.then64:                                        ; preds = %cond.end, %land.lhs.true36
  store i32 1, i32* %retval, align 4, !dbg !4577
  br label %return, !dbg !4577

if.end65:                                         ; preds = %cond.end, %if.end32
  %35 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4578
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4578
  %bf.load66 = load i32, i32* %36, align 8, !dbg !4578
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !4578
  %cmp68 = icmp eq i32 %bf.clear67, 61, !dbg !4580
  br i1 %cmp68, label %land.lhs.true70, label %if.end112, !dbg !4581

land.lhs.true70:                                  ; preds = %if.end65
  %37 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4582
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4582
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !4582
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !4582
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !4582
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !4582
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !4582
  %bf.load75 = load i32, i32* %39, align 8, !dbg !4582
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !4582
  %cmp77 = icmp eq i32 %bf.clear76, 30, !dbg !4582
  br i1 %cmp77, label %lor.lhs.false79, label %if.then111, !dbg !4583

lor.lhs.false79:                                  ; preds = %land.lhs.true70
  %40 = load i32, i32* %x_mode.addr, align 4, !dbg !4584
  %idxprom80 = zext i32 %40 to i64, !dbg !4584
  %arrayidx81 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom80, !dbg !4584
  %41 = load i8, i8* %arrayidx81, align 1, !dbg !4584
  %conv82 = zext i8 %41 to i32, !dbg !4584
  %cmp83 = icmp eq i32 %conv82, 0, !dbg !4584
  br i1 %cmp83, label %cond.true85, label %cond.false90, !dbg !4584

cond.true85:                                      ; preds = %lor.lhs.false79
  %42 = load i32, i32* %x_mode.addr, align 4, !dbg !4584
  %idxprom86 = zext i32 %42 to i64, !dbg !4584
  %arrayidx87 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom86, !dbg !4584
  %43 = load i8, i8* %arrayidx87, align 1, !dbg !4584
  %conv88 = zext i8 %43 to i16, !dbg !4584
  %conv89 = zext i16 %conv88 to i32, !dbg !4584
  br label %cond.end98, !dbg !4584

cond.false90:                                     ; preds = %lor.lhs.false79
  %44 = load i32, i32* %x_mode.addr, align 4, !dbg !4584
  %idxprom91 = zext i32 %44 to i64, !dbg !4584
  %arrayidx92 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom91, !dbg !4584
  %45 = load i8, i8* %arrayidx92, align 1, !dbg !4584
  %conv93 = zext i8 %45 to i32, !dbg !4584
  %idxprom94 = zext i32 %conv93 to i64, !dbg !4584
  %arrayidx95 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom94, !dbg !4584
  %46 = load i8, i8* %arrayidx95, align 1, !dbg !4584
  %conv96 = zext i8 %46 to i16, !dbg !4584
  %conv97 = zext i16 %conv96 to i32, !dbg !4584
  br label %cond.end98, !dbg !4584

cond.end98:                                       ; preds = %cond.false90, %cond.true85
  %cond99 = phi i32 [ %conv89, %cond.true85 ], [ %conv97, %cond.false90 ], !dbg !4584
  %conv100 = sext i32 %cond99 to i64, !dbg !4585
  %47 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4586
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !4586
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !4586
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 1, !dbg !4586
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !4586
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !4586
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !4586
  %hwint106 = bitcast %union.u* %u105 to [1 x i64]*, !dbg !4586
  %arrayidx107 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint106, i64 0, i64 0, !dbg !4586
  %49 = load i64, i64* %arrayidx107, align 8, !dbg !4586
  %sub108 = sub nsw i64 0, %49, !dbg !4587
  %cmp109 = icmp slt i64 %conv100, %sub108, !dbg !4588
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !4589

if.then111:                                       ; preds = %cond.end98, %land.lhs.true70
  store i32 1, i32* %retval, align 4, !dbg !4590
  br label %return, !dbg !4590

if.end112:                                        ; preds = %cond.end98, %if.end65
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4591
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !4591
  %bf.load113 = load i32, i32* %51, align 8, !dbg !4591
  %bf.clear114 = and i32 %bf.load113, 65535, !dbg !4591
  %cmp115 = icmp ne i32 %bf.clear114, 6, !dbg !4593
  br i1 %cmp115, label %land.lhs.true117, label %if.end123, !dbg !4594

land.lhs.true117:                                 ; preds = %if.end112
  %52 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4595
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !4595
  %bf.load118 = load i32, i32* %53, align 8, !dbg !4595
  %bf.clear119 = and i32 %bf.load118, 65535, !dbg !4595
  %cmp120 = icmp ne i32 %bf.clear119, 6, !dbg !4596
  br i1 %cmp120, label %if.then122, label %if.end123, !dbg !4597

if.then122:                                       ; preds = %land.lhs.true117
  store i32 0, i32* %retval, align 4, !dbg !4598
  br label %return, !dbg !4598

if.end123:                                        ; preds = %land.lhs.true117, %if.end112
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4599
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !4599
  %bf.load124 = load i32, i32* %55, align 8, !dbg !4599
  %bf.clear125 = and i32 %bf.load124, 65535, !dbg !4599
  %cmp126 = icmp eq i32 %bf.clear125, 6, !dbg !4601
  br i1 %cmp126, label %land.lhs.true128, label %lor.lhs.false133, !dbg !4602

land.lhs.true128:                                 ; preds = %if.end123
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4603
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !4603
  %bf.load129 = load i32, i32* %57, align 8, !dbg !4603
  %bf.lshr = lshr i32 %bf.load129, 16, !dbg !4603
  %bf.clear130 = and i32 %bf.lshr, 255, !dbg !4603
  %cmp131 = icmp eq i32 %bf.clear130, 16, !dbg !4604
  br i1 %cmp131, label %if.then144, label %lor.lhs.false133, !dbg !4605

lor.lhs.false133:                                 ; preds = %land.lhs.true128, %if.end123
  %58 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4606
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4606
  %bf.load134 = load i32, i32* %59, align 8, !dbg !4606
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !4606
  %cmp136 = icmp eq i32 %bf.clear135, 6, !dbg !4607
  br i1 %cmp136, label %land.lhs.true138, label %if.end145, !dbg !4608

land.lhs.true138:                                 ; preds = %lor.lhs.false133
  %60 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4609
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !4609
  %bf.load139 = load i32, i32* %61, align 8, !dbg !4609
  %bf.lshr140 = lshr i32 %bf.load139, 16, !dbg !4609
  %bf.clear141 = and i32 %bf.lshr140, 255, !dbg !4609
  %cmp142 = icmp eq i32 %bf.clear141, 16, !dbg !4610
  br i1 %cmp142, label %if.then144, label %if.end145, !dbg !4611

if.then144:                                       ; preds = %land.lhs.true138, %land.lhs.true128
  store i32 0, i32* %retval, align 4, !dbg !4612
  br label %return, !dbg !4612

if.end145:                                        ; preds = %land.lhs.true138, %lor.lhs.false133
  %62 = load i32, i32* @flag_argument_noalias, align 4, !dbg !4613
  %tobool146 = icmp ne i32 %62, 0, !dbg !4613
  br i1 %tobool146, label %if.end148, label %if.then147, !dbg !4615

if.then147:                                       ; preds = %if.end145
  store i32 1, i32* %retval, align 4, !dbg !4616
  br label %return, !dbg !4616

if.end148:                                        ; preds = %if.end145
  %63 = load i32, i32* @flag_argument_noalias, align 4, !dbg !4617
  %cmp149 = icmp sgt i32 %63, 1, !dbg !4619
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !4620

if.then151:                                       ; preds = %if.end148
  store i32 0, i32* %retval, align 4, !dbg !4621
  br label %return, !dbg !4621

if.end152:                                        ; preds = %if.end148
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x_base, align 8, !dbg !4622
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !4622
  %bf.load153 = load i32, i32* %65, align 8, !dbg !4622
  %bf.lshr154 = lshr i32 %bf.load153, 16, !dbg !4622
  %bf.clear155 = and i32 %bf.lshr154, 255, !dbg !4622
  %cmp156 = icmp eq i32 %bf.clear155, 0, !dbg !4623
  br i1 %cmp156, label %land.rhs, label %land.end, !dbg !4624

land.rhs:                                         ; preds = %if.end152
  %66 = load %struct.rtx_def*, %struct.rtx_def** %y_base, align 8, !dbg !4625
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !4625
  %bf.load158 = load i32, i32* %67, align 8, !dbg !4625
  %bf.lshr159 = lshr i32 %bf.load158, 16, !dbg !4625
  %bf.clear160 = and i32 %bf.lshr159, 255, !dbg !4625
  %cmp161 = icmp eq i32 %bf.clear160, 0, !dbg !4626
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end152
  %68 = phi i1 [ false, %if.end152 ], [ %cmp161, %land.rhs ], !dbg !4627
  %lnot = xor i1 %68, true, !dbg !4628
  %lnot.ext = zext i1 %lnot to i32, !dbg !4628
  store i32 %lnot.ext, i32* %retval, align 4, !dbg !4629
  br label %return, !dbg !4629

return:                                           ; preds = %land.end, %if.then151, %if.then147, %if.then144, %if.then122, %if.then111, %if.then64, %if.then31, %if.then25, %if.then20, %if.then16, %if.then7, %if.then4
  %69 = load i32, i32* %retval, align 4, !dbg !4630
  ret i32 %69, !dbg !4630
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memrefs_conflict_p(i32 %xsize, %struct.rtx_def* %x, i32 %ysize, %struct.rtx_def* %y, i64 %c) #0 !dbg !4631 {
entry:
  %retval = alloca i32, align 4
  %xsize.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %ysize.addr = alloca i32, align 4
  %y.addr = alloca %struct.rtx_def*, align 8
  %c.addr = alloca i64, align 8
  %x0 = alloca %struct.rtx_def*, align 8
  %x1 = alloca %struct.rtx_def*, align 8
  %y0 = alloca %struct.rtx_def*, align 8
  %y1 = alloca %struct.rtx_def*, align 8
  %y0155 = alloca %struct.rtx_def*, align 8
  %y1160 = alloca %struct.rtx_def*, align 8
  %x0187 = alloca %struct.rtx_def*, align 8
  %y0188 = alloca %struct.rtx_def*, align 8
  %x1189 = alloca %struct.rtx_def*, align 8
  %y1195 = alloca %struct.rtx_def*, align 8
  store i32 %xsize, i32* %xsize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %xsize.addr, metadata !4634, metadata !DIExpression()), !dbg !4635
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4636, metadata !DIExpression()), !dbg !4637
  store i32 %ysize, i32* %ysize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ysize.addr, metadata !4638, metadata !DIExpression()), !dbg !4639
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !4640, metadata !DIExpression()), !dbg !4641
  store i64 %c, i64* %c.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %c.addr, metadata !4642, metadata !DIExpression()), !dbg !4643
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4644
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4644
  %bf.load = load i32, i32* %1, align 8, !dbg !4644
  %bf.clear = and i32 %bf.load, 65535, !dbg !4644
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !4646
  br i1 %cmp, label %if.then, label %if.end, !dbg !4647

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4648
  %call = call %struct.rtx_def* @get_addr(%struct.rtx_def* %2), !dbg !4649
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8, !dbg !4650
  br label %if.end, !dbg !4651

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4652
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4652
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4652
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4652
  %cmp3 = icmp eq i32 %bf.clear2, 1, !dbg !4654
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !4655

if.then4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4656
  %call5 = call %struct.rtx_def* @get_addr(%struct.rtx_def* %5), !dbg !4657
  store %struct.rtx_def* %call5, %struct.rtx_def** %y.addr, align 8, !dbg !4658
  br label %if.end6, !dbg !4659

if.end6:                                          ; preds = %if.then4, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4660
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4660
  %bf.load7 = load i32, i32* %7, align 8, !dbg !4660
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !4660
  %cmp9 = icmp eq i32 %bf.clear8, 121, !dbg !4662
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !4663

if.then10:                                        ; preds = %if.end6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4664
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4664
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4664
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4664
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4664
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4664
  store %struct.rtx_def* %9, %struct.rtx_def** %x.addr, align 8, !dbg !4665
  br label %if.end22, !dbg !4666

if.else:                                          ; preds = %if.end6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4667
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4667
  %bf.load11 = load i32, i32* %11, align 8, !dbg !4667
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !4667
  %cmp13 = icmp eq i32 %bf.clear12, 122, !dbg !4669
  br i1 %cmp13, label %if.then14, label %if.else19, !dbg !4670

if.then14:                                        ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4671
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4671
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !4671
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !4671
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !4671
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !4671
  store %struct.rtx_def* %13, %struct.rtx_def** %x.addr, align 8, !dbg !4672
  br label %if.end21, !dbg !4673

if.else19:                                        ; preds = %if.else
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4674
  %15 = load i32, i32* %xsize.addr, align 4, !dbg !4675
  %call20 = call %struct.rtx_def* @addr_side_effect_eval(%struct.rtx_def* %14, i32 %15, i32 0), !dbg !4676
  store %struct.rtx_def* %call20, %struct.rtx_def** %x.addr, align 8, !dbg !4677
  br label %if.end21

if.end21:                                         ; preds = %if.else19, %if.then14
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then10
  %16 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4678
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4678
  %bf.load23 = load i32, i32* %17, align 8, !dbg !4678
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !4678
  %cmp25 = icmp eq i32 %bf.clear24, 121, !dbg !4680
  br i1 %cmp25, label %if.then26, label %if.else31, !dbg !4681

if.then26:                                        ; preds = %if.end22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4682
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4682
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4682
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4682
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4682
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4682
  store %struct.rtx_def* %19, %struct.rtx_def** %y.addr, align 8, !dbg !4683
  br label %if.end43, !dbg !4684

if.else31:                                        ; preds = %if.end22
  %20 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4685
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4685
  %bf.load32 = load i32, i32* %21, align 8, !dbg !4685
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !4685
  %cmp34 = icmp eq i32 %bf.clear33, 122, !dbg !4687
  br i1 %cmp34, label %if.then35, label %if.else40, !dbg !4688

if.then35:                                        ; preds = %if.else31
  %22 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4689
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4689
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !4689
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !4689
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !4689
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !4689
  store %struct.rtx_def* %23, %struct.rtx_def** %y.addr, align 8, !dbg !4690
  br label %if.end42, !dbg !4691

if.else40:                                        ; preds = %if.else31
  %24 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4692
  %25 = load i32, i32* %ysize.addr, align 4, !dbg !4693
  %call41 = call %struct.rtx_def* @addr_side_effect_eval(%struct.rtx_def* %24, i32 %25, i32 0), !dbg !4694
  store %struct.rtx_def* %call41, %struct.rtx_def** %y.addr, align 8, !dbg !4695
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then26
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4696
  %27 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4698
  %call44 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !4699
  %tobool = icmp ne i32 %call44, 0, !dbg !4699
  br i1 %tobool, label %if.then45, label %if.end63, !dbg !4700

if.then45:                                        ; preds = %if.end43
  %28 = load i32, i32* %xsize.addr, align 4, !dbg !4701
  %cmp46 = icmp sle i32 %28, 0, !dbg !4704
  br i1 %cmp46, label %if.then48, label %lor.lhs.false, !dbg !4705

lor.lhs.false:                                    ; preds = %if.then45
  %29 = load i32, i32* %ysize.addr, align 4, !dbg !4706
  %cmp47 = icmp sle i32 %29, 0, !dbg !4707
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !4708

if.then48:                                        ; preds = %lor.lhs.false, %if.then45
  store i32 1, i32* %retval, align 4, !dbg !4709
  br label %return, !dbg !4709

if.end49:                                         ; preds = %lor.lhs.false
  %30 = load i64, i64* %c.addr, align 8, !dbg !4710
  %cmp50 = icmp sge i64 %30, 0, !dbg !4712
  br i1 %cmp50, label %land.lhs.true, label %if.end54, !dbg !4713

land.lhs.true:                                    ; preds = %if.end49
  %31 = load i32, i32* %xsize.addr, align 4, !dbg !4714
  %conv = sext i32 %31 to i64, !dbg !4714
  %32 = load i64, i64* %c.addr, align 8, !dbg !4715
  %cmp51 = icmp sgt i64 %conv, %32, !dbg !4716
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !4717

if.then53:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4718
  br label %return, !dbg !4718

if.end54:                                         ; preds = %land.lhs.true, %if.end49
  %33 = load i64, i64* %c.addr, align 8, !dbg !4719
  %cmp55 = icmp slt i64 %33, 0, !dbg !4721
  br i1 %cmp55, label %land.lhs.true57, label %if.end62, !dbg !4722

land.lhs.true57:                                  ; preds = %if.end54
  %34 = load i32, i32* %ysize.addr, align 4, !dbg !4723
  %conv58 = sext i32 %34 to i64, !dbg !4723
  %35 = load i64, i64* %c.addr, align 8, !dbg !4724
  %add = add nsw i64 %conv58, %35, !dbg !4725
  %cmp59 = icmp sgt i64 %add, 0, !dbg !4726
  br i1 %cmp59, label %if.then61, label %if.end62, !dbg !4727

if.then61:                                        ; preds = %land.lhs.true57
  store i32 1, i32* %retval, align 4, !dbg !4728
  br label %return, !dbg !4728

if.end62:                                         ; preds = %land.lhs.true57, %if.end54
  store i32 0, i32* %retval, align 4, !dbg !4729
  br label %return, !dbg !4729

if.end63:                                         ; preds = %if.end43
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4730
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !4730
  %bf.load64 = load i32, i32* %37, align 8, !dbg !4730
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !4730
  %cmp66 = icmp eq i32 %bf.clear65, 49, !dbg !4732
  br i1 %cmp66, label %if.then68, label %if.else149, !dbg !4733

if.then68:                                        ; preds = %if.end63
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x0, metadata !4734, metadata !DIExpression()), !dbg !4736
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4737
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4737
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !4737
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 0, !dbg !4737
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !4737
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !4737
  store %struct.rtx_def* %39, %struct.rtx_def** %x0, align 8, !dbg !4736
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x1, metadata !4738, metadata !DIExpression()), !dbg !4739
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4740
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !4740
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !4740
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !4740
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !4740
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !4740
  store %struct.rtx_def* %41, %struct.rtx_def** %x1, align 8, !dbg !4739
  %42 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4741
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !4741
  %bf.load77 = load i32, i32* %43, align 8, !dbg !4741
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !4741
  %cmp79 = icmp eq i32 %bf.clear78, 49, !dbg !4743
  br i1 %cmp79, label %if.then81, label %if.else136, !dbg !4744

if.then81:                                        ; preds = %if.then68
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y0, metadata !4745, metadata !DIExpression()), !dbg !4747
  %44 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4748
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !4748
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !4748
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 0, !dbg !4748
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !4748
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !4748
  store %struct.rtx_def* %45, %struct.rtx_def** %y0, align 8, !dbg !4747
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y1, metadata !4749, metadata !DIExpression()), !dbg !4750
  %46 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4751
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !4751
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !4751
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 1, !dbg !4751
  %rt_rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**, !dbg !4751
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx89, align 8, !dbg !4751
  store %struct.rtx_def* %47, %struct.rtx_def** %y1, align 8, !dbg !4750
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4752
  %49 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4754
  %call90 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !4755
  %tobool91 = icmp ne i32 %call90, 0, !dbg !4755
  br i1 %tobool91, label %if.then92, label %if.end94, !dbg !4756

if.then92:                                        ; preds = %if.then81
  %50 = load i32, i32* %xsize.addr, align 4, !dbg !4757
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !4758
  %52 = load i32, i32* %ysize.addr, align 4, !dbg !4759
  %53 = load %struct.rtx_def*, %struct.rtx_def** %y0, align 8, !dbg !4760
  %54 = load i64, i64* %c.addr, align 8, !dbg !4761
  %call93 = call i32 @memrefs_conflict_p(i32 %50, %struct.rtx_def* %51, i32 %52, %struct.rtx_def* %53, i64 %54), !dbg !4762
  store i32 %call93, i32* %retval, align 4, !dbg !4763
  br label %return, !dbg !4763

if.end94:                                         ; preds = %if.then81
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !4764
  %56 = load %struct.rtx_def*, %struct.rtx_def** %y0, align 8, !dbg !4766
  %call95 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %55, %struct.rtx_def* %56), !dbg !4767
  %tobool96 = icmp ne i32 %call95, 0, !dbg !4767
  br i1 %tobool96, label %if.then97, label %if.end99, !dbg !4768

if.then97:                                        ; preds = %if.end94
  %57 = load i32, i32* %xsize.addr, align 4, !dbg !4769
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4770
  %59 = load i32, i32* %ysize.addr, align 4, !dbg !4771
  %60 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4772
  %61 = load i64, i64* %c.addr, align 8, !dbg !4773
  %call98 = call i32 @memrefs_conflict_p(i32 %57, %struct.rtx_def* %58, i32 %59, %struct.rtx_def* %60, i64 %61), !dbg !4774
  store i32 %call98, i32* %retval, align 4, !dbg !4775
  br label %return, !dbg !4775

if.end99:                                         ; preds = %if.end94
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4776
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !4776
  %bf.load100 = load i32, i32* %63, align 8, !dbg !4776
  %bf.clear101 = and i32 %bf.load100, 65535, !dbg !4776
  %cmp102 = icmp eq i32 %bf.clear101, 30, !dbg !4776
  br i1 %cmp102, label %if.then104, label %if.else123, !dbg !4778

if.then104:                                       ; preds = %if.end99
  %64 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4779
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !4779
  %bf.load105 = load i32, i32* %65, align 8, !dbg !4779
  %bf.clear106 = and i32 %bf.load105, 65535, !dbg !4779
  %cmp107 = icmp eq i32 %bf.clear106, 30, !dbg !4779
  br i1 %cmp107, label %if.then109, label %if.else117, !dbg !4782

if.then109:                                       ; preds = %if.then104
  %66 = load i32, i32* %xsize.addr, align 4, !dbg !4783
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !4784
  %68 = load i32, i32* %ysize.addr, align 4, !dbg !4785
  %69 = load %struct.rtx_def*, %struct.rtx_def** %y0, align 8, !dbg !4786
  %70 = load i64, i64* %c.addr, align 8, !dbg !4787
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4788
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !4788
  %hwint = bitcast %union.u* %u110 to [1 x i64]*, !dbg !4788
  %arrayidx111 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4788
  %72 = load i64, i64* %arrayidx111, align 8, !dbg !4788
  %sub = sub nsw i64 %70, %72, !dbg !4789
  %73 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4790
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !4790
  %hwint113 = bitcast %union.u* %u112 to [1 x i64]*, !dbg !4790
  %arrayidx114 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint113, i64 0, i64 0, !dbg !4790
  %74 = load i64, i64* %arrayidx114, align 8, !dbg !4790
  %add115 = add nsw i64 %sub, %74, !dbg !4791
  %call116 = call i32 @memrefs_conflict_p(i32 %66, %struct.rtx_def* %67, i32 %68, %struct.rtx_def* %69, i64 %add115), !dbg !4792
  store i32 %call116, i32* %retval, align 4, !dbg !4793
  br label %return, !dbg !4793

if.else117:                                       ; preds = %if.then104
  %75 = load i32, i32* %xsize.addr, align 4, !dbg !4794
  %76 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !4795
  %77 = load i32, i32* %ysize.addr, align 4, !dbg !4796
  %78 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4797
  %79 = load i64, i64* %c.addr, align 8, !dbg !4798
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4799
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !4799
  %hwint119 = bitcast %union.u* %u118 to [1 x i64]*, !dbg !4799
  %arrayidx120 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint119, i64 0, i64 0, !dbg !4799
  %81 = load i64, i64* %arrayidx120, align 8, !dbg !4799
  %sub121 = sub nsw i64 %79, %81, !dbg !4800
  %call122 = call i32 @memrefs_conflict_p(i32 %75, %struct.rtx_def* %76, i32 %77, %struct.rtx_def* %78, i64 %sub121), !dbg !4801
  store i32 %call122, i32* %retval, align 4, !dbg !4802
  br label %return, !dbg !4802

if.else123:                                       ; preds = %if.end99
  %82 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4803
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !4803
  %bf.load124 = load i32, i32* %83, align 8, !dbg !4803
  %bf.clear125 = and i32 %bf.load124, 65535, !dbg !4803
  %cmp126 = icmp eq i32 %bf.clear125, 30, !dbg !4803
  br i1 %cmp126, label %if.then128, label %if.end134, !dbg !4805

if.then128:                                       ; preds = %if.else123
  %84 = load i32, i32* %xsize.addr, align 4, !dbg !4806
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4807
  %86 = load i32, i32* %ysize.addr, align 4, !dbg !4808
  %87 = load %struct.rtx_def*, %struct.rtx_def** %y0, align 8, !dbg !4809
  %88 = load i64, i64* %c.addr, align 8, !dbg !4810
  %89 = load %struct.rtx_def*, %struct.rtx_def** %y1, align 8, !dbg !4811
  %u129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !4811
  %hwint130 = bitcast %union.u* %u129 to [1 x i64]*, !dbg !4811
  %arrayidx131 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint130, i64 0, i64 0, !dbg !4811
  %90 = load i64, i64* %arrayidx131, align 8, !dbg !4811
  %add132 = add nsw i64 %88, %90, !dbg !4812
  %call133 = call i32 @memrefs_conflict_p(i32 %84, %struct.rtx_def* %85, i32 %86, %struct.rtx_def* %87, i64 %add132), !dbg !4813
  store i32 %call133, i32* %retval, align 4, !dbg !4814
  br label %return, !dbg !4814

if.end134:                                        ; preds = %if.else123
  br label %if.end135

if.end135:                                        ; preds = %if.end134
  store i32 -1, i32* %retval, align 4, !dbg !4815
  br label %return, !dbg !4815

if.else136:                                       ; preds = %if.then68
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4816
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !4816
  %bf.load137 = load i32, i32* %92, align 8, !dbg !4816
  %bf.clear138 = and i32 %bf.load137, 65535, !dbg !4816
  %cmp139 = icmp eq i32 %bf.clear138, 30, !dbg !4816
  br i1 %cmp139, label %if.then141, label %if.end147, !dbg !4818

if.then141:                                       ; preds = %if.else136
  %93 = load i32, i32* %xsize.addr, align 4, !dbg !4819
  %94 = load %struct.rtx_def*, %struct.rtx_def** %x0, align 8, !dbg !4820
  %95 = load i32, i32* %ysize.addr, align 4, !dbg !4821
  %96 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4822
  %97 = load i64, i64* %c.addr, align 8, !dbg !4823
  %98 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !4824
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !4824
  %hwint143 = bitcast %union.u* %u142 to [1 x i64]*, !dbg !4824
  %arrayidx144 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint143, i64 0, i64 0, !dbg !4824
  %99 = load i64, i64* %arrayidx144, align 8, !dbg !4824
  %sub145 = sub nsw i64 %97, %99, !dbg !4825
  %call146 = call i32 @memrefs_conflict_p(i32 %93, %struct.rtx_def* %94, i32 %95, %struct.rtx_def* %96, i64 %sub145), !dbg !4826
  store i32 %call146, i32* %retval, align 4, !dbg !4827
  br label %return, !dbg !4827

if.end147:                                        ; preds = %if.else136
  br label %if.end148

if.end148:                                        ; preds = %if.end147
  br label %if.end177, !dbg !4828

if.else149:                                       ; preds = %if.end63
  %100 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4829
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !4829
  %bf.load150 = load i32, i32* %101, align 8, !dbg !4829
  %bf.clear151 = and i32 %bf.load150, 65535, !dbg !4829
  %cmp152 = icmp eq i32 %bf.clear151, 49, !dbg !4831
  br i1 %cmp152, label %if.then154, label %if.end176, !dbg !4832

if.then154:                                       ; preds = %if.else149
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y0155, metadata !4833, metadata !DIExpression()), !dbg !4835
  %102 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4836
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !4836
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !4836
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 0, !dbg !4836
  %rt_rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**, !dbg !4836
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx159, align 8, !dbg !4836
  store %struct.rtx_def* %103, %struct.rtx_def** %y0155, align 8, !dbg !4835
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y1160, metadata !4837, metadata !DIExpression()), !dbg !4838
  %104 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4839
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !4839
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !4839
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 1, !dbg !4839
  %rt_rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**, !dbg !4839
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx164, align 8, !dbg !4839
  store %struct.rtx_def* %105, %struct.rtx_def** %y1160, align 8, !dbg !4838
  %106 = load %struct.rtx_def*, %struct.rtx_def** %y1160, align 8, !dbg !4840
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !4840
  %bf.load165 = load i32, i32* %107, align 8, !dbg !4840
  %bf.clear166 = and i32 %bf.load165, 65535, !dbg !4840
  %cmp167 = icmp eq i32 %bf.clear166, 30, !dbg !4840
  br i1 %cmp167, label %if.then169, label %if.else175, !dbg !4842

if.then169:                                       ; preds = %if.then154
  %108 = load i32, i32* %xsize.addr, align 4, !dbg !4843
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4844
  %110 = load i32, i32* %ysize.addr, align 4, !dbg !4845
  %111 = load %struct.rtx_def*, %struct.rtx_def** %y0155, align 8, !dbg !4846
  %112 = load i64, i64* %c.addr, align 8, !dbg !4847
  %113 = load %struct.rtx_def*, %struct.rtx_def** %y1160, align 8, !dbg !4848
  %u170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !4848
  %hwint171 = bitcast %union.u* %u170 to [1 x i64]*, !dbg !4848
  %arrayidx172 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint171, i64 0, i64 0, !dbg !4848
  %114 = load i64, i64* %arrayidx172, align 8, !dbg !4848
  %add173 = add nsw i64 %112, %114, !dbg !4849
  %call174 = call i32 @memrefs_conflict_p(i32 %108, %struct.rtx_def* %109, i32 %110, %struct.rtx_def* %111, i64 %add173), !dbg !4850
  store i32 %call174, i32* %retval, align 4, !dbg !4851
  br label %return, !dbg !4851

if.else175:                                       ; preds = %if.then154
  store i32 -1, i32* %retval, align 4, !dbg !4852
  br label %return, !dbg !4852

if.end176:                                        ; preds = %if.else149
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.end148
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4853
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !4853
  %bf.load178 = load i32, i32* %116, align 8, !dbg !4853
  %bf.clear179 = and i32 %bf.load178, 65535, !dbg !4853
  %117 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4855
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !4855
  %bf.load180 = load i32, i32* %118, align 8, !dbg !4855
  %bf.clear181 = and i32 %bf.load180, 65535, !dbg !4855
  %cmp182 = icmp eq i32 %bf.clear179, %bf.clear181, !dbg !4856
  br i1 %cmp182, label %if.then184, label %if.end259, !dbg !4857

if.then184:                                       ; preds = %if.end177
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4858
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !4858
  %bf.load185 = load i32, i32* %120, align 8, !dbg !4858
  %bf.clear186 = and i32 %bf.load185, 65535, !dbg !4858
  switch i32 %bf.clear186, label %sw.default [
    i32 52, label %sw.bb
  ], !dbg !4859

sw.bb:                                            ; preds = %if.then184
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x0187, metadata !4860, metadata !DIExpression()), !dbg !4863
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y0188, metadata !4864, metadata !DIExpression()), !dbg !4865
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x1189, metadata !4866, metadata !DIExpression()), !dbg !4867
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4868
  %u190 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1, !dbg !4868
  %fld191 = bitcast %union.u* %u190 to [1 x %union.rtunion_def]*, !dbg !4868
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i64 0, i64 1, !dbg !4868
  %rt_rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**, !dbg !4868
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx193, align 8, !dbg !4868
  %call194 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %122), !dbg !4869
  store %struct.rtx_def* %call194, %struct.rtx_def** %x1189, align 8, !dbg !4867
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y1195, metadata !4870, metadata !DIExpression()), !dbg !4871
  %123 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4872
  %u196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !4872
  %fld197 = bitcast %union.u* %u196 to [1 x %union.rtunion_def]*, !dbg !4872
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i64 0, i64 1, !dbg !4872
  %rt_rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**, !dbg !4872
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx199, align 8, !dbg !4872
  %call200 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %124), !dbg !4873
  store %struct.rtx_def* %call200, %struct.rtx_def** %y1195, align 8, !dbg !4871
  %125 = load %struct.rtx_def*, %struct.rtx_def** %x1189, align 8, !dbg !4874
  %126 = load %struct.rtx_def*, %struct.rtx_def** %y1195, align 8, !dbg !4876
  %call201 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %125, %struct.rtx_def* %126), !dbg !4877
  %tobool202 = icmp ne i32 %call201, 0, !dbg !4877
  br i1 %tobool202, label %if.end204, label %if.then203, !dbg !4878

if.then203:                                       ; preds = %sw.bb
  store i32 -1, i32* %retval, align 4, !dbg !4879
  br label %return, !dbg !4879

if.end204:                                        ; preds = %sw.bb
  %127 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4880
  %u205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !4880
  %fld206 = bitcast %union.u* %u205 to [1 x %union.rtunion_def]*, !dbg !4880
  %arrayidx207 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld206, i64 0, i64 0, !dbg !4880
  %rt_rtx208 = bitcast %union.rtunion_def* %arrayidx207 to %struct.rtx_def**, !dbg !4880
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx208, align 8, !dbg !4880
  %call209 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %128), !dbg !4881
  store %struct.rtx_def* %call209, %struct.rtx_def** %x0187, align 8, !dbg !4882
  %129 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4883
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1, !dbg !4883
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !4883
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 0, !dbg !4883
  %rt_rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**, !dbg !4883
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx213, align 8, !dbg !4883
  %call214 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %130), !dbg !4884
  store %struct.rtx_def* %call214, %struct.rtx_def** %y0188, align 8, !dbg !4885
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x0187, align 8, !dbg !4886
  %132 = load %struct.rtx_def*, %struct.rtx_def** %y0188, align 8, !dbg !4888
  %call215 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %131, %struct.rtx_def* %132), !dbg !4889
  %tobool216 = icmp ne i32 %call215, 0, !dbg !4889
  br i1 %tobool216, label %if.then217, label %if.end236, !dbg !4890

if.then217:                                       ; preds = %if.end204
  %133 = load i32, i32* %xsize.addr, align 4, !dbg !4891
  %cmp218 = icmp eq i32 %133, 0, !dbg !4892
  br i1 %cmp218, label %lor.end, label %lor.lhs.false220, !dbg !4893

lor.lhs.false220:                                 ; preds = %if.then217
  %134 = load i32, i32* %ysize.addr, align 4, !dbg !4894
  %cmp221 = icmp eq i32 %134, 0, !dbg !4895
  br i1 %cmp221, label %lor.end, label %lor.lhs.false223, !dbg !4896

lor.lhs.false223:                                 ; preds = %lor.lhs.false220
  %135 = load i64, i64* %c.addr, align 8, !dbg !4897
  %cmp224 = icmp sge i64 %135, 0, !dbg !4898
  br i1 %cmp224, label %land.lhs.true226, label %lor.rhs, !dbg !4899

land.lhs.true226:                                 ; preds = %lor.lhs.false223
  %136 = load i32, i32* %xsize.addr, align 4, !dbg !4900
  %conv227 = sext i32 %136 to i64, !dbg !4900
  %137 = load i64, i64* %c.addr, align 8, !dbg !4901
  %cmp228 = icmp sgt i64 %conv227, %137, !dbg !4902
  br i1 %cmp228, label %lor.end, label %lor.rhs, !dbg !4903

lor.rhs:                                          ; preds = %land.lhs.true226, %lor.lhs.false223
  %138 = load i64, i64* %c.addr, align 8, !dbg !4904
  %cmp230 = icmp slt i64 %138, 0, !dbg !4905
  br i1 %cmp230, label %land.rhs, label %land.end, !dbg !4906

land.rhs:                                         ; preds = %lor.rhs
  %139 = load i32, i32* %ysize.addr, align 4, !dbg !4907
  %conv232 = sext i32 %139 to i64, !dbg !4907
  %140 = load i64, i64* %c.addr, align 8, !dbg !4908
  %add233 = add nsw i64 %conv232, %140, !dbg !4909
  %cmp234 = icmp sgt i64 %add233, 0, !dbg !4910
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %141 = phi i1 [ false, %lor.rhs ], [ %cmp234, %land.rhs ], !dbg !4911
  br label %lor.end, !dbg !4903

lor.end:                                          ; preds = %land.end, %land.lhs.true226, %lor.lhs.false220, %if.then217
  %142 = phi i1 [ true, %land.lhs.true226 ], [ true, %lor.lhs.false220 ], [ true, %if.then217 ], [ %141, %land.end ]
  %lor.ext = zext i1 %142 to i32, !dbg !4903
  store i32 %lor.ext, i32* %retval, align 4, !dbg !4912
  br label %return, !dbg !4912

if.end236:                                        ; preds = %if.end204
  %143 = load %struct.rtx_def*, %struct.rtx_def** %x1189, align 8, !dbg !4913
  %144 = bitcast %struct.rtx_def* %143 to i32*, !dbg !4913
  %bf.load237 = load i32, i32* %144, align 8, !dbg !4913
  %bf.clear238 = and i32 %bf.load237, 65535, !dbg !4913
  %cmp239 = icmp eq i32 %bf.clear238, 30, !dbg !4913
  br i1 %cmp239, label %if.end242, label %if.then241, !dbg !4915

if.then241:                                       ; preds = %if.end236
  store i32 -1, i32* %retval, align 4, !dbg !4916
  br label %return, !dbg !4916

if.end242:                                        ; preds = %if.end236
  %145 = load %struct.rtx_def*, %struct.rtx_def** %x1189, align 8, !dbg !4917
  %u243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !4917
  %hwint244 = bitcast %union.u* %u243 to [1 x i64]*, !dbg !4917
  %arrayidx245 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint244, i64 0, i64 0, !dbg !4917
  %146 = load i64, i64* %arrayidx245, align 8, !dbg !4917
  %147 = load i32, i32* %xsize.addr, align 4, !dbg !4918
  %conv246 = sext i32 %147 to i64, !dbg !4918
  %div = sdiv i64 %conv246, %146, !dbg !4918
  %conv247 = trunc i64 %div to i32, !dbg !4918
  store i32 %conv247, i32* %xsize.addr, align 4, !dbg !4918
  %148 = load %struct.rtx_def*, %struct.rtx_def** %x1189, align 8, !dbg !4919
  %u248 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !4919
  %hwint249 = bitcast %union.u* %u248 to [1 x i64]*, !dbg !4919
  %arrayidx250 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint249, i64 0, i64 0, !dbg !4919
  %149 = load i64, i64* %arrayidx250, align 8, !dbg !4919
  %150 = load i32, i32* %ysize.addr, align 4, !dbg !4920
  %conv251 = sext i32 %150 to i64, !dbg !4920
  %div252 = sdiv i64 %conv251, %149, !dbg !4920
  %conv253 = trunc i64 %div252 to i32, !dbg !4920
  store i32 %conv253, i32* %ysize.addr, align 4, !dbg !4920
  %151 = load %struct.rtx_def*, %struct.rtx_def** %x1189, align 8, !dbg !4921
  %u254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !4921
  %hwint255 = bitcast %union.u* %u254 to [1 x i64]*, !dbg !4921
  %arrayidx256 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint255, i64 0, i64 0, !dbg !4921
  %152 = load i64, i64* %arrayidx256, align 8, !dbg !4921
  %153 = load i64, i64* %c.addr, align 8, !dbg !4922
  %div257 = sdiv i64 %153, %152, !dbg !4922
  store i64 %div257, i64* %c.addr, align 8, !dbg !4922
  %154 = load i32, i32* %xsize.addr, align 4, !dbg !4923
  %155 = load %struct.rtx_def*, %struct.rtx_def** %x0187, align 8, !dbg !4924
  %156 = load i32, i32* %ysize.addr, align 4, !dbg !4925
  %157 = load %struct.rtx_def*, %struct.rtx_def** %y0188, align 8, !dbg !4926
  %158 = load i64, i64* %c.addr, align 8, !dbg !4927
  %call258 = call i32 @memrefs_conflict_p(i32 %154, %struct.rtx_def* %155, i32 %156, %struct.rtx_def* %157, i64 %158), !dbg !4928
  store i32 %call258, i32* %retval, align 4, !dbg !4929
  br label %return, !dbg !4929

sw.default:                                       ; preds = %if.then184
  br label %sw.epilog, !dbg !4930

sw.epilog:                                        ; preds = %sw.default
  br label %if.end259, !dbg !4931

if.end259:                                        ; preds = %sw.epilog, %if.end177
  %159 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4932
  %160 = bitcast %struct.rtx_def* %159 to i32*, !dbg !4932
  %bf.load260 = load i32, i32* %160, align 8, !dbg !4932
  %bf.clear261 = and i32 %bf.load260, 65535, !dbg !4932
  %cmp262 = icmp eq i32 %bf.clear261, 61, !dbg !4934
  br i1 %cmp262, label %land.lhs.true264, label %if.end298, !dbg !4935

land.lhs.true264:                                 ; preds = %if.end259
  %161 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4936
  %u265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1, !dbg !4936
  %fld266 = bitcast %union.u* %u265 to [1 x %union.rtunion_def]*, !dbg !4936
  %arrayidx267 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld266, i64 0, i64 1, !dbg !4936
  %rt_rtx268 = bitcast %union.rtunion_def* %arrayidx267 to %struct.rtx_def**, !dbg !4936
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx268, align 8, !dbg !4936
  %163 = bitcast %struct.rtx_def* %162 to i32*, !dbg !4936
  %bf.load269 = load i32, i32* %163, align 8, !dbg !4936
  %bf.clear270 = and i32 %bf.load269, 65535, !dbg !4936
  %cmp271 = icmp eq i32 %bf.clear270, 30, !dbg !4936
  br i1 %cmp271, label %if.then273, label %if.end298, !dbg !4937

if.then273:                                       ; preds = %land.lhs.true264
  %164 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4938
  %165 = bitcast %struct.rtx_def* %164 to i32*, !dbg !4938
  %bf.load274 = load i32, i32* %165, align 8, !dbg !4938
  %bf.clear275 = and i32 %bf.load274, 65535, !dbg !4938
  %cmp276 = icmp eq i32 %bf.clear275, 61, !dbg !4941
  br i1 %cmp276, label %if.then290, label %lor.lhs.false278, !dbg !4942

lor.lhs.false278:                                 ; preds = %if.then273
  %166 = load i32, i32* %ysize.addr, align 4, !dbg !4943
  %conv279 = sext i32 %166 to i64, !dbg !4943
  %167 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4944
  %u280 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !4944
  %fld281 = bitcast %union.u* %u280 to [1 x %union.rtunion_def]*, !dbg !4944
  %arrayidx282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld281, i64 0, i64 1, !dbg !4944
  %rt_rtx283 = bitcast %union.rtunion_def* %arrayidx282 to %struct.rtx_def**, !dbg !4944
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx283, align 8, !dbg !4944
  %u284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1, !dbg !4944
  %hwint285 = bitcast %union.u* %u284 to [1 x i64]*, !dbg !4944
  %arrayidx286 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint285, i64 0, i64 0, !dbg !4944
  %169 = load i64, i64* %arrayidx286, align 8, !dbg !4944
  %sub287 = sub nsw i64 0, %169, !dbg !4945
  %cmp288 = icmp slt i64 %conv279, %sub287, !dbg !4946
  br i1 %cmp288, label %if.then290, label %if.end291, !dbg !4947

if.then290:                                       ; preds = %lor.lhs.false278, %if.then273
  store i32 -1, i32* %xsize.addr, align 4, !dbg !4948
  br label %if.end291, !dbg !4949

if.end291:                                        ; preds = %if.then290, %lor.lhs.false278
  %170 = load i32, i32* %xsize.addr, align 4, !dbg !4950
  %171 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4951
  %u292 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !4951
  %fld293 = bitcast %union.u* %u292 to [1 x %union.rtunion_def]*, !dbg !4951
  %arrayidx294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld293, i64 0, i64 0, !dbg !4951
  %rt_rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**, !dbg !4951
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx295, align 8, !dbg !4951
  %call296 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %172), !dbg !4952
  %173 = load i32, i32* %ysize.addr, align 4, !dbg !4953
  %174 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4954
  %175 = load i64, i64* %c.addr, align 8, !dbg !4955
  %call297 = call i32 @memrefs_conflict_p(i32 %170, %struct.rtx_def* %call296, i32 %173, %struct.rtx_def* %174, i64 %175), !dbg !4956
  store i32 %call297, i32* %retval, align 4, !dbg !4957
  br label %return, !dbg !4957

if.end298:                                        ; preds = %land.lhs.true264, %if.end259
  %176 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4958
  %177 = bitcast %struct.rtx_def* %176 to i32*, !dbg !4958
  %bf.load299 = load i32, i32* %177, align 8, !dbg !4958
  %bf.clear300 = and i32 %bf.load299, 65535, !dbg !4958
  %cmp301 = icmp eq i32 %bf.clear300, 61, !dbg !4960
  br i1 %cmp301, label %land.lhs.true303, label %if.end337, !dbg !4961

land.lhs.true303:                                 ; preds = %if.end298
  %178 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4962
  %u304 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !4962
  %fld305 = bitcast %union.u* %u304 to [1 x %union.rtunion_def]*, !dbg !4962
  %arrayidx306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld305, i64 0, i64 1, !dbg !4962
  %rt_rtx307 = bitcast %union.rtunion_def* %arrayidx306 to %struct.rtx_def**, !dbg !4962
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx307, align 8, !dbg !4962
  %180 = bitcast %struct.rtx_def* %179 to i32*, !dbg !4962
  %bf.load308 = load i32, i32* %180, align 8, !dbg !4962
  %bf.clear309 = and i32 %bf.load308, 65535, !dbg !4962
  %cmp310 = icmp eq i32 %bf.clear309, 30, !dbg !4962
  br i1 %cmp310, label %if.then312, label %if.end337, !dbg !4963

if.then312:                                       ; preds = %land.lhs.true303
  %181 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4964
  %182 = bitcast %struct.rtx_def* %181 to i32*, !dbg !4964
  %bf.load313 = load i32, i32* %182, align 8, !dbg !4964
  %bf.clear314 = and i32 %bf.load313, 65535, !dbg !4964
  %cmp315 = icmp eq i32 %bf.clear314, 61, !dbg !4967
  br i1 %cmp315, label %if.then329, label %lor.lhs.false317, !dbg !4968

lor.lhs.false317:                                 ; preds = %if.then312
  %183 = load i32, i32* %xsize.addr, align 4, !dbg !4969
  %conv318 = sext i32 %183 to i64, !dbg !4969
  %184 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4970
  %u319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %184, i32 0, i32 1, !dbg !4970
  %fld320 = bitcast %union.u* %u319 to [1 x %union.rtunion_def]*, !dbg !4970
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i64 0, i64 1, !dbg !4970
  %rt_rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**, !dbg !4970
  %185 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx322, align 8, !dbg !4970
  %u323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1, !dbg !4970
  %hwint324 = bitcast %union.u* %u323 to [1 x i64]*, !dbg !4970
  %arrayidx325 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint324, i64 0, i64 0, !dbg !4970
  %186 = load i64, i64* %arrayidx325, align 8, !dbg !4970
  %sub326 = sub nsw i64 0, %186, !dbg !4971
  %cmp327 = icmp slt i64 %conv318, %sub326, !dbg !4972
  br i1 %cmp327, label %if.then329, label %if.end330, !dbg !4973

if.then329:                                       ; preds = %lor.lhs.false317, %if.then312
  store i32 -1, i32* %ysize.addr, align 4, !dbg !4974
  br label %if.end330, !dbg !4975

if.end330:                                        ; preds = %if.then329, %lor.lhs.false317
  %187 = load i32, i32* %xsize.addr, align 4, !dbg !4976
  %188 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4977
  %189 = load i32, i32* %ysize.addr, align 4, !dbg !4978
  %190 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4979
  %u331 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %190, i32 0, i32 1, !dbg !4979
  %fld332 = bitcast %union.u* %u331 to [1 x %union.rtunion_def]*, !dbg !4979
  %arrayidx333 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld332, i64 0, i64 0, !dbg !4979
  %rt_rtx334 = bitcast %union.rtunion_def* %arrayidx333 to %struct.rtx_def**, !dbg !4979
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx334, align 8, !dbg !4979
  %call335 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %191), !dbg !4980
  %192 = load i64, i64* %c.addr, align 8, !dbg !4981
  %call336 = call i32 @memrefs_conflict_p(i32 %187, %struct.rtx_def* %188, i32 %189, %struct.rtx_def* %call335, i64 %192), !dbg !4982
  store i32 %call336, i32* %retval, align 4, !dbg !4983
  br label %return, !dbg !4983

if.end337:                                        ; preds = %land.lhs.true303, %if.end298
  %193 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4984
  %194 = bitcast %struct.rtx_def* %193 to i32*, !dbg !4984
  %bf.load338 = load i32, i32* %194, align 8, !dbg !4984
  %bf.clear339 = and i32 %bf.load338, 65535, !dbg !4984
  %idxprom = sext i32 %bf.clear339 to i64, !dbg !4984
  %arrayidx340 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !4984
  %195 = load i32, i32* %arrayidx340, align 4, !dbg !4984
  %cmp341 = icmp eq i32 %195, 9, !dbg !4984
  br i1 %cmp341, label %if.then343, label %if.end464, !dbg !4986

if.then343:                                       ; preds = %if.end337
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4987
  %197 = bitcast %struct.rtx_def* %196 to i32*, !dbg !4987
  %bf.load344 = load i32, i32* %197, align 8, !dbg !4987
  %bf.clear345 = and i32 %bf.load344, 65535, !dbg !4987
  %cmp346 = icmp eq i32 %bf.clear345, 30, !dbg !4987
  br i1 %cmp346, label %land.lhs.true348, label %if.end385, !dbg !4990

land.lhs.true348:                                 ; preds = %if.then343
  %198 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4991
  %199 = bitcast %struct.rtx_def* %198 to i32*, !dbg !4991
  %bf.load349 = load i32, i32* %199, align 8, !dbg !4991
  %bf.clear350 = and i32 %bf.load349, 65535, !dbg !4991
  %cmp351 = icmp eq i32 %bf.clear350, 30, !dbg !4991
  br i1 %cmp351, label %if.then353, label %if.end385, !dbg !4992

if.then353:                                       ; preds = %land.lhs.true348
  %200 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !4993
  %u354 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %200, i32 0, i32 1, !dbg !4993
  %hwint355 = bitcast %union.u* %u354 to [1 x i64]*, !dbg !4993
  %arrayidx356 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint355, i64 0, i64 0, !dbg !4993
  %201 = load i64, i64* %arrayidx356, align 8, !dbg !4993
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4995
  %u357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1, !dbg !4995
  %hwint358 = bitcast %union.u* %u357 to [1 x i64]*, !dbg !4995
  %arrayidx359 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint358, i64 0, i64 0, !dbg !4995
  %203 = load i64, i64* %arrayidx359, align 8, !dbg !4995
  %sub360 = sub nsw i64 %201, %203, !dbg !4996
  %204 = load i64, i64* %c.addr, align 8, !dbg !4997
  %add361 = add nsw i64 %204, %sub360, !dbg !4997
  store i64 %add361, i64* %c.addr, align 8, !dbg !4997
  %205 = load i32, i32* %xsize.addr, align 4, !dbg !4998
  %cmp362 = icmp sle i32 %205, 0, !dbg !4999
  br i1 %cmp362, label %lor.end383, label %lor.lhs.false364, !dbg !5000

lor.lhs.false364:                                 ; preds = %if.then353
  %206 = load i32, i32* %ysize.addr, align 4, !dbg !5001
  %cmp365 = icmp sle i32 %206, 0, !dbg !5002
  br i1 %cmp365, label %lor.end383, label %lor.lhs.false367, !dbg !5003

lor.lhs.false367:                                 ; preds = %lor.lhs.false364
  %207 = load i64, i64* %c.addr, align 8, !dbg !5004
  %cmp368 = icmp sge i64 %207, 0, !dbg !5005
  br i1 %cmp368, label %land.lhs.true370, label %lor.rhs374, !dbg !5006

land.lhs.true370:                                 ; preds = %lor.lhs.false367
  %208 = load i32, i32* %xsize.addr, align 4, !dbg !5007
  %conv371 = sext i32 %208 to i64, !dbg !5007
  %209 = load i64, i64* %c.addr, align 8, !dbg !5008
  %cmp372 = icmp sgt i64 %conv371, %209, !dbg !5009
  br i1 %cmp372, label %lor.end383, label %lor.rhs374, !dbg !5010

lor.rhs374:                                       ; preds = %land.lhs.true370, %lor.lhs.false367
  %210 = load i64, i64* %c.addr, align 8, !dbg !5011
  %cmp375 = icmp slt i64 %210, 0, !dbg !5012
  br i1 %cmp375, label %land.rhs377, label %land.end382, !dbg !5013

land.rhs377:                                      ; preds = %lor.rhs374
  %211 = load i32, i32* %ysize.addr, align 4, !dbg !5014
  %conv378 = sext i32 %211 to i64, !dbg !5014
  %212 = load i64, i64* %c.addr, align 8, !dbg !5015
  %add379 = add nsw i64 %conv378, %212, !dbg !5016
  %cmp380 = icmp sgt i64 %add379, 0, !dbg !5017
  br label %land.end382

land.end382:                                      ; preds = %land.rhs377, %lor.rhs374
  %213 = phi i1 [ false, %lor.rhs374 ], [ %cmp380, %land.rhs377 ], !dbg !5018
  br label %lor.end383, !dbg !5010

lor.end383:                                       ; preds = %land.end382, %land.lhs.true370, %lor.lhs.false364, %if.then353
  %214 = phi i1 [ true, %land.lhs.true370 ], [ true, %lor.lhs.false364 ], [ true, %if.then353 ], [ %213, %land.end382 ]
  %lor.ext384 = zext i1 %214 to i32, !dbg !5010
  store i32 %lor.ext384, i32* %retval, align 4, !dbg !5019
  br label %return, !dbg !5019

if.end385:                                        ; preds = %land.lhs.true348, %if.then343
  %215 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5020
  %216 = bitcast %struct.rtx_def* %215 to i32*, !dbg !5020
  %bf.load386 = load i32, i32* %216, align 8, !dbg !5020
  %bf.clear387 = and i32 %bf.load386, 65535, !dbg !5020
  %cmp388 = icmp eq i32 %bf.clear387, 35, !dbg !5022
  br i1 %cmp388, label %if.then390, label %if.end414, !dbg !5023

if.then390:                                       ; preds = %if.end385
  %217 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5024
  %218 = bitcast %struct.rtx_def* %217 to i32*, !dbg !5024
  %bf.load391 = load i32, i32* %218, align 8, !dbg !5024
  %bf.clear392 = and i32 %bf.load391, 65535, !dbg !5024
  %cmp393 = icmp eq i32 %bf.clear392, 35, !dbg !5027
  br i1 %cmp393, label %if.then395, label %if.else407, !dbg !5028

if.then395:                                       ; preds = %if.then390
  %219 = load i32, i32* %xsize.addr, align 4, !dbg !5029
  %220 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5030
  %u396 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1, !dbg !5030
  %fld397 = bitcast %union.u* %u396 to [1 x %union.rtunion_def]*, !dbg !5030
  %arrayidx398 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld397, i64 0, i64 0, !dbg !5030
  %rt_rtx399 = bitcast %union.rtunion_def* %arrayidx398 to %struct.rtx_def**, !dbg !5030
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx399, align 8, !dbg !5030
  %call400 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %221), !dbg !5031
  %222 = load i32, i32* %ysize.addr, align 4, !dbg !5032
  %223 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5033
  %u401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1, !dbg !5033
  %fld402 = bitcast %union.u* %u401 to [1 x %union.rtunion_def]*, !dbg !5033
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i64 0, i64 0, !dbg !5033
  %rt_rtx404 = bitcast %union.rtunion_def* %arrayidx403 to %struct.rtx_def**, !dbg !5033
  %224 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx404, align 8, !dbg !5033
  %call405 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %224), !dbg !5034
  %225 = load i64, i64* %c.addr, align 8, !dbg !5035
  %call406 = call i32 @memrefs_conflict_p(i32 %219, %struct.rtx_def* %call400, i32 %222, %struct.rtx_def* %call405, i64 %225), !dbg !5036
  store i32 %call406, i32* %retval, align 4, !dbg !5037
  br label %return, !dbg !5037

if.else407:                                       ; preds = %if.then390
  %226 = load i32, i32* %xsize.addr, align 4, !dbg !5038
  %227 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5039
  %u408 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1, !dbg !5039
  %fld409 = bitcast %union.u* %u408 to [1 x %union.rtunion_def]*, !dbg !5039
  %arrayidx410 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld409, i64 0, i64 0, !dbg !5039
  %rt_rtx411 = bitcast %union.rtunion_def* %arrayidx410 to %struct.rtx_def**, !dbg !5039
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx411, align 8, !dbg !5039
  %call412 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %228), !dbg !5040
  %229 = load i32, i32* %ysize.addr, align 4, !dbg !5041
  %230 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5042
  %231 = load i64, i64* %c.addr, align 8, !dbg !5043
  %call413 = call i32 @memrefs_conflict_p(i32 %226, %struct.rtx_def* %call412, i32 %229, %struct.rtx_def* %230, i64 %231), !dbg !5044
  store i32 %call413, i32* %retval, align 4, !dbg !5045
  br label %return, !dbg !5045

if.end414:                                        ; preds = %if.end385
  %232 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5046
  %233 = bitcast %struct.rtx_def* %232 to i32*, !dbg !5046
  %bf.load415 = load i32, i32* %233, align 8, !dbg !5046
  %bf.clear416 = and i32 %bf.load415, 65535, !dbg !5046
  %cmp417 = icmp eq i32 %bf.clear416, 35, !dbg !5048
  br i1 %cmp417, label %if.then419, label %if.end426, !dbg !5049

if.then419:                                       ; preds = %if.end414
  %234 = load i32, i32* %xsize.addr, align 4, !dbg !5050
  %235 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5051
  %236 = load i32, i32* %ysize.addr, align 4, !dbg !5052
  %237 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5053
  %u420 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %237, i32 0, i32 1, !dbg !5053
  %fld421 = bitcast %union.u* %u420 to [1 x %union.rtunion_def]*, !dbg !5053
  %arrayidx422 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld421, i64 0, i64 0, !dbg !5053
  %rt_rtx423 = bitcast %union.rtunion_def* %arrayidx422 to %struct.rtx_def**, !dbg !5053
  %238 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx423, align 8, !dbg !5053
  %call424 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %238), !dbg !5054
  %239 = load i64, i64* %c.addr, align 8, !dbg !5055
  %call425 = call i32 @memrefs_conflict_p(i32 %234, %struct.rtx_def* %235, i32 %236, %struct.rtx_def* %call424, i64 %239), !dbg !5056
  store i32 %call425, i32* %retval, align 4, !dbg !5057
  br label %return, !dbg !5057

if.end426:                                        ; preds = %if.end414
  %240 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5058
  %241 = bitcast %struct.rtx_def* %240 to i32*, !dbg !5058
  %bf.load427 = load i32, i32* %241, align 8, !dbg !5058
  %bf.clear428 = and i32 %bf.load427, 65535, !dbg !5058
  %idxprom429 = sext i32 %bf.clear428 to i64, !dbg !5058
  %arrayidx430 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom429, !dbg !5058
  %242 = load i32, i32* %arrayidx430, align 4, !dbg !5058
  %cmp431 = icmp eq i32 %242, 9, !dbg !5058
  br i1 %cmp431, label %if.then433, label %if.end463, !dbg !5060

if.then433:                                       ; preds = %if.end426
  %243 = load i32, i32* %xsize.addr, align 4, !dbg !5061
  %cmp434 = icmp sle i32 %243, 0, !dbg !5062
  br i1 %cmp434, label %lor.end461, label %lor.lhs.false436, !dbg !5063

lor.lhs.false436:                                 ; preds = %if.then433
  %244 = load i32, i32* %ysize.addr, align 4, !dbg !5064
  %cmp437 = icmp sle i32 %244, 0, !dbg !5065
  br i1 %cmp437, label %lor.end461, label %lor.rhs439, !dbg !5066

lor.rhs439:                                       ; preds = %lor.lhs.false436
  %245 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5067
  %246 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !5068
  %call440 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %245, %struct.rtx_def* %246), !dbg !5069
  %tobool441 = icmp ne i32 %call440, 0, !dbg !5069
  br i1 %tobool441, label %land.rhs442, label %land.end460, !dbg !5070

land.rhs442:                                      ; preds = %lor.rhs439
  %247 = load i64, i64* %c.addr, align 8, !dbg !5071
  %cmp443 = icmp sge i64 %247, 0, !dbg !5072
  br i1 %cmp443, label %land.lhs.true445, label %lor.rhs449, !dbg !5073

land.lhs.true445:                                 ; preds = %land.rhs442
  %248 = load i32, i32* %xsize.addr, align 4, !dbg !5074
  %conv446 = sext i32 %248 to i64, !dbg !5074
  %249 = load i64, i64* %c.addr, align 8, !dbg !5075
  %cmp447 = icmp sgt i64 %conv446, %249, !dbg !5076
  br i1 %cmp447, label %lor.end458, label %lor.rhs449, !dbg !5077

lor.rhs449:                                       ; preds = %land.lhs.true445, %land.rhs442
  %250 = load i64, i64* %c.addr, align 8, !dbg !5078
  %cmp450 = icmp slt i64 %250, 0, !dbg !5079
  br i1 %cmp450, label %land.rhs452, label %land.end457, !dbg !5080

land.rhs452:                                      ; preds = %lor.rhs449
  %251 = load i32, i32* %ysize.addr, align 4, !dbg !5081
  %conv453 = sext i32 %251 to i64, !dbg !5081
  %252 = load i64, i64* %c.addr, align 8, !dbg !5082
  %add454 = add nsw i64 %conv453, %252, !dbg !5083
  %cmp455 = icmp sgt i64 %add454, 0, !dbg !5084
  br label %land.end457

land.end457:                                      ; preds = %land.rhs452, %lor.rhs449
  %253 = phi i1 [ false, %lor.rhs449 ], [ %cmp455, %land.rhs452 ], !dbg !5085
  br label %lor.end458, !dbg !5077

lor.end458:                                       ; preds = %land.end457, %land.lhs.true445
  %254 = phi i1 [ true, %land.lhs.true445 ], [ %253, %land.end457 ]
  br label %land.end460

land.end460:                                      ; preds = %lor.end458, %lor.rhs439
  %255 = phi i1 [ false, %lor.rhs439 ], [ %254, %lor.end458 ], !dbg !5085
  br label %lor.end461, !dbg !5066

lor.end461:                                       ; preds = %land.end460, %lor.lhs.false436, %if.then433
  %256 = phi i1 [ true, %lor.lhs.false436 ], [ true, %if.then433 ], [ %255, %land.end460 ]
  %lor.ext462 = zext i1 %256 to i32, !dbg !5066
  store i32 %lor.ext462, i32* %retval, align 4, !dbg !5086
  br label %return, !dbg !5086

if.end463:                                        ; preds = %if.end426
  store i32 -1, i32* %retval, align 4, !dbg !5087
  br label %return, !dbg !5087

if.end464:                                        ; preds = %if.end337
  store i32 -1, i32* %retval, align 4, !dbg !5088
  br label %return, !dbg !5088

return:                                           ; preds = %if.end464, %if.end463, %lor.end461, %if.then419, %if.else407, %if.then395, %lor.end383, %if.end330, %if.end291, %if.end242, %if.then241, %lor.end, %if.then203, %if.else175, %if.then169, %if.then141, %if.end135, %if.then128, %if.else117, %if.then109, %if.then97, %if.then92, %if.end62, %if.then61, %if.then53, %if.then48
  %257 = load i32, i32* %retval, align 4, !dbg !5089
  ret i32 %257, !dbg !5089
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mems_in_disjoint_alias_sets_p(%struct.rtx_def* %mem1, %struct.rtx_def* %mem2) #0 !dbg !5090 {
entry:
  %mem1.addr = alloca %struct.rtx_def*, align 8
  %mem2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem1, %struct.rtx_def** %mem1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem1.addr, metadata !5091, metadata !DIExpression()), !dbg !5092
  store %struct.rtx_def* %mem2, %struct.rtx_def** %mem2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem2.addr, metadata !5093, metadata !DIExpression()), !dbg !5094
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !5095
  %tobool = icmp ne i32 %0, 0, !dbg !5095
  br i1 %tobool, label %cond.false20, label %lor.lhs.false, !dbg !5095

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5095
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !5095
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5095
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5095
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5095
  %2 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5095
  %cmp = icmp eq %struct.mem_attrs* %2, null, !dbg !5095
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5095

cond.true:                                        ; preds = %lor.lhs.false
  br i1 false, label %cond.true19, label %land.lhs.true, !dbg !5095

cond.false:                                       ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5095
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5095
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5095
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5095
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5095
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5095
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %4, i32 0, i32 3, !dbg !5095
  %5 = load i32, i32* %alias, align 8, !dbg !5095
  %tobool5 = icmp ne i32 %5, 0, !dbg !5095
  br i1 %tobool5, label %cond.true19, label %land.lhs.true, !dbg !5095

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5095
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5095
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !5095
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !5095
  %rt_mem9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.mem_attrs**, !dbg !5095
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem9, align 8, !dbg !5095
  %cmp10 = icmp eq %struct.mem_attrs* %7, null, !dbg !5095
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !5095

cond.true11:                                      ; preds = %land.lhs.true
  br i1 false, label %cond.true19, label %cond.false20, !dbg !5095

cond.false12:                                     ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5095
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5095
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !5095
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !5095
  %rt_mem16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**, !dbg !5095
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem16, align 8, !dbg !5095
  %alias17 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %9, i32 0, i32 3, !dbg !5095
  %10 = load i32, i32* %alias17, align 8, !dbg !5095
  %tobool18 = icmp ne i32 %10, 0, !dbg !5095
  br i1 %tobool18, label %cond.true19, label %cond.false20, !dbg !5095

cond.true19:                                      ; preds = %cond.false12, %cond.true11, %cond.false, %cond.true
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5095
  br label %cond.end, !dbg !5095

cond.false20:                                     ; preds = %cond.false12, %cond.true11, %entry
  br label %cond.end, !dbg !5095

cond.end:                                         ; preds = %cond.false20, %cond.true19
  %cond = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !5095
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5096
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5096
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !5096
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 1, !dbg !5096
  %rt_mem24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.mem_attrs**, !dbg !5096
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem24, align 8, !dbg !5096
  %cmp25 = icmp eq %struct.mem_attrs* %12, null, !dbg !5096
  br i1 %cmp25, label %cond.true26, label %cond.false27, !dbg !5096

cond.true26:                                      ; preds = %cond.end
  br label %cond.end33, !dbg !5096

cond.false27:                                     ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5096
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5096
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !5096
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !5096
  %rt_mem31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !5096
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem31, align 8, !dbg !5096
  %alias32 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 3, !dbg !5096
  %15 = load i32, i32* %alias32, align 8, !dbg !5096
  br label %cond.end33, !dbg !5096

cond.end33:                                       ; preds = %cond.false27, %cond.true26
  %cond34 = phi i32 [ 0, %cond.true26 ], [ %15, %cond.false27 ], !dbg !5096
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5097
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5097
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !5097
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !5097
  %rt_mem38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.mem_attrs**, !dbg !5097
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem38, align 8, !dbg !5097
  %cmp39 = icmp eq %struct.mem_attrs* %17, null, !dbg !5097
  br i1 %cmp39, label %cond.true40, label %cond.false41, !dbg !5097

cond.true40:                                      ; preds = %cond.end33
  br label %cond.end47, !dbg !5097

cond.false41:                                     ; preds = %cond.end33
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5097
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5097
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !5097
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !5097
  %rt_mem45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.mem_attrs**, !dbg !5097
  %19 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem45, align 8, !dbg !5097
  %alias46 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %19, i32 0, i32 3, !dbg !5097
  %20 = load i32, i32* %alias46, align 8, !dbg !5097
  br label %cond.end47, !dbg !5097

cond.end47:                                       ; preds = %cond.false41, %cond.true40
  %cond48 = phi i32 [ 0, %cond.true40 ], [ %20, %cond.false41 ], !dbg !5097
  %call = call i32 @alias_sets_conflict_p(i32 %cond34, i32 %cond48), !dbg !5098
  %tobool49 = icmp ne i32 %call, 0, !dbg !5099
  %lnot = xor i1 %tobool49, true, !dbg !5099
  %lnot.ext = zext i1 %lnot to i32, !dbg !5099
  ret i32 %lnot.ext, !dbg !5100
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @aliases_everything_p(%struct.rtx_def* %mem) #0 !dbg !5101 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5104, metadata !DIExpression()), !dbg !5105
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5106
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5106
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5106
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5106
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5106
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5106
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5106
  %bf.load = load i32, i32* %2, align 8, !dbg !5106
  %bf.clear = and i32 %bf.load, 65535, !dbg !5106
  %cmp = icmp eq i32 %bf.clear, 61, !dbg !5108
  br i1 %cmp, label %if.then, label %if.end, !dbg !5109

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !5110
  br label %return, !dbg !5110

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5111
  br label %return, !dbg !5111

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !5112
  ret i32 %3, !dbg !5112
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @fixed_scalar_and_varying_struct_p(%struct.rtx_def* %mem1, %struct.rtx_def* %mem2, %struct.rtx_def* %mem1_addr, %struct.rtx_def* %mem2_addr, i8 (%struct.rtx_def*, i8)* %varies_p) #0 !dbg !5113 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem1.addr = alloca %struct.rtx_def*, align 8
  %mem2.addr = alloca %struct.rtx_def*, align 8
  %mem1_addr.addr = alloca %struct.rtx_def*, align 8
  %mem2_addr.addr = alloca %struct.rtx_def*, align 8
  %varies_p.addr = alloca i8 (%struct.rtx_def*, i8)*, align 8
  store %struct.rtx_def* %mem1, %struct.rtx_def** %mem1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem1.addr, metadata !5116, metadata !DIExpression()), !dbg !5117
  store %struct.rtx_def* %mem2, %struct.rtx_def** %mem2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem2.addr, metadata !5118, metadata !DIExpression()), !dbg !5119
  store %struct.rtx_def* %mem1_addr, %struct.rtx_def** %mem1_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem1_addr.addr, metadata !5120, metadata !DIExpression()), !dbg !5121
  store %struct.rtx_def* %mem2_addr, %struct.rtx_def** %mem2_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem2_addr.addr, metadata !5122, metadata !DIExpression()), !dbg !5123
  store i8 (%struct.rtx_def*, i8)* %varies_p, i8 (%struct.rtx_def*, i8)** %varies_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.rtx_def*, i8)** %varies_p.addr, metadata !5124, metadata !DIExpression()), !dbg !5125
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !5126
  %tobool = icmp ne i32 %0, 0, !dbg !5126
  br i1 %tobool, label %if.end, label %if.then, !dbg !5128

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5129
  br label %return, !dbg !5129

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5130
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !5130
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5130
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5130
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !5130
  %2 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5130
  %cmp = icmp eq %struct.mem_attrs* %2, null, !dbg !5130
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5132

cond.true:                                        ; preds = %if.end
  br i1 false, label %land.lhs.true, label %if.end17, !dbg !5130

cond.false:                                       ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5130
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5130
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5130
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5130
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !5130
  %4 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !5130
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %4, i32 0, i32 3, !dbg !5130
  %5 = load i32, i32* %alias, align 8, !dbg !5130
  %tobool5 = icmp ne i32 %5, 0, !dbg !5130
  br i1 %tobool5, label %land.lhs.true, label %if.end17, !dbg !5132

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5133
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5133
  %bf.load = load i32, i32* %7, align 8, !dbg !5133
  %bf.lshr = lshr i32 %bf.load, 31, !dbg !5133
  %tobool6 = icmp ne i32 %bf.lshr, 0, !dbg !5133
  br i1 %tobool6, label %land.lhs.true7, label %if.end17, !dbg !5134

land.lhs.true7:                                   ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5135
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5135
  %bf.load8 = load i32, i32* %9, align 8, !dbg !5135
  %bf.lshr9 = lshr i32 %bf.load8, 28, !dbg !5135
  %bf.clear = and i32 %bf.lshr9, 1, !dbg !5135
  %tobool10 = icmp ne i32 %bf.clear, 0, !dbg !5135
  br i1 %tobool10, label %land.lhs.true11, label %if.end17, !dbg !5136

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %10 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies_p.addr, align 8, !dbg !5137
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem1_addr.addr, align 8, !dbg !5138
  %call = call zeroext i8 %10(%struct.rtx_def* %11, i8 zeroext 1), !dbg !5137
  %tobool12 = icmp ne i8 %call, 0, !dbg !5137
  br i1 %tobool12, label %if.end17, label %land.lhs.true13, !dbg !5139

land.lhs.true13:                                  ; preds = %land.lhs.true11
  %12 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies_p.addr, align 8, !dbg !5140
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem2_addr.addr, align 8, !dbg !5141
  %call14 = call zeroext i8 %12(%struct.rtx_def* %13, i8 zeroext 1), !dbg !5140
  %conv = zext i8 %call14 to i32, !dbg !5140
  %tobool15 = icmp ne i32 %conv, 0, !dbg !5140
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5142

if.then16:                                        ; preds = %land.lhs.true13
  %14 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5143
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !5144
  br label %return, !dbg !5144

if.end17:                                         ; preds = %land.lhs.true13, %land.lhs.true11, %land.lhs.true7, %land.lhs.true, %cond.false, %cond.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5145
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5145
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5145
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !5145
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !5145
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !5145
  %cmp22 = icmp eq %struct.mem_attrs* %16, null, !dbg !5145
  br i1 %cmp22, label %cond.true24, label %cond.false25, !dbg !5147

cond.true24:                                      ; preds = %if.end17
  br i1 false, label %land.lhs.true32, label %if.end49, !dbg !5145

cond.false25:                                     ; preds = %if.end17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5145
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5145
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !5145
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !5145
  %rt_mem29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.mem_attrs**, !dbg !5145
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem29, align 8, !dbg !5145
  %alias30 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 3, !dbg !5145
  %19 = load i32, i32* %alias30, align 8, !dbg !5145
  %tobool31 = icmp ne i32 %19, 0, !dbg !5145
  br i1 %tobool31, label %land.lhs.true32, label %if.end49, !dbg !5147

land.lhs.true32:                                  ; preds = %cond.false25, %cond.true24
  %20 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !5148
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5148
  %bf.load33 = load i32, i32* %21, align 8, !dbg !5148
  %bf.lshr34 = lshr i32 %bf.load33, 28, !dbg !5148
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !5148
  %tobool36 = icmp ne i32 %bf.clear35, 0, !dbg !5148
  br i1 %tobool36, label %land.lhs.true37, label %if.end49, !dbg !5149

land.lhs.true37:                                  ; preds = %land.lhs.true32
  %22 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5150
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5150
  %bf.load38 = load i32, i32* %23, align 8, !dbg !5150
  %bf.lshr39 = lshr i32 %bf.load38, 31, !dbg !5150
  %tobool40 = icmp ne i32 %bf.lshr39, 0, !dbg !5150
  br i1 %tobool40, label %land.lhs.true41, label %if.end49, !dbg !5151

land.lhs.true41:                                  ; preds = %land.lhs.true37
  %24 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies_p.addr, align 8, !dbg !5152
  %25 = load %struct.rtx_def*, %struct.rtx_def** %mem1_addr.addr, align 8, !dbg !5153
  %call42 = call zeroext i8 %24(%struct.rtx_def* %25, i8 zeroext 1), !dbg !5152
  %conv43 = zext i8 %call42 to i32, !dbg !5152
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5152
  br i1 %tobool44, label %land.lhs.true45, label %if.end49, !dbg !5154

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %26 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies_p.addr, align 8, !dbg !5155
  %27 = load %struct.rtx_def*, %struct.rtx_def** %mem2_addr.addr, align 8, !dbg !5156
  %call46 = call zeroext i8 %26(%struct.rtx_def* %27, i8 zeroext 1), !dbg !5155
  %tobool47 = icmp ne i8 %call46, 0, !dbg !5155
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !5157

if.then48:                                        ; preds = %land.lhs.true45
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !5158
  store %struct.rtx_def* %28, %struct.rtx_def** %retval, align 8, !dbg !5159
  br label %return, !dbg !5159

if.end49:                                         ; preds = %land.lhs.true45, %land.lhs.true41, %land.lhs.true37, %land.lhs.true32, %cond.false25, %cond.true24
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5160
  br label %return, !dbg !5160

return:                                           ; preds = %if.end49, %if.then48, %if.then16, %if.then
  %29 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5161
  ret %struct.rtx_def* %29, !dbg !5161
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rtx_refs_may_alias_p(%struct.rtx_def* %x, %struct.rtx_def* %mem, i8 zeroext %tbaa_p) #0 !dbg !5162 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %tbaa_p.addr = alloca i8, align 1
  %ref1 = alloca %struct.ao_ref_s, align 8
  %ref2 = alloca %struct.ao_ref_s, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5165, metadata !DIExpression()), !dbg !5166
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5167, metadata !DIExpression()), !dbg !5168
  store i8 %tbaa_p, i8* %tbaa_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %tbaa_p.addr, metadata !5169, metadata !DIExpression()), !dbg !5170
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %ref1, metadata !5171, metadata !DIExpression()), !dbg !5182
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %ref2, metadata !5183, metadata !DIExpression()), !dbg !5184
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5185
  %call = call zeroext i8 @ao_ref_from_mem(%struct.ao_ref_s* %ref1, %struct.rtx_def* %0), !dbg !5187
  %tobool = icmp ne i8 %call, 0, !dbg !5187
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5188

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5189
  %call1 = call zeroext i8 @ao_ref_from_mem(%struct.ao_ref_s* %ref2, %struct.rtx_def* %1), !dbg !5190
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5190
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5191

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !5192
  br label %return, !dbg !5192

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8, i8* %tbaa_p.addr, align 1, !dbg !5193
  %call3 = call zeroext i8 @refs_may_alias_p_1(%struct.ao_ref_s* %ref1, %struct.ao_ref_s* %ref2, i8 zeroext %2), !dbg !5194
  store i8 %call3, i8* %retval, align 1, !dbg !5195
  br label %return, !dbg !5195

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !5196
  ret i8 %3, !dbg !5196
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @canon_true_dependence(%struct.rtx_def* %mem, i32 %mem_mode, %struct.rtx_def* %mem_addr, %struct.rtx_def* %x, %struct.rtx_def* %x_addr, i8 (%struct.rtx_def*, i8)* %varies) #0 !dbg !5197 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def*, align 8
  %mem_mode.addr = alloca i32, align 4
  %mem_addr.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %x_addr.addr = alloca %struct.rtx_def*, align 8
  %varies.addr = alloca i8 (%struct.rtx_def*, i8)*, align 8
  %ret = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  store i32 %mem_mode, i32* %mem_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mem_mode.addr, metadata !5202, metadata !DIExpression()), !dbg !5203
  store %struct.rtx_def* %mem_addr, %struct.rtx_def** %mem_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem_addr.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  store %struct.rtx_def* %x_addr, %struct.rtx_def** %x_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x_addr.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  store i8 (%struct.rtx_def*, i8)* %varies, i8 (%struct.rtx_def*, i8)** %varies.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.rtx_def*, i8)** %varies.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5214
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5214
  %bf.load = load i32, i32* %1, align 8, !dbg !5214
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !5214
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5214
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !5214
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5216

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5217
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5217
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5217
  %bf.lshr2 = lshr i32 %bf.load1, 27, !dbg !5217
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !5217
  %tobool4 = icmp ne i32 %bf.clear3, 0, !dbg !5217
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5218

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !5219
  br label %return, !dbg !5219

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5220
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5220
  %bf.load5 = load i32, i32* %5, align 8, !dbg !5220
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !5220
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !5220
  %cmp = icmp eq i32 %bf.clear7, 1, !dbg !5222
  br i1 %cmp, label %land.lhs.true8, label %if.end13, !dbg !5223

land.lhs.true8:                                   ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5224
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5224
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5224
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5224
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5224
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5224
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5224
  %bf.load9 = load i32, i32* %8, align 8, !dbg !5224
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5224
  %cmp11 = icmp eq i32 %bf.clear10, 38, !dbg !5225
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5226

if.then12:                                        ; preds = %land.lhs.true8
  store i32 1, i32* %retval, align 4, !dbg !5227
  br label %return, !dbg !5227

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5228
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5228
  %bf.load14 = load i32, i32* %10, align 8, !dbg !5228
  %bf.lshr15 = lshr i32 %bf.load14, 16, !dbg !5228
  %bf.clear16 = and i32 %bf.lshr15, 255, !dbg !5228
  %cmp17 = icmp eq i32 %bf.clear16, 1, !dbg !5230
  br i1 %cmp17, label %land.lhs.true18, label %if.end27, !dbg !5231

land.lhs.true18:                                  ; preds = %if.end13
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5232
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5232
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !5232
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !5232
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !5232
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !5232
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5232
  %bf.load23 = load i32, i32* %13, align 8, !dbg !5232
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !5232
  %cmp25 = icmp eq i32 %bf.clear24, 38, !dbg !5233
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5234

if.then26:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %retval, align 4, !dbg !5235
  br label %return, !dbg !5235

if.end27:                                         ; preds = %land.lhs.true18, %if.end13
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5236
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5236
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !5236
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !5236
  %rt_mem = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !5236
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5236
  %cmp31 = icmp eq %struct.mem_attrs* %15, null, !dbg !5236
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !5236

cond.true:                                        ; preds = %if.end27
  br label %cond.end, !dbg !5236

cond.false:                                       ; preds = %if.end27
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5236
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5236
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5236
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !5236
  %rt_mem35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.mem_attrs**, !dbg !5236
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem35, align 8, !dbg !5236
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %17, i32 0, i32 3, !dbg !5236
  %18 = load i32, i32* %alias, align 8, !dbg !5236
  br label %cond.end, !dbg !5236

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %18, %cond.false ], !dbg !5236
  %cmp36 = icmp eq i32 %cond, -1, !dbg !5238
  br i1 %cmp36, label %if.then52, label %lor.lhs.false, !dbg !5239

lor.lhs.false:                                    ; preds = %cond.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5240
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5240
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5240
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !5240
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !5240
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !5240
  %cmp41 = icmp eq %struct.mem_attrs* %20, null, !dbg !5240
  br i1 %cmp41, label %cond.true42, label %cond.false43, !dbg !5240

cond.true42:                                      ; preds = %lor.lhs.false
  br label %cond.end49, !dbg !5240

cond.false43:                                     ; preds = %lor.lhs.false
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5240
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5240
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5240
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !5240
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !5240
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !5240
  %alias48 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 3, !dbg !5240
  %23 = load i32, i32* %alias48, align 8, !dbg !5240
  br label %cond.end49, !dbg !5240

cond.end49:                                       ; preds = %cond.false43, %cond.true42
  %cond50 = phi i32 [ 0, %cond.true42 ], [ %23, %cond.false43 ], !dbg !5240
  %cmp51 = icmp eq i32 %cond50, -1, !dbg !5241
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !5242

if.then52:                                        ; preds = %cond.end49, %cond.end
  store i32 1, i32* %retval, align 4, !dbg !5243
  br label %return, !dbg !5243

if.end53:                                         ; preds = %cond.end49
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5244
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !5244
  %bf.load54 = load i32, i32* %25, align 8, !dbg !5244
  %bf.lshr55 = lshr i32 %bf.load54, 26, !dbg !5244
  %bf.clear56 = and i32 %bf.lshr55, 1, !dbg !5244
  %tobool57 = icmp ne i32 %bf.clear56, 0, !dbg !5244
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !5246

if.then58:                                        ; preds = %if.end53
  store i32 0, i32* %retval, align 4, !dbg !5247
  br label %return, !dbg !5247

if.end59:                                         ; preds = %if.end53
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5248
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5248
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !5248
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !5248
  %rt_mem63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.mem_attrs**, !dbg !5248
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem63, align 8, !dbg !5248
  %cmp64 = icmp eq %struct.mem_attrs* %27, null, !dbg !5248
  br i1 %cmp64, label %cond.true65, label %cond.false66, !dbg !5248

cond.true65:                                      ; preds = %if.end59
  br label %cond.end71, !dbg !5248

cond.false66:                                     ; preds = %if.end59
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5248
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5248
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !5248
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 1, !dbg !5248
  %rt_mem70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.mem_attrs**, !dbg !5248
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem70, align 8, !dbg !5248
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %29, i32 0, i32 5, !dbg !5248
  %30 = load i8, i8* %addrspace, align 8, !dbg !5248
  %conv = zext i8 %30 to i32, !dbg !5248
  br label %cond.end71, !dbg !5248

cond.end71:                                       ; preds = %cond.false66, %cond.true65
  %cond72 = phi i32 [ 0, %cond.true65 ], [ %conv, %cond.false66 ], !dbg !5248
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5250
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !5250
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !5250
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !5250
  %rt_mem76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.mem_attrs**, !dbg !5250
  %32 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem76, align 8, !dbg !5250
  %cmp77 = icmp eq %struct.mem_attrs* %32, null, !dbg !5250
  br i1 %cmp77, label %cond.true79, label %cond.false80, !dbg !5250

cond.true79:                                      ; preds = %cond.end71
  br label %cond.end87, !dbg !5250

cond.false80:                                     ; preds = %cond.end71
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5250
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5250
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !5250
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 1, !dbg !5250
  %rt_mem84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.mem_attrs**, !dbg !5250
  %34 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem84, align 8, !dbg !5250
  %addrspace85 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %34, i32 0, i32 5, !dbg !5250
  %35 = load i8, i8* %addrspace85, align 8, !dbg !5250
  %conv86 = zext i8 %35 to i32, !dbg !5250
  br label %cond.end87, !dbg !5250

cond.end87:                                       ; preds = %cond.false80, %cond.true79
  %cond88 = phi i32 [ 0, %cond.true79 ], [ %conv86, %cond.false80 ], !dbg !5250
  %cmp89 = icmp ne i32 %cond72, %cond88, !dbg !5251
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !5252

if.then91:                                        ; preds = %cond.end87
  store i32 1, i32* %retval, align 4, !dbg !5253
  br label %return, !dbg !5253

if.end92:                                         ; preds = %cond.end87
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5254
  %tobool93 = icmp ne %struct.rtx_def* %36, null, !dbg !5254
  br i1 %tobool93, label %if.end99, label %if.then94, !dbg !5256

if.then94:                                        ; preds = %if.end92
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5257
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5257
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !5257
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 0, !dbg !5257
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !5257
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !5257
  %call = call %struct.rtx_def* @get_addr(%struct.rtx_def* %38), !dbg !5258
  store %struct.rtx_def* %call, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5259
  br label %if.end99, !dbg !5260

if.end99:                                         ; preds = %if.then94, %if.end92
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5261
  %40 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr.addr, align 8, !dbg !5263
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5264
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !5264
  %bf.load100 = load i32, i32* %42, align 8, !dbg !5264
  %bf.lshr101 = lshr i32 %bf.load100, 16, !dbg !5264
  %bf.clear102 = and i32 %bf.lshr101, 255, !dbg !5264
  %43 = load i32, i32* %mem_mode.addr, align 4, !dbg !5265
  %call103 = call i32 @base_alias_check(%struct.rtx_def* %39, %struct.rtx_def* %40, i32 %bf.clear102, i32 %43), !dbg !5266
  %tobool104 = icmp ne i32 %call103, 0, !dbg !5266
  br i1 %tobool104, label %if.end106, label %if.then105, !dbg !5267

if.then105:                                       ; preds = %if.end99
  store i32 0, i32* %retval, align 4, !dbg !5268
  br label %return, !dbg !5268

if.end106:                                        ; preds = %if.end99
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5269
  %call107 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %44), !dbg !5270
  store %struct.rtx_def* %call107, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5271
  %45 = load i32, i32* %mem_mode.addr, align 4, !dbg !5272
  %idxprom = zext i32 %45 to i64, !dbg !5272
  %arrayidx108 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5272
  %46 = load i8, i8* %arrayidx108, align 1, !dbg !5272
  %conv109 = zext i8 %46 to i16, !dbg !5272
  %conv110 = zext i16 %conv109 to i32, !dbg !5272
  %47 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr.addr, align 8, !dbg !5274
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5275
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5275
  %bf.load111 = load i32, i32* %49, align 8, !dbg !5275
  %bf.lshr112 = lshr i32 %bf.load111, 16, !dbg !5275
  %bf.clear113 = and i32 %bf.lshr112, 255, !dbg !5275
  %idxprom114 = zext i32 %bf.clear113 to i64, !dbg !5275
  %arrayidx115 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom114, !dbg !5275
  %50 = load i8, i8* %arrayidx115, align 1, !dbg !5275
  %conv116 = zext i8 %50 to i16, !dbg !5275
  %conv117 = zext i16 %conv116 to i32, !dbg !5275
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5276
  %call118 = call i32 @memrefs_conflict_p(i32 %conv110, %struct.rtx_def* %47, i32 %conv117, %struct.rtx_def* %51, i64 0), !dbg !5277
  store i32 %call118, i32* %ret, align 4, !dbg !5278
  %cmp119 = icmp ne i32 %call118, -1, !dbg !5279
  br i1 %cmp119, label %if.then121, label %if.end122, !dbg !5280

if.then121:                                       ; preds = %if.end106
  %52 = load i32, i32* %ret, align 4, !dbg !5281
  store i32 %52, i32* %retval, align 4, !dbg !5282
  br label %return, !dbg !5282

if.end122:                                        ; preds = %if.end106
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5283
  %54 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5283
  %call123 = call i32 @mems_in_disjoint_alias_sets_p(%struct.rtx_def* %53, %struct.rtx_def* %54), !dbg !5283
  %tobool124 = icmp ne i32 %call123, 0, !dbg !5283
  br i1 %tobool124, label %if.then125, label %if.end126, !dbg !5285

if.then125:                                       ; preds = %if.end122
  store i32 0, i32* %retval, align 4, !dbg !5286
  br label %return, !dbg !5286

if.end126:                                        ; preds = %if.end122
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5287
  %56 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5289
  %call127 = call i32 @nonoverlapping_memrefs_p(%struct.rtx_def* %55, %struct.rtx_def* %56), !dbg !5290
  %tobool128 = icmp ne i32 %call127, 0, !dbg !5290
  br i1 %tobool128, label %if.then129, label %if.end130, !dbg !5291

if.then129:                                       ; preds = %if.end126
  store i32 0, i32* %retval, align 4, !dbg !5292
  br label %return, !dbg !5292

if.end130:                                        ; preds = %if.end126
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5293
  %call131 = call i32 @aliases_everything_p(%struct.rtx_def* %57), !dbg !5295
  %tobool132 = icmp ne i32 %call131, 0, !dbg !5295
  br i1 %tobool132, label %if.then133, label %if.end134, !dbg !5296

if.then133:                                       ; preds = %if.end130
  store i32 1, i32* %retval, align 4, !dbg !5297
  br label %return, !dbg !5297

if.end134:                                        ; preds = %if.end130
  %58 = load i32, i32* %mem_mode.addr, align 4, !dbg !5298
  %cmp135 = icmp eq i32 %58, 14, !dbg !5300
  br i1 %cmp135, label %if.then142, label %lor.lhs.false137, !dbg !5301

lor.lhs.false137:                                 ; preds = %if.end134
  %59 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr.addr, align 8, !dbg !5302
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !5302
  %bf.load138 = load i32, i32* %60, align 8, !dbg !5302
  %bf.clear139 = and i32 %bf.load138, 65535, !dbg !5302
  %cmp140 = icmp eq i32 %bf.clear139, 61, !dbg !5303
  br i1 %cmp140, label %if.then142, label %if.end143, !dbg !5304

if.then142:                                       ; preds = %lor.lhs.false137, %if.end134
  store i32 1, i32* %retval, align 4, !dbg !5305
  br label %return, !dbg !5305

if.end143:                                        ; preds = %lor.lhs.false137
  %61 = load i32, i32* %mem_mode.addr, align 4, !dbg !5306
  %cmp144 = icmp eq i32 %61, 1, !dbg !5308
  br i1 %cmp144, label %if.then152, label %lor.lhs.false146, !dbg !5309

lor.lhs.false146:                                 ; preds = %if.end143
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5310
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !5310
  %bf.load147 = load i32, i32* %63, align 8, !dbg !5310
  %bf.lshr148 = lshr i32 %bf.load147, 16, !dbg !5310
  %bf.clear149 = and i32 %bf.lshr148, 255, !dbg !5310
  %cmp150 = icmp eq i32 %bf.clear149, 1, !dbg !5311
  br i1 %cmp150, label %if.then152, label %if.end153, !dbg !5312

if.then152:                                       ; preds = %lor.lhs.false146, %if.end143
  store i32 1, i32* %retval, align 4, !dbg !5313
  br label %return, !dbg !5313

if.end153:                                        ; preds = %lor.lhs.false146
  %64 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5314
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5316
  %66 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr.addr, align 8, !dbg !5317
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x_addr.addr, align 8, !dbg !5318
  %68 = load i8 (%struct.rtx_def*, i8)*, i8 (%struct.rtx_def*, i8)** %varies.addr, align 8, !dbg !5319
  %call154 = call %struct.rtx_def* @fixed_scalar_and_varying_struct_p(%struct.rtx_def* %64, %struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %67, i8 (%struct.rtx_def*, i8)* %68), !dbg !5320
  %tobool155 = icmp ne %struct.rtx_def* %call154, null, !dbg !5320
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !5321

if.then156:                                       ; preds = %if.end153
  store i32 0, i32* %retval, align 4, !dbg !5322
  br label %return, !dbg !5322

if.end157:                                        ; preds = %if.end153
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5323
  %70 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5324
  %call158 = call zeroext i8 @rtx_refs_may_alias_p(%struct.rtx_def* %69, %struct.rtx_def* %70, i8 zeroext 1), !dbg !5325
  %conv159 = zext i8 %call158 to i32, !dbg !5325
  store i32 %conv159, i32* %retval, align 4, !dbg !5326
  br label %return, !dbg !5326

return:                                           ; preds = %if.end157, %if.then156, %if.then152, %if.then142, %if.then133, %if.then129, %if.then125, %if.then121, %if.then105, %if.then91, %if.then58, %if.then52, %if.then26, %if.then12, %if.then
  %71 = load i32, i32* %retval, align 4, !dbg !5327
  ret i32 %71, !dbg !5327
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @anti_dependence(%struct.rtx_def* %mem, %struct.rtx_def* %x) #0 !dbg !5328 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5329, metadata !DIExpression()), !dbg !5330
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5331, metadata !DIExpression()), !dbg !5332
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5333
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5334
  %call = call i32 @write_dependence_p(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 0), !dbg !5335
  ret i32 %call, !dbg !5336
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @write_dependence_p(%struct.rtx_def* %mem, %struct.rtx_def* %x, i32 %writep) #0 !dbg !5337 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %writep.addr = alloca i32, align 4
  %x_addr = alloca %struct.rtx_def*, align 8
  %mem_addr = alloca %struct.rtx_def*, align 8
  %fixed_scalar = alloca %struct.rtx_def*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %ret = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5340, metadata !DIExpression()), !dbg !5341
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5342, metadata !DIExpression()), !dbg !5343
  store i32 %writep, i32* %writep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %writep.addr, metadata !5344, metadata !DIExpression()), !dbg !5345
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x_addr, metadata !5346, metadata !DIExpression()), !dbg !5347
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem_addr, metadata !5348, metadata !DIExpression()), !dbg !5349
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fixed_scalar, metadata !5350, metadata !DIExpression()), !dbg !5351
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %base, metadata !5352, metadata !DIExpression()), !dbg !5353
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5354, metadata !DIExpression()), !dbg !5355
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5356
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5356
  %bf.load = load i32, i32* %1, align 8, !dbg !5356
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !5356
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5356
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !5356
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5358

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5359
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5359
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5359
  %bf.lshr2 = lshr i32 %bf.load1, 27, !dbg !5359
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !5359
  %tobool4 = icmp ne i32 %bf.clear3, 0, !dbg !5359
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5360

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !5361
  br label %return, !dbg !5361

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5362
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5362
  %bf.load5 = load i32, i32* %5, align 8, !dbg !5362
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !5362
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !5362
  %cmp = icmp eq i32 %bf.clear7, 1, !dbg !5364
  br i1 %cmp, label %land.lhs.true8, label %if.end13, !dbg !5365

land.lhs.true8:                                   ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5366
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5366
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5366
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5366
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5366
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5366
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5366
  %bf.load9 = load i32, i32* %8, align 8, !dbg !5366
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5366
  %cmp11 = icmp eq i32 %bf.clear10, 38, !dbg !5367
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5368

if.then12:                                        ; preds = %land.lhs.true8
  store i32 1, i32* %retval, align 4, !dbg !5369
  br label %return, !dbg !5369

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5370
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5370
  %bf.load14 = load i32, i32* %10, align 8, !dbg !5370
  %bf.lshr15 = lshr i32 %bf.load14, 16, !dbg !5370
  %bf.clear16 = and i32 %bf.lshr15, 255, !dbg !5370
  %cmp17 = icmp eq i32 %bf.clear16, 1, !dbg !5372
  br i1 %cmp17, label %land.lhs.true18, label %if.end27, !dbg !5373

land.lhs.true18:                                  ; preds = %if.end13
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5374
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5374
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !5374
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !5374
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !5374
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !5374
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !5374
  %bf.load23 = load i32, i32* %13, align 8, !dbg !5374
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !5374
  %cmp25 = icmp eq i32 %bf.clear24, 38, !dbg !5375
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5376

if.then26:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %retval, align 4, !dbg !5377
  br label %return, !dbg !5377

if.end27:                                         ; preds = %land.lhs.true18, %if.end13
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5378
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5378
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !5378
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !5378
  %rt_mem = bitcast %union.rtunion_def* %arrayidx30 to %struct.mem_attrs**, !dbg !5378
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5378
  %cmp31 = icmp eq %struct.mem_attrs* %15, null, !dbg !5378
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !5378

cond.true:                                        ; preds = %if.end27
  br label %cond.end, !dbg !5378

cond.false:                                       ; preds = %if.end27
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5378
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5378
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5378
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !5378
  %rt_mem35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.mem_attrs**, !dbg !5378
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem35, align 8, !dbg !5378
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %17, i32 0, i32 3, !dbg !5378
  %18 = load i32, i32* %alias, align 8, !dbg !5378
  br label %cond.end, !dbg !5378

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %18, %cond.false ], !dbg !5378
  %cmp36 = icmp eq i32 %cond, -1, !dbg !5380
  br i1 %cmp36, label %if.then52, label %lor.lhs.false, !dbg !5381

lor.lhs.false:                                    ; preds = %cond.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5382
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5382
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5382
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !5382
  %rt_mem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**, !dbg !5382
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem40, align 8, !dbg !5382
  %cmp41 = icmp eq %struct.mem_attrs* %20, null, !dbg !5382
  br i1 %cmp41, label %cond.true42, label %cond.false43, !dbg !5382

cond.true42:                                      ; preds = %lor.lhs.false
  br label %cond.end49, !dbg !5382

cond.false43:                                     ; preds = %lor.lhs.false
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5382
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5382
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5382
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !5382
  %rt_mem47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.mem_attrs**, !dbg !5382
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem47, align 8, !dbg !5382
  %alias48 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 3, !dbg !5382
  %23 = load i32, i32* %alias48, align 8, !dbg !5382
  br label %cond.end49, !dbg !5382

cond.end49:                                       ; preds = %cond.false43, %cond.true42
  %cond50 = phi i32 [ 0, %cond.true42 ], [ %23, %cond.false43 ], !dbg !5382
  %cmp51 = icmp eq i32 %cond50, -1, !dbg !5383
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !5384

if.then52:                                        ; preds = %cond.end49, %cond.end
  store i32 1, i32* %retval, align 4, !dbg !5385
  br label %return, !dbg !5385

if.end53:                                         ; preds = %cond.end49
  %24 = load i32, i32* %writep.addr, align 4, !dbg !5386
  %tobool54 = icmp ne i32 %24, 0, !dbg !5386
  br i1 %tobool54, label %if.end61, label %land.lhs.true55, !dbg !5388

land.lhs.true55:                                  ; preds = %if.end53
  %25 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5389
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5389
  %bf.load56 = load i32, i32* %26, align 8, !dbg !5389
  %bf.lshr57 = lshr i32 %bf.load56, 26, !dbg !5389
  %bf.clear58 = and i32 %bf.lshr57, 1, !dbg !5389
  %tobool59 = icmp ne i32 %bf.clear58, 0, !dbg !5389
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !5390

if.then60:                                        ; preds = %land.lhs.true55
  store i32 0, i32* %retval, align 4, !dbg !5391
  br label %return, !dbg !5391

if.end61:                                         ; preds = %land.lhs.true55, %if.end53
  %27 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5392
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5392
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !5392
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 1, !dbg !5392
  %rt_mem65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.mem_attrs**, !dbg !5392
  %28 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem65, align 8, !dbg !5392
  %cmp66 = icmp eq %struct.mem_attrs* %28, null, !dbg !5392
  br i1 %cmp66, label %cond.true67, label %cond.false68, !dbg !5392

cond.true67:                                      ; preds = %if.end61
  br label %cond.end73, !dbg !5392

cond.false68:                                     ; preds = %if.end61
  %29 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5392
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !5392
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !5392
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 1, !dbg !5392
  %rt_mem72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.mem_attrs**, !dbg !5392
  %30 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem72, align 8, !dbg !5392
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %30, i32 0, i32 5, !dbg !5392
  %31 = load i8, i8* %addrspace, align 8, !dbg !5392
  %conv = zext i8 %31 to i32, !dbg !5392
  br label %cond.end73, !dbg !5392

cond.end73:                                       ; preds = %cond.false68, %cond.true67
  %cond74 = phi i32 [ 0, %cond.true67 ], [ %conv, %cond.false68 ], !dbg !5392
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5394
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5394
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !5394
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !5394
  %rt_mem78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.mem_attrs**, !dbg !5394
  %33 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem78, align 8, !dbg !5394
  %cmp79 = icmp eq %struct.mem_attrs* %33, null, !dbg !5394
  br i1 %cmp79, label %cond.true81, label %cond.false82, !dbg !5394

cond.true81:                                      ; preds = %cond.end73
  br label %cond.end89, !dbg !5394

cond.false82:                                     ; preds = %cond.end73
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5394
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5394
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !5394
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 1, !dbg !5394
  %rt_mem86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.mem_attrs**, !dbg !5394
  %35 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem86, align 8, !dbg !5394
  %addrspace87 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %35, i32 0, i32 5, !dbg !5394
  %36 = load i8, i8* %addrspace87, align 8, !dbg !5394
  %conv88 = zext i8 %36 to i32, !dbg !5394
  br label %cond.end89, !dbg !5394

cond.end89:                                       ; preds = %cond.false82, %cond.true81
  %cond90 = phi i32 [ 0, %cond.true81 ], [ %conv88, %cond.false82 ], !dbg !5394
  %cmp91 = icmp ne i32 %cond74, %cond90, !dbg !5395
  br i1 %cmp91, label %if.then93, label %if.end94, !dbg !5396

if.then93:                                        ; preds = %cond.end89
  store i32 1, i32* %retval, align 4, !dbg !5397
  br label %return, !dbg !5397

if.end94:                                         ; preds = %cond.end89
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5398
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5398
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !5398
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 0, !dbg !5398
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !5398
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !5398
  %call = call %struct.rtx_def* @get_addr(%struct.rtx_def* %38), !dbg !5399
  store %struct.rtx_def* %call, %struct.rtx_def** %x_addr, align 8, !dbg !5400
  %39 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5401
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5401
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !5401
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 0, !dbg !5401
  %rt_rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**, !dbg !5401
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx102, align 8, !dbg !5401
  %call103 = call %struct.rtx_def* @get_addr(%struct.rtx_def* %40), !dbg !5402
  store %struct.rtx_def* %call103, %struct.rtx_def** %mem_addr, align 8, !dbg !5403
  %41 = load i32, i32* %writep.addr, align 4, !dbg !5404
  %tobool104 = icmp ne i32 %41, 0, !dbg !5404
  br i1 %tobool104, label %if.end125, label %if.then105, !dbg !5406

if.then105:                                       ; preds = %if.end94
  %42 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !5407
  %call106 = call %struct.rtx_def* @find_base_term(%struct.rtx_def* %42), !dbg !5409
  store %struct.rtx_def* %call106, %struct.rtx_def** %base, align 8, !dbg !5410
  %43 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !5411
  %tobool107 = icmp ne %struct.rtx_def* %43, null, !dbg !5411
  br i1 %tobool107, label %land.lhs.true108, label %if.end124, !dbg !5413

land.lhs.true108:                                 ; preds = %if.then105
  %44 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !5414
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !5414
  %bf.load109 = load i32, i32* %45, align 8, !dbg !5414
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !5414
  %cmp111 = icmp eq i32 %bf.clear110, 44, !dbg !5415
  br i1 %cmp111, label %if.then123, label %lor.lhs.false113, !dbg !5416

lor.lhs.false113:                                 ; preds = %land.lhs.true108
  %46 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !5417
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5417
  %bf.load114 = load i32, i32* %47, align 8, !dbg !5417
  %bf.clear115 = and i32 %bf.load114, 65535, !dbg !5417
  %cmp116 = icmp eq i32 %bf.clear115, 45, !dbg !5418
  br i1 %cmp116, label %land.lhs.true118, label %if.end124, !dbg !5419

land.lhs.true118:                                 ; preds = %lor.lhs.false113
  %48 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8, !dbg !5420
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5420
  %bf.load119 = load i32, i32* %49, align 8, !dbg !5420
  %bf.lshr120 = lshr i32 %bf.load119, 26, !dbg !5420
  %bf.clear121 = and i32 %bf.lshr120, 1, !dbg !5420
  %tobool122 = icmp ne i32 %bf.clear121, 0, !dbg !5420
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !5421

if.then123:                                       ; preds = %land.lhs.true118, %land.lhs.true108
  store i32 0, i32* %retval, align 4, !dbg !5422
  br label %return, !dbg !5422

if.end124:                                        ; preds = %land.lhs.true118, %lor.lhs.false113, %if.then105
  br label %if.end125, !dbg !5423

if.end125:                                        ; preds = %if.end124, %if.end94
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !5424
  %51 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !5426
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5427
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !5427
  %bf.load126 = load i32, i32* %53, align 8, !dbg !5427
  %bf.lshr127 = lshr i32 %bf.load126, 16, !dbg !5427
  %bf.clear128 = and i32 %bf.lshr127, 255, !dbg !5427
  %54 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5428
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !5428
  %bf.load129 = load i32, i32* %55, align 8, !dbg !5428
  %bf.lshr130 = lshr i32 %bf.load129, 16, !dbg !5428
  %bf.clear131 = and i32 %bf.lshr130, 255, !dbg !5428
  %call132 = call i32 @base_alias_check(%struct.rtx_def* %50, %struct.rtx_def* %51, i32 %bf.clear128, i32 %bf.clear131), !dbg !5429
  %tobool133 = icmp ne i32 %call132, 0, !dbg !5429
  br i1 %tobool133, label %if.end135, label %if.then134, !dbg !5430

if.then134:                                       ; preds = %if.end125
  store i32 0, i32* %retval, align 4, !dbg !5431
  br label %return, !dbg !5431

if.end135:                                        ; preds = %if.end125
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !5432
  %call136 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %56), !dbg !5433
  store %struct.rtx_def* %call136, %struct.rtx_def** %x_addr, align 8, !dbg !5434
  %57 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !5435
  %call137 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %57), !dbg !5436
  store %struct.rtx_def* %call137, %struct.rtx_def** %mem_addr, align 8, !dbg !5437
  %58 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5438
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !5438
  %bf.load138 = load i32, i32* %59, align 8, !dbg !5438
  %bf.lshr139 = lshr i32 %bf.load138, 16, !dbg !5438
  %bf.clear140 = and i32 %bf.lshr139, 255, !dbg !5438
  %idxprom = zext i32 %bf.clear140 to i64, !dbg !5438
  %arrayidx141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5438
  %60 = load i8, i8* %arrayidx141, align 1, !dbg !5438
  %conv142 = zext i8 %60 to i16, !dbg !5438
  %conv143 = zext i16 %conv142 to i32, !dbg !5438
  %61 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !5440
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5441
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !5441
  %bf.load144 = load i32, i32* %63, align 8, !dbg !5441
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !5441
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !5441
  %idxprom147 = zext i32 %bf.clear146 to i64, !dbg !5441
  %arrayidx148 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom147, !dbg !5441
  %64 = load i8, i8* %arrayidx148, align 1, !dbg !5441
  %conv149 = zext i8 %64 to i16, !dbg !5441
  %conv150 = zext i16 %conv149 to i32, !dbg !5441
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !5442
  %call151 = call i32 @memrefs_conflict_p(i32 %conv143, %struct.rtx_def* %61, i32 %conv150, %struct.rtx_def* %65, i64 0), !dbg !5443
  store i32 %call151, i32* %ret, align 4, !dbg !5444
  %cmp152 = icmp ne i32 %call151, -1, !dbg !5445
  br i1 %cmp152, label %if.then154, label %if.end155, !dbg !5446

if.then154:                                       ; preds = %if.end135
  %66 = load i32, i32* %ret, align 4, !dbg !5447
  store i32 %66, i32* %retval, align 4, !dbg !5448
  br label %return, !dbg !5448

if.end155:                                        ; preds = %if.end135
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5449
  %68 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5451
  %call156 = call i32 @nonoverlapping_memrefs_p(%struct.rtx_def* %67, %struct.rtx_def* %68), !dbg !5452
  %tobool157 = icmp ne i32 %call156, 0, !dbg !5452
  br i1 %tobool157, label %if.then158, label %if.end159, !dbg !5453

if.then158:                                       ; preds = %if.end155
  store i32 0, i32* %retval, align 4, !dbg !5454
  br label %return, !dbg !5454

if.end159:                                        ; preds = %if.end155
  %69 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5455
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5456
  %71 = load %struct.rtx_def*, %struct.rtx_def** %mem_addr, align 8, !dbg !5457
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x_addr, align 8, !dbg !5458
  %call160 = call %struct.rtx_def* @fixed_scalar_and_varying_struct_p(%struct.rtx_def* %69, %struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72, i8 (%struct.rtx_def*, i8)* @rtx_addr_varies_p), !dbg !5459
  store %struct.rtx_def* %call160, %struct.rtx_def** %fixed_scalar, align 8, !dbg !5460
  %73 = load %struct.rtx_def*, %struct.rtx_def** %fixed_scalar, align 8, !dbg !5461
  %74 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5463
  %cmp161 = icmp eq %struct.rtx_def* %73, %74, !dbg !5464
  br i1 %cmp161, label %land.lhs.true163, label %lor.lhs.false166, !dbg !5465

land.lhs.true163:                                 ; preds = %if.end159
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5466
  %call164 = call i32 @aliases_everything_p(%struct.rtx_def* %75), !dbg !5467
  %tobool165 = icmp ne i32 %call164, 0, !dbg !5467
  br i1 %tobool165, label %lor.lhs.false166, label %if.then172, !dbg !5468

lor.lhs.false166:                                 ; preds = %land.lhs.true163, %if.end159
  %76 = load %struct.rtx_def*, %struct.rtx_def** %fixed_scalar, align 8, !dbg !5469
  %77 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5470
  %cmp167 = icmp eq %struct.rtx_def* %76, %77, !dbg !5471
  br i1 %cmp167, label %land.lhs.true169, label %if.end173, !dbg !5472

land.lhs.true169:                                 ; preds = %lor.lhs.false166
  %78 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5473
  %call170 = call i32 @aliases_everything_p(%struct.rtx_def* %78), !dbg !5474
  %tobool171 = icmp ne i32 %call170, 0, !dbg !5474
  br i1 %tobool171, label %if.end173, label %if.then172, !dbg !5475

if.then172:                                       ; preds = %land.lhs.true169, %land.lhs.true163
  store i32 0, i32* %retval, align 4, !dbg !5476
  br label %return, !dbg !5476

if.end173:                                        ; preds = %land.lhs.true169, %lor.lhs.false166
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5477
  %80 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5478
  %call174 = call zeroext i8 @rtx_refs_may_alias_p(%struct.rtx_def* %79, %struct.rtx_def* %80, i8 zeroext 0), !dbg !5479
  %conv175 = zext i8 %call174 to i32, !dbg !5479
  store i32 %conv175, i32* %retval, align 4, !dbg !5480
  br label %return, !dbg !5480

return:                                           ; preds = %if.end173, %if.then172, %if.then158, %if.then154, %if.then134, %if.then123, %if.then93, %if.then60, %if.then52, %if.then26, %if.then12, %if.then
  %81 = load i32, i32* %retval, align 4, !dbg !5481
  ret i32 %81, !dbg !5481
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @output_dependence(%struct.rtx_def* %mem, %struct.rtx_def* %x) #0 !dbg !5482 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5485, metadata !DIExpression()), !dbg !5486
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5487
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5488
  %call = call i32 @write_dependence_p(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 1), !dbg !5489
  ret i32 %call, !dbg !5490
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_alias_target() #0 !dbg !5491 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5494, metadata !DIExpression()), !dbg !5495
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([53 x %struct.rtx_def*]* @static_reg_base_value to i8*), i8 0, i64 424, i1 false), !dbg !5496
  store i32 0, i32* %i, align 4, !dbg !5497
  br label %for.cond, !dbg !5499

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5500
  %cmp = icmp slt i32 %0, 53, !dbg !5502
  br i1 %cmp, label %for.body, label %for.end, !dbg !5503

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !5504
  %call = call zeroext i8 @ix86_function_arg_regno_p(i32 %1), !dbg !5504
  %conv = zext i8 %call to i32, !dbg !5504
  %tobool = icmp ne i32 %conv, 0, !dbg !5504
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5506

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !5507
  %call1 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 %2, i32 16), !dbg !5507
  %conv2 = zext i8 %call1 to i32, !dbg !5507
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !5507
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5508

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4, !dbg !5509
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 16, i32 %3), !dbg !5509
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 0, %struct.rtx_def* %call4), !dbg !5509
  %4 = load i32, i32* %i, align 4, !dbg !5510
  %idxprom = sext i32 %4 to i64, !dbg !5511
  %arrayidx = getelementptr inbounds [53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_reg_base_value, i64 0, i64 %idxprom, !dbg !5511
  store %struct.rtx_def* %call5, %struct.rtx_def** %arrayidx, align 8, !dbg !5512
  br label %if.end, !dbg !5511

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5507

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !5513
  %inc = add nsw i32 %5, 1, !dbg !5513
  store i32 %inc, i32* %i, align 4, !dbg !5513
  br label %for.cond, !dbg !5514, !llvm.loop !5515

for.end:                                          ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !5517
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 16, %struct.rtx_def* %6), !dbg !5517
  store %struct.rtx_def* %call6, %struct.rtx_def** getelementptr inbounds ([53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_reg_base_value, i64 0, i64 7), align 8, !dbg !5518
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !5519
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 16, %struct.rtx_def* %7), !dbg !5519
  store %struct.rtx_def* %call7, %struct.rtx_def** getelementptr inbounds ([53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_reg_base_value, i64 0, i64 16), align 16, !dbg !5520
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !5521
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 16, %struct.rtx_def* %8), !dbg !5521
  store %struct.rtx_def* %call8, %struct.rtx_def** getelementptr inbounds ([53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_reg_base_value, i64 0, i64 20), align 16, !dbg !5522
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !5523
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 16, %struct.rtx_def* %9), !dbg !5523
  store %struct.rtx_def* %call9, %struct.rtx_def** getelementptr inbounds ([53 x %struct.rtx_def*], [53 x %struct.rtx_def*]* @static_reg_base_value, i64 0, i64 6), align 16, !dbg !5524
  ret void, !dbg !5525
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local zeroext i8 @ix86_function_arg_regno_p(i32) #2

declare dso_local zeroext i8 @ix86_hard_regno_mode_ok(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @memory_modified_in_insn_p(%struct.rtx_def* %mem, %struct.rtx_def* %insn) #0 !dbg !5526 {
entry:
  %retval = alloca i8, align 1
  %mem.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !5529, metadata !DIExpression()), !dbg !5530
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5531, metadata !DIExpression()), !dbg !5532
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5533
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5533
  %bf.load = load i32, i32* %1, align 8, !dbg !5533
  %bf.clear = and i32 %bf.load, 65535, !dbg !5533
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5533
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !5533

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5533
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5533
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5533
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5533
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !5533
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !5533

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5533
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5533
  %bf.load5 = load i32, i32* %5, align 8, !dbg !5533
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5533
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !5533
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !5533

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5533
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5533
  %bf.load9 = load i32, i32* %7, align 8, !dbg !5533
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5533
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !5533
  br i1 %cmp11, label %if.end, label %if.then, !dbg !5535

if.then:                                          ; preds = %lor.lhs.false8
  store i8 0, i8* %retval, align 1, !dbg !5536
  br label %return, !dbg !5536

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  store i8 0, i8* @memory_modified, align 1, !dbg !5537
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5538
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5538
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5538
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5538
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5538
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5538
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !5539
  %11 = bitcast %struct.rtx_def* %10 to i8*, !dbg !5539
  call void @note_stores(%struct.rtx_def* %9, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @memory_modified_1, i8* %11), !dbg !5540
  %12 = load i8, i8* @memory_modified, align 1, !dbg !5541
  store i8 %12, i8* %retval, align 1, !dbg !5542
  br label %return, !dbg !5542

return:                                           ; preds = %if.end, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !5543
  ret i8 %13, !dbg !5543
}

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @memory_modified_1(%struct.rtx_def* %x, %struct.rtx_def* %pat, i8* %data) #0 !dbg !5544 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5547, metadata !DIExpression()), !dbg !5548
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5553
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5553
  %bf.load = load i32, i32* %1, align 8, !dbg !5553
  %bf.clear = and i32 %bf.load, 65535, !dbg !5553
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !5553
  br i1 %cmp, label %if.then, label %if.end4, !dbg !5555

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5556
  %3 = load i8*, i8** %data.addr, align 8, !dbg !5559
  %4 = bitcast i8* %3 to %struct.rtx_def*, !dbg !5560
  %call = call i32 @anti_dependence(%struct.rtx_def* %2, %struct.rtx_def* %4), !dbg !5561
  %tobool = icmp ne i32 %call, 0, !dbg !5561
  br i1 %tobool, label %if.then3, label %lor.lhs.false, !dbg !5562

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5563
  %6 = load i8*, i8** %data.addr, align 8, !dbg !5564
  %7 = bitcast i8* %6 to %struct.rtx_def*, !dbg !5565
  %call1 = call i32 @output_dependence(%struct.rtx_def* %5, %struct.rtx_def* %7), !dbg !5566
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5566
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5567

if.then3:                                         ; preds = %lor.lhs.false, %if.then
  store i8 1, i8* @memory_modified, align 1, !dbg !5568
  br label %if.end, !dbg !5569

if.end:                                           ; preds = %if.then3, %lor.lhs.false
  br label %if.end4, !dbg !5570

if.end4:                                          ; preds = %if.end, %entry
  ret void, !dbg !5571
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_alias_analysis() #0 !dbg !5572 {
entry:
  %maxreg = alloca i32, align 4
  %changed = alloca i32, align 4
  %pass = alloca i32, align 4
  %i = alloca i32, align 4
  %ui = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %maxreg, metadata !5573, metadata !DIExpression()), !dbg !5574
  %call = call i32 @max_reg_num(), !dbg !5575
  store i32 %call, i32* %maxreg, align 4, !dbg !5574
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !5576, metadata !DIExpression()), !dbg !5577
  call void @llvm.dbg.declare(metadata i32* %pass, metadata !5578, metadata !DIExpression()), !dbg !5579
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata i32* %ui, metadata !5582, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5584, metadata !DIExpression()), !dbg !5585
  br label %do.body, !dbg !5586

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !5587
  %tobool = icmp ne i8 %0, 0, !dbg !5587
  br i1 %tobool, label %if.then, label %if.end, !dbg !5590

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 38), !dbg !5587
  br label %if.end, !dbg !5587

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !5590

do.end:                                           ; preds = %if.end
  %1 = load i32, i32* %maxreg, align 4, !dbg !5591
  %sub = sub i32 %1, 53, !dbg !5592
  store i32 %sub, i32* @reg_known_value_size, align 4, !dbg !5593
  %2 = load i32, i32* @reg_known_value_size, align 4, !dbg !5594
  %conv = zext i32 %2 to i64, !dbg !5594
  %mul = mul i64 %conv, 8, !dbg !5594
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !5594
  %3 = bitcast i8* %call1 to %struct.rtx_def**, !dbg !5594
  store %struct.rtx_def** %3, %struct.rtx_def*** @reg_known_value, align 8, !dbg !5595
  %4 = load i32, i32* @reg_known_value_size, align 4, !dbg !5596
  %conv2 = zext i32 %4 to i64, !dbg !5596
  %call3 = call i8* @xcalloc(i64 %conv2, i64 1), !dbg !5596
  store i8* %call3, i8** @reg_known_equiv_p, align 8, !dbg !5597
  %5 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @old_reg_base_value, align 8, !dbg !5598
  %tobool4 = icmp ne %struct.VEC_rtx_gc* %5, null, !dbg !5598
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !5600

if.then5:                                         ; preds = %do.end
  %6 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @old_reg_base_value, align 8, !dbg !5601
  store %struct.VEC_rtx_gc* %6, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5602
  br label %if.end6, !dbg !5603

if.end6:                                          ; preds = %if.then5, %do.end
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5604
  %tobool7 = icmp ne %struct.VEC_rtx_gc* %7, null, !dbg !5604
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !5606

if.then8:                                         ; preds = %if.end6
  %8 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5607
  %tobool9 = icmp ne %struct.VEC_rtx_gc* %8, null, !dbg !5607
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5607

cond.true:                                        ; preds = %if.then8
  %9 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5607
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %9, i32 0, i32 0, !dbg !5607
  br label %cond.end, !dbg !5607

cond.false:                                       ; preds = %if.then8
  br label %cond.end, !dbg !5607

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5607
  call void @VEC_rtx_base_truncate(%struct.VEC_rtx_base* %cond, i32 0), !dbg !5607
  br label %if.end10, !dbg !5607

if.end10:                                         ; preds = %cond.end, %if.end6
  %10 = load i32, i32* %maxreg, align 4, !dbg !5608
  call void @VEC_rtx_gc_safe_grow_cleared(%struct.VEC_rtx_gc** @reg_base_value, i32 %10), !dbg !5608
  %11 = load i32, i32* %maxreg, align 4, !dbg !5609
  %conv11 = zext i32 %11 to i64, !dbg !5609
  %mul12 = mul i64 8, %conv11, !dbg !5609
  %call13 = call i8* @xmalloc(i64 %mul12), !dbg !5609
  %12 = bitcast i8* %call13 to %struct.rtx_def**, !dbg !5609
  store %struct.rtx_def** %12, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5610
  %13 = load i32, i32* %maxreg, align 4, !dbg !5611
  %conv14 = zext i32 %13 to i64, !dbg !5611
  %mul15 = mul i64 1, %conv14, !dbg !5611
  %call16 = call i8* @xmalloc(i64 %mul15), !dbg !5611
  store i8* %call16, i8** @reg_seen, align 8, !dbg !5612
  store i32 0, i32* %pass, align 4, !dbg !5613
  br label %do.body17, !dbg !5614

do.body17:                                        ; preds = %land.end, %if.end10
  store i32 0, i32* %changed, align 4, !dbg !5615
  store i32 0, i32* @unique_id, align 4, !dbg !5617
  store i8 1, i8* @copying_arguments, align 1, !dbg !5618
  %14 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5619
  %15 = bitcast %struct.rtx_def** %14 to i8*, !dbg !5620
  %16 = load i32, i32* %maxreg, align 4, !dbg !5621
  %conv18 = zext i32 %16 to i64, !dbg !5621
  %mul19 = mul i64 %conv18, 8, !dbg !5622
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 %mul19, i1 false), !dbg !5620
  %17 = load i8*, i8** @reg_seen, align 8, !dbg !5623
  %18 = load i32, i32* %maxreg, align 4, !dbg !5624
  %conv20 = zext i32 %18 to i64, !dbg !5624
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 0, i64 %conv20, i1 false), !dbg !5625
  %19 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5626
  %20 = bitcast %struct.rtx_def** %19 to i8*, !dbg !5627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 16 bitcast ([53 x %struct.rtx_def*]* @static_reg_base_value to i8*), i64 424, i1 false), !dbg !5627
  %call21 = call %struct.rtx_def* @get_insns(), !dbg !5628
  store %struct.rtx_def* %call21, %struct.rtx_def** %insn, align 8, !dbg !5630
  br label %for.cond, !dbg !5631

for.cond:                                         ; preds = %for.inc, %do.body17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5632
  %tobool22 = icmp ne %struct.rtx_def* %21, null, !dbg !5634
  br i1 %tobool22, label %for.body, label %for.end, !dbg !5634

for.body:                                         ; preds = %for.cond
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5635
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5635
  %bf.load = load i32, i32* %23, align 8, !dbg !5635
  %bf.clear = and i32 %bf.load, 65535, !dbg !5635
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5635
  br i1 %cmp, label %if.then38, label %lor.lhs.false, !dbg !5635

lor.lhs.false:                                    ; preds = %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5635
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !5635
  %bf.load24 = load i32, i32* %25, align 8, !dbg !5635
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !5635
  %cmp26 = icmp eq i32 %bf.clear25, 7, !dbg !5635
  br i1 %cmp26, label %if.then38, label %lor.lhs.false28, !dbg !5635

lor.lhs.false28:                                  ; preds = %lor.lhs.false
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5635
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !5635
  %bf.load29 = load i32, i32* %27, align 8, !dbg !5635
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !5635
  %cmp31 = icmp eq i32 %bf.clear30, 9, !dbg !5635
  br i1 %cmp31, label %if.then38, label %lor.lhs.false33, !dbg !5635

lor.lhs.false33:                                  ; preds = %lor.lhs.false28
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5635
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5635
  %bf.load34 = load i32, i32* %29, align 8, !dbg !5635
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !5635
  %cmp36 = icmp eq i32 %bf.clear35, 10, !dbg !5635
  br i1 %cmp36, label %if.then38, label %if.else259, !dbg !5638

if.then38:                                        ; preds = %lor.lhs.false33, %lor.lhs.false28, %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5639, metadata !DIExpression()), !dbg !5641
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5642, metadata !DIExpression()), !dbg !5643
  %30 = load i32, i32* @reload_completed, align 4, !dbg !5644
  %tobool39 = icmp ne i32 %30, 0, !dbg !5644
  br i1 %tobool39, label %land.lhs.true, label %if.end43, !dbg !5646

land.lhs.true:                                    ; preds = %if.then38
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5647
  %call40 = call i32 @prologue_epilogue_contains(%struct.rtx_def* %31), !dbg !5648
  %tobool41 = icmp ne i32 %call40, 0, !dbg !5648
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !5649

if.then42:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !5650

if.end43:                                         ; preds = %land.lhs.true, %if.then38
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5651
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5651
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5651
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5651
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5651
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5651
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !5651
  %bf.load44 = load i32, i32* %34, align 8, !dbg !5651
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !5651
  %cmp46 = icmp eq i32 %bf.clear45, 23, !dbg !5653
  br i1 %cmp46, label %land.lhs.true48, label %if.else, !dbg !5654

land.lhs.true48:                                  ; preds = %if.end43
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5655
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5655
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !5655
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 7, !dbg !5655
  %rt_rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !5655
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx52, align 8, !dbg !5655
  %cmp53 = icmp ne %struct.rtx_def* %36, null, !dbg !5656
  br i1 %cmp53, label %land.lhs.true55, label %if.else, !dbg !5657

land.lhs.true55:                                  ; preds = %land.lhs.true48
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5658
  %call56 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %37, i32 15, %struct.rtx_def* null), !dbg !5659
  %tobool57 = icmp ne %struct.rtx_def* %call56, null, !dbg !5659
  br i1 %tobool57, label %if.then58, label %if.else, !dbg !5660

if.then58:                                        ; preds = %land.lhs.true55
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5661
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5661
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !5661
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 5, !dbg !5661
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !5661
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !5661
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5661
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !5661
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 0, !dbg !5661
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !5661
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !5661
  call void @record_set(%struct.rtx_def* %40, %struct.rtx_def* null, i8* null), !dbg !5662
  br label %if.end71, !dbg !5662

if.else:                                          ; preds = %land.lhs.true55, %land.lhs.true48, %if.end43
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5663
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5663
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !5663
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 5, !dbg !5663
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !5663
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx70, align 8, !dbg !5663
  call void @note_stores(%struct.rtx_def* %42, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @record_set, i8* null), !dbg !5664
  br label %if.end71

if.end71:                                         ; preds = %if.else, %if.then58
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5665
  %bf.load72 = load i32, i32* %44, align 8, !dbg !5665
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !5665
  %cmp74 = icmp eq i32 %bf.clear73, 8, !dbg !5665
  br i1 %cmp74, label %cond.true91, label %lor.lhs.false76, !dbg !5665

lor.lhs.false76:                                  ; preds = %if.end71
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5665
  %bf.load77 = load i32, i32* %46, align 8, !dbg !5665
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5665
  %cmp79 = icmp eq i32 %bf.clear78, 7, !dbg !5665
  br i1 %cmp79, label %cond.true91, label %lor.lhs.false81, !dbg !5665

lor.lhs.false81:                                  ; preds = %lor.lhs.false76
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5665
  %bf.load82 = load i32, i32* %48, align 8, !dbg !5665
  %bf.clear83 = and i32 %bf.load82, 65535, !dbg !5665
  %cmp84 = icmp eq i32 %bf.clear83, 9, !dbg !5665
  br i1 %cmp84, label %cond.true91, label %lor.lhs.false86, !dbg !5665

lor.lhs.false86:                                  ; preds = %lor.lhs.false81
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !5665
  %bf.load87 = load i32, i32* %50, align 8, !dbg !5665
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !5665
  %cmp89 = icmp eq i32 %bf.clear88, 10, !dbg !5665
  br i1 %cmp89, label %cond.true91, label %cond.false113, !dbg !5665

cond.true91:                                      ; preds = %lor.lhs.false86, %lor.lhs.false81, %lor.lhs.false76, %if.end71
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5665
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !5665
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 5, !dbg !5665
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !5665
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !5665
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !5665
  %bf.load96 = load i32, i32* %53, align 8, !dbg !5665
  %bf.clear97 = and i32 %bf.load96, 65535, !dbg !5665
  %cmp98 = icmp eq i32 %bf.clear97, 23, !dbg !5665
  br i1 %cmp98, label %cond.true100, label %cond.false105, !dbg !5665

cond.true100:                                     ; preds = %cond.true91
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !5665
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !5665
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 5, !dbg !5665
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !5665
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !5665
  br label %cond.end111, !dbg !5665

cond.false105:                                    ; preds = %cond.true91
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !5665
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !5665
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 5, !dbg !5665
  %rt_rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !5665
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx109, align 8, !dbg !5665
  %call110 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %56, %struct.rtx_def* %58), !dbg !5665
  br label %cond.end111, !dbg !5665

cond.end111:                                      ; preds = %cond.false105, %cond.true100
  %cond112 = phi %struct.rtx_def* [ %55, %cond.true100 ], [ %call110, %cond.false105 ], !dbg !5665
  br label %cond.end114, !dbg !5665

cond.false113:                                    ; preds = %lor.lhs.false86
  br label %cond.end114, !dbg !5665

cond.end114:                                      ; preds = %cond.false113, %cond.end111
  %cond115 = phi %struct.rtx_def* [ %cond112, %cond.end111 ], [ null, %cond.false113 ], !dbg !5665
  store %struct.rtx_def* %cond115, %struct.rtx_def** %set, align 8, !dbg !5666
  %59 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5667
  %cmp116 = icmp ne %struct.rtx_def* %59, null, !dbg !5669
  br i1 %cmp116, label %land.lhs.true118, label %if.end258, !dbg !5670

land.lhs.true118:                                 ; preds = %cond.end114
  %60 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5671
  %u119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !5671
  %fld120 = bitcast %union.u* %u119 to [1 x %union.rtunion_def]*, !dbg !5671
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i64 0, i64 0, !dbg !5671
  %rt_rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**, !dbg !5671
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx122, align 8, !dbg !5671
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !5671
  %bf.load123 = load i32, i32* %62, align 8, !dbg !5671
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !5671
  %cmp125 = icmp eq i32 %bf.clear124, 37, !dbg !5671
  br i1 %cmp125, label %land.lhs.true127, label %if.end258, !dbg !5672

land.lhs.true127:                                 ; preds = %land.lhs.true118
  %63 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5673
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5673
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !5673
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 0, !dbg !5673
  %rt_rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**, !dbg !5673
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx131, align 8, !dbg !5673
  %call132 = call i32 @rhs_regno(%struct.rtx_def* %64), !dbg !5673
  %cmp133 = icmp uge i32 %call132, 53, !dbg !5674
  br i1 %cmp133, label %if.then135, label %if.end258, !dbg !5675

if.then135:                                       ; preds = %land.lhs.true127
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5676, metadata !DIExpression()), !dbg !5678
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5679
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !5679
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !5679
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 0, !dbg !5679
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !5679
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx139, align 8, !dbg !5679
  %call140 = call i32 @rhs_regno(%struct.rtx_def* %66), !dbg !5679
  store i32 %call140, i32* %regno, align 4, !dbg !5678
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !5680, metadata !DIExpression()), !dbg !5681
  %67 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5682
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5682
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !5682
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 1, !dbg !5682
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !5682
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx144, align 8, !dbg !5682
  store %struct.rtx_def* %68, %struct.rtx_def** %src, align 8, !dbg !5681
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !5683, metadata !DIExpression()), !dbg !5684
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5685
  %call145 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %69), !dbg !5686
  store %struct.rtx_def* %call145, %struct.rtx_def** %note, align 8, !dbg !5687
  %70 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5688
  %tobool146 = icmp ne %struct.rtx_def* %70, null, !dbg !5688
  br i1 %tobool146, label %land.lhs.true147, label %if.end157, !dbg !5690

land.lhs.true147:                                 ; preds = %if.then135
  %71 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5691
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !5691
  %bf.load148 = load i32, i32* %72, align 8, !dbg !5691
  %bf.lshr = lshr i32 %bf.load148, 16, !dbg !5691
  %bf.clear149 = and i32 %bf.lshr, 255, !dbg !5691
  %cmp150 = icmp eq i32 %bf.clear149, 4, !dbg !5692
  br i1 %cmp150, label %land.lhs.true152, label %if.end157, !dbg !5693

land.lhs.true152:                                 ; preds = %land.lhs.true147
  %73 = load %struct.df*, %struct.df** @df, align 8, !dbg !5694
  %def_regs = getelementptr inbounds %struct.df, %struct.df* %73, i32 0, i32 5, !dbg !5694
  %74 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs, align 8, !dbg !5694
  %75 = load i32, i32* %regno, align 4, !dbg !5694
  %idxprom = zext i32 %75 to i64, !dbg !5694
  %arrayidx153 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %74, i64 %idxprom, !dbg !5694
  %76 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx153, align 8, !dbg !5694
  %n_refs = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %76, i32 0, i32 1, !dbg !5694
  %77 = load i32, i32* %n_refs, align 8, !dbg !5694
  %cmp154 = icmp ne i32 %77, 1, !dbg !5695
  br i1 %cmp154, label %if.then156, label %if.end157, !dbg !5696

if.then156:                                       ; preds = %land.lhs.true152
  store %struct.rtx_def* null, %struct.rtx_def** %note, align 8, !dbg !5697
  br label %if.end157, !dbg !5698

if.end157:                                        ; preds = %if.then156, %land.lhs.true152, %land.lhs.true147, %if.then135
  %78 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5699
  %cmp158 = icmp ne %struct.rtx_def* %78, null, !dbg !5701
  br i1 %cmp158, label %land.lhs.true160, label %if.else198, !dbg !5702

land.lhs.true160:                                 ; preds = %if.end157
  %79 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5703
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !5703
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !5703
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 0, !dbg !5703
  %rt_rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**, !dbg !5703
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx164, align 8, !dbg !5703
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !5703
  %bf.load165 = load i32, i32* %81, align 8, !dbg !5703
  %bf.clear166 = and i32 %bf.load165, 65535, !dbg !5703
  %cmp167 = icmp ne i32 %bf.clear166, 3, !dbg !5704
  br i1 %cmp167, label %land.lhs.true169, label %if.else198, !dbg !5705

land.lhs.true169:                                 ; preds = %land.lhs.true160
  %82 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5706
  %u170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !5706
  %fld171 = bitcast %union.u* %u170 to [1 x %union.rtunion_def]*, !dbg !5706
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i64 0, i64 0, !dbg !5706
  %rt_rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**, !dbg !5706
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx173, align 8, !dbg !5706
  %call174 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %83, i8 zeroext 1), !dbg !5707
  %tobool175 = icmp ne i8 %call174, 0, !dbg !5707
  br i1 %tobool175, label %if.else198, label %land.lhs.true176, !dbg !5708

land.lhs.true176:                                 ; preds = %land.lhs.true169
  %84 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5709
  %u177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !5709
  %fld178 = bitcast %union.u* %u177 to [1 x %union.rtunion_def]*, !dbg !5709
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i64 0, i64 0, !dbg !5709
  %rt_rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**, !dbg !5709
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx180, align 8, !dbg !5709
  %86 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5710
  %u181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !5710
  %fld182 = bitcast %union.u* %u181 to [1 x %union.rtunion_def]*, !dbg !5710
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i64 0, i64 0, !dbg !5710
  %rt_rtx184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**, !dbg !5710
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx184, align 8, !dbg !5710
  %call185 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %85, %struct.rtx_def* %87), !dbg !5711
  %tobool186 = icmp ne i32 %call185, 0, !dbg !5711
  br i1 %tobool186, label %if.else198, label %if.then187, !dbg !5712

if.then187:                                       ; preds = %land.lhs.true176
  %88 = load i32, i32* %regno, align 4, !dbg !5713
  %89 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5715
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !5715
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !5715
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 0, !dbg !5715
  %rt_rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**, !dbg !5715
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx191, align 8, !dbg !5715
  call void @set_reg_known_value(i32 %88, %struct.rtx_def* %90), !dbg !5716
  %91 = load i32, i32* %regno, align 4, !dbg !5717
  %92 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5718
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !5718
  %bf.load192 = load i32, i32* %93, align 8, !dbg !5718
  %bf.lshr193 = lshr i32 %bf.load192, 16, !dbg !5718
  %bf.clear194 = and i32 %bf.lshr193, 255, !dbg !5718
  %cmp195 = icmp eq i32 %bf.clear194, 3, !dbg !5719
  %conv196 = zext i1 %cmp195 to i32, !dbg !5719
  %conv197 = trunc i32 %conv196 to i8, !dbg !5718
  call void @set_reg_known_equiv_p(i32 %91, i8 zeroext %conv197), !dbg !5720
  br label %if.end257, !dbg !5721

if.else198:                                       ; preds = %land.lhs.true176, %land.lhs.true169, %land.lhs.true160, %if.end157
  %94 = load %struct.df*, %struct.df** @df, align 8, !dbg !5722
  %def_regs199 = getelementptr inbounds %struct.df, %struct.df* %94, i32 0, i32 5, !dbg !5722
  %95 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs199, align 8, !dbg !5722
  %96 = load i32, i32* %regno, align 4, !dbg !5722
  %idxprom200 = zext i32 %96 to i64, !dbg !5722
  %arrayidx201 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %95, i64 %idxprom200, !dbg !5722
  %97 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx201, align 8, !dbg !5722
  %n_refs202 = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %97, i32 0, i32 1, !dbg !5722
  %98 = load i32, i32* %n_refs202, align 8, !dbg !5722
  %cmp203 = icmp eq i32 %98, 1, !dbg !5724
  br i1 %cmp203, label %land.lhs.true205, label %if.else244, !dbg !5725

land.lhs.true205:                                 ; preds = %if.else198
  %99 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5726
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !5726
  %bf.load206 = load i32, i32* %100, align 8, !dbg !5726
  %bf.clear207 = and i32 %bf.load206, 65535, !dbg !5726
  %cmp208 = icmp eq i32 %bf.clear207, 49, !dbg !5727
  br i1 %cmp208, label %land.lhs.true210, label %if.else244, !dbg !5728

land.lhs.true210:                                 ; preds = %land.lhs.true205
  %101 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5729
  %u211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !5729
  %fld212 = bitcast %union.u* %u211 to [1 x %union.rtunion_def]*, !dbg !5729
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i64 0, i64 0, !dbg !5729
  %rt_rtx214 = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**, !dbg !5729
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx214, align 8, !dbg !5729
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !5729
  %bf.load215 = load i32, i32* %103, align 8, !dbg !5729
  %bf.clear216 = and i32 %bf.load215, 65535, !dbg !5729
  %cmp217 = icmp eq i32 %bf.clear216, 37, !dbg !5729
  br i1 %cmp217, label %land.lhs.true219, label %if.else244, !dbg !5730

land.lhs.true219:                                 ; preds = %land.lhs.true210
  %104 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5731
  %u220 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !5731
  %fld221 = bitcast %union.u* %u220 to [1 x %union.rtunion_def]*, !dbg !5731
  %arrayidx222 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld221, i64 0, i64 0, !dbg !5731
  %rt_rtx223 = bitcast %union.rtunion_def* %arrayidx222 to %struct.rtx_def**, !dbg !5731
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx223, align 8, !dbg !5731
  %call224 = call i32 @rhs_regno(%struct.rtx_def* %105), !dbg !5731
  %call225 = call %struct.rtx_def* @get_reg_known_value(i32 %call224), !dbg !5732
  store %struct.rtx_def* %call225, %struct.rtx_def** %t, align 8, !dbg !5733
  %tobool226 = icmp ne %struct.rtx_def* %call225, null, !dbg !5733
  br i1 %tobool226, label %land.lhs.true227, label %if.else244, !dbg !5734

land.lhs.true227:                                 ; preds = %land.lhs.true219
  %106 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5735
  %u228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !5735
  %fld229 = bitcast %union.u* %u228 to [1 x %union.rtunion_def]*, !dbg !5735
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i64 0, i64 1, !dbg !5735
  %rt_rtx231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtx_def**, !dbg !5735
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx231, align 8, !dbg !5735
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !5735
  %bf.load232 = load i32, i32* %108, align 8, !dbg !5735
  %bf.clear233 = and i32 %bf.load232, 65535, !dbg !5735
  %cmp234 = icmp eq i32 %bf.clear233, 30, !dbg !5735
  br i1 %cmp234, label %if.then236, label %if.else244, !dbg !5736

if.then236:                                       ; preds = %land.lhs.true227
  %109 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5737
  %110 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5739
  %u237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !5739
  %fld238 = bitcast %union.u* %u237 to [1 x %union.rtunion_def]*, !dbg !5739
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i64 0, i64 1, !dbg !5739
  %rt_rtx240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.rtx_def**, !dbg !5739
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx240, align 8, !dbg !5739
  %u241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1, !dbg !5739
  %hwint = bitcast %union.u* %u241 to [1 x i64]*, !dbg !5739
  %arrayidx242 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !5739
  %112 = load i64, i64* %arrayidx242, align 8, !dbg !5739
  %call243 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %109, i64 %112), !dbg !5740
  store %struct.rtx_def* %call243, %struct.rtx_def** %t, align 8, !dbg !5741
  %113 = load i32, i32* %regno, align 4, !dbg !5742
  %114 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !5743
  call void @set_reg_known_value(i32 %113, %struct.rtx_def* %114), !dbg !5744
  %115 = load i32, i32* %regno, align 4, !dbg !5745
  call void @set_reg_known_equiv_p(i32 %115, i8 zeroext 0), !dbg !5746
  br label %if.end256, !dbg !5747

if.else244:                                       ; preds = %land.lhs.true227, %land.lhs.true219, %land.lhs.true210, %land.lhs.true205, %if.else198
  %116 = load %struct.df*, %struct.df** @df, align 8, !dbg !5748
  %def_regs245 = getelementptr inbounds %struct.df, %struct.df* %116, i32 0, i32 5, !dbg !5748
  %117 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs245, align 8, !dbg !5748
  %118 = load i32, i32* %regno, align 4, !dbg !5748
  %idxprom246 = zext i32 %118 to i64, !dbg !5748
  %arrayidx247 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %117, i64 %idxprom246, !dbg !5748
  %119 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx247, align 8, !dbg !5748
  %n_refs248 = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %119, i32 0, i32 1, !dbg !5748
  %120 = load i32, i32* %n_refs248, align 8, !dbg !5748
  %cmp249 = icmp eq i32 %120, 1, !dbg !5750
  br i1 %cmp249, label %land.lhs.true251, label %if.end255, !dbg !5751

land.lhs.true251:                                 ; preds = %if.else244
  %121 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5752
  %call252 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %121, i8 zeroext 1), !dbg !5753
  %tobool253 = icmp ne i8 %call252, 0, !dbg !5753
  br i1 %tobool253, label %if.end255, label %if.then254, !dbg !5754

if.then254:                                       ; preds = %land.lhs.true251
  %122 = load i32, i32* %regno, align 4, !dbg !5755
  %123 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5757
  call void @set_reg_known_value(i32 %122, %struct.rtx_def* %123), !dbg !5758
  %124 = load i32, i32* %regno, align 4, !dbg !5759
  call void @set_reg_known_equiv_p(i32 %124, i8 zeroext 0), !dbg !5760
  br label %if.end255, !dbg !5761

if.end255:                                        ; preds = %if.then254, %land.lhs.true251, %if.else244
  br label %if.end256

if.end256:                                        ; preds = %if.end255, %if.then236
  br label %if.end257

if.end257:                                        ; preds = %if.end256, %if.then187
  br label %if.end258, !dbg !5762

if.end258:                                        ; preds = %if.end257, %land.lhs.true127, %land.lhs.true118, %cond.end114
  br label %if.end272, !dbg !5763

if.else259:                                       ; preds = %lor.lhs.false33
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5764
  %126 = bitcast %struct.rtx_def* %125 to i32*, !dbg !5764
  %bf.load260 = load i32, i32* %126, align 8, !dbg !5764
  %bf.clear261 = and i32 %bf.load260, 65535, !dbg !5764
  %cmp262 = icmp eq i32 %bf.clear261, 13, !dbg !5764
  br i1 %cmp262, label %land.lhs.true264, label %if.end271, !dbg !5766

land.lhs.true264:                                 ; preds = %if.else259
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5767
  %u265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !5767
  %fld266 = bitcast %union.u* %u265 to [1 x %union.rtunion_def]*, !dbg !5767
  %arrayidx267 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld266, i64 0, i64 5, !dbg !5767
  %rt_int = bitcast %union.rtunion_def* %arrayidx267 to i32*, !dbg !5767
  %128 = load i32, i32* %rt_int, align 8, !dbg !5767
  %cmp268 = icmp eq i32 %128, 4, !dbg !5768
  br i1 %cmp268, label %if.then270, label %if.end271, !dbg !5769

if.then270:                                       ; preds = %land.lhs.true264
  store i8 0, i8* @copying_arguments, align 1, !dbg !5770
  br label %if.end271, !dbg !5771

if.end271:                                        ; preds = %if.then270, %land.lhs.true264, %if.else259
  br label %if.end272

if.end272:                                        ; preds = %if.end271, %if.end258
  br label %for.inc, !dbg !5772

for.inc:                                          ; preds = %if.end272, %if.then42
  %129 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5773
  %u273 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1, !dbg !5773
  %fld274 = bitcast %union.u* %u273 to [1 x %union.rtunion_def]*, !dbg !5773
  %arrayidx275 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld274, i64 0, i64 2, !dbg !5773
  %rt_rtx276 = bitcast %union.rtunion_def* %arrayidx275 to %struct.rtx_def**, !dbg !5773
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx276, align 8, !dbg !5773
  store %struct.rtx_def* %130, %struct.rtx_def** %insn, align 8, !dbg !5774
  br label %for.cond, !dbg !5775, !llvm.loop !5776

for.end:                                          ; preds = %for.cond
  %131 = load i32, i32* %maxreg, align 4, !dbg !5778
  %call277 = call i32 @max_reg_num(), !dbg !5778
  %cmp278 = icmp eq i32 %131, %call277, !dbg !5778
  br i1 %cmp278, label %cond.false281, label %cond.true280, !dbg !5778

cond.true280:                                     ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 2760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5778
  br label %cond.end282, !dbg !5778

cond.false281:                                    ; preds = %for.end
  br label %cond.end282, !dbg !5778

cond.end282:                                      ; preds = %cond.false281, %cond.true280
  %cond283 = phi i32 [ 0, %cond.true280 ], [ 0, %cond.false281 ], !dbg !5778
  store i32 0, i32* %ui, align 4, !dbg !5779
  br label %for.cond284, !dbg !5781

for.cond284:                                      ; preds = %for.inc326, %cond.end282
  %132 = load i32, i32* %ui, align 4, !dbg !5782
  %133 = load i32, i32* %maxreg, align 4, !dbg !5784
  %cmp285 = icmp ult i32 %132, %133, !dbg !5785
  br i1 %cmp285, label %for.body287, label %for.end327, !dbg !5786

for.body287:                                      ; preds = %for.cond284
  %134 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5787
  %135 = load i32, i32* %ui, align 4, !dbg !5790
  %idxprom288 = zext i32 %135 to i64, !dbg !5787
  %arrayidx289 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %134, i64 %idxprom288, !dbg !5787
  %136 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx289, align 8, !dbg !5787
  %tobool290 = icmp ne %struct.rtx_def* %136, null, !dbg !5787
  br i1 %tobool290, label %land.lhs.true291, label %if.end325, !dbg !5791

land.lhs.true291:                                 ; preds = %for.body287
  %137 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5792
  %138 = load i32, i32* %ui, align 4, !dbg !5793
  %idxprom292 = zext i32 %138 to i64, !dbg !5792
  %arrayidx293 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %137, i64 %idxprom292, !dbg !5792
  %139 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx293, align 8, !dbg !5792
  %140 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5794
  %tobool294 = icmp ne %struct.VEC_rtx_gc* %140, null, !dbg !5794
  br i1 %tobool294, label %cond.true295, label %cond.false297, !dbg !5794

cond.true295:                                     ; preds = %land.lhs.true291
  %141 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5794
  %base296 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %141, i32 0, i32 0, !dbg !5794
  br label %cond.end298, !dbg !5794

cond.false297:                                    ; preds = %land.lhs.true291
  br label %cond.end298, !dbg !5794

cond.end298:                                      ; preds = %cond.false297, %cond.true295
  %cond299 = phi %struct.VEC_rtx_base* [ %base296, %cond.true295 ], [ null, %cond.false297 ], !dbg !5794
  %142 = load i32, i32* %ui, align 4, !dbg !5794
  %call300 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond299, i32 %142), !dbg !5794
  %cmp301 = icmp ne %struct.rtx_def* %139, %call300, !dbg !5795
  br i1 %cmp301, label %land.lhs.true303, label %if.end325, !dbg !5796

land.lhs.true303:                                 ; preds = %cond.end298
  %143 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5797
  %144 = load i32, i32* %ui, align 4, !dbg !5798
  %idxprom304 = zext i32 %144 to i64, !dbg !5797
  %arrayidx305 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %143, i64 %idxprom304, !dbg !5797
  %145 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx305, align 8, !dbg !5797
  %146 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5799
  %tobool306 = icmp ne %struct.VEC_rtx_gc* %146, null, !dbg !5799
  br i1 %tobool306, label %cond.true307, label %cond.false309, !dbg !5799

cond.true307:                                     ; preds = %land.lhs.true303
  %147 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5799
  %base308 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %147, i32 0, i32 0, !dbg !5799
  br label %cond.end310, !dbg !5799

cond.false309:                                    ; preds = %land.lhs.true303
  br label %cond.end310, !dbg !5799

cond.end310:                                      ; preds = %cond.false309, %cond.true307
  %cond311 = phi %struct.VEC_rtx_base* [ %base308, %cond.true307 ], [ null, %cond.false309 ], !dbg !5799
  %148 = load i32, i32* %ui, align 4, !dbg !5799
  %call312 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond311, i32 %148), !dbg !5799
  %call313 = call i32 @rtx_equal_p(%struct.rtx_def* %145, %struct.rtx_def* %call312), !dbg !5800
  %tobool314 = icmp ne i32 %call313, 0, !dbg !5800
  br i1 %tobool314, label %if.end325, label %if.then315, !dbg !5801

if.then315:                                       ; preds = %cond.end310
  %149 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5802
  %tobool316 = icmp ne %struct.VEC_rtx_gc* %149, null, !dbg !5802
  br i1 %tobool316, label %cond.true317, label %cond.false319, !dbg !5802

cond.true317:                                     ; preds = %if.then315
  %150 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5802
  %base318 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %150, i32 0, i32 0, !dbg !5802
  br label %cond.end320, !dbg !5802

cond.false319:                                    ; preds = %if.then315
  br label %cond.end320, !dbg !5802

cond.end320:                                      ; preds = %cond.false319, %cond.true317
  %cond321 = phi %struct.VEC_rtx_base* [ %base318, %cond.true317 ], [ null, %cond.false319 ], !dbg !5802
  %151 = load i32, i32* %ui, align 4, !dbg !5802
  %152 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5802
  %153 = load i32, i32* %ui, align 4, !dbg !5802
  %idxprom322 = zext i32 %153 to i64, !dbg !5802
  %arrayidx323 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %152, i64 %idxprom322, !dbg !5802
  %154 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx323, align 8, !dbg !5802
  %call324 = call %struct.rtx_def* @VEC_rtx_base_replace(%struct.VEC_rtx_base* %cond321, i32 %151, %struct.rtx_def* %154), !dbg !5802
  store i32 1, i32* %changed, align 4, !dbg !5804
  br label %if.end325, !dbg !5805

if.end325:                                        ; preds = %cond.end320, %cond.end310, %cond.end298, %for.body287
  br label %for.inc326, !dbg !5806

for.inc326:                                       ; preds = %if.end325
  %155 = load i32, i32* %ui, align 4, !dbg !5807
  %inc = add i32 %155, 1, !dbg !5807
  store i32 %inc, i32* %ui, align 4, !dbg !5807
  br label %for.cond284, !dbg !5808, !llvm.loop !5809

for.end327:                                       ; preds = %for.cond284
  br label %do.cond, !dbg !5811

do.cond:                                          ; preds = %for.end327
  %156 = load i32, i32* %changed, align 4, !dbg !5812
  %tobool328 = icmp ne i32 %156, 0, !dbg !5812
  br i1 %tobool328, label %land.rhs, label %land.end, !dbg !5813

land.rhs:                                         ; preds = %do.cond
  %157 = load i32, i32* %pass, align 4, !dbg !5814
  %inc329 = add nsw i32 %157, 1, !dbg !5814
  store i32 %inc329, i32* %pass, align 4, !dbg !5814
  %cmp330 = icmp slt i32 %inc329, 10, !dbg !5815
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %158 = phi i1 [ false, %do.cond ], [ %cmp330, %land.rhs ], !dbg !5816
  br i1 %158, label %do.body17, label %do.end332, !dbg !5811, !llvm.loop !5817

do.end332:                                        ; preds = %land.end
  store i32 0, i32* %i, align 4, !dbg !5819
  br label %for.cond333, !dbg !5821

for.cond333:                                      ; preds = %for.inc347, %do.end332
  %159 = load i32, i32* %i, align 4, !dbg !5822
  %160 = load i32, i32* @reg_known_value_size, align 4, !dbg !5824
  %cmp334 = icmp slt i32 %159, %160, !dbg !5825
  br i1 %cmp334, label %for.body336, label %for.end349, !dbg !5826

for.body336:                                      ; preds = %for.cond333
  %161 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !5827
  %162 = load i32, i32* %i, align 4, !dbg !5829
  %idxprom337 = sext i32 %162 to i64, !dbg !5827
  %arrayidx338 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %161, i64 %idxprom337, !dbg !5827
  %163 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx338, align 8, !dbg !5827
  %cmp339 = icmp eq %struct.rtx_def* %163, null, !dbg !5830
  br i1 %cmp339, label %if.then341, label %if.end346, !dbg !5831

if.then341:                                       ; preds = %for.body336
  %164 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !5832
  %165 = load i32, i32* %i, align 4, !dbg !5833
  %add = add nsw i32 %165, 53, !dbg !5834
  %idxprom342 = sext i32 %add to i64, !dbg !5832
  %arrayidx343 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %164, i64 %idxprom342, !dbg !5832
  %166 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx343, align 8, !dbg !5832
  %167 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !5835
  %168 = load i32, i32* %i, align 4, !dbg !5836
  %idxprom344 = sext i32 %168 to i64, !dbg !5835
  %arrayidx345 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %167, i64 %idxprom344, !dbg !5835
  store %struct.rtx_def* %166, %struct.rtx_def** %arrayidx345, align 8, !dbg !5837
  br label %if.end346, !dbg !5835

if.end346:                                        ; preds = %if.then341, %for.body336
  br label %for.inc347, !dbg !5838

for.inc347:                                       ; preds = %if.end346
  %169 = load i32, i32* %i, align 4, !dbg !5839
  %inc348 = add nsw i32 %169, 1, !dbg !5839
  store i32 %inc348, i32* %i, align 4, !dbg !5839
  br label %for.cond333, !dbg !5840, !llvm.loop !5841

for.end349:                                       ; preds = %for.cond333
  %170 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5843
  %171 = bitcast %struct.rtx_def** %170 to i8*, !dbg !5843
  call void @free(i8* %171), !dbg !5844
  store %struct.rtx_def** null, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5845
  %172 = load i8*, i8** @reg_seen, align 8, !dbg !5846
  call void @free(i8* %172), !dbg !5847
  store i8* null, i8** @reg_seen, align 8, !dbg !5848
  br label %do.body350, !dbg !5849

do.body350:                                       ; preds = %for.end349
  %173 = load i8, i8* @timevar_enable, align 1, !dbg !5850
  %tobool351 = icmp ne i8 %173, 0, !dbg !5850
  br i1 %tobool351, label %if.then352, label %if.end353, !dbg !5853

if.then352:                                       ; preds = %do.body350
  call void @timevar_pop_1(i32 38), !dbg !5850
  br label %if.end353, !dbg !5850

if.end353:                                        ; preds = %if.then352, %do.body350
  br label %do.end355, !dbg !5853

do.end355:                                        ; preds = %if.end353
  ret void, !dbg !5854
}

declare dso_local i32 @max_reg_num() #2

declare dso_local void @timevar_push_1(i32) #2

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_base_truncate(%struct.VEC_rtx_base* %vec_, i32 %size_) #0 !dbg !5855 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5859, metadata !DIExpression()), !dbg !5860
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5861, metadata !DIExpression()), !dbg !5860
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5860
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !5860
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5860

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5860
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !5860
  %2 = load i32, i32* %num, align 8, !dbg !5860
  %3 = load i32, i32* %size_.addr, align 4, !dbg !5860
  %cmp = icmp uge i32 %2, %3, !dbg !5860
  %conv = zext i1 %cmp to i32, !dbg !5860
  br label %cond.end, !dbg !5860

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !5860
  %tobool1 = icmp ne i32 %4, 0, !dbg !5860
  %lnot = xor i1 %tobool1, true, !dbg !5860
  %lnot.ext = zext i1 %lnot to i32, !dbg !5860
  br label %cond.end, !dbg !5860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5860
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5862
  %tobool2 = icmp ne %struct.VEC_rtx_base* %5, null, !dbg !5862
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5860

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !5862
  %7 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5862
  %num3 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %7, i32 0, i32 0, !dbg !5862
  store i32 %6, i32* %num3, align 8, !dbg !5862
  br label %if.end, !dbg !5862

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !5860
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_gc_safe_grow_cleared(%struct.VEC_rtx_gc** %vec_, i32 %size_) #0 !dbg !5864 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5870, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !5871, metadata !DIExpression()), !dbg !5869
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !5869
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %0, align 8, !dbg !5869
  %tobool = icmp ne %struct.VEC_rtx_gc* %1, null, !dbg !5869
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5869

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !5869
  %3 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %2, align 8, !dbg !5869
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %3, i32 0, i32 0, !dbg !5869
  br label %cond.end, !dbg !5869

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5869

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5869
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !5869
  store i32 %call, i32* %oldsize, align 4, !dbg !5869
  %4 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !5869
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5869
  call void @VEC_rtx_gc_safe_grow(%struct.VEC_rtx_gc** %4, i32 %5), !dbg !5869
  %6 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !5869
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %6, align 8, !dbg !5869
  %tobool1 = icmp ne %struct.VEC_rtx_gc* %7, null, !dbg !5869
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5869

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !5869
  %9 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %8, align 8, !dbg !5869
  %base3 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %9, i32 0, i32 0, !dbg !5869
  br label %cond.end5, !dbg !5869

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5869

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_rtx_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5869
  %call7 = call %struct.rtx_def** @VEC_rtx_base_address(%struct.VEC_rtx_base* %cond6), !dbg !5869
  %10 = load i32, i32* %oldsize, align 4, !dbg !5869
  %idxprom = sext i32 %10 to i64, !dbg !5869
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %call7, i64 %idxprom, !dbg !5869
  %11 = bitcast %struct.rtx_def** %arrayidx to i8*, !dbg !5869
  %12 = load i32, i32* %size_.addr, align 4, !dbg !5869
  %13 = load i32, i32* %oldsize, align 4, !dbg !5869
  %sub = sub nsw i32 %12, %13, !dbg !5869
  %conv = sext i32 %sub to i64, !dbg !5869
  %mul = mul i64 8, %conv, !dbg !5869
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !5869
  ret void, !dbg !5869
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local i32 @prologue_epilogue_contains(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_set(%struct.rtx_def* %dest, %struct.rtx_def* %set, i8* %data) #0 !dbg !5872 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %set.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %regno = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %n = alloca i32, align 4
  %other = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !5873, metadata !DIExpression()), !dbg !5874
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5877, metadata !DIExpression()), !dbg !5878
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5879, metadata !DIExpression()), !dbg !5880
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !5881, metadata !DIExpression()), !dbg !5882
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5883, metadata !DIExpression()), !dbg !5884
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5885
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5885
  %bf.load = load i32, i32* %1, align 8, !dbg !5885
  %bf.clear = and i32 %bf.load, 65535, !dbg !5885
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !5885
  br i1 %cmp, label %if.end, label %if.then, !dbg !5887

if.then:                                          ; preds = %entry
  br label %return, !dbg !5888

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5889
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !5889
  store i32 %call, i32* %regno, align 4, !dbg !5890
  %3 = load i32, i32* %regno, align 4, !dbg !5891
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5891
  %tobool = icmp ne %struct.VEC_rtx_gc* %4, null, !dbg !5891
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5891

cond.true:                                        ; preds = %if.end
  %5 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !5891
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %5, i32 0, i32 0, !dbg !5891
  br label %cond.end, !dbg !5891

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5891
  %call1 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !5891
  %cmp2 = icmp ult i32 %3, %call1, !dbg !5891
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !5891

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5891
  br label %cond.end5, !dbg !5891

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5891

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5891
  %6 = load i32, i32* %regno, align 4, !dbg !5892
  %cmp7 = icmp ult i32 %6, 53, !dbg !5894
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !5895

if.then8:                                         ; preds = %cond.end5
  %7 = load i32, i32* %regno, align 4, !dbg !5896
  %idxprom = zext i32 %7 to i64, !dbg !5897
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !5897
  %8 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5898
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5898
  %bf.load9 = load i32, i32* %9, align 8, !dbg !5898
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !5898
  %bf.clear10 = and i32 %bf.lshr, 255, !dbg !5898
  %idxprom11 = zext i32 %bf.clear10 to i64, !dbg !5897
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom11, !dbg !5897
  %10 = load i8, i8* %arrayidx12, align 1, !dbg !5897
  %conv = zext i8 %10 to i32, !dbg !5897
  store i32 %conv, i32* %n, align 4, !dbg !5899
  br label %if.end13, !dbg !5900

if.else:                                          ; preds = %cond.end5
  store i32 1, i32* %n, align 4, !dbg !5901
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then8
  %11 = load i32, i32* %n, align 4, !dbg !5902
  %cmp14 = icmp ne i32 %11, 1, !dbg !5904
  br i1 %cmp14, label %if.then16, label %if.end24, !dbg !5905

if.then16:                                        ; preds = %if.end13
  br label %while.cond, !dbg !5906

while.cond:                                       ; preds = %while.body, %if.then16
  %12 = load i32, i32* %n, align 4, !dbg !5908
  %dec = add nsw i32 %12, -1, !dbg !5908
  store i32 %dec, i32* %n, align 4, !dbg !5908
  %cmp17 = icmp sge i32 %dec, 0, !dbg !5909
  br i1 %cmp17, label %while.body, label %while.end, !dbg !5906

while.body:                                       ; preds = %while.cond
  %13 = load i8*, i8** @reg_seen, align 8, !dbg !5910
  %14 = load i32, i32* %regno, align 4, !dbg !5912
  %15 = load i32, i32* %n, align 4, !dbg !5913
  %add = add i32 %14, %15, !dbg !5914
  %idxprom19 = zext i32 %add to i64, !dbg !5910
  %arrayidx20 = getelementptr inbounds i8, i8* %13, i64 %idxprom19, !dbg !5910
  store i8 1, i8* %arrayidx20, align 1, !dbg !5915
  %16 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5916
  %17 = load i32, i32* %regno, align 4, !dbg !5917
  %18 = load i32, i32* %n, align 4, !dbg !5918
  %add21 = add i32 %17, %18, !dbg !5919
  %idxprom22 = zext i32 %add21 to i64, !dbg !5916
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 %idxprom22, !dbg !5916
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx23, align 8, !dbg !5920
  br label %while.cond, !dbg !5906, !llvm.loop !5921

while.end:                                        ; preds = %while.cond
  br label %return, !dbg !5923

if.end24:                                         ; preds = %if.end13
  %19 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !5924
  %tobool25 = icmp ne %struct.rtx_def* %19, null, !dbg !5924
  br i1 %tobool25, label %if.then26, label %if.else36, !dbg !5926

if.then26:                                        ; preds = %if.end24
  %20 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !5927
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5927
  %bf.load27 = load i32, i32* %21, align 8, !dbg !5927
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !5927
  %cmp29 = icmp eq i32 %bf.clear28, 25, !dbg !5930
  br i1 %cmp29, label %if.then31, label %if.end34, !dbg !5931

if.then31:                                        ; preds = %if.then26
  %22 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5932
  %23 = load i32, i32* %regno, align 4, !dbg !5934
  %idxprom32 = zext i32 %23 to i64, !dbg !5932
  %arrayidx33 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 %idxprom32, !dbg !5932
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx33, align 8, !dbg !5935
  br label %return, !dbg !5936

if.end34:                                         ; preds = %if.then26
  %24 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !5937
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5937
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5937
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5937
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !5937
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5937
  store %struct.rtx_def* %25, %struct.rtx_def** %src, align 8, !dbg !5938
  br label %if.end51, !dbg !5939

if.else36:                                        ; preds = %if.end24
  %26 = load i8*, i8** @reg_seen, align 8, !dbg !5940
  %27 = load i32, i32* %regno, align 4, !dbg !5943
  %idxprom37 = zext i32 %27 to i64, !dbg !5940
  %arrayidx38 = getelementptr inbounds i8, i8* %26, i64 %idxprom37, !dbg !5940
  %28 = load i8, i8* %arrayidx38, align 1, !dbg !5940
  %tobool39 = icmp ne i8 %28, 0, !dbg !5940
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !5944

if.then40:                                        ; preds = %if.else36
  %29 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5945
  %30 = load i32, i32* %regno, align 4, !dbg !5947
  %idxprom41 = zext i32 %30 to i64, !dbg !5945
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 %idxprom41, !dbg !5945
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx42, align 8, !dbg !5948
  br label %return, !dbg !5949

if.end43:                                         ; preds = %if.else36
  %31 = load i8*, i8** @reg_seen, align 8, !dbg !5950
  %32 = load i32, i32* %regno, align 4, !dbg !5951
  %idxprom44 = zext i32 %32 to i64, !dbg !5950
  %arrayidx45 = getelementptr inbounds i8, i8* %31, i64 %idxprom44, !dbg !5950
  store i8 1, i8* %arrayidx45, align 1, !dbg !5952
  %33 = load i32, i32* @unique_id, align 4, !dbg !5953
  %inc = add nsw i32 %33, 1, !dbg !5953
  store i32 %inc, i32* @unique_id, align 4, !dbg !5953
  %conv46 = sext i32 %33 to i64, !dbg !5953
  %call47 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv46), !dbg !5953
  %call48 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 16, %struct.rtx_def* %call47), !dbg !5953
  %34 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5954
  %35 = load i32, i32* %regno, align 4, !dbg !5955
  %idxprom49 = zext i32 %35 to i64, !dbg !5954
  %arrayidx50 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 %idxprom49, !dbg !5954
  store %struct.rtx_def* %call48, %struct.rtx_def** %arrayidx50, align 8, !dbg !5956
  br label %return, !dbg !5957

if.end51:                                         ; preds = %if.end34
  %36 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5958
  %37 = load i32, i32* %regno, align 4, !dbg !5960
  %idxprom52 = zext i32 %37 to i64, !dbg !5958
  %arrayidx53 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 %idxprom52, !dbg !5958
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8, !dbg !5958
  %cmp54 = icmp ne %struct.rtx_def* %38, null, !dbg !5961
  br i1 %cmp54, label %land.lhs.true, label %if.else136, !dbg !5962

land.lhs.true:                                    ; preds = %if.end51
  %39 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5963
  %call56 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %39), !dbg !5964
  %40 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5965
  %41 = load i32, i32* %regno, align 4, !dbg !5966
  %idxprom57 = zext i32 %41 to i64, !dbg !5965
  %arrayidx58 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 %idxprom57, !dbg !5965
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8, !dbg !5965
  %cmp59 = icmp ne %struct.rtx_def* %call56, %42, !dbg !5967
  br i1 %cmp59, label %if.then61, label %if.else136, !dbg !5968

if.then61:                                        ; preds = %land.lhs.true
  %43 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5969
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5969
  %bf.load62 = load i32, i32* %44, align 8, !dbg !5969
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !5969
  switch i32 %bf.clear63, label %sw.default [
    i32 122, label %sw.bb
    i32 50, label %sw.bb
    i32 49, label %sw.bb81
    i32 61, label %sw.bb114
  ], !dbg !5970

sw.bb:                                            ; preds = %if.then61, %if.then61
  %45 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5971
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !5971
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5971
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 0, !dbg !5971
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !5971
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !5971
  %47 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5974
  %cmp68 = icmp ne %struct.rtx_def* %46, %47, !dbg !5975
  br i1 %cmp68, label %land.lhs.true70, label %if.end80, !dbg !5976

land.lhs.true70:                                  ; preds = %sw.bb
  %48 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5977
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !5977
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !5977
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !5977
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !5977
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !5977
  %50 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5978
  %cmp75 = icmp ne %struct.rtx_def* %49, %50, !dbg !5979
  br i1 %cmp75, label %if.then77, label %if.end80, !dbg !5980

if.then77:                                        ; preds = %land.lhs.true70
  %51 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !5981
  %52 = load i32, i32* %regno, align 4, !dbg !5982
  %idxprom78 = zext i32 %52 to i64, !dbg !5981
  %arrayidx79 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %51, i64 %idxprom78, !dbg !5981
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx79, align 8, !dbg !5983
  br label %if.end80, !dbg !5981

if.end80:                                         ; preds = %if.then77, %land.lhs.true70, %sw.bb
  br label %sw.epilog, !dbg !5984

sw.bb81:                                          ; preds = %if.then61
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %other, metadata !5985, metadata !DIExpression()), !dbg !5987
  store %struct.rtx_def* null, %struct.rtx_def** %other, align 8, !dbg !5987
  %53 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5988
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5988
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !5988
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 0, !dbg !5988
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !5988
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !5988
  %55 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5990
  %cmp86 = icmp eq %struct.rtx_def* %54, %55, !dbg !5991
  br i1 %cmp86, label %if.then88, label %if.else93, !dbg !5992

if.then88:                                        ; preds = %sw.bb81
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5993
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !5993
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !5993
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 1, !dbg !5993
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !5993
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !5993
  store %struct.rtx_def* %57, %struct.rtx_def** %other, align 8, !dbg !5994
  br label %if.end106, !dbg !5995

if.else93:                                        ; preds = %sw.bb81
  %58 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5996
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !5996
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !5996
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 1, !dbg !5996
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !5996
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !5996
  %60 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5998
  %cmp98 = icmp eq %struct.rtx_def* %59, %60, !dbg !5999
  br i1 %cmp98, label %if.then100, label %if.end105, !dbg !6000

if.then100:                                       ; preds = %if.else93
  %61 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6001
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !6001
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !6001
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 0, !dbg !6001
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !6001
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !6001
  store %struct.rtx_def* %62, %struct.rtx_def** %other, align 8, !dbg !6002
  br label %if.end105, !dbg !6003

if.end105:                                        ; preds = %if.then100, %if.else93
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then88
  %63 = load %struct.rtx_def*, %struct.rtx_def** %other, align 8, !dbg !6004
  %tobool107 = icmp ne %struct.rtx_def* %63, null, !dbg !6004
  br i1 %tobool107, label %lor.lhs.false, label %if.then110, !dbg !6006

lor.lhs.false:                                    ; preds = %if.end106
  %64 = load %struct.rtx_def*, %struct.rtx_def** %other, align 8, !dbg !6007
  %call108 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %64), !dbg !6008
  %tobool109 = icmp ne %struct.rtx_def* %call108, null, !dbg !6008
  br i1 %tobool109, label %if.then110, label %if.end113, !dbg !6009

if.then110:                                       ; preds = %lor.lhs.false, %if.end106
  %65 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6010
  %66 = load i32, i32* %regno, align 4, !dbg !6011
  %idxprom111 = zext i32 %66 to i64, !dbg !6010
  %arrayidx112 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %65, i64 %idxprom111, !dbg !6010
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx112, align 8, !dbg !6012
  br label %if.end113, !dbg !6010

if.end113:                                        ; preds = %if.then110, %lor.lhs.false
  br label %sw.epilog, !dbg !6013

sw.bb114:                                         ; preds = %if.then61
  %67 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6014
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !6014
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !6014
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 0, !dbg !6014
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !6014
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !6014
  %69 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6016
  %cmp119 = icmp ne %struct.rtx_def* %68, %69, !dbg !6017
  br i1 %cmp119, label %if.then130, label %lor.lhs.false121, !dbg !6018

lor.lhs.false121:                                 ; preds = %sw.bb114
  %70 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6019
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !6019
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !6019
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 1, !dbg !6019
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !6019
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !6019
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !6019
  %bf.load126 = load i32, i32* %72, align 8, !dbg !6019
  %bf.clear127 = and i32 %bf.load126, 65535, !dbg !6019
  %cmp128 = icmp eq i32 %bf.clear127, 30, !dbg !6019
  br i1 %cmp128, label %if.end133, label %if.then130, !dbg !6020

if.then130:                                       ; preds = %lor.lhs.false121, %sw.bb114
  %73 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6021
  %74 = load i32, i32* %regno, align 4, !dbg !6022
  %idxprom131 = zext i32 %74 to i64, !dbg !6021
  %arrayidx132 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %73, i64 %idxprom131, !dbg !6021
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx132, align 8, !dbg !6023
  br label %if.end133, !dbg !6021

if.end133:                                        ; preds = %if.then130, %lor.lhs.false121
  br label %sw.epilog, !dbg !6024

sw.default:                                       ; preds = %if.then61
  %75 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6025
  %76 = load i32, i32* %regno, align 4, !dbg !6026
  %idxprom134 = zext i32 %76 to i64, !dbg !6025
  %arrayidx135 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 %idxprom134, !dbg !6025
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx135, align 8, !dbg !6027
  br label %sw.epilog, !dbg !6028

sw.epilog:                                        ; preds = %sw.default, %if.end133, %if.end113, %if.end80
  br label %if.end157, !dbg !6029

if.else136:                                       ; preds = %land.lhs.true, %if.end51
  %77 = load i32, i32* %regno, align 4, !dbg !6030
  %cmp137 = icmp uge i32 %77, 53, !dbg !6032
  br i1 %cmp137, label %land.lhs.true143, label %lor.lhs.false139, !dbg !6033

lor.lhs.false139:                                 ; preds = %if.else136
  %78 = load i32, i32* %regno, align 4, !dbg !6034
  %idxprom140 = zext i32 %78 to i64, !dbg !6035
  %arrayidx141 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom140, !dbg !6035
  %79 = load i8, i8* %arrayidx141, align 1, !dbg !6035
  %tobool142 = icmp ne i8 %79, 0, !dbg !6035
  br i1 %tobool142, label %if.end156, label %land.lhs.true143, !dbg !6036

land.lhs.true143:                                 ; preds = %lor.lhs.false139, %if.else136
  %80 = load i8*, i8** @reg_seen, align 8, !dbg !6037
  %81 = load i32, i32* %regno, align 4, !dbg !6038
  %idxprom144 = zext i32 %81 to i64, !dbg !6037
  %arrayidx145 = getelementptr inbounds i8, i8* %80, i64 %idxprom144, !dbg !6037
  %82 = load i8, i8* %arrayidx145, align 1, !dbg !6037
  %tobool146 = icmp ne i8 %82, 0, !dbg !6037
  br i1 %tobool146, label %if.end156, label %land.lhs.true147, !dbg !6039

land.lhs.true147:                                 ; preds = %land.lhs.true143
  %83 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6040
  %84 = load i32, i32* %regno, align 4, !dbg !6041
  %idxprom148 = zext i32 %84 to i64, !dbg !6040
  %arrayidx149 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %83, i64 %idxprom148, !dbg !6040
  %85 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx149, align 8, !dbg !6040
  %cmp150 = icmp eq %struct.rtx_def* %85, null, !dbg !6042
  br i1 %cmp150, label %if.then152, label %if.end156, !dbg !6043

if.then152:                                       ; preds = %land.lhs.true147
  %86 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6044
  %call153 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %86), !dbg !6045
  %87 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6046
  %88 = load i32, i32* %regno, align 4, !dbg !6047
  %idxprom154 = zext i32 %88 to i64, !dbg !6046
  %arrayidx155 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %87, i64 %idxprom154, !dbg !6046
  store %struct.rtx_def* %call153, %struct.rtx_def** %arrayidx155, align 8, !dbg !6048
  br label %if.end156, !dbg !6046

if.end156:                                        ; preds = %if.then152, %land.lhs.true147, %land.lhs.true143, %lor.lhs.false139
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %sw.epilog
  %89 = load i8*, i8** @reg_seen, align 8, !dbg !6049
  %90 = load i32, i32* %regno, align 4, !dbg !6050
  %idxprom158 = zext i32 %90 to i64, !dbg !6049
  %arrayidx159 = getelementptr inbounds i8, i8* %89, i64 %idxprom158, !dbg !6049
  store i8 1, i8* %arrayidx159, align 1, !dbg !6051
  br label %return, !dbg !6052

return:                                           ; preds = %if.end157, %if.end43, %if.then40, %if.then31, %while.end, %if.then
  ret void, !dbg !6052
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #2

declare dso_local zeroext i8 @rtx_varies_p(%struct.rtx_def*, i8 zeroext) #2

declare dso_local i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_reg_known_value(i32 %regno, %struct.rtx_def* %val) #0 !dbg !6053 {
entry:
  %regno.addr = alloca i32, align 4
  %val.addr = alloca %struct.rtx_def*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !6056, metadata !DIExpression()), !dbg !6057
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val.addr, metadata !6058, metadata !DIExpression()), !dbg !6059
  %0 = load i32, i32* %regno.addr, align 4, !dbg !6060
  %cmp = icmp uge i32 %0, 53, !dbg !6062
  br i1 %cmp, label %if.then, label %if.end3, !dbg !6063

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !6064
  %sub = sub i32 %1, 53, !dbg !6064
  store i32 %sub, i32* %regno.addr, align 4, !dbg !6064
  %2 = load i32, i32* %regno.addr, align 4, !dbg !6066
  %3 = load i32, i32* @reg_known_value_size, align 4, !dbg !6068
  %cmp1 = icmp ult i32 %2, %3, !dbg !6069
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !6070

if.then2:                                         ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !6071
  %5 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6072
  %6 = load i32, i32* %regno.addr, align 4, !dbg !6073
  %idxprom = zext i32 %6 to i64, !dbg !6072
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 %idxprom, !dbg !6072
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx, align 8, !dbg !6074
  br label %if.end, !dbg !6072

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !6075

if.end3:                                          ; preds = %if.end, %entry
  ret void, !dbg !6076
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_reg_known_equiv_p(i32 %regno, i8 zeroext %val) #0 !dbg !6077 {
entry:
  %regno.addr = alloca i32, align 4
  %val.addr = alloca i8, align 1
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !6080, metadata !DIExpression()), !dbg !6081
  store i8 %val, i8* %val.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %val.addr, metadata !6082, metadata !DIExpression()), !dbg !6083
  %0 = load i32, i32* %regno.addr, align 4, !dbg !6084
  %cmp = icmp uge i32 %0, 53, !dbg !6086
  br i1 %cmp, label %if.then, label %if.end3, !dbg !6087

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !6088
  %sub = sub i32 %1, 53, !dbg !6088
  store i32 %sub, i32* %regno.addr, align 4, !dbg !6088
  %2 = load i32, i32* %regno.addr, align 4, !dbg !6090
  %3 = load i32, i32* @reg_known_value_size, align 4, !dbg !6092
  %cmp1 = icmp ult i32 %2, %3, !dbg !6093
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !6094

if.then2:                                         ; preds = %if.then
  %4 = load i8, i8* %val.addr, align 1, !dbg !6095
  %5 = load i8*, i8** @reg_known_equiv_p, align 8, !dbg !6096
  %6 = load i32, i32* %regno.addr, align 4, !dbg !6097
  %idxprom = zext i32 %6 to i64, !dbg !6096
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom, !dbg !6096
  store i8 %4, i8* %arrayidx, align 1, !dbg !6098
  br label %if.end, !dbg !6096

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !6099

if.end3:                                          ; preds = %if.end, %entry
  ret void, !dbg !6100
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @VEC_rtx_base_replace(%struct.VEC_rtx_base* %vec_, i32 %ix_, %struct.rtx_def* %obj_) #0 !dbg !6101 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %old_obj_ = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !6104, metadata !DIExpression()), !dbg !6105
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6106, metadata !DIExpression()), !dbg !6105
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !6107, metadata !DIExpression()), !dbg !6105
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_obj_, metadata !6108, metadata !DIExpression()), !dbg !6105
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !6105
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6105
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !6105
  %2 = load i32, i32* %num, align 8, !dbg !6105
  %cmp = icmp ult i32 %0, %2, !dbg !6105
  %conv = zext i1 %cmp to i32, !dbg !6105
  %3 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6105
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %3, i32 0, i32 2, !dbg !6105
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !6105
  %idxprom = zext i32 %4 to i64, !dbg !6105
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !6105
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6105
  store %struct.rtx_def* %5, %struct.rtx_def** %old_obj_, align 8, !dbg !6105
  %6 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !6105
  %7 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6105
  %vec1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %7, i32 0, i32 2, !dbg !6105
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !6105
  %idxprom2 = zext i32 %8 to i64, !dbg !6105
  %arrayidx3 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !6105
  store %struct.rtx_def* %6, %struct.rtx_def** %arrayidx3, align 8, !dbg !6105
  %9 = load %struct.rtx_def*, %struct.rtx_def** %old_obj_, align 8, !dbg !6105
  ret %struct.rtx_def* %9, !dbg !6105
}

declare dso_local void @free(i8*) #2

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @end_alias_analysis() #0 !dbg !6109 {
entry:
  %0 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6110
  store %struct.VEC_rtx_gc* %0, %struct.VEC_rtx_gc** @old_reg_base_value, align 8, !dbg !6111
  %1 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6112
  %2 = bitcast %struct.rtx_def** %1 to i8*, !dbg !6112
  call void @ggc_free(i8* %2), !dbg !6113
  store %struct.rtx_def** null, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6114
  store i32 0, i32* @reg_known_value_size, align 4, !dbg !6115
  %3 = load i8*, i8** @reg_known_equiv_p, align 8, !dbg !6116
  call void @free(i8* %3), !dbg !6117
  store i8* null, i8** @reg_known_equiv_p, align 8, !dbg !6118
  ret void, !dbg !6119
}

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_VEC_alias_set_entry_gc(i8* %x_p) #0 !dbg !6120 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.VEC_alias_set_entry_gc*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6121, metadata !DIExpression()), !dbg !6122
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_gc** %x, metadata !6123, metadata !DIExpression()), !dbg !6125
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6126
  %1 = bitcast i8* %0 to %struct.VEC_alias_set_entry_gc*, !dbg !6127
  store %struct.VEC_alias_set_entry_gc* %1, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6125
  %2 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6128
  %cmp = icmp ne %struct.VEC_alias_set_entry_gc* %2, null, !dbg !6128
  br i1 %cmp, label %land.lhs.true, label %if.end12, !dbg !6128

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6128
  %4 = bitcast %struct.VEC_alias_set_entry_gc* %3 to i8*, !dbg !6128
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !6128
  br i1 %cmp1, label %land.lhs.true2, label %if.end12, !dbg !6128

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6128
  %6 = bitcast %struct.VEC_alias_set_entry_gc* %5 to i8*, !dbg !6128
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !6128
  %tobool = icmp ne i32 %call, 0, !dbg !6128
  br i1 %tobool, label %if.end12, label %if.then, !dbg !6130

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !6131, metadata !DIExpression()), !dbg !6134
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !6135, metadata !DIExpression()), !dbg !6136
  %7 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6137
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %7, i32 0, i32 0, !dbg !6138
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base, i32 0, i32 0, !dbg !6139
  %8 = load i32, i32* %num, align 8, !dbg !6139
  %conv = zext i32 %8 to i64, !dbg !6140
  store i64 %conv, i64* %l0, align 8, !dbg !6136
  store i64 0, i64* %i0, align 8, !dbg !6141
  br label %for.cond, !dbg !6143

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i64, i64* %i0, align 8, !dbg !6144
  %10 = load i64, i64* %l0, align 8, !dbg !6146
  %cmp3 = icmp ne i64 %9, %10, !dbg !6147
  br i1 %cmp3, label %for.body, label %for.end, !dbg !6148

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !6149

do.body:                                          ; preds = %for.body
  %11 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6151
  %base5 = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %11, i32 0, i32 0, !dbg !6151
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base5, i32 0, i32 2, !dbg !6151
  %12 = load i64, i64* %i0, align 8, !dbg !6151
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %12, !dbg !6151
  %13 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx, align 8, !dbg !6151
  %cmp6 = icmp ne %struct.alias_set_entry_d* %13, null, !dbg !6151
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !6154

if.then8:                                         ; preds = %do.body
  %14 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6151
  %base9 = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %14, i32 0, i32 0, !dbg !6151
  %vec10 = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base9, i32 0, i32 2, !dbg !6151
  %15 = load i64, i64* %i0, align 8, !dbg !6151
  %arrayidx11 = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec10, i64 0, i64 %15, !dbg !6151
  %16 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx11, align 8, !dbg !6151
  %17 = bitcast %struct.alias_set_entry_d* %16 to i8*, !dbg !6151
  call void @gt_ggc_mx_alias_set_entry_d(i8* %17), !dbg !6151
  br label %if.end, !dbg !6151

if.end:                                           ; preds = %if.then8, %do.body
  br label %do.end, !dbg !6154

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !6155

for.inc:                                          ; preds = %do.end
  %18 = load i64, i64* %i0, align 8, !dbg !6156
  %inc = add i64 %18, 1, !dbg !6156
  store i64 %inc, i64* %i0, align 8, !dbg !6156
  br label %for.cond, !dbg !6157, !llvm.loop !6158

for.end:                                          ; preds = %for.cond
  br label %if.end12, !dbg !6160

if.end12:                                         ; preds = %for.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !6161
}

declare dso_local i32 @ggc_set_mark(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_alias_set_entry_d(i8* %x_p) #0 !dbg !6162 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.alias_set_entry_d*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %x, metadata !6165, metadata !DIExpression()), !dbg !6167
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6168
  %1 = bitcast i8* %0 to %struct.alias_set_entry_d*, !dbg !6169
  store %struct.alias_set_entry_d* %1, %struct.alias_set_entry_d** %x, align 8, !dbg !6167
  %2 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6170
  %cmp = icmp ne %struct.alias_set_entry_d* %2, null, !dbg !6170
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6170

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6170
  %4 = bitcast %struct.alias_set_entry_d* %3 to i8*, !dbg !6170
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !6170
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !6170

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6170
  %6 = bitcast %struct.alias_set_entry_d* %5 to i8*, !dbg !6170
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !6170
  %tobool = icmp ne i32 %call, 0, !dbg !6170
  br i1 %tobool, label %if.end, label %if.then, !dbg !6172

if.then:                                          ; preds = %land.lhs.true2
  %7 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6173
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %7, i32 0, i32 2, !dbg !6175
  %8 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children, align 8, !dbg !6175
  %9 = bitcast %struct.splay_tree_s* %8 to i8*, !dbg !6176
  call void @gt_ggc_m_II12splay_tree_s(i8* %9), !dbg !6177
  br label %if.end, !dbg !6178

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !6179
}

declare dso_local void @gt_ggc_m_II12splay_tree_s(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_VEC_alias_set_entry_gc(i8* %x_p) #0 !dbg !6180 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.VEC_alias_set_entry_gc*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_gc** %x, metadata !6183, metadata !DIExpression()), !dbg !6184
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6185
  %1 = bitcast i8* %0 to %struct.VEC_alias_set_entry_gc*, !dbg !6186
  store %struct.VEC_alias_set_entry_gc* %1, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6184
  %2 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6187
  %3 = bitcast %struct.VEC_alias_set_entry_gc* %2 to i8*, !dbg !6187
  %4 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6189
  %5 = bitcast %struct.VEC_alias_set_entry_gc* %4 to i8*, !dbg !6189
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_22VEC_alias_set_entry_gc, i32 93), !dbg !6190
  %tobool = icmp ne i32 %call, 0, !dbg !6190
  br i1 %tobool, label %if.then, label %if.end9, !dbg !6191

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !6192, metadata !DIExpression()), !dbg !6195
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !6196, metadata !DIExpression()), !dbg !6197
  %6 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6198
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %6, i32 0, i32 0, !dbg !6199
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base, i32 0, i32 0, !dbg !6200
  %7 = load i32, i32* %num, align 8, !dbg !6200
  %conv = zext i32 %7 to i64, !dbg !6201
  store i64 %conv, i64* %l0, align 8, !dbg !6197
  store i64 0, i64* %i0, align 8, !dbg !6202
  br label %for.cond, !dbg !6204

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i64, i64* %i0, align 8, !dbg !6205
  %9 = load i64, i64* %l0, align 8, !dbg !6207
  %cmp = icmp ne i64 %8, %9, !dbg !6208
  br i1 %cmp, label %for.body, label %for.end, !dbg !6209

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !6210

do.body:                                          ; preds = %for.body
  %10 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6212
  %base2 = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %10, i32 0, i32 0, !dbg !6212
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base2, i32 0, i32 2, !dbg !6212
  %11 = load i64, i64* %i0, align 8, !dbg !6212
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %11, !dbg !6212
  %12 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx, align 8, !dbg !6212
  %cmp3 = icmp ne %struct.alias_set_entry_d* %12, null, !dbg !6212
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !6215

if.then5:                                         ; preds = %do.body
  %13 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6212
  %base6 = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %13, i32 0, i32 0, !dbg !6212
  %vec7 = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base6, i32 0, i32 2, !dbg !6212
  %14 = load i64, i64* %i0, align 8, !dbg !6212
  %arrayidx8 = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec7, i64 0, i64 %14, !dbg !6212
  %15 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx8, align 8, !dbg !6212
  %16 = bitcast %struct.alias_set_entry_d* %15 to i8*, !dbg !6212
  call void @gt_pch_nx_alias_set_entry_d(i8* %16), !dbg !6212
  br label %if.end, !dbg !6212

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !6215

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !6216

for.inc:                                          ; preds = %do.end
  %17 = load i64, i64* %i0, align 8, !dbg !6217
  %inc = add i64 %17, 1, !dbg !6217
  store i64 %inc, i64* %i0, align 8, !dbg !6217
  br label %for.cond, !dbg !6218, !llvm.loop !6219

for.end:                                          ; preds = %for.cond
  br label %if.end9, !dbg !6221

if.end9:                                          ; preds = %for.end, %entry
  ret void, !dbg !6222
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_22VEC_alias_set_entry_gc(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !6223 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.VEC_alias_set_entry_gc*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !6227, metadata !DIExpression()), !dbg !6228
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6229, metadata !DIExpression()), !dbg !6230
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !6231, metadata !DIExpression()), !dbg !6232
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !6233, metadata !DIExpression()), !dbg !6234
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_gc** %x, metadata !6235, metadata !DIExpression()), !dbg !6236
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6237
  %1 = bitcast i8* %0 to %struct.VEC_alias_set_entry_gc*, !dbg !6238
  store %struct.VEC_alias_set_entry_gc* %1, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6236
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !6239, metadata !DIExpression()), !dbg !6241
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !6242, metadata !DIExpression()), !dbg !6243
  %2 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6244
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %2, i32 0, i32 0, !dbg !6245
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base, i32 0, i32 0, !dbg !6246
  %3 = load i32, i32* %num, align 8, !dbg !6246
  %conv = zext i32 %3 to i64, !dbg !6247
  store i64 %conv, i64* %l0, align 8, !dbg !6243
  store i64 0, i64* %i0, align 8, !dbg !6248
  br label %for.cond, !dbg !6250

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i0, align 8, !dbg !6251
  %5 = load i64, i64* %l0, align 8, !dbg !6253
  %cmp = icmp ne i64 %4, %5, !dbg !6254
  br i1 %cmp, label %for.body, label %for.end, !dbg !6255

for.body:                                         ; preds = %for.cond
  %6 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6256
  %7 = bitcast %struct.VEC_alias_set_entry_gc* %6 to i8*, !dbg !6259
  %8 = load i8*, i8** %this_obj.addr, align 8, !dbg !6260
  %cmp2 = icmp eq i8* %7, %8, !dbg !6261
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6262

if.then:                                          ; preds = %for.body
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !6263
  %10 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %x, align 8, !dbg !6264
  %base4 = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %10, i32 0, i32 0, !dbg !6265
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %base4, i32 0, i32 2, !dbg !6266
  %11 = load i64, i64* %i0, align 8, !dbg !6267
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %11, !dbg !6268
  %12 = bitcast %struct.alias_set_entry_d** %arrayidx to i8*, !dbg !6269
  %13 = load i8*, i8** %cookie.addr, align 8, !dbg !6270
  call void %9(i8* %12, i8* %13), !dbg !6263
  br label %if.end, !dbg !6263

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6271

for.inc:                                          ; preds = %if.end
  %14 = load i64, i64* %i0, align 8, !dbg !6272
  %inc = add i64 %14, 1, !dbg !6272
  store i64 %inc, i64* %i0, align 8, !dbg !6272
  br label %for.cond, !dbg !6273, !llvm.loop !6274

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6276
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_alias_set_entry_d(i8* %x_p) #0 !dbg !6277 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.alias_set_entry_d*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %x, metadata !6280, metadata !DIExpression()), !dbg !6281
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6282
  %1 = bitcast i8* %0 to %struct.alias_set_entry_d*, !dbg !6283
  store %struct.alias_set_entry_d* %1, %struct.alias_set_entry_d** %x, align 8, !dbg !6281
  %2 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6284
  %3 = bitcast %struct.alias_set_entry_d* %2 to i8*, !dbg !6284
  %4 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6286
  %5 = bitcast %struct.alias_set_entry_d* %4 to i8*, !dbg !6286
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_17alias_set_entry_d, i32 94), !dbg !6287
  %tobool = icmp ne i32 %call, 0, !dbg !6287
  br i1 %tobool, label %if.then, label %if.end, !dbg !6288

if.then:                                          ; preds = %entry
  %6 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6289
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %6, i32 0, i32 2, !dbg !6291
  %7 = load %struct.splay_tree_s*, %struct.splay_tree_s** %children, align 8, !dbg !6291
  %8 = bitcast %struct.splay_tree_s* %7 to i8*, !dbg !6292
  call void @gt_pch_n_II12splay_tree_s(i8* %8), !dbg !6293
  br label %if.end, !dbg !6294

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6295
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_17alias_set_entry_d(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !6296 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.alias_set_entry_d*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !6297, metadata !DIExpression()), !dbg !6298
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !6301, metadata !DIExpression()), !dbg !6302
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !6303, metadata !DIExpression()), !dbg !6304
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %x, metadata !6305, metadata !DIExpression()), !dbg !6306
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !6307
  %1 = bitcast i8* %0 to %struct.alias_set_entry_d*, !dbg !6308
  store %struct.alias_set_entry_d* %1, %struct.alias_set_entry_d** %x, align 8, !dbg !6306
  %2 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6309
  %3 = bitcast %struct.alias_set_entry_d* %2 to i8*, !dbg !6311
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !6312
  %cmp = icmp eq i8* %3, %4, !dbg !6313
  br i1 %cmp, label %if.then, label %if.end, !dbg !6314

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !6315
  %6 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %x, align 8, !dbg !6316
  %children = getelementptr inbounds %struct.alias_set_entry_d, %struct.alias_set_entry_d* %6, i32 0, i32 2, !dbg !6317
  %7 = bitcast %struct.splay_tree_s** %children to i8*, !dbg !6318
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !6319
  call void %5(i8* %7, i8* %8), !dbg !6315
  br label %if.end, !dbg !6315

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6320
}

declare dso_local void @gt_pch_n_II12splay_tree_s(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gt_ggc_ma_reg_known_value(i8* %x_p) #0 !dbg !6321 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6322, metadata !DIExpression()), !dbg !6323
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6324
  %cmp = icmp ne %struct.rtx_def** %0, null, !dbg !6326
  br i1 %cmp, label %if.then, label %if.end15, !dbg !6327

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !6328, metadata !DIExpression()), !dbg !6330
  store i64 0, i64* %i0, align 8, !dbg !6331
  br label %for.cond, !dbg !6333

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !6334
  %2 = load i32, i32* @reg_known_value_size, align 4, !dbg !6336
  %conv = zext i32 %2 to i64, !dbg !6337
  %cmp1 = icmp ne i64 %1, %conv, !dbg !6338
  br i1 %cmp1, label %for.body, label %for.end, !dbg !6339

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !6340

do.body:                                          ; preds = %for.body
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6342
  %4 = load i64, i64* %i0, align 8, !dbg !6342
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %4, !dbg !6342
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6342
  %cmp3 = icmp ne %struct.rtx_def* %5, null, !dbg !6342
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !6345

if.then5:                                         ; preds = %do.body
  %6 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6342
  %7 = load i64, i64* %i0, align 8, !dbg !6342
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 %7, !dbg !6342
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !6342
  %9 = bitcast %struct.rtx_def* %8 to i8*, !dbg !6342
  call void @gt_ggc_mx_rtx_def(i8* %9), !dbg !6342
  br label %if.end, !dbg !6342

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !6345

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !6346

for.inc:                                          ; preds = %do.end
  %10 = load i64, i64* %i0, align 8, !dbg !6347
  %inc = add i64 %10, 1, !dbg !6347
  store i64 %inc, i64* %i0, align 8, !dbg !6347
  br label %for.cond, !dbg !6348, !llvm.loop !6349

for.end:                                          ; preds = %for.cond
  br label %do.body7, !dbg !6351

do.body7:                                         ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !6352, metadata !DIExpression()), !dbg !6355
  %11 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6355
  %12 = bitcast %struct.rtx_def** %11 to i8*, !dbg !6355
  store i8* %12, i8** %a__, align 8, !dbg !6355
  %13 = load i8*, i8** %a__, align 8, !dbg !6356
  %cmp8 = icmp ne i8* %13, null, !dbg !6356
  br i1 %cmp8, label %land.lhs.true, label %if.end13, !dbg !6356

land.lhs.true:                                    ; preds = %do.body7
  %14 = load i8*, i8** %a__, align 8, !dbg !6356
  %cmp10 = icmp ne i8* %14, inttoptr (i64 1 to i8*), !dbg !6356
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6355

if.then12:                                        ; preds = %land.lhs.true
  %15 = load i8*, i8** %a__, align 8, !dbg !6356
  %call = call i32 @ggc_set_mark(i8* %15), !dbg !6356
  br label %if.end13, !dbg !6356

if.end13:                                         ; preds = %if.then12, %land.lhs.true, %do.body7
  br label %do.end14, !dbg !6355

do.end14:                                         ; preds = %if.end13
  br label %if.end15, !dbg !6358

if.end15:                                         ; preds = %do.end14, %entry
  ret void, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_na_reg_known_value(i8* %x_p) #0 !dbg !6360 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i1 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6361, metadata !DIExpression()), !dbg !6362
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6363
  %cmp = icmp ne %struct.rtx_def** %0, null, !dbg !6365
  br i1 %cmp, label %if.then, label %if.end7, !dbg !6366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i1, metadata !6367, metadata !DIExpression()), !dbg !6369
  store i64 0, i64* %i1, align 8, !dbg !6370
  br label %for.cond, !dbg !6372

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i1, align 8, !dbg !6373
  %2 = load i32, i32* @reg_known_value_size, align 4, !dbg !6375
  %conv = zext i32 %2 to i64, !dbg !6376
  %cmp1 = icmp ne i64 %1, %conv, !dbg !6377
  br i1 %cmp1, label %for.body, label %for.end, !dbg !6378

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !6379

do.body:                                          ; preds = %for.body
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6381
  %4 = load i64, i64* %i1, align 8, !dbg !6381
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %4, !dbg !6381
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6381
  %cmp3 = icmp ne %struct.rtx_def* %5, null, !dbg !6381
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !6384

if.then5:                                         ; preds = %do.body
  %6 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6381
  %7 = load i64, i64* %i1, align 8, !dbg !6381
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 %7, !dbg !6381
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !6381
  %9 = bitcast %struct.rtx_def* %8 to i8*, !dbg !6381
  call void @gt_pch_nx_rtx_def(i8* %9), !dbg !6381
  br label %if.end, !dbg !6381

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !6384

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !6385

for.inc:                                          ; preds = %do.end
  %10 = load i64, i64* %i1, align 8, !dbg !6386
  %inc = add i64 %10, 1, !dbg !6386
  store i64 %inc, i64* %i1, align 8, !dbg !6386
  br label %for.cond, !dbg !6387, !llvm.loop !6388

for.end:                                          ; preds = %for.cond
  %11 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !6390
  %12 = bitcast %struct.rtx_def** %11 to i8*, !dbg !6390
  %call = call i32 @gt_pch_note_object(i8* %12, i8* bitcast (%struct.rtx_def*** @reg_known_value to i8*), void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_pa_reg_known_value, i32 217), !dbg !6391
  br label %if.end7, !dbg !6392

if.end7:                                          ; preds = %for.end, %entry
  ret void, !dbg !6393
}

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

declare dso_local void @gt_ggc_mx_VEC_rtx_gc(i8*) #2

declare dso_local void @gt_pch_nx_VEC_rtx_gc(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_set_entry_d* @VEC_alias_set_entry_base_index(%struct.VEC_alias_set_entry_base* %vec_, i32 %ix_) #0 !dbg !6394 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_alias_set_entry_base* %vec_, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_base** %vec_.addr, metadata !6397, metadata !DIExpression()), !dbg !6398
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6399, metadata !DIExpression()), !dbg !6398
  %0 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6398
  %tobool = icmp ne %struct.VEC_alias_set_entry_base* %0, null, !dbg !6398
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6398

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6398
  %2 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6398
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %2, i32 0, i32 0, !dbg !6398
  %3 = load i32, i32* %num, align 8, !dbg !6398
  %cmp = icmp ult i32 %1, %3, !dbg !6398
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6400
  %land.ext = zext i1 %4 to i32, !dbg !6398
  %5 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6398
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %5, i32 0, i32 2, !dbg !6398
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6398
  %idxprom = zext i32 %6 to i64, !dbg !6398
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %idxprom, !dbg !6398
  %7 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %arrayidx, align 8, !dbg !6398
  ret %struct.alias_set_entry_d* %7, !dbg !6398
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @walk_mems_2(%struct.rtx_def** %x, %struct.rtx_def* %mem) #0 !dbg !6401 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def**, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %x, %struct.rtx_def*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %x.addr, metadata !6404, metadata !DIExpression()), !dbg !6405
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !6406, metadata !DIExpression()), !dbg !6407
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !6408
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !6408
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6408
  %bf.load = load i32, i32* %2, align 8, !dbg !6408
  %bf.clear = and i32 %bf.load, 65535, !dbg !6408
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !6408
  br i1 %cmp, label %if.then, label %if.end21, !dbg !6410

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !6411
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8, !dbg !6411
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6411
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6411
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6411
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !6411
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !6411
  %cmp1 = icmp eq %struct.mem_attrs* %5, null, !dbg !6411
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !6411

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !6411

cond.false:                                       ; preds = %if.then
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !6411
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8, !dbg !6411
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6411
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6411
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !6411
  %rt_mem5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.mem_attrs**, !dbg !6411
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem5, align 8, !dbg !6411
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 3, !dbg !6411
  %9 = load i32, i32* %alias, align 8, !dbg !6411
  br label %cond.end, !dbg !6411

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %9, %cond.false ], !dbg !6411
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6414
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6414
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !6414
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !6414
  %rt_mem9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.mem_attrs**, !dbg !6414
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem9, align 8, !dbg !6414
  %cmp10 = icmp eq %struct.mem_attrs* %11, null, !dbg !6414
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !6414

cond.true11:                                      ; preds = %cond.end
  br label %cond.end18, !dbg !6414

cond.false12:                                     ; preds = %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6414
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6414
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6414
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !6414
  %rt_mem16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**, !dbg !6414
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem16, align 8, !dbg !6414
  %alias17 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 3, !dbg !6414
  %14 = load i32, i32* %alias17, align 8, !dbg !6414
  br label %cond.end18, !dbg !6414

cond.end18:                                       ; preds = %cond.false12, %cond.true11
  %cond19 = phi i32 [ 0, %cond.true11 ], [ %14, %cond.false12 ], !dbg !6414
  %call = call i32 @alias_sets_conflict_p(i32 %cond, i32 %cond19), !dbg !6415
  %tobool = icmp ne i32 %call, 0, !dbg !6415
  br i1 %tobool, label %if.then20, label %if.end, !dbg !6416

if.then20:                                        ; preds = %cond.end18
  store i32 1, i32* %retval, align 4, !dbg !6417
  br label %return, !dbg !6417

if.end:                                           ; preds = %cond.end18
  store i32 -1, i32* %retval, align 4, !dbg !6418
  br label %return, !dbg !6418

if.end21:                                         ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6419
  br label %return, !dbg !6419

return:                                           ; preds = %if.end21, %if.end, %if.then20
  %15 = load i32, i32* %retval, align 4, !dbg !6420
  ret i32 %15, !dbg !6420
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_set_entry_gc_reserve(%struct.VEC_alias_set_entry_gc** %vec_, i32 %alloc_) #0 !dbg !6421 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_alias_set_entry_gc** %vec_, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_gc*** %vec_.addr, metadata !6424, metadata !DIExpression()), !dbg !6425
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6426, metadata !DIExpression()), !dbg !6425
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6427, metadata !DIExpression()), !dbg !6425
  %0 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !6425
  %1 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %0, align 8, !dbg !6425
  %tobool = icmp ne %struct.VEC_alias_set_entry_gc* %1, null, !dbg !6425
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6425

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !6425
  %3 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %2, align 8, !dbg !6425
  %base = getelementptr inbounds %struct.VEC_alias_set_entry_gc, %struct.VEC_alias_set_entry_gc* %3, i32 0, i32 0, !dbg !6425
  br label %cond.end, !dbg !6425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_set_entry_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6425
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6425
  %call = call i32 @VEC_alias_set_entry_base_space(%struct.VEC_alias_set_entry_base* %cond, i32 %4), !dbg !6425
  %tobool1 = icmp ne i32 %call, 0, !dbg !6425
  %lnot = xor i1 %tobool1, true, !dbg !6425
  %lnot.ext = zext i1 %lnot to i32, !dbg !6425
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6425
  %5 = load i32, i32* %extend, align 4, !dbg !6428
  %tobool2 = icmp ne i32 %5, 0, !dbg !6428
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6425

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !6428
  %7 = load %struct.VEC_alias_set_entry_gc*, %struct.VEC_alias_set_entry_gc** %6, align 8, !dbg !6428
  %8 = bitcast %struct.VEC_alias_set_entry_gc* %7 to i8*, !dbg !6428
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6428
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6428
  %10 = bitcast i8* %call3 to %struct.VEC_alias_set_entry_gc*, !dbg !6428
  %11 = load %struct.VEC_alias_set_entry_gc**, %struct.VEC_alias_set_entry_gc*** %vec_.addr, align 8, !dbg !6428
  store %struct.VEC_alias_set_entry_gc* %10, %struct.VEC_alias_set_entry_gc** %11, align 8, !dbg !6428
  br label %if.end, !dbg !6428

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6425
  ret i32 %12, !dbg !6425
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_set_entry_d** @VEC_alias_set_entry_base_quick_push(%struct.VEC_alias_set_entry_base* %vec_, %struct.alias_set_entry_d* %obj_) #0 !dbg !6430 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_base*, align 8
  %obj_.addr = alloca %struct.alias_set_entry_d*, align 8
  %slot_ = alloca %struct.alias_set_entry_d**, align 8
  store %struct.VEC_alias_set_entry_base* %vec_, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_base** %vec_.addr, metadata !6433, metadata !DIExpression()), !dbg !6434
  store %struct.alias_set_entry_d* %obj_, %struct.alias_set_entry_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d** %obj_.addr, metadata !6435, metadata !DIExpression()), !dbg !6434
  call void @llvm.dbg.declare(metadata %struct.alias_set_entry_d*** %slot_, metadata !6436, metadata !DIExpression()), !dbg !6434
  %0 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6434
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %0, i32 0, i32 0, !dbg !6434
  %1 = load i32, i32* %num, align 8, !dbg !6434
  %2 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6434
  %alloc = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %2, i32 0, i32 1, !dbg !6434
  %3 = load i32, i32* %alloc, align 4, !dbg !6434
  %cmp = icmp ult i32 %1, %3, !dbg !6434
  %conv = zext i1 %cmp to i32, !dbg !6434
  %4 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6434
  %vec = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %4, i32 0, i32 2, !dbg !6434
  %5 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6434
  %num1 = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %5, i32 0, i32 0, !dbg !6434
  %6 = load i32, i32* %num1, align 8, !dbg !6434
  %inc = add i32 %6, 1, !dbg !6434
  store i32 %inc, i32* %num1, align 8, !dbg !6434
  %idxprom = zext i32 %6 to i64, !dbg !6434
  %arrayidx = getelementptr inbounds [1 x %struct.alias_set_entry_d*], [1 x %struct.alias_set_entry_d*]* %vec, i64 0, i64 %idxprom, !dbg !6434
  store %struct.alias_set_entry_d** %arrayidx, %struct.alias_set_entry_d*** %slot_, align 8, !dbg !6434
  %7 = load %struct.alias_set_entry_d*, %struct.alias_set_entry_d** %obj_.addr, align 8, !dbg !6434
  %8 = load %struct.alias_set_entry_d**, %struct.alias_set_entry_d*** %slot_, align 8, !dbg !6434
  store %struct.alias_set_entry_d* %7, %struct.alias_set_entry_d** %8, align 8, !dbg !6434
  %9 = load %struct.alias_set_entry_d**, %struct.alias_set_entry_d*** %slot_, align 8, !dbg !6434
  ret %struct.alias_set_entry_d** %9, !dbg !6434
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_set_entry_base_space(%struct.VEC_alias_set_entry_base* %vec_, i32 %alloc_) #0 !dbg !6437 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_set_entry_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_alias_set_entry_base* %vec_, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_set_entry_base** %vec_.addr, metadata !6440, metadata !DIExpression()), !dbg !6441
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6442, metadata !DIExpression()), !dbg !6441
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6441
  %cmp = icmp sge i32 %0, 0, !dbg !6441
  %conv = zext i1 %cmp to i32, !dbg !6441
  %1 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6441
  %tobool = icmp ne %struct.VEC_alias_set_entry_base* %1, null, !dbg !6441
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6441

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6441
  %alloc = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %2, i32 0, i32 1, !dbg !6441
  %3 = load i32, i32* %alloc, align 4, !dbg !6441
  %4 = load %struct.VEC_alias_set_entry_base*, %struct.VEC_alias_set_entry_base** %vec_.addr, align 8, !dbg !6441
  %num = getelementptr inbounds %struct.VEC_alias_set_entry_base, %struct.VEC_alias_set_entry_base* %4, i32 0, i32 0, !dbg !6441
  %5 = load i32, i32* %num, align 8, !dbg !6441
  %sub = sub i32 %3, %5, !dbg !6441
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6441
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6441
  %conv2 = zext i1 %cmp1 to i32, !dbg !6441
  br label %cond.end, !dbg !6441

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6441
  %tobool3 = icmp ne i32 %7, 0, !dbg !6441
  %lnot = xor i1 %tobool3, true, !dbg !6441
  %lnot.ext = zext i1 %lnot to i32, !dbg !6441
  br label %cond.end, !dbg !6441

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6441
  ret i32 %cond, !dbg !6441
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %union.tree_node* @component_ref_field_offset(%union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @addr_side_effect_eval(%struct.rtx_def* %addr, i32 %size, i32 %n_refs) #0 !dbg !6443 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %addr.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca i32, align 4
  %n_refs.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !6446, metadata !DIExpression()), !dbg !6447
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6448, metadata !DIExpression()), !dbg !6449
  store i32 %n_refs, i32* %n_refs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_refs.addr, metadata !6450, metadata !DIExpression()), !dbg !6451
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !6452, metadata !DIExpression()), !dbg !6453
  store i32 0, i32* %offset, align 4, !dbg !6453
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6454
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6454
  %bf.load = load i32, i32* %1, align 8, !dbg !6454
  %bf.clear = and i32 %bf.load, 65535, !dbg !6454
  switch i32 %bf.clear, label %sw.default [
    i32 75, label %sw.bb
    i32 74, label %sw.bb1
    i32 77, label %sw.bb4
    i32 76, label %sw.bb6
  ], !dbg !6455

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n_refs.addr, align 4, !dbg !6456
  %add = add nsw i32 %2, 1, !dbg !6458
  %3 = load i32, i32* %size.addr, align 4, !dbg !6459
  %mul = mul nsw i32 %add, %3, !dbg !6460
  store i32 %mul, i32* %offset, align 4, !dbg !6461
  br label %sw.epilog, !dbg !6462

sw.bb1:                                           ; preds = %entry
  %4 = load i32, i32* %n_refs.addr, align 4, !dbg !6463
  %add2 = add nsw i32 %4, 1, !dbg !6464
  %sub = sub nsw i32 0, %add2, !dbg !6465
  %5 = load i32, i32* %size.addr, align 4, !dbg !6466
  %mul3 = mul nsw i32 %sub, %5, !dbg !6467
  store i32 %mul3, i32* %offset, align 4, !dbg !6468
  br label %sw.epilog, !dbg !6469

sw.bb4:                                           ; preds = %entry
  %6 = load i32, i32* %n_refs.addr, align 4, !dbg !6470
  %7 = load i32, i32* %size.addr, align 4, !dbg !6471
  %mul5 = mul nsw i32 %6, %7, !dbg !6472
  store i32 %mul5, i32* %offset, align 4, !dbg !6473
  br label %sw.epilog, !dbg !6474

sw.bb6:                                           ; preds = %entry
  %8 = load i32, i32* %n_refs.addr, align 4, !dbg !6475
  %sub7 = sub nsw i32 0, %8, !dbg !6476
  %9 = load i32, i32* %size.addr, align 4, !dbg !6477
  %mul8 = mul nsw i32 %sub7, %9, !dbg !6478
  store i32 %mul8, i32* %offset, align 4, !dbg !6479
  br label %sw.epilog, !dbg !6480

sw.default:                                       ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6481
  store %struct.rtx_def* %10, %struct.rtx_def** %retval, align 8, !dbg !6482
  br label %return, !dbg !6482

sw.epilog:                                        ; preds = %sw.bb6, %sw.bb4, %sw.bb1, %sw.bb
  %11 = load i32, i32* %offset, align 4, !dbg !6483
  %tobool = icmp ne i32 %11, 0, !dbg !6483
  br i1 %tobool, label %if.then, label %if.else, !dbg !6485

if.then:                                          ; preds = %sw.epilog
  %12 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6486
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6486
  %bf.load9 = load i32, i32* %13, align 8, !dbg !6486
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !6486
  %bf.clear10 = and i32 %bf.lshr, 255, !dbg !6486
  %14 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6486
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6486
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6486
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6486
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6486
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6486
  %16 = load i32, i32* %offset, align 4, !dbg !6486
  %conv = sext i32 %16 to i64, !dbg !6486
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !6486
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %bf.clear10, %struct.rtx_def* %15, %struct.rtx_def* %call), !dbg !6486
  store %struct.rtx_def* %call11, %struct.rtx_def** %addr.addr, align 8, !dbg !6487
  br label %if.end, !dbg !6488

if.else:                                          ; preds = %sw.epilog
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6489
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6489
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6489
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 0, !dbg !6489
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !6489
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !6489
  store %struct.rtx_def* %18, %struct.rtx_def** %addr.addr, align 8, !dbg !6490
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6491
  %call16 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %19), !dbg !6492
  store %struct.rtx_def* %call16, %struct.rtx_def** %addr.addr, align 8, !dbg !6493
  %20 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !6494
  store %struct.rtx_def* %20, %struct.rtx_def** %retval, align 8, !dbg !6495
  br label %return, !dbg !6495

return:                                           ; preds = %if.end, %sw.default
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6496
  ret %struct.rtx_def* %21, !dbg !6496
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rtx_equal_for_memref_p(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !6497 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %yop0 = alloca %struct.rtx_def*, align 8
  %yop1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6498, metadata !DIExpression()), !dbg !6499
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !6500, metadata !DIExpression()), !dbg !6501
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6502, metadata !DIExpression()), !dbg !6503
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6504, metadata !DIExpression()), !dbg !6505
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6506, metadata !DIExpression()), !dbg !6507
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !6508, metadata !DIExpression()), !dbg !6509
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6510
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !6512
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6513

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6514
  %cmp1 = icmp eq %struct.rtx_def* %1, null, !dbg !6515
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6516

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !6517
  br label %return, !dbg !6517

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6518
  %cmp2 = icmp eq %struct.rtx_def* %2, null, !dbg !6520
  br i1 %cmp2, label %if.then4, label %lor.lhs.false, !dbg !6521

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6522
  %cmp3 = icmp eq %struct.rtx_def* %3, null, !dbg !6523
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6524

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !6525
  br label %return, !dbg !6525

if.end5:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6526
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6528
  %cmp6 = icmp eq %struct.rtx_def* %4, %5, !dbg !6529
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !6530

if.then7:                                         ; preds = %if.end5
  store i32 1, i32* %retval, align 4, !dbg !6531
  br label %return, !dbg !6531

if.end8:                                          ; preds = %if.end5
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6532
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6532
  %bf.load = load i32, i32* %7, align 8, !dbg !6532
  %bf.clear = and i32 %bf.load, 65535, !dbg !6532
  store i32 %bf.clear, i32* %code, align 4, !dbg !6533
  %8 = load i32, i32* %code, align 4, !dbg !6534
  %9 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6536
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6536
  %bf.load9 = load i32, i32* %10, align 8, !dbg !6536
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6536
  %cmp11 = icmp ne i32 %8, %bf.clear10, !dbg !6537
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !6538

if.then12:                                        ; preds = %if.end8
  store i32 0, i32* %retval, align 4, !dbg !6539
  br label %return, !dbg !6539

if.end13:                                         ; preds = %if.end8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6540
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6540
  %bf.load14 = load i32, i32* %12, align 8, !dbg !6540
  %bf.lshr = lshr i32 %bf.load14, 16, !dbg !6540
  %bf.clear15 = and i32 %bf.lshr, 255, !dbg !6540
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6542
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6542
  %bf.load16 = load i32, i32* %14, align 8, !dbg !6542
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !6542
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !6542
  %cmp19 = icmp ne i32 %bf.clear15, %bf.clear18, !dbg !6543
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !6544

if.then20:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !6545
  br label %return, !dbg !6545

if.end21:                                         ; preds = %if.end13
  %15 = load i32, i32* %code, align 4, !dbg !6546
  switch i32 %15, label %sw.default [
    i32 37, label %sw.bb
    i32 44, label %sw.bb24
    i32 45, label %sw.bb31
    i32 1, label %sw.bb41
    i32 30, label %sw.bb41
    i32 32, label %sw.bb41
    i32 31, label %sw.bb41
  ], !dbg !6547

sw.bb:                                            ; preds = %if.end21
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6548
  %call = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !6548
  %17 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6550
  %call22 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !6550
  %cmp23 = icmp eq i32 %call, %call22, !dbg !6551
  %conv = zext i1 %cmp23 to i32, !dbg !6551
  store i32 %conv, i32* %retval, align 4, !dbg !6552
  br label %return, !dbg !6552

sw.bb24:                                          ; preds = %if.end21
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6553
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6553
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6553
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6553
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6553
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6553
  %20 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6554
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6554
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6554
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !6554
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !6554
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !6554
  %cmp29 = icmp eq %struct.rtx_def* %19, %21, !dbg !6555
  %conv30 = zext i1 %cmp29 to i32, !dbg !6555
  store i32 %conv30, i32* %retval, align 4, !dbg !6556
  br label %return, !dbg !6556

sw.bb31:                                          ; preds = %if.end21
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6557
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6557
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !6557
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !6557
  %rt_str = bitcast %union.rtunion_def* %arrayidx34 to i8**, !dbg !6557
  %23 = load i8*, i8** %rt_str, align 8, !dbg !6557
  %24 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6558
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !6558
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !6558
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !6558
  %rt_str38 = bitcast %union.rtunion_def* %arrayidx37 to i8**, !dbg !6558
  %25 = load i8*, i8** %rt_str38, align 8, !dbg !6558
  %cmp39 = icmp eq i8* %23, %25, !dbg !6559
  %conv40 = zext i1 %cmp39 to i32, !dbg !6559
  store i32 %conv40, i32* %retval, align 4, !dbg !6560
  br label %return, !dbg !6560

sw.bb41:                                          ; preds = %if.end21, %if.end21, %if.end21, %if.end21
  store i32 0, i32* %retval, align 4, !dbg !6561
  br label %return, !dbg !6561

sw.default:                                       ; preds = %if.end21
  br label %sw.epilog, !dbg !6562

sw.epilog:                                        ; preds = %sw.default
  %26 = load i32, i32* %code, align 4, !dbg !6563
  %cmp42 = icmp eq i32 %26, 49, !dbg !6565
  br i1 %cmp42, label %if.then44, label %if.end85, !dbg !6566

if.then44:                                        ; preds = %sw.epilog
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6567
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6567
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !6567
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !6567
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !6567
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !6567
  %29 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6568
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6568
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !6568
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !6568
  %rt_rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !6568
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx52, align 8, !dbg !6568
  %call53 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %28, %struct.rtx_def* %30), !dbg !6569
  %tobool = icmp ne i32 %call53, 0, !dbg !6569
  br i1 %tobool, label %land.lhs.true54, label %lor.rhs, !dbg !6570

land.lhs.true54:                                  ; preds = %if.then44
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6571
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6571
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !6571
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !6571
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !6571
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !6571
  %33 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6572
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !6572
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !6572
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !6572
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !6572
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !6572
  %call63 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %32, %struct.rtx_def* %34), !dbg !6573
  %tobool64 = icmp ne i32 %call63, 0, !dbg !6573
  br i1 %tobool64, label %lor.end, label %lor.rhs, !dbg !6574

lor.rhs:                                          ; preds = %land.lhs.true54, %if.then44
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6575
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6575
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !6575
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !6575
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !6575
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !6575
  %37 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6576
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !6576
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !6576
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 1, !dbg !6576
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !6576
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !6576
  %call73 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %36, %struct.rtx_def* %38), !dbg !6577
  %tobool74 = icmp ne i32 %call73, 0, !dbg !6577
  br i1 %tobool74, label %land.rhs, label %land.end, !dbg !6578

land.rhs:                                         ; preds = %lor.rhs
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6579
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6579
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !6579
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !6579
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !6579
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !6579
  %41 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6580
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6580
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !6580
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 0, !dbg !6580
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !6580
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !6580
  %call83 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %40, %struct.rtx_def* %42), !dbg !6581
  %tobool84 = icmp ne i32 %call83, 0, !dbg !6578
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %43 = phi i1 [ false, %lor.rhs ], [ %tobool84, %land.rhs ], !dbg !6582
  br label %lor.end, !dbg !6574

lor.end:                                          ; preds = %land.end, %land.lhs.true54
  %44 = phi i1 [ true, %land.lhs.true54 ], [ %43, %land.end ]
  %lor.ext = zext i1 %44 to i32, !dbg !6574
  store i32 %lor.ext, i32* %retval, align 4, !dbg !6583
  br label %return, !dbg !6583

if.end85:                                         ; preds = %sw.epilog
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6584
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !6584
  %bf.load86 = load i32, i32* %46, align 8, !dbg !6584
  %bf.clear87 = and i32 %bf.load86, 65535, !dbg !6584
  %idxprom = sext i32 %bf.clear87 to i64, !dbg !6584
  %arrayidx88 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6584
  %47 = load i32, i32* %arrayidx88, align 4, !dbg !6584
  %and = and i32 %47, -3, !dbg !6584
  %cmp89 = icmp eq i32 %and, 1, !dbg !6584
  br i1 %cmp89, label %if.then91, label %if.else, !dbg !6586

if.then91:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !6587, metadata !DIExpression()), !dbg !6589
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6590
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6590
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !6590
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 0, !dbg !6590
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !6590
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !6590
  %call96 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %49), !dbg !6591
  store %struct.rtx_def* %call96, %struct.rtx_def** %xop0, align 8, !dbg !6589
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %yop0, metadata !6592, metadata !DIExpression()), !dbg !6593
  %50 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6594
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6594
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !6594
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !6594
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !6594
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !6594
  %call101 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %51), !dbg !6595
  store %struct.rtx_def* %call101, %struct.rtx_def** %yop0, align 8, !dbg !6593
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %yop1, metadata !6596, metadata !DIExpression()), !dbg !6597
  %52 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6598
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6598
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !6598
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 1, !dbg !6598
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !6598
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !6598
  %call106 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %53), !dbg !6599
  store %struct.rtx_def* %call106, %struct.rtx_def** %yop1, align 8, !dbg !6597
  %54 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6600
  %55 = load %struct.rtx_def*, %struct.rtx_def** %yop0, align 8, !dbg !6601
  %call107 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %54, %struct.rtx_def* %55), !dbg !6602
  %tobool108 = icmp ne i32 %call107, 0, !dbg !6602
  br i1 %tobool108, label %land.lhs.true109, label %lor.rhs117, !dbg !6603

land.lhs.true109:                                 ; preds = %if.then91
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6604
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !6604
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !6604
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 1, !dbg !6604
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !6604
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !6604
  %call114 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %57), !dbg !6605
  %58 = load %struct.rtx_def*, %struct.rtx_def** %yop1, align 8, !dbg !6606
  %call115 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call114, %struct.rtx_def* %58), !dbg !6607
  %tobool116 = icmp ne i32 %call115, 0, !dbg !6607
  br i1 %tobool116, label %lor.end129, label %lor.rhs117, !dbg !6608

lor.rhs117:                                       ; preds = %land.lhs.true109, %if.then91
  %59 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6609
  %60 = load %struct.rtx_def*, %struct.rtx_def** %yop1, align 8, !dbg !6610
  %call118 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %59, %struct.rtx_def* %60), !dbg !6611
  %tobool119 = icmp ne i32 %call118, 0, !dbg !6611
  br i1 %tobool119, label %land.rhs120, label %land.end128, !dbg !6612

land.rhs120:                                      ; preds = %lor.rhs117
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6613
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !6613
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !6613
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !6613
  %rt_rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**, !dbg !6613
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx124, align 8, !dbg !6613
  %call125 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %62), !dbg !6614
  %63 = load %struct.rtx_def*, %struct.rtx_def** %yop0, align 8, !dbg !6615
  %call126 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call125, %struct.rtx_def* %63), !dbg !6616
  %tobool127 = icmp ne i32 %call126, 0, !dbg !6612
  br label %land.end128

land.end128:                                      ; preds = %land.rhs120, %lor.rhs117
  %64 = phi i1 [ false, %lor.rhs117 ], [ %tobool127, %land.rhs120 ], !dbg !6617
  br label %lor.end129, !dbg !6608

lor.end129:                                       ; preds = %land.end128, %land.lhs.true109
  %65 = phi i1 [ true, %land.lhs.true109 ], [ %64, %land.end128 ]
  %lor.ext130 = zext i1 %65 to i32, !dbg !6608
  store i32 %lor.ext130, i32* %retval, align 4, !dbg !6618
  br label %return, !dbg !6618

if.else:                                          ; preds = %if.end85
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6619
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !6619
  %bf.load131 = load i32, i32* %67, align 8, !dbg !6619
  %bf.clear132 = and i32 %bf.load131, 65535, !dbg !6619
  %idxprom133 = sext i32 %bf.clear132 to i64, !dbg !6619
  %arrayidx134 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom133, !dbg !6619
  %68 = load i32, i32* %arrayidx134, align 4, !dbg !6619
  %and135 = and i32 %68, -3, !dbg !6619
  %cmp136 = icmp eq i32 %and135, 0, !dbg !6619
  br i1 %cmp136, label %if.then138, label %if.else165, !dbg !6621

if.then138:                                       ; preds = %if.else
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6622
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !6622
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !6622
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 0, !dbg !6622
  %rt_rtx142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtx_def**, !dbg !6622
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx142, align 8, !dbg !6622
  %call143 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %70), !dbg !6624
  %71 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6625
  %u144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !6625
  %fld145 = bitcast %union.u* %u144 to [1 x %union.rtunion_def]*, !dbg !6625
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i64 0, i64 0, !dbg !6625
  %rt_rtx147 = bitcast %union.rtunion_def* %arrayidx146 to %struct.rtx_def**, !dbg !6625
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx147, align 8, !dbg !6625
  %call148 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %72), !dbg !6626
  %call149 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call143, %struct.rtx_def* %call148), !dbg !6627
  %tobool150 = icmp ne i32 %call149, 0, !dbg !6627
  br i1 %tobool150, label %land.rhs151, label %land.end164, !dbg !6628

land.rhs151:                                      ; preds = %if.then138
  %73 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6629
  %u152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !6629
  %fld153 = bitcast %union.u* %u152 to [1 x %union.rtunion_def]*, !dbg !6629
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i64 0, i64 1, !dbg !6629
  %rt_rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**, !dbg !6629
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx155, align 8, !dbg !6629
  %call156 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %74), !dbg !6630
  %75 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6631
  %u157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !6631
  %fld158 = bitcast %union.u* %u157 to [1 x %union.rtunion_def]*, !dbg !6631
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i64 0, i64 1, !dbg !6631
  %rt_rtx160 = bitcast %union.rtunion_def* %arrayidx159 to %struct.rtx_def**, !dbg !6631
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx160, align 8, !dbg !6631
  %call161 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %76), !dbg !6632
  %call162 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call156, %struct.rtx_def* %call161), !dbg !6633
  %tobool163 = icmp ne i32 %call162, 0, !dbg !6628
  br label %land.end164

land.end164:                                      ; preds = %land.rhs151, %if.then138
  %77 = phi i1 [ false, %if.then138 ], [ %tobool163, %land.rhs151 ], !dbg !6634
  %land.ext = zext i1 %77 to i32, !dbg !6628
  store i32 %land.ext, i32* %retval, align 4, !dbg !6635
  br label %return, !dbg !6635

if.else165:                                       ; preds = %if.else
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6636
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !6636
  %bf.load166 = load i32, i32* %79, align 8, !dbg !6636
  %bf.clear167 = and i32 %bf.load166, 65535, !dbg !6636
  %idxprom168 = sext i32 %bf.clear167 to i64, !dbg !6636
  %arrayidx169 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom168, !dbg !6636
  %80 = load i32, i32* %arrayidx169, align 4, !dbg !6636
  %cmp170 = icmp eq i32 %80, 4, !dbg !6636
  br i1 %cmp170, label %if.then172, label %if.end184, !dbg !6638

if.then172:                                       ; preds = %if.else165
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6639
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !6639
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !6639
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 0, !dbg !6639
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !6639
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !6639
  %call177 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %82), !dbg !6640
  %83 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6641
  %u178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !6641
  %fld179 = bitcast %union.u* %u178 to [1 x %union.rtunion_def]*, !dbg !6641
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i64 0, i64 0, !dbg !6641
  %rt_rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**, !dbg !6641
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx181, align 8, !dbg !6641
  %call182 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %84), !dbg !6642
  %call183 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call177, %struct.rtx_def* %call182), !dbg !6643
  store i32 %call183, i32* %retval, align 4, !dbg !6644
  br label %return, !dbg !6644

if.end184:                                        ; preds = %if.else165
  br label %if.end185

if.end185:                                        ; preds = %if.end184
  br label %if.end186

if.end186:                                        ; preds = %if.end185
  %85 = load i32, i32* %code, align 4, !dbg !6645
  %idxprom187 = sext i32 %85 to i64, !dbg !6645
  %arrayidx188 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom187, !dbg !6645
  %86 = load i8*, i8** %arrayidx188, align 8, !dbg !6645
  store i8* %86, i8** %fmt, align 8, !dbg !6646
  %87 = load i32, i32* %code, align 4, !dbg !6647
  %idxprom189 = sext i32 %87 to i64, !dbg !6647
  %arrayidx190 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom189, !dbg !6647
  %88 = load i8, i8* %arrayidx190, align 1, !dbg !6647
  %conv191 = zext i8 %88 to i32, !dbg !6647
  %sub = sub nsw i32 %conv191, 1, !dbg !6649
  store i32 %sub, i32* %i, align 4, !dbg !6650
  br label %for.cond, !dbg !6651

for.cond:                                         ; preds = %for.inc294, %if.end186
  %89 = load i32, i32* %i, align 4, !dbg !6652
  %cmp192 = icmp sge i32 %89, 0, !dbg !6654
  br i1 %cmp192, label %for.body, label %for.end295, !dbg !6655

for.body:                                         ; preds = %for.cond
  %90 = load i8*, i8** %fmt, align 8, !dbg !6656
  %91 = load i32, i32* %i, align 4, !dbg !6658
  %idxprom194 = sext i32 %91 to i64, !dbg !6656
  %arrayidx195 = getelementptr inbounds i8, i8* %90, i64 %idxprom194, !dbg !6656
  %92 = load i8, i8* %arrayidx195, align 1, !dbg !6656
  %conv196 = sext i8 %92 to i32, !dbg !6656
  switch i32 %conv196, label %sw.default292 [
    i32 105, label %sw.bb197
    i32 69, label %sw.bb211
    i32 101, label %sw.bb258
    i32 115, label %sw.bb276
    i32 48, label %sw.bb291
  ], !dbg !6659

sw.bb197:                                         ; preds = %for.body
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6660
  %u198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !6660
  %fld199 = bitcast %union.u* %u198 to [1 x %union.rtunion_def]*, !dbg !6660
  %94 = load i32, i32* %i, align 4, !dbg !6660
  %idxprom200 = sext i32 %94 to i64, !dbg !6660
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i64 0, i64 %idxprom200, !dbg !6660
  %rt_int = bitcast %union.rtunion_def* %arrayidx201 to i32*, !dbg !6660
  %95 = load i32, i32* %rt_int, align 8, !dbg !6660
  %96 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6663
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !6663
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !6663
  %97 = load i32, i32* %i, align 4, !dbg !6663
  %idxprom204 = sext i32 %97 to i64, !dbg !6663
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 %idxprom204, !dbg !6663
  %rt_int206 = bitcast %union.rtunion_def* %arrayidx205 to i32*, !dbg !6663
  %98 = load i32, i32* %rt_int206, align 8, !dbg !6663
  %cmp207 = icmp ne i32 %95, %98, !dbg !6664
  br i1 %cmp207, label %if.then209, label %if.end210, !dbg !6665

if.then209:                                       ; preds = %sw.bb197
  store i32 0, i32* %retval, align 4, !dbg !6666
  br label %return, !dbg !6666

if.end210:                                        ; preds = %sw.bb197
  br label %sw.epilog293, !dbg !6667

sw.bb211:                                         ; preds = %for.body
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6668
  %u212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !6668
  %fld213 = bitcast %union.u* %u212 to [1 x %union.rtunion_def]*, !dbg !6668
  %100 = load i32, i32* %i, align 4, !dbg !6668
  %idxprom214 = sext i32 %100 to i64, !dbg !6668
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i64 0, i64 %idxprom214, !dbg !6668
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtvec_def**, !dbg !6668
  %101 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6668
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %101, i32 0, i32 0, !dbg !6668
  %102 = load i32, i32* %num_elem, align 8, !dbg !6668
  %103 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6670
  %u216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !6670
  %fld217 = bitcast %union.u* %u216 to [1 x %union.rtunion_def]*, !dbg !6670
  %104 = load i32, i32* %i, align 4, !dbg !6670
  %idxprom218 = sext i32 %104 to i64, !dbg !6670
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i64 0, i64 %idxprom218, !dbg !6670
  %rt_rtvec220 = bitcast %union.rtunion_def* %arrayidx219 to %struct.rtvec_def**, !dbg !6670
  %105 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec220, align 8, !dbg !6670
  %num_elem221 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %105, i32 0, i32 0, !dbg !6670
  %106 = load i32, i32* %num_elem221, align 8, !dbg !6670
  %cmp222 = icmp ne i32 %102, %106, !dbg !6671
  br i1 %cmp222, label %if.then224, label %if.end225, !dbg !6672

if.then224:                                       ; preds = %sw.bb211
  store i32 0, i32* %retval, align 4, !dbg !6673
  br label %return, !dbg !6673

if.end225:                                        ; preds = %sw.bb211
  store i32 0, i32* %j, align 4, !dbg !6674
  br label %for.cond226, !dbg !6676

for.cond226:                                      ; preds = %for.inc, %if.end225
  %107 = load i32, i32* %j, align 4, !dbg !6677
  %108 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6679
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !6679
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !6679
  %109 = load i32, i32* %i, align 4, !dbg !6679
  %idxprom229 = sext i32 %109 to i64, !dbg !6679
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 %idxprom229, !dbg !6679
  %rt_rtvec231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtvec_def**, !dbg !6679
  %110 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec231, align 8, !dbg !6679
  %num_elem232 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %110, i32 0, i32 0, !dbg !6679
  %111 = load i32, i32* %num_elem232, align 8, !dbg !6679
  %cmp233 = icmp slt i32 %107, %111, !dbg !6680
  br i1 %cmp233, label %for.body235, label %for.end, !dbg !6681

for.body235:                                      ; preds = %for.cond226
  %112 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6682
  %u236 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !6682
  %fld237 = bitcast %union.u* %u236 to [1 x %union.rtunion_def]*, !dbg !6682
  %113 = load i32, i32* %i, align 4, !dbg !6682
  %idxprom238 = sext i32 %113 to i64, !dbg !6682
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i64 0, i64 %idxprom238, !dbg !6682
  %rt_rtvec240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.rtvec_def**, !dbg !6682
  %114 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec240, align 8, !dbg !6682
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %114, i32 0, i32 1, !dbg !6682
  %115 = load i32, i32* %j, align 4, !dbg !6682
  %idxprom241 = sext i32 %115 to i64, !dbg !6682
  %arrayidx242 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom241, !dbg !6682
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx242, align 8, !dbg !6682
  %call243 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %116), !dbg !6684
  %117 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6685
  %u244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !6685
  %fld245 = bitcast %union.u* %u244 to [1 x %union.rtunion_def]*, !dbg !6685
  %118 = load i32, i32* %i, align 4, !dbg !6685
  %idxprom246 = sext i32 %118 to i64, !dbg !6685
  %arrayidx247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld245, i64 0, i64 %idxprom246, !dbg !6685
  %rt_rtvec248 = bitcast %union.rtunion_def* %arrayidx247 to %struct.rtvec_def**, !dbg !6685
  %119 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec248, align 8, !dbg !6685
  %elem249 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %119, i32 0, i32 1, !dbg !6685
  %120 = load i32, i32* %j, align 4, !dbg !6685
  %idxprom250 = sext i32 %120 to i64, !dbg !6685
  %arrayidx251 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem249, i64 0, i64 %idxprom250, !dbg !6685
  %121 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx251, align 8, !dbg !6685
  %call252 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %121), !dbg !6686
  %call253 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call243, %struct.rtx_def* %call252), !dbg !6687
  %cmp254 = icmp eq i32 %call253, 0, !dbg !6688
  br i1 %cmp254, label %if.then256, label %if.end257, !dbg !6689

if.then256:                                       ; preds = %for.body235
  store i32 0, i32* %retval, align 4, !dbg !6690
  br label %return, !dbg !6690

if.end257:                                        ; preds = %for.body235
  br label %for.inc, !dbg !6691

for.inc:                                          ; preds = %if.end257
  %122 = load i32, i32* %j, align 4, !dbg !6692
  %inc = add nsw i32 %122, 1, !dbg !6692
  store i32 %inc, i32* %j, align 4, !dbg !6692
  br label %for.cond226, !dbg !6693, !llvm.loop !6694

for.end:                                          ; preds = %for.cond226
  br label %sw.epilog293, !dbg !6696

sw.bb258:                                         ; preds = %for.body
  %123 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6697
  %u259 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !6697
  %fld260 = bitcast %union.u* %u259 to [1 x %union.rtunion_def]*, !dbg !6697
  %124 = load i32, i32* %i, align 4, !dbg !6697
  %idxprom261 = sext i32 %124 to i64, !dbg !6697
  %arrayidx262 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld260, i64 0, i64 %idxprom261, !dbg !6697
  %rt_rtx263 = bitcast %union.rtunion_def* %arrayidx262 to %struct.rtx_def**, !dbg !6697
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx263, align 8, !dbg !6697
  %call264 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %125), !dbg !6699
  %126 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6700
  %u265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !6700
  %fld266 = bitcast %union.u* %u265 to [1 x %union.rtunion_def]*, !dbg !6700
  %127 = load i32, i32* %i, align 4, !dbg !6700
  %idxprom267 = sext i32 %127 to i64, !dbg !6700
  %arrayidx268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld266, i64 0, i64 %idxprom267, !dbg !6700
  %rt_rtx269 = bitcast %union.rtunion_def* %arrayidx268 to %struct.rtx_def**, !dbg !6700
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx269, align 8, !dbg !6700
  %call270 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %128), !dbg !6701
  %call271 = call i32 @rtx_equal_for_memref_p(%struct.rtx_def* %call264, %struct.rtx_def* %call270), !dbg !6702
  %cmp272 = icmp eq i32 %call271, 0, !dbg !6703
  br i1 %cmp272, label %if.then274, label %if.end275, !dbg !6704

if.then274:                                       ; preds = %sw.bb258
  store i32 0, i32* %retval, align 4, !dbg !6705
  br label %return, !dbg !6705

if.end275:                                        ; preds = %sw.bb258
  br label %sw.epilog293, !dbg !6706

sw.bb276:                                         ; preds = %for.body
  %129 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6707
  %u277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1, !dbg !6707
  %fld278 = bitcast %union.u* %u277 to [1 x %union.rtunion_def]*, !dbg !6707
  %130 = load i32, i32* %i, align 4, !dbg !6707
  %idxprom279 = sext i32 %130 to i64, !dbg !6707
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld278, i64 0, i64 %idxprom279, !dbg !6707
  %rt_str281 = bitcast %union.rtunion_def* %arrayidx280 to i8**, !dbg !6707
  %131 = load i8*, i8** %rt_str281, align 8, !dbg !6707
  %132 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6709
  %u282 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1, !dbg !6709
  %fld283 = bitcast %union.u* %u282 to [1 x %union.rtunion_def]*, !dbg !6709
  %133 = load i32, i32* %i, align 4, !dbg !6709
  %idxprom284 = sext i32 %133 to i64, !dbg !6709
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i64 0, i64 %idxprom284, !dbg !6709
  %rt_str286 = bitcast %union.rtunion_def* %arrayidx285 to i8**, !dbg !6709
  %134 = load i8*, i8** %rt_str286, align 8, !dbg !6709
  %call287 = call i32 @strcmp(i8* %131, i8* %134), !dbg !6710
  %tobool288 = icmp ne i32 %call287, 0, !dbg !6710
  br i1 %tobool288, label %if.then289, label %if.end290, !dbg !6711

if.then289:                                       ; preds = %sw.bb276
  store i32 0, i32* %retval, align 4, !dbg !6712
  br label %return, !dbg !6712

if.end290:                                        ; preds = %sw.bb276
  br label %sw.epilog293, !dbg !6713

sw.bb291:                                         ; preds = %for.body
  br label %sw.epilog293, !dbg !6714

sw.default292:                                    ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1462, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6715
  br label %sw.epilog293, !dbg !6716

sw.epilog293:                                     ; preds = %sw.default292, %sw.bb291, %if.end290, %if.end275, %for.end, %if.end210
  br label %for.inc294, !dbg !6717

for.inc294:                                       ; preds = %sw.epilog293
  %135 = load i32, i32* %i, align 4, !dbg !6718
  %dec = add nsw i32 %135, -1, !dbg !6718
  store i32 %dec, i32* %i, align 4, !dbg !6718
  br label %for.cond, !dbg !6719, !llvm.loop !6720

for.end295:                                       ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !6722
  br label %return, !dbg !6722

return:                                           ; preds = %for.end295, %if.then289, %if.then274, %if.then256, %if.then224, %if.then209, %if.then172, %land.end164, %lor.end129, %lor.end, %sw.bb41, %sw.bb31, %sw.bb24, %sw.bb, %if.then20, %if.then12, %if.then7, %if.then4, %if.then
  %136 = load i32, i32* %retval, align 4, !dbg !6723
  ret i32 %136, !dbg !6723
}

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ao_ref_from_mem(%struct.ao_ref_s* %ref, %struct.rtx_def* %mem) #0 !dbg !6724 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %struct.ao_ref_s*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %expr = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %namep = alloca i8*, align 8
  store %struct.ao_ref_s* %ref, %struct.ao_ref_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ref.addr, metadata !6728, metadata !DIExpression()), !dbg !6729
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !6730, metadata !DIExpression()), !dbg !6731
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !6732, metadata !DIExpression()), !dbg !6733
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6734
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6734
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6734
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6734
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !6734
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !6734
  %cmp = icmp eq %struct.mem_attrs* %1, null, !dbg !6734
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6734

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !6734

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6734
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6734
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6734
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !6734
  %rt_mem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**, !dbg !6734
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem4, align 8, !dbg !6734
  %expr5 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 0, !dbg !6734
  %4 = load %union.tree_node*, %union.tree_node** %expr5, align 8, !dbg !6734
  br label %cond.end, !dbg !6734

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %4, %cond.false ], !dbg !6734
  store %union.tree_node* %cond, %union.tree_node** %expr, align 8, !dbg !6733
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !6735, metadata !DIExpression()), !dbg !6736
  %5 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6737
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !6737
  br i1 %tobool, label %if.end, label %if.then, !dbg !6739

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6740
  br label %return, !dbg !6740

if.end:                                           ; preds = %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6741
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6741
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !6741
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !6741
  %rt_mem9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.mem_attrs**, !dbg !6741
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem9, align 8, !dbg !6741
  %cmp10 = icmp eq %struct.mem_attrs* %7, null, !dbg !6741
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !6743

cond.true11:                                      ; preds = %if.end
  br i1 false, label %lor.lhs.false, label %if.then39, !dbg !6741

cond.false12:                                     ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6741
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6741
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6741
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !6741
  %rt_mem16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**, !dbg !6741
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem16, align 8, !dbg !6741
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %9, i32 0, i32 1, !dbg !6741
  %10 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6741
  %tobool17 = icmp ne %struct.rtx_def* %10, null, !dbg !6741
  br i1 %tobool17, label %lor.lhs.false, label %if.then39, !dbg !6743

lor.lhs.false:                                    ; preds = %cond.false12, %cond.true11
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6744
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6744
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6744
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !6744
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !6744
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !6744
  %cmp22 = icmp ne %struct.mem_attrs* %12, null, !dbg !6744
  br i1 %cmp22, label %cond.true23, label %cond.false29, !dbg !6745

cond.true23:                                      ; preds = %lor.lhs.false
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6744
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6744
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !6744
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !6744
  %rt_mem27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.mem_attrs**, !dbg !6744
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem27, align 8, !dbg !6744
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 2, !dbg !6744
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !6744
  %tobool28 = icmp ne %struct.rtx_def* %15, null, !dbg !6744
  br i1 %tobool28, label %if.end40, label %if.then39, !dbg !6744

cond.false29:                                     ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6744
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6744
  %bf.load = load i32, i32* %17, align 8, !dbg !6744
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6744
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6744
  %cmp30 = icmp ne i32 %bf.clear, 1, !dbg !6744
  br i1 %cmp30, label %cond.true31, label %cond.false38, !dbg !6745

cond.true31:                                      ; preds = %cond.false29
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6744
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6744
  %bf.load32 = load i32, i32* %19, align 8, !dbg !6744
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !6744
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !6744
  %idxprom = zext i32 %bf.clear34 to i64, !dbg !6744
  %arrayidx35 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6744
  %20 = load i8, i8* %arrayidx35, align 1, !dbg !6744
  %conv = zext i8 %20 to i16, !dbg !6744
  %conv36 = zext i16 %conv to i64, !dbg !6744
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv36), !dbg !6744
  %tobool37 = icmp ne %struct.rtx_def* %call, null, !dbg !6744
  br i1 %tobool37, label %if.end40, label %if.then39, !dbg !6744

cond.false38:                                     ; preds = %cond.false29
  br i1 false, label %if.end40, label %if.then39, !dbg !6745

if.then39:                                        ; preds = %cond.false38, %cond.true31, %cond.true23, %cond.false12, %cond.true11
  store i8 0, i8* %retval, align 1, !dbg !6746
  br label %return, !dbg !6746

if.end40:                                         ; preds = %cond.false38, %cond.true31, %cond.true23
  %21 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6747
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6748
  call void @ao_ref_init(%struct.ao_ref_s* %21, %union.tree_node* %22), !dbg !6749
  %23 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6750
  %call41 = call %union.tree_node* @ao_ref_base(%struct.ao_ref_s* %23), !dbg !6751
  store %union.tree_node* %call41, %union.tree_node** %base, align 8, !dbg !6752
  %24 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6753
  %cmp42 = icmp eq %union.tree_node* %24, null, !dbg !6755
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !6756

if.then44:                                        ; preds = %if.end40
  store i8 0, i8* %retval, align 1, !dbg !6757
  br label %return, !dbg !6757

if.end45:                                         ; preds = %if.end40
  %25 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6758
  %base46 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6758
  %26 = bitcast %struct.tree_base* %base46 to i64*, !dbg !6758
  %bf.load47 = load i64, i64* %26, align 8, !dbg !6758
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !6758
  %bf.cast = trunc i64 %bf.clear48 to i32, !dbg !6758
  %cmp49 = icmp eq i32 %bf.cast, 47, !dbg !6758
  br i1 %cmp49, label %land.lhs.true, label %lor.lhs.false51, !dbg !6758

lor.lhs.false51:                                  ; preds = %if.end45
  %27 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6758
  %base52 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6758
  %28 = bitcast %struct.tree_base* %base52 to i64*, !dbg !6758
  %bf.load53 = load i64, i64* %28, align 8, !dbg !6758
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !6758
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !6758
  %cmp56 = icmp eq i32 %bf.cast55, 48, !dbg !6758
  br i1 %cmp56, label %land.lhs.true, label %lor.lhs.false58, !dbg !6758

lor.lhs.false58:                                  ; preds = %lor.lhs.false51
  %29 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6758
  %base59 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6758
  %30 = bitcast %struct.tree_base* %base59 to i64*, !dbg !6758
  %bf.load60 = load i64, i64* %30, align 8, !dbg !6758
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !6758
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !6758
  %cmp63 = icmp eq i32 %bf.cast62, 49, !dbg !6758
  br i1 %cmp63, label %land.lhs.true, label %if.end73, !dbg !6760

land.lhs.true:                                    ; preds = %lor.lhs.false58, %lor.lhs.false51, %if.end45
  %31 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6761
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !6761
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6761
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6761
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !6761
  %base66 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6761
  %33 = bitcast %struct.tree_base* %base66 to i64*, !dbg !6761
  %bf.load67 = load i64, i64* %33, align 8, !dbg !6761
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !6761
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !6761
  %cmp70 = icmp ne i32 %bf.cast69, 141, !dbg !6762
  br i1 %cmp70, label %if.then72, label %if.end73, !dbg !6763

if.then72:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6764
  br label %return, !dbg !6764

if.end73:                                         ; preds = %land.lhs.true, %lor.lhs.false58
  %34 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6765
  %base74 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6765
  %35 = bitcast %struct.tree_base* %base74 to i64*, !dbg !6765
  %bf.load75 = load i64, i64* %35, align 8, !dbg !6765
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !6765
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !6765
  %cmp78 = icmp eq i32 %bf.cast77, 29, !dbg !6767
  br i1 %cmp78, label %if.then87, label %lor.lhs.false80, !dbg !6768

lor.lhs.false80:                                  ; preds = %if.end73
  %36 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6769
  %base81 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6769
  %37 = bitcast %struct.tree_base* %base81 to i64*, !dbg !6769
  %bf.load82 = load i64, i64* %37, align 8, !dbg !6769
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !6769
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !6769
  %cmp85 = icmp eq i32 %bf.cast84, 30, !dbg !6770
  br i1 %cmp85, label %if.then87, label %if.end88, !dbg !6771

if.then87:                                        ; preds = %lor.lhs.false80, %if.end73
  store i8 0, i8* %retval, align 1, !dbg !6772
  br label %return, !dbg !6772

if.end88:                                         ; preds = %lor.lhs.false80
  %38 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6773
  %base89 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !6773
  %39 = bitcast %struct.tree_base* %base89 to i64*, !dbg !6773
  %bf.load90 = load i64, i64* %39, align 8, !dbg !6773
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !6773
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !6773
  %cmp93 = icmp eq i32 %bf.cast92, 32, !dbg !6775
  br i1 %cmp93, label %land.lhs.true95, label %if.end116, !dbg !6776

land.lhs.true95:                                  ; preds = %if.end88
  %40 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6777
  %base96 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !6777
  %41 = bitcast %struct.tree_base* %base96 to i64*, !dbg !6777
  %bf.load97 = load i64, i64* %41, align 8, !dbg !6777
  %bf.lshr98 = lshr i64 %bf.load97, 26, !dbg !6777
  %bf.clear99 = and i64 %bf.lshr98, 1, !dbg !6777
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !6777
  %tobool101 = icmp ne i32 %bf.cast100, 0, !dbg !6777
  br i1 %tobool101, label %if.end116, label %land.lhs.true102, !dbg !6778

land.lhs.true102:                                 ; preds = %land.lhs.true95
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6779
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !6779
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !6780
  %43 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6780
  %decls_to_pointers = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %43, i32 0, i32 6, !dbg !6781
  %44 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_pointers, align 8, !dbg !6781
  %cmp103 = icmp ne %struct.pointer_map_t* %44, null, !dbg !6782
  br i1 %cmp103, label %if.then105, label %if.end116, !dbg !6783

if.then105:                                       ; preds = %land.lhs.true102
  call void @llvm.dbg.declare(metadata i8** %namep, metadata !6784, metadata !DIExpression()), !dbg !6786
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6787
  %add.ptr106 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !6787
  %gimple_df107 = getelementptr inbounds %struct.function, %struct.function* %add.ptr106, i32 0, i32 3, !dbg !6788
  %46 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df107, align 8, !dbg !6788
  %decls_to_pointers108 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %46, i32 0, i32 6, !dbg !6789
  %47 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_pointers108, align 8, !dbg !6789
  %48 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6790
  %49 = bitcast %union.tree_node* %48 to i8*, !dbg !6790
  %call109 = call i8** @pointer_map_contains(%struct.pointer_map_t* %47, i8* %49), !dbg !6791
  %50 = bitcast i8** %call109 to i8*, !dbg !6791
  store i8* %50, i8** %namep, align 8, !dbg !6792
  %51 = load i8*, i8** %namep, align 8, !dbg !6793
  %tobool110 = icmp ne i8* %51, null, !dbg !6793
  br i1 %tobool110, label %if.then111, label %if.end115, !dbg !6795

if.then111:                                       ; preds = %if.then105
  %52 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6796
  %call112 = call i32 @get_alias_set(%union.tree_node* %52), !dbg !6798
  %53 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6799
  %base_alias_set = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %53, i32 0, i32 6, !dbg !6800
  store i32 %call112, i32* %base_alias_set, align 4, !dbg !6801
  %54 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6802
  %common = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !6802
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6802
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6802
  %56 = load i8*, i8** %namep, align 8, !dbg !6802
  %57 = bitcast i8* %56 to %union.tree_node**, !dbg !6802
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !6802
  %call113 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %55, %union.tree_node* %58), !dbg !6802
  %59 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6803
  %base114 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %59, i32 0, i32 1, !dbg !6804
  store %union.tree_node* %call113, %union.tree_node** %base114, align 8, !dbg !6805
  br label %if.end115, !dbg !6806

if.end115:                                        ; preds = %if.then111, %if.then105
  br label %if.end116, !dbg !6807

if.end116:                                        ; preds = %if.end115, %land.lhs.true102, %land.lhs.true95, %if.end88
  %60 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6808
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !6808
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !6808
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 1, !dbg !6808
  %rt_mem120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.mem_attrs**, !dbg !6808
  %61 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem120, align 8, !dbg !6808
  %cmp121 = icmp eq %struct.mem_attrs* %61, null, !dbg !6808
  br i1 %cmp121, label %cond.true123, label %cond.false124, !dbg !6808

cond.true123:                                     ; preds = %if.end116
  br label %cond.end129, !dbg !6808

cond.false124:                                    ; preds = %if.end116
  %62 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6808
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6808
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !6808
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 1, !dbg !6808
  %rt_mem128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.mem_attrs**, !dbg !6808
  %63 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem128, align 8, !dbg !6808
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %63, i32 0, i32 3, !dbg !6808
  %64 = load i32, i32* %alias, align 8, !dbg !6808
  br label %cond.end129, !dbg !6808

cond.end129:                                      ; preds = %cond.false124, %cond.true123
  %cond130 = phi i32 [ 0, %cond.true123 ], [ %64, %cond.false124 ], !dbg !6808
  %65 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6809
  %ref_alias_set = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %65, i32 0, i32 5, !dbg !6810
  store i32 %cond130, i32* %ref_alias_set, align 8, !dbg !6811
  %66 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6812
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !6812
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !6812
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !6812
  %rt_mem134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.mem_attrs**, !dbg !6812
  %67 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem134, align 8, !dbg !6812
  %cmp135 = icmp eq %struct.mem_attrs* %67, null, !dbg !6812
  br i1 %cmp135, label %cond.true137, label %cond.false138, !dbg !6812

cond.true137:                                     ; preds = %cond.end129
  br label %cond.end144, !dbg !6812

cond.false138:                                    ; preds = %cond.end129
  %68 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6812
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !6812
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !6812
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 1, !dbg !6812
  %rt_mem142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.mem_attrs**, !dbg !6812
  %69 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem142, align 8, !dbg !6812
  %offset143 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %69, i32 0, i32 1, !dbg !6812
  %70 = load %struct.rtx_def*, %struct.rtx_def** %offset143, align 8, !dbg !6812
  br label %cond.end144, !dbg !6812

cond.end144:                                      ; preds = %cond.false138, %cond.true137
  %cond145 = phi %struct.rtx_def* [ null, %cond.true137 ], [ %70, %cond.false138 ], !dbg !6812
  %u146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond145, i32 0, i32 1, !dbg !6812
  %hwint = bitcast %union.u* %u146 to [1 x i64]*, !dbg !6812
  %arrayidx147 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6812
  %71 = load i64, i64* %arrayidx147, align 8, !dbg !6812
  %cmp148 = icmp slt i64 %71, 0, !dbg !6814
  br i1 %cmp148, label %land.lhs.true150, label %if.end208, !dbg !6815

land.lhs.true150:                                 ; preds = %cond.end144
  %72 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6816
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6816
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !6816
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 1, !dbg !6816
  %rt_mem154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.mem_attrs**, !dbg !6816
  %73 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem154, align 8, !dbg !6816
  %cmp155 = icmp ne %struct.mem_attrs* %73, null, !dbg !6816
  br i1 %cmp155, label %cond.true157, label %cond.false163, !dbg !6816

cond.true157:                                     ; preds = %land.lhs.true150
  %74 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6816
  %u158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !6816
  %fld159 = bitcast %union.u* %u158 to [1 x %union.rtunion_def]*, !dbg !6816
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i64 0, i64 1, !dbg !6816
  %rt_mem161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.mem_attrs**, !dbg !6816
  %75 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem161, align 8, !dbg !6816
  %size162 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %75, i32 0, i32 2, !dbg !6816
  %76 = load %struct.rtx_def*, %struct.rtx_def** %size162, align 8, !dbg !6816
  br label %cond.end181, !dbg !6816

cond.false163:                                    ; preds = %land.lhs.true150
  %77 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6816
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !6816
  %bf.load164 = load i32, i32* %78, align 8, !dbg !6816
  %bf.lshr165 = lshr i32 %bf.load164, 16, !dbg !6816
  %bf.clear166 = and i32 %bf.lshr165, 255, !dbg !6816
  %cmp167 = icmp ne i32 %bf.clear166, 1, !dbg !6816
  br i1 %cmp167, label %cond.true169, label %cond.false178, !dbg !6816

cond.true169:                                     ; preds = %cond.false163
  %79 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6816
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !6816
  %bf.load170 = load i32, i32* %80, align 8, !dbg !6816
  %bf.lshr171 = lshr i32 %bf.load170, 16, !dbg !6816
  %bf.clear172 = and i32 %bf.lshr171, 255, !dbg !6816
  %idxprom173 = zext i32 %bf.clear172 to i64, !dbg !6816
  %arrayidx174 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom173, !dbg !6816
  %81 = load i8, i8* %arrayidx174, align 1, !dbg !6816
  %conv175 = zext i8 %81 to i16, !dbg !6816
  %conv176 = zext i16 %conv175 to i64, !dbg !6816
  %call177 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv176), !dbg !6816
  br label %cond.end179, !dbg !6816

cond.false178:                                    ; preds = %cond.false163
  br label %cond.end179, !dbg !6816

cond.end179:                                      ; preds = %cond.false178, %cond.true169
  %cond180 = phi %struct.rtx_def* [ %call177, %cond.true169 ], [ null, %cond.false178 ], !dbg !6816
  br label %cond.end181, !dbg !6816

cond.end181:                                      ; preds = %cond.end179, %cond.true157
  %cond182 = phi %struct.rtx_def* [ %76, %cond.true157 ], [ %cond180, %cond.end179 ], !dbg !6816
  %u183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond182, i32 0, i32 1, !dbg !6816
  %hwint184 = bitcast %union.u* %u183 to [1 x i64]*, !dbg !6816
  %arrayidx185 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint184, i64 0, i64 0, !dbg !6816
  %82 = load i64, i64* %arrayidx185, align 8, !dbg !6816
  %83 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6817
  %u186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !6817
  %fld187 = bitcast %union.u* %u186 to [1 x %union.rtunion_def]*, !dbg !6817
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i64 0, i64 1, !dbg !6817
  %rt_mem189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.mem_attrs**, !dbg !6817
  %84 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem189, align 8, !dbg !6817
  %cmp190 = icmp eq %struct.mem_attrs* %84, null, !dbg !6817
  br i1 %cmp190, label %cond.true192, label %cond.false193, !dbg !6817

cond.true192:                                     ; preds = %cond.end181
  br label %cond.end199, !dbg !6817

cond.false193:                                    ; preds = %cond.end181
  %85 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6817
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !6817
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !6817
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 1, !dbg !6817
  %rt_mem197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.mem_attrs**, !dbg !6817
  %86 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem197, align 8, !dbg !6817
  %offset198 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %86, i32 0, i32 1, !dbg !6817
  %87 = load %struct.rtx_def*, %struct.rtx_def** %offset198, align 8, !dbg !6817
  br label %cond.end199, !dbg !6817

cond.end199:                                      ; preds = %cond.false193, %cond.true192
  %cond200 = phi %struct.rtx_def* [ null, %cond.true192 ], [ %87, %cond.false193 ], !dbg !6817
  %u201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond200, i32 0, i32 1, !dbg !6817
  %hwint202 = bitcast %union.u* %u201 to [1 x i64]*, !dbg !6817
  %arrayidx203 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint202, i64 0, i64 0, !dbg !6817
  %88 = load i64, i64* %arrayidx203, align 8, !dbg !6817
  %add = add nsw i64 %82, %88, !dbg !6818
  %mul = mul nsw i64 %add, 8, !dbg !6819
  %89 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6820
  %size204 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %89, i32 0, i32 3, !dbg !6821
  %90 = load i64, i64* %size204, align 8, !dbg !6821
  %cmp205 = icmp eq i64 %mul, %90, !dbg !6822
  br i1 %cmp205, label %if.then207, label %if.end208, !dbg !6823

if.then207:                                       ; preds = %cond.end199
  store i8 1, i8* %retval, align 1, !dbg !6824
  br label %return, !dbg !6824

if.end208:                                        ; preds = %cond.end199, %cond.end144
  %91 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6825
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !6825
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !6825
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 1, !dbg !6825
  %rt_mem212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.mem_attrs**, !dbg !6825
  %92 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem212, align 8, !dbg !6825
  %cmp213 = icmp eq %struct.mem_attrs* %92, null, !dbg !6825
  br i1 %cmp213, label %cond.true215, label %cond.false216, !dbg !6825

cond.true215:                                     ; preds = %if.end208
  br label %cond.end222, !dbg !6825

cond.false216:                                    ; preds = %if.end208
  %93 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6825
  %u217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !6825
  %fld218 = bitcast %union.u* %u217 to [1 x %union.rtunion_def]*, !dbg !6825
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld218, i64 0, i64 1, !dbg !6825
  %rt_mem220 = bitcast %union.rtunion_def* %arrayidx219 to %struct.mem_attrs**, !dbg !6825
  %94 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem220, align 8, !dbg !6825
  %offset221 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %94, i32 0, i32 1, !dbg !6825
  %95 = load %struct.rtx_def*, %struct.rtx_def** %offset221, align 8, !dbg !6825
  br label %cond.end222, !dbg !6825

cond.end222:                                      ; preds = %cond.false216, %cond.true215
  %cond223 = phi %struct.rtx_def* [ null, %cond.true215 ], [ %95, %cond.false216 ], !dbg !6825
  %u224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond223, i32 0, i32 1, !dbg !6825
  %hwint225 = bitcast %union.u* %u224 to [1 x i64]*, !dbg !6825
  %arrayidx226 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint225, i64 0, i64 0, !dbg !6825
  %96 = load i64, i64* %arrayidx226, align 8, !dbg !6825
  %mul227 = mul nsw i64 %96, 8, !dbg !6826
  %97 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6827
  %offset228 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %97, i32 0, i32 2, !dbg !6828
  %98 = load i64, i64* %offset228, align 8, !dbg !6829
  %add229 = add nsw i64 %98, %mul227, !dbg !6829
  store i64 %add229, i64* %offset228, align 8, !dbg !6829
  %99 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6830
  %u230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !6830
  %fld231 = bitcast %union.u* %u230 to [1 x %union.rtunion_def]*, !dbg !6830
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i64 0, i64 1, !dbg !6830
  %rt_mem233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.mem_attrs**, !dbg !6830
  %100 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem233, align 8, !dbg !6830
  %cmp234 = icmp ne %struct.mem_attrs* %100, null, !dbg !6830
  br i1 %cmp234, label %cond.true236, label %cond.false242, !dbg !6830

cond.true236:                                     ; preds = %cond.end222
  %101 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6830
  %u237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !6830
  %fld238 = bitcast %union.u* %u237 to [1 x %union.rtunion_def]*, !dbg !6830
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i64 0, i64 1, !dbg !6830
  %rt_mem240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.mem_attrs**, !dbg !6830
  %102 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem240, align 8, !dbg !6830
  %size241 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %102, i32 0, i32 2, !dbg !6830
  %103 = load %struct.rtx_def*, %struct.rtx_def** %size241, align 8, !dbg !6830
  br label %cond.end260, !dbg !6830

cond.false242:                                    ; preds = %cond.end222
  %104 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6830
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !6830
  %bf.load243 = load i32, i32* %105, align 8, !dbg !6830
  %bf.lshr244 = lshr i32 %bf.load243, 16, !dbg !6830
  %bf.clear245 = and i32 %bf.lshr244, 255, !dbg !6830
  %cmp246 = icmp ne i32 %bf.clear245, 1, !dbg !6830
  br i1 %cmp246, label %cond.true248, label %cond.false257, !dbg !6830

cond.true248:                                     ; preds = %cond.false242
  %106 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6830
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !6830
  %bf.load249 = load i32, i32* %107, align 8, !dbg !6830
  %bf.lshr250 = lshr i32 %bf.load249, 16, !dbg !6830
  %bf.clear251 = and i32 %bf.lshr250, 255, !dbg !6830
  %idxprom252 = zext i32 %bf.clear251 to i64, !dbg !6830
  %arrayidx253 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom252, !dbg !6830
  %108 = load i8, i8* %arrayidx253, align 1, !dbg !6830
  %conv254 = zext i8 %108 to i16, !dbg !6830
  %conv255 = zext i16 %conv254 to i64, !dbg !6830
  %call256 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv255), !dbg !6830
  br label %cond.end258, !dbg !6830

cond.false257:                                    ; preds = %cond.false242
  br label %cond.end258, !dbg !6830

cond.end258:                                      ; preds = %cond.false257, %cond.true248
  %cond259 = phi %struct.rtx_def* [ %call256, %cond.true248 ], [ null, %cond.false257 ], !dbg !6830
  br label %cond.end260, !dbg !6830

cond.end260:                                      ; preds = %cond.end258, %cond.true236
  %cond261 = phi %struct.rtx_def* [ %103, %cond.true236 ], [ %cond259, %cond.end258 ], !dbg !6830
  %u262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond261, i32 0, i32 1, !dbg !6830
  %hwint263 = bitcast %union.u* %u262 to [1 x i64]*, !dbg !6830
  %arrayidx264 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint263, i64 0, i64 0, !dbg !6830
  %109 = load i64, i64* %arrayidx264, align 8, !dbg !6830
  %mul265 = mul nsw i64 %109, 8, !dbg !6831
  %110 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6832
  %size266 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %110, i32 0, i32 3, !dbg !6833
  store i64 %mul265, i64* %size266, align 8, !dbg !6834
  %111 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6835
  %max_size = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %111, i32 0, i32 4, !dbg !6837
  %112 = load i64, i64* %max_size, align 8, !dbg !6837
  %cmp267 = icmp ne i64 %112, -1, !dbg !6838
  br i1 %cmp267, label %land.lhs.true269, label %if.end277, !dbg !6839

land.lhs.true269:                                 ; preds = %cond.end260
  %113 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6840
  %size270 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %113, i32 0, i32 3, !dbg !6841
  %114 = load i64, i64* %size270, align 8, !dbg !6841
  %115 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6842
  %max_size271 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %115, i32 0, i32 4, !dbg !6843
  %116 = load i64, i64* %max_size271, align 8, !dbg !6843
  %cmp272 = icmp sgt i64 %114, %116, !dbg !6844
  br i1 %cmp272, label %if.then274, label %if.end277, !dbg !6845

if.then274:                                       ; preds = %land.lhs.true269
  %117 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6846
  %size275 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %117, i32 0, i32 3, !dbg !6847
  %118 = load i64, i64* %size275, align 8, !dbg !6847
  %119 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6848
  %max_size276 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %119, i32 0, i32 4, !dbg !6849
  store i64 %118, i64* %max_size276, align 8, !dbg !6850
  br label %if.end277, !dbg !6848

if.end277:                                        ; preds = %if.then274, %land.lhs.true269, %cond.end260
  %120 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6851
  %u278 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1, !dbg !6851
  %fld279 = bitcast %union.u* %u278 to [1 x %union.rtunion_def]*, !dbg !6851
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i64 0, i64 1, !dbg !6851
  %rt_mem281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.mem_attrs**, !dbg !6851
  %121 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem281, align 8, !dbg !6851
  %cmp282 = icmp eq %struct.mem_attrs* %121, null, !dbg !6851
  br i1 %cmp282, label %cond.true284, label %cond.false285, !dbg !6851

cond.true284:                                     ; preds = %if.end277
  br label %cond.end291, !dbg !6851

cond.false285:                                    ; preds = %if.end277
  %122 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6851
  %u286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1, !dbg !6851
  %fld287 = bitcast %union.u* %u286 to [1 x %union.rtunion_def]*, !dbg !6851
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i64 0, i64 1, !dbg !6851
  %rt_mem289 = bitcast %union.rtunion_def* %arrayidx288 to %struct.mem_attrs**, !dbg !6851
  %123 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem289, align 8, !dbg !6851
  %expr290 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %123, i32 0, i32 0, !dbg !6851
  %124 = load %union.tree_node*, %union.tree_node** %expr290, align 8, !dbg !6851
  br label %cond.end291, !dbg !6851

cond.end291:                                      ; preds = %cond.false285, %cond.true284
  %cond292 = phi %union.tree_node* [ null, %cond.true284 ], [ %124, %cond.false285 ], !dbg !6851
  %call293 = call %union.tree_node* @get_spill_slot_decl(i8 zeroext 0), !dbg !6853
  %cmp294 = icmp ne %union.tree_node* %cond292, %call293, !dbg !6854
  br i1 %cmp294, label %land.lhs.true296, label %if.end326, !dbg !6855

land.lhs.true296:                                 ; preds = %cond.end291
  %125 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6856
  %offset297 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %125, i32 0, i32 2, !dbg !6857
  %126 = load i64, i64* %offset297, align 8, !dbg !6857
  %cmp298 = icmp slt i64 %126, 0, !dbg !6858
  br i1 %cmp298, label %if.then325, label %lor.lhs.false300, !dbg !6859

lor.lhs.false300:                                 ; preds = %land.lhs.true296
  %127 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6860
  %base301 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %127, i32 0, i32 1, !dbg !6860
  %128 = load %union.tree_node*, %union.tree_node** %base301, align 8, !dbg !6860
  %base302 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !6860
  %129 = bitcast %struct.tree_base* %base302 to i64*, !dbg !6860
  %bf.load303 = load i64, i64* %129, align 8, !dbg !6860
  %bf.clear304 = and i64 %bf.load303, 65535, !dbg !6860
  %bf.cast305 = trunc i64 %bf.clear304 to i32, !dbg !6860
  %idxprom306 = sext i32 %bf.cast305 to i64, !dbg !6860
  %arrayidx307 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom306, !dbg !6860
  %130 = load i32, i32* %arrayidx307, align 4, !dbg !6860
  %cmp308 = icmp eq i32 %130, 3, !dbg !6860
  br i1 %cmp308, label %land.lhs.true310, label %if.end326, !dbg !6861

land.lhs.true310:                                 ; preds = %lor.lhs.false300
  %131 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6862
  %base311 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %131, i32 0, i32 1, !dbg !6862
  %132 = load %union.tree_node*, %union.tree_node** %base311, align 8, !dbg !6862
  %decl_common = bitcast %union.tree_node* %132 to %struct.tree_decl_common*, !dbg !6862
  %size312 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !6862
  %133 = load %union.tree_node*, %union.tree_node** %size312, align 8, !dbg !6862
  %call313 = call i32 @host_integerp(%union.tree_node* %133, i32 1), !dbg !6863
  %tobool314 = icmp ne i32 %call313, 0, !dbg !6863
  br i1 %tobool314, label %lor.lhs.false315, label %if.then325, !dbg !6864

lor.lhs.false315:                                 ; preds = %land.lhs.true310
  %134 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6865
  %base316 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %134, i32 0, i32 1, !dbg !6865
  %135 = load %union.tree_node*, %union.tree_node** %base316, align 8, !dbg !6865
  %decl_common317 = bitcast %union.tree_node* %135 to %struct.tree_decl_common*, !dbg !6865
  %size318 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common317, i32 0, i32 1, !dbg !6865
  %136 = load %union.tree_node*, %union.tree_node** %size318, align 8, !dbg !6865
  %int_cst = bitcast %union.tree_node* %136 to %struct.tree_int_cst*, !dbg !6865
  %int_cst319 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6865
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst319, i32 0, i32 0, !dbg !6865
  %137 = load i64, i64* %low, align 8, !dbg !6865
  %138 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6866
  %offset320 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %138, i32 0, i32 2, !dbg !6867
  %139 = load i64, i64* %offset320, align 8, !dbg !6867
  %140 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6868
  %size321 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %140, i32 0, i32 3, !dbg !6869
  %141 = load i64, i64* %size321, align 8, !dbg !6869
  %add322 = add nsw i64 %139, %141, !dbg !6870
  %cmp323 = icmp ult i64 %137, %add322, !dbg !6871
  br i1 %cmp323, label %if.then325, label %if.end326, !dbg !6872

if.then325:                                       ; preds = %lor.lhs.false315, %land.lhs.true310, %land.lhs.true296
  store i8 0, i8* %retval, align 1, !dbg !6873
  br label %return, !dbg !6873

if.end326:                                        ; preds = %lor.lhs.false315, %lor.lhs.false300, %cond.end291
  store i8 1, i8* %retval, align 1, !dbg !6874
  br label %return, !dbg !6874

return:                                           ; preds = %if.end326, %if.then325, %if.then207, %if.then87, %if.then72, %if.then44, %if.then39, %if.then
  %142 = load i8, i8* %retval, align 1, !dbg !6875
  ret i8 %142, !dbg !6875
}

declare dso_local zeroext i8 @refs_may_alias_p_1(%struct.ao_ref_s*, %struct.ao_ref_s*, i8 zeroext) #2

declare dso_local void @ao_ref_init(%struct.ao_ref_s*, %union.tree_node*) #2

declare dso_local %union.tree_node* @ao_ref_base(%struct.ao_ref_s*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @rtx_addr_varies_p(%struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_gc_safe_grow(%struct.VEC_rtx_gc** %vec_, i32 %size_) #0 !dbg !6876 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !6877, metadata !DIExpression()), !dbg !6878
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !6879, metadata !DIExpression()), !dbg !6878
  %0 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %cmp = icmp sge i32 %0, 0, !dbg !6878
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6878

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %2 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %1, align 8, !dbg !6878
  %tobool = icmp ne %struct.VEC_rtx_gc* %2, null, !dbg !6878
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6878

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %3, align 8, !dbg !6878
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %4, i32 0, i32 0, !dbg !6878
  br label %cond.end, !dbg !6878

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !6878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6878
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !6878
  %5 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %cmp1 = icmp ule i32 %call, %5, !dbg !6878
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !6880
  %land.ext = zext i1 %6 to i32, !dbg !6878
  %7 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %8 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %9 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %10 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %9, align 8, !dbg !6878
  %tobool2 = icmp ne %struct.VEC_rtx_gc* %10, null, !dbg !6878
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !6878

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %12 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %11, align 8, !dbg !6878
  %tobool4 = icmp ne %struct.VEC_rtx_gc* %12, null, !dbg !6878
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !6878

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %14 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %13, align 8, !dbg !6878
  %base6 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %14, i32 0, i32 0, !dbg !6878
  br label %cond.end8, !dbg !6878

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !6878

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_rtx_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !6878
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %cond9, i32 0, i32 0, !dbg !6878
  %15 = load i32, i32* %num, align 8, !dbg !6878
  br label %cond.end11, !dbg !6878

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !6878

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !6878
  %sub = sub nsw i32 %8, %cond12, !dbg !6878
  %call13 = call i32 @VEC_rtx_gc_reserve_exact(%struct.VEC_rtx_gc** %7, i32 %sub), !dbg !6878
  %16 = load i32, i32* %size_.addr, align 4, !dbg !6878
  %17 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %18 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %17, align 8, !dbg !6878
  %tobool14 = icmp ne %struct.VEC_rtx_gc* %18, null, !dbg !6878
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !6878

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6878
  %20 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %19, align 8, !dbg !6878
  %base16 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %20, i32 0, i32 0, !dbg !6878
  br label %cond.end18, !dbg !6878

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !6878

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_rtx_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !6878
  %num20 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %cond19, i32 0, i32 0, !dbg !6878
  store i32 %16, i32* %num20, align 8, !dbg !6878
  ret void, !dbg !6878
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_address(%struct.VEC_rtx_base* %vec_) #0 !dbg !6881 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !6884, metadata !DIExpression()), !dbg !6885
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6885
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !6885
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6885

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6885
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 2, !dbg !6885
  %arraydecay = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 0, !dbg !6885
  br label %cond.end, !dbg !6885

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6885

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !6885
  ret %struct.rtx_def** %cond, !dbg !6885
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_gc_reserve_exact(%struct.VEC_rtx_gc** %vec_, i32 %alloc_) #0 !dbg !6886 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !6889, metadata !DIExpression()), !dbg !6890
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6891, metadata !DIExpression()), !dbg !6890
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6892, metadata !DIExpression()), !dbg !6890
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6890
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %0, align 8, !dbg !6890
  %tobool = icmp ne %struct.VEC_rtx_gc* %1, null, !dbg !6890
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6890

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6890
  %3 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %2, align 8, !dbg !6890
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %3, i32 0, i32 0, !dbg !6890
  br label %cond.end, !dbg !6890

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6890
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6890
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !6890
  %tobool1 = icmp ne i32 %call, 0, !dbg !6890
  %lnot = xor i1 %tobool1, true, !dbg !6890
  %lnot.ext = zext i1 %lnot to i32, !dbg !6890
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6890
  %5 = load i32, i32* %extend, align 4, !dbg !6893
  %tobool2 = icmp ne i32 %5, 0, !dbg !6893
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6890

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6893
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %6, align 8, !dbg !6893
  %8 = bitcast %struct.VEC_rtx_gc* %7 to i8*, !dbg !6893
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6893
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !6893
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_gc*, !dbg !6893
  %11 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6893
  store %struct.VEC_rtx_gc* %10, %struct.VEC_rtx_gc** %11, align 8, !dbg !6893
  br label %if.end, !dbg !6893

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6890
  ret i32 %12, !dbg !6890
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !6895 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !6898, metadata !DIExpression()), !dbg !6899
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6900, metadata !DIExpression()), !dbg !6899
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6899
  %cmp = icmp sge i32 %0, 0, !dbg !6899
  %conv = zext i1 %cmp to i32, !dbg !6899
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6899
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !6899
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6899

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6899
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !6899
  %3 = load i32, i32* %alloc, align 4, !dbg !6899
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6899
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !6899
  %5 = load i32, i32* %num, align 8, !dbg !6899
  %sub = sub i32 %3, %5, !dbg !6899
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6899
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6899
  %conv2 = zext i1 %cmp1 to i32, !dbg !6899
  br label %cond.end, !dbg !6899

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6899
  %tobool3 = icmp ne i32 %7, 0, !dbg !6899
  %lnot = xor i1 %tobool3, true, !dbg !6899
  %lnot.ext = zext i1 %lnot to i32, !dbg !6899
  br label %cond.end, !dbg !6899

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6899
  ret i32 %cond, !dbg !6899
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @find_base_value(%struct.rtx_def* %src) #0 !dbg !6901 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %src_0 = alloca %struct.rtx_def*, align 8
  %src_1 = alloca %struct.rtx_def*, align 8
  %temp285 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6904, metadata !DIExpression()), !dbg !6905
  %0 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6906
  %call = call %struct.rtx_def* @ix86_find_base_term(%struct.rtx_def* %0), !dbg !6906
  store %struct.rtx_def* %call, %struct.rtx_def** %src.addr, align 8, !dbg !6907
  %1 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6908
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6908
  %bf.load = load i32, i32* %2, align 8, !dbg !6908
  %bf.clear = and i32 %bf.load, 65535, !dbg !6908
  switch i32 %bf.clear, label %sw.default [
    i32 45, label %sw.bb
    i32 44, label %sw.bb
    i32 37, label %sw.bb1
    i32 43, label %sw.bb47
    i32 35, label %sw.bb77
    i32 49, label %sw.bb93
    i32 50, label %sw.bb93
    i32 122, label %sw.bb225
    i32 61, label %sw.bb231
    i32 100, label %sw.bb256
    i32 121, label %sw.bb274
    i32 75, label %sw.bb274
    i32 74, label %sw.bb274
    i32 77, label %sw.bb274
    i32 76, label %sw.bb274
    i32 78, label %sw.bb274
    i32 79, label %sw.bb274
    i32 99, label %sw.bb280
    i32 98, label %sw.bb280
  ], !dbg !6909

sw.bb:                                            ; preds = %entry, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6910
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !6912
  br label %return, !dbg !6912

sw.bb1:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6913
  %call2 = call i32 @rhs_regno(%struct.rtx_def* %4), !dbg !6913
  store i32 %call2, i32* %regno, align 4, !dbg !6914
  %5 = load i32, i32* %regno, align 4, !dbg !6915
  %cmp = icmp ult i32 %5, 53, !dbg !6917
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6918

land.lhs.true:                                    ; preds = %sw.bb1
  %6 = load i8, i8* @copying_arguments, align 1, !dbg !6919
  %conv = zext i8 %6 to i32, !dbg !6919
  %tobool = icmp ne i32 %conv, 0, !dbg !6919
  br i1 %tobool, label %if.then, label %if.end, !dbg !6920

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6921
  %8 = load i32, i32* %regno, align 4, !dbg !6922
  %idxprom = zext i32 %8 to i64, !dbg !6921
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 %idxprom, !dbg !6921
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6921
  store %struct.rtx_def* %9, %struct.rtx_def** %retval, align 8, !dbg !6923
  br label %return, !dbg !6923

if.end:                                           ; preds = %land.lhs.true, %sw.bb1
  %10 = load i32, i32* %regno, align 4, !dbg !6924
  %cmp3 = icmp uge i32 %10, 53, !dbg !6926
  br i1 %cmp3, label %land.lhs.true9, label %lor.lhs.false, !dbg !6927

lor.lhs.false:                                    ; preds = %if.end
  %11 = load i32, i32* %regno, align 4, !dbg !6928
  %idxprom5 = zext i32 %11 to i64, !dbg !6929
  %arrayidx6 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom5, !dbg !6929
  %12 = load i8, i8* %arrayidx6, align 1, !dbg !6929
  %conv7 = sext i8 %12 to i32, !dbg !6929
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !6929
  br i1 %tobool8, label %land.lhs.true9, label %if.end46, !dbg !6930

land.lhs.true9:                                   ; preds = %lor.lhs.false, %if.end
  %13 = load i32, i32* %regno, align 4, !dbg !6931
  %14 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6932
  %tobool10 = icmp ne %struct.VEC_rtx_gc* %14, null, !dbg !6932
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !6932

cond.true:                                        ; preds = %land.lhs.true9
  %15 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6932
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %15, i32 0, i32 0, !dbg !6932
  br label %cond.end, !dbg !6932

cond.false:                                       ; preds = %land.lhs.true9
  br label %cond.end, !dbg !6932

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6932
  %call11 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !6932
  %cmp12 = icmp ult i32 %13, %call11, !dbg !6933
  br i1 %cmp12, label %if.then14, label %if.end46, !dbg !6934

if.then14:                                        ; preds = %cond.end
  %16 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6935
  %tobool15 = icmp ne %struct.rtx_def** %16, null, !dbg !6935
  br i1 %tobool15, label %land.lhs.true16, label %if.end28, !dbg !6938

land.lhs.true16:                                  ; preds = %if.then14
  %17 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6939
  %18 = load i32, i32* %regno, align 4, !dbg !6940
  %idxprom17 = zext i32 %18 to i64, !dbg !6939
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 %idxprom17, !dbg !6939
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8, !dbg !6939
  %tobool19 = icmp ne %struct.rtx_def* %19, null, !dbg !6939
  br i1 %tobool19, label %land.lhs.true20, label %if.end28, !dbg !6941

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %20 = load %struct.df*, %struct.df** @df, align 8, !dbg !6942
  %def_regs = getelementptr inbounds %struct.df, %struct.df* %20, i32 0, i32 5, !dbg !6942
  %21 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs, align 8, !dbg !6942
  %22 = load i32, i32* %regno, align 4, !dbg !6942
  %idxprom21 = zext i32 %22 to i64, !dbg !6942
  %arrayidx22 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %21, i64 %idxprom21, !dbg !6942
  %23 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx22, align 8, !dbg !6942
  %n_refs = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %23, i32 0, i32 1, !dbg !6942
  %24 = load i32, i32* %n_refs, align 8, !dbg !6942
  %cmp23 = icmp eq i32 %24, 1, !dbg !6943
  br i1 %cmp23, label %if.then25, label %if.end28, !dbg !6944

if.then25:                                        ; preds = %land.lhs.true20
  %25 = load %struct.rtx_def**, %struct.rtx_def*** @new_reg_base_value, align 8, !dbg !6945
  %26 = load i32, i32* %regno, align 4, !dbg !6946
  %idxprom26 = zext i32 %26 to i64, !dbg !6945
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 %idxprom26, !dbg !6945
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8, !dbg !6945
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !6947
  br label %return, !dbg !6947

if.end28:                                         ; preds = %land.lhs.true20, %land.lhs.true16, %if.then14
  %28 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6948
  %tobool29 = icmp ne %struct.VEC_rtx_gc* %28, null, !dbg !6948
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !6948

cond.true30:                                      ; preds = %if.end28
  %29 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6948
  %base31 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %29, i32 0, i32 0, !dbg !6948
  br label %cond.end33, !dbg !6948

cond.false32:                                     ; preds = %if.end28
  br label %cond.end33, !dbg !6948

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_rtx_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !6948
  %30 = load i32, i32* %regno, align 4, !dbg !6948
  %call35 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond34, i32 %30), !dbg !6948
  %tobool36 = icmp ne %struct.rtx_def* %call35, null, !dbg !6948
  br i1 %tobool36, label %if.then37, label %if.end45, !dbg !6950

if.then37:                                        ; preds = %cond.end33
  %31 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6951
  %tobool38 = icmp ne %struct.VEC_rtx_gc* %31, null, !dbg !6951
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !6951

cond.true39:                                      ; preds = %if.then37
  %32 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_base_value, align 8, !dbg !6951
  %base40 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %32, i32 0, i32 0, !dbg !6951
  br label %cond.end42, !dbg !6951

cond.false41:                                     ; preds = %if.then37
  br label %cond.end42, !dbg !6951

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_rtx_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !6951
  %33 = load i32, i32* %regno, align 4, !dbg !6951
  %call44 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond43, i32 %33), !dbg !6951
  store %struct.rtx_def* %call44, %struct.rtx_def** %retval, align 8, !dbg !6952
  br label %return, !dbg !6952

if.end45:                                         ; preds = %cond.end33
  br label %if.end46, !dbg !6953

if.end46:                                         ; preds = %if.end45, %cond.end, %lor.lhs.false
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6954
  br label %return, !dbg !6954

sw.bb47:                                          ; preds = %entry
  %34 = load i8, i8* @copying_arguments, align 1, !dbg !6955
  %conv48 = zext i8 %34 to i32, !dbg !6955
  %tobool49 = icmp ne i32 %conv48, 0, !dbg !6955
  br i1 %tobool49, label %land.lhs.true50, label %if.end76, !dbg !6957

land.lhs.true50:                                  ; preds = %sw.bb47
  %35 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6958
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6958
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6958
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6958
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !6958
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6958
  %37 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !6959
  %cmp52 = icmp eq %struct.rtx_def* %36, %37, !dbg !6960
  br i1 %cmp52, label %if.then74, label %lor.lhs.false54, !dbg !6961

lor.lhs.false54:                                  ; preds = %land.lhs.true50
  %38 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6962
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !6962
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !6962
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !6962
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !6962
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !6962
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !6962
  %bf.load59 = load i32, i32* %40, align 8, !dbg !6962
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !6962
  %cmp61 = icmp eq i32 %bf.clear60, 49, !dbg !6963
  br i1 %cmp61, label %land.lhs.true63, label %if.end76, !dbg !6964

land.lhs.true63:                                  ; preds = %lor.lhs.false54
  %41 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6965
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6965
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !6965
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 0, !dbg !6965
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !6965
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !6965
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6965
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !6965
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !6965
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !6965
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !6965
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !6966
  %cmp72 = icmp eq %struct.rtx_def* %43, %44, !dbg !6967
  br i1 %cmp72, label %if.then74, label %if.end76, !dbg !6968

if.then74:                                        ; preds = %land.lhs.true63, %land.lhs.true50
  %45 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6969
  %call75 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 6, i32 0, %struct.rtx_def* %45), !dbg !6969
  store %struct.rtx_def* %call75, %struct.rtx_def** %retval, align 8, !dbg !6970
  br label %return, !dbg !6970

if.end76:                                         ; preds = %land.lhs.true63, %lor.lhs.false54, %sw.bb47
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6971
  br label %return, !dbg !6971

sw.bb77:                                          ; preds = %entry
  %46 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6972
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6972
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !6972
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 0, !dbg !6972
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !6972
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !6972
  store %struct.rtx_def* %47, %struct.rtx_def** %src.addr, align 8, !dbg !6973
  %48 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6974
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !6974
  %bf.load82 = load i32, i32* %49, align 8, !dbg !6974
  %bf.clear83 = and i32 %bf.load82, 65535, !dbg !6974
  %cmp84 = icmp ne i32 %bf.clear83, 49, !dbg !6976
  br i1 %cmp84, label %land.lhs.true86, label %if.end92, !dbg !6977

land.lhs.true86:                                  ; preds = %sw.bb77
  %50 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6978
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !6978
  %bf.load87 = load i32, i32* %51, align 8, !dbg !6978
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !6978
  %cmp89 = icmp ne i32 %bf.clear88, 50, !dbg !6979
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !6980

if.then91:                                        ; preds = %land.lhs.true86
  br label %sw.epilog, !dbg !6981

if.end92:                                         ; preds = %land.lhs.true86, %sw.bb77
  br label %sw.bb93, !dbg !6982

sw.bb93:                                          ; preds = %entry, %entry, %if.end92
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !6983, metadata !DIExpression()), !dbg !6985
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src_0, metadata !6986, metadata !DIExpression()), !dbg !6987
  %52 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6988
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6988
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !6988
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 0, !dbg !6988
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !6988
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !6988
  store %struct.rtx_def* %53, %struct.rtx_def** %src_0, align 8, !dbg !6987
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src_1, metadata !6989, metadata !DIExpression()), !dbg !6990
  %54 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !6991
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6991
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !6991
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 1, !dbg !6991
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !6991
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx101, align 8, !dbg !6991
  store %struct.rtx_def* %55, %struct.rtx_def** %src_1, align 8, !dbg !6990
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !6992
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !6992
  %bf.load102 = load i32, i32* %57, align 8, !dbg !6992
  %bf.clear103 = and i32 %bf.load102, 65535, !dbg !6992
  %cmp104 = icmp eq i32 %bf.clear103, 37, !dbg !6992
  br i1 %cmp104, label %land.lhs.true106, label %if.end112, !dbg !6994

land.lhs.true106:                                 ; preds = %sw.bb93
  %58 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !6995
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !6995
  %bf.load107 = load i32, i32* %59, align 8, !dbg !6995
  %bf.lshr = lshr i32 %bf.load107, 30, !dbg !6995
  %bf.clear108 = and i32 %bf.lshr, 1, !dbg !6995
  %tobool109 = icmp ne i32 %bf.clear108, 0, !dbg !6995
  br i1 %tobool109, label %if.then110, label %if.end112, !dbg !6996

if.then110:                                       ; preds = %land.lhs.true106
  %60 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !6997
  %call111 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %60), !dbg !6998
  store %struct.rtx_def* %call111, %struct.rtx_def** %retval, align 8, !dbg !6999
  br label %return, !dbg !6999

if.end112:                                        ; preds = %land.lhs.true106, %sw.bb93
  %61 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7000
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !7000
  %bf.load113 = load i32, i32* %62, align 8, !dbg !7000
  %bf.clear114 = and i32 %bf.load113, 65535, !dbg !7000
  %cmp115 = icmp eq i32 %bf.clear114, 37, !dbg !7000
  br i1 %cmp115, label %land.lhs.true117, label %if.end124, !dbg !7002

land.lhs.true117:                                 ; preds = %if.end112
  %63 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7003
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !7003
  %bf.load118 = load i32, i32* %64, align 8, !dbg !7003
  %bf.lshr119 = lshr i32 %bf.load118, 30, !dbg !7003
  %bf.clear120 = and i32 %bf.lshr119, 1, !dbg !7003
  %tobool121 = icmp ne i32 %bf.clear120, 0, !dbg !7003
  br i1 %tobool121, label %if.then122, label %if.end124, !dbg !7004

if.then122:                                       ; preds = %land.lhs.true117
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7005
  %call123 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %65), !dbg !7006
  store %struct.rtx_def* %call123, %struct.rtx_def** %retval, align 8, !dbg !7007
  br label %return, !dbg !7007

if.end124:                                        ; preds = %land.lhs.true117, %if.end112
  %66 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7008
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !7008
  %bf.load125 = load i32, i32* %67, align 8, !dbg !7008
  %bf.clear126 = and i32 %bf.load125, 65535, !dbg !7008
  %cmp127 = icmp eq i32 %bf.clear126, 37, !dbg !7008
  br i1 %cmp127, label %if.then129, label %if.end135, !dbg !7010

if.then129:                                       ; preds = %if.end124
  %68 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7011
  %call130 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %68), !dbg !7013
  store %struct.rtx_def* %call130, %struct.rtx_def** %temp, align 8, !dbg !7014
  %69 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7015
  %cmp131 = icmp ne %struct.rtx_def* %69, null, !dbg !7017
  br i1 %cmp131, label %if.then133, label %if.end134, !dbg !7018

if.then133:                                       ; preds = %if.then129
  %70 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7019
  store %struct.rtx_def* %70, %struct.rtx_def** %src_0, align 8, !dbg !7020
  br label %if.end134, !dbg !7021

if.end134:                                        ; preds = %if.then133, %if.then129
  br label %if.end135, !dbg !7022

if.end135:                                        ; preds = %if.end134, %if.end124
  %71 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7023
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !7023
  %bf.load136 = load i32, i32* %72, align 8, !dbg !7023
  %bf.clear137 = and i32 %bf.load136, 65535, !dbg !7023
  %cmp138 = icmp eq i32 %bf.clear137, 37, !dbg !7023
  br i1 %cmp138, label %if.then140, label %if.end146, !dbg !7025

if.then140:                                       ; preds = %if.end135
  %73 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7026
  %call141 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %73), !dbg !7028
  store %struct.rtx_def* %call141, %struct.rtx_def** %temp, align 8, !dbg !7029
  %74 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7030
  %cmp142 = icmp ne %struct.rtx_def* %74, null, !dbg !7032
  br i1 %cmp142, label %if.then144, label %if.end145, !dbg !7033

if.then144:                                       ; preds = %if.then140
  %75 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7034
  store %struct.rtx_def* %75, %struct.rtx_def** %src_1, align 8, !dbg !7035
  br label %if.end145, !dbg !7036

if.end145:                                        ; preds = %if.then144, %if.then140
  br label %if.end146, !dbg !7037

if.end146:                                        ; preds = %if.end145, %if.end135
  %76 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7038
  %cmp147 = icmp ne %struct.rtx_def* %76, null, !dbg !7040
  br i1 %cmp147, label %land.lhs.true149, label %if.end171, !dbg !7041

land.lhs.true149:                                 ; preds = %if.end146
  %77 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7042
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !7042
  %bf.load150 = load i32, i32* %78, align 8, !dbg !7042
  %bf.clear151 = and i32 %bf.load150, 65535, !dbg !7042
  %cmp152 = icmp eq i32 %bf.clear151, 45, !dbg !7043
  br i1 %cmp152, label %if.then170, label %lor.lhs.false154, !dbg !7044

lor.lhs.false154:                                 ; preds = %land.lhs.true149
  %79 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7045
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !7045
  %bf.load155 = load i32, i32* %80, align 8, !dbg !7045
  %bf.clear156 = and i32 %bf.load155, 65535, !dbg !7045
  %cmp157 = icmp eq i32 %bf.clear156, 44, !dbg !7046
  br i1 %cmp157, label %if.then170, label %lor.lhs.false159, !dbg !7047

lor.lhs.false159:                                 ; preds = %lor.lhs.false154
  %81 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7048
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !7048
  %bf.load160 = load i32, i32* %82, align 8, !dbg !7048
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !7048
  %cmp162 = icmp eq i32 %bf.clear161, 6, !dbg !7049
  br i1 %cmp162, label %land.lhs.true164, label %if.end171, !dbg !7050

land.lhs.true164:                                 ; preds = %lor.lhs.false159
  %83 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7051
  %84 = bitcast %struct.rtx_def* %83 to i32*, !dbg !7051
  %bf.load165 = load i32, i32* %84, align 8, !dbg !7051
  %bf.lshr166 = lshr i32 %bf.load165, 16, !dbg !7051
  %bf.clear167 = and i32 %bf.lshr166, 255, !dbg !7051
  %cmp168 = icmp ne i32 %bf.clear167, 0, !dbg !7052
  br i1 %cmp168, label %if.then170, label %if.end171, !dbg !7053

if.then170:                                       ; preds = %land.lhs.true164, %lor.lhs.false154, %land.lhs.true149
  %85 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7054
  store %struct.rtx_def* %85, %struct.rtx_def** %retval, align 8, !dbg !7055
  br label %return, !dbg !7055

if.end171:                                        ; preds = %land.lhs.true164, %lor.lhs.false159, %if.end146
  %86 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7056
  %cmp172 = icmp ne %struct.rtx_def* %86, null, !dbg !7058
  br i1 %cmp172, label %land.lhs.true174, label %if.end196, !dbg !7059

land.lhs.true174:                                 ; preds = %if.end171
  %87 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7060
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !7060
  %bf.load175 = load i32, i32* %88, align 8, !dbg !7060
  %bf.clear176 = and i32 %bf.load175, 65535, !dbg !7060
  %cmp177 = icmp eq i32 %bf.clear176, 45, !dbg !7061
  br i1 %cmp177, label %if.then195, label %lor.lhs.false179, !dbg !7062

lor.lhs.false179:                                 ; preds = %land.lhs.true174
  %89 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7063
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !7063
  %bf.load180 = load i32, i32* %90, align 8, !dbg !7063
  %bf.clear181 = and i32 %bf.load180, 65535, !dbg !7063
  %cmp182 = icmp eq i32 %bf.clear181, 44, !dbg !7064
  br i1 %cmp182, label %if.then195, label %lor.lhs.false184, !dbg !7065

lor.lhs.false184:                                 ; preds = %lor.lhs.false179
  %91 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7066
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !7066
  %bf.load185 = load i32, i32* %92, align 8, !dbg !7066
  %bf.clear186 = and i32 %bf.load185, 65535, !dbg !7066
  %cmp187 = icmp eq i32 %bf.clear186, 6, !dbg !7067
  br i1 %cmp187, label %land.lhs.true189, label %if.end196, !dbg !7068

land.lhs.true189:                                 ; preds = %lor.lhs.false184
  %93 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7069
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !7069
  %bf.load190 = load i32, i32* %94, align 8, !dbg !7069
  %bf.lshr191 = lshr i32 %bf.load190, 16, !dbg !7069
  %bf.clear192 = and i32 %bf.lshr191, 255, !dbg !7069
  %cmp193 = icmp ne i32 %bf.clear192, 0, !dbg !7070
  br i1 %cmp193, label %if.then195, label %if.end196, !dbg !7071

if.then195:                                       ; preds = %land.lhs.true189, %lor.lhs.false179, %land.lhs.true174
  %95 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7072
  store %struct.rtx_def* %95, %struct.rtx_def** %retval, align 8, !dbg !7073
  br label %return, !dbg !7073

if.end196:                                        ; preds = %land.lhs.true189, %lor.lhs.false184, %if.end171
  %96 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7074
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !7074
  %bf.load197 = load i32, i32* %97, align 8, !dbg !7074
  %bf.clear198 = and i32 %bf.load197, 65535, !dbg !7074
  %cmp199 = icmp eq i32 %bf.clear198, 30, !dbg !7074
  br i1 %cmp199, label %if.then208, label %lor.lhs.false201, !dbg !7076

lor.lhs.false201:                                 ; preds = %if.end196
  %98 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7077
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !7077
  %bf.load202 = load i32, i32* %99, align 8, !dbg !7077
  %bf.clear203 = and i32 %bf.load202, 65535, !dbg !7077
  %idxprom204 = sext i32 %bf.clear203 to i64, !dbg !7077
  %arrayidx205 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom204, !dbg !7077
  %100 = load i32, i32* %arrayidx205, align 4, !dbg !7077
  %cmp206 = icmp eq i32 %100, 9, !dbg !7077
  br i1 %cmp206, label %if.then208, label %if.else, !dbg !7078

if.then208:                                       ; preds = %lor.lhs.false201, %if.end196
  %101 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7079
  %call209 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %101), !dbg !7080
  store %struct.rtx_def* %call209, %struct.rtx_def** %retval, align 8, !dbg !7081
  br label %return, !dbg !7081

if.else:                                          ; preds = %lor.lhs.false201
  %102 = load %struct.rtx_def*, %struct.rtx_def** %src_0, align 8, !dbg !7082
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !7082
  %bf.load210 = load i32, i32* %103, align 8, !dbg !7082
  %bf.clear211 = and i32 %bf.load210, 65535, !dbg !7082
  %cmp212 = icmp eq i32 %bf.clear211, 30, !dbg !7082
  br i1 %cmp212, label %if.then221, label %lor.lhs.false214, !dbg !7084

lor.lhs.false214:                                 ; preds = %if.else
  %104 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7085
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !7085
  %bf.load215 = load i32, i32* %105, align 8, !dbg !7085
  %bf.clear216 = and i32 %bf.load215, 65535, !dbg !7085
  %idxprom217 = sext i32 %bf.clear216 to i64, !dbg !7085
  %arrayidx218 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom217, !dbg !7085
  %106 = load i32, i32* %arrayidx218, align 4, !dbg !7085
  %cmp219 = icmp eq i32 %106, 9, !dbg !7085
  br i1 %cmp219, label %if.then221, label %if.end223, !dbg !7086

if.then221:                                       ; preds = %lor.lhs.false214, %if.else
  %107 = load %struct.rtx_def*, %struct.rtx_def** %src_1, align 8, !dbg !7087
  %call222 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %107), !dbg !7088
  store %struct.rtx_def* %call222, %struct.rtx_def** %retval, align 8, !dbg !7089
  br label %return, !dbg !7089

if.end223:                                        ; preds = %lor.lhs.false214
  br label %if.end224

if.end224:                                        ; preds = %if.end223
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7090
  br label %return, !dbg !7090

sw.bb225:                                         ; preds = %entry
  %108 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7091
  %u226 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !7091
  %fld227 = bitcast %union.u* %u226 to [1 x %union.rtunion_def]*, !dbg !7091
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i64 0, i64 1, !dbg !7091
  %rt_rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**, !dbg !7091
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx229, align 8, !dbg !7091
  %call230 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %109), !dbg !7092
  store %struct.rtx_def* %call230, %struct.rtx_def** %retval, align 8, !dbg !7093
  br label %return, !dbg !7093

sw.bb231:                                         ; preds = %entry
  %110 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7094
  %u232 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !7094
  %fld233 = bitcast %union.u* %u232 to [1 x %union.rtunion_def]*, !dbg !7094
  %arrayidx234 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld233, i64 0, i64 1, !dbg !7094
  %rt_rtx235 = bitcast %union.rtunion_def* %arrayidx234 to %struct.rtx_def**, !dbg !7094
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx235, align 8, !dbg !7094
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !7094
  %bf.load236 = load i32, i32* %112, align 8, !dbg !7094
  %bf.clear237 = and i32 %bf.load236, 65535, !dbg !7094
  %cmp238 = icmp eq i32 %bf.clear237, 30, !dbg !7094
  br i1 %cmp238, label %land.lhs.true240, label %if.end255, !dbg !7096

land.lhs.true240:                                 ; preds = %sw.bb231
  %113 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7097
  %u241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !7097
  %fld242 = bitcast %union.u* %u241 to [1 x %union.rtunion_def]*, !dbg !7097
  %arrayidx243 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld242, i64 0, i64 1, !dbg !7097
  %rt_rtx244 = bitcast %union.rtunion_def* %arrayidx243 to %struct.rtx_def**, !dbg !7097
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx244, align 8, !dbg !7097
  %u245 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !7097
  %hwint = bitcast %union.u* %u245 to [1 x i64]*, !dbg !7097
  %arrayidx246 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7097
  %115 = load i64, i64* %arrayidx246, align 8, !dbg !7097
  %cmp247 = icmp ne i64 %115, 0, !dbg !7098
  br i1 %cmp247, label %if.then249, label %if.end255, !dbg !7099

if.then249:                                       ; preds = %land.lhs.true240
  %116 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7100
  %u250 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !7100
  %fld251 = bitcast %union.u* %u250 to [1 x %union.rtunion_def]*, !dbg !7100
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i64 0, i64 0, !dbg !7100
  %rt_rtx253 = bitcast %union.rtunion_def* %arrayidx252 to %struct.rtx_def**, !dbg !7100
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx253, align 8, !dbg !7100
  %call254 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %117), !dbg !7101
  store %struct.rtx_def* %call254, %struct.rtx_def** %retval, align 8, !dbg !7102
  br label %return, !dbg !7102

if.end255:                                        ; preds = %land.lhs.true240, %sw.bb231
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7103
  br label %return, !dbg !7103

sw.bb256:                                         ; preds = %entry
  %call257 = call zeroext i8 @target_default_pointer_address_modes_p(), !dbg !7104
  %tobool258 = icmp ne i8 %call257, 0, !dbg !7104
  br i1 %tobool258, label %if.end260, label %if.then259, !dbg !7106

if.then259:                                       ; preds = %sw.bb256
  br label %sw.epilog, !dbg !7107

if.end260:                                        ; preds = %sw.bb256
  %118 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7108
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !7108
  %bf.load261 = load i32, i32* %119, align 8, !dbg !7108
  %bf.lshr262 = lshr i32 %bf.load261, 16, !dbg !7108
  %bf.clear263 = and i32 %bf.lshr262, 255, !dbg !7108
  %idxprom264 = zext i32 %bf.clear263 to i64, !dbg !7108
  %arrayidx265 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom264, !dbg !7108
  %120 = load i8, i8* %arrayidx265, align 1, !dbg !7108
  %conv266 = zext i8 %120 to i16, !dbg !7108
  %conv267 = zext i16 %conv266 to i32, !dbg !7108
  %121 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !7110
  %conv268 = zext i8 %121 to i16, !dbg !7110
  %conv269 = zext i16 %conv268 to i32, !dbg !7110
  %cmp270 = icmp slt i32 %conv267, %conv269, !dbg !7111
  br i1 %cmp270, label %if.then272, label %if.end273, !dbg !7112

if.then272:                                       ; preds = %if.end260
  br label %sw.epilog, !dbg !7113

if.end273:                                        ; preds = %if.end260
  br label %sw.bb274, !dbg !7110

sw.bb274:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %if.end273
  %122 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7114
  %u275 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1, !dbg !7114
  %fld276 = bitcast %union.u* %u275 to [1 x %union.rtunion_def]*, !dbg !7114
  %arrayidx277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld276, i64 0, i64 0, !dbg !7114
  %rt_rtx278 = bitcast %union.rtunion_def* %arrayidx277 to %struct.rtx_def**, !dbg !7114
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx278, align 8, !dbg !7114
  %call279 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %123), !dbg !7115
  store %struct.rtx_def* %call279, %struct.rtx_def** %retval, align 8, !dbg !7116
  br label %return, !dbg !7116

sw.bb280:                                         ; preds = %entry, %entry
  %call281 = call zeroext i8 @target_default_pointer_address_modes_p(), !dbg !7117
  %tobool282 = icmp ne i8 %call281, 0, !dbg !7117
  br i1 %tobool282, label %if.end284, label %if.then283, !dbg !7119

if.then283:                                       ; preds = %sw.bb280
  br label %sw.epilog, !dbg !7120

if.end284:                                        ; preds = %sw.bb280
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp285, metadata !7121, metadata !DIExpression()), !dbg !7123
  %124 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !7124
  %u286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !7124
  %fld287 = bitcast %union.u* %u286 to [1 x %union.rtunion_def]*, !dbg !7124
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i64 0, i64 0, !dbg !7124
  %rt_rtx289 = bitcast %union.rtunion_def* %arrayidx288 to %struct.rtx_def**, !dbg !7124
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx289, align 8, !dbg !7124
  %call290 = call %struct.rtx_def* @find_base_value(%struct.rtx_def* %125), !dbg !7125
  store %struct.rtx_def* %call290, %struct.rtx_def** %temp285, align 8, !dbg !7123
  %126 = load %struct.rtx_def*, %struct.rtx_def** %temp285, align 8, !dbg !7126
  %cmp291 = icmp ne %struct.rtx_def* %126, null, !dbg !7128
  br i1 %cmp291, label %land.lhs.true293, label %if.end302, !dbg !7129

land.lhs.true293:                                 ; preds = %if.end284
  %127 = load %struct.rtx_def*, %struct.rtx_def** %temp285, align 8, !dbg !7130
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !7130
  %bf.load294 = load i32, i32* %128, align 8, !dbg !7130
  %bf.clear295 = and i32 %bf.load294, 65535, !dbg !7130
  %idxprom296 = sext i32 %bf.clear295 to i64, !dbg !7130
  %arrayidx297 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom296, !dbg !7130
  %129 = load i32, i32* %arrayidx297, align 4, !dbg !7130
  %cmp298 = icmp eq i32 %129, 9, !dbg !7130
  br i1 %cmp298, label %if.then300, label %if.end302, !dbg !7131

if.then300:                                       ; preds = %land.lhs.true293
  %130 = load %struct.rtx_def*, %struct.rtx_def** %temp285, align 8, !dbg !7132
  %call301 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %130, i8 zeroext 0), !dbg !7132
  store %struct.rtx_def* %call301, %struct.rtx_def** %temp285, align 8, !dbg !7133
  br label %if.end302, !dbg !7134

if.end302:                                        ; preds = %if.then300, %land.lhs.true293, %if.end284
  %131 = load %struct.rtx_def*, %struct.rtx_def** %temp285, align 8, !dbg !7135
  store %struct.rtx_def* %131, %struct.rtx_def** %retval, align 8, !dbg !7136
  br label %return, !dbg !7136

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7137

sw.epilog:                                        ; preds = %sw.default, %if.then283, %if.then272, %if.then259, %if.then91
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7138
  br label %return, !dbg !7138

return:                                           ; preds = %sw.epilog, %if.end302, %sw.bb274, %if.end255, %if.then249, %sw.bb225, %if.end224, %if.then221, %if.then208, %if.then195, %if.then170, %if.then122, %if.then110, %if.end76, %if.then74, %if.end46, %cond.end42, %if.then25, %if.then, %sw.bb
  %132 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7139
  ret %struct.rtx_def* %132, !dbg !7139
}

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_pa_reg_known_value(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !7140 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !7141, metadata !DIExpression()), !dbg !7142
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !7143, metadata !DIExpression()), !dbg !7144
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !7145, metadata !DIExpression()), !dbg !7146
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !7147, metadata !DIExpression()), !dbg !7148
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !7149
  %cmp = icmp ne %struct.rtx_def** %0, null, !dbg !7151
  br i1 %cmp, label %if.then, label %if.end10, !dbg !7152

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !7153, metadata !DIExpression()), !dbg !7155
  store i64 0, i64* %i0, align 8, !dbg !7156
  br label %for.cond, !dbg !7158

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !7159
  %2 = load i32, i32* @reg_known_value_size, align 4, !dbg !7161
  %conv = zext i32 %2 to i64, !dbg !7162
  %cmp1 = icmp ne i64 %1, %conv, !dbg !7163
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7164

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !7165
  %4 = bitcast %struct.rtx_def** %3 to i8*, !dbg !7168
  %5 = load i8*, i8** %this_obj.addr, align 8, !dbg !7169
  %cmp3 = icmp eq i8* %4, %5, !dbg !7170
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !7171

if.then5:                                         ; preds = %for.body
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !7172
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @reg_known_value, align 8, !dbg !7173
  %8 = load i64, i64* %i0, align 8, !dbg !7174
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 %8, !dbg !7173
  %9 = bitcast %struct.rtx_def** %arrayidx to i8*, !dbg !7175
  %10 = load i8*, i8** %cookie.addr, align 8, !dbg !7176
  call void %6(i8* %9, i8* %10), !dbg !7172
  br label %if.end, !dbg !7172

if.end:                                           ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !7177

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %i0, align 8, !dbg !7178
  %inc = add i64 %11, 1, !dbg !7178
  store i64 %inc, i64* %i0, align 8, !dbg !7178
  br label %for.cond, !dbg !7179, !llvm.loop !7180

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %this_obj.addr, align 8, !dbg !7182
  %cmp6 = icmp eq i8* bitcast (%struct.rtx_def*** @reg_known_value to i8*), %12, !dbg !7184
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !7185

if.then8:                                         ; preds = %for.end
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !7186
  %14 = load i8*, i8** %cookie.addr, align 8, !dbg !7187
  call void %13(i8* bitcast (%struct.rtx_def*** @reg_known_value to i8*), i8* %14), !dbg !7186
  br label %if.end9, !dbg !7186

if.end9:                                          ; preds = %if.then8, %for.end
  br label %if.end10, !dbg !7188

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !7189
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2660, !2661, !2662}
!llvm.ident = !{!2663}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "alias_sets", scope: !2, file: !3, line: 253, type: !2605, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1180, globals: !2608, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "alias.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !390, !524, !561, !704, !719, !733, !909, !943, !959}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!379 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523}
!392 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!524 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !525)
!525 = !{!526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560}
!526 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!527 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!528 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!529 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!530 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!531 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!532 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!533 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!534 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!535 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!536 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!537 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!538 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!539 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!540 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!541 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!542 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!543 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!544 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!545 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!546 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!547 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!548 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!549 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!550 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!551 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!552 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!553 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!554 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!555 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!556 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!557 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!558 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!559 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!560 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!561 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !562, line: 45, baseType: !7, size: 32, elements: !563)
!562 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!563 = !{!564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703}
!564 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!565 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!566 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!567 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!568 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!569 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!570 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!571 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!572 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!573 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!574 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!575 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!576 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!577 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!578 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!579 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!580 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!581 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!582 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!583 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!584 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!585 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!586 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!587 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!588 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!589 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!590 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!591 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!592 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!593 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!594 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!595 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!596 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!597 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!598 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!599 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!600 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!601 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!602 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!603 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!604 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!605 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!606 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!607 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!608 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!609 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!610 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!611 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!612 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!613 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!614 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!615 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!616 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!617 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!618 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!619 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!620 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!621 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!622 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!623 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!624 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!625 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!626 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!627 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!628 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!629 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!630 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!631 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!632 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!633 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!634 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!635 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!636 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!637 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!638 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!639 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!640 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!641 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!642 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!643 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!644 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!645 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!646 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!647 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!648 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!649 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!650 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!651 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!652 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!653 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!654 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!655 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!656 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!657 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!658 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!659 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!660 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!661 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!662 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!663 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!664 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!665 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!666 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!667 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!668 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!669 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!670 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!671 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!672 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!673 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!674 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!675 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!676 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!677 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!678 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!679 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!680 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!681 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!682 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!683 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!684 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!685 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!686 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!687 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!688 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!689 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!690 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!691 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!692 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!693 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!694 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!695 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!696 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!697 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!698 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!699 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!700 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!701 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!702 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!703 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!704 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !562, line: 60, baseType: !7, size: 32, elements: !705)
!705 = !{!706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718}
!706 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!707 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!708 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!709 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!710 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!711 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!712 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!713 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!714 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!715 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!716 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!717 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!718 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!719 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !562, line: 1994, baseType: !7, size: 32, elements: !720)
!720 = !{!721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732}
!721 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!722 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!723 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!724 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!725 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!726 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!727 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!728 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!729 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!730 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!731 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!732 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!733 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !734, line: 74, baseType: !7, size: 32, elements: !735)
!734 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!735 = !{!736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908}
!736 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!737 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!738 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!739 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!740 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!741 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!742 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!743 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!744 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!745 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!746 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!747 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!748 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!749 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!750 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!751 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!752 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!753 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!754 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!755 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!756 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!757 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!758 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!759 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!760 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!761 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!762 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!763 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!764 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!765 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!766 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!767 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!768 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!769 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!770 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!771 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!772 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!773 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!774 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!775 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!776 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!777 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!778 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!779 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!780 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!781 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!782 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!783 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!784 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!785 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!786 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!787 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!788 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!789 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!790 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!791 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!792 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!793 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!794 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!795 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!796 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!797 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!798 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!799 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!800 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!801 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!802 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!803 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!804 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!805 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!806 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!807 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!808 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!809 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!810 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!811 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!812 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!813 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!814 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!815 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!816 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!817 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!818 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!819 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!820 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!821 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!822 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!823 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!824 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!825 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!826 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!827 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!828 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!829 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!830 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!831 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!832 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!833 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!834 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!835 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!836 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!837 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!838 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!839 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!840 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!841 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!842 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!843 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!844 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!845 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!846 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!847 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!848 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!849 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!850 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!851 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!852 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!853 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!854 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!855 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!856 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!857 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!858 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!859 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!860 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!861 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!862 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!863 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!864 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!865 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!866 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!867 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!868 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!869 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!870 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!871 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!872 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!873 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!874 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!875 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!876 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!877 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!878 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!879 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!880 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!881 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!882 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!883 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!884 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!885 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!886 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!887 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!888 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!889 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!890 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!891 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!892 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!893 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!894 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!895 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!896 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!897 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!898 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!899 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!900 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!901 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!902 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!903 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!904 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!905 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!906 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!907 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!908 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!909 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !562, line: 836, baseType: !7, size: 32, elements: !910)
!910 = !{!911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942}
!911 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!912 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!913 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!914 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!915 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!916 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!917 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!918 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!919 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!920 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!921 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!922 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!923 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!924 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!925 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!926 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!927 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!928 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!929 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!930 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!931 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!932 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!933 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!934 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!935 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!936 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!937 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!938 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!939 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!940 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!941 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!942 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!943 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !562, line: 956, baseType: !7, size: 32, elements: !944)
!944 = !{!945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958}
!945 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!946 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!947 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!948 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!949 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!950 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!951 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!952 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!953 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!954 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!955 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!956 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!957 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!958 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!959 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !960, line: 23, baseType: !7, size: 32, elements: !961)
!960 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!961 = !{!962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179}
!962 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!963 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!964 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!965 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!966 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!967 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!968 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!969 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!970 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!971 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!972 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!973 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!974 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!975 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!976 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!977 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!978 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!979 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!980 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!981 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!982 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!983 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!984 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!985 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!986 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!987 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!988 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!989 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!990 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!991 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!992 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!993 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!994 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!995 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!996 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!997 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!998 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!999 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!1000 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!1001 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!1002 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!1003 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!1004 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!1005 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!1006 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!1007 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!1008 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!1009 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!1010 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!1011 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!1012 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!1013 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!1014 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!1015 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!1016 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!1017 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!1018 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!1019 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!1020 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!1021 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!1022 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!1023 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!1024 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!1025 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!1026 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!1027 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!1028 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!1029 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!1030 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!1031 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!1032 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!1033 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!1034 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!1035 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!1036 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!1037 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!1038 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!1039 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!1040 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!1041 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!1042 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!1043 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!1044 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!1045 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!1046 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!1047 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!1048 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!1049 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!1050 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!1051 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!1052 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!1053 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!1054 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!1055 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!1056 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!1057 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!1058 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!1059 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!1060 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!1061 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!1062 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!1063 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!1064 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!1065 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!1066 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!1067 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!1068 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!1069 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!1070 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!1071 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!1072 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!1073 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!1074 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!1075 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!1076 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!1077 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!1078 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!1079 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!1080 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!1081 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!1082 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!1083 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!1084 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!1085 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!1086 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!1087 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!1088 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!1089 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!1090 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!1091 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!1092 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!1093 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!1094 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!1095 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!1096 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!1097 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!1098 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!1099 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!1100 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!1101 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!1102 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!1103 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!1104 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!1105 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!1106 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!1107 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!1108 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!1109 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!1110 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!1111 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!1112 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!1113 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!1114 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!1115 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!1116 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!1117 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!1118 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!1119 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!1120 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!1121 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!1122 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!1123 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!1124 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!1125 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!1126 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!1127 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!1128 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!1129 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!1130 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!1131 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!1132 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!1133 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!1134 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!1135 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!1136 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!1137 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!1138 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!1139 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!1140 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!1141 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!1142 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!1143 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!1144 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!1145 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!1146 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!1147 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!1148 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!1149 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!1150 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!1151 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!1152 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!1153 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!1154 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!1155 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!1156 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!1157 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!1158 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!1159 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!1160 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!1161 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!1162 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!1163 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!1164 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!1165 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!1166 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!1167 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!1168 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!1169 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!1170 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!1171 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!1172 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!1173 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!1174 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!1175 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!1176 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!1177 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!1178 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!1179 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!1180 = !{!1181, !1185, !134, !1189, !1333, !2544, !1322, !561, !1332, !2546, !5, !2589, !2132, !1193, !2590, !1190, !2592, !1307, !1191, !909, !7, !2593, !1783, !2605, !2552, !1672, !1184, !2607, !2529}
!1181 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_key", file: !1182, line: 62, baseType: !1183)
!1182 = !DIFile(filename: "./include/splay-tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1183 = !DIDerivedType(tag: DW_TAG_typedef, name: "libi_uhostptr_t", file: !1182, line: 41, baseType: !1184)
!1184 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1185 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx_function", file: !562, line: 1875, baseType: !1186)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1187, size: 64)
!1187 = !DISubroutineType(types: !1188)
!1188 = !{!1189, !1190, !1322}
!1189 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1191, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1192, line: 50, baseType: !1193)
!1192 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1194, size: 64)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !562, line: 240, size: 384, elements: !1195)
!1195 = !{!1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206}
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1194, file: !562, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1194, file: !562, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1194, file: !562, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1194, file: !562, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1194, file: !562, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1194, file: !562, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1194, file: !562, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1194, file: !562, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1194, file: !562, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1194, file: !562, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1194, file: !562, line: 321, baseType: !1207, size: 320, offset: 64)
!1207 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !562, line: 315, size: 320, elements: !1208)
!1208 = !{!1209, !2479, !2481, !2542, !2543}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1207, file: !562, line: 316, baseType: !1210, size: 64)
!1210 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1211, size: 64, elements: !1229)
!1211 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !562, line: 183, baseType: !1212)
!1212 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !562, line: 166, size: 64, elements: !1213)
!1213 = !{!1214, !1215, !1216, !1220, !1221, !1231, !1232, !1244, !1268, !1331, !2457, !2458, !2469, !2476}
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1212, file: !562, line: 168, baseType: !1189, size: 32)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1212, file: !562, line: 169, baseType: !7, size: 32)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1212, file: !562, line: 170, baseType: !1217, size: 64)
!1217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1218, size: 64)
!1218 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1219)
!1219 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1212, file: !562, line: 171, baseType: !1191, size: 64)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1212, file: !562, line: 172, baseType: !1222, size: 64)
!1222 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1192, line: 53, baseType: !1223)
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !562, line: 359, size: 128, elements: !1225)
!1225 = !{!1226, !1227}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1224, file: !562, line: 360, baseType: !1189, size: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1224, file: !562, line: 361, baseType: !1228, size: 64, offset: 64)
!1228 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1191, size: 64, elements: !1229)
!1229 = !{!1230}
!1230 = !DISubrange(count: 1)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1212, file: !562, line: 173, baseType: !5, size: 32)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1212, file: !562, line: 174, baseType: !1233, size: 32)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !562, line: 133, baseType: !1234)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !562, line: 115, size: 32, elements: !1235)
!1235 = !{!1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1234, file: !562, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1234, file: !562, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1234, file: !562, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1234, file: !562, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1234, file: !562, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1234, file: !562, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1234, file: !562, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1234, file: !562, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1212, file: !562, line: 175, baseType: !1245, size: 64)
!1245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1246, size: 64)
!1246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1247, line: 23, size: 320, elements: !1248)
!1247 = !DIFile(filename: "./cselib.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1248 = !{!1249, !1250, !1251, !1252, !1259, !1267}
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1246, file: !1247, line: 25, baseType: !7, size: 32)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1246, file: !1247, line: 28, baseType: !1189, size: 32, offset: 32)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "val_rtx", scope: !1246, file: !1247, line: 31, baseType: !1191, size: 64, offset: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "locs", scope: !1246, file: !1247, line: 35, baseType: !1253, size: 64, offset: 128)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_loc_list", file: !1247, line: 45, size: 192, elements: !1255)
!1255 = !{!1256, !1257, !1258}
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1254, file: !1247, line: 47, baseType: !1253, size: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1254, file: !1247, line: 49, baseType: !1191, size: 64, offset: 64)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "setting_insn", scope: !1254, file: !1247, line: 51, baseType: !1191, size: 64, offset: 128)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "addr_list", scope: !1246, file: !1247, line: 39, baseType: !1260, size: 64, offset: 192)
!1260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1261, size: 64)
!1261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_list", file: !1247, line: 55, size: 128, elements: !1262)
!1262 = !{!1263, !1264}
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1261, file: !1247, line: 56, baseType: !1260, size: 64)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "elt", scope: !1261, file: !1247, line: 57, baseType: !1265, size: 64, offset: 64)
!1265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1266, size: 64)
!1266 = !DIDerivedType(tag: DW_TAG_typedef, name: "cselib_val", file: !1247, line: 42, baseType: !1246)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "next_containing_mem", scope: !1246, file: !1247, line: 41, baseType: !1245, size: 64, offset: 256)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1212, file: !562, line: 176, baseType: !1269, size: 64)
!1269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1270, size: 64)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1271, line: 75, size: 256, elements: !1272)
!1271 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1272 = !{!1273, !1287, !1288, !1289}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1270, file: !1271, line: 76, baseType: !1274, size: 64)
!1274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1275, size: 64)
!1275 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1271, line: 68, baseType: !1276)
!1276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1271, line: 63, size: 320, elements: !1277)
!1277 = !{!1278, !1280, !1281, !1282}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1276, file: !1271, line: 64, baseType: !1279, size: 64)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1276, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1276, file: !1271, line: 65, baseType: !1279, size: 64, offset: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1276, file: !1271, line: 66, baseType: !7, size: 32, offset: 128)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1276, file: !1271, line: 67, baseType: !1283, size: 128, offset: 192)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 128, elements: !1285)
!1284 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1271, line: 29, baseType: !1184)
!1285 = !{!1286}
!1286 = !DISubrange(count: 2)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1270, file: !1271, line: 77, baseType: !1274, size: 64, offset: 64)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1270, file: !1271, line: 78, baseType: !7, size: 32, offset: 128)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1270, file: !1271, line: 79, baseType: !1290, size: 64, offset: 192)
!1290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1291, size: 64)
!1291 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1271, line: 49, baseType: !1292)
!1292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1271, line: 45, size: 832, elements: !1293)
!1293 = !{!1294, !1295, !1296}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1292, file: !1271, line: 46, baseType: !1279, size: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1292, file: !1271, line: 47, baseType: !1269, size: 64, offset: 64)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1292, file: !1271, line: 48, baseType: !1297, size: 704, offset: 128)
!1297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1298, line: 164, size: 704, elements: !1299)
!1298 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1299 = !{!1300, !1302, !1313, !1314, !1315, !1316, !1317, !1318, !1323, !1327, !1328, !1329, !1330}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1297, file: !1298, line: 166, baseType: !1301, size: 64)
!1301 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1297, file: !1298, line: 167, baseType: !1303, size: 64, offset: 64)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1298, line: 157, size: 192, elements: !1305)
!1305 = !{!1306, !1308, !1309}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1304, file: !1298, line: 159, baseType: !1307, size: 64)
!1307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1304, file: !1298, line: 160, baseType: !1303, size: 64, offset: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1304, file: !1298, line: 161, baseType: !1310, size: 32, offset: 128)
!1310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1219, size: 32, elements: !1311)
!1311 = !{!1312}
!1312 = !DISubrange(count: 4)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1297, file: !1298, line: 168, baseType: !1307, size: 64, offset: 128)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1297, file: !1298, line: 169, baseType: !1307, size: 64, offset: 192)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1297, file: !1298, line: 170, baseType: !1307, size: 64, offset: 256)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1297, file: !1298, line: 171, baseType: !1301, size: 64, offset: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1297, file: !1298, line: 172, baseType: !1189, size: 32, offset: 384)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1297, file: !1298, line: 176, baseType: !1319, size: 64, offset: 448)
!1319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1320, size: 64)
!1320 = !DISubroutineType(types: !1321)
!1321 = !{!1303, !1322, !1301}
!1322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1297, file: !1298, line: 177, baseType: !1324, size: 64, offset: 512)
!1324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1325, size: 64)
!1325 = !DISubroutineType(types: !1326)
!1326 = !{null, !1322, !1303}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1297, file: !1298, line: 178, baseType: !1322, size: 64, offset: 576)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1297, file: !1298, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1297, file: !1298, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1297, file: !1298, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1212, file: !562, line: 177, baseType: !1332, size: 64)
!1332 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1192, line: 56, baseType: !1333)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1335)
!1335 = !{!1336, !1369, !1375, !1386, !1405, !1416, !1421, !1428, !1434, !1448, !1460, !1498, !1503, !1531, !1548, !1549, !1554, !1563, !1569, !1574, !1578, !1582, !2106, !2155, !2161, !2167, !2174, !2187, !2201, !2218, !2230, !2252, !2267, !2439}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1334, file: !135, line: 3372, baseType: !1337, size: 64)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1338)
!1338 = !{!1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1337, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1337, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1337, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1337, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1337, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1337, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1337, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1337, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1337, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1337, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1337, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1337, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1337, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1337, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1337, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1337, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1337, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1337, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1337, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1337, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1337, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1337, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1337, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1337, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1337, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1337, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1337, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1337, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1337, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1337, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1334, file: !135, line: 3373, baseType: !1370, size: 192)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1371)
!1371 = !{!1372, !1373, !1374}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1370, file: !135, line: 403, baseType: !1337, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1370, file: !135, line: 404, baseType: !1332, size: 64, offset: 64)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1370, file: !135, line: 405, baseType: !1332, size: 64, offset: 128)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1334, file: !135, line: 3374, baseType: !1376, size: 320)
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1377)
!1377 = !{!1378, !1379}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1376, file: !135, line: 1385, baseType: !1370, size: 192)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1376, file: !135, line: 1386, baseType: !1380, size: 128, offset: 192)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1381, line: 58, baseType: !1382)
!1381 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1381, line: 54, size: 128, elements: !1383)
!1383 = !{!1384, !1385}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1382, file: !1381, line: 56, baseType: !1184, size: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1382, file: !1381, line: 57, baseType: !1301, size: 64, offset: 64)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1334, file: !135, line: 3375, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1388)
!1388 = !{!1389, !1390}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1387, file: !135, line: 1398, baseType: !1370, size: 192)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1387, file: !135, line: 1399, baseType: !1391, size: 64, offset: 192)
!1391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1392, size: 64)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1393, line: 52, size: 256, elements: !1394)
!1393 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1394 = !{!1395, !1396, !1397, !1398, !1399, !1400, !1401}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1392, file: !1393, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1392, file: !1393, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1392, file: !1393, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1392, file: !1393, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1392, file: !1393, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1392, file: !1393, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1392, file: !1393, line: 62, baseType: !1402, size: 192, offset: 64)
!1402 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1184, size: 192, elements: !1403)
!1403 = !{!1404}
!1404 = !DISubrange(count: 3)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1334, file: !135, line: 3376, baseType: !1406, size: 256)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1407)
!1407 = !{!1408, !1409}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1406, file: !135, line: 1409, baseType: !1370, size: 192)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1406, file: !135, line: 1410, baseType: !1410, size: 64, offset: 192)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1412, line: 27, size: 192, elements: !1413)
!1412 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1413 = !{!1414, !1415}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1411, file: !1412, line: 29, baseType: !1380, size: 128)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1411, file: !1412, line: 30, baseType: !5, size: 32, offset: 128)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1334, file: !135, line: 3377, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1418)
!1418 = !{!1419, !1420}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1417, file: !135, line: 1438, baseType: !1370, size: 192)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1417, file: !135, line: 1439, baseType: !1332, size: 64, offset: 192)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1334, file: !135, line: 3378, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1423)
!1423 = !{!1424, !1425, !1426}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1422, file: !135, line: 1419, baseType: !1370, size: 192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1422, file: !135, line: 1420, baseType: !1189, size: 32, offset: 192)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1422, file: !135, line: 1421, baseType: !1427, size: 8, offset: 224)
!1427 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1219, size: 8, elements: !1229)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1334, file: !135, line: 3379, baseType: !1429, size: 320)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1430)
!1430 = !{!1431, !1432, !1433}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1429, file: !135, line: 1429, baseType: !1370, size: 192)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1429, file: !135, line: 1430, baseType: !1332, size: 64, offset: 192)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1429, file: !135, line: 1431, baseType: !1332, size: 64, offset: 256)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1334, file: !135, line: 3380, baseType: !1435, size: 320)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1436)
!1436 = !{!1437, !1438}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1435, file: !135, line: 1461, baseType: !1370, size: 192)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1435, file: !135, line: 1462, baseType: !1439, size: 128, offset: 192)
!1439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1440, line: 31, size: 128, elements: !1441)
!1440 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1441 = !{!1442, !1446, !1447}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1439, file: !1440, line: 32, baseType: !1443, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1444, size: 64)
!1444 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1445)
!1445 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1439, file: !1440, line: 33, baseType: !7, size: 32, offset: 64)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1439, file: !1440, line: 34, baseType: !7, size: 32, offset: 96)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1334, file: !135, line: 3381, baseType: !1449, size: 384)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1450)
!1450 = !{!1451, !1452, !1457, !1458, !1459}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1449, file: !135, line: 2508, baseType: !1370, size: 192)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1449, file: !135, line: 2509, baseType: !1453, size: 32, offset: 192)
!1453 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1454, line: 58, baseType: !1455)
!1454 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1455 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1456, line: 44, baseType: !7)
!1456 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1449, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1449, file: !135, line: 2511, baseType: !1332, size: 64, offset: 256)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1449, file: !135, line: 2512, baseType: !1332, size: 64, offset: 320)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1334, file: !135, line: 3382, baseType: !1461, size: 896)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1462)
!1462 = !{!1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1461, file: !135, line: 2653, baseType: !1449, size: 384)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1461, file: !135, line: 2654, baseType: !1332, size: 64, offset: 384)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1461, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1461, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1461, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1461, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1461, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1461, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1461, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1461, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1461, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1461, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1461, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1461, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1461, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1461, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1461, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1461, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1461, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1461, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1461, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1461, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1461, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1461, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1461, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1461, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1461, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1461, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1461, file: !135, line: 2705, baseType: !1332, size: 64, offset: 576)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1461, file: !135, line: 2706, baseType: !1332, size: 64, offset: 640)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1461, file: !135, line: 2707, baseType: !1332, size: 64, offset: 704)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1461, file: !135, line: 2708, baseType: !1332, size: 64, offset: 768)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1461, file: !135, line: 2711, baseType: !1496, size: 64, offset: 832)
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1334, file: !135, line: 3383, baseType: !1499, size: 960)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1500)
!1500 = !{!1501, !1502}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1499, file: !135, line: 2757, baseType: !1461, size: 896)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1499, file: !135, line: 2758, baseType: !1191, size: 64, offset: 896)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1334, file: !135, line: 3384, baseType: !1504, size: 1472)
!1504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1505)
!1505 = !{!1506, !1527, !1528, !1529, !1530}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1504, file: !135, line: 3115, baseType: !1507, size: 1216)
!1507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1508)
!1508 = !{!1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1507, file: !135, line: 2985, baseType: !1499, size: 960)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1507, file: !135, line: 2986, baseType: !1332, size: 64, offset: 960)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1507, file: !135, line: 2987, baseType: !1332, size: 64, offset: 1024)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1507, file: !135, line: 2988, baseType: !1332, size: 64, offset: 1088)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1507, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1507, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1507, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1507, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1507, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1507, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1507, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1507, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1507, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1507, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1507, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1507, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1507, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1507, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1504, file: !135, line: 3117, baseType: !1332, size: 64, offset: 1216)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1504, file: !135, line: 3119, baseType: !1332, size: 64, offset: 1280)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1504, file: !135, line: 3121, baseType: !1332, size: 64, offset: 1344)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1504, file: !135, line: 3123, baseType: !1332, size: 64, offset: 1408)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1334, file: !135, line: 3385, baseType: !1532, size: 1088)
!1532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1533)
!1533 = !{!1534, !1535, !1536}
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1532, file: !135, line: 2875, baseType: !1499, size: 960)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1532, file: !135, line: 2876, baseType: !1191, size: 64, offset: 960)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1532, file: !135, line: 2877, baseType: !1537, size: 64, offset: 1024)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1539, line: 172, size: 128, elements: !1540)
!1539 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1540 = !{!1541, !1542, !1543, !1544, !1545, !1546, !1547}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1538, file: !1539, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1538, file: !1539, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1538, file: !1539, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1538, file: !1539, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1538, file: !1539, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1538, file: !1539, line: 195, baseType: !7, size: 32, offset: 32)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1538, file: !1539, line: 199, baseType: !1332, size: 64, offset: 64)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1334, file: !135, line: 3386, baseType: !1507, size: 1216)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1334, file: !135, line: 3387, baseType: !1550, size: 1280)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1551)
!1551 = !{!1552, !1553}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1550, file: !135, line: 3094, baseType: !1507, size: 1216)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1550, file: !135, line: 3095, baseType: !1537, size: 64, offset: 1216)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1334, file: !135, line: 3388, baseType: !1555, size: 1216)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1556)
!1556 = !{!1557, !1558, !1559, !1560, !1561, !1562}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1555, file: !135, line: 2825, baseType: !1461, size: 896)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1555, file: !135, line: 2827, baseType: !1332, size: 64, offset: 896)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1555, file: !135, line: 2828, baseType: !1332, size: 64, offset: 960)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1555, file: !135, line: 2829, baseType: !1332, size: 64, offset: 1024)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1555, file: !135, line: 2830, baseType: !1332, size: 64, offset: 1088)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1555, file: !135, line: 2831, baseType: !1332, size: 64, offset: 1152)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1334, file: !135, line: 3389, baseType: !1564, size: 1024)
!1564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1565)
!1565 = !{!1566, !1567, !1568}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1564, file: !135, line: 2851, baseType: !1499, size: 960)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1564, file: !135, line: 2852, baseType: !1189, size: 32, offset: 960)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1564, file: !135, line: 2853, baseType: !1189, size: 32, offset: 992)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1334, file: !135, line: 3390, baseType: !1570, size: 1024)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1571)
!1571 = !{!1572, !1573}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1570, file: !135, line: 2858, baseType: !1499, size: 960)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1570, file: !135, line: 2859, baseType: !1537, size: 64, offset: 960)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1334, file: !135, line: 3391, baseType: !1575, size: 960)
!1575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1576)
!1576 = !{!1577}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1575, file: !135, line: 2863, baseType: !1499, size: 960)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1334, file: !135, line: 3392, baseType: !1579, size: 1472)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1580)
!1580 = !{!1581}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1579, file: !135, line: 3305, baseType: !1504, size: 1472)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1334, file: !135, line: 3393, baseType: !1583, size: 1792)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1584)
!1584 = !{!1585, !1586, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105}
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1583, file: !135, line: 3249, baseType: !1504, size: 1472)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1583, file: !135, line: 3251, baseType: !1587, size: 64, offset: 1472)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1589, line: 463, size: 1152, elements: !1590)
!1589 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1590 = !{!1591, !1594, !1910, !1911, !2026, !2029, !2030, !2031, !2032, !2033, !2034, !2058, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084}
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1588, file: !1589, line: 464, baseType: !1592, size: 64)
!1592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1593, size: 64)
!1593 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1589, line: 464, flags: DIFlagFwdDecl)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1588, file: !1589, line: 467, baseType: !1595, size: 64, offset: 64)
!1595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1596, size: 64)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !1597)
!1597 = !{!1598, !1885, !1886, !1899, !1900, !1901, !1902, !1903, !1904, !1906, !1908, !1909}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1596, file: !330, line: 377, baseType: !1599, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1192, line: 111, baseType: !1600)
!1600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1601, size: 64)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1602)
!1602 = !{!1603, !1850, !1851, !1852, !1855, !1859, !1860, !1861, !1879, !1880, !1881, !1882, !1883, !1884}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1601, file: !330, line: 219, baseType: !1604, size: 64)
!1604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1605, size: 64)
!1605 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1606)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1607)
!1607 = !{!1608}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1606, file: !330, line: 151, baseType: !1609, size: 128)
!1609 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1610)
!1610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1611)
!1611 = !{!1612, !1613, !1614}
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1610, file: !330, line: 150, baseType: !7, size: 32)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1610, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1610, file: !330, line: 150, baseType: !1615, size: 64, offset: 64)
!1615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1616, size: 64, elements: !1229)
!1616 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1192, line: 108, baseType: !1617)
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !1619)
!1619 = !{!1620, !1621, !1622, !1842, !1843, !1844, !1845, !1846, !1847, !1848}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1618, file: !330, line: 124, baseType: !1600, size: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1618, file: !330, line: 125, baseType: !1600, size: 64, offset: 64)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1618, file: !330, line: 131, baseType: !1623, size: 64, offset: 128)
!1623 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !1624)
!1624 = !{!1625, !1841}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1623, file: !330, line: 129, baseType: !1626, size: 64)
!1626 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1192, line: 66, baseType: !1627)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1629, line: 143, size: 192, elements: !1630)
!1629 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1630 = !{!1631, !1839, !1840}
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1628, file: !1629, line: 145, baseType: !1632, size: 64)
!1632 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1192, line: 69, baseType: !1633)
!1633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1634, size: 64)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1629, line: 136, size: 192, elements: !1635)
!1635 = !{!1636, !1837, !1838}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1634, file: !1629, line: 137, baseType: !1637, size: 64)
!1637 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1192, line: 58, baseType: !1638)
!1638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1639, size: 64)
!1639 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1629, line: 737, size: 768, elements: !1640)
!1640 = !{!1641, !1658, !1692, !1698, !1703, !1708, !1715, !1721, !1727, !1732, !1746, !1751, !1757, !1762, !1772, !1777, !1795, !1802, !1809, !1815, !1820, !1826, !1832}
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1639, file: !1629, line: 738, baseType: !1642, size: 256)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1629, line: 271, size: 256, elements: !1643)
!1643 = !{!1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1642, file: !1629, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1642, file: !1629, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1642, file: !1629, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1642, file: !1629, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1642, file: !1629, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1642, file: !1629, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1642, file: !1629, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1642, file: !1629, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1642, file: !1629, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1642, file: !1629, line: 312, baseType: !7, size: 32, offset: 32)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1642, file: !1629, line: 316, baseType: !1453, size: 32, offset: 64)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1642, file: !1629, line: 319, baseType: !7, size: 32, offset: 96)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1642, file: !1629, line: 323, baseType: !1600, size: 64, offset: 128)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1642, file: !1629, line: 327, baseType: !1332, size: 64, offset: 192)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1639, file: !1629, line: 739, baseType: !1659, size: 448)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1629, line: 350, size: 448, elements: !1660)
!1660 = !{!1661, !1690}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1659, file: !1629, line: 353, baseType: !1662, size: 384)
!1662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1629, line: 333, size: 384, elements: !1663)
!1663 = !{!1664, !1665, !1673}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1662, file: !1629, line: 336, baseType: !1642, size: 256)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1662, file: !1629, line: 343, baseType: !1666, size: 64, offset: 256)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1668, line: 37, size: 128, elements: !1669)
!1668 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1669 = !{!1670, !1671}
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1667, file: !1668, line: 39, baseType: !1666, size: 64)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1667, file: !1668, line: 40, baseType: !1672, size: 64, offset: 64)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1662, file: !1629, line: 344, baseType: !1674, size: 64, offset: 320)
!1674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1675, size: 64)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1668, line: 45, size: 320, elements: !1676)
!1676 = !{!1677, !1678}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1675, file: !1668, line: 47, baseType: !1674, size: 64)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1675, file: !1668, line: 48, baseType: !1679, size: 256, offset: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1680)
!1680 = !{!1681, !1683, !1684, !1689}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1679, file: !135, line: 1884, baseType: !1682, size: 64)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1679, size: 64)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1679, file: !135, line: 1885, baseType: !1682, size: 64, offset: 64)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1679, file: !135, line: 1891, baseType: !1685, size: 64, offset: 128)
!1685 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1679, file: !135, line: 1891, size: 64, elements: !1686)
!1686 = !{!1687, !1688}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1685, file: !135, line: 1891, baseType: !1637, size: 64)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1685, file: !135, line: 1891, baseType: !1332, size: 64)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1679, file: !135, line: 1892, baseType: !1672, size: 64, offset: 192)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1659, file: !1629, line: 359, baseType: !1691, size: 64, offset: 384)
!1691 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1332, size: 64, elements: !1229)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1639, file: !1629, line: 740, baseType: !1693, size: 512)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1629, line: 365, size: 512, elements: !1694)
!1694 = !{!1695, !1696, !1697}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1693, file: !1629, line: 368, baseType: !1662, size: 384)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1693, file: !1629, line: 373, baseType: !1332, size: 64, offset: 384)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1693, file: !1629, line: 374, baseType: !1332, size: 64, offset: 448)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1639, file: !1629, line: 741, baseType: !1699, size: 576)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1629, line: 380, size: 576, elements: !1700)
!1700 = !{!1701, !1702}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1699, file: !1629, line: 383, baseType: !1693, size: 512)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1699, file: !1629, line: 389, baseType: !1691, size: 64, offset: 512)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1639, file: !1629, line: 742, baseType: !1704, size: 320)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1629, line: 395, size: 320, elements: !1705)
!1705 = !{!1706, !1707}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1704, file: !1629, line: 397, baseType: !1642, size: 256)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1704, file: !1629, line: 400, baseType: !1626, size: 64, offset: 256)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1639, file: !1629, line: 743, baseType: !1709, size: 448)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1629, line: 406, size: 448, elements: !1710)
!1710 = !{!1711, !1712, !1713, !1714}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1709, file: !1629, line: 408, baseType: !1642, size: 256)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1709, file: !1629, line: 412, baseType: !1332, size: 64, offset: 256)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1709, file: !1629, line: 420, baseType: !1332, size: 64, offset: 320)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1709, file: !1629, line: 423, baseType: !1626, size: 64, offset: 384)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1639, file: !1629, line: 744, baseType: !1716, size: 384)
!1716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1629, line: 429, size: 384, elements: !1717)
!1717 = !{!1718, !1719, !1720}
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1716, file: !1629, line: 431, baseType: !1642, size: 256)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1716, file: !1629, line: 434, baseType: !1332, size: 64, offset: 256)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1716, file: !1629, line: 437, baseType: !1626, size: 64, offset: 320)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1639, file: !1629, line: 745, baseType: !1722, size: 384)
!1722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1629, line: 443, size: 384, elements: !1723)
!1723 = !{!1724, !1725, !1726}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1722, file: !1629, line: 445, baseType: !1642, size: 256)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1722, file: !1629, line: 449, baseType: !1332, size: 64, offset: 256)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1722, file: !1629, line: 453, baseType: !1626, size: 64, offset: 320)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1639, file: !1629, line: 746, baseType: !1728, size: 320)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1629, line: 459, size: 320, elements: !1729)
!1729 = !{!1730, !1731}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1728, file: !1629, line: 461, baseType: !1642, size: 256)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1728, file: !1629, line: 464, baseType: !1332, size: 64, offset: 256)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1639, file: !1629, line: 747, baseType: !1733, size: 768)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1629, line: 469, size: 768, elements: !1734)
!1734 = !{!1735, !1736, !1737, !1738, !1739}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1733, file: !1629, line: 471, baseType: !1642, size: 256)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1733, file: !1629, line: 474, baseType: !7, size: 32, offset: 256)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1733, file: !1629, line: 475, baseType: !7, size: 32, offset: 288)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1733, file: !1629, line: 478, baseType: !1332, size: 64, offset: 320)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1733, file: !1629, line: 481, baseType: !1740, size: 384, offset: 384)
!1740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1741, size: 384, elements: !1229)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1742)
!1742 = !{!1743, !1744, !1745}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1741, file: !135, line: 1920, baseType: !1679, size: 256)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1741, file: !135, line: 1921, baseType: !1332, size: 64, offset: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1741, file: !135, line: 1922, baseType: !1453, size: 32, offset: 320)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1639, file: !1629, line: 748, baseType: !1747, size: 320)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1629, line: 487, size: 320, elements: !1748)
!1748 = !{!1749, !1750}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1747, file: !1629, line: 490, baseType: !1642, size: 256)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1747, file: !1629, line: 494, baseType: !1189, size: 32, offset: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1639, file: !1629, line: 749, baseType: !1752, size: 384)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1629, line: 500, size: 384, elements: !1753)
!1753 = !{!1754, !1755, !1756}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1752, file: !1629, line: 502, baseType: !1642, size: 256)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1752, file: !1629, line: 506, baseType: !1626, size: 64, offset: 256)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1752, file: !1629, line: 510, baseType: !1626, size: 64, offset: 320)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1639, file: !1629, line: 750, baseType: !1758, size: 320)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1629, line: 529, size: 320, elements: !1759)
!1759 = !{!1760, !1761}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1758, file: !1629, line: 531, baseType: !1642, size: 256)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1758, file: !1629, line: 540, baseType: !1626, size: 64, offset: 256)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1639, file: !1629, line: 751, baseType: !1763, size: 704)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1629, line: 546, size: 704, elements: !1764)
!1764 = !{!1765, !1766, !1767, !1768, !1769, !1770, !1771}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1763, file: !1629, line: 549, baseType: !1693, size: 512)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1763, file: !1629, line: 553, baseType: !1217, size: 64, offset: 512)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1763, file: !1629, line: 557, baseType: !1445, size: 8, offset: 576)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1763, file: !1629, line: 558, baseType: !1445, size: 8, offset: 584)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1763, file: !1629, line: 559, baseType: !1445, size: 8, offset: 592)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1763, file: !1629, line: 560, baseType: !1445, size: 8, offset: 600)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1763, file: !1629, line: 566, baseType: !1691, size: 64, offset: 640)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1639, file: !1629, line: 752, baseType: !1773, size: 384)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1629, line: 571, size: 384, elements: !1774)
!1774 = !{!1775, !1776}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1773, file: !1629, line: 573, baseType: !1704, size: 320)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1773, file: !1629, line: 577, baseType: !1332, size: 64, offset: 320)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1639, file: !1629, line: 753, baseType: !1778, size: 576)
!1778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1629, line: 600, size: 576, elements: !1779)
!1779 = !{!1780, !1781, !1782, !1785, !1794}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1778, file: !1629, line: 602, baseType: !1704, size: 320)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1778, file: !1629, line: 605, baseType: !1332, size: 64, offset: 320)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1778, file: !1629, line: 609, baseType: !1783, size: 64, offset: 384)
!1783 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1784, line: 46, baseType: !1184)
!1784 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1778, file: !1629, line: 612, baseType: !1786, size: 64, offset: 448)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1629, line: 581, size: 320, elements: !1788)
!1788 = !{!1789, !1790, !1791, !1792, !1793}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1787, file: !1629, line: 583, baseType: !134, size: 32)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1787, file: !1629, line: 586, baseType: !1332, size: 64, offset: 64)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1787, file: !1629, line: 589, baseType: !1332, size: 64, offset: 128)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1787, file: !1629, line: 592, baseType: !1332, size: 64, offset: 192)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1787, file: !1629, line: 595, baseType: !1332, size: 64, offset: 256)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1778, file: !1629, line: 616, baseType: !1626, size: 64, offset: 512)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1639, file: !1629, line: 754, baseType: !1796, size: 512)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1629, line: 622, size: 512, elements: !1797)
!1797 = !{!1798, !1799, !1800, !1801}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1796, file: !1629, line: 624, baseType: !1704, size: 320)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1796, file: !1629, line: 628, baseType: !1332, size: 64, offset: 320)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1796, file: !1629, line: 632, baseType: !1332, size: 64, offset: 384)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1796, file: !1629, line: 636, baseType: !1332, size: 64, offset: 448)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1639, file: !1629, line: 755, baseType: !1803, size: 704)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1629, line: 642, size: 704, elements: !1804)
!1804 = !{!1805, !1806, !1807, !1808}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1803, file: !1629, line: 644, baseType: !1796, size: 512)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1803, file: !1629, line: 648, baseType: !1332, size: 64, offset: 512)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1803, file: !1629, line: 652, baseType: !1332, size: 64, offset: 576)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1803, file: !1629, line: 653, baseType: !1332, size: 64, offset: 640)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1639, file: !1629, line: 756, baseType: !1810, size: 448)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1629, line: 663, size: 448, elements: !1811)
!1811 = !{!1812, !1813, !1814}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1810, file: !1629, line: 665, baseType: !1704, size: 320)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1810, file: !1629, line: 668, baseType: !1332, size: 64, offset: 320)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1810, file: !1629, line: 673, baseType: !1332, size: 64, offset: 384)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1639, file: !1629, line: 757, baseType: !1816, size: 384)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1629, line: 694, size: 384, elements: !1817)
!1817 = !{!1818, !1819}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1816, file: !1629, line: 696, baseType: !1704, size: 320)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1816, file: !1629, line: 699, baseType: !1332, size: 64, offset: 320)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1639, file: !1629, line: 758, baseType: !1821, size: 384)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1629, line: 681, size: 384, elements: !1822)
!1822 = !{!1823, !1824, !1825}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1821, file: !1629, line: 683, baseType: !1642, size: 256)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1821, file: !1629, line: 686, baseType: !1332, size: 64, offset: 256)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1821, file: !1629, line: 689, baseType: !1332, size: 64, offset: 320)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1639, file: !1629, line: 759, baseType: !1827, size: 384)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1629, line: 707, size: 384, elements: !1828)
!1828 = !{!1829, !1830, !1831}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1827, file: !1629, line: 709, baseType: !1642, size: 256)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1827, file: !1629, line: 712, baseType: !1332, size: 64, offset: 256)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1827, file: !1629, line: 712, baseType: !1332, size: 64, offset: 320)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1639, file: !1629, line: 760, baseType: !1833, size: 320)
!1833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1629, line: 718, size: 320, elements: !1834)
!1834 = !{!1835, !1836}
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1833, file: !1629, line: 720, baseType: !1642, size: 256)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1833, file: !1629, line: 723, baseType: !1332, size: 64, offset: 256)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1634, file: !1629, line: 138, baseType: !1633, size: 64, offset: 64)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1634, file: !1629, line: 139, baseType: !1633, size: 64, offset: 128)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1628, file: !1629, line: 146, baseType: !1632, size: 64, offset: 64)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1628, file: !1629, line: 152, baseType: !1626, size: 64, offset: 128)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1623, file: !330, line: 130, baseType: !1191, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1618, file: !330, line: 134, baseType: !1322, size: 64, offset: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1618, file: !330, line: 137, baseType: !1332, size: 64, offset: 256)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1618, file: !330, line: 138, baseType: !1453, size: 32, offset: 320)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1618, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1618, file: !330, line: 144, baseType: !1189, size: 32, offset: 384)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1618, file: !330, line: 145, baseType: !1189, size: 32, offset: 416)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1618, file: !330, line: 146, baseType: !1849, size: 64, offset: 448)
!1849 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1301)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1601, file: !330, line: 220, baseType: !1604, size: 64, offset: 64)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1601, file: !330, line: 223, baseType: !1322, size: 64, offset: 128)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1601, file: !330, line: 226, baseType: !1853, size: 64, offset: 192)
!1853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1854, size: 64)
!1854 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1601, file: !330, line: 229, baseType: !1856, size: 128, offset: 256)
!1856 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1857, size: 128, elements: !1285)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64)
!1858 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1601, file: !330, line: 232, baseType: !1600, size: 64, offset: 384)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1601, file: !330, line: 233, baseType: !1600, size: 64, offset: 448)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1601, file: !330, line: 238, baseType: !1862, size: 64, offset: 512)
!1862 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !1863)
!1863 = !{!1864, !1870}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1862, file: !330, line: 236, baseType: !1865, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !1867)
!1867 = !{!1868, !1869}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1866, file: !330, line: 275, baseType: !1626, size: 64)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1866, file: !330, line: 278, baseType: !1626, size: 64, offset: 64)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1862, file: !330, line: 237, baseType: !1871, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1872, size: 64)
!1872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !1873)
!1873 = !{!1874, !1875, !1876, !1877, !1878}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1872, file: !330, line: 261, baseType: !1191, size: 64)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1872, file: !330, line: 262, baseType: !1191, size: 64, offset: 64)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1872, file: !330, line: 266, baseType: !1191, size: 64, offset: 128)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1872, file: !330, line: 267, baseType: !1191, size: 64, offset: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1872, file: !330, line: 270, baseType: !1189, size: 32, offset: 256)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1601, file: !330, line: 241, baseType: !1849, size: 64, offset: 576)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1601, file: !330, line: 244, baseType: !1189, size: 32, offset: 640)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1601, file: !330, line: 247, baseType: !1189, size: 32, offset: 672)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1601, file: !330, line: 250, baseType: !1189, size: 32, offset: 704)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1601, file: !330, line: 253, baseType: !1189, size: 32, offset: 736)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1601, file: !330, line: 256, baseType: !1189, size: 32, offset: 768)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1596, file: !330, line: 378, baseType: !1599, size: 64, offset: 64)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1596, file: !330, line: 381, baseType: !1887, size: 64, offset: 128)
!1887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1888, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !1889)
!1889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !1890)
!1890 = !{!1891}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1889, file: !330, line: 282, baseType: !1892, size: 128)
!1892 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !1893)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !1894)
!1894 = !{!1895, !1896, !1897}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1893, file: !330, line: 281, baseType: !7, size: 32)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1893, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1893, file: !330, line: 281, baseType: !1898, size: 64, offset: 64)
!1898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1599, size: 64, elements: !1229)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1596, file: !330, line: 384, baseType: !1189, size: 32, offset: 192)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1596, file: !330, line: 387, baseType: !1189, size: 32, offset: 224)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1596, file: !330, line: 390, baseType: !1189, size: 32, offset: 256)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1596, file: !330, line: 394, baseType: !1887, size: 64, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1596, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1596, file: !330, line: 399, baseType: !1905, size: 64, offset: 416)
!1905 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1285)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1596, file: !330, line: 402, baseType: !1907, size: 64, offset: 480)
!1907 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1285)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1596, file: !330, line: 406, baseType: !1189, size: 32, offset: 544)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1596, file: !330, line: 409, baseType: !1189, size: 32, offset: 576)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1588, file: !1589, line: 470, baseType: !1627, size: 64, offset: 128)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1588, file: !1589, line: 473, baseType: !1912, size: 64, offset: 192)
!1912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1913, size: 64)
!1913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1539, line: 39, size: 1152, elements: !1914)
!1914 = !{!1915, !1965, !1978, !1990, !1991, !2003, !2004, !2008, !2009, !2010, !2011, !2012}
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1913, file: !1539, line: 41, baseType: !1916, size: 64)
!1916 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1917, line: 144, baseType: !1918)
!1917 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1919, size: 64)
!1919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1917, line: 100, size: 896, elements: !1920)
!1920 = !{!1921, !1929, !1934, !1939, !1941, !1942, !1943, !1944, !1945, !1946, !1951, !1953, !1954, !1959, !1964}
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1919, file: !1917, line: 102, baseType: !1922, size: 64)
!1922 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1917, line: 52, baseType: !1923)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{!1926, !1927}
!1926 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1917, line: 47, baseType: !7)
!1927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1928, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1919, file: !1917, line: 105, baseType: !1930, size: 64, offset: 64)
!1930 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1917, line: 59, baseType: !1931)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = !DISubroutineType(types: !1933)
!1933 = !{!1189, !1927, !1927}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1919, file: !1917, line: 108, baseType: !1935, size: 64, offset: 128)
!1935 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1917, line: 63, baseType: !1936)
!1936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1937, size: 64)
!1937 = !DISubroutineType(types: !1938)
!1938 = !{null, !1322}
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1919, file: !1917, line: 111, baseType: !1940, size: 64, offset: 192)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1322, size: 64)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1919, file: !1917, line: 114, baseType: !1783, size: 64, offset: 256)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1919, file: !1917, line: 117, baseType: !1783, size: 64, offset: 320)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1919, file: !1917, line: 120, baseType: !1783, size: 64, offset: 384)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1919, file: !1917, line: 124, baseType: !7, size: 32, offset: 448)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1919, file: !1917, line: 128, baseType: !7, size: 32, offset: 480)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1919, file: !1917, line: 131, baseType: !1947, size: 64, offset: 512)
!1947 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1917, line: 75, baseType: !1948)
!1948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1949, size: 64)
!1949 = !DISubroutineType(types: !1950)
!1950 = !{!1322, !1783, !1783}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1919, file: !1917, line: 132, baseType: !1952, size: 64, offset: 576)
!1952 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1917, line: 78, baseType: !1936)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1919, file: !1917, line: 135, baseType: !1322, size: 64, offset: 640)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1919, file: !1917, line: 136, baseType: !1955, size: 64, offset: 704)
!1955 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1917, line: 82, baseType: !1956)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64)
!1957 = !DISubroutineType(types: !1958)
!1958 = !{!1322, !1322, !1783, !1783}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1919, file: !1917, line: 137, baseType: !1960, size: 64, offset: 768)
!1960 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1917, line: 83, baseType: !1961)
!1961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64)
!1962 = !DISubroutineType(types: !1963)
!1963 = !{null, !1322, !1322}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1919, file: !1917, line: 141, baseType: !7, size: 32, offset: 832)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1913, file: !1539, line: 48, baseType: !1966, size: 64, offset: 64)
!1966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1967, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1629, line: 35, baseType: !1968)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1629, line: 35, size: 128, elements: !1969)
!1969 = !{!1970}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1968, file: !1629, line: 35, baseType: !1971, size: 128)
!1971 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1629, line: 33, baseType: !1972)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1629, line: 33, size: 128, elements: !1973)
!1973 = !{!1974, !1975, !1976}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1972, file: !1629, line: 33, baseType: !7, size: 32)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1972, file: !1629, line: 33, baseType: !7, size: 32, offset: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1972, file: !1629, line: 33, baseType: !1977, size: 64, offset: 64)
!1977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 64, elements: !1229)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1913, file: !1539, line: 51, baseType: !1979, size: 64, offset: 128)
!1979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1980, size: 64)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1981)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1982)
!1982 = !{!1983}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1981, file: !135, line: 183, baseType: !1984, size: 128)
!1984 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1985)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1986)
!1986 = !{!1987, !1988, !1989}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1985, file: !135, line: 182, baseType: !7, size: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1985, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1985, file: !135, line: 182, baseType: !1691, size: 64, offset: 64)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1913, file: !1539, line: 54, baseType: !1332, size: 64, offset: 192)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1913, file: !1539, line: 57, baseType: !1992, size: 128, offset: 256)
!1992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1993, line: 31, size: 128, elements: !1994)
!1993 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1994 = !{!1995, !1996, !1997, !1998, !1999, !2000, !2001}
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1992, file: !1993, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1992, file: !1993, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1992, file: !1993, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1992, file: !1993, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1992, file: !1993, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1992, file: !1993, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1992, file: !1993, line: 56, baseType: !2002, size: 64, offset: 64)
!2002 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1192, line: 47, baseType: !1269)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1913, file: !1539, line: 60, baseType: !1992, size: 128, offset: 384)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1913, file: !1539, line: 64, baseType: !2005, size: 64, offset: 512)
!2005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2006 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2007, line: 33, flags: DIFlagFwdDecl)
!2007 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1913, file: !1539, line: 67, baseType: !1332, size: 64, offset: 576)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1913, file: !1539, line: 73, baseType: !1916, size: 64, offset: 640)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1913, file: !1539, line: 77, baseType: !2002, size: 64, offset: 704)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1913, file: !1539, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1913, file: !1539, line: 82, baseType: !2013, size: 320, offset: 832)
!2013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1668, line: 62, size: 320, elements: !2014)
!2014 = !{!2015, !2021, !2022, !2023, !2024, !2025}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2013, file: !1668, line: 63, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1668, line: 56, size: 128, elements: !2018)
!2018 = !{!2019, !2020}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2017, file: !1668, line: 57, baseType: !2016, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2017, file: !1668, line: 58, baseType: !1427, size: 8, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2013, file: !1668, line: 64, baseType: !7, size: 32, offset: 64)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2013, file: !1668, line: 66, baseType: !7, size: 32, offset: 96)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2013, file: !1668, line: 68, baseType: !1445, size: 8, offset: 128)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2013, file: !1668, line: 70, baseType: !1666, size: 64, offset: 192)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2013, file: !1668, line: 71, baseType: !1674, size: 64, offset: 256)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1588, file: !1589, line: 476, baseType: !2027, size: 64, offset: 256)
!2027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2028, size: 64)
!2028 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1589, line: 476, flags: DIFlagFwdDecl)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1588, file: !1589, line: 479, baseType: !1916, size: 64, offset: 320)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1588, file: !1589, line: 484, baseType: !1332, size: 64, offset: 384)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1588, file: !1589, line: 488, baseType: !1332, size: 64, offset: 448)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1588, file: !1589, line: 493, baseType: !1332, size: 64, offset: 512)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1588, file: !1589, line: 496, baseType: !1332, size: 64, offset: 576)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1588, file: !1589, line: 501, baseType: !2035, size: 64, offset: 640)
!2035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2036, size: 64)
!2036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2037)
!2037 = !{!2038, !2041, !2042, !2043, !2044, !2046, !2047, !2052, !2053, !2054, !2055, !2056, !2057}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2036, file: !341, line: 2356, baseType: !2039, size: 64)
!2039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2040, size: 64)
!2040 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2036, file: !341, line: 2357, baseType: !1217, size: 64, offset: 64)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2036, file: !341, line: 2358, baseType: !1189, size: 32, offset: 128)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2036, file: !341, line: 2359, baseType: !1189, size: 32, offset: 160)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2036, file: !341, line: 2360, baseType: !2045, size: 128, offset: 192)
!2045 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1189, size: 128, elements: !1311)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2036, file: !341, line: 2364, baseType: !1189, size: 32, offset: 320)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2036, file: !341, line: 2367, baseType: !2048, size: 128, offset: 384)
!2048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2049)
!2049 = !{!2050, !2051}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2048, file: !341, line: 2351, baseType: !1191, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2048, file: !341, line: 2352, baseType: !1301, size: 64, offset: 64)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2036, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2036, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2036, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2036, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2036, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2036, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1588, file: !1589, line: 504, baseType: !2059, size: 64, offset: 704)
!2059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2060, size: 64)
!2060 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1589, line: 504, flags: DIFlagFwdDecl)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1588, file: !1589, line: 507, baseType: !1916, size: 64, offset: 768)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1588, file: !1589, line: 510, baseType: !1189, size: 32, offset: 832)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1588, file: !1589, line: 513, baseType: !1189, size: 32, offset: 864)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1588, file: !1589, line: 516, baseType: !1453, size: 32, offset: 896)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1588, file: !1589, line: 519, baseType: !1453, size: 32, offset: 928)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1588, file: !1589, line: 522, baseType: !7, size: 32, offset: 960)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1588, file: !1589, line: 523, baseType: !7, size: 32, offset: 992)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1588, file: !1589, line: 528, baseType: !1217, size: 64, offset: 1024)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1588, file: !1589, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1588, file: !1589, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1588, file: !1589, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1588, file: !1589, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1588, file: !1589, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1588, file: !1589, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1588, file: !1589, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1588, file: !1589, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1588, file: !1589, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1588, file: !1589, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1588, file: !1589, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1588, file: !1589, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1588, file: !1589, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1588, file: !1589, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1588, file: !1589, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1588, file: !1589, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1583, file: !135, line: 3254, baseType: !1332, size: 64, offset: 1536)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1583, file: !135, line: 3257, baseType: !1332, size: 64, offset: 1600)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1583, file: !135, line: 3258, baseType: !1332, size: 64, offset: 1664)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1583, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1583, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1583, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1583, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1583, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1583, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1583, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1583, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1583, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1583, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1583, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1583, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1583, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1583, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1583, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1583, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1583, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1583, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1334, file: !135, line: 3394, baseType: !2107, size: 1344)
!2107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2108)
!2108 = !{!2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2134, !2135, !2136, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152}
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2107, file: !135, line: 2280, baseType: !1370, size: 192)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2107, file: !135, line: 2281, baseType: !1332, size: 64, offset: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2107, file: !135, line: 2282, baseType: !1332, size: 64, offset: 256)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2107, file: !135, line: 2283, baseType: !1332, size: 64, offset: 320)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2107, file: !135, line: 2284, baseType: !1332, size: 64, offset: 384)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2107, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2107, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2107, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2107, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2107, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2107, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2107, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2107, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2107, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2107, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2107, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2107, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2107, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2107, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2107, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2107, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2107, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2107, file: !135, line: 2306, baseType: !2132, size: 32, offset: 544)
!2132 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2133, line: 31, baseType: !1189)
!2133 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2107, file: !135, line: 2307, baseType: !1332, size: 64, offset: 576)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2107, file: !135, line: 2308, baseType: !1332, size: 64, offset: 640)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2107, file: !135, line: 2314, baseType: !2137, size: 64, offset: 704)
!2137 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2138)
!2138 = !{!2139, !2140, !2141}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2137, file: !135, line: 2310, baseType: !1189, size: 32)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2137, file: !135, line: 2311, baseType: !1217, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2137, file: !135, line: 2312, baseType: !2142, size: 64)
!2142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2143, size: 64)
!2143 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2107, file: !135, line: 2315, baseType: !1332, size: 64, offset: 768)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2107, file: !135, line: 2316, baseType: !1332, size: 64, offset: 832)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2107, file: !135, line: 2317, baseType: !1332, size: 64, offset: 896)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2107, file: !135, line: 2318, baseType: !1332, size: 64, offset: 960)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2107, file: !135, line: 2319, baseType: !1332, size: 64, offset: 1024)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2107, file: !135, line: 2320, baseType: !1332, size: 64, offset: 1088)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2107, file: !135, line: 2321, baseType: !1332, size: 64, offset: 1152)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2107, file: !135, line: 2322, baseType: !1332, size: 64, offset: 1216)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2107, file: !135, line: 2324, baseType: !2153, size: 64, offset: 1280)
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2154, size: 64)
!2154 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1334, file: !135, line: 3395, baseType: !2156, size: 320)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2157)
!2157 = !{!2158, !2159, !2160}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2156, file: !135, line: 1470, baseType: !1370, size: 192)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2156, file: !135, line: 1471, baseType: !1332, size: 64, offset: 192)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2156, file: !135, line: 1472, baseType: !1332, size: 64, offset: 256)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1334, file: !135, line: 3396, baseType: !2162, size: 320)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2163)
!2163 = !{!2164, !2165, !2166}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2162, file: !135, line: 1483, baseType: !1370, size: 192)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2162, file: !135, line: 1484, baseType: !1189, size: 32, offset: 192)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2162, file: !135, line: 1485, baseType: !1691, size: 64, offset: 256)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1334, file: !135, line: 3397, baseType: !2168, size: 384)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2169)
!2169 = !{!2170, !2171, !2172, !2173}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2168, file: !135, line: 1830, baseType: !1370, size: 192)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2168, file: !135, line: 1831, baseType: !1453, size: 32, offset: 192)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2168, file: !135, line: 1832, baseType: !1332, size: 64, offset: 256)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2168, file: !135, line: 1835, baseType: !1691, size: 64, offset: 320)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1334, file: !135, line: 3398, baseType: !2175, size: 704)
!2175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2176)
!2176 = !{!2177, !2178, !2179, !2180, !2181, !2186}
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2175, file: !135, line: 1899, baseType: !1370, size: 192)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2175, file: !135, line: 1902, baseType: !1332, size: 64, offset: 192)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2175, file: !135, line: 1905, baseType: !1637, size: 64, offset: 256)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2175, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2175, file: !135, line: 1911, baseType: !2182, size: 64, offset: 384)
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2183, size: 64)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1539, line: 117, size: 128, elements: !2184)
!2184 = !{!2185}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2183, file: !1539, line: 120, baseType: !1992, size: 128)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2175, file: !135, line: 1914, baseType: !1679, size: 256, offset: 448)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1334, file: !135, line: 3399, baseType: !2188, size: 704)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2189)
!2189 = !{!2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2188, file: !135, line: 2009, baseType: !1370, size: 192)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2188, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2188, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2188, file: !135, line: 2014, baseType: !1453, size: 32, offset: 224)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2188, file: !135, line: 2016, baseType: !1332, size: 64, offset: 256)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2188, file: !135, line: 2017, baseType: !1979, size: 64, offset: 320)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2188, file: !135, line: 2019, baseType: !1332, size: 64, offset: 384)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2188, file: !135, line: 2020, baseType: !1332, size: 64, offset: 448)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2188, file: !135, line: 2021, baseType: !1332, size: 64, offset: 512)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2188, file: !135, line: 2022, baseType: !1332, size: 64, offset: 576)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2188, file: !135, line: 2023, baseType: !1332, size: 64, offset: 640)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1334, file: !135, line: 3400, baseType: !2202, size: 832)
!2202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2203)
!2203 = !{!2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2202, file: !135, line: 2431, baseType: !1370, size: 192)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2202, file: !135, line: 2433, baseType: !1332, size: 64, offset: 192)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2202, file: !135, line: 2434, baseType: !1332, size: 64, offset: 256)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2202, file: !135, line: 2435, baseType: !1332, size: 64, offset: 320)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2202, file: !135, line: 2436, baseType: !1332, size: 64, offset: 384)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2202, file: !135, line: 2437, baseType: !1979, size: 64, offset: 448)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2202, file: !135, line: 2438, baseType: !1332, size: 64, offset: 512)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2202, file: !135, line: 2440, baseType: !1332, size: 64, offset: 576)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2202, file: !135, line: 2441, baseType: !1332, size: 64, offset: 640)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2202, file: !135, line: 2443, baseType: !2214, size: 128, offset: 704)
!2214 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2215)
!2215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2216)
!2216 = !{!2217}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2215, file: !135, line: 182, baseType: !1984, size: 128)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1334, file: !135, line: 3401, baseType: !2219, size: 320)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2220)
!2220 = !{!2221, !2222, !2229}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2219, file: !135, line: 3329, baseType: !1370, size: 192)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2219, file: !135, line: 3330, baseType: !2223, size: 64, offset: 192)
!2223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2224, size: 64)
!2224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2225)
!2225 = !{!2226, !2227, !2228}
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2224, file: !135, line: 3322, baseType: !2223, size: 64)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2224, file: !135, line: 3323, baseType: !2223, size: 64, offset: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2224, file: !135, line: 3324, baseType: !1332, size: 64, offset: 128)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2219, file: !135, line: 3331, baseType: !2223, size: 64, offset: 256)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1334, file: !135, line: 3402, baseType: !2231, size: 256)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2232)
!2232 = !{!2233, !2234}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2231, file: !135, line: 1541, baseType: !1370, size: 192)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2231, file: !135, line: 1542, baseType: !2235, size: 64, offset: 192)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2237)
!2237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2238)
!2238 = !{!2239}
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2237, file: !135, line: 1538, baseType: !2240, size: 192)
!2240 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2241)
!2241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2242)
!2242 = !{!2243, !2244, !2245}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2241, file: !135, line: 1537, baseType: !7, size: 32)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2241, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2241, file: !135, line: 1537, baseType: !2246, size: 128, offset: 64)
!2246 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2247, size: 128, elements: !1229)
!2247 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2248)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2249)
!2249 = !{!2250, !2251}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2248, file: !135, line: 1533, baseType: !1332, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2248, file: !135, line: 1534, baseType: !1332, size: 64, offset: 64)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1334, file: !135, line: 3403, baseType: !2253, size: 512)
!2253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2254)
!2254 = !{!2255, !2256, !2257, !2258, !2264, !2265, !2266}
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2253, file: !135, line: 1939, baseType: !1370, size: 192)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2253, file: !135, line: 1940, baseType: !1453, size: 32, offset: 192)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2253, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2253, file: !135, line: 1946, baseType: !2259, size: 32, offset: 256)
!2259 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2260)
!2260 = !{!2261, !2262, !2263}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2259, file: !135, line: 1943, baseType: !363, size: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2259, file: !135, line: 1944, baseType: !370, size: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2259, file: !135, line: 1945, baseType: !134, size: 32)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2253, file: !135, line: 1950, baseType: !1626, size: 64, offset: 320)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2253, file: !135, line: 1951, baseType: !1626, size: 64, offset: 384)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2253, file: !135, line: 1953, baseType: !1691, size: 64, offset: 448)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1334, file: !135, line: 3404, baseType: !2268, size: 1664)
!2268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2269)
!2269 = !{!2270, !2271}
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2268, file: !135, line: 3338, baseType: !1370, size: 192)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2268, file: !135, line: 3341, baseType: !2272, size: 1472, offset: 192)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2273, line: 410, size: 1472, elements: !2274)
!2273 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2274 = !{!2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2272, file: !2273, line: 412, baseType: !1189, size: 32)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2272, file: !2273, line: 413, baseType: !1189, size: 32, offset: 32)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2272, file: !2273, line: 414, baseType: !1189, size: 32, offset: 64)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2272, file: !2273, line: 415, baseType: !1189, size: 32, offset: 96)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2272, file: !2273, line: 416, baseType: !1189, size: 32, offset: 128)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2272, file: !2273, line: 417, baseType: !1189, size: 32, offset: 160)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2272, file: !2273, line: 418, baseType: !1445, size: 8, offset: 192)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2272, file: !2273, line: 419, baseType: !1445, size: 8, offset: 200)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2272, file: !2273, line: 420, baseType: !2284, size: 8, offset: 208)
!2284 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2272, file: !2273, line: 421, baseType: !2284, size: 8, offset: 216)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2272, file: !2273, line: 422, baseType: !2284, size: 8, offset: 224)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2272, file: !2273, line: 423, baseType: !2284, size: 8, offset: 232)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2272, file: !2273, line: 424, baseType: !2284, size: 8, offset: 240)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2272, file: !2273, line: 425, baseType: !2284, size: 8, offset: 248)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2272, file: !2273, line: 426, baseType: !2284, size: 8, offset: 256)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2272, file: !2273, line: 427, baseType: !2284, size: 8, offset: 264)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2272, file: !2273, line: 428, baseType: !2284, size: 8, offset: 272)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2272, file: !2273, line: 429, baseType: !2284, size: 8, offset: 280)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2272, file: !2273, line: 430, baseType: !2284, size: 8, offset: 288)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2272, file: !2273, line: 431, baseType: !2284, size: 8, offset: 296)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2272, file: !2273, line: 432, baseType: !2284, size: 8, offset: 304)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2272, file: !2273, line: 433, baseType: !2284, size: 8, offset: 312)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2272, file: !2273, line: 434, baseType: !2284, size: 8, offset: 320)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2272, file: !2273, line: 435, baseType: !2284, size: 8, offset: 328)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2272, file: !2273, line: 436, baseType: !2284, size: 8, offset: 336)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2272, file: !2273, line: 437, baseType: !2284, size: 8, offset: 344)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2272, file: !2273, line: 438, baseType: !2284, size: 8, offset: 352)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2272, file: !2273, line: 439, baseType: !2284, size: 8, offset: 360)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2272, file: !2273, line: 440, baseType: !2284, size: 8, offset: 368)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2272, file: !2273, line: 441, baseType: !2284, size: 8, offset: 376)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2272, file: !2273, line: 442, baseType: !2284, size: 8, offset: 384)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2272, file: !2273, line: 443, baseType: !2284, size: 8, offset: 392)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2272, file: !2273, line: 444, baseType: !2284, size: 8, offset: 400)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2272, file: !2273, line: 445, baseType: !2284, size: 8, offset: 408)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2272, file: !2273, line: 446, baseType: !2284, size: 8, offset: 416)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2272, file: !2273, line: 447, baseType: !2284, size: 8, offset: 424)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2272, file: !2273, line: 448, baseType: !2284, size: 8, offset: 432)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2272, file: !2273, line: 449, baseType: !2284, size: 8, offset: 440)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2272, file: !2273, line: 450, baseType: !2284, size: 8, offset: 448)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2272, file: !2273, line: 451, baseType: !2284, size: 8, offset: 456)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2272, file: !2273, line: 452, baseType: !2284, size: 8, offset: 464)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2272, file: !2273, line: 453, baseType: !2284, size: 8, offset: 472)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2272, file: !2273, line: 454, baseType: !2284, size: 8, offset: 480)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2272, file: !2273, line: 455, baseType: !2284, size: 8, offset: 488)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2272, file: !2273, line: 456, baseType: !2284, size: 8, offset: 496)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2272, file: !2273, line: 457, baseType: !2284, size: 8, offset: 504)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2272, file: !2273, line: 458, baseType: !2284, size: 8, offset: 512)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2272, file: !2273, line: 459, baseType: !2284, size: 8, offset: 520)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2272, file: !2273, line: 460, baseType: !2284, size: 8, offset: 528)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2272, file: !2273, line: 461, baseType: !2284, size: 8, offset: 536)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2272, file: !2273, line: 462, baseType: !2284, size: 8, offset: 544)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2272, file: !2273, line: 463, baseType: !2284, size: 8, offset: 552)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2272, file: !2273, line: 464, baseType: !2284, size: 8, offset: 560)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2272, file: !2273, line: 465, baseType: !2284, size: 8, offset: 568)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2272, file: !2273, line: 466, baseType: !2284, size: 8, offset: 576)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2272, file: !2273, line: 467, baseType: !2284, size: 8, offset: 584)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2272, file: !2273, line: 468, baseType: !2284, size: 8, offset: 592)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2272, file: !2273, line: 469, baseType: !2284, size: 8, offset: 600)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2272, file: !2273, line: 470, baseType: !2284, size: 8, offset: 608)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2272, file: !2273, line: 471, baseType: !2284, size: 8, offset: 616)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2272, file: !2273, line: 472, baseType: !2284, size: 8, offset: 624)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2272, file: !2273, line: 473, baseType: !2284, size: 8, offset: 632)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2272, file: !2273, line: 474, baseType: !2284, size: 8, offset: 640)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2272, file: !2273, line: 475, baseType: !2284, size: 8, offset: 648)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2272, file: !2273, line: 476, baseType: !2284, size: 8, offset: 656)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2272, file: !2273, line: 477, baseType: !2284, size: 8, offset: 664)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2272, file: !2273, line: 478, baseType: !2284, size: 8, offset: 672)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2272, file: !2273, line: 479, baseType: !2284, size: 8, offset: 680)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2272, file: !2273, line: 480, baseType: !2284, size: 8, offset: 688)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2272, file: !2273, line: 481, baseType: !2284, size: 8, offset: 696)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2272, file: !2273, line: 482, baseType: !2284, size: 8, offset: 704)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2272, file: !2273, line: 483, baseType: !2284, size: 8, offset: 712)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2272, file: !2273, line: 484, baseType: !2284, size: 8, offset: 720)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2272, file: !2273, line: 485, baseType: !2284, size: 8, offset: 728)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2272, file: !2273, line: 486, baseType: !2284, size: 8, offset: 736)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2272, file: !2273, line: 487, baseType: !2284, size: 8, offset: 744)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2272, file: !2273, line: 488, baseType: !2284, size: 8, offset: 752)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2272, file: !2273, line: 489, baseType: !2284, size: 8, offset: 760)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2272, file: !2273, line: 490, baseType: !2284, size: 8, offset: 768)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2272, file: !2273, line: 491, baseType: !2284, size: 8, offset: 776)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2272, file: !2273, line: 492, baseType: !2284, size: 8, offset: 784)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2272, file: !2273, line: 493, baseType: !2284, size: 8, offset: 792)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2272, file: !2273, line: 494, baseType: !2284, size: 8, offset: 800)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2272, file: !2273, line: 495, baseType: !2284, size: 8, offset: 808)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2272, file: !2273, line: 496, baseType: !2284, size: 8, offset: 816)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2272, file: !2273, line: 497, baseType: !2284, size: 8, offset: 824)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2272, file: !2273, line: 498, baseType: !2284, size: 8, offset: 832)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2272, file: !2273, line: 499, baseType: !2284, size: 8, offset: 840)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2272, file: !2273, line: 500, baseType: !2284, size: 8, offset: 848)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2272, file: !2273, line: 501, baseType: !2284, size: 8, offset: 856)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2272, file: !2273, line: 502, baseType: !2284, size: 8, offset: 864)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2272, file: !2273, line: 503, baseType: !2284, size: 8, offset: 872)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2272, file: !2273, line: 504, baseType: !2284, size: 8, offset: 880)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2272, file: !2273, line: 505, baseType: !2284, size: 8, offset: 888)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2272, file: !2273, line: 506, baseType: !2284, size: 8, offset: 896)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2272, file: !2273, line: 507, baseType: !2284, size: 8, offset: 904)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2272, file: !2273, line: 508, baseType: !2284, size: 8, offset: 912)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2272, file: !2273, line: 509, baseType: !2284, size: 8, offset: 920)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2272, file: !2273, line: 510, baseType: !2284, size: 8, offset: 928)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2272, file: !2273, line: 511, baseType: !2284, size: 8, offset: 936)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2272, file: !2273, line: 512, baseType: !2284, size: 8, offset: 944)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2272, file: !2273, line: 513, baseType: !2284, size: 8, offset: 952)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2272, file: !2273, line: 514, baseType: !2284, size: 8, offset: 960)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2272, file: !2273, line: 515, baseType: !2284, size: 8, offset: 968)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2272, file: !2273, line: 516, baseType: !2284, size: 8, offset: 976)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2272, file: !2273, line: 517, baseType: !2284, size: 8, offset: 984)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2272, file: !2273, line: 518, baseType: !2284, size: 8, offset: 992)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2272, file: !2273, line: 519, baseType: !2284, size: 8, offset: 1000)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2272, file: !2273, line: 520, baseType: !2284, size: 8, offset: 1008)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2272, file: !2273, line: 521, baseType: !2284, size: 8, offset: 1016)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2272, file: !2273, line: 522, baseType: !2284, size: 8, offset: 1024)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2272, file: !2273, line: 523, baseType: !2284, size: 8, offset: 1032)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2272, file: !2273, line: 524, baseType: !2284, size: 8, offset: 1040)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2272, file: !2273, line: 525, baseType: !2284, size: 8, offset: 1048)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2272, file: !2273, line: 526, baseType: !2284, size: 8, offset: 1056)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2272, file: !2273, line: 527, baseType: !2284, size: 8, offset: 1064)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2272, file: !2273, line: 528, baseType: !2284, size: 8, offset: 1072)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2272, file: !2273, line: 529, baseType: !2284, size: 8, offset: 1080)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2272, file: !2273, line: 530, baseType: !2284, size: 8, offset: 1088)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2272, file: !2273, line: 531, baseType: !2284, size: 8, offset: 1096)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2272, file: !2273, line: 532, baseType: !2284, size: 8, offset: 1104)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2272, file: !2273, line: 533, baseType: !2284, size: 8, offset: 1112)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2272, file: !2273, line: 534, baseType: !2284, size: 8, offset: 1120)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2272, file: !2273, line: 535, baseType: !2284, size: 8, offset: 1128)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2272, file: !2273, line: 536, baseType: !2284, size: 8, offset: 1136)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2272, file: !2273, line: 537, baseType: !2284, size: 8, offset: 1144)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2272, file: !2273, line: 538, baseType: !2284, size: 8, offset: 1152)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2272, file: !2273, line: 539, baseType: !2284, size: 8, offset: 1160)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2272, file: !2273, line: 540, baseType: !2284, size: 8, offset: 1168)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2272, file: !2273, line: 541, baseType: !2284, size: 8, offset: 1176)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2272, file: !2273, line: 542, baseType: !2284, size: 8, offset: 1184)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2272, file: !2273, line: 543, baseType: !2284, size: 8, offset: 1192)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2272, file: !2273, line: 544, baseType: !2284, size: 8, offset: 1200)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2272, file: !2273, line: 545, baseType: !2284, size: 8, offset: 1208)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2272, file: !2273, line: 546, baseType: !2284, size: 8, offset: 1216)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2272, file: !2273, line: 547, baseType: !2284, size: 8, offset: 1224)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2272, file: !2273, line: 548, baseType: !2284, size: 8, offset: 1232)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2272, file: !2273, line: 549, baseType: !2284, size: 8, offset: 1240)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2272, file: !2273, line: 550, baseType: !2284, size: 8, offset: 1248)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2272, file: !2273, line: 551, baseType: !2284, size: 8, offset: 1256)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2272, file: !2273, line: 552, baseType: !2284, size: 8, offset: 1264)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2272, file: !2273, line: 553, baseType: !2284, size: 8, offset: 1272)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2272, file: !2273, line: 554, baseType: !2284, size: 8, offset: 1280)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2272, file: !2273, line: 555, baseType: !2284, size: 8, offset: 1288)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2272, file: !2273, line: 556, baseType: !2284, size: 8, offset: 1296)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2272, file: !2273, line: 557, baseType: !2284, size: 8, offset: 1304)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2272, file: !2273, line: 558, baseType: !2284, size: 8, offset: 1312)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2272, file: !2273, line: 559, baseType: !2284, size: 8, offset: 1320)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2272, file: !2273, line: 560, baseType: !2284, size: 8, offset: 1328)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2272, file: !2273, line: 561, baseType: !2284, size: 8, offset: 1336)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2272, file: !2273, line: 562, baseType: !2284, size: 8, offset: 1344)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2272, file: !2273, line: 563, baseType: !2284, size: 8, offset: 1352)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2272, file: !2273, line: 564, baseType: !2284, size: 8, offset: 1360)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2272, file: !2273, line: 565, baseType: !2284, size: 8, offset: 1368)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2272, file: !2273, line: 566, baseType: !2284, size: 8, offset: 1376)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2272, file: !2273, line: 567, baseType: !2284, size: 8, offset: 1384)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2272, file: !2273, line: 568, baseType: !2284, size: 8, offset: 1392)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2272, file: !2273, line: 569, baseType: !2284, size: 8, offset: 1400)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2272, file: !2273, line: 570, baseType: !2284, size: 8, offset: 1408)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2272, file: !2273, line: 571, baseType: !2284, size: 8, offset: 1416)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2272, file: !2273, line: 572, baseType: !2284, size: 8, offset: 1424)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2272, file: !2273, line: 573, baseType: !2284, size: 8, offset: 1432)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2272, file: !2273, line: 574, baseType: !2284, size: 8, offset: 1440)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1334, file: !135, line: 3405, baseType: !2440, size: 384)
!2440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2441)
!2441 = !{!2442, !2443}
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2440, file: !135, line: 3353, baseType: !1370, size: 192)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2440, file: !135, line: 3356, baseType: !2444, size: 192, offset: 192)
!2444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2273, line: 578, size: 192, elements: !2445)
!2445 = !{!2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2444, file: !2273, line: 580, baseType: !1189, size: 32)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2444, file: !2273, line: 581, baseType: !1189, size: 32, offset: 32)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2444, file: !2273, line: 582, baseType: !1189, size: 32, offset: 64)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2444, file: !2273, line: 583, baseType: !1189, size: 32, offset: 96)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2444, file: !2273, line: 584, baseType: !1445, size: 8, offset: 128)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2444, file: !2273, line: 585, baseType: !1445, size: 8, offset: 136)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2444, file: !2273, line: 586, baseType: !1445, size: 8, offset: 144)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2444, file: !2273, line: 587, baseType: !1445, size: 8, offset: 152)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2444, file: !2273, line: 588, baseType: !1445, size: 8, offset: 160)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2444, file: !2273, line: 589, baseType: !1445, size: 8, offset: 168)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2444, file: !2273, line: 590, baseType: !1445, size: 8, offset: 176)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1212, file: !562, line: 178, baseType: !1600, size: 64)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1212, file: !562, line: 179, baseType: !2459, size: 64)
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2460, size: 64)
!2460 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !562, line: 150, baseType: !2461)
!2461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !562, line: 142, size: 320, elements: !2462)
!2462 = !{!2463, !2464, !2465, !2466, !2467, !2468}
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2461, file: !562, line: 144, baseType: !1332, size: 64)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2461, file: !562, line: 145, baseType: !1191, size: 64, offset: 64)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2461, file: !562, line: 146, baseType: !1191, size: 64, offset: 128)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2461, file: !562, line: 147, baseType: !2132, size: 32, offset: 192)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2461, file: !562, line: 148, baseType: !7, size: 32, offset: 224)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2461, file: !562, line: 149, baseType: !1445, size: 8, offset: 256)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1212, file: !562, line: 180, baseType: !2470, size: 64)
!2470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!2471 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !562, line: 162, baseType: !2472)
!2472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !562, line: 159, size: 128, elements: !2473)
!2473 = !{!2474, !2475}
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2472, file: !562, line: 160, baseType: !1332, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2472, file: !562, line: 161, baseType: !1301, size: 64, offset: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1212, file: !562, line: 181, baseType: !2477, size: 64)
!2477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2478 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !562, line: 181, flags: DIFlagFwdDecl)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1207, file: !562, line: 317, baseType: !2480, size: 64)
!2480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1301, size: 64, elements: !1229)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1207, file: !562, line: 318, baseType: !2482, size: 320)
!2482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !562, line: 188, size: 320, elements: !2483)
!2483 = !{!2484, !2486, !2541}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2482, file: !562, line: 190, baseType: !2485, size: 192)
!2485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1211, size: 192, elements: !1403)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2482, file: !562, line: 193, baseType: !2487, size: 64, offset: 192)
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !562, line: 206, size: 320, elements: !2489)
!2489 = !{!2490, !2526, !2527, !2528, !2540}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2488, file: !562, line: 208, baseType: !2491, size: 64)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1192, line: 62, baseType: !2493)
!2493 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2494, line: 538, size: 256, elements: !2495)
!2494 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2495 = !{!2496, !2500, !2506, !2517}
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2493, file: !2494, line: 539, baseType: !2497, size: 32)
!2497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2494, line: 482, size: 32, elements: !2498)
!2498 = !{!2499}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2497, file: !2494, line: 484, baseType: !7, size: 32)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2493, file: !2494, line: 540, baseType: !2501, size: 192)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2494, line: 488, size: 192, elements: !2502)
!2502 = !{!2503, !2504, !2505}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2501, file: !2494, line: 489, baseType: !2497, size: 32)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2501, file: !2494, line: 492, baseType: !1217, size: 64, offset: 64)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2501, file: !2494, line: 496, baseType: !1332, size: 64, offset: 128)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2493, file: !2494, line: 541, baseType: !2507, size: 256)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2494, line: 504, size: 256, elements: !2508)
!2508 = !{!2509, !2510, !2515, !2516}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2507, file: !2494, line: 505, baseType: !2497, size: 32)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2507, file: !2494, line: 509, baseType: !2511, size: 64, offset: 64)
!2511 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2494, line: 501, baseType: !2512)
!2512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2513, size: 64)
!2513 = !DISubroutineType(types: !2514)
!2514 = !{null, !1927}
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2507, file: !2494, line: 510, baseType: !1927, size: 64, offset: 128)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2507, file: !2494, line: 513, baseType: !2491, size: 64, offset: 192)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2493, file: !2494, line: 542, baseType: !2518, size: 128)
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2494, line: 530, size: 128, elements: !2519)
!2519 = !{!2520, !2521}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2518, file: !2494, line: 531, baseType: !2497, size: 32)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2518, file: !2494, line: 534, baseType: !2522, size: 64, offset: 64)
!2522 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2494, line: 525, baseType: !2523)
!2523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2524, size: 64)
!2524 = !DISubroutineType(types: !2525)
!2525 = !{!1445, !1332, !1217, !1184, !1184}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2488, file: !562, line: 211, baseType: !7, size: 32, offset: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2488, file: !562, line: 214, baseType: !1301, size: 64, offset: 128)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2488, file: !562, line: 224, baseType: !2529, size: 64, offset: 192)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !562, line: 202, baseType: !2531)
!2531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !562, line: 202, size: 128, elements: !2532)
!2532 = !{!2533}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2531, file: !562, line: 202, baseType: !2534, size: 128)
!2534 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !562, line: 200, baseType: !2535)
!2535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !562, line: 200, size: 128, elements: !2536)
!2536 = !{!2537, !2538, !2539}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2535, file: !562, line: 200, baseType: !7, size: 32)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2535, file: !562, line: 200, baseType: !7, size: 32, offset: 32)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2535, file: !562, line: 200, baseType: !1228, size: 64, offset: 64)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2488, file: !562, line: 234, baseType: !2529, size: 64, offset: 256)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2482, file: !562, line: 197, baseType: !1301, size: 64, offset: 256)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1207, file: !562, line: 319, baseType: !1392, size: 256)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1207, file: !562, line: 320, baseType: !1411, size: 192)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1334)
!2546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2547, size: 64)
!2547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alias_set_entry_d", file: !3, line: 134, size: 128, elements: !2548)
!2548 = !{!2549, !2550, !2551}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2547, file: !3, line: 136, baseType: !2132, size: 32)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "has_zero_child", scope: !2547, file: !3, line: 140, baseType: !1189, size: 32, offset: 32)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !2547, file: !3, line: 149, baseType: !2552, size: 64, offset: 64)
!2552 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree", file: !1182, line: 128, baseType: !2553)
!2553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2554, size: 64)
!2554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_s", file: !1182, line: 109, size: 448, elements: !2555)
!2555 = !{!2556, !2566, !2571, !2576, !2581, !2586, !2588}
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !2554, file: !1182, line: 111, baseType: !2557, size: 64)
!2557 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_node", file: !1182, line: 66, baseType: !2558)
!2558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2559, size: 64)
!2559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_node_s", file: !1182, line: 96, size: 256, elements: !2560)
!2560 = !{!2561, !2562, !2564, !2565}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !2559, file: !1182, line: 98, baseType: !1181, size: 64)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2559, file: !1182, line: 101, baseType: !2563, size: 64, offset: 64)
!2563 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_value", file: !1182, line: 63, baseType: !1183)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !2559, file: !1182, line: 104, baseType: !2557, size: 64, offset: 128)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !2559, file: !1182, line: 105, baseType: !2557, size: 64, offset: 192)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "comp", scope: !2554, file: !1182, line: 114, baseType: !2567, size: 64, offset: 64)
!2567 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_compare_fn", file: !1182, line: 70, baseType: !2568)
!2568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2569, size: 64)
!2569 = !DISubroutineType(types: !2570)
!2570 = !{!1189, !1181, !1181}
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "delete_key", scope: !2554, file: !1182, line: 117, baseType: !2572, size: 64, offset: 128)
!2572 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_key_fn", file: !1182, line: 74, baseType: !2573)
!2573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2574, size: 64)
!2574 = !DISubroutineType(types: !2575)
!2575 = !{null, !1181}
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "delete_value", scope: !2554, file: !1182, line: 120, baseType: !2577, size: 64, offset: 192)
!2577 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_value_fn", file: !1182, line: 78, baseType: !2578)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = !DISubroutineType(types: !2580)
!2580 = !{null, !2563}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "allocate", scope: !2554, file: !1182, line: 123, baseType: !2582, size: 64, offset: 256)
!2582 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_allocate_fn", file: !1182, line: 87, baseType: !2583)
!2583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2584, size: 64)
!2584 = !DISubroutineType(types: !2585)
!2585 = !{!1322, !1189, !1322}
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "deallocate", scope: !2554, file: !1182, line: 124, baseType: !2587, size: 64, offset: 320)
!2587 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_deallocate_fn", file: !1182, line: 93, baseType: !1961)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_data", scope: !2554, file: !1182, line: 125, baseType: !1322, size: 64, offset: 384)
!2589 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2591, size: 64)
!2591 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1194)
!2592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1445, size: 64)
!2593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2594, size: 64)
!2594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_set_entry_gc", file: !3, line: 250, size: 128, elements: !2595)
!2595 = !{!2596}
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2594, file: !3, line: 250, baseType: !2597, size: 128)
!2597 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_set_entry_base", file: !3, line: 249, baseType: !2598)
!2598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_set_entry_base", file: !3, line: 249, size: 128, elements: !2599)
!2599 = !{!2600, !2601, !2602}
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2598, file: !3, line: 249, baseType: !7, size: 32)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2598, file: !3, line: 249, baseType: !7, size: 32, offset: 32)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2598, file: !3, line: 249, baseType: !2603, size: 64, offset: 64)
!2603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2604, size: 64, elements: !1229)
!2604 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_entry", file: !3, line: 151, baseType: !2546)
!2605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2606, size: 64)
!2606 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_set_entry_gc", file: !3, line: 250, baseType: !2594)
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !1192, line: 51, baseType: !2590)
!2608 = !{!2609, !2625, !2628, !2631, !2633, !2635, !2637, !2642, !2644, !2646, !2648, !0, !2650, !2652, !2654, !2656, !2658}
!2609 = !DIGlobalVariableExpression(var: !2610, expr: !DIExpression())
!2610 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_alias_h", scope: !2, file: !2611, line: 148, type: !2612, isLocal: false, isDefinition: true)
!2611 = !DIFile(filename: "./gt-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2612 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2613, size: 1600, elements: !2623)
!2613 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2614)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2615, line: 69, size: 320, elements: !2616)
!2615 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2616 = !{!2617, !2618, !2619, !2620, !2622}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2614, file: !2615, line: 70, baseType: !1322, size: 64)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2614, file: !2615, line: 71, baseType: !1783, size: 64, offset: 64)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2614, file: !2615, line: 72, baseType: !1783, size: 64, offset: 128)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2614, file: !2615, line: 73, baseType: !2621, size: 64, offset: 192)
!2621 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2615, line: 65, baseType: !1936)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2614, file: !2615, line: 74, baseType: !2621, size: 64, offset: 256)
!2623 = !{!2624}
!2624 = !DISubrange(count: 5)
!2625 = !DIGlobalVariableExpression(var: !2626, expr: !DIExpression())
!2626 = distinct !DIGlobalVariable(name: "gt_ggc_rd_gt_alias_h", scope: !2, file: !2611, line: 180, type: !2627, isLocal: false, isDefinition: true)
!2627 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2613, size: 640, elements: !1285)
!2628 = !DIGlobalVariableExpression(var: !2629, expr: !DIExpression())
!2629 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_alias_h", scope: !2, file: !2611, line: 185, type: !2630, isLocal: false, isDefinition: true)
!2630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2613, size: 1280, elements: !1311)
!2631 = !DIGlobalVariableExpression(var: !2632, expr: !DIExpression())
!2632 = distinct !DIGlobalVariable(name: "reg_base_value", scope: !2, file: !3, line: 207, type: !2529, isLocal: true, isDefinition: true)
!2633 = !DIGlobalVariableExpression(var: !2634, expr: !DIExpression())
!2634 = distinct !DIGlobalVariable(name: "new_reg_base_value", scope: !2, file: !3, line: 208, type: !1190, isLocal: true, isDefinition: true)
!2635 = !DIGlobalVariableExpression(var: !2636, expr: !DIExpression())
!2636 = distinct !DIGlobalVariable(name: "old_reg_base_value", scope: !2, file: !3, line: 213, type: !2529, isLocal: true, isDefinition: true)
!2637 = !DIGlobalVariableExpression(var: !2638, expr: !DIExpression())
!2638 = distinct !DIGlobalVariable(name: "static_reg_base_value", scope: !2, file: !3, line: 217, type: !2639, isLocal: true, isDefinition: true)
!2639 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1191, size: 3392, elements: !2640)
!2640 = !{!2641}
!2641 = !DISubrange(count: 53)
!2642 = !DIGlobalVariableExpression(var: !2643, expr: !DIExpression())
!2643 = distinct !DIGlobalVariable(name: "reg_known_value", scope: !2, file: !3, line: 226, type: !1190, isLocal: true, isDefinition: true)
!2644 = !DIGlobalVariableExpression(var: !2645, expr: !DIExpression())
!2645 = distinct !DIGlobalVariable(name: "reg_known_value_size", scope: !2, file: !3, line: 229, type: !7, isLocal: true, isDefinition: true)
!2646 = !DIGlobalVariableExpression(var: !2647, expr: !DIExpression())
!2647 = distinct !DIGlobalVariable(name: "reg_known_equiv_p", scope: !2, file: !3, line: 243, type: !2592, isLocal: true, isDefinition: true)
!2648 = !DIGlobalVariableExpression(var: !2649, expr: !DIExpression())
!2649 = distinct !DIGlobalVariable(name: "copying_arguments", scope: !2, file: !3, line: 247, type: !1445, isLocal: true, isDefinition: true)
!2650 = !DIGlobalVariableExpression(var: !2651, expr: !DIExpression())
!2651 = distinct !DIGlobalVariable(name: "reg_seen", scope: !2, file: !3, line: 1113, type: !1307, isLocal: true, isDefinition: true)
!2652 = !DIGlobalVariableExpression(var: !2653, expr: !DIExpression())
!2653 = distinct !DIGlobalVariable(name: "unique_id", scope: !2, file: !3, line: 1117, type: !1189, isLocal: true, isDefinition: true)
!2654 = !DIGlobalVariableExpression(var: !2655, expr: !DIExpression())
!2655 = distinct !DIGlobalVariable(name: "memory_modified", scope: !2, file: !3, line: 2579, type: !1445, isLocal: true, isDefinition: true)
!2656 = !DIGlobalVariableExpression(var: !2657, expr: !DIExpression())
!2657 = distinct !DIGlobalVariable(name: "frame_set", scope: !2, file: !3, line: 922, type: !2132, isLocal: true, isDefinition: true)
!2658 = !DIGlobalVariableExpression(var: !2659, expr: !DIExpression())
!2659 = distinct !DIGlobalVariable(name: "varargs_set", scope: !2, file: !3, line: 900, type: !2132, isLocal: true, isDefinition: true)
!2660 = !{i32 7, !"Dwarf Version", i32 4}
!2661 = !{i32 2, !"Debug Info Version", i32 3}
!2662 = !{i32 1, !"wchar_size", i32 4}
!2663 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2664 = distinct !DISubprogram(name: "alias_set_subset_of", scope: !3, file: !3, line: 398, type: !2665, scopeLine: 399, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2665 = !DISubroutineType(types: !2666)
!2666 = !{!1445, !2132, !2132}
!2667 = !{}
!2668 = !DILocalVariable(name: "set1", arg: 1, scope: !2664, file: !3, line: 398, type: !2132)
!2669 = !DILocation(line: 398, column: 37, scope: !2664)
!2670 = !DILocalVariable(name: "set2", arg: 2, scope: !2664, file: !3, line: 398, type: !2132)
!2671 = !DILocation(line: 398, column: 58, scope: !2664)
!2672 = !DILocalVariable(name: "ase", scope: !2664, file: !3, line: 400, type: !2604)
!2673 = !DILocation(line: 400, column: 19, scope: !2664)
!2674 = !DILocation(line: 403, column: 7, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 403, column: 7)
!2676 = !DILocation(line: 403, column: 12, scope: !2675)
!2677 = !DILocation(line: 403, column: 7, scope: !2664)
!2678 = !DILocation(line: 404, column: 5, scope: !2675)
!2679 = !DILocation(line: 407, column: 30, scope: !2664)
!2680 = !DILocation(line: 407, column: 9, scope: !2664)
!2681 = !DILocation(line: 407, column: 7, scope: !2664)
!2682 = !DILocation(line: 408, column: 7, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 408, column: 7)
!2684 = !DILocation(line: 408, column: 11, scope: !2683)
!2685 = !DILocation(line: 409, column: 7, scope: !2683)
!2686 = !DILocation(line: 409, column: 12, scope: !2683)
!2687 = !DILocation(line: 409, column: 17, scope: !2683)
!2688 = !DILocation(line: 409, column: 32, scope: !2683)
!2689 = !DILocation(line: 409, column: 35, scope: !2683)
!2690 = !DILocation(line: 409, column: 40, scope: !2683)
!2691 = !DILocation(line: 410, column: 4, scope: !2683)
!2692 = !DILocation(line: 410, column: 26, scope: !2683)
!2693 = !DILocation(line: 410, column: 31, scope: !2683)
!2694 = !DILocation(line: 411, column: 29, scope: !2683)
!2695 = !DILocation(line: 411, column: 12, scope: !2683)
!2696 = !DILocation(line: 410, column: 7, scope: !2683)
!2697 = !DILocation(line: 408, column: 7, scope: !2664)
!2698 = !DILocation(line: 412, column: 5, scope: !2683)
!2699 = !DILocation(line: 413, column: 3, scope: !2664)
!2700 = !DILocation(line: 414, column: 1, scope: !2664)
!2701 = distinct !DISubprogram(name: "get_alias_set_entry", scope: !3, file: !3, line: 360, type: !2702, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2702 = !DISubroutineType(types: !2703)
!2703 = !{!2604, !2132}
!2704 = !DILocalVariable(name: "alias_set", arg: 1, scope: !2701, file: !3, line: 360, type: !2132)
!2705 = !DILocation(line: 360, column: 37, scope: !2701)
!2706 = !DILocation(line: 362, column: 10, scope: !2701)
!2707 = !DILocation(line: 362, column: 3, scope: !2701)
!2708 = distinct !DISubprogram(name: "alias_sets_conflict_p", scope: !3, file: !3, line: 419, type: !2709, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2709 = !DISubroutineType(types: !2710)
!2710 = !{!1189, !2132, !2132}
!2711 = !DILocalVariable(name: "set1", arg: 1, scope: !2708, file: !3, line: 419, type: !2132)
!2712 = !DILocation(line: 419, column: 39, scope: !2708)
!2713 = !DILocalVariable(name: "set2", arg: 2, scope: !2708, file: !3, line: 419, type: !2132)
!2714 = !DILocation(line: 419, column: 60, scope: !2708)
!2715 = !DILocalVariable(name: "ase", scope: !2708, file: !3, line: 421, type: !2604)
!2716 = !DILocation(line: 421, column: 19, scope: !2708)
!2717 = !DILocation(line: 424, column: 35, scope: !2718)
!2718 = distinct !DILexicalBlock(scope: !2708, file: !3, line: 424, column: 7)
!2719 = !DILocation(line: 424, column: 41, scope: !2718)
!2720 = !DILocation(line: 424, column: 7, scope: !2718)
!2721 = !DILocation(line: 424, column: 7, scope: !2708)
!2722 = !DILocation(line: 425, column: 5, scope: !2718)
!2723 = !DILocation(line: 428, column: 30, scope: !2708)
!2724 = !DILocation(line: 428, column: 9, scope: !2708)
!2725 = !DILocation(line: 428, column: 7, scope: !2708)
!2726 = !DILocation(line: 429, column: 7, scope: !2727)
!2727 = distinct !DILexicalBlock(scope: !2708, file: !3, line: 429, column: 7)
!2728 = !DILocation(line: 429, column: 11, scope: !2727)
!2729 = !DILocation(line: 430, column: 7, scope: !2727)
!2730 = !DILocation(line: 430, column: 11, scope: !2727)
!2731 = !DILocation(line: 430, column: 16, scope: !2727)
!2732 = !DILocation(line: 431, column: 4, scope: !2727)
!2733 = !DILocation(line: 431, column: 26, scope: !2727)
!2734 = !DILocation(line: 431, column: 31, scope: !2727)
!2735 = !DILocation(line: 432, column: 22, scope: !2727)
!2736 = !DILocation(line: 432, column: 5, scope: !2727)
!2737 = !DILocation(line: 431, column: 7, scope: !2727)
!2738 = !DILocation(line: 429, column: 7, scope: !2708)
!2739 = !DILocation(line: 433, column: 5, scope: !2727)
!2740 = !DILocation(line: 436, column: 30, scope: !2708)
!2741 = !DILocation(line: 436, column: 9, scope: !2708)
!2742 = !DILocation(line: 436, column: 7, scope: !2708)
!2743 = !DILocation(line: 437, column: 7, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2708, file: !3, line: 437, column: 7)
!2745 = !DILocation(line: 437, column: 11, scope: !2744)
!2746 = !DILocation(line: 438, column: 7, scope: !2744)
!2747 = !DILocation(line: 438, column: 11, scope: !2744)
!2748 = !DILocation(line: 438, column: 16, scope: !2744)
!2749 = !DILocation(line: 439, column: 4, scope: !2744)
!2750 = !DILocation(line: 439, column: 26, scope: !2744)
!2751 = !DILocation(line: 439, column: 31, scope: !2744)
!2752 = !DILocation(line: 440, column: 22, scope: !2744)
!2753 = !DILocation(line: 440, column: 5, scope: !2744)
!2754 = !DILocation(line: 439, column: 7, scope: !2744)
!2755 = !DILocation(line: 437, column: 7, scope: !2708)
!2756 = !DILocation(line: 441, column: 5, scope: !2744)
!2757 = !DILocation(line: 445, column: 3, scope: !2708)
!2758 = !DILocation(line: 446, column: 1, scope: !2708)
!2759 = distinct !DISubprogram(name: "alias_sets_must_conflict_p", scope: !3, file: !3, line: 488, type: !2709, scopeLine: 489, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2760 = !DILocalVariable(name: "set1", arg: 1, scope: !2759, file: !3, line: 488, type: !2132)
!2761 = !DILocation(line: 488, column: 44, scope: !2759)
!2762 = !DILocalVariable(name: "set2", arg: 2, scope: !2759, file: !3, line: 488, type: !2132)
!2763 = !DILocation(line: 488, column: 65, scope: !2759)
!2764 = !DILocation(line: 490, column: 7, scope: !2765)
!2765 = distinct !DILexicalBlock(scope: !2759, file: !3, line: 490, column: 7)
!2766 = !DILocation(line: 490, column: 12, scope: !2765)
!2767 = !DILocation(line: 490, column: 17, scope: !2765)
!2768 = !DILocation(line: 490, column: 20, scope: !2765)
!2769 = !DILocation(line: 490, column: 25, scope: !2765)
!2770 = !DILocation(line: 490, column: 30, scope: !2765)
!2771 = !DILocation(line: 490, column: 33, scope: !2765)
!2772 = !DILocation(line: 490, column: 41, scope: !2765)
!2773 = !DILocation(line: 490, column: 38, scope: !2765)
!2774 = !DILocation(line: 490, column: 7, scope: !2759)
!2775 = !DILocation(line: 491, column: 5, scope: !2765)
!2776 = !DILocation(line: 493, column: 3, scope: !2759)
!2777 = !DILocation(line: 494, column: 1, scope: !2759)
!2778 = distinct !DISubprogram(name: "insn_alias_sets_conflict_p", scope: !3, file: !3, line: 478, type: !2779, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2779 = !DISubroutineType(types: !2780)
!2780 = !{!1445, !1191, !1191}
!2781 = !DILocalVariable(name: "insn1", arg: 1, scope: !2778, file: !3, line: 478, type: !1191)
!2782 = !DILocation(line: 478, column: 33, scope: !2778)
!2783 = !DILocalVariable(name: "insn2", arg: 2, scope: !2778, file: !3, line: 478, type: !1191)
!2784 = !DILocation(line: 478, column: 44, scope: !2778)
!2785 = !DILocation(line: 481, column: 26, scope: !2778)
!2786 = !DILocation(line: 482, column: 6, scope: !2778)
!2787 = !DILocation(line: 482, column: 5, scope: !2778)
!2788 = !DILocation(line: 481, column: 11, scope: !2778)
!2789 = !DILocation(line: 481, column: 3, scope: !2778)
!2790 = distinct !DISubprogram(name: "walk_mems_1", scope: !3, file: !3, line: 462, type: !2791, scopeLine: 463, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2791 = !DISubroutineType(types: !2792)
!2792 = !{!1189, !1190, !1190}
!2793 = !DILocalVariable(name: "x", arg: 1, scope: !2790, file: !3, line: 462, type: !1190)
!2794 = !DILocation(line: 462, column: 19, scope: !2790)
!2795 = !DILocalVariable(name: "pat", arg: 2, scope: !2790, file: !3, line: 462, type: !1190)
!2796 = !DILocation(line: 462, column: 27, scope: !2790)
!2797 = !DILocation(line: 464, column: 7, scope: !2798)
!2798 = distinct !DILexicalBlock(scope: !2790, file: !3, line: 464, column: 7)
!2799 = !DILocation(line: 464, column: 7, scope: !2790)
!2800 = !DILocation(line: 467, column: 25, scope: !2801)
!2801 = distinct !DILexicalBlock(scope: !2802, file: !3, line: 467, column: 11)
!2802 = distinct !DILexicalBlock(scope: !2798, file: !3, line: 465, column: 5)
!2803 = !DILocation(line: 467, column: 59, scope: !2801)
!2804 = !DILocation(line: 467, column: 58, scope: !2801)
!2805 = !DILocation(line: 467, column: 11, scope: !2801)
!2806 = !DILocation(line: 467, column: 11, scope: !2802)
!2807 = !DILocation(line: 469, column: 9, scope: !2801)
!2808 = !DILocation(line: 471, column: 7, scope: !2802)
!2809 = !DILocation(line: 473, column: 3, scope: !2790)
!2810 = !DILocation(line: 474, column: 1, scope: !2790)
!2811 = distinct !DISubprogram(name: "objects_must_conflict_p", scope: !3, file: !3, line: 502, type: !2812, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2812 = !DISubroutineType(types: !2813)
!2813 = !{!1189, !1332, !1332}
!2814 = !DILocalVariable(name: "t1", arg: 1, scope: !2811, file: !3, line: 502, type: !1332)
!2815 = !DILocation(line: 502, column: 31, scope: !2811)
!2816 = !DILocalVariable(name: "t2", arg: 2, scope: !2811, file: !3, line: 502, type: !1332)
!2817 = !DILocation(line: 502, column: 40, scope: !2811)
!2818 = !DILocalVariable(name: "set1", scope: !2811, file: !3, line: 504, type: !2132)
!2819 = !DILocation(line: 504, column: 18, scope: !2811)
!2820 = !DILocalVariable(name: "set2", scope: !2811, file: !3, line: 504, type: !2132)
!2821 = !DILocation(line: 504, column: 24, scope: !2811)
!2822 = !DILocation(line: 509, column: 7, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 509, column: 7)
!2824 = !DILocation(line: 509, column: 10, scope: !2823)
!2825 = !DILocation(line: 509, column: 15, scope: !2823)
!2826 = !DILocation(line: 509, column: 18, scope: !2823)
!2827 = !DILocation(line: 509, column: 21, scope: !2823)
!2828 = !DILocation(line: 509, column: 7, scope: !2811)
!2829 = !DILocation(line: 510, column: 5, scope: !2823)
!2830 = !DILocation(line: 513, column: 7, scope: !2831)
!2831 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 513, column: 7)
!2832 = !DILocation(line: 513, column: 13, scope: !2831)
!2833 = !DILocation(line: 513, column: 10, scope: !2831)
!2834 = !DILocation(line: 515, column: 7, scope: !2831)
!2835 = !DILocation(line: 515, column: 11, scope: !2831)
!2836 = !DILocation(line: 515, column: 14, scope: !2831)
!2837 = !DILocation(line: 515, column: 19, scope: !2831)
!2838 = !DILocation(line: 515, column: 22, scope: !2831)
!2839 = !DILocation(line: 515, column: 41, scope: !2831)
!2840 = !DILocation(line: 515, column: 44, scope: !2831)
!2841 = !DILocation(line: 515, column: 47, scope: !2831)
!2842 = !DILocation(line: 515, column: 52, scope: !2831)
!2843 = !DILocation(line: 515, column: 55, scope: !2831)
!2844 = !DILocation(line: 513, column: 7, scope: !2811)
!2845 = !DILocation(line: 516, column: 5, scope: !2831)
!2846 = !DILocation(line: 518, column: 10, scope: !2811)
!2847 = !DILocation(line: 518, column: 30, scope: !2811)
!2848 = !DILocation(line: 518, column: 15, scope: !2811)
!2849 = !DILocation(line: 518, column: 8, scope: !2811)
!2850 = !DILocation(line: 519, column: 10, scope: !2811)
!2851 = !DILocation(line: 519, column: 30, scope: !2811)
!2852 = !DILocation(line: 519, column: 15, scope: !2811)
!2853 = !DILocation(line: 519, column: 8, scope: !2811)
!2854 = !DILocation(line: 525, column: 38, scope: !2811)
!2855 = !DILocation(line: 525, column: 44, scope: !2811)
!2856 = !DILocation(line: 525, column: 10, scope: !2811)
!2857 = !DILocation(line: 525, column: 3, scope: !2811)
!2858 = !DILocation(line: 526, column: 1, scope: !2811)
!2859 = distinct !DISubprogram(name: "get_alias_set", scope: !3, file: !3, line: 624, type: !2860, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!2860 = !DISubroutineType(types: !2861)
!2861 = !{!2132, !1332}
!2862 = !DILocalVariable(name: "t", arg: 1, scope: !2859, file: !3, line: 624, type: !1332)
!2863 = !DILocation(line: 624, column: 21, scope: !2859)
!2864 = !DILocalVariable(name: "set", scope: !2859, file: !3, line: 626, type: !2132)
!2865 = !DILocation(line: 626, column: 18, scope: !2859)
!2866 = !DILocation(line: 631, column: 9, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 631, column: 7)
!2868 = !DILocation(line: 631, column: 30, scope: !2867)
!2869 = !DILocation(line: 631, column: 33, scope: !2867)
!2870 = !DILocation(line: 631, column: 38, scope: !2867)
!2871 = !DILocation(line: 631, column: 35, scope: !2867)
!2872 = !DILocation(line: 632, column: 7, scope: !2867)
!2873 = !DILocation(line: 632, column: 13, scope: !2867)
!2874 = !DILocation(line: 633, column: 4, scope: !2867)
!2875 = !DILocation(line: 633, column: 8, scope: !2867)
!2876 = !DILocation(line: 633, column: 22, scope: !2867)
!2877 = !DILocation(line: 633, column: 27, scope: !2867)
!2878 = !DILocation(line: 633, column: 30, scope: !2867)
!2879 = !DILocation(line: 633, column: 47, scope: !2867)
!2880 = !DILocation(line: 633, column: 44, scope: !2867)
!2881 = !DILocation(line: 631, column: 7, scope: !2859)
!2882 = !DILocation(line: 634, column: 5, scope: !2867)
!2883 = !DILocation(line: 641, column: 9, scope: !2884)
!2884 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 641, column: 7)
!2885 = !DILocation(line: 641, column: 7, scope: !2859)
!2886 = !DILocalVariable(name: "inner", scope: !2887, file: !3, line: 643, type: !1332)
!2887 = distinct !DILexicalBlock(scope: !2884, file: !3, line: 642, column: 5)
!2888 = !DILocation(line: 643, column: 12, scope: !2887)
!2889 = !DILocation(line: 647, column: 7, scope: !2887)
!2890 = !DILocation(line: 648, column: 24, scope: !2887)
!2891 = !DILocation(line: 648, column: 39, scope: !2887)
!2892 = !DILocation(line: 648, column: 13, scope: !2887)
!2893 = !DILocation(line: 648, column: 11, scope: !2887)
!2894 = !DILocation(line: 649, column: 11, scope: !2895)
!2895 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 649, column: 11)
!2896 = !DILocation(line: 649, column: 15, scope: !2895)
!2897 = !DILocation(line: 649, column: 11, scope: !2887)
!2898 = !DILocation(line: 650, column: 9, scope: !2895)
!2899 = !DILocation(line: 650, column: 2, scope: !2895)
!2900 = !DILocation(line: 653, column: 11, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 653, column: 11)
!2902 = !DILocation(line: 653, column: 25, scope: !2901)
!2903 = !DILocation(line: 653, column: 11, scope: !2887)
!2904 = !DILocation(line: 654, column: 6, scope: !2901)
!2905 = !DILocation(line: 654, column: 4, scope: !2901)
!2906 = !DILocation(line: 654, column: 2, scope: !2901)
!2907 = !DILocation(line: 658, column: 15, scope: !2887)
!2908 = !DILocation(line: 658, column: 13, scope: !2887)
!2909 = !DILocation(line: 659, column: 7, scope: !2887)
!2910 = !DILocation(line: 659, column: 35, scope: !2887)
!2911 = !DILocation(line: 659, column: 14, scope: !2887)
!2912 = !DILocation(line: 661, column: 12, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 660, column: 2)
!2914 = !DILocation(line: 661, column: 10, scope: !2913)
!2915 = !DILocation(line: 662, column: 4, scope: !2913)
!2916 = distinct !{!2916, !2909, !2917}
!2917 = !DILocation(line: 663, column: 2, scope: !2887)
!2918 = !DILocation(line: 665, column: 11, scope: !2919)
!2919 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 665, column: 11)
!2920 = !DILocation(line: 665, column: 11, scope: !2887)
!2921 = !DILocation(line: 667, column: 33, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2919, file: !3, line: 666, column: 2)
!2923 = !DILocation(line: 667, column: 10, scope: !2922)
!2924 = !DILocation(line: 667, column: 8, scope: !2922)
!2925 = !DILocation(line: 668, column: 8, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2922, file: !3, line: 668, column: 8)
!2927 = !DILocation(line: 668, column: 12, scope: !2926)
!2928 = !DILocation(line: 668, column: 8, scope: !2922)
!2929 = !DILocation(line: 669, column: 13, scope: !2926)
!2930 = !DILocation(line: 669, column: 6, scope: !2926)
!2931 = !DILocation(line: 670, column: 2, scope: !2922)
!2932 = !DILocation(line: 674, column: 7, scope: !2887)
!2933 = !DILocation(line: 674, column: 47, scope: !2887)
!2934 = !DILocation(line: 674, column: 14, scope: !2887)
!2935 = !DILocation(line: 676, column: 8, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 675, column: 2)
!2937 = !DILocation(line: 676, column: 6, scope: !2936)
!2938 = !DILocation(line: 677, column: 4, scope: !2936)
!2939 = distinct !{!2939, !2932, !2940}
!2940 = !DILocation(line: 678, column: 2, scope: !2887)
!2941 = !DILocation(line: 683, column: 11, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 683, column: 11)
!2943 = !DILocation(line: 683, column: 25, scope: !2942)
!2944 = !DILocation(line: 684, column: 4, scope: !2942)
!2945 = !DILocation(line: 684, column: 7, scope: !2942)
!2946 = !DILocation(line: 684, column: 26, scope: !2942)
!2947 = !DILocation(line: 684, column: 29, scope: !2942)
!2948 = !DILocation(line: 683, column: 11, scope: !2887)
!2949 = !DILocation(line: 685, column: 9, scope: !2942)
!2950 = !DILocation(line: 685, column: 2, scope: !2942)
!2951 = !DILocation(line: 688, column: 11, scope: !2887)
!2952 = !DILocation(line: 688, column: 9, scope: !2887)
!2953 = !DILocation(line: 689, column: 5, scope: !2887)
!2954 = !DILocation(line: 693, column: 7, scope: !2859)
!2955 = !DILocation(line: 693, column: 5, scope: !2859)
!2956 = !DILocation(line: 698, column: 7, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 698, column: 7)
!2958 = !DILocation(line: 698, column: 7, scope: !2859)
!2959 = !DILocation(line: 702, column: 24, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2957, file: !3, line: 699, column: 5)
!2961 = !DILocation(line: 702, column: 39, scope: !2960)
!2962 = !DILocation(line: 702, column: 13, scope: !2960)
!2963 = !DILocation(line: 702, column: 11, scope: !2960)
!2964 = !DILocation(line: 703, column: 11, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 703, column: 11)
!2966 = !DILocation(line: 703, column: 15, scope: !2965)
!2967 = !DILocation(line: 703, column: 11, scope: !2960)
!2968 = !DILocation(line: 704, column: 9, scope: !2965)
!2969 = !DILocation(line: 704, column: 2, scope: !2965)
!2970 = !DILocation(line: 705, column: 7, scope: !2960)
!2971 = !DILocation(line: 707, column: 7, scope: !2859)
!2972 = !DILocation(line: 707, column: 5, scope: !2859)
!2973 = !DILocation(line: 710, column: 3, scope: !2859)
!2974 = !DILocation(line: 713, column: 7, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 713, column: 7)
!2976 = !DILocation(line: 713, column: 7, scope: !2859)
!2977 = !DILocation(line: 714, column: 12, scope: !2975)
!2978 = !DILocation(line: 714, column: 5, scope: !2975)
!2979 = !DILocation(line: 717, column: 8, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 717, column: 7)
!2981 = !DILocation(line: 717, column: 7, scope: !2859)
!2982 = !DILocation(line: 721, column: 11, scope: !2983)
!2983 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 721, column: 11)
!2984 = distinct !DILexicalBlock(scope: !2980, file: !3, line: 718, column: 5)
!2985 = !DILocation(line: 721, column: 25, scope: !2983)
!2986 = !DILocation(line: 721, column: 11, scope: !2984)
!2987 = !DILocation(line: 722, column: 24, scope: !2983)
!2988 = !DILocation(line: 722, column: 9, scope: !2983)
!2989 = !DILocation(line: 722, column: 2, scope: !2983)
!2990 = !DILocation(line: 725, column: 7, scope: !2984)
!2991 = !DILocation(line: 729, column: 20, scope: !2859)
!2992 = !DILocation(line: 729, column: 35, scope: !2859)
!2993 = !DILocation(line: 729, column: 9, scope: !2859)
!2994 = !DILocation(line: 729, column: 7, scope: !2859)
!2995 = !DILocation(line: 730, column: 7, scope: !2996)
!2996 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 730, column: 7)
!2997 = !DILocation(line: 730, column: 11, scope: !2996)
!2998 = !DILocation(line: 730, column: 7, scope: !2859)
!2999 = !DILocation(line: 731, column: 12, scope: !2996)
!3000 = !DILocation(line: 731, column: 5, scope: !2996)
!3001 = !DILocation(line: 736, column: 12, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2996, file: !3, line: 736, column: 12)
!3003 = !DILocation(line: 736, column: 26, scope: !3002)
!3004 = !DILocation(line: 737, column: 5, scope: !3002)
!3005 = !DILocation(line: 737, column: 8, scope: !3002)
!3006 = !DILocation(line: 737, column: 22, scope: !3002)
!3007 = !DILocation(line: 736, column: 12, scope: !2996)
!3008 = !DILocation(line: 738, column: 9, scope: !3002)
!3009 = !DILocation(line: 738, column: 5, scope: !3002)
!3010 = !DILocation(line: 744, column: 12, scope: !3011)
!3011 = distinct !DILexicalBlock(scope: !3002, file: !3, line: 744, column: 12)
!3012 = !DILocation(line: 744, column: 26, scope: !3011)
!3013 = !DILocation(line: 744, column: 12, scope: !3002)
!3014 = !DILocation(line: 745, column: 26, scope: !3011)
!3015 = !DILocation(line: 745, column: 11, scope: !3011)
!3016 = !DILocation(line: 745, column: 9, scope: !3011)
!3017 = !DILocation(line: 745, column: 5, scope: !3011)
!3018 = !DILocation(line: 755, column: 12, scope: !3019)
!3019 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 755, column: 12)
!3020 = !DILocation(line: 755, column: 26, scope: !3019)
!3021 = !DILocation(line: 756, column: 5, scope: !3019)
!3022 = !DILocation(line: 756, column: 9, scope: !3019)
!3023 = !DILocation(line: 755, column: 12, scope: !3011)
!3024 = !DILocation(line: 757, column: 26, scope: !3019)
!3025 = !DILocation(line: 757, column: 11, scope: !3019)
!3026 = !DILocation(line: 757, column: 9, scope: !3019)
!3027 = !DILocation(line: 757, column: 5, scope: !3019)
!3028 = !DILocation(line: 761, column: 11, scope: !3019)
!3029 = !DILocation(line: 761, column: 9, scope: !3019)
!3030 = !DILocation(line: 763, column: 24, scope: !2859)
!3031 = !DILocation(line: 763, column: 3, scope: !2859)
!3032 = !DILocation(line: 763, column: 22, scope: !2859)
!3033 = !DILocation(line: 767, column: 7, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !2859, file: !3, line: 767, column: 7)
!3035 = !DILocation(line: 767, column: 28, scope: !3034)
!3036 = !DILocation(line: 767, column: 31, scope: !3034)
!3037 = !DILocation(line: 767, column: 45, scope: !3034)
!3038 = !DILocation(line: 767, column: 7, scope: !2859)
!3039 = !DILocation(line: 768, column: 31, scope: !3034)
!3040 = !DILocation(line: 768, column: 5, scope: !3034)
!3041 = !DILocation(line: 770, column: 10, scope: !2859)
!3042 = !DILocation(line: 770, column: 3, scope: !2859)
!3043 = !DILocation(line: 771, column: 1, scope: !2859)
!3044 = distinct !DISubprogram(name: "component_uses_parent_alias_set", scope: !3, file: !3, line: 539, type: !3045, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3045 = !DISubroutineType(types: !3046)
!3046 = !{!1445, !3047}
!3047 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1192, line: 59, baseType: !2544)
!3048 = !DILocalVariable(name: "t", arg: 1, scope: !3044, file: !3, line: 539, type: !3047)
!3049 = !DILocation(line: 539, column: 45, scope: !3044)
!3050 = !DILocation(line: 541, column: 3, scope: !3044)
!3051 = !DILocation(line: 544, column: 33, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 544, column: 11)
!3053 = distinct !DILexicalBlock(scope: !3044, file: !3, line: 542, column: 5)
!3054 = !DILocation(line: 544, column: 12, scope: !3052)
!3055 = !DILocation(line: 544, column: 11, scope: !3053)
!3056 = !DILocation(line: 545, column: 2, scope: !3052)
!3057 = !DILocation(line: 547, column: 15, scope: !3053)
!3058 = !DILocation(line: 547, column: 7, scope: !3053)
!3059 = !DILocation(line: 550, column: 8, scope: !3060)
!3060 = distinct !DILexicalBlock(scope: !3061, file: !3, line: 550, column: 8)
!3061 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 548, column: 2)
!3062 = !DILocation(line: 550, column: 8, scope: !3061)
!3063 = !DILocation(line: 551, column: 6, scope: !3060)
!3064 = !DILocation(line: 552, column: 4, scope: !3061)
!3065 = !DILocation(line: 556, column: 8, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3061, file: !3, line: 556, column: 8)
!3067 = !DILocation(line: 556, column: 8, scope: !3061)
!3068 = !DILocation(line: 557, column: 6, scope: !3066)
!3069 = !DILocation(line: 558, column: 4, scope: !3061)
!3070 = !DILocation(line: 562, column: 4, scope: !3061)
!3071 = !DILocation(line: 566, column: 4, scope: !3061)
!3072 = !DILocation(line: 569, column: 11, scope: !3053)
!3073 = !DILocation(line: 569, column: 9, scope: !3053)
!3074 = !DILocation(line: 570, column: 26, scope: !3075)
!3075 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 570, column: 11)
!3076 = !DILocation(line: 570, column: 11, scope: !3075)
!3077 = !DILocation(line: 570, column: 41, scope: !3075)
!3078 = !DILocation(line: 570, column: 11, scope: !3053)
!3079 = !DILocation(line: 571, column: 2, scope: !3075)
!3080 = distinct !{!3080, !3050, !3081}
!3081 = !DILocation(line: 572, column: 5, scope: !3044)
!3082 = !DILocation(line: 573, column: 1, scope: !3044)
!3083 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !3045, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3084 = !DILocalVariable(name: "t", arg: 1, scope: !3083, file: !135, line: 4551, type: !3047)
!3085 = !DILocation(line: 4551, column: 33, scope: !3083)
!3086 = !DILocation(line: 4553, column: 11, scope: !3083)
!3087 = !DILocation(line: 4553, column: 3, scope: !3083)
!3088 = !DILocation(line: 4562, column: 7, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3083, file: !135, line: 4554, column: 5)
!3090 = !DILocation(line: 4565, column: 7, scope: !3089)
!3091 = !DILocation(line: 4567, column: 1, scope: !3083)
!3092 = distinct !DISubprogram(name: "get_deref_alias_set", scope: !3, file: !3, line: 605, type: !2860, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3093 = !DILocalVariable(name: "t", arg: 1, scope: !3092, file: !3, line: 605, type: !1332)
!3094 = !DILocation(line: 605, column: 27, scope: !3092)
!3095 = !DILocalVariable(name: "set", scope: !3092, file: !3, line: 607, type: !2132)
!3096 = !DILocation(line: 607, column: 18, scope: !3092)
!3097 = !DILocation(line: 607, column: 47, scope: !3092)
!3098 = !DILocation(line: 607, column: 24, scope: !3092)
!3099 = !DILocation(line: 610, column: 7, scope: !3100)
!3100 = distinct !DILexicalBlock(scope: !3092, file: !3, line: 610, column: 7)
!3101 = !DILocation(line: 610, column: 11, scope: !3100)
!3102 = !DILocation(line: 610, column: 7, scope: !3092)
!3103 = !DILocation(line: 612, column: 13, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3105, file: !3, line: 612, column: 11)
!3105 = distinct !DILexicalBlock(scope: !3100, file: !3, line: 611, column: 5)
!3106 = !DILocation(line: 612, column: 11, scope: !3105)
!3107 = !DILocation(line: 613, column: 6, scope: !3104)
!3108 = !DILocation(line: 613, column: 4, scope: !3104)
!3109 = !DILocation(line: 613, column: 2, scope: !3104)
!3110 = !DILocation(line: 614, column: 28, scope: !3105)
!3111 = !DILocation(line: 614, column: 13, scope: !3105)
!3112 = !DILocation(line: 614, column: 11, scope: !3105)
!3113 = !DILocation(line: 615, column: 5, scope: !3105)
!3114 = !DILocation(line: 617, column: 10, scope: !3092)
!3115 = !DILocation(line: 617, column: 3, scope: !3092)
!3116 = distinct !DISubprogram(name: "get_deref_alias_set_1", scope: !3, file: !3, line: 580, type: !2860, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3117 = !DILocalVariable(name: "t", arg: 1, scope: !3116, file: !3, line: 580, type: !1332)
!3118 = !DILocation(line: 580, column: 29, scope: !3116)
!3119 = !DILocation(line: 584, column: 8, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 584, column: 7)
!3121 = !DILocation(line: 584, column: 7, scope: !3116)
!3122 = !DILocation(line: 585, column: 5, scope: !3120)
!3123 = !DILocation(line: 588, column: 9, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 588, column: 7)
!3125 = !DILocation(line: 588, column: 7, scope: !3116)
!3126 = !DILocation(line: 589, column: 9, scope: !3124)
!3127 = !DILocation(line: 589, column: 7, scope: !3124)
!3128 = !DILocation(line: 589, column: 5, scope: !3124)
!3129 = !DILocation(line: 594, column: 7, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 594, column: 7)
!3131 = !DILocation(line: 594, column: 33, scope: !3130)
!3132 = !DILocation(line: 595, column: 7, scope: !3130)
!3133 = !DILocation(line: 595, column: 10, scope: !3130)
!3134 = !DILocation(line: 594, column: 7, scope: !3116)
!3135 = !DILocation(line: 596, column: 5, scope: !3130)
!3136 = !DILocation(line: 598, column: 3, scope: !3116)
!3137 = !DILocation(line: 599, column: 1, scope: !3116)
!3138 = distinct !DISubprogram(name: "new_alias_set", scope: !3, file: !3, line: 776, type: !3139, scopeLine: 777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3139 = !DISubroutineType(types: !3140)
!3140 = !{!2132}
!3141 = !DILocation(line: 778, column: 7, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3138, file: !3, line: 778, column: 7)
!3143 = !DILocation(line: 778, column: 7, scope: !3138)
!3144 = !DILocation(line: 780, column: 11, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 780, column: 11)
!3146 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 779, column: 5)
!3147 = !DILocation(line: 780, column: 22, scope: !3145)
!3148 = !DILocation(line: 780, column: 11, scope: !3146)
!3149 = !DILocation(line: 781, column: 2, scope: !3145)
!3150 = !DILocation(line: 782, column: 7, scope: !3146)
!3151 = !DILocation(line: 783, column: 14, scope: !3146)
!3152 = !DILocation(line: 783, column: 55, scope: !3146)
!3153 = !DILocation(line: 783, column: 7, scope: !3146)
!3154 = !DILocation(line: 786, column: 5, scope: !3142)
!3155 = !DILocation(line: 787, column: 1, scope: !3138)
!3156 = distinct !DISubprogram(name: "record_component_aliases", scope: !3, file: !3, line: 856, type: !3157, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3157 = !DISubroutineType(types: !3158)
!3158 = !{null, !1332}
!3159 = !DILocalVariable(name: "type", arg: 1, scope: !3156, file: !3, line: 856, type: !1332)
!3160 = !DILocation(line: 856, column: 32, scope: !3156)
!3161 = !DILocalVariable(name: "superset", scope: !3156, file: !3, line: 858, type: !2132)
!3162 = !DILocation(line: 858, column: 18, scope: !3156)
!3163 = !DILocation(line: 858, column: 44, scope: !3156)
!3164 = !DILocation(line: 858, column: 29, scope: !3156)
!3165 = !DILocalVariable(name: "field", scope: !3156, file: !3, line: 859, type: !1332)
!3166 = !DILocation(line: 859, column: 8, scope: !3156)
!3167 = !DILocation(line: 861, column: 7, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3156, file: !3, line: 861, column: 7)
!3169 = !DILocation(line: 861, column: 16, scope: !3168)
!3170 = !DILocation(line: 861, column: 7, scope: !3156)
!3171 = !DILocation(line: 862, column: 5, scope: !3168)
!3172 = !DILocation(line: 864, column: 11, scope: !3156)
!3173 = !DILocation(line: 864, column: 3, scope: !3156)
!3174 = !DILocation(line: 870, column: 11, scope: !3175)
!3175 = distinct !DILexicalBlock(scope: !3176, file: !3, line: 870, column: 11)
!3176 = distinct !DILexicalBlock(scope: !3156, file: !3, line: 865, column: 5)
!3177 = !DILocation(line: 870, column: 11, scope: !3176)
!3178 = !DILocalVariable(name: "i", scope: !3179, file: !3, line: 872, type: !1189)
!3179 = distinct !DILexicalBlock(scope: !3175, file: !3, line: 871, column: 2)
!3180 = !DILocation(line: 872, column: 8, scope: !3179)
!3181 = !DILocalVariable(name: "binfo", scope: !3179, file: !3, line: 873, type: !1332)
!3182 = !DILocation(line: 873, column: 9, scope: !3179)
!3183 = !DILocalVariable(name: "base_binfo", scope: !3179, file: !3, line: 873, type: !1332)
!3184 = !DILocation(line: 873, column: 16, scope: !3179)
!3185 = !DILocation(line: 875, column: 17, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 875, column: 4)
!3187 = !DILocation(line: 875, column: 15, scope: !3186)
!3188 = !DILocation(line: 875, column: 38, scope: !3186)
!3189 = !DILocation(line: 875, column: 9, scope: !3186)
!3190 = !DILocation(line: 876, column: 9, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3186, file: !3, line: 875, column: 4)
!3192 = !DILocation(line: 875, column: 4, scope: !3186)
!3193 = !DILocation(line: 877, column: 27, scope: !3191)
!3194 = !DILocation(line: 878, column: 21, scope: !3191)
!3195 = !DILocation(line: 878, column: 6, scope: !3191)
!3196 = !DILocation(line: 877, column: 6, scope: !3191)
!3197 = !DILocation(line: 876, column: 53, scope: !3191)
!3198 = !DILocation(line: 875, column: 4, scope: !3191)
!3199 = distinct !{!3199, !3192, !3200}
!3200 = !DILocation(line: 878, column: 45, scope: !3186)
!3201 = !DILocation(line: 879, column: 2, scope: !3179)
!3202 = !DILocation(line: 880, column: 20, scope: !3203)
!3203 = distinct !DILexicalBlock(scope: !3176, file: !3, line: 880, column: 7)
!3204 = !DILocation(line: 880, column: 18, scope: !3203)
!3205 = !DILocation(line: 880, column: 12, scope: !3203)
!3206 = !DILocation(line: 880, column: 40, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3203, file: !3, line: 880, column: 7)
!3208 = !DILocation(line: 880, column: 46, scope: !3207)
!3209 = !DILocation(line: 880, column: 7, scope: !3203)
!3210 = !DILocation(line: 881, column: 6, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3207, file: !3, line: 881, column: 6)
!3212 = !DILocation(line: 881, column: 24, scope: !3211)
!3213 = !DILocation(line: 881, column: 38, scope: !3211)
!3214 = !DILocation(line: 881, column: 42, scope: !3211)
!3215 = !DILocation(line: 881, column: 6, scope: !3207)
!3216 = !DILocation(line: 882, column: 25, scope: !3211)
!3217 = !DILocation(line: 882, column: 50, scope: !3211)
!3218 = !DILocation(line: 882, column: 35, scope: !3211)
!3219 = !DILocation(line: 882, column: 4, scope: !3211)
!3220 = !DILocation(line: 880, column: 60, scope: !3207)
!3221 = !DILocation(line: 880, column: 58, scope: !3207)
!3222 = !DILocation(line: 880, column: 7, scope: !3207)
!3223 = distinct !{!3223, !3209, !3224}
!3224 = !DILocation(line: 882, column: 68, scope: !3203)
!3225 = !DILocation(line: 883, column: 7, scope: !3176)
!3226 = !DILocation(line: 886, column: 28, scope: !3176)
!3227 = !DILocation(line: 886, column: 53, scope: !3176)
!3228 = !DILocation(line: 886, column: 38, scope: !3176)
!3229 = !DILocation(line: 886, column: 7, scope: !3176)
!3230 = !DILocation(line: 887, column: 7, scope: !3176)
!3231 = !DILocation(line: 893, column: 7, scope: !3176)
!3232 = !DILocation(line: 895, column: 1, scope: !3156)
!3233 = distinct !DISubprogram(name: "VEC_alias_set_entry_gc_safe_push", scope: !3, file: !3, line: 250, type: !3234, scopeLine: 250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3234 = !DISubroutineType(types: !3235)
!3235 = !{!3236, !3237, !2604}
!3236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2604, size: 64)
!3237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2605, size: 64)
!3238 = !DILocalVariable(name: "vec_", arg: 1, scope: !3233, file: !3, line: 250, type: !3237)
!3239 = !DILocation(line: 250, column: 1, scope: !3233)
!3240 = !DILocalVariable(name: "obj_", arg: 2, scope: !3233, file: !3, line: 250, type: !2604)
!3241 = distinct !DISubprogram(name: "VEC_alias_set_entry_base_length", scope: !3, file: !3, line: 249, type: !3242, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{!7, !3244}
!3244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3245, size: 64)
!3245 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2597)
!3246 = !DILocalVariable(name: "vec_", arg: 1, scope: !3241, file: !3, line: 249, type: !3244)
!3247 = !DILocation(line: 249, column: 1, scope: !3241)
!3248 = distinct !DISubprogram(name: "record_alias_subset", scope: !3, file: !3, line: 803, type: !3249, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3249 = !DISubroutineType(types: !3250)
!3250 = !{null, !2132, !2132}
!3251 = !DILocalVariable(name: "superset", arg: 1, scope: !3248, file: !3, line: 803, type: !2132)
!3252 = !DILocation(line: 803, column: 37, scope: !3248)
!3253 = !DILocalVariable(name: "subset", arg: 2, scope: !3248, file: !3, line: 803, type: !2132)
!3254 = !DILocation(line: 803, column: 62, scope: !3248)
!3255 = !DILocalVariable(name: "superset_entry", scope: !3248, file: !3, line: 805, type: !2604)
!3256 = !DILocation(line: 805, column: 19, scope: !3248)
!3257 = !DILocalVariable(name: "subset_entry", scope: !3248, file: !3, line: 806, type: !2604)
!3258 = !DILocation(line: 806, column: 19, scope: !3248)
!3259 = !DILocation(line: 810, column: 7, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 810, column: 7)
!3261 = !DILocation(line: 810, column: 19, scope: !3260)
!3262 = !DILocation(line: 810, column: 16, scope: !3260)
!3263 = !DILocation(line: 810, column: 7, scope: !3248)
!3264 = !DILocation(line: 811, column: 5, scope: !3260)
!3265 = !DILocation(line: 813, column: 3, scope: !3248)
!3266 = !DILocation(line: 815, column: 41, scope: !3248)
!3267 = !DILocation(line: 815, column: 20, scope: !3248)
!3268 = !DILocation(line: 815, column: 18, scope: !3248)
!3269 = !DILocation(line: 816, column: 7, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 816, column: 7)
!3271 = !DILocation(line: 816, column: 22, scope: !3270)
!3272 = !DILocation(line: 816, column: 7, scope: !3248)
!3273 = !DILocation(line: 820, column: 24, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3270, file: !3, line: 817, column: 5)
!3275 = !DILocation(line: 820, column: 22, scope: !3274)
!3276 = !DILocation(line: 821, column: 35, scope: !3274)
!3277 = !DILocation(line: 821, column: 7, scope: !3274)
!3278 = !DILocation(line: 821, column: 23, scope: !3274)
!3279 = !DILocation(line: 821, column: 33, scope: !3274)
!3280 = !DILocation(line: 823, column: 4, scope: !3274)
!3281 = !DILocation(line: 822, column: 7, scope: !3274)
!3282 = !DILocation(line: 822, column: 23, scope: !3274)
!3283 = !DILocation(line: 823, column: 2, scope: !3274)
!3284 = !DILocation(line: 824, column: 7, scope: !3274)
!3285 = !DILocation(line: 824, column: 23, scope: !3274)
!3286 = !DILocation(line: 824, column: 38, scope: !3274)
!3287 = !DILocation(line: 825, column: 7, scope: !3274)
!3288 = !DILocation(line: 826, column: 5, scope: !3274)
!3289 = !DILocation(line: 828, column: 7, scope: !3290)
!3290 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 828, column: 7)
!3291 = !DILocation(line: 828, column: 14, scope: !3290)
!3292 = !DILocation(line: 828, column: 7, scope: !3248)
!3293 = !DILocation(line: 829, column: 5, scope: !3290)
!3294 = !DILocation(line: 829, column: 21, scope: !3290)
!3295 = !DILocation(line: 829, column: 36, scope: !3290)
!3296 = !DILocation(line: 832, column: 43, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 831, column: 5)
!3298 = !DILocation(line: 832, column: 22, scope: !3297)
!3299 = !DILocation(line: 832, column: 20, scope: !3297)
!3300 = !DILocation(line: 835, column: 11, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3297, file: !3, line: 835, column: 11)
!3302 = !DILocation(line: 835, column: 11, scope: !3297)
!3303 = !DILocation(line: 837, column: 8, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 837, column: 8)
!3305 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 836, column: 2)
!3306 = !DILocation(line: 837, column: 22, scope: !3304)
!3307 = !DILocation(line: 837, column: 8, scope: !3305)
!3308 = !DILocation(line: 838, column: 6, scope: !3304)
!3309 = !DILocation(line: 838, column: 22, scope: !3304)
!3310 = !DILocation(line: 838, column: 37, scope: !3304)
!3311 = !DILocation(line: 840, column: 24, scope: !3305)
!3312 = !DILocation(line: 840, column: 38, scope: !3305)
!3313 = !DILocation(line: 841, column: 10, scope: !3305)
!3314 = !DILocation(line: 841, column: 26, scope: !3305)
!3315 = !DILocation(line: 840, column: 4, scope: !3305)
!3316 = !DILocation(line: 842, column: 2, scope: !3305)
!3317 = !DILocation(line: 845, column: 26, scope: !3297)
!3318 = !DILocation(line: 845, column: 42, scope: !3297)
!3319 = !DILocation(line: 846, column: 22, scope: !3297)
!3320 = !DILocation(line: 846, column: 5, scope: !3297)
!3321 = !DILocation(line: 845, column: 7, scope: !3297)
!3322 = !DILocation(line: 848, column: 1, scope: !3248)
!3323 = distinct !DISubprogram(name: "VEC_alias_set_entry_base_replace", scope: !3, file: !3, line: 249, type: !3324, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3324 = !DISubroutineType(types: !3325)
!3325 = !{!2604, !3326, !7, !2604}
!3326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2597, size: 64)
!3327 = !DILocalVariable(name: "vec_", arg: 1, scope: !3323, file: !3, line: 249, type: !3326)
!3328 = !DILocation(line: 249, column: 1, scope: !3323)
!3329 = !DILocalVariable(name: "ix_", arg: 2, scope: !3323, file: !3, line: 249, type: !7)
!3330 = !DILocalVariable(name: "obj_", arg: 3, scope: !3323, file: !3, line: 249, type: !2604)
!3331 = !DILocalVariable(name: "old_obj_", scope: !3323, file: !3, line: 249, type: !2604)
!3332 = distinct !DISubprogram(name: "insert_subset_children", scope: !3, file: !3, line: 388, type: !3333, scopeLine: 389, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3333 = !DISubroutineType(types: !3334)
!3334 = !{!1189, !2557, !1322}
!3335 = !DILocalVariable(name: "node", arg: 1, scope: !3332, file: !3, line: 388, type: !2557)
!3336 = !DILocation(line: 388, column: 41, scope: !3332)
!3337 = !DILocalVariable(name: "data", arg: 2, scope: !3332, file: !3, line: 388, type: !1322)
!3338 = !DILocation(line: 388, column: 53, scope: !3332)
!3339 = !DILocation(line: 390, column: 35, scope: !3332)
!3340 = !DILocation(line: 390, column: 22, scope: !3332)
!3341 = !DILocation(line: 390, column: 41, scope: !3332)
!3342 = !DILocation(line: 390, column: 47, scope: !3332)
!3343 = !DILocation(line: 390, column: 52, scope: !3332)
!3344 = !DILocation(line: 390, column: 58, scope: !3332)
!3345 = !DILocation(line: 390, column: 3, scope: !3332)
!3346 = !DILocation(line: 392, column: 3, scope: !3332)
!3347 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !135, file: !135, line: 182, type: !3348, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{!1189, !3350, !7, !1672}
!3350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3351, size: 64)
!3351 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1984)
!3352 = !DILocalVariable(name: "vec_", arg: 1, scope: !3347, file: !135, line: 182, type: !3350)
!3353 = !DILocation(line: 182, column: 1, scope: !3347)
!3354 = !DILocalVariable(name: "ix_", arg: 2, scope: !3347, file: !135, line: 182, type: !7)
!3355 = !DILocalVariable(name: "ptr", arg: 3, scope: !3347, file: !135, line: 182, type: !1672)
!3356 = !DILocation(line: 182, column: 1, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3347, file: !135, line: 182, column: 1)
!3358 = !DILocation(line: 182, column: 1, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3357, file: !135, line: 182, column: 1)
!3360 = !DILocation(line: 182, column: 1, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3357, file: !135, line: 182, column: 1)
!3362 = distinct !DISubprogram(name: "get_varargs_alias_set", scope: !3, file: !3, line: 903, type: !3139, scopeLine: 904, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3363 = !DILocation(line: 910, column: 3, scope: !3362)
!3364 = distinct !DISubprogram(name: "get_frame_alias_set", scope: !3, file: !3, line: 925, type: !3139, scopeLine: 926, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3365 = !DILocation(line: 927, column: 7, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !3364, file: !3, line: 927, column: 7)
!3367 = !DILocation(line: 927, column: 17, scope: !3366)
!3368 = !DILocation(line: 927, column: 7, scope: !3364)
!3369 = !DILocation(line: 928, column: 17, scope: !3366)
!3370 = !DILocation(line: 928, column: 15, scope: !3366)
!3371 = !DILocation(line: 928, column: 5, scope: !3366)
!3372 = !DILocation(line: 930, column: 10, scope: !3364)
!3373 = !DILocation(line: 930, column: 3, scope: !3364)
!3374 = distinct !DISubprogram(name: "get_reg_known_value", scope: !3, file: !3, line: 1234, type: !3375, scopeLine: 1235, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3375 = !DISubroutineType(types: !3376)
!3376 = !{!1191, !7}
!3377 = !DILocalVariable(name: "regno", arg: 1, scope: !3374, file: !3, line: 1234, type: !7)
!3378 = !DILocation(line: 1234, column: 35, scope: !3374)
!3379 = !DILocation(line: 1236, column: 7, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 1236, column: 7)
!3381 = !DILocation(line: 1236, column: 13, scope: !3380)
!3382 = !DILocation(line: 1236, column: 7, scope: !3374)
!3383 = !DILocation(line: 1238, column: 13, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1237, column: 5)
!3385 = !DILocation(line: 1239, column: 11, scope: !3386)
!3386 = distinct !DILexicalBlock(scope: !3384, file: !3, line: 1239, column: 11)
!3387 = !DILocation(line: 1239, column: 19, scope: !3386)
!3388 = !DILocation(line: 1239, column: 17, scope: !3386)
!3389 = !DILocation(line: 1239, column: 11, scope: !3384)
!3390 = !DILocation(line: 1240, column: 9, scope: !3386)
!3391 = !DILocation(line: 1240, column: 25, scope: !3386)
!3392 = !DILocation(line: 1240, column: 2, scope: !3386)
!3393 = !DILocation(line: 1241, column: 5, scope: !3384)
!3394 = !DILocation(line: 1242, column: 3, scope: !3374)
!3395 = !DILocation(line: 1243, column: 1, scope: !3374)
!3396 = distinct !DISubprogram(name: "get_reg_known_equiv_p", scope: !3, file: !3, line: 1261, type: !3397, scopeLine: 1262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3397 = !DISubroutineType(types: !3398)
!3398 = !{!1445, !7}
!3399 = !DILocalVariable(name: "regno", arg: 1, scope: !3396, file: !3, line: 1261, type: !7)
!3400 = !DILocation(line: 1261, column: 37, scope: !3396)
!3401 = !DILocation(line: 1263, column: 7, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3396, file: !3, line: 1263, column: 7)
!3403 = !DILocation(line: 1263, column: 13, scope: !3402)
!3404 = !DILocation(line: 1263, column: 7, scope: !3396)
!3405 = !DILocation(line: 1265, column: 13, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 1264, column: 5)
!3407 = !DILocation(line: 1266, column: 11, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 1266, column: 11)
!3409 = !DILocation(line: 1266, column: 19, scope: !3408)
!3410 = !DILocation(line: 1266, column: 17, scope: !3408)
!3411 = !DILocation(line: 1266, column: 11, scope: !3406)
!3412 = !DILocation(line: 1267, column: 9, scope: !3408)
!3413 = !DILocation(line: 1267, column: 27, scope: !3408)
!3414 = !DILocation(line: 1267, column: 2, scope: !3408)
!3415 = !DILocation(line: 1268, column: 5, scope: !3406)
!3416 = !DILocation(line: 1269, column: 3, scope: !3396)
!3417 = !DILocation(line: 1270, column: 1, scope: !3396)
!3418 = distinct !DISubprogram(name: "canon_rtx", scope: !3, file: !3, line: 1290, type: !3419, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3419 = !DISubroutineType(types: !3420)
!3420 = !{!1191, !1191}
!3421 = !DILocalVariable(name: "x", arg: 1, scope: !3418, file: !3, line: 1290, type: !1191)
!3422 = !DILocation(line: 1290, column: 16, scope: !3418)
!3423 = !DILocation(line: 1293, column: 7, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3418, file: !3, line: 1293, column: 7)
!3425 = !DILocation(line: 1293, column: 17, scope: !3424)
!3426 = !DILocation(line: 1293, column: 20, scope: !3424)
!3427 = !DILocation(line: 1293, column: 30, scope: !3424)
!3428 = !DILocation(line: 1293, column: 7, scope: !3418)
!3429 = !DILocalVariable(name: "t", scope: !3430, file: !3, line: 1295, type: !1191)
!3430 = distinct !DILexicalBlock(scope: !3424, file: !3, line: 1294, column: 5)
!3431 = !DILocation(line: 1295, column: 11, scope: !3430)
!3432 = !DILocation(line: 1295, column: 36, scope: !3430)
!3433 = !DILocation(line: 1295, column: 15, scope: !3430)
!3434 = !DILocation(line: 1296, column: 11, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3430, file: !3, line: 1296, column: 11)
!3436 = !DILocation(line: 1296, column: 16, scope: !3435)
!3437 = !DILocation(line: 1296, column: 13, scope: !3435)
!3438 = !DILocation(line: 1296, column: 11, scope: !3430)
!3439 = !DILocation(line: 1297, column: 9, scope: !3435)
!3440 = !DILocation(line: 1297, column: 2, scope: !3435)
!3441 = !DILocation(line: 1298, column: 11, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3430, file: !3, line: 1298, column: 11)
!3443 = !DILocation(line: 1298, column: 11, scope: !3430)
!3444 = !DILocation(line: 1299, column: 20, scope: !3442)
!3445 = !DILocation(line: 1299, column: 9, scope: !3442)
!3446 = !DILocation(line: 1299, column: 2, scope: !3442)
!3447 = !DILocation(line: 1300, column: 5, scope: !3430)
!3448 = !DILocation(line: 1302, column: 7, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3418, file: !3, line: 1302, column: 7)
!3450 = !DILocation(line: 1302, column: 20, scope: !3449)
!3451 = !DILocation(line: 1302, column: 7, scope: !3418)
!3452 = !DILocalVariable(name: "x0", scope: !3453, file: !3, line: 1304, type: !1191)
!3453 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1303, column: 5)
!3454 = !DILocation(line: 1304, column: 11, scope: !3453)
!3455 = !DILocation(line: 1304, column: 27, scope: !3453)
!3456 = !DILocation(line: 1304, column: 16, scope: !3453)
!3457 = !DILocalVariable(name: "x1", scope: !3453, file: !3, line: 1305, type: !1191)
!3458 = !DILocation(line: 1305, column: 11, scope: !3453)
!3459 = !DILocation(line: 1305, column: 27, scope: !3453)
!3460 = !DILocation(line: 1305, column: 16, scope: !3453)
!3461 = !DILocation(line: 1307, column: 11, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 1307, column: 11)
!3463 = !DILocation(line: 1307, column: 17, scope: !3462)
!3464 = !DILocation(line: 1307, column: 14, scope: !3462)
!3465 = !DILocation(line: 1307, column: 29, scope: !3462)
!3466 = !DILocation(line: 1307, column: 32, scope: !3462)
!3467 = !DILocation(line: 1307, column: 38, scope: !3462)
!3468 = !DILocation(line: 1307, column: 35, scope: !3462)
!3469 = !DILocation(line: 1307, column: 11, scope: !3453)
!3470 = !DILocation(line: 1309, column: 8, scope: !3471)
!3471 = distinct !DILexicalBlock(scope: !3472, file: !3, line: 1309, column: 8)
!3472 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 1308, column: 2)
!3473 = !DILocation(line: 1309, column: 8, scope: !3472)
!3474 = !DILocation(line: 1310, column: 28, scope: !3471)
!3475 = !DILocation(line: 1310, column: 32, scope: !3471)
!3476 = !DILocation(line: 1310, column: 13, scope: !3471)
!3477 = !DILocation(line: 1310, column: 6, scope: !3471)
!3478 = !DILocation(line: 1311, column: 13, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3471, file: !3, line: 1311, column: 13)
!3480 = !DILocation(line: 1311, column: 13, scope: !3471)
!3481 = !DILocation(line: 1312, column: 28, scope: !3479)
!3482 = !DILocation(line: 1312, column: 32, scope: !3479)
!3483 = !DILocation(line: 1312, column: 13, scope: !3479)
!3484 = !DILocation(line: 1312, column: 6, scope: !3479)
!3485 = !DILocation(line: 1313, column: 11, scope: !3472)
!3486 = !DILocation(line: 1313, column: 4, scope: !3472)
!3487 = !DILocation(line: 1315, column: 5, scope: !3453)
!3488 = !DILocation(line: 1321, column: 12, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1321, column: 12)
!3490 = !DILocation(line: 1321, column: 12, scope: !3449)
!3491 = !DILocation(line: 1322, column: 35, scope: !3489)
!3492 = !DILocation(line: 1322, column: 49, scope: !3489)
!3493 = !DILocation(line: 1322, column: 38, scope: !3489)
!3494 = !DILocation(line: 1322, column: 9, scope: !3489)
!3495 = !DILocation(line: 1322, column: 7, scope: !3489)
!3496 = !DILocation(line: 1322, column: 5, scope: !3489)
!3497 = !DILocation(line: 1324, column: 10, scope: !3418)
!3498 = !DILocation(line: 1324, column: 3, scope: !3418)
!3499 = !DILocation(line: 1325, column: 1, scope: !3418)
!3500 = distinct !DISubprogram(name: "rhs_regno", scope: !562, file: !562, line: 1051, type: !3501, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3501 = !DISubroutineType(types: !3502)
!3502 = !{!7, !2607}
!3503 = !DILocalVariable(name: "x", arg: 1, scope: !3500, file: !562, line: 1051, type: !2607)
!3504 = !DILocation(line: 1051, column: 22, scope: !3500)
!3505 = !DILocation(line: 1053, column: 10, scope: !3500)
!3506 = !DILocation(line: 1053, column: 3, scope: !3500)
!3507 = distinct !DISubprogram(name: "find_base_term", scope: !3, file: !3, line: 1469, type: !3419, scopeLine: 1470, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3508 = !DILocalVariable(name: "x", arg: 1, scope: !3507, file: !3, line: 1469, type: !1191)
!3509 = !DILocation(line: 1469, column: 21, scope: !3507)
!3510 = !DILocalVariable(name: "val", scope: !3507, file: !3, line: 1471, type: !1265)
!3511 = !DILocation(line: 1471, column: 15, scope: !3507)
!3512 = !DILocalVariable(name: "l", scope: !3507, file: !3, line: 1472, type: !1253)
!3513 = !DILocation(line: 1472, column: 24, scope: !3507)
!3514 = !DILocation(line: 1476, column: 7, scope: !3507)
!3515 = !DILocation(line: 1476, column: 5, scope: !3507)
!3516 = !DILocation(line: 1479, column: 11, scope: !3507)
!3517 = !DILocation(line: 1479, column: 3, scope: !3507)
!3518 = !DILocation(line: 1482, column: 14, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 1480, column: 5)
!3520 = !DILocation(line: 1482, column: 7, scope: !3519)
!3521 = !DILocation(line: 1488, column: 12, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1488, column: 11)
!3523 = !DILocation(line: 1488, column: 11, scope: !3519)
!3524 = !DILocation(line: 1489, column: 2, scope: !3522)
!3525 = !DILocation(line: 1490, column: 11, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1490, column: 11)
!3527 = !DILocation(line: 1490, column: 42, scope: !3526)
!3528 = !DILocation(line: 1490, column: 40, scope: !3526)
!3529 = !DILocation(line: 1490, column: 11, scope: !3519)
!3530 = !DILocation(line: 1491, column: 2, scope: !3526)
!3531 = !DILocation(line: 1500, column: 30, scope: !3519)
!3532 = !DILocation(line: 1500, column: 14, scope: !3519)
!3533 = !DILocation(line: 1500, column: 7, scope: !3519)
!3534 = !DILocation(line: 1507, column: 12, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1507, column: 11)
!3536 = !DILocation(line: 1507, column: 11, scope: !3519)
!3537 = !DILocation(line: 1508, column: 2, scope: !3535)
!3538 = !DILocalVariable(name: "temp", scope: !3539, file: !3, line: 1511, type: !1191)
!3539 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1510, column: 7)
!3540 = !DILocation(line: 1511, column: 6, scope: !3539)
!3541 = !DILocation(line: 1511, column: 29, scope: !3539)
!3542 = !DILocation(line: 1511, column: 13, scope: !3539)
!3543 = !DILocation(line: 1513, column: 6, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 1513, column: 6)
!3545 = !DILocation(line: 1513, column: 11, scope: !3544)
!3546 = !DILocation(line: 1513, column: 16, scope: !3544)
!3547 = !DILocation(line: 1513, column: 19, scope: !3544)
!3548 = !DILocation(line: 1513, column: 6, scope: !3539)
!3549 = !DILocation(line: 1514, column: 11, scope: !3544)
!3550 = !DILocation(line: 1514, column: 9, scope: !3544)
!3551 = !DILocation(line: 1514, column: 4, scope: !3544)
!3552 = !DILocation(line: 1516, column: 9, scope: !3539)
!3553 = !DILocation(line: 1516, column: 2, scope: !3539)
!3554 = !DILocation(line: 1520, column: 13, scope: !3519)
!3555 = !DILocation(line: 1520, column: 11, scope: !3519)
!3556 = !DILocation(line: 1521, column: 12, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1521, column: 11)
!3558 = !DILocation(line: 1521, column: 11, scope: !3519)
!3559 = !DILocation(line: 1522, column: 2, scope: !3557)
!3560 = !DILocation(line: 1523, column: 16, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1523, column: 7)
!3562 = !DILocation(line: 1523, column: 21, scope: !3561)
!3563 = !DILocation(line: 1523, column: 14, scope: !3561)
!3564 = !DILocation(line: 1523, column: 12, scope: !3561)
!3565 = !DILocation(line: 1523, column: 27, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1523, column: 7)
!3567 = !DILocation(line: 1523, column: 7, scope: !3561)
!3568 = !DILocation(line: 1524, column: 27, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3566, file: !3, line: 1524, column: 6)
!3570 = !DILocation(line: 1524, column: 30, scope: !3569)
!3571 = !DILocation(line: 1524, column: 11, scope: !3569)
!3572 = !DILocation(line: 1524, column: 9, scope: !3569)
!3573 = !DILocation(line: 1524, column: 36, scope: !3569)
!3574 = !DILocation(line: 1524, column: 6, scope: !3566)
!3575 = !DILocation(line: 1525, column: 11, scope: !3569)
!3576 = !DILocation(line: 1525, column: 4, scope: !3569)
!3577 = !DILocation(line: 1524, column: 39, scope: !3569)
!3578 = !DILocation(line: 1523, column: 34, scope: !3566)
!3579 = !DILocation(line: 1523, column: 37, scope: !3566)
!3580 = !DILocation(line: 1523, column: 32, scope: !3566)
!3581 = !DILocation(line: 1523, column: 7, scope: !3566)
!3582 = distinct !{!3582, !3567, !3583}
!3583 = !DILocation(line: 1525, column: 11, scope: !3561)
!3584 = !DILocation(line: 1526, column: 7, scope: !3519)
!3585 = !DILocation(line: 1531, column: 30, scope: !3519)
!3586 = !DILocation(line: 1531, column: 14, scope: !3519)
!3587 = !DILocation(line: 1531, column: 7, scope: !3519)
!3588 = !DILocation(line: 1534, column: 11, scope: !3519)
!3589 = !DILocation(line: 1534, column: 9, scope: !3519)
!3590 = !DILocation(line: 1535, column: 11, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1535, column: 11)
!3592 = !DILocation(line: 1535, column: 24, scope: !3591)
!3593 = !DILocation(line: 1535, column: 32, scope: !3591)
!3594 = !DILocation(line: 1535, column: 35, scope: !3591)
!3595 = !DILocation(line: 1535, column: 48, scope: !3591)
!3596 = !DILocation(line: 1535, column: 11, scope: !3519)
!3597 = !DILocation(line: 1536, column: 2, scope: !3591)
!3598 = !DILocation(line: 1535, column: 51, scope: !3591)
!3599 = !DILocalVariable(name: "tmp1", scope: !3600, file: !3, line: 1541, type: !1191)
!3600 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1540, column: 7)
!3601 = !DILocation(line: 1541, column: 6, scope: !3600)
!3602 = !DILocation(line: 1541, column: 13, scope: !3600)
!3603 = !DILocalVariable(name: "tmp2", scope: !3600, file: !3, line: 1542, type: !1191)
!3604 = !DILocation(line: 1542, column: 6, scope: !3600)
!3605 = !DILocation(line: 1542, column: 13, scope: !3600)
!3606 = !DILocation(line: 1556, column: 6, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 1556, column: 6)
!3608 = !DILocation(line: 1556, column: 14, scope: !3607)
!3609 = !DILocation(line: 1556, column: 11, scope: !3607)
!3610 = !DILocation(line: 1556, column: 35, scope: !3607)
!3611 = !DILocation(line: 1556, column: 38, scope: !3607)
!3612 = !DILocation(line: 1556, column: 6, scope: !3600)
!3613 = !DILocation(line: 1557, column: 27, scope: !3607)
!3614 = !DILocation(line: 1557, column: 11, scope: !3607)
!3615 = !DILocation(line: 1557, column: 4, scope: !3607)
!3616 = !DILocation(line: 1561, column: 6, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 1561, column: 6)
!3618 = !DILocation(line: 1561, column: 19, scope: !3617)
!3619 = !DILocation(line: 1561, column: 22, scope: !3617)
!3620 = !DILocation(line: 1561, column: 6, scope: !3600)
!3621 = !DILocalVariable(name: "base", scope: !3622, file: !3, line: 1563, type: !1191)
!3622 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 1562, column: 4)
!3623 = !DILocation(line: 1563, column: 10, scope: !3622)
!3624 = !DILocation(line: 1563, column: 33, scope: !3622)
!3625 = !DILocation(line: 1563, column: 17, scope: !3622)
!3626 = !DILocation(line: 1564, column: 10, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 1564, column: 10)
!3628 = !DILocation(line: 1564, column: 10, scope: !3622)
!3629 = !DILocation(line: 1565, column: 15, scope: !3627)
!3630 = !DILocation(line: 1565, column: 8, scope: !3627)
!3631 = !DILocation(line: 1566, column: 4, scope: !3622)
!3632 = !DILocation(line: 1568, column: 6, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 1568, column: 6)
!3634 = !DILocation(line: 1568, column: 19, scope: !3633)
!3635 = !DILocation(line: 1568, column: 22, scope: !3633)
!3636 = !DILocation(line: 1568, column: 6, scope: !3600)
!3637 = !DILocalVariable(name: "base", scope: !3638, file: !3, line: 1570, type: !1191)
!3638 = distinct !DILexicalBlock(scope: !3633, file: !3, line: 1569, column: 4)
!3639 = !DILocation(line: 1570, column: 10, scope: !3638)
!3640 = !DILocation(line: 1570, column: 33, scope: !3638)
!3641 = !DILocation(line: 1570, column: 17, scope: !3638)
!3642 = !DILocation(line: 1571, column: 10, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 1571, column: 10)
!3644 = !DILocation(line: 1571, column: 10, scope: !3638)
!3645 = !DILocation(line: 1572, column: 15, scope: !3643)
!3646 = !DILocation(line: 1572, column: 8, scope: !3643)
!3647 = !DILocation(line: 1573, column: 4, scope: !3638)
!3648 = !DILocation(line: 1577, column: 25, scope: !3600)
!3649 = !DILocation(line: 1577, column: 9, scope: !3600)
!3650 = !DILocation(line: 1577, column: 7, scope: !3600)
!3651 = !DILocation(line: 1578, column: 25, scope: !3600)
!3652 = !DILocation(line: 1578, column: 9, scope: !3600)
!3653 = !DILocation(line: 1578, column: 7, scope: !3600)
!3654 = !DILocation(line: 1583, column: 6, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 1583, column: 6)
!3656 = !DILocation(line: 1583, column: 11, scope: !3655)
!3657 = !DILocation(line: 1584, column: 6, scope: !3655)
!3658 = !DILocation(line: 1584, column: 10, scope: !3655)
!3659 = !DILocation(line: 1584, column: 26, scope: !3655)
!3660 = !DILocation(line: 1585, column: 3, scope: !3655)
!3661 = !DILocation(line: 1585, column: 6, scope: !3655)
!3662 = !DILocation(line: 1585, column: 22, scope: !3655)
!3663 = !DILocation(line: 1586, column: 3, scope: !3655)
!3664 = !DILocation(line: 1586, column: 7, scope: !3655)
!3665 = !DILocation(line: 1586, column: 23, scope: !3655)
!3666 = !DILocation(line: 1587, column: 7, scope: !3655)
!3667 = !DILocation(line: 1587, column: 10, scope: !3655)
!3668 = !DILocation(line: 1587, column: 26, scope: !3655)
!3669 = !DILocation(line: 1583, column: 6, scope: !3600)
!3670 = !DILocation(line: 1588, column: 11, scope: !3655)
!3671 = !DILocation(line: 1588, column: 4, scope: !3655)
!3672 = !DILocation(line: 1590, column: 6, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 1590, column: 6)
!3674 = !DILocation(line: 1590, column: 11, scope: !3673)
!3675 = !DILocation(line: 1591, column: 6, scope: !3673)
!3676 = !DILocation(line: 1591, column: 10, scope: !3673)
!3677 = !DILocation(line: 1591, column: 26, scope: !3673)
!3678 = !DILocation(line: 1592, column: 3, scope: !3673)
!3679 = !DILocation(line: 1592, column: 6, scope: !3673)
!3680 = !DILocation(line: 1592, column: 22, scope: !3673)
!3681 = !DILocation(line: 1593, column: 3, scope: !3673)
!3682 = !DILocation(line: 1593, column: 7, scope: !3673)
!3683 = !DILocation(line: 1593, column: 23, scope: !3673)
!3684 = !DILocation(line: 1594, column: 7, scope: !3673)
!3685 = !DILocation(line: 1594, column: 10, scope: !3673)
!3686 = !DILocation(line: 1594, column: 26, scope: !3673)
!3687 = !DILocation(line: 1590, column: 6, scope: !3600)
!3688 = !DILocation(line: 1595, column: 11, scope: !3673)
!3689 = !DILocation(line: 1595, column: 4, scope: !3673)
!3690 = !DILocation(line: 1600, column: 2, scope: !3600)
!3691 = !DILocation(line: 1604, column: 11, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1604, column: 11)
!3693 = !DILocation(line: 1604, column: 37, scope: !3692)
!3694 = !DILocation(line: 1604, column: 40, scope: !3692)
!3695 = !DILocation(line: 1604, column: 61, scope: !3692)
!3696 = !DILocation(line: 1604, column: 11, scope: !3519)
!3697 = !DILocation(line: 1605, column: 25, scope: !3692)
!3698 = !DILocation(line: 1605, column: 9, scope: !3692)
!3699 = !DILocation(line: 1605, column: 2, scope: !3692)
!3700 = !DILocation(line: 1606, column: 7, scope: !3519)
!3701 = !DILocation(line: 1610, column: 14, scope: !3519)
!3702 = !DILocation(line: 1610, column: 7, scope: !3519)
!3703 = !DILocation(line: 1613, column: 7, scope: !3519)
!3704 = !DILocation(line: 1615, column: 1, scope: !3507)
!3705 = distinct !DISubprogram(name: "VEC_rtx_base_length", scope: !562, file: !562, line: 200, type: !3706, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3706 = !DISubroutineType(types: !3707)
!3707 = !{!7, !3708}
!3708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3709, size: 64)
!3709 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2534)
!3710 = !DILocalVariable(name: "vec_", arg: 1, scope: !3705, file: !562, line: 200, type: !3708)
!3711 = !DILocation(line: 200, column: 1, scope: !3705)
!3712 = distinct !DISubprogram(name: "VEC_rtx_base_index", scope: !562, file: !562, line: 200, type: !3713, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3713 = !DISubroutineType(types: !3714)
!3714 = !{!1191, !3708, !7}
!3715 = !DILocalVariable(name: "vec_", arg: 1, scope: !3712, file: !562, line: 200, type: !3708)
!3716 = !DILocation(line: 200, column: 1, scope: !3712)
!3717 = !DILocalVariable(name: "ix_", arg: 2, scope: !3712, file: !562, line: 200, type: !7)
!3718 = !DILocation(line: 0, scope: !3712)
!3719 = distinct !DISubprogram(name: "get_addr", scope: !3, file: !3, line: 1702, type: !3419, scopeLine: 1703, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3720 = !DILocalVariable(name: "x", arg: 1, scope: !3719, file: !3, line: 1702, type: !1191)
!3721 = !DILocation(line: 1702, column: 15, scope: !3719)
!3722 = !DILocalVariable(name: "v", scope: !3719, file: !3, line: 1704, type: !1265)
!3723 = !DILocation(line: 1704, column: 15, scope: !3719)
!3724 = !DILocalVariable(name: "l", scope: !3719, file: !3, line: 1705, type: !1253)
!3725 = !DILocation(line: 1705, column: 24, scope: !3719)
!3726 = !DILocation(line: 1707, column: 7, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3719, file: !3, line: 1707, column: 7)
!3728 = !DILocation(line: 1707, column: 20, scope: !3727)
!3729 = !DILocation(line: 1707, column: 7, scope: !3719)
!3730 = !DILocation(line: 1708, column: 12, scope: !3727)
!3731 = !DILocation(line: 1708, column: 5, scope: !3727)
!3732 = !DILocation(line: 1709, column: 7, scope: !3719)
!3733 = !DILocation(line: 1709, column: 5, scope: !3719)
!3734 = !DILocation(line: 1710, column: 7, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3719, file: !3, line: 1710, column: 7)
!3736 = !DILocation(line: 1710, column: 7, scope: !3719)
!3737 = !DILocation(line: 1712, column: 16, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 1712, column: 7)
!3739 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 1711, column: 5)
!3740 = !DILocation(line: 1712, column: 19, scope: !3738)
!3741 = !DILocation(line: 1712, column: 14, scope: !3738)
!3742 = !DILocation(line: 1712, column: 12, scope: !3738)
!3743 = !DILocation(line: 1712, column: 25, scope: !3744)
!3744 = distinct !DILexicalBlock(scope: !3738, file: !3, line: 1712, column: 7)
!3745 = !DILocation(line: 1712, column: 7, scope: !3738)
!3746 = !DILocation(line: 1713, column: 6, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 1713, column: 6)
!3748 = !DILocation(line: 1713, column: 6, scope: !3744)
!3749 = !DILocation(line: 1714, column: 11, scope: !3747)
!3750 = !DILocation(line: 1714, column: 14, scope: !3747)
!3751 = !DILocation(line: 1714, column: 4, scope: !3747)
!3752 = !DILocation(line: 1712, column: 32, scope: !3744)
!3753 = !DILocation(line: 1712, column: 35, scope: !3744)
!3754 = !DILocation(line: 1712, column: 30, scope: !3744)
!3755 = !DILocation(line: 1712, column: 7, scope: !3744)
!3756 = distinct !{!3756, !3745, !3757}
!3757 = !DILocation(line: 1714, column: 14, scope: !3738)
!3758 = !DILocation(line: 1715, column: 16, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 1715, column: 7)
!3760 = !DILocation(line: 1715, column: 19, scope: !3759)
!3761 = !DILocation(line: 1715, column: 14, scope: !3759)
!3762 = !DILocation(line: 1715, column: 12, scope: !3759)
!3763 = !DILocation(line: 1715, column: 25, scope: !3764)
!3764 = distinct !DILexicalBlock(scope: !3759, file: !3, line: 1715, column: 7)
!3765 = !DILocation(line: 1715, column: 7, scope: !3759)
!3766 = !DILocation(line: 1716, column: 7, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3764, file: !3, line: 1716, column: 6)
!3768 = !DILocation(line: 1716, column: 22, scope: !3767)
!3769 = !DILocation(line: 1716, column: 26, scope: !3767)
!3770 = !DILocation(line: 1716, column: 6, scope: !3764)
!3771 = !DILocation(line: 1717, column: 11, scope: !3767)
!3772 = !DILocation(line: 1717, column: 14, scope: !3767)
!3773 = !DILocation(line: 1717, column: 4, scope: !3767)
!3774 = !DILocation(line: 1715, column: 32, scope: !3764)
!3775 = !DILocation(line: 1715, column: 35, scope: !3764)
!3776 = !DILocation(line: 1715, column: 30, scope: !3764)
!3777 = !DILocation(line: 1715, column: 7, scope: !3764)
!3778 = distinct !{!3778, !3765, !3779}
!3779 = !DILocation(line: 1717, column: 14, scope: !3759)
!3780 = !DILocation(line: 1718, column: 11, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 1718, column: 11)
!3782 = !DILocation(line: 1718, column: 14, scope: !3781)
!3783 = !DILocation(line: 1718, column: 11, scope: !3739)
!3784 = !DILocation(line: 1719, column: 9, scope: !3781)
!3785 = !DILocation(line: 1719, column: 12, scope: !3781)
!3786 = !DILocation(line: 1719, column: 18, scope: !3781)
!3787 = !DILocation(line: 1719, column: 2, scope: !3781)
!3788 = !DILocation(line: 1720, column: 5, scope: !3739)
!3789 = !DILocation(line: 1721, column: 10, scope: !3719)
!3790 = !DILocation(line: 1721, column: 3, scope: !3719)
!3791 = !DILocation(line: 1722, column: 1, scope: !3719)
!3792 = distinct !DISubprogram(name: "read_dependence", scope: !3, file: !3, line: 1979, type: !3793, scopeLine: 1980, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3793 = !DISubroutineType(types: !3794)
!3794 = !{!1189, !2607, !2607}
!3795 = !DILocalVariable(name: "mem", arg: 1, scope: !3792, file: !3, line: 1979, type: !2607)
!3796 = !DILocation(line: 1979, column: 28, scope: !3792)
!3797 = !DILocalVariable(name: "x", arg: 2, scope: !3792, file: !3, line: 1979, type: !2607)
!3798 = !DILocation(line: 1979, column: 43, scope: !3792)
!3799 = !DILocation(line: 1981, column: 10, scope: !3792)
!3800 = !DILocation(line: 1981, column: 29, scope: !3792)
!3801 = !DILocation(line: 1981, column: 32, scope: !3792)
!3802 = !DILocation(line: 0, scope: !3792)
!3803 = !DILocation(line: 1981, column: 3, scope: !3792)
!3804 = distinct !DISubprogram(name: "nonoverlapping_memrefs_p", scope: !3, file: !3, line: 2138, type: !3793, scopeLine: 2139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!3805 = !DILocalVariable(name: "x", arg: 1, scope: !3804, file: !3, line: 2138, type: !2607)
!3806 = !DILocation(line: 2138, column: 37, scope: !3804)
!3807 = !DILocalVariable(name: "y", arg: 2, scope: !3804, file: !3, line: 2138, type: !2607)
!3808 = !DILocation(line: 2138, column: 50, scope: !3804)
!3809 = !DILocalVariable(name: "exprx", scope: !3804, file: !3, line: 2140, type: !1332)
!3810 = !DILocation(line: 2140, column: 8, scope: !3804)
!3811 = !DILocation(line: 2140, column: 16, scope: !3804)
!3812 = !DILocalVariable(name: "expry", scope: !3804, file: !3, line: 2140, type: !1332)
!3813 = !DILocation(line: 2140, column: 30, scope: !3804)
!3814 = !DILocation(line: 2140, column: 38, scope: !3804)
!3815 = !DILocalVariable(name: "rtlx", scope: !3804, file: !3, line: 2141, type: !1191)
!3816 = !DILocation(line: 2141, column: 7, scope: !3804)
!3817 = !DILocalVariable(name: "rtly", scope: !3804, file: !3, line: 2141, type: !1191)
!3818 = !DILocation(line: 2141, column: 13, scope: !3804)
!3819 = !DILocalVariable(name: "basex", scope: !3804, file: !3, line: 2142, type: !1191)
!3820 = !DILocation(line: 2142, column: 7, scope: !3804)
!3821 = !DILocalVariable(name: "basey", scope: !3804, file: !3, line: 2142, type: !1191)
!3822 = !DILocation(line: 2142, column: 14, scope: !3804)
!3823 = !DILocalVariable(name: "moffsetx", scope: !3804, file: !3, line: 2143, type: !1191)
!3824 = !DILocation(line: 2143, column: 7, scope: !3804)
!3825 = !DILocalVariable(name: "moffsety", scope: !3804, file: !3, line: 2143, type: !1191)
!3826 = !DILocation(line: 2143, column: 17, scope: !3804)
!3827 = !DILocalVariable(name: "offsetx", scope: !3804, file: !3, line: 2144, type: !1301)
!3828 = !DILocation(line: 2144, column: 17, scope: !3804)
!3829 = !DILocalVariable(name: "offsety", scope: !3804, file: !3, line: 2144, type: !1301)
!3830 = !DILocation(line: 2144, column: 30, scope: !3804)
!3831 = !DILocalVariable(name: "sizex", scope: !3804, file: !3, line: 2144, type: !1301)
!3832 = !DILocation(line: 2144, column: 43, scope: !3804)
!3833 = !DILocalVariable(name: "sizey", scope: !3804, file: !3, line: 2144, type: !1301)
!3834 = !DILocation(line: 2144, column: 50, scope: !3804)
!3835 = !DILocalVariable(name: "tem", scope: !3804, file: !3, line: 2144, type: !1301)
!3836 = !DILocation(line: 2144, column: 57, scope: !3804)
!3837 = !DILocation(line: 2147, column: 7, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2147, column: 7)
!3839 = !DILocation(line: 2147, column: 13, scope: !3838)
!3840 = !DILocation(line: 2147, column: 18, scope: !3838)
!3841 = !DILocation(line: 2147, column: 21, scope: !3838)
!3842 = !DILocation(line: 2147, column: 27, scope: !3838)
!3843 = !DILocation(line: 2147, column: 7, scope: !3804)
!3844 = !DILocation(line: 2148, column: 5, scope: !3838)
!3845 = !DILocation(line: 2151, column: 8, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2151, column: 7)
!3847 = !DILocation(line: 2151, column: 17, scope: !3846)
!3848 = !DILocation(line: 2151, column: 14, scope: !3846)
!3849 = !DILocation(line: 2152, column: 8, scope: !3846)
!3850 = !DILocation(line: 2152, column: 13, scope: !3846)
!3851 = !DILocation(line: 2153, column: 7, scope: !3846)
!3852 = !DILocation(line: 2153, column: 11, scope: !3846)
!3853 = !DILocation(line: 2153, column: 20, scope: !3846)
!3854 = !DILocation(line: 2153, column: 17, scope: !3846)
!3855 = !DILocation(line: 2154, column: 4, scope: !3846)
!3856 = !DILocation(line: 2154, column: 9, scope: !3846)
!3857 = !DILocation(line: 2151, column: 7, scope: !3804)
!3858 = !DILocation(line: 2155, column: 5, scope: !3846)
!3859 = !DILocation(line: 2158, column: 7, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2158, column: 7)
!3861 = !DILocation(line: 2158, column: 25, scope: !3860)
!3862 = !DILocation(line: 2159, column: 7, scope: !3860)
!3863 = !DILocation(line: 2159, column: 10, scope: !3860)
!3864 = !DILocation(line: 2159, column: 28, scope: !3860)
!3865 = !DILocation(line: 2160, column: 7, scope: !3860)
!3866 = !DILocation(line: 2160, column: 43, scope: !3860)
!3867 = !DILocation(line: 2160, column: 50, scope: !3860)
!3868 = !DILocation(line: 2160, column: 10, scope: !3860)
!3869 = !DILocation(line: 2158, column: 7, scope: !3804)
!3870 = !DILocation(line: 2161, column: 5, scope: !3860)
!3871 = !DILocation(line: 2165, column: 14, scope: !3804)
!3872 = !DILocation(line: 2165, column: 12, scope: !3804)
!3873 = !DILocation(line: 2166, column: 7, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2166, column: 7)
!3875 = !DILocation(line: 2166, column: 25, scope: !3874)
!3876 = !DILocation(line: 2166, column: 7, scope: !3804)
!3877 = !DILocation(line: 2168, column: 11, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 2168, column: 11)
!3879 = distinct !DILexicalBlock(scope: !3874, file: !3, line: 2167, column: 5)
!3880 = !DILocation(line: 2168, column: 29, scope: !3878)
!3881 = !DILocation(line: 2169, column: 4, scope: !3878)
!3882 = !DILocation(line: 2169, column: 7, scope: !3878)
!3883 = !DILocation(line: 2168, column: 11, scope: !3879)
!3884 = !DILocalVariable(name: "field", scope: !3885, file: !3, line: 2171, type: !1332)
!3885 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 2170, column: 2)
!3886 = !DILocation(line: 2171, column: 8, scope: !3885)
!3887 = !DILocation(line: 2171, column: 16, scope: !3885)
!3888 = !DILocalVariable(name: "fieldcontext", scope: !3885, file: !3, line: 2172, type: !1332)
!3889 = !DILocation(line: 2172, column: 8, scope: !3885)
!3890 = !DILocation(line: 2172, column: 23, scope: !3885)
!3891 = !DILocation(line: 2173, column: 49, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3885, file: !3, line: 2173, column: 7)
!3893 = !DILocation(line: 2174, column: 14, scope: !3892)
!3894 = !DILocation(line: 2173, column: 7, scope: !3892)
!3895 = !DILocation(line: 2173, column: 7, scope: !3885)
!3896 = !DILocation(line: 2175, column: 5, scope: !3892)
!3897 = !DILocation(line: 2176, column: 2, scope: !3885)
!3898 = !DILocalVariable(name: "t", scope: !3899, file: !3, line: 2178, type: !1332)
!3899 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 2177, column: 7)
!3900 = !DILocation(line: 2178, column: 7, scope: !3899)
!3901 = !DILocation(line: 2178, column: 35, scope: !3899)
!3902 = !DILocation(line: 2178, column: 11, scope: !3899)
!3903 = !DILocation(line: 2179, column: 8, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3899, file: !3, line: 2179, column: 6)
!3905 = !DILocation(line: 2179, column: 6, scope: !3899)
!3906 = !DILocation(line: 2180, column: 4, scope: !3904)
!3907 = !DILocation(line: 2181, column: 46, scope: !3899)
!3908 = !DILocation(line: 2181, column: 53, scope: !3899)
!3909 = !DILocation(line: 2181, column: 13, scope: !3899)
!3910 = !DILocation(line: 2181, column: 11, scope: !3899)
!3911 = !DILocation(line: 2182, column: 10, scope: !3899)
!3912 = !DILocation(line: 2182, column: 8, scope: !3899)
!3913 = !DILocation(line: 2184, column: 5, scope: !3879)
!3914 = !DILocation(line: 2185, column: 12, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3874, file: !3, line: 2185, column: 12)
!3916 = !DILocation(line: 2185, column: 12, scope: !3874)
!3917 = !DILocation(line: 2187, column: 15, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 2186, column: 5)
!3919 = !DILocation(line: 2187, column: 13, scope: !3918)
!3920 = !DILocation(line: 2188, column: 11, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3918, file: !3, line: 2188, column: 11)
!3922 = !DILocation(line: 2188, column: 33, scope: !3921)
!3923 = !DILocation(line: 2189, column: 4, scope: !3921)
!3924 = !DILocation(line: 2189, column: 7, scope: !3921)
!3925 = !DILocation(line: 2189, column: 25, scope: !3921)
!3926 = !DILocation(line: 2188, column: 11, scope: !3918)
!3927 = !DILocation(line: 2190, column: 2, scope: !3921)
!3928 = !DILocation(line: 2191, column: 5, scope: !3918)
!3929 = !DILocation(line: 2193, column: 14, scope: !3804)
!3930 = !DILocation(line: 2193, column: 12, scope: !3804)
!3931 = !DILocation(line: 2194, column: 7, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2194, column: 7)
!3933 = !DILocation(line: 2194, column: 25, scope: !3932)
!3934 = !DILocation(line: 2194, column: 7, scope: !3804)
!3935 = !DILocation(line: 2196, column: 11, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 2196, column: 11)
!3937 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 2195, column: 5)
!3938 = !DILocation(line: 2196, column: 29, scope: !3936)
!3939 = !DILocation(line: 2197, column: 4, scope: !3936)
!3940 = !DILocation(line: 2197, column: 7, scope: !3936)
!3941 = !DILocation(line: 2196, column: 11, scope: !3937)
!3942 = !DILocalVariable(name: "field", scope: !3943, file: !3, line: 2199, type: !1332)
!3943 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 2198, column: 2)
!3944 = !DILocation(line: 2199, column: 8, scope: !3943)
!3945 = !DILocation(line: 2199, column: 16, scope: !3943)
!3946 = !DILocalVariable(name: "fieldcontext", scope: !3943, file: !3, line: 2200, type: !1332)
!3947 = !DILocation(line: 2200, column: 8, scope: !3943)
!3948 = !DILocation(line: 2200, column: 23, scope: !3943)
!3949 = !DILocation(line: 2201, column: 49, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 2201, column: 7)
!3951 = !DILocation(line: 2202, column: 14, scope: !3950)
!3952 = !DILocation(line: 2201, column: 7, scope: !3950)
!3953 = !DILocation(line: 2201, column: 7, scope: !3943)
!3954 = !DILocation(line: 2203, column: 5, scope: !3950)
!3955 = !DILocation(line: 2204, column: 2, scope: !3943)
!3956 = !DILocalVariable(name: "t", scope: !3957, file: !3, line: 2206, type: !1332)
!3957 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 2205, column: 7)
!3958 = !DILocation(line: 2206, column: 7, scope: !3957)
!3959 = !DILocation(line: 2206, column: 35, scope: !3957)
!3960 = !DILocation(line: 2206, column: 11, scope: !3957)
!3961 = !DILocation(line: 2207, column: 8, scope: !3962)
!3962 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 2207, column: 6)
!3963 = !DILocation(line: 2207, column: 6, scope: !3957)
!3964 = !DILocation(line: 2208, column: 4, scope: !3962)
!3965 = !DILocation(line: 2209, column: 46, scope: !3957)
!3966 = !DILocation(line: 2209, column: 53, scope: !3957)
!3967 = !DILocation(line: 2209, column: 13, scope: !3957)
!3968 = !DILocation(line: 2209, column: 11, scope: !3957)
!3969 = !DILocation(line: 2210, column: 10, scope: !3957)
!3970 = !DILocation(line: 2210, column: 8, scope: !3957)
!3971 = !DILocation(line: 2212, column: 5, scope: !3937)
!3972 = !DILocation(line: 2213, column: 12, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 2213, column: 12)
!3974 = !DILocation(line: 2213, column: 12, scope: !3932)
!3975 = !DILocation(line: 2215, column: 15, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3973, file: !3, line: 2214, column: 5)
!3977 = !DILocation(line: 2215, column: 13, scope: !3976)
!3978 = !DILocation(line: 2216, column: 11, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 2216, column: 11)
!3980 = !DILocation(line: 2216, column: 33, scope: !3979)
!3981 = !DILocation(line: 2217, column: 4, scope: !3979)
!3982 = !DILocation(line: 2217, column: 7, scope: !3979)
!3983 = !DILocation(line: 2217, column: 25, scope: !3979)
!3984 = !DILocation(line: 2216, column: 11, scope: !3976)
!3985 = !DILocation(line: 2218, column: 2, scope: !3979)
!3986 = !DILocation(line: 2219, column: 5, scope: !3976)
!3987 = !DILocation(line: 2221, column: 9, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2221, column: 7)
!3989 = !DILocation(line: 2221, column: 24, scope: !3988)
!3990 = !DILocation(line: 2221, column: 29, scope: !3988)
!3991 = !DILocation(line: 2221, column: 7, scope: !3804)
!3992 = !DILocation(line: 2222, column: 5, scope: !3988)
!3993 = !DILocation(line: 2227, column: 7, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2227, column: 7)
!3995 = !DILocation(line: 2227, column: 25, scope: !3994)
!3996 = !DILocation(line: 2228, column: 7, scope: !3994)
!3997 = !DILocation(line: 2228, column: 10, scope: !3994)
!3998 = !DILocation(line: 2228, column: 28, scope: !3994)
!3999 = !DILocation(line: 2227, column: 7, scope: !3804)
!4000 = !DILocation(line: 2229, column: 5, scope: !3994)
!4001 = !DILocation(line: 2231, column: 10, scope: !3804)
!4002 = !DILocation(line: 2231, column: 8, scope: !3804)
!4003 = !DILocation(line: 2232, column: 10, scope: !3804)
!4004 = !DILocation(line: 2232, column: 8, scope: !3804)
!4005 = !DILocation(line: 2237, column: 9, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2237, column: 7)
!4007 = !DILocation(line: 2237, column: 22, scope: !4006)
!4008 = !DILocation(line: 2237, column: 26, scope: !4006)
!4009 = !DILocation(line: 2238, column: 7, scope: !4006)
!4010 = !DILocation(line: 2238, column: 25, scope: !4006)
!4011 = !DILocation(line: 2238, column: 31, scope: !4006)
!4012 = !DILocation(line: 2238, column: 12, scope: !4006)
!4013 = !DILocation(line: 2237, column: 7, scope: !3804)
!4014 = !DILocation(line: 2239, column: 5, scope: !4006)
!4015 = !DILocation(line: 2244, column: 7, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2244, column: 7)
!4017 = !DILocation(line: 2244, column: 20, scope: !4016)
!4018 = !DILocation(line: 2244, column: 23, scope: !4016)
!4019 = !DILocation(line: 2245, column: 7, scope: !4016)
!4020 = !DILocation(line: 2245, column: 10, scope: !4016)
!4021 = !DILocation(line: 2245, column: 35, scope: !4016)
!4022 = !DILocation(line: 2245, column: 32, scope: !4016)
!4023 = !DILocation(line: 2244, column: 7, scope: !3804)
!4024 = !DILocation(line: 2246, column: 5, scope: !4016)
!4025 = !DILocation(line: 2252, column: 11, scope: !3804)
!4026 = !DILocation(line: 2252, column: 26, scope: !3804)
!4027 = !DILocation(line: 2252, column: 43, scope: !3804)
!4028 = !DILocation(line: 2252, column: 9, scope: !3804)
!4029 = !DILocation(line: 2253, column: 7, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2253, column: 7)
!4031 = !DILocation(line: 2253, column: 24, scope: !4030)
!4032 = !DILocation(line: 2253, column: 32, scope: !4030)
!4033 = !DILocation(line: 2253, column: 35, scope: !4030)
!4034 = !DILocation(line: 2253, column: 7, scope: !3804)
!4035 = !DILocation(line: 2254, column: 15, scope: !4030)
!4036 = !DILocation(line: 2254, column: 13, scope: !4030)
!4037 = !DILocation(line: 2254, column: 49, scope: !4030)
!4038 = !DILocation(line: 2254, column: 47, scope: !4030)
!4039 = !DILocation(line: 2254, column: 5, scope: !4030)
!4040 = !DILocation(line: 2256, column: 11, scope: !3804)
!4041 = !DILocation(line: 2256, column: 26, scope: !3804)
!4042 = !DILocation(line: 2256, column: 43, scope: !3804)
!4043 = !DILocation(line: 2256, column: 9, scope: !3804)
!4044 = !DILocation(line: 2257, column: 7, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2257, column: 7)
!4046 = !DILocation(line: 2257, column: 24, scope: !4045)
!4047 = !DILocation(line: 2257, column: 32, scope: !4045)
!4048 = !DILocation(line: 2257, column: 35, scope: !4045)
!4049 = !DILocation(line: 2257, column: 7, scope: !3804)
!4050 = !DILocation(line: 2258, column: 15, scope: !4045)
!4051 = !DILocation(line: 2258, column: 13, scope: !4045)
!4052 = !DILocation(line: 2258, column: 49, scope: !4045)
!4053 = !DILocation(line: 2258, column: 47, scope: !4045)
!4054 = !DILocation(line: 2258, column: 5, scope: !4045)
!4055 = !DILocation(line: 2264, column: 22, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2264, column: 7)
!4057 = !DILocation(line: 2264, column: 29, scope: !4056)
!4058 = !DILocation(line: 2264, column: 9, scope: !4056)
!4059 = !DILocation(line: 2264, column: 7, scope: !3804)
!4060 = !DILocation(line: 2265, column: 14, scope: !4056)
!4061 = !DILocation(line: 2265, column: 33, scope: !4056)
!4062 = !DILocation(line: 2265, column: 36, scope: !4056)
!4063 = !DILocation(line: 2266, column: 6, scope: !4056)
!4064 = !DILocation(line: 2266, column: 10, scope: !4056)
!4065 = !DILocation(line: 2266, column: 29, scope: !4056)
!4066 = !DILocation(line: 2266, column: 32, scope: !4056)
!4067 = !DILocation(line: 2267, column: 3, scope: !4056)
!4068 = !DILocation(line: 2267, column: 6, scope: !4056)
!4069 = !DILocation(line: 2268, column: 6, scope: !4056)
!4070 = !DILocation(line: 2268, column: 10, scope: !4056)
!4071 = !DILocation(line: 2268, column: 29, scope: !4056)
!4072 = !DILocation(line: 2268, column: 32, scope: !4056)
!4073 = !DILocation(line: 2269, column: 3, scope: !4056)
!4074 = !DILocation(line: 2269, column: 6, scope: !4056)
!4075 = !DILocation(line: 0, scope: !4056)
!4076 = !DILocation(line: 2265, column: 5, scope: !4056)
!4077 = !DILocation(line: 2271, column: 13, scope: !3804)
!4078 = !DILocation(line: 2271, column: 12, scope: !3804)
!4079 = !DILocation(line: 2271, column: 34, scope: !3804)
!4080 = !DILocation(line: 2271, column: 28, scope: !3804)
!4081 = !DILocation(line: 2272, column: 7, scope: !3804)
!4082 = !DILocation(line: 2272, column: 25, scope: !3804)
!4083 = !DILocation(line: 2271, column: 9, scope: !3804)
!4084 = !DILocation(line: 2274, column: 13, scope: !3804)
!4085 = !DILocation(line: 2274, column: 12, scope: !3804)
!4086 = !DILocation(line: 2274, column: 34, scope: !3804)
!4087 = !DILocation(line: 2274, column: 28, scope: !3804)
!4088 = !DILocation(line: 2275, column: 7, scope: !3804)
!4089 = !DILocation(line: 2275, column: 25, scope: !3804)
!4090 = !DILocation(line: 2274, column: 9, scope: !3804)
!4091 = !DILocation(line: 2280, column: 7, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2280, column: 7)
!4093 = !DILocation(line: 2280, column: 7, scope: !3804)
!4094 = !DILocation(line: 2281, column: 16, scope: !4092)
!4095 = !DILocation(line: 2281, column: 13, scope: !4092)
!4096 = !DILocation(line: 2281, column: 44, scope: !4092)
!4097 = !DILocation(line: 2281, column: 41, scope: !4092)
!4098 = !DILocation(line: 2281, column: 5, scope: !4092)
!4099 = !DILocation(line: 2282, column: 7, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2282, column: 7)
!4101 = !DILocation(line: 2282, column: 7, scope: !3804)
!4102 = !DILocation(line: 2283, column: 16, scope: !4100)
!4103 = !DILocation(line: 2283, column: 13, scope: !4100)
!4104 = !DILocation(line: 2283, column: 44, scope: !4100)
!4105 = !DILocation(line: 2283, column: 41, scope: !4100)
!4106 = !DILocation(line: 2283, column: 5, scope: !4100)
!4107 = !DILocation(line: 2288, column: 7, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2288, column: 7)
!4109 = !DILocation(line: 2288, column: 20, scope: !4108)
!4110 = !DILocation(line: 2288, column: 23, scope: !4108)
!4111 = !DILocation(line: 2288, column: 7, scope: !3804)
!4112 = !DILocation(line: 2289, column: 13, scope: !4108)
!4113 = !DILocation(line: 2289, column: 11, scope: !4108)
!4114 = !DILocation(line: 2289, column: 5, scope: !4108)
!4115 = !DILocation(line: 2290, column: 7, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2290, column: 7)
!4117 = !DILocation(line: 2290, column: 20, scope: !4116)
!4118 = !DILocation(line: 2290, column: 23, scope: !4116)
!4119 = !DILocation(line: 2290, column: 7, scope: !3804)
!4120 = !DILocation(line: 2291, column: 13, scope: !4116)
!4121 = !DILocation(line: 2291, column: 11, scope: !4116)
!4122 = !DILocation(line: 2291, column: 5, scope: !4116)
!4123 = !DILocation(line: 2294, column: 7, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2294, column: 7)
!4125 = !DILocation(line: 2294, column: 17, scope: !4124)
!4126 = !DILocation(line: 2294, column: 15, scope: !4124)
!4127 = !DILocation(line: 2294, column: 7, scope: !3804)
!4128 = !DILocation(line: 2296, column: 13, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4124, file: !3, line: 2295, column: 5)
!4130 = !DILocation(line: 2296, column: 11, scope: !4129)
!4131 = !DILocation(line: 2296, column: 32, scope: !4129)
!4132 = !DILocation(line: 2296, column: 30, scope: !4129)
!4133 = !DILocation(line: 2296, column: 51, scope: !4129)
!4134 = !DILocation(line: 2296, column: 49, scope: !4129)
!4135 = !DILocation(line: 2297, column: 13, scope: !4129)
!4136 = !DILocation(line: 2297, column: 11, scope: !4129)
!4137 = !DILocation(line: 2297, column: 28, scope: !4129)
!4138 = !DILocation(line: 2297, column: 26, scope: !4129)
!4139 = !DILocation(line: 2297, column: 43, scope: !4129)
!4140 = !DILocation(line: 2297, column: 41, scope: !4129)
!4141 = !DILocation(line: 2298, column: 5, scope: !4129)
!4142 = !DILocation(line: 2302, column: 10, scope: !3804)
!4143 = !DILocation(line: 2302, column: 16, scope: !3804)
!4144 = !DILocation(line: 2302, column: 21, scope: !3804)
!4145 = !DILocation(line: 2302, column: 24, scope: !3804)
!4146 = !DILocation(line: 2302, column: 35, scope: !3804)
!4147 = !DILocation(line: 2302, column: 45, scope: !3804)
!4148 = !DILocation(line: 2302, column: 43, scope: !3804)
!4149 = !DILocation(line: 2302, column: 32, scope: !3804)
!4150 = !DILocation(line: 0, scope: !3804)
!4151 = !DILocation(line: 2302, column: 3, scope: !3804)
!4152 = !DILocation(line: 2303, column: 1, scope: !3804)
!4153 = distinct !DISubprogram(name: "nonoverlapping_component_refs_p", scope: !3, file: !3, line: 2035, type: !4154, scopeLine: 2036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{!1445, !3047, !3047}
!4156 = !DILocalVariable(name: "x", arg: 1, scope: !4153, file: !3, line: 2035, type: !3047)
!4157 = !DILocation(line: 2035, column: 45, scope: !4153)
!4158 = !DILocalVariable(name: "y", arg: 2, scope: !4153, file: !3, line: 2035, type: !3047)
!4159 = !DILocation(line: 2035, column: 59, scope: !4153)
!4160 = !DILocalVariable(name: "fieldx", scope: !4153, file: !3, line: 2037, type: !3047)
!4161 = !DILocation(line: 2037, column: 14, scope: !4153)
!4162 = !DILocalVariable(name: "fieldy", scope: !4153, file: !3, line: 2037, type: !3047)
!4163 = !DILocation(line: 2037, column: 22, scope: !4153)
!4164 = !DILocalVariable(name: "typex", scope: !4153, file: !3, line: 2037, type: !3047)
!4165 = !DILocation(line: 2037, column: 30, scope: !4153)
!4166 = !DILocalVariable(name: "typey", scope: !4153, file: !3, line: 2037, type: !3047)
!4167 = !DILocation(line: 2037, column: 37, scope: !4153)
!4168 = !DILocalVariable(name: "orig_y", scope: !4153, file: !3, line: 2037, type: !3047)
!4169 = !DILocation(line: 2037, column: 44, scope: !4153)
!4170 = !DILocation(line: 2039, column: 8, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 2039, column: 7)
!4172 = !DILocation(line: 2039, column: 7, scope: !4153)
!4173 = !DILocation(line: 2040, column: 5, scope: !4171)
!4174 = !DILocation(line: 2042, column: 3, scope: !4153)
!4175 = !DILocation(line: 2046, column: 16, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 2043, column: 5)
!4177 = !DILocation(line: 2046, column: 14, scope: !4176)
!4178 = !DILocation(line: 2047, column: 7, scope: !4176)
!4179 = !DILocation(line: 2049, column: 13, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2048, column: 2)
!4181 = !DILocation(line: 2049, column: 11, scope: !4180)
!4182 = !DILocation(line: 2050, column: 12, scope: !4180)
!4183 = !DILocation(line: 2050, column: 10, scope: !4180)
!4184 = !DILocation(line: 2052, column: 8, scope: !4180)
!4185 = !DILocation(line: 2052, column: 6, scope: !4180)
!4186 = !DILocation(line: 2053, column: 4, scope: !4180)
!4187 = !DILocation(line: 2055, column: 17, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4180, file: !3, line: 2054, column: 6)
!4189 = !DILocation(line: 2055, column: 15, scope: !4188)
!4190 = !DILocation(line: 2056, column: 16, scope: !4188)
!4191 = !DILocation(line: 2056, column: 14, scope: !4188)
!4192 = !DILocation(line: 2058, column: 12, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 2058, column: 12)
!4194 = !DILocation(line: 2058, column: 21, scope: !4193)
!4195 = !DILocation(line: 2058, column: 18, scope: !4193)
!4196 = !DILocation(line: 2058, column: 12, scope: !4188)
!4197 = !DILocation(line: 2059, column: 3, scope: !4193)
!4198 = !DILocation(line: 2061, column: 12, scope: !4188)
!4199 = !DILocation(line: 2061, column: 10, scope: !4188)
!4200 = !DILocation(line: 2062, column: 6, scope: !4188)
!4201 = !DILocation(line: 2063, column: 11, scope: !4180)
!4202 = !DILocation(line: 2063, column: 13, scope: !4180)
!4203 = !DILocation(line: 2063, column: 16, scope: !4180)
!4204 = !DILocation(line: 2063, column: 30, scope: !4180)
!4205 = !DILocation(line: 0, scope: !4180)
!4206 = distinct !{!4206, !4186, !4207}
!4207 = !DILocation(line: 2063, column: 46, scope: !4180)
!4208 = !DILocation(line: 2065, column: 8, scope: !4180)
!4209 = !DILocation(line: 2065, column: 6, scope: !4180)
!4210 = !DILocation(line: 2066, column: 2, scope: !4180)
!4211 = !DILocation(line: 2067, column: 14, scope: !4176)
!4212 = !DILocation(line: 2067, column: 16, scope: !4176)
!4213 = !DILocation(line: 2067, column: 19, scope: !4176)
!4214 = !DILocation(line: 2067, column: 33, scope: !4176)
!4215 = !DILocation(line: 0, scope: !4176)
!4216 = distinct !{!4216, !4178, !4217}
!4217 = !DILocation(line: 2067, column: 49, scope: !4176)
!4218 = !DILocation(line: 2069, column: 7, scope: !4176)
!4219 = !DILabel(scope: !4176, name: "found", file: !3, line: 2071)
!4220 = !DILocation(line: 2071, column: 5, scope: !4176)
!4221 = !DILocation(line: 2074, column: 11, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2074, column: 11)
!4223 = !DILocation(line: 2074, column: 29, scope: !4222)
!4224 = !DILocation(line: 2075, column: 4, scope: !4222)
!4225 = !DILocation(line: 2075, column: 7, scope: !4222)
!4226 = !DILocation(line: 2075, column: 17, scope: !4222)
!4227 = !DILocation(line: 2075, column: 14, scope: !4222)
!4228 = !DILocation(line: 2074, column: 11, scope: !4176)
!4229 = !DILocation(line: 2076, column: 2, scope: !4222)
!4230 = !DILocation(line: 2080, column: 11, scope: !4176)
!4231 = !DILocation(line: 2080, column: 9, scope: !4176)
!4232 = !DILocation(line: 2081, column: 11, scope: !4176)
!4233 = !DILocation(line: 2081, column: 9, scope: !4176)
!4234 = !DILocation(line: 2082, column: 5, scope: !4176)
!4235 = !DILocation(line: 2083, column: 10, scope: !4153)
!4236 = !DILocation(line: 2083, column: 12, scope: !4153)
!4237 = !DILocation(line: 2083, column: 15, scope: !4153)
!4238 = !DILocation(line: 2084, column: 3, scope: !4153)
!4239 = !DILocation(line: 2084, column: 6, scope: !4153)
!4240 = !DILocation(line: 2084, column: 20, scope: !4153)
!4241 = !DILocation(line: 2085, column: 3, scope: !4153)
!4242 = !DILocation(line: 2085, column: 6, scope: !4153)
!4243 = !DILocation(line: 2085, column: 20, scope: !4153)
!4244 = !DILocation(line: 0, scope: !4153)
!4245 = distinct !{!4245, !4174, !4246}
!4246 = !DILocation(line: 2085, column: 36, scope: !4153)
!4247 = !DILocation(line: 2087, column: 3, scope: !4153)
!4248 = !DILocation(line: 2088, column: 1, scope: !4153)
!4249 = distinct !DISubprogram(name: "decl_for_component_ref", scope: !3, file: !3, line: 2093, type: !4250, scopeLine: 2094, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4250 = !DISubroutineType(types: !4251)
!4251 = !{!1332, !1332}
!4252 = !DILocalVariable(name: "x", arg: 1, scope: !4249, file: !3, line: 2093, type: !1332)
!4253 = !DILocation(line: 2093, column: 30, scope: !4249)
!4254 = !DILocation(line: 2095, column: 3, scope: !4249)
!4255 = !DILocation(line: 2097, column: 11, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 2096, column: 5)
!4257 = !DILocation(line: 2097, column: 9, scope: !4256)
!4258 = !DILocation(line: 2098, column: 5, scope: !4256)
!4259 = !DILocation(line: 2099, column: 10, scope: !4249)
!4260 = !DILocation(line: 2099, column: 12, scope: !4249)
!4261 = !DILocation(line: 2099, column: 15, scope: !4249)
!4262 = !DILocation(line: 2099, column: 29, scope: !4249)
!4263 = !DILocation(line: 0, scope: !4249)
!4264 = distinct !{!4264, !4254, !4265}
!4265 = !DILocation(line: 2099, column: 45, scope: !4249)
!4266 = !DILocation(line: 2101, column: 10, scope: !4249)
!4267 = !DILocation(line: 2101, column: 12, scope: !4249)
!4268 = !DILocation(line: 2101, column: 15, scope: !4249)
!4269 = !DILocation(line: 2101, column: 28, scope: !4249)
!4270 = !DILocation(line: 2101, column: 3, scope: !4249)
!4271 = distinct !DISubprogram(name: "adjust_offset_for_component_ref", scope: !3, file: !3, line: 2108, type: !4272, scopeLine: 2109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4272 = !DISubroutineType(types: !4273)
!4273 = !{!1191, !1332, !1191}
!4274 = !DILocalVariable(name: "x", arg: 1, scope: !4271, file: !3, line: 2108, type: !1332)
!4275 = !DILocation(line: 2108, column: 39, scope: !4271)
!4276 = !DILocalVariable(name: "offset", arg: 2, scope: !4271, file: !3, line: 2108, type: !1191)
!4277 = !DILocation(line: 2108, column: 46, scope: !4271)
!4278 = !DILocalVariable(name: "ioffset", scope: !4271, file: !3, line: 2110, type: !1301)
!4279 = !DILocation(line: 2110, column: 17, scope: !4271)
!4280 = !DILocation(line: 2112, column: 9, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 2112, column: 7)
!4282 = !DILocation(line: 2112, column: 7, scope: !4271)
!4283 = !DILocation(line: 2113, column: 5, scope: !4281)
!4284 = !DILocation(line: 2115, column: 13, scope: !4271)
!4285 = !DILocation(line: 2115, column: 11, scope: !4271)
!4286 = !DILocation(line: 2116, column: 3, scope: !4271)
!4287 = !DILocalVariable(name: "offset", scope: !4288, file: !3, line: 2118, type: !1332)
!4288 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 2117, column: 5)
!4289 = !DILocation(line: 2118, column: 12, scope: !4288)
!4290 = !DILocation(line: 2118, column: 49, scope: !4288)
!4291 = !DILocation(line: 2118, column: 21, scope: !4288)
!4292 = !DILocalVariable(name: "field", scope: !4288, file: !3, line: 2119, type: !1332)
!4293 = !DILocation(line: 2119, column: 12, scope: !4288)
!4294 = !DILocation(line: 2119, column: 20, scope: !4288)
!4295 = !DILocation(line: 2121, column: 28, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 2121, column: 11)
!4297 = !DILocation(line: 2121, column: 13, scope: !4296)
!4298 = !DILocation(line: 2121, column: 11, scope: !4288)
!4299 = !DILocation(line: 2122, column: 2, scope: !4296)
!4300 = !DILocation(line: 2123, column: 33, scope: !4288)
!4301 = !DILocation(line: 2123, column: 19, scope: !4288)
!4302 = !DILocation(line: 2124, column: 22, scope: !4288)
!4303 = !DILocation(line: 2124, column: 8, scope: !4288)
!4304 = !DILocation(line: 2125, column: 8, scope: !4288)
!4305 = !DILocation(line: 2124, column: 5, scope: !4288)
!4306 = !DILocation(line: 2123, column: 15, scope: !4288)
!4307 = !DILocation(line: 2127, column: 11, scope: !4288)
!4308 = !DILocation(line: 2127, column: 9, scope: !4288)
!4309 = !DILocation(line: 2128, column: 5, scope: !4288)
!4310 = !DILocation(line: 2129, column: 10, scope: !4271)
!4311 = !DILocation(line: 2129, column: 12, scope: !4271)
!4312 = !DILocation(line: 2129, column: 15, scope: !4271)
!4313 = !DILocation(line: 2129, column: 29, scope: !4271)
!4314 = !DILocation(line: 0, scope: !4271)
!4315 = distinct !{!4315, !4286, !4316}
!4316 = !DILocation(line: 2129, column: 45, scope: !4271)
!4317 = !DILocation(line: 2131, column: 10, scope: !4271)
!4318 = !DILocation(line: 2131, column: 3, scope: !4271)
!4319 = !DILocation(line: 2132, column: 1, scope: !4271)
!4320 = distinct !DISubprogram(name: "true_dependence", scope: !3, file: !3, line: 2308, type: !4321, scopeLine: 2310, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4321 = !DISubroutineType(types: !4322)
!4322 = !{!1189, !2607, !5, !2607, !4323}
!4323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4324, size: 64)
!4324 = !DISubroutineType(types: !4325)
!4325 = !{!1445, !2607, !1445}
!4326 = !DILocalVariable(name: "mem", arg: 1, scope: !4320, file: !3, line: 2308, type: !2607)
!4327 = !DILocation(line: 2308, column: 28, scope: !4320)
!4328 = !DILocalVariable(name: "mem_mode", arg: 2, scope: !4320, file: !3, line: 2308, type: !5)
!4329 = !DILocation(line: 2308, column: 51, scope: !4320)
!4330 = !DILocalVariable(name: "x", arg: 3, scope: !4320, file: !3, line: 2308, type: !2607)
!4331 = !DILocation(line: 2308, column: 71, scope: !4320)
!4332 = !DILocalVariable(name: "varies", arg: 4, scope: !4320, file: !3, line: 2309, type: !4323)
!4333 = !DILocation(line: 2309, column: 11, scope: !4320)
!4334 = !DILocalVariable(name: "x_addr", scope: !4320, file: !3, line: 2311, type: !1191)
!4335 = !DILocation(line: 2311, column: 7, scope: !4320)
!4336 = !DILocalVariable(name: "mem_addr", scope: !4320, file: !3, line: 2311, type: !1191)
!4337 = !DILocation(line: 2311, column: 15, scope: !4320)
!4338 = !DILocalVariable(name: "base", scope: !4320, file: !3, line: 2312, type: !1191)
!4339 = !DILocation(line: 2312, column: 7, scope: !4320)
!4340 = !DILocalVariable(name: "ret", scope: !4320, file: !3, line: 2313, type: !1189)
!4341 = !DILocation(line: 2313, column: 7, scope: !4320)
!4342 = !DILocation(line: 2315, column: 7, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2315, column: 7)
!4344 = !DILocation(line: 2315, column: 26, scope: !4343)
!4345 = !DILocation(line: 2315, column: 29, scope: !4343)
!4346 = !DILocation(line: 2315, column: 7, scope: !4320)
!4347 = !DILocation(line: 2316, column: 5, scope: !4343)
!4348 = !DILocation(line: 2320, column: 7, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2320, column: 7)
!4350 = !DILocation(line: 2320, column: 20, scope: !4349)
!4351 = !DILocation(line: 2320, column: 31, scope: !4349)
!4352 = !DILocation(line: 2320, column: 34, scope: !4349)
!4353 = !DILocation(line: 2320, column: 57, scope: !4349)
!4354 = !DILocation(line: 2320, column: 7, scope: !4320)
!4355 = !DILocation(line: 2321, column: 5, scope: !4349)
!4356 = !DILocation(line: 2322, column: 7, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2322, column: 7)
!4358 = !DILocation(line: 2322, column: 22, scope: !4357)
!4359 = !DILocation(line: 2322, column: 33, scope: !4357)
!4360 = !DILocation(line: 2322, column: 36, scope: !4357)
!4361 = !DILocation(line: 2322, column: 61, scope: !4357)
!4362 = !DILocation(line: 2322, column: 7, scope: !4320)
!4363 = !DILocation(line: 2323, column: 5, scope: !4357)
!4364 = !DILocation(line: 2324, column: 7, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2324, column: 7)
!4366 = !DILocation(line: 2324, column: 25, scope: !4365)
!4367 = !DILocation(line: 2325, column: 7, scope: !4365)
!4368 = !DILocation(line: 2325, column: 10, scope: !4365)
!4369 = !DILocation(line: 2325, column: 30, scope: !4365)
!4370 = !DILocation(line: 2324, column: 7, scope: !4320)
!4371 = !DILocation(line: 2326, column: 5, scope: !4365)
!4372 = !DILocation(line: 2331, column: 7, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2331, column: 7)
!4374 = !DILocation(line: 2331, column: 7, scope: !4320)
!4375 = !DILocation(line: 2332, column: 5, scope: !4373)
!4376 = !DILocation(line: 2337, column: 7, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2337, column: 7)
!4378 = !DILocation(line: 2337, column: 31, scope: !4377)
!4379 = !DILocation(line: 2337, column: 28, scope: !4377)
!4380 = !DILocation(line: 2337, column: 7, scope: !4320)
!4381 = !DILocation(line: 2338, column: 5, scope: !4377)
!4382 = !DILocation(line: 2340, column: 7, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2340, column: 7)
!4384 = !DILocation(line: 2340, column: 16, scope: !4383)
!4385 = !DILocation(line: 2340, column: 7, scope: !4320)
!4386 = !DILocation(line: 2341, column: 16, scope: !4383)
!4387 = !DILocation(line: 2341, column: 14, scope: !4383)
!4388 = !DILocation(line: 2341, column: 5, scope: !4383)
!4389 = !DILocation(line: 2343, column: 22, scope: !4320)
!4390 = !DILocation(line: 2343, column: 12, scope: !4320)
!4391 = !DILocation(line: 2343, column: 10, scope: !4320)
!4392 = !DILocation(line: 2344, column: 24, scope: !4320)
!4393 = !DILocation(line: 2344, column: 14, scope: !4320)
!4394 = !DILocation(line: 2344, column: 12, scope: !4320)
!4395 = !DILocation(line: 2346, column: 26, scope: !4320)
!4396 = !DILocation(line: 2346, column: 10, scope: !4320)
!4397 = !DILocation(line: 2346, column: 8, scope: !4320)
!4398 = !DILocation(line: 2347, column: 7, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2347, column: 7)
!4400 = !DILocation(line: 2347, column: 12, scope: !4399)
!4401 = !DILocation(line: 2347, column: 16, scope: !4399)
!4402 = !DILocation(line: 2347, column: 32, scope: !4399)
!4403 = !DILocation(line: 2348, column: 9, scope: !4399)
!4404 = !DILocation(line: 2348, column: 13, scope: !4399)
!4405 = !DILocation(line: 2348, column: 29, scope: !4399)
!4406 = !DILocation(line: 2349, column: 6, scope: !4399)
!4407 = !DILocation(line: 2349, column: 9, scope: !4399)
!4408 = !DILocation(line: 2347, column: 7, scope: !4320)
!4409 = !DILocation(line: 2350, column: 5, scope: !4399)
!4410 = !DILocation(line: 2352, column: 27, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2352, column: 7)
!4412 = !DILocation(line: 2352, column: 35, scope: !4411)
!4413 = !DILocation(line: 2352, column: 45, scope: !4411)
!4414 = !DILocation(line: 2352, column: 59, scope: !4411)
!4415 = !DILocation(line: 2352, column: 9, scope: !4411)
!4416 = !DILocation(line: 2352, column: 7, scope: !4320)
!4417 = !DILocation(line: 2353, column: 5, scope: !4411)
!4418 = !DILocation(line: 2355, column: 23, scope: !4320)
!4419 = !DILocation(line: 2355, column: 12, scope: !4320)
!4420 = !DILocation(line: 2355, column: 10, scope: !4320)
!4421 = !DILocation(line: 2356, column: 25, scope: !4320)
!4422 = !DILocation(line: 2356, column: 14, scope: !4320)
!4423 = !DILocation(line: 2356, column: 12, scope: !4320)
!4424 = !DILocation(line: 2358, column: 34, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2358, column: 7)
!4426 = !DILocation(line: 2358, column: 60, scope: !4425)
!4427 = !DILocation(line: 2359, column: 6, scope: !4425)
!4428 = !DILocation(line: 2359, column: 25, scope: !4425)
!4429 = !DILocation(line: 2358, column: 14, scope: !4425)
!4430 = !DILocation(line: 2358, column: 12, scope: !4425)
!4431 = !DILocation(line: 2359, column: 37, scope: !4425)
!4432 = !DILocation(line: 2358, column: 7, scope: !4320)
!4433 = !DILocation(line: 2360, column: 12, scope: !4425)
!4434 = !DILocation(line: 2360, column: 5, scope: !4425)
!4435 = !DILocation(line: 2362, column: 7, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2362, column: 7)
!4437 = !DILocation(line: 2362, column: 7, scope: !4320)
!4438 = !DILocation(line: 2363, column: 5, scope: !4436)
!4439 = !DILocation(line: 2365, column: 33, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2365, column: 7)
!4441 = !DILocation(line: 2365, column: 38, scope: !4440)
!4442 = !DILocation(line: 2365, column: 7, scope: !4440)
!4443 = !DILocation(line: 2365, column: 7, scope: !4320)
!4444 = !DILocation(line: 2366, column: 5, scope: !4440)
!4445 = !DILocation(line: 2368, column: 29, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2368, column: 7)
!4447 = !DILocation(line: 2368, column: 7, scope: !4446)
!4448 = !DILocation(line: 2368, column: 7, scope: !4320)
!4449 = !DILocation(line: 2369, column: 5, scope: !4446)
!4450 = !DILocation(line: 2373, column: 7, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2373, column: 7)
!4452 = !DILocation(line: 2373, column: 16, scope: !4451)
!4453 = !DILocation(line: 2373, column: 26, scope: !4451)
!4454 = !DILocation(line: 2373, column: 29, scope: !4451)
!4455 = !DILocation(line: 2373, column: 49, scope: !4451)
!4456 = !DILocation(line: 2373, column: 7, scope: !4320)
!4457 = !DILocation(line: 2374, column: 5, scope: !4451)
!4458 = !DILocation(line: 2378, column: 7, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2378, column: 7)
!4460 = !DILocation(line: 2378, column: 16, scope: !4459)
!4461 = !DILocation(line: 2378, column: 27, scope: !4459)
!4462 = !DILocation(line: 2378, column: 30, scope: !4459)
!4463 = !DILocation(line: 2378, column: 43, scope: !4459)
!4464 = !DILocation(line: 2378, column: 7, scope: !4320)
!4465 = !DILocation(line: 2379, column: 5, scope: !4459)
!4466 = !DILocation(line: 2381, column: 42, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 2381, column: 7)
!4468 = !DILocation(line: 2381, column: 47, scope: !4467)
!4469 = !DILocation(line: 2381, column: 50, scope: !4467)
!4470 = !DILocation(line: 2381, column: 60, scope: !4467)
!4471 = !DILocation(line: 2381, column: 68, scope: !4467)
!4472 = !DILocation(line: 2381, column: 7, scope: !4467)
!4473 = !DILocation(line: 2381, column: 7, scope: !4320)
!4474 = !DILocation(line: 2382, column: 5, scope: !4467)
!4475 = !DILocation(line: 2384, column: 32, scope: !4320)
!4476 = !DILocation(line: 2384, column: 35, scope: !4320)
!4477 = !DILocation(line: 2384, column: 10, scope: !4320)
!4478 = !DILocation(line: 2384, column: 3, scope: !4320)
!4479 = !DILocation(line: 2385, column: 1, scope: !4320)
!4480 = distinct !DISubprogram(name: "base_alias_check", scope: !3, file: !3, line: 1621, type: !4481, scopeLine: 1623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4481 = !DISubroutineType(types: !4482)
!4482 = !{!1189, !1191, !1191, !5, !5}
!4483 = !DILocalVariable(name: "x", arg: 1, scope: !4480, file: !3, line: 1621, type: !1191)
!4484 = !DILocation(line: 1621, column: 23, scope: !4480)
!4485 = !DILocalVariable(name: "y", arg: 2, scope: !4480, file: !3, line: 1621, type: !1191)
!4486 = !DILocation(line: 1621, column: 30, scope: !4480)
!4487 = !DILocalVariable(name: "x_mode", arg: 3, scope: !4480, file: !3, line: 1621, type: !5)
!4488 = !DILocation(line: 1621, column: 51, scope: !4480)
!4489 = !DILocalVariable(name: "y_mode", arg: 4, scope: !4480, file: !3, line: 1622, type: !5)
!4490 = !DILocation(line: 1622, column: 23, scope: !4480)
!4491 = !DILocalVariable(name: "x_base", scope: !4480, file: !3, line: 1624, type: !1191)
!4492 = !DILocation(line: 1624, column: 7, scope: !4480)
!4493 = !DILocation(line: 1624, column: 32, scope: !4480)
!4494 = !DILocation(line: 1624, column: 16, scope: !4480)
!4495 = !DILocalVariable(name: "y_base", scope: !4480, file: !3, line: 1625, type: !1191)
!4496 = !DILocation(line: 1625, column: 7, scope: !4480)
!4497 = !DILocation(line: 1625, column: 32, scope: !4480)
!4498 = !DILocation(line: 1625, column: 16, scope: !4480)
!4499 = !DILocation(line: 1630, column: 7, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1630, column: 7)
!4501 = !DILocation(line: 1630, column: 14, scope: !4500)
!4502 = !DILocation(line: 1630, column: 7, scope: !4480)
!4503 = !DILocalVariable(name: "x_c", scope: !4504, file: !3, line: 1632, type: !1191)
!4504 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 1631, column: 5)
!4505 = !DILocation(line: 1632, column: 11, scope: !4504)
!4506 = !DILocation(line: 1634, column: 13, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 1634, column: 11)
!4508 = !DILocation(line: 1634, column: 42, scope: !4507)
!4509 = !DILocation(line: 1634, column: 63, scope: !4507)
!4510 = !DILocation(line: 1634, column: 52, scope: !4507)
!4511 = !DILocation(line: 1634, column: 50, scope: !4507)
!4512 = !DILocation(line: 1634, column: 70, scope: !4507)
!4513 = !DILocation(line: 1634, column: 67, scope: !4507)
!4514 = !DILocation(line: 1634, column: 11, scope: !4504)
!4515 = !DILocation(line: 1635, column: 2, scope: !4507)
!4516 = !DILocation(line: 1637, column: 32, scope: !4504)
!4517 = !DILocation(line: 1637, column: 16, scope: !4504)
!4518 = !DILocation(line: 1637, column: 14, scope: !4504)
!4519 = !DILocation(line: 1638, column: 11, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 1638, column: 11)
!4521 = !DILocation(line: 1638, column: 18, scope: !4520)
!4522 = !DILocation(line: 1638, column: 11, scope: !4504)
!4523 = !DILocation(line: 1639, column: 2, scope: !4520)
!4524 = !DILocation(line: 1640, column: 5, scope: !4504)
!4525 = !DILocation(line: 1642, column: 7, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1642, column: 7)
!4527 = !DILocation(line: 1642, column: 14, scope: !4526)
!4528 = !DILocation(line: 1642, column: 7, scope: !4480)
!4529 = !DILocalVariable(name: "y_c", scope: !4530, file: !3, line: 1644, type: !1191)
!4530 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 1643, column: 5)
!4531 = !DILocation(line: 1644, column: 11, scope: !4530)
!4532 = !DILocation(line: 1645, column: 13, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 1645, column: 11)
!4534 = !DILocation(line: 1645, column: 42, scope: !4533)
!4535 = !DILocation(line: 1645, column: 63, scope: !4533)
!4536 = !DILocation(line: 1645, column: 52, scope: !4533)
!4537 = !DILocation(line: 1645, column: 50, scope: !4533)
!4538 = !DILocation(line: 1645, column: 70, scope: !4533)
!4539 = !DILocation(line: 1645, column: 67, scope: !4533)
!4540 = !DILocation(line: 1645, column: 11, scope: !4530)
!4541 = !DILocation(line: 1646, column: 2, scope: !4533)
!4542 = !DILocation(line: 1648, column: 32, scope: !4530)
!4543 = !DILocation(line: 1648, column: 16, scope: !4530)
!4544 = !DILocation(line: 1648, column: 14, scope: !4530)
!4545 = !DILocation(line: 1649, column: 11, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 1649, column: 11)
!4547 = !DILocation(line: 1649, column: 18, scope: !4546)
!4548 = !DILocation(line: 1649, column: 11, scope: !4530)
!4549 = !DILocation(line: 1650, column: 2, scope: !4546)
!4550 = !DILocation(line: 1651, column: 5, scope: !4530)
!4551 = !DILocation(line: 1654, column: 20, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1654, column: 7)
!4553 = !DILocation(line: 1654, column: 28, scope: !4552)
!4554 = !DILocation(line: 1654, column: 7, scope: !4552)
!4555 = !DILocation(line: 1654, column: 7, scope: !4480)
!4556 = !DILocation(line: 1655, column: 5, scope: !4552)
!4557 = !DILocation(line: 1664, column: 7, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1664, column: 7)
!4559 = !DILocation(line: 1664, column: 20, scope: !4558)
!4560 = !DILocation(line: 1664, column: 27, scope: !4558)
!4561 = !DILocation(line: 1664, column: 30, scope: !4558)
!4562 = !DILocation(line: 1664, column: 43, scope: !4558)
!4563 = !DILocation(line: 1664, column: 7, scope: !4480)
!4564 = !DILocation(line: 1665, column: 5, scope: !4558)
!4565 = !DILocation(line: 1666, column: 7, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1666, column: 7)
!4567 = !DILocation(line: 1666, column: 20, scope: !4566)
!4568 = !DILocation(line: 1667, column: 7, scope: !4566)
!4569 = !DILocation(line: 1667, column: 12, scope: !4566)
!4570 = !DILocation(line: 1668, column: 4, scope: !4566)
!4571 = !DILocation(line: 1668, column: 13, scope: !4566)
!4572 = !DILocation(line: 1668, column: 7, scope: !4566)
!4573 = !DILocation(line: 1668, column: 44, scope: !4566)
!4574 = !DILocation(line: 1668, column: 43, scope: !4566)
!4575 = !DILocation(line: 1668, column: 41, scope: !4566)
!4576 = !DILocation(line: 1666, column: 7, scope: !4480)
!4577 = !DILocation(line: 1669, column: 5, scope: !4566)
!4578 = !DILocation(line: 1670, column: 7, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1670, column: 7)
!4580 = !DILocation(line: 1670, column: 20, scope: !4579)
!4581 = !DILocation(line: 1671, column: 7, scope: !4579)
!4582 = !DILocation(line: 1671, column: 12, scope: !4579)
!4583 = !DILocation(line: 1672, column: 4, scope: !4579)
!4584 = !DILocation(line: 1672, column: 13, scope: !4579)
!4585 = !DILocation(line: 1672, column: 7, scope: !4579)
!4586 = !DILocation(line: 1672, column: 44, scope: !4579)
!4587 = !DILocation(line: 1672, column: 43, scope: !4579)
!4588 = !DILocation(line: 1672, column: 41, scope: !4579)
!4589 = !DILocation(line: 1670, column: 7, scope: !4480)
!4590 = !DILocation(line: 1673, column: 5, scope: !4579)
!4591 = !DILocation(line: 1676, column: 7, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1676, column: 7)
!4593 = !DILocation(line: 1676, column: 25, scope: !4592)
!4594 = !DILocation(line: 1676, column: 36, scope: !4592)
!4595 = !DILocation(line: 1676, column: 39, scope: !4592)
!4596 = !DILocation(line: 1676, column: 57, scope: !4592)
!4597 = !DILocation(line: 1676, column: 7, scope: !4480)
!4598 = !DILocation(line: 1677, column: 5, scope: !4592)
!4599 = !DILocation(line: 1683, column: 8, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1683, column: 7)
!4601 = !DILocation(line: 1683, column: 26, scope: !4600)
!4602 = !DILocation(line: 1683, column: 37, scope: !4600)
!4603 = !DILocation(line: 1683, column: 40, scope: !4600)
!4604 = !DILocation(line: 1683, column: 58, scope: !4600)
!4605 = !DILocation(line: 1684, column: 7, scope: !4600)
!4606 = !DILocation(line: 1684, column: 11, scope: !4600)
!4607 = !DILocation(line: 1684, column: 29, scope: !4600)
!4608 = !DILocation(line: 1684, column: 40, scope: !4600)
!4609 = !DILocation(line: 1684, column: 43, scope: !4600)
!4610 = !DILocation(line: 1684, column: 61, scope: !4600)
!4611 = !DILocation(line: 1683, column: 7, scope: !4480)
!4612 = !DILocation(line: 1685, column: 5, scope: !4600)
!4613 = !DILocation(line: 1687, column: 9, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1687, column: 7)
!4615 = !DILocation(line: 1687, column: 7, scope: !4480)
!4616 = !DILocation(line: 1688, column: 5, scope: !4614)
!4617 = !DILocation(line: 1690, column: 7, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 1690, column: 7)
!4619 = !DILocation(line: 1690, column: 29, scope: !4618)
!4620 = !DILocation(line: 1690, column: 7, scope: !4480)
!4621 = !DILocation(line: 1691, column: 5, scope: !4618)
!4622 = !DILocation(line: 1694, column: 13, scope: !4480)
!4623 = !DILocation(line: 1694, column: 31, scope: !4480)
!4624 = !DILocation(line: 1694, column: 43, scope: !4480)
!4625 = !DILocation(line: 1694, column: 46, scope: !4480)
!4626 = !DILocation(line: 1694, column: 64, scope: !4480)
!4627 = !DILocation(line: 0, scope: !4480)
!4628 = !DILocation(line: 1694, column: 10, scope: !4480)
!4629 = !DILocation(line: 1694, column: 3, scope: !4480)
!4630 = !DILocation(line: 1695, column: 1, scope: !4480)
!4631 = distinct !DISubprogram(name: "memrefs_conflict_p", scope: !3, file: !3, line: 1789, type: !4632, scopeLine: 1790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!4632 = !DISubroutineType(types: !4633)
!4633 = !{!1189, !1189, !1191, !1189, !1191, !1301}
!4634 = !DILocalVariable(name: "xsize", arg: 1, scope: !4631, file: !3, line: 1789, type: !1189)
!4635 = !DILocation(line: 1789, column: 25, scope: !4631)
!4636 = !DILocalVariable(name: "x", arg: 2, scope: !4631, file: !3, line: 1789, type: !1191)
!4637 = !DILocation(line: 1789, column: 36, scope: !4631)
!4638 = !DILocalVariable(name: "ysize", arg: 3, scope: !4631, file: !3, line: 1789, type: !1189)
!4639 = !DILocation(line: 1789, column: 43, scope: !4631)
!4640 = !DILocalVariable(name: "y", arg: 4, scope: !4631, file: !3, line: 1789, type: !1191)
!4641 = !DILocation(line: 1789, column: 54, scope: !4631)
!4642 = !DILocalVariable(name: "c", arg: 5, scope: !4631, file: !3, line: 1789, type: !1301)
!4643 = !DILocation(line: 1789, column: 71, scope: !4631)
!4644 = !DILocation(line: 1791, column: 7, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1791, column: 7)
!4646 = !DILocation(line: 1791, column: 20, scope: !4645)
!4647 = !DILocation(line: 1791, column: 7, scope: !4631)
!4648 = !DILocation(line: 1792, column: 19, scope: !4645)
!4649 = !DILocation(line: 1792, column: 9, scope: !4645)
!4650 = !DILocation(line: 1792, column: 7, scope: !4645)
!4651 = !DILocation(line: 1792, column: 5, scope: !4645)
!4652 = !DILocation(line: 1793, column: 7, scope: !4653)
!4653 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1793, column: 7)
!4654 = !DILocation(line: 1793, column: 20, scope: !4653)
!4655 = !DILocation(line: 1793, column: 7, scope: !4631)
!4656 = !DILocation(line: 1794, column: 19, scope: !4653)
!4657 = !DILocation(line: 1794, column: 9, scope: !4653)
!4658 = !DILocation(line: 1794, column: 7, scope: !4653)
!4659 = !DILocation(line: 1794, column: 5, scope: !4653)
!4660 = !DILocation(line: 1795, column: 7, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1795, column: 7)
!4662 = !DILocation(line: 1795, column: 20, scope: !4661)
!4663 = !DILocation(line: 1795, column: 7, scope: !4631)
!4664 = !DILocation(line: 1796, column: 9, scope: !4661)
!4665 = !DILocation(line: 1796, column: 7, scope: !4661)
!4666 = !DILocation(line: 1796, column: 5, scope: !4661)
!4667 = !DILocation(line: 1797, column: 12, scope: !4668)
!4668 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 1797, column: 12)
!4669 = !DILocation(line: 1797, column: 25, scope: !4668)
!4670 = !DILocation(line: 1797, column: 12, scope: !4661)
!4671 = !DILocation(line: 1798, column: 9, scope: !4668)
!4672 = !DILocation(line: 1798, column: 7, scope: !4668)
!4673 = !DILocation(line: 1798, column: 5, scope: !4668)
!4674 = !DILocation(line: 1800, column: 32, scope: !4668)
!4675 = !DILocation(line: 1800, column: 35, scope: !4668)
!4676 = !DILocation(line: 1800, column: 9, scope: !4668)
!4677 = !DILocation(line: 1800, column: 7, scope: !4668)
!4678 = !DILocation(line: 1801, column: 7, scope: !4679)
!4679 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1801, column: 7)
!4680 = !DILocation(line: 1801, column: 20, scope: !4679)
!4681 = !DILocation(line: 1801, column: 7, scope: !4631)
!4682 = !DILocation(line: 1802, column: 9, scope: !4679)
!4683 = !DILocation(line: 1802, column: 7, scope: !4679)
!4684 = !DILocation(line: 1802, column: 5, scope: !4679)
!4685 = !DILocation(line: 1803, column: 12, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4679, file: !3, line: 1803, column: 12)
!4687 = !DILocation(line: 1803, column: 25, scope: !4686)
!4688 = !DILocation(line: 1803, column: 12, scope: !4679)
!4689 = !DILocation(line: 1804, column: 9, scope: !4686)
!4690 = !DILocation(line: 1804, column: 7, scope: !4686)
!4691 = !DILocation(line: 1804, column: 5, scope: !4686)
!4692 = !DILocation(line: 1806, column: 32, scope: !4686)
!4693 = !DILocation(line: 1806, column: 35, scope: !4686)
!4694 = !DILocation(line: 1806, column: 9, scope: !4686)
!4695 = !DILocation(line: 1806, column: 7, scope: !4686)
!4696 = !DILocation(line: 1808, column: 31, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1808, column: 7)
!4698 = !DILocation(line: 1808, column: 34, scope: !4697)
!4699 = !DILocation(line: 1808, column: 7, scope: !4697)
!4700 = !DILocation(line: 1808, column: 7, scope: !4631)
!4701 = !DILocation(line: 1810, column: 11, scope: !4702)
!4702 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1810, column: 11)
!4703 = distinct !DILexicalBlock(scope: !4697, file: !3, line: 1809, column: 5)
!4704 = !DILocation(line: 1810, column: 17, scope: !4702)
!4705 = !DILocation(line: 1810, column: 22, scope: !4702)
!4706 = !DILocation(line: 1810, column: 25, scope: !4702)
!4707 = !DILocation(line: 1810, column: 31, scope: !4702)
!4708 = !DILocation(line: 1810, column: 11, scope: !4703)
!4709 = !DILocation(line: 1811, column: 2, scope: !4702)
!4710 = !DILocation(line: 1812, column: 11, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1812, column: 11)
!4712 = !DILocation(line: 1812, column: 13, scope: !4711)
!4713 = !DILocation(line: 1812, column: 18, scope: !4711)
!4714 = !DILocation(line: 1812, column: 21, scope: !4711)
!4715 = !DILocation(line: 1812, column: 29, scope: !4711)
!4716 = !DILocation(line: 1812, column: 27, scope: !4711)
!4717 = !DILocation(line: 1812, column: 11, scope: !4703)
!4718 = !DILocation(line: 1813, column: 2, scope: !4711)
!4719 = !DILocation(line: 1814, column: 11, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1814, column: 11)
!4721 = !DILocation(line: 1814, column: 13, scope: !4720)
!4722 = !DILocation(line: 1814, column: 17, scope: !4720)
!4723 = !DILocation(line: 1814, column: 20, scope: !4720)
!4724 = !DILocation(line: 1814, column: 26, scope: !4720)
!4725 = !DILocation(line: 1814, column: 25, scope: !4720)
!4726 = !DILocation(line: 1814, column: 28, scope: !4720)
!4727 = !DILocation(line: 1814, column: 11, scope: !4703)
!4728 = !DILocation(line: 1815, column: 2, scope: !4720)
!4729 = !DILocation(line: 1816, column: 7, scope: !4703)
!4730 = !DILocation(line: 1822, column: 7, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1822, column: 7)
!4732 = !DILocation(line: 1822, column: 20, scope: !4731)
!4733 = !DILocation(line: 1822, column: 7, scope: !4631)
!4734 = !DILocalVariable(name: "x0", scope: !4735, file: !3, line: 1826, type: !1191)
!4735 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 1823, column: 5)
!4736 = !DILocation(line: 1826, column: 11, scope: !4735)
!4737 = !DILocation(line: 1826, column: 16, scope: !4735)
!4738 = !DILocalVariable(name: "x1", scope: !4735, file: !3, line: 1827, type: !1191)
!4739 = !DILocation(line: 1827, column: 11, scope: !4735)
!4740 = !DILocation(line: 1827, column: 16, scope: !4735)
!4741 = !DILocation(line: 1829, column: 11, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 1829, column: 11)
!4743 = !DILocation(line: 1829, column: 24, scope: !4742)
!4744 = !DILocation(line: 1829, column: 11, scope: !4735)
!4745 = !DILocalVariable(name: "y0", scope: !4746, file: !3, line: 1833, type: !1191)
!4746 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 1830, column: 2)
!4747 = !DILocation(line: 1833, column: 8, scope: !4746)
!4748 = !DILocation(line: 1833, column: 13, scope: !4746)
!4749 = !DILocalVariable(name: "y1", scope: !4746, file: !3, line: 1834, type: !1191)
!4750 = !DILocation(line: 1834, column: 8, scope: !4746)
!4751 = !DILocation(line: 1834, column: 13, scope: !4746)
!4752 = !DILocation(line: 1836, column: 32, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 1836, column: 8)
!4754 = !DILocation(line: 1836, column: 36, scope: !4753)
!4755 = !DILocation(line: 1836, column: 8, scope: !4753)
!4756 = !DILocation(line: 1836, column: 8, scope: !4746)
!4757 = !DILocation(line: 1837, column: 33, scope: !4753)
!4758 = !DILocation(line: 1837, column: 40, scope: !4753)
!4759 = !DILocation(line: 1837, column: 44, scope: !4753)
!4760 = !DILocation(line: 1837, column: 51, scope: !4753)
!4761 = !DILocation(line: 1837, column: 55, scope: !4753)
!4762 = !DILocation(line: 1837, column: 13, scope: !4753)
!4763 = !DILocation(line: 1837, column: 6, scope: !4753)
!4764 = !DILocation(line: 1838, column: 32, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 1838, column: 8)
!4766 = !DILocation(line: 1838, column: 36, scope: !4765)
!4767 = !DILocation(line: 1838, column: 8, scope: !4765)
!4768 = !DILocation(line: 1838, column: 8, scope: !4746)
!4769 = !DILocation(line: 1839, column: 33, scope: !4765)
!4770 = !DILocation(line: 1839, column: 40, scope: !4765)
!4771 = !DILocation(line: 1839, column: 44, scope: !4765)
!4772 = !DILocation(line: 1839, column: 51, scope: !4765)
!4773 = !DILocation(line: 1839, column: 55, scope: !4765)
!4774 = !DILocation(line: 1839, column: 13, scope: !4765)
!4775 = !DILocation(line: 1839, column: 6, scope: !4765)
!4776 = !DILocation(line: 1840, column: 8, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 1840, column: 8)
!4778 = !DILocation(line: 1840, column: 8, scope: !4746)
!4779 = !DILocation(line: 1842, column: 12, scope: !4780)
!4780 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 1842, column: 12)
!4781 = distinct !DILexicalBlock(scope: !4777, file: !3, line: 1841, column: 6)
!4782 = !DILocation(line: 1842, column: 12, scope: !4781)
!4783 = !DILocation(line: 1843, column: 30, scope: !4780)
!4784 = !DILocation(line: 1843, column: 37, scope: !4780)
!4785 = !DILocation(line: 1843, column: 41, scope: !4780)
!4786 = !DILocation(line: 1843, column: 48, scope: !4780)
!4787 = !DILocation(line: 1844, column: 9, scope: !4780)
!4788 = !DILocation(line: 1844, column: 13, scope: !4780)
!4789 = !DILocation(line: 1844, column: 11, scope: !4780)
!4790 = !DILocation(line: 1844, column: 27, scope: !4780)
!4791 = !DILocation(line: 1844, column: 25, scope: !4780)
!4792 = !DILocation(line: 1843, column: 10, scope: !4780)
!4793 = !DILocation(line: 1843, column: 3, scope: !4780)
!4794 = !DILocation(line: 1846, column: 30, scope: !4780)
!4795 = !DILocation(line: 1846, column: 37, scope: !4780)
!4796 = !DILocation(line: 1846, column: 41, scope: !4780)
!4797 = !DILocation(line: 1846, column: 48, scope: !4780)
!4798 = !DILocation(line: 1847, column: 9, scope: !4780)
!4799 = !DILocation(line: 1847, column: 13, scope: !4780)
!4800 = !DILocation(line: 1847, column: 11, scope: !4780)
!4801 = !DILocation(line: 1846, column: 10, scope: !4780)
!4802 = !DILocation(line: 1846, column: 3, scope: !4780)
!4803 = !DILocation(line: 1849, column: 13, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4777, file: !3, line: 1849, column: 13)
!4805 = !DILocation(line: 1849, column: 13, scope: !4777)
!4806 = !DILocation(line: 1850, column: 33, scope: !4804)
!4807 = !DILocation(line: 1850, column: 40, scope: !4804)
!4808 = !DILocation(line: 1850, column: 43, scope: !4804)
!4809 = !DILocation(line: 1850, column: 50, scope: !4804)
!4810 = !DILocation(line: 1850, column: 54, scope: !4804)
!4811 = !DILocation(line: 1850, column: 58, scope: !4804)
!4812 = !DILocation(line: 1850, column: 56, scope: !4804)
!4813 = !DILocation(line: 1850, column: 13, scope: !4804)
!4814 = !DILocation(line: 1850, column: 6, scope: !4804)
!4815 = !DILocation(line: 1852, column: 4, scope: !4746)
!4816 = !DILocation(line: 1854, column: 16, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 1854, column: 16)
!4818 = !DILocation(line: 1854, column: 16, scope: !4742)
!4819 = !DILocation(line: 1855, column: 29, scope: !4817)
!4820 = !DILocation(line: 1855, column: 36, scope: !4817)
!4821 = !DILocation(line: 1855, column: 40, scope: !4817)
!4822 = !DILocation(line: 1855, column: 47, scope: !4817)
!4823 = !DILocation(line: 1855, column: 50, scope: !4817)
!4824 = !DILocation(line: 1855, column: 54, scope: !4817)
!4825 = !DILocation(line: 1855, column: 52, scope: !4817)
!4826 = !DILocation(line: 1855, column: 9, scope: !4817)
!4827 = !DILocation(line: 1855, column: 2, scope: !4817)
!4828 = !DILocation(line: 1856, column: 5, scope: !4735)
!4829 = !DILocation(line: 1857, column: 12, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 1857, column: 12)
!4831 = !DILocation(line: 1857, column: 25, scope: !4830)
!4832 = !DILocation(line: 1857, column: 12, scope: !4731)
!4833 = !DILocalVariable(name: "y0", scope: !4834, file: !3, line: 1861, type: !1191)
!4834 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 1858, column: 5)
!4835 = !DILocation(line: 1861, column: 11, scope: !4834)
!4836 = !DILocation(line: 1861, column: 16, scope: !4834)
!4837 = !DILocalVariable(name: "y1", scope: !4834, file: !3, line: 1862, type: !1191)
!4838 = !DILocation(line: 1862, column: 11, scope: !4834)
!4839 = !DILocation(line: 1862, column: 16, scope: !4834)
!4840 = !DILocation(line: 1864, column: 11, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 1864, column: 11)
!4842 = !DILocation(line: 1864, column: 11, scope: !4834)
!4843 = !DILocation(line: 1865, column: 29, scope: !4841)
!4844 = !DILocation(line: 1865, column: 36, scope: !4841)
!4845 = !DILocation(line: 1865, column: 39, scope: !4841)
!4846 = !DILocation(line: 1865, column: 46, scope: !4841)
!4847 = !DILocation(line: 1865, column: 50, scope: !4841)
!4848 = !DILocation(line: 1865, column: 54, scope: !4841)
!4849 = !DILocation(line: 1865, column: 52, scope: !4841)
!4850 = !DILocation(line: 1865, column: 9, scope: !4841)
!4851 = !DILocation(line: 1865, column: 2, scope: !4841)
!4852 = !DILocation(line: 1867, column: 2, scope: !4841)
!4853 = !DILocation(line: 1870, column: 7, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1870, column: 7)
!4855 = !DILocation(line: 1870, column: 23, scope: !4854)
!4856 = !DILocation(line: 1870, column: 20, scope: !4854)
!4857 = !DILocation(line: 1870, column: 7, scope: !4631)
!4858 = !DILocation(line: 1871, column: 13, scope: !4854)
!4859 = !DILocation(line: 1871, column: 5, scope: !4854)
!4860 = !DILocalVariable(name: "x0", scope: !4861, file: !3, line: 1878, type: !1191)
!4861 = distinct !DILexicalBlock(scope: !4862, file: !3, line: 1874, column: 2)
!4862 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 1872, column: 7)
!4863 = !DILocation(line: 1878, column: 8, scope: !4861)
!4864 = !DILocalVariable(name: "y0", scope: !4861, file: !3, line: 1878, type: !1191)
!4865 = !DILocation(line: 1878, column: 12, scope: !4861)
!4866 = !DILocalVariable(name: "x1", scope: !4861, file: !3, line: 1879, type: !1191)
!4867 = !DILocation(line: 1879, column: 8, scope: !4861)
!4868 = !DILocation(line: 1879, column: 24, scope: !4861)
!4869 = !DILocation(line: 1879, column: 13, scope: !4861)
!4870 = !DILocalVariable(name: "y1", scope: !4861, file: !3, line: 1880, type: !1191)
!4871 = !DILocation(line: 1880, column: 8, scope: !4861)
!4872 = !DILocation(line: 1880, column: 24, scope: !4861)
!4873 = !DILocation(line: 1880, column: 13, scope: !4861)
!4874 = !DILocation(line: 1881, column: 34, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1881, column: 8)
!4876 = !DILocation(line: 1881, column: 38, scope: !4875)
!4877 = !DILocation(line: 1881, column: 10, scope: !4875)
!4878 = !DILocation(line: 1881, column: 8, scope: !4861)
!4879 = !DILocation(line: 1882, column: 6, scope: !4875)
!4880 = !DILocation(line: 1883, column: 20, scope: !4861)
!4881 = !DILocation(line: 1883, column: 9, scope: !4861)
!4882 = !DILocation(line: 1883, column: 7, scope: !4861)
!4883 = !DILocation(line: 1884, column: 20, scope: !4861)
!4884 = !DILocation(line: 1884, column: 9, scope: !4861)
!4885 = !DILocation(line: 1884, column: 7, scope: !4861)
!4886 = !DILocation(line: 1885, column: 32, scope: !4887)
!4887 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1885, column: 8)
!4888 = !DILocation(line: 1885, column: 36, scope: !4887)
!4889 = !DILocation(line: 1885, column: 8, scope: !4887)
!4890 = !DILocation(line: 1885, column: 8, scope: !4861)
!4891 = !DILocation(line: 1886, column: 14, scope: !4887)
!4892 = !DILocation(line: 1886, column: 20, scope: !4887)
!4893 = !DILocation(line: 1886, column: 25, scope: !4887)
!4894 = !DILocation(line: 1886, column: 28, scope: !4887)
!4895 = !DILocation(line: 1886, column: 34, scope: !4887)
!4896 = !DILocation(line: 1887, column: 7, scope: !4887)
!4897 = !DILocation(line: 1887, column: 11, scope: !4887)
!4898 = !DILocation(line: 1887, column: 13, scope: !4887)
!4899 = !DILocation(line: 1887, column: 18, scope: !4887)
!4900 = !DILocation(line: 1887, column: 21, scope: !4887)
!4901 = !DILocation(line: 1887, column: 29, scope: !4887)
!4902 = !DILocation(line: 1887, column: 27, scope: !4887)
!4903 = !DILocation(line: 1887, column: 32, scope: !4887)
!4904 = !DILocation(line: 1887, column: 36, scope: !4887)
!4905 = !DILocation(line: 1887, column: 38, scope: !4887)
!4906 = !DILocation(line: 1887, column: 42, scope: !4887)
!4907 = !DILocation(line: 1887, column: 45, scope: !4887)
!4908 = !DILocation(line: 1887, column: 51, scope: !4887)
!4909 = !DILocation(line: 1887, column: 50, scope: !4887)
!4910 = !DILocation(line: 1887, column: 53, scope: !4887)
!4911 = !DILocation(line: 0, scope: !4887)
!4912 = !DILocation(line: 1886, column: 6, scope: !4887)
!4913 = !DILocation(line: 1890, column: 9, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1890, column: 8)
!4915 = !DILocation(line: 1890, column: 8, scope: !4861)
!4916 = !DILocation(line: 1891, column: 6, scope: !4914)
!4917 = !DILocation(line: 1892, column: 13, scope: !4861)
!4918 = !DILocation(line: 1892, column: 10, scope: !4861)
!4919 = !DILocation(line: 1893, column: 13, scope: !4861)
!4920 = !DILocation(line: 1893, column: 10, scope: !4861)
!4921 = !DILocation(line: 1894, column: 9, scope: !4861)
!4922 = !DILocation(line: 1894, column: 6, scope: !4861)
!4923 = !DILocation(line: 1895, column: 31, scope: !4861)
!4924 = !DILocation(line: 1895, column: 38, scope: !4861)
!4925 = !DILocation(line: 1895, column: 42, scope: !4861)
!4926 = !DILocation(line: 1895, column: 49, scope: !4861)
!4927 = !DILocation(line: 1895, column: 53, scope: !4861)
!4928 = !DILocation(line: 1895, column: 11, scope: !4861)
!4929 = !DILocation(line: 1895, column: 4, scope: !4861)
!4930 = !DILocation(line: 1899, column: 2, scope: !4862)
!4931 = !DILocation(line: 1900, column: 7, scope: !4862)
!4932 = !DILocation(line: 1906, column: 7, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1906, column: 7)
!4934 = !DILocation(line: 1906, column: 20, scope: !4933)
!4935 = !DILocation(line: 1906, column: 27, scope: !4933)
!4936 = !DILocation(line: 1906, column: 30, scope: !4933)
!4937 = !DILocation(line: 1906, column: 7, scope: !4631)
!4938 = !DILocation(line: 1908, column: 11, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 1908, column: 11)
!4940 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1907, column: 5)
!4941 = !DILocation(line: 1908, column: 24, scope: !4939)
!4942 = !DILocation(line: 1908, column: 31, scope: !4939)
!4943 = !DILocation(line: 1908, column: 34, scope: !4939)
!4944 = !DILocation(line: 1908, column: 43, scope: !4939)
!4945 = !DILocation(line: 1908, column: 42, scope: !4939)
!4946 = !DILocation(line: 1908, column: 40, scope: !4939)
!4947 = !DILocation(line: 1908, column: 11, scope: !4940)
!4948 = !DILocation(line: 1909, column: 8, scope: !4939)
!4949 = !DILocation(line: 1909, column: 2, scope: !4939)
!4950 = !DILocation(line: 1910, column: 34, scope: !4940)
!4951 = !DILocation(line: 1910, column: 52, scope: !4940)
!4952 = !DILocation(line: 1910, column: 41, scope: !4940)
!4953 = !DILocation(line: 1910, column: 66, scope: !4940)
!4954 = !DILocation(line: 1910, column: 73, scope: !4940)
!4955 = !DILocation(line: 1910, column: 76, scope: !4940)
!4956 = !DILocation(line: 1910, column: 14, scope: !4940)
!4957 = !DILocation(line: 1910, column: 7, scope: !4940)
!4958 = !DILocation(line: 1912, column: 7, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1912, column: 7)
!4960 = !DILocation(line: 1912, column: 20, scope: !4959)
!4961 = !DILocation(line: 1912, column: 27, scope: !4959)
!4962 = !DILocation(line: 1912, column: 30, scope: !4959)
!4963 = !DILocation(line: 1912, column: 7, scope: !4631)
!4964 = !DILocation(line: 1918, column: 11, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 1918, column: 11)
!4966 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 1913, column: 5)
!4967 = !DILocation(line: 1918, column: 24, scope: !4965)
!4968 = !DILocation(line: 1918, column: 31, scope: !4965)
!4969 = !DILocation(line: 1918, column: 34, scope: !4965)
!4970 = !DILocation(line: 1918, column: 43, scope: !4965)
!4971 = !DILocation(line: 1918, column: 42, scope: !4965)
!4972 = !DILocation(line: 1918, column: 40, scope: !4965)
!4973 = !DILocation(line: 1918, column: 11, scope: !4966)
!4974 = !DILocation(line: 1919, column: 8, scope: !4965)
!4975 = !DILocation(line: 1919, column: 2, scope: !4965)
!4976 = !DILocation(line: 1920, column: 34, scope: !4966)
!4977 = !DILocation(line: 1920, column: 41, scope: !4966)
!4978 = !DILocation(line: 1920, column: 44, scope: !4966)
!4979 = !DILocation(line: 1920, column: 62, scope: !4966)
!4980 = !DILocation(line: 1920, column: 51, scope: !4966)
!4981 = !DILocation(line: 1920, column: 76, scope: !4966)
!4982 = !DILocation(line: 1920, column: 14, scope: !4966)
!4983 = !DILocation(line: 1920, column: 7, scope: !4966)
!4984 = !DILocation(line: 1923, column: 7, scope: !4985)
!4985 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1923, column: 7)
!4986 = !DILocation(line: 1923, column: 7, scope: !4631)
!4987 = !DILocation(line: 1925, column: 11, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1925, column: 11)
!4989 = distinct !DILexicalBlock(scope: !4985, file: !3, line: 1924, column: 5)
!4990 = !DILocation(line: 1925, column: 27, scope: !4988)
!4991 = !DILocation(line: 1925, column: 30, scope: !4988)
!4992 = !DILocation(line: 1925, column: 11, scope: !4989)
!4993 = !DILocation(line: 1927, column: 10, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 1926, column: 2)
!4995 = !DILocation(line: 1927, column: 23, scope: !4994)
!4996 = !DILocation(line: 1927, column: 21, scope: !4994)
!4997 = !DILocation(line: 1927, column: 6, scope: !4994)
!4998 = !DILocation(line: 1928, column: 12, scope: !4994)
!4999 = !DILocation(line: 1928, column: 18, scope: !4994)
!5000 = !DILocation(line: 1928, column: 23, scope: !4994)
!5001 = !DILocation(line: 1928, column: 26, scope: !4994)
!5002 = !DILocation(line: 1928, column: 32, scope: !4994)
!5003 = !DILocation(line: 1929, column: 5, scope: !4994)
!5004 = !DILocation(line: 1929, column: 9, scope: !4994)
!5005 = !DILocation(line: 1929, column: 11, scope: !4994)
!5006 = !DILocation(line: 1929, column: 16, scope: !4994)
!5007 = !DILocation(line: 1929, column: 19, scope: !4994)
!5008 = !DILocation(line: 1929, column: 27, scope: !4994)
!5009 = !DILocation(line: 1929, column: 25, scope: !4994)
!5010 = !DILocation(line: 1929, column: 30, scope: !4994)
!5011 = !DILocation(line: 1929, column: 34, scope: !4994)
!5012 = !DILocation(line: 1929, column: 36, scope: !4994)
!5013 = !DILocation(line: 1929, column: 40, scope: !4994)
!5014 = !DILocation(line: 1929, column: 43, scope: !4994)
!5015 = !DILocation(line: 1929, column: 49, scope: !4994)
!5016 = !DILocation(line: 1929, column: 48, scope: !4994)
!5017 = !DILocation(line: 1929, column: 51, scope: !4994)
!5018 = !DILocation(line: 0, scope: !4994)
!5019 = !DILocation(line: 1928, column: 4, scope: !4994)
!5020 = !DILocation(line: 1932, column: 11, scope: !5021)
!5021 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1932, column: 11)
!5022 = !DILocation(line: 1932, column: 24, scope: !5021)
!5023 = !DILocation(line: 1932, column: 11, scope: !4989)
!5024 = !DILocation(line: 1934, column: 8, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 1934, column: 8)
!5026 = distinct !DILexicalBlock(scope: !5021, file: !3, line: 1933, column: 2)
!5027 = !DILocation(line: 1934, column: 21, scope: !5025)
!5028 = !DILocation(line: 1934, column: 8, scope: !5026)
!5029 = !DILocation(line: 1935, column: 33, scope: !5025)
!5030 = !DILocation(line: 1935, column: 51, scope: !5025)
!5031 = !DILocation(line: 1935, column: 40, scope: !5025)
!5032 = !DILocation(line: 1936, column: 12, scope: !5025)
!5033 = !DILocation(line: 1936, column: 30, scope: !5025)
!5034 = !DILocation(line: 1936, column: 19, scope: !5025)
!5035 = !DILocation(line: 1936, column: 44, scope: !5025)
!5036 = !DILocation(line: 1935, column: 13, scope: !5025)
!5037 = !DILocation(line: 1935, column: 6, scope: !5025)
!5038 = !DILocation(line: 1938, column: 33, scope: !5025)
!5039 = !DILocation(line: 1938, column: 51, scope: !5025)
!5040 = !DILocation(line: 1938, column: 40, scope: !5025)
!5041 = !DILocation(line: 1939, column: 12, scope: !5025)
!5042 = !DILocation(line: 1939, column: 19, scope: !5025)
!5043 = !DILocation(line: 1939, column: 22, scope: !5025)
!5044 = !DILocation(line: 1938, column: 13, scope: !5025)
!5045 = !DILocation(line: 1938, column: 6, scope: !5025)
!5046 = !DILocation(line: 1941, column: 11, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1941, column: 11)
!5048 = !DILocation(line: 1941, column: 24, scope: !5047)
!5049 = !DILocation(line: 1941, column: 11, scope: !4989)
!5050 = !DILocation(line: 1942, column: 29, scope: !5047)
!5051 = !DILocation(line: 1942, column: 36, scope: !5047)
!5052 = !DILocation(line: 1942, column: 39, scope: !5047)
!5053 = !DILocation(line: 1943, column: 19, scope: !5047)
!5054 = !DILocation(line: 1943, column: 8, scope: !5047)
!5055 = !DILocation(line: 1943, column: 33, scope: !5047)
!5056 = !DILocation(line: 1942, column: 9, scope: !5047)
!5057 = !DILocation(line: 1942, column: 2, scope: !5047)
!5058 = !DILocation(line: 1945, column: 11, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1945, column: 11)
!5060 = !DILocation(line: 1945, column: 11, scope: !4989)
!5061 = !DILocation(line: 1946, column: 10, scope: !5059)
!5062 = !DILocation(line: 1946, column: 16, scope: !5059)
!5063 = !DILocation(line: 1946, column: 21, scope: !5059)
!5064 = !DILocation(line: 1946, column: 24, scope: !5059)
!5065 = !DILocation(line: 1946, column: 30, scope: !5059)
!5066 = !DILocation(line: 1947, column: 3, scope: !5059)
!5067 = !DILocation(line: 1947, column: 31, scope: !5059)
!5068 = !DILocation(line: 1947, column: 34, scope: !5059)
!5069 = !DILocation(line: 1947, column: 7, scope: !5059)
!5070 = !DILocation(line: 1948, column: 7, scope: !5059)
!5071 = !DILocation(line: 1948, column: 12, scope: !5059)
!5072 = !DILocation(line: 1948, column: 14, scope: !5059)
!5073 = !DILocation(line: 1948, column: 19, scope: !5059)
!5074 = !DILocation(line: 1948, column: 22, scope: !5059)
!5075 = !DILocation(line: 1948, column: 30, scope: !5059)
!5076 = !DILocation(line: 1948, column: 28, scope: !5059)
!5077 = !DILocation(line: 1948, column: 33, scope: !5059)
!5078 = !DILocation(line: 1948, column: 37, scope: !5059)
!5079 = !DILocation(line: 1948, column: 39, scope: !5059)
!5080 = !DILocation(line: 1948, column: 43, scope: !5059)
!5081 = !DILocation(line: 1948, column: 46, scope: !5059)
!5082 = !DILocation(line: 1948, column: 52, scope: !5059)
!5083 = !DILocation(line: 1948, column: 51, scope: !5059)
!5084 = !DILocation(line: 1948, column: 54, scope: !5059)
!5085 = !DILocation(line: 0, scope: !5059)
!5086 = !DILocation(line: 1946, column: 2, scope: !5059)
!5087 = !DILocation(line: 1950, column: 7, scope: !4989)
!5088 = !DILocation(line: 1953, column: 3, scope: !4631)
!5089 = !DILocation(line: 1954, column: 1, scope: !4631)
!5090 = distinct !DISubprogram(name: "mems_in_disjoint_alias_sets_p", scope: !3, file: !3, line: 369, type: !3793, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5091 = !DILocalVariable(name: "mem1", arg: 1, scope: !5090, file: !3, line: 369, type: !2607)
!5092 = !DILocation(line: 369, column: 42, scope: !5090)
!5093 = !DILocalVariable(name: "mem2", arg: 2, scope: !5090, file: !3, line: 369, type: !2607)
!5094 = !DILocation(line: 369, column: 58, scope: !5090)
!5095 = !DILocation(line: 378, column: 3, scope: !5090)
!5096 = !DILocation(line: 381, column: 35, scope: !5090)
!5097 = !DILocation(line: 381, column: 57, scope: !5090)
!5098 = !DILocation(line: 381, column: 12, scope: !5090)
!5099 = !DILocation(line: 381, column: 10, scope: !5090)
!5100 = !DILocation(line: 381, column: 3, scope: !5090)
!5101 = distinct !DISubprogram(name: "aliases_everything_p", scope: !3, file: !3, line: 2021, type: !5102, scopeLine: 2022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5102 = !DISubroutineType(types: !5103)
!5103 = !{!1189, !2607}
!5104 = !DILocalVariable(name: "mem", arg: 1, scope: !5101, file: !3, line: 2021, type: !2607)
!5105 = !DILocation(line: 2021, column: 33, scope: !5101)
!5106 = !DILocation(line: 2023, column: 7, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 2023, column: 7)
!5108 = !DILocation(line: 2023, column: 32, scope: !5107)
!5109 = !DILocation(line: 2023, column: 7, scope: !5101)
!5110 = !DILocation(line: 2026, column: 5, scope: !5107)
!5111 = !DILocation(line: 2028, column: 3, scope: !5101)
!5112 = !DILocation(line: 2029, column: 1, scope: !5101)
!5113 = distinct !DISubprogram(name: "fixed_scalar_and_varying_struct_p", scope: !3, file: !3, line: 1993, type: !5114, scopeLine: 1996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5114 = !DISubroutineType(types: !5115)
!5115 = !{!2607, !2607, !2607, !1191, !1191, !4323}
!5116 = !DILocalVariable(name: "mem1", arg: 1, scope: !5113, file: !3, line: 1993, type: !2607)
!5117 = !DILocation(line: 1993, column: 46, scope: !5113)
!5118 = !DILocalVariable(name: "mem2", arg: 2, scope: !5113, file: !3, line: 1993, type: !2607)
!5119 = !DILocation(line: 1993, column: 62, scope: !5113)
!5120 = !DILocalVariable(name: "mem1_addr", arg: 3, scope: !5113, file: !3, line: 1993, type: !1191)
!5121 = !DILocation(line: 1993, column: 72, scope: !5113)
!5122 = !DILocalVariable(name: "mem2_addr", arg: 4, scope: !5113, file: !3, line: 1994, type: !1191)
!5123 = !DILocation(line: 1994, column: 12, scope: !5113)
!5124 = !DILocalVariable(name: "varies_p", arg: 5, scope: !5113, file: !3, line: 1995, type: !4323)
!5125 = !DILocation(line: 1995, column: 15, scope: !5113)
!5126 = !DILocation(line: 1997, column: 9, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1997, column: 7)
!5128 = !DILocation(line: 1997, column: 7, scope: !5113)
!5129 = !DILocation(line: 1998, column: 5, scope: !5127)
!5130 = !DILocation(line: 2000, column: 7, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 2000, column: 7)
!5132 = !DILocation(line: 2001, column: 7, scope: !5131)
!5133 = !DILocation(line: 2001, column: 10, scope: !5131)
!5134 = !DILocation(line: 2001, column: 30, scope: !5131)
!5135 = !DILocation(line: 2001, column: 33, scope: !5131)
!5136 = !DILocation(line: 2002, column: 7, scope: !5131)
!5137 = !DILocation(line: 2002, column: 11, scope: !5131)
!5138 = !DILocation(line: 2002, column: 21, scope: !5131)
!5139 = !DILocation(line: 2002, column: 35, scope: !5131)
!5140 = !DILocation(line: 2002, column: 38, scope: !5131)
!5141 = !DILocation(line: 2002, column: 48, scope: !5131)
!5142 = !DILocation(line: 2000, column: 7, scope: !5113)
!5143 = !DILocation(line: 2005, column: 12, scope: !5131)
!5144 = !DILocation(line: 2005, column: 5, scope: !5131)
!5145 = !DILocation(line: 2007, column: 7, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 2007, column: 7)
!5147 = !DILocation(line: 2008, column: 7, scope: !5146)
!5148 = !DILocation(line: 2008, column: 10, scope: !5146)
!5149 = !DILocation(line: 2008, column: 33, scope: !5146)
!5150 = !DILocation(line: 2008, column: 36, scope: !5146)
!5151 = !DILocation(line: 2009, column: 7, scope: !5146)
!5152 = !DILocation(line: 2009, column: 10, scope: !5146)
!5153 = !DILocation(line: 2009, column: 20, scope: !5146)
!5154 = !DILocation(line: 2009, column: 34, scope: !5146)
!5155 = !DILocation(line: 2009, column: 38, scope: !5146)
!5156 = !DILocation(line: 2009, column: 48, scope: !5146)
!5157 = !DILocation(line: 2007, column: 7, scope: !5113)
!5158 = !DILocation(line: 2012, column: 12, scope: !5146)
!5159 = !DILocation(line: 2012, column: 5, scope: !5146)
!5160 = !DILocation(line: 2014, column: 3, scope: !5113)
!5161 = !DILocation(line: 2015, column: 1, scope: !5113)
!5162 = distinct !DISubprogram(name: "rtx_refs_may_alias_p", scope: !3, file: !3, line: 345, type: !5163, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5163 = !DISubroutineType(types: !5164)
!5164 = !{!1445, !2607, !2607, !1445}
!5165 = !DILocalVariable(name: "x", arg: 1, scope: !5162, file: !3, line: 345, type: !2607)
!5166 = !DILocation(line: 345, column: 33, scope: !5162)
!5167 = !DILocalVariable(name: "mem", arg: 2, scope: !5162, file: !3, line: 345, type: !2607)
!5168 = !DILocation(line: 345, column: 46, scope: !5162)
!5169 = !DILocalVariable(name: "tbaa_p", arg: 3, scope: !5162, file: !3, line: 345, type: !1445)
!5170 = !DILocation(line: 345, column: 56, scope: !5162)
!5171 = !DILocalVariable(name: "ref1", scope: !5162, file: !3, line: 347, type: !5172)
!5172 = !DIDerivedType(tag: DW_TAG_typedef, name: "ao_ref", file: !1993, line: 86, baseType: !5173)
!5173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ao_ref_s", file: !1993, line: 63, size: 384, elements: !5174)
!5174 = !{!5175, !5176, !5177, !5178, !5179, !5180, !5181}
!5175 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !5173, file: !1993, line: 67, baseType: !1332, size: 64)
!5176 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5173, file: !1993, line: 73, baseType: !1332, size: 64, offset: 64)
!5177 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !5173, file: !1993, line: 75, baseType: !1301, size: 64, offset: 128)
!5178 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5173, file: !1993, line: 77, baseType: !1301, size: 64, offset: 192)
!5179 = !DIDerivedType(tag: DW_TAG_member, name: "max_size", scope: !5173, file: !1993, line: 79, baseType: !1301, size: 64, offset: 256)
!5180 = !DIDerivedType(tag: DW_TAG_member, name: "ref_alias_set", scope: !5173, file: !1993, line: 82, baseType: !2132, size: 32, offset: 320)
!5181 = !DIDerivedType(tag: DW_TAG_member, name: "base_alias_set", scope: !5173, file: !1993, line: 85, baseType: !2132, size: 32, offset: 352)
!5182 = !DILocation(line: 347, column: 10, scope: !5162)
!5183 = !DILocalVariable(name: "ref2", scope: !5162, file: !3, line: 347, type: !5172)
!5184 = !DILocation(line: 347, column: 16, scope: !5162)
!5185 = !DILocation(line: 349, column: 32, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5162, file: !3, line: 349, column: 7)
!5187 = !DILocation(line: 349, column: 8, scope: !5186)
!5188 = !DILocation(line: 350, column: 7, scope: !5186)
!5189 = !DILocation(line: 350, column: 35, scope: !5186)
!5190 = !DILocation(line: 350, column: 11, scope: !5186)
!5191 = !DILocation(line: 349, column: 7, scope: !5162)
!5192 = !DILocation(line: 351, column: 5, scope: !5186)
!5193 = !DILocation(line: 353, column: 44, scope: !5162)
!5194 = !DILocation(line: 353, column: 10, scope: !5162)
!5195 = !DILocation(line: 353, column: 3, scope: !5162)
!5196 = !DILocation(line: 354, column: 1, scope: !5162)
!5197 = distinct !DISubprogram(name: "canon_true_dependence", scope: !3, file: !3, line: 2395, type: !5198, scopeLine: 2397, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5198 = !DISubroutineType(types: !5199)
!5199 = !{!1189, !2607, !5, !1191, !2607, !1191, !4323}
!5200 = !DILocalVariable(name: "mem", arg: 1, scope: !5197, file: !3, line: 2395, type: !2607)
!5201 = !DILocation(line: 2395, column: 34, scope: !5197)
!5202 = !DILocalVariable(name: "mem_mode", arg: 2, scope: !5197, file: !3, line: 2395, type: !5)
!5203 = !DILocation(line: 2395, column: 57, scope: !5197)
!5204 = !DILocalVariable(name: "mem_addr", arg: 3, scope: !5197, file: !3, line: 2395, type: !1191)
!5205 = !DILocation(line: 2395, column: 71, scope: !5197)
!5206 = !DILocalVariable(name: "x", arg: 4, scope: !5197, file: !3, line: 2396, type: !2607)
!5207 = !DILocation(line: 2396, column: 20, scope: !5197)
!5208 = !DILocalVariable(name: "x_addr", arg: 5, scope: !5197, file: !3, line: 2396, type: !1191)
!5209 = !DILocation(line: 2396, column: 27, scope: !5197)
!5210 = !DILocalVariable(name: "varies", arg: 6, scope: !5197, file: !3, line: 2396, type: !4323)
!5211 = !DILocation(line: 2396, column: 42, scope: !5197)
!5212 = !DILocalVariable(name: "ret", scope: !5197, file: !3, line: 2398, type: !1189)
!5213 = !DILocation(line: 2398, column: 7, scope: !5197)
!5214 = !DILocation(line: 2400, column: 7, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2400, column: 7)
!5216 = !DILocation(line: 2400, column: 26, scope: !5215)
!5217 = !DILocation(line: 2400, column: 29, scope: !5215)
!5218 = !DILocation(line: 2400, column: 7, scope: !5197)
!5219 = !DILocation(line: 2401, column: 5, scope: !5215)
!5220 = !DILocation(line: 2405, column: 7, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2405, column: 7)
!5222 = !DILocation(line: 2405, column: 20, scope: !5221)
!5223 = !DILocation(line: 2405, column: 31, scope: !5221)
!5224 = !DILocation(line: 2405, column: 34, scope: !5221)
!5225 = !DILocation(line: 2405, column: 57, scope: !5221)
!5226 = !DILocation(line: 2405, column: 7, scope: !5197)
!5227 = !DILocation(line: 2406, column: 5, scope: !5221)
!5228 = !DILocation(line: 2407, column: 7, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2407, column: 7)
!5230 = !DILocation(line: 2407, column: 22, scope: !5229)
!5231 = !DILocation(line: 2407, column: 33, scope: !5229)
!5232 = !DILocation(line: 2407, column: 36, scope: !5229)
!5233 = !DILocation(line: 2407, column: 61, scope: !5229)
!5234 = !DILocation(line: 2407, column: 7, scope: !5197)
!5235 = !DILocation(line: 2408, column: 5, scope: !5229)
!5236 = !DILocation(line: 2409, column: 7, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2409, column: 7)
!5238 = !DILocation(line: 2409, column: 25, scope: !5237)
!5239 = !DILocation(line: 2410, column: 7, scope: !5237)
!5240 = !DILocation(line: 2410, column: 10, scope: !5237)
!5241 = !DILocation(line: 2410, column: 30, scope: !5237)
!5242 = !DILocation(line: 2409, column: 7, scope: !5197)
!5243 = !DILocation(line: 2411, column: 5, scope: !5237)
!5244 = !DILocation(line: 2416, column: 7, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2416, column: 7)
!5246 = !DILocation(line: 2416, column: 7, scope: !5197)
!5247 = !DILocation(line: 2417, column: 5, scope: !5245)
!5248 = !DILocation(line: 2422, column: 7, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2422, column: 7)
!5250 = !DILocation(line: 2422, column: 31, scope: !5249)
!5251 = !DILocation(line: 2422, column: 28, scope: !5249)
!5252 = !DILocation(line: 2422, column: 7, scope: !5197)
!5253 = !DILocation(line: 2423, column: 5, scope: !5249)
!5254 = !DILocation(line: 2425, column: 9, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2425, column: 7)
!5256 = !DILocation(line: 2425, column: 7, scope: !5197)
!5257 = !DILocation(line: 2426, column: 24, scope: !5255)
!5258 = !DILocation(line: 2426, column: 14, scope: !5255)
!5259 = !DILocation(line: 2426, column: 12, scope: !5255)
!5260 = !DILocation(line: 2426, column: 5, scope: !5255)
!5261 = !DILocation(line: 2428, column: 27, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2428, column: 7)
!5263 = !DILocation(line: 2428, column: 35, scope: !5262)
!5264 = !DILocation(line: 2428, column: 45, scope: !5262)
!5265 = !DILocation(line: 2428, column: 59, scope: !5262)
!5266 = !DILocation(line: 2428, column: 9, scope: !5262)
!5267 = !DILocation(line: 2428, column: 7, scope: !5197)
!5268 = !DILocation(line: 2429, column: 5, scope: !5262)
!5269 = !DILocation(line: 2431, column: 23, scope: !5197)
!5270 = !DILocation(line: 2431, column: 12, scope: !5197)
!5271 = !DILocation(line: 2431, column: 10, scope: !5197)
!5272 = !DILocation(line: 2432, column: 34, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2432, column: 7)
!5274 = !DILocation(line: 2432, column: 60, scope: !5273)
!5275 = !DILocation(line: 2433, column: 6, scope: !5273)
!5276 = !DILocation(line: 2433, column: 25, scope: !5273)
!5277 = !DILocation(line: 2432, column: 14, scope: !5273)
!5278 = !DILocation(line: 2432, column: 12, scope: !5273)
!5279 = !DILocation(line: 2433, column: 37, scope: !5273)
!5280 = !DILocation(line: 2432, column: 7, scope: !5197)
!5281 = !DILocation(line: 2434, column: 12, scope: !5273)
!5282 = !DILocation(line: 2434, column: 5, scope: !5273)
!5283 = !DILocation(line: 2436, column: 7, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2436, column: 7)
!5285 = !DILocation(line: 2436, column: 7, scope: !5197)
!5286 = !DILocation(line: 2437, column: 5, scope: !5284)
!5287 = !DILocation(line: 2439, column: 33, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2439, column: 7)
!5289 = !DILocation(line: 2439, column: 36, scope: !5288)
!5290 = !DILocation(line: 2439, column: 7, scope: !5288)
!5291 = !DILocation(line: 2439, column: 7, scope: !5197)
!5292 = !DILocation(line: 2440, column: 5, scope: !5288)
!5293 = !DILocation(line: 2442, column: 29, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2442, column: 7)
!5295 = !DILocation(line: 2442, column: 7, scope: !5294)
!5296 = !DILocation(line: 2442, column: 7, scope: !5197)
!5297 = !DILocation(line: 2443, column: 5, scope: !5294)
!5298 = !DILocation(line: 2447, column: 7, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2447, column: 7)
!5300 = !DILocation(line: 2447, column: 16, scope: !5299)
!5301 = !DILocation(line: 2447, column: 26, scope: !5299)
!5302 = !DILocation(line: 2447, column: 29, scope: !5299)
!5303 = !DILocation(line: 2447, column: 49, scope: !5299)
!5304 = !DILocation(line: 2447, column: 7, scope: !5197)
!5305 = !DILocation(line: 2448, column: 5, scope: !5299)
!5306 = !DILocation(line: 2452, column: 7, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2452, column: 7)
!5308 = !DILocation(line: 2452, column: 16, scope: !5307)
!5309 = !DILocation(line: 2452, column: 27, scope: !5307)
!5310 = !DILocation(line: 2452, column: 30, scope: !5307)
!5311 = !DILocation(line: 2452, column: 43, scope: !5307)
!5312 = !DILocation(line: 2452, column: 7, scope: !5197)
!5313 = !DILocation(line: 2453, column: 5, scope: !5307)
!5314 = !DILocation(line: 2455, column: 42, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 2455, column: 7)
!5316 = !DILocation(line: 2455, column: 47, scope: !5315)
!5317 = !DILocation(line: 2455, column: 50, scope: !5315)
!5318 = !DILocation(line: 2455, column: 60, scope: !5315)
!5319 = !DILocation(line: 2455, column: 68, scope: !5315)
!5320 = !DILocation(line: 2455, column: 7, scope: !5315)
!5321 = !DILocation(line: 2455, column: 7, scope: !5197)
!5322 = !DILocation(line: 2456, column: 5, scope: !5315)
!5323 = !DILocation(line: 2458, column: 32, scope: !5197)
!5324 = !DILocation(line: 2458, column: 35, scope: !5197)
!5325 = !DILocation(line: 2458, column: 10, scope: !5197)
!5326 = !DILocation(line: 2458, column: 3, scope: !5197)
!5327 = !DILocation(line: 2459, column: 1, scope: !5197)
!5328 = distinct !DISubprogram(name: "anti_dependence", scope: !3, file: !3, line: 2535, type: !3793, scopeLine: 2536, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5329 = !DILocalVariable(name: "mem", arg: 1, scope: !5328, file: !3, line: 2535, type: !2607)
!5330 = !DILocation(line: 2535, column: 28, scope: !5328)
!5331 = !DILocalVariable(name: "x", arg: 2, scope: !5328, file: !3, line: 2535, type: !2607)
!5332 = !DILocation(line: 2535, column: 43, scope: !5328)
!5333 = !DILocation(line: 2537, column: 30, scope: !5328)
!5334 = !DILocation(line: 2537, column: 35, scope: !5328)
!5335 = !DILocation(line: 2537, column: 10, scope: !5328)
!5336 = !DILocation(line: 2537, column: 3, scope: !5328)
!5337 = distinct !DISubprogram(name: "write_dependence_p", scope: !3, file: !3, line: 2465, type: !5338, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5338 = !DISubroutineType(types: !5339)
!5339 = !{!1189, !2607, !2607, !1189}
!5340 = !DILocalVariable(name: "mem", arg: 1, scope: !5337, file: !3, line: 2465, type: !2607)
!5341 = !DILocation(line: 2465, column: 31, scope: !5337)
!5342 = !DILocalVariable(name: "x", arg: 2, scope: !5337, file: !3, line: 2465, type: !2607)
!5343 = !DILocation(line: 2465, column: 46, scope: !5337)
!5344 = !DILocalVariable(name: "writep", arg: 3, scope: !5337, file: !3, line: 2465, type: !1189)
!5345 = !DILocation(line: 2465, column: 53, scope: !5337)
!5346 = !DILocalVariable(name: "x_addr", scope: !5337, file: !3, line: 2467, type: !1191)
!5347 = !DILocation(line: 2467, column: 7, scope: !5337)
!5348 = !DILocalVariable(name: "mem_addr", scope: !5337, file: !3, line: 2467, type: !1191)
!5349 = !DILocation(line: 2467, column: 15, scope: !5337)
!5350 = !DILocalVariable(name: "fixed_scalar", scope: !5337, file: !3, line: 2468, type: !2607)
!5351 = !DILocation(line: 2468, column: 13, scope: !5337)
!5352 = !DILocalVariable(name: "base", scope: !5337, file: !3, line: 2469, type: !1191)
!5353 = !DILocation(line: 2469, column: 7, scope: !5337)
!5354 = !DILocalVariable(name: "ret", scope: !5337, file: !3, line: 2470, type: !1189)
!5355 = !DILocation(line: 2470, column: 7, scope: !5337)
!5356 = !DILocation(line: 2472, column: 7, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2472, column: 7)
!5358 = !DILocation(line: 2472, column: 26, scope: !5357)
!5359 = !DILocation(line: 2472, column: 29, scope: !5357)
!5360 = !DILocation(line: 2472, column: 7, scope: !5337)
!5361 = !DILocation(line: 2473, column: 5, scope: !5357)
!5362 = !DILocation(line: 2477, column: 7, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2477, column: 7)
!5364 = !DILocation(line: 2477, column: 20, scope: !5363)
!5365 = !DILocation(line: 2477, column: 31, scope: !5363)
!5366 = !DILocation(line: 2477, column: 34, scope: !5363)
!5367 = !DILocation(line: 2477, column: 57, scope: !5363)
!5368 = !DILocation(line: 2477, column: 7, scope: !5337)
!5369 = !DILocation(line: 2478, column: 5, scope: !5363)
!5370 = !DILocation(line: 2479, column: 7, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2479, column: 7)
!5372 = !DILocation(line: 2479, column: 22, scope: !5371)
!5373 = !DILocation(line: 2479, column: 33, scope: !5371)
!5374 = !DILocation(line: 2479, column: 36, scope: !5371)
!5375 = !DILocation(line: 2479, column: 61, scope: !5371)
!5376 = !DILocation(line: 2479, column: 7, scope: !5337)
!5377 = !DILocation(line: 2480, column: 5, scope: !5371)
!5378 = !DILocation(line: 2481, column: 7, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2481, column: 7)
!5380 = !DILocation(line: 2481, column: 25, scope: !5379)
!5381 = !DILocation(line: 2482, column: 7, scope: !5379)
!5382 = !DILocation(line: 2482, column: 10, scope: !5379)
!5383 = !DILocation(line: 2482, column: 30, scope: !5379)
!5384 = !DILocation(line: 2481, column: 7, scope: !5337)
!5385 = !DILocation(line: 2483, column: 5, scope: !5379)
!5386 = !DILocation(line: 2486, column: 8, scope: !5387)
!5387 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2486, column: 7)
!5388 = !DILocation(line: 2486, column: 15, scope: !5387)
!5389 = !DILocation(line: 2486, column: 18, scope: !5387)
!5390 = !DILocation(line: 2486, column: 7, scope: !5337)
!5391 = !DILocation(line: 2487, column: 5, scope: !5387)
!5392 = !DILocation(line: 2492, column: 7, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2492, column: 7)
!5394 = !DILocation(line: 2492, column: 31, scope: !5393)
!5395 = !DILocation(line: 2492, column: 28, scope: !5393)
!5396 = !DILocation(line: 2492, column: 7, scope: !5337)
!5397 = !DILocation(line: 2493, column: 5, scope: !5393)
!5398 = !DILocation(line: 2495, column: 22, scope: !5337)
!5399 = !DILocation(line: 2495, column: 12, scope: !5337)
!5400 = !DILocation(line: 2495, column: 10, scope: !5337)
!5401 = !DILocation(line: 2496, column: 24, scope: !5337)
!5402 = !DILocation(line: 2496, column: 14, scope: !5337)
!5403 = !DILocation(line: 2496, column: 12, scope: !5337)
!5404 = !DILocation(line: 2498, column: 9, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2498, column: 7)
!5406 = !DILocation(line: 2498, column: 7, scope: !5337)
!5407 = !DILocation(line: 2500, column: 30, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 2499, column: 5)
!5409 = !DILocation(line: 2500, column: 14, scope: !5408)
!5410 = !DILocation(line: 2500, column: 12, scope: !5408)
!5411 = !DILocation(line: 2501, column: 11, scope: !5412)
!5412 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 2501, column: 11)
!5413 = !DILocation(line: 2501, column: 16, scope: !5412)
!5414 = !DILocation(line: 2501, column: 20, scope: !5412)
!5415 = !DILocation(line: 2501, column: 36, scope: !5412)
!5416 = !DILocation(line: 2502, column: 6, scope: !5412)
!5417 = !DILocation(line: 2502, column: 10, scope: !5412)
!5418 = !DILocation(line: 2502, column: 26, scope: !5412)
!5419 = !DILocation(line: 2503, column: 10, scope: !5412)
!5420 = !DILocation(line: 2503, column: 13, scope: !5412)
!5421 = !DILocation(line: 2501, column: 11, scope: !5408)
!5422 = !DILocation(line: 2504, column: 2, scope: !5412)
!5423 = !DILocation(line: 2505, column: 5, scope: !5408)
!5424 = !DILocation(line: 2507, column: 27, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2507, column: 7)
!5426 = !DILocation(line: 2507, column: 35, scope: !5425)
!5427 = !DILocation(line: 2507, column: 45, scope: !5425)
!5428 = !DILocation(line: 2508, column: 6, scope: !5425)
!5429 = !DILocation(line: 2507, column: 9, scope: !5425)
!5430 = !DILocation(line: 2507, column: 7, scope: !5337)
!5431 = !DILocation(line: 2509, column: 5, scope: !5425)
!5432 = !DILocation(line: 2511, column: 23, scope: !5337)
!5433 = !DILocation(line: 2511, column: 12, scope: !5337)
!5434 = !DILocation(line: 2511, column: 10, scope: !5337)
!5435 = !DILocation(line: 2512, column: 25, scope: !5337)
!5436 = !DILocation(line: 2512, column: 14, scope: !5337)
!5437 = !DILocation(line: 2512, column: 12, scope: !5337)
!5438 = !DILocation(line: 2514, column: 34, scope: !5439)
!5439 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2514, column: 7)
!5440 = !DILocation(line: 2514, column: 55, scope: !5439)
!5441 = !DILocation(line: 2515, column: 6, scope: !5439)
!5442 = !DILocation(line: 2515, column: 25, scope: !5439)
!5443 = !DILocation(line: 2514, column: 14, scope: !5439)
!5444 = !DILocation(line: 2514, column: 12, scope: !5439)
!5445 = !DILocation(line: 2515, column: 37, scope: !5439)
!5446 = !DILocation(line: 2514, column: 7, scope: !5337)
!5447 = !DILocation(line: 2516, column: 12, scope: !5439)
!5448 = !DILocation(line: 2516, column: 5, scope: !5439)
!5449 = !DILocation(line: 2518, column: 33, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2518, column: 7)
!5451 = !DILocation(line: 2518, column: 36, scope: !5450)
!5452 = !DILocation(line: 2518, column: 7, scope: !5450)
!5453 = !DILocation(line: 2518, column: 7, scope: !5337)
!5454 = !DILocation(line: 2519, column: 5, scope: !5450)
!5455 = !DILocation(line: 2522, column: 42, scope: !5337)
!5456 = !DILocation(line: 2522, column: 47, scope: !5337)
!5457 = !DILocation(line: 2522, column: 50, scope: !5337)
!5458 = !DILocation(line: 2522, column: 60, scope: !5337)
!5459 = !DILocation(line: 2522, column: 7, scope: !5337)
!5460 = !DILocation(line: 2522, column: 5, scope: !5337)
!5461 = !DILocation(line: 2525, column: 8, scope: !5462)
!5462 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2525, column: 7)
!5463 = !DILocation(line: 2525, column: 24, scope: !5462)
!5464 = !DILocation(line: 2525, column: 21, scope: !5462)
!5465 = !DILocation(line: 2525, column: 28, scope: !5462)
!5466 = !DILocation(line: 2525, column: 54, scope: !5462)
!5467 = !DILocation(line: 2525, column: 32, scope: !5462)
!5468 = !DILocation(line: 2526, column: 7, scope: !5462)
!5469 = !DILocation(line: 2526, column: 11, scope: !5462)
!5470 = !DILocation(line: 2526, column: 27, scope: !5462)
!5471 = !DILocation(line: 2526, column: 24, scope: !5462)
!5472 = !DILocation(line: 2526, column: 29, scope: !5462)
!5473 = !DILocation(line: 2526, column: 55, scope: !5462)
!5474 = !DILocation(line: 2526, column: 33, scope: !5462)
!5475 = !DILocation(line: 2525, column: 7, scope: !5337)
!5476 = !DILocation(line: 2527, column: 5, scope: !5462)
!5477 = !DILocation(line: 2529, column: 32, scope: !5337)
!5478 = !DILocation(line: 2529, column: 35, scope: !5337)
!5479 = !DILocation(line: 2529, column: 10, scope: !5337)
!5480 = !DILocation(line: 2529, column: 3, scope: !5337)
!5481 = !DILocation(line: 2530, column: 1, scope: !5337)
!5482 = distinct !DISubprogram(name: "output_dependence", scope: !3, file: !3, line: 2543, type: !3793, scopeLine: 2544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5483 = !DILocalVariable(name: "mem", arg: 1, scope: !5482, file: !3, line: 2543, type: !2607)
!5484 = !DILocation(line: 2543, column: 30, scope: !5482)
!5485 = !DILocalVariable(name: "x", arg: 2, scope: !5482, file: !3, line: 2543, type: !2607)
!5486 = !DILocation(line: 2543, column: 45, scope: !5482)
!5487 = !DILocation(line: 2545, column: 30, scope: !5482)
!5488 = !DILocation(line: 2545, column: 35, scope: !5482)
!5489 = !DILocation(line: 2545, column: 10, scope: !5482)
!5490 = !DILocation(line: 2545, column: 3, scope: !5482)
!5491 = distinct !DISubprogram(name: "init_alias_target", scope: !3, file: !3, line: 2550, type: !5492, scopeLine: 2551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5492 = !DISubroutineType(types: !5493)
!5493 = !{null}
!5494 = !DILocalVariable(name: "i", scope: !5491, file: !3, line: 2552, type: !1189)
!5495 = !DILocation(line: 2552, column: 7, scope: !5491)
!5496 = !DILocation(line: 2554, column: 3, scope: !5491)
!5497 = !DILocation(line: 2556, column: 10, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5491, file: !3, line: 2556, column: 3)
!5499 = !DILocation(line: 2556, column: 8, scope: !5498)
!5500 = !DILocation(line: 2556, column: 15, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 2556, column: 3)
!5502 = !DILocation(line: 2556, column: 17, scope: !5501)
!5503 = !DILocation(line: 2556, column: 3, scope: !5498)
!5504 = !DILocation(line: 2560, column: 9, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 2560, column: 9)
!5506 = !DILocation(line: 2561, column: 2, scope: !5505)
!5507 = !DILocation(line: 2561, column: 5, scope: !5505)
!5508 = !DILocation(line: 2560, column: 9, scope: !5501)
!5509 = !DILocation(line: 2563, column: 4, scope: !5505)
!5510 = !DILocation(line: 2562, column: 29, scope: !5505)
!5511 = !DILocation(line: 2562, column: 7, scope: !5505)
!5512 = !DILocation(line: 2563, column: 2, scope: !5505)
!5513 = !DILocation(line: 2556, column: 43, scope: !5501)
!5514 = !DILocation(line: 2556, column: 3, scope: !5501)
!5515 = distinct !{!5515, !5503, !5516}
!5516 = !DILocation(line: 2563, column: 4, scope: !5498)
!5517 = !DILocation(line: 2566, column: 7, scope: !5491)
!5518 = !DILocation(line: 2566, column: 5, scope: !5491)
!5519 = !DILocation(line: 2568, column: 7, scope: !5491)
!5520 = !DILocation(line: 2568, column: 5, scope: !5491)
!5521 = !DILocation(line: 2570, column: 7, scope: !5491)
!5522 = !DILocation(line: 2570, column: 5, scope: !5491)
!5523 = !DILocation(line: 2573, column: 7, scope: !5491)
!5524 = !DILocation(line: 2573, column: 5, scope: !5491)
!5525 = !DILocation(line: 2575, column: 1, scope: !5491)
!5526 = distinct !DISubprogram(name: "memory_modified_in_insn_p", scope: !3, file: !3, line: 2594, type: !5527, scopeLine: 2595, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5527 = !DISubroutineType(types: !5528)
!5528 = !{!1445, !2607, !2607}
!5529 = !DILocalVariable(name: "mem", arg: 1, scope: !5526, file: !3, line: 2594, type: !2607)
!5530 = !DILocation(line: 2594, column: 38, scope: !5526)
!5531 = !DILocalVariable(name: "insn", arg: 2, scope: !5526, file: !3, line: 2594, type: !2607)
!5532 = !DILocation(line: 2594, column: 53, scope: !5526)
!5533 = !DILocation(line: 2596, column: 8, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5526, file: !3, line: 2596, column: 7)
!5535 = !DILocation(line: 2596, column: 7, scope: !5526)
!5536 = !DILocation(line: 2597, column: 5, scope: !5534)
!5537 = !DILocation(line: 2598, column: 19, scope: !5526)
!5538 = !DILocation(line: 2599, column: 16, scope: !5526)
!5539 = !DILocation(line: 2599, column: 51, scope: !5526)
!5540 = !DILocation(line: 2599, column: 3, scope: !5526)
!5541 = !DILocation(line: 2600, column: 10, scope: !5526)
!5542 = !DILocation(line: 2600, column: 3, scope: !5526)
!5543 = !DILocation(line: 2601, column: 1, scope: !5526)
!5544 = distinct !DISubprogram(name: "memory_modified_1", scope: !3, file: !3, line: 2581, type: !5545, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5545 = !DISubroutineType(types: !5546)
!5546 = !{null, !1191, !2607, !1322}
!5547 = !DILocalVariable(name: "x", arg: 1, scope: !5544, file: !3, line: 2581, type: !1191)
!5548 = !DILocation(line: 2581, column: 24, scope: !5544)
!5549 = !DILocalVariable(name: "pat", arg: 2, scope: !5544, file: !3, line: 2581, type: !2607)
!5550 = !DILocation(line: 2581, column: 37, scope: !5544)
!5551 = !DILocalVariable(name: "data", arg: 3, scope: !5544, file: !3, line: 2581, type: !1322)
!5552 = !DILocation(line: 2581, column: 65, scope: !5544)
!5553 = !DILocation(line: 2583, column: 7, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5544, file: !3, line: 2583, column: 7)
!5555 = !DILocation(line: 2583, column: 7, scope: !5544)
!5556 = !DILocation(line: 2585, column: 28, scope: !5557)
!5557 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 2585, column: 11)
!5558 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 2584, column: 5)
!5559 = !DILocation(line: 2585, column: 42, scope: !5557)
!5560 = !DILocation(line: 2585, column: 31, scope: !5557)
!5561 = !DILocation(line: 2585, column: 11, scope: !5557)
!5562 = !DILocation(line: 2585, column: 48, scope: !5557)
!5563 = !DILocation(line: 2585, column: 70, scope: !5557)
!5564 = !DILocation(line: 2585, column: 84, scope: !5557)
!5565 = !DILocation(line: 2585, column: 73, scope: !5557)
!5566 = !DILocation(line: 2585, column: 51, scope: !5557)
!5567 = !DILocation(line: 2585, column: 11, scope: !5558)
!5568 = !DILocation(line: 2586, column: 18, scope: !5557)
!5569 = !DILocation(line: 2586, column: 2, scope: !5557)
!5570 = !DILocation(line: 2587, column: 5, scope: !5558)
!5571 = !DILocation(line: 2588, column: 1, scope: !5544)
!5572 = distinct !DISubprogram(name: "init_alias_analysis", scope: !3, file: !3, line: 2607, type: !5492, scopeLine: 2608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5573 = !DILocalVariable(name: "maxreg", scope: !5572, file: !3, line: 2609, type: !7)
!5574 = !DILocation(line: 2609, column: 16, scope: !5572)
!5575 = !DILocation(line: 2609, column: 25, scope: !5572)
!5576 = !DILocalVariable(name: "changed", scope: !5572, file: !3, line: 2610, type: !1189)
!5577 = !DILocation(line: 2610, column: 7, scope: !5572)
!5578 = !DILocalVariable(name: "pass", scope: !5572, file: !3, line: 2610, type: !1189)
!5579 = !DILocation(line: 2610, column: 16, scope: !5572)
!5580 = !DILocalVariable(name: "i", scope: !5572, file: !3, line: 2611, type: !1189)
!5581 = !DILocation(line: 2611, column: 7, scope: !5572)
!5582 = !DILocalVariable(name: "ui", scope: !5572, file: !3, line: 2612, type: !7)
!5583 = !DILocation(line: 2612, column: 16, scope: !5572)
!5584 = !DILocalVariable(name: "insn", scope: !5572, file: !3, line: 2613, type: !1191)
!5585 = !DILocation(line: 2613, column: 7, scope: !5572)
!5586 = !DILocation(line: 2615, column: 3, scope: !5572)
!5587 = !DILocation(line: 2615, column: 3, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 2615, column: 3)
!5589 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2615, column: 3)
!5590 = !DILocation(line: 2615, column: 3, scope: !5589)
!5591 = !DILocation(line: 2617, column: 26, scope: !5572)
!5592 = !DILocation(line: 2617, column: 33, scope: !5572)
!5593 = !DILocation(line: 2617, column: 24, scope: !5572)
!5594 = !DILocation(line: 2618, column: 21, scope: !5572)
!5595 = !DILocation(line: 2618, column: 19, scope: !5572)
!5596 = !DILocation(line: 2619, column: 23, scope: !5572)
!5597 = !DILocation(line: 2619, column: 21, scope: !5572)
!5598 = !DILocation(line: 2622, column: 7, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2622, column: 7)
!5600 = !DILocation(line: 2622, column: 7, scope: !5572)
!5601 = !DILocation(line: 2623, column: 22, scope: !5599)
!5602 = !DILocation(line: 2623, column: 20, scope: !5599)
!5603 = !DILocation(line: 2623, column: 5, scope: !5599)
!5604 = !DILocation(line: 2625, column: 7, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2625, column: 7)
!5606 = !DILocation(line: 2625, column: 7, scope: !5572)
!5607 = !DILocation(line: 2626, column: 5, scope: !5605)
!5608 = !DILocation(line: 2628, column: 3, scope: !5572)
!5609 = !DILocation(line: 2630, column: 24, scope: !5572)
!5610 = !DILocation(line: 2630, column: 22, scope: !5572)
!5611 = !DILocation(line: 2631, column: 14, scope: !5572)
!5612 = !DILocation(line: 2631, column: 12, scope: !5572)
!5613 = !DILocation(line: 2652, column: 8, scope: !5572)
!5614 = !DILocation(line: 2653, column: 3, scope: !5572)
!5615 = !DILocation(line: 2656, column: 15, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2654, column: 5)
!5617 = !DILocation(line: 2660, column: 17, scope: !5616)
!5618 = !DILocation(line: 2664, column: 25, scope: !5616)
!5619 = !DILocation(line: 2667, column: 15, scope: !5616)
!5620 = !DILocation(line: 2667, column: 7, scope: !5616)
!5621 = !DILocation(line: 2667, column: 38, scope: !5616)
!5622 = !DILocation(line: 2667, column: 45, scope: !5616)
!5623 = !DILocation(line: 2670, column: 15, scope: !5616)
!5624 = !DILocation(line: 2670, column: 28, scope: !5616)
!5625 = !DILocation(line: 2670, column: 7, scope: !5616)
!5626 = !DILocation(line: 2680, column: 15, scope: !5616)
!5627 = !DILocation(line: 2680, column: 7, scope: !5616)
!5628 = !DILocation(line: 2684, column: 19, scope: !5629)
!5629 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 2684, column: 7)
!5630 = !DILocation(line: 2684, column: 17, scope: !5629)
!5631 = !DILocation(line: 2684, column: 12, scope: !5629)
!5632 = !DILocation(line: 2684, column: 33, scope: !5633)
!5633 = distinct !DILexicalBlock(scope: !5629, file: !3, line: 2684, column: 7)
!5634 = !DILocation(line: 2684, column: 7, scope: !5629)
!5635 = !DILocation(line: 2686, column: 8, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 2686, column: 8)
!5637 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 2685, column: 2)
!5638 = !DILocation(line: 2686, column: 8, scope: !5637)
!5639 = !DILocalVariable(name: "note", scope: !5640, file: !3, line: 2688, type: !1191)
!5640 = distinct !DILexicalBlock(scope: !5636, file: !3, line: 2687, column: 6)
!5641 = !DILocation(line: 2688, column: 12, scope: !5640)
!5642 = !DILocalVariable(name: "set", scope: !5640, file: !3, line: 2688, type: !1191)
!5643 = !DILocation(line: 2688, column: 18, scope: !5640)
!5644 = !DILocation(line: 2695, column: 12, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 2695, column: 12)
!5646 = !DILocation(line: 2696, column: 5, scope: !5645)
!5647 = !DILocation(line: 2696, column: 36, scope: !5645)
!5648 = !DILocation(line: 2696, column: 8, scope: !5645)
!5649 = !DILocation(line: 2695, column: 12, scope: !5640)
!5650 = !DILocation(line: 2697, column: 3, scope: !5645)
!5651 = !DILocation(line: 2704, column: 12, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 2704, column: 12)
!5653 = !DILocation(line: 2704, column: 38, scope: !5652)
!5654 = !DILocation(line: 2705, column: 5, scope: !5652)
!5655 = !DILocation(line: 2705, column: 8, scope: !5652)
!5656 = !DILocation(line: 2705, column: 25, scope: !5652)
!5657 = !DILocation(line: 2706, column: 5, scope: !5652)
!5658 = !DILocation(line: 2706, column: 23, scope: !5652)
!5659 = !DILocation(line: 2706, column: 8, scope: !5652)
!5660 = !DILocation(line: 2704, column: 12, scope: !5640)
!5661 = !DILocation(line: 2707, column: 15, scope: !5652)
!5662 = !DILocation(line: 2707, column: 3, scope: !5652)
!5663 = !DILocation(line: 2709, column: 16, scope: !5652)
!5664 = !DILocation(line: 2709, column: 3, scope: !5652)
!5665 = !DILocation(line: 2711, column: 14, scope: !5640)
!5666 = !DILocation(line: 2711, column: 12, scope: !5640)
!5667 = !DILocation(line: 2713, column: 12, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 2713, column: 12)
!5669 = !DILocation(line: 2713, column: 16, scope: !5668)
!5670 = !DILocation(line: 2714, column: 5, scope: !5668)
!5671 = !DILocation(line: 2714, column: 8, scope: !5668)
!5672 = !DILocation(line: 2715, column: 5, scope: !5668)
!5673 = !DILocation(line: 2715, column: 8, scope: !5668)
!5674 = !DILocation(line: 2715, column: 31, scope: !5668)
!5675 = !DILocation(line: 2713, column: 12, scope: !5640)
!5676 = !DILocalVariable(name: "regno", scope: !5677, file: !3, line: 2717, type: !7)
!5677 = distinct !DILexicalBlock(scope: !5668, file: !3, line: 2716, column: 3)
!5678 = !DILocation(line: 2717, column: 18, scope: !5677)
!5679 = !DILocation(line: 2717, column: 26, scope: !5677)
!5680 = !DILocalVariable(name: "src", scope: !5677, file: !3, line: 2718, type: !1191)
!5681 = !DILocation(line: 2718, column: 9, scope: !5677)
!5682 = !DILocation(line: 2718, column: 15, scope: !5677)
!5683 = !DILocalVariable(name: "t", scope: !5677, file: !3, line: 2719, type: !1191)
!5684 = !DILocation(line: 2719, column: 9, scope: !5677)
!5685 = !DILocation(line: 2721, column: 39, scope: !5677)
!5686 = !DILocation(line: 2721, column: 12, scope: !5677)
!5687 = !DILocation(line: 2721, column: 10, scope: !5677)
!5688 = !DILocation(line: 2722, column: 9, scope: !5689)
!5689 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 2722, column: 9)
!5690 = !DILocation(line: 2722, column: 14, scope: !5689)
!5691 = !DILocation(line: 2722, column: 17, scope: !5689)
!5692 = !DILocation(line: 2722, column: 38, scope: !5689)
!5693 = !DILocation(line: 2723, column: 9, scope: !5689)
!5694 = !DILocation(line: 2723, column: 12, scope: !5689)
!5695 = !DILocation(line: 2723, column: 37, scope: !5689)
!5696 = !DILocation(line: 2722, column: 9, scope: !5677)
!5697 = !DILocation(line: 2724, column: 12, scope: !5689)
!5698 = !DILocation(line: 2724, column: 7, scope: !5689)
!5699 = !DILocation(line: 2726, column: 9, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 2726, column: 9)
!5701 = !DILocation(line: 2726, column: 14, scope: !5700)
!5702 = !DILocation(line: 2727, column: 9, scope: !5700)
!5703 = !DILocation(line: 2727, column: 12, scope: !5700)
!5704 = !DILocation(line: 2727, column: 38, scope: !5700)
!5705 = !DILocation(line: 2728, column: 9, scope: !5700)
!5706 = !DILocation(line: 2728, column: 28, scope: !5700)
!5707 = !DILocation(line: 2728, column: 14, scope: !5700)
!5708 = !DILocation(line: 2729, column: 9, scope: !5700)
!5709 = !DILocation(line: 2729, column: 39, scope: !5700)
!5710 = !DILocation(line: 2730, column: 11, scope: !5700)
!5711 = !DILocation(line: 2729, column: 14, scope: !5700)
!5712 = !DILocation(line: 2726, column: 9, scope: !5677)
!5713 = !DILocation(line: 2732, column: 30, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5700, file: !3, line: 2731, column: 7)
!5715 = !DILocation(line: 2732, column: 37, scope: !5714)
!5716 = !DILocation(line: 2732, column: 9, scope: !5714)
!5717 = !DILocation(line: 2733, column: 32, scope: !5714)
!5718 = !DILocation(line: 2734, column: 4, scope: !5714)
!5719 = !DILocation(line: 2734, column: 25, scope: !5714)
!5720 = !DILocation(line: 2733, column: 9, scope: !5714)
!5721 = !DILocation(line: 2735, column: 7, scope: !5714)
!5722 = !DILocation(line: 2736, column: 14, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5700, file: !3, line: 2736, column: 14)
!5724 = !DILocation(line: 2736, column: 39, scope: !5723)
!5725 = !DILocation(line: 2737, column: 7, scope: !5723)
!5726 = !DILocation(line: 2737, column: 10, scope: !5723)
!5727 = !DILocation(line: 2737, column: 25, scope: !5723)
!5728 = !DILocation(line: 2738, column: 7, scope: !5723)
!5729 = !DILocation(line: 2738, column: 10, scope: !5723)
!5730 = !DILocation(line: 2739, column: 7, scope: !5723)
!5731 = !DILocation(line: 2739, column: 36, scope: !5723)
!5732 = !DILocation(line: 2739, column: 15, scope: !5723)
!5733 = !DILocation(line: 2739, column: 13, scope: !5723)
!5734 = !DILocation(line: 2740, column: 7, scope: !5723)
!5735 = !DILocation(line: 2740, column: 10, scope: !5723)
!5736 = !DILocation(line: 2736, column: 14, scope: !5700)
!5737 = !DILocation(line: 2742, column: 28, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 2741, column: 7)
!5739 = !DILocation(line: 2742, column: 31, scope: !5738)
!5740 = !DILocation(line: 2742, column: 13, scope: !5738)
!5741 = !DILocation(line: 2742, column: 11, scope: !5738)
!5742 = !DILocation(line: 2743, column: 30, scope: !5738)
!5743 = !DILocation(line: 2743, column: 37, scope: !5738)
!5744 = !DILocation(line: 2743, column: 9, scope: !5738)
!5745 = !DILocation(line: 2744, column: 32, scope: !5738)
!5746 = !DILocation(line: 2744, column: 9, scope: !5738)
!5747 = !DILocation(line: 2745, column: 7, scope: !5738)
!5748 = !DILocation(line: 2746, column: 14, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 2746, column: 14)
!5750 = !DILocation(line: 2746, column: 39, scope: !5749)
!5751 = !DILocation(line: 2747, column: 7, scope: !5749)
!5752 = !DILocation(line: 2747, column: 26, scope: !5749)
!5753 = !DILocation(line: 2747, column: 12, scope: !5749)
!5754 = !DILocation(line: 2746, column: 14, scope: !5723)
!5755 = !DILocation(line: 2749, column: 30, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 2748, column: 7)
!5757 = !DILocation(line: 2749, column: 37, scope: !5756)
!5758 = !DILocation(line: 2749, column: 9, scope: !5756)
!5759 = !DILocation(line: 2750, column: 32, scope: !5756)
!5760 = !DILocation(line: 2750, column: 9, scope: !5756)
!5761 = !DILocation(line: 2751, column: 7, scope: !5756)
!5762 = !DILocation(line: 2752, column: 3, scope: !5677)
!5763 = !DILocation(line: 2753, column: 6, scope: !5640)
!5764 = !DILocation(line: 2754, column: 13, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5636, file: !3, line: 2754, column: 13)
!5766 = !DILocation(line: 2755, column: 6, scope: !5765)
!5767 = !DILocation(line: 2755, column: 9, scope: !5765)
!5768 = !DILocation(line: 2755, column: 26, scope: !5765)
!5769 = !DILocation(line: 2754, column: 13, scope: !5636)
!5770 = !DILocation(line: 2756, column: 24, scope: !5765)
!5771 = !DILocation(line: 2756, column: 6, scope: !5765)
!5772 = !DILocation(line: 2757, column: 2, scope: !5637)
!5773 = !DILocation(line: 2684, column: 46, scope: !5633)
!5774 = !DILocation(line: 2684, column: 44, scope: !5633)
!5775 = !DILocation(line: 2684, column: 7, scope: !5633)
!5776 = distinct !{!5776, !5634, !5777}
!5777 = !DILocation(line: 2757, column: 2, scope: !5629)
!5778 = !DILocation(line: 2760, column: 7, scope: !5616)
!5779 = !DILocation(line: 2762, column: 15, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 2762, column: 7)
!5781 = !DILocation(line: 2762, column: 12, scope: !5780)
!5782 = !DILocation(line: 2762, column: 20, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 2762, column: 7)
!5784 = !DILocation(line: 2762, column: 25, scope: !5783)
!5785 = !DILocation(line: 2762, column: 23, scope: !5783)
!5786 = !DILocation(line: 2762, column: 7, scope: !5780)
!5787 = !DILocation(line: 2764, column: 8, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 2764, column: 8)
!5789 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 2763, column: 2)
!5790 = !DILocation(line: 2764, column: 27, scope: !5788)
!5791 = !DILocation(line: 2765, column: 8, scope: !5788)
!5792 = !DILocation(line: 2765, column: 11, scope: !5788)
!5793 = !DILocation(line: 2765, column: 30, scope: !5788)
!5794 = !DILocation(line: 2765, column: 37, scope: !5788)
!5795 = !DILocation(line: 2765, column: 34, scope: !5788)
!5796 = !DILocation(line: 2766, column: 8, scope: !5788)
!5797 = !DILocation(line: 2766, column: 26, scope: !5788)
!5798 = !DILocation(line: 2766, column: 45, scope: !5788)
!5799 = !DILocation(line: 2767, column: 5, scope: !5788)
!5800 = !DILocation(line: 2766, column: 13, scope: !5788)
!5801 = !DILocation(line: 2764, column: 8, scope: !5789)
!5802 = !DILocation(line: 2769, column: 8, scope: !5803)
!5803 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 2768, column: 6)
!5804 = !DILocation(line: 2770, column: 16, scope: !5803)
!5805 = !DILocation(line: 2771, column: 6, scope: !5803)
!5806 = !DILocation(line: 2772, column: 2, scope: !5789)
!5807 = !DILocation(line: 2762, column: 35, scope: !5783)
!5808 = !DILocation(line: 2762, column: 7, scope: !5783)
!5809 = distinct !{!5809, !5786, !5810}
!5810 = !DILocation(line: 2772, column: 2, scope: !5780)
!5811 = !DILocation(line: 2773, column: 5, scope: !5616)
!5812 = !DILocation(line: 2774, column: 10, scope: !5572)
!5813 = !DILocation(line: 2774, column: 18, scope: !5572)
!5814 = !DILocation(line: 2774, column: 21, scope: !5572)
!5815 = !DILocation(line: 2774, column: 28, scope: !5572)
!5816 = !DILocation(line: 0, scope: !5572)
!5817 = distinct !{!5817, !5614, !5818}
!5818 = !DILocation(line: 2774, column: 51, scope: !5572)
!5819 = !DILocation(line: 2777, column: 10, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2777, column: 3)
!5821 = !DILocation(line: 2777, column: 8, scope: !5820)
!5822 = !DILocation(line: 2777, column: 15, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 2777, column: 3)
!5824 = !DILocation(line: 2777, column: 24, scope: !5823)
!5825 = !DILocation(line: 2777, column: 17, scope: !5823)
!5826 = !DILocation(line: 2777, column: 3, scope: !5820)
!5827 = !DILocation(line: 2778, column: 9, scope: !5828)
!5828 = distinct !DILexicalBlock(scope: !5823, file: !3, line: 2778, column: 9)
!5829 = !DILocation(line: 2778, column: 25, scope: !5828)
!5830 = !DILocation(line: 2778, column: 28, scope: !5828)
!5831 = !DILocation(line: 2778, column: 9, scope: !5823)
!5832 = !DILocation(line: 2779, column: 28, scope: !5828)
!5833 = !DILocation(line: 2779, column: 42, scope: !5828)
!5834 = !DILocation(line: 2779, column: 44, scope: !5828)
!5835 = !DILocation(line: 2779, column: 7, scope: !5828)
!5836 = !DILocation(line: 2779, column: 23, scope: !5828)
!5837 = !DILocation(line: 2779, column: 26, scope: !5828)
!5838 = !DILocation(line: 2778, column: 31, scope: !5828)
!5839 = !DILocation(line: 2777, column: 47, scope: !5823)
!5840 = !DILocation(line: 2777, column: 3, scope: !5823)
!5841 = distinct !{!5841, !5826, !5842}
!5842 = !DILocation(line: 2779, column: 67, scope: !5820)
!5843 = !DILocation(line: 2782, column: 9, scope: !5572)
!5844 = !DILocation(line: 2782, column: 3, scope: !5572)
!5845 = !DILocation(line: 2783, column: 22, scope: !5572)
!5846 = !DILocation(line: 2784, column: 9, scope: !5572)
!5847 = !DILocation(line: 2784, column: 3, scope: !5572)
!5848 = !DILocation(line: 2785, column: 12, scope: !5572)
!5849 = !DILocation(line: 2786, column: 3, scope: !5572)
!5850 = !DILocation(line: 2786, column: 3, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 2786, column: 3)
!5852 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2786, column: 3)
!5853 = !DILocation(line: 2786, column: 3, scope: !5852)
!5854 = !DILocation(line: 2787, column: 1, scope: !5572)
!5855 = distinct !DISubprogram(name: "VEC_rtx_base_truncate", scope: !562, file: !562, line: 200, type: !5856, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5856 = !DISubroutineType(types: !5857)
!5857 = !{null, !5858, !7}
!5858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2534, size: 64)
!5859 = !DILocalVariable(name: "vec_", arg: 1, scope: !5855, file: !562, line: 200, type: !5858)
!5860 = !DILocation(line: 200, column: 1, scope: !5855)
!5861 = !DILocalVariable(name: "size_", arg: 2, scope: !5855, file: !562, line: 200, type: !7)
!5862 = !DILocation(line: 200, column: 1, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5855, file: !562, line: 200, column: 1)
!5864 = distinct !DISubprogram(name: "VEC_rtx_gc_safe_grow_cleared", scope: !562, file: !562, line: 202, type: !5865, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5865 = !DISubroutineType(types: !5866)
!5866 = !{null, !5867, !1189}
!5867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2529, size: 64)
!5868 = !DILocalVariable(name: "vec_", arg: 1, scope: !5864, file: !562, line: 202, type: !5867)
!5869 = !DILocation(line: 202, column: 1, scope: !5864)
!5870 = !DILocalVariable(name: "size_", arg: 2, scope: !5864, file: !562, line: 202, type: !1189)
!5871 = !DILocalVariable(name: "oldsize", scope: !5864, file: !562, line: 202, type: !1189)
!5872 = distinct !DISubprogram(name: "record_set", scope: !3, file: !3, line: 1120, type: !5545, scopeLine: 1121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!5873 = !DILocalVariable(name: "dest", arg: 1, scope: !5872, file: !3, line: 1120, type: !1191)
!5874 = !DILocation(line: 1120, column: 17, scope: !5872)
!5875 = !DILocalVariable(name: "set", arg: 2, scope: !5872, file: !3, line: 1120, type: !2607)
!5876 = !DILocation(line: 1120, column: 33, scope: !5872)
!5877 = !DILocalVariable(name: "data", arg: 3, scope: !5872, file: !3, line: 1120, type: !1322)
!5878 = !DILocation(line: 1120, column: 44, scope: !5872)
!5879 = !DILocalVariable(name: "regno", scope: !5872, file: !3, line: 1122, type: !7)
!5880 = !DILocation(line: 1122, column: 12, scope: !5872)
!5881 = !DILocalVariable(name: "src", scope: !5872, file: !3, line: 1123, type: !1191)
!5882 = !DILocation(line: 1123, column: 7, scope: !5872)
!5883 = !DILocalVariable(name: "n", scope: !5872, file: !3, line: 1124, type: !1189)
!5884 = !DILocation(line: 1124, column: 7, scope: !5872)
!5885 = !DILocation(line: 1126, column: 8, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1126, column: 7)
!5887 = !DILocation(line: 1126, column: 7, scope: !5872)
!5888 = !DILocation(line: 1127, column: 5, scope: !5886)
!5889 = !DILocation(line: 1129, column: 11, scope: !5872)
!5890 = !DILocation(line: 1129, column: 9, scope: !5872)
!5891 = !DILocation(line: 1131, column: 3, scope: !5872)
!5892 = !DILocation(line: 1135, column: 7, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1135, column: 7)
!5894 = !DILocation(line: 1135, column: 13, scope: !5893)
!5895 = !DILocation(line: 1135, column: 7, scope: !5872)
!5896 = !DILocation(line: 1136, column: 26, scope: !5893)
!5897 = !DILocation(line: 1136, column: 9, scope: !5893)
!5898 = !DILocation(line: 1136, column: 33, scope: !5893)
!5899 = !DILocation(line: 1136, column: 7, scope: !5893)
!5900 = !DILocation(line: 1136, column: 5, scope: !5893)
!5901 = !DILocation(line: 1138, column: 7, scope: !5893)
!5902 = !DILocation(line: 1139, column: 7, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1139, column: 7)
!5904 = !DILocation(line: 1139, column: 9, scope: !5903)
!5905 = !DILocation(line: 1139, column: 7, scope: !5872)
!5906 = !DILocation(line: 1141, column: 7, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 1140, column: 5)
!5908 = !DILocation(line: 1141, column: 14, scope: !5907)
!5909 = !DILocation(line: 1141, column: 18, scope: !5907)
!5910 = !DILocation(line: 1143, column: 4, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 1142, column: 2)
!5912 = !DILocation(line: 1143, column: 13, scope: !5911)
!5913 = !DILocation(line: 1143, column: 21, scope: !5911)
!5914 = !DILocation(line: 1143, column: 19, scope: !5911)
!5915 = !DILocation(line: 1143, column: 24, scope: !5911)
!5916 = !DILocation(line: 1144, column: 4, scope: !5911)
!5917 = !DILocation(line: 1144, column: 23, scope: !5911)
!5918 = !DILocation(line: 1144, column: 31, scope: !5911)
!5919 = !DILocation(line: 1144, column: 29, scope: !5911)
!5920 = !DILocation(line: 1144, column: 34, scope: !5911)
!5921 = distinct !{!5921, !5906, !5922}
!5922 = !DILocation(line: 1145, column: 2, scope: !5907)
!5923 = !DILocation(line: 1146, column: 7, scope: !5907)
!5924 = !DILocation(line: 1149, column: 7, scope: !5925)
!5925 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1149, column: 7)
!5926 = !DILocation(line: 1149, column: 7, scope: !5872)
!5927 = !DILocation(line: 1154, column: 11, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 1154, column: 11)
!5929 = distinct !DILexicalBlock(scope: !5925, file: !3, line: 1150, column: 5)
!5930 = !DILocation(line: 1154, column: 26, scope: !5928)
!5931 = !DILocation(line: 1154, column: 11, scope: !5929)
!5932 = !DILocation(line: 1156, column: 4, scope: !5933)
!5933 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 1155, column: 2)
!5934 = !DILocation(line: 1156, column: 23, scope: !5933)
!5935 = !DILocation(line: 1156, column: 30, scope: !5933)
!5936 = !DILocation(line: 1157, column: 4, scope: !5933)
!5937 = !DILocation(line: 1159, column: 13, scope: !5929)
!5938 = !DILocation(line: 1159, column: 11, scope: !5929)
!5939 = !DILocation(line: 1160, column: 5, scope: !5929)
!5940 = !DILocation(line: 1163, column: 11, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5942, file: !3, line: 1163, column: 11)
!5942 = distinct !DILexicalBlock(scope: !5925, file: !3, line: 1162, column: 5)
!5943 = !DILocation(line: 1163, column: 20, scope: !5941)
!5944 = !DILocation(line: 1163, column: 11, scope: !5942)
!5945 = !DILocation(line: 1165, column: 4, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 1164, column: 2)
!5947 = !DILocation(line: 1165, column: 23, scope: !5946)
!5948 = !DILocation(line: 1165, column: 30, scope: !5946)
!5949 = !DILocation(line: 1166, column: 4, scope: !5946)
!5950 = !DILocation(line: 1168, column: 7, scope: !5942)
!5951 = !DILocation(line: 1168, column: 16, scope: !5942)
!5952 = !DILocation(line: 1168, column: 23, scope: !5942)
!5953 = !DILocation(line: 1169, column: 35, scope: !5942)
!5954 = !DILocation(line: 1169, column: 7, scope: !5942)
!5955 = !DILocation(line: 1169, column: 26, scope: !5942)
!5956 = !DILocation(line: 1169, column: 33, scope: !5942)
!5957 = !DILocation(line: 1171, column: 7, scope: !5942)
!5958 = !DILocation(line: 1190, column: 7, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1190, column: 7)
!5960 = !DILocation(line: 1190, column: 26, scope: !5959)
!5961 = !DILocation(line: 1190, column: 33, scope: !5959)
!5962 = !DILocation(line: 1191, column: 7, scope: !5959)
!5963 = !DILocation(line: 1191, column: 27, scope: !5959)
!5964 = !DILocation(line: 1191, column: 10, scope: !5959)
!5965 = !DILocation(line: 1191, column: 35, scope: !5959)
!5966 = !DILocation(line: 1191, column: 54, scope: !5959)
!5967 = !DILocation(line: 1191, column: 32, scope: !5959)
!5968 = !DILocation(line: 1190, column: 7, scope: !5872)
!5969 = !DILocation(line: 1192, column: 13, scope: !5959)
!5970 = !DILocation(line: 1192, column: 5, scope: !5959)
!5971 = !DILocation(line: 1196, column: 6, scope: !5972)
!5972 = distinct !DILexicalBlock(scope: !5973, file: !3, line: 1196, column: 6)
!5973 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 1193, column: 7)
!5974 = !DILocation(line: 1196, column: 23, scope: !5972)
!5975 = !DILocation(line: 1196, column: 20, scope: !5972)
!5976 = !DILocation(line: 1196, column: 28, scope: !5972)
!5977 = !DILocation(line: 1196, column: 31, scope: !5972)
!5978 = !DILocation(line: 1196, column: 48, scope: !5972)
!5979 = !DILocation(line: 1196, column: 45, scope: !5972)
!5980 = !DILocation(line: 1196, column: 6, scope: !5973)
!5981 = !DILocation(line: 1197, column: 4, scope: !5972)
!5982 = !DILocation(line: 1197, column: 23, scope: !5972)
!5983 = !DILocation(line: 1197, column: 30, scope: !5972)
!5984 = !DILocation(line: 1198, column: 2, scope: !5973)
!5985 = !DILocalVariable(name: "other", scope: !5986, file: !3, line: 1204, type: !1191)
!5986 = distinct !DILexicalBlock(scope: !5973, file: !3, line: 1203, column: 2)
!5987 = !DILocation(line: 1204, column: 8, scope: !5986)
!5988 = !DILocation(line: 1206, column: 8, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 1206, column: 8)
!5990 = !DILocation(line: 1206, column: 25, scope: !5989)
!5991 = !DILocation(line: 1206, column: 22, scope: !5989)
!5992 = !DILocation(line: 1206, column: 8, scope: !5986)
!5993 = !DILocation(line: 1207, column: 14, scope: !5989)
!5994 = !DILocation(line: 1207, column: 12, scope: !5989)
!5995 = !DILocation(line: 1207, column: 6, scope: !5989)
!5996 = !DILocation(line: 1208, column: 13, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 1208, column: 13)
!5998 = !DILocation(line: 1208, column: 30, scope: !5997)
!5999 = !DILocation(line: 1208, column: 27, scope: !5997)
!6000 = !DILocation(line: 1208, column: 13, scope: !5989)
!6001 = !DILocation(line: 1209, column: 14, scope: !5997)
!6002 = !DILocation(line: 1209, column: 12, scope: !5997)
!6003 = !DILocation(line: 1209, column: 6, scope: !5997)
!6004 = !DILocation(line: 1211, column: 10, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 1211, column: 8)
!6006 = !DILocation(line: 1211, column: 16, scope: !6005)
!6007 = !DILocation(line: 1211, column: 36, scope: !6005)
!6008 = !DILocation(line: 1211, column: 19, scope: !6005)
!6009 = !DILocation(line: 1211, column: 8, scope: !5986)
!6010 = !DILocation(line: 1212, column: 6, scope: !6005)
!6011 = !DILocation(line: 1212, column: 25, scope: !6005)
!6012 = !DILocation(line: 1212, column: 32, scope: !6005)
!6013 = !DILocation(line: 1213, column: 4, scope: !5986)
!6014 = !DILocation(line: 1216, column: 6, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5973, file: !3, line: 1216, column: 6)
!6016 = !DILocation(line: 1216, column: 23, scope: !6015)
!6017 = !DILocation(line: 1216, column: 20, scope: !6015)
!6018 = !DILocation(line: 1216, column: 28, scope: !6015)
!6019 = !DILocation(line: 1216, column: 32, scope: !6015)
!6020 = !DILocation(line: 1216, column: 6, scope: !5973)
!6021 = !DILocation(line: 1217, column: 4, scope: !6015)
!6022 = !DILocation(line: 1217, column: 23, scope: !6015)
!6023 = !DILocation(line: 1217, column: 30, scope: !6015)
!6024 = !DILocation(line: 1218, column: 2, scope: !5973)
!6025 = !DILocation(line: 1220, column: 2, scope: !5973)
!6026 = !DILocation(line: 1220, column: 21, scope: !5973)
!6027 = !DILocation(line: 1220, column: 28, scope: !5973)
!6028 = !DILocation(line: 1221, column: 2, scope: !5973)
!6029 = !DILocation(line: 1222, column: 7, scope: !5973)
!6030 = !DILocation(line: 1224, column: 13, scope: !6031)
!6031 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 1224, column: 12)
!6032 = !DILocation(line: 1224, column: 19, scope: !6031)
!6033 = !DILocation(line: 1224, column: 44, scope: !6031)
!6034 = !DILocation(line: 1224, column: 60, scope: !6031)
!6035 = !DILocation(line: 1224, column: 49, scope: !6031)
!6036 = !DILocation(line: 1225, column: 5, scope: !6031)
!6037 = !DILocation(line: 1225, column: 10, scope: !6031)
!6038 = !DILocation(line: 1225, column: 19, scope: !6031)
!6039 = !DILocation(line: 1225, column: 26, scope: !6031)
!6040 = !DILocation(line: 1225, column: 29, scope: !6031)
!6041 = !DILocation(line: 1225, column: 48, scope: !6031)
!6042 = !DILocation(line: 1225, column: 55, scope: !6031)
!6043 = !DILocation(line: 1224, column: 12, scope: !5959)
!6044 = !DILocation(line: 1226, column: 50, scope: !6031)
!6045 = !DILocation(line: 1226, column: 33, scope: !6031)
!6046 = !DILocation(line: 1226, column: 5, scope: !6031)
!6047 = !DILocation(line: 1226, column: 24, scope: !6031)
!6048 = !DILocation(line: 1226, column: 31, scope: !6031)
!6049 = !DILocation(line: 1228, column: 3, scope: !5872)
!6050 = !DILocation(line: 1228, column: 12, scope: !5872)
!6051 = !DILocation(line: 1228, column: 19, scope: !5872)
!6052 = !DILocation(line: 1229, column: 1, scope: !5872)
!6053 = distinct !DISubprogram(name: "set_reg_known_value", scope: !3, file: !3, line: 1248, type: !6054, scopeLine: 1249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6054 = !DISubroutineType(types: !6055)
!6055 = !{null, !7, !1191}
!6056 = !DILocalVariable(name: "regno", arg: 1, scope: !6053, file: !3, line: 1248, type: !7)
!6057 = !DILocation(line: 1248, column: 35, scope: !6053)
!6058 = !DILocalVariable(name: "val", arg: 2, scope: !6053, file: !3, line: 1248, type: !1191)
!6059 = !DILocation(line: 1248, column: 46, scope: !6053)
!6060 = !DILocation(line: 1250, column: 7, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 1250, column: 7)
!6062 = !DILocation(line: 1250, column: 13, scope: !6061)
!6063 = !DILocation(line: 1250, column: 7, scope: !6053)
!6064 = !DILocation(line: 1252, column: 13, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 1251, column: 5)
!6066 = !DILocation(line: 1253, column: 11, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6065, file: !3, line: 1253, column: 11)
!6068 = !DILocation(line: 1253, column: 19, scope: !6067)
!6069 = !DILocation(line: 1253, column: 17, scope: !6067)
!6070 = !DILocation(line: 1253, column: 11, scope: !6065)
!6071 = !DILocation(line: 1254, column: 27, scope: !6067)
!6072 = !DILocation(line: 1254, column: 2, scope: !6067)
!6073 = !DILocation(line: 1254, column: 18, scope: !6067)
!6074 = !DILocation(line: 1254, column: 25, scope: !6067)
!6075 = !DILocation(line: 1255, column: 5, scope: !6065)
!6076 = !DILocation(line: 1256, column: 1, scope: !6053)
!6077 = distinct !DISubprogram(name: "set_reg_known_equiv_p", scope: !3, file: !3, line: 1273, type: !6078, scopeLine: 1274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6078 = !DISubroutineType(types: !6079)
!6079 = !{null, !7, !1445}
!6080 = !DILocalVariable(name: "regno", arg: 1, scope: !6077, file: !3, line: 1273, type: !7)
!6081 = !DILocation(line: 1273, column: 37, scope: !6077)
!6082 = !DILocalVariable(name: "val", arg: 2, scope: !6077, file: !3, line: 1273, type: !1445)
!6083 = !DILocation(line: 1273, column: 49, scope: !6077)
!6084 = !DILocation(line: 1275, column: 7, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !6077, file: !3, line: 1275, column: 7)
!6086 = !DILocation(line: 1275, column: 13, scope: !6085)
!6087 = !DILocation(line: 1275, column: 7, scope: !6077)
!6088 = !DILocation(line: 1277, column: 13, scope: !6089)
!6089 = distinct !DILexicalBlock(scope: !6085, file: !3, line: 1276, column: 5)
!6090 = !DILocation(line: 1278, column: 11, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6089, file: !3, line: 1278, column: 11)
!6092 = !DILocation(line: 1278, column: 19, scope: !6091)
!6093 = !DILocation(line: 1278, column: 17, scope: !6091)
!6094 = !DILocation(line: 1278, column: 11, scope: !6089)
!6095 = !DILocation(line: 1279, column: 29, scope: !6091)
!6096 = !DILocation(line: 1279, column: 2, scope: !6091)
!6097 = !DILocation(line: 1279, column: 20, scope: !6091)
!6098 = !DILocation(line: 1279, column: 27, scope: !6091)
!6099 = !DILocation(line: 1280, column: 5, scope: !6089)
!6100 = !DILocation(line: 1281, column: 1, scope: !6077)
!6101 = distinct !DISubprogram(name: "VEC_rtx_base_replace", scope: !562, file: !562, line: 200, type: !6102, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6102 = !DISubroutineType(types: !6103)
!6103 = !{!1191, !5858, !7, !1191}
!6104 = !DILocalVariable(name: "vec_", arg: 1, scope: !6101, file: !562, line: 200, type: !5858)
!6105 = !DILocation(line: 200, column: 1, scope: !6101)
!6106 = !DILocalVariable(name: "ix_", arg: 2, scope: !6101, file: !562, line: 200, type: !7)
!6107 = !DILocalVariable(name: "obj_", arg: 3, scope: !6101, file: !562, line: 200, type: !1191)
!6108 = !DILocalVariable(name: "old_obj_", scope: !6101, file: !562, line: 200, type: !1191)
!6109 = distinct !DISubprogram(name: "end_alias_analysis", scope: !3, file: !3, line: 2790, type: !5492, scopeLine: 2791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6110 = !DILocation(line: 2792, column: 24, scope: !6109)
!6111 = !DILocation(line: 2792, column: 22, scope: !6109)
!6112 = !DILocation(line: 2793, column: 13, scope: !6109)
!6113 = !DILocation(line: 2793, column: 3, scope: !6109)
!6114 = !DILocation(line: 2794, column: 19, scope: !6109)
!6115 = !DILocation(line: 2795, column: 24, scope: !6109)
!6116 = !DILocation(line: 2796, column: 9, scope: !6109)
!6117 = !DILocation(line: 2796, column: 3, scope: !6109)
!6118 = !DILocation(line: 2797, column: 21, scope: !6109)
!6119 = !DILocation(line: 2798, column: 1, scope: !6109)
!6120 = distinct !DISubprogram(name: "gt_ggc_mx_VEC_alias_set_entry_gc", scope: !2611, file: !2611, line: 23, type: !1937, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6121 = !DILocalVariable(name: "x_p", arg: 1, scope: !6120, file: !2611, line: 23, type: !1322)
!6122 = !DILocation(line: 23, column: 41, scope: !6120)
!6123 = !DILocalVariable(name: "x", scope: !6120, file: !2611, line: 25, type: !6124)
!6124 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2593)
!6125 = !DILocation(line: 25, column: 41, scope: !6120)
!6126 = !DILocation(line: 25, column: 78, scope: !6120)
!6127 = !DILocation(line: 25, column: 45, scope: !6120)
!6128 = !DILocation(line: 26, column: 7, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6120, file: !2611, line: 26, column: 7)
!6130 = !DILocation(line: 26, column: 7, scope: !6120)
!6131 = !DILocalVariable(name: "i0", scope: !6132, file: !2611, line: 29, type: !1783)
!6132 = distinct !DILexicalBlock(scope: !6133, file: !2611, line: 28, column: 7)
!6133 = distinct !DILexicalBlock(scope: !6129, file: !2611, line: 27, column: 5)
!6134 = !DILocation(line: 29, column: 16, scope: !6132)
!6135 = !DILocalVariable(name: "l0", scope: !6132, file: !2611, line: 30, type: !1783)
!6136 = !DILocation(line: 30, column: 16, scope: !6132)
!6137 = !DILocation(line: 30, column: 33, scope: !6132)
!6138 = !DILocation(line: 30, column: 36, scope: !6132)
!6139 = !DILocation(line: 30, column: 42, scope: !6132)
!6140 = !DILocation(line: 30, column: 21, scope: !6132)
!6141 = !DILocation(line: 31, column: 17, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6132, file: !2611, line: 31, column: 9)
!6143 = !DILocation(line: 31, column: 14, scope: !6142)
!6144 = !DILocation(line: 31, column: 22, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6142, file: !2611, line: 31, column: 9)
!6146 = !DILocation(line: 31, column: 28, scope: !6145)
!6147 = !DILocation(line: 31, column: 25, scope: !6145)
!6148 = !DILocation(line: 31, column: 9, scope: !6142)
!6149 = !DILocation(line: 32, column: 11, scope: !6150)
!6150 = distinct !DILexicalBlock(scope: !6145, file: !2611, line: 31, column: 38)
!6151 = !DILocation(line: 32, column: 11, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6153, file: !2611, line: 32, column: 11)
!6153 = distinct !DILexicalBlock(scope: !6150, file: !2611, line: 32, column: 11)
!6154 = !DILocation(line: 32, column: 11, scope: !6153)
!6155 = !DILocation(line: 33, column: 9, scope: !6150)
!6156 = !DILocation(line: 31, column: 34, scope: !6145)
!6157 = !DILocation(line: 31, column: 9, scope: !6145)
!6158 = distinct !{!6158, !6148, !6159}
!6159 = !DILocation(line: 33, column: 9, scope: !6142)
!6160 = !DILocation(line: 35, column: 5, scope: !6133)
!6161 = !DILocation(line: 36, column: 1, scope: !6120)
!6162 = distinct !DISubprogram(name: "gt_ggc_mx_alias_set_entry_d", scope: !2611, file: !2611, line: 39, type: !1937, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6163 = !DILocalVariable(name: "x_p", arg: 1, scope: !6162, file: !2611, line: 39, type: !1322)
!6164 = !DILocation(line: 39, column: 36, scope: !6162)
!6165 = !DILocalVariable(name: "x", scope: !6162, file: !2611, line: 41, type: !6166)
!6166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2546)
!6167 = !DILocation(line: 41, column: 36, scope: !6162)
!6168 = !DILocation(line: 41, column: 68, scope: !6162)
!6169 = !DILocation(line: 41, column: 40, scope: !6162)
!6170 = !DILocation(line: 42, column: 7, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6162, file: !2611, line: 42, column: 7)
!6172 = !DILocation(line: 42, column: 7, scope: !6162)
!6173 = !DILocation(line: 44, column: 36, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6171, file: !2611, line: 43, column: 5)
!6175 = !DILocation(line: 44, column: 39, scope: !6174)
!6176 = !DILocation(line: 44, column: 34, scope: !6174)
!6177 = !DILocation(line: 44, column: 7, scope: !6174)
!6178 = !DILocation(line: 45, column: 5, scope: !6174)
!6179 = !DILocation(line: 46, column: 1, scope: !6162)
!6180 = distinct !DISubprogram(name: "gt_pch_nx_VEC_alias_set_entry_gc", scope: !2611, file: !2611, line: 49, type: !1937, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6181 = !DILocalVariable(name: "x_p", arg: 1, scope: !6180, file: !2611, line: 49, type: !1322)
!6182 = !DILocation(line: 49, column: 41, scope: !6180)
!6183 = !DILocalVariable(name: "x", scope: !6180, file: !2611, line: 51, type: !6124)
!6184 = !DILocation(line: 51, column: 41, scope: !6180)
!6185 = !DILocation(line: 51, column: 78, scope: !6180)
!6186 = !DILocation(line: 51, column: 45, scope: !6180)
!6187 = !DILocation(line: 52, column: 27, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6180, file: !2611, line: 52, column: 7)
!6189 = !DILocation(line: 52, column: 30, scope: !6188)
!6190 = !DILocation(line: 52, column: 7, scope: !6188)
!6191 = !DILocation(line: 52, column: 7, scope: !6180)
!6192 = !DILocalVariable(name: "i0", scope: !6193, file: !2611, line: 55, type: !1783)
!6193 = distinct !DILexicalBlock(scope: !6194, file: !2611, line: 54, column: 7)
!6194 = distinct !DILexicalBlock(scope: !6188, file: !2611, line: 53, column: 5)
!6195 = !DILocation(line: 55, column: 16, scope: !6193)
!6196 = !DILocalVariable(name: "l0", scope: !6193, file: !2611, line: 56, type: !1783)
!6197 = !DILocation(line: 56, column: 16, scope: !6193)
!6198 = !DILocation(line: 56, column: 33, scope: !6193)
!6199 = !DILocation(line: 56, column: 36, scope: !6193)
!6200 = !DILocation(line: 56, column: 42, scope: !6193)
!6201 = !DILocation(line: 56, column: 21, scope: !6193)
!6202 = !DILocation(line: 57, column: 17, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6193, file: !2611, line: 57, column: 9)
!6204 = !DILocation(line: 57, column: 14, scope: !6203)
!6205 = !DILocation(line: 57, column: 22, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6203, file: !2611, line: 57, column: 9)
!6207 = !DILocation(line: 57, column: 28, scope: !6206)
!6208 = !DILocation(line: 57, column: 25, scope: !6206)
!6209 = !DILocation(line: 57, column: 9, scope: !6203)
!6210 = !DILocation(line: 58, column: 11, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6206, file: !2611, line: 57, column: 38)
!6212 = !DILocation(line: 58, column: 11, scope: !6213)
!6213 = distinct !DILexicalBlock(scope: !6214, file: !2611, line: 58, column: 11)
!6214 = distinct !DILexicalBlock(scope: !6211, file: !2611, line: 58, column: 11)
!6215 = !DILocation(line: 58, column: 11, scope: !6214)
!6216 = !DILocation(line: 59, column: 9, scope: !6211)
!6217 = !DILocation(line: 57, column: 34, scope: !6206)
!6218 = !DILocation(line: 57, column: 9, scope: !6206)
!6219 = distinct !{!6219, !6209, !6220}
!6220 = !DILocation(line: 59, column: 9, scope: !6203)
!6221 = !DILocation(line: 61, column: 5, scope: !6194)
!6222 = !DILocation(line: 62, column: 1, scope: !6180)
!6223 = distinct !DISubprogram(name: "gt_pch_p_22VEC_alias_set_entry_gc", scope: !2611, file: !2611, line: 75, type: !6224, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6224 = !DISubroutineType(types: !6225)
!6225 = !{null, !1322, !1322, !6226, !1322}
!6226 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !2615, line: 38, baseType: !1961)
!6227 = !DILocalVariable(name: "this_obj", arg: 1, scope: !6223, file: !2611, line: 75, type: !1322)
!6228 = !DILocation(line: 75, column: 59, scope: !6223)
!6229 = !DILocalVariable(name: "x_p", arg: 2, scope: !6223, file: !2611, line: 76, type: !1322)
!6230 = !DILocation(line: 76, column: 8, scope: !6223)
!6231 = !DILocalVariable(name: "op", arg: 3, scope: !6223, file: !2611, line: 77, type: !6226)
!6232 = !DILocation(line: 77, column: 39, scope: !6223)
!6233 = !DILocalVariable(name: "cookie", arg: 4, scope: !6223, file: !2611, line: 78, type: !1322)
!6234 = !DILocation(line: 78, column: 25, scope: !6223)
!6235 = !DILocalVariable(name: "x", scope: !6223, file: !2611, line: 80, type: !6124)
!6236 = !DILocation(line: 80, column: 41, scope: !6223)
!6237 = !DILocation(line: 80, column: 95, scope: !6223)
!6238 = !DILocation(line: 80, column: 62, scope: !6223)
!6239 = !DILocalVariable(name: "i0", scope: !6240, file: !2611, line: 82, type: !1783)
!6240 = distinct !DILexicalBlock(scope: !6223, file: !2611, line: 81, column: 3)
!6241 = !DILocation(line: 82, column: 12, scope: !6240)
!6242 = !DILocalVariable(name: "l0", scope: !6240, file: !2611, line: 83, type: !1783)
!6243 = !DILocation(line: 83, column: 12, scope: !6240)
!6244 = !DILocation(line: 83, column: 29, scope: !6240)
!6245 = !DILocation(line: 83, column: 32, scope: !6240)
!6246 = !DILocation(line: 83, column: 38, scope: !6240)
!6247 = !DILocation(line: 83, column: 17, scope: !6240)
!6248 = !DILocation(line: 84, column: 13, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6240, file: !2611, line: 84, column: 5)
!6250 = !DILocation(line: 84, column: 10, scope: !6249)
!6251 = !DILocation(line: 84, column: 18, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6249, file: !2611, line: 84, column: 5)
!6253 = !DILocation(line: 84, column: 24, scope: !6252)
!6254 = !DILocation(line: 84, column: 21, scope: !6252)
!6255 = !DILocation(line: 84, column: 5, scope: !6249)
!6256 = !DILocation(line: 85, column: 20, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6258, file: !2611, line: 85, column: 11)
!6258 = distinct !DILexicalBlock(scope: !6252, file: !2611, line: 84, column: 34)
!6259 = !DILocation(line: 85, column: 11, scope: !6257)
!6260 = !DILocation(line: 85, column: 26, scope: !6257)
!6261 = !DILocation(line: 85, column: 23, scope: !6257)
!6262 = !DILocation(line: 85, column: 11, scope: !6258)
!6263 = !DILocation(line: 86, column: 9, scope: !6257)
!6264 = !DILocation(line: 86, column: 17, scope: !6257)
!6265 = !DILocation(line: 86, column: 20, scope: !6257)
!6266 = !DILocation(line: 86, column: 25, scope: !6257)
!6267 = !DILocation(line: 86, column: 29, scope: !6257)
!6268 = !DILocation(line: 86, column: 15, scope: !6257)
!6269 = !DILocation(line: 86, column: 13, scope: !6257)
!6270 = !DILocation(line: 86, column: 35, scope: !6257)
!6271 = !DILocation(line: 87, column: 5, scope: !6258)
!6272 = !DILocation(line: 84, column: 30, scope: !6252)
!6273 = !DILocation(line: 84, column: 5, scope: !6252)
!6274 = distinct !{!6274, !6255, !6275}
!6275 = !DILocation(line: 87, column: 5, scope: !6249)
!6276 = !DILocation(line: 89, column: 1, scope: !6223)
!6277 = distinct !DISubprogram(name: "gt_pch_nx_alias_set_entry_d", scope: !2611, file: !2611, line: 65, type: !1937, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6278 = !DILocalVariable(name: "x_p", arg: 1, scope: !6277, file: !2611, line: 65, type: !1322)
!6279 = !DILocation(line: 65, column: 36, scope: !6277)
!6280 = !DILocalVariable(name: "x", scope: !6277, file: !2611, line: 67, type: !6166)
!6281 = !DILocation(line: 67, column: 36, scope: !6277)
!6282 = !DILocation(line: 67, column: 68, scope: !6277)
!6283 = !DILocation(line: 67, column: 40, scope: !6277)
!6284 = !DILocation(line: 68, column: 27, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6277, file: !2611, line: 68, column: 7)
!6286 = !DILocation(line: 68, column: 30, scope: !6285)
!6287 = !DILocation(line: 68, column: 7, scope: !6285)
!6288 = !DILocation(line: 68, column: 7, scope: !6277)
!6289 = !DILocation(line: 70, column: 36, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6285, file: !2611, line: 69, column: 5)
!6291 = !DILocation(line: 70, column: 39, scope: !6290)
!6292 = !DILocation(line: 70, column: 34, scope: !6290)
!6293 = !DILocation(line: 70, column: 7, scope: !6290)
!6294 = !DILocation(line: 71, column: 5, scope: !6290)
!6295 = !DILocation(line: 72, column: 1, scope: !6277)
!6296 = distinct !DISubprogram(name: "gt_pch_p_17alias_set_entry_d", scope: !2611, file: !2611, line: 92, type: !6224, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6297 = !DILocalVariable(name: "this_obj", arg: 1, scope: !6296, file: !2611, line: 92, type: !1322)
!6298 = !DILocation(line: 92, column: 54, scope: !6296)
!6299 = !DILocalVariable(name: "x_p", arg: 2, scope: !6296, file: !2611, line: 93, type: !1322)
!6300 = !DILocation(line: 93, column: 8, scope: !6296)
!6301 = !DILocalVariable(name: "op", arg: 3, scope: !6296, file: !2611, line: 94, type: !6226)
!6302 = !DILocation(line: 94, column: 39, scope: !6296)
!6303 = !DILocalVariable(name: "cookie", arg: 4, scope: !6296, file: !2611, line: 95, type: !1322)
!6304 = !DILocation(line: 95, column: 25, scope: !6296)
!6305 = !DILocalVariable(name: "x", scope: !6296, file: !2611, line: 97, type: !6166)
!6306 = !DILocation(line: 97, column: 36, scope: !6296)
!6307 = !DILocation(line: 97, column: 85, scope: !6296)
!6308 = !DILocation(line: 97, column: 57, scope: !6296)
!6309 = !DILocation(line: 98, column: 16, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6296, file: !2611, line: 98, column: 7)
!6311 = !DILocation(line: 98, column: 7, scope: !6310)
!6312 = !DILocation(line: 98, column: 22, scope: !6310)
!6313 = !DILocation(line: 98, column: 19, scope: !6310)
!6314 = !DILocation(line: 98, column: 7, scope: !6296)
!6315 = !DILocation(line: 99, column: 5, scope: !6310)
!6316 = !DILocation(line: 99, column: 13, scope: !6310)
!6317 = !DILocation(line: 99, column: 16, scope: !6310)
!6318 = !DILocation(line: 99, column: 9, scope: !6310)
!6319 = !DILocation(line: 99, column: 27, scope: !6310)
!6320 = !DILocation(line: 100, column: 1, scope: !6296)
!6321 = distinct !DISubprogram(name: "gt_ggc_ma_reg_known_value", scope: !2611, file: !2611, line: 106, type: !1937, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6322 = !DILocalVariable(name: "x_p", arg: 1, scope: !6321, file: !2611, line: 106, type: !1322)
!6323 = !DILocation(line: 106, column: 51, scope: !6321)
!6324 = !DILocation(line: 108, column: 7, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6321, file: !2611, line: 108, column: 7)
!6326 = !DILocation(line: 108, column: 23, scope: !6325)
!6327 = !DILocation(line: 108, column: 7, scope: !6321)
!6328 = !DILocalVariable(name: "i0", scope: !6329, file: !2611, line: 109, type: !1783)
!6329 = distinct !DILexicalBlock(scope: !6325, file: !2611, line: 108, column: 32)
!6330 = !DILocation(line: 109, column: 12, scope: !6329)
!6331 = !DILocation(line: 110, column: 13, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6329, file: !2611, line: 110, column: 5)
!6333 = !DILocation(line: 110, column: 10, scope: !6332)
!6334 = !DILocation(line: 110, column: 18, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6332, file: !2611, line: 110, column: 5)
!6336 = !DILocation(line: 110, column: 33, scope: !6335)
!6337 = !DILocation(line: 110, column: 24, scope: !6335)
!6338 = !DILocation(line: 110, column: 21, scope: !6335)
!6339 = !DILocation(line: 110, column: 5, scope: !6332)
!6340 = !DILocation(line: 111, column: 7, scope: !6341)
!6341 = distinct !DILexicalBlock(scope: !6335, file: !2611, line: 110, column: 62)
!6342 = !DILocation(line: 111, column: 7, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6344, file: !2611, line: 111, column: 7)
!6344 = distinct !DILexicalBlock(scope: !6341, file: !2611, line: 111, column: 7)
!6345 = !DILocation(line: 111, column: 7, scope: !6344)
!6346 = !DILocation(line: 112, column: 5, scope: !6341)
!6347 = !DILocation(line: 110, column: 58, scope: !6335)
!6348 = !DILocation(line: 110, column: 5, scope: !6335)
!6349 = distinct !{!6349, !6339, !6350}
!6350 = !DILocation(line: 112, column: 5, scope: !6332)
!6351 = !DILocation(line: 113, column: 5, scope: !6329)
!6352 = !DILocalVariable(name: "a__", scope: !6353, file: !2611, line: 113, type: !6354)
!6353 = distinct !DILexicalBlock(scope: !6329, file: !2611, line: 113, column: 5)
!6354 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1927)
!6355 = !DILocation(line: 113, column: 5, scope: !6353)
!6356 = !DILocation(line: 113, column: 5, scope: !6357)
!6357 = distinct !DILexicalBlock(scope: !6353, file: !2611, line: 113, column: 5)
!6358 = !DILocation(line: 114, column: 3, scope: !6329)
!6359 = !DILocation(line: 115, column: 1, scope: !6321)
!6360 = distinct !DISubprogram(name: "gt_pch_na_reg_known_value", scope: !2611, file: !2611, line: 137, type: !1937, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6361 = !DILocalVariable(name: "x_p", arg: 1, scope: !6360, file: !2611, line: 137, type: !1322)
!6362 = !DILocation(line: 137, column: 51, scope: !6360)
!6363 = !DILocation(line: 139, column: 7, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6360, file: !2611, line: 139, column: 7)
!6365 = !DILocation(line: 139, column: 23, scope: !6364)
!6366 = !DILocation(line: 139, column: 7, scope: !6360)
!6367 = !DILocalVariable(name: "i1", scope: !6368, file: !2611, line: 140, type: !1783)
!6368 = distinct !DILexicalBlock(scope: !6364, file: !2611, line: 139, column: 32)
!6369 = !DILocation(line: 140, column: 12, scope: !6368)
!6370 = !DILocation(line: 141, column: 13, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6368, file: !2611, line: 141, column: 5)
!6372 = !DILocation(line: 141, column: 10, scope: !6371)
!6373 = !DILocation(line: 141, column: 18, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6371, file: !2611, line: 141, column: 5)
!6375 = !DILocation(line: 141, column: 33, scope: !6374)
!6376 = !DILocation(line: 141, column: 24, scope: !6374)
!6377 = !DILocation(line: 141, column: 21, scope: !6374)
!6378 = !DILocation(line: 141, column: 5, scope: !6371)
!6379 = !DILocation(line: 142, column: 7, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6374, file: !2611, line: 141, column: 62)
!6381 = !DILocation(line: 142, column: 7, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6383, file: !2611, line: 142, column: 7)
!6383 = distinct !DILexicalBlock(scope: !6380, file: !2611, line: 142, column: 7)
!6384 = !DILocation(line: 142, column: 7, scope: !6383)
!6385 = !DILocation(line: 143, column: 5, scope: !6380)
!6386 = !DILocation(line: 141, column: 58, scope: !6374)
!6387 = !DILocation(line: 141, column: 5, scope: !6374)
!6388 = distinct !{!6388, !6378, !6389}
!6389 = !DILocation(line: 143, column: 5, scope: !6371)
!6390 = !DILocation(line: 144, column: 25, scope: !6368)
!6391 = !DILocation(line: 144, column: 5, scope: !6368)
!6392 = !DILocation(line: 145, column: 3, scope: !6368)
!6393 = !DILocation(line: 146, column: 1, scope: !6360)
!6394 = distinct !DISubprogram(name: "VEC_alias_set_entry_base_index", scope: !3, file: !3, line: 249, type: !6395, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6395 = !DISubroutineType(types: !6396)
!6396 = !{!2604, !3244, !7}
!6397 = !DILocalVariable(name: "vec_", arg: 1, scope: !6394, file: !3, line: 249, type: !3244)
!6398 = !DILocation(line: 249, column: 1, scope: !6394)
!6399 = !DILocalVariable(name: "ix_", arg: 2, scope: !6394, file: !3, line: 249, type: !7)
!6400 = !DILocation(line: 0, scope: !6394)
!6401 = distinct !DISubprogram(name: "walk_mems_2", scope: !3, file: !3, line: 449, type: !6402, scopeLine: 450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6402 = !DISubroutineType(types: !6403)
!6403 = !{!1189, !1190, !1191}
!6404 = !DILocalVariable(name: "x", arg: 1, scope: !6401, file: !3, line: 449, type: !1190)
!6405 = !DILocation(line: 449, column: 19, scope: !6401)
!6406 = !DILocalVariable(name: "mem", arg: 2, scope: !6401, file: !3, line: 449, type: !1191)
!6407 = !DILocation(line: 449, column: 26, scope: !6401)
!6408 = !DILocation(line: 451, column: 7, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6401, file: !3, line: 451, column: 7)
!6410 = !DILocation(line: 451, column: 7, scope: !6401)
!6411 = !DILocation(line: 453, column: 34, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 453, column: 11)
!6413 = distinct !DILexicalBlock(scope: !6409, file: !3, line: 452, column: 5)
!6414 = !DILocation(line: 453, column: 53, scope: !6412)
!6415 = !DILocation(line: 453, column: 11, scope: !6412)
!6416 = !DILocation(line: 453, column: 11, scope: !6413)
!6417 = !DILocation(line: 454, column: 9, scope: !6412)
!6418 = !DILocation(line: 456, column: 7, scope: !6413)
!6419 = !DILocation(line: 458, column: 3, scope: !6401)
!6420 = !DILocation(line: 459, column: 1, scope: !6401)
!6421 = distinct !DISubprogram(name: "VEC_alias_set_entry_gc_reserve", scope: !3, file: !3, line: 250, type: !6422, scopeLine: 250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6422 = !DISubroutineType(types: !6423)
!6423 = !{!1189, !3237, !1189}
!6424 = !DILocalVariable(name: "vec_", arg: 1, scope: !6421, file: !3, line: 250, type: !3237)
!6425 = !DILocation(line: 250, column: 1, scope: !6421)
!6426 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6421, file: !3, line: 250, type: !1189)
!6427 = !DILocalVariable(name: "extend", scope: !6421, file: !3, line: 250, type: !1189)
!6428 = !DILocation(line: 250, column: 1, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6421, file: !3, line: 250, column: 1)
!6430 = distinct !DISubprogram(name: "VEC_alias_set_entry_base_quick_push", scope: !3, file: !3, line: 249, type: !6431, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6431 = !DISubroutineType(types: !6432)
!6432 = !{!3236, !3326, !2604}
!6433 = !DILocalVariable(name: "vec_", arg: 1, scope: !6430, file: !3, line: 249, type: !3326)
!6434 = !DILocation(line: 249, column: 1, scope: !6430)
!6435 = !DILocalVariable(name: "obj_", arg: 2, scope: !6430, file: !3, line: 249, type: !2604)
!6436 = !DILocalVariable(name: "slot_", scope: !6430, file: !3, line: 249, type: !3236)
!6437 = distinct !DISubprogram(name: "VEC_alias_set_entry_base_space", scope: !3, file: !3, line: 249, type: !6438, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6438 = !DISubroutineType(types: !6439)
!6439 = !{!1189, !3326, !1189}
!6440 = !DILocalVariable(name: "vec_", arg: 1, scope: !6437, file: !3, line: 249, type: !3326)
!6441 = !DILocation(line: 249, column: 1, scope: !6437)
!6442 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6437, file: !3, line: 249, type: !1189)
!6443 = distinct !DISubprogram(name: "addr_side_effect_eval", scope: !3, file: !3, line: 1729, type: !6444, scopeLine: 1730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6444 = !DISubroutineType(types: !6445)
!6445 = !{!1191, !1191, !1189, !1189}
!6446 = !DILocalVariable(name: "addr", arg: 1, scope: !6443, file: !3, line: 1729, type: !1191)
!6447 = !DILocation(line: 1729, column: 28, scope: !6443)
!6448 = !DILocalVariable(name: "size", arg: 2, scope: !6443, file: !3, line: 1729, type: !1189)
!6449 = !DILocation(line: 1729, column: 38, scope: !6443)
!6450 = !DILocalVariable(name: "n_refs", arg: 3, scope: !6443, file: !3, line: 1729, type: !1189)
!6451 = !DILocation(line: 1729, column: 48, scope: !6443)
!6452 = !DILocalVariable(name: "offset", scope: !6443, file: !3, line: 1731, type: !1189)
!6453 = !DILocation(line: 1731, column: 7, scope: !6443)
!6454 = !DILocation(line: 1733, column: 11, scope: !6443)
!6455 = !DILocation(line: 1733, column: 3, scope: !6443)
!6456 = !DILocation(line: 1736, column: 17, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6443, file: !3, line: 1734, column: 5)
!6458 = !DILocation(line: 1736, column: 24, scope: !6457)
!6459 = !DILocation(line: 1736, column: 31, scope: !6457)
!6460 = !DILocation(line: 1736, column: 29, scope: !6457)
!6461 = !DILocation(line: 1736, column: 14, scope: !6457)
!6462 = !DILocation(line: 1737, column: 7, scope: !6457)
!6463 = !DILocation(line: 1739, column: 18, scope: !6457)
!6464 = !DILocation(line: 1739, column: 25, scope: !6457)
!6465 = !DILocation(line: 1739, column: 16, scope: !6457)
!6466 = !DILocation(line: 1739, column: 32, scope: !6457)
!6467 = !DILocation(line: 1739, column: 30, scope: !6457)
!6468 = !DILocation(line: 1739, column: 14, scope: !6457)
!6469 = !DILocation(line: 1740, column: 7, scope: !6457)
!6470 = !DILocation(line: 1742, column: 16, scope: !6457)
!6471 = !DILocation(line: 1742, column: 25, scope: !6457)
!6472 = !DILocation(line: 1742, column: 23, scope: !6457)
!6473 = !DILocation(line: 1742, column: 14, scope: !6457)
!6474 = !DILocation(line: 1743, column: 7, scope: !6457)
!6475 = !DILocation(line: 1745, column: 17, scope: !6457)
!6476 = !DILocation(line: 1745, column: 16, scope: !6457)
!6477 = !DILocation(line: 1745, column: 26, scope: !6457)
!6478 = !DILocation(line: 1745, column: 24, scope: !6457)
!6479 = !DILocation(line: 1745, column: 14, scope: !6457)
!6480 = !DILocation(line: 1746, column: 7, scope: !6457)
!6481 = !DILocation(line: 1749, column: 14, scope: !6457)
!6482 = !DILocation(line: 1749, column: 7, scope: !6457)
!6483 = !DILocation(line: 1752, column: 7, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6443, file: !3, line: 1752, column: 7)
!6485 = !DILocation(line: 1752, column: 7, scope: !6443)
!6486 = !DILocation(line: 1753, column: 12, scope: !6484)
!6487 = !DILocation(line: 1753, column: 10, scope: !6484)
!6488 = !DILocation(line: 1753, column: 5, scope: !6484)
!6489 = !DILocation(line: 1756, column: 12, scope: !6484)
!6490 = !DILocation(line: 1756, column: 10, scope: !6484)
!6491 = !DILocation(line: 1757, column: 21, scope: !6443)
!6492 = !DILocation(line: 1757, column: 10, scope: !6443)
!6493 = !DILocation(line: 1757, column: 8, scope: !6443)
!6494 = !DILocation(line: 1759, column: 10, scope: !6443)
!6495 = !DILocation(line: 1759, column: 3, scope: !6443)
!6496 = !DILocation(line: 1760, column: 1, scope: !6443)
!6497 = distinct !DISubprogram(name: "rtx_equal_for_memref_p", scope: !3, file: !3, line: 1334, type: !3793, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6498 = !DILocalVariable(name: "x", arg: 1, scope: !6497, file: !3, line: 1334, type: !2607)
!6499 = !DILocation(line: 1334, column: 35, scope: !6497)
!6500 = !DILocalVariable(name: "y", arg: 2, scope: !6497, file: !3, line: 1334, type: !2607)
!6501 = !DILocation(line: 1334, column: 48, scope: !6497)
!6502 = !DILocalVariable(name: "i", scope: !6497, file: !3, line: 1336, type: !1189)
!6503 = !DILocation(line: 1336, column: 7, scope: !6497)
!6504 = !DILocalVariable(name: "j", scope: !6497, file: !3, line: 1337, type: !1189)
!6505 = !DILocation(line: 1337, column: 7, scope: !6497)
!6506 = !DILocalVariable(name: "code", scope: !6497, file: !3, line: 1338, type: !561)
!6507 = !DILocation(line: 1338, column: 17, scope: !6497)
!6508 = !DILocalVariable(name: "fmt", scope: !6497, file: !3, line: 1339, type: !1217)
!6509 = !DILocation(line: 1339, column: 15, scope: !6497)
!6510 = !DILocation(line: 1341, column: 7, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1341, column: 7)
!6512 = !DILocation(line: 1341, column: 9, scope: !6511)
!6513 = !DILocation(line: 1341, column: 14, scope: !6511)
!6514 = !DILocation(line: 1341, column: 17, scope: !6511)
!6515 = !DILocation(line: 1341, column: 19, scope: !6511)
!6516 = !DILocation(line: 1341, column: 7, scope: !6497)
!6517 = !DILocation(line: 1342, column: 5, scope: !6511)
!6518 = !DILocation(line: 1343, column: 7, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1343, column: 7)
!6520 = !DILocation(line: 1343, column: 9, scope: !6519)
!6521 = !DILocation(line: 1343, column: 14, scope: !6519)
!6522 = !DILocation(line: 1343, column: 17, scope: !6519)
!6523 = !DILocation(line: 1343, column: 19, scope: !6519)
!6524 = !DILocation(line: 1343, column: 7, scope: !6497)
!6525 = !DILocation(line: 1344, column: 5, scope: !6519)
!6526 = !DILocation(line: 1346, column: 7, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1346, column: 7)
!6528 = !DILocation(line: 1346, column: 12, scope: !6527)
!6529 = !DILocation(line: 1346, column: 9, scope: !6527)
!6530 = !DILocation(line: 1346, column: 7, scope: !6497)
!6531 = !DILocation(line: 1347, column: 5, scope: !6527)
!6532 = !DILocation(line: 1349, column: 10, scope: !6497)
!6533 = !DILocation(line: 1349, column: 8, scope: !6497)
!6534 = !DILocation(line: 1351, column: 7, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1351, column: 7)
!6536 = !DILocation(line: 1351, column: 15, scope: !6535)
!6537 = !DILocation(line: 1351, column: 12, scope: !6535)
!6538 = !DILocation(line: 1351, column: 7, scope: !6497)
!6539 = !DILocation(line: 1352, column: 5, scope: !6535)
!6540 = !DILocation(line: 1357, column: 7, scope: !6541)
!6541 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1357, column: 7)
!6542 = !DILocation(line: 1357, column: 23, scope: !6541)
!6543 = !DILocation(line: 1357, column: 20, scope: !6541)
!6544 = !DILocation(line: 1357, column: 7, scope: !6497)
!6545 = !DILocation(line: 1358, column: 5, scope: !6541)
!6546 = !DILocation(line: 1361, column: 11, scope: !6497)
!6547 = !DILocation(line: 1361, column: 3, scope: !6497)
!6548 = !DILocation(line: 1364, column: 14, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1362, column: 5)
!6550 = !DILocation(line: 1364, column: 27, scope: !6549)
!6551 = !DILocation(line: 1364, column: 24, scope: !6549)
!6552 = !DILocation(line: 1364, column: 7, scope: !6549)
!6553 = !DILocation(line: 1367, column: 14, scope: !6549)
!6554 = !DILocation(line: 1367, column: 29, scope: !6549)
!6555 = !DILocation(line: 1367, column: 26, scope: !6549)
!6556 = !DILocation(line: 1367, column: 7, scope: !6549)
!6557 = !DILocation(line: 1370, column: 14, scope: !6549)
!6558 = !DILocation(line: 1370, column: 29, scope: !6549)
!6559 = !DILocation(line: 1370, column: 26, scope: !6549)
!6560 = !DILocation(line: 1370, column: 7, scope: !6549)
!6561 = !DILocation(line: 1379, column: 7, scope: !6549)
!6562 = !DILocation(line: 1382, column: 7, scope: !6549)
!6563 = !DILocation(line: 1386, column: 7, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1386, column: 7)
!6565 = !DILocation(line: 1386, column: 12, scope: !6564)
!6566 = !DILocation(line: 1386, column: 7, scope: !6497)
!6567 = !DILocation(line: 1387, column: 38, scope: !6564)
!6568 = !DILocation(line: 1387, column: 51, scope: !6564)
!6569 = !DILocation(line: 1387, column: 14, scope: !6564)
!6570 = !DILocation(line: 1388, column: 7, scope: !6564)
!6571 = !DILocation(line: 1388, column: 34, scope: !6564)
!6572 = !DILocation(line: 1388, column: 47, scope: !6564)
!6573 = !DILocation(line: 1388, column: 10, scope: !6564)
!6574 = !DILocation(line: 1389, column: 6, scope: !6564)
!6575 = !DILocation(line: 1389, column: 34, scope: !6564)
!6576 = !DILocation(line: 1389, column: 47, scope: !6564)
!6577 = !DILocation(line: 1389, column: 10, scope: !6564)
!6578 = !DILocation(line: 1390, column: 3, scope: !6564)
!6579 = !DILocation(line: 1390, column: 30, scope: !6564)
!6580 = !DILocation(line: 1390, column: 43, scope: !6564)
!6581 = !DILocation(line: 1390, column: 6, scope: !6564)
!6582 = !DILocation(line: 0, scope: !6564)
!6583 = !DILocation(line: 1387, column: 5, scope: !6564)
!6584 = !DILocation(line: 1393, column: 7, scope: !6585)
!6585 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1393, column: 7)
!6586 = !DILocation(line: 1393, column: 7, scope: !6497)
!6587 = !DILocalVariable(name: "xop0", scope: !6588, file: !3, line: 1395, type: !1191)
!6588 = distinct !DILexicalBlock(scope: !6585, file: !3, line: 1394, column: 5)
!6589 = !DILocation(line: 1395, column: 11, scope: !6588)
!6590 = !DILocation(line: 1395, column: 29, scope: !6588)
!6591 = !DILocation(line: 1395, column: 18, scope: !6588)
!6592 = !DILocalVariable(name: "yop0", scope: !6588, file: !3, line: 1396, type: !1191)
!6593 = !DILocation(line: 1396, column: 11, scope: !6588)
!6594 = !DILocation(line: 1396, column: 29, scope: !6588)
!6595 = !DILocation(line: 1396, column: 18, scope: !6588)
!6596 = !DILocalVariable(name: "yop1", scope: !6588, file: !3, line: 1397, type: !1191)
!6597 = !DILocation(line: 1397, column: 11, scope: !6588)
!6598 = !DILocation(line: 1397, column: 29, scope: !6588)
!6599 = !DILocation(line: 1397, column: 18, scope: !6588)
!6600 = !DILocation(line: 1399, column: 40, scope: !6588)
!6601 = !DILocation(line: 1399, column: 46, scope: !6588)
!6602 = !DILocation(line: 1399, column: 16, scope: !6588)
!6603 = !DILocation(line: 1400, column: 9, scope: !6588)
!6604 = !DILocation(line: 1400, column: 47, scope: !6588)
!6605 = !DILocation(line: 1400, column: 36, scope: !6588)
!6606 = !DILocation(line: 1400, column: 61, scope: !6588)
!6607 = !DILocation(line: 1400, column: 12, scope: !6588)
!6608 = !DILocation(line: 1401, column: 8, scope: !6588)
!6609 = !DILocation(line: 1401, column: 36, scope: !6588)
!6610 = !DILocation(line: 1401, column: 42, scope: !6588)
!6611 = !DILocation(line: 1401, column: 12, scope: !6588)
!6612 = !DILocation(line: 1402, column: 5, scope: !6588)
!6613 = !DILocation(line: 1402, column: 43, scope: !6588)
!6614 = !DILocation(line: 1402, column: 32, scope: !6588)
!6615 = !DILocation(line: 1402, column: 57, scope: !6588)
!6616 = !DILocation(line: 1402, column: 8, scope: !6588)
!6617 = !DILocation(line: 0, scope: !6588)
!6618 = !DILocation(line: 1399, column: 7, scope: !6588)
!6619 = !DILocation(line: 1404, column: 12, scope: !6620)
!6620 = distinct !DILexicalBlock(scope: !6585, file: !3, line: 1404, column: 12)
!6621 = !DILocation(line: 1404, column: 12, scope: !6585)
!6622 = !DILocation(line: 1406, column: 50, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 1405, column: 5)
!6624 = !DILocation(line: 1406, column: 39, scope: !6623)
!6625 = !DILocation(line: 1407, column: 22, scope: !6623)
!6626 = !DILocation(line: 1407, column: 11, scope: !6623)
!6627 = !DILocation(line: 1406, column: 15, scope: !6623)
!6628 = !DILocation(line: 1408, column: 8, scope: !6623)
!6629 = !DILocation(line: 1408, column: 46, scope: !6623)
!6630 = !DILocation(line: 1408, column: 35, scope: !6623)
!6631 = !DILocation(line: 1409, column: 18, scope: !6623)
!6632 = !DILocation(line: 1409, column: 7, scope: !6623)
!6633 = !DILocation(line: 1408, column: 11, scope: !6623)
!6634 = !DILocation(line: 0, scope: !6623)
!6635 = !DILocation(line: 1406, column: 7, scope: !6623)
!6636 = !DILocation(line: 1411, column: 12, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 1411, column: 12)
!6638 = !DILocation(line: 1411, column: 12, scope: !6620)
!6639 = !DILocation(line: 1412, column: 47, scope: !6637)
!6640 = !DILocation(line: 1412, column: 36, scope: !6637)
!6641 = !DILocation(line: 1413, column: 19, scope: !6637)
!6642 = !DILocation(line: 1413, column: 8, scope: !6637)
!6643 = !DILocation(line: 1412, column: 12, scope: !6637)
!6644 = !DILocation(line: 1412, column: 5, scope: !6637)
!6645 = !DILocation(line: 1420, column: 9, scope: !6497)
!6646 = !DILocation(line: 1420, column: 7, scope: !6497)
!6647 = !DILocation(line: 1421, column: 12, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1421, column: 3)
!6649 = !DILocation(line: 1421, column: 34, scope: !6648)
!6650 = !DILocation(line: 1421, column: 10, scope: !6648)
!6651 = !DILocation(line: 1421, column: 8, scope: !6648)
!6652 = !DILocation(line: 1421, column: 39, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 1421, column: 3)
!6654 = !DILocation(line: 1421, column: 41, scope: !6653)
!6655 = !DILocation(line: 1421, column: 3, scope: !6648)
!6656 = !DILocation(line: 1423, column: 15, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1422, column: 5)
!6658 = !DILocation(line: 1423, column: 19, scope: !6657)
!6659 = !DILocation(line: 1423, column: 7, scope: !6657)
!6660 = !DILocation(line: 1426, column: 8, scope: !6661)
!6661 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 1426, column: 8)
!6662 = distinct !DILexicalBlock(scope: !6657, file: !3, line: 1424, column: 2)
!6663 = !DILocation(line: 1426, column: 23, scope: !6661)
!6664 = !DILocation(line: 1426, column: 20, scope: !6661)
!6665 = !DILocation(line: 1426, column: 8, scope: !6662)
!6666 = !DILocation(line: 1427, column: 6, scope: !6661)
!6667 = !DILocation(line: 1428, column: 4, scope: !6662)
!6668 = !DILocation(line: 1432, column: 8, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 1432, column: 8)
!6670 = !DILocation(line: 1432, column: 26, scope: !6669)
!6671 = !DILocation(line: 1432, column: 23, scope: !6669)
!6672 = !DILocation(line: 1432, column: 8, scope: !6662)
!6673 = !DILocation(line: 1433, column: 6, scope: !6669)
!6674 = !DILocation(line: 1436, column: 11, scope: !6675)
!6675 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 1436, column: 4)
!6676 = !DILocation(line: 1436, column: 9, scope: !6675)
!6677 = !DILocation(line: 1436, column: 16, scope: !6678)
!6678 = distinct !DILexicalBlock(scope: !6675, file: !3, line: 1436, column: 4)
!6679 = !DILocation(line: 1436, column: 20, scope: !6678)
!6680 = !DILocation(line: 1436, column: 18, scope: !6678)
!6681 = !DILocation(line: 1436, column: 4, scope: !6675)
!6682 = !DILocation(line: 1437, column: 45, scope: !6683)
!6683 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 1437, column: 10)
!6684 = !DILocation(line: 1437, column: 34, scope: !6683)
!6685 = !DILocation(line: 1438, column: 17, scope: !6683)
!6686 = !DILocation(line: 1438, column: 6, scope: !6683)
!6687 = !DILocation(line: 1437, column: 10, scope: !6683)
!6688 = !DILocation(line: 1438, column: 37, scope: !6683)
!6689 = !DILocation(line: 1437, column: 10, scope: !6678)
!6690 = !DILocation(line: 1439, column: 8, scope: !6683)
!6691 = !DILocation(line: 1438, column: 40, scope: !6683)
!6692 = !DILocation(line: 1436, column: 37, scope: !6678)
!6693 = !DILocation(line: 1436, column: 4, scope: !6678)
!6694 = distinct !{!6694, !6681, !6695}
!6695 = !DILocation(line: 1439, column: 15, scope: !6675)
!6696 = !DILocation(line: 1440, column: 4, scope: !6662)
!6697 = !DILocation(line: 1443, column: 43, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 1443, column: 8)
!6699 = !DILocation(line: 1443, column: 32, scope: !6698)
!6700 = !DILocation(line: 1444, column: 22, scope: !6698)
!6701 = !DILocation(line: 1444, column: 11, scope: !6698)
!6702 = !DILocation(line: 1443, column: 8, scope: !6698)
!6703 = !DILocation(line: 1444, column: 36, scope: !6698)
!6704 = !DILocation(line: 1443, column: 8, scope: !6662)
!6705 = !DILocation(line: 1445, column: 6, scope: !6698)
!6706 = !DILocation(line: 1446, column: 4, scope: !6662)
!6707 = !DILocation(line: 1450, column: 16, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 1450, column: 8)
!6709 = !DILocation(line: 1450, column: 29, scope: !6708)
!6710 = !DILocation(line: 1450, column: 8, scope: !6708)
!6711 = !DILocation(line: 1450, column: 8, scope: !6662)
!6712 = !DILocation(line: 1451, column: 6, scope: !6708)
!6713 = !DILocation(line: 1452, column: 4, scope: !6662)
!6714 = !DILocation(line: 1456, column: 4, scope: !6662)
!6715 = !DILocation(line: 1462, column: 4, scope: !6662)
!6716 = !DILocation(line: 1463, column: 2, scope: !6662)
!6717 = !DILocation(line: 1464, column: 5, scope: !6657)
!6718 = !DILocation(line: 1421, column: 48, scope: !6653)
!6719 = !DILocation(line: 1421, column: 3, scope: !6653)
!6720 = distinct !{!6720, !6655, !6721}
!6721 = !DILocation(line: 1464, column: 5, scope: !6648)
!6722 = !DILocation(line: 1465, column: 3, scope: !6497)
!6723 = !DILocation(line: 1466, column: 1, scope: !6497)
!6724 = distinct !DISubprogram(name: "ao_ref_from_mem", scope: !3, file: !3, line: 260, type: !6725, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6725 = !DISubroutineType(types: !6726)
!6726 = !{!1445, !6727, !2607}
!6727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5172, size: 64)
!6728 = !DILocalVariable(name: "ref", arg: 1, scope: !6724, file: !3, line: 260, type: !6727)
!6729 = !DILocation(line: 260, column: 26, scope: !6724)
!6730 = !DILocalVariable(name: "mem", arg: 2, scope: !6724, file: !3, line: 260, type: !2607)
!6731 = !DILocation(line: 260, column: 41, scope: !6724)
!6732 = !DILocalVariable(name: "expr", scope: !6724, file: !3, line: 262, type: !1332)
!6733 = !DILocation(line: 262, column: 8, scope: !6724)
!6734 = !DILocation(line: 262, column: 15, scope: !6724)
!6735 = !DILocalVariable(name: "base", scope: !6724, file: !3, line: 263, type: !1332)
!6736 = !DILocation(line: 263, column: 8, scope: !6724)
!6737 = !DILocation(line: 265, column: 8, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 265, column: 7)
!6739 = !DILocation(line: 265, column: 7, scope: !6724)
!6740 = !DILocation(line: 266, column: 5, scope: !6738)
!6741 = !DILocation(line: 269, column: 8, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 269, column: 7)
!6743 = !DILocation(line: 270, column: 7, scope: !6742)
!6744 = !DILocation(line: 270, column: 11, scope: !6742)
!6745 = !DILocation(line: 269, column: 7, scope: !6724)
!6746 = !DILocation(line: 271, column: 5, scope: !6742)
!6747 = !DILocation(line: 273, column: 16, scope: !6724)
!6748 = !DILocation(line: 273, column: 21, scope: !6724)
!6749 = !DILocation(line: 273, column: 3, scope: !6724)
!6750 = !DILocation(line: 277, column: 23, scope: !6724)
!6751 = !DILocation(line: 277, column: 10, scope: !6724)
!6752 = !DILocation(line: 277, column: 8, scope: !6724)
!6753 = !DILocation(line: 278, column: 7, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 278, column: 7)
!6755 = !DILocation(line: 278, column: 12, scope: !6754)
!6756 = !DILocation(line: 278, column: 7, scope: !6724)
!6757 = !DILocation(line: 279, column: 5, scope: !6754)
!6758 = !DILocation(line: 283, column: 7, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 283, column: 7)
!6760 = !DILocation(line: 284, column: 7, scope: !6759)
!6761 = !DILocation(line: 284, column: 10, scope: !6759)
!6762 = !DILocation(line: 284, column: 45, scope: !6759)
!6763 = !DILocation(line: 283, column: 7, scope: !6724)
!6764 = !DILocation(line: 285, column: 5, scope: !6759)
!6765 = !DILocation(line: 288, column: 7, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 288, column: 7)
!6767 = !DILocation(line: 288, column: 24, scope: !6766)
!6768 = !DILocation(line: 289, column: 7, scope: !6766)
!6769 = !DILocation(line: 289, column: 10, scope: !6766)
!6770 = !DILocation(line: 289, column: 27, scope: !6766)
!6771 = !DILocation(line: 288, column: 7, scope: !6724)
!6772 = !DILocation(line: 290, column: 5, scope: !6766)
!6773 = !DILocation(line: 295, column: 7, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 295, column: 7)
!6775 = !DILocation(line: 295, column: 24, scope: !6774)
!6776 = !DILocation(line: 296, column: 7, scope: !6774)
!6777 = !DILocation(line: 296, column: 12, scope: !6774)
!6778 = !DILocation(line: 297, column: 7, scope: !6774)
!6779 = !DILocation(line: 297, column: 10, scope: !6774)
!6780 = !DILocation(line: 297, column: 16, scope: !6774)
!6781 = !DILocation(line: 297, column: 27, scope: !6774)
!6782 = !DILocation(line: 297, column: 45, scope: !6774)
!6783 = !DILocation(line: 295, column: 7, scope: !6724)
!6784 = !DILocalVariable(name: "namep", scope: !6785, file: !3, line: 299, type: !1322)
!6785 = distinct !DILexicalBlock(scope: !6774, file: !3, line: 298, column: 5)
!6786 = !DILocation(line: 299, column: 13, scope: !6785)
!6787 = !DILocation(line: 300, column: 37, scope: !6785)
!6788 = !DILocation(line: 300, column: 43, scope: !6785)
!6789 = !DILocation(line: 300, column: 54, scope: !6785)
!6790 = !DILocation(line: 300, column: 73, scope: !6785)
!6791 = !DILocation(line: 300, column: 15, scope: !6785)
!6792 = !DILocation(line: 300, column: 13, scope: !6785)
!6793 = !DILocation(line: 301, column: 11, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 301, column: 11)
!6795 = !DILocation(line: 301, column: 11, scope: !6785)
!6796 = !DILocation(line: 303, column: 41, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6794, file: !3, line: 302, column: 2)
!6798 = !DILocation(line: 303, column: 26, scope: !6797)
!6799 = !DILocation(line: 303, column: 4, scope: !6797)
!6800 = !DILocation(line: 303, column: 9, scope: !6797)
!6801 = !DILocation(line: 303, column: 24, scope: !6797)
!6802 = !DILocation(line: 304, column: 16, scope: !6797)
!6803 = !DILocation(line: 304, column: 4, scope: !6797)
!6804 = !DILocation(line: 304, column: 9, scope: !6797)
!6805 = !DILocation(line: 304, column: 14, scope: !6797)
!6806 = !DILocation(line: 305, column: 2, scope: !6797)
!6807 = !DILocation(line: 306, column: 5, scope: !6785)
!6808 = !DILocation(line: 308, column: 24, scope: !6724)
!6809 = !DILocation(line: 308, column: 3, scope: !6724)
!6810 = !DILocation(line: 308, column: 8, scope: !6724)
!6811 = !DILocation(line: 308, column: 22, scope: !6724)
!6812 = !DILocation(line: 313, column: 7, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 313, column: 7)
!6814 = !DILocation(line: 313, column: 33, scope: !6813)
!6815 = !DILocation(line: 314, column: 7, scope: !6813)
!6816 = !DILocation(line: 314, column: 12, scope: !6813)
!6817 = !DILocation(line: 314, column: 38, scope: !6813)
!6818 = !DILocation(line: 314, column: 36, scope: !6813)
!6819 = !DILocation(line: 315, column: 4, scope: !6813)
!6820 = !DILocation(line: 315, column: 24, scope: !6813)
!6821 = !DILocation(line: 315, column: 29, scope: !6813)
!6822 = !DILocation(line: 315, column: 21, scope: !6813)
!6823 = !DILocation(line: 313, column: 7, scope: !6724)
!6824 = !DILocation(line: 316, column: 5, scope: !6813)
!6825 = !DILocation(line: 318, column: 18, scope: !6724)
!6826 = !DILocation(line: 318, column: 44, scope: !6724)
!6827 = !DILocation(line: 318, column: 3, scope: !6724)
!6828 = !DILocation(line: 318, column: 8, scope: !6724)
!6829 = !DILocation(line: 318, column: 15, scope: !6724)
!6830 = !DILocation(line: 319, column: 15, scope: !6724)
!6831 = !DILocation(line: 319, column: 39, scope: !6724)
!6832 = !DILocation(line: 319, column: 3, scope: !6724)
!6833 = !DILocation(line: 319, column: 8, scope: !6724)
!6834 = !DILocation(line: 319, column: 13, scope: !6724)
!6835 = !DILocation(line: 323, column: 7, scope: !6836)
!6836 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 323, column: 7)
!6837 = !DILocation(line: 323, column: 12, scope: !6836)
!6838 = !DILocation(line: 323, column: 21, scope: !6836)
!6839 = !DILocation(line: 324, column: 7, scope: !6836)
!6840 = !DILocation(line: 324, column: 10, scope: !6836)
!6841 = !DILocation(line: 324, column: 15, scope: !6836)
!6842 = !DILocation(line: 324, column: 22, scope: !6836)
!6843 = !DILocation(line: 324, column: 27, scope: !6836)
!6844 = !DILocation(line: 324, column: 20, scope: !6836)
!6845 = !DILocation(line: 323, column: 7, scope: !6724)
!6846 = !DILocation(line: 325, column: 21, scope: !6836)
!6847 = !DILocation(line: 325, column: 26, scope: !6836)
!6848 = !DILocation(line: 325, column: 5, scope: !6836)
!6849 = !DILocation(line: 325, column: 10, scope: !6836)
!6850 = !DILocation(line: 325, column: 19, scope: !6836)
!6851 = !DILocation(line: 329, column: 7, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 329, column: 7)
!6853 = !DILocation(line: 329, column: 25, scope: !6852)
!6854 = !DILocation(line: 329, column: 22, scope: !6852)
!6855 = !DILocation(line: 330, column: 7, scope: !6852)
!6856 = !DILocation(line: 330, column: 11, scope: !6852)
!6857 = !DILocation(line: 330, column: 16, scope: !6852)
!6858 = !DILocation(line: 330, column: 23, scope: !6852)
!6859 = !DILocation(line: 331, column: 4, scope: !6852)
!6860 = !DILocation(line: 331, column: 8, scope: !6852)
!6861 = !DILocation(line: 332, column: 8, scope: !6852)
!6862 = !DILocation(line: 332, column: 28, scope: !6852)
!6863 = !DILocation(line: 332, column: 13, scope: !6852)
!6864 = !DILocation(line: 333, column: 5, scope: !6852)
!6865 = !DILocation(line: 333, column: 9, scope: !6852)
!6866 = !DILocation(line: 334, column: 36, scope: !6852)
!6867 = !DILocation(line: 334, column: 41, scope: !6852)
!6868 = !DILocation(line: 334, column: 50, scope: !6852)
!6869 = !DILocation(line: 334, column: 55, scope: !6852)
!6870 = !DILocation(line: 334, column: 48, scope: !6852)
!6871 = !DILocation(line: 334, column: 9, scope: !6852)
!6872 = !DILocation(line: 329, column: 7, scope: !6724)
!6873 = !DILocation(line: 335, column: 5, scope: !6852)
!6874 = !DILocation(line: 337, column: 3, scope: !6724)
!6875 = !DILocation(line: 338, column: 1, scope: !6724)
!6876 = distinct !DISubprogram(name: "VEC_rtx_gc_safe_grow", scope: !562, file: !562, line: 202, type: !5865, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6877 = !DILocalVariable(name: "vec_", arg: 1, scope: !6876, file: !562, line: 202, type: !5867)
!6878 = !DILocation(line: 202, column: 1, scope: !6876)
!6879 = !DILocalVariable(name: "size_", arg: 2, scope: !6876, file: !562, line: 202, type: !1189)
!6880 = !DILocation(line: 0, scope: !6876)
!6881 = distinct !DISubprogram(name: "VEC_rtx_base_address", scope: !562, file: !562, line: 200, type: !6882, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6882 = !DISubroutineType(types: !6883)
!6883 = !{!1190, !5858}
!6884 = !DILocalVariable(name: "vec_", arg: 1, scope: !6881, file: !562, line: 200, type: !5858)
!6885 = !DILocation(line: 200, column: 1, scope: !6881)
!6886 = distinct !DISubprogram(name: "VEC_rtx_gc_reserve_exact", scope: !562, file: !562, line: 202, type: !6887, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6887 = !DISubroutineType(types: !6888)
!6888 = !{!1189, !5867, !1189}
!6889 = !DILocalVariable(name: "vec_", arg: 1, scope: !6886, file: !562, line: 202, type: !5867)
!6890 = !DILocation(line: 202, column: 1, scope: !6886)
!6891 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6886, file: !562, line: 202, type: !1189)
!6892 = !DILocalVariable(name: "extend", scope: !6886, file: !562, line: 202, type: !1189)
!6893 = !DILocation(line: 202, column: 1, scope: !6894)
!6894 = distinct !DILexicalBlock(scope: !6886, file: !562, line: 202, column: 1)
!6895 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !562, file: !562, line: 200, type: !6896, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6896 = !DISubroutineType(types: !6897)
!6897 = !{!1189, !5858, !1189}
!6898 = !DILocalVariable(name: "vec_", arg: 1, scope: !6895, file: !562, line: 200, type: !5858)
!6899 = !DILocation(line: 200, column: 1, scope: !6895)
!6900 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6895, file: !562, line: 200, type: !1189)
!6901 = distinct !DISubprogram(name: "find_base_value", scope: !3, file: !3, line: 936, type: !3419, scopeLine: 937, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!6902 = !DILocalVariable(name: "src", arg: 1, scope: !6901, file: !3, line: 936, type: !1191)
!6903 = !DILocation(line: 936, column: 22, scope: !6901)
!6904 = !DILocalVariable(name: "regno", scope: !6901, file: !3, line: 938, type: !7)
!6905 = !DILocation(line: 938, column: 16, scope: !6901)
!6906 = !DILocation(line: 942, column: 9, scope: !6901)
!6907 = !DILocation(line: 942, column: 7, scope: !6901)
!6908 = !DILocation(line: 945, column: 11, scope: !6901)
!6909 = !DILocation(line: 945, column: 3, scope: !6901)
!6910 = !DILocation(line: 949, column: 14, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6901, file: !3, line: 946, column: 5)
!6912 = !DILocation(line: 949, column: 7, scope: !6911)
!6913 = !DILocation(line: 952, column: 15, scope: !6911)
!6914 = !DILocation(line: 952, column: 13, scope: !6911)
!6915 = !DILocation(line: 957, column: 11, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 957, column: 11)
!6917 = !DILocation(line: 957, column: 17, scope: !6916)
!6918 = !DILocation(line: 957, column: 41, scope: !6916)
!6919 = !DILocation(line: 957, column: 44, scope: !6916)
!6920 = !DILocation(line: 957, column: 11, scope: !6911)
!6921 = !DILocation(line: 958, column: 9, scope: !6916)
!6922 = !DILocation(line: 958, column: 28, scope: !6916)
!6923 = !DILocation(line: 958, column: 2, scope: !6916)
!6924 = !DILocation(line: 966, column: 12, scope: !6925)
!6925 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 966, column: 11)
!6926 = !DILocation(line: 966, column: 18, scope: !6925)
!6927 = !DILocation(line: 966, column: 43, scope: !6925)
!6928 = !DILocation(line: 966, column: 57, scope: !6925)
!6929 = !DILocation(line: 966, column: 46, scope: !6925)
!6930 = !DILocation(line: 967, column: 4, scope: !6925)
!6931 = !DILocation(line: 967, column: 7, scope: !6925)
!6932 = !DILocation(line: 967, column: 15, scope: !6925)
!6933 = !DILocation(line: 967, column: 13, scope: !6925)
!6934 = !DILocation(line: 966, column: 11, scope: !6911)
!6935 = !DILocation(line: 971, column: 8, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 971, column: 8)
!6937 = distinct !DILexicalBlock(scope: !6925, file: !3, line: 968, column: 2)
!6938 = !DILocation(line: 971, column: 27, scope: !6936)
!6939 = !DILocation(line: 971, column: 30, scope: !6936)
!6940 = !DILocation(line: 971, column: 49, scope: !6936)
!6941 = !DILocation(line: 972, column: 8, scope: !6936)
!6942 = !DILocation(line: 972, column: 11, scope: !6936)
!6943 = !DILocation(line: 972, column: 36, scope: !6936)
!6944 = !DILocation(line: 971, column: 8, scope: !6937)
!6945 = !DILocation(line: 973, column: 13, scope: !6936)
!6946 = !DILocation(line: 973, column: 32, scope: !6936)
!6947 = !DILocation(line: 973, column: 6, scope: !6936)
!6948 = !DILocation(line: 975, column: 8, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 975, column: 8)
!6950 = !DILocation(line: 975, column: 8, scope: !6937)
!6951 = !DILocation(line: 976, column: 13, scope: !6949)
!6952 = !DILocation(line: 976, column: 6, scope: !6949)
!6953 = !DILocation(line: 977, column: 2, scope: !6937)
!6954 = !DILocation(line: 979, column: 7, scope: !6911)
!6955 = !DILocation(line: 985, column: 11, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 985, column: 11)
!6957 = !DILocation(line: 986, column: 4, scope: !6956)
!6958 = !DILocation(line: 986, column: 8, scope: !6956)
!6959 = !DILocation(line: 986, column: 25, scope: !6956)
!6960 = !DILocation(line: 986, column: 22, scope: !6956)
!6961 = !DILocation(line: 987, column: 8, scope: !6956)
!6962 = !DILocation(line: 987, column: 12, scope: !6956)
!6963 = !DILocation(line: 987, column: 37, scope: !6956)
!6964 = !DILocation(line: 988, column: 5, scope: !6956)
!6965 = !DILocation(line: 988, column: 8, scope: !6956)
!6966 = !DILocation(line: 988, column: 35, scope: !6956)
!6967 = !DILocation(line: 988, column: 32, scope: !6956)
!6968 = !DILocation(line: 985, column: 11, scope: !6911)
!6969 = !DILocation(line: 989, column: 9, scope: !6956)
!6970 = !DILocation(line: 989, column: 2, scope: !6956)
!6971 = !DILocation(line: 990, column: 7, scope: !6911)
!6972 = !DILocation(line: 993, column: 13, scope: !6911)
!6973 = !DILocation(line: 993, column: 11, scope: !6911)
!6974 = !DILocation(line: 994, column: 11, scope: !6975)
!6975 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 994, column: 11)
!6976 = !DILocation(line: 994, column: 26, scope: !6975)
!6977 = !DILocation(line: 994, column: 34, scope: !6975)
!6978 = !DILocation(line: 994, column: 37, scope: !6975)
!6979 = !DILocation(line: 994, column: 52, scope: !6975)
!6980 = !DILocation(line: 994, column: 11, scope: !6911)
!6981 = !DILocation(line: 995, column: 2, scope: !6975)
!6982 = !DILocation(line: 994, column: 55, scope: !6975)
!6983 = !DILocalVariable(name: "temp", scope: !6984, file: !3, line: 1002, type: !1191)
!6984 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1001, column: 7)
!6985 = !DILocation(line: 1002, column: 6, scope: !6984)
!6986 = !DILocalVariable(name: "src_0", scope: !6984, file: !3, line: 1002, type: !1191)
!6987 = !DILocation(line: 1002, column: 12, scope: !6984)
!6988 = !DILocation(line: 1002, column: 20, scope: !6984)
!6989 = !DILocalVariable(name: "src_1", scope: !6984, file: !3, line: 1002, type: !1191)
!6990 = !DILocation(line: 1002, column: 35, scope: !6984)
!6991 = !DILocation(line: 1002, column: 43, scope: !6984)
!6992 = !DILocation(line: 1006, column: 6, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1006, column: 6)
!6994 = !DILocation(line: 1006, column: 20, scope: !6993)
!6995 = !DILocation(line: 1006, column: 23, scope: !6993)
!6996 = !DILocation(line: 1006, column: 6, scope: !6984)
!6997 = !DILocation(line: 1007, column: 28, scope: !6993)
!6998 = !DILocation(line: 1007, column: 11, scope: !6993)
!6999 = !DILocation(line: 1007, column: 4, scope: !6993)
!7000 = !DILocation(line: 1008, column: 6, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1008, column: 6)
!7002 = !DILocation(line: 1008, column: 20, scope: !7001)
!7003 = !DILocation(line: 1008, column: 23, scope: !7001)
!7004 = !DILocation(line: 1008, column: 6, scope: !6984)
!7005 = !DILocation(line: 1009, column: 28, scope: !7001)
!7006 = !DILocation(line: 1009, column: 11, scope: !7001)
!7007 = !DILocation(line: 1009, column: 4, scope: !7001)
!7008 = !DILocation(line: 1013, column: 6, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1013, column: 6)
!7010 = !DILocation(line: 1013, column: 6, scope: !6984)
!7011 = !DILocation(line: 1015, column: 30, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 1014, column: 4)
!7013 = !DILocation(line: 1015, column: 13, scope: !7012)
!7014 = !DILocation(line: 1015, column: 11, scope: !7012)
!7015 = !DILocation(line: 1016, column: 10, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7012, file: !3, line: 1016, column: 10)
!7017 = !DILocation(line: 1016, column: 15, scope: !7016)
!7018 = !DILocation(line: 1016, column: 10, scope: !7012)
!7019 = !DILocation(line: 1017, column: 16, scope: !7016)
!7020 = !DILocation(line: 1017, column: 14, scope: !7016)
!7021 = !DILocation(line: 1017, column: 8, scope: !7016)
!7022 = !DILocation(line: 1018, column: 4, scope: !7012)
!7023 = !DILocation(line: 1020, column: 6, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1020, column: 6)
!7025 = !DILocation(line: 1020, column: 6, scope: !6984)
!7026 = !DILocation(line: 1022, column: 30, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !7024, file: !3, line: 1021, column: 4)
!7028 = !DILocation(line: 1022, column: 13, scope: !7027)
!7029 = !DILocation(line: 1022, column: 11, scope: !7027)
!7030 = !DILocation(line: 1023, column: 10, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 1023, column: 10)
!7032 = !DILocation(line: 1023, column: 14, scope: !7031)
!7033 = !DILocation(line: 1023, column: 10, scope: !7027)
!7034 = !DILocation(line: 1024, column: 16, scope: !7031)
!7035 = !DILocation(line: 1024, column: 14, scope: !7031)
!7036 = !DILocation(line: 1024, column: 8, scope: !7031)
!7037 = !DILocation(line: 1025, column: 4, scope: !7027)
!7038 = !DILocation(line: 1030, column: 6, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1030, column: 6)
!7040 = !DILocation(line: 1030, column: 12, scope: !7039)
!7041 = !DILocation(line: 1031, column: 6, scope: !7039)
!7042 = !DILocation(line: 1031, column: 10, scope: !7039)
!7043 = !DILocation(line: 1031, column: 27, scope: !7039)
!7044 = !DILocation(line: 1032, column: 3, scope: !7039)
!7045 = !DILocation(line: 1032, column: 6, scope: !7039)
!7046 = !DILocation(line: 1032, column: 23, scope: !7039)
!7047 = !DILocation(line: 1033, column: 3, scope: !7039)
!7048 = !DILocation(line: 1033, column: 7, scope: !7039)
!7049 = !DILocation(line: 1033, column: 24, scope: !7039)
!7050 = !DILocation(line: 1034, column: 7, scope: !7039)
!7051 = !DILocation(line: 1034, column: 10, scope: !7039)
!7052 = !DILocation(line: 1034, column: 27, scope: !7039)
!7053 = !DILocation(line: 1030, column: 6, scope: !6984)
!7054 = !DILocation(line: 1035, column: 11, scope: !7039)
!7055 = !DILocation(line: 1035, column: 4, scope: !7039)
!7056 = !DILocation(line: 1037, column: 6, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1037, column: 6)
!7058 = !DILocation(line: 1037, column: 12, scope: !7057)
!7059 = !DILocation(line: 1038, column: 6, scope: !7057)
!7060 = !DILocation(line: 1038, column: 10, scope: !7057)
!7061 = !DILocation(line: 1038, column: 27, scope: !7057)
!7062 = !DILocation(line: 1039, column: 3, scope: !7057)
!7063 = !DILocation(line: 1039, column: 6, scope: !7057)
!7064 = !DILocation(line: 1039, column: 23, scope: !7057)
!7065 = !DILocation(line: 1040, column: 3, scope: !7057)
!7066 = !DILocation(line: 1040, column: 7, scope: !7057)
!7067 = !DILocation(line: 1040, column: 24, scope: !7057)
!7068 = !DILocation(line: 1041, column: 7, scope: !7057)
!7069 = !DILocation(line: 1041, column: 10, scope: !7057)
!7070 = !DILocation(line: 1041, column: 27, scope: !7057)
!7071 = !DILocation(line: 1037, column: 6, scope: !6984)
!7072 = !DILocation(line: 1042, column: 11, scope: !7057)
!7073 = !DILocation(line: 1042, column: 4, scope: !7057)
!7074 = !DILocation(line: 1047, column: 6, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 1047, column: 6)
!7076 = !DILocation(line: 1047, column: 26, scope: !7075)
!7077 = !DILocation(line: 1047, column: 29, scope: !7075)
!7078 = !DILocation(line: 1047, column: 6, scope: !6984)
!7079 = !DILocation(line: 1048, column: 28, scope: !7075)
!7080 = !DILocation(line: 1048, column: 11, scope: !7075)
!7081 = !DILocation(line: 1048, column: 4, scope: !7075)
!7082 = !DILocation(line: 1049, column: 11, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 1049, column: 11)
!7084 = !DILocation(line: 1049, column: 31, scope: !7083)
!7085 = !DILocation(line: 1049, column: 34, scope: !7083)
!7086 = !DILocation(line: 1049, column: 11, scope: !7075)
!7087 = !DILocation(line: 1050, column: 28, scope: !7083)
!7088 = !DILocation(line: 1050, column: 11, scope: !7083)
!7089 = !DILocation(line: 1050, column: 4, scope: !7083)
!7090 = !DILocation(line: 1052, column: 2, scope: !6984)
!7091 = !DILocation(line: 1058, column: 31, scope: !6911)
!7092 = !DILocation(line: 1058, column: 14, scope: !6911)
!7093 = !DILocation(line: 1058, column: 7, scope: !6911)
!7094 = !DILocation(line: 1063, column: 11, scope: !7095)
!7095 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1063, column: 11)
!7096 = !DILocation(line: 1063, column: 39, scope: !7095)
!7097 = !DILocation(line: 1063, column: 42, scope: !7095)
!7098 = !DILocation(line: 1063, column: 65, scope: !7095)
!7099 = !DILocation(line: 1063, column: 11, scope: !6911)
!7100 = !DILocation(line: 1064, column: 26, scope: !7095)
!7101 = !DILocation(line: 1064, column: 9, scope: !7095)
!7102 = !DILocation(line: 1064, column: 2, scope: !7095)
!7103 = !DILocation(line: 1065, column: 7, scope: !6911)
!7104 = !DILocation(line: 1071, column: 12, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1071, column: 11)
!7106 = !DILocation(line: 1071, column: 11, scope: !6911)
!7107 = !DILocation(line: 1072, column: 2, scope: !7105)
!7108 = !DILocation(line: 1073, column: 11, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1073, column: 11)
!7110 = !DILocation(line: 1073, column: 44, scope: !7109)
!7111 = !DILocation(line: 1073, column: 42, scope: !7109)
!7112 = !DILocation(line: 1073, column: 11, scope: !6911)
!7113 = !DILocation(line: 1074, column: 2, scope: !7109)
!7114 = !DILocation(line: 1083, column: 31, scope: !6911)
!7115 = !DILocation(line: 1083, column: 14, scope: !6911)
!7116 = !DILocation(line: 1083, column: 7, scope: !6911)
!7117 = !DILocation(line: 1090, column: 12, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1090, column: 11)
!7119 = !DILocation(line: 1090, column: 11, scope: !6911)
!7120 = !DILocation(line: 1091, column: 2, scope: !7118)
!7121 = !DILocalVariable(name: "temp", scope: !7122, file: !3, line: 1094, type: !1191)
!7122 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 1093, column: 7)
!7123 = !DILocation(line: 1094, column: 6, scope: !7122)
!7124 = !DILocation(line: 1094, column: 30, scope: !7122)
!7125 = !DILocation(line: 1094, column: 13, scope: !7122)
!7126 = !DILocation(line: 1096, column: 6, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 1096, column: 6)
!7128 = !DILocation(line: 1096, column: 11, scope: !7127)
!7129 = !DILocation(line: 1096, column: 16, scope: !7127)
!7130 = !DILocation(line: 1096, column: 19, scope: !7127)
!7131 = !DILocation(line: 1096, column: 6, scope: !7122)
!7132 = !DILocation(line: 1097, column: 11, scope: !7127)
!7133 = !DILocation(line: 1097, column: 9, scope: !7127)
!7134 = !DILocation(line: 1097, column: 4, scope: !7127)
!7135 = !DILocation(line: 1099, column: 9, scope: !7122)
!7136 = !DILocation(line: 1099, column: 2, scope: !7122)
!7137 = !DILocation(line: 1103, column: 7, scope: !6911)
!7138 = !DILocation(line: 1106, column: 3, scope: !6901)
!7139 = !DILocation(line: 1107, column: 1, scope: !6901)
!7140 = distinct !DISubprogram(name: "gt_pch_pa_reg_known_value", scope: !2611, file: !2611, line: 119, type: !6224, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2667)
!7141 = !DILocalVariable(name: "this_obj", arg: 1, scope: !7140, file: !2611, line: 119, type: !1322)
!7142 = !DILocation(line: 119, column: 63, scope: !7140)
!7143 = !DILocalVariable(name: "x_p", arg: 2, scope: !7140, file: !2611, line: 120, type: !1322)
!7144 = !DILocation(line: 120, column: 30, scope: !7140)
!7145 = !DILocalVariable(name: "op", arg: 3, scope: !7140, file: !2611, line: 121, type: !6226)
!7146 = !DILocation(line: 121, column: 44, scope: !7140)
!7147 = !DILocalVariable(name: "cookie", arg: 4, scope: !7140, file: !2611, line: 122, type: !1322)
!7148 = !DILocation(line: 122, column: 31, scope: !7140)
!7149 = !DILocation(line: 124, column: 7, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7140, file: !2611, line: 124, column: 7)
!7151 = !DILocation(line: 124, column: 23, scope: !7150)
!7152 = !DILocation(line: 124, column: 7, scope: !7140)
!7153 = !DILocalVariable(name: "i0", scope: !7154, file: !2611, line: 125, type: !1783)
!7154 = distinct !DILexicalBlock(scope: !7150, file: !2611, line: 124, column: 32)
!7155 = !DILocation(line: 125, column: 12, scope: !7154)
!7156 = !DILocation(line: 126, column: 13, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7154, file: !2611, line: 126, column: 5)
!7158 = !DILocation(line: 126, column: 10, scope: !7157)
!7159 = !DILocation(line: 126, column: 18, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7157, file: !2611, line: 126, column: 5)
!7161 = !DILocation(line: 126, column: 33, scope: !7160)
!7162 = !DILocation(line: 126, column: 24, scope: !7160)
!7163 = !DILocation(line: 126, column: 21, scope: !7160)
!7164 = !DILocation(line: 126, column: 5, scope: !7157)
!7165 = !DILocation(line: 127, column: 20, scope: !7166)
!7166 = distinct !DILexicalBlock(scope: !7167, file: !2611, line: 127, column: 11)
!7167 = distinct !DILexicalBlock(scope: !7160, file: !2611, line: 126, column: 62)
!7168 = !DILocation(line: 127, column: 11, scope: !7166)
!7169 = !DILocation(line: 127, column: 40, scope: !7166)
!7170 = !DILocation(line: 127, column: 37, scope: !7166)
!7171 = !DILocation(line: 127, column: 11, scope: !7167)
!7172 = !DILocation(line: 128, column: 9, scope: !7166)
!7173 = !DILocation(line: 128, column: 15, scope: !7166)
!7174 = !DILocation(line: 128, column: 31, scope: !7166)
!7175 = !DILocation(line: 128, column: 13, scope: !7166)
!7176 = !DILocation(line: 128, column: 37, scope: !7166)
!7177 = !DILocation(line: 129, column: 5, scope: !7167)
!7178 = !DILocation(line: 126, column: 58, scope: !7160)
!7179 = !DILocation(line: 126, column: 5, scope: !7160)
!7180 = distinct !{!7180, !7164, !7181}
!7181 = !DILocation(line: 129, column: 5, scope: !7157)
!7182 = !DILocation(line: 130, column: 39, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !7154, file: !2611, line: 130, column: 9)
!7184 = !DILocation(line: 130, column: 36, scope: !7183)
!7185 = !DILocation(line: 130, column: 9, scope: !7154)
!7186 = !DILocation(line: 131, column: 7, scope: !7183)
!7187 = !DILocation(line: 131, column: 31, scope: !7183)
!7188 = !DILocation(line: 132, column: 3, scope: !7154)
!7189 = !DILocation(line: 133, column: 1, scope: !7140)
